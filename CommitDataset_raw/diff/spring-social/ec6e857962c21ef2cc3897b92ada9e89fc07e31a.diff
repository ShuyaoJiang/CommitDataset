[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication. The authenticate URL, +	 * differs from the authorizationUrl slightly in that it does not require the user to, +	 * authorize the app multiple times. This provides a better user experience for, +	 * "Sign in with Provider" scenarios. Use of implicit grant is discouraged unless, +	 * there is no other option available. Use, +	 * {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */, +	String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication. The authenticate URL, +	 * differs from the authorizationUrl slightly in that it does not require the user to, +	 * authorize the app multiple times. This provides a better user experience for, +	 * "Sign in with Provider" scenarios. Use of implicit grant is discouraged unless, +	 * there is no other option available. Use, +	 * {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */, +	String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters) {, +		return buildAuthUrl(authorizeUrl, grantType, parameters);, +	}, +, +	public String buildAuthenticateUrl(GrantType grantType, OAuth2Parameters parameters) {, +		return authenticateUrl != null ? buildAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as "Client-side", + * and "Server-side". Use of implicit grant is discouraged unless there is no other, + * option available., + * , +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is associated, +	 * with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is associated with, +	 * the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization. Use of implicit grant, +	 * is discouraged unless there is no other option available. Use, +	 * {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization]