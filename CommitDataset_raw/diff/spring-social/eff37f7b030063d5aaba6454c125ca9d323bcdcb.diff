[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")), rs.getString("providerAccountId"));, +			args.put("providerAccountId", connection.getProviderAccountId());, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken(), connection.getProviderAccountId());, +	public List<Serializable> findAccountIdsForProviderAccountIds(String providerId, List<String> providerAccountIds) {, +		NamedParameterJdbcTemplate namedTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);, +		Map<String, Object> params = new HashMap<String, Object>(2, 1);, +		params.put("providerId", providerId);, +		params.put("providerAccountIds", providerAccountIds);, +		return namedTemplate.query("select accountId from Connection where providerId = :providerId and providerAccountId in ( :providerAccountIds )", params, new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return (Serializable) rs.getString("accountId");, +			}, +		});, +	}, +, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken", "providerAccountId"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")), rs.getString("providerAccountId"));, +			args.put("providerAccountId", connection.getProviderAccountId());, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken(), connection.getProviderAccountId());, +	public List<Serializable> findAccountIdsForProviderAccountIds(String providerId, List<String> providerAccountIds) {, +		NamedParameterJdbcTemplate namedTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);, +		Map<String, Object> params = new HashMap<String, Object>(2, 1);, +		params.put("providerId", providerId);, +		params.put("providerAccountIds", providerAccountIds);, +		return namedTemplate.query("select accountId from Connection where providerId = :providerId and providerAccountId in ( :providerAccountIds )", params, new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return (Serializable) rs.getString("accountId");, +			}, +		});, +	}, +, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken", "providerAccountId"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +		String providerAccountId = getProviderAccountId(getApi(consumerKey, consumerSecret, accessToken.getValue(), accessToken.getSecret()));, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret(), providerAccountId));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")), rs.getString("providerAccountId"));, +			args.put("providerAccountId", connection.getProviderAccountId());, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken(), connection.getProviderAccountId());, +	public List<Serializable> findAccountIdsForProviderAccountIds(String providerId, List<String> providerAccountIds) {, +		NamedParameterJdbcTemplate namedTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);, +		Map<String, Object> params = new HashMap<String, Object>(2, 1);, +		params.put("providerId", providerId);, +		params.put("providerAccountIds", providerAccountIds);, +		return namedTemplate.query("select accountId from Connection where providerId = :providerId and providerAccountId in ( :providerAccountIds )", params, new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return (Serializable) rs.getString("accountId");, +			}, +		});, +	}, +, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken", "providerAccountId"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +		String providerAccountId = getProviderAccountId(getApi(consumerKey, consumerSecret, accessToken.getValue(), accessToken.getSecret()));, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret(), providerAccountId));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +		String providerAccountId = getProviderAccountId(getApi(accessToken.getAccessToken()));, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken(), providerAccountId));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")), rs.getString("providerAccountId"));, +			args.put("providerAccountId", connection.getProviderAccountId());, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken(), connection.getProviderAccountId());, +	public List<Serializable> findAccountIdsForProviderAccountIds(String providerId, List<String> providerAccountIds) {, +		NamedParameterJdbcTemplate namedTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);, +		Map<String, Object> params = new HashMap<String, Object>(2, 1);, +		params.put("providerId", providerId);, +		params.put("providerAccountIds", providerAccountIds);, +		return namedTemplate.query("select accountId from Connection where providerId = :providerId and providerAccountId in ( :providerAccountIds )", params, new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return (Serializable) rs.getString("accountId");, +			}, +		});, +	}, +, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken", "providerAccountId"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +		String providerAccountId = getProviderAccountId(getApi(consumerKey, consumerSecret, accessToken.getValue(), accessToken.getSecret()));, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret(), providerAccountId));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +		String providerAccountId = getProviderAccountId(getApi(accessToken.getAccessToken()));, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken(), providerAccountId));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractServiceProvider.java, +	protected abstract String getProviderAccountId(S api);, +, +]