[+++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private final boolean parameterBasedClientAuthentication; , +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication., +	 * Also assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 */, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, false);, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials., +	 * Allows for client credentials to be presented to the provider via client_id and client_secret parameters. , +	 * Assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 * @param parameterBasedClientAuthentication if true, the client will be authenticated with the provider using parameters instead of HTTP Basic., +	 */, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl, boolean parameterBasedClientAuthentication) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, parameterBasedClientAuthentication);, +	}, +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param authenticateUrl the URL to redirect to when doing authentication via authorization code grant, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token, +	 */, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, false);, +	}, +	, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param authenticateUrl the URL to redirect to when doing authentication via authorization code grant, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token, +	 * @param parameterBasedClientAuthentication if true, the client will be authenticated with the provider using parameters instead of HTTP Basic., +	 */, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String authenticateUrl, String accessTokenUrl, boolean parameterBasedClientAuthentication) {, +		this.parameterBasedClientAuthentication = parameterBasedClientAuthentication;, +		if (!parameterBasedClientAuthentication) {, +			restTemplate.getInterceptors().add(new PreemptiveBasicAuthClientHttpRequestInterceptor(clientId, clientSecret));, +		}, +		if (parameterBasedClientAuthentication) {, +		}, +		if (parameterBasedClientAuthentication) {, +		}, +		ClientHttpRequestFactory requestFactory = ClientHttpRequestFactorySelector.getRequestFactory();, +		RestTemplate restTemplate = new RestTemplate(requestFactory);, +++ b/build.gradle, +    httpComponentsVersion = '4.2.1', +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private final boolean parameterBasedClientAuthentication; , +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication., +	 * Also assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 */, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, false);, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials., +	 * Allows for client credentials to be presented to the provider via client_id and client_secret parameters. , +	 * Assumes that the authorization URL is the same as the authentication URL., +	 * @param clientId the client ID, +	 * @param clientSecret the client secret, +	 * @param authorizeUrl the base URL to redirect to when doing authorization code or implicit grant authorization, +	 * @param accessTokenUrl the URL at which an authorization code, refresh token, or user credentials may be exchanged for an access token., +	 * @param parameterBasedClientAuthentication if true, the client will be authenticated with the provider using parameters instead of HTTP Basic., +	 */, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl, boolean parameterBasedClientAuthentication) {, +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl, parameterBasedClientAuthentication);, +	}, +, +	/**, +	 * Constructs an OAuth2Template for a given set of client credentials. , +	 * Assumes that those credentials will be presented to the provider using HTTP Basic authentication.]