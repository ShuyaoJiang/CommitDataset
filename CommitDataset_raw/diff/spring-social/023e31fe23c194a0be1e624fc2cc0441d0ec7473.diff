[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ReconnectFilter.java, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.util.Assert;, + * <p>Servlet filter that intercepts Spring Social {@link ApiException}s thrown in the course of a request and attempts to reconcile any connection-related, + * problems by deleting the stale/revoked connection and walking the user through the connection process to obtain a new connection.</p>, + * , + * <p>This filter handles the exceptions via the following flow:</p>, + * , + * <ul>, + * <li>If an exception is thrown, redirects to /connect/{provider ID}?reconnect=true</li>, + * </li>Handles its own redirect to /connect/{provider ID}?reconnect=true and converts the request to a POST request to {@link ConnectController} to kick of the authorization flow., + * </ul>, + * , +	/**, +	 * Creates an instance of {@link ReconnectFilter}., +	 * @param usersConnectionRepository a {@link UsersConnectionRepository} used to create a {@link ConnectionRepository} for the current user., +	 * @param userIdSource an instance of {@link UserIdSource} to obtain the current user's ID used to create a {@link ConnectionFactory}., +	 */, +		Assert.notNull(usersConnectionRepository, "UsersConnectionRepository cannot be null");, +		Assert.notNull(userIdSource, "UserIdSource cannot be null");, +	 * By default, the filter will redirect to /connect/{provider ID} with a "reconnect" query parameter., +	 * This filter also handles GET requests to that same path before submitting a POST request to {@link ConnectController} for authorization., +		return request.getContextPath() + "/connect/" + apiException.getProviderId() + "?reconnect=true" + (scopeNeeded != null ? "&scope=" + scopeNeeded : "");, +	}, +, +	/**, +	 * Determines whether or not the handled request should be converted to a POST request to {@link ConnectController} for authorization., +	 * By default, will return true if the request is a GET request for /connect/{provider ID} and there is a "reconnect" query parameter., +	 * May be overridden by a subclass to consider other criteria in deciding whether or not to convert the request., +	 * @param request the handled request., +	 * @return true if the request should be converted to a POST request to {@link ConnectController}., +	 */, +	protected boolean shouldPerformRefreshPostRequest(HttpServletRequest request) {, +		String servletPath = request.getServletPath();, +		return request.getMethod().equalsIgnoreCase("GET") && servletPath != null && servletPath.startsWith("/connect/") && request.getParameter("reconnect") != null;, +		return httpRequest.getServletPath().substring("connect/".length()+1);  // TODO: Seems hackish, +		RuntimeException ase = (ApiException) throwableAnalyzer.getFirstThrowableOfType(ApiException.class, throwableAnalyzer.determineCauseChain(e));, +		// Wrap other Exceptions in a generic RuntimeException. This should never happen because, +		// we've already covered all the possibilities for doFilter, +	/*, +	 * Request wrapper that converts existing request into a POST request to ConnectController, +	 */]