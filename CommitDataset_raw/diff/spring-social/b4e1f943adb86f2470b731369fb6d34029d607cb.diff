[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.social.facebook.support.FacebookResponseErrorHandler;, +		restTemplate.setErrorHandler(new FacebookResponseErrorHandler());, +	public String publish(String objectId, String connectionType, MultiValueMap<String, String> data) {, +		Map<String, String> response = restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);, +		return response.get("id");, +		System.out.println(restTemplate.postForObject(CONNECTION_URL, requestData, String.class, objectId, connectionType));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.social.facebook.support.FacebookResponseErrorHandler;, +		restTemplate.setErrorHandler(new FacebookResponseErrorHandler());, +	public String publish(String objectId, String connectionType, MultiValueMap<String, String> data) {, +		Map<String, String> response = restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);, +		return response.get("id");, +		System.out.println(restTemplate.postForObject(CONNECTION_URL, requestData, String.class, objectId, connectionType));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/GraphApi.java, +	/**, +	 * Fetches an object, extracting it into the type via the given {@link ResponseExtractor}., +	 * Requires appropriate permission to fetch the object., +	 * @param objectId the Facebook object's ID, +	 * @param extractor a {@link ResponseExtractor} to extract the object into a specific type., +	 * @return an Java object representing the requested Facebook object., +	 */, +	/**, +	 * Fetches connections, extracting them into a Java type via the given {@link ResponseExtractor}., +	 * Requires appropriate permission to fetch the object connection., +	 * @param objectId the ID of the object to retrieve the connections for., +	 * @param connectionType the connection type., +	 * @param extractor a {@link ResponseExtractor} to extract the connections into a specific type., +	 * @return a list of Java objects representing the Facebook objects in the connections., +	 */, +	/**, +	 * Publishes data to an object's connection., +	 * Requires appropriate permission to publish to the object connection., +	 * @param objectId the object ID to publish to., +	 * @param connectionType the connection type to publish to., +	 * @param data the data to publish to the connection., +	 * @return the ID of the newly published object., +	 */, +	String publish(String objectId, String connectionType, MultiValueMap<String, String> data);	, +	/**, +	 * Publishes data to an object's connection. , +	 * Requires appropriate permission to publish to the object connection., +	 * This differs from publish() only in that it doesn't attempt to extract the ID from the response., +	 * This is because some publish operations do not return an ID in the response., +	 * @param objectId the object ID to publish to., +	 * @param connectionType the connection type to publish to., +	 * @param data the data to publish to the connection., +	 */, +	/**, +	 * Deletes an object., +	 * Requires appropriate permission to delete the object., +	 * @param objectId the object ID, +	 */, +	/**, +	 * Deletes an object connection., +	 * Requires appropriate permission to delete the object connection., +	 * @param objectId the object ID, +	 * @param connectionType the connection type, +	 */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.social.facebook.support.FacebookResponseErrorHandler;, +		restTemplate.setErrorHandler(new FacebookResponseErrorHandler());, +	public String publish(String objectId, String connectionType, MultiValueMap<String, String> data) {, +		Map<String, String> response = restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);, +		return response.get("id");, +		System.out.println(restTemplate.postForObject(CONNECTION_URL, requestData, String.class, objectId, connectionType));, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/GraphApi.java, +	/**, +	 * Fetches an object, extracting it into the type via the given {@link ResponseExtractor}., +	 * Requires appropriate permission to fetch the object., +	 * @param objectId the Facebook object's ID, +	 * @param extractor a {@link ResponseExtractor} to extract the object into a specific type., +	 * @return an Java object representing the requested Facebook object., +	 */, +	/**, +	 * Fetches connections, extracting them into a Java type via the given {@link ResponseExtractor}., +	 * Requires appropriate permission to fetch the object connection., +	 * @param objectId the ID of the object to retrieve the connections for., +	 * @param connectionType the connection type., +	 * @param extractor a {@link ResponseExtractor} to extract the connections into a specific type., +	 * @return a list of Java objects representing the Facebook objects in the connections., +	 */, +	/**, +	 * Publishes data to an object's connection., +	 * Requires appropriate permission to publish to the object connection., +	 * @param objectId the object ID to publish to., +	 * @param connectionType the connection type to publish to., +	 * @param data the data to publish to the connection., +	 * @return the ID of the newly published object., +	 */, +	String publish(String objectId, String connectionType, MultiValueMap<String, String> data);	, +	/**, +	 * Publishes data to an object's connection. , +	 * Requires appropriate permission to publish to the object connection., +	 * This differs from publish() only in that it doesn't attempt to extract the ID from the response., +	 * This is because some publish operations do not return an ID in the response., +	 * @param objectId the object ID to publish to., +	 * @param connectionType the connection type to publish to., +	 * @param data the data to publish to the connection., +	 */]