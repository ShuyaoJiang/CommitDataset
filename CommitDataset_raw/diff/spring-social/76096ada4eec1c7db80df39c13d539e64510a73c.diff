[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.social.connect.ConnectionRepository;, +				if (!authService.getConnectionCardinality().isAuthenticatePossible()) {, +					return null;, +				}, +					return addConnection(authService, request, userId, (ConnectionData) principal);, +				}, +			}, +		}, +		return null;, +	}, +, +	protected Authentication addConnection(final SocialAuthenticationService<?> authService,, +			final HttpServletRequest request, String userId, final ConnectionData data) {, +, +		HashSet<String> userIdSet = new HashSet<String>();, +		userIdSet.add(data.getProviderUserId());, +		Set<String> connectedUserIds = usersConnectionRepository, +				.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +		if (connectedUserIds.contains(userId)) {, +			// already connected, +			return null;, +		} else if (!authService.getConnectionCardinality().isMultiUserId() && !connectedUserIds.isEmpty()) {, +			return null;, +		}, +, +		ConnectionRepository repo = usersConnectionRepository.createConnectionRepository(userId);, +, +		if (!authService.getConnectionCardinality().isMultiProviderUserId()) {, +			List<Connection<?>> connections = repo.findConnectionsToProvider(data.getProviderId());, +			if (!connections.isEmpty()) {, +				// TODO maybe throw an exception to allow UI feedback?, +				return null;, +			}, +, +		}, +, +		// add new connection, +		Connection<?> connection = authService.getConnectionFactory().createConnection(data);, +		repo.addConnection(connection);, +		throw new SocialAuthenticationRedirectException(authService.getConnectionAddedRedirectUrl(request, connection));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.HashSet;, +import java.util.Set;, +import org.springframework.social.connect.ConnectionRepository;, +				if (!authService.getConnectionCardinality().isAuthenticatePossible()) {, +					return null;, +				}, +					return addConnection(authService, request, userId, (ConnectionData) principal);, +				}, +			}, +		}, +		return null;, +	}, +, +	protected Authentication addConnection(final SocialAuthenticationService<?> authService,, +			final HttpServletRequest request, String userId, final ConnectionData data) {, +, +		HashSet<String> userIdSet = new HashSet<String>();, +		userIdSet.add(data.getProviderUserId());, +		Set<String> connectedUserIds = usersConnectionRepository, +				.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +		if (connectedUserIds.contains(userId)) {, +			// already connected, +			return null;, +		} else if (!authService.getConnectionCardinality().isMultiUserId() && !connectedUserIds.isEmpty()) {, +			return null;, +		}, +, +		ConnectionRepository repo = usersConnectionRepository.createConnectionRepository(userId);, +, +		if (!authService.getConnectionCardinality().isMultiProviderUserId()) {, +			List<Connection<?>> connections = repo.findConnectionsToProvider(data.getProviderId());, +			if (!connections.isEmpty()) {, +				// TODO maybe throw an exception to allow UI feedback?, +				return null;, +			}, +, +		}, +, +		// add new connection, +		Connection<?> connection = authService.getConnectionFactory().createConnection(data);, +		repo.addConnection(connection);, +		throw new SocialAuthenticationRedirectException(authService.getConnectionAddedRedirectUrl(request, connection));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/AbstractSocialAuthenticationService.java, +	private AuthenticationMode authenticationMode = null;, +	private ConnectionCardinality connectionCardinality = ConnectionCardinality.ONE_TO_ONE;, +	public ConnectionCardinality getConnectionCardinality() {, +		return connectionCardinality;, +	}, +, +	public void setConnectionCardinality(ConnectionCardinality connectionCardinality) {, +		if (connectionCardinality == null) {, +			throw new NullPointerException("connectionCardinality");, +		}, +		this.connectionCardinality = connectionCardinality;, +	}, +]