[+++ b/docs/src/reference/docbook/apis.xml, +			Spring Social offers interaction with Twitter's service API through the <interfacename>Twitter</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			, +Twitter twitter = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +Twitter twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Twitter</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Twitter</interfacename>:, +Connection<Twitter> connection = connectionRepository.findPrimaryConnectionToApi(Twitter.class);, +Twitter twitter = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>Twitter</interfacename> instance that is configured with the connection details received when the connection was first established., +			Once you have a <interfacename>Twitter</interfacename>, you can perform a several operations against Twitter., +			<interfacename>Twitter</interfacename> is defined as follows:, +public interface Twitter {, +			The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>Twitter</interfacename> instance has been created with credentials to perform on behalf of a user., +			<title>Twitter's Sub-APIs</title>, +			What follows is a survey of common tasks you may perform with <interfacename>Twitter</interfacename> and its sub-APIs., +TwitterProfile profile = twitter.userOperations().getUserProfile();]]>, +TwitterProfile profile = twitter.userOperations().getUserProfile("habuma");]]>, +String profileId = twitter.userOperations().getScreenName();]]>, +twitter.timelineOperations().updateStatus("Spring Social is awesome!")]]>, +twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.timelineOperations().retweet(tweetId);]]>, +List<Tweet> tweets = twitter.timelineOperations().getPublicTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getHomeTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getUserTimeline();]]>, +List<Tweet> tweets = twitter.timelineOperations().getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.timelineOperations().getMentions();]]>, +twitter.friendOperations().follow("habuma");]]>, +twitter.friendOperations().unfollow("habuma");]]>, +List<TwitterProfile> friends = twitter.friendOperations().getFriends("habuma");]]>, +List<TwitterProfile> followers = twitter.friendOperations().getFollowers("habuma");]]>, +UserList familyList = twitter.listOperations().createList(, +twitter.listOperations().addToList(familyList.getSlug(), "artnames");]]>, +twitter.listOperations().removeFromList(familyList.getSlug(), "artnames");]]>, +twitter.listOperations().subscribe("habuma", "music");]]>, +twitter.listOperations().unsubscribe("habuma", "music");]]>, +SearchResults results = twitter.searchOperations().search("#spring");]]>, +SearchResults results = twitter.searchOperations().search("#spring", 2, 10);]]>, +SearchResults results = twitter.searchOperations().search("#spring", 2, 10, 145962, 210112);]]>, +twitter.directMessageOperations().sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +List<DirectMessage> twitter.directMessageOperations().getDirectMessagesReceived();]]>, +			Spring Social's <interfacename>Facebook</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +Facebook facebook = new FacebookTemplate(accessToken);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>Facebook</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Facebook</interfacename>:, +Connection<Facebook> connection = connectionRepository.findPrimaryConnectionToApi(Facebook.class);, +Facebook facebook = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>Facebook</interfacename> instance that is configured with the connection details received when the connection was first established., +			With a <interfacename>Facebook</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user., +			Spring Social's Facebook API binding is divided into 9 sub-APIs exposes through the methods of <interfacename>Facebook</interfacename>:, +public interface Facebook extends GraphApi {, +			The sub-API interfaces returned from <interfacename>Facebook</interfacename>'s methods are described in <xref linkend="table-facebook-sub-apis" />., +			<title>Facebook's Sub-APIs</title>, +			The following sections will give an overview of common tasks that can be performed via <interfacename>Facebook</interfacename> and its sub-APIs., +				You can retrieve a user's Facebook profile data using <interfacename>Facebook</interfacename>' <methodname>getUserProfile()</methodname> method:, +FacebookProfile profile = facebook.userOperations().getUserProfile();]]>, +String profileId = facebook.userOperations().getProfileId();]]>, +String profileUrl = facebook.userOperations().getProfileUrl();]]>, +List<String> friendIds = facebook.friendOperations().getFriendIds();]]>, +FacebookProfile firstFriend = facebook.userOperations().getUserProfile(friendIds.get(0));]]>, +List<FacebookProfile> friends = facebook.friendOperations().getFriendProfiles();]]>, +List<Reference> friends = facebook.friendOperations().getFriendLists();]]>, +List<Reference> friends = facebook.friendOperations().getFriendLists("habuma");]]>, +List<Reference> friends = facebook.friendOperations().getFriendListMembers("193839228");]]>, +Reference collegeFriends = facebook.friendOperations().createFriendList("College Buddies");]]>, +facebook.friendOperations().addToFriendList(collegeFriends.getId(), "527631174");]]>, +facebook.friendOperations().removeFromFriendList(collegeFriends.getId(), "527631174");]]>, +facebook.feedOperations().updateStatus("I'm trying out Spring Social!");]]>, +facebook.feedOperations().updateStatus("I'm trying out Spring Social!", link);]]>, +List<Post> feed = facebook.feedOperations().getFeed();]]>, +List<Post> feed = facebook.feedOperations().getFeed("habuma");]]>, +			Spring Social offers integration with LinkedIn via <interfacename>LinkedIn</interfacename> and its implementation, <classname>LinkedInTemplate</classname>., +LinkedIn linkedin = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>LinkedIn</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>LinkedIn</interfacename>:, +Connection<LinkedIn> connection = connectionRepository.findPrimaryConnectionToApi(LinkedIn.class);, +LinkedIn linkedin = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>LinkedIn</interfacename> instance that is configured with the connection details received when the connection was first established., +			Once you have a <interfacename>LinkedIn</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for., +			Using Spring Social's <interfacename>TripIt</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network., +TripIt tripit = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TripIt</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TripIt</interfacename>:, +Connection<TripIt> connection = connectionRepository.findPrimaryConnectionToApi(TripIt.class);, +TripIt tripit = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>TripIt</interfacename> instance that is configured with the connection details received when the connection was first established., +			In either event, once you have a <interfacename>TripIt</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt., +				<interfacename>TripIt</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. , +			Spring Social's <interfacename>GitHub</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform., +GitHub github = new GitHubTemplate(accessToken);]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GitHub</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GitHub</interfacename>:, +Connection<GitHub> connection = connectionRepository.findPrimaryConnectionToApi(GitHub.class);, +GitHub github = connection.getApi();]]>, +			From that connection, it retrieves a <interfacename>GitHub</interfacename> instance that is configured with the connection details received when the connection was first established., +			With a <interfacename>GitHub</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. , +				To get the currently authenticated user's GitHub profile data, call <interfacename>GitHub</interfacename>'s <methodname>getUserProfile()</methodname> method:, +			Spring Social supports interaction with Gowalla through the <interfacename>Gowalla</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>., +Gowalla gowalla = new GowallaTemplate(accessToken);]]>]