[+++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/build.gradle, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile "org.springframework:spring-web:$springVersion", +        compile "org.springframework:spring-webmvc:$springVersion", +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/settings.gradle, +include 'spring-social-security', +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialConfigNamespaceTest.java, +import org.junit.Ignore;, +@Ignore, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SignInAttempts.java, +package org.springframework.social.security;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +, +import javax.servlet.http.HttpSession;, +, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionKey;, +, +/**, + * , + * @author Craig Walls, + * @author Stefan Fussennegger, + */, +class SignInAttempts {, +	, +	private static final String ATTR_SIGN_IN_ATTEMPT = SignInAttempts.class.getName();, +	, +	private Map<ConnectionKey, ConnectionData> attempts = new HashMap<ConnectionKey, ConnectionData>();, +	, +	/**, +	 * @return always <code>true</code>, +	 */, +	public static boolean add(HttpSession session, ConnectionData data) {, +		SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +		if (signInAttempts == null) {, +			session.setAttribute(ATTR_SIGN_IN_ATTEMPT, signInAttempts = new SignInAttempts()); , +		}, +		return signInAttempts.addAttempt(data);, +	}, +	, +	/**, +	 * @return unmodifiable list, +	 */, +	public static Collection<ConnectionData> get(HttpSession session) {, +		SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);]