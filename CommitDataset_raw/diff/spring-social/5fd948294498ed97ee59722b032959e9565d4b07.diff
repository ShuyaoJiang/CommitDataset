[+++ b/docs/src/reference/docbook/connecting.xml, +    <title>Creating connections with <classname>ConnectController</classname></title>, +	<constructor-arg value="http://localhost:8080/myapplication" />, +, +    <para><classname>ConnectController</classname> is constructed with three arguments:</para>, +    , +    <itemizedlist>, +        <listitem><para>A reference to an instance of a <interfacename>ServiceProviderFactory</interfacename> to assist <classname>ConnectController</classname> in obtaining service providers.</para></listitem>, +        <listitem><para>A reference to an instance of an <interfacename>AccountIdResolver</interfacename> so that <classname>ConnectController</classname> will know which application account to create connections for.</para></listitem>, +        <listitem><para>The base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para></listitem>, +    </itemizedlist>, +, +    <para><classname>ConnectController</classname> also supports a registration-then-connect flow, which is covered in <xref linkend="registration-flow"/>.</para>, +, +        <para><classname>ConnectController</classname> will respond to this request by first checking to see if a connection already exists between the user's account and Twitter. If not, then it will with a view that should offer the user an opportunity to create the connection. Otherwise, it will respond with a view to inform the user that a connection already exists.</para>, +      <para>If the application's request token were "vPyVSe"<footnote><para>This is just an example. Actual request tokens are typically much longer.</para></footnote>, then the browser would be redirected to https://twitter.com/oauth/authorize?oauth_token=vPyVSe and a page similar to the following would be displayed to the user (from Twitter)<footnote><para>If the user has not yet signed into Twitter, the authorization page will also include a username and password field for authentication into Twitter.</para></footnote>:</para>, +      <para>Thus, if the application's Facebook client ID is "0b754" and it's redirect URI is "http://www.mycoolapp.com/connect/facebook", then the browser would be redirected to <![CDATA[https://graph.facebook.com/oauth/authorize?client_id=0b754&redirect_uri=http://www.mycoolapp.com/connect/facebook]]> and Facebook would display the following authorization page to the user:</para>, +        <para>In the previous example of authorizing an application to interact with a user's Facebook profile, you notice that the application is only requesting access to the user's basic profile information. But there's much more that an application can do on behalf of a user with Facebook than simply harvest their profile data. For example, how can an application gain authorization to post to a user's Facebook wall?</para>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in a <code>verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +  <section id="registration-flow">, +      <title>Registering users with social profile data</title>, +      , +      <para>A convenient feature of many social-ready applications is the ability for a new user to register with the application, creating their new account with data extracted from one of their social network profiles. It's convenient to the user, as they won't have to enter all of their information and can be assured that the data is consistent. It's also convenient for the social application, as it can trust that some of the data has already been vetted by the social provider (such as confirming email addresses).</para>, +      , +      <para>In the connection flow described in <xref linkend="connect-controller"/>, <classname>ConnectController</classname> assumes that the user already has created an account with the application and simply wants to connect that account to one of their social network profiles. But <classname>ConnectController</classname> also supports a register-then-connect flow that enables a new user to create a new account using social profile data and then connect that account as part of the registration process.</para>, +      , +      <para>The register-then-connect flow is quite similar to the connect flow, but with a few small differences.</para>, +      , +      <orderedlist>, +          <listitem><para><code>GET /connect/{provider}/register</code> - Displays a web page showing connection status to the provider.</para></listitem>, +          <listitem><para><code>POST /connect/{provider}</code> - Initiates the register-then-connect flow.</para></listitem>, +          <listitem><para><code>GET /connect/{provider}?oauth_token={token}</code> or <code>GET /connect/{provider}?code={code}</code>- Receives the authorization callback from the provider, accepting a request token or code. After requesting an access token, the user will be redirected to a registration form with an object containing the user profile data in the request.</para></listitem>, +          <listitem><para><code>GET /connect/{provider}/register</code> - The application should redirect to this URL after a successful registration to resume the flow and complete the connection.</para></listitem>, +          <listitem><para><code>DELETE /connect/{provider}</code> - Severs a connection with the provider.</para></listitem>, +      </orderedlist>, +      , +      <para>Unlike the connect flow where step 3 both retrieves an access token from the provider and establishes the connection, step 3 in the register-then-connect flow only retrieves the access token. It cannot create the connection since the user has not yet registered and there is no account to connect with.</para>, +      , +      <para>Once <classname>ConnectController</classname> has an access token, it stores it away (in the session) and sends the user to a registration form. The view name of the registration form is derived from the provider name. If the provider name is "github", then the registration view name will be "connect/githubRegister".</para>, +      , +      <para>Before going to the registration view, however, <classname>ConnectController</classname> retrieves a user profile object from the provider and places it into the request as an attribute named "{provider}UserProfile". If the provider's name is "github", then the attribute name is "githubUserProfile". This object can be used to prepopulate the application's registration form with data from the user's social profile. The type of the profile object will vary from provider to provider and is determined by the object returned from the provider implementation's <methodname>getProviderUserProfile()</methodname> method.</para>, +      , +      <para>The application is expected to provider a controller to handler submission of the registration form and, after successful registration, redirect the browser to <classname>ConnectController</classname>'s via the "/connect/{provider}/register" URL.</para>, +      , +      <para>For example, the GitHub showcase sample has a Spring MVC controller with the following handler method to process registration form submission:</para>, +      , +      , +        <programlisting><![CDATA[@RequestMapping(value = "/signup", method = RequestMethod.POST), +   public String register(ShowcaseUser user) {, +   , +      // ... create a new account, +   , +      return "redirect:/connect/github/register";, +   }]]></programlisting>, +      , +      <para>After the account has been created, the controller redirects to "/connect/github/register", which is handled by <classname>ConnectController</classname>. <classname>ConnectController</classname> will then pull the access token from the session and use it to complete the connection between the newly created account and the user's social profile.</para>, +  </section>, +    <para>When the user clicks on the "Connect to Facebook" button, they will be presented with the following authorization dialog<footnote><para>If the user hasn't yet signed in to Facebook, they will first be prompted with a signin page by Facebook.</para></footnote>:</para>, +    ]