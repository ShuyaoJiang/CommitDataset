[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.beans.factory.InitializingBean;, +public class ConnectController implements InitializingBean {, +	private ConnectSupport connectSupport;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();, +	, +		connectSupport.setApplicationUrl(applicationUrl);, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +	/**, +			return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +		sessionStrategy.setAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE, errorMap);, +	// From InitializingBean, +	public void afterPropertiesSet() throws Exception {, +		this.connectSupport = new ConnectSupport(sessionStrategy);, +	}, +, +			sessionStrategy.setAttribute(request, DUPLICATE_CONNECTION_ATTRIBUTE, e);, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, sessionStrategy.getAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE));, +		sessionStrategy.removeAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE);, +		if (sessionStrategy.getAttribute(request, attributeName) != null) {, +			sessionStrategy.removeAttribute(request, attributeName);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.beans.factory.InitializingBean;, +public class ConnectController implements InitializingBean {, +	private ConnectSupport connectSupport;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();, +	, +		connectSupport.setApplicationUrl(applicationUrl);, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +	/**, +			return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +			Connection<?> connection = connectSupport.completeConnection(connectionFactory, request);, +			sessionStrategy.setAttribute(request, PROVIDER_ERROR_ATTRIBUTE, e);, +		sessionStrategy.setAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE, errorMap);, +	// From InitializingBean, +	public void afterPropertiesSet() throws Exception {, +		this.connectSupport = new ConnectSupport(sessionStrategy);, +	}, +, +			sessionStrategy.setAttribute(request, DUPLICATE_CONNECTION_ATTRIBUTE, e);, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, sessionStrategy.getAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE));, +		sessionStrategy.removeAttribute(request, AUTHORIZATION_ERROR_ATTRIBUTE);, +		if (sessionStrategy.getAttribute(request, attributeName) != null) {, +			sessionStrategy.removeAttribute(request, attributeName);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private SessionStrategy sessionStrategy;, +	, +	public ConnectSupport() {, +		this(new HttpSessionSessionStrategy());, +	}, +	, +	public ConnectSupport(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +		sessionStrategy.setAttribute(request, OAUTH_TOKEN_ATTRIBUTE, requestToken);, +		sessionStrategy.setAttribute(request, OAUTH2_STATE_ATTRIBUTE, state);, +		OAuthToken requestToken = (OAuthToken) sessionStrategy.getAttribute(request, OAUTH_TOKEN_ATTRIBUTE);, +		sessionStrategy.removeAttribute(request, OAUTH_TOKEN_ATTRIBUTE);, +		String state = (String) sessionStrategy.getAttribute(request, OAUTH2_STATE_ATTRIBUTE);, +		sessionStrategy.removeAttribute(request, OAUTH2_STATE_ATTRIBUTE);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.beans.factory.InitializingBean;, +public class ConnectController implements InitializingBean {, +	private ConnectSupport connectSupport;, +	private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy();, +	, +		connectSupport.setApplicationUrl(applicationUrl);, +	 * Sets a strategy to use when persisting information that is to survive past the boundaries of a request., +	 * The default strategy is to set the data as attributes in the HTTP Session., +	 * @param sessionStrategy the session strategy., +	 */, +	public void setSessionStrategy(SessionStrategy sessionStrategy) {, +		this.sessionStrategy = sessionStrategy;, +	}, +	, +	/**, +			return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));]