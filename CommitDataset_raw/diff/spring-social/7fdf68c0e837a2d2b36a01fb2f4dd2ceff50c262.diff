[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")));, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")));, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")));, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +		// transparent refresh token handling could be added here, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")));, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +		// transparent refresh token handling could be added here, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")));, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +		// transparent refresh token handling could be added here, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/Connection.java, +	public Connection(Long id, String accessToken, String secret, String refreshToken) {, +	public static Connection oauth1(String accessToken, String secret) {, +		return new Connection(null, accessToken, secret, null);, +	public static Connection oauth2(String accessToken, String refreshToken) {, +		return new Connection(null, accessToken, null, refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")));, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +		// transparent refresh token handling could be added here, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/Connection.java, +	public Connection(Long id, String accessToken, String secret, String refreshToken) {, +	public static Connection oauth1(String accessToken, String secret) {, +		return new Connection(null, accessToken, secret, null);, +	public static Connection oauth2(String accessToken, String refreshToken) {, +		return new Connection(null, accessToken, null, refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionRepository.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +		return jdbcTemplate.query("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", new RowMapper<Connection>() {, +				return new Connection(rs.getLong("id"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")));, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth1/AbstractOAuth1ServiceProvider.java, +	public AbstractOAuth1ServiceProvider(String id, ConnectionRepository connectionRepository, String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		return connect(accountId, Connection.oauth1(accessToken.getValue(), accessToken.getSecret()));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/oauth2/AbstractOAuth2ServiceProvider.java, +		return connect(accountId, Connection.oauth2(accessToken.getAccessToken(), accessToken.getRefreshToken()));, +		// transparent refresh token handling could be added here, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractServiceProvider.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/Connection.java, +	public Connection(Long id, String accessToken, String secret, String refreshToken) {, +	public static Connection oauth1(String accessToken, String secret) {, +		return new Connection(null, accessToken, secret, null);, +	public static Connection oauth2(String accessToken, String refreshToken) {, +		return new Connection(null, accessToken, null, refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionRepository.java]