[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., +	 * @return a temporary request token use for authorization and exchanged for an access token , +	 * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., +	 * @return a temporary request token use for authorization and exchanged for an access token , +	 * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + * , + * <h4>Parameter Encoding</h4>, + * , + * <p>The underlying OAuth signing algorithm assumes that query parameters are encoded as application/x-www-form-urlencoded., + * The RestTemplate methods that take String URL templates encode query parameters per RFC 3986 and not form-encoded., + * This leads to problems where certain characters are improperly encoded. Spaces, for example are encoded as %20 instead of +; , + * and an actual + sign is left unencoded (and will be interpreted as a space when decoded as if it were form-encoded).</p>, + * , + * <p>However, RestTemplate's methods that take URIs will leave the URI's parameters untouched. Therefore, when consuming a REST operation, + * with query parameters that require encoding (for example, if passing a + sign in a parameter value) you should use RestTemplate's, + * URI-based methods constructed with form-encoded parameters. See URIBuilder for a convenient way to build up such URIs.</p>, + * , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * @param additionalParameters any additional query parameters to be sent when fetching the request token. Should not be encoded., +	 * @return a temporary request token use for authorization and exchanged for an access token , +	 * @param additionalParameters any additional query parameters to be sent when fetching the access token. Should not be encoded. , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, + * , + * <h4>Parameter Encoding</h4>, + * , + * <p>The underlying OAuth signing algorithm assumes that query parameters are encoded as application/x-www-form-urlencoded., + * The RestTemplate methods that take String URL templates encode query parameters per RFC 3986 and not form-encoded., + * This leads to problems where certain characters are improperly encoded. Spaces, for example are encoded as %20 instead of +; , + * and an actual + sign is left unencoded (and will be interpreted as a space when decoded as if it were form-encoded).</p>, + * , + * <p>However, RestTemplate's methods that take URIs will leave the URI's parameters untouched. Therefore, when consuming a REST operation, + * with query parameters that require encoding (for example, if passing a + sign in a parameter value) you should use RestTemplate's, + * URI-based methods constructed with form-encoded parameters. See URIBuilder for a convenient way to build up such URIs.</p>, + * , +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	 * The elements in additionalParameters are expected to not be encoded.]