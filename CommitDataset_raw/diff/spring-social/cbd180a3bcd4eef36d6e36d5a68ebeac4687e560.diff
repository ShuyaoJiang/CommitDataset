[+++ b/build.gradle, +        compile "org.springframework:spring-web:$springVersion", +        compile "commons-codec:commons-codec:1.4", +++ b/build.gradle, +        compile "org.springframework:spring-web:$springVersion", +        compile "commons-codec:commons-codec:1.4", +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Operations.java, +++ b/build.gradle, +        compile "org.springframework:spring-web:$springVersion", +        compile "commons-codec:commons-codec:1.4", +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Operations.java, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Template.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.UUID;, +, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;, +import org.springframework.http.HttpEntity;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.ResponseEntity;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.util.UriTemplate;, +, +	private final UriTemplate authorizeUrlTemplate;, +		this.authorizeUrlTemplate = new UriTemplate(authorizeUrl);, +		Map<String, String> requestTokenParameters = new HashMap<String, String>();, +		requestTokenParameters.put("oauth_callback", callbackUrl);, +		return getTokenFromProvider(requestTokenParameters, requestTokenUrl);, +		return authorizeUrlTemplate.expand(requestToken).toString();, +		Map<String, String> accessTokenParameters = new HashMap<String, String>();, +		accessTokenParameters.put("oauth_token", requestToken.getValue());, +		accessTokenParameters.put("oauth_verifier", requestToken.getVerifier());, +		return getTokenFromProvider(accessTokenParameters, accessTokenUrl);, +	// private helpers, +	private String buildAuthorizationHeader(String targetUrl, Map<String, String> parameters, HttpMethod method,, +			String tokenSecret) {, +		String baseString = buildBaseString(targetUrl, parameters, method);, +		String signature = calculateSignature(baseString, tokenSecret);, +		String header = "OAuth ";, +		for (String key : parameters.keySet()) {, +			header += key + "=\"" + encode(parameters.get(key)) + "\", ";, +		}, +		header += "oauth_signature=\"" + encode(signature) + "\"";, +		return header;, +	}, +, +	private OAuthToken getTokenFromProvider(Map<String, String> tokenRequestParameters, String tokenUrl) {, +		Map<String, String> parameters = new HashMap<String, String>();, +		parameters.put("oauth_consumer_key", consumerKey);, +		parameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		parameters.put("oauth_timestamp", String.valueOf(System.currentTimeMillis() / 1000));, +		parameters.put("oauth_nonce", UUID.randomUUID().toString());, +		parameters.put("oauth_version", "1.0");, +		parameters.putAll(tokenRequestParameters);, +		String authHeader = buildAuthorizationHeader(tokenUrl, parameters, HttpMethod.POST, null);, +		MultiValueMap<String, String> headers = new LinkedMultiValueMap<String, String>();, +		headers.add("Authorization", authHeader);, +		HttpEntity<String> request = new HttpEntity<String>(headers);, +, +		ResponseEntity<String> response = new RestTemplate().exchange(tokenUrl, HttpMethod.POST, request, String.class);, +, +		Map<String, String> responseMap = parseResponse(response.getBody());, +		return new OAuthToken(responseMap.get("oauth_token"), responseMap.get("oauth_token_secret"));, +	}, +, +	private Map<String, String> parseResponse(String response) {, +		Map<String, String> responseMap = new HashMap<String, String>();, +		String[] responseEntries = response.split("&");, +		for (String entry : responseEntries) {, +			String[] keyValuePair = entry.split("=");, +			if (keyValuePair.length > 1) {, +				responseMap.put(keyValuePair[0], keyValuePair[1]);, +			}, +		}, +		return responseMap;, +	}, +, +	private String buildBaseString(String targetUrl, Map<String, String> parameters, HttpMethod method) {, +, +		String baseString = method.toString() + "&" + encode(targetUrl) + "&";, +		List<String> keys = new ArrayList<String>(parameters.keySet());, +		Collections.sort(keys);, +		String separator = "";, +		for (String key : keys) {, +			baseString += separator + encode(key) + "%3D" + encode(encode(parameters.get(key)));, +			separator = "%26";, +		}, +]