[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +			AccountConnectionRepository connectionRepository) {, +	public void connect(Long accountId, AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountId, getName(), accessToken,, +	public void addConnection(Long accountId, String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountId, getName(), oauthAccessToken,, +	public boolean isConnected(Long accountId) {, +		return connectionRepository.isConnected(accountId, getName());, +	public void disconnect(Long accountId) {, +		connectionRepository.disconnect(accountId, getName());, +	public S getServiceOperations(Long accountId) {, +		if (accountId == null || !isConnected(accountId)) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountId, getName());, +	public String getProviderAccountId(Long accountId) {, +		return connectionRepository.getProviderAccountId(accountId, getName());, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +			AccountConnectionRepository connectionRepository) {, +	public void connect(Long accountId, AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountId, getName(), accessToken,, +	public void addConnection(Long accountId, String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountId, getName(), oauthAccessToken,, +	public boolean isConnected(Long accountId) {, +		return connectionRepository.isConnected(accountId, getName());, +	public void disconnect(Long accountId) {, +		connectionRepository.disconnect(accountId, getName());, +	public S getServiceOperations(Long accountId) {, +		if (accountId == null || !isConnected(accountId)) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountId, getName());, +	public String getProviderAccountId(Long accountId) {, +		return connectionRepository.getProviderAccountId(accountId, getName());, +++ /dev/null, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +			AccountConnectionRepository connectionRepository) {, +	public void connect(Long accountId, AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountId, getName(), accessToken,, +	public void addConnection(Long accountId, String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountId, getName(), oauthAccessToken,, +	public boolean isConnected(Long accountId) {, +		return connectionRepository.isConnected(accountId, getName());, +	public void disconnect(Long accountId) {, +		connectionRepository.disconnect(accountId, getName());, +	public S getServiceOperations(Long accountId) {, +		if (accountId == null || !isConnected(accountId)) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountId, getName());, +	public String getProviderAccountId(Long accountId) {, +		return connectionRepository.getProviderAccountId(accountId, getName());, +++ /dev/null, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcServiceProviderFactory.java, +	public JdbcServiceProviderFactory(JdbcTemplate jdbcTemplate, StringEncryptor encryptor) {, +						implementation, ServiceProviderParameters.class, AccountConnectionRepository.class);, +				return BeanUtils.instantiateClass(constructor, parameters, connectionRepository);, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +			AccountConnectionRepository connectionRepository) {, +	public void connect(Long accountId, AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountId, getName(), accessToken,, +	public void addConnection(Long accountId, String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountId, getName(), oauthAccessToken,, +	public boolean isConnected(Long accountId) {, +		return connectionRepository.isConnected(accountId, getName());, +	public void disconnect(Long accountId) {, +		connectionRepository.disconnect(accountId, getName());, +	public S getServiceOperations(Long accountId) {, +		if (accountId == null || !isConnected(accountId)) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountId, getName());, +	public String getProviderAccountId(Long accountId) {, +		return connectionRepository.getProviderAccountId(accountId, getName());, +++ /dev/null, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcServiceProviderFactory.java, +	public JdbcServiceProviderFactory(JdbcTemplate jdbcTemplate, StringEncryptor encryptor) {, +						implementation, ServiceProviderParameters.class, AccountConnectionRepository.class);, +				return BeanUtils.instantiateClass(constructor, parameters, connectionRepository);, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/ServiceProvider.java, +	void connect(Long accountId, AuthorizedRequestToken requestToken);, +	void addConnection(Long accountId, String accessToken, String providerAccountId);, +	boolean isConnected(Long accountId);, +	S getServiceOperations(Long accountId);, +	void disconnect(Long accountId);, +	String getProviderAccountId(Long accountId);, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +			AccountConnectionRepository connectionRepository) {, +	public void connect(Long accountId, AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountId, getName(), accessToken,, +	public void addConnection(Long accountId, String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountId, getName(), oauthAccessToken,, +	public boolean isConnected(Long accountId) {, +		return connectionRepository.isConnected(accountId, getName());, +	public void disconnect(Long accountId) {, +		connectionRepository.disconnect(accountId, getName());, +	public S getServiceOperations(Long accountId) {, +		if (accountId == null || !isConnected(accountId)) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountId, getName());, +	public String getProviderAccountId(Long accountId) {, +		return connectionRepository.getProviderAccountId(accountId, getName());, +++ /dev/null, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcServiceProviderFactory.java, +	public JdbcServiceProviderFactory(JdbcTemplate jdbcTemplate, StringEncryptor encryptor) {, +						implementation, ServiceProviderParameters.class, AccountConnectionRepository.class);, +				return BeanUtils.instantiateClass(constructor, parameters, connectionRepository);, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/ServiceProvider.java, +	void connect(Long accountId, AuthorizedRequestToken requestToken);]