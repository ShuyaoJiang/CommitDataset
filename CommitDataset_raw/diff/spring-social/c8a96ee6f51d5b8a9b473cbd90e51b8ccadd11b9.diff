[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +	public String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey) {, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +	public ServiceProviderConnectionRepository createConnectionRepository(String localUserId) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +	public String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey) {, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +	public ServiceProviderConnectionRepository createConnectionRepository(String localUserId) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	private final String localUserId;, +	public JdbcServiceProviderConnectionRepository(String localUserId, JdbcTemplate jdbcTemplate, ServiceProviderConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +	public String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey) {, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +	public ServiceProviderConnectionRepository createConnectionRepository(String localUserId) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	private final String localUserId;, +	public JdbcServiceProviderConnectionRepository(String localUserId, JdbcTemplate jdbcTemplate, ServiceProviderConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create table ServiceProviderConnection (localUserId varchar not null,, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +	public String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey) {, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +	public ServiceProviderConnectionRepository createConnectionRepository(String localUserId) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	private final String localUserId;, +	public JdbcServiceProviderConnectionRepository(String localUserId, JdbcTemplate jdbcTemplate, ServiceProviderConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create table ServiceProviderConnection (localUserId varchar not null,, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +		connectionRepository = usersConnectionRepository.createConnectionRepository("1");, +		assertEquals("1", localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +	public String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey) {, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +	public ServiceProviderConnectionRepository createConnectionRepository(String localUserId) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	private final String localUserId;, +	public JdbcServiceProviderConnectionRepository(String localUserId, JdbcTemplate jdbcTemplate, ServiceProviderConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create table ServiceProviderConnection (localUserId varchar not null,, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +		connectionRepository = usersConnectionRepository.createConnectionRepository("1");, +		assertEquals("1", localUserId);, +++ b/spring-social-github/src/main/java/org/springframework/social/github/GitHubTemplate.java, +		return new GitHubUserProfile(gitHubId, username, name, location, company, blog, email, createdDate);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +	public String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey) {, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +	public ServiceProviderConnectionRepository createConnectionRepository(String localUserId) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	private final String localUserId;, +	public JdbcServiceProviderConnectionRepository(String localUserId, JdbcTemplate jdbcTemplate, ServiceProviderConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create table ServiceProviderConnection (localUserId varchar not null,, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +		connectionRepository = usersConnectionRepository.createConnectionRepository("1");, +		assertEquals("1", localUserId);, +++ b/spring-social-github/src/main/java/org/springframework/social/github/GitHubTemplate.java, +		return new GitHubUserProfile(gitHubId, username, name, location, company, blog, email, createdDate);, +++ b/spring-social-github/src/main/java/org/springframework/social/github/GitHubUserProfile.java, +			String email, Date createdDate) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey);, +	ServiceProviderConnectionRepository createConnectionRepository(String localUserId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +	public String findLocalUserIdConnectedTo(ServiceProviderConnectionKey connectionKey) {, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, connectionKey.getProviderId(), connectionKey.getProviderUserId());, +	public ServiceProviderConnectionRepository createConnectionRepository(String localUserId) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	private final String localUserId;, +	public JdbcServiceProviderConnectionRepository(String localUserId, JdbcTemplate jdbcTemplate, ServiceProviderConnectionFactoryLocator connectionFactoryLocator, TextEncryptor textEncryptor) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create table ServiceProviderConnection (localUserId varchar not null,, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +		connectionRepository = usersConnectionRepository.createConnectionRepository("1");, +		assertEquals("1", localUserId);, +++ b/spring-social-github/src/main/java/org/springframework/social/github/GitHubTemplate.java, +		return new GitHubUserProfile(gitHubId, username, name, location, company, blog, email, createdDate);]