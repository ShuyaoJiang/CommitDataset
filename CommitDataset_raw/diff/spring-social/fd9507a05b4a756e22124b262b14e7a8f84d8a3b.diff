[+++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +===============================================================================, +++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +, +-------------------------------------------------------------------------------, +To generate Eclipse metadata (.classpath and .project files), do the following:, +, + ./gradlew eclipse, +, +Once complete, you may then import the projects into Eclipse as usual:, +, + File -> Import -> Existing projects into workspace, +, +-------------------------------------------------------------------------------, +To generate IDEA metadata (.iml and .ipr files), do the following:, +, + ./gradlew idea, +, +-------------------------------------------------------------------------------, +To build the JavaDoc, do the following from within the root directory:, +, + ./gradlew :docs:api, +, +The result will be available in 'docs/build/api'., +===============================================================================, +++ b/build.gradle, +    commonsCodecVersion = '1.4', +    h2Version = '1.3.151', +    jacksonVersion = '1.7.3', +    jodaVersion = '1.6.2', +    jspApiVersion = '2.1', +    junitVersion = '4.8.2', +        compile ("commons-codec:commons-codec:$commonsCodecVersion") { optional = true }, +        testCompile "com.h2database:h2:$h2Version", +        compile ("javax.servlet.jsp:jsp-api:$jspApiVersion") { provided = true }, +++ b/README, +================================ Spring Social ===============================, +To check out the project and build from source, do the following:, +, + git clone --recursive git://git.springsource.org/spring-social/spring-social.git, + cd spring-social, + ./gradlew build, +, +Note: the --recursive switch above is important, as spring-social uses, +git submodules, which must themselves be cloned and initialized. If --recursive, +is omitted, doing so becomes a multi-step process of: , +, +git clone git://git.springsource.org/spring-social/spring-social.git, +git submodule init, +git submodule update, +]