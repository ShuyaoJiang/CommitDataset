[+++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.retweet(tweetId);]]>, +				<classname>TwitterTemplate</classname> also supports reading of tweets from one of the available Twitter timelines. , +				To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline</methodname> method:, +List<Tweet> tweets = twitter.getPublicTimeline();]]>, +List<Tweet> tweets = twitter.getHomeTimeline();]]>, +List<Tweet> tweets = twitter.getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.getMentions();]]>, +				<classname>TwitterTemplate</classname> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method., +SearchResults results = twitter.search("#spring");]]>, +SearchResults results = twitter.search("#spring", 2, 10);]]>, +SearchResults results = twitter.search("#spring", 2, 10, 145962, 210112);]]>, +				<classname>TwitterTemplate</classname>'s <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:, +twitter.sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +				<classname>TwitterTemplate</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:, +List<DirectMessage> twitter.getDirectMessagesReceived();]]>, +++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitter.retweet(tweetId);]]>, +				<classname>TwitterTemplate</classname> also supports reading of tweets from one of the available Twitter timelines. , +				To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline</methodname> method:, +List<Tweet> tweets = twitter.getPublicTimeline();]]>, +List<Tweet> tweets = twitter.getHomeTimeline();]]>, +List<Tweet> tweets = twitter.getFriendsTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline();]]>, +List<Tweet> tweets = twitter.getUserTimeline("rclarkson");]]>, +List<Tweet> tweets = twitter.getMentions();]]>, +				<classname>TwitterTemplate</classname> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method., +SearchResults results = twitter.search("#spring");]]>, +SearchResults results = twitter.search("#spring", 2, 10);]]>, +SearchResults results = twitter.search("#spring", 2, 10, 145962, 210112);]]>, +				<classname>TwitterTemplate</classname>'s <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:, +twitter.sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>, +				<classname>TwitterTemplate</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:, +List<DirectMessage> twitter.getDirectMessagesReceived();]]>, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequestFactory.java, +		if (ClassUtils.hasConstructor(ThreadSafeClientConnManager.class, new Class<?>[]{SchemeRegistry.class})) {, +++ b/docs/src/reference/docbook/apis.xml, +			Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +		</para>, +		, +		<para>, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			Other operations, such as tweeting will fail with an <classname>AccountNotConnectedException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +				To get a user's Twitter profile, call the <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitter.getUserProfile();]]>, +TwitterProfile profile = twitter.getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>getProfileId()</methodname>:, +String profileId = twitter.getProfileId();]]>, +				To post a message to Twitter using <classname>TwitterTemplate</classname> the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method:, +twitter.updateStatus("Spring Social is awesome!")]]>]