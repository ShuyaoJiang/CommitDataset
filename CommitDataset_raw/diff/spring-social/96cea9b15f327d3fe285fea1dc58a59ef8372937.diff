[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +, +public interface FacebookApi extends GraphApi {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +, +public interface FacebookApi extends GraphApi {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import java.util.List;, +import java.util.Map;, +import org.springframework.social.facebook.support.extractors.ResponseExtractor;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		userApi = new UserApiImpl(this);, +		checkinApi = new CheckinApiImpl(this);, +		friendsApi = new FriendsApiImpl(this, restTemplate);, +		feedApi = new FeedApiImpl(this);, +		commentApi = new CommentApiImpl(this);, +		likeApi = new LikeApiImpl(this);, +		eventsApi = new EventsApiImpl(this);, +		mediaApi = new MediaApiImpl(this);, +		groupApi = new GroupApiImpl(this);, +	// low-level Graph API operations, +	@SuppressWarnings("unchecked"), +	public <T> T fetchObject(String objectId, ResponseExtractor<T> extractor) {, +		return extractor.extractObject( (Map<String, Object>) restTemplate.getForObject(OBJECT_URL, Map.class, objectId));, +	}, +	, +	@SuppressWarnings("unchecked"), +	public <T> List<T> fetchConnections(String objectId, String connectionType, ResponseExtractor<T> extractor) {, +		Map<String, Object> response = restTemplate.getForObject(CONNECTION_URL, Map.class, objectId, connectionType);, +		return extractor.extractObjects((List<Map<String, Object>>) response.get("data"));, +	}, +	, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> publish(String objectId, String connectionType, MultiValueMap<String, String> data) {, +		MultiValueMap<String, String> requestData = new LinkedMultiValueMap<String, String>(data);, +		return restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);, +	}, +	, +	public void post(String objectId, String connectionType, MultiValueMap<String, String> data) {, +		MultiValueMap<String, String> requestData = new LinkedMultiValueMap<String, String>(data);, +		restTemplate.postForObject(CONNECTION_URL, requestData, String.class, objectId, connectionType);, +	}, +	, +	public void delete(String objectId) {, +		LinkedMultiValueMap<String, String> deleteRequest = new LinkedMultiValueMap<String, String>();, +		deleteRequest.set("method", "delete");, +		restTemplate.postForObject(OBJECT_URL, deleteRequest, String.class, objectId);, +	}, +	, +	public void delete(String objectId, String connectionType) {, +		LinkedMultiValueMap<String, String> deleteRequest = new LinkedMultiValueMap<String, String>();, +		deleteRequest.set("method", "delete");, +		restTemplate.postForObject(CONNECTION_URL, deleteRequest, String.class, objectId, connectionType);, +	}, +, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +, +public interface FacebookApi extends GraphApi {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import java.util.List;, +import java.util.Map;, +import org.springframework.social.facebook.support.extractors.ResponseExtractor;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		userApi = new UserApiImpl(this);, +		checkinApi = new CheckinApiImpl(this);, +		friendsApi = new FriendsApiImpl(this, restTemplate);, +		feedApi = new FeedApiImpl(this);, +		commentApi = new CommentApiImpl(this);, +		likeApi = new LikeApiImpl(this);, +		eventsApi = new EventsApiImpl(this);, +		mediaApi = new MediaApiImpl(this);, +		groupApi = new GroupApiImpl(this);, +	// low-level Graph API operations, +	@SuppressWarnings("unchecked"), +	public <T> T fetchObject(String objectId, ResponseExtractor<T> extractor) {, +		return extractor.extractObject( (Map<String, Object>) restTemplate.getForObject(OBJECT_URL, Map.class, objectId));, +	}, +	, +	@SuppressWarnings("unchecked"), +	public <T> List<T> fetchConnections(String objectId, String connectionType, ResponseExtractor<T> extractor) {, +		Map<String, Object> response = restTemplate.getForObject(CONNECTION_URL, Map.class, objectId, connectionType);, +		return extractor.extractObjects((List<Map<String, Object>>) response.get("data"));, +	}, +	, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> publish(String objectId, String connectionType, MultiValueMap<String, String> data) {, +		MultiValueMap<String, String> requestData = new LinkedMultiValueMap<String, String>(data);, +		return restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);, +	}, +	, +	public void post(String objectId, String connectionType, MultiValueMap<String, String> data) {, +		MultiValueMap<String, String> requestData = new LinkedMultiValueMap<String, String>(data);, +		restTemplate.postForObject(CONNECTION_URL, requestData, String.class, objectId, connectionType);, +	}, +	, +	public void delete(String objectId) {, +		LinkedMultiValueMap<String, String> deleteRequest = new LinkedMultiValueMap<String, String>();]