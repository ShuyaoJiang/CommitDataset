[+++ b/docs/src/reference/docbook/apis.xml, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +			Spring Social's <interfacename>FacebookApi</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +FacebookApi facebook = new FacebookTemplate(accessToken);]]>, +FacebookApi facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookApi</interfacename> created using the connection details for the given account ID. , +			With a <interfacename>FacebookApi</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. , +				You can retrieve a user's Facebook profile data using <interfacename>FacebookApi</interfacename>' <methodname>getUserProfile()</methodname> method:, +				<interfacename>FacebookApi</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method., +			Spring Social offers integration with LinkedIn via <interfacename>LinkedInApi</interfacename> and its implementation, <classname>LinkedInTemplate</classname>., +LinkedInApi linkedin = new LinkedInTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +LinkedInApi linkedin = linkedinProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, the <methodname>getServiceApi()</methodname> is asked to return a <interfacename>LinkedInApi</interfacename> instance created using connection details established using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			Once you have a <interfacename>LinkedInApi</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for., +			Using Spring Social's <interfacename>TripItApi</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network., +TripItApi tripit = new TripItTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +			If you're using Spring Social's service provider framework (as described in <xref linkend="serviceprovider"/>), you can get a <interfacename>TripItApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TripItServiceProvider</classname>'s <methodname>getConnections()</methodname> method:, +TripItApi tripit = tripitProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, <classname>TripItServiceProvider</classname> is being asked to give a <interfacename>TripItApi</interfacename> constructed using connection data established beforehand using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			In either event, once you have a <interfacename>TripItApi</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt., +				<interfacename>TripItApi</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. , +			Spring Social's <interfacename>GitHubApi</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform., +GitHubApi github = new GitHubTemplate(accessToken);]]>, +GitHubApi github = githubProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GitHubServiceProvider</classname> is being asked for a <interfacename>GitHubApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GitHubApi</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. , +				To get the currently authenticated user's GitHub profile data, call <interfacename>GitHubApi</interfacename>'s <methodname>getUserProfile()</methodname> method:, +			Spring Social supports interaction with Gowalla through the <interfacename>GowallaApi</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>., +GowallaApi gowalla = new GowallaTemplate(accessToken);]]>, +GowallaApi gowalla = gowallaProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GowallaServiceProvider</classname> is being asked for a <interfacename>GowallaApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GowallaApi</interfacename> in hand, there are a handful of operations it provides to interact with Gowalla on behalf of the user. , +				<interfacename>GowallaApi</interfacename> also allows you to learn about the user's favorite checkin spots. , +++ b/docs/src/reference/docbook/apis.xml, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +			Spring Social's <interfacename>FacebookApi</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +FacebookApi facebook = new FacebookTemplate(accessToken);]]>, +FacebookApi facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookApi</interfacename> created using the connection details for the given account ID. , +			With a <interfacename>FacebookApi</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. , +				You can retrieve a user's Facebook profile data using <interfacename>FacebookApi</interfacename>' <methodname>getUserProfile()</methodname> method:, +				<interfacename>FacebookApi</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method., +			Spring Social offers integration with LinkedIn via <interfacename>LinkedInApi</interfacename> and its implementation, <classname>LinkedInTemplate</classname>., +LinkedInApi linkedin = new LinkedInTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +LinkedInApi linkedin = linkedinProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, the <methodname>getServiceApi()</methodname> is asked to return a <interfacename>LinkedInApi</interfacename> instance created using connection details established using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			Once you have a <interfacename>LinkedInApi</interfacename> you can use it to interact with LinkedIn on behalf of the user who the access token was granted for., +			Using Spring Social's <interfacename>TripItApi</interfacename> and its implementation, <classname>TripItTemplate</classname>, you can develop applications that integrate a user's travel information and network., +TripItApi tripit = new TripItTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +			If you're using Spring Social's service provider framework (as described in <xref linkend="serviceprovider"/>), you can get a <interfacename>TripItApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TripItServiceProvider</classname>'s <methodname>getConnections()</methodname> method:, +TripItApi tripit = tripitProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			In this case, <classname>TripItServiceProvider</classname> is being asked to give a <interfacename>TripItApi</interfacename> constructed using connection data established beforehand using the service provider's <methodname>connect()</methodname> method or via <classname>ConnectController</classname>., +			In either event, once you have a <interfacename>TripItApi</interfacename>, you can use it to retrieve a user's profile and travel data from TripIt., +				<interfacename>TripItApi</interfacename>' <methodname>getUserProfile()</methodname> method is useful for retrieving the authenticated user's TripIt profile data. , +			Spring Social's <interfacename>GitHubApi</interfacename> and its implementation, <classname>GitHubTemplate</classname>, offer integration with GitHub's social platform., +GitHubApi github = new GitHubTemplate(accessToken);]]>, +GitHubApi github = githubProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GitHubServiceProvider</classname> is being asked for a <interfacename>GitHubApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GitHubApi</interfacename> in hand, there are a handful of operations it provides to interact with GitHub on behalf of the user. , +				To get the currently authenticated user's GitHub profile data, call <interfacename>GitHubApi</interfacename>'s <methodname>getUserProfile()</methodname> method:, +			Spring Social supports interaction with Gowalla through the <interfacename>GowallaApi</interfacename> interface and its implementation, <classname>GowallaTemplate</classname>., +GowallaApi gowalla = new GowallaTemplate(accessToken);]]>, +GowallaApi gowalla = gowallaProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>GowallaServiceProvider</classname> is being asked for a <interfacename>GowallaApi</interfacename> that was created using the connection details for the given account ID. , +			With a <interfacename>GowallaApi</interfacename> in hand, there are a handful of operations it provides to interact with Gowalla on behalf of the user. , +				<interfacename>GowallaApi</interfacename> also allows you to learn about the user's favorite checkin spots. , +++ b/docs/src/reference/docbook/connecting.xml, +				The last thing that <classname>ConnectController</classname> does is to hand off the access token to the <interfacename>ServiceProvider</interfacename> implementation to be stored for future use., +import org.springframework.social.twitter.TwitterApi;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterApi> {, +    public void preConnect(ServiceProvider<TwitterApi> provider, WebRequest request) {, +    public void postConnect(ServiceProvider<TwitterApi> provider, ServiceProviderConnection<TwitterApi> connection, WebRequest request) {, +			In the example given here, only connections made through a service provider whose operation type is <interfacename>TwitterApi</interfacename> will trigger the interceptor's methods., +++ b/docs/src/reference/docbook/apis.xml, +			Spring Social's <classname>TwitterTemplate</classname> (which implements <interfacename>TwitterApi</interfacename>) offers several options for applications to integrate with Twitter., +TwitterApi twitter = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitter = new TwitterTemplate();]]>, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>TwitterServiceProvider</classname>'s <methodname>getConnections()</methodname> method. , +TwitterApi twitter = twitterProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>TwitterServiceProvider</classname> is being asked for a <interfacename>TwitterApi</interfacename> that was created using connection details established previously via the service provider's <methodname>connect()</methodname> method or through <classname>ConnectController</classname>., +			Once you have <interfacename>TwitterApi</interfacename>, you can perform a variety of operations against Twitter., +			Spring Social's <interfacename>FacebookApi</interfacename> and its implementation, <classname>FacebookTemplate</classname> provide the operations needed to interact with Facebook on behalf of a user., +FacebookApi facebook = new FacebookTemplate(accessToken);]]>, +FacebookApi facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]>, +			Here, <classname>FacebookServiceProvider</classname> is being asked to give back a <interfacename>FacebookApi</interfacename> created using the connection details for the given account ID. , +			With a <interfacename>FacebookApi</interfacename> in hand, there are several ways you can use it to interact with Facebook on behalf of the user. , +				You can retrieve a user's Facebook profile data using <interfacename>FacebookApi</interfacename>' <methodname>getUserProfile()</methodname> method:, +				<interfacename>FacebookApi</interfacename> enables arbitrary publication via the Graph API with its <methodname>publish()</methodname> method.]