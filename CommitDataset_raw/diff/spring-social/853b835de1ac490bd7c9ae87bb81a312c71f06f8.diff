[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +/**, + * A Map-based registry for {@link ServiceProviderConnectionFactory service provider connection factories}., + * Implements {@link ServiceProviderConnectionFactoryLocator} for locating registered factory instances., + * @author Keith Donald, + */, +	/**, +	 * Set the group of service provider connection factories registered in this registry., +	 * JavaBean setter that allows for this object to be more easily configured by tools., +	 * For programmatic configuration, prefer {@link #addConnectionFactory(ServiceProviderConnectionFactory)}., +	 * @param connectionFactories the set of connection factories to register, +	 */, +	/**, +	 * Add a {@link ServiceProviderConnectionFactory} to this registry., +	 * @param connectionFactory the connection factory, +	 */, +	// implementing ServiceProviderConnectionFactoryLocator, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +/**, + * A Map-based registry for {@link ServiceProviderConnectionFactory service provider connection factories}., + * Implements {@link ServiceProviderConnectionFactoryLocator} for locating registered factory instances., + * @author Keith Donald, + */, +	/**, +	 * Set the group of service provider connection factories registered in this registry., +	 * JavaBean setter that allows for this object to be more easily configured by tools., +	 * For programmatic configuration, prefer {@link #addConnectionFactory(ServiceProviderConnectionFactory)}., +	 * @param connectionFactories the set of connection factories to register, +	 */, +	/**, +	 * Add a {@link ServiceProviderConnectionFactory} to this registry., +	 * @param connectionFactory the connection factory, +	 */, +	// implementing ServiceProviderConnectionFactoryLocator, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1ServiceProviderConnection.java, +/**, + * An OAuth1-based ServiceProviderConnection implementation., + * In general, this implementation is expected to be suitable for all OAuth1-based providers and should not require subclassing., + * Subclasses of {@link OAuth1ServiceProviderConnectionFactory} should be favored to encapsulate details specific to an OAuth1-based provider., + * @author Keith Donald, + * @param <S> the service API type, + * @see OAuth1ServiceProviderConnectionFactory, + */, +	/**, +	 * Creates a new {@link OAuth1ServiceProviderConnection} from the data provided., +	 * Designed to be called to create a {@link OAuth1ServiceProviderConnection} after receiving an access token response successfully., +	 * The providerUserId may be null in this case: if so, this constructor will try to resolve it using the service API obtained from the {@link OAuth1ServiceProvider}., +	 * @param providerId the provider id e.g. "twitter", +	 * @param providerUserId the provider user ID (may be null if not returned as part of the access token response), +	 * @param accessToken the granted access token, +	 * @param secret the access token secret (OAuth1-specific), +	 * @param serviceProvider the ServiceProvider model, +	 * @param serviceApiAdapter the ServiceApiAdapter for the ServiceProvider., +	 */, +	/**, +	 * Creates a new {@link OAuth1ServiceProviderConnection} from the data provided., +	 * Designed to be called when re-constituting an existing {@link ServiceProviderConnection}, for example, from {@link ServiceProviderConnectionData}., +	 * @param key the service provider connection key, +	 * @param user the service provider user model, +	 * @param accessToken the access token, +	 * @param secret the access token secret, +	 * @param serviceProvider the ServiceProvider model, +	 * @param serviceApiAdapter the ServiceApiAdapter for the ServiceProvider., +	 */, +	// implementing ServiceProviderConnection, +	, +		// not supported by OAuth 1, +		// not supported by OAuth 1, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +/**, + * A Map-based registry for {@link ServiceProviderConnectionFactory service provider connection factories}., + * Implements {@link ServiceProviderConnectionFactoryLocator} for locating registered factory instances., + * @author Keith Donald, + */, +	/**, +	 * Set the group of service provider connection factories registered in this registry., +	 * JavaBean setter that allows for this object to be more easily configured by tools., +	 * For programmatic configuration, prefer {@link #addConnectionFactory(ServiceProviderConnectionFactory)}., +	 * @param connectionFactories the set of connection factories to register, +	 */, +	/**, +	 * Add a {@link ServiceProviderConnectionFactory} to this registry., +	 * @param connectionFactory the connection factory, +	 */, +	// implementing ServiceProviderConnectionFactoryLocator, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth1ServiceProviderConnection.java, +/**, + * An OAuth1-based ServiceProviderConnection implementation., + * In general, this implementation is expected to be suitable for all OAuth1-based providers and should not require subclassing., + * Subclasses of {@link OAuth1ServiceProviderConnectionFactory} should be favored to encapsulate details specific to an OAuth1-based provider., + * @author Keith Donald, + * @param <S> the service API type, + * @see OAuth1ServiceProviderConnectionFactory, + */, +	/**, +	 * Creates a new {@link OAuth1ServiceProviderConnection} from the data provided., +	 * Designed to be called to create a {@link OAuth1ServiceProviderConnection} after receiving an access token response successfully.]