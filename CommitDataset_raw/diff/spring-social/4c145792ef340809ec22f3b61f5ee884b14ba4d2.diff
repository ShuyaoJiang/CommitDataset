[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +		List<Object> args = new ArrayList<Object>(1 + providerUsers.size() * 2);, +		args.add(getLocalUserId());, +	private final static String SELECT_FROM_SERVICE_PROVIDER_CONNECTION = "select localUserId, providerId, providerUserId, profileName, profileUrl, profilePictureUrl, accessToken, secret, refreshToken, expireTime from ServiceProviderConnection";, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +		List<Object> args = new ArrayList<Object>(1 + providerUsers.size() * 2);, +		args.add(getLocalUserId());, +	private final static String SELECT_FROM_SERVICE_PROVIDER_CONNECTION = "select localUserId, providerId, providerUserId, profileName, profileUrl, profilePictureUrl, accessToken, secret, refreshToken, expireTime from ServiceProviderConnection";, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/package-info.java, + * Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +		List<Object> args = new ArrayList<Object>(1 + providerUsers.size() * 2);, +		args.add(getLocalUserId());, +	private final static String SELECT_FROM_SERVICE_PROVIDER_CONNECTION = "select localUserId, providerId, providerUserId, profileName, profileUrl, profilePictureUrl, accessToken, secret, refreshToken, expireTime from ServiceProviderConnection";, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/package-info.java, + * Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/package-info.java, +/**, + * ServiceProvider Connect API implementation support., + */, +package org.springframework.social.connect.support;, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +		List<Object> args = new ArrayList<Object>(1 + providerUsers.size() * 2);, +		args.add(getLocalUserId());, +	private final static String SELECT_FROM_SERVICE_PROVIDER_CONNECTION = "select localUserId, providerId, providerUserId, profileName, profileUrl, profilePictureUrl, accessToken, secret, refreshToken, expireTime from ServiceProviderConnection";, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/package-info.java, + * Framework for establishing connections between local users and users of ServiceProviders such as Twitter and Facebook., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/package-info.java, +/**, + * ServiceProvider Connect API implementation support., + */, +package org.springframework.social.connect.support;, +, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositoryTest.java, +package org.springframework.social.connect.jdbc;, +, +import static org.junit.Assert.assertTrue;, +, +import java.io.Serializable;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;, +import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;, +import org.springframework.security.crypto.encrypt.Encryptors;, +import org.springframework.social.connect.ServiceProviderConnectionKey;, +import org.springframework.social.connect.spi.ProviderProfile;, +import org.springframework.social.connect.spi.ServiceApiAdapter;, +import org.springframework.social.connect.support.LocalUserIdLocator;, +import org.springframework.social.connect.support.MapServiceProviderConnectionFactoryRegistry;, +import org.springframework.social.connect.support.OAuth2ServiceProviderConnectionFactory;, +import org.springframework.social.oauth2.OAuth2Operations;, +import org.springframework.social.oauth2.OAuth2ServiceProvider;, +, +public class JdbcServiceProviderConnectionRepositoryTest {, +, +	private EmbeddedDatabase database;, +	, +	private JdbcServiceProviderConnectionRepository connectionRepository;, +, +	private MapServiceProviderConnectionFactoryRegistry connectionFactoryRegistry;, +	, +	private FacebookServiceProviderConnectionFactory connectionFactory;, +	, +	private Long localUserId = 1L;, +	, +	@Before, +	public void setUp() {, +		EmbeddedDatabaseFactory factory = new EmbeddedDatabaseFactory();, +		factory.setDatabaseType(EmbeddedDatabaseType.H2);, +		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();, +		populator.addScript(new ClassPathResource("JdbcServiceProviderConnectionRepositorySchema.sql", getClass()));, +		factory.setDatabasePopulator(populator);, +		database = factory.getDatabase();, +		connectionFactoryRegistry = new MapServiceProviderConnectionFactoryRegistry();, +		connectionFactory = new FacebookServiceProviderConnectionFactory();, +		connectionFactoryRegistry.addConnectionFactory(connectionFactory);, +		connectionRepository = new JdbcServiceProviderConnectionRepository(database, connectionFactoryRegistry, new LocalUserIdLocator() {, +			public Serializable getLocalUserId() {, +				return localUserId;, +			}, +		}, Encryptors.noOpText());		, +	}, +, +	@After, +	public void tearDown() {, +		if (database != null) {, +			database.shutdown();, +		}, +	}, +]