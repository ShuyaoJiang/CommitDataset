[+++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +	public void setDefaultFailureUrl(String defaultFailureUrl) {, +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +	}, +, +	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {, +		if (detectRejection(request)) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("A rejection was detected. Failing authentication.");, +			}, +			throw new SocialAuthenticationException("Authentication failed because user rejected authorization.");, +		}, +		, +		Authentication auth = null;, +		Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +		String authProviderId = getRequestedProviderId(request);, +		if (!authProviders.isEmpty() && authProviderId != null && authProviders.contains(authProviderId)) {, +			SocialAuthenticationService<?> authService = authServiceLocator.getAuthenticationService(authProviderId);, +			auth = attemptAuthService(authService, request, response);, +			if (auth == null) {, +				throw new AuthenticationServiceException("authentication failed");, +			}, +		}, +		return auth;, +	}, +, +	/**, +	 * Detects a callback request after a user rejects authorization to prevent a never-ending redirect loop., +	 * Default implementation detects a rejection as a request that has one or more parameters, but none of the expected parameters (oauth_token, code, scope)., +	 * May be overridden to customize rejection detection., +	 * @param request the request to check for rejection., +	 * @return true if the request appears to be the result of a rejected authorization; false otherwise., +	 */, +	protected boolean detectRejection(HttpServletRequest request) {, +		Set<?> parameterKeys = request.getParameterMap().keySet();, +		return parameterKeys.size() > 0 , +				&& !parameterKeys.contains("oauth_token") , +				&& !parameterKeys.contains("code") , +				&& !parameterKeys.contains("scope");, +	}, +, +	private static final String DEFAULT_FAILURE_URL = "/signin";, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigurationSupport.java, +		return registerApiBindingBean(registry, apiHelperClass, apiBindingType);, +	private BeanDefinition registerApiBindingBean(BeanDefinitionRegistry registry, Class<? extends ApiHelper<?>> apiHelperClass, Class<?> apiBindingType) {, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationException.java, +import org.springframework.security.core.AuthenticationException;, +public class SocialAuthenticationException extends AuthenticationException {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	/**, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +	 */, +	public void setDefaultFailureUrl(String defaultFailureUrl) {, +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +	}, +, +	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {]