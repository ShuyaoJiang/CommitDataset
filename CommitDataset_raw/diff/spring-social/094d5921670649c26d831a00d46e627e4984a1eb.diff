[+++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequestFactory.java, +	private HttpClient httpClient;, +			this.httpClient = HttpComponentsClient_4_1.getInstance();, +			this.httpClient = HttpComponentsClient_4_0.getInstance();, +		, +		this.setReadTimeout(DEFAULT_READ_TIMEOUT_MILLISECONDS);, +		Assert.notNull(httpClient, "httpClient must not be null");, +		this.httpClient = httpClient;, +		this.httpClient = httpClient;, +		if (timeout < 0) {, +			throw new IllegalArgumentException("timeout must be a non-negative value");, +		}, +		getHttpClient().getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT, timeout);, +		return this.httpClient;, +		HttpUriRequest httpRequest = createHttpUriRequest(httpMethod, uri);, +		postProcessHttpRequest(httpRequest);, +		return new HttpComponentsClientHttpRequest(getHttpClient(), httpRequest);, +		switch (httpMethod) {, +			case GET:, +				return new HttpGet(uri);, +			case DELETE:, +				return new HttpDelete(uri);, +			case HEAD:, +				return new HttpHead(uri);, +			case OPTIONS:, +				return new HttpOptions(uri);, +			case POST:, +				return new HttpPost(uri);, +			case PUT:, +				return new HttpPut(uri);, +			case TRACE:, +				return new HttpTrace(uri);, +			default:, +				throw new IllegalArgumentException("Invalid HTTP method: " + httpMethod);, +		}, +		getHttpClient().getConnectionManager().shutdown();, +	private static class HttpComponentsClient_4_1 {, +		public static HttpClient getInstance() {, +			return new DefaultHttpClient(connectionManager);, +	private static class HttpComponentsClient_4_0 {, +		public static HttpClient getInstance() {, +	        return new DefaultHttpClient(connectionManager, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequestFactory.java, +	private HttpClient httpClient;, +			this.httpClient = HttpComponentsClient_4_1.getInstance();, +			this.httpClient = HttpComponentsClient_4_0.getInstance();, +		, +		this.setReadTimeout(DEFAULT_READ_TIMEOUT_MILLISECONDS);, +		Assert.notNull(httpClient, "httpClient must not be null");, +		this.httpClient = httpClient;, +		this.httpClient = httpClient;, +		if (timeout < 0) {, +			throw new IllegalArgumentException("timeout must be a non-negative value");, +		}, +		getHttpClient().getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT, timeout);, +		return this.httpClient;, +		HttpUriRequest httpRequest = createHttpUriRequest(httpMethod, uri);, +		postProcessHttpRequest(httpRequest);, +		return new HttpComponentsClientHttpRequest(getHttpClient(), httpRequest);, +		switch (httpMethod) {, +			case GET:, +				return new HttpGet(uri);, +			case DELETE:, +				return new HttpDelete(uri);, +			case HEAD:, +				return new HttpHead(uri);, +			case OPTIONS:, +				return new HttpOptions(uri);, +			case POST:, +				return new HttpPost(uri);, +			case PUT:, +				return new HttpPut(uri);, +			case TRACE:, +				return new HttpTrace(uri);, +			default:, +				throw new IllegalArgumentException("Invalid HTTP method: " + httpMethod);, +		}, +		getHttpClient().getConnectionManager().shutdown();, +	private static class HttpComponentsClient_4_1 {, +		public static HttpClient getInstance() {, +			return new DefaultHttpClient(connectionManager);, +	private static class HttpComponentsClient_4_0 {, +		public static HttpClient getInstance() {, +	        return new DefaultHttpClient(connectionManager, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpResponse.java, +	private static final boolean VERSION_4_1_AVAILABLE = ClassUtils.hasMethod(EntityUtils.class, "consume", new Class<?>[]{HttpEntity.class});, +	public HttpComponentsClientHttpResponse(HttpResponse httpResponse) {, +		// Release underlying connection back to the connection manager, +		if (VERSION_4_1_AVAILABLE) {, +			HttpComponentsClient_4_1.close(entity);, +		} else {, +			HttpComponentsClient_4_0.close(entity);, +		}, +	}, +, +, +	// internal helpers, +, +	private static class HttpComponentsClient_4_1 {, +]