[+++ b/docs/src/reference/docbook/serviceprovider.xml, +		<title>Establishing connections</title>, +			<title>OAuth2 service providers</title>, +			<title>OAuth1 service providers</title>, +	</section>, +		<title>Persisting connections</title>, +    <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +    <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +    <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +			Note that all operations on this repository are scoped relative to the "current user" that has authenticated with your local application., +			For standalone, desktop, or mobile environments that only have one user this distinction isn't important., +			In a multi-user web application environment, this implies ServiceProviderConnectionRepository instances will be request-scoped., +			These operations include the ability to lookup the local userIds associated with connections to support provider user sign-in and "registered friends" scenarios., +			<title>JDBC-based persistence</title>, +				Spring Social provides a JdbcMultiUserServiceProviderConnectionRepository capable of persisting connections to a RDBMS., +				The database schema suited to support is defined in JdbcMultiUserServiceProviderConnectionRepository.sql., +				The implementation also provides support for encrypting authorization credentials so they are not stored in plain-text.]