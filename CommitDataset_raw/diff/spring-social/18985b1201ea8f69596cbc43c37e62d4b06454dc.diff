[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import java.net.URL;, +, +	private URL applicationUrl;, +, +	public void setApplicationUrl(URL applicationUrl) {, +		this.applicationUrl = applicationUrl;, +	}, +, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(request), null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl(request), null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request)));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"));, +		HttpServletRequest httpServletRequest = request.getNativeRequest(HttpServletRequest.class);, +		if(applicationUrl != null) {, +			int port  = applicationUrl.getPort();, +			return applicationUrl.getProtocol() + "://" + applicationUrl.getHost() + (port > -1 ? (":" + port) : "") + httpServletRequest.getRequestURI();, +		} else {, +			return httpServletRequest.getRequestURL().toString();, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import java.net.URL;, +, +	private URL applicationUrl;, +, +	public void setApplicationUrl(URL applicationUrl) {, +		this.applicationUrl = applicationUrl;, +	}, +, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(request), null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl(request), null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request)));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"));, +		HttpServletRequest httpServletRequest = request.getNativeRequest(HttpServletRequest.class);, +		if(applicationUrl != null) {, +			int port  = applicationUrl.getPort();, +			return applicationUrl.getProtocol() + "://" + applicationUrl.getHost() + (port > -1 ? (":" + port) : "") + httpServletRequest.getRequestURI();, +		} else {, +			return httpServletRequest.getRequestURL().toString();, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.net.MalformedURLException;, +import java.net.URL;, +, +	public void setApplicationUrl(URL applicationUrl) throws MalformedURLException {, +		webSupport.setApplicationUrl(applicationUrl);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request));, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request);]