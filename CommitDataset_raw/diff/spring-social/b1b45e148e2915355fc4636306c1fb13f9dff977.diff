[+++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +	/**, +	 * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., +	 */, +			// favored, +			client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), consumerKey, consumerSecret, accessToken, accessTokenSecret));, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +	/**, +	 * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., +	 */, +			// favored, +			client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), consumerKey, consumerSecret, accessToken, accessTokenSecret));, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	// spring 3.0 compatibility only: planned for removal in Spring Social 1.1, +	, +	public static String spring30buildAuthorizationHeaderValueFromClientHttpRequest(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		Map<String, String> oauthParameters = commonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken);, +		Map<String, String> aditionalParameters = extractBodyParameters(request.getHeaders().getContentType(), body);, +		Map<String, String> queryParameters = extractParameters(request.getURI().getQuery());, +		aditionalParameters.putAll(queryParameters);, +		String baseRequestUrl = getBaseUrlWithoutPortOrQueryString(request.getURI());, +		return SigningUtils.buildAuthorizationHeaderValue(baseRequestUrl, oauthParameters, aditionalParameters, request.getMethod(), consumerSecret, accessTokenSecret);, +	}, +, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +, +	/**, +	 * Constructs a RestTemplate that adds the OAuth1 Authorization header to each request before it is executed., +	 */, +			// favored, +			client.setInterceptors(new ClientHttpRequestInterceptor[] { new OAuth1RequestInterceptor(consumerKey, consumerSecret, accessToken, accessTokenSecret)});, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(), consumerKey, consumerSecret, accessToken, accessTokenSecret));, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	// spring 3.0 compatibility only: planned for removal in Spring Social 1.1, +	, +	public static String spring30buildAuthorizationHeaderValueFromClientHttpRequest(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		Map<String, String> oauthParameters = commonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken);, +		Map<String, String> aditionalParameters = extractBodyParameters(request.getHeaders().getContentType(), body);, +		Map<String, String> queryParameters = extractParameters(request.getURI().getQuery());, +		aditionalParameters.putAll(queryParameters);, +		String baseRequestUrl = getBaseUrlWithoutPortOrQueryString(request.getURI());, +		return SigningUtils.buildAuthorizationHeaderValue(baseRequestUrl, oauthParameters, aditionalParameters, request.getMethod(), consumerSecret, accessTokenSecret);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/Spring30OAuth1RequestFactory.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStream;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.http.client.ClientHttpRequestFactory;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * Request factory that signs RestTemplate requests with an OAuth 1 Authorization header., + * Internally used for Spring 3.0 compatibility only., + * Planned for removal in Spring Social 1.1., + * @author Craig Walls, + */, +class Spring30OAuth1RequestFactory implements ClientHttpRequestFactory {, +	, +	private final ClientHttpRequestFactory delegate;, +	, +	private final String consumerKey;]