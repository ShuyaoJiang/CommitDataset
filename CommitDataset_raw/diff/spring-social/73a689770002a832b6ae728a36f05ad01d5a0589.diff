[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +					if (appSecret == null || calculateSignature(appSecret, cookieData).equals(cookieData.get("sig"))) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +					if (appSecret == null || calculateSignature(appSecret, cookieData).equals(cookieData.get("sig"))) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookWebArgumentResolver.java, +	/**, +	 * Construct a FacebookWebArgumentResolver given only the Facebook API Key., +	 * The cookie signature will not be verified using this constructor., +	 */, +	public FacebookWebArgumentResolver(String apiKey) {, +		this(apiKey, null);, +	}, +, +	/**, +	 * Construct a FacebookWebArgumentResolver given the Facebook API Key and application secret., +	 * The application secret will be used to verify the cookie signature., +	 */, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +					if (appSecret == null || calculateSignature(appSecret, cookieData).equals(cookieData.get("sig"))) {, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookWebArgumentResolver.java, +	/**, +	 * Construct a FacebookWebArgumentResolver given only the Facebook API Key., +	 * The cookie signature will not be verified using this constructor., +	 */, +	public FacebookWebArgumentResolver(String apiKey) {, +		this(apiKey, null);, +	}, +, +	/**, +	 * Construct a FacebookWebArgumentResolver given the Facebook API Key and application secret., +	 * The application secret will be used to verify the cookie signature., +	 */, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/web/FacebookArgumentResolverTest.java, +	@Test, +	public void resolveArgument_noSignatureValidation() throws Exception {, +		FacebookWebArgumentResolver resolver = new FacebookWebArgumentResolver(API_KEY);, +		MockHttpServletRequest httpServletRequest = new MockHttpServletRequest();, +		httpServletRequest.setCookies(new Cookie("fbs_" + API_KEY, GOOD_TEST_COOKIE_VALUE));, +		NativeWebRequest request = new ServletWebRequest(httpServletRequest);, +		Method method = FacebookArgumentResolverTest.class.getDeclaredMethod("annotatedMethod", String.class,, +				String.class, String.class);, +, +		MethodParameter idParameter = new MethodParameter(method, 0);, +		assertEquals("24680", (String) resolver.resolveArgument(idParameter, request));, +, +		MethodParameter tokenParameter = new MethodParameter(method, 1);, +		assertEquals("a1b2c3d4|e5f6", (String) resolver.resolveArgument(tokenParameter, request));, +	}, +]