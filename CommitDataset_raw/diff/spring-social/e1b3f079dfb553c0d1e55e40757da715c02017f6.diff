[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +	, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ConnectController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +	, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ConnectController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl, null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl, null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl, request.getParameter("scope"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +	, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ConnectController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, overrideCallbackUrl);, +	public Connection<?> completeConnection(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl, null);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +			requestToken = oauthOperations.fetchRequestToken(callbackUrl, null);				, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, String overrideCallbackUrl) {, +		String callbackUrl = overrideCallbackUrl != null ? overrideCallbackUrl : callbackUrl(request);, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl, request.getParameter("scope"));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import org.springframework.core.annotation.AnnotationUtils;, +	private String baseCallbackUrl;, +, +	 * Sets the application's base URL., +	 * By default, the callback URL passed to the service providers at the beginning of the connection process is determined from the request made to ProviderSignInController., +	 * If applicationUrl is set, it will be used to construct the callback URL instead of determining the callback URL from the request., +	 * @param applicationUrl, +	 */, +	public void setApplicationUrl(String applicationUrl) {, +		this.baseCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	}, +	, +	/**, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, callbackUrl));, +		String callbackUrl = baseCallbackUrl != null ? baseCallbackUrl + "/" + providerId : null;, +		Connection<?> connection = webSupport.completeConnection(connectionFactory, request, callbackUrl);]