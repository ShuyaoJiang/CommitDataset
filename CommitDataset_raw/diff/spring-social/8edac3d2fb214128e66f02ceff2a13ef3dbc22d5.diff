[+++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	public <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType) {, +	public <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType) {, +	public <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId) {, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	public <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType) {, +	public <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType) {, +	public <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId) {, +++ /dev/null, +++ b/docs/src/reference/docbook/serviceprovider.xml, +    <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactoryLocator.java, +	 * @see ServiceProviderConnectionRepository#findPrimaryConnectionToServiceApi(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	<S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType);, +	<S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId);, +, +	/**, +	 * Find the ServiceProviderConnections for the current user by the given serviceApiType e.g. FacebookApi.class., +	 * Returns the equivalent of {@link #findConnectionsToProvider(String)}, but uses the serviceApiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized ServiceProviderConnection instances e.g. <code>List&lt;ServiceProviderConnection&lt;FacebookApi&gt;&gt;</code>., +	 * @param <S> the service api parameterized type, +	 * @param serviceApiType the service api type e.g. FacebookApi.class or TwitterApi.class, +	 * @return the service provider connection, +	 */, +	<S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +	public <S> ServiceProviderConnection<S> findPrimaryConnectionToServiceApi(Class<S> serviceApiType) {, +	public <S> List<ServiceProviderConnection<S>> findConnectionsToServiceApi(Class<S> serviceApiType) {, +	public <S> ServiceProviderConnection<S> findConnectionToServiceApiForUser(Class<S> serviceApiType, String providerUserId) {, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +		populator.addScript(new ClassPathResource("JdbcMultiUserServiceProviderConnectionRepository.sql", getClass()));, +	public void findPrimaryConnectionToServiceApi() {, +		assertFacebookConnection(connectionRepository.findPrimaryConnectionToServiceApi(TestFacebookApi.class));, +	public void findPrimaryConnectionToServiceApiSelectFromMultipleByRank() {, +		assertFacebookConnection(connectionRepository.findPrimaryConnectionToServiceApi(TestFacebookApi.class));, +	public void findPrimaryConnectionToServiceApiNoSuchConnection() {, +		assertNull(connectionRepository.findPrimaryConnectionToServiceApi(TestFacebookApi.class));, +	public void findConnectionsToServiceApi() {, +		List<ServiceProviderConnection<TestFacebookApi>> connections = connectionRepository.findConnectionsToServiceApi(TestFacebookApi.class);, +	public void findConnectionToServiceApiForUser() {, +		assertFacebookConnection(connectionRepository.findConnectionToServiceApiForUser(TestFacebookApi.class, "9"));]