[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.ArrayList;, +import java.util.Comparator;, +	static String buildBaseString(String targetUrl, HttpMethod method, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters) {, +		String normalizedParameters = normalizeParameters(allParameters);, +		builder.append(oauthEncode(normalizedParameters));, +		return builder.toString();, +	}, +, +	/*, +	 * Normalizes the parameters, per http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2, +	 */, +	private static String normalizeParameters(MultiValueMap<String, String> allParameters) {, +		// TODO : There must be a more elegant way to do this without encoding the name twice (during the sort and during the base string build)., +		List<Entry<String, List<String>>> parameterEntries = new ArrayList<Map.Entry<String,List<String>>>(allParameters.entrySet());, +		Collections.sort(parameterEntries, new Comparator<Entry<String, List<String>>>() {, +			public int compare(Entry<String, List<String>> o1,, +					Entry<String, List<String>> o2) {, +				return oauthEncode(o1.getKey()).compareTo(oauthEncode(o2.getKey()));, +			}, +		});, +		, +		StringBuilder paramBuilder = new StringBuilder();, +		for (Iterator<Entry<String, List<String>>> entryIt = parameterEntries.iterator(); entryIt.hasNext();) {, +					paramBuilder.append(oauthEncode(name));, +					paramBuilder.append("=");, +					paramBuilder.append(oauthEncode(value));, +						paramBuilder.append("&");, +				paramBuilder.append("&");, +		return paramBuilder.toString();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.ArrayList;, +import java.util.Comparator;, +	static String buildBaseString(String targetUrl, HttpMethod method, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters) {, +		String normalizedParameters = normalizeParameters(allParameters);, +		builder.append(oauthEncode(normalizedParameters));, +		return builder.toString();, +	}, +, +	/*, +	 * Normalizes the parameters, per http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2, +	 */, +	private static String normalizeParameters(MultiValueMap<String, String> allParameters) {, +		// TODO : There must be a more elegant way to do this without encoding the name twice (during the sort and during the base string build)., +		List<Entry<String, List<String>>> parameterEntries = new ArrayList<Map.Entry<String,List<String>>>(allParameters.entrySet());, +		Collections.sort(parameterEntries, new Comparator<Entry<String, List<String>>>() {, +			public int compare(Entry<String, List<String>> o1,, +					Entry<String, List<String>> o2) {, +				return oauthEncode(o1.getKey()).compareTo(oauthEncode(o2.getKey()));, +			}, +		});, +		, +		StringBuilder paramBuilder = new StringBuilder();, +		for (Iterator<Entry<String, List<String>>> entryIt = parameterEntries.iterator(); entryIt.hasNext();) {, +					paramBuilder.append(oauthEncode(name));, +					paramBuilder.append("=");, +					paramBuilder.append(oauthEncode(value));, +						paramBuilder.append("&");, +				paramBuilder.append("&");, +		return paramBuilder.toString();, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/SigningUtilsTest.java, +package org.springframework.social.oauth1;, +, +import static org.junit.Assert.*;, +, +import java.util.Map;, +, +import org.junit.Ignore;, +import org.junit.Test;, +import org.springframework.http.HttpMethod;, +import org.springframework.util.LinkedMultiValueMap;, +, +public class SigningUtilsTest {, +		, +	@Test, +	public void buildBaseString_specificationExample() {, +		/*, +		 * Tests the buildBaseString() method using the example given in the OAuth 1 spec, +		 * at http://tools.ietf.org/html/rfc5849#section-3.4.1 as the test data., +		 */, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters("9djdj82h48djs9d2");, +		oauthParameters.put("oauth_token", "kkk9d7dh3k39sjv7");, +		LinkedMultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.add("b5", "=%3D");, +		additionalParameters.add("a3", "a");, +		additionalParameters.add("c@", "");, +		additionalParameters.add("a2", "r b");, +		additionalParameters.add("c2", "");, +		additionalParameters.add("a3", "2 q");, +		String baseString = SigningUtils.buildBaseString("https://api.twitter.com/oauth/request_token", HttpMethod.POST, oauthParameters, additionalParameters);, +		, +		String[] baseStringParts = baseString.split("&");, +		assertEquals(3, baseStringParts.length);, +		assertEquals("POST", baseStringParts[0]);, +		assertEquals("https%3A%2F%2Fapi.twitter.com%2Foauth%2Frequest_token", baseStringParts[1]);, +			, +		String[] parameterParts = baseStringParts[2].split("%26");, +, +		assertEquals(12, parameterParts.length);, +		assertEquals("a2%3Dr%2520b", parameterParts[0]);]