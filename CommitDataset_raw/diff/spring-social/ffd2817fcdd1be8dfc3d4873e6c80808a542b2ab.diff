[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ConnectionFactory(String clientId, String clientSecret, StubOAuth1Template.Behavior behavior) {, +		super("oauth1Provider", new StubOAuth1ServiceProvider(clientId, clientSecret, behavior), null);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ConnectionFactory(String clientId, String clientSecret, StubOAuth1Template.Behavior behavior) {, +		super("oauth1Provider", new StubOAuth1ServiceProvider(clientId, clientSecret, behavior), null);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ServiceProvider.java, +		this(consumerKey, consumerSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ServiceProvider(String consumerKey, String consumerSecret, StubOAuth1Template.Behavior behavior) {, +			"https://someprovider.com/oauth/access_token", behavior));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			return connectionStatusRedirect(providerId, request);, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import org.springframework.social.connect.web.test.StubOAuth1Template;, +import org.springframework.social.connect.web.test.TestApi;, +, +	@Test, +	public void connect_OAuth1Provider_httpClientErrorExceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.FETCH_REQUEST_TOKEN_HTTPCLIENT_ERROR);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth1Provider")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_ERROR);, +	}, +	, +	public StubOAuth1ConnectionFactory(String clientId, String clientSecret, StubOAuth1Template.Behavior behavior) {]