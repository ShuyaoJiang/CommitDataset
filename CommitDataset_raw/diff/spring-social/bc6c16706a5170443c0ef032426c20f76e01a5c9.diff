[+++ b/docs/src/reference/docbook/apis.xml, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TwitterApi</interfacename>:, +Connection<TwitterApi> connection = connectionRepository.findPrimaryConnectionToApi(TwitterApi.class);, +TwitterApi twitterApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Twitter., +			From that connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>FacebookApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>FacebookApi</interfacename>:, +Connection<FacebookApi> connection = connectionRepository.findPrimaryConnectionToApi(FacebookApi.class);, +FacebookApi facebookApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Facebook., +			From that connection, it retrieves a <interfacename>FacebookApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>LinkedInApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>LinkedInApi</interfacename>:, +Connection<LinkedInApi> connection = connectionRepository.findPrimaryConnectionToApi(LinkedInApi.class);, +LinkedInApi linkedinApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with LinkedIn., +			From that connection, it retrieves a <interfacename>LinkedInApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TripItApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TripItApi</interfacename>:, +Connection<TripItApi> connection = connectionRepository.findPrimaryConnectionToApi(TripItApi.class);, +TripItApi tripitApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with TripIt., +			From that connection, it retrieves a <interfacename>TripItApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GitHubApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GitHubApi</interfacename>:, +Connection<GitHubApi> connection = connectionRepository.findPrimaryConnectionToApi(GitHubApi.class);, +GitHubApi githubApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with GitHub., +			From that connection, it retrieves a <interfacename>GitHubApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GowallaApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GowallaApi</interfacename>:, +Connection<GowallaApi> connection = connectionRepository.findPrimaryConnectionToApi(GowallaApi.class);, +GowallaApi gowallaApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Gowalla., +			From that connection, it retrieves a <interfacename>GowallaApi</interfacename> instance that is configured with the connection details received when the connection was first established., +++ b/docs/src/reference/docbook/apis.xml, +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TwitterApi</interfacename>:, +Connection<TwitterApi> connection = connectionRepository.findPrimaryConnectionToApi(TwitterApi.class);, +TwitterApi twitterApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Twitter., +			From that connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>FacebookApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>FacebookApi</interfacename>:, +Connection<FacebookApi> connection = connectionRepository.findPrimaryConnectionToApi(FacebookApi.class);, +FacebookApi facebookApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Facebook., +			From that connection, it retrieves a <interfacename>FacebookApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>LinkedInApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>LinkedInApi</interfacename>:, +Connection<LinkedInApi> connection = connectionRepository.findPrimaryConnectionToApi(LinkedInApi.class);, +LinkedInApi linkedinApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with LinkedIn., +			From that connection, it retrieves a <interfacename>LinkedInApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TripItApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>TripItApi</interfacename>:, +Connection<TripItApi> connection = connectionRepository.findPrimaryConnectionToApi(TripItApi.class);, +TripItApi tripitApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with TripIt., +			From that connection, it retrieves a <interfacename>TripItApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GitHubApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GitHubApi</interfacename>:, +Connection<GitHubApi> connection = connectionRepository.findPrimaryConnectionToApi(GitHubApi.class);, +GitHubApi githubApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with GitHub., +			From that connection, it retrieves a <interfacename>GitHubApi</interfacename> instance that is configured with the connection details received when the connection was first established., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>GowallaApi</interfacename> via a <interfacename>Connection</interfacename>. , +			For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>GowallaApi</interfacename>:, +Connection<GowallaApi> connection = connectionRepository.findPrimaryConnectionToApi(GowallaApi.class);, +GowallaApi gowallaApi = connection.getApi();]]>, +			Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connections that the current user has with Gowalla., +			From that connection, it retrieves a <interfacename>GowallaApi</interfacename> instance that is configured with the connection details received when the connection was first established., +++ b/docs/src/reference/docbook/connecting.xml, +			<classname>ConnectController</classname> works with one or more <interfacename>ConnectionFactory</interfacename>s to exchange authorization details with the provider and to create connections., +			Once a connection has been established, <classname>ConnectController</classname> hands it off to a <interfacename>ConnectionRepository</interfacename> to be persisted. , +			Spring Social comes with an implementation of <interfacename>ConnectionFactory</interfacename> for each of the supported service providers:, +			<listitem><para><classname>TwitterConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>FacebookConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>LinkedInConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>TripItConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GitHubConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GowallaConnectionFactory</classname></para></listitem>, +			<classname>ConnectController</classname> relies on an implementation of <interfacename>ConnectionFactoryLocator</interfacename> (see <xref linkend="service-providers-establishing-connections-connection-factory-registry"/>) to help it find a connection factory for a specific provider., +			Spring Social's <classname>ConnectionFactoryRegistry</classname> is an implementation of <interfacename>ConnectionFactoryLocator</interfacename> that keeps a Map-based registry of connection factories., +			The following configuration class registers a <classname>ConnectionFactoryRegistry</classname> with <interfacename>ConnectionFactory</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style: 		, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +import org.springframework.social.facebook.connect.FacebookConnectionFactory;, +import org.springframework.social.tripit.connect.TripItConnectionFactory;, +import org.springframework.social.twitter.connect.TwitterConnectionFactory;, +public class ConnectionFactoryLocatorConfig {, +    public ConnectionFactoryLocator connectionFactoryLocator() {, +        ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();, +        registry.addConnectionFactory(new TwitterConnectionFactory(twitterConsumerKey, twitterConsumerSecret));, +        registry.addConnectionFactory(new FacebookConnectionFactory(facebookClientId, facebookClientSecret));, +        registry.addConnectionFactory(new TripItConnectionFactory(tripItConsumerKey, tripItConsumerSecret));, +			Three connection factories--one each for Twitter, Facebook, and TripIt--are registered with <classname>ConnectionFactoryRegistry</classname> via the <methodname>addConnectionFactory()</methodname> method. ]