[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +	 * Retrieve the 20 most recently sent direct messages for the authenticating, +	 * user., +	 * , +	 * @return a collection of {@link DirectMessage} with the authenticating, +	 *         user as the sender., +	 */, +	List<DirectMessage> getDirectMessagesSent();, +, +	/**, +	 * Sends a direct message to another Twitter user. The recipient of the, +	 * message must follow the authenticated user in order for the message to be, +	 * delivered. If the recipient is not following the authenticated user, an, +	 * {@link InvalidMessageRecipientException} will be thrown., +	 * , +	 * @param toScreenName, +	 *            the screen name of the recipient of the messages., +	 * @param text, +	 *            the message text., +	 * @throws InvalidMessageRecipientException, +	 *             if the recipient is not following the authenticating user., +	 * @throws DuplicateTweetException, +	 *             if the message duplicates a previously sent message., +	/**, +	 * Deletes a direct message for the authenticated user., +	 * @param messageId the ID of the message to be removed., +	 * @param messageId, +	 */, +	void deleteDirectMessage(long messageId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageApi.java, +	 * Retrieve the 20 most recently sent direct messages for the authenticating, +	 * user., +	 * , +	 * @return a collection of {@link DirectMessage} with the authenticating, +	 *         user as the sender., +	 */, +	List<DirectMessage> getDirectMessagesSent();, +, +	/**, +	 * Sends a direct message to another Twitter user. The recipient of the, +	 * message must follow the authenticated user in order for the message to be, +	 * delivered. If the recipient is not following the authenticated user, an, +	 * {@link InvalidMessageRecipientException} will be thrown., +	 * , +	 * @param toScreenName, +	 *            the screen name of the recipient of the messages., +	 * @param text, +	 *            the message text., +	 * @throws InvalidMessageRecipientException, +	 *             if the recipient is not following the authenticating user., +	 * @throws DuplicateTweetException, +	 *             if the message duplicates a previously sent message., +	/**, +	 * Deletes a direct message for the authenticated user., +	 * @param messageId the ID of the message to be removed., +	 * @param messageId, +	 */, +	void deleteDirectMessage(long messageId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/support/DirectMessageApiTemplate.java, +		ResponseEntity<List> response = restTemplate.getForEntity(DIRECT_MESSAGES_RECEIVED_URL, List.class);, +		return extractDirectMessageListFromResponseEntity(response);, +	}, +, +	public List<DirectMessage> getDirectMessagesSent() {, +		ResponseEntity<List> response = restTemplate.getForEntity(DIRECT_MESSAGES_SENT_URL, List.class);, +		return extractDirectMessageListFromResponseEntity(response);, +	}, +, +	public void sendDirectMessage(String toScreenName, String text) {, +		MultiValueMap<String, Object> dmParams = new LinkedMultiValueMap<String, Object>();, +		dmParams.add("screen_name", toScreenName);, +		sendDirectMessage(text, dmParams);, +	}, +, +	public void sendDirectMessage(long toUserId, String text) {, +		MultiValueMap<String, Object> dmParams = new LinkedMultiValueMap<String, Object>();, +		dmParams.add("user_id", String.valueOf(toUserId));, +		sendDirectMessage(text, dmParams);, +	}, +, +	public void deleteDirectMessage(long messageId) {, +		restTemplate.delete(DESTROY_DIRECT_MESSAGE_URL, messageId);, +	}, +, +	private List<DirectMessage> extractDirectMessageListFromResponseEntity(ResponseEntity<List> response) {, +	static final String DIRECT_MESSAGES_RECEIVED_URL = TwitterTemplate.API_URL_BASE + "direct_messages.json";, +	static final String DIRECT_MESSAGES_SENT_URL = TwitterTemplate.API_URL_BASE + "direct_messages/sent.json";, +	static final String DESTROY_DIRECT_MESSAGE_URL = TwitterTemplate.API_URL_BASE + "direct_messages/destroy/{dm_id}.json";]