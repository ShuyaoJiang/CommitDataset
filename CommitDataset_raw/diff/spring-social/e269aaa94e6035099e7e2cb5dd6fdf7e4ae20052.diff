[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private final MultiValueMap<Class<?>, ConnectInterceptor<?>> connectInterceptors = new LinkedMultiValueMap<Class<?>, ConnectInterceptor<?>>();, +, +	private final MultiValueMap<Class<?>, DisconnectInterceptor<?>> disconnectInterceptors = new LinkedMultiValueMap<Class<?>, DisconnectInterceptor<?>>();, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 * @deprecated Use {@link #setConnectInterceptors(List)} instead., +	 */, +	@Deprecated, +	public void setInterceptors(List<ConnectInterceptor<?>> interceptors) {, +		setConnectInterceptors(interceptors);, +	}, +	, +	/**, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	public void setConnectInterceptors(List<ConnectInterceptor<?>> interceptors) {, +	 * Configure the list of discconnect interceptors that should receive callbacks when connections are removed., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 */, +	public void setDisconnectInterceptors(List<DisconnectInterceptor<?>> interceptors) {, +		for (DisconnectInterceptor<?> interceptor : interceptors) {, +			addDisconnectInterceptor(interceptor);, +		}, +	}, +, +	/**, +		connectInterceptors.add(serviceApiType, interceptor);, +	}, +, +	/**, +	 * Adds a DisconnectInterceptor to receive callbacks during the disconnection process., +	 * Useful for programmatic configuration., +	 * @param interceptor the connect interceptor to add, +	 */, +	public void addDisconnectInterceptor(DisconnectInterceptor<?> interceptor) {, +		Class<?> serviceApiType = GenericTypeResolver.resolveTypeArgument(interceptor.getClass(), DisconnectInterceptor.class);, +		disconnectInterceptors.add(serviceApiType, interceptor);, +		ConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(providerId);, +		preDisconnect(connectionFactory, request);, +		postDisconnect(connectionFactory, request);, +		ConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(providerId);, +		preDisconnect(connectionFactory, request);, +		postDisconnect(connectionFactory, request);, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void preDisconnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		for (DisconnectInterceptor interceptor : interceptingDisconnectionsTo(connectionFactory)) {, +			interceptor.preDisconnect(connectionFactory, request);, +		}		, +	}, +, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void postDisconnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		for (DisconnectInterceptor interceptor : interceptingDisconnectionsTo(connectionFactory)) {, +			interceptor.postDisconnect(connectionFactory, request);, +		}		, +	}, +, +		List<ConnectInterceptor<?>> typedInterceptors = connectInterceptors.get(serviceType);, +		if (typedInterceptors == null) {, +			typedInterceptors = Collections.emptyList();, +		}, +		return typedInterceptors;, +	}, +, +	private List<DisconnectInterceptor<?>> interceptingDisconnectionsTo(ConnectionFactory<?> connectionFactory) {, +		Class<?> serviceType = GenericTypeResolver.resolveTypeArgument(connectionFactory.getClass(), ConnectionFactory.class);, +		List<DisconnectInterceptor<?>> typedInterceptors = disconnectInterceptors.get(serviceType);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +	private final MultiValueMap<Class<?>, ConnectInterceptor<?>> connectInterceptors = new LinkedMultiValueMap<Class<?>, ConnectInterceptor<?>>();, +, +	private final MultiValueMap<Class<?>, DisconnectInterceptor<?>> disconnectInterceptors = new LinkedMultiValueMap<Class<?>, DisconnectInterceptor<?>>();, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 * @deprecated Use {@link #setConnectInterceptors(List)} instead., +	 */, +	@Deprecated, +	public void setInterceptors(List<ConnectInterceptor<?>> interceptors) {, +		setConnectInterceptors(interceptors);, +	}, +	, +	/**, +	 * Configure the list of connect interceptors that should receive callbacks during the connection process., +	public void setConnectInterceptors(List<ConnectInterceptor<?>> interceptors) {, +	 * Configure the list of discconnect interceptors that should receive callbacks when connections are removed., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the connect interceptors to add, +	 */, +	public void setDisconnectInterceptors(List<DisconnectInterceptor<?>> interceptors) {, +		for (DisconnectInterceptor<?> interceptor : interceptors) {, +			addDisconnectInterceptor(interceptor);, +		}]