[+++ b/src/main/java/org/springframework/social/oauth/AccessTokenServices.java, +package org.springframework.social.oauth;, +, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public interface AccessTokenServices {, +	/**, +	 * Get the token for the specified protected resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @return The token, or null if none was found., +	 */, +	OAuthConsumerToken getToken(String resourceId, Object user) throws AuthenticationException;, +, +	/**, +	 * Store a token for a specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @param token, +	 *            The token to store., +	 */, +	void storeToken(String resourceId, Object user, OAuthConsumerToken token);, +, +	  /**, +	 * Removes the token for the specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the resource., +	 */, +	void removeToken(String resourceId, Object user);, +}, +++ b/src/main/java/org/springframework/social/oauth/AccessTokenServices.java, +package org.springframework.social.oauth;, +, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public interface AccessTokenServices {, +	/**, +	 * Get the token for the specified protected resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @return The token, or null if none was found., +	 */, +	OAuthConsumerToken getToken(String resourceId, Object user) throws AuthenticationException;, +, +	/**, +	 * Store a token for a specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the protected resource., +	 * @param token, +	 *            The token to store., +	 */, +	void storeToken(String resourceId, Object user, OAuthConsumerToken token);, +, +	  /**, +	 * Removes the token for the specified resource., +	 * , +	 * @param resourceId, +	 *            The id of the resource., +	 */, +	void removeToken(String resourceId, Object user);, +}, +++ b/src/main/java/org/springframework/social/oauth/JdbcAccessTokenTokenServices.java, +package org.springframework.social.oauth;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.util.List;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.security.authentication.BadCredentialsException;, +import org.springframework.security.core.AuthenticationException;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +import org.springframework.social.account.Account;, +, +public class JdbcAccessTokenTokenServices implements AccessTokenServices {, +, +	static final String SELECT_TOKEN_SQL = "select provider, accessToken, secret from ConnectedAccount where member = ? and provider = ?";, +    static final String INSERT_TOKEN_SQL = "insert into ConnectedAccount (member, provider, accessToken, secret) values (?, ?, ?, ?)";, +    static final String DELETE_TOKEN_SQL = "delete from ConnectedAccount where member = ? and provider = ?";, +, +	private JdbcTemplate jdbcTemplate;, +	, +	public JdbcAccessTokenTokenServices(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public OAuthConsumerToken getToken(String resourceId, Object principal) throws AuthenticationException {, +		assertThatPrincipalIsAnAccount(principal);, +, +		Account account = (Account) principal;, +		List<OAuthConsumerToken> accessTokens = jdbcTemplate.query(SELECT_TOKEN_SQL, new RowMapper<OAuthConsumerToken>() {, +			public OAuthConsumerToken mapRow(ResultSet rs, int rowNum) throws SQLException {]