[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +		try {, +		} catch (Exception e) {, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +		}, +			return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +import static java.util.Arrays.*;, +import static org.hamcrest.Matchers.*;, +import static org.springframework.test.web.server.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.server.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.server.setup.MockMvcBuilders.*;, +import org.springframework.social.connect.support.ConnectionFactoryRegistry;, +import org.springframework.social.connect.web.test.StubOAuth1ConnectionFactory;, +import org.springframework.social.connect.web.test.StubOAuth2ConnectionFactory;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, +import org.springframework.social.connect.web.test.StubUsersConnectionRepository;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +import org.springframework.test.web.server.MockMvc;, +	// OAuth 1, +	@Test, +	public void signIn_OAuth1Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +				new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();, +		mockMvc.perform(post("/signin/oauth1Provider")), +			.andExpect(redirectedUrl("https://someprovider.com/oauth/authorize?oauth_token=requestToken")), +			.andExpect(request().sessionAttribute("oauthToken", samePropertyValuesAs(new OAuthToken("requestToken", "requestTokenSecret"))));, +	}, +, +	@Test, +	public void signIn_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +				new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();, +		mockMvc.perform(post("/signin/oauth1Provider")), +			.andExpect(redirectedUrl("/signin?error=provider"));, +	}, +, +	@Test, +	public void oauth1Callback_noMatchingUser() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();		, +		mockMvc.perform(get("/signin/oauth1Provider").param("verifier", "verifier").param("oauth_token", "requestToken")), +			.andExpect(redirectedUrl("/signup")), +			.andExpect(request().sessionAttribute(ProviderSignInAttempt.class.getName(), notNullValue()));, +	public void oauth1Callback_noMatchingUser_customSignUpUrl() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		providerSignInController.setSignUpUrl("/register");, +		MockMvc mockMvc = standaloneSetup(providerSignInController).build();		, +		mockMvc.perform(get("/signin/oauth1Provider").param("verifier", "verifier").param("oauth_token", "requestToken")), +			.andExpect(redirectedUrl("/register")), +			.andExpect(request().sessionAttribute(ProviderSignInAttempt.class.getName(), notNullValue()));, +	public void oauth1Callback_multipleMatchingUsers() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository(Arrays.asList("testuser1", "testuser2"));, +		MockMvc mockMvc = standaloneSetup(new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null)).build();		, +		mockMvc.perform(get("/signin/oauth1Provider").param("verifier", "verifier").param("oauth_token", "requestToken")), +			.andExpect(redirectedUrl("/signin?error=multiple_users"));, +	}, +]