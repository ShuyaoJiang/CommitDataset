[+++ b/docs/src/reference/docbook/connecting.xml, +      		In the previous chapter, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections between your application and external service providers., +      		In this chapter, you'll learn how to control the connect flow in a web application environment., +			Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that works with ServiceProviders to coordinate the connection flow., +			At each step, <classname>ConnectController</classname> delegates to a <interfacename>ServiceProvider</interfacename> to handle the finer details such as obtaining a request token and creating connections., +			Because <classname>ConnectController</classname> collaborates with ServiceProviders to establish connections, you'll first need to register one or more <interfacename>ServiceProvider</interfacename> implementations as beans in the Spring context., +			<classname>ConnectController</classname> will discover any bean of type <interfacename>ServiceProvider</interfacename> in the Spring context and delegate to it as requested by users of your application., +			The following configuration class registers <interfacename>ServiceProvider</interfacename> implementations for Twitter, Facebook, and TripIt using Spring's Java configuration style:, +package org.springframework.social.showcase.config.connect;, +public class ServiceProviderConfig {, +    public TwitterServiceProvider twitter(@Value("#{environment['twitter.consumerKey']}") String consumerKey,, +            @Value("#{environment['twitter.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +        return new TwitterServiceProvider(consumerKey, consumerSecret, connectionRepository);, +    public FacebookServiceProvider facebook(@Value("#{environment['facebook.appId']}") String appId,, +            @Value("#{environment['facebook.appSecret']}") String appSecret, ConnectionRepository connectionRepository) {, +        return new FacebookServiceProvider(appId, appSecret, connectionRepository);, +    public TripItServiceProvider tripit(@Value("#{environment['tripit.consumerKey']}") String consumerKey,, +            @Value("#{environment['tripit.consumerSecret']}") String consumerSecret, ConnectionRepository connectionRepository) {, +        return new TripItServiceProvider(consumerKey, consumerSecret, connectionRepository);, +			Each <interfacename>ServiceProvider</interfacename> is configured with the client key and secret that were assigned to it when the application was registered with the service provider., +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as properties of the current environment., +			ServiceProviders are also given a <interfacename>ConnectionRepository</interfacename> at construction., +			Therefore, a <interfacename>ServiceProvider</interfacename> delegates to a <interfacename>ConnectionRepository</interfacename> for persisting connections., +			Spring Social supports JDBC-based connection storage with <classname>JdbcConnectionRepository</classname>, which itself is constructed with a <interfacename>DataSource</interfacename> and a <interfacename>TextEncryptor</interfacename>:., +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config.connect;, +import javax.sql.DataSource;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.social.connect.jdbc.JdbcConnectionRepository;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.security.crypto.encrypt.TextEncryptor;, +, +@Configuration, +public class ConnectionRepositoryConfig {, +, +    @Bean, +    public ConnectionRepository connectionRepository(DataSource dataSource, TextEncryptor textEncryptor) {, +        return new JdbcConnectionRepositoy(dataSource, textEncryptor);, +    }, +, +}]]>, +		</programlisting>, +package org.springframework.social.showcase.config.security;, +public class DevEncryptionConfig {, +			Here, the <code>@Profile</code> annotation ensures that this <interfacename>TextEncryptor</interfacename> will only be created when "dev" is an active profile., +public class ProductionEncryptionConfig {, +    public TextEncryptor textEncryptor(@Value("#{environment['security.encryptPassword']}") String password,, +            @Value("#{environment['security.encryptSalt']}") String salt) {, +        <constructor-arg value="#{environment['facebook.appId']}" />, +        <constructor-arg ref="textEncryptor" />, +    , +            <constructor-arg value="#{environment['security.encryptPassword']}" />, +            <constructor-arg value="#{environment['security.encryptSalt']}" />, +public class ConnectControllerConfig {, +			In either case, <classname>ConnectController</classname> is constructed with the base URL for the application., +			The path pattern that <classname>ConnectController</classname> handles is "/connect/{providerId}"., +			<listitem><para><code>GET /connect/{providerId}</code> - Displays a web page showing connection status to the provider.</para></listitem>, +			<listitem><para><code>POST /connect/{providerId}</code> - Initiates the connection flow with the provider.</para></listitem>, +			<listitem><para><code>GET /connect/{providerId}?code={code}</code> - Receives the authorization callback from the provider, accepting an authorization code. Uses the code to request an access token and complete the connection.</para></listitem>, +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>, +			<listitem><para><code>GET /connect/{providerId}</code> - Displays a web page showing connection status to the provider.</para></listitem>, +			<listitem><para><code>POST /connect/{providerId}</code> - Initiates the connection flow with the provider.</para></listitem>, +					<code>GET /connect/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - , +			<listitem><para><code>DELETE /connect/{providerId}</code> - Severs a connection with the provider.</para></listitem>, +				To kick off the connection flow, the application should <code>POST</code> to <code>/connect/{providerId}</code>. , +, +, +    ConnectController controller = new ConnectController(applicationUrl);, +    controller.addInterceptor(new TweetAfterConnectInterceptor());, +    return controller;]