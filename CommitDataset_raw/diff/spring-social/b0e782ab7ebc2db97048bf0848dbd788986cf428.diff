[+++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException(String providerId) {, +		super(providerId, "Insufficient permission for this operation.");, +	public InsufficientPermissionException(String providerId, String requiredPermission) {, +		super(providerId, "The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	private String providerId;, +, +	public ApiException(String providerId, String message) {, +		this.providerId = providerId;, +	public ApiException(String providerId, String message, Throwable cause) {, +	/**, +	 * The ID of the provider for which the API exception occurred., +	 */, +	public String getProviderId() {, +		return providerId;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/DuplicateStatusException.java, +	public DuplicateStatusException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ExpiredAuthorizationException.java, +	public ExpiredAuthorizationException(String providerId) {, +		super(providerId, "The authorization has expired.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	public InsufficientPermissionException(String providerId) {, +		super(providerId, "Insufficient permission for this operation.");, +	public InsufficientPermissionException(String providerId, String requiredPermission) {, +		super(providerId, "The operation requires '" + requiredPermission + "' permission.");, +++ b/spring-social-core/src/main/java/org/springframework/social/InternalServerErrorException.java, +	public InternalServerErrorException(String providerId, String message) {, +		super(providerId, message);, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java]