[+++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/AbstractServiceProvider.java, + * Assumes provider connections are persisted in a {@link ConnectionRepository}., + * Subclasses must implement {@link #getAuthorizationProtocol()} and {@link #getApi(Connection)}., + * @param <S> The service API exposed by this service provider., +	/**, +	 * Creates a service provider., +	 * @param id the id of the provider as it is identified in the connection repository., +	 * @param displayName a display name for the provider, suitable for display on a user interface., +	 * @param connectionRepository the store for service provider connections, +	 */, +	public abstract AuthorizationProtocol getAuthorizationProtocol();, +, +	/**, +	 * Hook method for creating a persisted {@link ServiceProviderConnection} from a Connection record., +	 * Designed for use by subclasses in their authorization-protocol-specific connection operations., +	 */, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/AbstractServiceProvider.java, + * Assumes provider connections are persisted in a {@link ConnectionRepository}., + * Subclasses must implement {@link #getAuthorizationProtocol()} and {@link #getApi(Connection)}., + * @param <S> The service API exposed by this service provider., +	/**, +	 * Creates a service provider., +	 * @param id the id of the provider as it is identified in the connection repository., +	 * @param displayName a display name for the provider, suitable for display on a user interface., +	 * @param connectionRepository the store for service provider connections, +	 */, +	public abstract AuthorizationProtocol getAuthorizationProtocol();, +, +	/**, +	 * Hook method for creating a persisted {@link ServiceProviderConnection} from a Connection record., +	 * Designed for use by subclasses in their authorization-protocol-specific connection operations., +	 */, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/Connection.java, +/**, + * The record of a connection between an account and a service provider., + * Managed by a {@link ConnectionRepository}., + * @author Keith Donald, + */, +	private final Long id;, +	private final String accessToken;, +	private final String secret;, +	private final String refreshToken;, +	/**, +	 * Creates a new connection with all fields populated., +	 * Consider the static factory methods for more convenient construction options., +	 */, +	/**, +	 * The internal connection id assigned by the managing connection repository., +	 * Null if this connection instance is not yet persistent., +	 */, +	/**, +	 * The access token., +	 */, +	/**, +	 * The access token secret (OAuth 1 only)., +	 */, +	/**, +	 * The refresh token (OAuth 2 only)., +	 */, +	/**, +	 * Create a new, transient Connection instance with the oauth1 fields populated., +	 * @param accessToken the access token, +	 * @param secret the access token secret, +	 */, +	/**, +	 * Create a new, transient Connection instance with the oauth2 fields populated., +	 * @param accessToken the access token, +	 * @param secret the access token secret, +	 */, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/AbstractServiceProvider.java, + * Assumes provider connections are persisted in a {@link ConnectionRepository}., + * Subclasses must implement {@link #getAuthorizationProtocol()} and {@link #getApi(Connection)}., + * @param <S> The service API exposed by this service provider., +	/**, +	 * Creates a service provider., +	 * @param id the id of the provider as it is identified in the connection repository., +	 * @param displayName a display name for the provider, suitable for display on a user interface., +	 * @param connectionRepository the store for service provider connections, +	 */, +	public abstract AuthorizationProtocol getAuthorizationProtocol();, +, +	/**, +	 * Hook method for creating a persisted {@link ServiceProviderConnection} from a Connection record., +	 * Designed for use by subclasses in their authorization-protocol-specific connection operations., +	 */, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/Connection.java, +/**, + * The record of a connection between an account and a service provider., + * Managed by a {@link ConnectionRepository}., + * @author Keith Donald, + */, +	private final Long id;, +	private final String accessToken;, +	private final String secret;, +	private final String refreshToken;, +	/**, +	 * Creates a new connection with all fields populated., +	 * Consider the static factory methods for more convenient construction options., +	 */, +	/**]