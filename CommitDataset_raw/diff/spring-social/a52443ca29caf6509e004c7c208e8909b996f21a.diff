[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/ListOperations.java, +	 * Retrieves user lists for the authenticated user., +	 * @return a list of {@link UserList}s for the specified user., +	 */, +	List<UserList> getLists();, +	, +	/**, +	UserList getList(long listId);, +	List<Tweet> getListStatuses(long listId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/ListOperations.java, +	 * Retrieves user lists for the authenticated user., +	 * @return a list of {@link UserList}s for the specified user., +	 */, +	List<UserList> getLists();, +	, +	/**, +	UserList getList(long listId);, +	List<Tweet> getListStatuses(long listId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/ListTemplate.java, +	public List<UserList> getLists() {, +		requireUserAuthorization();, +		return restTemplate.getForObject(buildUri("lists.json"), UserListList.class).getList();, +	}, +, +		return restTemplate.getForObject(buildUri("lists.json", Collections.singletonMap("user_id", String.valueOf(userId))), UserListList.class).getList();, +		return restTemplate.getForObject(buildUri("lists.json", Collections.singletonMap("screen_name", screenName)), UserListList.class).getList();, +	public UserList getList(long listId) {, +		return restTemplate.getForObject(buildUri("lists/show.json", Collections.singletonMap("list_id", String.valueOf(listId))), UserList.class);, +	public List<Tweet> getListStatuses(long listId) {, +		return restTemplate.getForObject(buildUri("lists/statuses.json", Collections.singletonMap("list_id", String.valueOf(listId))), TweetList.class);, +	// TODO: Fix to user lists/statuses?screen_name={sn}&slug={slug} once the slug problem is resolved on Twitter, +		return restTemplate.postForObject(buildUri("lists/create.json"), request, UserList.class);, +		request.set("list_id", String.valueOf(listId));, +		return restTemplate.postForObject(buildUri("lists/update.json"), request, UserList.class);, +		restTemplate.delete(buildUri("lists/destroy.json", Collections.singletonMap("list_id", String.valueOf(listId))));, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/ListOperations.java, +	 * Retrieves user lists for the authenticated user., +	 * @return a list of {@link UserList}s for the specified user., +	 */, +	List<UserList> getLists();, +	, +	/**, +	UserList getList(long listId);, +	List<Tweet> getListStatuses(long listId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/ListTemplate.java, +	public List<UserList> getLists() {, +		requireUserAuthorization();, +		return restTemplate.getForObject(buildUri("lists.json"), UserListList.class).getList();, +	}, +, +		return restTemplate.getForObject(buildUri("lists.json", Collections.singletonMap("user_id", String.valueOf(userId))), UserListList.class).getList();, +		return restTemplate.getForObject(buildUri("lists.json", Collections.singletonMap("screen_name", screenName)), UserListList.class).getList();, +	public UserList getList(long listId) {, +		return restTemplate.getForObject(buildUri("lists/show.json", Collections.singletonMap("list_id", String.valueOf(listId))), UserList.class);, +	public List<Tweet> getListStatuses(long listId) {, +		return restTemplate.getForObject(buildUri("lists/statuses.json", Collections.singletonMap("list_id", String.valueOf(listId))), TweetList.class);, +	// TODO: Fix to user lists/statuses?screen_name={sn}&slug={slug} once the slug problem is resolved on Twitter, +		return restTemplate.postForObject(buildUri("lists/create.json"), request, UserList.class);, +		request.set("list_id", String.valueOf(listId));, +		return restTemplate.postForObject(buildUri("lists/update.json"), request, UserList.class);, +		restTemplate.delete(buildUri("lists/destroy.json", Collections.singletonMap("list_id", String.valueOf(listId))));, +++ b/spring-social-twitter/src/test/java/org/springframework/social/twitter/api/impl/ListsTemplateTest.java, +	public void getLists_currentUser() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/lists.json")), +			.andExpect(method(GET)), +			.andRespond(withResponse(new ClassPathResource("list-of-lists.json", getClass()), responseHeaders));, +		assertListOfLists(twitter.listOperations().getLists());, +	}, +, +	@Test, +		mockServer.expect(requestTo("https://api.twitter.com/1/lists.json?user_id=161064614")), +		mockServer.expect(requestTo("https://api.twitter.com/1/lists.json?screen_name=habuma")), +	public void getList_byListId() {, +		mockServer.expect(requestTo("https://api.twitter.com/1/lists/show.json?list_id=40841803")), +		assertSingleList(twitter.listOperations().getList(40841803));, +		mockServer.expect(requestTo("https://api.twitter.com/1/lists/create.json")), +		mockServer.expect(requestTo("https://api.twitter.com/1/lists/create.json")), +		mockServer.expect(requestTo("https://api.twitter.com/1/lists/update.json")), +			.andExpect(body("name=forfun&description=Just+for+Fun&mode=public&list_id=40841803")), +		mockServer.expect(requestTo("https://api.twitter.com/1/lists/update.json")), +			.andExpect(body("name=forfun2&description=Just+for+Fun%2C+too&mode=private&list_id=40841803")), +		mockServer.expect(requestTo("https://api.twitter.com/1/lists/destroy.json?list_id=40841803"))]