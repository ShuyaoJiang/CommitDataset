[+++ b/docs/src/reference/docbook/overview.xml, +    <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke APIs on behalf of Users.</para>, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with service providers.</para></listitem>, +              <entry>Spring Social's Connect Framework and OAuth client support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the Connect Framework to manage connections in a web application environment.</entry>, +              <entry>Support for testing Connect implementations and API bindings.</entry>, +++ b/docs/src/reference/docbook/overview.xml, +    <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke APIs on behalf of Users.</para>, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with service providers.</para></listitem>, +              <entry>Spring Social's Connect Framework and OAuth client support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the Connect Framework to manage connections in a web application environment.</entry>, +              <entry>Support for testing Connect implementations and API bindings.</entry>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +			The <interfacename>Connection&lt;S&gt;</interfacename> interface models a connection to an external service provider such as Facebook:, +public interface Connection<A> {, +    ConnectionKey getKey();, +    UserProfile fetchUserProfile();, +    A getApi();, +    ConnectionData createData();, +			Each connection is uniquely identified by a composite key consisting of a providerId (e.g. 'facebook') and connected providerUserId (e.g. '1255689239', for Keith Donald's Facebook ID)., +			A connection's parameterized type &lt;A&gt; represents the Java binding to the ServiceProvider's native API., +			An instance of this API binding can be obtained by calling <code>getApi()</code>., +			As an example, a Facebook connection instance would be parameterized as Connection&lt;FacebookApi&gt;., +			<code>getApi()</code> would return a FacebookApi instance that provides a Java binding to Facebook's graph API for a specific Facebook user., +			To put this model into action, suppose we have a reference to a Connection&lt;TwitterApi&gt; instance., +				<listitem><para>Connection#getKey() would return ('twitter', '14718006') where '14718006' is @kdonald's Twitter-assigned user id that never changes.</para></listitem>, +				<listitem><para>Connection#getDisplayName() would return '@kdonald'.</para></listitem>, +				<listitem><para>Connection#getProfileUrl() would return 'http://twitter.com/kdonald'.</para></listitem>, +				<listitem><para>Connection#getImageUrl() would return 'http://a0.twimg.com/profile_images/105951287/IMG_5863_2_normal.jpg'.</para></listitem>, +				<listitem><para>Connection#sync() would synchronize the state of the connection with @kdonald's profile.</para></listitem>				, +						Connection#test() would return true indicating the authorization credentials associated with the Twitter connection are valid., +				<listitem><para>Connection#hasExpired() would return false.</para></listitem>, +				<listitem><para>Connection#refresh() would not do anything since connections to Twitter do not expire.</para></listitem>, +				<listitem><para>Connection#fetchUserProfile() would make a remote API call to Twitter to get @kdonald's profile data and normalize it into a ServiceProviderUser model.</para></listitem>, +				<listitem><para>Connection#updateStatus(String) would post a status update to @kdonald's timeline.</para></listitem>, +				<listitem><para>Connection#getServiceApi() would return a TwitterApi giving the client application access to the full capabilities of Twitter's native API.</para></listitem>, +				<listitem><para>Connection#createData() would return ConnectionData that could be serialized and used to restore the connection at a later time.</para></listitem>, +			Each authorization protocol is treated as an implementation detail where protocol-specifics are kept out of the core Connection API., +			A ConnectionFactory abstraction encapsulates the construction of connections that use a specific authorization protocol., +			In the following sections, we will discuss the major ConnectionFactory classes provided by the framework., +				In Spring Social, a OAuth2ConnectionFactory is used to establish connections with a OAuth2-based service provider:, +public class OAuth2ConnectionFactory<S> extends ConnectionFactory<S> {, +    public Connection<S> createConnection(AccessGrant accessGrant);, +			 	The example code below shows use of a FacebookConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above., +				Here, FacebookConnectionFactory is a subclass of OAuth2ConnectionFactory:, +FacebookConnectionFactory connectionFactory = new FacebookConnectionFactory("clientId", "clientSecret");, +Connection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>, +FacebookConnectionFactory connectionFactory = new FacebookConnectionFactory("clientId", "clientSecret");, +Connection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>, +			In Spring Social, the OAuth1ConnectionFactory allows you to create connections to a OAuth1-based Service Provider:			, +public class OAuth1ConnectionFactory<S> extends ConnectionFactory<S> {, +    public Connection<S> createConnection(OAuthToken accessToken);, +				The example code below shows use of a TwitterConnectionFactory to create a connection to Facebook using the OAuth1 server-side flow illustrated above., +				Here, TwitterConnectionFactory is a subclass of OAuth1ConnectionFactory:, +TwitterConnectionFactory connectionFactory = new TwitterConnectionFactory("consumerKey", "consumerSecret");, +Connection<TwitterApi> connection = connectionFactory.createConnection(accessToken);]]>, +			<title>Registering ConnectionFactory instances</title>, +ConnectionFactoryRegistry registry = new ConnectionFactoryRegistry();, +registry.addConnectionFactory(new FacebookConnectionFactory("clientId", "clientSecret"));, +registry.addConnectionFactory(new TwitterConnectionFactory("consumerKey", "consumerSecret"));, +registry.addConnectionFactory(new LinkedInConnectionFactory("consumerKey", "consumerSecret"));]]>	, +public interface ConnectionFactoryLocator {, +    ConnectionFactory<?> getConnectionFactory(String providerId);, +    <S> ConnectionFactory<S> getConnectionFactory(Class<S> serviceApiType);, +				Example usage of a ConnectionFactoryLocator is shown below:, +ConnectionFactory<?> connectionFactory = locator.getConnectionFactory("facebook");, +ConnectionFactory<FacebookApi> connectionFactory = locator.getConnectionFactory(FacebookApi.class);]]>	, +			Spring Social provides a ConnectionRepository interface for managing the persistence of a user's connections:, +public interface ConnectionRepository {, +    MultiValueMap<String, Connection<?>> findConnections();, +    List<Connection<?>> findConnectionsToProvider(String providerId);, +    MultiValueMap<String, Connection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUserIds);, +    Connection<?> findConnection(ConnectionKey connectionKey);, +    <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType);, +    <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId);	, +    <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType);, +    void addConnection(Connection<?> connection);, +    void updateConnection(Connection<?> connection);, +    void removeConnection(ConnectionKey connectionKey);, +			As you can see, this interface provides a number of operations for adding, updating, removing, and finding Connections., +			In a multi-user web application environment, this implies ConnectionRepository instances will be request-scoped., +			For multi-user environments, Spring Social provides a UsersConnectionRepository that provides access to the global store of connections across all users:, +public interface UsersConnectionRepository {, +    String findUserIdWithConnection(Connection connection);, +    Set<String> findUserIdsConnectedTo(String providerId, Set<String> providerUserIds);, +    ConnectionRepository createConnectionRepository(String userId);, +			As you can see, this repository acts as a factory for ConnectionRepository instances scoped to a single user, as well as exposes a number of multi-user operations., +				Spring Social provides a JdbcUsersConnectionRepository implementation capable of persisting connections to a RDBMS., +				The database schema designed to back this repository is defined in JdbcUsersConnectionRepository.sql., +				The example code below demonstrates construction and usage of a JdbcUsersConnectionRepository:, +// locator for factories needed to construct Connections when restoring from persistent form, +ConnectionFactoryLocator connectionFactoryLocator = ...;, +UsersConnectionRepository usersConnectionRepository =, +    new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, encryptor);, +ConnectionRepository repository = usersConnectionRepository.createConnectionRepository("kdonald");, +Connection<FacebookApi> connection = repository.findPrimaryConnectionToApi(FacebookApi.class);]]>]