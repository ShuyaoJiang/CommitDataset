[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, +	// subclassing hooks, +, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> body) {, +		return new OAuthToken(accessToken, secret);, +	}, +, +	private RestTemplate createRestTemplate() {, +		RestTemplate restTemplate = new RestTemplate();, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(1);, +		converters.add(new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				// always read MultiValueMaps as x-www-url-formencoded even if contentType not set properly by provider				, +				return MultiValueMap.class.isAssignableFrom(clazz);, +			}, +		});, +		restTemplate.setMessageConverters(converters);, +		return restTemplate;, +	}, +	, +		return createAccessToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, +	// subclassing hooks, +, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> body) {, +		return new OAuthToken(accessToken, secret);, +	}, +, +	private RestTemplate createRestTemplate() {, +		RestTemplate restTemplate = new RestTemplate();, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(1);, +		converters.add(new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				// always read MultiValueMaps as x-www-url-formencoded even if contentType not set properly by provider				, +				return MultiValueMap.class.isAssignableFrom(clazz);, +			}, +		});, +		restTemplate.setMessageConverters(converters);, +		return restTemplate;, +	}, +	, +		return createAccessToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	private final String scope;, +, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expireTime) {, +		this.scope = scope;, +	 * The refresh token that can be used to renew the access token., +	 * May be null if the provider does not support refresh tokens., +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +	/**, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.http.MediaType;, +	// subclassing hooks, +, +	protected OAuthToken createAccessToken(String accessToken, String secret, MultiValueMap<String, String> body) {, +		return new OAuthToken(accessToken, secret);, +	}, +, +	private RestTemplate createRestTemplate() {, +		RestTemplate restTemplate = new RestTemplate();, +		List<HttpMessageConverter<?>> converters = new ArrayList<HttpMessageConverter<?>>(1);, +		converters.add(new FormHttpMessageConverter() {, +			public boolean canRead(Class<?> clazz, MediaType mediaType) {, +				// always read MultiValueMaps as x-www-url-formencoded even if contentType not set properly by provider				, +				return MultiValueMap.class.isAssignableFrom(clazz);, +			}, +		});, +		restTemplate.setMessageConverters(converters);, +		return restTemplate;, +	}, +	, +		return createAccessToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +	private final String scope;, +, +	public AccessGrant(String accessToken, String scope, String refreshToken, Long expireTime) {, +		this.scope = scope;, +	 * The refresh token that can be used to renew the access token., +	 * May be null if the provider does not support refresh tokens., +	public String getRefreshToken() {, +		return refreshToken;, +	}, +, +	/**, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;]