[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.io.ByteArrayOutputStream;, +import java.util.BitSet;, +import org.springframework.util.Assert;, +			header.append(entry.getKey()).append("=\"").append(encodeParameter(entry.getValue())).append("\", ");, +		header.append("oauth_signature=\"").append(encodeParameter(signature)).append("\"");, +			builder.append(encodeParameter(name));, +					builder.append(encodeParameter(value));, +	private static final BitSet UNRESERVED;, +	, +	static {, +		BitSet alpha = new BitSet(256);, +		for (int i = 'a'; i <= 'z'; i++) {, +			alpha.set(i);, +		}, +		for (int i = 'A'; i <= 'Z'; i++) {, +			alpha.set(i);, +		}, +		BitSet digit = new BitSet(256);, +		for (int i = '0'; i <= '9'; i++) {, +			digit.set(i);, +		}, +		, +		BitSet unreserved = new BitSet(256);, +		unreserved.or(alpha);, +		unreserved.or(digit);, +		unreserved.set('-');, +		unreserved.set('.');, +		unreserved.set('_');, +		unreserved.set('~');, +		UNRESERVED = unreserved;, +		, +	}, +	, +	private static String encodeParameter(String param) {, +			byte[] bytes = encode(param.getBytes("UTF-8"), UNRESERVED);, +			return new String(bytes, "US-ASCII");, +	private static byte[] encode(byte[] source, BitSet notEncoded) {, +		Assert.notNull(source, "'source' must not be null");, +		ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length * 2);, +		for (int i = 0; i < source.length; i++) {, +			int b = source[i];, +			if (b < 0) {, +				b += 256;, +			}, +			if (notEncoded.get(b)) {, +				bos.write(b);, +			}, +			else {, +				bos.write('%');, +				char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +				char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +				bos.write(hex1);, +				bos.write(hex2);, +			}, +		}, +		return bos.toByteArray();, +	}, +	, +	, +]