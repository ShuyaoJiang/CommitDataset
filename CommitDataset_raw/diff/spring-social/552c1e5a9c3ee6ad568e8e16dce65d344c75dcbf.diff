[+++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * Default implementation detects a rejection as a request that has one or more parameters, +	 * (except 'state' parameter which can be used by application), but none of the expected parameters (oauth_token, code, scope)., +		if ((parameterKeys.size() == 1) && (parameterKeys.contains("state"))) {, +		    return false;, +		}, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * Default implementation detects a rejection as a request that has one or more parameters, +	 * (except 'state' parameter which can be used by application), but none of the expected parameters (oauth_token, code, scope)., +		if ((parameterKeys.size() == 1) && (parameterKeys.contains("state"))) {, +		    return false;, +		}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, +import org.springframework.dao.DataAccessException;, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE, +version=1.2.0.BUILD-SNAPSHOT, +jacksonVersion=2.4.5, +thymeleafVersion=2.1.2.RELEASE, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	 * Default implementation detects a rejection as a request that has one or more parameters, +	 * (except 'state' parameter which can be used by application), but none of the expected parameters (oauth_token, code, scope)., +		if ((parameterKeys.size() == 1) && (parameterKeys.contains("state"))) {, +		    return false;, +		}, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, +import org.springframework.dao.DataAccessException;, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +			params.add("state", generateState(connectionFactory, request));, +	private String generateState(OAuth2ConnectionFactory<?> connectionFactory, HttpServletRequest request) {, +	    final String state = request.getParameter("state");, +	    return (state != null) ? state : connectionFactory.generateState();, +	}, +, +++ b/docs/manual/src/asciidoc/index.adoc, +To prepopulate the sign up form, you can fetch the user profile data from a connection retrieved from `ProviderSignInUtils.getConnection()`., +    Connection<?> connection = ProviderSignInUtils.getConnection(request);, +If `ProviderSignInUtils.getConnection()` returns a connection, that means there was a failed provider sign in attempt that can be completed if the user registers to the application. , +To complete the connection call `ProviderSignInUtils.handlePostSignUp()`. , +For example, the following method handles the sign up form submission, creates an account and then calls `ProviderSignInUtils.handlePostSignUp()` to complete the connection:, +        ProviderSignInUtils.handlePostSignUp(account.getUsername(), request);, +++ b/gradle.properties, +springSecurityVersion=3.2.7.RELEASE, +springVersion=4.1.6.RELEASE]