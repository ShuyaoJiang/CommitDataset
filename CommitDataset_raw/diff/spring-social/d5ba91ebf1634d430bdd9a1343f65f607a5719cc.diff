[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import java.util.ArrayList;, +import java.util.Collections;, +import javax.servlet.http.HttpSession;, +import org.springframework.security.authentication.BadCredentialsException;, +	private String filterProcessesUrl = "/auth";, +	private String signupUrl = "/signup";, +	/**, +	 * testing only, +	 * , +	 * @param session may be null, +	 * @param data may be null, +	 * @return true if new attempt was added to session, +	 */, +	static boolean addSignInAttempt(HttpSession session, ConnectionData data) {, +		return session == null || data == null ? null : SignInAttempts.add(session, data);, +	}, +	, +	/**, +	 * @param session may be null, +	 * @return list of ConnectionData for sign-in attempts using unknown connections, +	 */, +	public static List<ConnectionData> getSignInAttempts(HttpSession session) {, +		if (session == null) {, +			return new ArrayList<ConnectionData>(0);, +		}, +		return new ArrayList<ConnectionData>(SignInAttempts.get(session));, +	}, +	, +	/**, +	 * clear list of sign-in attempts (after registration), +	 * @param session may be null, +	 */, +	public static void clearSignInAttempts(HttpSession session) {, +		if (session != null) {, +			SignInAttempts.clear(session);, +		}, +	}, +	, +			Assert.isInstanceOf(ConnectionData.class, token.getPrincipal(), "unexpected principle type");, +			, +				try {, +				} catch (BadCredentialsException e) {, +					// connection unknown, register new user?, +					if (getSignupUrl() == null) {, +						throw e;, +					} else {, +						// store ConnectionData in session and redirect to register page, +						if (SignInAttempts.add(request.getSession(), (ConnectionData) token.getPrincipal())) {, +							throw new SocialAuthenticationRedirectException(getSignupUrl());, +						}, +					}, +				}, +					Connection<?> connection = addConnection(authService, userId, (ConnectionData) principal);, +					if(connection != null) {, +						throw new SocialAuthenticationRedirectException(authService.getConnectionAddedRedirectUrl(request, connection));, +					} else {, +						return null;, +					}, +	protected Connection<?> addConnection(final SocialAuthenticationService<?> authService, String userId, final ConnectionData data) {, +		return connection;, +	public String getSignupUrl() {, +		return signupUrl;, +	}, +, +	public void setSignupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +	}, +, +	private static class SignInAttempts {, +		, +		private static final String ATTR_SIGN_IN_ATTEMPT = SignInAttempts.class.getName();, +		, +		private List<ConnectionData> attempts = new ArrayList<ConnectionData>(1);, +		, +		private static boolean add(HttpSession session, ConnectionData data) {, +			SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +			if (signInAttempts == null) {, +				session.setAttribute(ATTR_SIGN_IN_ATTEMPT, signInAttempts = new SignInAttempts()); , +			}, +			return signInAttempts.addAttempt(data);, +		}, +		, +		/**, +		 * @return unmodifiable list, +		 */, +		private static List<ConnectionData> get(HttpSession session) {, +			SignInAttempts signInAttempts = (SignInAttempts) session.getAttribute(ATTR_SIGN_IN_ATTEMPT);, +			if(signInAttempts == null) {, +				return Collections.emptyList();, +			} else {, +				return signInAttempts.getAttempts();, +			}, +		}, +, +		private static void clear(HttpSession session) {, +			session.removeAttribute(ATTR_SIGN_IN_ATTEMPT);, +		}, +		, +		private SignInAttempts() {]