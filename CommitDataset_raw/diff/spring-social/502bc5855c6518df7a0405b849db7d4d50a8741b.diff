[+++ b/docs/src/reference/docbook/apis.xml, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TwitterApi twitterApi = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TwitterApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(FacebookApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +LinkedInApi linkedinApi = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(LinkedInApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TripItApi tripitApi = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TripItApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GitHubApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GowallaApi.class);, +++ b/docs/src/reference/docbook/apis.xml, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TwitterApi twitterApi = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TwitterApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(FacebookApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +LinkedInApi linkedinApi = new LinkedInTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(LinkedInApi.class);, +String consumerKey = "..."; // The application's consumer key, +String consumerSecret = "..."; // The application's consumer secret, +TripItApi tripitApi = new TripItTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>, +        connectionRepository.findPrimaryConnectionToServiceApi(TripItApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GitHubApi.class);, +        connectionRepository.findPrimaryConnectionToServiceApi(GowallaApi.class);, +++ b/docs/src/reference/docbook/connecting.xml, +      		In <xref linkend="serviceprovider"/>, you learned how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> can be used to manage user connections the link your application's user accounts with accounts on external service providers., +			Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that coordinates the connection flow between an application and service providers., +		<title>Configuring connection support</title> <!-- Needs a better title? -->, +		<para>, +			As <classname>ConnectController</classname> directs the connection flow, it depends on a couple of other objects to assist in the creation and persistence of connections., +			<classname>ConnectController</classname> works with one or more <interfacename>ServiceProviderConnectionFactory</interfacename>s to exchange authorization details with the provider and to create connections., +			Once a connection has been established, <classname>ConnectController</classname> hands it off to a <interfacename>ServiceProviderConnectionRepository</interfacename> to be persisted. , +		</para>, +		, +		<para>, +			Spring Social comes with an implementation of <interfacename>ServiceProviderConnectionFactory</interfacename> for each of the supported service providers:, +		</para>, +		, +		<itemizedlist>, +			<listitem><para><classname>TwitterServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>FacebookServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>LinkedInServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>TripItServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GitHubServiceProviderConnectionFactory</classname></para></listitem>, +			<listitem><para><classname>GowallaTwitterServiceProviderConnectionFactory</classname></para></listitem>, +		</itemizedlist>, +		, +		<para>, +			<classname>ConnectController</classname> relies on an implementation of <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> (see <xref linkend="service-providers-establishing-connections-connection-factory-registry"/>) to help it find a connection factory for a specific provider., +			Spring Social's <classname>MapServiceProviderConnectionFactoryRegistry</classname> is an implementation of <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> that keeps a Map-based registry of connection factories., +			The following configuration class registers a <classname>MapServiceProviderConnectionFactoryRegistry</classname> with <interfacename>ServiceProviderConnectionFactory</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style: 		, +		</para>, +, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.social.connect.ServiceProviderConnectionFactory;, +import org.springframework.social.connect.ServiceProviderConnectionFactoryLocator;, +import org.springframework.social.connect.support.MapServiceProviderConnectionFactoryRegistry;, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory;, +import org.springframework.social.tripit.api.TripItApi;, +import org.springframework.social.tripit.connect.TripItServiceProviderConnectionFactory;, +import org.springframework.social.twitter.api.TwitterApi;, +import org.springframework.social.twitter.connect.TwitterServiceProviderConnectionFactory;, +public class ServiceProviderConnectionFactoryLocatorConfig {, +	, +    @Value("${twitter.consumerKey}"), +    private String twitterConsumerKey;, +	, +    @Value("${twitter.consumerSecret}"), +    private String twitterConsumerSecret;, +, +    @Value("${facebook.appId}"), +    private String facebookClientId;, +	, +    @Value("${facebook.appSecret}"), +    private String facebookClientSecret;, +, +    @Value("${tripit.consumerKey}"), +    private String tripItConsumerKey;, +	, +    @Value("${tripit.consumerSecret}"), +    private String tripItConsumerSecret;, +    public ServiceProviderConnectionFactoryLocator serviceProviderConnectionFactoryLocator() {, +        MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();, +        registry.addConnectionFactory(, +                new TwitterServiceProviderConnectionFactory(twitterConsumerKey, twitterConsumerSecret));, +        registry.addConnectionFactory(, +                new FacebookServiceProviderConnectionFactory(facebookClientId, facebookClientSecret));, +        registry.addConnectionFactory(, +                new TripItServiceProviderConnectionFactory(tripItConsumerKey, tripItConsumerSecret));]