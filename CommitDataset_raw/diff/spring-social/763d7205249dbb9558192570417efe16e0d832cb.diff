[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., +	public ProviderSignInAttempt(Connection<?> connection) {, +	public Connection<?> getConnection(ConnectionFactoryLocator connectionFactoryLocator) {, +	void addConnection(String userId, ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {, +		connectionRepository.createConnectionRepository(userId).addConnection(getConnection(connectionFactoryLocator));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., +	public ProviderSignInAttempt(Connection<?> connection) {, +	public Connection<?> getConnection(ConnectionFactoryLocator connectionFactoryLocator) {, +	void addConnection(String userId, ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {, +		connectionRepository.createConnectionRepository(userId).addConnection(getConnection(connectionFactoryLocator));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			ProviderSignInAttempt signInAttempt = new ProviderSignInAttempt(connection);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, + * For the former scenario, callers should invoke {@link #addConnection(String,ConnectionFactoryLocator,UsersConnectionRepository)} post-signup to establish a connection between a new user account and the provider account., +	public ProviderSignInAttempt(Connection<?> connection) {, +	public Connection<?> getConnection(ConnectionFactoryLocator connectionFactoryLocator) {, +	void addConnection(String userId, ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {, +		connectionRepository.createConnectionRepository(userId).addConnection(getConnection(connectionFactoryLocator));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +			ProviderSignInAttempt signInAttempt = new ProviderSignInAttempt(connection);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInUtils.java, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.UsersConnectionRepository;, +	private ConnectionFactoryLocator connectionFactoryLocator;, +	private UsersConnectionRepository connectionRepository;, +, +	public ProviderSignInUtils( ConnectionFactoryLocator connectionFactoryLocator,UsersConnectionRepository connectionRepository) {, +		this(new HttpSessionSessionStrategy(),connectionFactoryLocator,connectionRepository);, +	public ProviderSignInUtils(SessionStrategy sessionStrategy,ConnectionFactoryLocator connectionFactoryLocator,UsersConnectionRepository connectionRepository) {, +		this.connectionFactoryLocator = connectionFactoryLocator;, +		this.connectionRepository = connectionRepository;, +		ProviderSignInAttempt signInAttempt = getProviderUserSignInAttempt(request);, +		return signInAttempt != null ? signInAttempt.getConnection(connectionFactoryLocator) : null;, +			signInAttempt.addConnection(userId,connectionFactoryLocator,connectionRepository);, +	private ProviderSignInAttempt getProviderUserSignInAttempt(RequestAttributes request) {, +		return (ProviderSignInAttempt)sessionStrategy.getAttribute(request, ProviderSignInAttempt.SESSION_ATTRIBUTE);]