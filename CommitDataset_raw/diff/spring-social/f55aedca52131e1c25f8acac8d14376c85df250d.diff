[+++ b/spring-social-connect-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.connect.AccountIdResolver;, +	private final AccountIdResolver accountIdResolver;, +, +	public ConnectController(ServiceProviderFactory serviceProviderFactory, String applicationUrl,, +			AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +		if (getServiceProvider(name).isConnected(accountIdResolver.resolveAccountId())) {, +		provider.connect(accountIdResolver.resolveAccountId(), new AuthorizedRequestToken(requestToken, verifier));, +		getServiceProvider(name).disconnect(accountIdResolver.resolveAccountId());, +++ b/spring-social-connect-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.connect.AccountIdResolver;, +	private final AccountIdResolver accountIdResolver;, +, +	public ConnectController(ServiceProviderFactory serviceProviderFactory, String applicationUrl,, +			AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +		if (getServiceProvider(name).isConnected(accountIdResolver.resolveAccountId())) {, +		provider.connect(accountIdResolver.resolveAccountId(), new AuthorizedRequestToken(requestToken, verifier));, +		getServiceProvider(name).disconnect(accountIdResolver.resolveAccountId());, +++ b/spring-social-connect-web/src/main/java/org/springframework/social/connect/web/FacebookConnectController.java, +import org.springframework.social.connect.AccountIdResolver;, +	private final AccountIdResolver accountIdResolver;, +, +	public FacebookConnectController(ServiceProvider<FacebookOperations> facebookProvider,, +			AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +		if (facebookProvider.isConnected(accountIdResolver.resolveAccountId())) {, +			facebookProvider.addConnection(accountIdResolver.resolveAccountId(), accessToken, facebookUserId);, +		facebookProvider.disconnect(accountIdResolver.resolveAccountId());, +++ b/spring-social-connect-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.connect.AccountIdResolver;, +	private final AccountIdResolver accountIdResolver;, +, +	public ConnectController(ServiceProviderFactory serviceProviderFactory, String applicationUrl,, +			AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +		if (getServiceProvider(name).isConnected(accountIdResolver.resolveAccountId())) {, +		provider.connect(accountIdResolver.resolveAccountId(), new AuthorizedRequestToken(requestToken, verifier));, +		getServiceProvider(name).disconnect(accountIdResolver.resolveAccountId());, +++ b/spring-social-connect-web/src/main/java/org/springframework/social/connect/web/FacebookConnectController.java, +import org.springframework.social.connect.AccountIdResolver;, +	private final AccountIdResolver accountIdResolver;, +, +	public FacebookConnectController(ServiceProvider<FacebookOperations> facebookProvider,, +			AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +		if (facebookProvider.isConnected(accountIdResolver.resolveAccountId())) {, +			facebookProvider.addConnection(accountIdResolver.resolveAccountId(), accessToken, facebookUserId);, +		facebookProvider.disconnect(accountIdResolver.resolveAccountId());, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +import java.io.Serializable;, +			AccountConnectionRepository connectionRepository) {, +	public void connect(Serializable accountId, AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountId, getName(), accessToken,, +				providerAccountId, buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public void addConnection(Serializable accountId, String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountId, getName(), oauthAccessToken,, +	public boolean isConnected(Serializable accountId) {, +		return connectionRepository.isConnected(accountId, getName());, +	public void disconnect(Serializable accountId) {, +		connectionRepository.disconnect(accountId, getName());, +	public void disconnect(Serializable accountId, String providerAccountId) {, +		connectionRepository.disconnect(accountId, getName(), providerAccountId);, +	public S getServiceOperations(Serializable accountId) {, +		if (accountId == null || !isConnected(accountId)) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountId, getName());, +	public S getServiceOperations(Serializable accountId, String providerAccountId) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountId, getName(), providerAccountId);, +	public Collection<AccountConnection> getConnections(Serializable accountId) {, +		return connectionRepository.getAccountConnections(accountId, getName());, +	public String getProviderAccountId(Serializable accountId) {, +		return connectionRepository.getProviderAccountId(accountId, getName());, +++ b/spring-social-connect-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import org.springframework.social.connect.AccountIdResolver;, +	private final AccountIdResolver accountIdResolver;, +, +	public ConnectController(ServiceProviderFactory serviceProviderFactory, String applicationUrl,, +			AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +		if (getServiceProvider(name).isConnected(accountIdResolver.resolveAccountId())) {, +		provider.connect(accountIdResolver.resolveAccountId(), new AuthorizedRequestToken(requestToken, verifier));, +		getServiceProvider(name).disconnect(accountIdResolver.resolveAccountId());, +++ b/spring-social-connect-web/src/main/java/org/springframework/social/connect/web/FacebookConnectController.java, +import org.springframework.social.connect.AccountIdResolver;, +	private final AccountIdResolver accountIdResolver;, +, +	public FacebookConnectController(ServiceProvider<FacebookOperations> facebookProvider,, +			AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +		if (facebookProvider.isConnected(accountIdResolver.resolveAccountId())) {, +			facebookProvider.addConnection(accountIdResolver.resolveAccountId(), accessToken, facebookUserId);, +		facebookProvider.disconnect(accountIdResolver.resolveAccountId());, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +import java.io.Serializable;, +			AccountConnectionRepository connectionRepository) {, +	public void connect(Serializable accountId, AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountId, getName(), accessToken,, +				providerAccountId, buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public void addConnection(Serializable accountId, String accessToken, String providerAccountId) {]