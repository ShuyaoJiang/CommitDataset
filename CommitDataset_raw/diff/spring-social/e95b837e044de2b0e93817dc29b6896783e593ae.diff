[+++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is simply a standard Java project that builds a jar artifact e.g. spring-social-twitter.jar., +				where {providerId} is a unique identifier you assign to the service provider you are adding support for., +					<title>Module Structure</title>, +								<entry>The public interface of the Java API binding.</entry>, +								<entry>The primary implementation of the Java API binding.</entry>, +								<entry>The types necessary to establish connections to the service provider.</entry>, +				Finally, the connect package contains the implementations of various connect SPIs that enable connections to Twitter to be established and persisted., +			This provides a simple, domain-oriented interface for Java applications to use to consume the API., +			When adding support for a new service provider, if no suitable Java binding already exists you'll need to develop one., +							DirectMessageOperations, for example, contains API bindings to Twitter's "direct_messages" resource:, +			<para>, +				API developers are free to implement their Java API binding with whatever HTTP/REST client they see fit., +				That said, Spring Social's existing API bindings such as spring-social-twitter all use Spring Framework's RestTemplate in conjunction with the Jackson JSON ObjectMapper., +				RestTemplate is a popular REST client that provides a uniform object mapping interface across a variety of data exchange formats (JSON, XML, etc)., +				Jackson is the leading Java-based JSON marshalling technology., +				To help promote consistency across Spring Social's supported bindings, we do recommend you consider these implementation technologies (and please let us know if they do not meet your needs)., +			</para>, +			<para>, +				Spring Social has adopted a convention where each API implementation class is named "{ProviderId}Template" e.g. TwitterTemplate., +				We favor this convention unless there is a good reason to deviate from it., +				As discussed in the previous section, we also recommend keeping implementation types separate from the public API types., +				And we recommend keeping internal implementation details package-private., +			</para>, +			<para>, +				The way in which an API binding implementation is constructed will vary based on the API's authorization protocol., +				For APIs secured with OAuth1, the consumerKey, consumerSecret, accessToken, and accessTokenSecret will be required for construction:, +				<programlisting language="java"><![CDATA[, +public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) { ... }]]>, +				</programlisting>				, +			</para>, +			<para>, +				For OAuth2, only the access token should be required:, +				<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) { ... }]]>, +				</programlisting>, +			</para>, +			<para>, +				Each request made to the API's "resource server" needs to be signed with the OAuth credentials provided during construction., +				This signing process consists of adding an "Authorization" header to each client request before it is executed., +				For OAuth1, the process is quite complicated, and is used to support an elaborate request signature verification algorithm between the client and server., +				For OAuth2, it is a lot simpler, but does still vary across the various drafts of the OAuth2 specification., +			</para>, +			<para>, +				To encapsulate this complexity, for each authorization protocol Spring Social provides a ProtectedResourceClientFactory you may use to, +				construct a pre-configured RestTemplate instance that performs the request signing for you. For OAuth1:, +				<programlisting language="java"><![CDATA[, +public TwitterTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +    this.restTemplate = ProtectedResourceClientFactory.create(apiKey, apiSecret, accessToken, accessTokenSecret);, +}]]>			</programlisting>, +			</para>, +			<para>, +				An OAuth2 example:, +				<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) {, +    this.restTemplate = ProtectedResourceClientFactory.draft10(accessToken);, +}]]>, +				</programlisting>, +			</para>, +			<para>, +				Once the REST client has been configured as shown above, you simply use it to implement your various API bindings., +				The existing Spring Social client modules all invoke their RestTemplate instances in a standard manner:, +				<programlisting language="java"><![CDATA[, +public TwitterProfile getUserProfile() {, +    return restTemplate.getForObject(buildUri("account/verify_credentials.json"), TwitterProfile.class);, +}]]>, +				</programlisting>, +			</para>, +			<para>, +				A note on RestTemplate usage: we do favor the RestTemplate methods that accept a URI object instead of a uri String., +				This ensures we always properly encode client data submitted in URI query parameters, such as screen_name below:, +				<programlisting language="java"><![CDATA[, +public TwitterProfile getUserProfile(String screenName) {, +    return restTemplate.getForObject(buildUri("users/show.json", Collections.singletonMap("screen_name", screenName)), TwitterProfile.class);, +}]]>, +				</programlisting>, +			</para>, +			<para>, +				For complete implementation examples, consult the existing API bindings included in Spring Social., +				spring-social-twitter and spring-social-facebook provide particularly good references., +			</para>, +++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is simply a standard Java project that builds a jar artifact e.g. spring-social-twitter.jar., +				where {providerId} is a unique identifier you assign to the service provider you are adding support for., +					<title>Module Structure</title>, +								<entry>The public interface of the Java API binding.</entry>, +								<entry>The primary implementation of the Java API binding.</entry>, +								<entry>The types necessary to establish connections to the service provider.</entry>, +				Finally, the connect package contains the implementations of various connect SPIs that enable connections to Twitter to be established and persisted., +			This provides a simple, domain-oriented interface for Java applications to use to consume the API., +			When adding support for a new service provider, if no suitable Java binding already exists you'll need to develop one., +							DirectMessageOperations, for example, contains API bindings to Twitter's "direct_messages" resource:, +			<para>, +				API developers are free to implement their Java API binding with whatever HTTP/REST client they see fit., +				That said, Spring Social's existing API bindings such as spring-social-twitter all use Spring Framework's RestTemplate in conjunction with the Jackson JSON ObjectMapper., +				RestTemplate is a popular REST client that provides a uniform object mapping interface across a variety of data exchange formats (JSON, XML, etc)., +				Jackson is the leading Java-based JSON marshalling technology., +				To help promote consistency across Spring Social's supported bindings, we do recommend you consider these implementation technologies (and please let us know if they do not meet your needs)., +			</para>, +			<para>]