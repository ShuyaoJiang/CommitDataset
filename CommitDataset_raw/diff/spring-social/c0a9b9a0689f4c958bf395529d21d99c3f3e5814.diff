[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.Arrays;, +import org.springframework.http.MediaType;, +		messageConverters.add(getFormMessageConverter());, +		messageConverters.add(getJsonMessageConverter());, +		messageConverters.add(getByteArrayMessageConverter());, +	 * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * By default, the message converter is set to use "UTF-8" character encoding., +	 * May be overridden to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	protected FormHttpMessageConverter getFormMessageConverter() {, +		FormHttpMessageConverter converter = new FormHttpMessageConverter();, +		converter.setCharset(Charset.forName("UTF-8"));, +		return converter;, +	}, +	, +	/**, +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * May be overridden to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 */, +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +	}, +	, +	/**, +	 * Returns a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources., +	 * By default, the message converter supports "image/jpeg", "image/gif", and "image/png" media types., +	 * May be overridden to customize the message converter (for example, to set supported media types)., +	 */, +	protected ByteArrayHttpMessageConverter getByteArrayMessageConverter() {, +		ByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter();, +		converter.setSupportedMediaTypes(Arrays.asList(MediaType.IMAGE_JPEG, MediaType.IMAGE_GIF, MediaType.IMAGE_PNG));, +		return converter;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiBinding.java, +import java.util.Arrays;, +import org.springframework.http.MediaType;, +		messageConverters.add(getFormMessageConverter());, +		messageConverters.add(getJsonMessageConverter());, +		messageConverters.add(getByteArrayMessageConverter());, +	 * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * By default, the message converter is set to use "UTF-8" character encoding., +	 * May be overridden to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	protected FormHttpMessageConverter getFormMessageConverter() {, +		FormHttpMessageConverter converter = new FormHttpMessageConverter();, +		converter.setCharset(Charset.forName("UTF-8"));, +		return converter;, +	}, +	, +	/**, +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * May be overridden to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 */, +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +	}, +	, +	/**, +	 * Returns a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources., +	 * By default, the message converter supports "image/jpeg", "image/gif", and "image/png" media types., +	 * May be overridden to customize the message converter (for example, to set supported media types)., +	 */, +	protected ByteArrayHttpMessageConverter getByteArrayMessageConverter() {, +		ByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter();, +		converter.setSupportedMediaTypes(Arrays.asList(MediaType.IMAGE_JPEG, MediaType.IMAGE_GIF, MediaType.IMAGE_PNG));, +		return converter;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +import java.util.Arrays;, +import org.springframework.http.MediaType;, +		messageConverters.add(getFormMessageConverter());, +		messageConverters.add(getJsonMessageConverter());, +		messageConverters.add(getByteArrayMessageConverter());, +	 * Returns an {@link FormHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * By default, the message converter is set to use "UTF-8" character encoding., +	 * May be overridden to customize the message converter (for example, to set supported media types or message converters for the parts of a multipart message). , +	protected FormHttpMessageConverter getFormMessageConverter() {, +		FormHttpMessageConverter converter = new FormHttpMessageConverter();, +		converter.setCharset(Charset.forName("UTF-8"));, +		return converter;, +	}, +	, +	/**, +	 * Returns a {@link MappingJacksonHttpMessageConverter} to be used by the internal {@link RestTemplate}., +	 * May be overridden to customize the message converter (for example, to set a custom object mapper or supported media types)., +	 */, +	protected MappingJacksonHttpMessageConverter getJsonMessageConverter() {, +		return new MappingJacksonHttpMessageConverter(); , +	}, +	, +	/**, +	 * Returns a {@link ByteArrayHttpMessageConverter} to be used by the internal {@link RestTemplate} when consuming image or other binary resources., +	 * By default, the message converter supports "image/jpeg", "image/gif", and "image/png" media types., +	 * May be overridden to customize the message converter (for example, to set supported media types)., +	 */, +	protected ByteArrayHttpMessageConverter getByteArrayMessageConverter() {, +		ByteArrayHttpMessageConverter converter = new ByteArrayHttpMessageConverter();, +		converter.setSupportedMediaTypes(Arrays.asList(MediaType.IMAGE_JPEG, MediaType.IMAGE_GIF, MediaType.IMAGE_PNG));, +		return converter;]