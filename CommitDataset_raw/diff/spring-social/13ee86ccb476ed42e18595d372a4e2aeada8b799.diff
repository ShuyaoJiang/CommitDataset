[+++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseProfile.java, +	long accountId;, +	String displayName;, +	String pictureUrl;, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseProfile.java, +	long accountId;, +	String displayName;, +	String pictureUrl;, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.web.client.RestOperations;, +	RestOperations restOperations;, +	static final String DEFAULT_BASE_URL = "https://greenhouse.springsource.org";, +	static final String PROFILE_PATH = "/members/{id}";, +	static final String EVENTS_PATH = "/events";, +	static final String SESSIONS_FOR_DAY_PATH = "/events/{eventId}/sessions/{day}";, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseProfile.java, +	long accountId;, +	String displayName;, +	String pictureUrl;, +++ b/src/main/java/org/springframework/social/greenhouse/GreenhouseTemplate.java, +import org.springframework.web.client.RestOperations;, +	RestOperations restOperations;, +	static final String DEFAULT_BASE_URL = "https://greenhouse.springsource.org";, +	static final String PROFILE_PATH = "/members/{id}";, +	static final String EVENTS_PATH = "/events";, +	static final String SESSIONS_FOR_DAY_PATH = "/events/{eventId}/sessions/{day}";, +++ b/src/test/java/org/springframework/social/greenhouse/GreenhouseTemplateTest.java, +package org.springframework.social.greenhouse;, +, +import static org.junit.Assert.*;, +import static org.junit.internal.matchers.IsCollectionContaining.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.http.HttpStatus.*;, +import static org.springframework.social.greenhouse.GreenhouseTemplate.*;, +, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.List;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.http.HttpEntity;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.ResponseEntity;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.client.RestOperations;, +, +public class GreenhouseTemplateTest {, +	private GreenhouseTemplate greenhouse;, +	private RestOperations restOperations;, +	private MultiValueMap<String, String> jsonAcceptingHeaders;, +, +	@Before, +	public void setup() {, +		greenhouse = new GreenhouseTemplate("API_KEY", "API_SECRET", "ACCESS_TOKEN",, +				"ACCESS_TOKEN_SECRET");, +		restOperations = mock(RestOperations.class);, +		greenhouse.restOperations = restOperations;, +		jsonAcceptingHeaders = new LinkedMultiValueMap<String, String>();, +		jsonAcceptingHeaders.add("Accept", "application/json");, +, +	}, +, +	@Test, +	public void getUserProfile() {, +		GreenhouseProfile profile = new GreenhouseProfile();, +		profile.accountId = 1L;, +		profile.displayName = "Craig Walls";, +		profile.pictureUrl = "https://greenhouse.springsource.org/images/1";, +		ResponseEntity<GreenhouseProfile> response = new ResponseEntity<GreenhouseProfile>(profile, HttpStatus.OK);, +		when(restOperations.exchange(eq(DEFAULT_BASE_URL + PROFILE_PATH), eq(GET), any(HttpEntity.class),, +						eq(GreenhouseProfile.class), eq("@self"))).thenReturn(response);, +, +		GreenhouseProfile actual = greenhouse.getUserProfile();, +		assertEquals(1L, actual.getAccountId());, +		assertEquals("Craig Walls", actual.getDisplayName());, +		assertEquals("https://greenhouse.springsource.org/images/1", actual.getPictureUrl());, +	}, +, +	@Test, +	public void getUpcomingEvents() {, +		Event event1 = new Event();, +		Event event2 = new Event();, +		Event event3 = new Event();, +		Event[] body = new Event[] { event1, event2, event3 };, +		ResponseEntity<Event[]> response = new ResponseEntity<Event[]>(body, OK);, +		when(restOperations.exchange(eq(DEFAULT_BASE_URL + EVENTS_PATH), eq(GET), any(HttpEntity.class), eq(Event[].class))), +				.thenReturn(response);, +, +		List<Event> events = greenhouse.getUpcomingEvents();, +		assertThat(events, hasItem(event1));, +		assertThat(events, hasItem(event2));, +		assertThat(events, hasItem(event3));, +	}, +, +	@Test, +	public void getEventsAfter() {]