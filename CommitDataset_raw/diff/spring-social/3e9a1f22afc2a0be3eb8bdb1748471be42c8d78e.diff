[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +import org.springframework.util.MultiValueMap;, +	 * May be used to store custom connection attributes in the session before redirecting the user to the provider's site or to contribute parameters to the authorization URL., +	 * @return Additional parameters to be passed on the authorization URL. May return null if the interceptor doesn't contribute any parameters., +	MultiValueMap<String, String> preConnect(ConnectionFactory<S> connectionFactory, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +import org.springframework.util.MultiValueMap;, +	 * May be used to store custom connection attributes in the session before redirecting the user to the provider's site or to contribute parameters to the authorization URL., +	 * @return Additional parameters to be passed on the authorization URL. May return null if the interceptor doesn't contribute any parameters., +	MultiValueMap<String, String> preConnect(ConnectionFactory<S> connectionFactory, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import org.springframework.util.MultiValueMap;, +		return buildOAuthUrl(connectionFactory, request, null);, +	}, +	, +	/**, +	 * Builds the provider URL to redirect the user to for connection authorization., +	 * @param connectionFactory the service provider's connection factory e.g. FacebookConnectionFactory, +	 * @param request the current web request, +	 * @param additionalParameters parameters to add to the authorization URL., +	 * @return the URL to redirect the user to for authorization, +	 * @throws IllegalArgumentException if the connection factory is not OAuth1 based., +	 */, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(null, additionalParameters));, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request), additionalParameters));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"), null, additionalParameters);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		MultiValueMap<String, String> additionalParameters = preConnect(connectionFactory, request);, +		return new RedirectView(webSupport.buildOAuthUrl(connectionFactory, request, additionalParameters));, +	private MultiValueMap<String, String> preConnect(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +			MultiValueMap parameters = interceptor.preConnect(connectionFactory, request);, +			if (parameters != null) {, +				additionalParameters.putAll(parameters);, +		return additionalParameters;, +	}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +import org.springframework.util.MultiValueMap;, +	 * May be used to store custom connection attributes in the session before redirecting the user to the provider's site or to contribute parameters to the authorization URL., +	 * @return Additional parameters to be passed on the authorization URL. May return null if the interceptor doesn't contribute any parameters., +	MultiValueMap<String, String> preConnect(ConnectionFactory<S> connectionFactory, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import org.springframework.util.MultiValueMap;, +		return buildOAuthUrl(connectionFactory, request, null);, +	}, +	, +	/**, +	 * Builds the provider URL to redirect the user to for connection authorization., +	 * @param connectionFactory the service provider's connection factory e.g. FacebookConnectionFactory, +	 * @param request the current web request, +	 * @param additionalParameters parameters to add to the authorization URL., +	 * @return the URL to redirect the user to for authorization, +	 * @throws IllegalArgumentException if the connection factory is not OAuth1 based., +	 */, +	public String buildOAuthUrl(ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			return buildOAuth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +			return buildOAuth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request, additionalParameters);, +	private String buildOAuth1Url(OAuth1ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(null, additionalParameters));, +			authorizeUrl = buildOAuth1Url(oauthOperations, requestToken.getValue(), new OAuth1Parameters(callbackUrl(request), additionalParameters));, +	private String buildOAuth2Url(OAuth2ConnectionFactory<?> connectionFactory, NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth2Parameters parameters = new OAuth2Parameters(callbackUrl(request), request.getParameter("scope"), null, additionalParameters);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +import static org.junit.Assert.*;, +import java.util.List;]