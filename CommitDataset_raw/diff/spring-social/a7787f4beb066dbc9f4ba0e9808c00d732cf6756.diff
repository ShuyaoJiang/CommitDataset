[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, +				MultiValueMap.class);, +		@SuppressWarnings("unchecked"), +		MultiValueMap<String, String> responseMap = response.getBody();, +		return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, +				MultiValueMap.class);, +		@SuppressWarnings("unchecked"), +		MultiValueMap<String, String> responseMap = response.getBody();, +		return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer.expect(requestTo("https://www.someprovider.com/oauth/requestToken")), +				.andExpect(method(POST)), +				.andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), +				.andExpect(headerContains("Authorization", "oauth_version=\"1.0\"")), +				.andExpect(headerContains("Authorization", "oauth_signature_method=\"HMAC-SHA1\"")), +				.andExpect(headerContains("Authorization", "oauth_consumer_key=\"consumer_key\"")), +				.andExpect(headerContains("Authorization", "oauth_nonce=\"")), +				.andExpect(headerContains("Authorization", "oauth_signature=\"")), +				.andExpect(headerContains("Authorization", "oauth_timestamp=\"")), +				.andRespond(withResponse(new ClassPathResource("requestToken.formencoded", getClass()), responseHeaders));, +, +		OAuthToken requestToken = oauth1.fetchNewRequestToken("http://www.someclient.com/oauth/callback");, +		assertEquals("1234567890", requestToken.getValue());, +		assertEquals("abcdefghijklmnop", requestToken.getSecret());, +		MockRestServiceServer mockServer = MockRestServiceServer, +				.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer, +				.expect(requestTo("http://www.someprovider.com/oauth/accessToken")), +				.andExpect(method(POST)), +				.andExpect(headerContains("Authorization", "oauth_version=\"1.0\"")), +				.andExpect(headerContains("Authorization", "oauth_signature_method=\"HMAC-SHA1\"")), +				.andExpect(headerContains("Authorization", "oauth_consumer_key=\"consumer_key\"")), +				.andExpect(headerContains("Authorization", "oauth_token=\"1234567890\"")), +				.andExpect(headerContains("Authorization", "oauth_verifier=\"verifier\"")), +				.andExpect(headerContains("Authorization", "oauth_nonce=\"")), +				.andExpect(headerContains("Authorization", "oauth_signature=\"")), +				.andExpect(headerContains("Authorization", "oauth_timestamp=\"")), +				.andRespond(withResponse(new ClassPathResource("accessToken.formencoded", getClass()), responseHeaders));, +, +		OAuthToken requestToken = new OAuthToken("1234567890", "abcdefghijklmnop");, +		OAuthToken accessToken = oauth1.exchangeForAccessToken(new AuthorizedRequestToken(requestToken, "verifier"));, +		assertEquals("9876543210", accessToken.getValue());, +		assertEquals("ponmlkjihgfedcba", accessToken.getSecret());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		@SuppressWarnings("rawtypes"), +		ResponseEntity<MultiValueMap> response = getRestOperations().exchange(tokenUrl, HttpMethod.POST, request,, +				MultiValueMap.class);, +		@SuppressWarnings("unchecked"), +		MultiValueMap<String, String> responseMap = response.getBody();, +		return new OAuthToken(responseMap.getFirst("oauth_token"), responseMap.getFirst("oauth_token_secret"));, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer.expect(requestTo("https://www.someprovider.com/oauth/requestToken")), +				.andExpect(method(POST)), +				.andExpect(headerContains("Authorization", "oauth_callback=\"http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback\"")), +				.andExpect(headerContains("Authorization", "oauth_version=\"1.0\"")), +				.andExpect(headerContains("Authorization", "oauth_signature_method=\"HMAC-SHA1\"")), +				.andExpect(headerContains("Authorization", "oauth_consumer_key=\"consumer_key\"")), +				.andExpect(headerContains("Authorization", "oauth_nonce=\"")), +				.andExpect(headerContains("Authorization", "oauth_signature=\"")), +				.andExpect(headerContains("Authorization", "oauth_timestamp=\"")), +				.andRespond(withResponse(new ClassPathResource("requestToken.formencoded", getClass()), responseHeaders));, +, +		OAuthToken requestToken = oauth1.fetchNewRequestToken("http://www.someclient.com/oauth/callback");, +		assertEquals("1234567890", requestToken.getValue());, +		assertEquals("abcdefghijklmnop", requestToken.getSecret());, +		MockRestServiceServer mockServer = MockRestServiceServer, +				.createServer((RestTemplate) oauth1.getRestOperations());, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);, +		mockServer, +				.expect(requestTo("http://www.someprovider.com/oauth/accessToken"))]