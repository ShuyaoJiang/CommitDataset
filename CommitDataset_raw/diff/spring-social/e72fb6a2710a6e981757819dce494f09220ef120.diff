[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.security.web.authentication.RememberMeServices;, + *        .apply(new SpringSocialHttpConfigurer()), + *        .and().setSharedObject(ApplicationContext.class, context);, + * Note that when using with Spring Security 3.2.0.RC1, it's important to set the ApplicationContext as a shared object,, + * as shown above. Later RCs and the GA release of Spring Security will automatically set the ApplicationContext as a, + * shared object, making this step unnecessary. , + * , +	private UserIdSource userIdSource;, +	 * Requires that {@link UsersConnectionRepository}, {@link SocialAuthenticationServiceLocator}, and, +	 * {@link SocialUserDetailsService} beans be available in the application context., +	 * If using with Spring Security 3.2.0.RC1, then you must also set the ApplicationContext as a shared object, +	 * (this is unnecessary for later release candidates and the GA release of Spring Security 3.2.0)., +	public SpringSocialConfigurer() {, +		ApplicationContext applicationContext = http.getSharedObject(ApplicationContext.class);, +		UsersConnectionRepository usersConnectionRepository = getDependency(applicationContext, UsersConnectionRepository.class);, +		SocialAuthenticationServiceLocator authServiceLocator = getDependency(applicationContext, SocialAuthenticationServiceLocator.class);, +		SocialUserDetailsService socialUsersDetailsService = getDependency(applicationContext, SocialUserDetailsService.class);, +		, +		SocialAuthenticationFilter filter = new SocialAuthenticationFilter(, +				http.getSharedObject(AuthenticationManager.class), , +				userIdSource != null ? userIdSource : new AuthenticationNameUserIdSource(), , +				usersConnectionRepository, , +				authServiceLocator);, +, +		RememberMeServices rememberMe = http.getSharedObject(RememberMeServices.class);, +		if(rememberMe != null) {, +			filter.setRememberMeServices(rememberMe);, +		}, +			.addFilterBefore(postProcess(filter), AbstractPreAuthenticatedProcessingFilter.class);, +	}, +, +	private <T> T getDependency(ApplicationContext applicationContext, Class<T> dependencyType) {, +		try {, +			T dependency = applicationContext.getBean(dependencyType);, +			return dependency;, +		} catch (NoSuchBeanDefinitionException e) {, +			throw new IllegalStateException("SpringSocialConfigurer depends on " + dependencyType.getName() +". No single bean of that type found in application context.", e);, +		}, +	}, +	, +	/**, +	 * Sets the {@link UserIdSource} to use for authentication. Defaults to {@link AuthenticationNameUserIdSource}., +	 */, +	public SpringSocialConfigurer userIdSource(UserIdSource userIdSource) {, +		this.userIdSource = userIdSource;, +		return this;]