[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	public S getServiceOperations(String providerAccountId) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName(),, +				providerAccountId);, +		return createServiceOperations(accessToken);, +	}, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	public S getServiceOperations(String providerAccountId) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName(),, +				providerAccountId);, +		return createServiceOperations(accessToken);, +	}, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +	OAuthToken getAccessToken(Serializable accountId, String provider, String providerAccountId);, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	public S getServiceOperations(String providerAccountId) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName(),, +				providerAccountId);, +		return createServiceOperations(accessToken);, +	}, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +	OAuthToken getAccessToken(Serializable accountId, String provider, String providerAccountId);, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +		this.accessTokenByAccountIdQuery = DEFAULT_ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY;, +	public OAuthToken getAccessToken(Serializable accountId, String provider, String providerAccountId) {, +		return jdbcTemplate.queryForObject(accessTokenByAccountIdQuery, new RowMapper<OAuthToken>() {, +			public OAuthToken mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return new OAuthToken(rs.getString(1), rs.getString(2));, +			}, +		}, accountId, provider, providerAccountId);, +	}, +, +	private String accessTokenByAccountIdQuery;, +	static final String DEFAULT_ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ? and accountId = ?";, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	public S getServiceOperations(String providerAccountId) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName(),, +				providerAccountId);, +		return createServiceOperations(accessToken);, +	}, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +	OAuthToken getAccessToken(Serializable accountId, String provider, String providerAccountId);, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +		this.accessTokenByAccountIdQuery = DEFAULT_ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY;, +	public OAuthToken getAccessToken(Serializable accountId, String provider, String providerAccountId) {, +		return jdbcTemplate.queryForObject(accessTokenByAccountIdQuery, new RowMapper<OAuthToken>() {, +			public OAuthToken mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return new OAuthToken(rs.getString(1), rs.getString(2));, +			}, +		}, accountId, provider, providerAccountId);, +	}, +, +	private String accessTokenByAccountIdQuery;, +	static final String DEFAULT_ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ? and accountId = ?";, +, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/ServiceProvider.java, +	S getServiceOperations(String providerAccountId);, +]