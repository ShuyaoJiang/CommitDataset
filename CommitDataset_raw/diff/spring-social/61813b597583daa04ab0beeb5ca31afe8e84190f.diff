[+++ b/build.gradle, +    ext.springReleaseVersion    = "latest.release", +    ext.springSnapshotVersion   = "latest.integration", +        springReleaseTestRuntime.extendsFrom testRuntime, +    // Test against latest Spring Framework release, +    configurations.springReleaseTestRuntime {, +        resolutionStrategy.eachDependency { DependencyResolveDetails details ->, +            if (details.requested.group == 'org.springframework') {, +                details.useVersion springReleaseVersion, +            }, +        }, +    }, +, +    // Test against latest Spring Framework snapshot, +    task springReleaseTest(type: Test) {, +        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime, +        getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/")), +        getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/")), +    }, +    check.dependsOn springReleaseTest, +, +    configure([test, springReleaseTest, springSnapshotTest]) {, +++ b/build.gradle, +    ext.springReleaseVersion    = "latest.release", +    ext.springSnapshotVersion   = "latest.integration", +        springReleaseTestRuntime.extendsFrom testRuntime, +    // Test against latest Spring Framework release, +    configurations.springReleaseTestRuntime {, +        resolutionStrategy.eachDependency { DependencyResolveDetails details ->, +            if (details.requested.group == 'org.springframework') {, +                details.useVersion springReleaseVersion, +            }, +        }, +    }, +, +    // Test against latest Spring Framework snapshot, +    task springReleaseTest(type: Test) {, +        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime, +        getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/")), +        getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/")), +    }, +    check.dependsOn springReleaseTest, +, +    configure([test, springReleaseTest, springSnapshotTest]) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +++ b/build.gradle, +    ext.springReleaseVersion    = "latest.release", +    ext.springSnapshotVersion   = "latest.integration", +        springReleaseTestRuntime.extendsFrom testRuntime, +    // Test against latest Spring Framework release, +    configurations.springReleaseTestRuntime {, +        resolutionStrategy.eachDependency { DependencyResolveDetails details ->, +            if (details.requested.group == 'org.springframework') {, +                details.useVersion springReleaseVersion, +            }, +        }, +    }, +, +    // Test against latest Spring Framework snapshot, +    task springReleaseTest(type: Test) {, +        classpath = sourceSets.test.output + sourceSets.main.output + configurations.springReleaseTestRuntime, +        getReports().getJunitXml().setDestination(file("$buildDir/spring-release-test-results/")), +        getReports().getHtml().setDestination(file("$buildDir/reports/spring-release-tests/")), +    }, +    check.dependsOn springReleaseTest, +, +    configure([test, springReleaseTest, springSnapshotTest]) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +	 * AUTHORIZATION_CODE denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 * IMPLICIT_GRANT denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Construct the URL to redirect the user to for authorization., +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	 */ , +	@Deprecated, +	String buildAuthorizeUrl(GrantType grantType, OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication.]