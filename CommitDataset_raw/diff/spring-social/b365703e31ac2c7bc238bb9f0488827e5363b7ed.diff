[+++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/connecting.xml, +      <para>As seen in the previous chapter, Spring Social's service provider framework supports creating connections with a provider, including a lot of the heavy lifting involved in OAuth authorization. But if you were to use the service provider framework alone to build OAuth into your application, you'd still need to (at very least) write a controller to handle the OAuth callback from the provider after authorization.</para>, +      , +      <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the the entire connection flow, regardless of which version of OAuth a service provider implements.</para>, +++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/connecting.xml, +      <para>As seen in the previous chapter, Spring Social's service provider framework supports creating connections with a provider, including a lot of the heavy lifting involved in OAuth authorization. But if you were to use the service provider framework alone to build OAuth into your application, you'd still need to (at very least) write a controller to handle the OAuth callback from the provider after authorization.</para>, +      , +      <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the the entire connection flow, regardless of which version of OAuth a service provider implements.</para>, +++ b/docs/src/reference/docbook/overview.xml, +      <para>Social integration is a three-way conversation between a service provider, a service consumer, and a user who holds an account on both the provider and consumer. All interactions between the consumer and the service provider are scoped to the context of the user's profile on the service provider.</para>, +          , +      <para>In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of them both. The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including seeing Paul's list of friends and posting messages to his Facebook wall.</para>, +      <para>With Spring Social, an application can play the part of the service consumer, interacting with a service provider on behalf of its users. The key features of Spring Social are:</para>, +      , +      <itemizedlist>, +          <listitem><para>A service provider framework that models the authorization and connection creation process with a service.</para></listitem>, +          <listitem><para>A connection controller that handles the OAuth exchange between a service provider, consumer, and user.</para></listitem>, +          <listitem><para>APIs for several service providers such as Facebook, Twitter, LinkedIn, TripIt, GitHub, and Gowalla.</para></listitem>, +          <listitem><para>A signin controller that enables a user to authenticate to an application by signing into either Facebook or Twitter.</para></listitem>, +      </itemizedlist>, +++ b/docs/src/reference/docbook/apis.xml, +      , +      <para>After a user has granted your application access to their service provider profile, you'll be able to interact with that service provider to update or retrieve the user's data. Your application may, for example, post a Tweet on behalf of a user or review a user's list of contacts to see if any of them have also created connections to your application.</para>, +      , +      <para>Each service provider exposes their data and functionality through an API. Spring Social provides Java-based access to those APIs via provider-specific templates, each implementing a provider operations interface.</para>, +      , +      <para>Spring Social comes with six provider API templates/operations for the following service providers:</para>, +      , +      <itemizedlist>, +          <listitem><para>Facebook</para></listitem>, +          <listitem><para>GitHub</para></listitem>, +          <listitem><para>Gowalla</para></listitem>, +          <listitem><para>LinkedIn</para></listitem>, +          <listitem><para>TripIt</para></listitem>, +          <listitem><para>Twitter</para></listitem>, +      </itemizedlist>, +        <para>Twitter's social offering is rather simple: Enable users to post whatever they're thinking, 140 characters at a time.</para>, +          <para>If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:</para>, +++ b/docs/src/reference/docbook/connecting.xml, +      <para>As seen in the previous chapter, Spring Social's service provider framework supports creating connections with a provider, including a lot of the heavy lifting involved in OAuth authorization. But if you were to use the service provider framework alone to build OAuth into your application, you'd still need to (at very least) write a controller to handle the OAuth callback from the provider after authorization.</para>, +      , +      <para>To simplify an application's role in the OAuth dance, Spring Social provides <classname>ConnectController</classname>. <classname>ConnectController</classname> is a Spring MVC controller that handles the the entire connection flow, regardless of which version of OAuth a service provider implements.</para>, +++ b/docs/src/reference/docbook/overview.xml, +      <para>Social integration is a three-way conversation between a service provider, a service consumer, and a user who holds an account on both the provider and consumer. All interactions between the consumer and the service provider are scoped to the context of the user's profile on the service provider.</para>, +          , +      <para>In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of them both. The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including seeing Paul's list of friends and posting messages to his Facebook wall.</para>]