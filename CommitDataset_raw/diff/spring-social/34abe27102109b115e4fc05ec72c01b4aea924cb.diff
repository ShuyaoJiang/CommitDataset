[+++ b/spring-social-webmvc/src/main/java/org/springframework/social/web/connect/ConnectController.java, +import org.springframework.social.oauth1.OAuth1Operations;, + * Generic UI controller for managing the account-to-service-provider connection flow., + * GET /connect/{providerId}  - Get a web page showing connection status to {providerId}.<br/>, + * POST /connect/{providerId} - Initiate an connection with {providerId}.<br/>, + * GET /connect/{providerId}?oauth_token||code - Receive {providerId} authorization callback and establish the connection.<br/>, + * DELETE /connect/{providerId} - Disconnect from {providerId}.<br/>, +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.GET), +	public String connect(@PathVariable String providerId) {, +		String baseViewPath = "connect/" + providerId;, +		if (getServiceProvider(providerId).isConnected(accountIdResolver.resolveAccountId())) {, +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.POST), +	public String connect(@PathVariable String providerId, @RequestParam(required=false) String scope,  WebRequest request) {, +		ServiceProvider<?> provider = getServiceProvider(providerId);, +			OAuth1Operations oauth1Ops = ((OAuth1ServiceProvider<?>) provider).getOAuth1Operations();, +			OAuthToken requestToken = oauth1Ops.fetchNewRequestToken(baseCallbackUrl + providerId);, +			return "redirect:" + oauth1Ops.buildAuthorizeUrl(requestToken.getValue());, +			return "redirect:" + ((OAuth2ServiceProvider<?>) provider).getOAuth2Operations().buildAuthorizeUrl(baseCallbackUrl + providerId, scope);, +	 * Called after the member authorizes the connection, generally done by having he or she click "Allow" in their web browser at the provider's site., +	 * On authorization verification, connects the member's local account to the account they hold at the service provider, +	 * Removes the request token from the session since it is no longer valid after the connection is established., +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.GET, params="oauth_token"), +	public String oauth1Callback(@PathVariable String providerId, @RequestParam("oauth_token") String token, @RequestParam(value="oauth_verifier") String verifier, WebRequest request) {, +		AuthorizedRequestToken authorizedRequestToken = new AuthorizedRequestToken(extractCachedRequestToken(request), verifier);, +		OAuth1ServiceProvider<?> provider = (OAuth1ServiceProvider<?>) getServiceProvider(providerId);, +		ServiceProviderConnection<?> connection = provider.connect(accountIdResolver.resolveAccountId(), provider.getOAuth1Operations().exchangeForAccessToken(authorizedRequestToken));, +		postConnect(provider, connection, request);, +		return "redirect:/connect/" + providerId;, +	 * Called after the member authorizes the connection, generally done by having he or she click "Allow" in their web browser at the provider's site., +	 * On authorization verification, connects the member's local account to the account they hold at the service provider., +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.GET, params="code"), +	public String oauth2Callback(@PathVariable String providerId, @RequestParam("code") String code, WebRequest request) {, +		OAuth2ServiceProvider<?> provider = (OAuth2ServiceProvider<?>) getServiceProvider(providerId);, +		AccessGrant accessGrant = provider.getOAuth2Operations().exchangeForAccess(code, baseCallbackUrl + providerId);, +		ServiceProviderConnection<?> connection = provider.connect(accountIdResolver.resolveAccountId(), accessGrant);, +		postConnect(provider, connection, request);, +		return "redirect:/connect/" + providerId;, +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.DELETE), +	public String disconnect(@PathVariable String providerId) {, +		ServiceProvider provider = getServiceProvider(providerId);, +		List<ServiceProviderConnection> connections = provider.getConnections(accountIdResolver.resolveAccountId());, +		for (ServiceProviderConnection connection : connections) {, +			connection.disconnect();, +		return "redirect:/connect/" + providerId;, +	private ServiceProvider<?> getServiceProvider(String providerId) {, +		return serviceProviderFactory.getServiceProvider(providerId);, +	private void postConnect(ServiceProvider<?> provider, ServiceProviderConnection<?> connection, WebRequest request) {, +			interceptor.postConnect(provider, connection, request);, +	private OAuthToken extractCachedRequestToken(WebRequest request) {, +		OAuthToken requestToken = (OAuthToken) request.getAttribute(OAUTH_TOKEN_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		request.removeAttribute(OAUTH_TOKEN_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		return requestToken;, +	}, +	, +	, +++ b/spring-social-webmvc/src/main/java/org/springframework/social/web/connect/ConnectController.java, +import org.springframework.social.oauth1.OAuth1Operations;, + * Generic UI controller for managing the account-to-service-provider connection flow., + * GET /connect/{providerId}  - Get a web page showing connection status to {providerId}.<br/>, + * POST /connect/{providerId} - Initiate an connection with {providerId}.<br/>, + * GET /connect/{providerId}?oauth_token||code - Receive {providerId} authorization callback and establish the connection.<br/>, + * DELETE /connect/{providerId} - Disconnect from {providerId}.<br/>, +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.GET), +	public String connect(@PathVariable String providerId) {, +		String baseViewPath = "connect/" + providerId;, +		if (getServiceProvider(providerId).isConnected(accountIdResolver.resolveAccountId())) {, +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.POST), +	public String connect(@PathVariable String providerId, @RequestParam(required=false) String scope,  WebRequest request) {, +		ServiceProvider<?> provider = getServiceProvider(providerId);, +			OAuth1Operations oauth1Ops = ((OAuth1ServiceProvider<?>) provider).getOAuth1Operations();, +			OAuthToken requestToken = oauth1Ops.fetchNewRequestToken(baseCallbackUrl + providerId);, +			return "redirect:" + oauth1Ops.buildAuthorizeUrl(requestToken.getValue());, +			return "redirect:" + ((OAuth2ServiceProvider<?>) provider).getOAuth2Operations().buildAuthorizeUrl(baseCallbackUrl + providerId, scope);, +	 * Called after the member authorizes the connection, generally done by having he or she click "Allow" in their web browser at the provider's site., +	 * On authorization verification, connects the member's local account to the account they hold at the service provider, +	 * Removes the request token from the session since it is no longer valid after the connection is established., +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.GET, params="oauth_token"), +	public String oauth1Callback(@PathVariable String providerId, @RequestParam("oauth_token") String token, @RequestParam(value="oauth_verifier") String verifier, WebRequest request) {, +		AuthorizedRequestToken authorizedRequestToken = new AuthorizedRequestToken(extractCachedRequestToken(request), verifier);, +		OAuth1ServiceProvider<?> provider = (OAuth1ServiceProvider<?>) getServiceProvider(providerId);, +		ServiceProviderConnection<?> connection = provider.connect(accountIdResolver.resolveAccountId(), provider.getOAuth1Operations().exchangeForAccessToken(authorizedRequestToken));, +		postConnect(provider, connection, request);, +		return "redirect:/connect/" + providerId;, +	 * Called after the member authorizes the connection, generally done by having he or she click "Allow" in their web browser at the provider's site., +	 * On authorization verification, connects the member's local account to the account they hold at the service provider., +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.GET, params="code"), +	public String oauth2Callback(@PathVariable String providerId, @RequestParam("code") String code, WebRequest request) {, +		OAuth2ServiceProvider<?> provider = (OAuth2ServiceProvider<?>) getServiceProvider(providerId);, +		AccessGrant accessGrant = provider.getOAuth2Operations().exchangeForAccess(code, baseCallbackUrl + providerId);, +		ServiceProviderConnection<?> connection = provider.connect(accountIdResolver.resolveAccountId(), accessGrant);, +		postConnect(provider, connection, request);, +		return "redirect:/connect/" + providerId;, +	@RequestMapping(value="/connect/{providerId}", method=RequestMethod.DELETE), +	public String disconnect(@PathVariable String providerId) {, +		ServiceProvider provider = getServiceProvider(providerId);, +		List<ServiceProviderConnection> connections = provider.getConnections(accountIdResolver.resolveAccountId());, +		for (ServiceProviderConnection connection : connections) {, +			connection.disconnect();, +		return "redirect:/connect/" + providerId;, +	private ServiceProvider<?> getServiceProvider(String providerId) {]