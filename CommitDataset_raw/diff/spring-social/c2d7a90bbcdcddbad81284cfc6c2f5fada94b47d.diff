[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth1Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth1Provider", connections.get(0).getKey().getProviderId());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth1Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth1Provider", connections.get(0).getKey().getProviderId());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth1Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth1Provider", connections.get(0).getKey().getProviderId());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ConnectionFactory.java, +		this(clientId, clientSecret, StubOAuth1Template.Behavior.NO_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubOAuth1ServiceProvider.java, +		this(consumerKey, consumerSecret, StubOAuth1Template.Behavior.NO_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.junit.Assert.*;, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.web.test.StubConnectionRepository;, +	public void connect_OAuth1Provider_exceptionWhileFetchingRequestToken() throws Exception {, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +	, +	@Test, +	public void oauth1Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();]