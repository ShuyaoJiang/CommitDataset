[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectController.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect;, +, +import java.util.Collections;, +import java.util.List;, +, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.stereotype.Controller;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.bind.annotation.PathVariable;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.bind.annotation.RequestMethod;, +import org.springframework.web.bind.annotation.RequestParam;, +import org.springframework.web.context.request.WebRequest;, +, +/**, + * Generic UI controller for managing the account connection process.  Supported flow:, + * <ul>, + * GET /connect/{name}  - Get a web page showing Account connection status to provider {name}.<br/>, + * POST /connect/{name} - Initiate an Account connection with provider {name}.<br/>, + * GET /connect/{name}?oauth_token - Receive provider {name} authorization callback and complete Account connection.<br/>, + * DELETE /connect/{name} - Disconnect Account from provider {name}.<br/>, + * </ul>, + * @author Keith Donald, + * @author Craig Walls, + */, +@Controller, +public class ConnectController {, +	, +	private final ServiceProviderFactory serviceProviderFactory;, +	, +	private final String baseCallbackUrl;, +	, +	private MultiValueMap<Class<?>, ConnectInterceptor<?>> interceptors;, +, +	/**, +	 * Constructs a ConnectController., +	 * @param serviceProviderFactory the factory that loads the ServiceProviders members wish to connect to, +	 * @param applicationUrl the base secure URL for this application, used to construct the callback URL passed to the service providers at the beginning of the connection process., +	 */, +	public ConnectController(ServiceProviderFactory serviceProviderFactory, String applicationUrl) {, +		this.serviceProviderFactory = serviceProviderFactory;, +		this.baseCallbackUrl = applicationUrl + "/connect/";, +		this.interceptors = new LinkedMultiValueMap<Class<?>, ConnectInterceptor<?>>();, +	}, +, +	/**, +	 * Configure the list of interceptors that should receive callbacks during the connection process., +	 */, +	public void setInterceptors(List<ConnectInterceptor<?>> interceptors) {, +		for (ConnectInterceptor<?> interceptor : interceptors) {, +			Class<?> providerType = GenericTypeResolver.resolveTypeArgument(interceptor.getClass(),  ConnectInterceptor.class);, +			this.interceptors.add(providerType, interceptor);, +		}, +	}, +, +	/**, +	 * Render the connect form for the service provider identified by {name} to the member as HTML in their web browser., +	 */, +	@RequestMapping(value="/connect/{name}", method=RequestMethod.GET), +	public String connect(@PathVariable String name) {, +		String baseViewPath = "connect/" + name;, +		if (getServiceProvider(name).isConnected()) {, +			return baseViewPath + "Connected";, +		} else {, +			return baseViewPath + "Connect";, +		}, +	}, +, +	/**, +	 * Process a connect form submission by commencing the process of establishing a connection to the provider on behalf of the member., +	 * Fetches a new request token from the provider, temporarily stores it in the session, then redirects the member to the provider's site for authorization., +	 */, +	@RequestMapping(value="/connect/{name}", method=RequestMethod.POST), +	public String connect(@PathVariable String name, WebRequest request) {, +		ServiceProvider<?> provider = getServiceProvider(name);, +		preConnect(provider, request);, +		OAuthToken requestToken = provider.fetchNewRequestToken(baseCallbackUrl + name);, +		request.setAttribute(OAUTH_TOKEN_ATTRIBUTE, requestToken, WebRequest.SCOPE_SESSION);, +		return "redirect:" + provider.buildAuthorizeUrl(requestToken.getValue());, +	}, +	, +	/**, +	 * Process the authorization callback from the service provider.]