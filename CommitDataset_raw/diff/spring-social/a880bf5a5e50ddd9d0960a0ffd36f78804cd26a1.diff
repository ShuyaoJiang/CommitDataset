[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +/**, + * Abstract bean definition parser for declaring {@link ConnectionFactory}s in a Spring application context., + * Automatically creates a {@link ConnectionFactoryLocator} bean if none exists and registers the {@link ConnectionFactory} bean with the {@link ConnectionFactoryLocator}., + * @author Craig Walls, + */, +abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +, +	private Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +, +	/**, +	 * Constructs a connection factory-creating {@link BeanDefinitionParser}., +	 * @param connectionFactoryClass The type of {@link ConnectionFactory} to create. Must have a two-argument constructor taking an application's ID and secret as Strings., +	 */, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass) {, +		this.connectionFactoryClass = connectionFactoryClass;		, +	}, +	, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET));, +		return connectionFactoryLocatorBD;, +	}, +, +	private BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret) {, +		return BeanDefinitionBuilder.genericBeanDefinition(connectionFactoryClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	}, +, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret) {, +		PropertyValue connectionFactoriesPropertyValue = connectionFactoryLocatorBD.getPropertyValues().getPropertyValue(CONNECTION_FACTORIES);, +		@SuppressWarnings("unchecked"), +		List<BeanDefinition> connectionFactoriesList = connectionFactoriesPropertyValue != null ? , +				(List<BeanDefinition>) connectionFactoriesPropertyValue.getValue() : new ManagedList<BeanDefinition>();, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret));		, +		connectionFactoryLocatorBD.getPropertyValues().addPropertyValue(CONNECTION_FACTORIES, connectionFactoriesList);, +	}, +, +	private BeanDefinition getConnectionFactoryLocatorBeanDefinition(ParserContext parserContext) {, +		String proxyTargetBeanId = CONNECTION_FACTORY_LOCATOR_ID + "_target";, +		if (!parserContext.getRegistry().containsBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID)) {		, +			BeanDefinition connFactoryLocatorBeanDef = BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition();, +			BeanDefinitionHolder proxyTargetBeanDefinitionHolder = new BeanDefinitionHolder(connFactoryLocatorBeanDef, proxyTargetBeanId);, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, ScopedProxyUtils.decorateWithScopedProxy(parserContext, proxyTargetBeanDefinitionHolder, false));, +		}		, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(proxyTargetBeanId);, +		return connectionFactoryLocatorBD;, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +/**, + * Abstract bean definition parser for declaring {@link ConnectionFactory}s in a Spring application context., + * Automatically creates a {@link ConnectionFactoryLocator} bean if none exists and registers the {@link ConnectionFactory} bean with the {@link ConnectionFactoryLocator}., + * @author Craig Walls, + */, +abstract class AbstractConnectionFactoryBeanDefinitionParser implements BeanDefinitionParser {, +, +	private Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +, +	/**, +	 * Constructs a connection factory-creating {@link BeanDefinitionParser}., +	 * @param connectionFactoryClass The type of {@link ConnectionFactory} to create. Must have a two-argument constructor taking an application's ID and secret as Strings., +	 */, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass) {, +		this.connectionFactoryClass = connectionFactoryClass;		, +	}, +	, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET));, +		return connectionFactoryLocatorBD;, +	}, +, +	private BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret) {, +		return BeanDefinitionBuilder.genericBeanDefinition(connectionFactoryClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	}, +, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret) {, +		PropertyValue connectionFactoriesPropertyValue = connectionFactoryLocatorBD.getPropertyValues().getPropertyValue(CONNECTION_FACTORIES);, +		@SuppressWarnings("unchecked"), +		List<BeanDefinition> connectionFactoriesList = connectionFactoriesPropertyValue != null ? , +				(List<BeanDefinition>) connectionFactoriesPropertyValue.getValue() : new ManagedList<BeanDefinition>();, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret));		, +		connectionFactoryLocatorBD.getPropertyValues().addPropertyValue(CONNECTION_FACTORIES, connectionFactoriesList);, +	}, +, +	private BeanDefinition getConnectionFactoryLocatorBeanDefinition(ParserContext parserContext) {, +		String proxyTargetBeanId = CONNECTION_FACTORY_LOCATOR_ID + "_target";, +		if (!parserContext.getRegistry().containsBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID)) {		, +			BeanDefinition connFactoryLocatorBeanDef = BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition();, +			BeanDefinitionHolder proxyTargetBeanDefinitionHolder = new BeanDefinitionHolder(connFactoryLocatorBeanDef, proxyTargetBeanId);, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, ScopedProxyUtils.decorateWithScopedProxy(parserContext, proxyTargetBeanDefinitionHolder, false));, +		}		, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(proxyTargetBeanId);, +		return connectionFactoryLocatorBD;, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookConnectionFactoryBeanDefinitionParser.java, +/**]