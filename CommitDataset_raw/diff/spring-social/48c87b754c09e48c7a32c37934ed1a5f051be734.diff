[+++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Serializable findAccountIdByAccessToken(String provider, String accessToken) {, +		List<Serializable> matches = jdbcTemplate.query("select accountId from Connection where providerId = ? and accessToken = ?", new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return (Serializable) rs.getObject("accountId");, +			}, +		}, provider, encrypt(accessToken));, +, +		return !matches.isEmpty() ? matches.get(0) : null;, +	}, +, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +	<bean class="org.springframework.social.web.connect.ConnectController" autowire="constructor">, +		<constructor-arg ref="connectionRepository" />, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/security.xml, +		<intercept-url pattern="/connect/**" access="permitAll" />, +++ /dev/null, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/views/signin.jsp, +<form action="<c:url value="/connect/twitter/signin" />" method="post">, +	<button type="submit">Sign In With Twitter</button>, +</form>, +, +<form action="<c:url value="/connect/facebook/signin" />" method="post">, +	<button type="submit">Sign In With Facebook</button>, +</form>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Serializable findAccountIdByAccessToken(String provider, String accessToken) {, +		List<Serializable> matches = jdbcTemplate.query("select accountId from Connection where providerId = ? and accessToken = ?", new RowMapper<Serializable>() {, +			public Serializable mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return (Serializable) rs.getObject("accountId");, +			}, +		}, provider, encrypt(accessToken));, +, +		return !matches.isEmpty() ? matches.get(0) : null;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionRepository.java, +	/**, +	 * Looks up an account ID that is connected to a provider for a given access token., +	 */, +	Serializable findAccountIdByAccessToken(String provider, String accessToken);, +++ b/build.gradle, +		compile ("org.springframework.security:spring-security-core:$springSecurityVersion") { optional = true }, +++ b/samples/spring-social-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml]