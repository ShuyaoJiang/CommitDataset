[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a ServiceProvider that allows users to authorize with the remote provider and obtain authorized Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, +				As part of the spring-social-test module, Spring Social includes a framework for unit testing API bindings., +		<para>, +			As described in the previous section, a client binding to a secure API such as Facebook or Twitter requires valid user authorization credentials to work., +			Such credentials are generally obtained by having your application conduct an authorization "dance" or handshake with the service provider., +			Spring Social provides the ServiceProvider&lt;S&gt; abstraction to handle this "authorization dance"., +			The abstraction also acts as a factory for native Service API (S) instances., +		</para>, +		<para>, +			Since the authorization dance is protocol-specific, a ServiceProvider specialization exists for each authorization protocol., +			For example, if you are connecting to a OAuth2-based provider, you would implement OAuth2ServiceProvider., +			After you've done this, your implementation can be used to conduct the OAuth2 dance and obtain an authorized Service API instance., +			This is typically done in the context of a ServiceProviderConnectionFactory as part of establishing a new connection to the provider., +			The following sections describe the implementation steps for each ServiceProvider type., +		</para>, +				Parameterize &lt;S&gt; to be the Java binding to the ServiceProvider's's API., +				Define a single constructor that accepts an clientId and clientSecret., +				Finally, implement getServiceApi(String) to return a new Service API instance., +				See <code>org.springframework.social.facebook.connect.FacebookServiceProvider</code> as an example OAuth2ServiceProvider:, +        super(new OAuth2Template(clientId, clientSecret,, +           "https://graph.facebook.com/oauth/authorize",, +           "https://graph.facebook.com/oauth/access_token"));, +				In the constructor, you should call super, passing up the configured OAuth2Template that implements OAuth2Operations., +				In getServiceApi(String), you should construct your Service API implementation, passing it the access token needed to make authorized requests for protected resources., +				Parameterize &lt;S&gt; to be the Java binding to the ServiceProvider's API., +				Finally, implement getServiceApi(String, String) to return a new Service API instance., +				See <code>org.springframework.social.twitter.connect.TwitterServiceProvider</code> as an example OAuth1ServiceProvider:, +				In getServiceApi(String, String), you should construct your Service API implementation, passing it the four tokens needed to make authorized requests for protected resources., +		<para>, +			Consult the JavaDoc API of the various service provider types for more information and subclassing options., +		</para>, +		<para>, +			As discussed in the previous chapter, one of the roles of a ServiceProviderConnection is to provide a common abstraction for a linked user account that is applied across all service providers., +			The role of the ServiceApiAdapter is to map a provider's native Service API onto this uniform ServiceProviderConnection model., +			A connection delegates to its adapter to perform operations such as testing the validity of its API credentials, setting metadata values, fetching a user profile, and updating user status:, +			<programlisting language="java"><![CDATA[, +public interface ServiceApiAdapter<S> {, +, +    boolean test(S serviceApi);, +			, +    void setConnectionValues(S serviceApi, ServiceProviderConnectionValues values);, +, +    ServiceProviderUserProfile fetchUserProfile(S serviceApi);, +	, +    void updateStatus(S serviceApi, String message);, +	, +}]]>, +			</programlisting>, +			<para>, +				Consider <code>org.springframework.social.twitter.connect.TwitterServiceApiAdapter</code> as an example implementation:, +			</para>, +			<programlisting language="java"><![CDATA[, +public class TwitterServiceApiAdapter implements ServiceApiAdapter<TwitterApi> {, +, +    public boolean test(TwitterApi serviceApi) {, +        try {, +            serviceApi.userOperations().getUserProfile();, +            return true;, +        } catch (BadCredentialsException e) {, +            return false;, +        }, +    }, +, +    public void setConnectionValues(TwitterApi serviceApi, ServiceProviderConnectionValues values) {, +        TwitterProfile profile = serviceApi.userOperations().getUserProfile();, +        values.setProviderUserId(Long.toString(profile.getId()));, +        values.setDisplayName("@" + profile.getScreenName());, +        values.setProfileUrl(profile.getProfileUrl());, +        values.setImageUrl(profile.getProfileImageUrl());, +    }, +    , +    public ServiceProviderUserProfile fetchUserProfile(TwitterApi serviceApi) {, +        TwitterProfile profile = serviceApi.userOperations().getUserProfile();, +        return new ServiceProviderUserProfileBuilder().setName(profile.getName()).setUsername(profile.getScreenName()).build();, +    }, +    , +    public void updateStatus(TwitterApi serviceApi, String message) {, +        serviceApi.timelineOperations().updateStatus(message);	, +    }, +	, +}]]>, +			</programlisting>, +		</para>, +		<para>, +			As you can see, test(...) returns true if the API instance is functional and false if it is not., +			setConnectionValues(...) sets the connection's providerUserId, displayName, profileUrl, and imageUrl properties from TwitterProfile data., +			fetchUserProfile(...) maps a TwitterProfile onto the normalized ServiceProviderUserProfile model., +			updateStatus(...) update's the user's Twitter status., +			Consult the JavaDoc for ServiceApiAdapter and ServiceProviderConnection for more information and implementation guidance., +			We also recommend reviewing the other ServiceApiAdapter implementations for additional examples., +		</para>, +++ b/docs/src/reference/docbook/implementing.xml, +					<para>Create a ServiceProvider that allows users to authorize with the remote provider and obtain authorized Service API instances e.g. <code>TwitterServiceProvider</code>.</para>, +				As part of the spring-social-test module, Spring Social includes a framework for unit testing API bindings., +		<para>, +			As described in the previous section, a client binding to a secure API such as Facebook or Twitter requires valid user authorization credentials to work., +			Such credentials are generally obtained by having your application conduct an authorization "dance" or handshake with the service provider., +			Spring Social provides the ServiceProvider&lt;S&gt; abstraction to handle this "authorization dance"., +			The abstraction also acts as a factory for native Service API (S) instances.]