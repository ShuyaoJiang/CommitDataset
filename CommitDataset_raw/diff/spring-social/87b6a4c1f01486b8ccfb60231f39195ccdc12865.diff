[+++ b/docs/src/reference/docbook/signin.xml, +    <constructor-arg ref="signinService" />, +			<listitem><para>A reference to an implementation of <interfacename>SignInService</interfacename>, used to perform the actual authentication into the application.</para></listitem>, +			<listitem><para><code>GET /signin/twitter?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from Twitter, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +			<classname>TwitterSigninController</classname> handles the authentication flow with Twitter, but relies on an implementation of <interfacename>SignInService</interfacename> to perform the actual authentication into the application. <interfacename>SignInService</interfacename> is defined as follows:, +public interface SignInService {, +			Different applications will implement security differently, so each application must implement <interfacename>SignInService</interfacename> in a way that fits its unique security scheme., +			In that case, a simple implementation of <interfacename>SignInService</interfacename> might look like this:, +import org.springframework.social.web.connect.SignInService;, +public class AccountIdAsPrincipalSigninService implements SignInService {, +    <constructor-arg ref="signinService" />, +			As with <classname>TwitterSigninController</classname>, <classname>FacebookSigninController</classname> depends on a connection repository to lookup connections and a sign in service to handle the actual application authentication.]