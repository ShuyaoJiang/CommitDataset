[+++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +	private final String accessToken;, +	, +	private final String accessTokenSecret;, +	public OAuth1RequestInterceptor(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		this.accessTokenSecret = accessTokenSecret;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +	private final String accessToken;, +	, +	private final String accessTokenSecret;, +	public OAuth1RequestInterceptor(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		this.accessTokenSecret = accessTokenSecret;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +	protected OAuthToken getTokenFromProvider(String tokenUrl, Map<String, String> tokenRequestParameters, Map<String, String> additionalParameters, String tokenSecret) {, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +	// The response content type could be text/plain, text/html, etc...and may not trigger the form-encoded message converter, +	protected String getAuthorizationHeaderValue(String tokenUrl, Map<String, String> tokenRequestParameters, Map<String, String> additionalParameters, String tokenSecret) {, +		return SigningUtils.buildAuthorizationHeaderValue(tokenUrl, oauthParameters, additionalParameters, HttpMethod.POST, consumerSecret, tokenSecret);, +++ b/build.gradle, +    springVersion = '3.1.0.M1', +++ /dev/null, +++ /dev/null, +++ /dev/null]