[+++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-gowalla/src/test/java/org/springframework/social/gowalla/GowallaTemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +, +import java.util.List;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.test.MockRestServiceServer;, +	private MockRestServiceServer mockServer;, +	private HttpHeaders responseHeaders;, +		mockServer = MockRestServiceServer.createServer(gowalla.getRestTemplate());, +		responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_JSON);, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("habuma", gowalla.getProfileId());, +	}, +	@Test, +	public void getProfileUrl() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("http://www.gowalla.com/users/habuma", gowalla.getProfileUrl());, +	}, +, +	@Test, +	public void getTopCheckins() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/habuma/top_spots")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("top_spots.json", getClass()), responseHeaders));, +, +		List<Checkin> checkins = gowalla.getTopCheckins("habuma");, +		assertEquals(3, checkins.size());, +		assertEquals("Burrito Shack", checkins.get(0).getName());, +		assertEquals(100, checkins.get(0).getCount());, +		assertEquals("Chicken Hut", checkins.get(1).getName());, +		assertEquals(25, checkins.get(1).getCount());, +		assertEquals("Burger Bell", checkins.get(2).getName());, +		assertEquals(3, checkins.get(2).getCount());, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-gowalla/src/test/java/org/springframework/social/gowalla/GowallaTemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +, +import java.util.List;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.test.MockRestServiceServer;, +	private MockRestServiceServer mockServer;, +	private HttpHeaders responseHeaders;, +		mockServer = MockRestServiceServer.createServer(gowalla.getRestTemplate());, +		responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_JSON);, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("habuma", gowalla.getProfileId());, +	}, +	@Test, +	public void getProfileUrl() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/me")).andExpect(method(GET)), +				.andRespond(withResponse("{\"username\":\"habuma\"}", responseHeaders));, +		assertEquals("http://www.gowalla.com/users/habuma", gowalla.getProfileUrl());, +	}, +, +	@Test, +	public void getTopCheckins() {, +		mockServer.expect(requestTo("https://api.gowalla.com/users/habuma/top_spots")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("top_spots.json", getClass()), responseHeaders));, +, +		List<Checkin> checkins = gowalla.getTopCheckins("habuma");, +		assertEquals(3, checkins.size());, +		assertEquals("Burrito Shack", checkins.get(0).getName());, +		assertEquals(100, checkins.get(0).getCount());, +		assertEquals("Chicken Hut", checkins.get(1).getName());]