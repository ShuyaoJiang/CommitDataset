[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, + * Copyright 2014 the original author or authors., +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +		try {, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +	public void signIn_nonExistentProvider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		usersConnectionRepository.createConnectionRepository("habuma").addConnection(connectionFactory1.createConnection(, +			new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		ProviderSignInController providerSignInController = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		providerSignInController.afterPropertiesSet();, +		MockMvc mockMvc = standaloneSetup(providerSignInController).build();, +		mockMvc.perform(post("/signin/nonExistentOAuth1Provider")), +			.andExpect(redirectedUrl("/signin?error=provider"));, +	}, +, +	@Test]