[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/ListOperations.java, +	 * Retrieves a specific user list., +	 * @param screenName the screen name of the list owner., +	 * @param listSlug the lists's slug, +	 * @return the requested {@link UserList}, +	 */, +	UserList getList(String screenName, String listSlug);, +, +	/**, +	List<TwitterProfile> getListMembers(long listId);, +	 * @param listId the ID of the list., +	UserList addToList(long listId, String... newMemberScreenNames);, +	 * @param listId the ID of the list., +	void removeFromList(long listId, String memberScreenName);, +	UserList subscribe(long listId);, +	 * @return the {@link UserList}, +	UserList unsubscribe(long listId);, +	 * @return the {@link UserList}, +	UserList unsubscribe(String screenName, String listSlug);, +	boolean isMember(long listId, long memberId);, +	boolean isSubscriber(long listId, long subscriberId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/ListOperations.java, +	 * Retrieves a specific user list., +	 * @param screenName the screen name of the list owner., +	 * @param listSlug the lists's slug, +	 * @return the requested {@link UserList}, +	 */, +	UserList getList(String screenName, String listSlug);, +, +	/**, +	List<TwitterProfile> getListMembers(long listId);, +	 * @param listId the ID of the list., +	UserList addToList(long listId, String... newMemberScreenNames);, +	 * @param listId the ID of the list., +	void removeFromList(long listId, String memberScreenName);, +	UserList subscribe(long listId);, +	 * @return the {@link UserList}, +	UserList unsubscribe(long listId);, +	 * @return the {@link UserList}, +	UserList unsubscribe(String screenName, String listSlug);, +	boolean isMember(long listId, long memberId);, +	boolean isSubscriber(long listId, long subscriberId);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/api/impl/ListTemplate.java, +import java.net.URI;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.TreeMap;, +	public ListTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser) {, +		super(isAuthorizedForUser);, +	public UserList getList(String screenName, String listSlug) {, +		requireUserAuthorization();, +		Map<String, String> parameters = new HashMap<String, String>();, +		parameters.put("owner_screen_name", screenName);, +		parameters.put("slug", listSlug);, +		return restTemplate.getForObject(buildUri("lists/show.json", parameters), UserList.class);, +	}, +, +		Map<String, String> parameters = new TreeMap<String, String>();, +		parameters.put("owner_screen_name", screenName);, +		parameters.put("slug", listSlug);, +		return restTemplate.getForObject(buildUri("lists/statuses.json", parameters), TweetList.class);, +	public List<TwitterProfile> getListMembers(long listId) {, +		return restTemplate.getForObject(buildUri("lists/members.json", Collections.singletonMap("list_id", String.valueOf(listId))), TwitterProfileUsersList.class).getList();, +		Map<String, String> parameters = new TreeMap<String, String>();, +		parameters.put("owner_screen_name", screenName);, +		parameters.put("slug", listSlug);, +		return restTemplate.getForObject(buildUri("lists/members.json", parameters), TwitterProfileUsersList.class).getList();, +		request.set("list_id", String.valueOf(listId));, +		return restTemplate.postForObject(buildUri("lists/members/create_all.json"), request, UserList.class);, +	public UserList addToList(long listId, String... newMemberScreenNames) {, +		request.set("list_id", String.valueOf(listId));, +		return restTemplate.postForObject(buildUri("lists/members/create_all.json"), request, UserList.class);, +		MultiValueMap<String, Object> request = new LinkedMultiValueMap<String, Object>();, +		request.set("user_id", String.valueOf(memberId)); , +		request.set("list_id", String.valueOf(listId));, +		restTemplate.postForObject(buildUri("lists/members/destroy.json"), request, String.class);, +	public void removeFromList(long listId, String memberScreenName) {, +		MultiValueMap<String, Object> request = new LinkedMultiValueMap<String, Object>();, +		request.set("screen_name", String.valueOf(memberScreenName)); , +		request.set("list_id", String.valueOf(listId));, +		restTemplate.postForObject(buildUri("lists/members/destroy.json"), request, String.class);, +		return restTemplate.getForObject(buildUri("lists/subscribers.json", Collections.singletonMap("list_id", String.valueOf(listId))), TwitterProfileUsersList.class).getList();, +		Map<String, String> parameters = new TreeMap<String, String>();, +		parameters.put("owner_screen_name", screenName);, +		parameters.put("slug", listSlug);, +		return restTemplate.getForObject(buildUri("lists/subscribers.json", parameters), TwitterProfileUsersList.class).getList();, +	, +	public UserList subscribe(long listId) {, +		MultiValueMap<String, Object> request = new LinkedMultiValueMap<String, Object>();, +		request.set("list_id", String.valueOf(listId));, +		return restTemplate.postForObject(buildUri("lists/subscribers/create.json"), request, UserList.class);, +		MultiValueMap<String, Object> request = new LinkedMultiValueMap<String, Object>();, +		request.set("owner_screen_name", ownerScreenName);, +		request.set("slug", listSlug);, +		return restTemplate.postForObject(buildUri("lists/subscribers/create.json"), request, UserList.class);, +	public UserList unsubscribe(long listId) {, +		MultiValueMap<String, Object> request = new LinkedMultiValueMap<String, Object>();, +		request.set("list_id", String.valueOf(listId));, +		return restTemplate.postForObject(buildUri("lists/subscribers/destroy.json"), request, UserList.class);, +	public UserList unsubscribe(String ownerScreenName, String listSlug) {]