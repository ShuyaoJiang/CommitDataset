[+++ b/docs/src/reference/docbook/overview.xml, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with Service Providers.</para></listitem>, +++ b/docs/src/reference/docbook/overview.xml, +          <listitem><para>A "Connect Framework" that handles the core authorization and connection flow with Service Providers.</para></listitem>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +<img src="${connection.imageUrl}" /> <a href="${connection.profileUrl}">${connection.displayName}</a>]]>			, +			In this case, sync() can be called to synchronize these values if the user's profile is updated., +}]]>	, +			</programlisting>, +			<para>, +				Example usage of a ServiceProviderConnectionFactoryLocator is shown below:, +			</para>, +			<programlisting language="java"><![CDATA[, +// generic lookup by providerId, +ServiceProviderConnectionFactory<?> connectionFactory = locator.getConnectionFactory("facebook");, +, +// typed lookup by service api type, +ServiceProviderConnectionFactory<FacebookApi> connectionFactory = locator.getConnectionFactory(FacebookApi.class);]]>	, +			This makes things convenient for the user since a connection can simply be restored from its persistent form and does not need to be established again., +				Spring Social provides a JdbcMultiUserServiceProviderConnectionRepository implementation capable of persisting connections to a RDBMS., +				The database schema designed to back this repository is defined in JdbcMultiUserServiceProviderConnectionRepository.sql., +			<para>, +				The example code below demonstrates construction and usage of a JdbcMultiUserServiceProviderConnectionRepository:, +			</para>, +			<programlisting language="java"><![CDATA[, +// JDBC DataSource pointing to the DB where connection data is stored, +DataSource dataSource = ...;, +// locator for factories needed to construct ServiceProviderConnections when restoring from persistent form, +ServiceProviderConnectionFactoryLocator connectionFactoryLocator = ...;, +// encryptor of connection authorization credentials, +TextEncryptor encryptor = ...;, +, +JdbcMultiUserServiceProviderConnectionRepository multiUserRepository =, +    new JdbcMultiUserServiceProviderConnectionRepository(dataSource, connectionFactoryLocator, encryptor);, +, +// create a connection repository for the single-user 'kdonald', +ServiceProviderConnectionRepository repository = multiUserRepository.createConnectionRepository("kdonald");, +, +// find kdonald's primary Facebook connection, +ServiceProviderConnection<FacebookApi> connection = repository.findPrimeryConnectionToServiceApi(FacebookApi.class);]]>, +			</programlisting>]