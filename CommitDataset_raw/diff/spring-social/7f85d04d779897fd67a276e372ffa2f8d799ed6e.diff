[+++ b/build.gradle, +    ext.jacksonVersion          = "2.3.0", +    ext.springVersion           = "4.0.2.RELEASE", +    ext.springSecurityVersion   = "3.2.0.RELEASE", +++ b/build.gradle, +    ext.jacksonVersion          = "2.3.0", +    ext.springVersion           = "4.0.2.RELEASE", +    ext.springSecurityVersion   = "3.2.0.RELEASE", +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setAlwaysUsePostLoginUrl(boolean alwaysUsePostLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setAlwaysUseDefaultTargetUrl(alwaysUsePostLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set alwaysUsePostLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +	, +++ b/build.gradle, +    ext.jacksonVersion          = "2.3.0", +    ext.springVersion           = "4.0.2.RELEASE", +    ext.springSecurityVersion   = "3.2.0.RELEASE", +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setAlwaysUsePostLoginUrl(boolean alwaysUsePostLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setAlwaysUseDefaultTargetUrl(alwaysUsePostLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set alwaysUsePostLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +	, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	private String postLoginUrl;, +	, +	private String postFailureUrl;, +, +	private boolean alwaysUsePostLoginUrl = false;, +, +		, +		if (postLoginUrl != null) {, +			filter.setPostLoginUrl(postLoginUrl);, +			filter.setAlwaysUsePostLoginUrl(alwaysUsePostLoginUrl);, +		}, +		, +		if (postFailureUrl != null) {, +			filter.setPostFailureUrl(postFailureUrl);, +		}, +		, +	/**, +	 * Sets the URL to land on after a successful login., +	 */, +	public SpringSocialConfigurer postLoginUrl(String postLoginUrl) {, +		this.postLoginUrl = postLoginUrl;, +		return this;, +	}, +	, +	/**, +	 * If true, always redirect to postLoginUrl, even if a pre-signin target is in the request cache., +	 */, +	public SpringSocialConfigurer alwaysUsePostLoginUrl(boolean alwaysUsePostLoginUrl) {, +		this.alwaysUsePostLoginUrl = alwaysUsePostLoginUrl;, +		return this;, +	}, +	, +	/**, +	 * Sets the URL to land on after a failed login., +	 */, +	public SpringSocialConfigurer postFailureUrl(String postFailureUrl) {, +		this.postFailureUrl = postFailureUrl;, +		return this;, +	}, +	]