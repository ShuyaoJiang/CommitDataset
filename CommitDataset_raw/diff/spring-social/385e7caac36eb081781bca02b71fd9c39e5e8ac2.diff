[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +	, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +	, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	private String defaultFailureUrl;, +, +		if (defaultFailureUrl != null) {, +			filter.setDefaultFailureUrl(defaultFailureUrl);, +		}, +		, +	 * Sets the URL to land on after a failed login., +	 * @param postFailureUrl the URL to redirect to after a failed login, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @return this SpringSocialConfigurer for chained configuration, +		this.defaultFailureUrl = defaultFailureUrl;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFailureHandler.java, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import javax.servlet.http.HttpSession;, +	private SimpleUrlAuthenticationFailureHandler delegateAuthenticationFailureHandler;, +	, +		this.delegateAuthenticationFailureHandler = new SimpleUrlAuthenticationFailureHandler(DEFAULT_FAILURE_URL);, +		super.setAuthenticationFailureHandler(new SocialAuthenticationFailureHandler(delegateAuthenticationFailureHandler));, +	 * The URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl The failure URL. Defaults to "/signin" (relative to the servlet context)., +		delegateAuthenticationFailureHandler.setDefaultFailureUrl(defaultFailureUrl);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SpringSocialConfigurer.java, +	private String defaultFailureUrl;, +, +		if (defaultFailureUrl != null) {, +			filter.setDefaultFailureUrl(defaultFailureUrl);, +		}, +		, +	 * Sets the URL to land on after a failed login., +	 * @param postFailureUrl the URL to redirect to after a failed login, +	 * Sets the URL to redirect to if authentication fails or if authorization is denied by the user., +	 * @param defaultFailureUrl the URL to redirect to after an authentication fail or authorization deny, +	 * @return this SpringSocialConfigurer for chained configuration, +		this.defaultFailureUrl = defaultFailureUrl;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +		StringBuffer sb = getProxyHeaderAwareRequestURL(request);, +	protected StringBuffer getProxyHeaderAwareRequestURL(HttpServletRequest request), +, +	{, +		String host = request.getHeader("Host");, +		if ( StringUtils.isEmpty(host) ), +		{, +			return request.getRequestURL();, +		}, +		StringBuffer sb = new StringBuffer();, +		String schemeHeader = request.getHeader("X-Forwarded-Proto");, +		String portHeader = request.getHeader("X-Forwarded-Port");, +		String scheme = StringUtils.isEmpty(schemeHeader) ? "http" : schemeHeader;, +		String port = StringUtils.isEmpty(portHeader) ? "80" : portHeader;, +		if ( scheme.equals("http") && port.equals("80") ), +		{, +			port = "";, +		}, +		if ( scheme.equals("https") && port.equals("443") ), +		{, +			port = "";, +		}, +		sb.append(scheme);, +		sb.append("://");, +		sb.append(host);, +		if ( StringUtils.hasLength(port) ), +		{, +			sb.append(":");, +			sb.append(port);, +		}, +		sb.append(request.getRequestURI());, +		return sb;, +	}]