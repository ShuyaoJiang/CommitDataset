[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Album.java, +	public static enum Type { NORMAL, MOBILE, PROFILE, WALL }, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Album.java, +	public static enum Type { NORMAL, MOBILE, PROFILE, WALL }, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/GraphApi.java, +	String publish(String objectId, String connectionType, MultiValueMap<String, Object> data);	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Album.java, +	public static enum Type { NORMAL, MOBILE, PROFILE, WALL }, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/GraphApi.java, +	String publish(String objectId, String connectionType, MultiValueMap<String, Object> data);	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/MediaOperations.java, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.FileSystemResource;, +import org.springframework.core.io.Resource;, +, +	 * Uploads a photo to an album created specifically for photos uploaded by the application., +	 * If no album exists for the application, it will be created., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(Resource photo);, +	, +	/**, +	 * Uploads a photo to an album created specifically for photos uploaded by the application., +	 * If no album exists for the application, it will be created., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @param caption A caption describing the photo., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(Resource photo, String caption);, +	, +	/**, +	 * Uploads a photo to a specific album., +	 * @param albumId the ID of the album to upload the photo to., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(String albumId, Resource photo);, +	, +	/**, +	 * Uploads a photo to a specific album., +	 * @param albumId the ID of the album to upload the photo to., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @param caption A caption describing the photo., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(String albumId, Resource photo, String caption);, +	, +	/**, +	 * Retrieves a list of videos that the authenticated user is tagged in., +	 * Retrieves a list of videos that a specified user is tagged in., +	 * @param userId the ID of the user who is tagged in the videos, +	 * @return a list of {@link Video} which the specified user is tagged in., +	List<Video> getVideos(String userId);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/Album.java, +	public static enum Type { NORMAL, MOBILE, PROFILE, WALL }, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/GraphApi.java, +	String publish(String objectId, String connectionType, MultiValueMap<String, Object> data);	, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/api/MediaOperations.java, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.FileSystemResource;, +import org.springframework.core.io.Resource;, +, +	 * Uploads a photo to an album created specifically for photos uploaded by the application., +	 * If no album exists for the application, it will be created., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(Resource photo);, +	, +	/**, +	 * Uploads a photo to an album created specifically for photos uploaded by the application., +	 * If no album exists for the application, it will be created., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @param caption A caption describing the photo., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(Resource photo, String caption);, +	, +	/**, +	 * Uploads a photo to a specific album., +	 * @param albumId the ID of the album to upload the photo to., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(String albumId, Resource photo);, +	, +	/**, +	 * Uploads a photo to a specific album., +	 * @param albumId the ID of the album to upload the photo to., +	 * @param photo A {@link Resource} for the photo data. The given Resource must implement the getFilename() method (such as {@link FileSystemResource} or {@link ClassPathResource})., +	 * @param caption A caption describing the photo., +	 * @return the ID of the photo., +	 */, +	String uploadPhoto(String albumId, Resource photo, String caption);, +	, +	/**, +	 * Retrieves a list of videos that the authenticated user is tagged in., +	 * Retrieves a list of videos that a specified user is tagged in., +	 * @param userId the ID of the user who is tagged in the videos]