[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;, +import java.util.Collections;, +import java.util.Map;, +, +import org.springframework.social.util.URIBuilder;, +, +	private final boolean isAuthorizedForUser;, +	public AbstractTwitterOperations(boolean isAuthorizedForUser) {, +		this.isAuthorizedForUser = isAuthorizedForUser;, +		if(!isAuthorizedForUser) {, +	, +	protected URI buildUri(String path) {, +		return buildUri(path, Collections.<String, String>emptyMap());, +	}, +	, +	protected URI buildUri(String path, Map<String, String> params) {, +		URIBuilder uriBuilder = URIBuilder.fromUri(API_URL_BASE + path);, +		for (String paramName : params.keySet()) {, +			uriBuilder.queryParam(paramName, String.valueOf(params.get(paramName)));, +		}, +		URI uri = uriBuilder.build();, +		return uri;, +	}, +	, +	private static final String API_URL_BASE = "https://api.twitter.com/1/";, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;, +import java.util.Collections;, +import java.util.Map;, +, +import org.springframework.social.util.URIBuilder;, +, +	private final boolean isAuthorizedForUser;, +	public AbstractTwitterOperations(boolean isAuthorizedForUser) {, +		this.isAuthorizedForUser = isAuthorizedForUser;, +		if(!isAuthorizedForUser) {, +	, +	protected URI buildUri(String path) {, +		return buildUri(path, Collections.<String, String>emptyMap());, +	}, +	, +	protected URI buildUri(String path, Map<String, String> params) {, +		URIBuilder uriBuilder = URIBuilder.fromUri(API_URL_BASE + path);, +		for (String paramName : params.keySet()) {, +			uriBuilder.queryParam(paramName, String.valueOf(params.get(paramName)));, +		}, +		URI uri = uriBuilder.build();, +		return uri;, +	}, +	, +	private static final String API_URL_BASE = "https://api.twitter.com/1/";, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import java.util.Collections;, +import org.springframework.web.client.RestTemplate;, +	private final RestTemplate restTemplate;, +	public DirectMessageTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser) {, +		super(isAuthorizedForUser);, +		this.restTemplate = restTemplate;, +		return restTemplate.getForObject(buildUri("direct_messages.json", Collections.<String, String>emptyMap()), DirectMessageList.class).getList();, +		return restTemplate.getForObject(buildUri("direct_messages/sent.json", Collections.<String, String>emptyMap()), DirectMessageList.class).getList();, +		restTemplate.postForObject(buildUri("direct_messages/new.json", Collections.<String, String>emptyMap()), data, String.class);, +		restTemplate.postForObject(buildUri("direct_messages/new.json", Collections.<String, String>emptyMap()), data, String.class);, +		restTemplate.delete(buildUri("direct_messages/destroy/" + messageId + ".json", Collections.<String, String>emptyMap()));, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +import java.net.URI;, +import java.util.Collections;, +import java.util.Map;, +, +import org.springframework.social.util.URIBuilder;, +, +	private final boolean isAuthorizedForUser;, +	public AbstractTwitterOperations(boolean isAuthorizedForUser) {, +		this.isAuthorizedForUser = isAuthorizedForUser;, +		if(!isAuthorizedForUser) {, +	, +	protected URI buildUri(String path) {, +		return buildUri(path, Collections.<String, String>emptyMap());, +	}, +	, +	protected URI buildUri(String path, Map<String, String> params) {, +		URIBuilder uriBuilder = URIBuilder.fromUri(API_URL_BASE + path);, +		for (String paramName : params.keySet()) {, +			uriBuilder.queryParam(paramName, String.valueOf(params.get(paramName)));, +		}, +		URI uri = uriBuilder.build();, +		return uri;, +	}, +	, +	private static final String API_URL_BASE = "https://api.twitter.com/1/";, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +import java.util.Collections;, +import org.springframework.web.client.RestTemplate;, +	private final RestTemplate restTemplate;, +	public DirectMessageTemplate(RestTemplate restTemplate, boolean isAuthorizedForUser) {, +		super(isAuthorizedForUser);, +		this.restTemplate = restTemplate;]