[+++ b/docs/src/reference/docbook/connecting.xml, +      	<para>, +      		In the previous chapter, you saw how Spring Social's <emphasis>Service Provider 'Connect' Framework</emphasis> supports authorization and manages connections between an application and an external service provider., +      		But although various implementations of <interfacename>ServiceProvider</interfacename> support the specifics of the authorization protocol for each service provider, they do not handle the overall connection flow. , +      	</para>, +		<para>, +			Spring Social's <code>spring-social-web</code> module includes <classname>ConnectController</classname>, a Spring MVC controller that works with <interfacename>ServiceProvider</interfacename>s to coordinate the connection flow., +			<classname>ConnectController</classname> takes care of redirecting the user to the service provider for authorization and responding to the callback after authorization., +			At each step, <classname>ConnectController</classname> works with a <interfacename>ServiceProvider</interfacename> to handle the finer details such as obtaining a request token and creating connections., +		</para>, +      , +	</section>, +	, +	<section id="section_connecting_service_providers">, +		<title>Registering service providers</title>, +		, +		<para>, +			Because <classname>ConnectController</classname> collaborates with <interfacename>ServiceProvider</interfacename>s to establish connections, you'll need to register one or more <interfacename>ServiceProvider</interfacename> implementations as beans in the Spring context., +			<classname>ConnectController</classname> will discover any bean of type <interfacename>ServiceProvider</interfacename> in the Spring context and use it to handle connections for the service provider it represents., +		</para>, +		, +		<para>, +			The following configuration class registers <interfacename>ServiceProvider</interfacename>s for Twitter, Facebook, and TripIt using Spring's Java configuration style:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config;, +, +import javax.sql.DataSource;, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.context.annotation.Bean;, +import org.springframework.security.crypto.encrypt.TextEncryptor;, +import org.springframework.social.connect.jdbc.JdbcConnectionRepository;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.facebook.connect.FacebookServiceProvider;, +import org.springframework.social.tripit.connect.TripItServiceProvider;, +import org.springframework.social.twitter.connect.TwitterServiceProvider;, +import org.springframework.stereotype.Component;, +, +@Configuration, +public class ServiceProviders {, +, +    @Bean, +    public TwitterServiceProvider twitter(@Value("#{environment['twitter.clientKey']}") String clientKey,, +            @Value("#{environment['twitter.clientSecret']}") String clientSecret, ConnectionRepository connectionRepository) {, +        return new TwitterServiceProvider(clientKey, clientSecret, connectionRepository);, +    }, +, +    @Bean, +    public FacebookServiceProvider facebook(@Value("#{environment['facebook.apiKey']}") String clientId,, +            @Value("#{environment['facebook.appSecret']}") String clientSecret, ConnectionRepository connectionRepository) {, +        return new FacebookServiceProvider(clientId, clientSecret, connectionRepository);, +    }, +, +    @Bean, +    public TripItServiceProvider tripit(@Value("#{environment['tripit.clientKey']}") String clientKey,, +            @Value("#{environment['tripit.clientSecret']}") String clientSecret, ConnectionRepository connectionRepository) {, +        return new TripItServiceProvider(clientKey, clientSecret, connectionRepository);, +    }, +, +    @Bean, +    public ConnectionRepository connectionRepository(DataSource dataSource, TextEncryptor textEncryptor) {, +        return new JdbcConnectionRepository(dataSource, textEncryptor);, +    }, +, +}]]>, +		</programlisting>, +		, +		<para>, +			Each <interfacename>ServiceProvider</interfacename> is created given the application's client key and secret that were assigned to it when the application was registered with the service provider., +			Because the consumer key and secret may be different across environments (e.g., test, production, etc) it is recommended that these values be externalized. , +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as properties retrieved from the context environment., +		</para>, +, +		<para>, +			The <interfacename>ServiceProvider</interfacename> are also given a <interfacename>ConnectionRepository</interfacename> at construction., +			When managing connections, a <interfacename>ServiceProvider</interfacename> needs a place to store those connections., +			Therefore, a <interfacename>ServiceProvider</interfacename> works through a <interfacename>ConnectionRepository</interfacename> for persistence operations on connections., +			Spring Social supports JDBC-based connection storage with <classname>JdbcConnectionRepository</classname>, which itself is constructed given a <interfacename>DataSource</interfacename> and a <interfacename>TextEncryptor</interfacename>., +		</para>, +, +		<para>, +			<classname>JdbcConnectionRepository</classname> uses a <interfacename>TextEncryptor</interfacename> to encrypt the credentials (e.g., access tokens and secrets) obtained during authorization when writing them to the database., +			Spring Security 3.1 makes a few useful text encryptors available via static factory methods in its <classname>Encryptors</classname> class., +			For example, a no-op text encryptor is useful at development time and can be configured like this:, +		</para>				, +		, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase.config;, +, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Profile;, +import org.springframework.security.crypto.encrypt.Encryptors;, +import org.springframework.security.crypto.encrypt.TextEncryptor;, +, +@Configuration, +@Profile("dev"), +public class NoOpTextEncryptor {, +]