[+++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +	}, +, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SessionUserIdSource.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import org.springframework.social.UserIdSource;, +import org.springframework.web.context.request.RequestContextHolder;, +, +/**, + * {@link UserIdSource} implementation that uses the session ID as the user ID., + * Convenient for applications that don't maintain their own notion of a user., + * , + * Relies on {@link RequestContextHolder} for obtaining the session ID. , + * Will throw an {@link IllegalStateException} if there are no request attributes bound to the current thread., + * , + * @author Craig Walls, + */, +public class SessionUserIdSource implements UserIdSource {, +, +	@Override, +	public String getUserId() {, +		return RequestContextHolder.currentRequestAttributes().getSessionId();, +	}, +	, +}, +++ b/gradle.properties, +version=1.2.0.BUILD-SNAPSHOT, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection));, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/SessionUserIdSource.java, +/*, + * Copyright 2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web;, +, +import org.springframework.social.UserIdSource;, +import org.springframework.web.context.request.RequestContextHolder;, +, +/**, + * {@link UserIdSource} implementation that uses the session ID as the user ID., + * Convenient for applications that don't maintain their own notion of a user., + * , + * Relies on {@link RequestContextHolder} for obtaining the session ID. , + * Will throw an {@link IllegalStateException} if there are no request attributes bound to the current thread., + * , + * @author Craig Walls, + */, +public class SessionUserIdSource implements UserIdSource {, +, +	@Override, +	public String getUserId() {, +		return RequestContextHolder.currentRequestAttributes().getSessionId();, +	}]