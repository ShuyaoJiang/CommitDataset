[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private String callbackUrl;, +	, +	 * Configures a specific callback URL that is to be used instead of calculating one based on the application URL or current request URL., +	 * When set this URL will override the default behavior where the callback URL is derived from the current request and/or a specified application URL., +	 * When set along with applicationUrl, the applicationUrl will be ignored., +	 * @param callbackUrl the callback URL to send to providers during authorization. Default is null. , +	 */, +	public void setCallbackUrl(String callbackUrl) {, +		this.callbackUrl = callbackUrl;, +	}, +, +	/**, +	protected String callbackUrl(NativeWebRequest request) {, +		if (callbackUrl != null) {, +			return callbackUrl;, +		}, +		HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, +		if (applicationUrl != null) {, +			return applicationUrl + connectPath(nativeRequest);, +		} else {, +			return nativeRequest.getRequestURL().toString();, +		}, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +	private String callbackUrl;, +	, +	 * Configures a specific callback URL that is to be used instead of calculating one based on the application URL or current request URL., +	 * When set this URL will override the default behavior where the callback URL is derived from the current request and/or a specified application URL., +	 * When set along with applicationUrl, the applicationUrl will be ignored., +	 * @param callbackUrl the callback URL to send to providers during authorization. Default is null. , +	 */, +	public void setCallbackUrl(String callbackUrl) {, +		this.callbackUrl = callbackUrl;, +	}, +, +	/**, +	protected String callbackUrl(NativeWebRequest request) {, +		if (callbackUrl != null) {, +			return callbackUrl;, +		}, +		HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);, +		if (applicationUrl != null) {, +			return applicationUrl + connectPath(nativeRequest);, +		} else {, +			return nativeRequest.getRequestURL().toString();, +		}, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +import static org.junit.Assert.*;, +	@Test, +	public void buildOAuthUrl_OAuth10_withCallbackUrl() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setCallbackUrl("https://overridingcallbackurl.com:4321");, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?oauth_callback=https://overridingcallbackurl.com:4321", url);, +	}, +, +	@Test, +	public void buildOAuthUrl_OAuth10a_withCallbackUrl() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setCallbackUrl("https://overridingcallbackurl.com:4321");, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10_REVISION_A), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize", url);, +	}, +, +	, +	@Test, +	public void buildOAuthUrl_OAuth2_withCallbackUrl() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		support.setCallbackUrl("https://overridingcallbackurl.com:4321");, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setServletPath("/connect/someprovider");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		String url = support.buildOAuthUrl(new TestOAuth2ConnectionFactory(), request);, +		assertEquals("https://serviceprovider.com/oauth/authorize?redirect_uri=https://overridingcallbackurl.com:4321", url);, +	}, +	]