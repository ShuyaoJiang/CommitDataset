[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, +	public static Map<String, String> getFacebookCookieData(Cookie[] cookies, String apiKey, String appSecret) {, +					Map<String, String> cookieData = extractDataFromCookie(cookie.getValue().trim());, +					String signature = calculateSignature(appSecret, cookieData);, +					if (signature.equals(cookieData.get("sig"))) {, +						return cookieData;, +					}, +					System.out.println(signature);, +					break;, +	private static String calculateSignature(String appSecret, Map<String, String> cookieData) {, +		String payload = "";, +		List<String> keys = new ArrayList<String>(cookieData.keySet());, +		Collections.sort(keys);, +		for (String key : keys) {, +			if (!key.equals("sig")) {, +				payload += key + "=" + cookieData.get(key);, +			}, +		}, +		return md5(payload + appSecret);, +	}, +, +	private static String md5(String in) {, +		try {, +			MessageDigest md = MessageDigest.getInstance("MD5");, +, +			byte[] hash = md.digest(in.getBytes("UTF-8"));, +, +			StringBuffer sb = new StringBuffer();, +			for (byte b : hash) {, +				if (b >= 0 && b < 16), +					sb.append('0');, +				sb.append(Integer.toHexString(b & 0xff));, +			}, +, +			return sb.toString();, +		} catch (NoSuchAlgorithmException wontHappen) {, +			return null;, +		} catch (UnsupportedEncodingException wontHappen) {, +			return null;, +		}, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookCookieParser.java, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, +	public static Map<String, String> getFacebookCookieData(Cookie[] cookies, String apiKey, String appSecret) {, +					Map<String, String> cookieData = extractDataFromCookie(cookie.getValue().trim());, +					String signature = calculateSignature(appSecret, cookieData);, +					if (signature.equals(cookieData.get("sig"))) {, +						return cookieData;, +					}, +					System.out.println(signature);, +					break;, +	private static String calculateSignature(String appSecret, Map<String, String> cookieData) {, +		String payload = "";, +		List<String> keys = new ArrayList<String>(cookieData.keySet());, +		Collections.sort(keys);, +		for (String key : keys) {, +			if (!key.equals("sig")) {, +				payload += key + "=" + cookieData.get(key);, +			}, +		}, +		return md5(payload + appSecret);, +	}, +, +	private static String md5(String in) {, +		try {, +			MessageDigest md = MessageDigest.getInstance("MD5");, +, +			byte[] hash = md.digest(in.getBytes("UTF-8"));, +, +			StringBuffer sb = new StringBuffer();, +			for (byte b : hash) {, +				if (b >= 0 && b < 16), +					sb.append('0');, +				sb.append(Integer.toHexString(b & 0xff));, +			}, +, +			return sb.toString();, +		} catch (NoSuchAlgorithmException wontHappen) {, +			return null;, +		} catch (UnsupportedEncodingException wontHappen) {, +			return null;, +		}, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +	private final String appSecret;, +, +			String apiKey, String appSecret) {, +		// TODO: The Facebook service provider could be looked up here and could expose its API key as a, +		// property. Then this controller could just get the API key and app secret from the provider., +		this.appSecret = appSecret;, +		Map<String, String> cookieData = FacebookCookieParser.getFacebookCookieData(request.getCookies(), apiKey,]