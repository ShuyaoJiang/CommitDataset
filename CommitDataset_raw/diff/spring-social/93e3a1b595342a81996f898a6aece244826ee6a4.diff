[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.GenericTypeResolver;, +	private final static Log logger = LogFactory.getLog(AbstractConnectionFactoryBeanDefinitionParser.class);, +, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiHelperClass) {, +		this.apiHelperClass = apiHelperClass;, +		this.apiBindingType = GenericTypeResolver.resolveTypeArgument(connectionFactoryClass, ConnectionFactory.class);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactory for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactoryLocator bean");, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering API Helper bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		String helperId = "__" + ClassUtils.getShortNameAsProperty(apiBindingType) + "ApiHelper";, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(helperId, helperBD);, +		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Creating API Binding bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		BeanDefinition bindingBD = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();, +		bindingBD.setFactoryBeanName(helperId);, +		bindingBD.setFactoryMethodName("getApi");, +		bindingBD.setScope("request");, +		BeanDefinitionHolder scopedProxyBDH = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(bindingBD, ClassUtils.getShortNameAsProperty(apiBindingType)), parserContext.getRegistry(), false);, +		parserContext.getRegistry().registerBeanDefinition(scopedProxyBDH.getBeanName(), scopedProxyBDH.getBeanDefinition());, +		return scopedProxyBDH.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.GenericTypeResolver;, +	private final static Log logger = LogFactory.getLog(AbstractConnectionFactoryBeanDefinitionParser.class);, +, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiHelperClass) {, +		this.apiHelperClass = apiHelperClass;, +		this.apiBindingType = GenericTypeResolver.resolveTypeArgument(connectionFactoryClass, ConnectionFactory.class);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactory for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering ConnectionFactoryLocator bean");, +		}		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Registering API Helper bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		String helperId = "__" + ClassUtils.getShortNameAsProperty(apiBindingType) + "ApiHelper";, +		BeanDefinition helperBD = BeanDefinitionBuilder.genericBeanDefinition(apiHelperClass).addConstructorArgReference("usersConnectionRepository").addConstructorArgReference("userIdSource").getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(helperId, helperBD);, +		, +		if (logger.isDebugEnabled()) {, +			logger.debug("Creating API Binding bean for " + ClassUtils.getShortName(apiBindingType));, +		}		, +		BeanDefinition bindingBD = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();, +		bindingBD.setFactoryBeanName(helperId);, +		bindingBD.setFactoryMethodName("getApi");, +		bindingBD.setScope("request");, +		BeanDefinitionHolder scopedProxyBDH = ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(bindingBD, ClassUtils.getShortNameAsProperty(apiBindingType)), parserContext.getRegistry(), false);, +		parserContext.getRegistry().registerBeanDefinition(scopedProxyBDH.getBeanName(), scopedProxyBDH.getBeanDefinition());, +		return scopedProxyBDH.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ApiHelper.java, +/*, + * Copyright 2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +/**, + * Interface defining the operations required for an API helper., + * An API helper will be used to either fetch or intantiate an instance of the API binding class., + * @author Craig Walls, + *, + * @param <T> The API type that this helper will return, + */, +public interface ApiHelper<T> {, +, +	T getApi();, +, +}]