[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	, +	public AbstractServiceProvider(ServiceProviderParameters parameters,, +			AccountConnectionRepository connectionRepository, AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +	public void connect(AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), accessToken,, +				providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public void addConnection(String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), oauthAccessToken,, +				providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public boolean isConnected() {, +		return connectionRepository.isConnected(accountIdResolver.resolveAccountId(), getName());, +	public void disconnect() {, +		connectionRepository.disconnect(accountIdResolver.resolveAccountId(), getName());, +	public S getServiceOperations() {, +		if (accountIdResolver.resolveAccountId() == null || !isConnected()) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName());, +	public String getProviderAccountId() {, +		return connectionRepository.getProviderAccountId(accountIdResolver.resolveAccountId(), getName());, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	, +	public AbstractServiceProvider(ServiceProviderParameters parameters,, +			AccountConnectionRepository connectionRepository, AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +	public void connect(AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), accessToken,, +				providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public void addConnection(String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), oauthAccessToken,, +				providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public boolean isConnected() {, +		return connectionRepository.isConnected(accountIdResolver.resolveAccountId(), getName());, +	public void disconnect() {, +		connectionRepository.disconnect(accountIdResolver.resolveAccountId(), getName());, +	public S getServiceOperations() {, +		if (accountIdResolver.resolveAccountId() == null || !isConnected()) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName());, +	public String getProviderAccountId() {, +		return connectionRepository.getProviderAccountId(accountIdResolver.resolveAccountId(), getName());, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +	void addConnection(Object accountId, String provider, OAuthToken accessToken, String providerAccountId,, +			String providerProfileUrl);, +	boolean isConnected(Object accountId, String provider);, +	void disconnect(Object accountId, String provider);, +	OAuthToken getAccessToken(Object accountId, String provider);, +	String getProviderAccountId(Object accountId, String provider);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	, +	public AbstractServiceProvider(ServiceProviderParameters parameters,, +			AccountConnectionRepository connectionRepository, AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +	public void connect(AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), accessToken,, +				providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public void addConnection(String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), oauthAccessToken,, +				providerAccountId,, +				buildProviderProfileUrl(providerAccountId, serviceOperations));, +	public boolean isConnected() {, +		return connectionRepository.isConnected(accountIdResolver.resolveAccountId(), getName());, +	public void disconnect() {, +		connectionRepository.disconnect(accountIdResolver.resolveAccountId(), getName());, +	public S getServiceOperations() {, +		if (accountIdResolver.resolveAccountId() == null || !isConnected()) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName());, +	public String getProviderAccountId() {, +		return connectionRepository.getProviderAccountId(accountIdResolver.resolveAccountId(), getName());, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +	void addConnection(Object accountId, String provider, OAuthToken accessToken, String providerAccountId,, +			String providerProfileUrl);, +	boolean isConnected(Object accountId, String provider);, +	void disconnect(Object accountId, String provider);, +	OAuthToken getAccessToken(Object accountId, String provider);, +	String getProviderAccountId(Object accountId, String provider);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/AccountIdResolver.java, +package org.springframework.social.connect;, +, +/**, + * Strategy interface for resolving an account ID in a service provider., + * , + * @author Craig Walls, + */, +public interface AccountIdResolver {, +	Object resolveAccountId();, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	]