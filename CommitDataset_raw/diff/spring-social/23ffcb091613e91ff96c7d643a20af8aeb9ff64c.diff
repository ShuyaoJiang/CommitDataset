[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	private TimestampGenerator timestampGenerator;, +	, +	SigningUtils() {, +		this.timestampGenerator = new DefaultTimestampGenerator();, +	}, +	, +	public Map<String, String> commonOAuthParameters(String consumerKey) {, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +	public String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +	public String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	public String spring30buildAuthorizationHeaderValue(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	String buildBaseString(HttpMethod method, String targetUrl, MultiValueMap<String, String> collectedParameters) {, +	private String normalizeParameters(MultiValueMap<String, String> collectedParameters) {, +	private String calculateSignature(String baseString, String consumerSecret, String tokenSecret) {, +	private String sign(String signatureBaseString, String key) {, +	private MultiValueMap<String, String> readFormParameters(MediaType bodyType, byte[] bodyBytes) {, +	private MultiValueMap<String, String> parseFormParameters(String parameterString) {, +	private String getBaseStringUri(URI uri) {, +	private int getPort(URI uri) {, +	// testing hooks	, +	// tests can implement and inject a custom TimestampGenerator to work with fixed nonce and timestamp values, +	void setTimestampGenerator(TimestampGenerator timestampGenerator) {, +		this.timestampGenerator = timestampGenerator;, +	static interface TimestampGenerator {, +		long generateTimestamp();, +		, +		long generateNonce(long timestamp);, +	}, +	, +	private static class DefaultTimestampGenerator implements TimestampGenerator {, +, +		public long generateTimestamp() {, +			return System.currentTimeMillis() / 1000;, +		}, +		, +		public long generateNonce(long timestamp) {, +			return timestamp + RANDOM.nextInt();		, +		}, +		, +		static final Random RANDOM = new Random();, +		, +	}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningUtils signingUtils;, +	, +		this.signingUtils = new SigningUtils();, +		return signingUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningUtils signingUtils;, +, +		this.signingUtils = new SigningUtils();, +		Map<String, String> oauthParameters = signingUtils.commonOAuthParameters(consumerKey);, +		return signingUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	private TimestampGenerator timestampGenerator;, +	, +	SigningUtils() {, +		this.timestampGenerator = new DefaultTimestampGenerator();, +	}, +	, +	public Map<String, String> commonOAuthParameters(String consumerKey) {, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +	public String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +	public String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	public String spring30buildAuthorizationHeaderValue(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +	String buildBaseString(HttpMethod method, String targetUrl, MultiValueMap<String, String> collectedParameters) {, +	private String normalizeParameters(MultiValueMap<String, String> collectedParameters) {, +	private String calculateSignature(String baseString, String consumerSecret, String tokenSecret) {, +	private String sign(String signatureBaseString, String key) {, +	private MultiValueMap<String, String> readFormParameters(MediaType bodyType, byte[] bodyBytes) {]