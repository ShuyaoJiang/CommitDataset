[+++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	 * The connection identifier., +	 */, +	public Long getId();, +, +	/**, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	 * The connection identifier., +	 */, +	public Long getId();, +, +	/**, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/OAuth2Template.java, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.web.client.RestOperations;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.util.UriTemplate;, +, +	private final String accessTokenUrl;, +, +	private final UriTemplate authorizeUrlTemplate;, +	, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {, +		this.authorizeUrlTemplate = authorizeUrl != null ? new UriTemplate(authorizeUrl) : null;, +		this.accessTokenUrl = accessTokenUrl;, +		Map<String, String> urlVariables = new HashMap<String, String>();, +		urlVariables.put("clientId", clientId);, +		urlVariables.put("redirectUri", redirectUri);, +		urlVariables.put("scope", scope);, +		return authorizeUrlTemplate.expand(urlVariables).toString();, +		Map<String, String> requestParameters = new HashMap<String, String>();, +		requestParameters.put("client_id", clientId);, +		requestParameters.put("client_secret", clientSecret);, +		requestParameters.put("code", authorizationCode);, +		requestParameters.put("redirect_uri", redirectUri);, +		requestParameters.put("grant_type", "authorization_code");, +		@SuppressWarnings("unchecked"), +		Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessToken(result.get("access_token"), result.get("refresh_token"));, +	protected RestOperations getRestOperations() {, +		return new RestTemplate();, +	}, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	 * The connection identifier., +	 */, +	public Long getId();, +, +	/**, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/OAuth2Template.java, +import java.util.HashMap;, +import java.util.Map;, +, +import org.springframework.web.client.RestOperations;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.util.UriTemplate;, +, +	private final String accessTokenUrl;, +, +	private final UriTemplate authorizeUrlTemplate;, +	, +	public OAuth2Template(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl) {, +		this.authorizeUrlTemplate = authorizeUrl != null ? new UriTemplate(authorizeUrl) : null;, +		this.accessTokenUrl = accessTokenUrl;, +		Map<String, String> urlVariables = new HashMap<String, String>();, +		urlVariables.put("clientId", clientId);, +		urlVariables.put("redirectUri", redirectUri);, +		urlVariables.put("scope", scope);, +		return authorizeUrlTemplate.expand(urlVariables).toString();, +		Map<String, String> requestParameters = new HashMap<String, String>();, +		requestParameters.put("client_id", clientId);, +		requestParameters.put("client_secret", clientSecret);, +		requestParameters.put("code", authorizationCode);, +		requestParameters.put("redirect_uri", redirectUri);, +		requestParameters.put("grant_type", "authorization_code");, +		@SuppressWarnings("unchecked"), +		Map<String, String> result = getRestOperations().postForObject(accessTokenUrl, requestParameters, Map.class);, +		return new AccessToken(result.get("access_token"), result.get("refresh_token"));, +	protected RestOperations getRestOperations() {, +		return new RestTemplate();, +	}, +++ b/spring-social-client/src/test/java/org/springframework/social/provider/oauth2/OAuth2TemplateTest.java, +package org.springframework.social.provider.oauth2;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.web.client.RestOperations;, +, +public class OAuth2TemplateTest {, +	private OAuth2Template oAuth2Template;, +	private String accessTokenUrl;, +]