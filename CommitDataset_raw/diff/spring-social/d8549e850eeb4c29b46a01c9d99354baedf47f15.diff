[+++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,, +			ServiceProviderConnection<TwitterOperations> connection, WebRequest request) {, +		connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +]]></programlisting>, +        <programlisting><![CDATA[<bean class="org.springframework.social.web.connect.ConnectController">, +	        <bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" />, +</bean>]]></programlisting>, +++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,, +			ServiceProviderConnection<TwitterOperations> connection, WebRequest request) {, +		connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +]]></programlisting>, +        <programlisting><![CDATA[<bean class="org.springframework.social.web.connect.ConnectController">, +	        <bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" />, +</bean>]]></programlisting>, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>FacebookServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,, +			ServiceProviderConnection<TwitterOperations> connection, WebRequest request) {, +		connection.getServiceApi().updateStatus("I've connected with the Spring Social Showcase!");, +]]></programlisting>, +        <programlisting><![CDATA[<bean class="org.springframework.social.web.connect.ConnectController">, +	        <bean class="org.springframework.social.showcase.twitter.TweetAfterConnectInterceptor" />, +</bean>]]></programlisting>, +++ b/docs/src/reference/docbook/facebook.xml, +  <para>Or, if you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>FacebookTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>FacebookServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +  <programlisting><![CDATA[FacebookOperations facebook = facebookProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +++ b/docs/src/reference/docbook/github.xml, +  <para>Although many developers think of GitHub as Git-based source code hosting, the tagline in GitHub's logo clearly states that GitHub is about "social coding". GitHub is a social network that links developers together and with the projects they follow and/or contribute to.</para>, +    <para>If you are using the service provider framework described in <xref linkend="serviceprovider"/>, you can get an instance of <classname>GitHubTemplate</classname> by calling the <methodname>getServiceApi()</methodname> method on one of the connections given by <classname>GitHubServiceProvider</classname>'s <methodname>getConnections()</methodname> method:</para>, +    <programlisting><![CDATA[GitHubOperations github = githubProvider.getConnections(accountId).get(0).getServiceApi();]]></programlisting>, +++ b/docs/src/reference/docbook/connecting.xml, +  <title>Connecting to Service Providers</title>, +  <para>Most connections with social providers are based on OAuth <footnote><para><ulink url="http://oauth.net" /></para></footnote>. OAuth is an open protocol that makes it possible for a client to access a service on behalf of a user without the client being aware of the user's credentials.</para>, +      , +  <para>Authorizing an application to access a social provider on behalf of a user involves a back-and-forth conversation between the application, the social network, and the user. This conversation, commonly referred to as the "OAuth Dance", involves the application asking the user to tell the social network that it's okay for the application to access and manipulate their social information. The outcome of the dance is an access token that the application can use as a sort of valet key to interact with the social network on the user's behalf.</para>, +    <para><classname>ConnectController</classname> is constructed with the base URL for the application. <classname>ConnectController</classname> will use this to construct callback URLs used in the OAuth dance.</para>, +        <listitem><para><code>GET /connect/{provider}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authorization callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token and completes the connection.</para></listitem>, +      <para>After the user agrees to allow the application have access to their profile on the provider, the provider will redirect their browser back to the application's authorization URL with a code that can be exchanged for an access token. For OAuth 1.0a providers, the callback URL is expected to receive the code (known as a verifier in OAuth 1 terms) in an <code>oauth_verifier</code> parameter. For OAuth 2, the code will be in a <code>code</code> parameter.</para>, +    void postConnect(ServiceProvider<S> provider, ServiceProviderConnection<S> connection, WebRequest request);, +    <programlisting><![CDATA[package org.springframework.social.showcase.twitter;, +import org.springframework.social.connect.ServiceProvider;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.twitter.DuplicateTweetException;, +import org.springframework.social.web.connect.ConnectInterceptor;, +import org.springframework.util.StringUtils;, +public class TweetAfterConnectInterceptor implements ConnectInterceptor<TwitterOperations> {, +, +	public void postConnect(ServiceProvider<TwitterOperations> provider,]