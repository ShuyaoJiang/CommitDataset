[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final SigningSupport signingUtils;, +		this.signingUtils = new SigningSupport();, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningSupport.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.ByteArrayOutputStream;, +import java.io.UnsupportedEncodingException;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URLDecoder;, +import java.nio.charset.Charset;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.BitSet;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.Random;, +import java.util.Set;, +, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.MediaType;, +import org.springframework.http.client.ClientHttpRequest;, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +, +class SigningSupport {, +	, +	private TimestampGenerator timestampGenerator = new DefaultTimestampGenerator();, +	, +	/**, +	 * Builds the authorization header., +	 * The elements in additionalParameters are expected to not be encoded., +	 */, +	public String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +		StringBuilder header = new StringBuilder();, +		header.append("OAuth ");, +		for (Entry<String, String> entry : oauthParameters.entrySet()) {, +			header.append(oauthEncode(entry.getKey())).append("=\"").append(oauthEncode(entry.getValue())).append("\", ");, +		}, +		MultiValueMap<String, String> collectedParameters = new LinkedMultiValueMap<String, String>((int) ((oauthParameters.size() + additionalParameters.size()) / .75 + 1));, +		collectedParameters.setAll(oauthParameters);, +		collectedParameters.putAll(additionalParameters);		, +		String baseString = buildBaseString(method, getBaseStringUri(targetUrl), collectedParameters);, +		String signature = calculateSignature(baseString, consumerSecret, tokenSecret);		, +		header.append(oauthEncode("oauth_signature")).append("=\"").append(oauthEncode(signature)).append("\"");, +		return header.toString();, +	}, +, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 */, +	public String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		Map<String, String> oauthParameters = commonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken);, +		MultiValueMap<String, String> additionalParameters = union(readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +		return buildAuthorizationHeaderValue(request.getMethod(), request.getURI(), oauthParameters, additionalParameters, consumerSecret, accessTokenSecret);, +	}, +	, +	/**]