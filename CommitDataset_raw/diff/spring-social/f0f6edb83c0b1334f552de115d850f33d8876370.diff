[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.util.Collections;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.WebRequest;, +	private final MultiValueMap<Class<?>, ProviderSignInInterceptor<?>> signInInterceptors = new LinkedMultiValueMap<Class<?>, ProviderSignInInterceptor<?>>();, +, +	 * Configure the list of sign in interceptors that should receive callbacks during the sign in process., +	 * Convenient when an instance of this class is configured using a tool that supports JavaBeans-based configuration., +	 * @param interceptors the sign in interceptors to add, +	 */, +	public void setSignInInterceptors(List<ProviderSignInInterceptor<?>> interceptors) {, +		for (ProviderSignInInterceptor<?> interceptor : interceptors) {, +			addSignInInterceptor(interceptor);, +		}, +	}, +	, +	/**, +	 * Adds a ConnectInterceptor to receive callbacks during the connection process., +	 * Useful for programmatic configuration., +	 * @param interceptor the connect interceptor to add, +	 */, +	public void addSignInInterceptor(ProviderSignInInterceptor<?> interceptor) {, +		Class<?> serviceApiType = GenericTypeResolver.resolveTypeArgument(interceptor.getClass(), ProviderSignInInterceptor.class);, +		signInInterceptors.add(serviceApiType, interceptor);, +	}, +, +	/**, +		MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>(); , +		preSignIn(connectionFactory, parameters, request);, +			return handleSignIn(connection, connectionFactory, request);, +			return handleSignIn(connection, connectionFactory, request);, +	private RedirectView handleSignIn(Connection<?> connection, ConnectionFactory<?> connectionFactory, NativeWebRequest request) {, +			postSignIn(connectionFactory, connection, (WebRequest) request);, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void preSignIn(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +		for (ProviderSignInInterceptor interceptor : interceptingSignInTo(connectionFactory)) {, +			interceptor.preSignIn(connectionFactory, parameters, request);, +		}, +	}, +	, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	private void postSignIn(ConnectionFactory<?> connectionFactory, Connection<?> connection, WebRequest request) {, +		for (ProviderSignInInterceptor interceptor : interceptingSignInTo(connectionFactory)) {, +			interceptor.postSignIn(connection, request);, +		}, +	}, +, +	private List<ProviderSignInInterceptor<?>> interceptingSignInTo(ConnectionFactory<?> connectionFactory) {, +		Class<?> serviceType = GenericTypeResolver.resolveTypeArgument(connectionFactory.getClass(), ConnectionFactory.class);, +		List<ProviderSignInInterceptor<?>> typedInterceptors = signInInterceptors.get(serviceType);, +		if (typedInterceptors == null) {, +			typedInterceptors = Collections.emptyList();, +		}, +		return typedInterceptors;, +	}, +]