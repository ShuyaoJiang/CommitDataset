[+++ b/docs/src/reference/docbook/apis.xml, +			From a user's perspective, Twitter's function is rather simple: Enable users to post whatever they're thinking, 140 characters at a time., +			In contrast, Twitter's API is rather rich, enabling applications to interact with Twitter in ways that may not be obvious from the humble tweet box., +			Spring Social offers interaction with Twitter's service API through the <interfacename>TwitterApi</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			, +TwitterApi twitterApi = new TwitterTemplate(apiKey, apiSecret, accessToken, accessTokenSecret);]]>, +TwitterApi twitterApi = new TwitterTemplate();]]>, +			Attempting other operations, such as tweeting will fail with an <classname>IllegalStateException</classname> being thrown., +			If you are using Spring Social's service provider framework, as described in <xref linkend="serviceprovider"/>, you can get an instance of <interfacename>TwitterApi</interfacename> by calling the <methodname>getServiceApi()</methodname> method on a <interfacename>ServiceProviderConnection</interfacename>. , +List<ServiceProviderConnection<TwitterApi>> connections = connectionRepository.finConnectionsToProvider("twitter");, +TwitterApi twitterApi = connections.get(0).getServiceApi();]]>, +			Here, <interfacename>ServiceProviderConnectionRepository</interfacename> is being asked for all of the connections that the current user has with Twitter., +			From the first connection, it retrieves a <interfacename>TwitterApi</interfacename> instance that is configured with the connection credentials received when the connection was established., +			Once you have a <interfacename>TwitterApi</interfacename>, you can perform a several operations against Twitter., +			<interfacename>TwitterApi</interfacename> is defined as follows:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +public interface TwitterApi {, +, +    boolean isAuthorizedForUser();, +, +    DirectMessageOperations directMessageOperations();, +	, +    FriendOperations friendOperations();, +, +    ListOperations listOperations();, +, +    SearchOperations searchOperations();, +, +    TimelineOperations timelineOperations();, +, +    UserOperations userOperations();, +, +}]]>, +		</programlisting>		, +		, +		<para>, +			The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>TwitterApi</interfacename> instance has been created with credentials to perform on behalf of a user., +			It will return true if it is capable of performing operations requiring authorization; false otherwise. 			, +		</para>, +		, +		<para>, +			The remaining six methods return sub-APIs, partitioning the Twitter service API into divisions targeting specific facets of Twitter functionality., +			These sub-APIs are defined by interfaces described in <xref linkend="table-twitter-sub-apis" />., +		</para>, +		, +		<table xml:id="table-twitter-sub-apis">, +			<title>TwitterApi's Sub-APIs</title>, +			<tgroup cols="2">, +				<colspec align="left" />, +				<colspec colnum="1" colname="col1" colwidth="2*"/>, +				<colspec colnum="2" colname="col2" colwidth="2*"/>, +				<thead>, +					<row>, +						<entry align="center">Sub-API Interface</entry>, +						<entry align="center">Description</entry>, +					</row>, +				</thead>, +				<tbody>, +					<row>, +						<entry>DirectMessageOperations</entry>, +						<entry>Reading and sending direct messages.</entry>, +					</row>, +					<row>, +						<entry>FriendOperations</entry>, +						<entry>Retrieving a user's list of friends and followers and following/unfollowing users.</entry>, +					</row>, +					<row>, +						<entry>ListOperations</entry>, +						<entry>Maintaining, subscribing to, and unsubscripting from user lists</entry>, +					</row>, +					<row>, +						<entry>SearchOperations</entry>, +						<entry>Searching tweets and viewing search trends</entry>, +					</row>, +					<row>, +						<entry>TimelineOperations</entry>, +						<entry>Reading timelines and posting tweets.</entry>, +					</row>, +					<row>, +						<entry>UserOperations</entry>, +						<entry>Retrieving user profile data.</entry>, +					</row>, +				</tbody>, +			</tgroup>, +		</table>, +		, +		<para>, +			What follows is a survey of common tasks you may perform with <interfacename>TwitterApi</interfacename> and its sub-APIs., +			For complete details on the Spring Social's entire Twitter API binding, refer to the JavaDoc., +				To get a user's Twitter profile, call <interfacename>UserOperations</interfacename>' <methodname>getUserProfile()</methodname>:, +TwitterProfile profile = twitterApi.userOperations().getUserProfile();]]>, +TwitterProfile profile = twitterApi.userOperations().getUserProfile("habuma");]]>, +				If all you need is the screen name for the authenticating user, then call <methodname>UserOperations.getScreenName()</methodname>:, +String profileId = twitterApi.userOperations().getScreenName();]]>, +				To post a message to Twitter the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method provided by <interfacename>TimelineOperations</interfacename>:, +twitterApi.timelineOperations().updateStatus("Spring Social is awesome!")]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>, +twitterApi.timelineOperations().retweet(tweetId);]]>]