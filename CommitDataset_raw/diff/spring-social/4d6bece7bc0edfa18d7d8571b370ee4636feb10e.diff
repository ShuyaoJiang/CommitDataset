[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/AbstractOAuth1ApiBindingTest.java, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +import org.aspectj.lang.ProceedingJoinPoint;, +import org.aspectj.lang.annotation.Around;, +import org.aspectj.lang.annotation.Aspect;, +import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;, +import org.springframework.social.oauth2.AbstractOAuth2ApiBinding;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.client.RestTemplate;, +	@Test, +	public void testOriginalSocialTemplateToProveBackwardsCompatibility() throws Exception {, +		MySocialTemplate template = new MySocialTemplate("some-key", "some-secret", "some-token", "some-token-secret");, +		template.afterPropertiesSet();, +		RestTemplate restTemplate = template.getRestTemplate();, +, +		assertThat(ClassUtils.isCglibProxy(restTemplate), is(false));, +		assertThat(template.getState(), equalTo("no state here"));, +		assertThat(ClassUtils.isCglibProxy(template.getSubSocialTemplate().getRestTemplate()), is(false));, +	}, +, +	@Test, +	public void testAugmentedSocialTemplate() throws Exception {, +		AugmentedSocialTemplate template = new AugmentedSocialTemplate("some-key", "some-secret", "some-token", "some-token-secret", "key piece of data");, +		template.afterPropertiesSet();, +		RestTemplate restTemplate = template.getRestTemplate();, +		restTemplate.getMessageConverters();, +, +		assertThat(ClassUtils.isCglibProxy(restTemplate), is(true));, +		assertThat(template.getState(), equalTo("This template was touched by an aspect"));, +		assertThat(ClassUtils.isCglibProxy(template.getSubSocialTemplate().getRestTemplate()), is(true));, +	}, +, +	, +	, +, +	/**, +	 * Imaginary social service that extends the {@link AbstractOAuth2ApiBinding}. Used to, +	 * demonstrate default behavior of pass through on {@link RestTemplate}., +	 * NOTE: This version is patterned like many Spring Social providers that "initSubApis()", +	 * in the constructor call. Test up above show that backwards compatibility is NOT broken., +	 */, +	private static class MySocialTemplate extends AbstractOAuth1ApiBinding {, +, +		private String state = "no state here";, +		private MySubSocialTemplate subSocialTemplate;, +, +		public MySocialTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +			super(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +			initSubApis();, +		}, +, +		private void initSubApis() {, +			this.subSocialTemplate = new MySubSocialTemplate(getRestTemplate());, +		}, +, +		public String getState() {, +			return state;, +		}, +, +		public void setState(String state) {, +			this.state = state;, +		}, +, +		public MySubSocialTemplate getSubSocialTemplate() {, +			return subSocialTemplate;, +		}, +, +	}, +, +	/**, +	 * Imaginary social service that extends the {@link AbstractOAuth2ApiBinding}. Used to, +	 * demonstrate default behavior of pass through on {@link RestTemplate}., +	 * NOTE: This version moves initSubApis() into the new configuration hook to make it more, +	 * extensible., +	 */, +	private static class MyRefactoredSocialTemplate extends AbstractOAuth1ApiBinding {, +, +		private String state = "no state here";, +		private MySubSocialTemplate subSocialTemplate;, +, +		public MyRefactoredSocialTemplate(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +			super(consumerKey, consumerSecret, accessToken, accessTokenSecret);, +		}, +, +		private void initSubApis() {, +			this.subSocialTemplate = new MySubSocialTemplate(getRestTemplate());, +		}, +, +		public String getState() {, +			return state;, +		}, +, +		public void setState(String state) {, +			this.state = state;, +		}, +, +		public MySubSocialTemplate getSubSocialTemplate() {, +			return subSocialTemplate;]