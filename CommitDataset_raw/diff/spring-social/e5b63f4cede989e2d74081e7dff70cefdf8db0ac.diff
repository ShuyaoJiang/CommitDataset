[+++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +    springVersion = '3.1.0.BUILD-SNAPSHOT', +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import java.io.IOException;, +import java.net.URI;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.http.client.ClientHttpResponse;, +, +/**, + * ClientHttpRequestInterceptor implementation that performs OAuth1 request signing before a request for a protected resource is executed., + * @author Keith Donald, + * @author Craig Walls, + */, +public class OAuth1RequestInterceptor implements ClientHttpRequestInterceptor {, +, +	private final String consumerKey;, +	, +	private final String consumerSecret;, +, +	private final OAuthToken accessToken;, +, +	/**, +	 * Creates an OAuth 1.0 protected resource request interceptor., +	 * @param accessToken the access token and secret, +	 */, +	public OAuth1RequestInterceptor(String consumerKey, String consumerSecret, OAuthToken accessToken) {, +		this.consumerKey = consumerKey;, +		this.consumerSecret = consumerSecret;, +		this.accessToken = accessToken;, +	}, +, +	public ClientHttpResponse intercept(final HttpRequest request, final byte[] body, ClientHttpRequestExecution execution) throws IOException {, +		HttpRequest protectedResourceRequest = new HttpRequest() {, +			public HttpHeaders getHeaders() {, +				HttpHeaders headers = new HttpHeaders();, +				headers.putAll(request.getHeaders());, +				headers.set("Authorization", getAuthorizationHeaderValue(request, body));, +				return headers;, +			}, +			, +			public URI getURI() {, +				return request.getURI();, +			}, +			, +			public HttpMethod getMethod() {, +				return request.getMethod();]