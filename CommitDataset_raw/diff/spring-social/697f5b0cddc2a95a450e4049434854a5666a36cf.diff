[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookErrorHandler.java, +/**, + * Subclass of {@link DefaultResponseErrorHandler} that handles errors from Facebook's, + * Graph API, interpreting them into appropriate exceptions., + * @author Craig Walls, + */, +class FacebookErrorHandler extends DefaultResponseErrorHandler {, +	@Override, +		if(errorDetails == null) {, +			// body does not contain the known Facebook error structure...use default handling, +			super.handleError(response);			, +		}, +		// Can't trust the type to be useful. It's often OAuthException, even for things not OAuth-related., +		// Can rely only on the message (which itself isn't very consistent)., +		} else if(message.contains("Some of the aliases you requested do not exist")) {, +			throw new GraphAPIException(message);, +	    return null;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookErrorHandler.java, +/**, + * Subclass of {@link DefaultResponseErrorHandler} that handles errors from Facebook's, + * Graph API, interpreting them into appropriate exceptions., + * @author Craig Walls, + */, +class FacebookErrorHandler extends DefaultResponseErrorHandler {, +	@Override, +		if(errorDetails == null) {, +			// body does not contain the known Facebook error structure...use default handling, +			super.handleError(response);			, +		}, +		// Can't trust the type to be useful. It's often OAuthException, even for things not OAuth-related., +		// Can rely only on the message (which itself isn't very consistent)., +		} else if(message.contains("Some of the aliases you requested do not exist")) {, +			throw new GraphAPIException(message);, +	    return null;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +		Map<String, Object> response = (Map<String, Object>) restTemplate.getForObject(OBJECT_URL, Map.class, objectId);, +		checkForErrors(response);, +		return extractor.extractObject(response);, +		Map<String, Object> response = (Map<String, Object>) restTemplate.getForObject(OBJECT_URL + "?fields={fields}", Map.class, objectId, joinedFields);, +		checkForErrors(response);, +		return extractor.extractObject( response);, +		Map<String, Object> response = restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);, +		checkForErrors(response);, +		return (String) response.get("id");, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookErrorHandler.java, +/**, + * Subclass of {@link DefaultResponseErrorHandler} that handles errors from Facebook's, + * Graph API, interpreting them into appropriate exceptions., + * @author Craig Walls, + */, +class FacebookErrorHandler extends DefaultResponseErrorHandler {, +	@Override, +		if(errorDetails == null) {, +			// body does not contain the known Facebook error structure...use default handling, +			super.handleError(response);			, +		}, +		// Can't trust the type to be useful. It's often OAuthException, even for things not OAuth-related., +		// Can rely only on the message (which itself isn't very consistent)., +		} else if(message.contains("Some of the aliases you requested do not exist")) {, +			throw new GraphAPIException(message);, +	    return null;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +		Map<String, Object> response = (Map<String, Object>) restTemplate.getForObject(OBJECT_URL, Map.class, objectId);, +		checkForErrors(response);, +		return extractor.extractObject(response);, +		Map<String, Object> response = (Map<String, Object>) restTemplate.getForObject(OBJECT_URL + "?fields={fields}", Map.class, objectId, joinedFields);, +		checkForErrors(response);, +		return extractor.extractObject( response);, +		Map<String, Object> response = restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);, +		checkForErrors(response);, +		return (String) response.get("id");, +	@SuppressWarnings("unchecked"), +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/support/extractors/CommentResponseExtractor.java, +		// TODO : Potential problem with the content of likes...in some cases it may be an integer, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookErrorHandler.java, +/**, + * Subclass of {@link DefaultResponseErrorHandler} that handles errors from Facebook's, + * Graph API, interpreting them into appropriate exceptions., + * @author Craig Walls, + */, +class FacebookErrorHandler extends DefaultResponseErrorHandler {, +	@Override, +		if(errorDetails == null) {, +			// body does not contain the known Facebook error structure...use default handling, +			super.handleError(response);			, +		}, +		// Can't trust the type to be useful. It's often OAuthException, even for things not OAuth-related., +		// Can rely only on the message (which itself isn't very consistent)., +		} else if(message.contains("Some of the aliases you requested do not exist")) {, +			throw new GraphAPIException(message);, +	    return null;, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +		Map<String, Object> response = (Map<String, Object>) restTemplate.getForObject(OBJECT_URL, Map.class, objectId);, +		checkForErrors(response);, +		return extractor.extractObject(response);, +		Map<String, Object> response = (Map<String, Object>) restTemplate.getForObject(OBJECT_URL + "?fields={fields}", Map.class, objectId, joinedFields);, +		checkForErrors(response);, +		return extractor.extractObject( response);, +		Map<String, Object> response = restTemplate.postForObject(CONNECTION_URL, requestData, Map.class, objectId, connectionType);]