[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		parserContext.getRegistry().registerBeanDefinition(USERS_CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(USERS_CONNECTION_REPOSITORY_ID, usersConnectionRepositoryBD, parserContext));, +		BeanDefinition connectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition().addConstructorArgValue(USER_ID_STRING_ID).getBeanDefinition();, +		connectionRepositoryBD.setFactoryBeanName(USERS_CONNECTION_REPOSITORY_ID);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY);, +		connectionRepositoryBD.setScope("request");, +		parserContext.getRegistry().registerBeanDefinition(CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(CONNECTION_REPOSITORY_ID, connectionRepositoryBD, parserContext));, +		return connectionRepositoryBD;, +	}, +, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +	}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		parserContext.getRegistry().registerBeanDefinition(USERS_CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(USERS_CONNECTION_REPOSITORY_ID, usersConnectionRepositoryBD, parserContext));, +		BeanDefinition connectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition().addConstructorArgValue(USER_ID_STRING_ID).getBeanDefinition();, +		connectionRepositoryBD.setFactoryBeanName(USERS_CONNECTION_REPOSITORY_ID);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY);, +		connectionRepositoryBD.setScope("request");, +		parserContext.getRegistry().registerBeanDefinition(CONNECTION_REPOSITORY_ID, decorateWithScopedProxy(CONNECTION_REPOSITORY_ID, connectionRepositoryBD, parserContext));, +		return connectionRepositoryBD;, +	}, +, +	private BeanDefinition decorateWithScopedProxy(String beanName, BeanDefinition beanDefinition, ParserContext parserContext) {, +		BeanDefinitionHolder bdHolder = new BeanDefinitionHolder(beanDefinition, beanName + "_target");, +		BeanDefinitionHolder scopedProxyHolder = ScopedProxyUtils.createScopedProxy(bdHolder, parserContext.getRegistry(), false);, +		parserContext.registerBeanComponent(new BeanComponentDefinition(bdHolder));, +		return scopedProxyHolder.getBeanDefinition();, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest-context.xml, +	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd, +		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd, +		http://www.springframework.org/schema/social http://www.springframework.org/schema/social/spring-social.xsd">, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		, +		// BIG TODO: Can't pass in property placeholders for app-id or app-secret because the connection factory itself is never, +		//           defined via a BeanDefinition and thus, Spring has no opportunity to perform the replacement of the placeholders., +		//           Need to create the CF as a bean definition and then register it with the CFL., +		, +			parserContext.getRegistry().registerBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID, decorateWithScopedProxy(CONNECTION_FACTORY_LOCATOR_ID, connFactoryLocatorBeanDef, parserContext));, +, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(CONNECTION_FACTORY_LOCATOR_ID + "_target");]