[+++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +	 * @return The id of the provider the connection is associated with., +	 * @return The id of the provider user this connection is connected to., +	 * @return A display name for the connection., +	 * @return A link to the provider's user profile page., +	 * @return An image visualizing the connection., +	 * @return The access token required to make authorized API calls., +	 * @return The secret token needed to make authorized API calls., +	 * @return A token use to renew this connection. Optional., +	 * @return The time the connection expires. Optional., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +	 * @return The id of the provider the connection is associated with., +	 * @return The id of the provider user this connection is connected to., +	 * @return A display name for the connection., +	 * @return A link to the provider's user profile page., +	 * @return An image visualizing the connection., +	 * @return The access token required to make authorized API calls., +	 * @return The secret token needed to make authorized API calls., +	 * @return A token use to renew this connection. Optional., +	 * @return The time the connection expires. Optional., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	 * @return The id of the provider as it is registered in the system., +	 * @return The id of the external provider user representing the remote end of the connection., +++ b/gradle.properties, +jacksonVersion          = 2.4.5, +mockitoVersion          = 1.10.8, +springVersion           = 4.1.6.BUILD-SNAPSHOT, +springSecurityVersion   = 3.2.7.RELEASE, +++ b/spring-social-core/src/main/java/org/springframework/social/ApiBinding.java, +	 * @return true if this API binding has been authorized on behalf of a specific user., +++ b/spring-social-core/src/main/java/org/springframework/social/ApiException.java, +	 * @return The ID of the provider for which the API exception occurred., +++ b/spring-social-core/src/main/java/org/springframework/social/InsufficientPermissionException.java, +	 * @return the permission required to access the resource, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +	 * @return The id of the provider the connection is associated with., +	 * @return The id of the provider user this connection is connected to., +	 * @return A display name for the connection., +	 * @return A link to the provider's user profile page., +	 * @return An image visualizing the connection., +	 * @return The access token required to make authorized API calls., +	 * @return The secret token needed to make authorized API calls., +	 * @return A token use to renew this connection. Optional., +	 * @return The time the connection expires. Optional., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +	 * @return The id of the provider as it is registered in the system.]