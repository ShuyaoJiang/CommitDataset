[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to add a {@link Connection} and a connection already exists with the given key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to add a {@link Connection} and a connection already exists with the given key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to fetch a {@link Connection} and no such connection exists with the provided key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionData.java, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth2Connection;, +, + * Some fields may be null depending on the specific type of {@link Connection}., + * For example, an {@link OAuth2Connection} has a null 'secret' field while an {@link OAuth1Connection} has null 'refreshToken' and 'expireTime' fields., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactory.java, + * Base abstraction for factories that construct service provider {@link Connection} instances., +	 * @param apiAdapter the adapter that maps common operations exposed by the ServiceProvider's API to the uniform {@link Connection} model, +	 * Used to index this {@link ConnectionFactory} in a registry to support dynamic lookup operations., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, + * The unique business key for a {@link Connection} instance., +	 * Creates a new {@link ConnectionKey}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * The key for each entry is the providerId, and the value is the list of {@link Connection}s that exist between the user and that provider., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/DuplicateConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to add a {@link Connection} and a connection already exists with the given key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * Thrown by a {@link ConnectionRepository} when attempting to fetch a {@link Connection} and no such connection exists with the provided key., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/package-info.java]