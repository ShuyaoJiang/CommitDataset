[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(),, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +		ResponseEntity<MultiValueMap> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, MultiValueMap.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		Map<String, ?> result = restTemplate.postForObject(accessTokenUrl, requestParameters, Map.class);, +	// testing hooks, +	RestTemplate getRestTemplate() {, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer(oauth1.getRestTemplate());, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +				.getRestTemplate());]