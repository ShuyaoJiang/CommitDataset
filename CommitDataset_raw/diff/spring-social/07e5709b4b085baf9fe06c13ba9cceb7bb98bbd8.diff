[+++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., +			We recommend the code structure of a client module follow the guidelines described below., +			<title>Code structure guidelines</title>, +				We recommend the code for a new Spring Social client module reside within the <code>org.springframework.social.{providerId}</code> base package,, +				Each request made to the API server needs to be signed with the authorization credentials provided during construction of the binding., +				For complete implementation examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +TwitterTemplate twitter = new TwitterTemplate("consumerKey", "consumerSecret", "accessToken", "accessTokenSecret");, +				For complete test examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +				To implement an OAuth2-based ServiceProvider, first create a subclass of AbstractOAuth2ServiceProvider named {ProviderId}ServiceProvider., +				To implement an OAuth1-based ServiceProvider, first create a subclass of AbstractOAuth1ServiceProvider named {ProviderId}ServiceProvider., +		<para>, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;S&gt; implementation for conducting the "authorization dance", and a ServiceApiAdapter&lt;S&gt; implementation for mapping onto the uniform ServiceProviderConnection model., +			The last step in adding support for a new service provider is to create a ServiceProviderConnectionFactory that wraps up these artifacts and provides a simple interface for establishing ServiceProviderConnections., +			After this is done, you may use your connection factory directly, or you may add it to a registry where it can be used by the framework to establish connections in a dynamic, self-service manner., +		</para>, +		<para>, +			Like a ServiceProvider&lt;S&gt;, a ServiceProviderConnectionFactory specialization exists for each authorization protocol., +			For example, if you are adding support for a OAuth2-based provider, you would extend from OAuth2ServiceProviderConnectionFactory., +			Implementation guidelines for each type are provided below., +		</para>, +		<section id="service-providers-implementing-serviceproviderconnectionfactory-oauth2">, +			<title>OAuth2</title>, +			<para>, +				Create a subclass of OAuth2ServiceProviderConnectionFactory&lt;S&gt; named {ProviderId}ServiceProviderConnectionFactory and parameterize S to be the Java binding to the service provider's API., +				Define a single constructor that accepts a clientId and clientSecret., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}ServiceApiAdapter instance. 			, +			</para>, +			<para>, +				See <code>org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory</code> as an example OAuth2ServiceProviderConnectionFactory:, +			</para>, +			<programlisting language="java"><![CDATA[, +public final class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +    public FacebookServiceProviderConnectionFactory(String clientId, String clientSecret) {, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookServiceApiAdapter());, +    }, +}]]>, +			</programlisting>			, +		</section>		, +		<section id="service-providers-implementing-serviceproviderconnectionfactory-oauth2">, +			<title>OAuth1</title>, +			<para>, +				Create a subclass of OAuth1ServiceProviderConnectionFactory&lt;S&gt; named {ProviderId}ServiceProviderConnectionFactory and parameterize S to be the Java binding to the service provider's API., +				Define a single constructor that accepts a consumerKey and consumerSecret., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}ServiceApiAdapter instance. 			, +			</para>, +			<para>, +				See <code>org.springframework.social.twitter.connect.TwitterServiceProviderConnectionFactory</code> as an example OAuth1ServiceProviderConnectionFactory:, +			</para>, +			<programlisting language="java"><![CDATA[, +public final class TwitterServiceProviderConnectionFactory extends OAuth1ServiceProviderConnectionFactory<FacebookApi> {, +    public TwitterServiceProviderConnectionFactory(String consumerKey, String consumerSecret) {, +        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterServiceApiAdapter());, +    }, +}]]>, +			</programlisting>, +			<para>, +				Consult the source and JavaDoc API for ServiceProviderConnectionFactory and its subclasses more information, examples, and advanced customization options., +			</para>		, +		</section>, +++ b/docs/src/reference/docbook/implementing.xml, +			A Spring Social client module is a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., +			We recommend the code structure of a client module follow the guidelines described below., +			<title>Code structure guidelines</title>, +				We recommend the code for a new Spring Social client module reside within the <code>org.springframework.social.{providerId}</code> base package,, +				Each request made to the API server needs to be signed with the authorization credentials provided during construction of the binding., +				For complete implementation examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +TwitterTemplate twitter = new TwitterTemplate("consumerKey", "consumerSecret", "accessToken", "accessTokenSecret");, +				For complete test examples, consult the source of the existing API bindings included in Spring Social., +				The <code>spring-social-twitter</code> and <code>spring-social-facebook</code> modules provide particularly good references., +				To implement an OAuth2-based ServiceProvider, first create a subclass of AbstractOAuth2ServiceProvider named {ProviderId}ServiceProvider., +				To implement an OAuth1-based ServiceProvider, first create a subclass of AbstractOAuth1ServiceProvider named {ProviderId}ServiceProvider., +		<para>, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;S&gt; implementation for conducting the "authorization dance", and a ServiceApiAdapter&lt;S&gt; implementation for mapping onto the uniform ServiceProviderConnection model., +			The last step in adding support for a new service provider is to create a ServiceProviderConnectionFactory that wraps up these artifacts and provides a simple interface for establishing ServiceProviderConnections., +			After this is done, you may use your connection factory directly, or you may add it to a registry where it can be used by the framework to establish connections in a dynamic, self-service manner., +		</para>, +		<para>, +			Like a ServiceProvider&lt;S&gt;, a ServiceProviderConnectionFactory specialization exists for each authorization protocol., +			For example, if you are adding support for a OAuth2-based provider, you would extend from OAuth2ServiceProviderConnectionFactory., +			Implementation guidelines for each type are provided below., +		</para>, +		<section id="service-providers-implementing-serviceproviderconnectionfactory-oauth2">, +			<title>OAuth2</title>, +			<para>, +				Create a subclass of OAuth2ServiceProviderConnectionFactory&lt;S&gt; named {ProviderId}ServiceProviderConnectionFactory and parameterize S to be the Java binding to the service provider's API., +				Define a single constructor that accepts a clientId and clientSecret., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}ServiceApiAdapter instance. 			, +			</para>, +			<para>, +				See <code>org.springframework.social.facebook.connect.FacebookServiceProviderConnectionFactory</code> as an example OAuth2ServiceProviderConnectionFactory:, +			</para>, +			<programlisting language="java"><![CDATA[, +public final class FacebookServiceProviderConnectionFactory extends OAuth2ServiceProviderConnectionFactory<FacebookApi> {, +    public FacebookServiceProviderConnectionFactory(String clientId, String clientSecret) {, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookServiceApiAdapter());, +    }]