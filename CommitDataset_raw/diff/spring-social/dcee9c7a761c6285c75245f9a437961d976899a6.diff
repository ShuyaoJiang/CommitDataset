[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.Set;, +	public SigningUtils() {, +	/**, +	 * Builds the authorization header., +	 * The elements in additionalParameters should be decoded., +	 */, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 * This method is a Spring 3.0-compatible version of buildAuthorizationHeaderValue(); planned for removal in Spring Social 1.1, +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	, +	Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +	, +				//      null should be equivalent to empty value...add the parameter with no value, +				result.add(formDecode(pair), "");, +	private MultiValueMap<String, String> combineMultiValueMaps(MultiValueMap<String, String> map1, MultiValueMap<String, String> map2) {, +		MultiValueMap<String, String> combinedMap = new LinkedMultiValueMap<String, String>(map1);, +		// can't use putAll here because it will overwrite anything that has the same key in both maps, +		Set<Entry<String, List<String>>> map2Entries = map2.entrySet();, +		for(Iterator<Entry<String, List<String>>> entryIt = map2Entries.iterator(); entryIt.hasNext();) {, +			Entry<String, List<String>> entry = entryIt.next();, +			String key = entry.getKey();, +			List<String> values = entry.getValue();, +			for (String value : values) {, +				combinedMap.add(key, value);, +			}, +		}, +		return combinedMap;, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import java.util.Set;, +	public SigningUtils() {, +	/**, +	 * Builds the authorization header., +	 * The elements in additionalParameters should be decoded., +	 */, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	/**, +	 * Builds an authorization header from a request., +	 * Expects that the request's query parameters are form-encoded., +	 * This method is a Spring 3.0-compatible version of buildAuthorizationHeaderValue(); planned for removal in Spring Social 1.1, +	 */, +		MultiValueMap<String, String> additionalParameters = combineMultiValueMaps(, +				readFormParameters(request.getHeaders().getContentType(), body), parseFormParameters(request.getURI().getRawQuery()));, +	, +	Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = timestampGenerator.generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));, +		oauthParameters.put("oauth_nonce", Long.toString(timestampGenerator.generateNonce(timestamp)));, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +	, +				//      null should be equivalent to empty value...add the parameter with no value, +				result.add(formDecode(pair), "");, +	private MultiValueMap<String, String> combineMultiValueMaps(MultiValueMap<String, String> map1, MultiValueMap<String, String> map2) {, +		MultiValueMap<String, String> combinedMap = new LinkedMultiValueMap<String, String>(map1);, +		// can't use putAll here because it will overwrite anything that has the same key in both maps, +		Set<Entry<String, List<String>>> map2Entries = map2.entrySet();, +		for(Iterator<Entry<String, List<String>>> entryIt = map2Entries.iterator(); entryIt.hasNext();) {, +			Entry<String, List<String>> entry = entryIt.next();, +			String key = entry.getKey();, +			List<String> values = entry.getValue();, +			for (String value : values) {, +				combinedMap.add(key, value);, +			}, +		}, +		return combinedMap;, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/util/URIBuilder.java, +/*]