[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.HashMap;, +import org.springframework.web.bind.annotation.RequestParam;, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		Map<String, String> errorMap = new HashMap<String, String>();, +		errorMap.put("error", error);, +		if (errorDescription != null) { errorMap.put("errorDescription", errorDescription); }, +		if (errorUri != null) { errorMap.put("errorUri", errorUri); }, +		request.setAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, errorMap, RequestAttributes.SCOPE_SESSION);, +		return connectionStatusRedirect(providerId, request);, +	}, +, +	/**, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, request.getAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION));, +		request.removeAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +	private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +, +	private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +import java.util.HashMap;, +import org.springframework.web.bind.annotation.RequestParam;, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		Map<String, String> errorMap = new HashMap<String, String>();, +		errorMap.put("error", error);, +		if (errorDescription != null) { errorMap.put("errorDescription", errorDescription); }, +		if (errorUri != null) { errorMap.put("errorUri", errorUri); }, +		request.setAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, errorMap, RequestAttributes.SCOPE_SESSION);, +		return connectionStatusRedirect(providerId, request);, +	}, +, +	/**, +		model.addAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, request.getAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION));, +		request.removeAttribute(AUTHORIZATION_ERROR_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +	private static final String DUPLICATE_CONNECTION_ATTRIBUTE = "social_addConnection_duplicate";, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social_provider_error";, +, +	private static final String AUTHORIZATION_ERROR_ATTRIBUTE = "social_authorization_error";, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import java.util.HashMap;, +	@Test, +	public void oauth2ErrorCallback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertEquals(0, connectionRepository.findConnections("oauth2Provider").size());		, +		HashMap<String, String> expectedError = new HashMap<String, String>();, +		expectedError.put("error", "access_denied");, +		expectedError.put("errorDescription", "The user said no.");, +		expectedError.put("errorUri", "http://provider.com/user/said/no");, +		mockMvc.perform(get("/connect/oauth2Provider").param("error", "access_denied"), +													  .param("error_description", "The user said no."), +													  .param("error_uri", "http://provider.com/user/said/no")), +			.andExpect(redirectedUrl("/connect/oauth2Provider")), +			.andExpect(request().sessionAttribute("social_authorization_error", notNullValue())), +			.andExpect(request().sessionAttribute("social_authorization_error", expectedError));, +	}, +, +	@Test, +	public void oauth2ErrorCallback_noDescriptionOrUri() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertEquals(0, connectionRepository.findConnections("oauth2Provider").size());		, +		HashMap<String, String> expectedError = new HashMap<String, String>();, +		expectedError.put("error", "access_denied");, +		mockMvc.perform(get("/connect/oauth2Provider").param("error", "access_denied")), +			.andExpect(redirectedUrl("/connect/oauth2Provider")), +			.andExpect(request().sessionAttribute("social_authorization_error", notNullValue())), +			.andExpect(request().sessionAttribute("social_authorization_error", expectedError));, +	}, +]