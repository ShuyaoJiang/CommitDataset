[+++ b/docs/src/reference/docbook/signin.xml, +			Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., +	</section>, +, +	<section xml:id="signin_using">, +		<title>Enabling provider signin</title>, +			The <classname>ProviderSignInController</classname> bean only requires a single <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL., +			<classname>ProviderSignInController</classname> will use this URL to construct the callback URL used in the authentication flow., +			When authenticating via an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:, +		<section>, +			<title>ProviderSignInController's dependencies</title>, +		, +				As shown above, <classname>ProviderSignInController</classname> can be configured as a Spring bean given only a single constructor argument., +				Nevertheless, <classname>ProviderSignInController</classname> depends on a handful of other beans to do its job., +			</para>, +			, +			<itemizedlist>, +				<listitem><para>A <interfacename>ServiceProviderConnectionFactoryLocator</interfacename> to lookup a connection factory used to perform the authentication process with the provider.</para></listitem>, +				<listitem><para>A <interfacename>MultiUserServiceProviderConnectionRepository</interfacename> to find a user whose connection matches the signin connection.</para></listitem>, +				<listitem><para>A <interfacename>ServiceProviderConnectionRepository</interfacename> used to create a new connection when the user signs up in the application after a failed provider signin.</para></listitem>, +				<listitem><para>A <interfacename>SignInService</interfacename> to sign the user into the application if a matching connection is found.</para></listitem>, +			</itemizedlist>, +			, +			, +			<para>, +				Because <classname>ProviderSignInController</classname>'s constructor is annotated with <code>@Inject</code>, those dependencies will be given to <classname>ProviderSignInController</classname> via autowiring., +				You'll still need to make sure they're available as beans in the Spring application context so that they can be autowired., +			</para>, +			, +			<para>, +				You should have already configured most of these dependencies when setting up connection support (in the previous chapter)., +				The <interfacename>SignInService</interfacename> is exclusively used for provider signin and so a <interfacename>SignInService</interfacename> bean will need to be added to the configuration., +				But first, you'll need to write an implementation of the <interfacename>SignInService</interfacename> interface., +			</para>, +, +			<para>, +				The <interfacename>SignInService</interfacename> interface is defined as follows:, +				The <methodname>signIn()</methodname> method takes a single argument which is the local application user's user ID normalized as a <classname>String</classname>., +				No other credentials are necessary here because by the time this method is called the user will have signed into the provider and their connection with that provider has been used to prove the user's identity., +				Implementations of this interface should use this user ID to authenticate the user to the application. , +			</para>, +, +			<para>, +				For example, suppose that an application's security is based Spring Security and simply uses a user's account ID as their principal. , +public class SpringSecuritySignInService implements SignInService {, +				Once you've written a <interfacename>SignInService</interfacename> implementation, it must be configured as a bean in the Spring context:, +			</para>, +, +			<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.showcase.signin.SpringSecuritySignInService" />, +]]>, +			</programlisting>, +		</section>, +		, +		<section>, +			<title>Adding a provider signin button</title>, +			<para>, +				With <classname>ProviderSignInController</classname> and a <interfacename>SignInService</interfacename> configured, the backend support for provider signin is in place., +	   		</para>, +	   		, +	   		<para>, +	      		For example, the following HTML snippet adds a "Signin with Twitter" button to a page:, +    <button type="submit"><img src="<c:url value="/resources/social/twitter/sign-in-with-twitter-d.png"/>" />, +    </button>, +				Notice that the path used in the form's <code>action</code> attribute maps to the first step in <classname>ProviderSignInController</classname>'s flow., +				In this case, the provider is identified as "twitter"., +			</para>, +			, +			<para>, +	</section>, +		<para>, +			If <classname>ProviderSignInController</classname> can't find a connection that matches the one obtained after signing into the provider, it will put the signin on hold and redirect the user to an application signup page., +			By default, the signup URL is "/signup", relative to the application root. , +			You can override that default by setting the <code>signupUrl</code> property on the controller. , +			For example, the following configuration of <classname>ProviderSignInController</classname> sets the signup URL to "/newUser": , +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +    <property name="signupUrl" value="/newUser" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +			Before redirecting to the signup page, <classname>ProviderSignInController</classname> collects some information about the authentication attempt., +			This information can be used to prepopulate the signup form and then, after successful registration, to establish a connection between the new account and the provider account.			, +		</para>, +		, +		<para>, +			To prepopulate the signup form, you can fetch the user profile data from a connection retrieved from <methodname>ProviderSignInUtils.getConnection()</methodname>., +			For example, consider this Spring MVC controller method that setups up the signup form with a <classname>SignupForm</classname> to bind to the signup form:, +		</para>, +		, +		<programlisting language="java"><![CDATA[, +@RequestMapping(value="/signup", method=RequestMethod.GET), +public SignupForm signupForm(WebRequest request) {, +    ServiceProviderConnection<?> connection = ProviderSignInUtils.getConnection(request);, +    if (connection != null) {, +        return SignupForm.fromProviderUser(connection.fetchUserProfile());]