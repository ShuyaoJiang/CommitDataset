[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +import org.w3c.dom.Element;, +	private static final String CONNECTION_REPOSITORY_ATTRIBUTE = "connection-repository";, +	private static final String DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME = "connectionRepository";, +, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String name = element.getAttribute("id");, +		if (name == null || name.isEmpty()) {, +			name = getDefaultProviderName();, +		}, +, +		return registerServiceProviderBean(element, parserContext, name);, +	}, +, +	protected BeanDefinition registerServiceProviderBean(Element element, ParserContext parserContext, String name) {, +, +		String consumerKey = element.getAttribute("consumer-key");, +		String consumerSecret = element.getAttribute("consumer-secret");, +		String connectionRepositoryBean = getConnectionRepositoryName(element);, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(getImplementationClassName());, +, +	String getConnectionRepositoryName(Element element) {, +		return (element.hasAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) ? element, +				.getAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) : DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME);, +	}, +, +	abstract protected String getImplementationClassName();, +, +	abstract protected String getDefaultProviderName();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +import org.w3c.dom.Element;, +	private static final String CONNECTION_REPOSITORY_ATTRIBUTE = "connection-repository";, +	private static final String DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME = "connectionRepository";, +, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String name = element.getAttribute("id");, +		if (name == null || name.isEmpty()) {, +			name = getDefaultProviderName();, +		}, +, +		return registerServiceProviderBean(element, parserContext, name);, +	}, +, +	protected BeanDefinition registerServiceProviderBean(Element element, ParserContext parserContext, String name) {, +, +		String consumerKey = element.getAttribute("consumer-key");, +		String consumerSecret = element.getAttribute("consumer-secret");, +		String connectionRepositoryBean = getConnectionRepositoryName(element);, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(getImplementationClassName());, +, +	String getConnectionRepositoryName(Element element) {, +		return (element.hasAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) ? element, +				.getAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) : DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME);, +	}, +, +	abstract protected String getImplementationClassName();, +, +	abstract protected String getDefaultProviderName();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookProviderElementParser.java, +	@Override, +	protected String getDefaultProviderName() {, +		return "facebook";, +	@Override, +	protected String getImplementationClassName() {, +		return FacebookServiceProvider.class.getName();, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractServiceProviderElementParser.java, +import org.w3c.dom.Element;, +	private static final String CONNECTION_REPOSITORY_ATTRIBUTE = "connection-repository";, +	private static final String DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME = "connectionRepository";, +, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String name = element.getAttribute("id");, +		if (name == null || name.isEmpty()) {, +			name = getDefaultProviderName();, +		}, +, +		return registerServiceProviderBean(element, parserContext, name);, +	}, +, +	protected BeanDefinition registerServiceProviderBean(Element element, ParserContext parserContext, String name) {, +, +		String consumerKey = element.getAttribute("consumer-key");, +		String consumerSecret = element.getAttribute("consumer-secret");, +		String connectionRepositoryBean = getConnectionRepositoryName(element);, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(getImplementationClassName());, +, +	String getConnectionRepositoryName(Element element) {, +		return (element.hasAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) ? element, +				.getAttribute(CONNECTION_REPOSITORY_ATTRIBUTE) : DEFAULT_CONNECTION_REPOSITORY_BEAN_NAME);, +	}]