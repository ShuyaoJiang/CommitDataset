[+++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestSigner.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLDecoder;, +			String requestUrl = request.getURI().toURL().toString();, +			if (request.getHttpMethod() == HttpMethod.POST || request.getHttpMethod() == HttpMethod.PUT) {, +				String[] baseAndParams = requestUrl.split("\\?");, +				requestUrl = baseAndParams[0];, +				if (baseAndParams.length == 2) {, +					String[] paramPairs = baseAndParams[1].split("\\&");, +					for (String paramPair : paramPairs) {, +						String[] splitPair = paramPair.split("=");, +						params.put(splitPair[0], decode(splitPair[1]));, +					}, +				}, +			}, +, +			String authorizationHeader = buildAuthorizationHeader(request.getHttpMethod(), requestUrl, params);, +	String decode(String encoded) {, +		try {, +			return URLDecoder.decode(encoded, "UTF-8");, +		} catch (UnsupportedEncodingException shouldntHappen) {, +			return encoded;, +		}, +	}, +, +	protected abstract String buildAuthorizationHeader(HttpMethod method, String url, Map<String, String> parameters);, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestSigner.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLDecoder;, +			String requestUrl = request.getURI().toURL().toString();, +			if (request.getHttpMethod() == HttpMethod.POST || request.getHttpMethod() == HttpMethod.PUT) {, +				String[] baseAndParams = requestUrl.split("\\?");, +				requestUrl = baseAndParams[0];, +				if (baseAndParams.length == 2) {, +					String[] paramPairs = baseAndParams[1].split("\\&");, +					for (String paramPair : paramPairs) {, +						String[] splitPair = paramPair.split("=");, +						params.put(splitPair[0], decode(splitPair[1]));, +					}, +				}, +			}, +, +			String authorizationHeader = buildAuthorizationHeader(request.getHttpMethod(), requestUrl, params);, +	String decode(String encoded) {, +		try {, +			return URLDecoder.decode(encoded, "UTF-8");, +		} catch (UnsupportedEncodingException shouldntHappen) {, +			return encoded;, +		}, +	}, +, +	protected abstract String buildAuthorizationHeader(HttpMethod method, String url, Map<String, String> parameters);, +++ b/src/main/java/org/springframework/social/oauth1/ScribeOAuth1RequestSigner.java, +	protected String buildAuthorizationHeader(HttpMethod method, String url, Map<String, String> parameters) {, +		String adjustedUrl = adjustUrl(url);, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestSigner.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLDecoder;, +			String requestUrl = request.getURI().toURL().toString();, +			if (request.getHttpMethod() == HttpMethod.POST || request.getHttpMethod() == HttpMethod.PUT) {, +				String[] baseAndParams = requestUrl.split("\\?");, +				requestUrl = baseAndParams[0];, +				if (baseAndParams.length == 2) {, +					String[] paramPairs = baseAndParams[1].split("\\&");, +					for (String paramPair : paramPairs) {, +						String[] splitPair = paramPair.split("=");, +						params.put(splitPair[0], decode(splitPair[1]));, +					}, +				}, +			}, +, +			String authorizationHeader = buildAuthorizationHeader(request.getHttpMethod(), requestUrl, params);, +	String decode(String encoded) {, +		try {, +			return URLDecoder.decode(encoded, "UTF-8");, +		} catch (UnsupportedEncodingException shouldntHappen) {, +			return encoded;, +		}, +	}, +, +	protected abstract String buildAuthorizationHeader(HttpMethod method, String url, Map<String, String> parameters);, +++ b/src/main/java/org/springframework/social/oauth1/ScribeOAuth1RequestSigner.java, +	protected String buildAuthorizationHeader(HttpMethod method, String url, Map<String, String> parameters) {, +		String adjustedUrl = adjustUrl(url);, +++ b/src/test/java/org/springframework/social/oauth1/OAuth1ClientRequestSignerTest.java, +		// assertEquals("GET_AUTHORIZATION_HEADER",, +		// request.getHeaders().get("Authorization"));, +		protected String buildAuthorizationHeader(HttpMethod method, String url, Map<String, String> parameters) {, +			if (method.equals(HttpMethod.POST) && url.equals("http://bar.com/foo"), +			if (method.equals(HttpMethod.GET) && url.equals("http://bar.com/foo") && parameters.equals(params)) {]