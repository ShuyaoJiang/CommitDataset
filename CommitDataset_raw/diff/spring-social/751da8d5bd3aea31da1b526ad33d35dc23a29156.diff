[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +			restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, +			restTemplate.setRequestFactory(requestFactory);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +			restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, +			restTemplate.setRequestFactory(requestFactory);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiTemplate.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +	 * Constructs the API template without user authorization. This is useful for accessing operations on a provider's API that do not require user authorization., +	protected AbstractOAuth2ApiTemplate() {, +		accessToken = null;, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 */, +	protected AbstractOAuth2ApiTemplate(String accessToken) {, +		this.accessToken = accessToken;, +		restTemplate = ProtectedResourceClientFactory.create(accessToken, getOAuth2Version());, +	}, +	, +	/**, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring proxy server details., +		if (isAuthorizedForUser()) {, +			restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, accessToken, getOAuth2Version()));, +		} else {, +			restTemplate.setRequestFactory(requestFactory);, +		}, +	public boolean isAuthorizedForUser() {, +		return accessToken != null;, +	}, +	protected OAuth2Version getOAuth2Version() {, +		return OAuth2Version.STANDARD;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +			restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, +			restTemplate.setRequestFactory(requestFactory);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiTemplate.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +	 * Constructs the API template without user authorization. This is useful for accessing operations on a provider's API that do not require user authorization., +	protected AbstractOAuth2ApiTemplate() {, +		accessToken = null;, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 */, +	protected AbstractOAuth2ApiTemplate(String accessToken) {, +		this.accessToken = accessToken;, +		restTemplate = ProtectedResourceClientFactory.create(accessToken, getOAuth2Version());, +	}, +	, +	/**, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring proxy server details., +		if (isAuthorizedForUser()) {, +			restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, accessToken, getOAuth2Version()));, +		} else {, +			restTemplate.setRequestFactory(requestFactory);, +		}, +	public boolean isAuthorizedForUser() {, +		return accessToken != null;, +	}, +	protected OAuth2Version getOAuth2Version() {, +		return OAuth2Version.STANDARD;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +			restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, credentials));, +			restTemplate.setRequestFactory(requestFactory);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiTemplate.java, +import org.springframework.social.support.ClientHttpRequestFactorySelector;, +	 * Constructs the API template without user authorization. This is useful for accessing operations on a provider's API that do not require user authorization., +	protected AbstractOAuth2ApiTemplate() {, +		accessToken = null;, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 */, +	protected AbstractOAuth2ApiTemplate(String accessToken) {, +		this.accessToken = accessToken;, +		restTemplate = ProtectedResourceClientFactory.create(accessToken, getOAuth2Version());, +	}, +	, +	/**, +	 * Set the ClientHttpRequestFactory. This is useful when custom configuration of the request factory is required, such as configuring proxy server details., +		if (isAuthorizedForUser()) {, +			restTemplate.setRequestFactory(ProtectedResourceClientFactory.addOAuthSigning(requestFactory, accessToken, getOAuth2Version()));, +		} else {, +			restTemplate.setRequestFactory(requestFactory);, +		}, +	public boolean isAuthorizedForUser() {, +		return accessToken != null;, +	}, +	protected OAuth2Version getOAuth2Version() {, +		return OAuth2Version.STANDARD;, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ApiTemplate.java, +		restTemplate = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());]