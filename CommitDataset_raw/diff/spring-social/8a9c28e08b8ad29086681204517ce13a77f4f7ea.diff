[+++ b/build.gradle, +      compile project (':spring-social-security'), optional, +//      compile ("org.springframework.social:spring-social-security:$version", optional), +++ b/build.gradle, +      compile project (':spring-social-security'), optional, +//      compile ("org.springframework.social:spring-social-security:$version", optional), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.springframework.util.ClassUtils;, +			Class<? extends ApiHelper<?>> apiHelperClass) {, +	}, +	, +	public void setAuthenticationServiceClass(String authenticationServiceClassName) throws ClassNotFoundException {, +		if (isSocialSecurityAvailable()) {, +			this.authenticationServiceClass = ClassUtils.forName(authenticationServiceClassName, ProviderConfigRegistrarSupport.class.getClassLoader());, +			Assert.isAssignable(SocialAuthenticationService.class, authenticationServiceClass);, +		if (isSocialSecurityAvailable() && authenticationServiceClass != null) {, +		Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>> socialAuthenticationServiceClass = (Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>>) this.authenticationServiceClass;, +		return BeanDefinitionBuilder.genericBeanDefinition(authenticationServiceClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	private Class<?> authenticationServiceClass;, +++ b/build.gradle, +      compile project (':spring-social-security'), optional, +//      compile ("org.springframework.social:spring-social-security:$version", optional), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.springframework.util.ClassUtils;, +			Class<? extends ApiHelper<?>> apiHelperClass) {, +	}, +	, +	public void setAuthenticationServiceClass(String authenticationServiceClassName) throws ClassNotFoundException {, +		if (isSocialSecurityAvailable()) {, +			this.authenticationServiceClass = ClassUtils.forName(authenticationServiceClassName, ProviderConfigRegistrarSupport.class.getClassLoader());, +			Assert.isAssignable(SocialAuthenticationService.class, authenticationServiceClass);, +		if (isSocialSecurityAvailable() && authenticationServiceClass != null) {, +		Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>> socialAuthenticationServiceClass = (Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>>) this.authenticationServiceClass;, +		return BeanDefinitionBuilder.genericBeanDefinition(authenticationServiceClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	private Class<?> authenticationServiceClass;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigSupport.java, +		Class<?> connectionFactoryRegistryClass = isSocialSecurityAvailable() ? org.springframework.social.security.SocialAuthenticationServiceRegistry.class : ConnectionFactoryRegistry.class;		, +	public static BeanDefinition registerAuthenticationServiceBean(BeanDefinition authenticationServiceLocatorBD, BeanDefinition authenticationServiceBD, Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>> socialAuthenticationServiceClass) {, +++ b/build.gradle, +      compile project (':spring-social-security'), optional, +//      compile ("org.springframework.social:spring-social-security:$version", optional), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.springframework.util.ClassUtils;, +			Class<? extends ApiHelper<?>> apiHelperClass) {, +	}, +	, +	public void setAuthenticationServiceClass(String authenticationServiceClassName) throws ClassNotFoundException {, +		if (isSocialSecurityAvailable()) {, +			this.authenticationServiceClass = ClassUtils.forName(authenticationServiceClassName, ProviderConfigRegistrarSupport.class.getClassLoader());, +			Assert.isAssignable(SocialAuthenticationService.class, authenticationServiceClass);, +		if (isSocialSecurityAvailable() && authenticationServiceClass != null) {, +		Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>> socialAuthenticationServiceClass = (Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>>) this.authenticationServiceClass;, +		return BeanDefinitionBuilder.genericBeanDefinition(authenticationServiceClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +	private Class<?> authenticationServiceClass;, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/ProviderConfigSupport.java, +		Class<?> connectionFactoryRegistryClass = isSocialSecurityAvailable() ? org.springframework.social.security.SocialAuthenticationServiceRegistry.class : ConnectionFactoryRegistry.class;		, +	public static BeanDefinition registerAuthenticationServiceBean(BeanDefinition authenticationServiceLocatorBD, BeanDefinition authenticationServiceBD, Class<? extends org.springframework.social.security.provider.SocialAuthenticationService<?>> socialAuthenticationServiceClass) {, +++ b/spring-social-config/src/test/java/org/springframework/social/config/annotation/FakeProviderConfigRegistrar.java, +		super(EnableFake.class, FakeConnectionFactory.class, FakeApiHelper.class);, +		try {, +			setAuthenticationServiceClass(FakeSocialAuthenticationService.class.getName());, +		} catch (ClassNotFoundException shouldNotHappen) {, +		}]