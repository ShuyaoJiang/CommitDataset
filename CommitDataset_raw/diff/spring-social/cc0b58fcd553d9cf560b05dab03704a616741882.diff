[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;, + * @author Yuan Ji, +public class SocialAuthenticationFilter extends AbstractAuthenticationProcessingFilter {, +        super("/auth");, +        setAuthenticationManager(authManager);, +    /**, +     * Indicates whether this filter should attempt to process a social network login request for the current invocation., +     * <p>Check if request URL matches filterProcessesUrl with valid providerId. , +     * The URL must be like {filterProcessesUrl}/{providerId}. , +     *, +     * @return <code>true</code> if the filter should attempt authentication, <code>false</code> otherwise., +     */, +    protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {, +        String providerId = getRequestedProviderId(request);, +        if (providerId != null){, +            Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +            return authProviders.contains(providerId);, +        return false;, +    /* (non-Javadoc), +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#attemptAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse), +    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {, +		if (!authProviders.isEmpty() && authProviderId != null && authProviders.contains(authProviderId)) {, +    /**, +     * Override to handle redirect exception., +     * , +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#unsuccessfulAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.security.core.AuthenticationException), +     */, +    @Override, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,, +            AuthenticationException failed) throws IOException, ServletException {, +        if (failed instanceof SocialAuthenticationRedirectException){, +            response.sendRedirect(((SocialAuthenticationRedirectException)failed).getRedirectUrl()); , +            return;, +        }, +        super.unsuccessfulAuthentication(request, response, failed);, +    }, +, +    // private helpers, +    , +    /*, +     * Call SocialAuthenticationService.getAuthToken() to get SocialAuthenticationToken:, +     *     If first phase, throw AuthenticationRedirectException to redirect to provider website., +     *     If second phase, get token/code from request parameter and call provider API to get accessToken/accessGrant., +     * Check Authentication object in spring security context, if null or not authenticated,  call doAuthentication(), +     * Otherwise, it is already authenticated, add this connection., +     */, +			token.setDetails(authenticationDetailsSource.buildDetails(request));, +			Authentication success = getAuthenticationManager().authenticate(token);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;, + * @author Yuan Ji, +public class SocialAuthenticationFilter extends AbstractAuthenticationProcessingFilter {, +        super("/auth");, +        setAuthenticationManager(authManager);, +    /**, +     * Indicates whether this filter should attempt to process a social network login request for the current invocation., +     * <p>Check if request URL matches filterProcessesUrl with valid providerId. , +     * The URL must be like {filterProcessesUrl}/{providerId}. , +     *, +     * @return <code>true</code> if the filter should attempt authentication, <code>false</code> otherwise., +     */, +    protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {, +        String providerId = getRequestedProviderId(request);, +        if (providerId != null){, +            Set<String> authProviders = authServiceLocator.registeredAuthenticationProviderIds();, +            return authProviders.contains(providerId);, +        return false;, +    /* (non-Javadoc), +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#attemptAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse), +    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {, +		if (!authProviders.isEmpty() && authProviderId != null && authProviders.contains(authProviderId)) {, +    /**, +     * Override to handle redirect exception., +     * , +     * @see org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#unsuccessfulAuthentication(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.security.core.AuthenticationException), +     */, +    @Override, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,, +            AuthenticationException failed) throws IOException, ServletException {, +        if (failed instanceof SocialAuthenticationRedirectException){, +            response.sendRedirect(((SocialAuthenticationRedirectException)failed).getRedirectUrl()); , +            return;, +        }, +        super.unsuccessfulAuthentication(request, response, failed);, +    }, +, +    // private helpers, +    , +    /*, +     * Call SocialAuthenticationService.getAuthToken() to get SocialAuthenticationToken:, +     *     If first phase, throw AuthenticationRedirectException to redirect to provider website., +     *     If second phase, get token/code from request parameter and call provider API to get accessToken/accessGrant., +     * Check Authentication object in spring security context, if null or not authenticated,  call doAuthentication(), +     * Otherwise, it is already authenticated, add this connection., +     */, +			token.setDetails(authenticationDetailsSource.buildDetails(request));, +			Authentication success = getAuthenticationManager().authenticate(token);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +import java.util.List;]