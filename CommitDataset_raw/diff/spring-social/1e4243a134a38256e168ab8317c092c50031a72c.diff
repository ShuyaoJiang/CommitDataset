[+++ b/docs/src/reference/docbook/implementing.xml, +					<para>Develop or integrate a Java binding to the provider's API e.g. <code>TwitterApi</code>.</para>, +					<para>Create a ServiceProvider model that allows users to authorize with the remote provider and obtain authorized  API instances e.g. <code>TwitterServiceProvider</code>.</para>, +					<para>Create an ApiAdapter that maps the provider's native API onto the uniform Connection model e.g. <code>TwitterApiAdapter</code>.</para>, +					<para>Finally, create a ConnectionFactory that wraps the other artifacts up and provides a simple interface for establishing connections e.g. <code>TwitterConnectionFactory</code>.</para>, +				You can always construct such an API instance directly, and you'll see in the following sections how to expose an instance as part of a Connection., +		<title>Creating a ServiceProvider model</title>, +			Spring Social provides the ServiceProvider&lt;A&gt; abstraction to handle this "authorization dance"., +			The abstraction also acts as a factory for native API (A) instances., +			After you've done this, your implementation can be used to conduct the OAuth2 dance and obtain an authorized API instance., +			This is typically done in the context of a ConnectionFactory as part of establishing a new connection to the provider., +				Parameterize &lt;A&gt; to be the Java binding to the ServiceProvider's's API., +				Finally, implement getApi(String) to return a new API instance., +    public FacebookApi geteApi(String accessToken) {, +				In getApi(String), you should construct your API implementation, passing it the access token needed to make authorized requests for protected resources., +				Parameterize &lt;A&gt; to be the Java binding to the ServiceProvider's API., +				Finally, implement getApi(String, String) to return a new API instance., +    public TwitterApi getApi(String accessToken, String secret) {, +				In getApi(String, String), you should construct your API implementation, passing it the four tokens needed to make authorized requests for protected resources., +		<title>Creating an ApiAdapter</title>, +			As discussed in the previous chapter, one of the roles of a Connection is to provide a common abstraction for a linked user account that is applied across all service providers., +			The role of the ApiAdapter is to map a provider's native API interface onto this uniform Connection model., +public interface ApiAdapter<A> {, +    boolean test(A api);, +    void setConnectionValues(A api, ConnectionValues values);, +    UserProfile fetchUserProfile(A api);, +    void updateStatus(A api, String message);, +				Consider <code>org.springframework.social.twitter.connect.TwitterApiAdapter</code> as an example implementation:, +public class TwitterApiAdapter implements ApiAdapter<TwitterApi> {, +    public boolean test(TwitterApi api) {, +            api.userOperations().getUserProfile();, +    public void setConnectionValues(TwitterApi api, ConnectionValues values) {, +        TwitterProfile profile = api.userOperations().getUserProfile();, +    public UserProfile fetchUserProfile(TwitterApi api) {, +        TwitterProfile profile = api.userOperations().getUserProfile();, +        return new UserProfileBuilder().setName(profile.getName()).setUsername(profile.getScreenName()).build();, +    public void updateStatus(TwitterApi api, String message) {, +        api.timelineOperations().updateStatus(message);	, +			fetchUserProfile(...) maps a TwitterProfile onto the normalized UserProfile model., +			Consult the JavaDoc for ApiAdapter and Connection for more information and implementation guidance., +			We also recommend reviewing the other ApiAdapter implementations for additional examples., +		<title>Creating a ConnectionFactory</title>, +			By now, you should have a API binding to the provider's API, a ServiceProvider&lt;A&gt; implementation for conducting the "authorization dance", and an ApiAdapter&lt;S&gt; implementation for mapping onto the uniform Connection model., +			The last step in adding support for a new service provider is to create a ConnectionFactory that wraps up these artifacts and provides a simple interface for establishing Connections., +			Like a ServiceProvider&lt;A&gt;, a ConnectionFactory specialization exists for each authorization protocol., +			For example, if you are adding support for a OAuth2-based provider, you would extend from OAuth2ConnectionFactory., +				Create a subclass of OAuth2ConnectionFactory&lt;S&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the clientId/clientSecret, and a new {Provider}ApiAdapter instance. 			, +				See <code>org.springframework.social.facebook.connect.FacebookConnectionFactory</code> as an example OAuth2ConnectionFactory:, +public class FacebookConnectionFactory extends OAuth2ConnectionFactory<FacebookApi> {, +    public FacebookConnectionFactory(String clientId, String clientSecret) {, +        super("facebook", new FacebookServiceProvider(clientId, clientSecret), new FacebookApiAdapter());, +				Create a subclass of OAuth1ConnectionFactory&lt;S&gt; named {ProviderId}ConnectionFactory and parameterize A to be the Java binding to the service provider's API., +				Within the constructor call super, passing up the assigned providerId, a new {ProviderId}ServiceProvider instance configured with the consumerKey/consumerSecret, and a new {Provider}ApiAdapter instance. 			, +				See <code>org.springframework.social.twitter.connect.TwitterConnectionFactory</code> as an example OAuth1ConnectionFactory:, +public class TwitterConnectionFactory extends OAuth1ConnectionFactory<FacebookApi> {, +    public TwitterConnectionFactory(String consumerKey, String consumerSecret) {, +        super("twitter", new TwitterServiceProvider(consumerKey, consumerSecret), new TwitterApiAdapter());, +				Consult the source and JavaDoc API for ConnectionFactory and its subclasses more information, examples, and advanced customization options.]