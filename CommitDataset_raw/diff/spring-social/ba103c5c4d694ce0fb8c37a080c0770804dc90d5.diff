[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	ServiceProviderConnectionRecord createConnectionRecord();, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	ServiceProviderConnectionRecord createConnectionRecord();, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnectionFactory;, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? order by providerId, rank", connectionMapper, getLocalUserId());, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? order by rank", connectionMapper, getLocalUserId(), providerId);, +	@SuppressWarnings("unchecked"), +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank isnull or rank = 1", connectionMapper,, +				getLocalUserId(), getProviderId(serviceApiType));, +	@SuppressWarnings("unchecked"), +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ?", connectionMapper,, +				getLocalUserId(), getProviderId(serviceApiType), providerUserId);, +		ServiceProviderConnectionRecord connectionRecord = connection.createConnectionRecord();, +		Serializable localUserId = getLocalUserId();, +		jdbcTemplate.update("insert into ServiceProviderConnection (localUserId, providerId, providerUserId, rank, profileName, profileUrl, profilePictureUrl, allowSignIn, accessToken, secret, refreshToken, expireTime) values (?, ?, ?, (select ifnull(max(rank) + 1, 1) from ServiceProviderConnection where localUserId = ? and providerId = ?), ?, ?, ?, ?, ?, ?, ?)",, +				localUserId, connectionRecord.getProviderId(), connectionRecord.getProviderUserId(), localUserId, connectionRecord.getProviderId(),, +				connectionRecord.getProfileName(), connectionRecord.getProfileUrl(), connectionRecord.getProfilePictureUrl(), connectionRecord.isAllowSignIn(),, +				connectionRecord.getAccessToken(), connectionRecord.getSecret(), connectionRecord.getRefreshToken(), connectionRecord.getExpireTime());, +		return connection;, +		jdbcTemplate.update("delete from ServiceProviderConnection where localUserId = ? and providerId = ?", getLocalUserId(), providerId);, +		jdbcTemplate.update("delete from ServiceProviderConnection where localUserId = ? and providerId = ? and providerUserId = ?", getLocalUserId(), connectionKey.getProviderId(), connectionKey.getProviderUserId());		, +			ServiceProviderConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(connectionRecord.getProviderId());, +			return connectionFactory.createConnection(connectionRecord);, +	private <S> String getProviderId(Class<S> serviceApiType) {, +		return connectionFactoryLocator.getConnectionFactory(serviceApiType).getProviderId();, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	ServiceProviderConnectionRecord createConnectionRecord();, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnectionFactory;, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? order by providerId, rank", connectionMapper, getLocalUserId());, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? order by rank", connectionMapper, getLocalUserId(), providerId);, +	@SuppressWarnings("unchecked"), +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank isnull or rank = 1", connectionMapper,, +				getLocalUserId(), getProviderId(serviceApiType));, +	@SuppressWarnings("unchecked"), +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ?", connectionMapper,, +				getLocalUserId(), getProviderId(serviceApiType), providerUserId);, +		ServiceProviderConnectionRecord connectionRecord = connection.createConnectionRecord();, +		Serializable localUserId = getLocalUserId();, +		jdbcTemplate.update("insert into ServiceProviderConnection (localUserId, providerId, providerUserId, rank, profileName, profileUrl, profilePictureUrl, allowSignIn, accessToken, secret, refreshToken, expireTime) values (?, ?, ?, (select ifnull(max(rank) + 1, 1) from ServiceProviderConnection where localUserId = ? and providerId = ?), ?, ?, ?, ?, ?, ?, ?)",, +				localUserId, connectionRecord.getProviderId(), connectionRecord.getProviderUserId(), localUserId, connectionRecord.getProviderId(),, +				connectionRecord.getProfileName(), connectionRecord.getProfileUrl(), connectionRecord.getProfilePictureUrl(), connectionRecord.isAllowSignIn(),, +				connectionRecord.getAccessToken(), connectionRecord.getSecret(), connectionRecord.getRefreshToken(), connectionRecord.getExpireTime());, +		return connection;, +		jdbcTemplate.update("delete from ServiceProviderConnection where localUserId = ? and providerId = ?", getLocalUserId(), providerId);, +		jdbcTemplate.update("delete from ServiceProviderConnection where localUserId = ? and providerId = ? and providerUserId = ?", getLocalUserId(), connectionKey.getProviderId(), connectionKey.getProviderUserId());		, +			ServiceProviderConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(connectionRecord.getProviderId());, +			return connectionFactory.createConnection(connectionRecord);, +	private <S> String getProviderId(Class<S> serviceApiType) {, +		return connectionFactoryLocator.getConnectionFactory(serviceApiType).getProviderId();, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +					rank int not null,, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, +	ServiceProviderConnectionRecord createConnectionRecord();, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnectionFactory;, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? order by providerId, rank", connectionMapper, getLocalUserId());, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? order by rank", connectionMapper, getLocalUserId(), providerId);, +	@SuppressWarnings("unchecked"), +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank isnull or rank = 1", connectionMapper,, +				getLocalUserId(), getProviderId(serviceApiType));, +	@SuppressWarnings("unchecked"), +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ?", connectionMapper,, +				getLocalUserId(), getProviderId(serviceApiType), providerUserId);, +		ServiceProviderConnectionRecord connectionRecord = connection.createConnectionRecord();, +		Serializable localUserId = getLocalUserId();, +		jdbcTemplate.update("insert into ServiceProviderConnection (localUserId, providerId, providerUserId, rank, profileName, profileUrl, profilePictureUrl, allowSignIn, accessToken, secret, refreshToken, expireTime) values (?, ?, ?, (select ifnull(max(rank) + 1, 1) from ServiceProviderConnection where localUserId = ? and providerId = ?), ?, ?, ?, ?, ?, ?, ?)",, +				localUserId, connectionRecord.getProviderId(), connectionRecord.getProviderUserId(), localUserId, connectionRecord.getProviderId(),, +				connectionRecord.getProfileName(), connectionRecord.getProfileUrl(), connectionRecord.getProfilePictureUrl(), connectionRecord.isAllowSignIn(),, +				connectionRecord.getAccessToken(), connectionRecord.getSecret(), connectionRecord.getRefreshToken(), connectionRecord.getExpireTime());, +		return connection;, +		jdbcTemplate.update("delete from ServiceProviderConnection where localUserId = ? and providerId = ?", getLocalUserId(), providerId);, +		jdbcTemplate.update("delete from ServiceProviderConnection where localUserId = ? and providerId = ? and providerUserId = ?", getLocalUserId(), connectionKey.getProviderId(), connectionKey.getProviderUserId());		, +			ServiceProviderConnectionFactory<?> connectionFactory = connectionFactoryLocator.getConnectionFactory(connectionRecord.getProviderId());, +			return connectionFactory.createConnection(connectionRecord);, +	private <S> String getProviderId(Class<S> serviceApiType) {, +		return connectionFactoryLocator.getConnectionFactory(serviceApiType).getProviderId();, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +					rank int not null,, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractServiceProviderConnection.java, +import org.springframework.social.connect.ServiceProviderConnectionRecord;, +	public ServiceProviderConnectionRecord createConnectionRecord() {, +		return null;, +	}, +	]