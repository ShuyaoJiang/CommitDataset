[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +	, +	private static boolean listBasedInterceptors = false;, +	, +	private static Method setInterceptorsMethod;, +	, +	static {, +		if (interceptorsSupported) {, +			try {, +				setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, +				listBasedInterceptors = true;, +			} catch (NoSuchMethodException e) {, +				try {, +					setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, +				} catch (NoSuchMethodException shouldntHappen) {}, +			}, +		}, +	}, +, +			OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +			try {, +				if (listBasedInterceptors) {, +					List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +					interceptors.add(interceptor);, +					setInterceptorsMethod.invoke(client, interceptors);			, +				} else {, +					setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +				}, +			} catch (Exception shouldntHappen) {}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +	private static boolean interceptorsSupported = ClassUtils.isPresent("org.springframework.http.client.ClientHttpRequestInterceptor", ProtectedResourceClientFactory.class.getClassLoader());, +	, +	private static boolean listBasedInterceptors = false;, +	, +	private static Method setInterceptorsMethod;, +	, +	static {, +		if (interceptorsSupported) {, +			try {, +				setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", List.class);, +				listBasedInterceptors = true;, +			} catch (NoSuchMethodException e) {, +				try {, +					setInterceptorsMethod = RestTemplate.class.getMethod("setInterceptors", new ClientHttpRequestInterceptor[0].getClass());, +				} catch (NoSuchMethodException shouldntHappen) {}, +			}, +		}, +	}, +, +			OAuth1RequestInterceptor interceptor = new OAuth1RequestInterceptor(credentials);, +			try {, +				if (listBasedInterceptors) {, +					List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +					interceptors.add(interceptor);, +					setInterceptorsMethod.invoke(client, interceptors);			, +				} else {, +					setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +				}, +			} catch (Exception shouldntHappen) {}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/ProtectedResourceClientFactory.java, +	public static RestTemplate create(String accessToken, OAuth2Version version) {, +		RestTemplate client = new RestTemplate(ClientHttpRequestFactorySelector.getRequestFactory());, +		if (interceptorsSupported) {, +			// favored, +			OAuth2RequestInterceptor interceptor = new OAuth2RequestInterceptor(accessToken, version);, +			try {, +				if (listBasedInterceptors) {, +					List<ClientHttpRequestInterceptor> interceptors = new LinkedList<ClientHttpRequestInterceptor>();, +					interceptors.add(interceptor);, +					setInterceptorsMethod.invoke(client, interceptors);			, +				} else {, +					setInterceptorsMethod.invoke(client, new Object[] {new ClientHttpRequestInterceptor[] { interceptor }});, +				}, +			} catch (Exception shouldntHappen) {}, +		} else {, +			// 3.0.x compatibility, +			client.setRequestFactory(new Spring30OAuth2RequestFactory(client.getRequestFactory(), accessToken, version));, +		}, +		return client;				, +	}, +, +	public static ClientHttpRequestFactory addOAuthSigning(ClientHttpRequestFactory requestFactory, String accessToken, OAuth2Version version) {, +		if (interceptorsSupported) {, +			return requestFactory;, +		}, +		return new Spring30OAuth2RequestFactory(requestFactory, accessToken, version);, +	}, +]