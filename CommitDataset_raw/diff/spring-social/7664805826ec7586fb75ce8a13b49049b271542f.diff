[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	ServiceProviderConnection<?> createConnection(ServiceProviderConnectionMemento connectionMemento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	ServiceProviderConnection<?> createConnection(ServiceProviderConnectionMemento connectionMemento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	ServiceProviderConnection<?> saveConnection(Serializable accountId, ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	ServiceProviderConnection<?> createConnection(ServiceProviderConnectionMemento connectionMemento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	ServiceProviderConnection<?> saveConnection(Serializable accountId, ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<?>> P getServiceProvider(String providerId, Class<P> providerClass);, +	<P extends ServiceProvider<?>> P getServiceProvider(Class<P> providerClass);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	ServiceProviderConnection<?> createConnection(ServiceProviderConnectionMemento connectionMemento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	ServiceProviderConnection<?> saveConnection(Serializable accountId, ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<?>> P getServiceProvider(String providerId, Class<P> providerClass);, +	<P extends ServiceProvider<?>> P getServiceProvider(Class<P> providerClass);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/JdbcServiceProviderConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import java.util.ArrayList;, +import java.util.HashMap;, +		List<ServiceProviderConnection<?>> connections = jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where accountId = ? by providerId, id", connectionMapper, accountId);, +		Map<String, List<ServiceProviderConnection<?>>> providerConnectionMap = new HashMap<String, List<ServiceProviderConnection<?>>>();, +		for (ServiceProviderConnection<?> connection : connections) {, +			List<ServiceProviderConnection<?>> providerConnections = providerConnectionMap.get(connection.getProviderId());, +			if (providerConnections == null) {, +				providerConnections = new ArrayList<ServiceProviderConnection<?>>();, +				providerConnectionMap.put(connection.getProviderId(), providerConnections);, +			}, +			providerConnections.add(connection);, +		}, +		return providerConnectionMap;, +		return jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where id = ?", connectionMapper, connectionId);, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where providerId = ? and providerAccountId = ?", connectionMapper, providerId, providerAccountId);, +	public ServiceProviderConnection<?> saveConnection(Serializable accountId, ServiceProviderConnection<?> connection) {, +		// TODO, +			return new ServiceProviderConnectionMemento(rs.getLong("id"), (Serializable) rs.getObject("accountId"), rs.getString("providerId"), rs.getString("providerAccountId"),, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	ServiceProviderConnection<?> createConnection(ServiceProviderConnectionMemento connectionMemento);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +	ServiceProviderConnection<?> saveConnection(Serializable accountId, ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderRegistry.java, +	<P extends ServiceProvider<?>> P getServiceProvider(String providerId, Class<P> providerClass);, +	<P extends ServiceProvider<?>> P getServiceProvider(Class<P> providerClass);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/JdbcServiceProviderConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import java.util.ArrayList;, +import java.util.HashMap;, +		List<ServiceProviderConnection<?>> connections = jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where accountId = ? by providerId, id", connectionMapper, accountId);, +		Map<String, List<ServiceProviderConnection<?>>> providerConnectionMap = new HashMap<String, List<ServiceProviderConnection<?>>>();, +		for (ServiceProviderConnection<?> connection : connections) {, +			List<ServiceProviderConnection<?>> providerConnections = providerConnectionMap.get(connection.getProviderId());, +			if (providerConnections == null) {, +				providerConnections = new ArrayList<ServiceProviderConnection<?>>();, +				providerConnectionMap.put(connection.getProviderId(), providerConnections);, +			}, +			providerConnections.add(connection);, +		}, +		return providerConnectionMap;, +		return jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where id = ?", connectionMapper, connectionId);, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where providerId = ? and providerAccountId = ?", connectionMapper, providerId, providerAccountId);, +	public ServiceProviderConnection<?> saveConnection(Serializable accountId, ServiceProviderConnection<?> connection) {, +		// TODO, +			return new ServiceProviderConnectionMemento(rs.getLong("id"), (Serializable) rs.getObject("accountId"), rs.getString("providerId"), rs.getString("providerAccountId"),, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderRegistry.java, +	public <P extends ServiceProvider<?>> P getServiceProvider(String providerId, Class<P> providerType) {, +	public <P extends ServiceProvider<?>> P getServiceProvider(Class<P> providerClass) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionFactory.java, +	ServiceProviderConnection<?> createConnection(ServiceProviderConnectionMemento connectionMemento);]