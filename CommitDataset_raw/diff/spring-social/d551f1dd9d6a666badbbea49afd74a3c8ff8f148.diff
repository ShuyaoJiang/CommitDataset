[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setSignupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +	}, +, +	public void setConnectionAddedRedirectUrl(String connectionAddedRedirectUrl) {, +		this.connectionAddedRedirectUrl = connectionAddedRedirectUrl;, +	}, +, +	public void setUpdateConnections(boolean updateConnections) {, +		this.updateConnections = updateConnections;, +	}, +, +	public void setPostLoginUrl(String postLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setDefaultTargetUrl(postLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set postLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +, +	public void setPostFailureUrl(String postFailureUrl) {, +		AuthenticationFailureHandler failureHandler = getFailureHandler();, +		if (failureHandler instanceof SimpleUrlAuthenticationFailureHandler) {, +			SimpleUrlAuthenticationFailureHandler h = (SimpleUrlAuthenticationFailureHandler) failureHandler;, +			h.setDefaultFailureUrl(postFailureUrl);, +		} else {, +			throw new IllegalStateException("can't set postFailureUrl on unknown failureHandler, type is " + failureHandler.getClass().getName());, +		}, +	}, +	, +	public UserIdExtractor getUserIdExtractor() {, +		return userIdExtractor;, +	}, +, +	public UsersConnectionRepository getUsersConnectionRepository() {, +		return usersConnectionRepository;, +	}, +, +	public SocialAuthenticationServiceLocator getAuthServiceLocator() {, +		return authServiceLocator;, +	}, +	, +		Set<String> connectedUserIds = usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +				redirectUrl = connectionAddedRedirectUrl;, +			if (signupUrl != null) {, +				throw new SocialAuthenticationRedirectException(signupUrl);, +		if (updateConnections) {, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +	public void setSignupUrl(String signupUrl) {, +		this.signupUrl = signupUrl;, +	}, +, +	public void setConnectionAddedRedirectUrl(String connectionAddedRedirectUrl) {, +		this.connectionAddedRedirectUrl = connectionAddedRedirectUrl;, +	}, +, +	public void setUpdateConnections(boolean updateConnections) {, +		this.updateConnections = updateConnections;, +	}, +, +	public void setPostLoginUrl(String postLoginUrl) {, +		AuthenticationSuccessHandler successHandler = getSuccessHandler();, +		if (successHandler instanceof AbstractAuthenticationTargetUrlRequestHandler) {, +			AbstractAuthenticationTargetUrlRequestHandler h = (AbstractAuthenticationTargetUrlRequestHandler) successHandler;, +			h.setDefaultTargetUrl(postLoginUrl);, +		} else {, +			throw new IllegalStateException("can't set postLoginUrl on unknown successHandler, type is " + successHandler.getClass().getName());, +		}, +	}, +, +	public void setPostFailureUrl(String postFailureUrl) {, +		AuthenticationFailureHandler failureHandler = getFailureHandler();, +		if (failureHandler instanceof SimpleUrlAuthenticationFailureHandler) {, +			SimpleUrlAuthenticationFailureHandler h = (SimpleUrlAuthenticationFailureHandler) failureHandler;, +			h.setDefaultFailureUrl(postFailureUrl);, +		} else {, +			throw new IllegalStateException("can't set postFailureUrl on unknown failureHandler, type is " + failureHandler.getClass().getName());, +		}, +	}, +	, +	public UserIdExtractor getUserIdExtractor() {, +		return userIdExtractor;, +	}, +, +	public UsersConnectionRepository getUsersConnectionRepository() {, +		return usersConnectionRepository;, +	}, +, +	public SocialAuthenticationServiceLocator getAuthServiceLocator() {, +		return authServiceLocator;, +	}, +	, +		Set<String> connectedUserIds = usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), userIdSet);, +				redirectUrl = connectionAddedRedirectUrl;, +			if (signupUrl != null) {, +				throw new SocialAuthenticationRedirectException(signupUrl);, +		if (updateConnections) {]