[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUser.java, +	public ServiceProviderUser(String id, String profileName, String profileUrl, String profilePictureUrl) {, +		this.profileUrl = profileUrl;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +		MapSqlParameterSource source = new MapSqlParameterSource();, +		source.addValue("localUserId", getLocalUserId());, +			String providerId = entry.getKey();, +			providerUsersCriteriaSql.append("providerId = :providerId_").append(providerId).append(" and providerUserId in (:providerUserIds_").append(providerId).append(")");, +			source.addValue("providerId_" + providerId, providerId);, +			source.addValue("providerUserIds_" + providerId, entry.getValue());, +		return new SimpleJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", connectionMapper, source);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepositorySchema.sql, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	public static Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));]