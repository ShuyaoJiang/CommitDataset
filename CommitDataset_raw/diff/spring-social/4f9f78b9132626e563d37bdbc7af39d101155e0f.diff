[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <S> ConnectionFactory<S> getConnectionFactory(Class<S> apiType) {, +		String providerId = apiTypeIndex.get(apiType);, +			throw new IllegalArgumentException("No connection factory for API [" + apiType.getName() + "] is registered");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <S> ConnectionFactory<S> getConnectionFactory(Class<S> apiType) {, +		String providerId = apiTypeIndex.get(apiType);, +			throw new IllegalArgumentException("No connection factory for API [" + apiType.getName() + "] is registered");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +		Class<?> apiType = GenericTypeResolver.resolveTypeArgument(serviceProvider.getClass(), ServiceProvider.class);, +		if (apiType.isInterface()) {, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class[] { apiType }, new ApiInvocationHandler());, +	private class ApiInvocationHandler implements InvocationHandler {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, + * Supports lookup by providerId and by apiType., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NullApiAdapter.java, +	public boolean test(Object api) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <S> Connection<S> findPrimaryConnectionToApi(Class<S> apiType) {, +			String providerId = getProviderId(apiType);, +	public <S> List<Connection<S>> findConnectionsToApi(Class<S> apiType) {, +		List<?> connections = findConnectionsToProvider(getProviderId(apiType));, +	public <S> Connection<S> findConnectionToApiForUser(Class<S> apiType, String providerUserId) {, +		String providerId = getProviderId(apiType);, +	private <S> String getProviderId(Class<S> apiType) {, +		return connectionFactoryLocator.getConnectionFactory(apiType).getProviderId();, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <S> ConnectionFactory<S> getConnectionFactory(Class<S> apiType) {, +		String providerId = apiTypeIndex.get(apiType);, +			throw new IllegalArgumentException("No connection factory for API [" + apiType.getName() + "] is registered");, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +		Class<?> apiType = GenericTypeResolver.resolveTypeArgument(serviceProvider.getClass(), ServiceProvider.class);, +		if (apiType.isInterface()) {, +			apiProxy = (A) Proxy.newProxyInstance(apiType.getClassLoader(), new Class[] { apiType }, new ApiInvocationHandler());, +	private class ApiInvocationHandler implements InvocationHandler {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +		public boolean test(TestFacebookApi api) {, +		public void setConnectionValues(TestFacebookApi api, ConnectionValues values) {, +		public UserProfile fetchUserProfile(TestFacebookApi api) {, +		public void updateStatus(TestFacebookApi api, String message) {, +		public boolean test(TestTwitterApi api) {, +		public void setConnectionValues(TestTwitterApi api, ConnectionValues values) {, +		public UserProfile fetchUserProfile(TestTwitterApi api) {, +		public void updateStatus(TestTwitterApi api, String message) {]