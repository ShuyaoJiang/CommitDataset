[+++ b/spring-social-webmvc/src/main/java/org/springframework/social/web/connect/ConnectController.java, +import org.springframework.security.oauth.client.oauth1.AuthorizedRequestToken;, +import org.springframework.security.oauth.client.oauth1.OAuthToken;, +import org.springframework.security.oauth.client.oauth2.AccessGrant;, +import org.springframework.social.provider.ServiceProviderConnection;, +import org.springframework.social.provider.oauth1.OAuth1ServiceProvider;, +import org.springframework.social.provider.oauth2.OAuth2ServiceProvider;, +			OAuth1ServiceProvider<?> oauth1Provider = (OAuth1ServiceProvider<?>) provider;, +			OAuthToken requestToken = oauth1Provider.getOAuth1Operations().fetchNewRequestToken(baseCallbackUrl + name);, +			return "redirect:" + oauth1Provider.getOAuth1Operations().buildAuthorizeUrl(requestToken.getValue());, +			OAuth2ServiceProvider<?> oauth2Provider = (OAuth2ServiceProvider<?>) provider;, +			return "redirect:" + oauth2Provider.getOAuth2Operations().buildAuthorizeUrl(baseCallbackUrl + name, scope);, +		OAuth1ServiceProvider<?> provider = (OAuth1ServiceProvider<?>) getServiceProvider(name);, +		OAuthToken accessToken = provider.getOAuth1Operations().exchangeForAccessToken(authorizedRequestToken);, +		// TODO : Come back to reimplement the registration flow, +//		if (request.getAttribute(REGISTRATION_FLOW_ATTRIBUTE, WebRequest.SCOPE_SESSION) != null) {, +//			return holdAccessGrantAndGoToRegistration(name, request, provider, accessToken);, +//		}, +		provider.connect(accountIdResolver.resolveAccountId(), accessToken);, +		OAuth2ServiceProvider<?> provider = (OAuth2ServiceProvider<?>) getServiceProvider(name);, +		AccessGrant accessGrant = provider.getOAuth2Operations().exchangeForAccess(code, redirectUri);, +		// TODO : Come back to reimplement the registration flow, +//		if (request.getAttribute(REGISTRATION_FLOW_ATTRIBUTE, WebRequest.SCOPE_SESSION) != null) {, +//			return holdAccessGrantAndGoToRegistration(name, request, provider, accessGrant);, +//		}, +		provider.connect(accountIdResolver.resolveAccountId(), accessGrant);, +	// TODO : Come back to reimplement the registration flow, +//	private String holdAccessGrantAndGoToRegistration(String name, WebRequest request, ServiceProvider<?> provider,, +//			AccessGrant accessGrant) {, +//		request.removeAttribute(REGISTRATION_FLOW_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +//		request.setAttribute(name + "UserProfile", provider.getProviderUserProfile(accessGrant),, +//				WebRequest.SCOPE_REQUEST);, +//		request.setAttribute(ACCESS_TOKEN_ATTRIBUTE + name, accessGrant, WebRequest.SCOPE_SESSION);, +//		return "connect/" + name + "Register";, +//	}, +		Object storedToken = request.getAttribute(ACCESS_TOKEN_ATTRIBUTE + name, WebRequest.SCOPE_SESSION);, +		if (storedToken != null) {, +			if (provider.getAuthorizationProtocol() == AuthorizationProtocol.OAUTH_1) {, +				OAuth1ServiceProvider<?> oauth1Provider = (OAuth1ServiceProvider<?>) provider;, +				OAuthToken accessToken = (OAuthToken) storedToken;, +				oauth1Provider.connect(accountIdResolver.resolveAccountId(), accessToken);, +			} else if (provider.getAuthorizationProtocol() == AuthorizationProtocol.OAUTH_2) {, +				OAuth2ServiceProvider<?> oauth2Provider = (OAuth2ServiceProvider<?>) provider;, +				AccessGrant accessGrant = (AccessGrant) storedToken;, +				oauth2Provider.connect(accountIdResolver.resolveAccountId(), accessGrant);, +			}, +		ServiceProvider<?> serviceProvider = getServiceProvider(name);, +		List<?> connections = serviceProvider.getConnections(accountIdResolver.resolveAccountId());, +		for (Object object : connections) {, +			((ServiceProviderConnection<?>) object).disconnect();, +		}]