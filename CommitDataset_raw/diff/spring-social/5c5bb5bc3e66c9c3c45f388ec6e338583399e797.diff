[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	UserApi userApi();, +	InterestsApi interestsApi();, +	FeedApi feedApi();, +	CommentApi commentApi();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	UserApi userApi();, +	InterestsApi interestsApi();, +	FeedApi feedApi();, +	CommentApi commentApi();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.social.facebook.support.InterestsApiImpl;, +	private InterestsApiImpl interestsApi;, +, +		interestsApi = new InterestsApiImpl(restTemplate);, +	public InterestsApi interestsApi() {, +		return interestsApi;, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	UserApi userApi();, +	InterestsApi interestsApi();, +	FeedApi feedApi();, +	CommentApi commentApi();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.social.facebook.support.InterestsApiImpl;, +	private InterestsApiImpl interestsApi;, +, +		interestsApi = new InterestsApiImpl(restTemplate);, +	public InterestsApi interestsApi() {, +		return interestsApi;, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedApi.java, +	List<FeedEntry> getHomeFeed();, +, +	List<FeedEntry> getHomeFeed(String userId);, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookApi.java, +	UserApi userApi();, +	InterestsApi interestsApi();, +	FeedApi feedApi();, +	CommentApi commentApi();, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.social.facebook.support.InterestsApiImpl;, +	private InterestsApiImpl interestsApi;, +, +		interestsApi = new InterestsApiImpl(restTemplate);, +	public InterestsApi interestsApi() {, +		return interestsApi;, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FeedApi.java, +	List<FeedEntry> getHomeFeed();, +, +	List<FeedEntry> getHomeFeed(String userId);, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/UserApi.java, +	 * Retrieves a list of checkins for the authenticated user., +	 * Requires "user_checkins" or "friends_checkins" permission., +	 * @return a list {@link Checkin}s for the user, or an empty list if not available., +	/**, +	 * Retrieves a list of checkins for the specified user., +	 * Requires "user_checkins" or "friends_checkins" permission., +	 * @param userId the user's ID, +	 * @return a list {@link Checkin}s for the user, or an empty list if not available., +	 */, +	// TODO: Consider moving events methods to an EventsApi, +	/**, +	 * Retrieves a list of events that the authenticated user has been invited to., +	 * Requires "user_events" or "friends_events" permission., +	 * @return a list {@link UserEvent}s for the user, or an empty list if not available., +	 */, +	/**, +	 * Retrieves a list of events that the specified user has been invited to., +	 * Requires "user_events" or "friends_events" permission., +	 * @param userId the user's ID, +	 * @return a list {@link UserEvent}s for the user, or an empty list if not available., +	 */, +	// TODO: Consider moving album methods to a PhotoApi or MediaApi or some such thing, +	/**, +	 * Retrieves a list of albums belonging to the authenticated user., +	 * Requires "user_photos" or "friends_photos" permission., +	 * @return a list {@link Album}s for the user, or an empty list if not available., +	 */, +	/**, +	 * Retrieves a list of albums belonging to the specified user., +	 * Requires "user_photos" or "friends_photos" permission., +	 * @param userId the user's ID, +	 * @return a list {@link Album}s for the user, or an empty list if not available., +	 */, +, +	// TODO: Consider moving friend methods to a FriendApi, +	/**, +	 * Retrieves a list of custom friend lists belonging to the authenticated user., +	 * Requires "read_friendlists" permission., +	 * @return a list {@link Reference}s, each representing a friends list for the user, or an empty list if not available., +	 */, +	List<Reference> getFriendLists();, +]