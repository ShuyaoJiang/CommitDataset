[+++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +			parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +			parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +	private static final String CREATE_CONNECTION_REPOSITORY = "createConnectionRepository";, +	private static final String USERS_CONNECTION_REPOSITORY_ID = "usersConnectionRepository";, +	private static final String CONNECTION_REPOSITORY_ID = "connectionRepository";, +	private static final String USER_ID_STRING_ID = "_userIdString";, +	, +	public BeanDefinition parse(Element element, ParserContext parserContext) {		, +		String connectionFactoryLocatorRef = element.getAttribute("connection-factory-locator-ref");, +		String dataSourceRef = element.getAttribute("data-source-ref");, +		String encryptorRef = element.getAttribute("encryptor-ref");, +		String userIdSourceRef = element.getAttribute("user-id-source-ref");, +		, +		BeanDefinition usersConnectionRepositoryBD = registerUsersConnectionRepositoryBeanDefinition(parserContext, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		registerUserIdBeanDefinition(parserContext, userIdSourceRef);, +		BeanDefinition connectionRepositoryDB = registerConnectionRepository(parserContext, usersConnectionRepositoryBD);, +, +		return connectionRepositoryDB;, +	}, +, +	private BeanDefinition registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(dataSourceRef), +				.addConstructorArgReference(connectionFactoryLocatorRef), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +		parserContext.registerBeanComponent(new BeanComponentDefinition(usersConnectionRepositoryBD, USERS_CONNECTION_REPOSITORY_ID));, +		return usersConnectionRepositoryBD;, +	}, +	, +	// TODO: Kinda hackish...pushes a request-scoped String containing the name retrieved from the UserIdSource into the context., +	private BeanDefinition registerUserIdBeanDefinition(ParserContext parserContext, String userIdSourceRef) {, +		BeanDefinition userIdStringDB = BeanDefinitionBuilder.genericBeanDefinition().getBeanDefinition();, +		userIdStringDB.setFactoryBeanName(userIdSourceRef);, +		userIdStringDB.setFactoryMethodName("getUserId");, +		userIdStringDB.setScope("request");, +		parserContext.registerBeanComponent(new BeanComponentDefinition(userIdStringDB, USER_ID_STRING_ID));, +		return userIdStringDB;, +	}, +	, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, BeanDefinition usersConnectionRepositoryBD) {, +		BeanDefinition connectionRepositoryDB = BeanDefinitionBuilder.genericBeanDefinition().addConstructorArgValue(USER_ID_STRING_ID).getBeanDefinition();, +		connectionRepositoryDB.setFactoryBeanName(USERS_CONNECTION_REPOSITORY_ID);, +		connectionRepositoryDB.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY);, +		connectionRepositoryDB.setScope("request");, +		// TODO: Set scoped proxy on this somehow, +		parserContext.registerBeanComponent(new BeanComponentDefinition(connectionRepositoryDB, CONNECTION_REPOSITORY_ID));, +		return connectionRepositoryDB;, +++ b/build.gradle, +      testCompile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +      testCompile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion", +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +			parserContext.registerBeanComponent(new BeanComponentDefinition(connFactoryLocatorBeanDef, CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;, +	private static final String CREATE_CONNECTION_REPOSITORY = "createConnectionRepository";, +	private static final String USERS_CONNECTION_REPOSITORY_ID = "usersConnectionRepository";, +	private static final String CONNECTION_REPOSITORY_ID = "connectionRepository";, +	private static final String USER_ID_STRING_ID = "_userIdString";, +	, +	public BeanDefinition parse(Element element, ParserContext parserContext) {		, +		String connectionFactoryLocatorRef = element.getAttribute("connection-factory-locator-ref");, +		String dataSourceRef = element.getAttribute("data-source-ref");, +		String encryptorRef = element.getAttribute("encryptor-ref");, +		String userIdSourceRef = element.getAttribute("user-id-source-ref");, +		, +		BeanDefinition usersConnectionRepositoryBD = registerUsersConnectionRepositoryBeanDefinition(parserContext, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		registerUserIdBeanDefinition(parserContext, userIdSourceRef);, +		BeanDefinition connectionRepositoryDB = registerConnectionRepository(parserContext, usersConnectionRepositoryBD);, +, +		return connectionRepositoryDB;, +	}, +, +	private BeanDefinition registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		BeanDefinition usersConnectionRepositoryBD = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(dataSourceRef), +				.addConstructorArgReference(connectionFactoryLocatorRef), +				.addConstructorArgReference(encryptorRef), +				.getBeanDefinition();, +		parserContext.registerBeanComponent(new BeanComponentDefinition(usersConnectionRepositoryBD, USERS_CONNECTION_REPOSITORY_ID));, +		return usersConnectionRepositoryBD;, +	}, +	]