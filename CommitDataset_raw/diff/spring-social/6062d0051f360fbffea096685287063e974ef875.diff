[+++ b/build.gradle, +        classpath('org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'), +        classpath('org.asciidoctor:asciidoctor-java-integration:0.1.4.preview.1'), +// Set up different subproject lists for individual configuration, +ext.javaProjects = subprojects.findAll { project -> project.name != 'docs' && project.name != 'manual' }, +ext.coreModuleProjects = javaProjects, +, +// Task for creating the distro zip, +task dist(type: Zip) {, +    dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' || task.name.endsWith('Zip') || task.name.endsWith('generatePom') }, +    classifier = 'dist', +    evaluationDependsOn(':docs'), +    evaluationDependsOn(':docs:manual'), +    def zipRootDir = "${project.name}-$version", +    into(zipRootDir) {, +        from(rootDir) {, +            include '*.txt', +        into('docs') {, +            with(project(':docs').apiSpec), +            with(project(':docs:manual').spec), +        into('dist') {, +            from coreModuleProjects.collect {project -> project.libsDir }, +    archives dist, +    archives project(':docs').docsZip, +    archives project(':docs').schemaZip, +++ b/build.gradle, +        classpath('org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'), +        classpath('org.asciidoctor:asciidoctor-java-integration:0.1.4.preview.1'), +// Set up different subproject lists for individual configuration, +ext.javaProjects = subprojects.findAll { project -> project.name != 'docs' && project.name != 'manual' }, +ext.coreModuleProjects = javaProjects, +, +// Task for creating the distro zip, +task dist(type: Zip) {, +    dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' || task.name.endsWith('Zip') || task.name.endsWith('generatePom') }, +    classifier = 'dist', +    evaluationDependsOn(':docs'), +    evaluationDependsOn(':docs:manual'), +    def zipRootDir = "${project.name}-$version", +    into(zipRootDir) {, +        from(rootDir) {, +            include '*.txt', +        into('docs') {, +            with(project(':docs').apiSpec), +            with(project(':docs:manual').spec), +        into('dist') {, +            from coreModuleProjects.collect {project -> project.libsDir }, +    archives dist, +    archives project(':docs').docsZip, +    archives project(':docs').schemaZip, +++ b/docs/docs.gradle, +    // Docbook and Javadoc building and uploading tasks, +apply plugin: 'base', +, +task docs {, +    dependsOn 'manual:asciidoctor', 'apidocs', +}, +, +project('manual') {, +    apply plugin: 'base', +    apply plugin: 'asciidoctor', +, +    ext.expandPlaceholders = "", +, +    asciidoctor {, +        options = [, +          eruby: 'erubis',, +          attributes: [, +              copycss : '',, +              icons : 'font',, +              'source-highlighter': 'prettify',, +              sectanchors : '',, +              toc2: '',, +              idprefix: '',, +              idseparator: '-',, +              doctype: 'book',, +              numbered: '',, +              'spring-social-version' : project.version,, +              'spring-version' : springVersion,, +              revnumber : project.version, +          ], +        ], +    }, +, +, +    ext.spec = copySpec {, +        into ('reference/htmlsingle') {, +            from(asciidoctor.outputDir), +            exclude 'build', 'Guardfile', +        }, +    }, +}, +, +task apidocs(type: Javadoc) {, +    destinationDir = new File(buildDir, 'apidocs'), +    title = "Spring Social $version API", +, +    source coreModuleProjects.collect { project ->, +        project.sourceSets.main.allJava, +    }]