[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant)., +	 * @param username the user's username on the provider, +	 * @param password the user's password on the provider, +	 * @param additionalParameters any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters);, +, +	/**, +	 * @deprecated Set the scope via additional parameters. This can be done conveniently user OAuth2Parameters., +	@Deprecated, +	/**, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant)., +	 * @param username the user's username on the provider, +	 * @param password the user's password on the provider, +	 * @param additionalParameters any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters);, +, +	/**, +	 * @deprecated Set the scope via additional parameters. This can be done conveniently user OAuth2Parameters., +	@Deprecated, +	/**, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters) {, +		MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();, +		if (parameterBasedClientAuthentication) {, +			params.set("client_id", clientId);, +			params.set("client_secret", clientSecret);, +		}, +		params.set("username", username);, +		params.set("password", password);, +		params.set("grant_type", "password");, +		if (additionalParameters != null) {, +			params.putAll(additionalParameters);, +		}, +		return postForAccessGrant(accessTokenUrl, params);, +	}, +, +		additionalParameters.set("scope", scope);, +		return refreshAccess(refreshToken, additionalParameters);, +	}, +	, +	public AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/OAuth2Connection.java, +			AccessGrant accessGrant = serviceProvider.getOAuthOperations().refreshAccess(refreshToken, null);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Exchanges user credentials for an access grant using OAuth2's Resource Owner Credentials Grant (aka, "password" grant)., +	 * @param username the user's username on the provider, +	 * @param password the user's password on the provider, +	 * @param additionalParameters any additional parameters to be sent when exchanging the credentials for an access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters);, +, +	/**, +	 * @deprecated Set the scope via additional parameters. This can be done conveniently user OAuth2Parameters., +	@Deprecated, +	/**, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +	 */, +	AccessGrant refreshAccess(String refreshToken, MultiValueMap<String, String> additionalParameters);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +, +	public AccessGrant exchangeCredentialsForAccess(String username, String password, MultiValueMap<String, String> additionalParameters) {, +		MultiValueMap<String, String> params = new LinkedMultiValueMap<String, String>();, +		if (parameterBasedClientAuthentication) {, +			params.set("client_id", clientId);, +			params.set("client_secret", clientSecret);, +		}, +		params.set("username", username);, +		params.set("password", password);]