[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, +	private OAuthToken accessToken;, +	public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, +		// TODO: implement me, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, +	private OAuthToken accessToken;, +	public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, +		// TODO: implement me, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +public class OAuth1ClientRequestInterceptor {, +	private OAuthToken accessToken;, +	public OAuth1ClientRequestInterceptor(OAuthToken accessToken) {, +		// TODO: implement me, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLEncoder;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.UUID;, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;, +		Map<String, String> oauthParameters = getCommonOAuthParameters();, +		String authHeader = buildAuthorizationHeader(tokenUrl, oauthParameters, Collections.<String, String> emptyMap(), HttpMethod.POST, tokenSecret);, +	private Map<String, String> getCommonOAuthParameters() {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		oauthParameters.put("oauth_timestamp", String.valueOf(System.currentTimeMillis() / 1000));, +		oauthParameters.put("oauth_nonce", UUID.randomUUID().toString());, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +, +	, +	// private helpers, +, +	private String buildAuthorizationHeader(String targetUrl, HttpMethod method, Map<String, String> parameters, OAuthToken accessToken) {, +		Map<String, String> oauthParameters = getCommonOAuthParameters();, +		oauthParameters.put("oauth_token", accessToken.getValue());, +		return buildAuthorizationHeader(targetUrl, oauthParameters, parameters, method, accessToken.getSecret());, +	}, +, +	private String buildAuthorizationHeader(String targetUrl, Map<String, String> oauthParameters,, +			Map<String, String> additionalParameters, HttpMethod method, String tokenSecret) {, +		String baseString = buildBaseString(targetUrl, oauthParameters, additionalParameters, method);, +		String signature = calculateSignature(baseString, tokenSecret);, +		String header = "OAuth ";, +		for (String key : oauthParameters.keySet()) {, +			header += key + "=\"" + encode(oauthParameters.get(key)) + "\", ";, +		}, +		header += "oauth_signature=\"" + encode(signature) + "\"";, +		return header;, +	}, +, +	private String buildBaseString(String targetUrl, Map<String, String> parameters, Map<String, String> additionalParameters, HttpMethod method) {, +		Map<String, String> allParameters = new HashMap<String, String>(parameters);, +		allParameters.putAll(additionalParameters);, +		String baseString = method.toString() + "&" + encode(targetUrl) + "&";, +		List<String> keys = new ArrayList<String>(allParameters.keySet());, +		Collections.sort(keys);, +		String separator = "";, +		for (String key : keys) {, +			baseString += encode(separator + key + "=" + encode(allParameters.get(key)).replace("+", "%20"));, +			separator = "&";, +		}, +		return baseString;, +	}, +, +	private String calculateSignature(String baseString, String tokenSecret) {, +		String key = consumerSecret + "&" + (tokenSecret == null ? "" : tokenSecret);, +		return sign(baseString, key);, +	}, +, +	private String sign(String signatureBaseString, String key) {, +		try {, +			Mac mac = Mac.getInstance(HMAC_SHA1_MAC_NAME);, +			SecretKeySpec spec = new SecretKeySpec(key.getBytes(), HMAC_SHA1_MAC_NAME);, +			mac.init(spec);, +			byte[] text = signatureBaseString.getBytes("UTF-8");, +			byte[] signatureBytes = mac.doFinal(text);, +			signatureBytes = Base64.encodeBase64(signatureBytes);, +			String signature = new String(signatureBytes, "UTF-8");, +			return signature;]