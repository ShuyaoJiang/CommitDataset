[+++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="implementing" xmlns:xlink="http://www.w3.org/1999/xlink">, +	<title>Implementing Service Providers</title>, +	<para>, +		The spring-social-core module provides support for implementing your own ServiceProviders., +		This support consists of convenient base classes for the various ServiceProvider types, such as OAuth1 and OAuth2-based providers., +		A common data access interface is also provided for persisting connection information., +		In this section, you will learn how to implement ServiceProviders., +	</para>, +	<section id="service-providers-implementing-oauth2">, +		<title>OAuth2 Service Providers</title>, +		<para>, +			To implement an OAuth2-based ServiceProvider, first extend AbstractOAuth2ServiceProvider., +			Parameterize &lt;S&gt; to be the Java Binding to the ServiceProvider API., +			Define a single constructor that accepts an clientId, clientSecret, and ConnectionRepository., +			Finally, implement getApi(String) to return a new API instance., +		</para>, +		<para>, +			See FacebookServiceProvider as an example of an OAuth2-based ServiceProvider:, +		</para>, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.facebook.connect;, +, +import org.springframework.social.connect.oauth2.AbstractOAuth2ServiceProvider;, +import org.springframework.social.connect.support.ConnectionRepository;, +import org.springframework.social.facebook.FacebookApi;, +import org.springframework.social.facebook.FacebookTemplate;, +import org.springframework.social.oauth2.OAuth2Template;, +, +public final class FacebookServiceProvider extends AbstractOAuth2ServiceProvider<FacebookApi> {, +, +    public FacebookServiceProvider(String clientId, String clientSecret, ConnectionRepository connectionRepository) {, +        super("facebook", connectionRepository, , +            new OAuth2Template(appId, appSecret,, +                "https://graph.facebook.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", , +                "https://graph.facebook.com/oauth/access_token"));, +    }, +, +    @Override, +    protected FacebookApi getApi(String accessToken) {, +        return new FacebookTemplate(accessToken);, +    }, +, +}]]>, +		</programlisting>, +		<para>, +			In the constructor, you should call super, passing up the ID of the ServiceProvider, the connection repository, and a configured OAuth2Template, which implements OAuth2Operations., +			The OAuth2Template will handle the "OAuth dance" with the provider, and should be configured with the provided clientId and clientSecret, along with the provider-specific authorizeUrl and accessTokenUrl., +		</para>, +		<para>, +			In getApi(String), you should construct your Service API implementation, passing it the access token needed to make requests for protected resources., +			Inside the API implementation, we generally recommend using RestTemplate to make the HTTP calls and add the required Authorization header:, +		</para>, +		<programlisting language="java"><![CDATA[, +public FacebookTemplate(String accessToken) {, +    restTemplate = new RestTemplate();, +    // configures an interceptor that adds the Authorization header to each ClientRequest before it is executed, +    restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +}]]>, +		</programlisting>, +		<para>, +			An example API call with RestTemplate is shown below:, +		</para>, +		<programlisting language="java"><![CDATA[, +public FacebookProfile getUserProfile(String facebookId) {, +    return new FacebookProfile(restTemplate.getForObject("https://graph.facebook.com/{facebookId}", Map.class, facebookId));, +}]]>, +		</programlisting>, +	</section>, +	<section id="service-providers-implementing-oauth1">, +		<title>OAuth1 Service Providers</title>, +		<para>, +			To implement an OAuth1-based ServiceProvider, first extend AbstractOAuth1ServiceProvider.]