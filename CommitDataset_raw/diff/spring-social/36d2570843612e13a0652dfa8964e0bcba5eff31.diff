[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, +	}, +, +	// Retrieves object from map into an Integer, regardless of the object's actual type. Allows for flexibility in object type (eg, "3600" vs 3600)., +	private Integer getIntegerValue(Map<String, Object> map, String key) {, +		Object object = map.get(key);		 , +		return object != null ? , +				Integer.valueOf(String.valueOf(object)) : // normalize to String before creating integer value; , +				null;, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, +	}, +, +	// Retrieves object from map into an Integer, regardless of the object's actual type. Allows for flexibility in object type (eg, "3600" vs 3600)., +	private Integer getIntegerValue(Map<String, Object> map, String key) {, +		Object object = map.get(key);		 , +		return object != null ? , +				Integer.valueOf(String.valueOf(object)) : // normalize to String before creating integer value; , +				null;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	}, +, +	@Test, +	public void exchangeForAccess_jsonResponse_expiresInAsString() {, +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken_expiresInAsString.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +		long approximateExpirationTime = System.currentTimeMillis() + 40735000;, +		long actualExpirationTime = (long) accessGrant.getExpireTime();, +		//allow for 1 second of wiggle room on expiration time., +		assertTrue(approximateExpirationTime - actualExpirationTime < 1000);, +		assertEquals("read", accessGrant.getScope());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), getIntegerValue(result, "expires_in"), result);, +	}, +, +	// Retrieves object from map into an Integer, regardless of the object's actual type. Allows for flexibility in object type (eg, "3600" vs 3600)., +	private Integer getIntegerValue(Map<String, Object> map, String key) {, +		Object object = map.get(key);		 , +		return object != null ? , +				Integer.valueOf(String.valueOf(object)) : // normalize to String before creating integer value; , +				null;, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +	}, +, +	@Test, +	public void exchangeForAccess_jsonResponse_expiresInAsString() {, +		MediaType responseContentType = MediaType.APPLICATION_JSON;, +		String responseFile = "accessToken_expiresInAsString.json";, +		AccessGrant accessGrant = getAccessGrant(responseContentType, responseFile);, +		assertEquals("8d0a88a5c4f1ae4937ad864cafa8e857", accessGrant.getAccessToken());, +		assertEquals("6b0411401bf8751e34f57feb29fb8e32", accessGrant.getRefreshToken());, +		long approximateExpirationTime = System.currentTimeMillis() + 40735000;, +		long actualExpirationTime = (long) accessGrant.getExpireTime();, +		//allow for 1 second of wiggle room on expiration time., +		assertTrue(approximateExpirationTime - actualExpirationTime < 1000);, +		assertEquals("read", accessGrant.getScope());, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth2/accessToken_expiresInAsString.json, +{, +	"expires_at":"Wed, 09 Feb 2011 16:38:34 -0000",, +	"scope":"read",, +	"expires_in":"40735",, +	"username":"cwagon",, +	"access_token":"8d0a88a5c4f1ae4937ad864cafa8e857",, +	"refresh_token":"6b0411401bf8751e34f57feb29fb8e32", +}]