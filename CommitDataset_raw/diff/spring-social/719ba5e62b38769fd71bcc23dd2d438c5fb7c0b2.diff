[+++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/GowallaProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/GowallaProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/JdbcConnectionRepositoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.security.encrypt.NoOpStringEncryptor;, +import org.springframework.social.connect.jdbc.JdbcAccountConnectionRepository;, +import org.w3c.dom.Element;, +, +public class JdbcConnectionRepositoryElementParser implements BeanDefinitionParser {, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(JdbcAccountConnectionRepository.class);, +, +		String jdbcTemplate = element.getAttribute("jdbc-template");, +		beanBuilder.addConstructorArgReference(jdbcTemplate);, +, +		String stringEncryptor = element.getAttribute("string-encryptor");, +		if (stringEncryptor != null && !stringEncryptor.isEmpty()) {, +			beanBuilder.addConstructorArgReference(stringEncryptor);, +		} else {, +			beanBuilder.addConstructorArgValue(NoOpStringEncryptor.getInstance());, +		}, +, +		AbstractBeanDefinition beanDefinition = beanBuilder.getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition("jdbcAccountConnectionRepository", beanDefinition);, +, +		return beanDefinition;, +	}, +}, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="jdbcServiceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-service-provider-factory jdbc-template="jdbcTemplate" />, +	<social:jdbc-connection-repository jdbc-template="jdbcTemplate" />, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/FacebookProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/GowallaProviderElementParser.java, +				REQUEST_TOKEN_URL, AUTHORIZATION_URL, ACCESS_TOKEN_URL, element.getAttribute("connection-repository"));, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/JdbcConnectionRepositoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.security.encrypt.NoOpStringEncryptor;, +import org.springframework.social.connect.jdbc.JdbcAccountConnectionRepository;, +import org.w3c.dom.Element;, +, +public class JdbcConnectionRepositoryElementParser implements BeanDefinitionParser {, +, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(JdbcAccountConnectionRepository.class);, +, +		String jdbcTemplate = element.getAttribute("jdbc-template");, +		beanBuilder.addConstructorArgReference(jdbcTemplate);, +, +		String stringEncryptor = element.getAttribute("string-encryptor");, +		if (stringEncryptor != null && !stringEncryptor.isEmpty()) {, +			beanBuilder.addConstructorArgReference(stringEncryptor);, +		} else {]