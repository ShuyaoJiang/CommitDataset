[+++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-github/src/test/java/org/springframework/social/github/GitHubTemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.test.MockRestServiceServer;, +	private MockRestServiceServer mockServer;, +	private HttpHeaders responseHeaders;, +		mockServer = MockRestServiceServer.createServer(github.getRestTemplate());, +		responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_JSON);, +	}, +, +	@Test, +	public void getUserProfile() throws Exception {, +		mockServer.expect(requestTo("https://github.com/api/v2/json/user/show")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("profile.json", getClass()), responseHeaders));, +		GitHubUserProfile profile = github.getUserProfile();, +		assertEquals("habuma", profile.getUsername());, +		assertEquals("Craig Walls", profile.getName());, +		assertEquals("SpringSource", profile.getCompany());, +		assertEquals("http://blog.springsource.com/author/cwalls", profile.getBlog());, +		assertEquals("cwalls@vmware.com", profile.getEmail());, +		assertEquals(123456, profile.getId());, +		mockServer.expect(requestTo("https://github.com/api/v2/json/user/show")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("profile.json", getClass()), responseHeaders));, +		assertEquals("habuma", github.getProfileId());, +	}, +	@Test, +	public void getProfileUrl() {, +		mockServer.expect(requestTo("https://github.com/api/v2/json/user/show")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("profile.json", getClass()), responseHeaders));, +		assertEquals("https://github.com/habuma", github.getProfileUrl());, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-github/src/test/java/org/springframework/social/github/GitHubTemplateTest.java, +import static org.junit.Assert.*;, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import static org.springframework.web.client.test.ResponseCreators.*;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.test.MockRestServiceServer;, +	private MockRestServiceServer mockServer;, +	private HttpHeaders responseHeaders;, +		mockServer = MockRestServiceServer.createServer(github.getRestTemplate());, +		responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.APPLICATION_JSON);, +	}, +, +	@Test, +	public void getUserProfile() throws Exception {, +		mockServer.expect(requestTo("https://github.com/api/v2/json/user/show")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("profile.json", getClass()), responseHeaders));, +		GitHubUserProfile profile = github.getUserProfile();, +		assertEquals("habuma", profile.getUsername());, +		assertEquals("Craig Walls", profile.getName());, +		assertEquals("SpringSource", profile.getCompany());, +		assertEquals("http://blog.springsource.com/author/cwalls", profile.getBlog());, +		assertEquals("cwalls@vmware.com", profile.getEmail());, +		assertEquals(123456, profile.getId());, +		mockServer.expect(requestTo("https://github.com/api/v2/json/user/show")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("profile.json", getClass()), responseHeaders));, +		assertEquals("habuma", github.getProfileId());, +	}, +	@Test, +	public void getProfileUrl() {, +		mockServer.expect(requestTo("https://github.com/api/v2/json/user/show")).andExpect(method(GET)), +				.andRespond(withResponse(new ClassPathResource("profile.json", getClass()), responseHeaders));, +		assertEquals("https://github.com/habuma", github.getProfileUrl());, +++ b/spring-social-github/src/test/resources/org/springframework/social/github/profile.json, +{, +	"user" : {, +		"id" : 123456,, +		"login" : "habuma",, +		"name" : "Craig Walls",, +		"location" : "Plano, TX",, +		"company" : "SpringSource",, +		"blog" : "http://blog.springsource.com/author/cwalls",, +		"email" : "cwalls@vmware.com",, +		"created_at" : "2010/06/09 12:34:56 -0600", +	}, +}, +++ b/build.gradle, +        // to be able to use the mock rest server, +        testCompile project(':spring-social-core').sourceSets.test.classes, +++ b/spring-social-github/src/test/java/org/springframework/social/github/GitHubTemplateTest.java]