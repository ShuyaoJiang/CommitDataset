[+++ b/docs/src/reference/docbook/connecting.xml, +        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +        if (authentication == null) {, +            throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, +        }, +        return usersConnectionRepository().createConnectionRepository(authentication.getName());, +++ b/docs/src/reference/docbook/connecting.xml, +        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +        if (authentication == null) {, +            throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");, +        }, +        return usersConnectionRepository().createConnectionRepository(authentication.getName());, +++ b/docs/src/reference/docbook/signin.xml, +				<listitem><para>A <interfacename>UsersConnectionRepository</interfacename> to find the user that has the connection to the provider user attempting to sign in.</para></listitem>, +				In the event that the sign in attempt fails, the sign in attempt will be stored in the session to be used to present a sign-up page to the user (see <xref linkend="signin_signup"/>)., +				By configuring ConnectionFactoryLocator and UsersConnectionRepository as scoped proxies, it enables the proxies to be carried long with the sign in attempt in the session rather than the actual objects themselves., +			If <classname>ProviderSignInController</classname> can't find a local user associated with a provider user attempting to sign in, there may be an opportunity to have the user sign up with the application., +			Leveraging the information about the user received from the provider, the user may be presented with a pre-filled sign up form to explicitly sign up with the application., +			It's also possible to use the user's provider data to implicitly create a new local application user without presenting a sign up form. , +		</para>, +		<section xml:id="signin_signup_explicit">, +			<title>Signing up with a sign up form</title>					, +			<para>, +				You can override that default by setting the <code>signUpUrl</code> property on the controller. , +    <property name="signUpUrl" value="/register" />, +				This information can be used to prepopulate the sign up form and then, after successful sign up, to establish a connection between the new account and the provider account.			, +		<section xml:id="signin_signup_implicit">, +			<title>Implicit sign up</title>	, +			<para>, +				To enable implicit sign up, you must create an implementation of the <interfacename>ConnectionSignUp</interfacename> interface and inject an instance of that <interfacename>ConnectionSignUp</interfacename> to the connection repository., +				The <interfacename>ConnectionSignUp</interfacename> interface is simple, with only a single method to implement:, +			</para>				, +			<programlisting language="java"><![CDATA[, +public interface ConnectionSignUp {, +    String execute(Connection<?> connection);, +}]]>, +			</programlisting>, +, +			<para>, +				The <methodname>execute()</methodname> method is given a <interfacename>Connection</interfacename> that it can use to retrieve information about the user., +				It can then use that information to create a new local application user and return the new local user ID., +				For example, the following implementation fetches the user's provider profile and uses it to create a new account: , +			</para>, +			<programlisting language="java"><![CDATA[, +public class ShowcaseConnectionSignUp implements ConnectionSignUp {, +, +	private final AccountRepository accountRepository;, +, +	public ShowcaseConnectionSignUp(AccountRepository accountRepository) {, +		this.accountRepository = accountRepository;, +	}, +, +	public String execute(Connection<?> connection) {, +	    UserProfile profile = connection.fetchUserProfile();, +	    Account account = createAccount(profile);, +	    return account != null ? account.getUsername() : null;, +	}, +, +	private Account createAccount(UserProfile profile) {, +		if(profile == null || profile.getUsername() == null) {, +			return null;, +		}, +		return new Account(profile.getUsername(), profile.getFirstName(), profile.getLastName());, +	}, +	, +}]]>, +			</programlisting>			, +			<para>, +				If <methodname>execute()</methodname> returns null, then it indicates that the user could not be implicitly signed up., +				In that case, <classname>ProviderSignInController</classname>'s explicit sign up flow will be in effect and the browser will be redirected to the sign up form., +			</para>, +			<para>, +				Once you've written a <interfacename>ConnectionSignUp</interfacename> for your application, you'll need to inject it into the <interfacename>UsersConnectionRepository</interfacename>., +				In Java-based configuration: , +			</para>, +			<programlisting language="java"><![CDATA[, +@Bean, +@Scope(value="singleton", proxyMode=ScopedProxyMode.INTERFACES) , +public UsersConnectionRepository usersConnectionRepository(AccountRepository accountRepository) {, +  JdbcUsersConnectionRepository repository = new JdbcUsersConnectionRepository(, +          dataSource, connectionFactoryLocator(), Encryptors.noOpText());, +  repository.setConnectionSignUp(new AccountConnectionSignUp(accountRepository));, +  return repository;, +}]]>, +			</programlisting>	, +		</section>, +	</section>	]