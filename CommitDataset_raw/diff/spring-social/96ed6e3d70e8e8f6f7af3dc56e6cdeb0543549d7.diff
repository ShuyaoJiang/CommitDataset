[+++ b/build.gradle, +        compile project (':spring-social-web'), +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.springframework.social.connect.ConnectionData;, +                ConnectionData connectionData = connection.createData();, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.springframework.social.connect.ConnectionData;, +                ConnectionData connectionData = connection.createData();, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +++ b/build.gradle, +        compile project (':spring-social-web'), +++ /dev/null, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.social.connect.web.ProviderSignInAttempt;, +	public SocialAuthenticationFilter(AuthenticationManager authManager, UserIdExtractor userIdExtractor, UsersConnectionRepository usersConnectionRepository, SocialAuthenticationServiceLocator authServiceLocator) {, +    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {, +	private Authentication attemptAuthService(final SocialAuthenticationService<?> authService, final HttpServletRequest request, HttpServletResponse response) , +			throws SocialAuthenticationRedirectException, AuthenticationException {, +	private void addConnection(final SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token, Authentication auth) {, +	private Authentication doAuthentication(SocialAuthenticationService<?> authService, HttpServletRequest request, SocialAuthenticationToken token) {, +				addSignInAttempt(request.getSession(), token.getConnection());, +	private void addSignInAttempt(HttpSession session, Connection<?> connection) {, +		session.setAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, new ProviderSignInAttempt(connection, authServiceLocator, usersConnectionRepository));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/provider/OAuth2AuthenticationService.java, +import org.springframework.social.connect.ConnectionData;, +                ConnectionData connectionData = connection.createData();, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInAttempt.java, +	public static final String SESSION_ATTRIBUTE = ProviderSignInAttempt.class.getName();]