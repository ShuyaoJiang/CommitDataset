[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		preConnect(connectionFactory, parameters, request);, +	private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +			interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		preConnect(connectionFactory, parameters, request);, +	private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +			interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +	void preConnect(ConnectionFactory<S> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		preConnect(connectionFactory, parameters, request);, +	private void preConnect(ConnectionFactory<?> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request) {, +			interceptor.preConnect(connectionFactory, parameters, request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectInterceptor.java, +	void preConnect(ConnectionFactory<S> connectionFactory, MultiValueMap<String, String> parameters, WebRequest request);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +		return buildOAuthUrl(connectionFactory, request, null);, +		OAuth1Parameters parameters = getOAuth1Parameters(additionalParameters);, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10) {, +		OAuthToken requestToken = fetchRequestToken(request, oauthOperations);, +		return buildOAuth1Url(oauthOperations, requestToken.getValue(), parameters);, +	}, +, +	private OAuth1Parameters getOAuth1Parameters(MultiValueMap<String, String> additionalParameters) {, +		OAuth1Parameters parameters = new OAuth1Parameters();, +		if (additionalParameters != null) {, +			parameters.putAll(additionalParameters);, +		}, +		return parameters;, +	}, +, +	private OAuthToken fetchRequestToken(NativeWebRequest request, OAuth1Operations oauthOperations) {, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			return oauthOperations.fetchRequestToken(callbackUrl(request), null);, +		}, +		return oauthOperations.fetchRequestToken(null, null);				, +		OAuth2Parameters parameters = getOAuth2Parameters(request, additionalParameters);, +	private OAuth2Parameters getOAuth2Parameters(NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth2Parameters parameters = new OAuth2Parameters();, +		if (additionalParameters != null) {			, +			parameters.putAll(additionalParameters);, +		}, +		parameters.setRedirectUri(callbackUrl(request));, +		String scope = request.getParameter("scope");, +		if (scope != null) {, +			parameters.setScope(scope);, +		}, +		return parameters;, +	}, +]