[+++ b/spring-social-client/src/test/java/org/springframework/social/provider/oauth1/OAuth1ServiceProviderTest.java, +		// additional postconditions, +		assertEquals("Hello Keith!", connections.get(0).getApi().testOperation("Keith"));		, +	}, +	, +	@Test, +	public void equals() {, +		Long accountId = 1L;, +		OAuthToken accessToken = new OAuthToken("12345", "23456");, +		ServiceProviderConnection<TestApi> connection = serviceProvider.connect(accountId, accessToken);, +		ServiceProviderConnection<TestApi> sameConnection = serviceProvider.getConnections(1L).get(0);, +		assertEquals(connection, sameConnection);		, +	}, +	, +	@Test, +	public void duplicateConnection() {, +		Long accountId = 1L;, +		OAuthToken accessToken = new OAuthToken("12345", "23456");, +		serviceProvider.connect(accountId, accessToken);, +		try {, +			serviceProvider.connect(accountId, accessToken);, +			fail("Should have failed on duplicate connection");, +		} catch (IllegalArgumentException e) {, +			, +		}, +	}, +	, +	@Test, +	public void disconnect() {, +		Long accountId = 1L;, +		OAuthToken accessToken = new OAuthToken("12345", "23456");, +		ServiceProviderConnection<TestApi> connection = serviceProvider.connect(accountId, accessToken);, +		TestApi api = connection.getApi();, +		assertEquals("Hello Keith!", api.testOperation("Keith"));, +, +		// disconnect, +++ b/spring-social-client/src/test/java/org/springframework/social/provider/oauth1/OAuth1ServiceProviderTest.java, +		// additional postconditions, +		assertEquals("Hello Keith!", connections.get(0).getApi().testOperation("Keith"));		, +	}, +	, +	@Test, +	public void equals() {, +		Long accountId = 1L;, +		OAuthToken accessToken = new OAuthToken("12345", "23456");, +		ServiceProviderConnection<TestApi> connection = serviceProvider.connect(accountId, accessToken);, +		ServiceProviderConnection<TestApi> sameConnection = serviceProvider.getConnections(1L).get(0);, +		assertEquals(connection, sameConnection);		, +	}, +	, +	@Test, +	public void duplicateConnection() {, +		Long accountId = 1L;, +		OAuthToken accessToken = new OAuthToken("12345", "23456");, +		serviceProvider.connect(accountId, accessToken);, +		try {, +			serviceProvider.connect(accountId, accessToken);, +			fail("Should have failed on duplicate connection");, +		} catch (IllegalArgumentException e) {, +			, +		}, +	}, +	, +	@Test, +	public void disconnect() {, +		Long accountId = 1L;, +		OAuthToken accessToken = new OAuthToken("12345", "23456");, +		ServiceProviderConnection<TestApi> connection = serviceProvider.connect(accountId, accessToken);, +		TestApi api = connection.getApi();, +		assertEquals("Hello Keith!", api.testOperation("Keith"));, +, +		// disconnect, +++ b/spring-social-client/src/test/java/org/springframework/social/provider/oauth2/OAuth2ServiceProviderTest.java, +		// additional postconditions, +		assertEquals("Hello Keith!", connections.get(0).getApi().testOperation("Keith"));, +, +	}, +	, +	@Test, +	public void equals() {, +		Long accountId = 1L;, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +		ServiceProviderConnection<TestApi> connection = serviceProvider.connect(accountId, accessGrant);, +		List<ServiceProviderConnection<TestApi>> connections = serviceProvider.getConnections(accountId);		, +	}, +	@Test, +	public void disconnect() {, +		Long accountId = 1L;, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +		ServiceProviderConnection<TestApi> connection = serviceProvider.connect(accountId, accessGrant);	, +		AccessGrant accessGrant = new AccessGrant("12345", "23456");, +		serviceProvider.connect(accountId, accessGrant);, +			serviceProvider.connect(accountId, accessGrant);]