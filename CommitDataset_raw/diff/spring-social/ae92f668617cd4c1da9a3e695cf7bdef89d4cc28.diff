[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.web.client.RestTemplate;, + * Therefore, FacebookTemplate must be given an access token at construction time., +	private final RestTemplate restTemplate;, +	 * @param accessToken An access token given by Facebook after a successful OAuth 2 authentication (or through Facebook's JS library)., +		this.restTemplate = createRestTemplate(accessToken);, +		return restTemplate.getForObject(OBJECT_URL, FacebookProfile.class, "me");, +		ResponseEntity<Map> response = restTemplate.getForEntity(CONNECTION_URL, Map.class, CURRENT_USER_ID, FRIENDS);, +		publish(CURRENT_USER_ID, FEED, map);, +		publish(CURRENT_USER_ID, FEED, map);, +		restTemplate.postForLocation(CONNECTION_URL, requestData, object, connection);, +		return getProfilePicture(CURRENT_USER_ID);, +		ResponseEntity<byte[]> imageBytes = restTemplate.getForEntity(PROFILE_LARGE_PICTURE_URL, byte[].class, profileId);, +	// subclassing hooks, +	, +	protected RestTemplate getRestTemplate() {, +		return restTemplate;, +	}, +	, +	// internal helpers, +	, +	private RestTemplate createRestTemplate(String accessToken) {, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +		// Facebook returns JSON data with text/javascript content type, +		MappingJacksonHttpMessageConverter json = new MappingJacksonHttpMessageConverter();, +		json.setSupportedMediaTypes(Arrays.asList(new MediaType("text", "javascript")));, +		restTemplate.getMessageConverters().add(json);, +		return restTemplate;, +	}, +, +	static final String PROFILE_LARGE_PICTURE_URL = "https://graph.facebook.com/{profile}/picture?type=large";, +	static final String CURRENT_USER_ID = "me";, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2RequestInterceptor.java, + * ClientHttpRequestInterceptor implementation that adds the OAuth2 access token to protected resource requests before execution., +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/FacebookTemplate.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.web.client.RestTemplate;, + * Therefore, FacebookTemplate must be given an access token at construction time., +	private final RestTemplate restTemplate;, +	 * @param accessToken An access token given by Facebook after a successful OAuth 2 authentication (or through Facebook's JS library)., +		this.restTemplate = createRestTemplate(accessToken);, +		return restTemplate.getForObject(OBJECT_URL, FacebookProfile.class, "me");, +		ResponseEntity<Map> response = restTemplate.getForEntity(CONNECTION_URL, Map.class, CURRENT_USER_ID, FRIENDS);, +		publish(CURRENT_USER_ID, FEED, map);, +		publish(CURRENT_USER_ID, FEED, map);, +		restTemplate.postForLocation(CONNECTION_URL, requestData, object, connection);, +		return getProfilePicture(CURRENT_USER_ID);, +		ResponseEntity<byte[]> imageBytes = restTemplate.getForEntity(PROFILE_LARGE_PICTURE_URL, byte[].class, profileId);, +	// subclassing hooks, +	, +	protected RestTemplate getRestTemplate() {, +		return restTemplate;, +	}, +	, +	// internal helpers, +	, +	private RestTemplate createRestTemplate(String accessToken) {, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setInterceptors(new ClientHttpRequestInterceptor[] { OAuth2RequestInterceptor.draft10(accessToken) });, +		// Facebook returns JSON data with text/javascript content type, +		MappingJacksonHttpMessageConverter json = new MappingJacksonHttpMessageConverter();, +		json.setSupportedMediaTypes(Arrays.asList(new MediaType("text", "javascript")));, +		restTemplate.getMessageConverters().add(json);, +		return restTemplate;, +	}, +, +	static final String PROFILE_LARGE_PICTURE_URL = "https://graph.facebook.com/{profile}/picture?type=large";, +	static final String CURRENT_USER_ID = "me";, +++ b/spring-social-facebook/src/test/java/org/springframework/social/facebook/FacebookTemplateTest.java, +	, +	, +	// TODO complete with testing of json response reading/request writing behavior, +	// the use of a mock object before was not testing this important interaction, +	]