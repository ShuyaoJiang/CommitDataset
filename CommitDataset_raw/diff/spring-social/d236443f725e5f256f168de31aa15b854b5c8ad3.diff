[+++ b/docs/src/reference/docbook/serviceprovider.xml, +OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, new AuthorizationParameters(callbackUrl));, +AccessGrant accessGrant = oauth2Operations.exchangeForAccess(authorizationCode, callbackUrl);, +OAuth2Operations oauth2Operations = connectionFactory.getOAuth2Operations();, +String authorizeUrl = oauth2Operations.buildAuthorizeUrl(GrantType.IMPLICIT_GRANT, new AuthorizationParameters(callbackUrl));, +    OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters);, +			<para>, +				The example code below shows use of a FacebookServiceProviderConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above., +				Here, FacebookServiceProviderConnectionFactory is a subclass of OAuth2ServiceProviderConnectionFactory:, +				<programlisting language="java"><![CDATA[, +TwitterServiceProviderConnectionFactory connectionFactory = new TwitterServiceProviderConnectionFactory();, +OAuth1Operations oauth1Operations = connectionFactory.getOAuth1Operations();, +String requestToken = oauth1Operations.fetchRequestToken(callbackUrl);, +String authorizeUrl = oauth1Operations.buildAuthorizeUrl(requestToken, AuthorizationParameters.NONE);, +response.sendRedirect(authorizeUrl);, +// when the provider callback is received with the oauth_token and oauth_verifier parameters:, +OAuthToken accessToken = oauth1Operations.exchangeForAccessToken(new AuthorizedRequestToken(oauthToken, oauthVerifier));, +ServiceProviderConnection<FacebookApi> connection = connectionFactory.createConnection(accessToken);]]>, +				</programlisting>, +			</para>			]