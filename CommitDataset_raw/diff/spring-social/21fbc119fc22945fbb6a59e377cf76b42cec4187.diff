[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(clientId, "The clientId property cannot be null");, +		Assert.notNull(clientSecret, "The clientSecret property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(clientId, "The clientId property cannot be null");, +		Assert.notNull(clientSecret, "The clientSecret property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-test/src/test/java/org/springframework/social/oauth1/OAuth1TemplateTest.java, +	private static final String AUTHENTICATE_URL = "https://www.someprovider.com/oauth/authenticate";, +, +	private static final String AUTHORIZE_URL = "https://www.someprovider.com/oauth/authorize";, +, +		oauth10a = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10_REVISION_A);, +		oauth10 = new OAuth1Template("consumer_key", "consumer_secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, AUTHENTICATE_URL, ACCESS_TOKEN_URL, OAuth1Version.CORE_10);, +				AUTHORIZE_URL, null, ACCESS_TOKEN_URL, OAuth1Version.CORE_10) {, +		assertEquals(AUTHORIZE_URL + "?oauth_token=request_token",, +		assertEquals(AUTHORIZE_URL + "?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",, +		assertEquals(AUTHORIZE_URL + "?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback&custom_parameter=custom_parameter_value",, +				.expect(requestTo(REQUEST_TOKEN_URL)), +		mockServer.expect(requestTo(REQUEST_TOKEN_URL)), +				.expect(requestTo(ACCESS_TOKEN_URL)), +				.expect(requestTo(ACCESS_TOKEN_URL)), +	, +	// parameter assertion tests, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullConsumerKey() {, +		new OAuth1Template(null, "secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, ACCESS_TOKEN_URL);, +	}, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullConsumerSecret() {, +		new OAuth1Template("key", null, REQUEST_TOKEN_URL, AUTHORIZE_URL, ACCESS_TOKEN_URL);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullRequestTokenUrl() {, +		new OAuth1Template("key", "secret", null, AUTHORIZE_URL, ACCESS_TOKEN_URL);, +	}, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullAuthorizeUrl() {, +		new OAuth1Template("key", "secret", REQUEST_TOKEN_URL, null, ACCESS_TOKEN_URL);, +	}, +	, +	@Test(expected = IllegalArgumentException.class), +	public void construct_nullAcessTokenUrl() {, +		new OAuth1Template("key", "secret", REQUEST_TOKEN_URL, AUTHORIZE_URL, null);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void setRequestFactory_null() {, +		oauth10a.setRequestFactory(null);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(consumerKey, "The consumerKey property cannot be null");, +		Assert.notNull(consumerSecret, "The consumerSecret property cannot be null");, +		Assert.notNull(requestTokenUrl, "The requestTokenUrl property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");, +		Assert.notNull(requestFactory, "The requestFactory property cannot be null");, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import org.springframework.util.Assert;, +		Assert.notNull(clientId, "The clientId property cannot be null");, +		Assert.notNull(clientSecret, "The clientSecret property cannot be null");, +		Assert.notNull(authorizeUrl, "The authorizeUrl property cannot be null");, +		Assert.notNull(accessTokenUrl, "The accessTokenUrl property cannot be null");]