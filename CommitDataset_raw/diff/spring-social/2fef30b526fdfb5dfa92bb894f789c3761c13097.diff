[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +		this.providerAccountIdQuery = DEFAULT_PROVIDER_ACCOUNT_ID_QUERY;, +		this.connectionExistsQuery = DEFAULT_CONNECTION_EXISTS_QUERY;, +		this.createConnectionQuery = DEFAULT_CREATE_CONNECTION_QUERY;, +		this.removeConnectionQuery = DEFAULT_REMOVE_CONNECTION_QUERY;, +		this.accessTokenQuery = DEFAULT_ACCESS_TOKEN_QUERY;, +		return providerAccountIdQuery;, +	/**, +	 * <p>, +	 * Overrides the default query for selecting a user's provider account ID, +	 * given their local member ID and the provider ID., +	 * </p>, +	 * , +	 * <p>, +	 * The default query is:, +	 * </p>, +	 * , +	 * <code>, +	 * select accountId from AccountConnection where member = ? and provider = ?, +	 * </code>, +	 * , +	 * <p>, +	 * An overriding query should follow a similar form, taking a local member, +	 * ID and a provider ID as parameters and returning the provider account ID, +	 * as a single column result., +	 * , +	 * @param providerAccountIdQuery, +	 */, +	public void setProviderAccountIdQuery(String providerAccountIdQuery) {, +		this.providerAccountIdQuery = providerAccountIdQuery;, +	public String getConnectionExistsQuery() {, +		return connectionExistsQuery;, +	/**, +	 * <p>, +	 * Overrides the default query for establishing the existence of one or more, +	 * connections between the application and a provider., +	 * </p>, +	 * , +	 * <p>, +	 * The default query is:, +	 * </p>, +	 * , +	 * <code>, +	 * select exists(select 1 from AccountConnection where member = ? and provider = ?), +	 * </code>, +	 * , +	 * <p>, +	 * An overriding query should follow a similar form, taking a local member, +	 * ID and a provider ID as parameters and returning true if one or more, +	 * connections exist., +	 * , +	 * @param connectionExistsQuery, +	 */, +	public void setConnectionExistsQuery(String connectionExistsQuery) {, +		this.connectionExistsQuery = connectionExistsQuery;, +	public String getCreateConnectionQuery() {, +		return createConnectionQuery;, +	/**, +	 * <p>, +	 * Overrides the default query for inserting a new connection., +	 * </p>, +	 * , +	 * <p>, +	 * The default query is:, +	 * </p>, +	 * , +	 * <code>, +	 * insert into AccountConnection (member, provider, accessToken, secret, accountId, profileUrl) values (?, ?, ?, ?, ?, ?), +	 * </code>, +	 * , +	 * <p>, +	 * An overriding query should follow a similar form, taking a local member, +	 * ID, a provider ID, an access token, an access token secret, a provider, +	 * account ID, and a provider profile URL as parameters., +	 * , +	 * @param createConnectionQuery, +	 */, +	public void setCreateConnectionQuery(String createConnectionQuery) {, +		this.createConnectionQuery = createConnectionQuery;, +	public String getRemoveConnectionQuery() {, +		return removeConnectionQuery;, +	/**, +	 * <p>, +	 * Overrides the default query for deleting a connection., +	 * </p>, +	 * , +	 * <p>, +	 * The default query is:, +	 * </p>, +	 * , +	 * <code>, +	 * delete from AccountConnection where member = ? and provider = ?, +	 * </code>, +	 * , +	 * <p>, +	 * An overriding query should follow a similar form, taking a local member, +	 * ID and a provider ID., +	 * , +	 * @param removeConnectionQuery, +	 */]