[+++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/AbstractOAuth1ServiceProvider.java, +	private final OAuth1Operations oauth1Operations;, +	public AbstractOAuth1ServiceProvider(String id, String displayName, ConnectionRepository connectionRepository, , +			String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	protected abstract S getApi(String consumerKey, String consumerSecret, String accessToken, String secret);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/AbstractOAuth1ServiceProvider.java, +	private final OAuth1Operations oauth1Operations;, +	public AbstractOAuth1ServiceProvider(String id, String displayName, ConnectionRepository connectionRepository, , +			String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	protected abstract S getApi(String consumerKey, String consumerSecret, String accessToken, String secret);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Operations.java, +package org.springframework.social.provider.oauth1;, +, +public interface OAuth1Operations {, +, +	/**, +	 * Begin the account connection process by fetching a new request token from this service provider., +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken) access token}., +	 * @param callbackUrl the URL the provider should redirect to after the member authorizes the connection , +	 */, +	OAuthToken fetchNewRequestToken(String callbackUrl);, +, +	/**, +	 * Construct the URL to redirect the user to for connection authorization., +	 * @param requestToken the request token value, to be encoded in the authorize URL., +	 * @return the absolute authorize URL to redirect the member to for authorization, +	 */, +	String buildAuthorizeUrl(String requestToken);, +, +	/**, +	 * Exchange the authorized request token for an access token., +	 * @param requestToken an authorized request token and verifier, +	 * @return an access token granted by the provider, +	 */, +	OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken);, +	, +}, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/AbstractOAuth1ServiceProvider.java, +	private final OAuth1Operations oauth1Operations;, +	public AbstractOAuth1ServiceProvider(String id, String displayName, ConnectionRepository connectionRepository, , +			String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	protected abstract S getApi(String consumerKey, String consumerSecret, String accessToken, String secret);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Operations.java, +package org.springframework.social.provider.oauth1;, +, +public interface OAuth1Operations {, +, +	/**, +	 * Begin the account connection process by fetching a new request token from this service provider., +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken) access token}., +	 * @param callbackUrl the URL the provider should redirect to after the member authorizes the connection , +	 */, +	OAuthToken fetchNewRequestToken(String callbackUrl);, +, +	/**, +	 * Construct the URL to redirect the user to for connection authorization., +	 * @param requestToken the request token value, to be encoded in the authorize URL., +	 * @return the absolute authorize URL to redirect the member to for authorization, +	 */, +	String buildAuthorizeUrl(String requestToken);, +, +	/**, +	 * Exchange the authorized request token for an access token., +	 * @param requestToken an authorized request token and verifier, +	 * @return an access token granted by the provider, +	 */, +	OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken);, +	, +}, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * The service interface for invoking OAuth1 operations against this provider., +	OAuth1Operations getOAuth1Operations();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/AbstractOAuth1ServiceProvider.java, +	private final OAuth1Operations oauth1Operations;, +	public AbstractOAuth1ServiceProvider(String id, String displayName, ConnectionRepository connectionRepository, , +			String consumerKey, String consumerSecret, OAuth1Operations oauth1Operations) {, +		this.oauth1Operations = oauth1Operations;, +	public OAuth1Operations getOAuth1Operations() {, +		return oauth1Operations;, +		return getApi(consumerKey, consumerSecret, connection.getAccessToken(), connection.getSecret());, +	protected abstract S getApi(String consumerKey, String consumerSecret, String accessToken, String secret);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Operations.java, +package org.springframework.social.provider.oauth1;, +, +public interface OAuth1Operations {, +, +	/**, +	 * Begin the account connection process by fetching a new request token from this service provider.]