[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/ServiceProvider.java, +	 * Begin the account connection process by fetching a new request token from, +	 * this service provider. The new token should be stored in the member's, +	 * session up until the authorization callback is made and it's time to, +	 * {@link #connect(Serializable, AuthorizedRequestToken) connect}., +	 * , +	 * @param callbackUrl, +	 *            the URL the provider should redirect to after the member, +	 *            authorizes the connection (may be null for OAuth 1.0-based, +	 *            service providers), +	 * the user authorizes the connection at the {@link #buildAuthorizeUrl(Map), +	 * authorizeUrl} and the service provider calls us back. Internally,, +	 * exchanges the authorized request token for an access token, then stores, +	 * the awarded access token with the member account. This access token, +	 * identifies the connection between the member account and this service, +	 * provider., +	 * {@link #getServiceOperations(Serializable)} may now be called to get and, +	 * invoke the service provider's API. The requestToken required during the, +	/**, +	 * Fetches an access token from the OAuth 1 provider, but does not create a, +	 * connection between the member account and the account at the provider., +	 * This method is useful when you don't want to persist the connection or, +	 * when you want to create the connection at a later time (such as in the, +	 * registration/connect flow)., +	 * , +	 * @param requestToken, +	 *            an authorized request token and verifier, +	 * @return an access token granted by the provider, +	 */, +	 * the user authorizes the connection at the {@link #buildAuthorizeUrl(Map), +	 * authorizeUrl} and the service provider calls us back. Internally,, +	 * exchanges the code given by the provider for an access token, then stores, +	 * the awarded access token with the member account. This access token, +	 * identifies the connection between the member account and this service, +	 * provider., +	 * {@link #getServiceOperations(Serializable)} may now be called to get and, +	 * invoke the service provider's API., +	 * @param redirectUri, +	 *            the redirectUri that the application has registered with the, +	 *            provider, +	 * @param code, +	 *            the authorization code granted by the provider after the user, +	 *            agrees to the requested permissions at authorization, +	/**, +	 * Fetches an access token from the OAuth 2 provider, but does not create a, +	 * connection between the member account and the account at the provider., +	 * This method is useful when you don't want to persist the connection or, +	 * when you want to create the connection at a later time (such as in the, +	 * registration/connect flow)., +	 * , +	 * @param redirectUri, +	 *            the redirectUri that the application has registered with the, +	 *            provider, +	 * @param code, +	 *            the authorization code granted by the provider after the user, +	 *            agrees to the requested permissions at authorization, +	 * @return an access token granted by the provider, +	 */, +	/**, +	 * Creates a connection between a member account ID and a provider, given an, +	 * access token granted by that provider., +	 * , +	 * @param accountId, +	 *            the application account ID that the connection will be made, +	 *            with., +	 * @param accessToken, +	 *            an access token granted by the provider., +	 */, +	 * @return an object providing operations to perform against the provider., +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/ServiceProvider.java, +	 * Begin the account connection process by fetching a new request token from, +	 * this service provider. The new token should be stored in the member's, +	 * session up until the authorization callback is made and it's time to, +	 * {@link #connect(Serializable, AuthorizedRequestToken) connect}., +	 * , +	 * @param callbackUrl, +	 *            the URL the provider should redirect to after the member, +	 *            authorizes the connection (may be null for OAuth 1.0-based, +	 *            service providers), +	 * the user authorizes the connection at the {@link #buildAuthorizeUrl(Map), +	 * authorizeUrl} and the service provider calls us back. Internally,, +	 * exchanges the authorized request token for an access token, then stores, +	 * the awarded access token with the member account. This access token, +	 * identifies the connection between the member account and this service, +	 * provider., +	 * {@link #getServiceOperations(Serializable)} may now be called to get and, +	 * invoke the service provider's API. The requestToken required during the, +	/**, +	 * Fetches an access token from the OAuth 1 provider, but does not create a, +	 * connection between the member account and the account at the provider., +	 * This method is useful when you don't want to persist the connection or, +	 * when you want to create the connection at a later time (such as in the, +	 * registration/connect flow)., +	 * , +	 * @param requestToken, +	 *            an authorized request token and verifier, +	 * @return an access token granted by the provider]