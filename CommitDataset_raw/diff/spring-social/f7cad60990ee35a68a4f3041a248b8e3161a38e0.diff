[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static java.util.Arrays.*;, +import java.util.HashSet;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +	public void connectionStatus() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		connectionRepository.addConnection(connectionFactory1.createConnection(new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		mockMvc.perform(get("/connect")), +			.andExpect(view().name("connect/status")), +			.andExpect(model().attribute("providerIds", new HashSet<String>(asList("oauth1Provider", "oauth2Provider")))), +			.andExpect(model().attributeExists("connectionMap"));, +		, +		mockMvc.perform(get("/connect/oauth1Provider")), +			.andExpect(view().name("connect/oauth1ProviderConnected")), +			.andExpect(model().attributeExists("connections"));, +		mockMvc.perform(get("/connect/oauth2Provider")), +			.andExpect(view().name("connect/oauth2ProviderConnect"));, +	}, +	, +	@Test, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static java.util.Arrays.*;, +import java.util.HashSet;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +	public void connectionStatus() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		connectionRepository.addConnection(connectionFactory1.createConnection(new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		mockMvc.perform(get("/connect")), +			.andExpect(view().name("connect/status")), +			.andExpect(model().attribute("providerIds", new HashSet<String>(asList("oauth1Provider", "oauth2Provider")))), +			.andExpect(model().attributeExists("connectionMap"));, +		, +		mockMvc.perform(get("/connect/oauth1Provider")), +			.andExpect(view().name("connect/oauth1ProviderConnected")), +			.andExpect(model().attributeExists("connections"));, +		mockMvc.perform(get("/connect/oauth2Provider")), +			.andExpect(view().name("connect/oauth2ProviderConnect"));, +	}, +	, +	@Test, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi1> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +		return providerIdConnectionMap;, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static java.util.Arrays.*;, +import java.util.HashSet;, +import org.springframework.social.connect.web.test.TestApi1;, +import org.springframework.social.connect.web.test.TestApi2;, +		ConnectionFactory<TestApi2> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +	public void connectionStatus() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi1> connectionFactory1 = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory1);				, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		connectionRepository.addConnection(connectionFactory1.createConnection(new ConnectionData("oauth1Provider", "provider1User1", null, null, null, null, null, null, null)));, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		mockMvc.perform(get("/connect")), +			.andExpect(view().name("connect/status")), +			.andExpect(model().attribute("providerIds", new HashSet<String>(asList("oauth1Provider", "oauth2Provider")))), +			.andExpect(model().attributeExists("connectionMap"));]