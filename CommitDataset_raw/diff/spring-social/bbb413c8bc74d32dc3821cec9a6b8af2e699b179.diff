[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, +            @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, +            @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, +            @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., +    public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, +            @Value("${security.encryptSalt}") String salt) {, +        <constructor-arg value="${twitter.consumerKey}" />, +        <constructor-arg value="${twitter.consumerSecret}" />, +        <constructor-arg value="${facebook.appId}" />, +        <constructor-arg value="${facebook.appSecret}" />, +        <constructor-arg value="${tripit.consumerKey}" />, +        <constructor-arg value="${tripit.consumerSecret}" />, +            <constructor-arg value="${security.encryptPassword}" />, +            <constructor-arg value="${security.encryptSalt}" />, +    public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +    <constructor-arg value="${application.url}" />, +			Here the URL is specified as a placeholder variable., +public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Milestone 2 (Feb 25, 2011), +++ b/docs/src/reference/docbook/connecting.xml, +    public TwitterServiceProvider twitter(@Value("${twitter.consumerKey}") String consumerKey,, +            @Value("${twitter.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +    public FacebookServiceProvider facebook(@Value("${facebook.appId}") String appId,, +            @Value("${facebook.appSecret}") String appSecret, ConnectionRepository connectionRepository) {, +    public TripItServiceProvider tripit(@Value("${tripit.consumerKey}") String consumerKey,, +            @Value("${tripit.consumerSecret}") String consumerSecret, ConnectionRepository connectionRepository) {, +			Here, the consumer key and secret are provided to the <methodname>twitter()</methodname> method as placeholder variables to be resolved by Spring's property placeholder support., +    public TextEncryptor textEncryptor(@Value("${security.encryptPassword}") String password,, +            @Value("${security.encryptSalt}") String salt) {, +        <constructor-arg value="${twitter.consumerKey}" />, +        <constructor-arg value="${twitter.consumerSecret}" />, +        <constructor-arg value="${facebook.appId}" />, +        <constructor-arg value="${facebook.appSecret}" />, +        <constructor-arg value="${tripit.consumerKey}" />, +        <constructor-arg value="${tripit.consumerSecret}" />, +            <constructor-arg value="${security.encryptPassword}" />, +            <constructor-arg value="${security.encryptSalt}" />, +    public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +    <constructor-arg value="${application.url}" />, +			Here the URL is specified as a placeholder variable., +public ConnectController connectController(@Value("${application.url}") String applicationUrl) {, +++ b/docs/src/reference/docbook/signin.xml, +			<classname>TwitterSigninController</classname>'s constructor is annotated with <code>@Inject</code>, so it's not necessary to explicitly wire any of its arguments except for the application URL., +			Optimizing the configuration for autowiring, the <classname>TwitterSigninController</classname> bean looks like this: , +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +					<listitem>, +						<para>, +							If the received access token doesn't match any existing connection, <classname>TwitterSigninController</classname> will redirect to a signup URL. , +							The default signup URL is "/signup" (relative to the application root)., +						</para>, +					</listitem>, +		<para>, +			<classname>FacebookSigninController</classname>'s constructor is annotated with <code>@Inject</code>, so it is not necessary to explicitly wire these dependencies., +			The <classname>FacebookSigninController</classname> configuration optimized for autowiring takes a simpler form:, +		</para>, +, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.facebook.web.FacebookSigninController"/>]]>, +		</programlisting>, +<facebook:init appId="@facebookProvider.appId" />]]>, +			The <code><![CDATA[<facebook:init>]]></code> will initialize the Facebook JavaScript library with your application's App ID., +			Here the App ID is specified using the Spring Expression Langauge to be the value of the <code>appId</code> property of the bean whose ID is "facebookProvider"., +, +	, +	<section xml:id="signin_signup">, +		<title>Signing up after a failed sign in</title>, +		, +		<para>, +			With both <classname>TwitterSigninController</classname> and <classname>FacebookSigninController</classname>, the flow will redirect to a signup page if no connection can be found for the obtained access token., +			By default, the signup URL is "/signup", relative to the application root., +			You can override that default by setting the <code>signupUrl</code> property on the controller., +			For example, the following configuration of <classname>TwitterSigninController</classname> sets the signup URL to "/newUser":, +		</para>, +		, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +    <constructor-arg value="http://localhost:8080/myapplication" />, +    <property name="signupUrl" value="/newUser" />, +</bean>]]>, +		</programlisting>, +		, +		<para>, +			Before the signin controller redirects the user to the signup URL, it places an instance of <interfacename>ProviderSignInAttempt</interfacename> in the session. ]