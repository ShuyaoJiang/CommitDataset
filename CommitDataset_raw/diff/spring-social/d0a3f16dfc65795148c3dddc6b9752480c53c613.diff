[+++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Template.java, +		return getTokenFromProvider(requestTokenParameters, requestTokenUrl, null);, +		return getTokenFromProvider(accessTokenParameters, accessTokenUrl, requestToken.getSecret());, +	private OAuthToken getTokenFromProvider(Map<String, String> tokenRequestParameters, String tokenUrl,, +			String tokenSecret) {, +		String authHeader = buildAuthorizationHeader(tokenUrl, parameters, HttpMethod.POST, tokenSecret);, +		RestTemplate restTemplate = new RestTemplate();, +		ResponseEntity<String> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, String.class);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Template.java, +		return getTokenFromProvider(requestTokenParameters, requestTokenUrl, null);, +		return getTokenFromProvider(accessTokenParameters, accessTokenUrl, requestToken.getSecret());, +	private OAuthToken getTokenFromProvider(Map<String, String> tokenRequestParameters, String tokenUrl,, +			String tokenSecret) {, +		String authHeader = buildAuthorizationHeader(tokenUrl, parameters, HttpMethod.POST, tokenSecret);, +		RestTemplate restTemplate = new RestTemplate();, +		ResponseEntity<String> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, String.class);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuthToken.java, + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Template.java, +		return getTokenFromProvider(requestTokenParameters, requestTokenUrl, null);, +		return getTokenFromProvider(accessTokenParameters, accessTokenUrl, requestToken.getSecret());, +	private OAuthToken getTokenFromProvider(Map<String, String> tokenRequestParameters, String tokenUrl,, +			String tokenSecret) {, +		String authHeader = buildAuthorizationHeader(tokenUrl, parameters, HttpMethod.POST, tokenSecret);, +		RestTemplate restTemplate = new RestTemplate();, +		ResponseEntity<String> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, String.class);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuthToken.java, + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/AccessToken.java, + * Holds an OAuth token and secret., + * Used for both the request token and access token., + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Template.java, +		return getTokenFromProvider(requestTokenParameters, requestTokenUrl, null);, +		return getTokenFromProvider(accessTokenParameters, accessTokenUrl, requestToken.getSecret());, +	private OAuthToken getTokenFromProvider(Map<String, String> tokenRequestParameters, String tokenUrl,, +			String tokenSecret) {, +		String authHeader = buildAuthorizationHeader(tokenUrl, parameters, HttpMethod.POST, tokenSecret);, +		RestTemplate restTemplate = new RestTemplate();, +		ResponseEntity<String> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, String.class);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuthToken.java, + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/AccessToken.java, + * Holds an OAuth token and secret., + * Used for both the request token and access token., + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Template.java, +		return getTokenFromProvider(requestTokenParameters, requestTokenUrl, null);, +		return getTokenFromProvider(accessTokenParameters, accessTokenUrl, requestToken.getSecret());, +	private OAuthToken getTokenFromProvider(Map<String, String> tokenRequestParameters, String tokenUrl,, +			String tokenSecret) {, +		String authHeader = buildAuthorizationHeader(tokenUrl, parameters, HttpMethod.POST, tokenSecret);, +		RestTemplate restTemplate = new RestTemplate();, +		ResponseEntity<String> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, String.class);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuthToken.java, + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/AccessToken.java, + * Holds an OAuth token and secret., + * Used for both the request token and access token., + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/AbstractServiceProvider.java, + * @param <S> The service API hosted by this service provider., +	public abstract AuthorizationProtocol getAuthorizationProtocol();, +, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuth1Template.java, +		return getTokenFromProvider(requestTokenParameters, requestTokenUrl, null);, +		return getTokenFromProvider(accessTokenParameters, accessTokenUrl, requestToken.getSecret());, +	private OAuthToken getTokenFromProvider(Map<String, String> tokenRequestParameters, String tokenUrl,, +			String tokenSecret) {, +		String authHeader = buildAuthorizationHeader(tokenUrl, parameters, HttpMethod.POST, tokenSecret);, +		RestTemplate restTemplate = new RestTemplate();, +		ResponseEntity<String> response = restTemplate.exchange(tokenUrl, HttpMethod.POST, request, String.class);, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth1/OAuthToken.java, + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/AccessToken.java, + * Holds an OAuth token and secret., + * Used for both the request token and access token., + * The secret is null for OAuth2-based connections., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/oauth2/OAuth2ServiceProvider.java, +	 * @param accessToken an access token granted by the provider., +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/AbstractServiceProvider.java, + * @param <S> The service API hosted by this service provider.]