[+++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +import org.springframework.web.client.test.ResponseCreators;, +	private static final String ACCESS_TOKEN_URL = "http://www.someprovider.com/oauth/accessToken";, +, +		oAuth2Template = new OAuth2Template("client_id", "client_secret", authorizeUrl, ACCESS_TOKEN_URL);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.TEXT_PLAIN);, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oAuth2Template, +				.getRestOperations());, +		mockServer.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(method(POST)), +				.andExpect(body("client_id=client_id&client_secret=client_secret&code=code&" +, +								"redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), +				.andRespond(ResponseCreators.withResponse(new ClassPathResource("accessToken.json", getClass()),, +								responseHeaders));, +		AccessGrant accessGrant = oAuth2Template.exchangeForAccess("code", "http://www.someclient.com/callback");, +		assertEquals("accessToken", accessGrant.getAccessToken());, +		assertEquals("refreshToken", accessGrant.getRefreshToken());, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +import static org.springframework.http.HttpMethod.*;, +import static org.springframework.web.client.test.RequestMatchers.*;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.MediaType;, +import org.springframework.web.client.RestTemplate;, +import org.springframework.web.client.test.MockRestServiceServer;, +import org.springframework.web.client.test.ResponseCreators;, +	private static final String ACCESS_TOKEN_URL = "http://www.someprovider.com/oauth/accessToken";, +, +		oAuth2Template = new OAuth2Template("client_id", "client_secret", authorizeUrl, ACCESS_TOKEN_URL);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.setContentType(MediaType.TEXT_PLAIN);, +		MockRestServiceServer mockServer = MockRestServiceServer.createServer((RestTemplate) oAuth2Template, +				.getRestOperations());, +		mockServer.expect(requestTo(ACCESS_TOKEN_URL)), +				.andExpect(method(POST)), +				.andExpect(body("client_id=client_id&client_secret=client_secret&code=code&" +, +								"redirect_uri=http%3A%2F%2Fwww.someclient.com%2Fcallback&grant_type=authorization_code")), +				.andRespond(ResponseCreators.withResponse(new ClassPathResource("accessToken.json", getClass()),, +								responseHeaders));, +		AccessGrant accessGrant = oAuth2Template.exchangeForAccess("code", "http://www.someclient.com/callback");, +		assertEquals("accessToken", accessGrant.getAccessToken());, +		assertEquals("refreshToken", accessGrant.getRefreshToken());, +++ b/spring-social-core/src/test/resources/org/springframework/social/oauth2/accessToken.json, +access_token=accessToken&refresh_token=refreshToken]