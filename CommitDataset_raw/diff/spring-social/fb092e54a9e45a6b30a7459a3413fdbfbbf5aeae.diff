[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +package org.springframework.social.connect.web;, +, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +import java.util.Set;, +, +import org.junit.Test;, +import org.mockito.ArgumentMatcher;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionData;, +import org.springframework.social.connect.ConnectionFactory;, +import org.springframework.social.connect.ConnectionFactoryLocator;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.connect.UsersConnectionRepository;, +import org.springframework.social.connect.support.OAuth1Connection;, +import org.springframework.social.connect.support.OAuth1ConnectionFactory;, +import org.springframework.social.connect.support.OAuth2Connection;, +import org.springframework.social.connect.support.OAuth2ConnectionFactory;, +import org.springframework.social.oauth1.AuthorizedRequestToken;, +import org.springframework.social.oauth1.OAuth1Operations;, +import org.springframework.social.oauth1.OAuth1Parameters;, +import org.springframework.social.oauth1.OAuth1ServiceProvider;, +import org.springframework.social.oauth1.OAuth1Version;, +import org.springframework.social.oauth1.OAuthToken;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.oauth2.GrantType;, +import org.springframework.social.oauth2.OAuth2Operations;, +import org.springframework.social.oauth2.OAuth2Parameters;, +import org.springframework.social.oauth2.OAuth2ServiceProvider;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.ServletWebRequest;, +import org.springframework.web.servlet.view.RedirectView;, +, +public class ProviderSignInControllerTest {, +, +	@Test, +	public void oauth1Callback_noMatchingUser() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth1provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		, +		MockHttpServletRequest nativeRequest = new MockHttpServletRequest();, +		nativeRequest.addParameter("verifier", "verifier");, +		ServletWebRequest request = new ServletWebRequest(nativeRequest);, +		RedirectView redirect = controller.oauth1Callback("oauth1provider", request);, +		assertEquals("/signup", redirect.getUrl());, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) request.getAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		assertNotNull(signInAttempt);, +		// TODO: Assert attempt contents, +	}, +, +	@Test, +	public void oauth1Callback_noMatchingUser_customSignUpUrl() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth1provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		controller.setSignUpUrl("/register");, +, +		MockHttpServletRequest nativeRequest = new MockHttpServletRequest();, +		nativeRequest.addParameter("verifier", "verifier");, +		ServletWebRequest request = new ServletWebRequest(nativeRequest);, +		RedirectView redirect = controller.oauth1Callback("oauth1provider", request);, +		assertEquals("/register", redirect.getUrl());, +		ProviderSignInAttempt signInAttempt = (ProviderSignInAttempt) request.getAttribute(ProviderSignInAttempt.SESSION_ATTRIBUTE, RequestAttributes.SCOPE_SESSION);, +		assertNotNull(signInAttempt);, +		// TODO: Assert attempt contents, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_noOriginalUrl() {, +		performOAuth1Callback(null, null);, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_noOriginalUrl_withPostSignInUrl() {, +		performOAuth1Callback(null, "/postSignIn");, +	}, +, +	@Test, +	public void oauth1Callback_matchingUser_withOriginalUrl() {, +		performOAuth1Callback("/original", null);, +	}, +	, +	@Test, +	public void oauth2Callback_noMatchingUser() {, +		ConnectionFactoryLocator connectionFactoryLocator = new TestConnectionFactoryLocator();, +		UsersConnectionRepository usersConnectionRepository = new TestUsersConnectionRepository("oauth2provider", null);, +		SignInAdapter signInAdapter = null;, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, signInAdapter);, +		]