[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection., +	 * If the refresh operation is successful, {@link #hasExpired()} returns false., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, this method is a no-op., +	 * This method is a no-op if a status concept is not supported by the service provider., +	 * Sync's this connection object with the current state of the external user's profile., +	 * Used to support the transfer of connection state between layers of the application, such as to the database layer., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection., +	 * If the refresh operation is successful, {@link #hasExpired()} returns false., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, this method is a no-op., +	 * This method is a no-op if a status concept is not supported by the service provider., +	 * Sync's this connection object with the current state of the external user's profile., +	 * Used to support the transfer of connection state between layers of the application, such as to the database layer., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +/**, + * A data transfer object that allows the internal state of a ServiceProviderConnection to be persisted and transferred between layers of an application., + * Some fields may be null depending on the specific type of ServiceProviderConnection., + * For example, an OAuth2ServiceProviderConnection has a null 'secret' field while an OAuth1ServiceProviderConnection has null 'refreshToken' and 'expireTime' fields., + * @author Keith Donald, + * @see ServiceProviderConnection#createData(), + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection., +	 * If the refresh operation is successful, {@link #hasExpired()} returns false., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, this method is a no-op., +	 * This method is a no-op if a status concept is not supported by the service provider., +	 * Sync's this connection object with the current state of the external user's profile., +	 * Used to support the transfer of connection state between layers of the application, such as to the database layer., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionData.java, +/**, + * A data transfer object that allows the internal state of a ServiceProviderConnection to be persisted and transferred between layers of an application., + * Some fields may be null depending on the specific type of ServiceProviderConnection., + * For example, an OAuth2ServiceProviderConnection has a null 'secret' field while an OAuth1ServiceProviderConnection has null 'refreshToken' and 'expireTime' fields., + * @author Keith Donald, + * @see ServiceProviderConnection#createData(), + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +/**, + * Data access interface for saving and restoring ServiceProviderConnection objects from a persistent store., + * @author Keith Donald, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnection.java, + * A link to a service provider user., + * Allows the client application to access or update user information using the provider's API., + * Exposes a set of operations that are common across all service providers, including, + * the ability to {@link #getUser() access user profile information} and {@link #updateStatus(String) update user status}. , + * @param <S> a strongly-typed binding to the service provider's API, +	 * The key that identifies this ServiceProviderConnection., +	 * A composite key that consists of the "providerId" plus "providerUserId"; for example, "facebook" and "125660". , +	 * Information about the user on the provider's system., +	 * Exposes the user's id, profileName, profileUrl, pictureUrl, among other common properties., +	 * If false, indicates calls to the {@link #getServiceApi() serviceApi} will fail., +	 * Used to support proactively test authorization credentials such as an API access token before invoking the service API., +	 * An expired connection cannot be used; calls to {@link #test()} return false, and any service API invocations fail., +	 * If expired, you may call {@link #refresh()} to renew the connection., +	 * Not supported by all ServiceProviderConnection implementations; if not supported, will always return false., +	 * Used to renew an expired connection.]