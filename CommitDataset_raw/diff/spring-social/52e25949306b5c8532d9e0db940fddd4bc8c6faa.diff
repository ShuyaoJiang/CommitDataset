[+++ b/docs/src/reference/docbook/serviceprovider.xml, +			The API can be used to access and update user data on the provider's system., +			To put this framework into action, consider Twitter as an example ServiceProvider., +	<section id="service-providers-establishing-connections">, +		<para>, +			So far we have discussed how existing connections are managed using the ServiceProvider framework, but we have not yet discussed how new connections are established., +			The manner in which connections between local user accounts and external provider accounts are established varies based on the authorization protocol used by the ServiceProvider., +			Some service providers use OAuth, others use Basic Auth, others may require something else., +			Spring Social currently provides native support for OAuth-based service providers, including support for OAuth 1 and OAuth 2., +			This covers the leading social networks, such as Facebook and Twitter, all of which use OAuth to secure their APIs., +			Support for other authorization protocols can be added by extending the framework., +		</para>, +		<para>, +			Because each authorization protocol is different, protocol-specific details are kept out of the base ServiceProvider interface., +			Sub-interfaces have been defined for each protocol, reflecting a distinct ServiceProvider type., +			In the following sections, we will discuss each type of ServiceProvider supported by the framework., +			Each section will also describe the protocol-specific flow required to establish a new connection., +		</para>, +		<section id="service-providers-oauth2">, +			<title>OAuth2 Service Providers</title>, +			<programlisting language="java"><![CDATA[, +public interface OAuth2ServiceProvider<S> extends ServiceProvider<S> {, +    OAuth2Operations getOAuthOperations();, +    ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessGrant);, +}]]>, +			</programlisting>, +			<programlisting language="java"><![CDATA[, +public interface OAuth2Operations {, +    String buildAuthorizeUrl(String redirectUri, String scope);, +    AccessGrant exchangeForAccess(String authorizationGrant, String redirectUri);, +, +}]]>, +			</programlisting>			, +			<para>, +				The OAuth 2 flow is illustrated below:, +			</para>, +					<imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="70"/>, +					<imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="0"/>, +      		<para>, +				As you can see, there is a back-and-forth conversation that takes place between the consumer and the service provider to establish authorization for the consumer., +				This exchange, commonly known as the "OAuth Dance", follows these steps:, +			</para>, +			<orderedlist>, +				<listitem><para>The flow starts with the consumer redirecting the user's browser to the provider's authorization page. Unlike OAuth 1, there is no concept of request token in OAuth 2.</para></listitem>, +				<listitem><para>The service provider prompts the user to authorize the consumer application and the user agrees. (As with OAuth 1, this is the only step where the user participates in the flow.)</para></listitem>, +				<listitem><para>The service provider redirects the user's browser to the consumer's redirect URI, with an authorization code as a parameter.</para></listitem>, +				<listitem><para>The consumer exchanges the authorization code for an access token.</para></listitem>, +				<listitem><para>The service provider issues an access token to the consumer. The "dance" is complete.</para></listitem>, +				<listitem><para>The consumer makes calls against the service API, passing the access token along as evidence of its right to access the provider on behalf of the user.</para></listitem>, +			</orderedlist>, +		</section>, +		<section id="service-providers-oauth1">, +			<title>OAuth1 Service Providers</title>, +			<programlisting language="java"><![CDATA[, +public interface OAuth1ServiceProvider<S> extends ServiceProvider<S> {, +    OAuth1Operations getOAuthOperations();, +    ServiceProviderConnection<S> connect(Serializable accountId, OAuthToken accessToken);, +, +}]]>, +			</programlisting>, +			<programlisting language="java"><![CDATA[, +public interface OAuth1Operations {, +, +    OAuthToken fetchNewRequestToken(String callbackUrl);, +, +    String buildAuthorizeUrl(String requestToken);, +, +    OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken);, +, +}]]>, +			</programlisting>			, +			<para>, +				The OAuth 1 flow is illustrated below:, +			</para>, +			<mediaobject>, +				<imageobject role="fo">, +					<imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="70"/>, +				</imageobject>, +				<imageobject role="html">, +					<imagedata fileref="images/oauth1_flow.png" format="PNG" align="center" scale="0"/>, +				</imageobject>, +			</mediaobject>, +		</section>, +		<para>, +			Generally, application code will not work with these interfaces directly., +			Instead, you'll leverage Spring Social's <classname>ConnectController</classname> (see <xref linkend="connecting"/>) to handle the authorization flow for you., +			You may, however, use the <methodname>getConnections()</methodname> to access the service API for a given connection. This will be covered in more detail in <xref linkend="apis"/>., +		</para>]