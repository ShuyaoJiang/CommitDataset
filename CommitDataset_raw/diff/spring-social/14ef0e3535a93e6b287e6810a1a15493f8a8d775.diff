[+++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a connection repository through which account-to-provider connections will be stored -->	, +	, +	<!-- Configure a service provider factory from which service providers may be retrieved by name, +	     (used primarily by ConnectController)., +	     In this case, service providers are retrieved as beans from the Spring application context., +	     <social:jdbc-service-provider-factory> retrieves them through JDBC.  , +	     -->, +	<social:context-service-provider-factory />, +	, +	<!-- Configure a Twitter service provider -->, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a connection repository through which account-to-provider connections will be stored -->	, +	, +	<!-- Configure a service provider factory from which service providers may be retrieved by name, +	     (used primarily by ConnectController)., +	     In this case, service providers are retrieved as beans from the Spring application context., +	     <social:jdbc-service-provider-factory> retrieves them through JDBC.  , +	     -->, +	<social:context-service-provider-factory />, +	, +	<!-- Configure a Twitter service provider -->, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/ContextServiceProviderFactoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.social.connect.jdbc.ContextServiceProviderFactory;, +import org.w3c.dom.Element;, +, +public class ContextServiceProviderFactoryElementParser implements BeanDefinitionParser {, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder, +				.genericBeanDefinition(ContextServiceProviderFactory.class);, +		AbstractBeanDefinition beanDefinition = beanBuilder.getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition("serviceProviderFactory", beanDefinition);, +		return beanDefinition;, +	}, +}, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/resources/org/springframework/social/samples/twitter/db/ConnectedAccount.sql, +					primary key (member, provider, accessToken));, +++ /dev/null, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml, +		<constructor-arg ref="serviceProviderFactory" />, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/data.xml, +++ b/samples/twitter-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<!-- Configure a connection repository through which account-to-provider connections will be stored -->	, +	, +	<!-- Configure a service provider factory from which service providers may be retrieved by name, +	     (used primarily by ConnectController)., +	     In this case, service providers are retrieved as beans from the Spring application context., +	     <social:jdbc-service-provider-factory> retrieves them through JDBC.  , +	     -->, +	<social:context-service-provider-factory />, +	, +	<!-- Configure a Twitter service provider -->, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/config/ContextServiceProviderFactoryElementParser.java, +package org.springframework.social.connect.config;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;]