[+++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String connectionSignUpRef) {, +		BeanDefinitionBuilder usersConnectionRepositoryBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef);, +		if (connectionSignUpRef != null && connectionSignUpRef.length() > 0) {, +			usersConnectionRepositoryBeanBuilder.addPropertyReference("connectionSignUp", connectionSignUpRef);, +		}, +		BeanDefinition usersConnectionRepositoryBD = usersConnectionRepositoryBeanBuilder.getBeanDefinition();, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String connectionSignUpRef) {, +		BeanDefinitionBuilder usersConnectionRepositoryBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcUsersConnectionRepository.class), +				.addConstructorArgReference(encryptorRef);, +		if (connectionSignUpRef != null && connectionSignUpRef.length() > 0) {, +			usersConnectionRepositoryBeanBuilder.addPropertyReference("connectionSignUp", connectionSignUpRef);, +		}, +		BeanDefinition usersConnectionRepositoryBD = usersConnectionRepositoryBeanBuilder.getBeanDefinition();, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionSignUpRef = element.getAttribute("connection-signup-ref");, +		return registerJdbcConnectionRepositoryBeans(parserContext.getRegistry(), connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/infinitest.filters, +org.springframework.social.config.xml.SocialConfigNamespaceTest, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/EnableJdbcConnectionRepository.java, +import org.springframework.social.connect.ConnectionSignUp;, +	, +	/**, +	 * Reference to {@link ConnectionSignUp} bean to execute to create a new local user profile in the event no user id could be mapped to a connection., +	 * Allows for implicitly creating a user profile from connection data during a provider sign-in attempt., +	 * Defaults to null, indicating explicit sign-up will be required to complete the provider sign-in attempt., +	 */, +	String connectionSignUpRef() default "";, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/JdbcConnectionRepositoryRegistrar.java, +		String connectionSignUpRef = attributes.getString("connectionSignUpRef");, +		registerJdbcConnectionRepositoryBeans(registry, connectionRepositoryId, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, userIdSourceRef, connectionSignUpRef);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/support/JdbcConnectionRepositoryConfigSupport.java, +			String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef, String userIdSourceRef, String connectionSignUpRef) {, +		registerUsersConnectionRepositoryBeanDefinition(registry, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef, connectionSignUpRef);]