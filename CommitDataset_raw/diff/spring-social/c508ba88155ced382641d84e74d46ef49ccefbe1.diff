[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * Construct the URL to redirect the user to for authorization via OAuth2's "Authorization Code Grant"., +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */ , +	String buildAuthorizeUrl(OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication via OAuth2's "Authorization Code Grant"., +	 * The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * This provides a better user experience for "Sign in with Provider" scenarios., +	 * @param parameters authorization parameters needed to build the URL , +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */ , +	String buildAuthenticateUrl(OAuth2Parameters parameters);, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * Construct the URL to redirect the user to for authorization via OAuth2's "Authorization Code Grant"., +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */ , +	String buildAuthorizeUrl(OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication via OAuth2's "Authorization Code Grant"., +	 * The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * This provides a better user experience for "Sign in with Provider" scenarios., +	 * @param parameters authorization parameters needed to build the URL , +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */ , +	String buildAuthenticateUrl(OAuth2Parameters parameters);, +	, +	/**, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(OAuth2Parameters parameters) {, +		return buildAuthUrl(authorizeUrl, GrantType.AUTHORIZATION_CODE, parameters);, +	}, +	, +	public String buildAuthenticateUrl(OAuth2Parameters parameters) {, +		return authenticateUrl != null ? buildAuthUrl(authenticateUrl, GrantType.AUTHORIZATION_CODE, parameters) : buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE, parameters);, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, + * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., + *             Therefore, the GrantType enum and methods that accept it do not make sense., +@Deprecated, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthorizeUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * @deprecated Use of implicit grant doesn't make sense in any of the contexts where Spring Social is supported (web server or mobile Android client)., +	 *             Therefore, the GrantType enum and methods that accept it do not make sense., +	 *             Use {@link #buildAuthenticateUrl(OAuth2Parameters)} instead., +	@Deprecated, +	 * Construct the URL to redirect the user to for authorization via OAuth2's "Authorization Code Grant"., +	 * @param parameters authorization parameters needed to build the URL, +	 * @return the absolute authorize URL to redirect the user to for authorization, +	 */ , +	String buildAuthorizeUrl(OAuth2Parameters parameters);, +, +	/**, +	 * Construct the URL to redirect the user to for authentication via OAuth2's "Authorization Code Grant"., +	 * The authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * This provides a better user experience for "Sign in with Provider" scenarios., +	 * @param parameters authorization parameters needed to build the URL , +	 * @return the absolute authenticate URL to redirect the user to for authorization, +	 */ , +	String buildAuthenticateUrl(OAuth2Parameters parameters);, +	, +	/**]