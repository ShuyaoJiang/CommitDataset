[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private Class<?> apiConfigClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, +		this.apiConfigClass = apiConfigClass;	, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	private BeanDefinition addApiBindingBean(ParserContext parserContext) {, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(apiConfigClass).getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(ClassUtils.getShortNameAsProperty(apiConfigClass), beanDefinition);, +		return null;, +	}, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private Class<?> apiConfigClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, +		this.apiConfigClass = apiConfigClass;	, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	private BeanDefinition addApiBindingBean(ParserContext parserContext) {, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(apiConfigClass).getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(ClassUtils.getShortNameAsProperty(apiConfigClass), beanDefinition);, +		return null;, +	}, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookConnectionFactoryBeanDefinitionParser.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.facebook.api.Facebook;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +		super(FacebookConnectionFactory.class, FacebookApiConfig.class);, +	}, +, +	private static final class FacebookApiConfig {, +		@Bean, +		@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES), +		public Facebook facebook(ConnectionRepository connectionRepository) {, +			Connection<Facebook> facebook = connectionRepository.findPrimaryConnection(Facebook.class);, +			return facebook != null ? facebook.getApi() : new FacebookTemplate();, +		}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.util.ClassUtils;, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private Class<?> apiConfigClass;, +	protected AbstractConnectionFactoryBeanDefinitionParser(Class<? extends ConnectionFactory<?>> connectionFactoryClass, Class<?> apiConfigClass) {, +		this.apiConfigClass = apiConfigClass;	, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	private BeanDefinition addApiBindingBean(ParserContext parserContext) {, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(apiConfigClass).getBeanDefinition();, +		parserContext.getRegistry().registerBeanDefinition(ClassUtils.getShortNameAsProperty(apiConfigClass), beanDefinition);, +		return null;, +	}, +	, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/FacebookConnectionFactoryBeanDefinitionParser.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.facebook.api.Facebook;, +import org.springframework.social.facebook.api.impl.FacebookTemplate;, +		super(FacebookConnectionFactory.class, FacebookApiConfig.class);, +	}, +, +	private static final class FacebookApiConfig {, +		@Bean, +		@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES), +		public Facebook facebook(ConnectionRepository connectionRepository) {, +			Connection<Facebook> facebook = connectionRepository.findPrimaryConnection(Facebook.class);, +			return facebook != null ? facebook.getApi() : new FacebookTemplate();, +		}, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/TwitterConnectionFactoryBeanDefinitionParser.java, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.social.twitter.api.Twitter;, +import org.springframework.social.twitter.api.impl.TwitterTemplate;, +		super(TwitterConnectionFactory.class, TwitterApiConfig.class);, +	}, +, +	private static final class TwitterApiConfig {		, +		@Bean, +		@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES), +		public Twitter twitter(ConnectionRepository connectionRepository) {, +			Connection<Twitter> twitter = connectionRepository.findPrimaryConnection(Twitter.class);, +			return twitter != null ? twitter.getApi() : new TwitterTemplate();, +		}		, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java]