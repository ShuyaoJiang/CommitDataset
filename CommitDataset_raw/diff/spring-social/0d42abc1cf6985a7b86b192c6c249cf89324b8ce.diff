[+++ b/docs/src/reference/docbook/serviceprovider.xml, +		<title>Core API</title>, +			The <interfacename>ServiceProviderConnection&lt;S&gt;</interfacename> interface models a connection to an external service provider such as Facebook:, +    ServiceProviderConnectionKey getKey();, +    , +    String getDisplayName();, +, +    String getProfileUrl();, +, +    String getImageUrl();, +, +    void sync();, +, +    boolean test();, +, +    boolean hasExpired();, +, +    void refresh();, +, +    ServiceProviderUserProfile fetchUserProfile();, +, +    void updateStatus(String message);, +, +    ServiceProviderConnectionData createData();, +			Each ServiceProviderConnection is uniquely identified by a composite key consisting of a providerId (e.g. 'facebook') and connected providerUserId (e.g. '1255689239', for Keith Donald's Facebook ID)., +			This key tells you what provider user the connection is connected to., +			A connection has a number of meta-properties that can be used to render it on a screen, including a displayName, profileUrl, and imageUrl., +			As an example, the following HTML template snippet could be used to generate a link to the connected user's profile on the provider's site:, +			<programlisting language="xml"><![CDATA[, +<img src="${connection.imageUrl}" /> <a href="${connection.profileUrl}">${connection.displayName}</a>Ã¥]]>			, +			</programlisting>, +			The value of these properties may depend on the state of the provider user's profile., +			In this case, sync() can be used to synchronize these values if the user's profile is updated., +			A connection can be tested to determine if its authorization credentials are valid., +			If invalid, the connection may have expired or been revoked by the provider., +			If the connection has expired, a connection may be refreshed to renew its authorization credentials., +		</para>, +		<para>, +			A connection provides several operations that allow the client application to invoke the ServiceProvider's API in a uniform way., +			This includes the ability to fetch a model of the user's profile and update the user's status in the provider's system., +		</para>, +		<para>, +			A connection's parameterized type &lt;S&gt; represents the Java binding to the ServiceProvider's native API., +			An instance of this API binding can be obtained by calling <code>getServiceApi()</code>., +			As an example, a Facebook connection instance would be parameterized as ServiceProviderConnection&lt;FacebookApi&gt;., +			<code>getServiceApi()</code> would return a FacebookApi instance that provides a Java binding to Facebook's graph API for a specific Facebook user., +		</para>, +		<para>, +			Finally, the internal state of a connection can be captured for transfer between layers of your application by calling <code>createData()</code>., +			This could be used to persist the connection in a database, or serialize it over the network., +		</para>, +		<para>, +			To put this model into action, suppose we have a reference to a ServiceProviderConnection&lt;TwitterApi&gt; instance., +			Suppose the connected user is the Twitter user with screen name 'kdonald'., +				<listitem><para>ServiceProviderConnection#getKey() would return ('twitter', '14718006') where '14718006' is @kdonald's Twitter-assigned user id that never changes.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getDisplayName() would return '@kdonald'.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getProfileUrl() would return 'http://twitter.com/kdonald'.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getImageUrl() would return 'http://a0.twimg.com/profile_images/105951287/IMG_5863_2_normal.jpg'.</para></listitem>, +				<listitem><para>ServiceProviderConnection#sync() would synchronize the state of the connection with @kdonald's profile.</para></listitem>				, +				<listitem>, +					<para>, +						ServiceProviderConnection#test() would return true indicating the authorization credentials associated with the Twitter connection are valid., +						This assumes Twitter has not revoked the AcmeApp client application, and @kdonald has not reset his authorization credentials (Twitter connections do not expire)., +					</para>, +				</listitem>, +				<listitem><para>ServiceProviderConnection#hasExpired() would return false.</para></listitem>, +				<listitem><para>ServiceProviderConnection#refresh() would not do anything since connections to Twitter do not expire.</para></listitem>, +				<listitem><para>ServiceProviderConnection#fetchUserProfile() would make a remote API call to Twitter to get @kdonald's profile data and normalize it into a ServiceProviderUser model.</para></listitem>, +				<listitem><para>ServiceProviderConnection#updateStatus(String) would post a status update to @kdonald's timeline.</para></listitem>, +				<listitem><para>ServiceProviderConnection#getServiceApi() would return a TwitterApi giving the client application access to the full capabilities of Twitter's native API.</para></listitem>, +				<listitem><para>ServiceProviderConnection#createData() would return a ServiceProviderConnectionData that could be serialized and used to restore the connection at a later time.</para></listitem>, +			So far we have discussed how existing connections are modeled, but we have not yet discussed how new connections are established., +			The manner in which connections between local users and provider users are established varies based on the authorization protocol used by the ServiceProvider., +			Each authorization protocol is treated as an implementation detail where protocol-specifics are kept out of the core ServiceProviderConnection API., +			A ServiceProviderConnectionFactory abstraction encapsulates the construction of connections that use a specific authorization protocol., +			In the following sections, we will discuss the major ServiceProviderConnectionFactory classes provided by the framework., +				OAuth 2 is rapidly becoming a preferred authorization protocol, and is used by major service providers such as Facebook, Github, Foursquare, Gowalla, and 37signals., +				In Spring Social, a OAuth2ServiceProviderConnectionFactory is used to establish connections with a OAuth2-based service provider:, +public class OAuth2ServiceProviderConnectionFactory<S> extends ServiceProviderConnectionFactory<S> {, +    public OAuth2Operations getOAuthOperations();, +    public ServiceProviderConnection<S> createConnection(AccessGrant accessGrant);, +			</para>, +				The result of this flow is an <classname>AccessGrant</classname> that can be used to establish a connection with a local user account by calling <methodname>createConnection</methodname>., +    String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +    AccessGrant exchangeForAccess(String authorizationCode, String redirectUri, MultiValueMap<String, String> additionalParameters);, +				Callers are first expected to call buildAuthorizeUrl(GrantType, AuthorizationParameters) to construct the URL to redirect the user to for connection authorization., +				Upon user authorization, the authorizationCode returned by the provider should be exchanged for an AccessGrant., +			<para>, +			 	The example code below shows use of a FacebookServiceProviderConnectionFactory to create a connection to Facebook using the OAuth2 server-side flow illustrated above., +				Here, FacebookServiceProviderConnectionFactory is a subclass of OAuth2ServiceProviderConnectionFactory:, +				<programlisting language="java"><![CDATA[, +FacebookServiceProviderConnectionFactory connectionFactory = new FacebookServiceProviderConnectionFactory();, +String authorizeUrl = connectionFactory.getOAuth2Operations().buildAuthorizeUrl(GrantType.AUTHORIZATION_CODE,, +                          new AuthorizationParameters("http://acmeapp.com/callbackUrl"));, +response.sendRedirect(authorizeUrl);, +// when the provider callback is received with the authorizationCode parameter:, +AccessGrant accessGrant = connectionFactory.getOAuth2Operations().exchangeForAccess(authorizationCode);, +ServiceProviderConnection<FacebookApi> connection = connectionFactory.createConnection(accessGrant);]]>, +				</programlisting>, +			</para>]