[+++ b/docs/src/reference/docbook/overview.xml, +    <para>The Spring Social project enables your applications to establish Connections with Software-as-a-Service (SaaS) Providers such as Facebook and Twitter to invoke Service APIs on behalf of Users.</para>, +      <para>What makes these applications a little different than traditional applications is that the data that they collect represent some facet of their users' lives. What's more, these applications are more than willing to share that data with other applications, as long as the user gives permission to do so. This means that although these social networks are great at bringing people together, as software services they also excel at bringing applications together.</para>, +      <para>To illustrate, imagine that Paul is a member of an online movie club. A function of the movie club application is to recommend movies for its members to watch and to let its members maintain a list of movies that they have seen and those that they plan to see. When Paul sees a movie, he signs into the movie club site, checks the movie off of his viewing list, and indicates if he liked the movie or not. Based on his responses, the movie club application can tailor future recommendations for Paul to see.</para>, +      <para>In the narrative above, Facebook is the service provider, the movie club application is the service consumer, and Paul is the user of both. The movie club application may interact with Facebook on behalf of Paul, accessing whatever Facebook data and functionality that Paul permits, including seeing Paul's list of friends and posting messages to his Facebook wall.</para>, +      <para>With Spring Social, your application can play the part of the service consumer, interacting with a service provider on behalf of its users. The key features of Spring Social are:</para>, +          <listitem><para>A "Connect Framework that handles the core authorization and connection flow with Service Providers.</para></listitem>, +          <listitem><para>A "Connect Controller" that handles the OAuth exchange between a service provider, consumer, and user in a web application environment.</para></listitem>, +          <listitem><para>Java bindings to popular service provider APIs including Facebook, Twitter, LinkedIn, TripIt, GitHub, and Gowalla.</para></listitem>, +          <listitem><para>A "Signin Controller" that allows users to authenticate with your application by signing in with their Provider accounts, such as their Twitter or Facebook accounts.</para></listitem>, +              <entry>Spring Social's ServiceProvider connect framework and OAuth client support.</entry>, +              <entry>Spring Social's <classname>ConnectController</classname> which uses the ServiceProvider framework to manage connections in a web application environment.</entry>, +              <entry>Spring Social's Facebook API binding</entry>, +              <entry>Spring Social's Twitter API binding.</entry>, +              <entry>Spring Social's LinkedIn API binding.</entry>, +              <entry>Spring Social's GitHub API binding.</entry>, +              <entry>Spring Social's Gowalla API binding.</entry>, +              <entry>Spring Social's TripIt API binding.</entry>, +              <entry>Support for testing ServiceProvider implementations and API bindings.</entry>, +	  <para>The remaining modules are elective, depending on which of the supported service providers you intend for your application to interact with. For example, you'll only need the GitHub module if your application needs to invoke the Github API:</para>, +			If you are developing against a milestone version, such as 1.0.0.M3, you will need to add the following repository in order to resolve the artifact:]