[+++ b/docs/src/reference/docbook/apis.xml, +				The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name and their Facebook ID., +				Depending on what authorization scope has been granted to the application, it may also include additional details about the user such as their email address, birthday, hometown, and religious and political affiliations., +				For example, <methodname>getBirthday()</methodname> will return the current user's birthday if the application has been granted "user_birthday" permission; null otherwise., +				Consult the JavaDoc for <classname>FacebookProfile</classname> for details on which permissions are required for each property., +			<title>Posting to and reading feeds</title>, +				To post a message to the user's Facebook wall, call <interfacename>FeedOperations</interfacename>' <methodname>updateStatus()</methodname> method, passing in the message to be posted:, +				If you want to read posts from a user's feed, <interfacename>FeedOperations</interfacename> has several methods to choose from., +				The <methodname>getFeed()</methodname> method retrieves recent posts to a user's wall., +				When called with no parameters, it retrieves posts from the authenticating user's wall:, +List<Post> feed = facebookApi.feedOperations().getFeed();]]>, +				Or you can read a specific user's wall by passing their Facebook ID to <methodname>getFeed()</methodname>:, +			<programlisting language="java"><![CDATA[, +List<Post> feed = facebookApi.feedOperations().getFeed("habuma");]]>, +			</programlisting>, +, +				In any event, the <methodname>getFeed()</methodname> method returns a list of <classname>Post</classname> objects., +				The <classname>Post</classname> class has six subtypes to represent different kinds of posts:, +			</para>, +			, +			<itemizedlist>, +				<listitem><para><classname>CheckinPost</classname> - Reports a user's checkin in Facebook Places.</para></listitem>, +				<listitem><para><classname>LinkPost</classname> - Shares a link the user has posted.</para></listitem>, +				<listitem><para><classname>NotePost</classname> - Publicizes a note that the user has written.</para></listitem>, +				<listitem><para><classname>PhotoPost</classname> - Announces a photo that the user has uploaded.</para></listitem>, +				<listitem><para><classname>StatusPost</classname> - A simple status.</para></listitem>, +				<listitem><para><classname>VideoPost</classname> - Announces a video that the user has uploaded.</para></listitem>, +			</itemizedlist>, +			, +			<para>, +				The <classname>Post</classname>'s <methodname>getType()</methodname> method identifies the type of <classname>Post</classname>., +++ b/docs/src/reference/docbook/apis.xml, +				The <classname>FacebookProfile</classname> object will contain basic profile information about the authenticating user, including their first and last name and their Facebook ID., +				Depending on what authorization scope has been granted to the application, it may also include additional details about the user such as their email address, birthday, hometown, and religious and political affiliations., +				For example, <methodname>getBirthday()</methodname> will return the current user's birthday if the application has been granted "user_birthday" permission; null otherwise., +				Consult the JavaDoc for <classname>FacebookProfile</classname> for details on which permissions are required for each property., +			<title>Posting to and reading feeds</title>, +				To post a message to the user's Facebook wall, call <interfacename>FeedOperations</interfacename>' <methodname>updateStatus()</methodname> method, passing in the message to be posted:, +				If you want to read posts from a user's feed, <interfacename>FeedOperations</interfacename> has several methods to choose from., +				The <methodname>getFeed()</methodname> method retrieves recent posts to a user's wall., +				When called with no parameters, it retrieves posts from the authenticating user's wall:, +List<Post> feed = facebookApi.feedOperations().getFeed();]]>, +				Or you can read a specific user's wall by passing their Facebook ID to <methodname>getFeed()</methodname>:, +			<programlisting language="java"><![CDATA[, +List<Post> feed = facebookApi.feedOperations().getFeed("habuma");]]>, +			</programlisting>, +, +				In any event, the <methodname>getFeed()</methodname> method returns a list of <classname>Post</classname> objects., +				The <classname>Post</classname> class has six subtypes to represent different kinds of posts:, +			</para>, +			, +			<itemizedlist>, +				<listitem><para><classname>CheckinPost</classname> - Reports a user's checkin in Facebook Places.</para></listitem>, +				<listitem><para><classname>LinkPost</classname> - Shares a link the user has posted.</para></listitem>, +				<listitem><para><classname>NotePost</classname> - Publicizes a note that the user has written.</para></listitem>, +				<listitem><para><classname>PhotoPost</classname> - Announces a photo that the user has uploaded.</para></listitem>, +				<listitem><para><classname>StatusPost</classname> - A simple status.</para></listitem>, +				<listitem><para><classname>VideoPost</classname> - Announces a video that the user has uploaded.</para></listitem>, +			</itemizedlist>, +			, +			<para>, +				The <classname>Post</classname>'s <methodname>getType()</methodname> method identifies the type of <classname>Post</classname>., +++ b/docs/src/reference/docbook/signin.xml, +			Spring Social supports such service provider-based authentication with <classname>ProviderSignInController</classname> from the web module., +			<classname>ProviderSignInController</classname> works very much like <classname>ConnectController</classname> in that it goes through the OAuth flow (either OAuth 1 or OAuth 2, depending on the provider)., +			At the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., +			If no previously established connection matches, the flow will be sent to the application's signup page so that the user may register with the application., +			To add provider signin capability to your Spring application, configure <classname>ProviderSignInController</classname> as a bean in your Spring MVC application:, +<bean class="org.springframework.social.connect.signin.web.ProviderSignInController">, +			Although <classname>ProviderSignInController</classname>'s only constructor takes 5 parameters, it is also annotated with <classname>@Inject</classname>., +			So, when optimized for autowiring, the <classname>ProviderSignInController</classname> bean only requires a <code><![CDATA[<constructor-arg>]]></code> to specify the application's base URL., +			<classname>ProviderSignInController</classname> wil use this URL to construct the callback URL used in the authentication flow., +		</para>, +		, +		<para>, +			When authenticating through an OAuth 1 provider, <classname>ProviderSignInController</classname> supports the following flow:, +			<listitem><para><code>POST /signin/{provider ID}</code> - Initiates the signin flow. This means fetching a request token from the provider and then redirecting to Provider's authentication page.</para></listitem>, +			<listitem><para><code>GET /signin/{provider ID}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +							If the received access token doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a signup URL. , +							The signup URL is "/signup" (relative to the application root)., +			For OAuth 2 providers, the flow is only slightly different:, +		</para>, +		, +		<itemizedlist>, +			<listitem><para><code>POST /signin/{provider ID}</code> - Initiates the signin flow. Redirects to Provider's authentication page.</para></listitem>, +			<listitem><para><code>GET /signin/{provider ID}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +				<itemizedlist>, +					<listitem>, +						<para>, +							If the received access token doesn't match any existing connection, <classname>ProviderSignInController</classname> will redirect to a signup URL. , +							The signup URL is "/signup" (relative to the application root)., +						</para>, +					</listitem>, +				</itemizedlist>, +			</listitem>, +		</itemizedlist>, +				, +		<para>, +			<classname>ProviderSignInController</classname> handles the authentication flow with a provider, but relies on an implementation of <interfacename>SignInService</interfacename> to perform the actual authentication into the application. , +			<interfacename>SignInService</interfacename> is defined as follows:]