[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import java.util.TreeMap;, +import org.springframework.social.twitter.support.extractors.AbstractResponseExtractor;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private final MapExtractor mapExtractor;, +, +, +	public FriendTemplate(LowLevelTwitterApi lowLevelApi) {, +		this.mapExtractor = new MapExtractor();, +		return (List<Long>) requestApi.fetchObject("friends/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return (List<Long>) requestApi.fetchObject("friends/ids.json", List.class, Collections.singletonMap("screen_name", screenName));, +		return (List<Long>) requestApi.fetchObject("followers/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return (List<Long>) requestApi.fetchObject("followers/ids.json", List.class, Collections.singletonMap("screen_name", screenName));, +		return (String) requestApi.publish("friendships/create.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) requestApi.publish("friendships/create.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) requestApi.publish("friendships/destroy.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) requestApi.publish("friendships/destroy.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		Map<String, String> params = new TreeMap<String, String>();, +		params.put("user_a", userA);, +		params.put("user_b", userB);, +		return requestApi.fetchObject("friendships/exists.json", boolean.class, params);, +	private static final MultiValueMap<String, Object> EMPTY_DATA = new LinkedMultiValueMap<String, Object>();, +	private static class MapExtractor extends AbstractResponseExtractor<Map<String, Object>> {, +		public Map<String, Object> extractObject(Map<String, Object> responseMap) {, +			return responseMap;, +		}, +	}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import java.util.TreeMap;, +import org.springframework.social.twitter.support.extractors.AbstractResponseExtractor;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private final MapExtractor mapExtractor;, +, +, +	public FriendTemplate(LowLevelTwitterApi lowLevelApi) {, +		this.mapExtractor = new MapExtractor();, +		return (List<Long>) requestApi.fetchObject("friends/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return (List<Long>) requestApi.fetchObject("friends/ids.json", List.class, Collections.singletonMap("screen_name", screenName));, +		return (List<Long>) requestApi.fetchObject("followers/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return (List<Long>) requestApi.fetchObject("followers/ids.json", List.class, Collections.singletonMap("screen_name", screenName));, +		return (String) requestApi.publish("friendships/create.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) requestApi.publish("friendships/create.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) requestApi.publish("friendships/destroy.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) requestApi.publish("friendships/destroy.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		Map<String, String> params = new TreeMap<String, String>();, +		params.put("user_a", userA);, +		params.put("user_b", userB);, +		return requestApi.fetchObject("friendships/exists.json", boolean.class, params);, +	private static final MultiValueMap<String, Object> EMPTY_DATA = new LinkedMultiValueMap<String, Object>();, +	private static class MapExtractor extends AbstractResponseExtractor<Map<String, Object>> {, +		public Map<String, Object> extractObject(Map<String, Object> responseMap) {, +			return responseMap;, +		}, +	}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/LowLevelTwitterApi.java, +	<T> T fetchObject(String path, Class<T> type);, +, +	<T> T fetchObject(String path, Class<T> type, Map<String, String> params);, +, +	 * Publishes data to the Twitter REST API. Does not return any results., +	 * @param path the relative path to the resource. , +	 * @param data the data to be posted., +	 * @param extractor an extractor used to extract the response into a specific type., +	 * @param params parameters to fill in the template placeholders, if any., +	 * @return a Java object representing the response after publishing., +	 */, +	<T> T publish(String path, MultiValueMap<String, Object> data, ResponseExtractor<T> extractor, Map<String, String> params);, +, +	/**, +	, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +import java.util.TreeMap;, +import org.springframework.social.twitter.support.extractors.AbstractResponseExtractor;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private final MapExtractor mapExtractor;, +, +, +	public FriendTemplate(LowLevelTwitterApi lowLevelApi) {, +		this.mapExtractor = new MapExtractor();, +		return (List<Long>) requestApi.fetchObject("friends/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return (List<Long>) requestApi.fetchObject("friends/ids.json", List.class, Collections.singletonMap("screen_name", screenName));, +		return (List<Long>) requestApi.fetchObject("followers/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return (List<Long>) requestApi.fetchObject("followers/ids.json", List.class, Collections.singletonMap("screen_name", screenName));, +		return (String) requestApi.publish("friendships/create.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) requestApi.publish("friendships/create.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		return (String) requestApi.publish("friendships/destroy.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("user_id", String.valueOf(userId))).get("screen_name");, +		return (String) requestApi.publish("friendships/destroy.json", EMPTY_DATA, mapExtractor, Collections.singletonMap("screen_name", screenName)).get("screen_name");, +		Map<String, String> params = new TreeMap<String, String>();, +		params.put("user_a", userA);, +		params.put("user_b", userB);, +		return requestApi.fetchObject("friendships/exists.json", boolean.class, params);, +	private static final MultiValueMap<String, Object> EMPTY_DATA = new LinkedMultiValueMap<String, Object>();, +	private static class MapExtractor extends AbstractResponseExtractor<Map<String, Object>> {, +		public Map<String, Object> extractObject(Map<String, Object> responseMap) {, +			return responseMap;, +		}, +	}]