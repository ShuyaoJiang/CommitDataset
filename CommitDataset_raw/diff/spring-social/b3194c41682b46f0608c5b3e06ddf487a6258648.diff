[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ServiceProvider.java, + * OAuth1-based ServiceProvider implementors should extend and implement {@link #getServiceApi(String, String)}., + * They should also define a single constructor that accepts the consumerKey/consumerSecret, + * and internally creates and passes up a {@link OAuth1Operations} instance., +	/**, +	 * Creates a OAuth1ServiceProvider., +	 * @param consumerKey the consumer (or client) key assigned to the application by the provider., +	 * @param consumerSecret the consumer (or client) secret assigned to the application by the provider., +	 * @param oauth1Operations the template that allows the OAuth1-based authorization flow to be conducted with the provider., +	 */, +	// implementing OAuth1ServiceProvider, +	, +	public final OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	}, +	, +	public abstract S getServiceApi(String accessToken, String secret);, +	, +	// subclassing hooks, +	, +	/**, +	 * The consumer (or client) key assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +	/**, +	 * The consumer (or client) secret assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald"., + * Defines a single parameterized type S representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * Does not define any operations since the provider authorization flow needed to construct an authorized API binding is protocol specific, for example, OAuth1 or OAuth2., + * @author Keith Donald, + * @param <S> the service api type, + */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/AbstractOAuth1ServiceProvider.java, + * OAuth1-based ServiceProvider implementors should extend and implement {@link #getServiceApi(String, String)}., + * They should also define a single constructor that accepts the consumerKey/consumerSecret, + * and internally creates and passes up a {@link OAuth1Operations} instance., +	/**, +	 * Creates a OAuth1ServiceProvider., +	 * @param consumerKey the consumer (or client) key assigned to the application by the provider., +	 * @param consumerSecret the consumer (or client) secret assigned to the application by the provider., +	 * @param oauth1Operations the template that allows the OAuth1-based authorization flow to be conducted with the provider., +	 */, +	// implementing OAuth1ServiceProvider, +	, +	public final OAuth1Operations getOAuthOperations() {, +		return oauth1Operations;, +	}, +	, +	public abstract S getServiceApi(String accessToken, String secret);, +	, +	// subclassing hooks, +	, +	/**, +	 * The consumer (or client) key assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +	/**, +	 * The consumer (or client) secret assigned to the application by the provider., +	 * Exposed to subclasses to support constructing service API instances., +	 * @see #getServiceApi(String, String), +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	public OAuthToken fetchRequestToken(String callbackUrl, MultiValueMap<String, String> additionalParameters) {, +	public String buildAuthorizeUrl(String requestToken, String callbackUrl) {, +	public String buildAuthenticateUrl(String requestToken, String callbackUrl) {, +	public OAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, +/**, + * Top-level marker interface defining a ServiceProvider., + * A ServiceProvider provides access to a service API that the application can invoke on behalf of a provider user., + * For example, the FacebookServiceProvider could expose a FacebookApi that the application can invoke on behalf of Facebook user "Keith Donald".]