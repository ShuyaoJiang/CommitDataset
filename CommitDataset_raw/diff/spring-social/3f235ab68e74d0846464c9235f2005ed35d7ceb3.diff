[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.springframework.social.connect.web.test.StubOAuthTemplateBehavior.*;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, +	// OAuth 1, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +	// OAuth 2, +	, +	@Test, +	public void connect_OAuth2Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL));, +	}, +, +	@Test, +	public void connect_OAuth2Provider_withScope() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider").param("scope", "read,write")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL + "&scope=read%2Cwrite"));, +	}, +	, +	@Test, +	public void oauth2Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +		mockMvc.perform(get("/connect/oauth2Provider").param("code", "oauth2Code")), +			.andExpect(redirectedUrl("/connect/oauth2Provider"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth2Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth2Provider", connections.get(0).getKey().getProviderId());, +	}, +, +	@Test, +	public void oauth2Callback_exceptionWhileFetchingAccessToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +		mockMvc.perform(get("/connect/oauth2Provider").param("code", "oauth2Code")), +			.andExpect(redirectedUrl("/connect/oauth2Provider"));, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.springframework.social.connect.web.test.StubOAuthTemplateBehavior.*;, +import org.springframework.social.connect.web.test.StubOAuthTemplateBehavior;, +	// OAuth 1, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuthTemplateBehavior.THROW_EXCEPTION);, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +	// OAuth 2, +	, +	@Test, +	public void connect_OAuth2Provider() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL));, +	}, +, +	@Test, +	public void connect_OAuth2Provider_withScope() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, null)).build();, +		mockMvc.perform(post("/connect/oauth2Provider").param("scope", "read,write")), +			.andExpect(redirectedUrl(OAUTH2_AUTHORIZE_URL + "&scope=read%2Cwrite"));, +	}, +	, +	@Test, +	public void oauth2Callback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth2Provider"));		, +		mockMvc.perform(get("/connect/oauth2Provider").param("code", "oauth2Code")), +			.andExpect(redirectedUrl("/connect/oauth2Provider"));, +		List<Connection<?>> connections = connectionRepository.findConnections("oauth2Provider");, +		assertEquals(1, connections.size());, +		assertEquals("oauth2Provider", connections.get(0).getKey().getProviderId());, +	}, +, +	@Test]