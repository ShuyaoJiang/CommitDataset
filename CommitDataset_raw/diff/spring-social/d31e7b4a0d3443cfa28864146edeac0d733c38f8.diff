[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +package org.springframework.social.twitter;, +, +class AbstractTwitterOperations {, +	, +	private final LowLevelTwitterApi lowLevelApi;, +, +	public AbstractTwitterOperations(LowLevelTwitterApi lowLevelApi) {, +		this.lowLevelApi = lowLevelApi;, +	}, +	, +	protected LowLevelTwitterApi getLowLevelTwitterApi() {, +		return lowLevelApi;, +	}, +	, +	protected void requireUserAuthorization() {, +		if(!lowLevelApi.isAuthorizedForUser()) {, +			throw new IllegalStateException("User authorization required: TwitterTemplate must be created with OAuth credentials to perform this operation.");, +		}, +	}, +}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +package org.springframework.social.twitter;, +, +class AbstractTwitterOperations {, +	, +	private final LowLevelTwitterApi lowLevelApi;, +, +	public AbstractTwitterOperations(LowLevelTwitterApi lowLevelApi) {, +		this.lowLevelApi = lowLevelApi;, +	}, +	, +	protected LowLevelTwitterApi getLowLevelTwitterApi() {, +		return lowLevelApi;, +	}, +	, +	protected void requireUserAuthorization() {, +		if(!lowLevelApi.isAuthorizedForUser()) {, +			throw new IllegalStateException("User authorization required: TwitterTemplate must be created with OAuth credentials to perform this operation.");, +		}, +	}, +}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +class DirectMessageTemplate extends AbstractTwitterOperations implements DirectMessageOperations {, +		super(lowLevelApi);, +		requireUserAuthorization();, +		return getLowLevelTwitterApi().fetchObjects("direct_messages.json", directMessageExtractor);, +		requireUserAuthorization();, +		return getLowLevelTwitterApi().fetchObjects("direct_messages/sent.json", directMessageExtractor);, +		requireUserAuthorization();, +	    getLowLevelTwitterApi().publish("direct_messages/new.json", data);, +		requireUserAuthorization();, +	    getLowLevelTwitterApi().publish("direct_messages/new.json", data);, +		requireUserAuthorization();, +		getLowLevelTwitterApi().delete("direct_messages/destroy/" + messageId + ".json");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/AbstractTwitterOperations.java, +package org.springframework.social.twitter;, +, +class AbstractTwitterOperations {, +	, +	private final LowLevelTwitterApi lowLevelApi;, +, +	public AbstractTwitterOperations(LowLevelTwitterApi lowLevelApi) {, +		this.lowLevelApi = lowLevelApi;, +	}, +	, +	protected LowLevelTwitterApi getLowLevelTwitterApi() {, +		return lowLevelApi;, +	}, +	, +	protected void requireUserAuthorization() {, +		if(!lowLevelApi.isAuthorizedForUser()) {, +			throw new IllegalStateException("User authorization required: TwitterTemplate must be created with OAuth credentials to perform this operation.");, +		}, +	}, +}, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/DirectMessageTemplate.java, +class DirectMessageTemplate extends AbstractTwitterOperations implements DirectMessageOperations {, +		super(lowLevelApi);, +		requireUserAuthorization();, +		return getLowLevelTwitterApi().fetchObjects("direct_messages.json", directMessageExtractor);, +		requireUserAuthorization();, +		return getLowLevelTwitterApi().fetchObjects("direct_messages/sent.json", directMessageExtractor);, +		requireUserAuthorization();, +	    getLowLevelTwitterApi().publish("direct_messages/new.json", data);, +		requireUserAuthorization();, +	    getLowLevelTwitterApi().publish("direct_messages/new.json", data);, +		requireUserAuthorization();, +		getLowLevelTwitterApi().delete("direct_messages/destroy/" + messageId + ".json");, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendTemplate.java, +class FriendTemplate extends AbstractTwitterOperations implements FriendOperations {, +		super(lowLevelApi);, +		return getLowLevelTwitterApi().fetchObjects("statuses/friends.json", profileExtractor, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return getLowLevelTwitterApi().fetchObjects("statuses/friends.json", profileExtractor, Collections.singletonMap("screen_name", screenName));, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return getLowLevelTwitterApi().fetchObject("friends/ids.json", List.class, Collections.singletonMap("screen_name", screenName));, +		return getLowLevelTwitterApi().fetchObjects("statuses/followers.json", profileExtractor, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return getLowLevelTwitterApi().fetchObjects("statuses/followers.json", profileExtractor, Collections.singletonMap("screen_name", screenName));, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", List.class, Collections.singletonMap("user_id", String.valueOf(userId)));, +		return getLowLevelTwitterApi().fetchObject("followers/ids.json", List.class, Collections.singletonMap("screen_name", screenName));]