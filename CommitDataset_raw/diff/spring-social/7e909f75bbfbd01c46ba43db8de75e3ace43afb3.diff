[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +			User user = new SocialUser("foo", "bar", authorities);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +			User user = new SocialUser("foo", "bar", authorities);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationProviderTest.java, +		final DummyUserDetails userDetails = new DummyUserDetails("user1", "pass", "moderator");, +		Mockito.when(userDetailsService.loadUserByUserId("user1")).thenReturn(userDetails);, +		Mockito.when(userDetailsService.loadUserByUserId("user2")).thenReturn(new DummyUserDetails("user2", "pass", "moderator"));, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +					Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), "unexpected principle type");, +						String userId = ((SocialUserDetails)success.getPrincipal()).getUserId();, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationProvider.java, +		final UserDetails userDetails = userDetailsService.loadUserByUserId(userId);, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialUserDetailsService.java, + * similar to {@link UserDetailsService} but loads details by user id, not username, +	SocialUserDetails loadUserByUserId(String userId) throws UsernameNotFoundException, DataAccessException;, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +			User user = new SocialUser("foo", "bar", authorities);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationProviderTest.java, +		final DummyUserDetails userDetails = new DummyUserDetails("user1", "pass", "moderator");, +		Mockito.when(userDetailsService.loadUserByUserId("user1")).thenReturn(userDetails);, +		Mockito.when(userDetailsService.loadUserByUserId("user2")).thenReturn(new DummyUserDetails("user2", "pass", "moderator"));, +++ b/spring-social-security/src/test/java/org/springframework/social/security/test/DummyUserDetails.java, +import org.springframework.social.security.SocialUserDetails;, +public class DummyUserDetails implements SocialUserDetails {, +	public String getUserId() {, +		return getUsername();, +	}, +]