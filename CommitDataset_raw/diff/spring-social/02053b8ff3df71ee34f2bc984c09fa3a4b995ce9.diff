[+++ b/build.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +++ b/settings.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionKey.java, +		return providerUserId != null ? sameProvider && providerUserId.equals(other.providerUserId) : sameProvider;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +			int rank = jdbcTemplate.queryForInt("(select coalesce(max(rank) + 1, 1) as rank from " + tablePrefix + "UserConnection where userId = ? and providerId = ?)", userId, data.getProviderId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param additionalParameters any additional parameters to be sent when exchanging the authorization code for an access grant. Should not be encoded. , +	 * @return the access grant., +	 * @param additionalParameters any additional parameters to be sent when refreshing a previous access grant. Should not be encoded. , +	 * @return the access grant., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +			this.authenticateUrl = authenticateUrl + clientInfo;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle]