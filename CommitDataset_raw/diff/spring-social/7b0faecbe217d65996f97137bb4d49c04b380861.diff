[+++ b/docs/src/reference/docbook/serviceprovider.xml, +		<section id="service-providers-establishing-connections-connection-factory-registry">, +			<title>Registering ServiceProviderConnectionFactory instances</title>, +			<para>, +				As you will see in subsequent sections of this reference guide, Spring Social provides infrastructure for establishing connections to one or more providers in a dynamic, self-service manner., +				For example, one client application may allow users to connect to Facebook, Twitter, and LinkedIn. Another might integrate Github and Pivotal Tracker., +				To make the set of connectable providers easy to manage and locate, Spring Social provides a registry for centralizing connection factory instances:, +			</para>, +			<programlisting language="java"><![CDATA[, +MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();, +registry.addConnectionFactory(new FacebookServiceProviderConnectionFactory());, +registry.addConnectionFactory(new TwitterServiceProviderConnectionFactory());, +registry.addConnectionFactory(new LinkedInServiceProviderConnectionFactory());]]>	, +			</programlisting>, +			<para>, +				This registry implements a locator interface that other objects can use to lookup connection factories dynamically:, +			</para>, +			<programlisting language="java"><![CDATA[, +public interface ServiceProviderConnectionLocator {, +, +    ServiceProviderConnectionFactory<?> getConnectionFactory(String providerId);, +, +    <S> ServiceProviderConnectionFactory<S> getConnectionFactory(Class<S> serviceApiType);, +	, +    Set<String> registeredProviderIds();, +, +}, +]]>	, +			</programlisting>, +		</section>, +++ b/docs/src/reference/docbook/serviceprovider.xml, +		<section id="service-providers-establishing-connections-connection-factory-registry">, +			<title>Registering ServiceProviderConnectionFactory instances</title>, +			<para>, +				As you will see in subsequent sections of this reference guide, Spring Social provides infrastructure for establishing connections to one or more providers in a dynamic, self-service manner., +				For example, one client application may allow users to connect to Facebook, Twitter, and LinkedIn. Another might integrate Github and Pivotal Tracker., +				To make the set of connectable providers easy to manage and locate, Spring Social provides a registry for centralizing connection factory instances:, +			</para>, +			<programlisting language="java"><![CDATA[, +MapServiceProviderConnectionFactoryRegistry registry = new MapServiceProviderConnectionFactoryRegistry();, +registry.addConnectionFactory(new FacebookServiceProviderConnectionFactory());, +registry.addConnectionFactory(new TwitterServiceProviderConnectionFactory());, +registry.addConnectionFactory(new LinkedInServiceProviderConnectionFactory());]]>	, +			</programlisting>, +			<para>, +				This registry implements a locator interface that other objects can use to lookup connection factories dynamically:, +			</para>, +			<programlisting language="java"><![CDATA[, +public interface ServiceProviderConnectionLocator {, +, +    ServiceProviderConnectionFactory<?> getConnectionFactory(String providerId);, +, +    <S> ServiceProviderConnectionFactory<S> getConnectionFactory(Class<S> serviceApiType);, +	, +    Set<String> registeredProviderIds();, +, +}, +]]>	, +			</programlisting>, +		</section>, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.sql, +create table ServiceProviderConnection (localUserId varchar not null,, +					providerId varchar not null,, +					providerUserId varchar,, +					rank int not null,, +					displayName varchar,, +					profileUrl varchar,, +					imageUrl varchar,, +					accessToken varchar not null,					, +					secret varchar,, +					refreshToken varchar,, +					expireTime bigint,, +					primary key (localUserId, providerId, providerUserId));, +create unique index ServiceProviderConnectionRank on ServiceProviderConnection(localUserId, providerId, rank);]