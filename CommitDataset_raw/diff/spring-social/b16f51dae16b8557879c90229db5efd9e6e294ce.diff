[+++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/ServiceProviderConnectionImpl.java, +	private boolean disconnected;, +	, +	public S getServiceApi() {, +		if (disconnected) {, +			throw new IllegalStateException("Unable to get Api: this Connection is disconnected");, +		if (disconnected) {, +			throw new IllegalStateException("This connection is already disconnected");, +		}		, +		disconnected = true;, +	}, +	, +	public boolean equals(Object o) {, +		if (!(o instanceof ServiceProviderConnectionImpl)) {, +			return false;, +		}, +		ServiceProviderConnectionImpl<?> other = (ServiceProviderConnectionImpl<?>) o;, +		return id.equals(other.id);, +	}, +	, +	public int hashCode() {, +		return id.hashCode();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/ServiceProviderConnection.java, +	public S getServiceApi();, +++ b/spring-social-client/src/main/java/org/springframework/social/provider/support/ServiceProviderConnectionImpl.java, +	private boolean disconnected;, +	, +	public S getServiceApi() {, +		if (disconnected) {, +			throw new IllegalStateException("Unable to get Api: this Connection is disconnected");, +		if (disconnected) {, +			throw new IllegalStateException("This connection is already disconnected");, +		}		, +		disconnected = true;, +	}, +	, +	public boolean equals(Object o) {, +		if (!(o instanceof ServiceProviderConnectionImpl)) {, +			return false;, +		}, +		ServiceProviderConnectionImpl<?> other = (ServiceProviderConnectionImpl<?>) o;, +		return id.equals(other.id);, +	}, +	, +	public int hashCode() {, +		return id.hashCode();, +++ b/spring-social-client/src/test/java/org/springframework/social/provider/jdbc/JdbcConnectionRepositoryTest.java, +package org.springframework.social.provider.jdbc;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.fail;, +, +import java.util.List;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory;, +import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;, +import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;, +import org.springframework.security.crypto.encrypt.Encryptors;, +import org.springframework.social.provider.support.Connection;, +, +public class JdbcConnectionRepositoryTest {, +	, +	private EmbeddedDatabase db;, +, +	private JdbcConnectionRepository repository;, +	, +	@Before, +	public void setUp() {, +		EmbeddedDatabaseFactory factory = new EmbeddedDatabaseFactory();, +		factory.setDatabaseType(EmbeddedDatabaseType.H2);, +		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();, +		populator.addScript(new ClassPathResource("Schema.sql", getClass()));, +		factory.setDatabasePopulator(populator);, +		db = factory.getDatabase();, +		this.repository = new JdbcConnectionRepository(db, Encryptors.noOpText());, +	}, +	, +	@After, +	public void tearDown() {, +		if (db != null) {, +			db.shutdown();, +		}, +	}, +	, +	@Test, +	public void saveConnection() {, +		assertEquals(false, repository.isConnected(1L, "facebook"));, +		repository.saveConnection(1L, "facebook", Connection.oauth2("123456789", "987654321"));, +		assertEquals(true, repository.isConnected(1L, "facebook"));		, +		List<Connection> connections = repository.findConnections(1L, "facebook");]