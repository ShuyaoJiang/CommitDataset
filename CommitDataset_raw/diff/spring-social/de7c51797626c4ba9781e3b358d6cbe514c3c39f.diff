[+++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +	/**, +	 * Sets the signup URL; the URL to redirect to if authentication fails so that the user can register with the application., +	 * May be fully-qualified URL (e.g., "http://somehost/somepath/signup") or a path relative to application's servlet context path (e.g., "/signup")., +	 * @param signupUrl The signup URL, +	 */, +				throw new SocialAuthenticationRedirectException(buildSignupUrl(request));, +	private String buildSignupUrl(HttpServletRequest request) {, +		if (signupUrl.startsWith("http://") || signupUrl.startsWith("https://"))  {, +			return signupUrl;, +		}, +		if (!signupUrl.startsWith("/")) {, +			return ServletUriComponentsBuilder.fromContextPath(request).path("/" + signupUrl).build().toUriString();, +		}, +		return ServletUriComponentsBuilder.fromContextPath(request).path(signupUrl).build().toUriString();, +	}, +, +++ b/spring-social-security/src/main/java/org/springframework/social/security/SocialAuthenticationFilter.java, +import org.springframework.web.servlet.support.ServletUriComponentsBuilder;, +	/**, +	 * Sets the signup URL; the URL to redirect to if authentication fails so that the user can register with the application., +	 * May be fully-qualified URL (e.g., "http://somehost/somepath/signup") or a path relative to application's servlet context path (e.g., "/signup")., +	 * @param signupUrl The signup URL, +	 */, +				throw new SocialAuthenticationRedirectException(buildSignupUrl(request));, +	private String buildSignupUrl(HttpServletRequest request) {, +		if (signupUrl.startsWith("http://") || signupUrl.startsWith("https://"))  {, +			return signupUrl;, +		}, +		if (!signupUrl.startsWith("/")) {, +			return ServletUriComponentsBuilder.fromContextPath(request).path("/" + signupUrl).build().toUriString();, +		}, +		return ServletUriComponentsBuilder.fromContextPath(request).path(signupUrl).build().toUriString();, +	}, +, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +import org.springframework.security.authentication.BadCredentialsException;, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", null);, +	@Test, +	public void testFailedAuth_slashRegister() throws Exception {, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", "/register");, +		testFailedAuth(env);, +	}, +, +	@Test, +	public void testFailedAuth_register() throws Exception {, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", "register");, +		testFailedAuth(env);, +	}, +, +	@Test, +	public void testFailedAuth_fullyQualifiedUrlRegister() throws Exception {, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", "http://localhost/register");, +		testFailedAuth(env);, +	}, +, +	@SuppressWarnings("unchecked"), +	private void testFailedAuth(FilterTestEnv env) throws Exception {, +		env.filter.setFilterProcessesUrl(env.req.getRequestURI());, +		env.filter.setPostLoginUrl("/success");, +		, +		ConnectionFactory<Object> factory = mock(MockConnectionFactory.class);, +		when(factory.getProviderId()).thenReturn("mock");, +		env.req.setRequestURI(env.req.getRequestURI() + "/" + factory.getProviderId());, +, +		SocialAuthenticationService<Object> authService = mock(SocialAuthenticationService.class);, +		when(authService.getConnectionCardinality()).thenReturn(ConnectionCardinality.ONE_TO_ONE);, +		when(authService.getConnectionFactory()).thenReturn(factory);, +		when(authService.getAuthToken(env.req, env.res)).thenReturn(env.auth);, +		env.addAuthService(authService);, +, +		when(env.authManager.authenticate(env.auth)).thenThrow(new BadCredentialsException("Failed"));, +, +		assertNull(SecurityContextHolder.getContext().getAuthentication());, +, +		env.doFilter();, +, +		assertNull(SecurityContextHolder.getContext().getAuthentication());, +		, +		assertEquals("http://localhost/register", env.res.getRedirectedUrl());, +	}, +	, +		private FilterTestEnv(String method, String requestURI, String signupUrl) {, +			filter.setSignupUrl(signupUrl);]