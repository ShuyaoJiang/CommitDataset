[+++ b/build.gradle, +        compile project (':spring-social-core'), +      compile project (':spring-social-security', optional), +        compile project (':spring-social-core'), +++ b/build.gradle, +        compile project (':spring-social-core'), +      compile project (':spring-social-security', optional), +        compile project (':spring-social-core'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	private final static Log logger = LogFactory.getLog(ProviderConfigRegistrarSupport.class);, +, +	public ProviderConfigRegistrarSupport(Class<? extends Annotation> providerConfigAnnotation, Class<? extends ConnectionFactory<?>> connectionFactoryClass, , +			String socialAuthenticationServiceClassName, Class<? extends ApiHelper<?>> apiHelperClass) {, +		// TODO: Does the above signature create a hard dependency on social security???, +		this.socialAuthenticationServiceClassName = socialAuthenticationServiceClassName;, +		, +		if (isSocialSecurityAvailable() && socialAuthenticationServiceClassName != null) {, +			registerAuthenticationServiceBeanDefinitions(registry, allAttributes);						, +		} else {, +			registerConnectionFactoryBeanDefinitions(registry, allAttributes);			, +		}, +		, +	private static boolean isSocialSecurityAvailable() {, +		try {, +			Class.forName("org.springframework.social.security.SocialAuthenticationServiceLocator");, +			return true;, +		} catch (ClassNotFoundException cnfe) {, +			return false; , +		}, +	}	, +	private void registerConnectionFactoryBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		BeanDefinition connectionFactoryBD = getConnectionFactoryBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);, +		BeanDefinition connectionFactoryLocatorBD = ProviderConfigSupport.registerConnectionFactoryLocatorBean(registry);, +		ProviderConfigSupport.registerConnectionFactoryBean(connectionFactoryLocatorBD, connectionFactoryBD, connectionFactoryClass);, +	}, +, +	private void registerAuthenticationServiceBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		try {, +			Class<? extends SocialAuthenticationService<?>> socialAuthenticationServiceClass = (Class<? extends SocialAuthenticationService<?>>) Class.forName(socialAuthenticationServiceClassName);, +			BeanDefinition authenticationServiceBD = getAuthenticationServiceBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);, +			BeanDefinition connectionFactoryLocatorBD = ProviderConfigSupport.registerConnectionFactoryLocatorBean(registry);, +			ProviderConfigSupport.registerAuthenticationServiceBean(connectionFactoryLocatorBD, authenticationServiceBD, socialAuthenticationServiceClass);, +		} catch (ClassNotFoundException cnfe) {, +			logger.error("Unable to configure SocialAuthenticationService (" + socialAuthenticationServiceClassName + "); Class not found.");, +		}, +	}, +	protected BeanDefinition getAuthenticationServiceBeanDefinition(String appId, String appSecret, Map<String, Object> allAttributes) {, +		try {, +			Class<?> socialAuthenticationServiceClass = Class.forName(socialAuthenticationServiceClassName);, +			return BeanDefinitionBuilder.genericBeanDefinition(socialAuthenticationServiceClass).addConstructorArgValue(appId).addConstructorArgValue(appSecret).getBeanDefinition();, +		} catch (ClassNotFoundException cnfe) {, +			// Fall back on connection factory bean, +			return getConnectionFactoryBeanDefinition(appId, appSecret, allAttributes);, +		}, +	}, +, +	private String socialAuthenticationServiceClassName;, +, +++ b/build.gradle, +        compile project (':spring-social-core'), +      compile project (':spring-social-security', optional), +        compile project (':spring-social-core'), +++ b/spring-social-config/src/main/java/org/springframework/social/config/annotation/ProviderConfigRegistrarSupport.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.social.security.provider.SocialAuthenticationService;, +	private final static Log logger = LogFactory.getLog(ProviderConfigRegistrarSupport.class);, +, +	public ProviderConfigRegistrarSupport(Class<? extends Annotation> providerConfigAnnotation, Class<? extends ConnectionFactory<?>> connectionFactoryClass, , +			String socialAuthenticationServiceClassName, Class<? extends ApiHelper<?>> apiHelperClass) {, +		// TODO: Does the above signature create a hard dependency on social security???, +		this.socialAuthenticationServiceClassName = socialAuthenticationServiceClassName;, +		, +		if (isSocialSecurityAvailable() && socialAuthenticationServiceClassName != null) {, +			registerAuthenticationServiceBeanDefinitions(registry, allAttributes);						, +		} else {, +			registerConnectionFactoryBeanDefinitions(registry, allAttributes);			, +		}, +		, +	private static boolean isSocialSecurityAvailable() {, +		try {, +			Class.forName("org.springframework.social.security.SocialAuthenticationServiceLocator");, +			return true;, +		} catch (ClassNotFoundException cnfe) {, +			return false; , +		}, +	}	, +	private void registerConnectionFactoryBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		BeanDefinition connectionFactoryBD = getConnectionFactoryBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);, +		BeanDefinition connectionFactoryLocatorBD = ProviderConfigSupport.registerConnectionFactoryLocatorBean(registry);, +		ProviderConfigSupport.registerConnectionFactoryBean(connectionFactoryLocatorBD, connectionFactoryBD, connectionFactoryClass);, +	}, +, +	private void registerAuthenticationServiceBeanDefinitions(BeanDefinitionRegistry registry, Map<String, Object> allAttributes) {, +		try {, +			Class<? extends SocialAuthenticationService<?>> socialAuthenticationServiceClass = (Class<? extends SocialAuthenticationService<?>>) Class.forName(socialAuthenticationServiceClassName);, +			BeanDefinition authenticationServiceBD = getAuthenticationServiceBeanDefinition((String) allAttributes.get("appId"), (String) allAttributes.get("appSecret"), allAttributes);]