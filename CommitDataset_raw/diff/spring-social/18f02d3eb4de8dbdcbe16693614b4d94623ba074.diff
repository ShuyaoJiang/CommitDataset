[+++ b/docs/src/reference/docbook/implementing.xml, +			The process of adding support for a new service provider consists of several steps:, +			A Spring Social client module is simply a standard Java project that builds a single jar artifact e.g. spring-social-twitter.jar., +			We do recommend the actual code structure follow several packaging guidelines that are described below., +					<title>Spring Social Client Modules</title>, +								<entry>The public interface that defines the API binding.</entry>, +								<entry>The implementation of the API binding.</entry>, +				You can see this recommended structure in action by reviewing one of the other client modules such as spring-social-twitter:, +				API developers are free to implement their Java API binding with whatever REST/HTTP client they see fit., +				That said, Spring Social's existing API bindings such as spring-social-twitter all use Spring Framework's RestTemplate in conjunction with the Jackson JSON ObjectMapper and Apache HttpComponents HTTP client., +				Apache HttpComponents has proven to be the most robust HTTP client (if it is not available on the classpath Spring Social will fallback to standard J2SE facilities, however)., +				As discussed in the previous section, we recommend keeping implementation types separate from the public API types., +				We also recommend keeping internal implementation details package-private., +				Once the REST client has been configured as shown above, you simply use it to implement the various API operations., +				<code>spring-social-twitter</code> and <code>spring-social-facebook</code> provide particularly good references., +				As part of the spring-social-test module, Spring Social includes a framework for unit testing API bindings:, +				Then, for each test case, record expectations about how the server should be invoked and answer what it should respond with:, +public void getUserProfile() {, +    assertEquals("kdonald", profile.getScreenName());, +    "screen_name":"kdonald", +			<para>, +				For complete test examples, consult the existing API bindings included in Spring Social., +				<code>spring-social-twitter</code> and <code>spring-social-facebook</code> provide particularly good references., +			</para>, +			<para>, +				If you are adding support for a popular service provider, chances are a Java binding to the provider's API may already exist., +				For example, the Twitter4j library has been around for awhile and provides a complete binding to Twitter's API., +				Instead of developing your own binding, you may simply wish to integrate what already exists., +				Spring Social's connect framework has been carefully designed to support this scenario., +			</para>, +			<para>, +				To integrate an existing API binding, simply note the binding's primary API interface and implementation., +				For example, in Twitter4j the main API interface is named "Twitter" and instances are constructed by a TwitterFactory., +				You can always construct such an API instance directly, and you'll see in the following sections how to expose an instance as part of a ServiceProviderConnection., +			</para>, +	<section id="service-providers-implementing-serviceprovider">, +		<title>Creating a ServiceProvider implementation</title>, +		<section id="service-providers-implementing-serviceprovider-oauth2">, +			<title>OAuth2</title>, +				Finally, implement getServiceApi(String) to return a new API binding instance., +        super(new OAuth2Template(clientId, clientSecret, "https://graph.facebook.com/oauth/authorize", "https://graph.facebook.com/oauth/access_token"));, +		<section id="service-providers-implementing-serviceprovider-oauth1">, +			<title>OAuth1</title>, +				Finally, implement getServiceApi(String, String) to return a new API binding instance., +		</section>, +	</section>, +	<section id="service-providers-implementing-serviceapiadapter">, +		<title>Creating a ServiceApiAdapter</title>, +	</section>, +	<section id="service-providers-implementing-serviceproviderconnectionfactory">, +		<title>Creating a ServiceProviderConnectionFactory</title>]