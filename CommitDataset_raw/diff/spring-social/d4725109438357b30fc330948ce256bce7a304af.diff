[+++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +	@SuppressWarnings("unchecked"), +	@Test, +	public void addConnection_authenticated() throws Exception {, +, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", null);, +		env.filter.setFilterProcessesUrl(env.req.getRequestURI());, +		env.filter.setPostLoginUrl("/success");, +		env.filter.setConnectionAddedRedirectUrl("/added");, +		env.filter.setConnectionAddingFailureRedirectUrl("/add-failed");, +, +		Connection<?> connection = env.auth.getConnection();, +		ConnectionData data = connection.createData();, +		String userId = "joe";, +, +		ConnectionFactory<Object> factory = mock(MockConnectionFactory.class);, +		when(factory.getProviderId()).thenReturn("mock");, +		when(factory.createConnection(data)).thenReturn((Connection<Object>) connection);, +		env.req.setRequestURI(env.req.getRequestURI() + "/" + factory.getProviderId());, +, +		SocialAuthenticationService<Object> authService = mock(SocialAuthenticationService.class);, +		when(authService.getConnectionCardinality()).thenReturn(ConnectionCardinality.ONE_TO_ONE);, +		when(authService.getConnectionFactory()).thenReturn(factory);, +		when(authService.getAuthToken(env.req, env.res)).thenReturn(env.auth);, +		env.addAuthService(authService);, +, +		when(env.userIdSource.getUserId()).thenReturn(userId);, +, +		when(env.usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), set(data.getProviderUserId()))).thenReturn(empty(String.class));, +, +		// fallback to default /added, +		when(authService.getConnectionAddedRedirectUrl(env.req, connection)).thenReturn(null);, +, +		// already authenticated, +		SecurityContextHolder.getContext().setAuthentication(env.authSuccess);, +, +		env.doFilter();, +, +		// still authenticated, +		assertSame(env.authSuccess, SecurityContextHolder.getContext().getAuthentication());, +, +		assertEquals("/added", env.res.getRedirectedUrl());, +, +		verify(env.connectionRepository).addConnection(env.auth.getConnection());, +	}, +, +	@SuppressWarnings("unchecked"), +	@Test, +	public void addConnection_authenticated_failed() throws Exception {, +, +		FilterTestEnv env = new FilterTestEnv("GET", "/auth", null);, +		env.filter.setFilterProcessesUrl(env.req.getRequestURI());, +		env.filter.setPostLoginUrl("/success");, +		env.filter.setConnectionAddedRedirectUrl("/added");, +		env.filter.setConnectionAddingFailureRedirectUrl("/add-failed");, +, +		Connection<?> connection = env.auth.getConnection();, +		ConnectionData data = connection.createData();, +		String userId = "joe";, +, +		ConnectionFactory<Object> factory = mock(MockConnectionFactory.class);, +		when(factory.getProviderId()).thenReturn("mock");, +		when(factory.createConnection(data)).thenReturn((Connection<Object>) connection);, +		env.req.setRequestURI(env.req.getRequestURI() + "/" + factory.getProviderId());, +, +		SocialAuthenticationService<Object> authService = mock(SocialAuthenticationService.class);, +		when(authService.getConnectionCardinality()).thenReturn(ConnectionCardinality.ONE_TO_ONE);, +		when(authService.getConnectionFactory()).thenReturn(factory);, +		when(authService.getAuthToken(env.req, env.res)).thenReturn(env.auth);, +		env.addAuthService(authService);, +, +		when(env.userIdSource.getUserId()).thenReturn(userId);, +, +		// already connected, +		when(env.usersConnectionRepository.findUserIdsConnectedTo(data.getProviderId(), set(data.getProviderUserId()))).thenReturn(set(userId));, +, +		// already authenticated, +		SecurityContextHolder.getContext().setAuthentication(env.authSuccess);, +, +		env.doFilter();, +, +		// still authenticated, +		assertSame(env.authSuccess, SecurityContextHolder.getContext().getAuthentication());, +, +		assertEquals("/add-failed", env.res.getRedirectedUrl());, +, +		verify(env.connectionRepository, times(0)).addConnection(env.auth.getConnection());, +	}, +, +		private final UserIdSource userIdSource;, +		private final UsersConnectionRepository usersConnectionRepository;, +		private final ConnectionRepository connectionRepository;, +			userIdSource = mock(UserIdSource.class);, +			usersConnectionRepository = mock(UsersConnectionRepository.class);, +			connectionRepository = mock(ConnectionRepository.class);, +			filter = new SocialAuthenticationFilter(authManager, userIdSource, usersConnectionRepository, new SocialAuthenticationServiceRegistry());, +			when(filter.getUsersConnectionRepository().createConnectionRepository(Mockito.anyString())).thenReturn(connectionRepository);, +++ b/spring-social-security/src/test/java/org/springframework/social/security/SocialAuthenticationFilterTest.java, +	@SuppressWarnings("unchecked"), +	@Test]