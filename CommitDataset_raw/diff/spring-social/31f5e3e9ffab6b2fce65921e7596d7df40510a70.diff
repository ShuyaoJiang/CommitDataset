[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import java.util.ArrayList;, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	public MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers) {, +		MapSqlParameterSource parameters = new MapSqlParameterSource();, +		parameters.addValue("localUserId", getLocalUserId());, +			parameters.addValue("providerId_" + providerId, providerId);, +			parameters.addValue("providerUserIds_" + providerId, entry.getValue());, +		List<ServiceProviderConnection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, +		MultiValueMap<String, ServiceProviderConnection<?>> connectionsForUsers = new LinkedMultiValueMap<String, ServiceProviderConnection<?>>();, +		for (ServiceProviderConnection<?> connection : resultList) {, +			String providerId = connection.getKey().getProviderId();, +			List<String> userIds = providerUsers.get(providerId);, +			List<ServiceProviderConnection<?>> connections = connectionsForUsers.get(providerId);, +			if (connections == null) {, +				connections = new ArrayList<ServiceProviderConnection<?>>(userIds.size());, +				for (int i = 0; i < userIds.size(); i++) {, +					connections.add(null);, +				}, +				connectionsForUsers.put(providerId, connections);, +			}, +			String providerUserId = connection.getKey().getProviderUserId();, +			int connectionIndex = userIds.indexOf(providerUserId);, +			connections.set(connectionIndex, connection);, +		}, +		return connectionsForUsers;, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank = 1", connectionMapper, getLocalUserId(), getProviderId(serviceApiType));, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ?", connectionMapper, getLocalUserId(), getProviderId(serviceApiType), providerUserId);, +	public void updateConnection(ServiceProviderConnection<?> connection) {, +		ServiceProviderConnectionData data = connection.createData();, +		jdbcTemplate.update("update ServiceProviderConnection set profileName = ?, profileUrl = ?, profilePictureUrl = ?, accessToken = ?, secret = ?, refreshToken = ?, expireTime = ? where localUserId = ? and providerId = ? and providerUserId = ?",, +				data.getProfileName(), data.getProfileUrl(), data.getProfilePictureUrl(), encrypt(data.getAccessToken()), encrypt(data.getSecret()), encrypt(data.getRefreshToken()), data.getExpireTime(),, +				getLocalUserId(), data.getProviderId(), data.getProviderUserId());, +	}, +, +			return new ServiceProviderConnectionData(rs.getString("providerId"), rs.getString("providerUserId"), rs.getString("profileName"), rs.getString("profileUrl"), rs.getString("profilePictureUrl"),, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import java.util.ArrayList;, +import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	public MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers) {, +		MapSqlParameterSource parameters = new MapSqlParameterSource();, +		parameters.addValue("localUserId", getLocalUserId());, +			parameters.addValue("providerId_" + providerId, providerId);, +			parameters.addValue("providerUserIds_" + providerId, entry.getValue());, +		List<ServiceProviderConnection<?>> resultList = new NamedParameterJdbcTemplate(jdbcTemplate).query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = :localUserId and " + providerUsersCriteriaSql + " order by providerId, rank", parameters, connectionMapper);, +		MultiValueMap<String, ServiceProviderConnection<?>> connectionsForUsers = new LinkedMultiValueMap<String, ServiceProviderConnection<?>>();, +		for (ServiceProviderConnection<?> connection : resultList) {, +			String providerId = connection.getKey().getProviderId();, +			List<String> userIds = providerUsers.get(providerId);, +			List<ServiceProviderConnection<?>> connections = connectionsForUsers.get(providerId);, +			if (connections == null) {, +				connections = new ArrayList<ServiceProviderConnection<?>>(userIds.size());, +				for (int i = 0; i < userIds.size(); i++) {, +					connections.add(null);, +				}, +				connectionsForUsers.put(providerId, connections);, +			}, +			String providerUserId = connection.getKey().getProviderUserId();, +			int connectionIndex = userIds.indexOf(providerUserId);, +			connections.set(connectionIndex, connection);, +		}, +		return connectionsForUsers;, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank = 1", connectionMapper, getLocalUserId(), getProviderId(serviceApiType));, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ?", connectionMapper, getLocalUserId(), getProviderId(serviceApiType), providerUserId);, +	public void updateConnection(ServiceProviderConnection<?> connection) {, +		ServiceProviderConnectionData data = connection.createData();, +		jdbcTemplate.update("update ServiceProviderConnection set profileName = ?, profileUrl = ?, profilePictureUrl = ?, accessToken = ?, secret = ?, refreshToken = ?, expireTime = ? where localUserId = ? and providerId = ? and providerUserId = ?",, +				data.getProfileName(), data.getProfileUrl(), data.getProfilePictureUrl(), encrypt(data.getAccessToken()), encrypt(data.getSecret()), encrypt(data.getRefreshToken()), data.getExpireTime(),, +				getLocalUserId(), data.getProviderId(), data.getProviderUserId());, +	}, +, +			return new ServiceProviderConnectionData(rs.getString("providerId"), rs.getString("providerUserId"), rs.getString("profileName"), rs.getString("profileUrl"), rs.getString("profilePictureUrl"),, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +, +import org.springframework.util.MultiValueMap;, +	MultiValueMap<String, ServiceProviderConnection<?>> findConnectionsForUsers(MultiValueMap<String, String> providerUsers);, +	void updateConnection(ServiceProviderConnection<?> connection);]