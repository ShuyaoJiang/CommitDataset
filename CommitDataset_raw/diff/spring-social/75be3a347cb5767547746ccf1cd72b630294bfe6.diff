[+++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.web.connect.ConnectController;, +	private String baseConnectControllerUrl;, +, +			String applicationUrl, String apiKey, String appSecret) {, +		this.baseConnectControllerUrl = applicationUrl + AnnotationUtils.findAnnotation(ConnectController.class, RequestMapping.class).value()[0];, +			request.getSession().setAttribute(ConnectController.DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE, new AccessGrant(accessToken, null));, +			request.getSession().setAttribute(ConnectController.DEFERRED_CONNECTION_REDIRECT_URI_ATTRIBUTE, deferredConnectionUrl());, +	private String deferredConnectionUrl() {, +		return baseConnectControllerUrl + FACEBOOK_PROVIDER_ID + "?deferred";, +	}, +, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.web.connect.ConnectController;, +	private String baseConnectControllerUrl;, +, +			String applicationUrl, String apiKey, String appSecret) {, +		this.baseConnectControllerUrl = applicationUrl + AnnotationUtils.findAnnotation(ConnectController.class, RequestMapping.class).value()[0];, +			request.getSession().setAttribute(ConnectController.DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE, new AccessGrant(accessToken, null));, +			request.getSession().setAttribute(ConnectController.DEFERRED_CONNECTION_REDIRECT_URI_ATTRIBUTE, deferredConnectionUrl());, +	private String deferredConnectionUrl() {, +		return baseConnectControllerUrl + FACEBOOK_PROVIDER_ID + "?deferred";, +	}, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.ConnectController;, +	private String baseConnectControllerUrl;, +, +		this.baseConnectControllerUrl = applicationUrl + AnnotationUtils.findAnnotation(ConnectController.class, RequestMapping.class).value()[0];, +		OAuthToken requestToken = oauth1Ops.fetchNewRequestToken(callbackUrl());, +			request.setAttribute(ConnectController.DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE, accessToken, WebRequest.SCOPE_SESSION);, +			request.setAttribute(ConnectController.DEFERRED_CONNECTION_REDIRECT_URI_ATTRIBUTE, deferredConnectionUrl(), WebRequest.SCOPE_SESSION);, +	private String callbackUrl() {, +		return baseCallbackUrl + TWITTER_PROVIDER_ID;, +	}, +	, +	private String deferredConnectionUrl() {, +		return baseConnectControllerUrl + TWITTER_PROVIDER_ID + "?deferred";, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/web/FacebookSigninController.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.social.oauth2.AccessGrant;, +import org.springframework.social.web.connect.ConnectController;, +	private String baseConnectControllerUrl;, +, +			String applicationUrl, String apiKey, String appSecret) {, +		this.baseConnectControllerUrl = applicationUrl + AnnotationUtils.findAnnotation(ConnectController.class, RequestMapping.class).value()[0];, +			request.getSession().setAttribute(ConnectController.DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE, new AccessGrant(accessToken, null));, +			request.getSession().setAttribute(ConnectController.DEFERRED_CONNECTION_REDIRECT_URI_ATTRIBUTE, deferredConnectionUrl());, +	private String deferredConnectionUrl() {, +		return baseConnectControllerUrl + FACEBOOK_PROVIDER_ID + "?deferred";, +	}, +, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/web/TwitterSigninController.java, +import org.springframework.social.web.connect.ConnectController;, +	private String baseConnectControllerUrl;, +, +		this.baseConnectControllerUrl = applicationUrl + AnnotationUtils.findAnnotation(ConnectController.class, RequestMapping.class).value()[0];, +		OAuthToken requestToken = oauth1Ops.fetchNewRequestToken(callbackUrl());, +			request.setAttribute(ConnectController.DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE, accessToken, WebRequest.SCOPE_SESSION);, +			request.setAttribute(ConnectController.DEFERRED_CONNECTION_REDIRECT_URI_ATTRIBUTE, deferredConnectionUrl(), WebRequest.SCOPE_SESSION);, +	private String callbackUrl() {, +		return baseCallbackUrl + TWITTER_PROVIDER_ID;, +	}, +	, +	private String deferredConnectionUrl() {, +		return baseConnectControllerUrl + TWITTER_PROVIDER_ID + "?deferred";, +++ b/spring-social-web/src/main/java/org/springframework/social/web/connect/ConnectController.java, +	/**, +	 * Create a connection using an access token stored in the session. Useful for callbacks after a signup that follows a failed sign-in-with-provider., +	 */, +	@RequestMapping(value = "{providerId}", method = RequestMethod.GET, params = "deferred"), +	public String completeConnection(@PathVariable String providerId, WebRequest request) {, +		Object accessToken = request.getAttribute(DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		request.removeAttribute(DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		request.removeAttribute(DEFERRED_CONNECTION_REDIRECT_URI_ATTRIBUTE, WebRequest.SCOPE_SESSION);, +		ServiceProvider<?> provider = getServiceProvider(providerId);, +		if (provider instanceof OAuth1ServiceProvider) {, +			((OAuth1ServiceProvider<?>) provider).connect(accountIdExtractor.extractAccountId(request), (OAuthToken) accessToken);, +		} else {, +			((OAuth2ServiceProvider<?>) provider).connect(accountIdExtractor.extractAccountId(request), (AccessGrant) accessToken);, +		}, +		return "redirect:/";, +	}, +	, +	public static final String DEFERRED_CONNECTION_ACCESS_TOKEN_ATTRIBUTE = "deferredConnect.accessToken";, +, +	public static final String DEFERRED_CONNECTION_REDIRECT_URI_ATTRIBUTE = "deferredConnect.redirectUri";, +]