[+++ b/docs/src/reference/docbook/signin.xml, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="signin" xmlns:xlink="http://www.w3.org/1999/xlink">, +		<para>, +			Once a connection has been established between a user's consumer account and their service provider profile, that connection can be used to authenticate them to the consumer application by asking them to sign in to the service provider. , +			Spring Social supports such service provider-based authentication with Twitter and Facebook., +		</para>, +		<para>, +			Spring Social's <classname>TwitterSigninController</classname> is a Spring MVC controller that processes the "Sign in with Twitter" flow described at <ulink url="http://dev.twitter.com/pages/sign_in_with_twitter"/>. , +			Essentially, this process is an OAuth 1 authorization flow, quite similar to the flow that <classname>ConnectController</classname> processes for connecting an account with Twitter. , +			The key difference is that instead of presenting the user with an authorization page that asks for permission to be granted to the application, the sign in flow presents a simple authentication page that only asks the user to sign in to Twitter., +		</para>, +		<para>, +			At the end of process, <classname>TwitterSigninController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user to the application., +		</para>, +		<para>, +			To add "Sign in with Twitter" capability to your Spring application, configure <classname>TwitterSigninController</classname> as a bean in your Spring MVC application:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.twitter.web.TwitterSigninController">, +</bean>]]>, +		</programlisting>, +		<para>, +			<classname>TwitterSigninController</classname> is constructed with three arguments:, +		</para>, +		<para>, +			<classname>TwitterSigninController</classname> supports the following flow:, +		</para>, +		<para>, +			<classname>TwitterSigninController</classname> handles the authentication flow with Twitter, but relies on an implementation of <interfacename>SignInControllerGateway</interfacename> to perform the actual authentication into the application. <interfacename>SignInControllerGateway</interfacename> is defined as follows:, +		</para>, +		<programlisting language="java"><![CDATA[, +public interface SignInControllerGateway {, +}]]>, +		</programlisting>, +		<para>, +			Different applications will implement security differently, so each application must implement <interfacename>SignInControllerGateway</interfacename> in a way that fits its unique security scheme., +			As an example, suppose that an application's security is based Spring Security and simply uses a user's account ID as their principal. , +			In that case, a simple implementation of <interfacename>SignInControllerGateway</interfacename> might look like this:, +		</para>, +		<programlisting language="java"><![CDATA[, +package org.springframework.social.showcase;, +        SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(accountId, null, null));, +}]]>, +		</programlisting>, +		<para>, +      		The last thing to do is to add a "Sign in with Twitter" button to your application:, +  		</para>, +		<programlisting language="xml"><![CDATA[, +<form id="tw_signin" action="<c:url value="/signin/twitter"/>" method="POST">, +</form>]]>, +		</programlisting>, +		<para>, +			Clicking this button will trigger a POST request to "/signin/twitter", kicking off the Twitter sign in flow. , +			If the user has not yet signed into Twitter, the user will be presented with the following page from Twitter:, +		</para>, +				<imagedata fileref="images/sign-in-with-twitter.png" format="PNG" align="center" scale="40"/>, +		<para>, +			After signing in, the flow will redirect back to the application to complete the sign in process., +		</para>, +    	<para>, +    		If the user has already signed into Twitter prior to clicking the sign in button, Twitter will redirect the flow back to the application without presenting the user with a sign in page., +		</para>, +		<para>, +			Spring Social's <classname>FacebookSigninController</classname>, when paired with Facebook's <code><![CDATA[<fb:login-button>]]></code> XFBML tag<footnote><para><ulink url="http://developers.facebook.com/docs/reference/plugins/login/"/></para></footnote>, enables a user to authenticate to an application by first signing into Facebook., +		</para>, +		<para>, +			Facebook's XFBML tag collection includes <code><![CDATA[<fb:login-button>]]></code>, which displays a login button. , +			When a user clicks on that button, they will be presented with a Facebook Login dialog that looks similar to this:, +		</para>, +				<imagedata fileref="images/sign-in-with-facebook.png" format="PNG" align="center" scale="40"/>, +		<para>, +			After successfully signing into Facebook, a cookie will be written that contains an access token. , +			If the user has previously established a connection between their account and their Facebook profile, this access token will be the same token that was issued before. , +			<classname>FacebookSigninController</classname> works by extracting that access token from the cookie and using it to lookup a connected account and authenticate to that account., +		</para>, +		<para>, +			To enable "Sign in with Facebook" functionality in your application, start by configuring <classname>FacebookSigninController</classname> as a bean in the Spring MVC configuration:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<bean class="org.springframework.social.facebook.web.FacebookSigninController">, +</bean>]]>, +		</programlisting>, +		<para>, +			As with <classname>TwitterSigninController</classname>, <classname>FacebookSigninController</classname> depends on a connection repository to lookup connections and a sign in gateway to handle the actual application authentication., +		</para>, +		<para>, +			However, since Facebook's sign in process is not based on an OAuth 1 flow, <classname>FacebookSigninController</classname> does not need the base URL to create a callback URL from. , +			Instead, <classname>FacebookSigninController</classname> needs to know the application's Facebook API Key and application secret that were issued to the application when it was first registered in Facebook. , +			(The API key is the same value given as the <code>client-key</code> when registering a Facebook service provider with <code><![CDATA[<social:service-provider]]></code>.) , +			It uses the API Key to find the cookie and the application secret to verify the authenticity of the cookie by calculating and comparing signatures., +		</para>, +		<para>, +			With <classname>FacebookSigninController</classname> configured, the next thing to do is to load and initialize Facebook's JavaScript library and XFBML in your application's sign in page., +			Spring Social provides a convenient JSP tag to handle that work for you., +			Simply declare the Spring Social Facebook tag library in your JSP:, +		</para>, +		<programlisting language="xml"><![CDATA[, +<%@ taglib uri="http://www.springframework.org/spring-social/facebook/tags" prefix="facebook" %>]]>, +		</programlisting>, +		<para>]