[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Long expireTime;, +, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +	}, +	, +	/**, +	/**, +	 * The scope of the access grant., +	 * May be null if the provider doesn't return the granted scope in the response., +	 */, +	public String getScope() {, +		return scope;, +	}, +	, +	/**, +	 * Additional parameters returned along with the access grant., +	 */, +	public Map<String, Object> getAdditionalParameters() {, +		return additionalParameters;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Long expireTime;, +, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +	}, +	, +	/**, +	/**, +	 * The scope of the access grant., +	 * May be null if the provider doesn't return the granted scope in the response., +	 */, +	public String getScope() {, +		return scope;, +	}, +	, +	/**, +	 * Additional parameters returned along with the access grant., +	 */, +	public Map<String, Object> getAdditionalParameters() {, +		return additionalParameters;, +	}, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes the access grant., +	 * @param the refresh token from the previous access grant., +	AccessGrant refreshAccess(String refreshToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +import java.util.Collections;, +import java.util.Map;, +	private final Long expireTime;, +, +	private final Map<String, Object> additionalParameters;, +, +	private final String scope;, +, +		this(accessToken, null, null, null, Collections.<String, Object>emptyMap());, +	public AccessGrant(String accessToken, Integer expiresIn, String refreshToken, String scope, Map<String, Object> additionalParameters) {, +		this.scope = scope;, +		this.additionalParameters = additionalParameters;, +		this.expireTime = expiresIn != null ? System.currentTimeMillis() + expiresIn * 1000 : null;, +	 * The time (in milliseconds since Jan 1, 1970 UTC) when this access grant will expire., +	 * May be null if the token is non-expiring., +	 */, +	public Long getExpireTime() {, +		return expireTime;, +	}, +	, +	/**]