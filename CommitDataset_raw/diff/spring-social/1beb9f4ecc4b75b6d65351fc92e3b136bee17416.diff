[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * Defaults to use the authorization URL as the authentication URL, to send client credentials via HTTP Basic, and to send the access token, +	 * in the Authorization header for API requests., +	 * @param authorizeUrl The API's OAuth 2 authorization URL. Will also be used as the default authentication URL., +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, false, TokenStrategy.AUTHORIZATION_HEADER, apiAdapter);, +	 * @param sendClientCredentialsAsParameters If true, send client credentials as query parameter. If false, use HTTP Basic., +			boolean sendClientCredentialsAsParameters,, +			TokenStrategy tokenStrategy,, +		super(providerId, new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * Defaults to use the authorization URL as the authentication URL, to send client credentials via HTTP Basic, and to send the access token, +	 * in the Authorization header for API requests., +	 * @param authorizeUrl The API's OAuth 2 authorization URL. Will also be used as the default authentication URL., +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, false, TokenStrategy.AUTHORIZATION_HEADER, apiAdapter);, +	 * @param sendClientCredentialsAsParameters If true, send client credentials as query parameter. If false, use HTTP Basic., +			boolean sendClientCredentialsAsParameters,, +			TokenStrategy tokenStrategy,, +		super(providerId, new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	private TokenStrategy tokenStrategy;, +, +	public GenericOAuth2ServiceProvider(String appId, String appSecret, String authorizeUrl, String authenticateUrl, String accessTokenUrl, boolean useParametersForClientCredentials, TokenStrategy tokenStrategy) {, +		this.tokenStrategy = tokenStrategy;, +		return new GenericApiBinding(accessToken, tokenStrategy).getRestTemplate();, +		public GenericApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +			super(accessToken, tokenStrategy);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ApiBinding.java, +		this(accessToken, TokenStrategy.AUTHORIZATION_HEADER);, +	}, +, +	/**, +	 * Constructs the API template with OAuth credentials necessary to perform operations on behalf of a user., +	 * @param accessToken the access token, +	 * @param tokenStrategy Specifies how access tokens are sent on API requests. Defaults to sending them in Authorization header., +	 */, +	protected AbstractOAuth2ApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +		restTemplate = createRestTemplate(accessToken, getOAuth2Version(), tokenStrategy);, +	private RestTemplate createRestTemplate(String accessToken, OAuth2Version version, TokenStrategy tokenStrategy) {, +		ClientHttpRequestInterceptor interceptor = tokenStrategy.interceptor(accessToken, version);, +, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ConnectionFactory.java, +	 * Defaults to use the authorization URL as the authentication URL, to send client credentials via HTTP Basic, and to send the access token, +	 * in the Authorization header for API requests., +	 * @param authorizeUrl The API's OAuth 2 authorization URL. Will also be used as the default authentication URL., +		this(providerId, appId, appSecret, authorizeUrl, authorizeUrl, accessTokenUrl, false, TokenStrategy.AUTHORIZATION_HEADER, apiAdapter);, +	 * @param sendClientCredentialsAsParameters If true, send client credentials as query parameter. If false, use HTTP Basic., +			boolean sendClientCredentialsAsParameters,, +			TokenStrategy tokenStrategy,, +		super(providerId, new GenericOAuth2ServiceProvider(appId, appSecret, authorizeUrl, authenticateUrl, accessTokenUrl, sendClientCredentialsAsParameters, tokenStrategy), apiAdapter);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GenericOAuth2ServiceProvider.java, +	private TokenStrategy tokenStrategy;, +, +	public GenericOAuth2ServiceProvider(String appId, String appSecret, String authorizeUrl, String authenticateUrl, String accessTokenUrl, boolean useParametersForClientCredentials, TokenStrategy tokenStrategy) {, +		this.tokenStrategy = tokenStrategy;, +		return new GenericApiBinding(accessToken, tokenStrategy).getRestTemplate();, +		public GenericApiBinding(String accessToken, TokenStrategy tokenStrategy) {, +			super(accessToken, tokenStrategy);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2TokenParameterRequestInterceptor.java]