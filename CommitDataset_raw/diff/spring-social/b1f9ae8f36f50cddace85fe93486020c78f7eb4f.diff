[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import static java.util.Arrays.*;, +, +import java.util.List;, +import java.util.Map.Entry;, +, +import org.springframework.util.LinkedMultiValueMap;, +		MultiValueMap<String, String> requestParameters = getRequestParameters(request);, +		OAuth1Parameters parameters = getOAuth1Parameters(request, additionalParameters);, +		parameters.putAll(requestParameters);, +		OAuthToken requestToken = fetchRequestToken(request, requestParameters, oauthOperations);, +	private OAuth1Parameters getOAuth1Parameters(NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth1Parameters parameters = new OAuth1Parameters(additionalParameters);, +		parameters.putAll(getRequestParameters(request));, +		return parameters;, +, +	private OAuthToken fetchRequestToken(NativeWebRequest request, MultiValueMap<String, String> requestParameters, OAuth1Operations oauthOperations) {, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			return oauthOperations.fetchRequestToken(callbackUrl(request), requestParameters);, +		}, +		return oauthOperations.fetchRequestToken(null, requestParameters);				, +		parameters.putAll(getRequestParameters(request, "scope"));, +	private MultiValueMap<String, String> getRequestParameters(NativeWebRequest request, String... ignoredParameters) {, +		List<String> ignoredParameterList = asList(ignoredParameters);, +		MultiValueMap<String, String> convertedMap = new LinkedMultiValueMap<String, String>();, +		for (Entry<String, String[]> entry : request.getParameterMap().entrySet()) {, +			if (!ignoredParameterList.contains(entry.getKey())) {, +				convertedMap.put(entry.getKey(), asList(entry.getValue()));, +			}, +		}, +		return convertedMap;, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectSupport.java, +import static java.util.Arrays.*;, +, +import java.util.List;, +import java.util.Map.Entry;, +, +import org.springframework.util.LinkedMultiValueMap;, +		MultiValueMap<String, String> requestParameters = getRequestParameters(request);, +		OAuth1Parameters parameters = getOAuth1Parameters(request, additionalParameters);, +		parameters.putAll(requestParameters);, +		OAuthToken requestToken = fetchRequestToken(request, requestParameters, oauthOperations);, +	private OAuth1Parameters getOAuth1Parameters(NativeWebRequest request, MultiValueMap<String, String> additionalParameters) {, +		OAuth1Parameters parameters = new OAuth1Parameters(additionalParameters);, +		parameters.putAll(getRequestParameters(request));, +		return parameters;, +, +	private OAuthToken fetchRequestToken(NativeWebRequest request, MultiValueMap<String, String> requestParameters, OAuth1Operations oauthOperations) {, +		if (oauthOperations.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			return oauthOperations.fetchRequestToken(callbackUrl(request), requestParameters);, +		}, +		return oauthOperations.fetchRequestToken(null, requestParameters);				, +		parameters.putAll(getRequestParameters(request, "scope"));, +	private MultiValueMap<String, String> getRequestParameters(NativeWebRequest request, String... ignoredParameters) {, +		List<String> ignoredParameterList = asList(ignoredParameters);, +		MultiValueMap<String, String> convertedMap = new LinkedMultiValueMap<String, String>();, +		for (Entry<String, String[]> entry : request.getParameterMap().entrySet()) {, +			if (!ignoredParameterList.contains(entry.getKey())) {, +				convertedMap.put(entry.getKey(), asList(entry.getValue()));, +			}, +		}, +		return convertedMap;, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectSupportTest.java, +	public void buildOAuthUrl_OAuth10a_withAdditionalParametersFromRequest() {, +		ConnectSupport support = new ConnectSupport();, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setRequestURI("/connect/someprovider");, +		mockRequest.addParameter("condiment", "ketchup");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.set("display", "popup");, +		String url = support.buildOAuthUrl(new TestOAuth1ConnectionFactory(OAuth1Version.CORE_10_REVISION_A), request, additionalParameters);, +		assertEquals("https://serviceprovider.com/oauth/authorize?display=popup&condiment=ketchup", url);, +	}, +		, +, +	@Test, +	public void buildOAuthUrl_OAuth2_withAdditionalParameters() throws Exception {, +	@Test, +	public void buildOAuthUrl_OAuth2_withAdditionalParametersFromRequest() throws Exception {, +		ConnectSupport support = new ConnectSupport();, +		MockHttpServletRequest mockRequest = new PortAwareMockHttpServletRequest();, +		mockRequest.setScheme("http");, +		mockRequest.setServerName("somesite.com");, +		mockRequest.setRequestURI("/connect/someprovider");, +		mockRequest.addParameter("condiment", "ketchup");, +		ServletWebRequest request = new ServletWebRequest(mockRequest);, +		TestOAuth2ConnectionFactory connectionFactory = new TestOAuth2ConnectionFactory();, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.set("display", "popup");, +		String url = support.buildOAuthUrl(connectionFactory, request, additionalParameters);, +		assertEquals("https://serviceprovider.com/oauth/authorize?display=popup&condiment=ketchup&redirect_uri=http://somesite.com/connect/someprovider", url);, +	}, +]