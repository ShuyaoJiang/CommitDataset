[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TweetApi.java, +	List<Integer> getRetweetedByIds(long id);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TweetApi.java, +	List<Integer> getRetweetedByIds(long id);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TweetApiTemplate.java, +		return retrieveTimelineTweets(PUBLIC_TIMELINE_URL);, +		return retrieveTimelineTweets(HOME_TIMELINE_URL);, +		return retrieveTimelineTweets(FRIENDS_TIMELINE_URL);, +		return retrieveTimelineTweets(USER_TIMELINE_URL);, +		return retrieveTimelineTweets(USER_TIMELINE_URL + "?screen_name={screenName}", screenName);, +		return retrieveTimelineTweets(USER_TIMELINE_URL + "?user_id={userId}", userId);, +		return retrieveTimelineTweets(RETWEETED_BY_ME_URL);, +		return retrieveTimelineTweets(RETWEETED_TO_ME_URL);, +		return retrieveTimelineTweets(RETWEETS_OF_ME_URL);, +		Map<String, Object> tweetMap = restTemplate.getForObject(SHOW_TWEET_URL, Map.class, tweetId);, +		return populateTweetFromTimelineItem(tweetMap);, +		restTemplate.delete(DESTROY_TWEET_URL, tweetId);, +		return retrieveTimelineTweets(RETWEETS_URL, tweetId);, +	public List<TwitterProfile> getRetweetedBy(long tweetId) {, +		List<Map<String, Object>> response = restTemplate.getForObject(RETWEETED_BY_URL, List.class, tweetId);, +		List<TwitterProfile> profiles = new ArrayList<TwitterProfile>();, +		for (Map<String, Object> profileEntry : response) {, +			profiles.add(TwitterResponseHelper.getProfileFromResponseMap(profileEntry));, +		}, +		return profiles;, +	public List<Integer> getRetweetedByIds(long tweetId) {, +		return restTemplate.getForObject(RETWEETED_BY_IDS_URL, List.class, tweetId);, +		return retrieveTimelineTweets(FAVORITE_TIMELINE_URL);, +	}, +, +	public void addToFavorites(long tweetId) {, +		ResponseEntity<Map> response = restTemplate.postForEntity(CREATE_FAVORITE_URL, "", Map.class,, +				Collections.singletonMap("tweet_id", Long.toString(tweetId)));, +		handleResponseErrors(response);, +	}, +, +	public void removeFromFavorites(long tweetId) {, +		ResponseEntity<Map> response = restTemplate.postForEntity(DESTROY_FAVORITE_URL, "", Map.class,, +				Collections.singletonMap("tweet_id", Long.toString(tweetId)));, +		handleResponseErrors(response);, +	}, +, +	private List<Tweet> retrieveTimelineTweets(String url, Object... urlArgs) {, +		List response = restTemplate.getForObject(url, List.class, urlArgs);, +	static final String RETWEETED_BY_ME_URL = TwitterTemplate.API_URL_BASE + "statuses/retweeted_by_me.json";, +	static final String RETWEETED_TO_ME_URL = TwitterTemplate.API_URL_BASE + "statuses/retweeted_to_me.json";, +	static final String RETWEETS_OF_ME_URL = TwitterTemplate.API_URL_BASE + "statuses/retweets_of_me.json";, +	static final String SHOW_TWEET_URL = TwitterTemplate.API_URL_BASE + "statuses/show/{tweet_id}.json";, +	static final String DESTROY_TWEET_URL = TwitterTemplate.API_URL_BASE + "statuses/destroy/{tweet_id}.json";, +	static final String RETWEETS_URL = TwitterTemplate.API_URL_BASE + "statuses/retweets/{tweet_id}.json";, +	static final String RETWEETED_BY_URL = TwitterTemplate.API_URL_BASE + "statuses/{tweet_id}/retweeted_by.json";, +	static final String RETWEETED_BY_IDS_URL = TwitterTemplate.API_URL_BASE + "statuses/{tweet_id}/retweeted_by/ids.json";, +	static final String CREATE_FAVORITE_URL = TwitterTemplate.API_URL_BASE + "favorites/create/{tweet_id}";, +	static final String DESTROY_FAVORITE_URL = TwitterTemplate.API_URL_BASE + "favorites/destroy/{tweet_id}";, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TweetApi.java, +	List<Integer> getRetweetedByIds(long id);, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/TweetApiTemplate.java, +		return retrieveTimelineTweets(PUBLIC_TIMELINE_URL);, +		return retrieveTimelineTweets(HOME_TIMELINE_URL);, +		return retrieveTimelineTweets(FRIENDS_TIMELINE_URL);, +		return retrieveTimelineTweets(USER_TIMELINE_URL);, +		return retrieveTimelineTweets(USER_TIMELINE_URL + "?screen_name={screenName}", screenName);, +		return retrieveTimelineTweets(USER_TIMELINE_URL + "?user_id={userId}", userId);, +		return retrieveTimelineTweets(RETWEETED_BY_ME_URL);, +		return retrieveTimelineTweets(RETWEETED_TO_ME_URL);, +		return retrieveTimelineTweets(RETWEETS_OF_ME_URL);, +		Map<String, Object> tweetMap = restTemplate.getForObject(SHOW_TWEET_URL, Map.class, tweetId);, +		return populateTweetFromTimelineItem(tweetMap);, +		restTemplate.delete(DESTROY_TWEET_URL, tweetId);, +		return retrieveTimelineTweets(RETWEETS_URL, tweetId);, +	public List<TwitterProfile> getRetweetedBy(long tweetId) {, +		List<Map<String, Object>> response = restTemplate.getForObject(RETWEETED_BY_URL, List.class, tweetId);, +		List<TwitterProfile> profiles = new ArrayList<TwitterProfile>();, +		for (Map<String, Object> profileEntry : response) {, +			profiles.add(TwitterResponseHelper.getProfileFromResponseMap(profileEntry));, +		}, +		return profiles;, +	public List<Integer> getRetweetedByIds(long tweetId) {, +		return restTemplate.getForObject(RETWEETED_BY_IDS_URL, List.class, tweetId);, +		return retrieveTimelineTweets(FAVORITE_TIMELINE_URL);, +	}, +, +	public void addToFavorites(long tweetId) {, +		ResponseEntity<Map> response = restTemplate.postForEntity(CREATE_FAVORITE_URL, "", Map.class,, +				Collections.singletonMap("tweet_id", Long.toString(tweetId)));, +		handleResponseErrors(response);, +	}, +, +	public void removeFromFavorites(long tweetId) {, +		ResponseEntity<Map> response = restTemplate.postForEntity(DESTROY_FAVORITE_URL, "", Map.class,, +				Collections.singletonMap("tweet_id", Long.toString(tweetId)));, +		handleResponseErrors(response);, +	}, +, +	private List<Tweet> retrieveTimelineTweets(String url, Object... urlArgs) {, +		List response = restTemplate.getForObject(url, List.class, urlArgs);, +	static final String RETWEETED_BY_ME_URL = TwitterTemplate.API_URL_BASE + "statuses/retweeted_by_me.json";, +	static final String RETWEETED_TO_ME_URL = TwitterTemplate.API_URL_BASE + "statuses/retweeted_to_me.json";, +	static final String RETWEETS_OF_ME_URL = TwitterTemplate.API_URL_BASE + "statuses/retweets_of_me.json";, +	static final String SHOW_TWEET_URL = TwitterTemplate.API_URL_BASE + "statuses/show/{tweet_id}.json";]