[+++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1EnabledRestTemplateFactory.java, +import org.springframework.social.oauth.OAuthClientRequestAuthorizer;, +		return new OAuthEnabledRestTemplate(getAuthorizer());, +	protected abstract OAuthClientRequestAuthorizer getAuthorizer();, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1EnabledRestTemplateFactory.java, +import org.springframework.social.oauth.OAuthClientRequestAuthorizer;, +		return new OAuthEnabledRestTemplate(getAuthorizer());, +	protected abstract OAuthClientRequestAuthorizer getAuthorizer();, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1ClientRequestAuthorizer.java, +import java.net.URL;, + * Abstract implementation of {@link OAuthClientRequestAuthorizer} that adds an, + * OAuth 1 Authorization header to the request. Concrete implementations will, + * generate the Authorization header by implementing the, + * buildAuthorizationHeader() method., +public abstract class OAuth1ClientRequestAuthorizer implements OAuthClientRequestAuthorizer {, +			String authorizationHeader = buildAuthorizationHeader(request.getMethod(), request.getURI(), +	protected abstract String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters);, +, +++ b/src/main/java/org/springframework/social/oauth1/OAuth1EnabledRestTemplateFactory.java, +import org.springframework.social.oauth.OAuthClientRequestAuthorizer;, +		return new OAuthEnabledRestTemplate(getAuthorizer());, +	protected abstract OAuthClientRequestAuthorizer getAuthorizer();, +++ /dev/null, +++ b/src/main/java/org/springframework/social/oauth1/SSOAuth1ClientRequestAuthorizer.java, +package org.springframework.social.oauth1;, +, +import java.net.URL;, +import java.util.Map;, +, +import org.springframework.http.HttpMethod;, +import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;, +import org.springframework.security.core.Authentication;, +import org.springframework.security.core.context.SecurityContextHolder;, +import org.springframework.security.oauth.consumer.OAuthConsumerSupport;, +import org.springframework.security.oauth.consumer.ProtectedResourceDetails;, +import org.springframework.security.oauth.consumer.token.OAuthConsumerToken;, +, +public class SSOAuth1ClientRequestAuthorizer extends OAuth1ClientRequestAuthorizer {, +	private final OAuthConsumerSupport oauthSupport;, +	private final SSOAuthAccessTokenServices tokenServices;, +	private final ProtectedResourceDetails protectedResourceDetails;, +, +	public SSOAuth1ClientRequestAuthorizer(OAuthConsumerSupport oauthSupport,, +			ProtectedResourceDetails protectedResourceDetails, SSOAuthAccessTokenServices tokenServices) {, +		this.oauthSupport = oauthSupport;, +		this.tokenServices = tokenServices;, +		this.protectedResourceDetails = protectedResourceDetails;, +	}, +, +	public String buildAuthorizationHeader(HttpMethod method, URL url, Map<String, String> parameters) {, +, +		OAuthConsumerToken accessToken = resolveAccessToken();, +		if (accessToken == null) {, +			return null;, +		}, +, +		return oauthSupport.getAuthorizationHeader(protectedResourceDetails, accessToken, url, method.name(),, +				parameters);, +	}, +, +	private OAuthConsumerToken resolveAccessToken() {, +		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();, +		if (authentication == null) {, +			throw new AuthenticationCredentialsNotFoundException("No credentials found");, +		}, +, +		OAuthConsumerToken accessToken = tokenServices.getToken(protectedResourceDetails.getId(),, +				authentication.getPrincipal());, +		return accessToken;]