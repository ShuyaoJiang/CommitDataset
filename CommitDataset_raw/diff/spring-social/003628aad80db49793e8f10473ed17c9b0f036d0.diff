[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Serializable findAccountIdByConnectionAccessToken(String providerId, String accessToken) {, +		}, providerId, encrypt(accessToken));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Serializable findAccountIdByConnectionAccessToken(String providerId, String accessToken) {, +		}, providerId, encrypt(accessToken));, +++ b/spring-social-test/src/main/java/org/springframework/social/test/connect/MockConnectionRepository.java, +	public Serializable findAccountIdByConnectionAccessToken(String providerId, String accessToken) {, +		for (Map<String, Object> connection : connections) {, +			if (connection.get("providerId").equals(providerId) && connection.get("accessToken").equals(accessToken)) {, +				return (Serializable) connection.get("accountId");, +			}, +		}, +		return null;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Serializable findAccountIdByConnectionAccessToken(String providerId, String accessToken) {, +		}, providerId, encrypt(accessToken));, +++ b/spring-social-test/src/main/java/org/springframework/social/test/connect/MockConnectionRepository.java, +	public Serializable findAccountIdByConnectionAccessToken(String providerId, String accessToken) {, +		for (Map<String, Object> connection : connections) {, +			if (connection.get("providerId").equals(providerId) && connection.get("accessToken").equals(accessToken)) {, +				return (Serializable) connection.get("accountId");, +			}, +		}, +		return null;, +++ b/spring-social-test/src/test/java/org/springframework/social/test/connect/MockConnectionRepositoryTest.java, +package org.springframework.social.test.connect;, +, +import static org.junit.Assert.assertEquals;, +, +import org.junit.Test;, +import org.springframework.social.connect.support.Connection;, +, +public class MockConnectionRepositoryTest {, +, +	private MockConnectionRepository repository = new MockConnectionRepository();, +	, +	@Test, +	public void findByAccessToken() {, +		repository.saveConnection("kdonald", "twitter", Connection.oauth1("123456789", "secret"));, +		assertEquals("kdonald", repository.findAccountIdByConnectionAccessToken("twitter", "123456789"));, +	}, +}]