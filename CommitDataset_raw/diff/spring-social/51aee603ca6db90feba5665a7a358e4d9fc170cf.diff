[+++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +++ /dev/null, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcConnectionRepositoryTest.java, +import static java.util.Arrays.asList;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +        compile project(':spring-social-core'), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/ConnectionRepositorySchema.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					accessToken varchar not null,					, +					secret varchar, , +					refreshToken varchar,, +					providerAccountId varchar,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ /dev/null]