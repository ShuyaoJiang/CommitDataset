[+++ b/build.gradle, +    junitVersion = '4.10', +        testCompile "com.google.guava:guava:10.0", +++ b/build.gradle, +    junitVersion = '4.10', +        testCompile "com.google.guava:guava:10.0", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +		convertSessionAttributeToModelAttribute(DUPLICATE_CONNECTION_ATTRIBUTE, request, model);, +		convertSessionAttributeToModelAttribute(PROVIDER_ERROR_ATTRIBUTE, request, model);, +	}, +, +	private void convertSessionAttributeToModelAttribute(String attributeName, WebRequest request, Model model) {, +		if (request.getAttribute(attributeName, RequestAttributes.SCOPE_SESSION) != null) {, +			model.addAttribute(attributeName, Boolean.TRUE);, +			request.removeAttribute(attributeName, RequestAttributes.SCOPE_SESSION);			, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/build.gradle, +    junitVersion = '4.10', +        testCompile "com.google.guava:guava:10.0", +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +			request.setAttribute(PROVIDER_ERROR_ATTRIBUTE, e, RequestAttributes.SCOPE_SESSION);, +		convertSessionAttributeToModelAttribute(DUPLICATE_CONNECTION_ATTRIBUTE, request, model);, +		convertSessionAttributeToModelAttribute(PROVIDER_ERROR_ATTRIBUTE, request, model);, +	}, +, +	private void convertSessionAttributeToModelAttribute(String attributeName, WebRequest request, Model model) {, +		if (request.getAttribute(attributeName, RequestAttributes.SCOPE_SESSION) != null) {, +			model.addAttribute(attributeName, Boolean.TRUE);, +			request.removeAttribute(attributeName, RequestAttributes.SCOPE_SESSION);			, +	private static final String PROVIDER_ERROR_ATTRIBUTE = "social.provider.error";, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +import static org.hamcrest.Matchers.*;, +import org.springframework.http.HttpStatus;, +import org.springframework.social.connect.DuplicateConnectionException;, +import org.springframework.web.client.HttpClientErrorException;, +			.andExpect(model().attributeExists("connections")), +			.andExpect(request().attribute("social.addConnection.duplicate", nullValue())), +			.andExpect(request().attribute("social.provider.error", nullValue()));, +			.andExpect(view().name("connect/oauth2ProviderConnect")), +			.andExpect(request().attribute("social.addConnection.duplicate", nullValue())), +			.andExpect(request().attribute("social.provider.error", nullValue()));, +	}, +, +	@Test, +	public void connectionStatus_withErrorsInFlashScope() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret", THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);				, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		, +		// Should convert errors in "flash" scope to model attributes and remove them from "flash", +		mockMvc.perform(get("/connect/oauth2Provider").sessionAttr("social.addConnection.duplicate", new DuplicateConnectionException(null))), +			.andExpect(view().name("connect/oauth2ProviderConnect")), +			.andExpect(request().sessionAttribute("social.addConnection.duplicate", nullValue())), +			.andExpect(request().attribute("social.addConnection.duplicate", true));, +, +		mockMvc.perform(get("/connect/oauth2Provider").sessionAttr("social.provider.error", new HttpClientErrorException(HttpStatus.INTERNAL_SERVER_ERROR))), +			.andExpect(view().name("connect/oauth2ProviderConnect")), +			.andExpect(request().sessionAttribute("social.provider.error", nullValue())), +			.andExpect(request().attribute("social.provider.error", true));, +			, +			.andExpect(redirectedUrl("/connect/oauth1Provider")), +			.andExpect(request().sessionAttribute("social.provider.error", notNullValue()));, +			.andExpect(redirectedUrl("/connect/oauth1Provider")), +			.andExpect(request().sessionAttribute("social.provider.error", notNullValue()));, +			.andExpect(redirectedUrl("/connect/oauth2Provider")), +			.andExpect(request().sessionAttribute("social.provider.error", notNullValue()));]