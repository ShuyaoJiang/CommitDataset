[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionValues.java, + * A configuration interface used to set values on a {@link ServiceProviderConnection} from a specific ServiceProvider API., + * @see ServiceApiAdapter#setConnectionValues(Object, ServiceProviderConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionValues.java, + * A configuration interface used to set values on a {@link ServiceProviderConnection} from a specific ServiceProvider API., + * @see ServiceApiAdapter#setConnectionValues(Object, ServiceProviderConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUserProfileBuilder.java, + * Builder for constructing a {@link ServiceProviderUserProfile} instance returned by {@link ServiceApiAdapter#fetchUserProfile(Object)}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionValues.java, + * A configuration interface used to set values on a {@link ServiceProviderConnection} from a specific ServiceProvider API., + * @see ServiceApiAdapter#setConnectionValues(Object, ServiceProviderConnectionValues), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderUserProfileBuilder.java, + * Builder for constructing a {@link ServiceProviderUserProfile} instance returned by {@link ServiceApiAdapter#fetchUserProfile(Object)}, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/AbstractServiceProviderConnection.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.support;, +, +import org.springframework.social.connect.ServiceApiAdapter;, +import org.springframework.social.connect.ServiceProviderConnection;, +import org.springframework.social.connect.ServiceProviderConnectionData;, +import org.springframework.social.connect.ServiceProviderConnectionKey;, +import org.springframework.social.connect.ServiceProviderConnectionValues;, +import org.springframework.social.connect.ServiceProviderUserProfile;, +, +/**, + * Base support class for {@link ServiceProviderConnection} implementations., + * Defines state and behavior that is common across implementations and independent of the authorization protocol., + * @author Keith Donald, + * @param <S> the service API type, + */, +public abstract class AbstractServiceProviderConnection<S> implements ServiceProviderConnection<S> {, +, +	private final ServiceApiAdapter<S> serviceApiAdapter;, +, +	private ServiceProviderConnectionKey key;, +, +	private String displayName;, +	, +	private String profileUrl;, +	, +	private String imageUrl;, +, +	private boolean valuesInitialized;, +, +	private final Object monitor = new Object();, +, +	/**, +	 * Creates a new connection., +	 * @param serviceApiAdapter the Service API adapter, +	 */, +	public AbstractServiceProviderConnection(ServiceApiAdapter<S> serviceApiAdapter) {, +		this.serviceApiAdapter = serviceApiAdapter;, +	}, +	, +	/**, +	 * Creates a connection from the data provider., +	 * @param data the connection data, +	 * @param serviceApiAdapter the Service API adapter, +	 */, +	public AbstractServiceProviderConnection(ServiceProviderConnectionData data, ServiceApiAdapter<S> serviceApiAdapter) {, +		key = new ServiceProviderConnectionKey(data.getProviderId(), data.getProviderUserId());, +		this.serviceApiAdapter = serviceApiAdapter;, +		displayName = data.getDisplayName();, +		profileUrl = data.getProfileUrl();, +		imageUrl = data.getImageUrl();, +		valuesInitialized = true;, +	}, +	, +	// implementing ServiceProviderConnection, +	, +	public ServiceProviderConnectionKey getKey() {, +		return key;, +	}, +, +	public String getDisplayName() {, +		synchronized (monitor) {, +			initValues();, +			return displayName;			, +		}, +	}, +, +	public String getProfileUrl() {, +		synchronized (monitor) {, +			initValues();, +			return profileUrl;, +		}]