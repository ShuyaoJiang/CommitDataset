[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/jdbc/JdbcAccountConnectionRepository.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.jdbc;, +, +import java.io.Serializable;, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.util.Collection;, +import java.util.List;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.security.encrypt.StringEncryptor;, +import org.springframework.social.connect.AccountConnection;, +import org.springframework.social.connect.AccountConnectionRepository;, +import org.springframework.social.connect.OAuthToken;, +import org.springframework.stereotype.Repository;, +, +/**, + * Stores Account connection information in a relational database using the JDBC API., + * @author Keith Donald, + */, +@Repository, +public class JdbcAccountConnectionRepository implements AccountConnectionRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	private final StringEncryptor encryptor;, +	, +	public JdbcAccountConnectionRepository(JdbcTemplate jdbcTemplate, StringEncryptor encryptor) {, +		this.jdbcTemplate = jdbcTemplate;, +		this.encryptor = encryptor;, +	}, +, +	public void addConnection(Serializable accountId, String provider, OAuthToken accessToken,, +			String providerAccountId, String providerProfileUrl) {, +		jdbcTemplate.update(CREATE_CONNECTION_QUERY, accountId, provider,, +				encryptor.encrypt(accessToken.getValue()), encryptIfPresent(accessToken.getSecret()),, +				providerAccountId, providerProfileUrl);, +	}, +, +	public boolean isConnected(Serializable accountId, String provider) {, +		return jdbcTemplate.queryForInt(CONNECTION_EXISTS_QUERY, accountId, provider) == 1;, +	}, +, +	public void disconnect(Serializable accountId, String provider) {, +		jdbcTemplate.update(REMOVE_ALL_CONNECTIONS_QUERY, accountId, provider);, +	}, +, +	public void disconnect(Serializable accountId, String provider, String providerAccountId) {, +		jdbcTemplate.update(REMOVE_CONNECTION_QUERY, accountId, provider, providerAccountId);, +	}, +, +	public OAuthToken getAccessToken(Serializable accountId, String provider) {, +		List<OAuthToken> tokens = jdbcTemplate.query(ACCESS_TOKEN_QUERY, new RowMapper<OAuthToken>() {, +			public OAuthToken mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return new OAuthToken(encryptor.decrypt(rs.getString("accessToken")), decryptIfPresent(rs, +						.getString("secret")));, +			}, +		}, accountId, provider);, +, +		return tokens.size() > 0 ? tokens.get(0) : null;, +	}, +	, +	public OAuthToken getAccessToken(Serializable accountId, String provider, String providerAccountId) {, +		return jdbcTemplate.queryForObject(ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY, new RowMapper<OAuthToken>() {, +			public OAuthToken mapRow(ResultSet rs, int rowNum) throws SQLException {, +				return new OAuthToken(rs.getString("accessToken"), rs.getString("secret"));, +			}, +		}, accountId, provider, providerAccountId);, +	}, +, +	public String getProviderAccountId(Serializable accountId, String provider) {, +		List<String> accountIds = jdbcTemplate.queryForList(PROVIDER_ACCOUNT_ID_QUERY, String.class, accountId,, +				provider);, +		return accountIds.size() > 0 ? accountIds.get(0) : null;, +	}, +, +	public Collection<AccountConnection> getAccountConnections(Serializable accountId, String provider) {, +		return jdbcTemplate.query(ACCOUNT_CONNECTIONS_QUERY, new RowMapper<AccountConnection>() {, +			public AccountConnection mapRow(ResultSet rs, int rowNum) throws SQLException {, +				AccountConnection accountConnection = new AccountConnection((Serializable) rs.getObject("member"), rs, +						.getString("provider"), new OAuthToken(rs.getString("accessToken"), rs.getString("secret")), rs, +						.getString("accountId"), rs.getString("profileUrl"));, +				return accountConnection;, +			}, +		}, accountId, provider);]