[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryElementParser.java, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);, +		String dataSource = element.getAttribute("data-source");, +		beanBuilder.addConstructorArgReference(dataSource);, +		parserContext.getRegistry().registerBeanDefinition("connectionRepository", beanDefinition);, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryElementParser.java, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);, +		String dataSource = element.getAttribute("data-source");, +		beanBuilder.addConstructorArgReference(dataSource);, +		parserContext.getRegistry().registerBeanDefinition("connectionRepository", beanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="data-source" use="required" type="xsd:string">, +						Specifies the DataSource through which connections will be managed., +							<tool:expected-type type="javax.sql.DataSource"/>, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryElementParser.java, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);, +		String dataSource = element.getAttribute("data-source");, +		beanBuilder.addConstructorArgReference(dataSource);, +		parserContext.getRegistry().registerBeanDefinition("connectionRepository", beanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="data-source" use="required" type="xsd:string">, +						Specifies the DataSource through which connections will be managed., +							<tool:expected-type type="javax.sql.DataSource"/>, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/provider/LinkedInServiceProvider.java, +		super("linkedin", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey,, +				consumerSecret, "https://api.linkedin.com/uas/oauth/requestToken",, +				"https://www.linkedin.com/uas/oauth/authorize?oauth_token={requestToken}",, +				"https://api.linkedin.com/uas/oauth/accessToken"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryElementParser.java, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);, +		String dataSource = element.getAttribute("data-source");, +		beanBuilder.addConstructorArgReference(dataSource);, +		parserContext.getRegistry().registerBeanDefinition("connectionRepository", beanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="data-source" use="required" type="xsd:string">, +						Specifies the DataSource through which connections will be managed., +							<tool:expected-type type="javax.sql.DataSource"/>, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/provider/LinkedInServiceProvider.java, +		super("linkedin", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey,, +				consumerSecret, "https://api.linkedin.com/uas/oauth/requestToken",, +				"https://www.linkedin.com/uas/oauth/authorize?oauth_token={requestToken}",, +				"https://api.linkedin.com/uas/oauth/accessToken"));, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/provider/TripItServiceProvider.java, +		super("tripit", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey,, +				consumerSecret, "https://api.tripit.com/oauth/request_token",, +				"https://www.tripit.com/oauth/authorize?oauth_token={requestToken}&oauth_callback={redirectUri}",, +				"https://api.tripit.com/oauth/access_token"));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryElementParser.java, +		BeanDefinitionBuilder beanBuilder = BeanDefinitionBuilder.genericBeanDefinition(JdbcConnectionRepository.class);, +		String dataSource = element.getAttribute("data-source");, +		beanBuilder.addConstructorArgReference(dataSource);, +		parserContext.getRegistry().registerBeanDefinition("connectionRepository", beanDefinition);, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.0.xsd, +			<xsd:attribute name="data-source" use="required" type="xsd:string">, +						Specifies the DataSource through which connections will be managed., +							<tool:expected-type type="javax.sql.DataSource"/>, +++ b/spring-social-linkedin/src/main/java/org/springframework/social/linkedin/provider/LinkedInServiceProvider.java, +		super("linkedin", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey,, +				consumerSecret, "https://api.linkedin.com/uas/oauth/requestToken",, +				"https://www.linkedin.com/uas/oauth/authorize?oauth_token={requestToken}",, +				"https://api.linkedin.com/uas/oauth/accessToken"));, +++ b/spring-social-tripit/src/main/java/org/springframework/social/tripit/provider/TripItServiceProvider.java, +		super("tripit", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey,, +				consumerSecret, "https://api.tripit.com/oauth/request_token",, +				"https://www.tripit.com/oauth/authorize?oauth_token={requestToken}&oauth_callback={redirectUri}",, +				"https://api.tripit.com/oauth/access_token"));, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/provider/TwitterServiceProvider.java, +		super("twitter", connectionRepository, consumerKey, consumerSecret, new OAuth1Template(consumerKey,, +				consumerSecret, "https://twitter.com/oauth/request_token",, +				"https://twitter.com/oauth/authorize?oauth_token={requestToken}",, +				"https://twitter.com/oauth/access_token"));]