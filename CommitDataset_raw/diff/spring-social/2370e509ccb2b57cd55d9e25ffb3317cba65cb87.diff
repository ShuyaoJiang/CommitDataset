[+++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(@Value("#{request.userPrincipal}") Principal principal) {, +        return usersConnectionRepository().createConnectionRepository(principal.getName());, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), textEncryptor);, +<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" factory-bean="usersConnectionRepository" scope="request">, +    <aop:scoped-proxy />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="text">, +        return new ConnectController(environment.getProperty("application.secureUrl"),, +            connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />, +    <!-- relies on by-type autowiring for the other constructor-args -->, +			In either case, <classname>ConnectController</classname> should be constructed with the base "secure URL" for the application., +			It will use this URL to construct callback URLs used in the authorization flow., +			Since your application URL will typically vary between environments, its value should be externalized., +		</para>, +		<para>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    ConnectController controller = new ConnectController(environment.getProperty("application.secureUrl"),, +        connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />, +++ b/build.gradle, +    h2Version = '1.3.155', +    jacksonVersion = '1.8.1', +    springSecurityVersion = '3.1.0.CI-SNAPSHOT', +        compile ("org.springframework.security:spring-security-crypto:$springSecurityVersion") { optional = true }, +project('spring-social-security') {, +    description = 'Spring Security Integration', +    dependencies {, +        compile ("org.springframework:spring-web:$springVersion"), +        compile ("org.springframework:spring-webmvc:$springVersion") { optional = true }, +        compile ("org.springframework.security:spring-security-web:$springSecurityVersion"), +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile project(':spring-social-core'), +    }, +}, +, +++ b/docs/src/reference/docbook/connecting.xml, +        registry.addConnectionFactory(new FacebookConnectionFactory(environment.getProperty("facebook.clientId"),, +        registry.addConnectionFactory(new TwitterConnectionFactory(environment.getProperty("twitter.consumerKey"),, +    public ConnectionRepository connectionRepository(@Value("#{request.userPrincipal}") Principal principal) {, +        return usersConnectionRepository().createConnectionRepository(principal.getName());, +        return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator(), textEncryptor);, +<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">, +<bean id="usersConnectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">, +<bean id="connectionRepository" factory-method="createConnectionRepository" factory-bean="usersConnectionRepository" scope="request">, +    <aop:scoped-proxy />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText" />, +        <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="text">, +        return new ConnectController(environment.getProperty("application.secureUrl"),, +            connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />, +    <!-- relies on by-type autowiring for the other constructor-args -->, +			In either case, <classname>ConnectController</classname> should be constructed with the base "secure URL" for the application., +			It will use this URL to construct callback URLs used in the authorization flow., +			Since your application URL will typically vary between environments, its value should be externalized., +		</para>, +		<para>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    <p><button type="submit"><img src="<c:url value="/resources/social/twitter/signin.png" />"/></button></p>, +    ConnectController controller = new ConnectController(environment.getProperty("application.secureUrl"),, +        connectionFactoryLocator(), connectionRepository());, +    <constructor-arg value="${application.secureUrl}" />]