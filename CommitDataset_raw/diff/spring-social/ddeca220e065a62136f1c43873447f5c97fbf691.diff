[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +		MultiValueMap<String, String> collectedParameters = new LinkedMultiValueMap<String, String>((int) ((oauthParameters.size() + additionalParameters.size()) / .75 + 1));, +		collectedParameters.setAll(oauthParameters);, +		collectedParameters.putAll(additionalParameters);		, +		String baseString = buildBaseString(getBaseStringUri(targetUrl), method, collectedParameters);, +	private static String buildBaseString(String targetUrl, HttpMethod method, MultiValueMap<String, String> collectedParameters) {, +		builder.append(oauthEncode(normalizeParameters(collectedParameters)));, +	private static String normalizeParameters(MultiValueMap<String, String> collectedParameters) {, +		MultiValueMap<String, String> sortedEncodedParameters = new TreeMultiValueMap<String, String>();, +		for (Iterator<Entry<String, List<String>>> entryIt = collectedParameters.entrySet().iterator(); entryIt.hasNext();) {, +			Entry<String, List<String>> entry = entryIt.next();, +			List<String> collectedValues = entry.getValue();	, +			List<String> encodedValues = sortedEncodedParameters.get(oauthEncode(entry.getKey()));, +			for (Iterator<String> valueIt = collectedValues.iterator(); valueIt.hasNext();) {, +				// TODO null value semantics need to be clearly defined				, +				encodedValues.add(oauthEncode(valueIt.next()));, +			Collections.sort(encodedValues);, +		}, +		StringBuilder paramsBuilder = new StringBuilder();, +		for (Iterator<Entry<String, List<String>>> entryIt = sortedEncodedParameters.entrySet().iterator(); entryIt.hasNext();) {, +				// TODO null value semantics need to be clearly defined, +				paramsBuilder.append(name).append('=').append(value);, +					paramsBuilder.append("&");, +				paramsBuilder.append("&");, +		return paramsBuilder.toString();]