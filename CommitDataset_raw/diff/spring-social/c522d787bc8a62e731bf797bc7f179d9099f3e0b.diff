[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private boolean useParametersForClientAuthentication; , +	 * Assumes that the authorization URL is the same as the authentication URL., +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +		if (!useParametersForClientAuthentication) {, +	 * Set to true to pass client credentials to the provider as parameters instead of using HTTP Basic authentication., +	 * @param useParametersForClientAuthentication, +	 */, +	public void setUseParametersForClientAuthentication(boolean useParametersForClientAuthentication) {, +		this.useParametersForClientAuthentication = useParametersForClientAuthentication;, +	}, +, +	/**, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	private boolean useParametersForClientAuthentication; , +	 * Assumes that the authorization URL is the same as the authentication URL., +		this(clientId, clientSecret, authorizeUrl, null, accessTokenUrl);, +		if (!useParametersForClientAuthentication) {, +	 * Set to true to pass client credentials to the provider as parameters instead of using HTTP Basic authentication., +	 * @param useParametersForClientAuthentication, +	 */, +	public void setUseParametersForClientAuthentication(boolean useParametersForClientAuthentication) {, +		this.useParametersForClientAuthentication = useParametersForClientAuthentication;, +	}, +, +	/**, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +		if (useParametersForClientAuthentication) {, +++ b/spring-social-core/src/test/java/org/springframework/social/oauth2/OAuth2TemplateTest.java, +		oAuth2TemplateParamBased = new OAuth2Template("client_id", "client_secret", AUTHORIZE_URL, null, ACCESS_TOKEN_URL);, +		oAuth2TemplateParamBased.setUseParametersForClientAuthentication(true);]