[+++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth1ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String, String) API binding}., +	 * @return the binding to the service provider's API, +	A getApi(String accessToken, String secret);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth1ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String, String) API binding}., +	 * @return the binding to the service provider's API, +	A getApi(String accessToken, String secret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth2ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String) API binding}., +	 * @return a binding to the service provider's API, +	A getApi(String accessToken);, +++ b/spring-social-core/src/main/java/org/springframework/social/ServiceProvider.java, + * A ServiceProvider provides access to a API that the application can invoke on behalf of a provider user., + * Defines a single parameterized type A representing a strongly-typed Java binding to the provider's API that can be obtained and invoked by the application., + * @param <A> the service provider's API type, +public interface ServiceProvider<A> {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth1ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String, String) API binding}., +	 * @return the binding to the service provider's API, +	A getApi(String accessToken, String secret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2ServiceProvider.java, + * @param <A> The service provider's API type, +public interface OAuth2ServiceProvider<A> extends ServiceProvider<A> {, +	 * The result of the OAuth dance is an access token that can be used to obtain a {@link #getApi(String) API binding}., +	 * @return a binding to the service provider's API, +	A getApi(String accessToken);, +++ b/spring-social-facebook/src/main/java/org/springframework/social/facebook/connect/FacebookApiAdapter.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.facebook.connect;, +, +import org.springframework.social.BadCredentialsException;, +import org.springframework.social.connect.ApiAdapter;, +import org.springframework.social.connect.ConnectionValues;, +import org.springframework.social.connect.UserProfile;, +import org.springframework.social.connect.UserProfileBuilder;, +import org.springframework.social.facebook.api.FacebookApi;, +import org.springframework.social.facebook.api.FacebookProfile;, +, +/**, + * Facebook API adapter implementation., + * @author Keith Donald, + */, +public class FacebookApiAdapter implements ApiAdapter<FacebookApi> {, +, +	public boolean test(FacebookApi api) {, +		try {, +			api.userOperations().getUserProfile();, +			return true;, +		} catch (BadCredentialsException e) {, +			return false;, +		}, +	}, +, +	public void setConnectionValues(FacebookApi api, ConnectionValues values) {, +		FacebookProfile profile = api.userOperations().getUserProfile();, +		values.setProviderUserId(profile.getId());, +		values.setDisplayName(profile.getUsername());, +		values.setProfileUrl("http://facebook.com/#!/profile.php?id=" + profile.getId());, +		values.setImageUrl("http://graph.facebook.com/" + profile.getId() + "/picture");, +	}, +, +	public UserProfile fetchUserProfile(FacebookApi api) {]