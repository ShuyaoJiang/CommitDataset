[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +	// The response content type could be text/plain, text/html, etc...and may not trigger the form-encoded message converter, +		return SigningUtils.buildAuthorizationHeaderValue(tokenUrl, oauthParameters, additionalParameters, HttpMethod.POST, consumerSecret, tokenSecret);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));, +		HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(bodyParameters, headers);, +	// The response content type could be text/plain, text/html, etc...and may not trigger the form-encoded message converter, +		return SigningUtils.buildAuthorizationHeaderValue(tokenUrl, oauthParameters, additionalParameters, HttpMethod.POST, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +import org.springframework.http.HttpRequest;, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.social.support.HttpRequestDecorator;, +		HttpRequest protectedResourceRequest = new HttpRequestDecorator(request);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	private final RestTemplate restTemplate = new RestTemplate();, +		return getTokenFromProvider(accessTokenUrl, accessTokenParameters, Collections.<String, String> emptyMap(), requestToken.getSecret());, +		headers.add("Authorization", getAuthorizationHeaderValue(tokenUrl, tokenRequestParameters, additionalParameters, tokenSecret));]