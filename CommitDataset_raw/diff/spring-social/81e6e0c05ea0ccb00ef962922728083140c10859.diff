[+++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #customAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	 * Subclassing hook to add custom authorization parameters to the authorization URL., +	 * Default implementation adds no parameters., +	protected void customAuthorizationParameters(MultiValueMap<String, String> parameters) {, +		customAuthorizationParameters(parameters);, +		if (parameters != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.entrySet().iterator(); additionalParams.hasNext();) {, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #customAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	 * Subclassing hook to add custom authorization parameters to the authorization URL., +	 * Default implementation adds no parameters., +	protected void customAuthorizationParameters(MultiValueMap<String, String> parameters) {, +		customAuthorizationParameters(parameters);, +		if (parameters != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth2Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String STATE = "state";, +	private static final String SCOPE = "scope";, +	private static final String REDIRECT_URI = "redirect_uri";, +	 * Returns the authorization callback url; this value must match the redirectUri registered with the provider (optional per the OAuth 2 spec, but required by most OAuth 2 providers). , +		return getFirst(REDIRECT_URI);, +	 * Sets the authorization callback url; this value must match the redirectUri registered with the provider (optional per the OAuth 2 spec, but required by most OAuth 2 providers). , +	 */, +	public void setRedirectUri(String redirectUri) {, +		set(REDIRECT_URI, redirectUri);, +	}, +, +	/**, +	 * Returns the permissions the application is seeking with the authorization (optional)., +		return getFirst(SCOPE);, +	 * Sets the permissions the application is seeking with the authorization (optional)., +	 */, +	public void setScope(String scope) {, +		set(SCOPE, scope);, +	}, +, +	/**, +	 * Returns an opaque key that must be included in the provider's authorization callback (optional)., +		return getFirst(STATE);, +	 * Sets an opaque key that must be included in the provider's authorization callback (optional)., +	public void setState(String state) {, +		set(STATE, state);, +++ b/docs/src/info/changelog.txt, +Spring Social 1.0.0 Release Candidate 3 (August 25, 2011), +=========================================================, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +import org.springframework.util.LinkedMultiValueMap;, +@SuppressWarnings("serial"), +public final class OAuth1Parameters extends LinkedMultiValueMap<String, String> {, +	private static final String OAUTH_CALLBACK = "oauth_callback";, +	public static final OAuth1Parameters NONE = new OAuth1Parameters();, +		return getFirst(OAUTH_CALLBACK);, +	public void setCallbackUrl(String callbackUrl) {, +		set(OAUTH_CALLBACK, callbackUrl);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * This may be useful when overriding {@link #customAuthorizationParameters(MultiValueMap)} and the consumer key is required in the authorization request., +	 * Subclassing hook to add custom authorization parameters to the authorization URL.]