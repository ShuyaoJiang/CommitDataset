[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnection;, +	public String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection) {, +			ServiceProviderConnectionKey key = connection.getKey();, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnection;, +	public String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection) {, +			ServiceProviderConnectionKey key = connection.getKey();, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The version of OAuth1 implemented by this operations instance., +	 * @see OAuth1Version#CORE_10, +	 * @see OAuth1Version#CORE_10_REVISION_A, +	 */, +	public OAuth1Version getVersion();, +	, +	/**, +	 * @param parameters parameters to pass to the provider in the authorize URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters);, +	 * For some provider, the authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * @param parameters parameters to pass to the provider in the authenticate URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	 * @return the absolute authenticate URL to redirect the user to for authentication, +	String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/MultiUserServiceProviderConnectionRepository.java, +	 * May never return null if this method will implicitly create a local user account from the connection if no such local account already exists., +	 * @param connection the service provider connection resulting from the provider sign-in attempt, +	String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepository.java, +import org.springframework.social.connect.ServiceProviderConnection;, +	public String findLocalUserIdWithConnection(ServiceProviderConnection<?> connection) {, +			ServiceProviderConnectionKey key = connection.getKey();, +			return jdbcTemplate.queryForObject("select localUserId from ServiceProviderConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The version of OAuth1 implemented by this operations instance., +	 * @see OAuth1Version#CORE_10, +	 * @see OAuth1Version#CORE_10_REVISION_A, +	 */, +	public OAuth1Version getVersion();, +	, +	/**, +	 * @param parameters parameters to pass to the provider in the authorize URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	String buildAuthorizeUrl(String requestToken, OAuth1Parameters parameters);, +	 * For some provider, the authenticate URL differs from the authorizationUrl slightly in that it does not require the user to authorize the app multiple times., +	 * @param parameters parameters to pass to the provider in the authenticate URL. Should never be null; if there are no parameters to pass, set this argument value to {@link OAuth1Parameters#NONE}., +	 * @return the absolute authenticate URL to redirect the user to for authentication, +	String buildAuthenticateUrl(String requestToken, OAuth1Parameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Parameters.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.oauth1;, +, +import org.springframework.util.MultiValueMap;, +, +/**, + * Parameters for building an OAuth1 authorize URL., + * @author Keith Donald, + * @see OAuth1Operations#buildAuthorizeUrl(String, OAuth1Parameters), + */, +public final class OAuth1Parameters {, +	, +	private final String callbackUrl;, +	, +	private final MultiValueMap<String, String> additionalParameters;, +, +	/**, +	 * Shared instance for passing zero authorization parameters (accepted for OAuth 1.0a-based flows)., +	 */, +	public static final OAuth1Parameters NONE = new OAuth1Parameters(null, null);, +	, +	/**, +	 * Creates a new OAuth1Parameters instance., +	 * @param callbackUrl the authorization callback url; this value must be included for OAuth 1.0 providers (and NOT for OAuth 1.0a), +	 */, +	public OAuth1Parameters(String callbackUrl) {]