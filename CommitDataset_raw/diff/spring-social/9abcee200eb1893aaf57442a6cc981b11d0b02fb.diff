[+++ b/docs/src/reference/docbook/serviceprovider.xml, +						The application exchanges the authorization grant for an access grant., +						The service provider issues the access grant to the application., +						The application uses the AccessGrant to establish a connection between the local user account and the external provider account., +						With the connection established, the application can now obtain reference to the Service API and invoke the provider on behalf of the user., +			OAuth 1 is the previous version of the OAuth protocol., +			It is more complex OAuth 2, and sufficiently different that it is supported separately., +			Twitter, Linked In, and TripIt are some of the well-known ServiceProviders that use OAuth 1., +			In Spring Social, the OAuth1ServiceProvider interface models a service provider based on the OAuth 1 protocol:			, +			<para>, +				Like a OAuth2-based provider, <methodname>getOAuthOperations()</methodname> returns an API to use to conduct the authorization flow, or "OAuth Dance"., +				The result of the OAuth 1 flow is an <classname>OAuthToken</classname> that can be used to establish a connection with a local user account by calling <methodname>connect</methodname>., +				The OAuth1Operations interface is shown below:				, +			</para>, +				Callers are first expected to call fetchNewRequestToken(String) obtain a temporary token from the ServiceProvider to use during the authorization session., +				Next, callers should call buildAuthorizeUrl(String) to construct the URL to redirect the user to for connection authorization., +				Upon user authorization, the authorized request token returned by the provider should be exchanged for an access token., +				The access token should then used to create a connection., +				This flow is illustrated below:				, +				<listitem>, +					<para>, +						The flow starts with the application asking for a request token., +						The purpose of the request token is to obtain user approval and it can only be used to obtain an access token., +						In OAuth 1.0a, the consumer callback URL is passed to the provider when asking for a request token., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider issues a request token to the consumer., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application redirects the user's browser to the provider's authorization page, passing the request token as a parameter., +						In OAuth 1.0, the callback URL is also passed as a parameter in this step., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider prompts the user to authorize the consumer application and the user agrees. (Note that this is the only step where the user participates in the flow.), +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider redirects the user's browser back to a application (via the callback URL)., +						In OAuth 1.0a, this redirect includes a verifier code as a parameter. At this point, the request token is authorized., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application exchanges the request token (and the verifier in OAuth 1.0a) for an access token., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The service provider issues an access token to the consumer. The "dance" is complete., +					</para>, +				</listitem>, +				<listitem>, +					<para>, +						The application uses the access token to establish a connection between the local user account and the external provider account., +						With the connection established, the application can now obtain reference to the Service API and invoke the provider on behalf of the user., +					</para>, +				</listitem>				, +		<para>, +			Working with the service provider framework starts with configuring the service provider in Spring., +			Spring Social's configuration namespace provides a convenient <code> <![CDATA[<social:service-provider>]]></code> element for declaring a service provider:, +      		<programlisting><![CDATA[, +<?xml version="1.0" encoding="UTF-8"?>, +    xsi:schemaLocation="http://www.springframework.org/schema/spring-social http://www.springframework.org/schema/social/spring-social-1.0.xsd, +                        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +</beans>]]>, +			</programlisting>, +		</para>, +		<para>, +			The <code>class</code> attribute specifies the fully-qualified name of the provider implementation., +			This can be any of the service provider implementations that come with Spring Social or a custom implementation., +			Spring Social comes with the following service provider implementations:, +		</para>, +		<para>, +			The <code>client-key</code> and <code>client-secret</code> attributes specify the key and secret values assigned to your application when you registered it with the provider., +		</para>]