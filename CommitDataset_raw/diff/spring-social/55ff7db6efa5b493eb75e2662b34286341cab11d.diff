[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Find all connections the current user has across all providers., +	MultiValueMap<String, Connection<?>> findAllConnections();, +	 * Returns true if the current user is connected to the provider by the given id e.g. 'facebook'., +	 * @param providerId the provider id, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(String providerId);, +	, +	/**, +	 * Returns true if the current user is connected to the provider of the given API type e.g. Facebook.class., +	 * Useful as a strongly-typed alternative to {@link #isConnected(String))}., +	 * @param apiType the apiType e.g. Facebook, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(Class<?> apiType);, +	, +	/**, +	 * Find the connections the current user has to the provider registered by the given id e.g. 'facebook'., +	List<Connection<?>> findConnections(String providerId);, +	 * Find the connections the current user has to the provider of the given API e.g. Facebook.class., +	 * Returns the equivalent of {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized Connection instances e.g. <code>List&lt;Connection&lt;Facebook&gt;&gt;</code>., +	 * @param <A> the API parameterized type, +	 * @param apiType the service API type e.g. Facebook.class or Twitter.class, +	 * @return the connections, +	 */, +	<A> List<Connection<A>> findConnections(Class<A> apiType);, +	, +	/**, +	 * Find the connections the current user has to the given provider users., +	MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds);, +	 * Find a connection for the current user by its key, which consists of the providerId + providerUserId., +	 * Find the connection between the current user and the given provider user., +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @throws NoSuchConnectionException if the user is not connected to the provider , +	<A> Connection<A> findConnection(Class<A> apiType, String providerUserId);, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * If the user has multiple connections to the provider associated with the given apiType, this method returns the one with the top rank (or priority)., +	 * Useful for direct use by application code to obtain a parameterized Connection instance., +	 * @param <A> the service api parameterized type, +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, +	 * @throws NotConnectedException if the user is not connected to the provider of the API, +	<A> Connection<A> findPrimaryConnection(Class<A> apiType);, +	 * Add a new connection to this repository for the current user., +	 * After the connection is added, it can be retrieved later using one of the finders defined in this interface., +	void removeConnections(String providerId);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#findPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Find all connections the current user has across all providers., +	MultiValueMap<String, Connection<?>> findAllConnections();, +	 * Returns true if the current user is connected to the provider by the given id e.g. 'facebook'., +	 * @param providerId the provider id, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(String providerId);, +	, +	/**, +	 * Returns true if the current user is connected to the provider of the given API type e.g. Facebook.class., +	 * Useful as a strongly-typed alternative to {@link #isConnected(String))}., +	 * @param apiType the apiType e.g. Facebook, +	 * @return true if yes, false otherwise, +	 */, +	public boolean isConnected(Class<?> apiType);, +	, +	/**, +	 * Find the connections the current user has to the provider registered by the given id e.g. 'facebook'., +	List<Connection<?>> findConnections(String providerId);, +	 * Find the connections the current user has to the provider of the given API e.g. Facebook.class., +	 * Returns the equivalent of {@link #findConnections(String)}, but uses the apiType as the provider key instead of the providerId., +	 * Useful for direct use by application code to obtain parameterized Connection instances e.g. <code>List&lt;Connection&lt;Facebook&gt;&gt;</code>., +	 * @param <A> the API parameterized type, +	 * @param apiType the service API type e.g. Facebook.class or Twitter.class, +	 * @return the connections, +	 */, +	<A> List<Connection<A>> findConnections(Class<A> apiType);, +	, +	/**, +	 * Find the connections the current user has to the given provider users., +	MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds);, +	 * Find a connection for the current user by its key, which consists of the providerId + providerUserId., +	 * Find the connection between the current user and the given provider user., +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @throws NoSuchConnectionException if the user is not connected to the provider , +	<A> Connection<A> findConnection(Class<A> apiType, String providerUserId);, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * If the user has multiple connections to the provider associated with the given apiType, this method returns the one with the top rank (or priority)., +	 * Useful for direct use by application code to obtain a parameterized Connection instance., +	 * @param <A> the service api parameterized type, +	 * @param apiType the service type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, +	 * @throws NotConnectedException if the user is not connected to the provider of the API, +	<A> Connection<A> findPrimaryConnection(Class<A> apiType);, +	 * Add a new connection to this repository for the current user.]