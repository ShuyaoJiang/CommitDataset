[+++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/JdbcConnectionRepository.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.jdbc.core.simple.SimpleJdbcInsert;, +	private final SimpleJdbcInsert connectionInsert;, +	, +		this.connectionInsert = createConnectionInsert();, +			Map<String, Object> args = new HashMap<String, Object>();, +			args.put("accountId", accountId);, +			args.put("providerId", providerId);, +			args.put("accessToken", encrypt(connection.getAccessToken()));, +			args.put("secret", encrypt(connection.getSecret()));, +			args.put("refreshToken", encrypt(connection.getRefreshToken()));			, +			Number connectionId = connectionInsert.executeAndReturnKey(args);, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +	private SimpleJdbcInsert createConnectionInsert() {, +		SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);, +		insert.setTableName("Connection");, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +		insert.setGeneratedKeyName("id");, +		return insert;, +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth', +    dependencies {, +        compile "commons-httpclient:commons-httpclient:$commonsHttpClientVersion", +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile "org.springframework:spring-web:$springVersion", +    }, +}, +, +        compile project(':spring-social-oauth'), +++ b/settings.gradle, +include 'spring-social-oauth', +++ b/spring-social-client/src/main/java/org/springframework/social/provider/jdbc/JdbcConnectionRepository.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.jdbc.core.simple.SimpleJdbcInsert;, +	private final SimpleJdbcInsert connectionInsert;, +	, +		this.connectionInsert = createConnectionInsert();, +			Map<String, Object> args = new HashMap<String, Object>();, +			args.put("accountId", accountId);, +			args.put("providerId", providerId);, +			args.put("accessToken", encrypt(connection.getAccessToken()));, +			args.put("secret", encrypt(connection.getSecret()));, +			args.put("refreshToken", encrypt(connection.getRefreshToken()));			, +			Number connectionId = connectionInsert.executeAndReturnKey(args);, +			return new Connection((Long) connectionId, connection.getAccessToken(), connection.getSecret(), connection.getRefreshToken());, +	private SimpleJdbcInsert createConnectionInsert() {, +		SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);, +		insert.setTableName("Connection");, +		insert.setColumnNames(Arrays.asList("accountId", "providerId", "accessToken", "secret", "refreshToken"));, +		insert.setGeneratedKeyName("id");, +		return insert;, +++ /dev/null, +++ b/build.gradle, +project('spring-social-oauth') {, +    description = 'Spring Social OAuth']