[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ /dev/null, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +			<xs:attribute name="connection-repository-id" use="optional" type="xs:string" default="connectionRepository" />, +			<xs:attribute name="users-connection-repository-id" use="optional" type="xs:string" default="usersConnectionRepository" />, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractConnectionFactoryBeanDefinitionParser.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +			BeanDefinitionHolder connFactoryLocatorBeanDefHolder = new BeanDefinitionHolder(BeanDefinitionBuilder.genericBeanDefinition(ConnectionFactoryRegistry.class).getBeanDefinition(), CONNECTION_FACTORY_LOCATOR_ID);			, +			BeanDefinitionHolder scopedProxy = ScopedProxyUtils.createScopedProxy(connFactoryLocatorBeanDefHolder, parserContext.getRegistry(), false);			, +			parserContext.getRegistry().registerBeanDefinition(scopedProxy.getBeanName(), scopedProxy.getBeanDefinition());, +		BeanDefinition connectionFactoryLocatorBD = parserContext.getRegistry().getBeanDefinition(ScopedProxyUtils.getTargetBeanName(CONNECTION_FACTORY_LOCATOR_ID));, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/JdbcConnectionRepositoryBeanDefinitionParser.java, +		String connectionRepositoryId = element.getAttribute("connection-repository-id");, +		String usersConnectionRepositoryId = element.getAttribute("users-connection-repository-id");, +		registerUsersConnectionRepositoryBeanDefinition(parserContext, usersConnectionRepositoryId, connectionFactoryLocatorRef, dataSourceRef, encryptorRef);, +		return registerConnectionRepository(parserContext, usersConnectionRepositoryId, connectionRepositoryId);, +	private void registerUsersConnectionRepositoryBeanDefinition(ParserContext parserContext, String usersConnectionRepositoryId, String connectionFactoryLocatorRef, String dataSourceRef, String encryptorRef) {, +		parserContext.getRegistry().registerBeanDefinition(usersConnectionRepositoryId, decorateWithScopedProxy(usersConnectionRepositoryId, usersConnectionRepositoryBD, parserContext));, +	private BeanDefinition registerConnectionRepository(ParserContext parserContext, String usersConnectionRepositoryId, String connectionRepositoryId) {, +		connectionRepositoryBD.setFactoryBeanName(usersConnectionRepositoryId);, +		connectionRepositoryBD.setFactoryMethodName(CREATE_CONNECTION_REPOSITORY_METHOD_NAME);, +		parserContext.getRegistry().registerBeanDefinition(connectionRepositoryId, decorateWithScopedProxy(connectionRepositoryId, connectionRepositoryBD, parserContext));, +		BeanDefinitionHolder beanDefinitionHolder = new BeanDefinitionHolder(beanDefinition, beanName);, +		return ScopedProxyUtils.createScopedProxy(beanDefinitionHolder, parserContext.getRegistry(), false).getBeanDefinition();, +	private static final String CREATE_CONNECTION_REPOSITORY_METHOD_NAME = "createConnectionRepository";, +	private static final String USER_ID_STRING_ID = "__userIdString";, +++ /dev/null, +++ b/spring-social-config/src/main/resources/org/springframework/social/config/xml/spring-social-1.1.xsd, +			<xs:attribute name="connection-repository-id" use="optional" type="xs:string" default="connectionRepository" />, +			<xs:attribute name="users-connection-repository-id" use="optional" type="xs:string" default="usersConnectionRepository" />, +++ b/spring-social-config/src/test/java/org/springframework/social/config/xml/SocialNamespaceTest.java]