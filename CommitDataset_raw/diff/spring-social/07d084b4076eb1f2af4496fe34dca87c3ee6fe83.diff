[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuthToken.java, +public class OAuthToken implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuthToken.java, +public class OAuthToken implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +public class AccessGrant implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +	 * Creates an {@link OAuthToken} given the response from the request token or access token exchange with the provider., +	 * May be overridden to create a custom {@link OAuthToken}., +	 * @param tokenValue the token value received from the provider., +	 * @param tokenSecret the token secret received from the provider., +	 * @param response all parameters from the response received in the request/access token exchange., +	 * @return an {@link OAuthToken}, +	 */, +	protected OAuthToken createOAuthToken(String tokenValue, String tokenSecret, MultiValueMap<String, String> response) {, +		return new OAuthToken(tokenValue, tokenSecret);, +	}, +, +	/**, +		return createOAuthToken(body.getFirst("oauth_token"), body.getFirst("oauth_token_secret"), body);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuthToken.java, +public class OAuthToken implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AccessGrant.java, +public class AccessGrant implements Serializable {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	 * The default implementation uses RestTemplate to request the access token and expects a JSON response to be bound to a Map. The information in the Map will be used to create an {@link AccessGrant}., +	 * Since the OAuth 2 specification indicates that an access token response should be in JSON format, there's often no need to override this method., +	 * If all you need to do is capture provider-specific data in the response, you should override createAccessGrant() instead., +	 * However, in the event of a provider whose access token response is non-JSON, you may need to override this method to request that the response be bound to something other than a Map., +	 * For example, if the access token response is given as form-encoded, this method should be overridden to call RestTemplate.postForObject() asking for the response to be bound to a MultiValueMap (whose contents can then be used to create an AccessGrant)., +	/**, +	 * Creates an {@link AccessGrant} given the response from the access token exchange with the provider., +	 * May be overridden to create a custom AccessGrant that captures provider-specific information from the access token response. , +	 * @param accessToken the access token value received from the provider, +	 * @param scope the scope of the access token, +	 * @param refreshToken a refresh token value received from the provider, +	 * @param expiresIn the time (in seconds) remaining before the access token expires., +	 * @param response all parameters from the response received in the access token exchange., +	 * @return an {@link AccessGrant}, +	 */, +	protected AccessGrant createAccessGrant(String accessToken, String scope, String refreshToken, Integer expiresIn, Map<String, Object> response) {, +		return new AccessGrant(accessToken, scope, refreshToken, expiresIn);, +	}, +		, +		return createAccessGrant((String) result.get("access_token"), (String) result.get("scope"), (String) result.get("refresh_token"), (Integer) result.get("expires_in"), result);]