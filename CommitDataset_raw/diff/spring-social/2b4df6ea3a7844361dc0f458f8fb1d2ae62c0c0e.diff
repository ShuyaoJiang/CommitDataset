[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param scope optional scope to narrow to when refreshing access; if null, the existing scope is preserved., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param scope optional scope to narrow to when refreshing access; if null, the existing scope is preserved., +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/ProviderSignInAttempt.java, + * For the former scenario, callers should all {@link #connect()} post-signup to establish a connection between a new user account and the provider account., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AbstractOAuth2ServiceProvider.java, + * @param <S> the service API type, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * Refreshes a previous access grant., +	 * @param refreshToken the refresh token from the previous access grant., +	 * @param scope optional scope to narrow to when refreshing access; if null, the existing scope is preserved., +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/ProviderSignInAttempt.java, + * For the former scenario, callers should all {@link #connect()} post-signup to establish a connection between a new user account and the provider account., +++ b/spring-social-web/src/main/java/org/springframework/social/web/signin/ProviderSignInUtils.java]