[+++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/settings.gradle, +include 'spring-social-config', +++ b/build.gradle, +project('spring-social-config') {, +    description = 'Configuration Namespace', +    dependencies {, +        compile "org.springframework:spring-beans:$springVersion", +        compile project(':spring-social-core'), +        testCompile project(':spring-social-facebook'), +        testCompile project(':spring-social-twitter'), +        testCompile "com.h2database:h2:1.2.143", +        testCompile project(':spring-social-core').sourceSets.test.classes, +    }, +}, +, +++ b/docs/src/reference/docbook/implementing.xml, +++ b/settings.gradle, +include 'spring-social-config', +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/ServiceProviderElementParser.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.config.xml;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.w3c.dom.Element;, +, +class ServiceProviderElementParser implements BeanDefinitionParser {, +	, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		String beanId = element.getAttribute("id");, +		String providerClassName = element.getAttribute("class");, +		String clientKey = element.getAttribute("app-key");, +		String clientSecret = element.getAttribute("app-secret");, +		String connectionRepository = element.getAttribute("connection-repository");, +, +		BeanDefinitionBuilder providerBeanBuilder = BeanDefinitionBuilder.genericBeanDefinition(providerClassName);, +		providerBeanBuilder.addConstructorArgValue(clientKey);, +		providerBeanBuilder.addConstructorArgValue(clientSecret);, +		providerBeanBuilder.addConstructorArgReference(connectionRepository);, +, +		BeanDefinition providerBeanDefinition = providerBeanBuilder.getBeanDefinition();, +		if(beanId == null || beanId.isEmpty()) {, +			beanId = parserContext.getReaderContext().generateBeanName(providerBeanDefinition);]