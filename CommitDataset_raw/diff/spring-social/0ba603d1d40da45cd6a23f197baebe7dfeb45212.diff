[+++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +import org.w3c.dom.NamedNodeMap;, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET), element.getAttributes());, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	}, +	/**, +	 * Creates a BeanDefinition for a provider connection factory., +	 * Although most providers will not need to override this method, it does allow for overriding to address any provider-specific needs., +	 * @param appId The application's App ID, +	 * @param appSecret The application's App Secret, +	 * @param allAttributes All attributes available on the configuration element. Useful for provider-specific configuration., +	 * @return a BeanDefinition for the provider's connection factory bean., +	 */, +	protected BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret, NamedNodeMap allAttributes) {, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret, NamedNodeMap allAttributes) {, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret, allAttributes));		, +, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +, +	private final static Log logger = LogFactory.getLog(AbstractProviderConfigBeanDefinitionParser.class);, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigBeanDefinitionParser.java, +import org.w3c.dom.NamedNodeMap;, +	public final BeanDefinition parse(Element element, ParserContext parserContext) {, +		BeanDefinition connectionFactoryLocatorBD = getConnectionFactoryLocatorBeanDefinition(parserContext);, +		addConnectionFactory(connectionFactoryLocatorBD, element.getAttribute(APP_ID), element.getAttribute(APP_SECRET), element.getAttributes());, +		BeanDefinition addApiBindingBean = addApiBindingBean(parserContext);, +		return addApiBindingBean;, +	}, +	/**, +	 * Creates a BeanDefinition for a provider connection factory., +	 * Although most providers will not need to override this method, it does allow for overriding to address any provider-specific needs., +	 * @param appId The application's App ID, +	 * @param appSecret The application's App Secret, +	 * @param allAttributes All attributes available on the configuration element. Useful for provider-specific configuration., +	 * @return a BeanDefinition for the provider's connection factory bean., +	 */, +	protected BeanDefinition getConnectionFactoryBeanDefinition(String appId, String appSecret, NamedNodeMap allAttributes) {, +	private void addConnectionFactory(BeanDefinition connectionFactoryLocatorBD, String appId, String appSecret, NamedNodeMap allAttributes) {, +		connectionFactoriesList.add(getConnectionFactoryBeanDefinition(appId, appSecret, allAttributes));		, +, +	private final Class<? extends ConnectionFactory<?>> connectionFactoryClass;, +	, +	private final Class<?> apiBindingType;, +, +	private final Class<?> apiHelperClass;, +, +	private final static Log logger = LogFactory.getLog(AbstractProviderConfigBeanDefinitionParser.class);, +, +++ b/spring-social-config/src/main/java/org/springframework/social/config/xml/AbstractProviderConfigNamespaceHandler.java, + * Base {@link NamespaceHandler} for Spring Social provider modules to create configuration namespaces. , + * Requires, at minimum, that the provider-specific namespace provider an AbstractProviderConfigBeanDefinition for parsing "config" elements., +    private final Map<String, BeanDefinitionParser> parsers = new HashMap<String, BeanDefinitionParser>();, +]