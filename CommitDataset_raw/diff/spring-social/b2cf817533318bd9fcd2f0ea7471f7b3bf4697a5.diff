[+++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +			String queryDelimiter = "?";, +			if(URI.create(baseUri).getQuery() != null) {, +				queryDelimiter = "&";, +			}, +			return new URI(baseUri + (builder.length() > 0 ? queryDelimiter + builder.toString() : ""));, +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +			String queryDelimiter = "?";, +			if(URI.create(baseUri).getQuery() != null) {, +				queryDelimiter = "&";, +			}, +			return new URI(baseUri + (builder.length() > 0 ? queryDelimiter + builder.toString() : ""));, +++ b/spring-social-core/src/test/java/org/springframework/social/util/URIBuilderTest.java, +import static org.junit.Assert.*;, +	public void buildURIWithExistingParameters() {, +		URI uri = URIBuilder.fromUri("http://example.com?foo=bar").build();, +		assertEquals("http://example.com?foo=bar", uri.toString());				, +	}, +, +	@Test, +	public void buildURIWithExistingAndNewParameters() {, +		URI uri = URIBuilder.fromUri("http://example.com?foo=bar&x=1").queryParam("salt", "NaCl").build();, +		assertEquals("http://example.com?foo=bar&x=1&salt=NaCl", uri.toString());				, +	}, +, +	@Test, +++ b/docs/src/reference/docbook/signin.xml, +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +							The default sign up URL is "/signup" (relative to the application root), but can be customized by setting the <code>signUpUrl</code> property., +						</para>, +					</listitem>, +					<listitem>, +						<para>, +							If the provider user ID matches more than one existing connection, <classname>ProviderSignInController</classname> will redirect to the application's sign in URL to offer the user a chance to sign in through another provider or with their username and password., +							The request to the sign in URL will have an "error" query parameter set to "multiple_users" to indicate the problem so that the page can communicate it to the user., +							The default sign in URL is "/signin" (relative to the application root), but can be customized by setting the <code>signInUrl</code> property., +++ b/spring-social-core/src/main/java/org/springframework/social/support/URIBuilder.java, +			String queryDelimiter = "?";, +			if(URI.create(baseUri).getQuery() != null) {, +				queryDelimiter = "&";, +			}, +			return new URI(baseUri + (builder.length() > 0 ? queryDelimiter + builder.toString() : ""));]