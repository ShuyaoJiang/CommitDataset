[+++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/src/main/resources/org/springframework/social/samples/github/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/src/main/resources/org/springframework/social/samples/github/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-connection-repository data-source="dataSource" />, +	<bean id="serviceProviderFactory" class="org.springframework.social.provider.ContextServiceProviderFactory" />, +++ b/samples/github-showcase/pom.xml, +	    	<groupId>org.springframework.security</groupId>, +	    	<artifactId>spring-security-crypto</artifactId>, +	    	<version>3.1.0.CI-SNAPSHOT</version>, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/GitHubSampleAccountIdResolver.java, +import org.springframework.social.web.connect.AccountIdResolver;, +++ b/samples/github-showcase/src/main/java/org/springframework/social/samples/github/ShowcaseController.java, +			GitHubOperations gitHub = gitHubProvider.getConnections(1).get(0).getServiceApi();, +			String gitHubId = gitHub.getProfileId();, +++ b/samples/github-showcase/src/main/resources/org/springframework/social/samples/github/db/ConnectedAccount.sql, +create table Connection (id identity,, +					accountId varchar not null,, +					providerId varchar not null,, +					primary key (id));, +create unique index AccessToken on Connection(accountId, providerId, accessToken);, +++ b/samples/github-showcase/src/main/webapp/WEB-INF/spring/social-connection.xml, +	<social:jdbc-connection-repository data-source="dataSource" />, +	<bean id="serviceProviderFactory" class="org.springframework.social.provider.ContextServiceProviderFactory" />, +++ b/samples/twitter-showcase/pom.xml]