[+++ b/src/main/java/org/springframework/social/oauth/OAuthHelper.java, +	String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +			Map<String, String> parameters) throws MalformedURLException;, +	Object resolveAccessToken(String resourceId);, +++ b/src/main/java/org/springframework/social/oauth/OAuthHelper.java, +	String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +			Map<String, String> parameters) throws MalformedURLException;, +	Object resolveAccessToken(String resourceId);, +++ b/src/main/java/org/springframework/social/oauth/OAuthSpringSecurityOAuthHelper.java, +	public String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +	public Object resolveAccessToken(String resourceId) {, +++ b/src/main/java/org/springframework/social/oauth/OAuthHelper.java, +	String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +			Map<String, String> parameters) throws MalformedURLException;, +	Object resolveAccessToken(String resourceId);, +++ b/src/main/java/org/springframework/social/oauth/OAuthSpringSecurityOAuthHelper.java, +	public String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +	public Object resolveAccessToken(String resourceId) {, +++ b/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, +	private static final String TWITTER_PROVIDER_ID = "Twitter";, +, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("Content-Type", "application/x-www-form-urlencoded");, +		addAuthorizationHeader(headers, method, twitterUrl, urlVariable, queryParameters);, +, +	private void addAuthorizationHeader(HttpHeaders headers, HttpMethod method, String twitterUrl,, +			Map<String, String> urlVariable,, +			Object accessToken = oauthHelper.resolveAccessToken(TWITTER_PROVIDER_ID);, +, +			if (accessToken != null) {, +				headers.add("Authorization", oauthHelper.buildAuthorizationHeader(accessToken, method, expandedUrl,, +						TWITTER_PROVIDER_ID, queryParameters));, +			}, +++ b/src/main/java/org/springframework/social/oauth/OAuthHelper.java, +	String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +			Map<String, String> parameters) throws MalformedURLException;, +	Object resolveAccessToken(String resourceId);, +++ b/src/main/java/org/springframework/social/oauth/OAuthSpringSecurityOAuthHelper.java, +	public String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +	public Object resolveAccessToken(String resourceId) {, +++ b/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, +	private static final String TWITTER_PROVIDER_ID = "Twitter";, +, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("Content-Type", "application/x-www-form-urlencoded");, +		addAuthorizationHeader(headers, method, twitterUrl, urlVariable, queryParameters);, +, +	private void addAuthorizationHeader(HttpHeaders headers, HttpMethod method, String twitterUrl,, +			Map<String, String> urlVariable,, +			Object accessToken = oauthHelper.resolveAccessToken(TWITTER_PROVIDER_ID);, +, +			if (accessToken != null) {, +				headers.add("Authorization", oauthHelper.buildAuthorizationHeader(accessToken, method, expandedUrl,, +						TWITTER_PROVIDER_ID, queryParameters));, +			}, +++ b/src/test/java/org/springframework/social/oauth/OAuthSpringSecurityOAuthHelperTest.java, +import static org.junit.Assert.*;, +		String authHeader = oauthHelper.buildAuthorizationHeader(accessToken, HttpMethod.POST,, +				"http://someurl", "provider", new HashMap<String, String>());, +	@Test, +		assertNull(oauthHelper.resolveAccessToken("resource"));, +++ b/src/main/java/org/springframework/social/oauth/OAuthHelper.java, +	String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +			Map<String, String> parameters) throws MalformedURLException;, +	Object resolveAccessToken(String resourceId);, +++ b/src/main/java/org/springframework/social/oauth/OAuthSpringSecurityOAuthHelper.java, +	public String buildAuthorizationHeader(Object accessToken, HttpMethod method, String url, String providerId,, +	public Object resolveAccessToken(String resourceId) {, +++ b/src/main/java/org/springframework/social/twitter/TwitterTemplate.java, +	private static final String TWITTER_PROVIDER_ID = "Twitter";, +, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("Content-Type", "application/x-www-form-urlencoded");, +		addAuthorizationHeader(headers, method, twitterUrl, urlVariable, queryParameters);, +, +	private void addAuthorizationHeader(HttpHeaders headers, HttpMethod method, String twitterUrl,, +			Map<String, String> urlVariable,, +			Object accessToken = oauthHelper.resolveAccessToken(TWITTER_PROVIDER_ID);, +, +			if (accessToken != null) {, +				headers.add("Authorization", oauthHelper.buildAuthorizationHeader(accessToken, method, expandedUrl,, +						TWITTER_PROVIDER_ID, queryParameters));, +			}, +++ b/src/test/java/org/springframework/social/oauth/OAuthSpringSecurityOAuthHelperTest.java, +import static org.junit.Assert.*;, +		String authHeader = oauthHelper.buildAuthorizationHeader(accessToken, HttpMethod.POST,, +				"http://someurl", "provider", new HashMap<String, String>());, +	@Test, +		assertNull(oauthHelper.resolveAccessToken("resource"));, +++ b/src/test/java/org/springframework/social/twitter/TwitterTemplateTest.java, +		when(, +				oauthHelper.buildAuthorizationHeader(eq(null), any(HttpMethod.class),, +		when(, +				oauthHelper.buildAuthorizationHeader(any(Object.class), any(HttpMethod.class),]