[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * @return the connections the user has to the provider, or an empty list if none, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the connections the user has to the provider of the API, or an empty list if none, +	 * @return the connection, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param connection the new connection to add to this repository, +	 * @param connection the existing connection to update in this repository, +	 * @param providerId the provider id e.g. 'facebook', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * @return the connections the user has to the provider, or an empty list if none, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the connections the user has to the provider of the API, or an empty list if none, +	 * @return the connection, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param connection the new connection to add to this repository, +	 * @param connection the existing connection to update in this repository, +	 * @param providerId the provider id e.g. 'facebook', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <A> Connection<A> findConnection(Class<A> apiType, String providerUserId) {, +		return (Connection<A>) findConnection(new ConnectionKey(providerId, providerUserId));, +	public <A> Connection<A> findPrimaryConnection(Class<A> apiType) {, +			return (Connection<A>) jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and rank = 1", connectionMapper, userId, providerId);, +	private <A> String getProviderId(Class<A> apiType) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * @return the connections the user has to the provider, or an empty list if none, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the connections the user has to the provider of the API, or an empty list if none, +	 * @return the connection, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @param connection the new connection to add to this repository, +	 * @param connection the existing connection to update in this repository, +	 * @param providerId the provider id e.g. 'facebook', +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public <A> Connection<A> findConnection(Class<A> apiType, String providerUserId) {, +		return (Connection<A>) findConnection(new ConnectionKey(providerId, providerUserId));, +	public <A> Connection<A> findPrimaryConnection(Class<A> apiType) {, +			return (Connection<A>) jdbcTemplate.queryForObject(selectFromUserConnection() + " where userId = ? and providerId = ? and rank = 1", connectionMapper, userId, providerId);, +	private <A> String getProviderId(Class<A> apiType) {, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/ConnectionFactoryRegistry.java, +	public <A> ConnectionFactory<A> getConnectionFactory(Class<A> apiType) {, +		return (ConnectionFactory<A>) getConnectionFactory(providerId);]