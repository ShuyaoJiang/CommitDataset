[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/build.gradle, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/GrantType.java, +package org.springframework.social.oauth2;, +, +/**, + * OAuth2 supports two types of authorization flow, typically referred to as, + * "Client-side" and "Server-side"., + *, + * @author Roy Clarkson, + */, +public enum GrantType {, +	/**, +	 * AuthorizationCode denotes the server-side authorization flow, and is, +	 * associated with the response_type=code parameter value, +	 */, +	AuthorizationCode,, +, +	/**, +	 * ImplicitGrant denotes the client-side authorization flow and is, +	 * associated with the response_type=token parameter value, +	 */, +	ImplicitGrant, +}, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, + * @author Roy Clarkson, +	String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +	String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +import java.util.Iterator;, +import java.util.Map.Entry;, + * @author Roy Clarkson, +		String clientInfo = "?client_id=" + formEncode(clientId);, +			this.authenticateUrl = authenticateUrl + "?client_id=" + formEncode(clientId);, +	public String buildAuthorizeUrl(String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		return buildOAuthUrl(authorizeUrl, redirectUri, scope, state, grantType, additionalParameters);, +	public String buildAuthenticateUrl(String redirectUri, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, redirectUri, null, state, grantType, additionalParameters) : buildAuthorizeUrl(redirectUri, null, state, grantType, additionalParameters);, +	private String buildOAuthUrl(String baseOauthUrl, String redirectUri, String scope, String state, GrantType grantType, MultiValueMap<String, String> additionalParameters) {, +		if (grantType == GrantType.AuthorizationCode) {, +			oauthUrl.append('&').append("response_type").append('=').append("code");, +		} else if (grantType == GrantType.ImplicitGrant) {, +			oauthUrl.append('&').append("response_type").append('=').append("token");, +		}, +		if (additionalParameters != null) {, +			for (Iterator<Entry<String, List<String>>> params = additionalParameters.entrySet().iterator(); params.hasNext();) {, +				Entry<String, List<String>> param = params.next();, +				for (Iterator<String> paramValues = param.getValue().iterator(); paramValues.hasNext();) {, +					oauthUrl.append('&').append(param.getKey()).append('=').append(formEncode(paramValues.next()));, +				}]