[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +			String providerAccountId, String providerProfileUrl) {, +		jdbcTemplate.update(CREATE_CONNECTION_QUERY, accountId, provider,, +		return jdbcTemplate.queryForInt(CONNECTION_EXISTS_QUERY, accountId, provider) == 1;, +		jdbcTemplate.update(REMOVE_ALL_CONNECTIONS_QUERY, accountId, provider);, +		jdbcTemplate.update(REMOVE_CONNECTION_QUERY, accountId, provider, providerAccountId);, +		List<OAuthToken> tokens = jdbcTemplate.query(ACCESS_TOKEN_QUERY, new RowMapper<OAuthToken>() {, +				return new OAuthToken(encryptor.decrypt(rs.getString("accessToken")), decryptIfPresent(rs, +						.getString("secret")));, +		return jdbcTemplate.queryForObject(ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY, new RowMapper<OAuthToken>() {, +				return new OAuthToken(rs.getString("accessToken"), rs.getString("secret"));, +		List<String> accountIds = jdbcTemplate.queryForList(PROVIDER_ACCOUNT_ID_QUERY, String.class, accountId,, +				provider);, +		return jdbcTemplate.query(ACCOUNT_CONNECTIONS_QUERY, new RowMapper<AccountConnection>() {, +				accountConnection.setAccountId((Serializable) rs.getObject("member"));, +				accountConnection.setProvider(rs.getString("provider"));, +				accountConnection.setAccessToken(new OAuthToken(rs.getString("accessToken"), rs.getString("secret")));, +				accountConnection.setProviderAccountId(rs.getString("accountId"));, +				accountConnection.setProviderProfileUrl(rs.getString("profileUrl"));, +	static final String PROVIDER_ACCOUNT_ID_QUERY = "select accountId from AccountConnection where member = ? and provider = ?";, +	static final String CONNECTION_EXISTS_QUERY = "select exists(select 1 from AccountConnection where member = ? and provider = ?)";, +	static final String CREATE_CONNECTION_QUERY = "insert into AccountConnection (member, provider, accessToken, secret, accountId, profileUrl) values (?, ?, ?, ?, ?, ?)";, +	static final String REMOVE_CONNECTION_QUERY = "delete from AccountConnection where member = ? and provider = ? and accountId = ?";, +	static final String REMOVE_ALL_CONNECTIONS_QUERY = "delete from AccountConnection where member = ? and provider = ?";, +	static final String ACCESS_TOKEN_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ?";, +	static final String ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ? and accountId = ?";, +	static final String ACCOUNT_CONNECTIONS_QUERY = "select member, provider, accessToken, secret, accountId, profileUrl from AccountConnection where member = ? and provider = ?";, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +			String providerAccountId, String providerProfileUrl) {, +		jdbcTemplate.update(CREATE_CONNECTION_QUERY, accountId, provider,, +		return jdbcTemplate.queryForInt(CONNECTION_EXISTS_QUERY, accountId, provider) == 1;, +		jdbcTemplate.update(REMOVE_ALL_CONNECTIONS_QUERY, accountId, provider);, +		jdbcTemplate.update(REMOVE_CONNECTION_QUERY, accountId, provider, providerAccountId);, +		List<OAuthToken> tokens = jdbcTemplate.query(ACCESS_TOKEN_QUERY, new RowMapper<OAuthToken>() {, +				return new OAuthToken(encryptor.decrypt(rs.getString("accessToken")), decryptIfPresent(rs, +						.getString("secret")));, +		return jdbcTemplate.queryForObject(ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY, new RowMapper<OAuthToken>() {, +				return new OAuthToken(rs.getString("accessToken"), rs.getString("secret"));, +		List<String> accountIds = jdbcTemplate.queryForList(PROVIDER_ACCOUNT_ID_QUERY, String.class, accountId,, +				provider);, +		return jdbcTemplate.query(ACCOUNT_CONNECTIONS_QUERY, new RowMapper<AccountConnection>() {, +				accountConnection.setAccountId((Serializable) rs.getObject("member"));, +				accountConnection.setProvider(rs.getString("provider"));, +				accountConnection.setAccessToken(new OAuthToken(rs.getString("accessToken"), rs.getString("secret")));, +				accountConnection.setProviderAccountId(rs.getString("accountId"));, +				accountConnection.setProviderProfileUrl(rs.getString("profileUrl"));, +	static final String PROVIDER_ACCOUNT_ID_QUERY = "select accountId from AccountConnection where member = ? and provider = ?";, +	static final String CONNECTION_EXISTS_QUERY = "select exists(select 1 from AccountConnection where member = ? and provider = ?)";, +	static final String CREATE_CONNECTION_QUERY = "insert into AccountConnection (member, provider, accessToken, secret, accountId, profileUrl) values (?, ?, ?, ?, ?, ?)";, +	static final String REMOVE_CONNECTION_QUERY = "delete from AccountConnection where member = ? and provider = ? and accountId = ?";, +	static final String REMOVE_ALL_CONNECTIONS_QUERY = "delete from AccountConnection where member = ? and provider = ?";, +	static final String ACCESS_TOKEN_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ?";, +	static final String ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ? and accountId = ?";, +	static final String ACCOUNT_CONNECTIONS_QUERY = "select member, provider, accessToken, secret, accountId, profileUrl from AccountConnection where member = ? and provider = ?";, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcServiceProviderFactory.java, +		return jdbcTemplate.queryForObject(SERVICE_PROVIDER_QUERY, new RowMapper<ServiceProvider<?>>() {, +				Class<? extends ServiceProvider<?>> implementation = getImplementationClass(rs, +						.getString("implementation"));, +			return new ServiceProviderParameters(rs.getString("name"), rs.getString("displayName"),, +					encryptor.decrypt(rs.getString("apiKey")), encryptor.decrypt(rs.getString("secret")),, +					rs.getLong("appId"), rs.getString("requestTokenUrl"), rs.getString("authorizeUrl"),, +					rs.getString("accessTokenUrl"));, +	private static final String SERVICE_PROVIDER_QUERY = "select name, displayName, implementation, apiKey, secret, appId, requestTokenUrl, authorizeUrl, accessTokenUrl from ServiceProvider where name = ?";, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcAccountConnectionRepository.java, +			String providerAccountId, String providerProfileUrl) {, +		jdbcTemplate.update(CREATE_CONNECTION_QUERY, accountId, provider,, +		return jdbcTemplate.queryForInt(CONNECTION_EXISTS_QUERY, accountId, provider) == 1;, +		jdbcTemplate.update(REMOVE_ALL_CONNECTIONS_QUERY, accountId, provider);, +		jdbcTemplate.update(REMOVE_CONNECTION_QUERY, accountId, provider, providerAccountId);, +		List<OAuthToken> tokens = jdbcTemplate.query(ACCESS_TOKEN_QUERY, new RowMapper<OAuthToken>() {, +				return new OAuthToken(encryptor.decrypt(rs.getString("accessToken")), decryptIfPresent(rs, +						.getString("secret")));, +		return jdbcTemplate.queryForObject(ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY, new RowMapper<OAuthToken>() {, +				return new OAuthToken(rs.getString("accessToken"), rs.getString("secret"));, +		List<String> accountIds = jdbcTemplate.queryForList(PROVIDER_ACCOUNT_ID_QUERY, String.class, accountId,, +				provider);, +		return jdbcTemplate.query(ACCOUNT_CONNECTIONS_QUERY, new RowMapper<AccountConnection>() {, +				accountConnection.setAccountId((Serializable) rs.getObject("member"));, +				accountConnection.setProvider(rs.getString("provider"));, +				accountConnection.setAccessToken(new OAuthToken(rs.getString("accessToken"), rs.getString("secret")));, +				accountConnection.setProviderAccountId(rs.getString("accountId"));, +				accountConnection.setProviderProfileUrl(rs.getString("profileUrl"));, +	static final String PROVIDER_ACCOUNT_ID_QUERY = "select accountId from AccountConnection where member = ? and provider = ?";, +	static final String CONNECTION_EXISTS_QUERY = "select exists(select 1 from AccountConnection where member = ? and provider = ?)";, +	static final String CREATE_CONNECTION_QUERY = "insert into AccountConnection (member, provider, accessToken, secret, accountId, profileUrl) values (?, ?, ?, ?, ?, ?)";, +	static final String REMOVE_CONNECTION_QUERY = "delete from AccountConnection where member = ? and provider = ? and accountId = ?";, +	static final String REMOVE_ALL_CONNECTIONS_QUERY = "delete from AccountConnection where member = ? and provider = ?";, +	static final String ACCESS_TOKEN_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ?";, +	static final String ACCESS_TOKEN_BY_ACCOUNT_ID_QUERY = "select accessToken, secret from AccountConnection where member = ? and provider = ? and accountId = ?";, +	static final String ACCOUNT_CONNECTIONS_QUERY = "select member, provider, accessToken, secret, accountId, profileUrl from AccountConnection where member = ? and provider = ?";, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/JdbcServiceProviderFactory.java, +		return jdbcTemplate.queryForObject(SERVICE_PROVIDER_QUERY, new RowMapper<ServiceProvider<?>>() {, +				Class<? extends ServiceProvider<?>> implementation = getImplementationClass(rs, +						.getString("implementation"));, +			return new ServiceProviderParameters(rs.getString("name"), rs.getString("displayName"),, +					encryptor.decrypt(rs.getString("apiKey")), encryptor.decrypt(rs.getString("secret")),, +					rs.getLong("appId"), rs.getString("requestTokenUrl"), rs.getString("authorizeUrl"),, +					rs.getString("accessTokenUrl"));, +	private static final String SERVICE_PROVIDER_QUERY = "select name, displayName, implementation, apiKey, secret, appId, requestTokenUrl, authorizeUrl, accessTokenUrl from ServiceProvider where name = ?";, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/OAuthToken.java]