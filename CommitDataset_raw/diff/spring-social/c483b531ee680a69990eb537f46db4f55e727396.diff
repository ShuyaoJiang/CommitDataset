[+++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;, +, +	@Inject, +	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {, +		this.jdbcTemplate = jdbcTemplate;, +	}, +, +	public ShowcaseUser findUserByUsername(String username) {, +		return jdbcTemplate.queryForObject("select firstName, lastName, email from Account where username = ?",, +				new RowMapper<ShowcaseUser>() {, +					public ShowcaseUser mapRow(ResultSet rs, int rowNum) throws SQLException {, +						return new ShowcaseUser(rs.getString("firstName"), rs.getString("lastName"), rs, +								.getString("email"));, +					}, +				}, username);, +	}, +, +}, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/ShowcaseController.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +	private final UserRepository userRepository;, +	public ShowcaseController(List<ServiceProvider<?>> serviceProviders, UserRepository userRepository) {, +		this.userRepository = userRepository;, +, +		model.addAttribute("user", userRepository.findUserByUsername(user.getName()));, +++ b/samples/spring-social-showcase/src/main/java/org/springframework/social/showcase/JdbcUserRepository.java, +package org.springframework.social.showcase;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +import javax.inject.Inject;, +, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.stereotype.Repository;, +, +@Repository, +public class JdbcUserRepository implements UserRepository {, +	private final JdbcTemplate jdbcTemplate;]