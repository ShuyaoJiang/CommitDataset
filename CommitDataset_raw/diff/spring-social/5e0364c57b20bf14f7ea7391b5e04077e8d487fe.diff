[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +import java.util.Map;, +	List<ServiceProviderConnection<?>> findConnectionsForUsers(Map<String, List<String>> providerUsers);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ServiceProviderConnectionRepository.java, +import java.util.Map;, +	List<ServiceProviderConnection<?>> findConnectionsForUsers(Map<String, List<String>> providerUsers);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcServiceProviderConnectionRepository.java, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Map.Entry;, +	public List<ServiceProviderConnection<?>> findConnectionsForUsers(Map<String, List<String>> providerUsers) {, +		if (providerUsers.isEmpty()) {, +			throw new IllegalArgumentException("Unable to execute find: no providerUsers provided");, +		}, +		StringBuilder providerUsersCriteriaSql = new StringBuilder();, +		List<Object> args = new ArrayList<Object>(providerUsers.size() * 2);, +		for (Iterator<Entry<String, List<String>>> it = providerUsers.entrySet().iterator(); it.hasNext();) {, +			Entry<String, List<String>> entry = it.next();, +			providerUsersCriteriaSql.append("providerId = ? and providerUserId in (?)");, +			args.add(entry.getKey());, +			args.add(entry.getValue());, +			if (it.hasNext()) {, +				providerUsersCriteriaSql.append(" or " );, +			}, +		}, +		return jdbcTemplate.query(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and " + providerUsersCriteriaSql, args.toArray(), connectionMapper);, +		return jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and providerUserId = ? order by rank", connectionMapper, getLocalUserId(), connectionKey.getProviderId(), connectionKey.getProviderUserId());, +		return (ServiceProviderConnection<S>) jdbcTemplate.queryForObject(SELECT_FROM_SERVICE_PROVIDER_CONNECTION + " where localUserId = ? and providerId = ? and rank = 1", connectionMapper,, +				encrypt(connectionRecord.getAccessToken()), encrypt(connectionRecord.getSecret()), encrypt(connectionRecord.getRefreshToken()), connectionRecord.getExpireTime());, +	private String encrypt(String text) {, +		return text != null ? textEncryptor.encrypt(text) : text;, +	}, +]