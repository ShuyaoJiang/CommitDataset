[+++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildOAuthUrl(authorizeUrl, grantType, parameters);, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	private String buildOAuthUrl(String baseOauthUrl, GrantType grantType, AuthorizationParameters parameters) {, +		StringBuilder oauthUrl = new StringBuilder(baseOauthUrl).append('&').append("redirect_uri").append('=').append(formEncode(parameters.getRedirectUri()));, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +		if (parameters.getScope() != null) {, +			oauthUrl.append('&').append("scope").append('=').append(formEncode(parameters.getScope()));, +		if (parameters.getState() != null) {, +			oauthUrl.append('&').append("state").append('=').append(formEncode(parameters.getState()));	, +		if (parameters.getAdditionalParameters() != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.getAdditionalParameters().entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildOAuthUrl(authorizeUrl, grantType, parameters);, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	private String buildOAuthUrl(String baseOauthUrl, GrantType grantType, AuthorizationParameters parameters) {, +		StringBuilder oauthUrl = new StringBuilder(baseOauthUrl).append('&').append("redirect_uri").append('=').append(formEncode(parameters.getRedirectUri()));, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +		if (parameters.getScope() != null) {, +			oauthUrl.append('&').append("scope").append('=').append(formEncode(parameters.getScope()));, +		if (parameters.getState() != null) {, +			oauthUrl.append('&').append("state").append('=').append(formEncode(parameters.getState()));	, +		if (parameters.getAdditionalParameters() != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.getAdditionalParameters().entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +import org.springframework.social.oauth2.GrantType;, +				public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters params) {, +				public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters params) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL, +	String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters);, +	 * @param grantType specifies whether to use client-side or server-side OAuth flow, +	 * @param parameters authorization parameters needed to build the URL , +	String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Template.java, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildOAuthUrl(authorizeUrl, grantType, parameters);, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return authenticateUrl != null ? buildOAuthUrl(authenticateUrl, grantType, parameters) : buildAuthorizeUrl(grantType, parameters);, +	private String buildOAuthUrl(String baseOauthUrl, GrantType grantType, AuthorizationParameters parameters) {, +		StringBuilder oauthUrl = new StringBuilder(baseOauthUrl).append('&').append("redirect_uri").append('=').append(formEncode(parameters.getRedirectUri()));, +		if (grantType == GrantType.AUTHORIZATION_CODE) {, +		} else if (grantType == GrantType.IMPLICIT_GRANT) {, +		if (parameters.getScope() != null) {, +			oauthUrl.append('&').append("scope").append('=').append(formEncode(parameters.getScope()));, +		if (parameters.getState() != null) {, +			oauthUrl.append('&').append("state").append('=').append(formEncode(parameters.getState()));	, +		if (parameters.getAdditionalParameters() != null) {, +			for (Iterator<Entry<String, List<String>>> additionalParams = parameters.getAdditionalParameters().entrySet().iterator(); additionalParams.hasNext();) {, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcMultiUserServiceProviderConnectionRepositoryTest.java, +import org.springframework.social.oauth2.GrantType;, +				public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters params) {, +				public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters params) {, +++ b/spring-social-test/src/test/java/org/springframework/social/connect/oauth2/StubOAuth2Operations.java, +import org.springframework.social.oauth2.GrantType;, +	public String buildAuthorizeUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return "http://springsource.org/oauth/authorize?scope=" + parameters.getScope();, +	public String buildAuthenticateUrl(GrantType grantType, AuthorizationParameters parameters) {, +		return buildAuthorizeUrl(grantType, parameters);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/AuthorizationParameters.java, +	public AuthorizationParameters(String redirectUri, String scope, String state, MultiValueMap<String, String> additionalParameters) {, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth2/OAuth2Operations.java]