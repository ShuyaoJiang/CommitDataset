[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/support/MapServiceProviderConnectionFactoryRegistry.java, +import java.util.List;, +	public void setConnectionFactories(List<ServiceProviderConnectionFactory<?>> connectionFactories) {, +		for (ServiceProviderConnectionFactory<?> connectionFactory : connectionFactories) {, +			addConnectionFactory(connectionFactory);, +		}, +	}, +	, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Operations.java, +	 * The request token should be stored in the user's session up until the authorization callback is made and it's time to exchange it for an {@link #exchangeForAccessToken(AuthorizedRequestToken, MultiValueMap) access token}., +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1RequestInterceptor.java, +		return SigningUtils.buildAuthorizationHeaderValue(request, body, consumerKey, consumerSecret, accessToken, accessTokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.commonOAuthParameters(consumerKey);, +		return SigningUtils.buildAuthorizationHeaderValue(HttpMethod.POST, tokenUrl, oauthParameters, additionalParameters, consumerSecret, tokenSecret);, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/ProtectedResourceClientFactory.java, +++ b/spring-social-core/src/main/java/org/springframework/social/oauth1/SigningUtils.java, +	public static Map<String, String> commonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		long timestamp = generateTimestamp();, +		oauthParameters.put("oauth_timestamp", Long.toString(timestamp));, +		oauthParameters.put("oauth_nonce", Long.toString(generateNonce(timestamp)));, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	public static String buildAuthorizationHeaderValue(HttpMethod method, URI targetUrl, Map<String, String> oauthParameters, MultiValueMap<String, String> additionalParameters, String consumerSecret, String tokenSecret) {, +	public static String buildAuthorizationHeaderValue(HttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.putAll(readFormParameters(request.getHeaders().getContentType(), body));, +		additionalParameters.putAll(parseFormParameters(request.getURI().getQuery()));, +	// spring 3.0 compatibility only: planned for removal in Spring Social 1.1, +, +	public static String spring30buildAuthorizationHeaderValue(ClientHttpRequest request, byte[] body, String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret) {, +		MultiValueMap<String, String> additionalParameters = new LinkedMultiValueMap<String, String>();, +		additionalParameters.putAll(readFormParameters(request.getHeaders().getContentType(), body));, +		additionalParameters.putAll(parseFormParameters(request.getURI().getQuery()));, +	private static long generateTimestamp() {, +		return System.currentTimeMillis() / 1000;]