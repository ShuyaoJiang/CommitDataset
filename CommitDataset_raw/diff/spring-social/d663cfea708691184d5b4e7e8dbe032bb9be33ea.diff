[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));, +		assertEquals("2", localUserIds.get(1));, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));, +		assertEquals("2", localUserIds.get(1));, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +import java.util.List;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connection);, +		if (userIds.size() == 0) {, +			usersConnectionRepository.createConnectionRepository(userIds.get(0)).updateConnection(connection);, +			String originalUrl = signInAdapter.signIn(userIds.get(0), connection, request);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionSignUp.java, + * @see UsersConnectionRepository#findUserIdsWithConnection(Connection), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/UsersConnectionRepository.java, +import java.util.List;, +	 * Find the ids for users that have the given {@link Connection}., +	List<String> findUserIdsWithConnection(Connection<?> connection);, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepository.java, +import java.util.Arrays;, +import java.util.List;, +	 * @see #findUserIdsWithConnection(Connection), +	public List<String> findUserIdsWithConnection(Connection<?> connection) {, +		List<String> localUserIds = jdbcTemplate.queryForList("select userId from " + tablePrefix + "UserConnection where providerId = ? and providerUserId = ?", String.class, key.getProviderId(), key.getProviderUserId());		, +		if (localUserIds.size() == 0) {, +				return Arrays.asList(newUserId);, +		return localUserIds;, +++ b/spring-social-core/src/test/java/org/springframework/social/connect/jdbc/JdbcUsersConnectionRepositoryTest.java, +import static org.junit.Assert.*;, +		List<String> userIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals("1", userIds.get(0));, +		assertEquals(0, usersConnectionRepository.findUserIdsWithConnection(connection).size());, +		List<String> localUserIds = usersConnectionRepository.findUserIdsWithConnection(connectionRepository.getPrimaryConnection(TestFacebookApi.class));, +		assertEquals(2, localUserIds.size());, +		assertEquals("1", localUserIds.get(0));]