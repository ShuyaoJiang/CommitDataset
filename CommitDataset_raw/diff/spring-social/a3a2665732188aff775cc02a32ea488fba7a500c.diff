[+++ b/docs/src/reference/docbook/serviceprovider.xml, +      <para>Spring Social's service provider framework handles the details of authorization with a service. Once authorization has been granted, a connection is created between the user's local application account and the authorization credentials. This connection is persisted for future use, so that the user won't need to re-authorize the application as long as the credentials are still valid.</para>, +      , +      <para>The central concept in the service provider framework is the service provider. A service provider represents a service that the application wants to interact with on its users' behalf. The service provider maintains the applications own credentials with the service and is able to negotiate permissions for the application to access the service.</para>, +      , +            <imagedata fileref="images/oauth2_flow.png" format="PNG" align="center" scale="0"/>, +      <para>In Spring Social, service providers are defined by the <interfacename>ServiceProvider</interfacename> interface, which defined the basic operations required to manage connections with a service:</para>, +      , +<programlisting><![CDATA[public interface ServiceProvider<S> {, +	String getId();, +	boolean isConnected(Serializable accountId);, +	List<ServiceProviderConnection<S>> getConnections(Serializable accountId);, +}]]></programlisting>, +, +      <para>Each service provider is identified by an ID, as returned by the <methodname>getId()</methodname> method. This ID is primarily used as a key to lookup a service provider when working through the authorization flow.</para>, +      , +      <para>A user may authorize the application to access multiple service provider profiles, resulting in one or more connections being created between their application account and the service provider. The <methodname>isConnected()</methodname> checks to see if any connections exist between a given account and the provider. If there are any connections, the <methodname>getConnections()</methodname> will return them.</para>, +, +      <para>The <interfacename>ServiceProvider</interfacename> is further defined by two sub-interfaces, one for each supported authorization protocol. <interfacename>OAuth1ServiceProvider</interfacename> defines the service provider operations that are specific to OAuth 1:</para>, +      , +<programlisting><![CDATA[public interface OAuth1ServiceProvider<S> extends ServiceProvider<S> {, +	OAuth1Operations getOAuth1Operations();, +	ServiceProviderConnection<S> connect(Serializable accountId, OAuthToken accessToken);, +}]]></programlisting>, +, +      <para>Likewise, <interfacename>OAuth2ServiceProvider</interfacename> defines service provider operations that pertain to OAuth 2:</para>, +      , +<programlisting><![CDATA[public interface OAuth2ServiceProvider<S> extends ServiceProvider<S> {, +    OAuth2Operations getOAuth2Operations();, +    ServiceProviderConnection<S> connect(Serializable accountId, AccessGrant accessToken);, +}]]></programlisting>, +      , +      <para>As you can see, these two sub-interfaces are quite similar, but differ slightly to accommodate the differences in each authorization protocol. The most significant method in each interface is the <methodname>connect()</methodname> which creates a connection given a user's account ID and the authorization credentials. The other method returns an operations API for working with each authorization protocol at a low level.</para>, +      , +      <para>Generally, application code will not work with these interfaces directly. Instead, you'll leverage Spring Social's <classname>ConnectController</classname> (see <xref linkend="connecting"/>) to handle the authorization flow for you. You may, however, use the <methodname>getConnections()</methodname> to access the service API for a given connection. This will be covered in more detail in <xref linkend="apis"/>.</para>, +      <para>Working with the service provider framework starts with configuring the service provider in Spring. Spring Social's configuration namespace provides a convenient <code><![CDATA[<social:service-provider>]]></code> element for declaring a service provider:</para>, +<social:service-provider , +    client-secret="..." />        , +</beans>]]></programlisting>, +      <para>The <code>class</code> attribute specifies the fully-qualified name of the provider implementation. This can be any of the service provider implementations that come with Spring Social or a custom implementation. Spring Social comes with the following service provider implementations:</para>, +, +      <itemizedlist>, +          <listitem><para>org.springframework.social.facebook.connect.FacebookServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.twitter.connect.TwitterServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.linkedin.connect.LinkedInServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.tripit.connect.TripItServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.github.connect.GitHubServiceProvider</para></listitem>, +          <listitem><para>org.springframework.social.gowalla.connect.GowallaServiceProvider</para></listitem>, +      </itemizedlist>, +      , +      <para>The <code>client-key</code> and <code>client-secret</code> attributes specify the key and secret values assigned to your application when you registered it with the provider.</para>]