[+++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	, +			AccountConnectionRepository connectionRepository, AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +	public void connect(AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), accessToken,, +	public void addConnection(String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), oauthAccessToken,, +	public boolean isConnected() {, +		return connectionRepository.isConnected(accountIdResolver.resolveAccountId(), getName());, +	public void disconnect() {, +		connectionRepository.disconnect(accountIdResolver.resolveAccountId(), getName());, +	public S getServiceOperations() {, +		if (accountIdResolver.resolveAccountId() == null || !isConnected()) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName());, +	public String getProviderAccountId() {, +		return connectionRepository.getProviderAccountId(accountIdResolver.resolveAccountId(), getName());, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	, +			AccountConnectionRepository connectionRepository, AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +	public void connect(AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), accessToken,, +	public void addConnection(String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), oauthAccessToken,, +	public boolean isConnected() {, +		return connectionRepository.isConnected(accountIdResolver.resolveAccountId(), getName());, +	public void disconnect() {, +		connectionRepository.disconnect(accountIdResolver.resolveAccountId(), getName());, +	public S getServiceOperations() {, +		if (accountIdResolver.resolveAccountId() == null || !isConnected()) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName());, +	public String getProviderAccountId() {, +		return connectionRepository.getProviderAccountId(accountIdResolver.resolveAccountId(), getName());, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +import java.io.Serializable;, +, +	void addConnection(Serializable accountId, String provider, OAuthToken accessToken, String providerAccountId,, +	boolean isConnected(Serializable accountId, String provider);, +	void disconnect(Serializable accountId, String provider);, +	OAuthToken getAccessToken(Serializable accountId, String provider);, +	String getProviderAccountId(Serializable accountId, String provider);, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	, +			AccountConnectionRepository connectionRepository, AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +	public void connect(AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), accessToken,, +	public void addConnection(String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), oauthAccessToken,, +	public boolean isConnected() {, +		return connectionRepository.isConnected(accountIdResolver.resolveAccountId(), getName());, +	public void disconnect() {, +		connectionRepository.disconnect(accountIdResolver.resolveAccountId(), getName());, +	public S getServiceOperations() {, +		if (accountIdResolver.resolveAccountId() == null || !isConnected()) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName());, +	public String getProviderAccountId() {, +		return connectionRepository.getProviderAccountId(accountIdResolver.resolveAccountId(), getName());, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +import java.io.Serializable;, +, +	void addConnection(Serializable accountId, String provider, OAuthToken accessToken, String providerAccountId,, +	boolean isConnected(Serializable accountId, String provider);, +	void disconnect(Serializable accountId, String provider);, +	OAuthToken getAccessToken(Serializable accountId, String provider);, +	String getProviderAccountId(Serializable accountId, String provider);, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AccountIdResolver.java, +package org.springframework.social.connect;, +, +import java.io.Serializable;, +, +public interface AccountIdResolver {, +	Serializable resolveAccountId();, +}, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AbstractServiceProvider.java, +	private final AccountIdResolver accountIdResolver;, +	, +			AccountConnectionRepository connectionRepository, AccountIdResolver accountIdResolver) {, +		this.accountIdResolver = accountIdResolver;, +	public void connect(AuthorizedRequestToken requestToken) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), accessToken,, +	public void addConnection(String accessToken, String providerAccountId) {, +		connectionRepository.addConnection(accountIdResolver.resolveAccountId(), getName(), oauthAccessToken,, +	public boolean isConnected() {, +		return connectionRepository.isConnected(accountIdResolver.resolveAccountId(), getName());, +	public void disconnect() {, +		connectionRepository.disconnect(accountIdResolver.resolveAccountId(), getName());, +	public S getServiceOperations() {, +		if (accountIdResolver.resolveAccountId() == null || !isConnected()) {, +		OAuthToken accessToken = connectionRepository.getAccessToken(accountIdResolver.resolveAccountId(), getName());, +	public String getProviderAccountId() {, +		return connectionRepository.getProviderAccountId(accountIdResolver.resolveAccountId(), getName());, +++ b/spring-social-connect/src/main/java/org/springframework/social/connect/AccountConnectionRepository.java, +import java.io.Serializable;, +, +	void addConnection(Serializable accountId, String provider, OAuthToken accessToken, String providerAccountId,]