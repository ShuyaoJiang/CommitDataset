[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/ListsApi.java, +import java.util.List;, +, +	/**, +	 * Retrieves user lists for a given user., +	 * @param userId the ID of the Twitter user., +	 * @return a list of {@link UserList}s for the specified user., +	 */, +	List<UserList> getLists(long userId);, +, +	/**, +	 * Retrieves user lists for a given user., +	 * @param screenName the screen name of the Twitter user., +	 * @return a list of {@link UserList}s for the specified user., +	 */, +	List<UserList> getLists(String screenName);, +, +	/**, +	 * Retrieves a specific user list., +	 * @param userId the ID of the Twitter user., +	 * @param listId the ID of the list to retrieve., +	 * @return the requested {@link UserList}, +	 */, +	UserList getList(long userId, long listId);, +, +	/**, +	 * Retrieves a specific user list., +	 * @param screenName the screen name of the Twitter user., +	 * @param listSlug the list's slug., +	 * @return the requested {@link UserList}, +	 */, +	UserList getList(String screenName, String listSlug);, +, +	/**, +	 * Retrieves the timeline tweets for the given user list., +	 * @param userId the ID of the Twitter user., +	 * @param listId the ID of the list to retrieve., +	 * @return a list of {@link Tweet} objects for the items in the user list timeline., +	 */, +	List<Tweet> getListStatuses(long userId, long listId);, +, +	/**, +	 * Retrieves the timeline tweets for the given user list., +	 * @param screenName the screen name of the Twitter user., +	 * @param listSlug the list's slug., +	 * @return a list of {@link Tweet} objects for the items in the user list timeline., +	 */, +	List<Tweet> getListStatuses(String screenName, String listSlug);, +, +	/**, +	 * Create a new user list, +	 * @param userId the ID of the Twitter user who will own the list., +	 * @param name the name of the list., +	 * @param description the list description., +	 * @param isPublic if true, the list will be public; if false the list will be private., +	 * @return the newly created {@link UserList}, +	 */, +	UserList createList(long userId, String name, String description, boolean isPublic);, +, +	/**, +	 * Create a new user list, +	 * @param screenName the screen name of the Twitter user who will own the list, +	 * @param name the name of the list., +	 * @param description the list description., +	 * @param isPublic if true, the list will be public; if false the list will be private., +	 * @return the newly created {@link UserList}, +	 */, +	UserList createList(String screenName, String name, String description, boolean isPublic);, +, +	/**, +	 * Updates an existing user list, +	 * @param screenName the screen name of the Twitter user who will own the list, +	 * @param listSlug the list's slug, +	 * @param name the new name of the list., +	 * @param description the new list description., +	 * @param isPublic if true, the list will be public; if false the list will be private., +	 * @return the newly created {@link UserList}, +	 */, +	UserList updateList(long userId, long listId, String name, String description, boolean isPublic);, +, +	/**, +	 * Updates an existing user list, +	 * @param userId the ID of the Twitter user who owns the list., +	 * @param listId the ID of the list, +	 * @param name the new name of the list., +	 * @param description the new list description., +	 * @param isPublic if true, the list will be public; if false the list will be private., +	 * @return the newly created {@link UserList}, +	 */, +	UserList updateList(String screenName, String listSlug, String name, String description, boolean isPublic);, +, +	/**, +	 * Removes a user list., +	 * @param userId the ID of the user who owns the list., +	 * @param listId the ID of the list to be removed., +	 */, +	void deleteList(long userId, long listId);, +, +	/**, +	 * Removes a user list.]