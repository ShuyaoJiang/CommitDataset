[+++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * @see ConnectionRepository#getConnection(ConnectionKey), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * @see ConnectionRepository#getConnection(ConnectionKey), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NotConnectedException.java, + * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionFactoryLocator.java, +	 * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/ConnectionRepository.java, +	 * Get a connection for the current user by its key, which consists of the providerId + providerUserId., +	Connection<?> getConnection(ConnectionKey connectionKey);, +	 * Get a connection between the current user and the given provider user., +	 * Semantically equivalent to {@link #getConnection(ConnectionKey)}, but uses the apiType as the provider key instead of the providerId., +	 * @throws NoSuchConnectionException if no such connection exists for the current user, +	<A> Connection<A> getConnection(Class<A> apiType, String providerUserId);, +	 * Get the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	<A> Connection<A> getPrimaryConnection(Class<A> apiType);, +, +	/**, +	 * Find the "primary" connection the current user has to the provider of the given API e.g. Facebook.class., +	 * Semantically equivalent to {@link #getPrimaryConnection(Class)} but returns null if no connection is found instead of throwing an exception., +	 * @param <A> the API parameterized type, +	 * @param apiType the API type e.g. Facebook.class or Twitter.class, +	 * @return the primary connection, or <code>null</code> if not found, +	 */, +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NoSuchConnectionException.java, + * @see ConnectionRepository#getConnection(ConnectionKey), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/NotConnectedException.java, + * @see ConnectionRepository#getPrimaryConnection(Class), +++ b/spring-social-core/src/main/java/org/springframework/social/connect/jdbc/JdbcConnectionRepository.java, +	public Connection<?> getConnection(ConnectionKey connectionKey) {, +	public <A> Connection<A> getConnection(Class<A> apiType, String providerUserId) {, +		return (Connection<A>) getConnection(new ConnectionKey(providerId, providerUserId));, +	@SuppressWarnings("unchecked"), +	public <A> Connection<A> getPrimaryConnection(Class<A> apiType) {, +		String providerId = getProviderId(apiType);, +		Connection<A> connection = (Connection<A>) findPrimaryConnection(providerId);, +		if (connection == null) {, +			throw new NotConnectedException(providerId);, +		}, +		return connection;]