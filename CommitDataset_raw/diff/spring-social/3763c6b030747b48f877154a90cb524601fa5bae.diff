[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, +	 * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, +	 * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, +	private final SignInAdapter signInAdapter;, +	private String signUpUrl = "/signup";, +	private String postSignInUrl = "/";, +	private final String controllerCallbackUrl;, +	 * @param signInAdapter an adapter between this controller and the local application's user sign-in system., +			Provider<ConnectionRepository> connectionRepositoryProvider, SignInAdapter signInAdapter) {, +		this.signInAdapter = signInAdapter;, +		this.controllerCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	 * Sets the URL to redirect the user to if no local user account can be mapped when signing in using a provider., +	 * Defaults to "/signup". , +	 * @param signUpUrl the URL of the sign up page., +	public void setSignUpUrl(String signUpUrl) {, +		this.signUpUrl = signUpUrl; , + 	 * Sets the URL to redirect the user to after signing in using a provider., + 	 * Defaults to "/"., +	 * @param postSignInUrl the postSignIn URL, +	public void setPostSignInUrl(String postSignInUrl) {, +		this.postSignInUrl = postSignInUrl;, +	public RedirectView signIn(@PathVariable String providerId, WebRequest request) {, +			return new RedirectView(oauth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(oauth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(customAuthUrl(connectionFactory, request));, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(providerId, request), null);, +	 * Default implementation throws an {@link UnsupportedOperationException} indicating the custom {@link ConnectionFactory} is not supported., +	protected String customAuthUrl(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		throw new UnsupportedOperationException("Sign in using provider '" + connectionFactory.getProviderId() + "' not supported");		, +	private String oauth1Url(OAuth1ConnectionFactory<?> connectionFactory, WebRequest request) {, +		OAuth1Operations oauth1Ops = ((OAuth1ConnectionFactory<?>) connectionFactory).getOAuthOperations();, +		OAuthToken requestToken;, +		String authenticateUrl;, +		if (oauth1Ops.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			requestToken = oauth1Ops.fetchRequestToken(callbackUrl(connectionFactory.getProviderId(), request), null);				, +			authenticateUrl = oauth1Ops.buildAuthenticateUrl(requestToken.getValue(), OAuth1Parameters.NONE);, +		} else {, +			requestToken = oauth1Ops.fetchRequestToken(null, null);				, +			authenticateUrl = oauth1Ops.buildAuthenticateUrl(requestToken.getValue(), new OAuth1Parameters(callbackUrl(connectionFactory.getProviderId(), request)));, +		}, +		request.setAttribute(OAUTH_TOKEN_ATTRIBUTE, requestToken, WebRequest.SCOPE_SESSION);, +		return authenticateUrl;, +	}, +, +	private String oauth2Url(OAuth2ConnectionFactory<?> connectionFactory, WebRequest request) {, +		OAuth2Operations oauth2Ops = ((OAuth2ConnectionFactory<?>) connectionFactory).getOAuthOperations();, +		String authenticateUrl = oauth2Ops.buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl(connectionFactory.getProviderId(), request), request.getParameter("scope")));, +		return authenticateUrl;, +	}, +, +	private String callbackUrl(String providerId, WebRequest request) {, +		return controllerCallbackUrl + "/" + providerId;, +			return redirect(signUpUrl);, +			signInAdapter.signIn(localUserId);		, +			return redirect(postSignInUrl);, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInAttempt.java, +import org.springframework.social.connect.DuplicateConnectionException;, +	 * @throws DuplicateConnectionException if the user already has this connection, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/signin/web/ProviderSignInController.java, +	private final SignInAdapter signInAdapter;, +	private String signUpUrl = "/signup";, +	private String postSignInUrl = "/";, +	private final String controllerCallbackUrl;, +	 * @param signInAdapter an adapter between this controller and the local application's user sign-in system., +			Provider<ConnectionRepository> connectionRepositoryProvider, SignInAdapter signInAdapter) {, +		this.signInAdapter = signInAdapter;, +		this.controllerCallbackUrl = applicationUrl + AnnotationUtils.findAnnotation(getClass(), RequestMapping.class).value()[0];, +	 * Sets the URL to redirect the user to if no local user account can be mapped when signing in using a provider., +	 * Defaults to "/signup". , +	 * @param signUpUrl the URL of the sign up page., +	public void setSignUpUrl(String signUpUrl) {, +		this.signUpUrl = signUpUrl; , + 	 * Sets the URL to redirect the user to after signing in using a provider., + 	 * Defaults to "/"., +	 * @param postSignInUrl the postSignIn URL, +	public void setPostSignInUrl(String postSignInUrl) {, +		this.postSignInUrl = postSignInUrl;, +	public RedirectView signIn(@PathVariable String providerId, WebRequest request) {, +			return new RedirectView(oauth1Url((OAuth1ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(oauth2Url((OAuth2ConnectionFactory<?>) connectionFactory, request));, +			return new RedirectView(customAuthUrl(connectionFactory, request));, +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +	 * If so, signs the local user in by delegating to {@link SignInAdapter#signIn(String)}., +		AccessGrant accessGrant = connectionFactory.getOAuthOperations().exchangeForAccess(code, callbackUrl(providerId, request), null);, +	 * Default implementation throws an {@link UnsupportedOperationException} indicating the custom {@link ConnectionFactory} is not supported., +	protected String customAuthUrl(ConnectionFactory<?> connectionFactory, WebRequest request) {, +		throw new UnsupportedOperationException("Sign in using provider '" + connectionFactory.getProviderId() + "' not supported");		, +	private String oauth1Url(OAuth1ConnectionFactory<?> connectionFactory, WebRequest request) {, +		OAuth1Operations oauth1Ops = ((OAuth1ConnectionFactory<?>) connectionFactory).getOAuthOperations();, +		OAuthToken requestToken;, +		String authenticateUrl;, +		if (oauth1Ops.getVersion() == OAuth1Version.CORE_10_REVISION_A) {, +			requestToken = oauth1Ops.fetchRequestToken(callbackUrl(connectionFactory.getProviderId(), request), null);				, +			authenticateUrl = oauth1Ops.buildAuthenticateUrl(requestToken.getValue(), OAuth1Parameters.NONE);]