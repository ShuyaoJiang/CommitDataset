[+++ b/docs/src/reference/docbook/apis.xml, +++ b/docs/src/reference/docbook/apis.xml, +++ b/docs/src/reference/docbook/signin.xml, +			In order to ease sign in for their users, many applications allow sign in with a service provider such as Twitter or Facebook., +			With this authentication technique, the user signs into (or may already be signed into) his or her provider account., +			The application then tries to match that provider account to a local user account., +			If a match is found, the user is automatically signed into the application., +			Instead of creating a connection at the end of process, however, <classname>ProviderSignInController</classname> attempts to find a previously established connection and uses the connected account to authenticate the user with the application., +    <constructor-arg value="${application.secureUrl}" />, +    <!-- relies on by-type autowiring for the other constructor-args -->    , +			The <classname>ProviderSignInController</classname> bean requires a single explicit <code><![CDATA[<constructor-arg>]]></code> value to specify the application's base secure URL., +			<listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow by redirecting to the provider's authentication endpoint.</para></listitem>, +			<listitem><para><code>GET /signin/{providerId}?code={verifier}</code> - Receives the authentication callback from the provider, accepting a code. Exchanges this code for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +			<listitem><para><code>POST /signin/{providerId}</code> - Initiates the sign in flow. This involves fetching a request token from the provider and then redirecting to Provider's authentication endpoint.</para></listitem>, +			<listitem><para><code>GET /signin/{providerId}?oauth_token={request token}&amp;oauth_verifier={verifier}</code> - Receives the authentication callback from the provider, accepting a verification code. Exchanges this verification code along with the request token for an access token. It uses this access token to lookup a connected account and then authenticates to the application through the sign in service. </para>, +				<listitem><para>A <interfacename>ConnectionFactoryLocator</interfacename> to lookup the ConnectionFactory used to create the Connection to the provider.</para></listitem>, +				<listitem><para>A <interfacename>UsersConnectionRepository</interfacename> to find the user that has the connection to the provider user attempting to sign-in.</para></listitem>, +				<listitem><para>A <interfacename>ConnectionRepository</interfacename> to persist a new connection when a new user signs up with the application after a failed sign-in attempt.</para></listitem>, +				<listitem><para>A <interfacename>SignInService</interfacename> to sign a user into the application when a matching connection is found.</para></listitem>, +@Service, +        SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(localUserId, null, null));, +			If <classname>ProviderSignInController</classname> can't find a local user associated with a provider user attempting to sign-in, it will put the sign-in on hold and redirect the user to an application sign up page., +			For example, the following configuration of <classname>ProviderSignInController</classname> sets the sign up URL to "/register": , +    <property name="signupUrl" value="/register" />]