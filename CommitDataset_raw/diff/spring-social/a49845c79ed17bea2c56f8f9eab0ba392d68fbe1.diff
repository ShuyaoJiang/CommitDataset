[+++ b/spring-social-core/src/main/java/org/springframework/social/support/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/spring-social-core/src/main/java/org/springframework/social/support/HttpComponentsClientHttpRequestFactory.java, +	private HttpComponentsClientHttpRequestFactoryDelegate delegate;, +			this.delegate = new HttpComponentsClient_4_1_HttpRequestFactory();, +			this.delegate = new HttpComponentsClient_4_0_HttpRequestFactory();, +		if (VERSION_4_1_AVAILABLE) {, +			this.delegate = new HttpComponentsClient_4_1_HttpRequestFactory(httpClient);, +		} else {, +			this.delegate = new HttpComponentsClient_4_0_HttpRequestFactory(httpClient);, +		}, +		delegate.setHttpClient(httpClient);, +		delegate.setReadTimeout(timeout);, +		return delegate.getHttpClient();, +		return delegate.createRequest(uri, httpMethod);, +		return delegate.createHttpUriRequest(httpMethod, uri);, +	}, +, +	/**, +	 * Template method that allows for manipulating the {@link HttpUriRequest} before it is returned as part of a {@link, +	 * HttpComponentsClientHttpRequest}., +	 * <p>The default implementation is empty., +	 *, +	 * @param request the request to process, +	 */, +	protected void postProcessHttpRequest(HttpUriRequest request) {, +		delegate.postProcessHttpRequest(request);, +	}, +, +	/**, +	 * Shutdown hook that closes the underlying {@link org.apache.http.conn.ClientConnectionManager, +	 * ClientConnectionManager}'s connection pool, if any., +	 */, +	public void destroy() {, +		delegate.destroy();, +	}, +, +, +	// internal helpers, +, +	/**, +	 * HttpComponents Client 4.1 implementation, +	 */, +	private static class HttpComponentsClient_4_1_HttpRequestFactory implements HttpComponentsClientHttpRequestFactoryDelegate {, +, +		private HttpClient httpClient;, +, +		public HttpComponentsClient_4_1_HttpRequestFactory() {, +			SchemeRegistry schemeRegistry = new SchemeRegistry();, +			schemeRegistry.register(new Scheme("http", 80, PlainSocketFactory.getSocketFactory()));, +			schemeRegistry.register(new Scheme("https", 443, SSLSocketFactory.getSocketFactory()));, +			ThreadSafeClientConnManager connectionManager = new ThreadSafeClientConnManager(schemeRegistry);, +			connectionManager.setMaxTotal(DEFAULT_MAX_TOTAL_CONNECTIONS);, +			connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_CONNECTIONS_PER_ROUTE);, +			httpClient = new DefaultHttpClient(connectionManager);, +			this.setReadTimeout(DEFAULT_READ_TIMEOUT_MILLISECONDS);, +		}, +, +		public HttpComponentsClient_4_1_HttpRequestFactory(HttpClient httpClient) {, +			Assert.notNull(httpClient, "httpClient must not be null");, +			this.httpClient = httpClient;, +		}, +, +		public void setHttpClient(HttpClient httpClient) {, +			this.httpClient = httpClient;, +		}, +, +		public void setReadTimeout(int timeout) {, +			if (timeout < 0) {, +				throw new IllegalArgumentException("timeout must be a non-negative value");, +			}, +			getHttpClient().getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT, timeout);, +		}, +, +		public HttpClient getHttpClient() {, +			return this.httpClient;, +		}, +, +		public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {, +			HttpUriRequest httpRequest = createHttpUriRequest(httpMethod, uri);, +			postProcessHttpRequest(httpRequest);, +			return new HttpComponentsClientHttpRequest(getHttpClient(), httpRequest);, +		}, +, +		public HttpUriRequest createHttpUriRequest(HttpMethod httpMethod, URI uri) {, +		public void postProcessHttpRequest(HttpUriRequest request) {, +		}, +, +		public void destroy() {, +			getHttpClient().getConnectionManager().shutdown();, +		}, +	 * HttpComponents Client 4.0 implementation, +	private static class HttpComponentsClient_4_0_HttpRequestFactory implements HttpComponentsClientHttpRequestFactoryDelegate {, +, +		private HttpClient httpClient;, +, +		public HttpComponentsClient_4_0_HttpRequestFactory() {, +			SchemeRegistry schemeRegistry = new SchemeRegistry();]