[+++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +++ b/build.gradle, +        compile ("javax.servlet:servlet-api:$servletApiVersion") { provided = true }, +        compile ("org.springframework.security.oauth:spring-security-oauth:$s2OAuthVersion") { optional = true }, +        compile ("org.scribe:scribe:$scribeVersion") { optional = true }, +++ b/gradle/maven-deployment.gradle, +// @author Chris Beams, + * @author Luke Taylor, + * to the local filesystem to be sync'd via sourceforge SVN and ultimately, + * This process is customized to add ASL license information, and for projects, + * that have the erlangLicense property set to true, the Erlang License will be, + * added to the pom as well., + * @author Chris Beams, +    def deployer = repositories.mavenDeployer {, +    }, +, +    configurePom(deployer.pom), +}, +, +/**, + * Install gradle-built artifacts to the local m2 maven cache., + * Further customizes the 'install' task contributed by the 'maven' plugin., + */, +install {, +    group = 'Build', +    description = "Does a maven install of archives artifacts to local m2 cache", +, +    configurePom(repositories.mavenInstaller.pom), +}, +, +def configurePom(def pom) {, +    pom.whenConfigured { generatedPom ->, +        def optionalDeps = configurations.testRuntime.allDependencies.findAll { gradleDep ->, +            gradleDep.asDynamicObject.hasProperty('optional') && gradleDep.optional, +        }, +        def providedDeps = configurations.testRuntime.allDependencies.findAll { gradleDep ->, +            gradleDep.asDynamicObject.hasProperty('provided') && gradleDep.provided, +        }, +        generatedPom.dependencies.each { mavenDep ->, +            mavenDep.optional = optionalDeps.any { optionalDep ->, +                optionalDep.group == mavenDep.groupId &&, +                        optionalDep.name == mavenDep.artifactId &&, +                        optionalDep.version == mavenDep.version, +            }, +            boolean isProvided = providedDeps.any { providedDep ->, +                providedDep.group == mavenDep.groupId &&, +                        providedDep.name == mavenDep.artifactId &&, +                        providedDep.version == mavenDep.version, +            }, +            if (isProvided) {, +                mavenDep.scope = 'provided', +            }, +        }, +    }]