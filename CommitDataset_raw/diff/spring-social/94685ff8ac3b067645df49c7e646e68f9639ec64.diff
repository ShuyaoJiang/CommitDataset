[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	/**, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 * Simply carries the error parameters through to the sign-in page., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		logger.warn("Error during authorization: " + error);, +		URIBuilder uriBuilder = URIBuilder.fromUri(signInUrl).queryParam("error", error);, +		if (errorDescription != null ) { uriBuilder.queryParam("error_description", errorDescription); }, +		if (errorUri != null ) { uriBuilder.queryParam("error_uri", errorUri); }, +		return redirect(uriBuilder.build().toString());, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ProviderSignInController.java, +	/**, +	 * Process an error callback from an OAuth 2 authorization as described at http://tools.ietf.org/html/rfc6749#section-4.1.2.1., +	 * Called after upon redirect from an OAuth 2 provider when there is some sort of error during authorization, typically because the user denied authorization., +	 * Simply carries the error parameters through to the sign-in page., +	 */, +	@RequestMapping(value="/{providerId}", method=RequestMethod.GET, params="error"), +	public RedirectView oauth2ErrorCallback(@PathVariable String providerId, , +			@RequestParam("error") String error, , +			@RequestParam(value="error_description", required=false) String errorDescription,, +			@RequestParam(value="error_uri", required=false) String errorUri,, +			NativeWebRequest request) {, +		logger.warn("Error during authorization: " + error);, +		URIBuilder uriBuilder = URIBuilder.fromUri(signInUrl).queryParam("error", error);, +		if (errorDescription != null ) { uriBuilder.queryParam("error_description", errorDescription); }, +		if (errorUri != null ) { uriBuilder.queryParam("error_uri", errorUri); }, +		return redirect(uriBuilder.build().toString());, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ProviderSignInControllerTest.java, +	public void oauth2ErrorCallback() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		MockMvc mockMvc = standaloneSetup(controller).build();		, +		mockMvc.perform(get("/signin/oauth2Provider").param("error", "access_denied")), +			.andExpect(redirectedUrl("/signin?error=access_denied"));, +		, +	}, +, +	@Test, +	public void oauth2ErrorCallback_withDescriptionAndUri() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi2> connectionFactory2 = new StubOAuth2ConnectionFactory("clientId", "clientSecret");, +		connectionFactoryLocator.addConnectionFactory(connectionFactory2);, +		StubUsersConnectionRepository usersConnectionRepository = new StubUsersConnectionRepository();, +		ProviderSignInController controller = new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, null);, +		MockMvc mockMvc = standaloneSetup(controller).build();		, +		mockMvc.perform(get("/signin/oauth2Provider"), +				.param("error", "access_denied"), +				.param("error_description", "The user said no."), +				.param("error_uri", "http://provider.com/user/said/no")), +			.andExpect(redirectedUrl("/signin?error=access_denied&error_description=The+user+said+no.&error_uri=http%3A%2F%2Fprovider.com%2Fuser%2Fsaid%2Fno"));, +	}, +, +	@Test]