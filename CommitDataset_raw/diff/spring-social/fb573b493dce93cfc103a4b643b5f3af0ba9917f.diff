[+++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.getCommonOAuthParameters(consumerKey);, +		String authHeader = SigningUtils.buildAuthorizationHeader(tokenUrl, oauthParameters,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1ClientRequestInterceptor.java, +		request.getHeaders().set("Authorization", SigningUtils.buildAuthorizationHeader(request, consumerKey, consumerSecret,, +++ /dev/null, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/OAuth1Template.java, +		Map<String, String> oauthParameters = SigningUtils.getCommonOAuthParameters(consumerKey);, +		String authHeader = SigningUtils.buildAuthorizationHeader(tokenUrl, oauthParameters,, +++ b/spring-social-client/src/main/java/org/springframework/security/oauth/client/oauth1/SigningUtils.java, +package org.springframework.security.oauth.client.oauth1;, +, +import java.io.UnsupportedEncodingException;, +import java.net.URI;, +import java.net.URLDecoder;, +import java.net.URLEncoder;, +import java.security.InvalidKeyException;, +import java.security.NoSuchAlgorithmException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.UUID;, +, +import javax.crypto.Mac;, +import javax.crypto.spec.SecretKeySpec;, +, +import org.apache.commons.codec.binary.Base64;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.MediaType;, +import org.springframework.security.oauth.client.ClientRequest;, +, +class SigningUtils {, +	public static String buildAuthorizationHeader(ClientRequest request, String consumerKey, String consumerSecret,, +			OAuthToken accessToken) {, +		Map<String, String> oauthParameters = getCommonOAuthParameters(consumerKey);, +		oauthParameters.put("oauth_token", accessToken.getValue());, +		Map<String, String> aditionalParameters = extractBodyParameters(request.getHeaders().getContentType(),, +				request.getBody());, +		Map<String, String> queryParameters = extractParameters(request.getUri().getQuery());, +		aditionalParameters.putAll(queryParameters);, +		String baseRequestUrl = getBaseUrlWithoutPortOrQueryString(request.getUri());, +		return SigningUtils.buildAuthorizationHeader(baseRequestUrl, oauthParameters, aditionalParameters,, +				request.getMethod(), consumerSecret, accessToken.getSecret());, +	}, +, +	public static String buildAuthorizationHeader(String targetUrl, Map<String, String> oauthParameters,, +			Map<String, String> additionalParameters, HttpMethod method, String consumerSecret, String tokenSecret) {, +		String baseString = buildBaseString(targetUrl, oauthParameters, additionalParameters, method);, +		String signature = calculateSignature(baseString, consumerSecret, tokenSecret);, +		String header = "OAuth ";, +		for (String key : oauthParameters.keySet()) {, +			header += key + "=\"" + encode(oauthParameters.get(key)) + "\", ";, +		}, +		header += "oauth_signature=\"" + encode(signature) + "\"";, +		return header;, +	}, +, +	public static Map<String, String> getCommonOAuthParameters(String consumerKey) {, +		Map<String, String> oauthParameters = new HashMap<String, String>();, +		oauthParameters.put("oauth_consumer_key", consumerKey);, +		oauthParameters.put("oauth_signature_method", HMAC_SHA1_SIGNATURE_NAME);, +		oauthParameters.put("oauth_timestamp", String.valueOf(System.currentTimeMillis() / 1000));, +		oauthParameters.put("oauth_nonce", UUID.randomUUID().toString());, +		oauthParameters.put("oauth_version", "1.0");, +		return oauthParameters;, +	}, +, +	private static String buildBaseString(String targetUrl, Map<String, String> parameters,, +			Map<String, String> additionalParameters, HttpMethod method) {, +		Map<String, String> allParameters = new HashMap<String, String>(parameters);, +		allParameters.putAll(additionalParameters);, +		String baseString = method.toString() + "&" + encode(targetUrl) + "&";, +		List<String> keys = new ArrayList<String>(allParameters.keySet());, +		Collections.sort(keys);, +		String separator = "";, +		for (String key : keys) {, +			String parameterValue = allParameters.get(key);, +			baseString += encode(separator + key + "=" + encode(parameterValue));, +			separator = "&";, +		}, +		return baseString;, +	}, +, +	private static String calculateSignature(String baseString, String consumerSecret, String tokenSecret) {, +		String key = consumerSecret + "&" + (tokenSecret == null ? "" : tokenSecret);, +		return sign(baseString, key);, +	}, +, +	private static String sign(String signatureBaseString, String key) {, +		try {]