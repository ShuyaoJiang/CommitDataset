[+++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendsApi.java, +	 * @param userId The Twitter ID of the user to follow, +	 * @return the name of the followed user if successful, +	 */, +	String follow(long userId);, +	, +	/**, +	 * Allows the authenticated user to follow (create a friendship) with another user., +	 * @param userId the Twitter ID of the user to unfollow , +	 * @return the name of the unfolloed user if successful , +	 */, +	String unfollow(long userId);, +	, +	/**, +	 * Allows the authenticated use to unfollow (destroy a friendship) with another user, +	 * @param screenName the screen name of the user to unfollow , +	/**, +	 * Checks for a friendship between two users. Returns true if userA follows userB., +	 * @param userA the screen name of userA, +	 * @param userB the screen name of userB, +	 */, +	boolean friendshipExists(String userA, String userB);, +, +	/**, +	 * Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user., +	 */, +	List<Long> getIncomingFriendships();, +, +	/**, +	 * Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request., +	 */, +	List<Long> getOutgoingFriendships();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendsApi.java, +	 * @param userId The Twitter ID of the user to follow, +	 * @return the name of the followed user if successful, +	 */, +	String follow(long userId);, +	, +	/**, +	 * Allows the authenticated user to follow (create a friendship) with another user., +	 * @param userId the Twitter ID of the user to unfollow , +	 * @return the name of the unfolloed user if successful , +	 */, +	String unfollow(long userId);, +	, +	/**, +	 * Allows the authenticated use to unfollow (destroy a friendship) with another user, +	 * @param screenName the screen name of the user to unfollow , +	/**, +	 * Checks for a friendship between two users. Returns true if userA follows userB., +	 * @param userA the screen name of userA, +	 * @param userB the screen name of userB, +	 */, +	boolean friendshipExists(String userA, String userB);, +, +	/**, +	 * Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user., +	 */, +	List<Long> getIncomingFriendships();, +, +	/**, +	 * Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request., +	 */, +	List<Long> getOutgoingFriendships();, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/support/FriendsApiTemplate.java, +	public String follow(long userId) {, +		return this.friendshipAssist(FOLLOW_URL + "?user_id={user_id}", userId);, +	}, +, +		return this.friendshipAssist(FOLLOW_URL + "?screen_name={screen_name}", screenName);, +	}, +	, +	public String unfollow(long userId) {, +		return this.friendshipAssist(UNFOLLOW_URL + "?user_id={user_id}", userId);, +		return this.friendshipAssist(UNFOLLOW_URL + "?screen_name={screen_name}", screenName);, +	}, +	, +	public boolean friendshipExists(String userA, String userB) {, +		return restTemplate.getForObject(EXISTS_URL, boolean.class, userA, userB);, +	}, +, +	public List<Long> getIncomingFriendships() {, +		Map<String, Object> incomingMap = restTemplate.getForObject(FRIENDSHIPS_INCOMING_URL, Map.class);, +		return (List<Long>) incomingMap.get("ids");, +	}, +, +	public List<Long> getOutgoingFriendships() {, +		Map<String, Object> outgoingMap = restTemplate.getForObject(FRIENDSHIPS_OUTGOING_URL, Map.class);, +		return (List<Long>) outgoingMap.get("ids");, +	private String friendshipAssist(String url, Object urlArgs) {, +		ResponseEntity<Map> response = restTemplate.postForEntity(url, "", Map.class, urlArgs);, +	static final String FOLLOW_URL = TwitterTemplate.API_URL_BASE + "friendships/create.json";, +	static final String UNFOLLOW_URL = TwitterTemplate.API_URL_BASE + "friendships/destroy.json";, +	static final String EXISTS_URL = TwitterTemplate.API_URL_BASE + "friendships/exists.json?user_a={user_a}&user_b={user_b}";, +	static final String FRIENDSHIPS_INCOMING_URL = TwitterTemplate.API_URL_BASE + "friendships/incoming.json";, +	static final String FRIENDSHIPS_OUTGOING_URL = TwitterTemplate.API_URL_BASE + "friendships/outgoing.json";, +++ b/spring-social-twitter/src/main/java/org/springframework/social/twitter/FriendsApi.java, +	 * @param userId The Twitter ID of the user to follow, +	 * @return the name of the followed user if successful, +	 */]