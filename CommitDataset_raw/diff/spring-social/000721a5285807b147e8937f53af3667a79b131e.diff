[+++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	@Test, +	public void oauth1Callback_exceptionWhileFetchingAccessToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +		assertNull(connectionRepository.findConnections("oauth1Provider"));, +	}, +, +++ b/spring-social-web/src/main/java/org/springframework/social/connect/web/ConnectController.java, +		try {, +		} catch (Exception e) {, +			logger.warn("Exception while handling OAuth1 callback (" + e.getMessage() + "). Redirecting to " + providerId +" connection status page.");, +		}, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +	@Test, +	public void oauth1Callback_exceptionWhileFetchingAccessToken() throws Exception {, +		ConnectionFactoryRegistry connectionFactoryLocator = new ConnectionFactoryRegistry();, +		ConnectionFactory<TestApi> connectionFactory = new StubOAuth1ConnectionFactory("clientId", "clientSecret", StubOAuth1Template.Behavior.THROW_EXCEPTION);, +		connectionFactoryLocator.addConnectionFactory(connectionFactory);, +		StubConnectionRepository connectionRepository = new StubConnectionRepository();, +		MockMvc mockMvc = standaloneSetup(new ConnectController(connectionFactoryLocator, connectionRepository)).build();, +		assertNull(connectionRepository.findConnections("oauth1Provider"));		, +		mockMvc.perform(get("/connect/oauth1Provider"), +						.sessionAttr("oauthToken", new OAuthToken("requestToken", "requestTokenSecret")), +						.param("oauth_token", "requestToken"), +						.param("oauth_verifier", "verifier")), +			.andExpect(redirectedUrl("/connect/oauth1Provider"));, +		assertNull(connectionRepository.findConnections("oauth1Provider"));, +	}, +, +++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/test/StubConnectionRepository.java, +/*, + * Copyright 2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.social.connect.web.test;, +, +import java.util.List;, +, +import org.springframework.social.connect.Connection;, +import org.springframework.social.connect.ConnectionKey;, +import org.springframework.social.connect.ConnectionRepository;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +public class StubConnectionRepository implements ConnectionRepository {, +	, +	private MultiValueMap<String, Connection<?>> providerIdConnectionMap = new LinkedMultiValueMap<String, Connection<?>>();	, +, +	public MultiValueMap<String, Connection<?>> findAllConnections() {, +		// TODO Auto-generated method stub, +		return null;, +	}, +, +	public List<Connection<?>> findConnections(String providerId) {, +		return providerIdConnectionMap.get(providerId);, +	}, +, +	public <A> List<Connection<A>> findConnections(Class<A> apiType) {, +		// TODO Auto-generated method stub, +		return null;, +	}, +, +	public MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds) {, +		// TODO Auto-generated method stub, +		return null;]