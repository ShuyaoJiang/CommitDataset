[+++ b/spring-social-web/src/test/java/org/springframework/social/connect/web/ConnectControllerTest.java, +		ConnectController connectController = new ConnectController(connectionFactoryLocator, connectionRepository);, +		List<DisconnectInterceptor<?>> interceptors = getDisconnectInterceptor();, +		connectController.setDisconnectInterceptors(interceptors);, +		MockMvc mockMvc = standaloneSetup(connectController).build();, +		assertFalse(((TestConnectInterceptor<?>)(interceptors.get(0))).preDisconnectInvoked);, +		assertFalse(((TestConnectInterceptor<?>)(interceptors.get(0))).postDisconnectInvoked);, +		assertNull(((TestConnectInterceptor<?>)(interceptors.get(0))).connectionFactory);, +		assertTrue(((TestConnectInterceptor<?>)(interceptors.get(1))).preDisconnectInvoked);, +		assertTrue(((TestConnectInterceptor<?>)(interceptors.get(1))).postDisconnectInvoked);, +		assertSame(connectionFactory, ((TestConnectInterceptor<?>)(interceptors.get(1))).connectionFactory);, +		ConnectController connectController = new ConnectController(connectionFactoryLocator, connectionRepository);, +		List<DisconnectInterceptor<?>> interceptors = getDisconnectInterceptor();, +		connectController.setDisconnectInterceptors(interceptors);, +		MockMvc mockMvc = standaloneSetup(connectController).build();, +		assertFalse(((TestConnectInterceptor<?>)(interceptors.get(0))).preDisconnectInvoked);, +		assertFalse(((TestConnectInterceptor<?>)(interceptors.get(0))).postDisconnectInvoked);, +		assertNull(((TestConnectInterceptor<?>)(interceptors.get(0))).connectionFactory);, +		assertTrue(((TestConnectInterceptor<?>)(interceptors.get(1))).preDisconnectInvoked);, +		assertTrue(((TestConnectInterceptor<?>)(interceptors.get(1))).postDisconnectInvoked);, +		assertSame(connectionFactory, ((TestConnectInterceptor<?>)(interceptors.get(1))).connectionFactory);, +		connectController.setConnectInterceptors(interceptors);, +		connectController.setConnectInterceptors(interceptors);, +		connectController.setConnectInterceptors(interceptors);, +		connectController.setConnectInterceptors(interceptors);, +	private List<DisconnectInterceptor<?>> getDisconnectInterceptor() {, +		List<DisconnectInterceptor<?>> interceptors = new ArrayList<DisconnectInterceptor<?>>();, +		interceptors.add(new TestConnectInterceptor<TestApi1>() {});, +		interceptors.add(new TestConnectInterceptor<TestApi2>() {});, +		return interceptors;, +	}, +	private static abstract class TestConnectInterceptor<T> implements ConnectInterceptor<T>, DisconnectInterceptor<T> {, +		WebRequest preDisconnectRequest = null;, +		WebRequest postDisconnectRequest = null;, +		Connection<T> connection = null;, +		boolean preConnectInvoked = false;, +		boolean postConnectInvoked = false;, +		boolean preDisconnectInvoked = false;, +		boolean postDisconnectInvoked = false;, +		, +		public void preDisconnect(ConnectionFactory<T> connectionFactory, WebRequest request) {, +			this.connectionFactory = connectionFactory;, +			this.preDisconnectRequest = request;, +			this.preDisconnectInvoked = true;, +		}, +		, +		public void postDisconnect(ConnectionFactory<T> connectionFactory, WebRequest request) {, +			this.connectionFactory = connectionFactory;, +			this.postDisconnectRequest = request;, +			this.postDisconnectInvoked = true;, +		}]