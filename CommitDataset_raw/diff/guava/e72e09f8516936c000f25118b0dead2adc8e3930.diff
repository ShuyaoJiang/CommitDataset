[+++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +import com.google.common.base.Optional;, +  public void testSizeIfKnown() throws IOException {, +    Optional<Long> sizeIfKnown = source.sizeIfKnown();, +    if (sizeIfKnown.isPresent()) {, +      assertEquals(expected.length, (long) sizeIfKnown.get());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +import com.google.common.base.Optional;, +  public void testSizeIfKnown() throws IOException {, +    Optional<Long> sizeIfKnown = source.sizeIfKnown();, +    if (sizeIfKnown.isPresent()) {, +      assertEquals(expected.length, (long) sizeIfKnown.get());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTester.java, +import com.google.common.base.Optional;, +  public void testLength() throws IOException {, +    assertEquals(expected.length(), source.length());, +  }, +, +  public void testLengthIfKnown() throws IOException {, +    Optional<Long> lengthIfKnown = source.lengthIfKnown();, +    if (lengthIfKnown.isPresent()) {, +      assertEquals(expected.length(), (long) lengthIfKnown.get());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +import com.google.common.base.Optional;, +  public void testSizeIfKnown() throws IOException {, +    Optional<Long> sizeIfKnown = source.sizeIfKnown();, +    if (sizeIfKnown.isPresent()) {, +      assertEquals(expected.length, (long) sizeIfKnown.get());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTester.java, +import com.google.common.base.Optional;, +  public void testLength() throws IOException {, +    assertEquals(expected.length(), source.length());, +  }, +, +  public void testLengthIfKnown() throws IOException {, +    Optional<Long> lengthIfKnown = source.lengthIfKnown();, +    if (lengthIfKnown.isPresent()) {, +      assertEquals(expected.length(), (long) lengthIfKnown.get());, +    }, +  }, +, +++ b/guava/src/com/google/common/io/ByteSource.java, +import com.google.common.base.Optional;, +   * Returns whether the source has zero bytes. The default implementation returns true if, +   * {@link #sizeIfKnown} returns zero, falling back to opening a stream and checking for, +   * EOF if the size is not known., +    Optional<Long> sizeIfKnown = sizeIfKnown();, +    if (sizeIfKnown.isPresent() && sizeIfKnown.get() == 0L) {, +      return true;, +    }, +   * Returns the size of this source in bytes, if the size can be easily determined without, +   * actually opening the data stream., +   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file,, +   * may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method, +   * will return a different number of bytes than would be returned by reading all of the bytes (for, +   * example, some special files may return a size of 0 despite actually having content when read)., +   * <p>Additionally, for mutable sources such as files, a subsequent read may return a different, +   * number of bytes if the contents are changed., +   *, +   * @since 19.0, +   */, +  @Beta, +  public Optional<Long> sizeIfKnown() {, +    return Optional.absent();, +  }, +, +  /**, +   * Returns the size of this source in bytes, even if doing so requires opening and traversing, +   * an entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}., +   *, +   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present., +   * If absent, it will fall back to a heavyweight operation that will open a stream, read (or, +   * {@link InputStream#skip(long) skip}, if possible) to the end of the stream and return the total, +   * number of bytes that were read., +   *, +   * <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient, +   * implementation, it is <i>possible</i> that this method will return a different number of bytes, +   * than would be returned by reading all of the bytes (for example, some special files may return, +   * a size of 0 despite actually having content when read)., +   *, +   * <p>In either case, for mutable sources such as files, a subsequent read may return a different, +   * number of bytes if the contents are changed., +    Optional<Long> sizeIfKnown = sizeIfKnown();, +    if (sizeIfKnown.isPresent()) {, +      return sizeIfKnown.get();, +    }, +, +    public Optional<Long> sizeIfKnown() {]