[+++ b/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.collect.BoundType.CLOSED;, +import static com.google.common.collect.BoundType.OPEN;, +, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +import com.google.common.collect.testing.google.SortedMultisetTestSuiteBuilder;, +import com.google.common.collect.testing.google.TestStringMultisetGenerator;, +, +import junit.framework.Test;, +import junit.framework.TestSuite;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.List;, +import java.util.NavigableSet;, +, +import javax.annotation.Nullable;, +, +/**, + * Tests for {@link ForwardingSortedMultiset}., + *, + * @author Louis Wasserman, + */, +public class ForwardingSortedMultisetTest extends ForwardingMultisetTest {, +  static class StandardImplForwardingSortedMultiset<E> extends ForwardingSortedMultiset<E> {, +    private final SortedMultiset<E> backingMultiset;, +, +    StandardImplForwardingSortedMultiset(SortedMultiset<E> backingMultiset) {, +      this.backingMultiset = backingMultiset;, +    }, +, +    @Override, +    protected SortedMultiset<E> delegate() {, +      return backingMultiset;, +    }, +, +    @Override, +    public SortedMultiset<E> descendingMultiset() {, +      return new StandardDescendingMultiset() {, +, +        @Override, +        Iterator<Entry<E>> entryIterator() {, +          return backingMultiset, +              .descendingMultiset(), +              .entrySet(), +              .iterator();, +        }, +      };, +    }, +, +    @Override, +    public NavigableSet<E> elementSet() {, +      return new StandardElementSet();, +    }, +, +    @Override, +    public Entry<E> firstEntry() {, +      return standardFirstEntry();, +    }, +, +    @Override, +    public Entry<E> lastEntry() {, +      return standardLastEntry();, +    }, +, +    @Override, +    public Entry<E> pollFirstEntry() {, +      return standardPollFirstEntry();, +    }, +, +    @Override, +    public Entry<E> pollLastEntry() {, +      return standardPollLastEntry();, +    }, +, +    @Override, +    public SortedMultiset<E> subMultiset(, +        E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType) {, +      return standardSubMultiset(lowerBound, lowerBoundType, upperBound, upperBoundType);, +    }, +, +    @Override]