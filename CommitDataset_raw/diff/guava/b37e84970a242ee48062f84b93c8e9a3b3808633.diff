[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import com.google.common.base.Charsets;, +import com.google.testing.util.MoreAsserts;, +  // TODO(user): rename; violates rule that only immutable things can be all caps, +  public void testNewDataInput_readFully() {, +    ByteArrayDataInput in = ByteStreams.newDataInput(BYTES);, +    byte[] actual = new byte[BYTES.length];, +    in.readFully(actual);, +    MoreAsserts.assertEquals(BYTES, actual);, +  }, +, +  public void testNewDataInput_readFullyAndThenSome() {, +    ByteArrayDataInput in = ByteStreams.newDataInput(BYTES);, +    byte[] actual = new byte[BYTES.length * 2];, +    try {, +      in.readFully(actual);, +      fail();, +    } catch (IllegalStateException ex) {, +      assertTrue(ex.getCause() instanceof EOFException);, +    }, +  }, +, +  public void testNewDataInput_readFullyWithOffset() {, +    ByteArrayDataInput in = ByteStreams.newDataInput(BYTES);, +    byte[] actual = new byte[4];, +    in.readFully(actual, 2, 2);, +    assertEquals(0, actual[0]);, +    assertEquals(0, actual[1]);, +    assertEquals(BYTES[0], actual[2]);, +    assertEquals(BYTES[1], actual[3]);, +  }, +, +  public void testNewDataInput_readBoolean() {, +    ByteArrayDataInput in = ByteStreams.newDataInput(BYTES);, +    assertTrue(in.readBoolean());, +  }, +, +  public void testNewDataInput_readByte() {, +    ByteArrayDataInput in = ByteStreams.newDataInput(BYTES);, +    for (int i = 0; i < BYTES.length; i++) {, +      assertEquals(BYTES[i], in.readByte());, +    }, +    try {, +      in.readByte();, +      fail();, +    } catch (IllegalStateException ex) {, +      assertTrue(ex.getCause() instanceof EOFException);, +    }, +  }, +, +  public void testNewDataInput_readUnsignedByte() {, +    ByteArrayDataInput in = ByteStreams.newDataInput(BYTES);, +    for (int i = 0; i < BYTES.length; i++) {, +      assertEquals(BYTES[i], in.readUnsignedByte());, +    }, +    try {, +      in.readUnsignedByte();, +      fail();, +    } catch (IllegalStateException ex) {, +      assertTrue(ex.getCause() instanceof EOFException);, +    }, +  }, +, +  public void testNewDataOutput_sized() {, +    ByteArrayDataOutput out = ByteStreams.newDataOutput(4);, +    out.writeInt(0x12345678);, +    out.writeInt(0x76543210);, +    assertTrue(Arrays.equals(BYTES, out.toByteArray()));, +  }, +, +  public void testNewDataOutput_writeByteOffset() {, +    ByteArrayDataOutput out = ByteStreams.newDataOutput();, +    out.write(BYTES, 4, 2);, +    byte[] expected = {BYTES[4], BYTES[5]};, +    MoreAsserts.assertEquals(expected, out.toByteArray());, +  }, +, +  public void testNewDataOutput_writeBoolean() {, +    ByteArrayDataOutput out = ByteStreams.newDataOutput();, +    out.writeBoolean(true);, +    out.writeBoolean(false);, +    byte[] expected = {(byte) 1, (byte) 0};, +    MoreAsserts.assertEquals(expected, out.toByteArray());, +  }, +, +  public void testNewDataOutput_writeChars() {, +    ByteArrayDataOutput out = ByteStreams.newDataOutput();, +    out.writeChars("r\u00C9sum\u00C9");, +    // need to remove byte order mark before comparing, +    byte[] expected = Arrays.copyOfRange("r\u00C9sum\u00C9".getBytes(Charsets.UTF_16), 2, 14);, +    MoreAsserts.assertEquals(expected, out.toByteArray());, +  }, +, +  public void testNewDataOutput_writeUTF() {, +    ByteArrayDataOutput out = ByteStreams.newDataOutput();, +    out.writeUTF("r\u00C9sum\u00C9");, +    byte[] expected ="r\u00C9sum\u00C9".getBytes(Charsets.UTF_8);, +    byte[] actual = out.toByteArray();, +    // writeUTF writes the length of the string in 2 bytes, +    assertEquals(0, actual[0]);]