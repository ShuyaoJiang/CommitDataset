[+++ b/guava-tests/test/com/google/common/collect/MultisetCollectionTest.java, +    suite.addTest(MultisetTestSuiteBuilder.using(unionGenerator()), +        .withFeatures(CollectionSize.ANY,, +            CollectionFeature.ALLOWS_NULL_VALUES), +        .named("UnionMultiset"), +        .createTestSuite());, +, +  private static TestStringMultisetGenerator unionGenerator() {, +    return new TestStringMultisetGenerator() {, +      @Override, +      protected Multiset<String> create(String[] elements) {, +        Multiset<String> multiset1 = LinkedHashMultiset.create();, +        Multiset<String> multiset2 = LinkedHashMultiset.create();, +        for (int i = 0; i < elements.length; i++) {, +          String element = elements[i];, +          if (multiset1.contains(element) ||, +              multiset2.contains(element)) {, +            // add to both; the one already containing it will have more, +            multiset1.add(element);, +            multiset2.add(element);, +          } else if (i % 2 == 0) {, +            multiset1.add(elements[i]);, +          } else {, +            multiset2.add(elements[i]);, +          }, +        }, +        return Multisets.union(multiset1, multiset2);, +      }, +    };, +  }, +, +++ b/guava-tests/test/com/google/common/collect/MultisetCollectionTest.java, +    suite.addTest(MultisetTestSuiteBuilder.using(unionGenerator()), +        .withFeatures(CollectionSize.ANY,, +            CollectionFeature.ALLOWS_NULL_VALUES), +        .named("UnionMultiset"), +        .createTestSuite());, +, +  private static TestStringMultisetGenerator unionGenerator() {, +    return new TestStringMultisetGenerator() {, +      @Override, +      protected Multiset<String> create(String[] elements) {, +        Multiset<String> multiset1 = LinkedHashMultiset.create();, +        Multiset<String> multiset2 = LinkedHashMultiset.create();, +        for (int i = 0; i < elements.length; i++) {, +          String element = elements[i];, +          if (multiset1.contains(element) ||, +              multiset2.contains(element)) {, +            // add to both; the one already containing it will have more, +            multiset1.add(element);, +            multiset2.add(element);, +          } else if (i % 2 == 0) {, +            multiset1.add(elements[i]);, +          } else {, +            multiset2.add(elements[i]);, +          }, +        }, +        return Multisets.union(multiset1, multiset2);, +      }, +    };, +  }, +, +++ b/guava-tests/test/com/google/common/collect/MultisetsTest.java, +  public void testUnion() {, +    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));, +    Multiset<String> ms2 = HashMultiset.create(, +        Arrays.asList("a", "b", "b", "c"));, +    ASSERT.that(Multisets.union(ms1, ms2)), +        .hasContentsAnyOrder("a", "a", "b", "b", "c");, +  }, +, +  public void testUnionEqualMultisets() {, +    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));, +    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "a"));, +    assertEquals(ms1, Multisets.union(ms1, ms2));, +  }, +, +  public void testUnionEmptyNonempty() {, +    Multiset<String> ms1 = HashMultiset.create();, +    Multiset<String> ms2 = HashMultiset.create(Arrays.asList("a", "b", "a"));, +    assertEquals(ms2, Multisets.union(ms1, ms2));, +  }, +, +  public void testUnionNonemptyEmpty() {, +    Multiset<String> ms1 = HashMultiset.create(Arrays.asList("a", "b", "a"));, +    Multiset<String> ms2 = HashMultiset.create();, +    assertEquals(ms1, Multisets.union(ms1, ms2));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/MultisetCollectionTest.java, +    suite.addTest(MultisetTestSuiteBuilder.using(unionGenerator()), +        .withFeatures(CollectionSize.ANY,, +            CollectionFeature.ALLOWS_NULL_VALUES), +        .named("UnionMultiset"), +        .createTestSuite());, +, +  private static TestStringMultisetGenerator unionGenerator() {, +    return new TestStringMultisetGenerator() {, +      @Override, +      protected Multiset<String> create(String[] elements) {]