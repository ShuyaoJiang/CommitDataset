[+++ b/guava-tests/test/com/google/common/io/CloserTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.io;, +, +import com.google.common.base.Objects;, +import com.google.common.base.Splitter;, +import com.google.common.base.Throwables;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Iterables;, +import com.google.common.collect.Lists;, +import com.google.common.testing.TestLogHandler;, +, +import junit.framework.TestCase;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.lang.reflect.Method;, +import java.util.List;, +import java.util.logging.LogRecord;, +, +import javax.annotation.Nullable;, +, +/**, + * Tests for {@link Closer}., + *, + * @author Colin Decker, + */, +public class CloserTest extends TestCase {, +, +  private TestSuppressor suppressor;, +, +  @Override, +  protected void setUp() throws Exception {, +    suppressor = new TestSuppressor();, +  }, +, +  public void testCreate() {, +    Closer closer = Closer.create();, +    String javaVersion = System.getProperty("java.version");, +    String secondPart = Iterables.get(Splitter.on('.').split(javaVersion), 1);, +    int versionNumber = Integer.parseInt(secondPart);, +    if (versionNumber < 7) {, +      assertTrue(closer.suppressor instanceof Closer.LoggingSuppressor);, +    } else {, +      assertTrue(closer.suppressor instanceof Closer.SuppressingSuppressor);, +    }, +  }, +, +  public void testNoExceptionsThrown() throws IOException {, +    Closer closer = new Closer(suppressor);, +, +    TestCloseable c1 = closer.add(TestCloseable.normal());, +    TestCloseable c2 = closer.add(TestCloseable.normal());, +    TestCloseable c3 = closer.add(TestCloseable.normal());, +, +    assertFalse(c1.isClosed());, +    assertFalse(c2.isClosed());, +    assertFalse(c3.isClosed());, +, +    closer.close();, +, +    assertTrue(c1.isClosed());, +    assertTrue(c2.isClosed());, +    assertTrue(c3.isClosed());, +, +    assertTrue(suppressor.suppressions.isEmpty());, +  }, +, +  public void testExceptionThrown_fromTryBlock() throws IOException {, +    Closer closer = new Closer(suppressor);, +, +    TestCloseable c1 = closer.add(TestCloseable.normal());, +    TestCloseable c2 = closer.add(TestCloseable.normal());, +, +    IOException exception = new IOException();, +, +    try {, +      try {, +        throw exception;, +      } catch (Throwable e) {, +        throw closer.rethrow(e, IOException.class);, +      } finally {, +        closer.close();, +      }]