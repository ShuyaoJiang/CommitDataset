[+++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * #transformAsync(ListenableFuture, AsyncFunction)}, in that the returned {@code Future}, +   * attempts to keep its cancellation state in sync with both the input {@code Future} and the, +   * nested {@code Future}.  The transformation is very lightweight and therefore takes place in, +   * the same thread (either the thread that called {@code dereference}, or the thread in which, +   * the dereferenced future completes).]