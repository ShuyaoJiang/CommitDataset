[+++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Ints.java, +   * @since 19.0, +  @Beta, +  @CheckForNull, +  public static Integer tryParse(, +    Long result = Longs.tryParse(string, radix);, +    if (result == null || result.longValue() != result.intValue()) {, +      return result.intValue();, +++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Ints.java, +   * @since 19.0, +  @Beta, +  @CheckForNull, +  public static Integer tryParse(, +    Long result = Longs.tryParse(string, radix);, +    if (result == null || result.longValue() != result.intValue()) {, +      return result.intValue();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/IntsTest.java, +, +  public void testTryParse_radix() {, +    for (int radix = Character.MIN_RADIX;, +        radix <= Character.MAX_RADIX; radix++) {, +      radixEncodeParseAndAssertEquals(0, radix);, +      radixEncodeParseAndAssertEquals(8000, radix);, +      radixEncodeParseAndAssertEquals(-8000, radix);, +      radixEncodeParseAndAssertEquals(GREATEST, radix);, +      radixEncodeParseAndAssertEquals(LEAST, radix);, +      assertNull("Radix: " + radix, Ints.tryParse("9999999999999999", radix));, +      assertNull("Radix: " + radix,, +          Ints.tryParse(Long.toString((long) GREATEST + 1, radix), radix));, +      assertNull("Radix: " + radix,, +          Ints.tryParse(Long.toString((long) LEAST - 1, radix), radix));, +    assertNull("Hex string and dec parm", Ints.tryParse("FFFF", 10));, +    assertEquals("Mixed hex case", 65535, (int) Ints.tryParse("ffFF", 16));, +  }, +, +  /**, +   * Encodes the an integer as a string with given radix, then uses, +   * {@link Ints#tryParse(String, int)} to parse the result. Asserts the result, +   * is the same as what we started with., +   */, +  private static void radixEncodeParseAndAssertEquals(Integer value,, +      int radix) {, +    assertEquals("Radix: " + radix, value,, +        Ints.tryParse(Integer.toString(value, radix), radix));, +  }, +, +  @SuppressWarnings("CheckReturnValue"), +  public void testTryParse_radixTooBig() {, +    try {, +      Ints.tryParse("0", Character.MAX_RADIX + 1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @SuppressWarnings("CheckReturnValue"), +  public void testTryParse_radixTooSmall() {, +    try {, +      Ints.tryParse("0", Character.MIN_RADIX - 1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +}, +, +++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Ints.java, +   * @since 19.0, +  @Beta, +  @CheckForNull, +  public static Integer tryParse(, +    Long result = Longs.tryParse(string, radix);, +    if (result == null || result.longValue() != result.intValue()) {, +      return result.intValue();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/IntsTest.java, +, +  public void testTryParse_radix() {, +    for (int radix = Character.MIN_RADIX;, +        radix <= Character.MAX_RADIX; radix++) {, +      radixEncodeParseAndAssertEquals(0, radix);, +      radixEncodeParseAndAssertEquals(8000, radix);, +      radixEncodeParseAndAssertEquals(-8000, radix);, +      radixEncodeParseAndAssertEquals(GREATEST, radix);, +      radixEncodeParseAndAssertEquals(LEAST, radix);, +      assertNull("Radix: " + radix, Ints.tryParse("9999999999999999", radix));, +      assertNull("Radix: " + radix,, +          Ints.tryParse(Long.toString((long) GREATEST + 1, radix), radix));, +      assertNull("Radix: " + radix,, +          Ints.tryParse(Long.toString((long) LEAST - 1, radix), radix));, +    assertNull("Hex string and dec parm", Ints.tryParse("FFFF", 10));, +    assertEquals("Mixed hex case", 65535, (int) Ints.tryParse("ffFF", 16));, +  }, +, +  /**, +   * Encodes the an integer as a string with given radix, then uses, +   * {@link Ints#tryParse(String, int)} to parse the result. Asserts the result, +   * is the same as what we started with., +   */, +  private static void radixEncodeParseAndAssertEquals(Integer value,, +      int radix) {, +    assertEquals("Radix: " + radix, value,]