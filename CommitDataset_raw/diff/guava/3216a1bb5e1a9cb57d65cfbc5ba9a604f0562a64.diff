[+++ b/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java, +import com.google.common.base.Charsets;, +  public void testPutAfterHash() {, +    Hasher sha1 = Hashing.sha1().newHasher();, +, +    assertEquals("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12",, +        sha1.putString("The quick brown fox jumps over the lazy dog", Charsets.UTF_8), +            .hash(), +            .toString());, +    try {, +      sha1.putInt(42);, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  public void testHashTwice() {, +    Hasher sha1 = Hashing.sha1().newHasher();, +, +    assertEquals("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12",, +        sha1.putString("The quick brown fox jumps over the lazy dog", Charsets.UTF_8), +            .hash(), +            .toString());, +    try {, +      sha1.hash();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java, +import com.google.common.base.Charsets;, +  public void testPutAfterHash() {, +    Hasher sha1 = Hashing.sha1().newHasher();, +, +    assertEquals("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12",, +        sha1.putString("The quick brown fox jumps over the lazy dog", Charsets.UTF_8), +            .hash(), +            .toString());, +    try {, +      sha1.putInt(42);, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  public void testHashTwice() {, +    Hasher sha1 = Hashing.sha1().newHasher();, +, +    assertEquals("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12",, +        sha1.putString("The quick brown fox jumps over the lazy dog", Charsets.UTF_8), +            .hash(), +            .toString());, +    try {, +      sha1.hash();, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +++ b/guava/src/com/google/common/hash/MessageDigestHashFunction.java, +      checkState(!done, "Cannot re-use a Hasher after calling hash() on it");, +      checkNotDone();]