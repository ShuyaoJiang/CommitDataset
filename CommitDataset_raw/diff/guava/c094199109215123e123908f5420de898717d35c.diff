[+++ b/src/com/google/common/collect/MapMaker.java, + * weak} keys, soft or weak values, size-based eviction, timed expiration, and, + * the changes made to the map after the iterator was created. They do not, + * throw {@link ConcurrentModificationException}, and may proceed, + * concurrently with other operations., + * do, however, support {@link java.util.Map.Entry#setValue}, which simply, + * calls {@link java.util.Map#put} on the entry's key., +   * <p>Insertion, removal, update, and access operations on the returned, +   * map safely execute concurrently by multiple threads. Iterators on the, +   * returned map are weakly consistent, returning elements reflecting the, +   * state of the map at some point at or since the creation of the iterator., +   * They do not throw {@link ConcurrentModificationException}, and may proceed, +   * concurrently with other operations., +   *, +   * <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear}, +   * are not guaranteed to be performed atomically on the returned map., +   * Additionally, {@code size} and {@code containsValue} are implemented as, +   * bulk read operations, and thus may fail to observe concurrent writes., +   *, +   * <p>Insertion, removal, update, and access operations on the returned, +   * map safely execute concurrently by multiple threads. Iterators on the, +   * returned map are weakly consistent, returning elements reflecting the, +   * state of the map at some point at or since the creation of the iterator., +   * They do not throw {@link ConcurrentModificationException}, and may proceed, +   * concurrently with other operations., +   *, +   * <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear}, +   * are not guaranteed to be performed atomically on the returned map., +   * Additionally, {@code size} and {@code containsValue} are implemented as, +   * bulk read operations, and thus may fail to observe concurrent writes., +   *]