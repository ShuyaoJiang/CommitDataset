[+++ b/guava-tests/test/com/google/common/collect/ForwardingListMultimapTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +, +public class ForwardingListMultimapTest extends TestCase {, +  @SuppressWarnings("rawtypes"), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(ListMultimap.class, new Function<ListMultimap, ListMultimap>() {, +          @Override public ListMultimap apply(ListMultimap delegate) {, +            return wrap(delegate);, +          }, +        });, +  }, +, +  public void testEquals() {, +    ListMultimap<Integer, String> map1 = ImmutableListMultimap.of(1, "one");, +    ListMultimap<Integer, String> map2 = ImmutableListMultimap.of(2, "two");, +    new EqualsTester(), +        .addEqualityGroup(map1, wrap(map1), wrap(map1)), +        .addEqualityGroup(map2, wrap(map2)), +        .testEquals();, +  }, +, +  private static <K, V> ListMultimap<K, V> wrap(final ListMultimap<K, V> delegate) {, +    return new ForwardingListMultimap<K, V>() {, +      @Override protected ListMultimap<K, V> delegate() {, +        return delegate;, +++ b/guava-tests/test/com/google/common/collect/ForwardingListMultimapTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +, +public class ForwardingListMultimapTest extends TestCase {, +  @SuppressWarnings("rawtypes"), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(ListMultimap.class, new Function<ListMultimap, ListMultimap>() {, +          @Override public ListMultimap apply(ListMultimap delegate) {, +            return wrap(delegate);, +          }, +        });, +  }, +, +  public void testEquals() {, +    ListMultimap<Integer, String> map1 = ImmutableListMultimap.of(1, "one");, +    ListMultimap<Integer, String> map2 = ImmutableListMultimap.of(2, "two");, +    new EqualsTester(), +        .addEqualityGroup(map1, wrap(map1), wrap(map1)), +        .addEqualityGroup(map2, wrap(map2)), +        .testEquals();, +  }, +, +  private static <K, V> ListMultimap<K, V> wrap(final ListMultimap<K, V> delegate) {, +    return new ForwardingListMultimap<K, V>() {, +      @Override protected ListMultimap<K, V> delegate() {, +        return delegate;, +++ b/guava-tests/test/com/google/common/collect/ForwardingMultimapTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +public class ForwardingMultimapTest extends TestCase {, +  @SuppressWarnings("rawtypes"), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(Multimap.class, new Function<Multimap, Multimap>() {, +          @Override public Multimap apply(Multimap delegate) {, +            return wrap(delegate);, +        });, +    Multimap<Integer, String> map1 = ImmutableMultimap.of(1, "one");, +    Multimap<Integer, String> map2 = ImmutableMultimap.of(2, "two");, +    new EqualsTester(), +        .addEqualityGroup(map1, wrap(map1), wrap(map1)), +        .addEqualityGroup(map2, wrap(map2)), +        .testEquals();, +  private static <K, V> Multimap<K, V> wrap(final Multimap<K, V> delegate) {, +    return new ForwardingMultimap<K, V>() {, +      @Override protected Multimap<K, V> delegate() {, +        return delegate;, +    };, +++ b/guava-tests/test/com/google/common/collect/ForwardingListMultimapTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +, +public class ForwardingListMultimapTest extends TestCase {, +  @SuppressWarnings("rawtypes"), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(ListMultimap.class, new Function<ListMultimap, ListMultimap>() {, +          @Override public ListMultimap apply(ListMultimap delegate) {, +            return wrap(delegate);, +          }, +        });, +  }]