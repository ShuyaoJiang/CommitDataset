[+++ b/guava/src/com/google/common/collect/ImmutableMap.java, +    ImmutableSet<K> createKeySet() {, +      return new ImmutableMapKeySet<K, V>(this);, +    }, +, +    @Override, +  /*, +   * This could have a good default implementation of return new ImmutableKeySet<K, V>(this),, +   * but ProGuard can't figure out how to eliminate that default when RegularImmutableMap , +   * overrides it., +   */, +  abstract ImmutableSet<K> createKeySet();, +    ImmutableSet<K> createKeySet() {, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +    ImmutableSet<K> createKeySet() {, +      return new ImmutableMapKeySet<K, V>(this);, +    }, +, +    @Override, +  /*, +   * This could have a good default implementation of return new ImmutableKeySet<K, V>(this),, +   * but ProGuard can't figure out how to eliminate that default when RegularImmutableMap , +   * overrides it., +   */, +  abstract ImmutableSet<K> createKeySet();, +    ImmutableSet<K> createKeySet() {, +++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +  @Override, +  ImmutableSet<K> createKeySet() {, +    throw new AssertionError("should never be called");, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +    ImmutableSet<K> createKeySet() {, +      return new ImmutableMapKeySet<K, V>(this);, +    }, +, +    @Override, +  /*, +   * This could have a good default implementation of return new ImmutableKeySet<K, V>(this),, +   * but ProGuard can't figure out how to eliminate that default when RegularImmutableMap , +   * overrides it., +   */, +  abstract ImmutableSet<K> createKeySet();, +    ImmutableSet<K> createKeySet() {, +++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +  @Override, +  ImmutableSet<K> createKeySet() {, +    throw new AssertionError("should never be called");, +  }, +, +++ b/guava/src/com/google/common/collect/RegularImmutableBiMap.java, +  ImmutableSet<K> createKeySet() {, +    return new ImmutableMapKeySet<K, V>(this);, +  }, +, +  @Override, +    ImmutableSet<V> createKeySet() {, +      return new ImmutableMapKeySet<V, K>(this);, +    }, +, +    @Override]