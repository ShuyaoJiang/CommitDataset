[+++ b/guava/src/com/google/common/util/concurrent/ServiceManager.java, +    WeakReference<ServiceManagerState> stateReference = , +        new WeakReference<ServiceManagerState>(state);, +      service.addListener(new ServiceListener(service, stateReference), new SynchronizedExecutor());, +    ServiceListener(Service service, WeakReference<ServiceManagerState> state) {, +      this.state = state;, +      ServiceManagerState state = this.state.get();, +      if (state != null) {, +        state.transitionService(service, NEW, STARTING);, +      ServiceManagerState state = this.state.get();, +      if (state != null) {, +        state.transitionService(service, STARTING, RUNNING);, +      }, +      ServiceManagerState state = this.state.get();, +      if (state != null) {, +        state.transitionService(service, from, STOPPING);, +      }, +      ServiceManagerState state = this.state.get();, +      if (state != null) {, +        state.transitionService(service, from, TERMINATED);, +      ServiceManagerState state = this.state.get();, +      if (state != null) {, +        // Log before the transition, so that if the process exits in response to server failure,, +        // there is a higher likelihood that the cause will be in the logs., +        if (!(service instanceof NoOpService)) {, +        state.transitionService(service, from, FAILED);]