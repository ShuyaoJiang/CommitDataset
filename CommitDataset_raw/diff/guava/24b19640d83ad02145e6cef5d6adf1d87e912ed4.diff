[+++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  }, +  public void testPadToLongWith4Bytes() {, +    assertEquals(0x0000000099999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(4)).padToLong());, +  }, +, +  public void testPadToLongWith6Bytes() {, +    assertEquals(0x0000999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(6)).padToLong());, +  }, +, +  public void testPadToLongWith8Bytes() {, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(8)).padToLong());, +  }, +, +  private static byte[] byteArrayWith9s(int size) {, +    byte[] bytez = new byte[size];, +    Arrays.fill(bytez, (byte) 0x99);, +    return bytez;, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  }, +  public void testPadToLongWith4Bytes() {, +    assertEquals(0x0000000099999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(4)).padToLong());, +  }, +, +  public void testPadToLongWith6Bytes() {, +    assertEquals(0x0000999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(6)).padToLong());, +  }, +, +  public void testPadToLongWith8Bytes() {, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(8)).padToLong());, +  }, +, +  private static byte[] byteArrayWith9s(int size) {, +    byte[] bytez = new byte[size];, +    Arrays.fill(bytez, (byte) 0x99);, +    return bytez;, +++ b/guava/src/com/google/common/hash/HashCode.java, +   * value with {@code asBytes()} as the least-significant bytes and {@code 0x00} as the remaining, +   * most-significant bytes., +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  }, +  public void testPadToLongWith4Bytes() {, +    assertEquals(0x0000000099999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(4)).padToLong());, +  }, +, +  public void testPadToLongWith6Bytes() {, +    assertEquals(0x0000999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(6)).padToLong());, +  }, +, +  public void testPadToLongWith8Bytes() {, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(8)).padToLong());, +  }, +, +  private static byte[] byteArrayWith9s(int size) {, +    byte[] bytez = new byte[size];, +    Arrays.fill(bytez, (byte) 0x99);, +    return bytez;, +++ b/guava/src/com/google/common/hash/HashCode.java, +   * value with {@code asBytes()} as the least-significant bytes and {@code 0x00} as the remaining, +   * most-significant bytes., +++ b/guava/src/com/google/common/hash/HashCodes.java, +      return padToLong();, +      long retVal = (bytes[0] & 0xFF);, +      for (int i = 1; i < Math.min(bytes.length, 8); i++) {, +        retVal |= (bytes[i] & 0xFFL) << (i * 8);, +      }, +      return retVal;, +        for (int i = 1; i < Math.min(bytes.length, 4); i++) {, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  }, +  public void testPadToLongWith4Bytes() {, +    assertEquals(0x0000000099999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(4)).padToLong());, +  }, +, +  public void testPadToLongWith6Bytes() {, +    assertEquals(0x0000999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(6)).padToLong());, +  }, +, +  public void testPadToLongWith8Bytes() {, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(byteArrayWith9s(8)).padToLong());, +  }, +, +  private static byte[] byteArrayWith9s(int size) {, +    byte[] bytez = new byte[size];, +    Arrays.fill(bytez, (byte) 0x99);, +    return bytez;, +++ b/guava/src/com/google/common/hash/HashCode.java, +   * value with {@code asBytes()} as the least-significant bytes and {@code 0x00} as the remaining, +   * most-significant bytes., +++ b/guava/src/com/google/common/hash/HashCodes.java, +      return padToLong();, +      long retVal = (bytes[0] & 0xFF);, +      for (int i = 1; i < Math.min(bytes.length, 8); i++) {, +        retVal |= (bytes[i] & 0xFFL) << (i * 8);, +      }, +      return retVal;, +        for (int i = 1; i < Math.min(bytes.length, 4); i++) {, +++ b/guava/src/com/google/common/hash/Hasher.java, + *   newHasher().putBytes(new byte[] { b1, b2, b3 }).hash()}</pre>]