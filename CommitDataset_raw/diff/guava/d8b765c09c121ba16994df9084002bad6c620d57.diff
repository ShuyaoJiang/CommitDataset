[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +import com.google.common.collect.Maps.ImprovedAbstractMap;, +, +public abstract class ImmutableMap<K, V> extends ImprovedAbstractMap<K, V>, +    implements Serializable {, +  @Override, +    return (ImmutableSet<Entry<K, V>>) super.entrySet();, +  @Override, +  @Override, +    return (ImmutableSet<K>) super.keySet();, +  @Override, +  @Override, +    return (ImmutableCollection<V>) super.values();, +, +  @Override, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +import com.google.common.collect.Maps.ImprovedAbstractMap;, +, +public abstract class ImmutableMap<K, V> extends ImprovedAbstractMap<K, V>, +    implements Serializable {, +  @Override, +    return (ImmutableSet<Entry<K, V>>) super.entrySet();, +  @Override, +  @Override, +    return (ImmutableSet<K>) super.keySet();, +  @Override, +  @Override, +    return (ImmutableCollection<V>) super.values();, +, +  @Override, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * {@code AbstractMap} substitute that caches all views., +  abstract static class ImprovedAbstractMap<K, V> implements Map<K, V> {, +    // We deliberately don't extend AbstractMap to avoid the overhead of its view cache fields., +, +    @Override, +    public int size() {, +      return entrySet().size();, +    }, +, +    @Override, +    public boolean isEmpty() {, +      return size() == 0;, +    }, +, +    @Override, +    public boolean containsValue(@Nullable Object value) {, +      return Iterators.contains(values().iterator(), value);, +    }, +, +    @Override, +    public V put(K key, V value) {, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public V remove(Object key) {, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public void putAll(Map<? extends K, ? extends V> m) {, +      for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {, +        put(entry.getKey(), entry.getValue());, +      }, +    }, +, +    @Override, +    public void clear() {, +      entrySet().clear();, +    }, +, +    @Override, +    public int hashCode() {, +      return Sets.hashCodeImpl(entrySet());, +    }, +, +    @Override, +    public boolean equals(@Nullable Object obj) {, +      return Maps.equalsImpl(this, obj);, +    }, +, +    @Override, +    public String toString() {, +      return Maps.toStringImpl(this);, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +import com.google.common.collect.Maps.ImprovedAbstractMap;, +, +public abstract class ImmutableMap<K, V> extends ImprovedAbstractMap<K, V>, +    implements Serializable {, +  @Override, +    return (ImmutableSet<Entry<K, V>>) super.entrySet();, +  @Override, +  @Override]