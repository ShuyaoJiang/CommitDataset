[+++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +import java.util.ArrayList;, +  public void testComputeIfAbsent_RemovalListener() {, +    List<RemovalNotification<Object, Object>> notifications = new ArrayList<>();, +    RemovalListener<Object, Object> removalListener =, +        new RemovalListener<Object, Object>() {, +          @Override, +          public void onRemoval(RemovalNotification<Object, Object> notification) {, +            notifications.add(notification);, +          }, +        };, +    Cache<Object, Object> cache =, +        CacheBuilder.newBuilder().removalListener(removalListener).build();, +    cache.put("a", "b");, +    cache.asMap().computeIfAbsent("a", k -> "c");, +    assertTrue(notifications.toString(), notifications.isEmpty());, +  }, +, +++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +import java.util.ArrayList;, +  public void testComputeIfAbsent_RemovalListener() {, +    List<RemovalNotification<Object, Object>> notifications = new ArrayList<>();, +    RemovalListener<Object, Object> removalListener =, +        new RemovalListener<Object, Object>() {, +          @Override, +          public void onRemoval(RemovalNotification<Object, Object> notification) {, +            notifications.add(notification);, +          }, +        };, +    Cache<Object, Object> cache =, +        CacheBuilder.newBuilder().removalListener(removalListener).build();, +    cache.put("a", "b");, +    cache.asMap().computeIfAbsent("a", k -> "c");, +    assertTrue(notifications.toString(), notifications.isEmpty());, +  }, +, +++ b/guava/src/com/google/common/cache/LocalCache.java, +          if (valueReference != null && newValue == valueReference.get()) {, +            loadingValueReference.set(newValue);, +            setValue(e, key, newValue, now);, +            return newValue;, +          }]