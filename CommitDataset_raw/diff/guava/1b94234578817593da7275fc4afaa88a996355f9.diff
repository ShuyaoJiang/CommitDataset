[+++ b/android/guava-tests/test/com/google/common/collect/ListsTest.java, +  public void testCartesianProduct_indexOf() {, +    List<List<Integer>> actual = Lists.cartesianProduct(list(1, 2), list(3, 4));, +    assertEquals(actual.indexOf(list(1, 3)), 0);, +    assertEquals(actual.indexOf(list(1, 4)), 1);, +    assertEquals(actual.indexOf(list(2, 3)), 2);, +    assertEquals(actual.indexOf(list(2, 4)), 3);, +    assertEquals(actual.indexOf(list(3, 1)), -1);, +, +    assertEquals(actual.indexOf(list(1)), -1);, +    assertEquals(actual.indexOf(list(1, 1, 1)), -1);, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/ListsTest.java, +  public void testCartesianProduct_indexOf() {, +    List<List<Integer>> actual = Lists.cartesianProduct(list(1, 2), list(3, 4));, +    assertEquals(actual.indexOf(list(1, 3)), 0);, +    assertEquals(actual.indexOf(list(1, 4)), 1);, +    assertEquals(actual.indexOf(list(2, 3)), 2);, +    assertEquals(actual.indexOf(list(2, 4)), 3);, +    assertEquals(actual.indexOf(list(3, 1)), -1);, +, +    assertEquals(actual.indexOf(list(1)), -1);, +    assertEquals(actual.indexOf(list(1, 1, 1)), -1);, +  }, +, +++ b/android/guava/src/com/google/common/collect/CartesianList.java, +  public int indexOf(Object o) {, +    if (!(o instanceof List)) {, +      return -1;, +    }, +    List<?> list = (List<?>) o;, +    if (list.size() != axes.size()) {, +      return -1;, +    }, +    ListIterator<?> itr = list.listIterator();, +    int computedIndex = 0;, +    while (itr.hasNext()) {, +      int axisIndex = itr.nextIndex();, +      int elemIndex = axes.get(axisIndex).indexOf(itr.next());, +      if (elemIndex == -1) {, +        return -1;, +      }, +      computedIndex += elemIndex * axesSizeProduct[axisIndex + 1];, +    }, +    return computedIndex;, +  }, +, +  @Override, +    return indexOf(o) != -1;, +++ b/android/guava-tests/test/com/google/common/collect/ListsTest.java, +  public void testCartesianProduct_indexOf() {, +    List<List<Integer>> actual = Lists.cartesianProduct(list(1, 2), list(3, 4));, +    assertEquals(actual.indexOf(list(1, 3)), 0);, +    assertEquals(actual.indexOf(list(1, 4)), 1);, +    assertEquals(actual.indexOf(list(2, 3)), 2);, +    assertEquals(actual.indexOf(list(2, 4)), 3);, +    assertEquals(actual.indexOf(list(3, 1)), -1);, +, +    assertEquals(actual.indexOf(list(1)), -1);, +    assertEquals(actual.indexOf(list(1, 1, 1)), -1);, +  }, +, +++ b/android/guava/src/com/google/common/collect/CartesianList.java, +  public int indexOf(Object o) {, +    if (!(o instanceof List)) {, +      return -1;, +    }, +    List<?> list = (List<?>) o;, +    if (list.size() != axes.size()) {, +      return -1;, +    }, +    ListIterator<?> itr = list.listIterator();, +    int computedIndex = 0;, +    while (itr.hasNext()) {, +      int axisIndex = itr.nextIndex();, +      int elemIndex = axes.get(axisIndex).indexOf(itr.next());, +      if (elemIndex == -1) {, +        return -1;, +      }, +      computedIndex += elemIndex * axesSizeProduct[axisIndex + 1];, +    }, +    return computedIndex;, +  }, +, +  @Override, +    return indexOf(o) != -1;, +++ b/guava-gwt/test/com/google/common/collect/ListsTest_gwt.java, +public void testCartesianProduct_indexOf() throws Exception {, +  com.google.common.collect.ListsTest testCase = new com.google.common.collect.ListsTest();, +  testCase.testCartesianProduct_indexOf();, +}, +, +++ b/android/guava-tests/test/com/google/common/collect/ListsTest.java, +  public void testCartesianProduct_indexOf() {, +    List<List<Integer>> actual = Lists.cartesianProduct(list(1, 2), list(3, 4));, +    assertEquals(actual.indexOf(list(1, 3)), 0);, +    assertEquals(actual.indexOf(list(1, 4)), 1);, +    assertEquals(actual.indexOf(list(2, 3)), 2);, +    assertEquals(actual.indexOf(list(2, 4)), 3);]