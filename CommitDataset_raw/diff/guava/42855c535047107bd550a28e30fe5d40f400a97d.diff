[+++ b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java, +import java.util.Collection;, +  public void testRemoveAt_exhaustive() {, +    int size = 8;, +    List<Integer> expected = createOrderedList(size);, +    for (Collection<Integer> perm : Collections2.permutations(expected)) {, +      for (int i = 0; i < perm.size(); i++) {, +        MinMaxPriorityQueue<Integer> q = MinMaxPriorityQueue.create(perm);, +        q.removeAt(i);, +        assertTrue("Remove at " + i + " perm " + perm, q.isIntact());, +      }, +    }, +  }, +, +  public void testExhaustive_pollAndPush() {, +    int size = 8;, +    List<Integer> expected = createOrderedList(size);, +    for (Collection<Integer> perm : Collections2.permutations(expected)) {, +      MinMaxPriorityQueue<Integer> q = MinMaxPriorityQueue.create(perm);, +      List<Integer> elements = Lists.newArrayListWithCapacity(size);, +      while (!q.isEmpty()) {, +        Integer next = q.pollFirst();, +        for (int i = 0; i <= size; i++) {, +          assertTrue(q.add(i));, +          assertTrue(q.add(next));, +          assertTrue(q.remove(i));, +          assertEquals(next, q.poll());, +        }, +        elements.add(next);, +      }, +      assertEquals("Started with " + perm, expected, elements);, +    }, +  }, +]