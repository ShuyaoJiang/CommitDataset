[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return forArray(array, offset, length, 0);, +  }, +, +  /**, +   * Returns a list iterator containing the elements in the specified range of, +   * {@code array} in order, starting at the specified index., +   *, +   * <p>The {@code Iterable} equivalent of this method is {@code, +   * Arrays.asList(array).subList(offset, offset + length).listIterator(index)}., +   */, +  static <T> UnmodifiableListIterator<T> forArray(, +      final T[] array, final int offset, int length, int index) {, +    return new AbstractIndexedListIterator<T>(length, index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return forArray(array, offset, length, 0);, +  }, +, +  /**, +   * Returns a list iterator containing the elements in the specified range of, +   * {@code array} in order, starting at the specified index., +   *, +   * <p>The {@code Iterable} equivalent of this method is {@code, +   * Arrays.asList(array).subList(offset, offset + length).listIterator(index)}., +   */, +  static <T> UnmodifiableListIterator<T> forArray(, +      final T[] array, final int offset, int length, int index) {, +    return new AbstractIndexedListIterator<T>(length, index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return forArray(array, offset, length, 0);, +  }, +, +  /**, +   * Returns a list iterator containing the elements in the specified range of, +   * {@code array} in order, starting at the specified index., +   *, +   * <p>The {@code Iterable} equivalent of this method is {@code, +   * Arrays.asList(array).subList(offset, offset + length).listIterator(index)}., +   */, +  static <T> UnmodifiableListIterator<T> forArray(, +      final T[] array, final int offset, int length, int index) {, +    return new AbstractIndexedListIterator<T>(length, index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +import static com.google.common.base.Preconditions.checkElementIndex;, +import static com.google.common.base.Preconditions.checkPositionIndex;, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +  @Override public UnmodifiableListIterator<E> listIterator(int index) {, +    return new AbstractIndexedListIterator<E>(size(), index) {, +      @Override, +      protected E get(int index) {, +        return ImmutableList.this.get(index);, +      }, +    };, +  }, +  public int indexOf(@Nullable Object object) {, +    return (object == null) ? -1 : Lists.indexOfImpl(this, object);, +  }, +  public int lastIndexOf(@Nullable Object object) {, +    return (object == null) ? -1 : Lists.lastIndexOfImpl(this, object);, +  }, +, +  @Override, +  public boolean contains(@Nullable Object object) {, +    return indexOf(object) >= 0;, +  }, +      checkPositionIndexes(fromIndex, toIndex, size);, +      checkElementIndex(index, size);, +      checkPositionIndex(index, size);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return forArray(array, offset, length, 0);, +  }, +, +  /**, +   * Returns a list iterator containing the elements in the specified range of, +   * {@code array} in order, starting at the specified index., +   *, +   * <p>The {@code Iterable} equivalent of this method is {@code, +   * Arrays.asList(array).subList(offset, offset + length).listIterator(index)}., +   */, +  static <T> UnmodifiableListIterator<T> forArray(, +      final T[] array, final int offset, int length, int index) {, +    return new AbstractIndexedListIterator<T>(length, index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +import static com.google.common.base.Preconditions.checkElementIndex;, +import static com.google.common.base.Preconditions.checkPositionIndex;, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +  @Override public UnmodifiableListIterator<E> listIterator(int index) {, +    return new AbstractIndexedListIterator<E>(size(), index) {, +      @Override, +      protected E get(int index) {, +        return ImmutableList.this.get(index);, +      }, +    };, +  }, +  public int indexOf(@Nullable Object object) {, +    return (object == null) ? -1 : Lists.indexOfImpl(this, object);, +  }]