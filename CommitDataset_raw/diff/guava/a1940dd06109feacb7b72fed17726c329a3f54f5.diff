[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    return new Multimaps.AsMap<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    return new Multimaps.AsMap<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +          return asMapEntryIterator(backingSet(), function);, +  static <K, V> Iterator<Entry<K, V>> asMapEntryIterator(, +      Entry<K, V> transform(final K key) {, +        return immutableEntry(key, function.apply(key));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    return new Multimaps.AsMap<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +          return asMapEntryIterator(backingSet(), function);, +  static <K, V> Iterator<Entry<K, V>> asMapEntryIterator(, +      Entry<K, V> transform(final K key) {, +        return immutableEntry(key, function.apply(key));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      extends AbstractMultimap<K, V> implements SetMultimap<K, V>, Serializable {, +    Iterator<Entry<K, V>> entryIterator() {, +      return map.entrySet().iterator();, +    Map<K, Collection<V>> createAsMap() {, +      return new AsMap<K, V>(this);, +  static final class AsMap<K, V> extends, +    private final Multimap<K, V> multimap;, +    AsMap(Multimap<K, V> multimap) {, +      this.multimap = checkNotNull(multimap);, +    }, +    @Override public int size() {, +      return multimap.keySet().size();, +    }, +      multimap.keySet().remove(key);, +        return Maps.asMapEntryIterator(multimap.keySet(), new Function<K, Collection<V>>() {, +          @Override, +          public Collection<V> apply(K key) {, +            return multimap.get(key);, +          }, +        });, +      return containsKey(key) ? multimap.get((K) key) : null;, +      return containsKey(key) ? multimap.removeAll(key) : null;, +      return multimap.keySet();, +      return multimap.isEmpty();, +      return multimap.containsKey(key);, +      multimap.clear();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    return new Multimaps.AsMap<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +          return asMapEntryIterator(backingSet(), function);, +  static <K, V> Iterator<Entry<K, V>> asMapEntryIterator(, +      Entry<K, V> transform(final K key) {, +        return immutableEntry(key, function.apply(key));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      extends AbstractMultimap<K, V> implements SetMultimap<K, V>, Serializable {, +    Iterator<Entry<K, V>> entryIterator() {, +      return map.entrySet().iterator();, +    Map<K, Collection<V>> createAsMap() {, +      return new AsMap<K, V>(this);, +  static final class AsMap<K, V> extends, +    private final Multimap<K, V> multimap;, +    AsMap(Multimap<K, V> multimap) {, +      this.multimap = checkNotNull(multimap);, +    }, +    @Override public int size() {, +      return multimap.keySet().size();, +    }, +      multimap.keySet().remove(key);, +        return Maps.asMapEntryIterator(multimap.keySet(), new Function<K, Collection<V>>() {, +          @Override, +          public Collection<V> apply(K key) {, +            return multimap.get(key);, +          }, +        });, +      return containsKey(key) ? multimap.get((K) key) : null;, +      return containsKey(key) ? multimap.removeAll(key) : null;, +      return multimap.keySet();, +      return multimap.isEmpty();, +      return multimap.containsKey(key);, +      multimap.clear();, +++ b/guava/src/com/google/common/collect/LinkedListMultimap.java, +    return new Multimaps.AsMap<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    return new Multimaps.AsMap<K, V>(this);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +          return asMapEntryIterator(backingSet(), function);, +  static <K, V> Iterator<Entry<K, V>> asMapEntryIterator(, +      Entry<K, V> transform(final K key) {, +        return immutableEntry(key, function.apply(key));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      extends AbstractMultimap<K, V> implements SetMultimap<K, V>, Serializable {, +    Iterator<Entry<K, V>> entryIterator() {, +      return map.entrySet().iterator();, +    Map<K, Collection<V>> createAsMap() {, +      return new AsMap<K, V>(this);, +  static final class AsMap<K, V> extends, +    private final Multimap<K, V> multimap;, +    AsMap(Multimap<K, V> multimap) {, +      this.multimap = checkNotNull(multimap);, +    }, +    @Override public int size() {, +      return multimap.keySet().size();, +    }]