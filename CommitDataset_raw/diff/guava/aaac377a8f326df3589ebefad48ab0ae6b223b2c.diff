[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +, +  public void testSerialization() {, +    ImmutableRangeMap<Integer, Integer> emptyRangeMap = ImmutableRangeMap.of();, +    SerializableTester.reserializeAndAssert(emptyRangeMap);, +, +    ImmutableRangeMap<Integer, Integer> nonEmptyRangeMap =, +        new ImmutableRangeMap.Builder<Integer, Integer>(), +            .put(Range.closed(2, 4), 5), +            .put(Range.open(6, 7), 3), +            .put(Range.closedOpen(8, 10), 4), +            .put(Range.openClosed(15, 17), 2), +        .build();, +, +    ImmutableMap<Range<Integer>, Integer> test = nonEmptyRangeMap.asMapOfRanges();, +, +    for (Range<Integer> range : test.keySet()) {, +      SerializableTester.reserializeAndAssert(range);, +    }, +, +    SerializableTester.reserializeAndAssert(test.keySet());, +, +    SerializableTester.reserializeAndAssert(nonEmptyRangeMap);, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +, +  public void testSerialization() {, +    ImmutableRangeMap<Integer, Integer> emptyRangeMap = ImmutableRangeMap.of();, +    SerializableTester.reserializeAndAssert(emptyRangeMap);, +, +    ImmutableRangeMap<Integer, Integer> nonEmptyRangeMap =, +        new ImmutableRangeMap.Builder<Integer, Integer>(), +            .put(Range.closed(2, 4), 5), +            .put(Range.open(6, 7), 3), +            .put(Range.closedOpen(8, 10), 4), +            .put(Range.openClosed(15, 17), 2), +        .build();, +, +    ImmutableMap<Range<Integer>, Integer> test = nonEmptyRangeMap.asMapOfRanges();, +, +    for (Range<Integer> range : test.keySet()) {, +      SerializableTester.reserializeAndAssert(range);, +    }, +, +    SerializableTester.reserializeAndAssert(test.keySet());, +, +    SerializableTester.reserializeAndAssert(nonEmptyRangeMap);, +  }, +++ b/guava/src/com/google/common/collect/ImmutableEnumMap.java, +   * This class is used to serialize ImmutableEnumMap instances., +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +, +  public void testSerialization() {, +    ImmutableRangeMap<Integer, Integer> emptyRangeMap = ImmutableRangeMap.of();, +    SerializableTester.reserializeAndAssert(emptyRangeMap);, +, +    ImmutableRangeMap<Integer, Integer> nonEmptyRangeMap =, +        new ImmutableRangeMap.Builder<Integer, Integer>(), +            .put(Range.closed(2, 4), 5), +            .put(Range.open(6, 7), 3), +            .put(Range.closedOpen(8, 10), 4), +            .put(Range.openClosed(15, 17), 2), +        .build();, +, +    ImmutableMap<Range<Integer>, Integer> test = nonEmptyRangeMap.asMapOfRanges();, +, +    for (Range<Integer> range : test.keySet()) {, +      SerializableTester.reserializeAndAssert(range);, +    }, +, +    SerializableTester.reserializeAndAssert(test.keySet());, +, +    SerializableTester.reserializeAndAssert(nonEmptyRangeMap);, +  }, +++ b/guava/src/com/google/common/collect/ImmutableEnumMap.java, +   * This class is used to serialize ImmutableEnumMap instances., +++ b/guava/src/com/google/common/collect/ImmutableRangeMap.java, +import java.io.Serializable;, +public class ImmutableRangeMap<K extends Comparable<?>, V> implements RangeMap<K, V>, Serializable {, +  private final transient ImmutableList<Range<K>> ranges;, +  private final transient ImmutableList<V> values;, +, +  /**, +   * This class is used to serialize ImmutableRangeMap instances., +   * Serializes the {@link #asMapOfRanges()} form., +   */, +  private static class SerializedForm<K extends Comparable<?>, V> implements Serializable {, +, +    private final ImmutableMap<Range<K>, V> mapOfRanges;, +, +    SerializedForm(ImmutableMap<Range<K>, V> mapOfRanges) {, +      this.mapOfRanges = mapOfRanges;, +    }, +, +    Object readResolve() {, +      if (mapOfRanges.isEmpty()) {, +        return of();, +      } else {, +        return createRangeMap();, +      }]