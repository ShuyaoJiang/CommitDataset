[+++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +import java.lang.reflect.ParameterizedType;, +  private static class WithConstructorAndTypeParameter<T> {, +    @SuppressWarnings("unused") // by reflection, +    <X> WithConstructorAndTypeParameter() {}, +  }, +, +  public void testConstructor_returnType_hasTypeParameter() throws Exception {, +    @SuppressWarnings("rawtypes") // Foo.class for Foo<T> is always raw type, +    Class<WithConstructorAndTypeParameter> type = WithConstructorAndTypeParameter.class;, +    @SuppressWarnings("rawtypes") // Foo.class, +    Constructor<WithConstructorAndTypeParameter> constructor = type.getDeclaredConstructor();, +    Invokable<?, ?> factory = Invokable.from(constructor);, +    assertEquals(2, factory.getTypeParameters().length);, +    assertEquals(type.getTypeParameters()[0], factory.getTypeParameters()[0]);, +    assertEquals(constructor.getTypeParameters()[0], factory.getTypeParameters()[1]);, +    ParameterizedType returnType = (ParameterizedType) factory.getReturnType().getType();, +    assertEquals(type, returnType.getRawType());, +    assertEquals(ImmutableList.copyOf(type.getTypeParameters()),, +        ImmutableList.copyOf(returnType.getActualTypeArguments()));, +  }, +, +  public void testInnerClassDefaultConstructor() {, +  public void testNestedInnerClassDefaultConstructor() {, +  public void testInnerClassWithOneParameterConstructor() {, +  public void testInnerClassWithAnnotatedConstructorParameter() {, +  public void testInnerClassWithGenericConstructorParameter() {, +  public void testAnonymousClassDefaultConstructor() {, +    Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];, +  public void testAnonymousClassWithTwoParametersConstructor() {, +    Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];, +  public void testLocalClassDefaultConstructor() {, +    Constructor<?> constructor = LocalWithDefaultConstructor.class.getDeclaredConstructors() [0];, +  private static void doTestStaticAnonymousClassDefaultConstructor() {, +    Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];, +  public void testAnonymousClassInConstructor() {, +    new AnonymousClassInConstructor();, +  }, +, +  private static class AnonymousClassInConstructor {, +    AnonymousClassInConstructor() {, +      final int i = 1;, +      final String s = "hello world";, +      Class<?> anonymous = new Runnable() {, +        @Override public void run() {, +          System.out.println(s + i);, +        }, +      }.getClass();, +      Constructor<?> constructor = anonymous.getDeclaredConstructors() [0];, +      assertEquals(0, Invokable.from(constructor).getParameters().size());, +    }, +  }, +, +  public void testLocalClassInInstanceInitializer() {, +    new LocalClassInInstanceInitializer();, +  }, +, +  private static class LocalClassInInstanceInitializer {, +    {, +      class Local {}, +      Constructor<?> constructor = Local.class.getDeclaredConstructors() [0];, +      assertEquals(0, Invokable.from(constructor).getParameters().size());, +    }, +  }, +, +  public void testLocalClassInStaticInitializer() {, +    new LocalClassInStaticInitializer();, +  }, +, +  private static class LocalClassInStaticInitializer {, +    static {, +      class Local {}, +      Constructor<?> constructor = Local.class.getDeclaredConstructors() [0];, +      assertEquals(0, Invokable.from(constructor).getParameters().size());, +    }, +  }, +, +  public void testLocalClassWithSeeminglyHiddenThisInStaticInitializer_BUG() {, +    new LocalClassWithSeeminglyHiddenThisInStaticInitializer();, +  }, +, +  /**, +   * This class demonstrates a bug in getParameters() when the local class is inside static, +   * initializer., +   */, +  private static class LocalClassWithSeeminglyHiddenThisInStaticInitializer {, +    static {, +      class Local {, +        @SuppressWarnings("unused") // through reflection, +        Local(LocalClassWithSeeminglyHiddenThisInStaticInitializer outer) {}, +      }, +      Constructor<?> constructor = Local.class.getDeclaredConstructors() [0];, +      int miscalculated = 0;, +      assertEquals(miscalculated, Invokable.from(constructor).getParameters().size());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +import java.lang.reflect.ParameterizedType;, +  private static class WithConstructorAndTypeParameter<T> {]