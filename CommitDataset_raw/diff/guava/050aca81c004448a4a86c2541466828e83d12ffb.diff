[+++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MultisetsTest.java, +import java.util.List;, +  public void testRemoveOccurrencesIterableEmpty() {, +    Multiset<String> multiset = HashMultiset.create();, +    Iterable<String> toRemove = Arrays.asList("a", "b", "a");, +    assertFalse(Multisets.removeOccurrences(multiset, toRemove));, +    assertTrue(multiset.isEmpty());, +  }, +, +  public void testRemoveOccurrencesMultisetEmpty() {, +  public void testRemoveEmptyOccurrencesMultiset() {, +  public void testRemoveOccurrencesMultiset() {, +  public void testRemoveEmptyOccurrencesIterable() {, +    Multiset<String> multiset =, +        TreeMultiset.create(Arrays.asList("a", "b", "a"));, +    Iterable<String> toRemove = ImmutableList.of();, +    assertFalse(Multisets.removeOccurrences(multiset, toRemove));, +    ASSERT.that(multiset).has().exactly("a", "a", "b").inOrder();, +  }, +, +  public void testRemoveOccurrencesMultisetIterable() {, +    Multiset<String> multiset =, +        TreeMultiset.create(Arrays.asList("a", "b", "a", "c"));, +    List<String> toRemove = Arrays.asList("a", "b", "b");, +    assertTrue(Multisets.removeOccurrences(multiset, toRemove));, +    ASSERT.that(multiset).has().exactly("a", "c").inOrder();, +  }, +, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MultisetsTest.java, +import java.util.List;, +  public void testRemoveOccurrencesIterableEmpty() {, +    Multiset<String> multiset = HashMultiset.create();, +    Iterable<String> toRemove = Arrays.asList("a", "b", "a");, +    assertFalse(Multisets.removeOccurrences(multiset, toRemove));, +    assertTrue(multiset.isEmpty());, +  }, +, +  public void testRemoveOccurrencesMultisetEmpty() {, +  public void testRemoveEmptyOccurrencesMultiset() {, +  public void testRemoveOccurrencesMultiset() {, +  public void testRemoveEmptyOccurrencesIterable() {, +    Multiset<String> multiset =, +        TreeMultiset.create(Arrays.asList("a", "b", "a"));, +    Iterable<String> toRemove = ImmutableList.of();, +    assertFalse(Multisets.removeOccurrences(multiset, toRemove));, +    ASSERT.that(multiset).has().exactly("a", "a", "b").inOrder();, +  }, +, +  public void testRemoveOccurrencesMultisetIterable() {, +    Multiset<String> multiset =, +        TreeMultiset.create(Arrays.asList("a", "b", "a", "c"));, +    List<String> toRemove = Arrays.asList("a", "b", "b");, +    assertTrue(Multisets.removeOccurrences(multiset, toRemove));, +    ASSERT.that(multiset).has().exactly("a", "c").inOrder();, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/MultisetsTest_gwt.java, +public void testRemoveEmptyOccurrencesIterable() throws Exception {, +  testCase.testRemoveEmptyOccurrencesIterable();, +public void testRemoveEmptyOccurrencesMultiset() throws Exception {, +  testCase.testRemoveEmptyOccurrencesMultiset();, +public void testRemoveOccurrencesIterableEmpty() throws Exception {, +  testCase.testRemoveOccurrencesIterableEmpty();, +}, +, +public void testRemoveOccurrencesMultiset() throws Exception {, +  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();, +  testCase.testRemoveOccurrencesMultiset();, +}, +, +public void testRemoveOccurrencesMultisetEmpty() throws Exception {, +  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();, +  testCase.testRemoveOccurrencesMultisetEmpty();, +}, +, +public void testRemoveOccurrencesMultisetIterable() throws Exception {, +  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();, +  testCase.testRemoveOccurrencesMultisetIterable();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MultisetsTest.java, +import java.util.List;, +  public void testRemoveOccurrencesIterableEmpty() {, +    Multiset<String> multiset = HashMultiset.create();, +    Iterable<String> toRemove = Arrays.asList("a", "b", "a");, +    assertFalse(Multisets.removeOccurrences(multiset, toRemove));, +    assertTrue(multiset.isEmpty());, +  }, +, +  public void testRemoveOccurrencesMultisetEmpty() {, +  public void testRemoveEmptyOccurrencesMultiset() {, +  public void testRemoveOccurrencesMultiset() {, +  public void testRemoveEmptyOccurrencesIterable() {, +    Multiset<String> multiset =, +        TreeMultiset.create(Arrays.asList("a", "b", "a"));, +    Iterable<String> toRemove = ImmutableList.of();, +    assertFalse(Multisets.removeOccurrences(multiset, toRemove));, +    ASSERT.that(multiset).has().exactly("a", "a", "b").inOrder();, +  }, +, +  public void testRemoveOccurrencesMultisetIterable() {, +    Multiset<String> multiset =]