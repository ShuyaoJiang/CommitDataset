[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.util.concurrent.Futures.getDone;, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final., +     */, +  /*, +   * TODO(cpovirk): Consider making cancel() final (under GWT only, since we can't change the, +   * server) by migrating our overrides to use afterDone()., +   */, +  public final boolean isCancelled() {, +  public final boolean isDone() {, +  /*, +   * We let people override {@code get()} in the server version (though perhaps we shouldn't). Here,, +   * we don't want that, and anyway, users can't, thanks to the package-private parameter., +   */, +  public final V get() throws InterruptedException, ExecutionException {, +  public final V get(long timeout, TimeUnit unit), +  public final void addListener(Runnable runnable, Executor executor) {, +      if (delegate instanceof AbstractFuture) {, +      /*, +       * Almost everything in GWT is an AbstractFuture (which is as good as TrustedFuture under, +       * GWT). But ImmediateFuture and UncheckedThrowingFuture aren't, so we still need this case., +       */, +        forceSet(getDone(delegate));, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.util.concurrent.Futures.getDone;, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final., +     */, +  /*, +   * TODO(cpovirk): Consider making cancel() final (under GWT only, since we can't change the, +   * server) by migrating our overrides to use afterDone()., +   */, +  public final boolean isCancelled() {, +  public final boolean isDone() {, +  /*, +   * We let people override {@code get()} in the server version (though perhaps we shouldn't). Here,, +   * we don't want that, and anyway, users can't, thanks to the package-private parameter., +   */, +  public final V get() throws InterruptedException, ExecutionException {, +  public final V get(long timeout, TimeUnit unit), +  public final void addListener(Runnable runnable, Executor executor) {, +      if (delegate instanceof AbstractFuture) {, +      /*, +       * Almost everything in GWT is an AbstractFuture (which is as good as TrustedFuture under, +       * GWT). But ImmediateFuture and UncheckedThrowingFuture aren't, so we still need this case., +       */, +        forceSet(getDone(delegate));, +++ b/guava-gwt/test/com/google/common/util/concurrent/TrustedInputFutureTest_gwt.java, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.util.concurrent.Futures.getDone;, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final., +     */, +  /*, +   * TODO(cpovirk): Consider making cancel() final (under GWT only, since we can't change the, +   * server) by migrating our overrides to use afterDone()., +   */, +  public final boolean isCancelled() {, +  public final boolean isDone() {, +  /*, +   * We let people override {@code get()} in the server version (though perhaps we shouldn't). Here,, +   * we don't want that, and anyway, users can't, thanks to the package-private parameter., +   */, +  public final V get() throws InterruptedException, ExecutionException {, +  public final V get(long timeout, TimeUnit unit), +  public final void addListener(Runnable runnable, Executor executor) {, +      if (delegate instanceof AbstractFuture) {, +      /*, +       * Almost everything in GWT is an AbstractFuture (which is as good as TrustedFuture under, +       * GWT). But ImmediateFuture and UncheckedThrowingFuture aren't, so we still need this case., +       */, +        forceSet(getDone(delegate));, +++ b/guava-gwt/test/com/google/common/util/concurrent/TrustedInputFutureTest_gwt.java, +++ b/guava-gwt/test/com/google/common/util/concurrent/UntrustedInputFutureTest_gwt.java, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.util.concurrent.Futures.getDone;, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final., +     */, +  /*, +   * TODO(cpovirk): Consider making cancel() final (under GWT only, since we can't change the, +   * server) by migrating our overrides to use afterDone()., +   */, +  public final boolean isCancelled() {, +  public final boolean isDone() {, +  /*, +   * We let people override {@code get()} in the server version (though perhaps we shouldn't). Here,, +   * we don't want that, and anyway, users can't, thanks to the package-private parameter., +   */, +  public final V get() throws InterruptedException, ExecutionException {, +  public final V get(long timeout, TimeUnit unit), +  public final void addListener(Runnable runnable, Executor executor) {, +      if (delegate instanceof AbstractFuture) {, +      /*, +       * Almost everything in GWT is an AbstractFuture (which is as good as TrustedFuture under]