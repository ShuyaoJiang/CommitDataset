[+++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +import java.util.HashSet;, +   * Sets sample instances for {@code type}, so that when a class {@code Foo} is tested for {@link, +   * Object#equals} and {@link Object#hashCode}, and its construction requires a parameter of {@code, +   * type}, the sample instances can be passed to create {@code Foo} instances that are unequal., +   * <p>Used for types where {@link ClassSanityTester} doesn't already know how to instantiate, +   * distinct values. It's usually necessary to add two unequal instances for each type, with the, +   * exception that if the sample instance is to be passed to a {@link Nullable} parameter, one, +   * non-null sample is sufficient. Setting an empty list will clear sample instances for {@code, +   * type}., +, +   *, +, +   * @deprecated Use {@link #setDistinctValues} instead., +  @Deprecated, +    Set<Object> uniqueValues = new HashSet<Object>();, +    for (T instance : instances) {, +      checkArgument(uniqueValues.add(instance), "Duplicate value: %s", instance);, +    }, +   * type}, the distinct values of {@code type} can be passed as parameters to create {@code Foo}, +   * <p>Calling {@code setDistinctValues(type, v1, v2)} also sets the default value for {@code type}, +   * that's used for {@link #testNulls}., +   *, +   * <p>Only necessary for types where {@link ClassSanityTester} doesn't already know how to create, +      throws ParameterNotInstantiableException, ParameterHasNoDistinctValueException,, +             IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {, +    List<ParameterHasNoDistinctValueException> distinctValueErrors = Lists.newArrayList();, +    // Try factories with the greatest number of parameters., +        } catch (ParameterHasNoDistinctValueException e) {, +          distinctValueErrors.add(e);, +    throwFirst(distinctValueErrors);, +, +      throws ParameterNotInstantiableException, ParameterHasNoDistinctValueException,, +             IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {, +, +      if (newArg == null || Objects.equal(args.get(i), newArg)) {, +        if (params.get(i).getType().getRawType().isEnum()) {, +          continue; // Nothing better we can do if it's single-value enum, +        throw new ParameterHasNoDistinctValueException(params.get(i));, +   * Thrown if the test fails to generate two distinct non-null values of a constructor or factory, +   * parameter in order to test {@link Object#equals} and {@link Object#hashCode} of the declaring, +   * class., +   */, +  @VisibleForTesting static class ParameterHasNoDistinctValueException extends Exception {, +    ParameterHasNoDistinctValueException(Parameter parameter) {, +        super("Cannot generate distinct value for parameter " + parameter, +            + " of " + parameter.getDeclaringInvokable());, +    }, +  }, +, +  /**, +, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +import java.util.HashSet;, +   * Sets sample instances for {@code type}, so that when a class {@code Foo} is tested for {@link, +   * Object#equals} and {@link Object#hashCode}, and its construction requires a parameter of {@code, +   * type}, the sample instances can be passed to create {@code Foo} instances that are unequal., +   * <p>Used for types where {@link ClassSanityTester} doesn't already know how to instantiate, +   * distinct values. It's usually necessary to add two unequal instances for each type, with the, +   * exception that if the sample instance is to be passed to a {@link Nullable} parameter, one, +   * non-null sample is sufficient. Setting an empty list will clear sample instances for {@code, +   * type}., +, +   *, +, +   * @deprecated Use {@link #setDistinctValues} instead., +  @Deprecated, +    Set<Object> uniqueValues = new HashSet<Object>();, +    for (T instance : instances) {, +      checkArgument(uniqueValues.add(instance), "Duplicate value: %s", instance);, +    }, +   * type}, the distinct values of {@code type} can be passed as parameters to create {@code Foo}, +   * <p>Calling {@code setDistinctValues(type, v1, v2)} also sets the default value for {@code type}, +   * that's used for {@link #testNulls}., +   *, +   * <p>Only necessary for types where {@link ClassSanityTester} doesn't already know how to create, +      throws ParameterNotInstantiableException, ParameterHasNoDistinctValueException,, +             IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {, +    List<ParameterHasNoDistinctValueException> distinctValueErrors = Lists.newArrayList();, +    // Try factories with the greatest number of parameters., +        } catch (ParameterHasNoDistinctValueException e) {, +          distinctValueErrors.add(e);, +    throwFirst(distinctValueErrors);, +, +      throws ParameterNotInstantiableException, ParameterHasNoDistinctValueException,, +             IllegalAccessException, InvocationTargetException, FactoryMethodReturnsNullException {, +, +      if (newArg == null || Objects.equal(args.get(i), newArg)) {, +        if (params.get(i).getType().getRawType().isEnum()) {, +          continue; // Nothing better we can do if it's single-value enum, +        throw new ParameterHasNoDistinctValueException(params.get(i));, +   * Thrown if the test fails to generate two distinct non-null values of a constructor or factory, +   * parameter in order to test {@link Object#equals} and {@link Object#hashCode} of the declaring, +   * class., +   */, +  @VisibleForTesting static class ParameterHasNoDistinctValueException extends Exception {, +    ParameterHasNoDistinctValueException(Parameter parameter) {, +        super("Cannot generate distinct value for parameter " + parameter, +            + " of " + parameter.getDeclaringInvokable());, +    }]