[+++ b/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java, +import static com.google.common.util.concurrent.Futures.addCallback;, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(future, callback, directExecutor());, +    addCallback(future, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +++ b/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java, +import static com.google.common.util.concurrent.Futures.addCallback;, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +    addCallback(future, callback, directExecutor());, +    addCallback(future, callback, directExecutor());, +    addCallback(f, callback, directExecutor());, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +    ListenableFuture<?> transformedFuture = transform(nullFuture, constant(null), directExecutor());, +    Bar bar = getDone(transform(future, function, directExecutor()));, +      ListenableFuture<Object> unused = transform(root, identity(), directExecutor());, +      output = transform(output, identity(), directExecutor());, +    ListenableFuture<Object> output = transform(input, transformer, directExecutor());, +    ListenableFuture<Object> output = transform(input, transformer, directExecutor());, +    ListenableFuture<Object> output = transform(input, identity(), directExecutor());, +    ListenableFuture<Object> output = transform(input, identity(), directExecutor());, +    ListenableFuture<Object> output = transform(input, identity(), directExecutor());, +    assertTrue(transformAsync(input, function, directExecutor()).cancel(false));, +    assertTrue(transformAsync(input, function, directExecutor()).cancel(true));, +    assertTrue(transformAsync(immediate, function, directExecutor()).cancel(false));, +    assertTrue(transformAsync(immediate, function, directExecutor()).cancel(true));, +    ListenableFuture<Bar> f2 = transformAsync(f1, function, directExecutor());, +      ListenableFuture<Object> unused = transformAsync(root, asyncIdentity(), directExecutor());, +      output = transformAsync(output, asyncIdentity(), directExecutor());, +    ListenableFuture<Object> output = transformAsync(input, transformer, directExecutor());, +    ListenableFuture<Object> output = transformAsync(input, transformer, directExecutor());, +    ListenableFuture<Object> output = transformAsync(input, asyncIdentity(), directExecutor());, +    ListenableFuture<Object> output = transformAsync(input, asyncIdentity(), directExecutor());, +    ListenableFuture<Object> output = transformAsync(input, asyncIdentity(), directExecutor());, +    Future<Integer> transformedFuture = transform(immediateFuture, adder, directExecutor());, +    assertEquals(8, getDone(transform(immediateFuture, adder, directExecutor())).intValue());, +    assertEquals(, +        8,, +        getDoneFromTimeoutOverload(transform(immediateFuture, adder, directExecutor())).intValue());, +        transform(exceptionInput, newOneTimeExceptionThrower(), directExecutor());, +        transform(errorInput, newOneTimeErrorThrower(), directExecutor());, +        transform(exceptionInput, newOneTimeExceptionThrower(), directExecutor());, +    runGetIdempotencyTest(, +        transform(errorInput, newOneTimeErrorThrower(), directExecutor()), MyError.class);, +        catchingAsync(originalFuture, Throwable.class, fallback, directExecutor());, +        catchingAsync(failingFuture, Throwable.class, fallback, directExecutor());, +      getDone(catchingAsync(failingFuture, Throwable.class, fallback, directExecutor()));, +        catchingAsync(failingFuture, Throwable.class, fallback, directExecutor());, +    ListenableFuture<Integer> derived =, +        catchingAsync(primary, Throwable.class, fallback, directExecutor());, +    ListenableFuture<Integer> derived =, +        catchingAsync(primary, Throwable.class, fallback, directExecutor());, +    ListenableFuture<Integer> derived =, +        catchingAsync(primary, Throwable.class, fallback, directExecutor());, +        catchingAsync(failingFuture, Throwable.class, fallback, directExecutor());, +    ListenableFuture<?> chainedFuture =, +        catchingAsync(, +            inputFuture,, +            Throwable.class,, +            },, +            directExecutor());, +        catching(originalFuture, Throwable.class, fallback, directExecutor());, +        catching(failingFuture, Throwable.class, fallback, directExecutor());, +      getDone(catching(failingFuture, Throwable.class, fallback, directExecutor()));, +        catching(failingFuture, Throwable.class, fallback, directExecutor());, +    ListenableFuture<Integer> derived =, +        catching(primary, Throwable.class, fallback, directExecutor());, +    ListenableFuture<Integer> derived =, +        catching(primary, Throwable.class, fallback, directExecutor());, +        catching(originalFuture, Throwable.class, fallback, directExecutor());, +        catching(originalFuture, IOException.class, fallback, directExecutor());, +        catching(originalFuture, IOException.class, fallback, directExecutor());, +      ListenableFuture<Object> unused =, +          catching(root, MyException.class, identity(), directExecutor());, +      output = catching(output, MyException.class, identity(), directExecutor());, +    ListenableFuture<Object> output = catching(input, Throwable.class, fallback, directExecutor());, +    ListenableFuture<Object> output = catching(input, Throwable.class, fallback, directExecutor());, +    ListenableFuture<Object> output =, +        catching(input, Throwable.class, identity(), directExecutor());, +    ListenableFuture<Object> output =, +        catching(input, Throwable.class, identity(), directExecutor());, +    ListenableFuture<Object> output =, +        catching(input, Throwable.class, identity(), directExecutor());, +        catchingAsync(originalFuture, Throwable.class, fallback, directExecutor());, +        catchingAsync(originalFuture, IOException.class, fallback, directExecutor());, +        catchingAsync(originalFuture, IOException.class, fallback, directExecutor());, +          catchingAsync(root, MyException.class, asyncIdentity(), directExecutor());, +      output = catchingAsync(output, MyException.class, asyncIdentity(), directExecutor());, +    ListenableFuture<Object> output =, +        catchingAsync(input, Throwable.class, fallback, directExecutor());]