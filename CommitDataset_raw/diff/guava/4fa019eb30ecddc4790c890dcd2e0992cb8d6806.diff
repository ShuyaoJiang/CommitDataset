[+++ b/guava-tests/test/com/google/common/eventbus/EventBusTest.java, +import com.google.common.collect.ImmutableList;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +  // NOTE: This test will always pass if register() is thread-safe but may also, +  // pass if it isn't, though this is unlikely., +, +  public void testRegisterThreadSafety() throws Exception {, +    List<StringCatcher> catchers = Lists.newCopyOnWriteArrayList();, +    List<Future<?>> futures = Lists.newArrayList();, +    ExecutorService executor = Executors.newFixedThreadPool(10);, +    int numberOfCatchers = 10000;, +    for (int i = 0; i < numberOfCatchers; i++) {, +      futures.add(executor.submit(new Registrator(bus, catchers)));, +    }, +    for (int i = 0; i < numberOfCatchers; i++) {, +      futures.get(i).get();, +    }, +    assertEquals("Unexpected number of catchers in the list",, +        numberOfCatchers, catchers.size());, +    bus.post(EVENT);, +    List<String> expectedEvents = ImmutableList.of(EVENT);, +    for (StringCatcher catcher : catchers) {, +      assertEquals("One of the registered catchers did not receive an event.",, +          expectedEvents, catcher.getEvents());, +    }, +  }, +, +   * Runnable which registers a StringCatcher on an event bus and adds it to a, +   * list., +   */, +  private static class Registrator implements Runnable {, +    private final EventBus bus;, +    private final List<StringCatcher> catchers;, +, +    Registrator(EventBus bus, List<StringCatcher> catchers) {, +      this.bus = bus;, +      this.catchers = catchers;, +    }, +, +    @Override, +    public void run() {, +      StringCatcher catcher = new StringCatcher();, +      bus.register(catcher);, +      catchers.add(catcher);, +    }, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/eventbus/EventBusTest.java, +import com.google.common.collect.ImmutableList;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +  // NOTE: This test will always pass if register() is thread-safe but may also, +  // pass if it isn't, though this is unlikely., +, +  public void testRegisterThreadSafety() throws Exception {, +    List<StringCatcher> catchers = Lists.newCopyOnWriteArrayList();, +    List<Future<?>> futures = Lists.newArrayList();, +    ExecutorService executor = Executors.newFixedThreadPool(10);, +    int numberOfCatchers = 10000;, +    for (int i = 0; i < numberOfCatchers; i++) {, +      futures.add(executor.submit(new Registrator(bus, catchers)));, +    }, +    for (int i = 0; i < numberOfCatchers; i++) {, +      futures.get(i).get();, +    }, +    assertEquals("Unexpected number of catchers in the list",, +        numberOfCatchers, catchers.size());, +    bus.post(EVENT);, +    List<String> expectedEvents = ImmutableList.of(EVENT);, +    for (StringCatcher catcher : catchers) {, +      assertEquals("One of the registered catchers did not receive an event.",, +          expectedEvents, catcher.getEvents());, +    }, +  }, +, +   * Runnable which registers a StringCatcher on an event bus and adds it to a, +   * list., +   */, +  private static class Registrator implements Runnable {, +    private final EventBus bus;, +    private final List<StringCatcher> catchers;, +, +    Registrator(EventBus bus, List<StringCatcher> catchers) {, +      this.bus = bus;, +      this.catchers = catchers;, +    }, +, +    @Override, +    public void run() {, +      StringCatcher catcher = new StringCatcher();, +      bus.register(catcher);, +      catchers.add(catcher);, +    }, +  }, +, +  /**]