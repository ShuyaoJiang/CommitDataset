[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java, +import static com.google.common.collect.Maps.newTreeMap;, +import static java.util.Collections.unmodifiableSortedMap;, +  private Comparator<? super K> unusedComparatorForSerialization;, +  private final transient SortedMap<K, V> sortedDelegate;, +  private final transient Comparator<? super K> comparator;, +  ImmutableSortedMap(SortedMap<K, V> delegate, Comparator<? super K> comparator) {, +    this.comparator = comparator;, +    this.sortedDelegate = delegate;, +    SortedMap<K, V> delegate = newModifiableDelegate(comparator);, +    return new ImmutableSortedMap<K, V>(unmodifiableSortedMap(delegate), comparator);, +    SortedMap<K, V> delegate = newModifiableDelegate(comparator);, +    return new ImmutableSortedMap<K, V>(unmodifiableSortedMap(delegate), comparator);, +      SortedMap<K, V> delegate = newModifiableDelegate(comparator);, +      return new ImmutableSortedMap<K, V>(unmodifiableSortedMap(delegate), comparator);, +    return newView(sortedDelegate.headMap(toKey));, +    return newView(sortedDelegate.subMap(fromKey, toKey));, +    return newView(sortedDelegate.tailMap(fromKey));, +, +  private ImmutableSortedMap<K, V> newView(SortedMap<K, V> delegate) {, +    return new ImmutableSortedMap<K, V>(delegate, comparator);, +  }, +, +  /*, +   * We don't permit nulls, but we wrap every comparator with nullsFirst()., +   * Why? We want for queries like containsKey(null) to return false, but the, +   * GWT SortedMap implementation that we delegate to throws, +   * NullPointerException if the comparator does. Since our construction, +   * methods ensure that null is never present in the map, it's OK for the, +   * comparator to look for it wherever it wants., +   *, +   * Note that we do NOT touch the comparator returned by comparator(), which, +   * should be identical to the one the user passed in. We touch only the, +   * "secret" comparator used by the delegate implementation., +   */, +, +  private static <K, V> SortedMap<K, V> newModifiableDelegate(Comparator<? super K> comparator) {, +    return newTreeMap(nullAccepting(comparator));, +  }, +, +  private static <E> Comparator<E> nullAccepting(Comparator<E> comparator) {, +    return Ordering.from(comparator).nullsFirst();, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java, +import static com.google.common.collect.Maps.newTreeMap;, +import static java.util.Collections.unmodifiableSortedMap;, +  private Comparator<? super K> unusedComparatorForSerialization;, +  private final transient SortedMap<K, V> sortedDelegate;, +  private final transient Comparator<? super K> comparator;, +  ImmutableSortedMap(SortedMap<K, V> delegate, Comparator<? super K> comparator) {, +    this.comparator = comparator;, +    this.sortedDelegate = delegate;, +    SortedMap<K, V> delegate = newModifiableDelegate(comparator);, +    return new ImmutableSortedMap<K, V>(unmodifiableSortedMap(delegate), comparator);, +    SortedMap<K, V> delegate = newModifiableDelegate(comparator);, +    return new ImmutableSortedMap<K, V>(unmodifiableSortedMap(delegate), comparator);, +      SortedMap<K, V> delegate = newModifiableDelegate(comparator);, +      return new ImmutableSortedMap<K, V>(unmodifiableSortedMap(delegate), comparator);, +    return newView(sortedDelegate.headMap(toKey));, +    return newView(sortedDelegate.subMap(fromKey, toKey));, +    return newView(sortedDelegate.tailMap(fromKey));, +, +  private ImmutableSortedMap<K, V> newView(SortedMap<K, V> delegate) {, +    return new ImmutableSortedMap<K, V>(delegate, comparator);, +  }, +, +  /*, +   * We don't permit nulls, but we wrap every comparator with nullsFirst()., +   * Why? We want for queries like containsKey(null) to return false, but the, +   * GWT SortedMap implementation that we delegate to throws, +   * NullPointerException if the comparator does. Since our construction, +   * methods ensure that null is never present in the map, it's OK for the, +   * comparator to look for it wherever it wants., +   *, +   * Note that we do NOT touch the comparator returned by comparator(), which, +   * should be identical to the one the user passed in. We touch only the, +   * "secret" comparator used by the delegate implementation., +   */, +, +  private static <K, V> SortedMap<K, V> newModifiableDelegate(Comparator<? super K> comparator) {, +    return newTreeMap(nullAccepting(comparator));, +  }, +, +  private static <E> Comparator<E> nullAccepting(Comparator<E> comparator) {, +    return Ordering.from(comparator).nullsFirst();, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/DerivedGenerator.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]