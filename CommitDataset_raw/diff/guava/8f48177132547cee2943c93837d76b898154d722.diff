[+++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +    for (String part : Splitter.on(',').split(desc)) {, +            ImmutableList.copyOf(Splitter.on(';').split(part.substring(5, part.length() - 1)));, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +    for (String part : Splitter.on(',').split(desc)) {, +            ImmutableList.copyOf(Splitter.on(';').split(part.substring(5, part.length() - 1)));, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +    Iterable<String> letters = Splitter.on(',').split(simple);, +    Iterable<String> letters = Splitter.on('.').split(simple);, +    Iterable<String> letters = Splitter.on(',').split(doubled);, +    Iterable<String> letters = Splitter.on(',').split(doubled);, +    Iterable<String> letters = Splitter.on(',').split(trailing);, +    Iterable<String> letters = Splitter.on(',').split(leading);, +    Iterable<String> testStringingMotto = Splitter.on('-').split(, +    Iterable<String> letters = Splitter.on('.'), +    Iterable<String> letters = Splitter.on('.').trimResults(), +    Iterable<String> letters = Splitter.on('.'), +    Iterable<String> notMuch = Splitter.on('.').split("");, +    ASSERT.that(Splitter.on('.').omitEmptyStrings().split("")).isEmpty();, +    Iterable<String> blankblank = Splitter.on('.').split(".");, +    Iterable<String> empty = Splitter.on('.').omitEmptyStrings().split("...");, +    Iterable<String> family = Splitter.on(','), +    assertIteratorIsUnmodifiable(Splitter.on(',').split("a,b").iterator());, +    assertSplitterIterableIsLazy(Splitter.on(','));, +    tester.testAllPublicInstanceMethods(Splitter.on(','));, +    tester.testAllPublicInstanceMethods(Splitter.on(',').trimResults());, +    Map<String, String> m = Splitter.on(','), +    m = Splitter.on(','), +      Splitter.on(',').withKeyValueSeparator(":").split("a:1,b:2,a:3");]