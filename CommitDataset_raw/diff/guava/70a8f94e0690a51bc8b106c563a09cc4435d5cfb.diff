[+++ b/guava/src/com/google/common/io/ByteSource.java, +import static com.google.common.io.ByteStreams.BUF_SIZE;, +import static com.google.common.io.ByteStreams.skipUpTo;, +    long skipped;, +    while ((skipped = skipUpTo(in, Integer.MAX_VALUE)) > 0) {, +    return count;, +    while ((read = in.read(ByteStreams.skipBuffer)) != -1) {, +++ b/guava/src/com/google/common/io/ByteSource.java, +import static com.google.common.io.ByteStreams.BUF_SIZE;, +import static com.google.common.io.ByteStreams.skipUpTo;, +    long skipped;, +    while ((skipped = skipUpTo(in, Integer.MAX_VALUE)) > 0) {, +    return count;, +    while ((read = in.read(ByteStreams.skipBuffer)) != -1) {, +++ b/guava/src/com/google/common/io/ByteStreams.java, +, +  /**, +   * Default size of buffers allocated for copies., +   */, +  static final int BUF_SIZE = 8192;, +, +  /**, +   * A buffer for skipping bytes in an input stream. Only written to and never read, so actual, +   * contents don't matter., +   */, +  static final byte[] skipBuffer = new byte[BUF_SIZE];, +, +      long remaining = n - totalSkipped;, +, +      long skipped = skipSafely(in, remaining);, +        // Do a buffered read since skipSafely could return 0 repeatedly, for example if, +        // in.available() always returns 0 (the default)., +        int skip = (int) Math.min(remaining, skipBuffer.length);, +        if ((skipped = in.read(skipBuffer, 0, skip)) == -1) {, +   * Attempts to skip up to {@code n} bytes from the given input stream, but not more than, +   * {@code in.available()} bytes. This prevents {@code FileInputStream} from skipping more bytes, +   * than actually remain in the file, something that it, +   * {@linkplain FileInputStream#skip(long) specifies} it can do in its Javadoc despite the fact, +   * that it is violating the contract of {@code InputStream.skip()}., +   */, +  private static long skipSafely(InputStream in, long n) throws IOException {, +    int available = in.available();, +    return available == 0 ? 0 : in.skip(Math.min(available, n));, +  }, +, +  /**]