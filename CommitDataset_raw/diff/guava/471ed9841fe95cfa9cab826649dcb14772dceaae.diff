[+++ b/guava-tests/test/com/google/common/hash/HashFunctionsTest.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.hash.HashTestUtils.RandomHasherAction;, +import java.util.Random;, +  public void testSha1() {, +    assertInvariants(Hashing.sha1());, +  }, +, +  public void testSha256() {, +    assertInvariants(Hashing.sha256());, +  }, +, +  public void testSha512() {, +    assertInvariants(Hashing.sha512());, +  }, +, +    assertIndependentHashers(hashFunction);, +, +  private static void assertIndependentHashers(HashFunction hashFunction) {, +    int numActions = 100;, +    // hashcodes from non-overlapping hash computations, +    HashCode expected1 = randomHash(hashFunction, new Random(1L), numActions);, +    HashCode expected2 = randomHash(hashFunction, new Random(2L), numActions);, +, +    // equivalent, but overlapping, computations (should produce the same results as above), +    Random random1 = new Random(1L);, +    Random random2 = new Random(2L);, +    Hasher hasher1 = hashFunction.newHasher();, +    Hasher hasher2 = hashFunction.newHasher();, +    for (int i = 0; i < numActions; i++) {, +      RandomHasherAction.pickAtRandom(random1).performAction(random1, ImmutableSet.of(hasher1));, +      RandomHasherAction.pickAtRandom(random2).performAction(random2, ImmutableSet.of(hasher2));, +    }, +, +    assertEquals(expected1, hasher1.hash());, +    assertEquals(expected2, hasher2.hash());, +  }, +, +  private static HashCode randomHash(HashFunction hashFunction, Random random, int numActions) {, +    Hasher hasher = hashFunction.newHasher();, +    for (int i = 0; i < numActions; i++) {, +      RandomHasherAction.pickAtRandom(random).performAction(random, ImmutableSet.of(hasher));, +    }, +    return hasher.hash();, +  }]