[+++ b/guava-gwt/test/com/google/common/collect/TablesTest_gwt.java, +, +public void testToTable() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTable();, +}, +, +public void testToTableConflict() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableConflict();, +}, +, +public void testToTableMerging() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableMerging();, +}, +, +public void testToTableNullMerge() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableNullMerge();, +}, +, +public void testToTableNullValues() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableNullValues();, +}, +++ b/guava-gwt/test/com/google/common/collect/TablesTest_gwt.java, +, +public void testToTable() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTable();, +}, +, +public void testToTableConflict() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableConflict();, +}, +, +public void testToTableMerging() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableMerging();, +}, +, +public void testToTableNullMerge() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableNullMerge();, +}, +, +public void testToTableNullValues() throws Exception {, +  com.google.common.collect.TablesTest testCase = new com.google.common.collect.TablesTest();, +  testCase.testToTableNullValues();, +}, +++ b/guava-tests/test/com/google/common/collect/TablesTest.java, +import com.google.common.base.Equivalence;, +import com.google.common.testing.CollectorTester;, +import java.util.stream.Collector;, +import java.util.stream.Stream;, +  public void testToTable() {, +    Collector<Cell<String, String, Integer>, ?, Table<String, String, Integer>> collector =, +        Tables.toTable(Cell::getRowKey, Cell::getColumnKey, Cell::getValue, HashBasedTable::create);, +    Equivalence<Table<String, String, Integer>> equivalence =, +        Equivalence.equals().<Cell<String, String, Integer>>pairwise().onResultOf(Table::cellSet);, +    CollectorTester.of(collector, equivalence), +        .expectCollects(, +            new ImmutableTable.Builder<String, String, Integer>(), +                .put("one", "uno", 1), +                .put("two", "dos", 2), +                .put("three", "tres", 3), +                .build(),, +            Tables.immutableCell("one", "uno", 1),, +            Tables.immutableCell("two", "dos", 2),, +            Tables.immutableCell("three", "tres", 3));, +  }, +, +  public void testToTableNullMerge() {, +    Collector<Cell<String, String, Integer>, ?, Table<String, String, Integer>> collector =, +        Tables.toTable(, +            Cell::getRowKey,, +            Cell::getColumnKey,, +            Cell::getValue,, +            (Integer v1, Integer v2) -> null,, +            HashBasedTable::create);, +    Equivalence<Table<String, String, Integer>> equivalence =, +        Equivalence.equals().<Cell<String, String, Integer>>pairwise().onResultOf(Table::cellSet);, +    CollectorTester.of(collector, equivalence), +        .expectCollects(, +            ImmutableTable.of(),, +            Tables.immutableCell("one", "uno", 1),, +            Tables.immutableCell("one", "uno", 2));, +  }, +, +  public void testToTableNullValues() {, +    Collector<Cell<String, String, Integer>, ?, Table<String, String, Integer>> collector =, +        Tables.toTable(, +            Cell::getRowKey,, +            Cell::getColumnKey,, +            Cell::getValue,, +            () -> ArrayTable.create(ImmutableList.of("one"), ImmutableList.of("uno")));, +    try {, +      Stream.of(Tables.immutableCell("one", "uno", (Integer) null)).collect(collector);]