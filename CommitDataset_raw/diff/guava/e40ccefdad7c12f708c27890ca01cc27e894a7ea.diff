[+++ b/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java, +      this.matcher = SmallCharMatcher.from(this.matcher.slowGetChars(), "");, +      this.matcher = MediumCharMatcher.from(this.matcher.slowGetChars(), "");, +++ b/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java, +      this.matcher = SmallCharMatcher.from(this.matcher.slowGetChars(), "");, +      this.matcher = MediumCharMatcher.from(this.matcher.slowGetChars(), "");, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +    assertSame(m1.toString(), m1.precomputed().toString());, +    assertSame(m2.toString(), m2.precomputed().toString());, +    assertSame(m3.toString(), m3.precomputed().toString());, +    CharMatcher len1 = SmallCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = SmallCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = SmallCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = SmallCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");, +      CharMatcher m = SmallCharMatcher.from(chars, new String(chars));, +    CharMatcher len1 = MediumCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = MediumCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = MediumCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = MediumCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");, +      CharMatcher m = MediumCharMatcher.from(chars, new String(chars));, +      // Check toString() is preserved., +      assertEquals(m.toString(), m.precomputed().toString());, +++ b/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java, +      this.matcher = SmallCharMatcher.from(this.matcher.slowGetChars(), "");, +      this.matcher = MediumCharMatcher.from(this.matcher.slowGetChars(), "");, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +    assertSame(m1.toString(), m1.precomputed().toString());, +    assertSame(m2.toString(), m2.precomputed().toString());, +    assertSame(m3.toString(), m3.precomputed().toString());, +    CharMatcher len1 = SmallCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = SmallCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = SmallCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = SmallCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");, +      CharMatcher m = SmallCharMatcher.from(chars, new String(chars));, +    CharMatcher len1 = MediumCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = MediumCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = MediumCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = MediumCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");, +      CharMatcher m = MediumCharMatcher.from(chars, new String(chars));, +      // Check toString() is preserved., +      assertEquals(m.toString(), m.precomputed().toString());, +++ b/guava/src/com/google/common/base/CharMatcher.java, +        return new CharMatcher(, +            new StringBuilder("CharMatcher.anyOf(\"").append(sequence).append("\")").toString()) {, +  /**, +   * Sets the {@code toString()} from the given description., +   */, +  CharMatcher(String description) {, +      return SmallCharMatcher.from(chars, toString());, +      return MediumCharMatcher.from(chars, toString());, +++ b/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java, +      this.matcher = SmallCharMatcher.from(this.matcher.slowGetChars(), "");, +      this.matcher = MediumCharMatcher.from(this.matcher.slowGetChars(), "");, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +    assertSame(m1.toString(), m1.precomputed().toString());, +    assertSame(m2.toString(), m2.precomputed().toString());, +    assertSame(m3.toString(), m3.precomputed().toString());, +    CharMatcher len1 = SmallCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = SmallCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = SmallCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = SmallCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");, +      CharMatcher m = SmallCharMatcher.from(chars, new String(chars));, +    CharMatcher len1 = MediumCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = MediumCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = MediumCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = MediumCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");, +      CharMatcher m = MediumCharMatcher.from(chars, new String(chars));, +      // Check toString() is preserved., +      assertEquals(m.toString(), m.precomputed().toString());, +++ b/guava/src/com/google/common/base/CharMatcher.java, +        return new CharMatcher(, +            new StringBuilder("CharMatcher.anyOf(\"").append(sequence).append("\")").toString()) {, +  /**, +   * Sets the {@code toString()} from the given description., +   */, +  CharMatcher(String description) {, +      return SmallCharMatcher.from(chars, toString());, +      return MediumCharMatcher.from(chars, toString());, +++ b/guava/src/com/google/common/base/MediumCharMatcher.java, +  private MediumCharMatcher(char[] table, long filter, boolean containsZero,, +      String description) {, +    super(description);, +  static CharMatcher from(char[] chars, String description) {, +    return new MediumCharMatcher(table, filter, containsZero, description);, +++ b/guava-tests/benchmark/com/google/common/base/CharMatcherBenchmark.java, +      this.matcher = SmallCharMatcher.from(this.matcher.slowGetChars(), "");, +      this.matcher = MediumCharMatcher.from(this.matcher.slowGetChars(), "");, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +    assertSame(m1.toString(), m1.precomputed().toString());, +    assertSame(m2.toString(), m2.precomputed().toString());, +    assertSame(m3.toString(), m3.precomputed().toString());, +    CharMatcher len1 = SmallCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = SmallCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = SmallCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = SmallCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");, +      CharMatcher m = SmallCharMatcher.from(chars, new String(chars));, +    CharMatcher len1 = MediumCharMatcher.from(new char[] {'#'}, "#");, +    CharMatcher len2 = MediumCharMatcher.from(new char[] {'a', 'b'}, "ab");, +    CharMatcher len3 = MediumCharMatcher.from(new char[] {'a', 'b', 'c'}, "abc");, +    CharMatcher len4 = MediumCharMatcher.from(new char[] {'a', 'b', 'c', 'd'}, "abcd");]