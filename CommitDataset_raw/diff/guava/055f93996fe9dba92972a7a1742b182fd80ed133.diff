[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +  abstract static class IteratorBasedImmutableMap<K, V> extends ImmutableMap<K, V> {, +    abstract UnmodifiableIterator<Entry<K, V>> entryIterator();, +, +    @Override, +    ImmutableSet<Entry<K, V>> createEntrySet() {, +      return new ImmutableMapEntrySet<K, V>() {, +        @Override, +        ImmutableMap<K, V> map() {, +          return IteratorBasedImmutableMap.this;, +        }, +, +        @Override, +        public UnmodifiableIterator<Entry<K, V>> iterator() {, +          return entryIterator();, +        }        , +      };, +    }, +  }, +    return (result == null) , +        ? (multimapView = new ImmutableSetMultimap<K, V>(, +            new MapViewOfValuesAsSingletonSets(), size(), null)), +        : result;, +  final class MapViewOfValuesAsSingletonSets , +      extends IteratorBasedImmutableMap<K, ImmutableSet<V>> {, +, +    @Override public int size() {, +      return ImmutableMap.this.size();, +    @Override public ImmutableSet<K> keySet() {, +      return ImmutableMap.this.keySet();, +    }, +, +    @Override public boolean containsKey(@Nullable Object key) {, +      return ImmutableMap.this.containsKey(key);, +    }, +, +    @Override public ImmutableSet<V> get(@Nullable Object key) {, +      V outerValue = ImmutableMap.this.get(key);, +      return (outerValue == null) ? null : ImmutableSet.of(outerValue);, +    }, +, +    @Override boolean isPartialView() {, +      return ImmutableMap.this.isPartialView();, +    }, +, +    @Override public int hashCode() {, +      // ImmutableSet.of(value).hashCode() == value.hashCode(), so the hashes are the same, +      return ImmutableMap.this.hashCode();, +    UnmodifiableIterator<Entry<K, ImmutableSet<V>>> entryIterator() {, +      final Iterator<Entry<K, V>> backingIterator = ImmutableMap.this.entrySet().iterator();, +        @Override public boolean hasNext() {, +          return backingIterator.hasNext();, +        @Override public Entry<K, ImmutableSet<V>> next() {, +          final Entry<K, V> backingEntry = backingIterator.next();, +            @Override public K getKey() {, +              return backingEntry.getKey();, +            @Override public ImmutableSet<V> getValue() {, +              return ImmutableSet.of(backingEntry.getValue());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +  abstract static class IteratorBasedImmutableMap<K, V> extends ImmutableMap<K, V> {, +    abstract UnmodifiableIterator<Entry<K, V>> entryIterator();, +, +    @Override, +    ImmutableSet<Entry<K, V>> createEntrySet() {, +      return new ImmutableMapEntrySet<K, V>() {, +        @Override, +        ImmutableMap<K, V> map() {, +          return IteratorBasedImmutableMap.this;, +        }, +, +        @Override, +        public UnmodifiableIterator<Entry<K, V>> iterator() {, +          return entryIterator();, +        }        , +      };, +    }, +  }, +    return (result == null) , +        ? (multimapView = new ImmutableSetMultimap<K, V>(, +            new MapViewOfValuesAsSingletonSets(), size(), null)), +        : result;, +  final class MapViewOfValuesAsSingletonSets , +      extends IteratorBasedImmutableMap<K, ImmutableSet<V>> {, +, +    @Override public int size() {, +      return ImmutableMap.this.size();, +    @Override public ImmutableSet<K> keySet() {, +      return ImmutableMap.this.keySet();, +    }, +, +    @Override public boolean containsKey(@Nullable Object key) {, +      return ImmutableMap.this.containsKey(key);, +    }, +, +    @Override public ImmutableSet<V> get(@Nullable Object key) {, +      V outerValue = ImmutableMap.this.get(key);, +      return (outerValue == null) ? null : ImmutableSet.of(outerValue);, +    }, +, +    @Override boolean isPartialView() {]