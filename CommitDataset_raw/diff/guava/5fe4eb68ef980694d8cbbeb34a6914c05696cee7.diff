[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +import com.google.common.testing.NullPointerTester;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +import java.io.OutputStream;, +  public void testPreconditions() {, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), -1);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), -1, 0.03);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), 1, 0.0);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), 1, 1.0);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testFailureWhenMoreThan255HashFunctionsAreNeeded() {, +    try {, +      int n = 1000;, +      double p = 0.00000000000000000000000000000000000000000000000000000000000000000000000000000001;, +      BloomFilter.create(Funnels.stringFunnel(), n, p);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testNullPointers() {, +    NullPointerTester tester = new NullPointerTester();, +    tester.setDefault(Funnel.class, Funnels.stringFunnel());, +    tester.setDefault(OutputStream.class, new ByteArrayOutputStream());, +    tester.setDefault(InputStream.class,, +        new ByteArrayInputStream(new ByteArrayOutputStream().toByteArray()));, +, +    tester.testAllPublicInstanceMethods(BloomFilter.create(Funnels.stringFunnel(), 100));, +    tester.testAllPublicStaticMethods(BloomFilter.class);, +  }, +, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +import com.google.common.testing.NullPointerTester;, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.InputStream;, +import java.io.OutputStream;, +  public void testPreconditions() {, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), -1);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), -1, 0.03);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), 1, 0.0);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      BloomFilter.create(Funnels.stringFunnel(), 1, 1.0);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testFailureWhenMoreThan255HashFunctionsAreNeeded() {, +    try {, +      int n = 1000;, +      double p = 0.00000000000000000000000000000000000000000000000000000000000000000000000000000001;, +      BloomFilter.create(Funnels.stringFunnel(), n, p);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testNullPointers() {, +    NullPointerTester tester = new NullPointerTester();, +    tester.setDefault(Funnel.class, Funnels.stringFunnel());, +    tester.setDefault(OutputStream.class, new ByteArrayOutputStream());, +    tester.setDefault(InputStream.class,, +        new ByteArrayInputStream(new ByteArrayOutputStream().toByteArray()));, +, +    tester.testAllPublicInstanceMethods(BloomFilter.create(Funnels.stringFunnel(), 100));, +    tester.testAllPublicStaticMethods(BloomFilter.class);, +  }, +, +++ b/guava/src/com/google/common/hash/BloomFilter.java, +import com.google.common.base.Objects;, +import javax.annotation.Nullable;, +, +    checkArgument(numHashFunctions > 0,, +        "numHashFunctions (%s) must be > 0", numHashFunctions);, +    checkArgument(numHashFunctions <= 255,, +        "numHashFunctions (%s) must be <= 255", numHashFunctions);, +    this.strategy = checkNotNull(strategy);, +  @Override]