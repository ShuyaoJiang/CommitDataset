[+++ b/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java, +    assertEquals(rangeSet.asDescendingSetOfRanges().isEmpty(), rangeSet.isEmpty());, +    assertEquals(!rangeSet.asDescendingSetOfRanges().iterator().hasNext(), rangeSet.isEmpty());, +    // test that the RangeSet's span is the span of all the ranges, +, +    // test that asDescendingSetOfRanges is the reverse of asRanges, +    assertEquals(Lists.reverse(asRanges), ImmutableList.copyOf(rangeSet.asDescendingSetOfRanges()));, +++ b/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java, +    assertEquals(rangeSet.asDescendingSetOfRanges().isEmpty(), rangeSet.isEmpty());, +    assertEquals(!rangeSet.asDescendingSetOfRanges().iterator().hasNext(), rangeSet.isEmpty());, +    // test that the RangeSet's span is the span of all the ranges, +, +    // test that asDescendingSetOfRanges is the reverse of asRanges, +    assertEquals(Lists.reverse(asRanges), ImmutableList.copyOf(rangeSet.asDescendingSetOfRanges()));, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +          ImmutableMap<Range<Integer>, Integer> descendingMap = rangeMap.asDescendingMapOfRanges();, +          assertEquals(expectedAsMap, descendingMap);, +          SerializableTester.reserializeAndAssert(descendingMap);, +          assertEquals(ImmutableList.copyOf(asMap.entrySet()).reverse(),, +              ImmutableList.copyOf(descendingMap.entrySet()));, +++ b/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java, +    assertEquals(rangeSet.asDescendingSetOfRanges().isEmpty(), rangeSet.isEmpty());, +    assertEquals(!rangeSet.asDescendingSetOfRanges().iterator().hasNext(), rangeSet.isEmpty());, +    // test that the RangeSet's span is the span of all the ranges, +, +    // test that asDescendingSetOfRanges is the reverse of asRanges, +    assertEquals(Lists.reverse(asRanges), ImmutableList.copyOf(rangeSet.asDescendingSetOfRanges()));, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +          ImmutableMap<Range<Integer>, Integer> descendingMap = rangeMap.asDescendingMapOfRanges();, +          assertEquals(expectedAsMap, descendingMap);, +          SerializableTester.reserializeAndAssert(descendingMap);, +          assertEquals(ImmutableList.copyOf(asMap.entrySet()).reverse(),, +              ImmutableList.copyOf(descendingMap.entrySet()));, +++ b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java, +, +    suite.addTest(MapTestSuiteBuilder.using(new TestMapGenerator<Range<Integer>, String>() {, +        @Override, +        public SampleElements<Entry<Range<Integer>, String>> samples() {, +          return new SampleElements<Entry<Range<Integer>, String>>(, +              mapEntry(Range.singleton(0), "banana"),, +              mapEntry(Range.closedOpen(3, 5), "frisbee"),, +              mapEntry(Range.atMost(-1), "fruitcake"),, +              mapEntry(Range.open(10, 15), "elephant"),, +              mapEntry(Range.closed(20, 22), "umbrella"));, +        }, +, +        @Override, +        public Map<Range<Integer>, String> create(Object... elements) {, +          RangeMap<Integer, String> rangeMap = TreeRangeMap.create();, +          for (Object o : elements) {, +            @SuppressWarnings("unchecked"), +            Entry<Range<Integer>, String> entry = (Entry<Range<Integer>, String>) o;, +            rangeMap.put(entry.getKey(), entry.getValue());, +          }, +          return rangeMap.asDescendingMapOfRanges();, +        }, +, +        @SuppressWarnings("unchecked"), +        @Override, +        public Entry<Range<Integer>, String>[] createArray(int length) {, +          return new Entry[length];, +        }, +, +        @Override, +        public Iterable<Entry<Range<Integer>, String>> order(, +            List<Entry<Range<Integer>, String>> insertionOrder) {, +          return Range.RANGE_LEX_ORDERING.reverse().<Range<Integer>>onKeys(), +              .sortedCopy(insertionOrder);, +        }, +, +        @SuppressWarnings("unchecked"), +        @Override, +        public Range<Integer>[] createKeyArray(int length) {, +          return new Range[length];, +        }, +, +        @Override, +        public String[] createValueArray(int length) {, +          return new String[length];, +        }, +      }), +      .named("TreeRangeMap.asDescendingMapOfRanges"), +      .withFeatures(, +          CollectionSize.ANY,, +          MapFeature.SUPPORTS_REMOVE,, +          MapFeature.ALLOWS_ANY_NULL_QUERIES,, +          CollectionFeature.KNOWN_ORDER,, +          CollectionFeature.SUPPORTS_ITERATOR_REMOVE), +      .createTestSuite());, +, +    suite.addTest(MapTestSuiteBuilder.using(new TestMapGenerator<Range<Integer>, String>() {, +        @Override, +        public SampleElements<Entry<Range<Integer>, String>> samples() {, +          return new SampleElements<Entry<Range<Integer>, String>>(, +              mapEntry(Range.singleton(0), "banana"),, +              mapEntry(Range.closedOpen(3, 5), "frisbee"),, +              mapEntry(Range.atMost(-1), "fruitcake"),, +              mapEntry(Range.open(10, 15), "elephant"),, +              mapEntry(Range.closed(20, 22), "umbrella"));, +        }]