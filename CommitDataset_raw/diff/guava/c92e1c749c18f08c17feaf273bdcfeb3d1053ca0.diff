[+++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +  static class StreamingVersion extends AbstractHashFunction {, +        protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +  static class StreamingVersion extends AbstractHashFunction {, +        protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    @Override protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +  static class StreamingVersion extends AbstractHashFunction {, +        protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    @Override protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/FunnelsTest.java, +      @Override protected HashCode makeHash() { throw new UnsupportedOperationException(); }, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +  static class StreamingVersion extends AbstractHashFunction {, +        protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    @Override protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/FunnelsTest.java, +      @Override protected HashCode makeHash() { throw new UnsupportedOperationException(); }, +++ b/android/guava/src/com/google/common/hash/AbstractByteHasher.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +  static class StreamingVersion extends AbstractHashFunction {, +        protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    @Override protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/FunnelsTest.java, +      @Override protected HashCode makeHash() { throw new UnsupportedOperationException(); }, +++ b/android/guava/src/com/google/common/hash/AbstractByteHasher.java, +++ b/android/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java, +import static com.google.common.base.Preconditions.checkArgument;, +abstract class AbstractCompositeHashFunction extends AbstractHashFunction {, +    Hasher[] hashers = new Hasher[functions.length];, +    return fromHashers(hashers);, +  }, +, +  @Override, +  public Hasher newHasher(int expectedInputSize) {, +    checkArgument(expectedInputSize >= 0);, +    Hasher[] hashers = new Hasher[functions.length];, +    for (int i = 0; i < hashers.length; i++) {, +      hashers[i] = functions[i].newHasher(expectedInputSize);, +    }, +    return fromHashers(hashers);, +  }, +, +  private Hasher fromHashers(final Hasher[] hashers) {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +  static class StreamingVersion extends AbstractHashFunction {, +        protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    @Override protected HashCode makeHash() {, +++ b/android/guava-tests/test/com/google/common/hash/FunnelsTest.java, +      @Override protected HashCode makeHash() { throw new UnsupportedOperationException(); }, +++ b/android/guava/src/com/google/common/hash/AbstractByteHasher.java, +++ b/android/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java, +import static com.google.common.base.Preconditions.checkArgument;, +abstract class AbstractCompositeHashFunction extends AbstractHashFunction {, +    Hasher[] hashers = new Hasher[functions.length];, +    return fromHashers(hashers);, +  }, +, +  @Override, +  public Hasher newHasher(int expectedInputSize) {, +    checkArgument(expectedInputSize >= 0);, +    Hasher[] hashers = new Hasher[functions.length];, +    for (int i = 0; i < hashers.length; i++) {, +      hashers[i] = functions[i].newHasher(expectedInputSize);, +    }, +    return fromHashers(hashers);, +  }, +, +  private Hasher fromHashers(final Hasher[] hashers) {, +++ b/android/guava/src/com/google/common/hash/AbstractHashFunction.java, +/*, + * Copyright (C) 2017 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.hash;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +, +import java.nio.charset.Charset;, +, +/** , + * Skeleton implementation of {@link HashFunction} in terms of {@link #newHasher()}., + * ]