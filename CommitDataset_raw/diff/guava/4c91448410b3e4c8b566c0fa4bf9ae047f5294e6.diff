[+++ b/guava-gwt/test/com/google/common/base/AsciiTest_gwt.java, +++ b/guava-gwt/test/com/google/common/base/AsciiTest_gwt.java, +++ b/guava-tests/test/com/google/common/base/AsciiTest.java, +    assertEquals("foobar", Ascii.truncate("foobar", 10, "..."));, +    assertEquals("fo...", Ascii.truncate("foobar", 5, "..."));, +    assertEquals("foobar", Ascii.truncate("foobar", 6, "..."));, +    assertEquals("...", Ascii.truncate("foobar", 3, "..."));, +    String truncated = null;, +      truncated = Ascii.truncate("foobar", 2, "...");, +      truncated = Ascii.truncate("foobar", 8, "1234567890");, +      truncated = Ascii.truncate("foobar", -1, "...");, +      truncated = Ascii.truncate("foobar", -1, "");, +++ b/guava-gwt/test/com/google/common/base/AsciiTest_gwt.java, +++ b/guava-tests/test/com/google/common/base/AsciiTest.java, +    assertEquals("foobar", Ascii.truncate("foobar", 10, "..."));, +    assertEquals("fo...", Ascii.truncate("foobar", 5, "..."));, +    assertEquals("foobar", Ascii.truncate("foobar", 6, "..."));, +    assertEquals("...", Ascii.truncate("foobar", 3, "..."));, +    String truncated = null;, +      truncated = Ascii.truncate("foobar", 2, "...");, +      truncated = Ascii.truncate("foobar", 8, "1234567890");, +      truncated = Ascii.truncate("foobar", -1, "...");, +      truncated = Ascii.truncate("foobar", -1, "");, +++ b/guava/src/com/google/common/base/Ascii.java, +import javax.annotation.CheckReturnValue;, +, +   * sequence is greater than {@code maxLength}, the returned string will be exactly, +   * {@code maxLength} chars in length and will end with the given {@code truncationIndicator}., +   * Otherwise, the sequence will be returned as a string with no changes to the content., +   * use with arbitrary Unicode text. It is mostly intended for use with text that is known to be, +   * safe for use with it (such as all-ASCII text) and for simple debugging text. When using this, +   * method, consider the following:, +   *   <li>the appropriate truncation indicator may be locale-dependent</li>, +   *   <li>it is safe to use non-ASCII characters in the truncation indicator</li>, +  @CheckReturnValue, +, +    // in this worst case, this allows a maxLength equal to the length of the truncationIndicator,, +    // meaning that a string will be truncated to just the truncation indicator itself]