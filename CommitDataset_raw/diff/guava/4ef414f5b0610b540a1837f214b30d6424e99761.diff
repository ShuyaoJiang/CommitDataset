[+++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, + * #ignoreClasses} can be used to exclude certain classes. As a special case, classes with an, + * underscore in the name (like {@code AutoValue_Foo}) can be excluded using, + * <code>ignoreClasses({@link #UNDERSCORE_IN_NAME})</code>., +  /**, +   * A predicate that matches classes with an underscore in the class name. This can be used with, +   * {@link #ignoreClasses} to exclude generated classes, such as the {@code AutoValue_Foo} classes, +   * generated by <a href="https://github.com/google/auto/tree/master/value">AutoValue</a>., +   *, +   * @since 19.0, +   */, +  public static final Predicate<Class<?>> UNDERSCORE_IN_NAME = new Predicate<Class<?>>() {, +    @Override public boolean apply(Class<?> c) {, +      return c.getSimpleName().contains("_");, +    }, +  };, +, +  abstract static class Chopper {, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, + * #ignoreClasses} can be used to exclude certain classes. As a special case, classes with an, + * underscore in the name (like {@code AutoValue_Foo}) can be excluded using, + * <code>ignoreClasses({@link #UNDERSCORE_IN_NAME})</code>., +  /**, +   * A predicate that matches classes with an underscore in the class name. This can be used with, +   * {@link #ignoreClasses} to exclude generated classes, such as the {@code AutoValue_Foo} classes, +   * generated by <a href="https://github.com/google/auto/tree/master/value">AutoValue</a>., +   *, +   * @since 19.0, +   */, +  public static final Predicate<Class<?>> UNDERSCORE_IN_NAME = new Predicate<Class<?>>() {, +    @Override public boolean apply(Class<?> c) {, +      return c.getSimpleName().contains("_");, +    }, +  };, +, +  abstract static class Chopper {, +++ b/guava-testlib/test/com/google/common/testing/AbstractPackageSanityTestsTest.java, +  public void testFindClassesToTeset_ignoreUnderscores() {, +    assertThat(findClassesToTest(ImmutableList.of(Foo.class, Foo_Bar.class))), +        .has().exactly(Foo.class, Foo_Bar.class);, +    sanityTests.ignoreClasses(AbstractPackageSanityTests.UNDERSCORE_IN_NAME);, +    assertThat(findClassesToTest(ImmutableList.of(Foo.class, Foo_Bar.class))), +        .has().exactly(Foo.class);, +  }, +, +  static class Foo_Bar {}, +]