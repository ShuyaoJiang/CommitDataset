[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link BasicGraph} interface., +  MutableBasicGraph<Integer> graph;, +  public abstract MutableBasicGraph<Integer> createGraph();, +  static <N> void validateGraph(ValueGraph<N, ?> graph) {, +    if (graph instanceof BasicGraph) {, +      @SuppressWarnings("unchecked"), +      BasicGraph<N> basicGraph = (BasicGraph<N>) graph;, +          basicGraph,, +          Graphs.copyOf(basicGraph),, +          ImmutableBasicGraph.copyOf(basicGraph)).testEquals();, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link BasicGraph} interface., +  MutableBasicGraph<Integer> graph;, +  public abstract MutableBasicGraph<Integer> createGraph();, +  static <N> void validateGraph(ValueGraph<N, ?> graph) {, +    if (graph instanceof BasicGraph) {, +      @SuppressWarnings("unchecked"), +      BasicGraph<N> basicGraph = (BasicGraph<N>) graph;, +          basicGraph,, +          Graphs.copyOf(basicGraph),, +          ImmutableBasicGraph.copyOf(basicGraph)).testEquals();, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    ValueGraph<Integer, Set<String>> asGraph = network.asGraph();, +          assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, otherNode));, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link BasicGraph} interface., +  MutableBasicGraph<Integer> graph;, +  public abstract MutableBasicGraph<Integer> createGraph();, +  static <N> void validateGraph(ValueGraph<N, ?> graph) {, +    if (graph instanceof BasicGraph) {, +      @SuppressWarnings("unchecked"), +      BasicGraph<N> basicGraph = (BasicGraph<N>) graph;, +          basicGraph,, +          Graphs.copyOf(basicGraph),, +          ImmutableBasicGraph.copyOf(basicGraph)).testEquals();, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    ValueGraph<Integer, Set<String>> asGraph = network.asGraph();, +          assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, otherNode));, +++ b/guava-tests/test/com/google/common/graph/AbstractUndirectedGraphTest.java, + * Abstract base class for testing undirected implementations of the {@link BasicGraph} interface., + * <p>This class is responsible for testing that an undirected implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link BasicGraph} interface., +  MutableBasicGraph<Integer> graph;, +  public abstract MutableBasicGraph<Integer> createGraph();, +  static <N> void validateGraph(ValueGraph<N, ?> graph) {, +    if (graph instanceof BasicGraph) {, +      @SuppressWarnings("unchecked"), +      BasicGraph<N> basicGraph = (BasicGraph<N>) graph;, +          basicGraph,, +          Graphs.copyOf(basicGraph),, +          ImmutableBasicGraph.copyOf(basicGraph)).testEquals();, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    ValueGraph<Integer, Set<String>> asGraph = network.asGraph();, +          assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, otherNode));, +++ b/guava-tests/test/com/google/common/graph/AbstractUndirectedGraphTest.java, + * Abstract base class for testing undirected implementations of the {@link BasicGraph} interface., + * <p>This class is responsible for testing that an undirected implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/ConfigurableDirectedGraphTest.java, + * Tests for a directed {@link ConfigurableMutableBasicGraph} with default graph properties., +  public MutableBasicGraph<Integer> createGraph() {, +    return BasicGraphBuilder.directed().build();, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link BasicGraph}, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link BasicGraph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link BasicGraph} interface., +  MutableBasicGraph<Integer> graph;, +  public abstract MutableBasicGraph<Integer> createGraph();, +  static <N> void validateGraph(ValueGraph<N, ?> graph) {, +    if (graph instanceof BasicGraph) {, +      @SuppressWarnings("unchecked"), +      BasicGraph<N> basicGraph = (BasicGraph<N>) graph;, +          basicGraph,, +          Graphs.copyOf(basicGraph),, +          ImmutableBasicGraph.copyOf(basicGraph)).testEquals();, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    ValueGraph<Integer, Set<String>> asGraph = network.asGraph();, +          assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, otherNode));]