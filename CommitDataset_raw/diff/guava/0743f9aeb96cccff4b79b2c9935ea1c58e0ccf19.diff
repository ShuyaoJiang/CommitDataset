[+++ b/android/guava-tests/test/com/google/common/collect/ListsTest.java, +    List<Integer> listIteratorOnlyList = new ListIterationOnlyList<>(randomAccessList);, +    List<String> transform = Lists.transform(listIteratorOnlyList, SOME_FUNCTION);, +  private static class ListIterationOnlyList<E> extends ForwardingList<E> {, +    private final List<E> realDelegate;, +, +    private ListIterationOnlyList(List<E> realDelegate) {, +      this.realDelegate = realDelegate;, +    }, +, +    @Override, +    public int size() {, +      return realDelegate.size();, +    }, +, +    @Override, +    public ListIterator<E> listIterator(int index) {, +      return realDelegate.listIterator(index);, +    }, +, +    @Override, +    protected List<E> delegate() {, +      throw new UnsupportedOperationException("This list only supports ListIterator");, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/ListsTest.java, +    List<Integer> listIteratorOnlyList = new ListIterationOnlyList<>(randomAccessList);, +    List<String> transform = Lists.transform(listIteratorOnlyList, SOME_FUNCTION);, +  private static class ListIterationOnlyList<E> extends ForwardingList<E> {, +    private final List<E> realDelegate;, +, +    private ListIterationOnlyList(List<E> realDelegate) {, +      this.realDelegate = realDelegate;, +    }, +, +    @Override, +    public int size() {, +      return realDelegate.size();, +    }, +, +    @Override, +    public ListIterator<E> listIterator(int index) {, +      return realDelegate.listIterator(index);, +    }, +, +    @Override, +    protected List<E> delegate() {, +      throw new UnsupportedOperationException("This list only supports ListIterator");, +    }, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/ListsTest_gwt.java, +, +public void testTransformedSequentialIterationUsesBackingListIterationOnly() throws Exception {, +  com.google.common.collect.ListsTest testCase = new com.google.common.collect.ListsTest();, +  testCase.testTransformedSequentialIterationUsesBackingListIterationOnly();, +}, +++ b/android/guava-tests/test/com/google/common/collect/ListsTest.java, +    List<Integer> listIteratorOnlyList = new ListIterationOnlyList<>(randomAccessList);, +    List<String> transform = Lists.transform(listIteratorOnlyList, SOME_FUNCTION);, +  private static class ListIterationOnlyList<E> extends ForwardingList<E> {, +    private final List<E> realDelegate;, +, +    private ListIterationOnlyList(List<E> realDelegate) {, +      this.realDelegate = realDelegate;, +    }, +, +    @Override, +    public int size() {, +      return realDelegate.size();, +    }, +, +    @Override, +    public ListIterator<E> listIterator(int index) {, +      return realDelegate.listIterator(index);, +    }, +, +    @Override, +    protected List<E> delegate() {, +      throw new UnsupportedOperationException("This list only supports ListIterator");, +    }, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/ListsTest_gwt.java, +, +public void testTransformedSequentialIterationUsesBackingListIterationOnly() throws Exception {, +  com.google.common.collect.ListsTest testCase = new com.google.common.collect.ListsTest();, +  testCase.testTransformedSequentialIterationUsesBackingListIterationOnly();, +}, +++ b/guava-tests/test/com/google/common/collect/ListsTest.java, +    List<Integer> listIteratorOnlyList = new ListIterationOnlyList<>(randomAccessList);, +    List<String> transform = Lists.transform(listIteratorOnlyList, SOME_FUNCTION);, +  private static class ListIterationOnlyList<E> extends ForwardingList<E> {, +    private final List<E> realDelegate;, +, +    private ListIterationOnlyList(List<E> realDelegate) {, +      this.realDelegate = realDelegate;, +    }, +]