[+++ b/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +        HashCode unused = sink.hash();, +++ b/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +        HashCode unused = sink.hash();, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    {, +      HashCode unused = hashFunction.hashBytes(new byte[64], 0, 0);, +    }, +      HashCode unused = hashFunction.hashBytes(new byte[128], -1, 128);, +      HashCode unused = hashFunction.hashBytes(new byte[128], 64, 256 /* too long len */);, +      HashCode unused = hashFunction.hashBytes(new byte[64], 0, -1);, +++ b/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +        HashCode unused = sink.hash();, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    {, +      HashCode unused = hashFunction.hashBytes(new byte[64], 0, 0);, +    }, +      HashCode unused = hashFunction.hashBytes(new byte[128], -1, 128);, +      HashCode unused = hashFunction.hashBytes(new byte[128], 64, 256 /* too long len */);, +      HashCode unused = hashFunction.hashBytes(new byte[64], 0, -1);, +++ b/guava/src/com/google/common/hash/AbstractByteHasher.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +        HashCode unused = sink.hash();, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    {, +      HashCode unused = hashFunction.hashBytes(new byte[64], 0, 0);, +    }, +      HashCode unused = hashFunction.hashBytes(new byte[128], -1, 128);, +      HashCode unused = hashFunction.hashBytes(new byte[128], 64, 256 /* too long len */);, +      HashCode unused = hashFunction.hashBytes(new byte[64], 0, -1);, +++ b/guava/src/com/google/common/hash/AbstractByteHasher.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CanIgnoreReturnValue, +++ b/guava/src/com/google/common/hash/AbstractHasher.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +@CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractByteHasherTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +    HashCode unused = sink.hash();, +        HashCode unused = sink.hash();]