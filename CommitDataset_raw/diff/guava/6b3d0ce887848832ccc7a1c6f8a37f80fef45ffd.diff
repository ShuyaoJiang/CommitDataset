[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimap.java, +  Set<K> createKeySet() {, +    // TreeMultimap uses NavigableKeySet explicitly, but we don't handle that here for GWT, +    // compatibility reasons, +      return new Iterator<K>() {, +  Map<K, Collection<V>> createAsMap() {, +    // TreeMultimap uses NavigableAsMap explicitly, but we don't handle that here for GWT, +    // compatibility reasons, +    Entry<K, Collection<V>> wrapEntry(Entry<K, Collection<V>> entry) {, +      K key = entry.getKey();, +      return Maps.immutableEntry(key, wrapCollection(key, entry.getValue()));, +    }, +, +        return wrapEntry(entry);, +      return (result == null) ? sortedKeySet = createKeySet() : result;, +    }, +, +    SortedSet<K> createKeySet() {, +      return new SortedKeySet(sortedMap());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimap.java, +  Set<K> createKeySet() {, +    // TreeMultimap uses NavigableKeySet explicitly, but we don't handle that here for GWT, +    // compatibility reasons, +      return new Iterator<K>() {, +  Map<K, Collection<V>> createAsMap() {, +    // TreeMultimap uses NavigableAsMap explicitly, but we don't handle that here for GWT, +    // compatibility reasons, +    Entry<K, Collection<V>> wrapEntry(Entry<K, Collection<V>> entry) {, +      K key = entry.getKey();, +      return Maps.immutableEntry(key, wrapCollection(key, entry.getValue()));, +    }, +, +        return wrapEntry(entry);, +      return (result == null) ? sortedKeySet = createKeySet() : result;, +    }, +, +    SortedSet<K> createKeySet() {, +      return new SortedKeySet(sortedMap());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultimap.java, +import javax.annotation.Nullable;, +, + * @author Louis Wasserman, +public class TreeMultimap<K, V> extends AbstractSortedKeySortedSetMultimap<K, V> {, +  @Override, +  Collection<V> createCollection(@Nullable K key) {, +    if (key == null) {, +      keyComparator().compare(key, key);, +    }, +    return super.createCollection(key);, +  }, +, +   * The following @GwtIncompatible methods override the methods in , +   * AbstractSortedKeySortedSetMultimap, so GWT will fall back to the ASKSSM implementations,, +   * which return SortedSets and SortedMaps., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimap.java, +  Set<K> createKeySet() {, +    // TreeMultimap uses NavigableKeySet explicitly, but we don't handle that here for GWT, +    // compatibility reasons, +      return new Iterator<K>() {, +  Map<K, Collection<V>> createAsMap() {, +    // TreeMultimap uses NavigableAsMap explicitly, but we don't handle that here for GWT, +    // compatibility reasons, +    Entry<K, Collection<V>> wrapEntry(Entry<K, Collection<V>> entry) {, +      K key = entry.getKey();, +      return Maps.immutableEntry(key, wrapCollection(key, entry.getValue()));, +    }, +, +        return wrapEntry(entry);, +      return (result == null) ? sortedKeySet = createKeySet() : result;, +    }, +, +    SortedSet<K> createKeySet() {, +      return new SortedKeySet(sortedMap());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultimap.java, +import javax.annotation.Nullable;, +, + * @author Louis Wasserman, +public class TreeMultimap<K, V> extends AbstractSortedKeySortedSetMultimap<K, V> {, +  @Override, +  Collection<V> createCollection(@Nullable K key) {, +    if (key == null) {, +      keyComparator().compare(key, key);, +    }, +    return super.createCollection(key);, +  }, +, +   * The following @GwtIncompatible methods override the methods in , +   * AbstractSortedKeySortedSetMultimap, so GWT will fall back to the ASKSSM implementations,, +   * which return SortedSets and SortedMaps., +++ b/guava-tests/test/com/google/common/collect/TreeMultimapNaturalTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +import com.google.common.collect.testing.Helpers;, +import com.google.common.collect.testing.NavigableMapTestSuiteBuilder;, +import com.google.common.collect.testing.SampleElements;, +import com.google.common.collect.testing.TestSortedMapGenerator;, +import com.google.common.collect.testing.TestStringSortedSetGenerator;, +import java.util.NavigableMap;, +import java.util.NavigableSet;, +import java.util.SortedSet;, +    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSortedSetGenerator() {]