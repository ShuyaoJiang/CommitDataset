[+++ b/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java, +import com.google.common.testing.SerializableTester;, +  public void testSerialization_empty() {, +    assertSame(ImmutableClassToInstanceMap.of(), , +        SerializableTester.reserialize(ImmutableClassToInstanceMap.of()));, +  }, +, +    assertSame(map, ImmutableClassToInstanceMap.of());, +  public void testOf_zero() {, +    assertTrue(ImmutableClassToInstanceMap.of().isEmpty());, +  }, +  , +  public void testOf_one() {, +    ImmutableClassToInstanceMap<Number> map =, +        ImmutableClassToInstanceMap.of(int.class, 1);, +    assertEquals(1, map.size());, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java, +import com.google.common.testing.SerializableTester;, +  public void testSerialization_empty() {, +    assertSame(ImmutableClassToInstanceMap.of(), , +        SerializableTester.reserialize(ImmutableClassToInstanceMap.of()));, +  }, +, +    assertSame(map, ImmutableClassToInstanceMap.of());, +  public void testOf_zero() {, +    assertTrue(ImmutableClassToInstanceMap.of().isEmpty());, +  }, +  , +  public void testOf_one() {, +    ImmutableClassToInstanceMap<Number> map =, +        ImmutableClassToInstanceMap.of(int.class, 1);, +    assertEquals(1, map.size());, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java, +  private static final ImmutableClassToInstanceMap<Object> EMPTY = , +      new ImmutableClassToInstanceMap<Object>(, +          ImmutableMap.<Class<?>, Object>of());, +  , +  /**, +   * Returns an empty {@code ImmutableClassToInstanceMap}., +   */, +  @SuppressWarnings("unchecked"), +  public static <B> ImmutableClassToInstanceMap<B> of() {, +    return (ImmutableClassToInstanceMap<B>) EMPTY;, +  }, +  , +  /**, +   * Returns an {@code ImmutableClassToInstanceMap} containing a single entry., +   */, +  public static <B, T extends B> ImmutableClassToInstanceMap<B> of(, +      Class<T> type, T value) {, +    ImmutableMap<Class<? extends B>, B> map = , +        ImmutableMap.<Class<? extends B>, B>of(type, value);, +    return new ImmutableClassToInstanceMap<B>(map);, +  }, +  , +      ImmutableMap<Class<? extends B>, B> map = mapBuilder.build();, +      if (map.isEmpty()) {, +        return of();, +      } else {, +        return new ImmutableClassToInstanceMap<B>(map);, +      }, +  , +  Object readResolve() {, +    return isEmpty() ? of() : this;, +  }]