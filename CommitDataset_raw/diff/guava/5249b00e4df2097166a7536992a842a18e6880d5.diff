[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +  public void testExhaust() throws IOException {, +    InputStream in = newTestStream(100);, +    assertEquals(100, ByteStreams.exhaust(in));, +    assertEquals(-1, in.read());, +    assertEquals(0, ByteStreams.exhaust(in));, +, +    InputStream empty = newTestStream(0);, +    assertEquals(0, ByteStreams.exhaust(empty));, +    assertEquals(-1, empty.read());, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +  public void testExhaust() throws IOException {, +    InputStream in = newTestStream(100);, +    assertEquals(100, ByteStreams.exhaust(in));, +    assertEquals(-1, in.read());, +    assertEquals(0, ByteStreams.exhaust(in));, +, +    InputStream empty = newTestStream(0);, +    assertEquals(0, ByteStreams.exhaust(empty));, +    assertEquals(-1, empty.read());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharStreamsTest.java, +import java.nio.CharBuffer;, +  public void testExhaust_reader() throws IOException {, +    Reader reader = new StringReader(ASCII);, +    assertEquals(ASCII.length(), CharStreams.exhaust(reader));, +    assertEquals(-1, reader.read());, +    assertEquals(0, CharStreams.exhaust(reader));, +, +    Reader empty = new StringReader("");, +    assertEquals(0, CharStreams.exhaust(empty));, +    assertEquals(-1, empty.read());, +  }, +, +  public void testExhaust_readable() throws IOException {, +    CharBuffer buf = CharBuffer.wrap(ASCII);, +    assertEquals(ASCII.length(), CharStreams.exhaust(buf));, +    assertEquals(0, buf.remaining());, +    assertEquals(0, CharStreams.exhaust(buf));, +, +    CharBuffer empty = CharBuffer.wrap("");, +    assertEquals(0, CharStreams.exhaust(empty));, +    assertEquals(0, empty.remaining());, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +  public void testExhaust() throws IOException {, +    InputStream in = newTestStream(100);, +    assertEquals(100, ByteStreams.exhaust(in));, +    assertEquals(-1, in.read());, +    assertEquals(0, ByteStreams.exhaust(in));, +, +    InputStream empty = newTestStream(0);, +    assertEquals(0, ByteStreams.exhaust(empty));, +    assertEquals(-1, empty.read());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharStreamsTest.java, +import java.nio.CharBuffer;, +  public void testExhaust_reader() throws IOException {, +    Reader reader = new StringReader(ASCII);, +    assertEquals(ASCII.length(), CharStreams.exhaust(reader));, +    assertEquals(-1, reader.read());, +    assertEquals(0, CharStreams.exhaust(reader));, +, +    Reader empty = new StringReader("");, +    assertEquals(0, CharStreams.exhaust(empty));, +    assertEquals(-1, empty.read());, +  }, +, +  public void testExhaust_readable() throws IOException {, +    CharBuffer buf = CharBuffer.wrap(ASCII);, +    assertEquals(ASCII.length(), CharStreams.exhaust(buf));, +    assertEquals(0, buf.remaining());, +    assertEquals(0, CharStreams.exhaust(buf));, +, +    CharBuffer empty = CharBuffer.wrap("");, +    assertEquals(0, CharStreams.exhaust(empty));, +    assertEquals(0, empty.remaining());, +  }, +, +++ b/guava/src/com/google/common/io/ByteSource.java, +    try {, +    } finally {, +      Arrays.fill(ByteStreams.skipBuffer, (byte) 0);, +    }, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +  public void testExhaust() throws IOException {, +    InputStream in = newTestStream(100);, +    assertEquals(100, ByteStreams.exhaust(in));, +    assertEquals(-1, in.read());, +    assertEquals(0, ByteStreams.exhaust(in));, +, +    InputStream empty = newTestStream(0);, +    assertEquals(0, ByteStreams.exhaust(empty));, +    assertEquals(-1, empty.read());, +  }]