[+++ b/guava/src/com/google/common/collect/FluentIterable.java, +  // To avoid a self retain cycle under j2objc, we store Optional.absent() instead of, +  // Optional.of(this). To access the iterator delegate, call #getDelegate(), which converts to, +  // absent() back to 'this'., +  private final Optional<Iterable<E>> iterableDelegate;, +    this.iterableDelegate = Optional.absent();, +    checkNotNull(iterable);, +    this.iterableDelegate = Optional.fromNullable(this != iterable ? iterable : null);, +  }, +, +  private Iterable<E> getDelegate() {, +    return iterableDelegate.or(this);, +    return Iterables.toString(getDelegate());, +    return Iterables.size(getDelegate());, +    return Iterables.contains(getDelegate(), target);, +    return from(Iterables.cycle(getDelegate()));, +    return from(FluentIterable.concat(getDelegate(), other));, +    return from(FluentIterable.concat(getDelegate(), Arrays.asList(elements)));, +    return from(Iterables.filter(getDelegate(), predicate));, +    return from(Iterables.filter(getDelegate(), type));, +    return Iterables.any(getDelegate(), predicate);, +    return Iterables.all(getDelegate(), predicate);, +    return Iterables.tryFind(getDelegate(), predicate);, +    return from(Iterables.transform(getDelegate(), function));, +    Iterator<E> iterator = getDelegate().iterator();, +    Iterable<E> iterable = getDelegate();, +    return from(Iterables.skip(getDelegate(), numberToSkip));, +    return from(Iterables.limit(getDelegate(), maxSize));, +    return !getDelegate().iterator().hasNext();, +    return ImmutableList.copyOf(getDelegate());, +    return Ordering.from(comparator).immutableSortedCopy(getDelegate());, +    return ImmutableSet.copyOf(getDelegate());, +    return ImmutableSortedSet.copyOf(comparator, getDelegate());, +    return ImmutableMultiset.copyOf(getDelegate());, +    return Maps.toMap(getDelegate(), valueFunction);, +    return Multimaps.index(getDelegate(), keyFunction);, +    return Maps.uniqueIndex(getDelegate(), keyFunction);, +    return Iterables.toArray(getDelegate(), type);, +    Iterable<E> iterable = getDelegate();, +    return Iterables.get(getDelegate(), position);]