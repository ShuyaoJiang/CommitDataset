[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +public abstract class AbstractDirectedGraphTest extends AbstractGraphTest {, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +public abstract class AbstractDirectedGraphTest extends AbstractGraphTest {, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import com.google.common.collect.ImmutableSet;, +  boolean addNode(Integer n) {, +    return graph.addNode(n);, +  }, +  boolean addEdge(String e, Integer n1, Integer n2) {, +    graph.addNode(n1);, +    graph.addNode(n2);, +    return graph.addEdge(e, n1, n2);, +  }, +  @Test, +  public void addNode_newNode() {, +    assertTrue(addNode(N1));, +    assertThat(graph.nodes()).contains(N1);, +  }, +, +  @Test, +  public void addNode_existingNode() {, +    addNode(N1);, +    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());, +    assertFalse(addNode(N1));, +    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);, +  }, +, +  @Test, +  public void removeNode_existingNode() {, +    addEdge(E12, N1, N2);, +    addEdge(E41, N4, N1);, +    assertTrue(graph.removeNode(N1));, +    assertThat(graph.nodes()).containsExactly(N2, N4);, +    assertThat(graph.edges()).doesNotContain(E12);, +    assertThat(graph.edges()).doesNotContain(E41);, +  }, +, +  @Test, +  public void removeNode_invalidArgument() {, +    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());, +    assertFalse(graph.removeNode(NODE_NOT_IN_GRAPH));, +    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);, +  }, +, +  @Test, +  public void removeEdge_invalidArgument() {, +    ImmutableSet<String> edges = ImmutableSet.copyOf(graph.edges());, +    assertFalse(graph.removeEdge(EDGE_NOT_IN_GRAPH));, +    assertThat(graph.edges()).containsExactlyElementsIn(edges);, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +public abstract class AbstractDirectedGraphTest extends AbstractGraphTest {, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +import com.google.common.collect.ImmutableSet;, +  boolean addNode(Integer n) {, +    return graph.addNode(n);, +  }, +  boolean addEdge(String e, Integer n1, Integer n2) {, +    graph.addNode(n1);, +    graph.addNode(n2);, +    return graph.addEdge(e, n1, n2);, +  }, +  @Test, +  public void addNode_newNode() {, +    assertTrue(addNode(N1));, +    assertThat(graph.nodes()).contains(N1);, +  }, +, +  @Test, +  public void addNode_existingNode() {, +    addNode(N1);, +    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());, +    assertFalse(addNode(N1));, +    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);, +  }, +, +  @Test, +  public void removeNode_existingNode() {, +    addEdge(E12, N1, N2);, +    addEdge(E41, N4, N1);, +    assertTrue(graph.removeNode(N1));, +    assertThat(graph.nodes()).containsExactly(N2, N4);, +    assertThat(graph.edges()).doesNotContain(E12);, +    assertThat(graph.edges()).doesNotContain(E41);, +  }, +, +  @Test, +  public void removeNode_invalidArgument() {, +    ImmutableSet<Integer> nodes = ImmutableSet.copyOf(graph.nodes());, +    assertFalse(graph.removeNode(NODE_NOT_IN_GRAPH));, +    assertThat(graph.nodes()).containsExactlyElementsIn(nodes);, +  }, +, +  @Test]