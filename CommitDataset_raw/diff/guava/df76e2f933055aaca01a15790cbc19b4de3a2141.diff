[+++ b/gwt-src/com/google/common/collect/GwtSerializationDependencies.java, +      super(null, 0, null);, +++ b/gwt-src/com/google/common/collect/GwtSerializationDependencies.java, +      super(null, 0, null);, +++ /dev/null, +++ b/gwt-src/com/google/common/collect/GwtSerializationDependencies.java, +      super(null, 0, null);, +++ /dev/null, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    private final List<? extends Predicate<? super T>> components;, +    private AndPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x12472c2c is a random number to help avoid collisions with OrPredicate, +      return components.hashCode() + 0x12472c2c;, +        return components.equals(that.components);, +    private final List<? extends Predicate<? super T>> components;, +    private OrPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x053c91cf is a random number to help avoid collisions with AndPredicate, +      return components.hashCode() + 0x053c91cf;, +        return components.equals(that.components);, +++ b/gwt-src/com/google/common/collect/GwtSerializationDependencies.java, +      super(null, 0, null);, +++ /dev/null, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    private final List<? extends Predicate<? super T>> components;, +    private AndPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x12472c2c is a random number to help avoid collisions with OrPredicate, +      return components.hashCode() + 0x12472c2c;, +        return components.equals(that.components);, +    private final List<? extends Predicate<? super T>> components;, +    private OrPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x053c91cf is a random number to help avoid collisions with AndPredicate, +      return components.hashCode() + 0x053c91cf;, +        return components.equals(that.components);, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +   * Splits {@code sequence} into string components and makes them available, +   * through an {@link Iterator}, which may be lazily evaluated., +++ b/gwt-src/com/google/common/collect/GwtSerializationDependencies.java, +      super(null, 0, null);, +++ /dev/null, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    private final List<? extends Predicate<? super T>> components;, +    private AndPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x12472c2c is a random number to help avoid collisions with OrPredicate, +      return components.hashCode() + 0x12472c2c;, +        return components.equals(that.components);, +    private final List<? extends Predicate<? super T>> components;, +    private OrPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x053c91cf is a random number to help avoid collisions with AndPredicate, +      return components.hashCode() + 0x053c91cf;, +        return components.equals(that.components);, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +   * Splits {@code sequence} into string components and makes them available, +   * through an {@link Iterator}, which may be lazily evaluated., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +import com.google.common.annotations.Beta;, +import java.util.Comparator;, +    @Beta @Override, +    public Builder<K, V> orderKeysBy(Comparator<? super K> keyComparator) {, +      super.orderKeysBy(keyComparator);, +      return this;, +    }, +, +    @Beta @Override, +    public Builder<K, V> orderValuesBy(Comparator<? super V> valueComparator) {, +      super.orderValuesBy(valueComparator);, +      return this;, +    }, +, +     * Returns a newly-created immutable list multimap., +++ b/gwt-src/com/google/common/collect/GwtSerializationDependencies.java, +      super(null, 0, null);, +++ /dev/null, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    private final List<? extends Predicate<? super T>> components;, +    private AndPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x12472c2c is a random number to help avoid collisions with OrPredicate, +      return components.hashCode() + 0x12472c2c;, +        return components.equals(that.components);, +    private final List<? extends Predicate<? super T>> components;, +    private OrPredicate(List<? extends Predicate<? super T>> components) {, +      // 0x053c91cf is a random number to help avoid collisions with AndPredicate, +      return components.hashCode() + 0x053c91cf;, +        return components.equals(that.components);, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +   * Splits {@code sequence} into string components and makes them available, +   * through an {@link Iterator}, which may be lazily evaluated., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +import com.google.common.annotations.Beta;, +import java.util.Comparator;, +    @Beta @Override, +    public Builder<K, V> orderKeysBy(Comparator<? super K> keyComparator) {, +      super.orderKeysBy(keyComparator);, +      return this;, +    }, +, +    @Beta @Override, +    public Builder<K, V> orderValuesBy(Comparator<? super V> valueComparator) {, +      super.orderValuesBy(valueComparator);, +      return this;, +    }]