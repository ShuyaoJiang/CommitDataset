[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, + * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomains.integers()}). Certain, +        effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));, +        effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, + * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomains.integers()}). Certain, +        effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));, +        effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +    return intersectionInCurrentDomain(Range.upTo(toElement, BoundType.forBoolean(inclusive)));, +    return intersectionInCurrentDomain(Range.range(, +    return intersectionInCurrentDomain(Range.downTo(fromElement, BoundType.forBoolean(inclusive)));, +          ? Range.closed(lowerEndpoint, upperEndpoint).asSet(domain), +    return Range.create(range.lowerBound.withLowerBoundType(lowerBoundType, domain),, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, + * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomains.integers()}). Certain, +        effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));, +        effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +    return intersectionInCurrentDomain(Range.upTo(toElement, BoundType.forBoolean(inclusive)));, +    return intersectionInCurrentDomain(Range.range(, +    return intersectionInCurrentDomain(Range.downTo(fromElement, BoundType.forBoolean(inclusive)));, +          ? Range.closed(lowerEndpoint, upperEndpoint).asSet(domain), +    return Range.create(range.lowerBound.withLowerBoundType(lowerBoundType, domain),, +++ b/guava-gwt/src-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/SetGenerators.java, +        return Range.openClosed(0, 1).asSet(DiscreteDomains.integers()).subSet(0, 1);, +          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, + * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomains.integers()}). Certain, +        effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));, +        effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +    return intersectionInCurrentDomain(Range.upTo(toElement, BoundType.forBoolean(inclusive)));, +    return intersectionInCurrentDomain(Range.range(, +    return intersectionInCurrentDomain(Range.downTo(fromElement, BoundType.forBoolean(inclusive)));, +          ? Range.closed(lowerEndpoint, upperEndpoint).asSet(domain), +    return Range.create(range.lowerBound.withLowerBoundType(lowerBoundType, domain),, +++ b/guava-gwt/src-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/SetGenerators.java, +        return Range.openClosed(0, 1).asSet(DiscreteDomains.integers()).subSet(0, 1);, +          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java, +        return Range.openClosed(0, 1).asSet(DiscreteDomains.integers()).subSet(0, 1);, +          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, + * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomains.integers()}). Certain, +        effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));, +        effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +    return intersectionInCurrentDomain(Range.upTo(toElement, BoundType.forBoolean(inclusive)));, +    return intersectionInCurrentDomain(Range.range(, +    return intersectionInCurrentDomain(Range.downTo(fromElement, BoundType.forBoolean(inclusive)));, +          ? Range.closed(lowerEndpoint, upperEndpoint).asSet(domain), +    return Range.create(range.lowerBound.withLowerBoundType(lowerBoundType, domain),, +++ b/guava-gwt/src-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/SetGenerators.java, +        return Range.openClosed(0, 1).asSet(DiscreteDomains.integers()).subSet(0, 1);, +          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java, +        return Range.openClosed(0, 1).asSet(DiscreteDomains.integers()).subSet(0, 1);, +          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +    Set<Integer> set = Range.closed(1, elements).asSet(integers());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, + * {@code ContiguousSet.create(Range.greaterThan(0), DiscreteDomains.integers()}). Certain, +        effectiveRange = effectiveRange.intersection(Range.atLeast(domain.minValue()));, +        effectiveRange = effectiveRange.intersection(Range.atMost(domain.maxValue()));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +    return intersectionInCurrentDomain(Range.upTo(toElement, BoundType.forBoolean(inclusive)));, +    return intersectionInCurrentDomain(Range.range(, +    return intersectionInCurrentDomain(Range.downTo(fromElement, BoundType.forBoolean(inclusive)));, +          ? Range.closed(lowerEndpoint, upperEndpoint).asSet(domain), +    return Range.create(range.lowerBound.withLowerBoundType(lowerBoundType, domain),, +++ b/guava-gwt/src-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/SetGenerators.java, +        return Range.openClosed(0, 1).asSet(DiscreteDomains.integers()).subSet(0, 1);, +          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java, +        return Range.openClosed(0, 1).asSet(DiscreteDomains.integers()).subSet(0, 1);, +          (elements.isEmpty()) ? Range.closedOpen(0, 0) : Range.encloseAll(elements);, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +    Set<Integer> set = Range.closed(1, elements).asSet(integers());, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +            ContiguousSet.create(Range.closed(1, 3), integers()),, +            ContiguousSet.create(Range.closedOpen(1, 4), integers()),, +            ContiguousSet.create(Range.openClosed(0, 3), integers()),, +            ContiguousSet.create(Range.open(0, 4), integers()),, +            ContiguousSet.create(Range.closed(1, 3), NOT_EQUAL_TO_INTEGERS),, +            ContiguousSet.create(Range.closedOpen(1, 4), NOT_EQUAL_TO_INTEGERS),, +            ContiguousSet.create(Range.openClosed(0, 3), NOT_EQUAL_TO_INTEGERS),, +            ContiguousSet.create(Range.open(0, 4), NOT_EQUAL_TO_INTEGERS),, +        ContiguousSet.create(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE), integers()),, +        ContiguousSet.create(Range.<Integer>all(), integers()));, +        ContiguousSet.create(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE), integers()),, +        ContiguousSet.create(Range.atLeast(Integer.MIN_VALUE), integers()));, +        ContiguousSet.create(Range.closed(Integer.MIN_VALUE, Integer.MAX_VALUE), integers()),, +        ContiguousSet.create(Range.atMost(Integer.MAX_VALUE), integers()));, +    ContiguousSet<Integer> empty = ContiguousSet.create(Range.closedOpen(1, 1), integers());, +    ContiguousSet<Integer> regular = ContiguousSet.create(Range.closed(1, 3), integers());, +    ContiguousSet<Integer> enormous = ContiguousSet.create(Range.<Integer>all(), integers());, +    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());, +    ASSERT.that(ContiguousSet.create(Range.closed(1, 3), integers()).headSet(0)).isEmpty();, +    ImmutableSortedSet<Integer> set = ContiguousSet.create(Range.closed(1, 3), integers());]