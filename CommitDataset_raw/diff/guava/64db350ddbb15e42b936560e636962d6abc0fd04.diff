[+++ b/guava-tests/test/com/google/common/cache/CacheComputationTest.java, +import static com.google.common.cache.TestingCacheLoaders.identityLoader;, +import com.google.common.util.concurrent.Callables;, +import java.util.concurrent.Callable;, +  public void testCompute() throws ExecutionException {, +    Cache<Object, Object> cache = CacheBuilder.newBuilder().build(identityLoader());, +    CacheStats stats = cache.stats();, +    assertEquals(0, stats.missCount());, +    assertEquals(0, stats.loadCount());, +    assertEquals(0, stats.hitCount());, +, +    Object key = new Object();, +    assertSame(key, cache.get(key));, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadCount());, +    assertEquals(0, stats.hitCount());, +, +    key = new Object();, +    assertSame(key, cache.getUnchecked(key));, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(2, stats.loadCount());, +    assertEquals(0, stats.hitCount());, +, +    key = new Object();, +    cache.refresh(key);, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(3, stats.loadCount());, +    assertEquals(0, stats.hitCount());, +, +    assertSame(key, cache.get(key));, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(3, stats.loadCount());, +    assertEquals(1, stats.hitCount());, +, +    Object value = new Object();, +    // callable is not called, +    assertSame(key, cache.get(key, Callables.throwing(new Exception())));, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(3, stats.loadCount());, +    assertEquals(2, stats.hitCount());, +, +    key = new Object();, +    assertSame(value, cache.get(key, Callables.returning(value)));, +    stats = cache.stats();, +    assertEquals(3, stats.missCount());, +    assertEquals(4, stats.loadCount());, +    assertEquals(2, stats.hitCount());, +  }, +, +  public void testComputeNull() throws ExecutionException {, +, +    try {, +      cache.get(new Object(), Callables.returning(null));, +      fail();, +    } catch (NullPointerException expected) {}, +    stats = cache.stats();, +    assertEquals(3, stats.missCount());, +    assertEquals(4, stats.loadCount());, +, +    final Error callableError = new Error();, +    try {, +      cache.get(new Object(), new Callable<Object>() {, +        @Override, +        public Object call() {, +          throw callableError;, +        }, +      });, +      fail();, +    } catch (ExecutionError expected) {, +      assertSame(callableError, expected.getCause());, +    }, +    stats = cache.stats();, +    assertEquals(3, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(4, stats.loadExceptionCount());, +, +    Exception callableException = new Exception();, +    try {, +      cache.get(new Object(), Callables.throwing(callableException));, +      fail();, +    } catch (ExecutionException expected) {, +      assertSame(callableException, expected.getCause());, +    }, +    stats = cache.stats();, +    assertEquals(3, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(4, stats.loadExceptionCount());, +, +    Exception callableException = new RuntimeException();, +    try {, +      cache.get(new Object(), Callables.throwing(callableException));, +      fail();, +    } catch (UncheckedExecutionException expected) {, +      assertSame(callableException, expected.getCause());, +    }]