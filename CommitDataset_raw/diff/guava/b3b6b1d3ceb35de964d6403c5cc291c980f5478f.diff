[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.collect;, +, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.testing.SerializableTester;, +, +import java.util.Set;, +, +/**, + * Tests for {@link ImmutableRangeSet}., + *, + * @author Louis Wasserman, + */, +@GwtIncompatible("ImmutableRangeSet"), +public class ImmutableRangeSetTest extends AbstractRangeSetTest {, +  public void testEmpty() {, +    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.of();, +, +    ASSERT.that(rangeSet.asRanges()).isEmpty();, +    assertEquals(ImmutableRangeSet.<Integer>all(), rangeSet.complement());, +    assertFalse(rangeSet.contains(0));, +    assertFalse(rangeSet.encloses(Range.singleton(0)));, +    assertTrue(rangeSet.enclosesAll(rangeSet));, +    assertTrue(rangeSet.isEmpty());, +  }, +, +  public void testAll() {, +    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.all();, +, +    ASSERT.that(rangeSet.asRanges()).hasContentsInOrder(Range.all());, +    assertTrue(rangeSet.contains(0));, +    assertTrue(rangeSet.encloses(Range.<Integer>all()));, +    assertTrue(rangeSet.enclosesAll(rangeSet));, +    assertEquals(ImmutableRangeSet.<Integer>of(), rangeSet.complement());, +  }, +, +  public void testSingleBoundedRange() {, +    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.of(Range.closedOpen(1, 5));, +, +    ASSERT.that(rangeSet.asRanges()).hasContentsInOrder(Range.closedOpen(1, 5));, +, +    assertTrue(rangeSet.encloses(Range.closed(3, 4)));, +    assertTrue(rangeSet.encloses(Range.closedOpen(1, 4)));, +    assertTrue(rangeSet.encloses(Range.closedOpen(1, 5)));, +    assertFalse(rangeSet.encloses(Range.greaterThan(2)));, +, +    assertTrue(rangeSet.contains(3));, +    assertFalse(rangeSet.contains(5));, +    assertFalse(rangeSet.contains(0));, +, +    RangeSet<Integer> expectedComplement = TreeRangeSet.create();, +    expectedComplement.add(Range.lessThan(1));, +    expectedComplement.add(Range.atLeast(5));, +, +    assertEquals(expectedComplement, rangeSet.complement());, +  }, +, +  public void testSingleBoundedBelowRange() {, +    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.of(Range.greaterThan(2));, +, +    ASSERT.that(rangeSet.asRanges()).hasContentsInOrder(Range.greaterThan(2));, +, +    assertTrue(rangeSet.encloses(Range.closed(3, 4)));, +    assertTrue(rangeSet.encloses(Range.greaterThan(3)));, +    assertFalse(rangeSet.encloses(Range.closedOpen(1, 5)));, +, +    assertTrue(rangeSet.contains(3));, +    assertTrue(rangeSet.contains(5));, +    assertFalse(rangeSet.contains(0));, +    assertFalse(rangeSet.contains(2));, +, +    assertEquals(ImmutableRangeSet.of(Range.atMost(2)), rangeSet.complement());, +  }, +, +  public void testSingleBoundedAboveRange() {, +    ImmutableRangeSet<Integer> rangeSet = ImmutableRangeSet.of(Range.atMost(3));, +, +    ASSERT.that(rangeSet.asRanges()).hasContentsInOrder(Range.atMost(3));, +, +    assertTrue(rangeSet.encloses(Range.closed(2, 3)));, +    assertTrue(rangeSet.encloses(Range.lessThan(1)));, +    assertFalse(rangeSet.encloses(Range.closedOpen(1, 5)));, +, +    assertTrue(rangeSet.contains(3));]