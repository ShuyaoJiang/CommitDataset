[+++ b/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +import com.google.common.collect.Range;, +  @Generates private static <C extends Comparable> Range<C> freshRange(C freshElement) {, +    return Range.singleton(freshElement);, +  }, +, +  @Generates private static <E> Iterable<E> freshIterable(E freshElement) {, +  @Generates private static <E> Collection<E> freshCollection(E freshElement) {, +  @Generates private static <E> List<E> freshList(E freshElement) {, +  @Generates private static <E> ArrayList<E> freshArrayList(E freshElement) {, +  @Generates private static <E> LinkedList<E> freshLinkedList(E freshElement) {, +  @Generates private static <E> ImmutableList<E> freshImmutableList(E freshElement) {, +  @Generates private static <E> ImmutableCollection<E> freshImmutableCollection(E freshElement) {, +  @Generates private static <E> Set<E> freshSet(E freshElement) {, +  @Generates private static <E> HashSet<E> freshHashSet(E freshElement) {, +  @Generates private static <E> LinkedHashSet<E> freshLinkedHashSet(E freshElement) {, +  @Generates private static <E> ImmutableSet<E> freshImmutableSet(E freshElement) {, +  @Generates private static <E extends Comparable<? super E>> SortedSet<E>, +  @Generates private static <E extends Comparable<? super E>> NavigableSet<E>, +  @Generates private static <E extends Comparable<? super E>> TreeSet<E> freshTreeSet(, +  @Generates private static <E extends Comparable<? super E>> ImmutableSortedSet<E>, +  @Generates private static <E> Multiset<E> freshMultiset(E freshElement) {, +  @Generates private static <E> HashMultiset<E> freshHashMultiset(E freshElement) {, +  @Generates private static <E> LinkedHashMultiset<E> freshLinkedHashMultiset(E freshElement) {, +  @Generates private static <E> ImmutableMultiset<E> freshImmutableMultiset(E freshElement) {, +  @Generates private static <E extends Comparable<E>> SortedMultiset<E> freshSortedMultiset(, +  @Generates private static <E extends Comparable<E>> TreeMultiset<E> freshTreeMultiset(, +  @Generates private static <E extends Comparable<E>> ImmutableSortedMultiset<E>, +  @Generates private static <K, V> Map<K, V> freshMap(K key, V value) {, +  @Generates private static <K, V> HashMap<K, V> freshHashdMap(K key, V value) {, +  @Generates private static <K, V> LinkedHashMap<K, V> freshLinkedHashMap(K key, V value) {, +  @Generates private static <K, V> ImmutableMap<K, V> freshImmutableMap(K key, V value) {, +  @Generates private static <K, V> ConcurrentMap<K, V> freshConcurrentMap(K key, V value) {, +  @Generates private static <K extends Comparable<? super K>, V> SortedMap<K, V>, +  @Generates private static <K extends Comparable<? super K>, V> NavigableMap<K, V>, +  @Generates private static <K extends Comparable<? super K>, V> TreeMap<K, V> freshTreeMap(, +  @Generates private static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>, +  @Generates private static <K, V> Multimap<K, V> freshMultimap(K key, V value) {, +  @Generates private static <K, V> ImmutableMultimap<K, V> freshImmutableMultimap(K key, V value) {, +  @Generates private static <K, V> ListMultimap<K, V> freshListMultimap(K key, V value) {, +  @Generates private static <K, V> ArrayListMultimap<K, V> freshArrayListMultimap(K key, V value) {, +  @Generates private static <K, V> ImmutableListMultimap<K, V> freshImmutableListMultimap(, +  @Generates private static <K, V> SetMultimap<K, V> freshSetMultimap(K key, V value) {, +  @Generates private static <K, V> HashMultimap<K, V> freshHashMultimap(K key, V value) {, +  @Generates private static <K, V> LinkedHashMultimap<K, V> freshLinkedHashMultimap(, +  @Generates private static <K, V> ImmutableSetMultimap<K, V> freshImmutableSetMultimap(, +  @Generates private static <K, V> BiMap<K, V> freshBimap(K key, V value) {, +  @Generates private static <K, V> HashBiMap<K, V> freshHashBiMap(K key, V value) {, +  @Generates private static <K, V> ImmutableBiMap<K, V> freshImmutableBimap(, +  @Generates private static <R, C, V> Table<R, C, V> freshTable(R row, C column, V value) {, +  @Generates private static <R, C, V> HashBasedTable<R, C, V> freshHashBasedTable(, +  @Generates private static <R extends Comparable, C extends Comparable, V> RowSortedTable<R, C, V>, +  @Generates private static <R extends Comparable, C extends Comparable, V> TreeBasedTable<R, C, V>, +  @Generates private static <R, C, V> ImmutableTable<R, C, V> freshImmutableTable(, +++ b/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +import com.google.common.collect.Range;, +  @Generates private static <C extends Comparable> Range<C> freshRange(C freshElement) {, +    return Range.singleton(freshElement);, +  }, +, +  @Generates private static <E> Iterable<E> freshIterable(E freshElement) {, +  @Generates private static <E> Collection<E> freshCollection(E freshElement) {, +  @Generates private static <E> List<E> freshList(E freshElement) {, +  @Generates private static <E> ArrayList<E> freshArrayList(E freshElement) {, +  @Generates private static <E> LinkedList<E> freshLinkedList(E freshElement) {, +  @Generates private static <E> ImmutableList<E> freshImmutableList(E freshElement) {, +  @Generates private static <E> ImmutableCollection<E> freshImmutableCollection(E freshElement) {, +  @Generates private static <E> Set<E> freshSet(E freshElement) {, +  @Generates private static <E> HashSet<E> freshHashSet(E freshElement) {, +  @Generates private static <E> LinkedHashSet<E> freshLinkedHashSet(E freshElement) {, +  @Generates private static <E> ImmutableSet<E> freshImmutableSet(E freshElement) {, +  @Generates private static <E extends Comparable<? super E>> SortedSet<E>, +  @Generates private static <E extends Comparable<? super E>> NavigableSet<E>, +  @Generates private static <E extends Comparable<? super E>> TreeSet<E> freshTreeSet(, +  @Generates private static <E extends Comparable<? super E>> ImmutableSortedSet<E>, +  @Generates private static <E> Multiset<E> freshMultiset(E freshElement) {, +  @Generates private static <E> HashMultiset<E> freshHashMultiset(E freshElement) {, +  @Generates private static <E> LinkedHashMultiset<E> freshLinkedHashMultiset(E freshElement) {, +  @Generates private static <E> ImmutableMultiset<E> freshImmutableMultiset(E freshElement) {, +  @Generates private static <E extends Comparable<E>> SortedMultiset<E> freshSortedMultiset(, +  @Generates private static <E extends Comparable<E>> TreeMultiset<E> freshTreeMultiset(, +  @Generates private static <E extends Comparable<E>> ImmutableSortedMultiset<E>, +  @Generates private static <K, V> Map<K, V> freshMap(K key, V value) {, +  @Generates private static <K, V> HashMap<K, V> freshHashdMap(K key, V value) {, +  @Generates private static <K, V> LinkedHashMap<K, V> freshLinkedHashMap(K key, V value) {, +  @Generates private static <K, V> ImmutableMap<K, V> freshImmutableMap(K key, V value) {, +  @Generates private static <K, V> ConcurrentMap<K, V> freshConcurrentMap(K key, V value) {, +  @Generates private static <K extends Comparable<? super K>, V> SortedMap<K, V>, +  @Generates private static <K extends Comparable<? super K>, V> NavigableMap<K, V>, +  @Generates private static <K extends Comparable<? super K>, V> TreeMap<K, V> freshTreeMap(, +  @Generates private static <K extends Comparable<? super K>, V> ImmutableSortedMap<K, V>, +  @Generates private static <K, V> Multimap<K, V> freshMultimap(K key, V value) {, +  @Generates private static <K, V> ImmutableMultimap<K, V> freshImmutableMultimap(K key, V value) {, +  @Generates private static <K, V> ListMultimap<K, V> freshListMultimap(K key, V value) {, +  @Generates private static <K, V> ArrayListMultimap<K, V> freshArrayListMultimap(K key, V value) {, +  @Generates private static <K, V> ImmutableListMultimap<K, V> freshImmutableListMultimap(, +  @Generates private static <K, V> SetMultimap<K, V> freshSetMultimap(K key, V value) {, +  @Generates private static <K, V> HashMultimap<K, V> freshHashMultimap(K key, V value) {, +  @Generates private static <K, V> LinkedHashMultimap<K, V> freshLinkedHashMultimap(, +  @Generates private static <K, V> ImmutableSetMultimap<K, V> freshImmutableSetMultimap(]