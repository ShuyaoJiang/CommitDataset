[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  /**, +   * Views the array as an immutable list.  The array must have only {@code E} elements., +   *, +   * <p>The array must be internally created., +   */, +  @SuppressWarnings("unchecked") // caller is reponsible for getting this right, +  static <E> ImmutableList<E> asImmutableList(Object[] elements, int length) {, +    return unsafeDelegateList((List) Arrays.asList(elements).subList(0, length));, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  /**, +   * Views the array as an immutable list.  The array must have only {@code E} elements., +   *, +   * <p>The array must be internally created., +   */, +  @SuppressWarnings("unchecked") // caller is reponsible for getting this right, +  static <E> ImmutableList<E> asImmutableList(Object[] elements, int length) {, +    return unsafeDelegateList((List) Arrays.asList(elements).subList(0, length));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +, +    @GwtIncompatible("builder internals"), +    public void testReusedBuilder() {, +      ImmutableList.Builder<String> builder = new ImmutableList.Builder<String>();, +      for (int i = 0; i < 10; i++) {, +        builder.add("foo");, +      }, +      builder.add("bar");, +      RegularImmutableList<String> list = (RegularImmutableList<String>) builder.build();, +      builder.add("baz");, +      assertTrue(list.array != builder.contents);, +    }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  /**, +   * Views the array as an immutable list.  The array must have only {@code E} elements., +   *, +   * <p>The array must be internally created., +   */, +  @SuppressWarnings("unchecked") // caller is reponsible for getting this right, +  static <E> ImmutableList<E> asImmutableList(Object[] elements, int length) {, +    return unsafeDelegateList((List) Arrays.asList(elements).subList(0, length));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +, +    @GwtIncompatible("builder internals"), +    public void testReusedBuilder() {, +      ImmutableList.Builder<String> builder = new ImmutableList.Builder<String>();, +      for (int i = 0; i < 10; i++) {, +        builder.add("foo");, +      }, +      builder.add("bar");, +      RegularImmutableList<String> list = (RegularImmutableList<String>) builder.build();, +      builder.add("baz");, +      assertTrue(list.array != builder.contents);, +    }, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +    verifyTableSize(60, 60, 128);, +    verifyTableSize(120, 60, 256);, +      // if the table is only double the necessary size, we don't bother resizing it, +    verifyTableSize(180, 60, 128);, +      // but if it's even bigger than double, we rebuild the table, +, +  @GwtIncompatible("internals"), +  public void testControlsArraySize() {, +    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();, +    for (int i = 0; i < 10; i++) {, +      builder.add("foo");, +    }, +    builder.add("bar");, +    RegularImmutableSet<String> set = (RegularImmutableSet<String>) builder.build();, +    assertTrue(set.elements.length <= 2 * set.size());, +  }, +, +  @GwtIncompatible("internals"), +  public void testReusedBuilder() {, +    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();, +    for (int i = 0; i < 10; i++) {, +      builder.add("foo");, +    }, +    builder.add("bar");, +    RegularImmutableSet<String> set = (RegularImmutableSet<String>) builder.build();, +    builder.add("baz");, +    assertTrue(set.elements != builder.contents);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  /**, +   * Views the array as an immutable list.  The array must have only {@code E} elements., +   *, +   * <p>The array must be internally created., +   */, +  @SuppressWarnings("unchecked") // caller is reponsible for getting this right, +  static <E> ImmutableList<E> asImmutableList(Object[] elements, int length) {, +    return unsafeDelegateList((List) Arrays.asList(elements).subList(0, length));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java]