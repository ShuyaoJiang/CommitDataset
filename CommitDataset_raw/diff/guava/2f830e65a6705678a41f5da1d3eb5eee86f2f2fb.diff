[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +      return Maps.keyIterator(entrySet().iterator());, +      return Maps.valueIterator(entrySet().iterator());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +      return Maps.keyIterator(entrySet().iterator());, +      return Maps.valueIterator(entrySet().iterator());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +        Iterators.checkRemove(toRemove != null);, +    return new MapBasedElementSet();, +  class MapBasedElementSet extends Multisets.ElementSet<E> {, +    Multiset<E> multiset() {, +      return AbstractMapBasedMultiset.this;, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +      return Maps.keyIterator(entrySet().iterator());, +      return Maps.valueIterator(entrySet().iterator());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +        Iterators.checkRemove(toRemove != null);, +    return new MapBasedElementSet();, +  class MapBasedElementSet extends Multisets.ElementSet<E> {, +    Multiset<E> multiset() {, +      return AbstractMapBasedMultiset.this;, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import java.util.ListIterator;, +    return new TransformedIterator<F, T>(fromIterator) {, +      T transform(F from) {, +, +  /**, +   * Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent, +   * error message., +   */, +  static void checkRemove(boolean canRemove) {, +    checkState(canRemove, "no calls to next() since the last call to remove()");, +  }, +, +  /**, +   * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557, +   */, +  static <T> ListIterator<T> cast(Iterator<T> iterator) {, +    return (ListIterator<T>) iterator;, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +      return Maps.keyIterator(entrySet().iterator());, +      return Maps.valueIterator(entrySet().iterator());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +        Iterators.checkRemove(toRemove != null);, +    return new MapBasedElementSet();, +  class MapBasedElementSet extends Multisets.ElementSet<E> {, +    Multiset<E> multiset() {, +      return AbstractMapBasedMultiset.this;, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import java.util.ListIterator;, +    return new TransformedIterator<F, T>(fromIterator) {, +      T transform(F from) {, +, +  /**, +   * Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent, +   * error message., +   */, +  static void checkRemove(boolean canRemove) {, +    checkState(canRemove, "no calls to next() since the last call to remove()");, +  }, +, +  /**, +   * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557, +   */, +  static <T> ListIterator<T> cast(Iterator<T> iterator) {, +    return (ListIterator<T>) iterator;, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +          return containsKey(key);, +        }, +        @Override, +        public boolean remove(Object o) { // for performance, +          return !LinkedListMultimap.this.removeAll(o).isEmpty();, +  private class MultisetView extends AbstractMultiset<K> {, +    @Override, +    public int size() {, +    public int count(Object element) {, +      return keyCount.count(element);, +, +    Iterator<Entry<K>> entryIterator() {, +      return new TransformedIterator<K, Entry<K>>(new DistinctKeyIterator()) {, +        @Override, +        Entry<K> transform(final K key) {, +          return new Multisets.AbstractEntry<K>() {, +            @Override, +            public K getElement() {, +              return key;, +, +            public int getCount() {, +              return keyCount.count(key);, +            }, +          };, +    int distinctElements() {, +      return elementSet().size();, +    @Override public Iterator<K> iterator() {, +      return new TransformedIterator<Node<K, V>, K>(new NodeIterator()) {]