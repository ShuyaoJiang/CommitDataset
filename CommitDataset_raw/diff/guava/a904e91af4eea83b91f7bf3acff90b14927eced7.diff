[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +  public void testEquals() {, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader()),, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader())), +            new ResourceInfo("x.txt", getClass().getClassLoader())), +    assertThat(ClassPath.Scanner.getClassPathEntries(new URLClassLoader(new URL[0], null)).keySet()), +        ClassPath.Scanner.getClassPathEntries(classloader));, +    ImmutableMap<File, ClassLoader> classPathEntries = ClassPath.Scanner.getClassPathEntries(child);, +    assertEquals(ImmutableMap.of(new File("/a"), parent),, +        ClassPath.Scanner.getClassPathEntries(child));, +    assertThat(ClassPath.Scanner.getClassPathEntries(new ClassLoader(null) {}).keySet()).isEmpty();, +        ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {}));, +        ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {}));, +        ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {}));, +      ClassPath.DefaultScanner scanner = new ClassPath.DefaultScanner();, +    ClassPath.DefaultScanner scanner = new ClassPath.DefaultScanner();, +    scanner.scan(new File("no/such/file/anywhere"), classLoader);, +    ClassPath.DefaultScanner scanner = new ClassPath.DefaultScanner();, +      scanner.scan(notJar, classLoader);, +  public void testResourceInfo_of() {, +        new ClassInfo("Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1Local.class", classLoader).getSimpleName());, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getPackageName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());, +  private static ResourceInfo resourceInfo(Class<?> cls) {, +    return ResourceInfo.of(resource, loader);, +  private static ClassInfo classInfo(Class<?> cls) {, +  private static ClassInfo classInfo(Class<?> cls, ClassLoader classLoader) {, +    return new ClassInfo(resource, classLoader);, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +  public void testEquals() {, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader()),, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader())), +            new ResourceInfo("x.txt", getClass().getClassLoader())), +    assertThat(ClassPath.Scanner.getClassPathEntries(new URLClassLoader(new URL[0], null)).keySet()), +        ClassPath.Scanner.getClassPathEntries(classloader));, +    ImmutableMap<File, ClassLoader> classPathEntries = ClassPath.Scanner.getClassPathEntries(child);, +    assertEquals(ImmutableMap.of(new File("/a"), parent),, +        ClassPath.Scanner.getClassPathEntries(child));, +    assertThat(ClassPath.Scanner.getClassPathEntries(new ClassLoader(null) {}).keySet()).isEmpty();, +        ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {}));, +        ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {}));, +        ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {}));, +      ClassPath.DefaultScanner scanner = new ClassPath.DefaultScanner();, +    ClassPath.DefaultScanner scanner = new ClassPath.DefaultScanner();, +    scanner.scan(new File("no/such/file/anywhere"), classLoader);, +    ClassPath.DefaultScanner scanner = new ClassPath.DefaultScanner();, +      scanner.scan(notJar, classLoader);, +  public void testResourceInfo_of() {, +        new ClassInfo("Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1Local.class", classLoader).getSimpleName());, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getPackageName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());, +  private static ResourceInfo resourceInfo(Class<?> cls) {, +    return ResourceInfo.of(resource, loader);, +  private static ClassInfo classInfo(Class<?> cls) {, +  private static ClassInfo classInfo(Class<?> cls, ClassLoader classLoader) {, +    return new ClassInfo(resource, classLoader);, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +import com.google.common.collect.SetMultimap;, +import java.util.NoSuchElementException;, +    DefaultScanner scanner = new DefaultScanner();, +    scanner.scan(classloader);, +    static ResourceInfo of(String resourceName, ClassLoader loader) {, +        return new ClassInfo(resourceName, loader);, +        return new ResourceInfo(resourceName, loader);, +    ResourceInfo(String resourceName,  ClassLoader loader) {, +     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,, +     *         despite physically existing in the class path., +    public final URL url() throws NoSuchElementException {, +      URL url = loader.getResource(resourceName);, +      if (url == null) {, +        throw new NoSuchElementException(resourceName);, +      return url;, +    ClassInfo(String resourceName, ClassLoader loader) {, +      super(resourceName, loader);, +  /**, +   * Abstract class that scans through the class path represented by a {@link ClassLoader} and calls, +   * {@link #onResourceFile} and {@link #onJarEntry} for each resource found on the class path., +   */, +  abstract static class Scanner {, +    public final void scan(ClassLoader classloader) throws IOException {, +      for (Map.Entry<File, ClassLoader> entry : getClassPathEntries(classloader).entrySet()) {, +        scan(entry.getKey(), entry.getValue());, +    /** Called when a resource file is scanned. */, +    protected abstract void onResourceFile(ClassLoader loader, String packagePath, File f);, +, +    /** Called when a resource entry in a jar file is scanned. */, +    protected abstract void onJarEntry(ClassLoader loader, File file, JarEntry entry);, +]