[+++ b/guava-gwt/test-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/AbstractMultisetSetCountTester.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect.testing.google;, +, +import static com.google.common.collect.testing.features.CollectionFeature.ALLOWS_NULL_VALUES;, +import static com.google.common.collect.testing.features.CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION;, +import static com.google.common.collect.testing.features.CollectionFeature.RESTRICTS_ELEMENTS;, +import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ADD;, +import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;, +import static com.google.common.collect.testing.features.CollectionSize.SEVERAL;, +import static com.google.common.collect.testing.features.CollectionSize.ZERO;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.collect.Multiset;, +import com.google.common.collect.Multiset.Entry;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +, +import java.util.ConcurrentModificationException;, +import java.util.Iterator;, +, +/**, + * Common superclass for {@link MultisetSetCountUnconditionallyTester} and, + * {@link MultisetSetCountConditionallyTester}. It is used by those testers to, + * test calls to the unconditional {@code setCount()} method and calls to the, + * conditional {@code setCount()} method when the expected present count is, + * correct., + *, + * @author Chris Povirk, + */, +@GwtCompatible(emulated = true), +public abstract class AbstractMultisetSetCountTester<E>, +    extends AbstractMultisetTester<E> {, +  /*, +   * TODO: consider adding MultisetFeatures.SUPPORTS_SET_COUNT. Currently we, +   * assume that using setCount() to increase the count is permitted iff add(), +   * is permitted and similarly for decrease/remove(). We assume that a, +   * setCount() no-op is permitted if either add() or remove() is permitted,, +   * though we also allow it to "succeed" if neither is permitted., +   */, +, +  private void assertSetCount(E element, int count) {, +    setCountCheckReturnValue(element, count);, +, +    assertEquals(, +        "multiset.count() should return the value passed to setCount()",, +        count, getMultiset().count(element));, +, +    int size = 0;, +    for (Multiset.Entry<E> entry : getMultiset().entrySet()) {, +      size += entry.getCount();, +    }, +    assertEquals(, +        "multiset.size() should be the sum of the counts of all entries",, +        size, getMultiset().size());, +  }, +, +  /**, +   * Call the {@code setCount()} method under test, and check its return value., +   */, +  abstract void setCountCheckReturnValue(E element, int count);, +, +  /**, +   * Call the {@code setCount()} method under test, but do not check its return, +   * value. Callers should use this method over, +   * {@link #setCountCheckReturnValue(Object, int)} when they expect, +   * {@code setCount()} to throw an exception, as checking the return value, +   * could produce an incorrect error message like, +   * "setCount() should return the original count" instead of the message passed, +   * to a later invocation of {@code fail()}, like "setCount should throw, +   * UnsupportedOperationException.", +   */, +  abstract void setCountNoCheckReturnValue(E element, int count);, +, +  private void assertSetCountIncreasingFailure(E element, int count) {, +    try {, +      setCountNoCheckReturnValue(element, count);, +      fail("a call to multiset.setCount() to increase an element's count ", +          + "should throw");, +    } catch (UnsupportedOperationException expected) {, +    }, +  }, +, +  private void assertSetCountDecreasingFailure(E element, int count) {, +    try {]