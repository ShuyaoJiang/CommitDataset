[+++ b/guava-gwt/test/com/google/common/primitives/UnsignedIntsTest_gwt.java, +public void testCheckedCast() throws Exception {, +  com.google.common.primitives.UnsignedIntsTest testCase = new com.google.common.primitives.UnsignedIntsTest();, +  testCase.testCheckedCast();, +}, +, +public void testSaturatedCast() throws Exception {, +  com.google.common.primitives.UnsignedIntsTest testCase = new com.google.common.primitives.UnsignedIntsTest();, +  testCase.testSaturatedCast();, +}, +, +++ b/guava-gwt/test/com/google/common/primitives/UnsignedIntsTest_gwt.java, +public void testCheckedCast() throws Exception {, +  com.google.common.primitives.UnsignedIntsTest testCase = new com.google.common.primitives.UnsignedIntsTest();, +  testCase.testCheckedCast();, +}, +, +public void testSaturatedCast() throws Exception {, +  com.google.common.primitives.UnsignedIntsTest testCase = new com.google.common.primitives.UnsignedIntsTest();, +  testCase.testSaturatedCast();, +}, +, +++ b/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testCheckedCast() {, +    for (long value : UNSIGNED_INTS) {, +      assertEquals(value, UnsignedInts.toLong(UnsignedInts.checkedCast(value)));, +    }, +    assertCastFails(1L << 32);, +    assertCastFails(-1L);, +    assertCastFails(Long.MAX_VALUE);, +    assertCastFails(Long.MIN_VALUE);, +  }, +, +  private static void assertCastFails(long value) {, +    try {, +      UnsignedInts.checkedCast(value);, +      fail("Cast to int should have failed: " + value);, +    } catch (IllegalArgumentException ex) {, +      assertThat(ex.getMessage()).contains(String.valueOf(value));, +    }, +  }, +, +  public void testSaturatedCast() {, +    for (long value : UNSIGNED_INTS) {, +      assertEquals(value, UnsignedInts.toLong(UnsignedInts.saturatedCast(value)));, +    }, +    assertEquals(GREATEST, UnsignedInts.saturatedCast(1L << 32));, +    assertEquals(LEAST, UnsignedInts.saturatedCast(-1L));, +    assertEquals(GREATEST, UnsignedInts.saturatedCast(Long.MAX_VALUE));, +    assertEquals(LEAST, UnsignedInts.saturatedCast(Long.MIN_VALUE));, +  }, +, +++ b/guava-gwt/test/com/google/common/primitives/UnsignedIntsTest_gwt.java, +public void testCheckedCast() throws Exception {, +  com.google.common.primitives.UnsignedIntsTest testCase = new com.google.common.primitives.UnsignedIntsTest();, +  testCase.testCheckedCast();, +}, +, +public void testSaturatedCast() throws Exception {, +  com.google.common.primitives.UnsignedIntsTest testCase = new com.google.common.primitives.UnsignedIntsTest();, +  testCase.testSaturatedCast();, +}, +, +++ b/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testCheckedCast() {, +    for (long value : UNSIGNED_INTS) {, +      assertEquals(value, UnsignedInts.toLong(UnsignedInts.checkedCast(value)));, +    }, +    assertCastFails(1L << 32);, +    assertCastFails(-1L);, +    assertCastFails(Long.MAX_VALUE);, +    assertCastFails(Long.MIN_VALUE);, +  }, +, +  private static void assertCastFails(long value) {, +    try {, +      UnsignedInts.checkedCast(value);, +      fail("Cast to int should have failed: " + value);, +    } catch (IllegalArgumentException ex) {, +      assertThat(ex.getMessage()).contains(String.valueOf(value));, +    }, +  }, +, +  public void testSaturatedCast() {, +    for (long value : UNSIGNED_INTS) {, +      assertEquals(value, UnsignedInts.toLong(UnsignedInts.saturatedCast(value)));, +    }, +    assertEquals(GREATEST, UnsignedInts.saturatedCast(1L << 32));, +    assertEquals(LEAST, UnsignedInts.saturatedCast(-1L));, +    assertEquals(GREATEST, UnsignedInts.saturatedCast(Long.MAX_VALUE));, +    assertEquals(LEAST, UnsignedInts.saturatedCast(Long.MIN_VALUE));, +  }, +, +++ b/guava/src/com/google/common/primitives/UnsignedInts.java, +   * Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if, +   * possible.]