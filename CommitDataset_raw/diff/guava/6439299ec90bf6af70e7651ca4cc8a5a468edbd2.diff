[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(this, nodeA, nodeB);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(this, nodeA, nodeB);, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +      Endpoints<N> newEndpoints = Endpoints.of(this, nodeA, nodeB);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(this, nodeA, nodeB);, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +      Endpoints<N> newEndpoints = Endpoints.of(this, nodeA, nodeB);, +++ b/guava/src/com/google/common/graph/Endpoints.java, + * <p>The {@link Endpoints} of a directed edge are an ordered pair of nodes (source and target)., + * The {@link Endpoints} of an undirected edge are an unordered pair of nodes. The nodes can be, + * accessed through the {@link #iterator()}, and in the directed case, will iterate in the order, + * {@link #source()}, {@link #target()}., +  /**, +   * Returns {@link Endpoints} representing the endpoints of an edge in {@code graph}., +   */, +  public static <N> Endpoints<N> of(Graph<?> graph, N nodeA, N nodeB) {, +    return graph.isDirected() ? ofDirected(nodeA, nodeB) : ofUndirected(nodeA, nodeB);, +   * Returns {@link Endpoints} representing the endpoints of a directed edge., +   * Returns {@link Endpoints} representing the endpoints of an undirected edge., +   * If these are the {@link Endpoints} of a directed edge, returns the node which is the source of, +   * that edge., +   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge, +   * If these are the {@link Endpoints} of a directed edge, returns the node which is the target of, +   * that edge., +   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge, +   * If these are the {@link Endpoints} of a directed edge, returns the {@link #source()};, +   * If these are the {@link Endpoints} of a directed edge, it is equal to the {@link #target()}., +   * The {@link Endpoints} of two directed edges are equal if their {@link #source()} and, +   * {@link #target()} are equal. The {@link Endpoints} of two undirected edges are equal if they, +   * contain the same nodes. The {@link Endpoints} of a directed edge are never equal to the, +   * {@link Endpoints} of an undirected edge., +  /**, +   * The {@link Endpoints} of a directed edge. It is guaranteed that all {@link Endpoints} of, +   * directed edges will be an instance of this class., +   */, +  static final class Directed<N> extends Endpoints<N> {, +  /**, +   * The {@link Endpoints} of an undirected edge. It is guaranteed that all {@link Endpoints} of, +   * undirected edges will be an instance of this class., +   */, +  static final class Undirected<N> extends Endpoints<N> {, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(this, nodeA, nodeB);, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +      Endpoints<N> newEndpoints = Endpoints.of(this, nodeA, nodeB);, +++ b/guava/src/com/google/common/graph/Endpoints.java, + * <p>The {@link Endpoints} of a directed edge are an ordered pair of nodes (source and target)., + * The {@link Endpoints} of an undirected edge are an unordered pair of nodes. The nodes can be, + * accessed through the {@link #iterator()}, and in the directed case, will iterate in the order, + * {@link #source()}, {@link #target()}., +  /**, +   * Returns {@link Endpoints} representing the endpoints of an edge in {@code graph}., +   */, +  public static <N> Endpoints<N> of(Graph<?> graph, N nodeA, N nodeB) {, +    return graph.isDirected() ? ofDirected(nodeA, nodeB) : ofUndirected(nodeA, nodeB);, +   * Returns {@link Endpoints} representing the endpoints of a directed edge., +   * Returns {@link Endpoints} representing the endpoints of an undirected edge., +   * If these are the {@link Endpoints} of a directed edge, returns the node which is the source of, +   * that edge., +   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge, +   * If these are the {@link Endpoints} of a directed edge, returns the node which is the target of, +   * that edge., +   * @throws UnsupportedOperationException if these are the {@link Endpoints} of a undirected edge, +   * If these are the {@link Endpoints} of a directed edge, returns the {@link #source()};, +   * If these are the {@link Endpoints} of a directed edge, it is equal to the {@link #target()}., +   * The {@link Endpoints} of two directed edges are equal if their {@link #source()} and, +   * {@link #target()} are equal. The {@link Endpoints} of two undirected edges are equal if they, +   * contain the same nodes. The {@link Endpoints} of a directed edge are never equal to the, +   * {@link Endpoints} of an undirected edge., +  /**, +   * The {@link Endpoints} of a directed edge. It is guaranteed that all {@link Endpoints} of, +   * directed edges will be an instance of this class., +   */, +  static final class Directed<N> extends Endpoints<N> {, +  /**, +   * The {@link Endpoints} of an undirected edge. It is guaranteed that all {@link Endpoints} of, +   * undirected edges will be an instance of this class., +   */, +  static final class Undirected<N> extends Endpoints<N> {, +++ b/guava/src/com/google/common/graph/GraphConstants.java, +      "Cannot call source()/target() on the endpoints of an undirected edge. Consider calling ", +          + "otherNode() to get a single node or using the endpoints' iterator to get both nodes.";, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(this, nodeA, nodeB);, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +      Endpoints<N> newEndpoints = Endpoints.of(this, nodeA, nodeB);, +++ b/guava/src/com/google/common/graph/Endpoints.java, + * <p>The {@link Endpoints} of a directed edge are an ordered pair of nodes (source and target)., + * The {@link Endpoints} of an undirected edge are an unordered pair of nodes. The nodes can be, + * accessed through the {@link #iterator()}, and in the directed case, will iterate in the order, + * {@link #source()}, {@link #target()}.]