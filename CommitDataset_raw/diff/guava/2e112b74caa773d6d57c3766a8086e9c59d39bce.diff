[+++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception, +   *     type is matched against the input's exception. "The input's exception" means the cause of, +   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a, +   *     different kind of exception, that exception itself. To avoid hiding bugs and other, +   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code, +   *     Throwable.class} in particular., +   * @param fallback the {@link Function} to be called if {@code input} fails with the expected, +   *     exception type. The function's argument is the input's exception. "The input's exception", +   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if, +   *     {@code get()} throws a different kind of exception, that exception itself., +   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception, +   *     type is matched against the input's exception. "The input's exception" means the cause of, +   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a, +   *     different kind of exception, that exception itself. To avoid hiding bugs and other, +   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code, +   *     Throwable.class} in particular., +   * @param fallback the {@link Function} to be called if {@code input} fails with the expected, +   *     exception type. The function's argument is the input's exception. "The input's exception", +   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if, +   *     {@code get()} throws a different kind of exception, that exception itself., +   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception, +   *     type is matched against the input's exception. "The input's exception" means the cause of, +   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a, +   *     different kind of exception, that exception itself. To avoid hiding bugs and other, +   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code, +   *     Throwable.class} in particular., +   * @param fallback the {@link AsyncFunction} to be called if {@code input} fails with the expected, +   *     exception type. The function's argument is the input's exception. "The input's exception", +   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if, +   *     {@code get()} throws a different kind of exception, that exception itself., +   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception, +   *     type is matched against the input's exception. "The input's exception" means the cause of, +   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a, +   *     different kind of exception, that exception itself. To avoid hiding bugs and other, +   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code, +   *     Throwable.class} in particular., +   * @param fallback the {@link AsyncFunction} to be called if {@code input} fails with the expected, +   *     exception type. The function's argument is the input's exception. "The input's exception", +   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if, +   *     {@code get()} throws a different kind of exception, that exception itself.]