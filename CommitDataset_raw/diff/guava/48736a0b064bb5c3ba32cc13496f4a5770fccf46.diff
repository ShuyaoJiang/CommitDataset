[+++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns an iterator over the iterators of the given iterables., +   */, +  private static <T> UnmodifiableIterator<Iterator<? extends T>> iterators(, +      Iterable<? extends Iterable<? extends T>> iterables) {, +    final Iterator<? extends Iterable<? extends T>> iterableIterator =, +        iterables.iterator();, +    return new UnmodifiableIterator<Iterator<? extends T>>() {, +      public boolean hasNext() {, +        return iterableIterator.hasNext();, +      }, +      public Iterator<? extends T> next() {, +        return iterableIterator.next().iterator();, +      }, +    };, +  }, +, +  /**, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns an iterator over the iterators of the given iterables., +   */, +  private static <T> UnmodifiableIterator<Iterator<? extends T>> iterators(, +      Iterable<? extends Iterable<? extends T>> iterables) {, +    final Iterator<? extends Iterable<? extends T>> iterableIterator =, +        iterables.iterator();, +    return new UnmodifiableIterator<Iterator<? extends T>>() {, +      public boolean hasNext() {, +        return iterableIterator.hasNext();, +      }, +      public Iterator<? extends T> next() {, +        return iterableIterator.next().iterator();, +      }, +    };, +  }, +, +  /**, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, +   * found. Note that the value defined as the "public suffix" may not be a, +   * public suffix according to {@link #isPublicSuffix()} if the domain ends, +   * with an excluded domain pattern such as "nhs.uk"., +      if (TldPatterns.EXACT.contains(ancestorName)) {, +        return i;, +      }, +, +      // Excluded domains (e.g. !nhs.uk) use the next highest, +      // domain as the effective public suffix (e.g. uk)., +, +      if (TldPatterns.EXCLUDED.contains(ancestorName)) {, +        return i + 1;, +      }, +, +      if (matchesWildcardPublicSuffix(ancestorName)) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns an iterator over the iterators of the given iterables., +   */, +  private static <T> UnmodifiableIterator<Iterator<? extends T>> iterators(, +      Iterable<? extends Iterable<? extends T>> iterables) {, +    final Iterator<? extends Iterable<? extends T>> iterableIterator =, +        iterables.iterator();, +    return new UnmodifiableIterator<Iterator<? extends T>>() {, +      public boolean hasNext() {, +        return iterableIterator.hasNext();, +      }, +      public Iterator<? extends T> next() {, +        return iterableIterator.next().iterator();, +      }, +    };, +  }, +, +  /**, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, +   * found. Note that the value defined as the "public suffix" may not be a, +   * public suffix according to {@link #isPublicSuffix()} if the domain ends, +   * with an excluded domain pattern such as "nhs.uk"., +      if (TldPatterns.EXACT.contains(ancestorName)) {, +        return i;, +      }, +, +      // Excluded domains (e.g. !nhs.uk) use the next highest, +      // domain as the effective public suffix (e.g. uk)., +, +      if (TldPatterns.EXCLUDED.contains(ancestorName)) {, +        return i + 1;, +      }, +, +      if (matchesWildcardPublicSuffix(ancestorName)) {, +++ b/gwt-test/com/google/common/base/TestModuleEntryPoint.java, +        Equivalence.class,, +        Equivalences.class,, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns an iterator over the iterators of the given iterables., +   */, +  private static <T> UnmodifiableIterator<Iterator<? extends T>> iterators(, +      Iterable<? extends Iterable<? extends T>> iterables) {, +    final Iterator<? extends Iterable<? extends T>> iterableIterator =, +        iterables.iterator();, +    return new UnmodifiableIterator<Iterator<? extends T>>() {, +      public boolean hasNext() {, +        return iterableIterator.hasNext();, +      }]