[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, + * A {@link Multiset} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., + * <p><b>Grouped iteration.</b> In all current implementations, duplicate elements always appear, + * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of, + * that element when the multiset was created. All view collections share the same iteration order, + * as the parent multiset., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, + * A {@link Multiset} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., + * <p><b>Grouped iteration.</b> In all current implementations, duplicate elements always appear, + * consecutively when iterating. Elements iterate in order by the <i>first</i> appearance of, + * that element when the multiset was created. All view collections share the same iteration order, + * as the parent multiset., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +   * Returns an immutable multiset containing the given elements, in the "grouped iteration order", +   * described in the class documentation., +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, + * A {@link Collection} whose contents will never change, and which offers a few additional, + * guarantees detailed below., + * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableCollection} as a type (just as, + * with {@link Collection} itself). Prefer subtypes such as {@link ImmutableSet} or {@link, + * ImmutableList}, which have well-defined {@link #equals} semantics, thus avoiding a common source, + * of bugs and confusion., + * <h3>About <i>all</i> public {@code Immutable-} types in this package</h3>, + *, + * <h4>Guarantees</h4>, + *, + * <p>Each makes the following guarantees:, + *, + * <ul>, + * <li><b>Shallow immutability.</b> Elements can never be added, removed or replaced in this, + *     collection. This is a stronger guarantee than that of {@link, + *     Collections#unmodifiableCollection}, whose contents change whenever the wrapped collection, + *     is modified., + * <li><b>Null-hostility.</b> This collection will never contain a null element., + * <li><b>Deterministic iteration.</b> The specific iteration order depends on how the collection, + *     was created. See the appropriate factory method for details., + * <li><b>Thread safety.</b> It is safe to access this collection concurrently from multiple, + *     threads., + * <li><b>Integrity.</b> This type cannot be subclassed outside this package (which would allow, + *     these guarantees to be violated)., + * </ul>, + *, + * <h4>Treat as interfaces, not implementations</h4>, + *, + * <p>Each of these public classes, such as {@link ImmutableList}, is a <i>type</i>, offering, + * meaningful behavioral guarantees -- not a specific <i>implementation</i> (as in the case of, say,, + * {@link ArrayList}). You should treat them as interfaces in every important sense of the word., + *, + * <p>For field types and method return types, you should generally use the immutable type (such as, + * {@link ImmutableList}) instead of the basic collection interface type (such as {@link List}). The, + * semantic guarantees listed above are almost always useful to communicate to your callers., + *, + * <p>On the other hand, a <i>parameter</i> type of {@link ImmutableList} is generally a nuisance to, + * callers; instead, accept {@link Iterable} and pass it to {@link ImmutableList#copyOf(Iterable)}, + * yourself., + *, + * <h4>Creation</h4>, + *, + * <p>Except for logically "abstract" types like {@code ImmutableCollection} itself, each {@code, + * Immutable} type provides the static operations you need to obtain instances of that type:, + *, + * <ul>, + * <li>Static methods named {@code of}, accepting an explicit list of elements or entries., + * <li>Static methods named {@code copyOf}, accepting an existing collection whose contents should, + *     be copied., + * <li>A static nested {@code Builder} class which can be used to populate a new immutable instance., + * </ul>, + *, + * <h4>Other common properties</h4>, + *, + * <ul>, + * <li>View collections, such as {@link ImmutableMap#keySet} or {@link ImmutableList#subList},, + *     return the appropriate {@code Immutable-} subtype. This is true even when the language does]