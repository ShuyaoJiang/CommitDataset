[+++ b/guava-tests/test/com/google/common/cache/ComputingCacheTest.java, +    assertNull(map.put(one, two));, +    assertSame(two, map.get(one));, +    map.putAll(ImmutableMap.of(two, three));, +    assertSame(three, map.get(two));, +    assertSame(two, map.putIfAbsent(one, three));, +    assertSame(two, map.get(one));, +    assertNull(map.putIfAbsent(three, one));, +    assertSame(one, map.get(three));, +    assertSame(two, map.replace(one, three));, +    assertSame(three, map.get(one));, +    assertFalse(map.replace(one, two, three));, +    assertSame(three, map.get(one));, +    assertTrue(map.replace(one, three, two));, +    assertSame(two, map.get(one));, +    assertEquals(3, map.size());, +    map.clear();, +++ b/guava-tests/test/com/google/common/cache/ComputingCacheTest.java, +    assertNull(map.put(one, two));, +    assertSame(two, map.get(one));, +    map.putAll(ImmutableMap.of(two, three));, +    assertSame(three, map.get(two));, +    assertSame(two, map.putIfAbsent(one, three));, +    assertSame(two, map.get(one));, +    assertNull(map.putIfAbsent(three, one));, +    assertSame(one, map.get(three));, +    assertSame(two, map.replace(one, three));, +    assertSame(three, map.get(one));, +    assertFalse(map.replace(one, two, three));, +    assertSame(three, map.get(one));, +    assertTrue(map.replace(one, three, two));, +    assertSame(two, map.get(one));, +    assertEquals(3, map.size());, +    map.clear();, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +  public void testPut_populated() {, +      for (int i = WARMUP_MIN; i < WARMUP_MAX; i++) {, +        Entry<Object, Object> entry = warmed.get(i - WARMUP_MIN);, +        Object newValue = new Object();, +        assertSame(entry.getValue(), cache.asMap().put(entry.getKey(), newValue));, +        Object newKey = new Object();, +        assertNull(cache.asMap().put(newKey, entry.getValue()));, +        // this getUnchecked() call shouldn't be a cache miss; verified below, +        assertEquals(newValue, cache.getUnchecked(entry.getKey()));, +        assertEquals(entry.getValue(), cache.getUnchecked(newKey));, +      assertEquals(WARMUP_SIZE, cache.stats().missCount());, +  public void testPutIfAbsent_populated() {, +      for (int i = WARMUP_MIN; i < WARMUP_MAX; i++) {, +        Entry<Object, Object> entry = warmed.get(i - WARMUP_MIN);, +        Object newValue = new Object();, +        assertSame(entry.getValue(), cache.asMap().putIfAbsent(entry.getKey(), newValue));, +        Object newKey = new Object();, +        assertNull(cache.asMap().putIfAbsent(newKey, entry.getValue()));, +        // this getUnchecked() call shouldn't be a cache miss; verified below, +        assertEquals(entry.getValue(), cache.getUnchecked(entry.getKey()));, +        assertEquals(entry.getValue(), cache.getUnchecked(newKey));, +      assertEquals(WARMUP_SIZE, cache.stats().missCount());, +  public void testPutAll_populated() {, +      Object newKey = new Object();, +      Object newValue = new Object();, +      cache.asMap().putAll(ImmutableMap.of(newKey, newValue));, +      // this getUnchecked() call shouldn't be a cache miss; verified below, +      assertEquals(newValue, cache.getUnchecked(newKey));, +      assertEquals(WARMUP_SIZE, cache.stats().missCount());, +  public void testReplace_populated() {, +      for (int i = WARMUP_MIN; i < WARMUP_MAX; i++) {, +        Entry<Object, Object> entry = warmed.get(i - WARMUP_MIN);, +        Object newValue = new Object();, +        assertSame(entry.getValue(), cache.asMap().replace(entry.getKey(), newValue));, +        assertTrue(cache.asMap().replace(entry.getKey(), newValue, entry.getValue()));, +        Object newKey = new Object();, +        assertNull(cache.asMap().replace(newKey, entry.getValue()));, +        assertFalse(cache.asMap().replace(newKey, entry.getValue(), newValue));, +        // this getUnchecked() call shouldn't be a cache miss; verified below, +        assertEquals(entry.getValue(), cache.getUnchecked(entry.getKey()));, +        assertFalse(cache.asMap().containsKey(newKey));, +      assertEquals(WARMUP_SIZE, cache.stats().missCount());, +++ b/guava-tests/test/com/google/common/cache/ComputingCacheTest.java, +    assertNull(map.put(one, two));, +    assertSame(two, map.get(one));, +    map.putAll(ImmutableMap.of(two, three));, +    assertSame(three, map.get(two));, +    assertSame(two, map.putIfAbsent(one, three));, +    assertSame(two, map.get(one));, +    assertNull(map.putIfAbsent(three, one));, +    assertSame(one, map.get(three));, +    assertSame(two, map.replace(one, three));, +    assertSame(three, map.get(one));, +    assertFalse(map.replace(one, two, three));, +    assertSame(three, map.get(one));, +    assertTrue(map.replace(one, three, two));, +    assertSame(two, map.get(one));, +    assertEquals(3, map.size());, +    map.clear();, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +  public void testPut_populated() {, +      for (int i = WARMUP_MIN; i < WARMUP_MAX; i++) {, +        Entry<Object, Object> entry = warmed.get(i - WARMUP_MIN);, +        Object newValue = new Object();, +        assertSame(entry.getValue(), cache.asMap().put(entry.getKey(), newValue));]