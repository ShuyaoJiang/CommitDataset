[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashBiMap.java, +    super(, +        Maps.<K, V>newHashMapWithExpectedSize(expectedSize),, +        Maps.<V, K>newHashMapWithExpectedSize(expectedSize));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashBiMap.java, +    super(, +        Maps.<K, V>newHashMapWithExpectedSize(expectedSize),, +        Maps.<V, K>newHashMapWithExpectedSize(expectedSize));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashMultiset.java, +    super(Maps.<E, AtomicInteger>newHashMapWithExpectedSize(distinctElements));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashBiMap.java, +    super(, +        Maps.<K, V>newHashMapWithExpectedSize(expectedSize),, +        Maps.<V, K>newHashMapWithExpectedSize(expectedSize));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashMultiset.java, +    super(Maps.<E, AtomicInteger>newHashMapWithExpectedSize(distinctElements));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    final Set<K> seenKeys = Sets.<K>newHashSetWithExpectedSize(keySet().size());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashBiMap.java, +    super(, +        Maps.<K, V>newHashMapWithExpectedSize(expectedSize),, +        Maps.<V, K>newHashMapWithExpectedSize(expectedSize));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashMultiset.java, +    super(Maps.<E, AtomicInteger>newHashMapWithExpectedSize(distinctElements));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    final Set<K> seenKeys = Sets.<K>newHashSetWithExpectedSize(keySet().size());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * Creates a {@code HashMap} instance, with a high enough "initial capacity", +   * that it <i>should</i> hold {@code expectedSize} elements without growth., +   * This behavior cannot be broadly guaranteed, but it is observed to be true, +   * for OpenJDK 1.6. It also can't be guaranteed that the method isn't, +   * inadvertently <i>oversizing</i> the returned map., +   * @param expectedSize the number of elements you expect to add to the, +   *        returned map, +   *         expectedSize} elements without resizing, +   * Returns a capacity that is sufficient to keep the map from being resized as, +   * long as it grows no larger than expectedSize and the load factor is >= its, +   * default (0.75)., +    if (expectedSize < 3) {, +      return expectedSize + 1;, +    }, +    if (expectedSize < Ints.MAX_POWER_OF_TWO) {, +      return expectedSize + expectedSize / 3;, +    }, +    return Integer.MAX_VALUE; // any large value, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashBiMap.java, +    super(, +        Maps.<K, V>newHashMapWithExpectedSize(expectedSize),, +        Maps.<V, K>newHashMapWithExpectedSize(expectedSize));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashMultiset.java, +    super(Maps.<E, AtomicInteger>newHashMapWithExpectedSize(distinctElements));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    final Set<K> seenKeys = Sets.<K>newHashSetWithExpectedSize(keySet().size());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * Creates a {@code HashMap} instance, with a high enough "initial capacity", +   * that it <i>should</i> hold {@code expectedSize} elements without growth., +   * This behavior cannot be broadly guaranteed, but it is observed to be true, +   * for OpenJDK 1.6. It also can't be guaranteed that the method isn't, +   * inadvertently <i>oversizing</i> the returned map., +   * @param expectedSize the number of elements you expect to add to the, +   *        returned map, +   *         expectedSize} elements without resizing, +   * Returns a capacity that is sufficient to keep the map from being resized as, +   * long as it grows no larger than expectedSize and the load factor is >= its, +   * default (0.75)., +    if (expectedSize < 3) {, +      return expectedSize + 1;, +    }, +    if (expectedSize < Ints.MAX_POWER_OF_TWO) {, +      return expectedSize + expectedSize / 3;, +    }, +    return Integer.MAX_VALUE; // any large value, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +    HashSet<E> set = newHashSetWithExpectedSize(elements.length);, +   * Creates a {@code HashSet} instance, with a high enough "initial capacity", +   * that it <i>should</i> hold {@code expectedSize} elements without growth., +   * This behavior cannot be broadly guaranteed, but it is observed to be true, +   * for OpenJDK 1.6. It also can't be guaranteed that the method isn't, +   * inadvertently <i>oversizing</i> the returned set., +   * @param expectedSize the number of elements you expect to add to the, +   *        returned set, +   *         expectedSize} elements without resizing, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashBiMap.java, +    super(, +        Maps.<K, V>newHashMapWithExpectedSize(expectedSize),, +        Maps.<V, K>newHashMapWithExpectedSize(expectedSize));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/HashMultiset.java, +    super(Maps.<E, AtomicInteger>newHashMapWithExpectedSize(distinctElements));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +    final Set<K> seenKeys = Sets.<K>newHashSetWithExpectedSize(keySet().size());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * Creates a {@code HashMap} instance, with a high enough "initial capacity", +   * that it <i>should</i> hold {@code expectedSize} elements without growth., +   * This behavior cannot be broadly guaranteed, but it is observed to be true, +   * for OpenJDK 1.6. It also can't be guaranteed that the method isn't, +   * inadvertently <i>oversizing</i> the returned map., +   * @param expectedSize the number of elements you expect to add to the, +   *        returned map, +   *         expectedSize} elements without resizing, +   * Returns a capacity that is sufficient to keep the map from being resized as]