[+++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static com.google.common.hash.Hashing.goodFastHash;, +  /**, +   * Tests equality of {@link Hashing#goodFastHash} instances. This test must be separate from, +   * {@link #testSeededHashFunctionEquals} because the parameter to {@code goodFastHash} is a size,, +   * not a seed, and because that size is rounded up. Thus, {@code goodFastHash} instances with, +   * different parameters can be equal. That fact is a problem for {@code, +   * testSeededHashFunctionEquals}., +   */, +  public void testGoodFastHashEquals() throws Exception {, +    HashFunction hashFunction1a = goodFastHash(1);, +    HashFunction hashFunction1b = goodFastHash(32);, +    HashFunction hashFunction2a = goodFastHash(33);, +    HashFunction hashFunction2b = goodFastHash(128);, +    HashFunction hashFunction3a = goodFastHash(129);, +    HashFunction hashFunction3b = goodFastHash(256);, +    HashFunction hashFunction4a = goodFastHash(257);, +    HashFunction hashFunction4b = goodFastHash(384);, +, +    new EqualsTester(), +        .addEqualityGroup(hashFunction1a, hashFunction1b), +        .addEqualityGroup(hashFunction2a, hashFunction2b), +        .addEqualityGroup(hashFunction3a, hashFunction3b), +        .addEqualityGroup(hashFunction4a, hashFunction4b), +        .testEquals();, +, +    assertEquals(hashFunction1a.toString(), hashFunction1b.toString());, +    assertEquals(hashFunction2a.toString(), hashFunction2b.toString());, +    assertEquals(hashFunction3a.toString(), hashFunction3b.toString());, +    assertEquals(hashFunction4a.toString(), hashFunction4b.toString());, +  }, +, +          && method.getParameterTypes().length != 0 // only the seeded hash functions, +          && !method.getName().equals("goodFastHash")) { // tested in testGoodFastHashEquals, +            params1[i] = random.nextInt();, +            params2[i] = random.nextInt();]