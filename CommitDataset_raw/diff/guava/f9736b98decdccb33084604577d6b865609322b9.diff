[+++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +    long now = ticker.read();, +      expireEntries(segment, now);, +  static void expireEntries(Segment<?, ?> segment, long now) {, +      segment.expireEntries(now);, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +    long now = ticker.read();, +      expireEntries(segment, now);, +  static void expireEntries(Segment<?, ?> segment, long now) {, +      segment.expireEntries(now);, +++ b/guava-tests/test/com/google/common/cache/CustomConcurrentHashMapTest.java, +import static com.google.common.cache.CacheBuilder.NULL_TICKER;, +    assertSame(NULL_TICKER, map.ticker);, +      assertEquals(originalCount, countLiveEntries(map, 0));, +    assertEquals(liveCount, countLiveEntries(map, 0));, +      assertEquals(liveCount, countLiveEntries(map, 0));, +  private static <K, V> int countLiveEntries(CustomConcurrentHashMap<K, V> map, long now) {, +          if (map.isLive(e, now)) {, +    segment.recordWrite(entry, 1, map.ticker.read());, +    segment.recordWrite(entry, 1, map.ticker.read());, +    segment.recordWrite(entry, 1, map.ticker.read());, +        segment.recordWrite(entry, 1, map.ticker.read());, +          segment.recordRead(entry, map.ticker.read());, +        segment.recordWrite(entry, 1, map.ticker.read());, +          segment.recordWrite(entry, 1, map.ticker.read());, +    assertTrue(map.isLive(entry, ticker.read()));, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.expireEntries(ticker.read());, +    assertTrue(map.isLive(entry, ticker.read()));, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.expireEntries(ticker.read());, +      segment.recordWrite(entry, 1, map.ticker.read());, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +    long now = ticker.read();, +      expireEntries(segment, now);, +  static void expireEntries(Segment<?, ?> segment, long now) {, +      segment.expireEntries(now);, +++ b/guava-tests/test/com/google/common/cache/CustomConcurrentHashMapTest.java, +import static com.google.common.cache.CacheBuilder.NULL_TICKER;, +    assertSame(NULL_TICKER, map.ticker);, +      assertEquals(originalCount, countLiveEntries(map, 0));, +    assertEquals(liveCount, countLiveEntries(map, 0));, +      assertEquals(liveCount, countLiveEntries(map, 0));, +  private static <K, V> int countLiveEntries(CustomConcurrentHashMap<K, V> map, long now) {, +          if (map.isLive(e, now)) {, +    segment.recordWrite(entry, 1, map.ticker.read());, +    segment.recordWrite(entry, 1, map.ticker.read());, +    segment.recordWrite(entry, 1, map.ticker.read());, +        segment.recordWrite(entry, 1, map.ticker.read());, +          segment.recordRead(entry, map.ticker.read());, +        segment.recordWrite(entry, 1, map.ticker.read());, +          segment.recordWrite(entry, 1, map.ticker.read());, +    assertTrue(map.isLive(entry, ticker.read()));, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.expireEntries(ticker.read());, +    assertTrue(map.isLive(entry, ticker.read()));, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.recordRead(entry, ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.expireEntries(ticker.read());, +    segment.expireEntries(ticker.read());, +      segment.recordWrite(entry, 1, map.ticker.read());, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +  static final Ticker NULL_TICKER = new Ticker() {, +    @Override, +    public long read() {, +      return 0;, +    }, +  };, +, +  Ticker getTicker(boolean recordsTime) {, +    if (ticker != null) {, +      return ticker;, +    }, +    return recordsTime ? Ticker.systemTicker() : NULL_TICKER;, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +    long now = ticker.read();, +      expireEntries(segment, now);, +  static void expireEntries(Segment<?, ?> segment, long now) {, +      segment.expireEntries(now);, +++ b/guava-tests/test/com/google/common/cache/CustomConcurrentHashMapTest.java, +import static com.google.common.cache.CacheBuilder.NULL_TICKER;, +    assertSame(NULL_TICKER, map.ticker);, +      assertEquals(originalCount, countLiveEntries(map, 0));, +    assertEquals(liveCount, countLiveEntries(map, 0));]