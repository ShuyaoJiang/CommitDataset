[+++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +import java.util.Iterator;, +  public void testIteratorMinAndMax() {, +    List<Integer> ints = Lists.newArrayList(5, 3, 0, 9);, +    assertEquals(9, (int) numberOrdering.max(ints.iterator()));, +    assertEquals(0, (int) numberOrdering.min(ints.iterator()));, +, +    // when the values are the same, the first argument should be returned, +    Integer a = new Integer(4);, +    Integer b = new Integer(4);, +    ints = Lists.newArrayList(a, b, b);, +    assertSame(a, numberOrdering.max(ints.iterator()));, +    assertSame(a, numberOrdering.min(ints.iterator()));, +  }, +, +  public void testIteratorMinExhaustsIterator() {, +    List<Integer> ints = Lists.newArrayList(9, 0, 3, 5);, +    Iterator<Integer> iterator = ints.iterator();, +    assertEquals(0, (int) numberOrdering.min(iterator));, +    assertFalse(iterator.hasNext());, +  }, +, +  public void testIteratorMaxExhaustsIterator() {, +    List<Integer> ints = Lists.newArrayList(9, 0, 3, 5);, +    Iterator<Integer> iterator = ints.iterator();, +    assertEquals(9, (int) numberOrdering.max(iterator));, +    assertFalse(iterator.hasNext());, +  }, +, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +import java.util.Iterator;, +  public void testIteratorMinAndMax() {, +    List<Integer> ints = Lists.newArrayList(5, 3, 0, 9);, +    assertEquals(9, (int) numberOrdering.max(ints.iterator()));, +    assertEquals(0, (int) numberOrdering.min(ints.iterator()));, +, +    // when the values are the same, the first argument should be returned, +    Integer a = new Integer(4);, +    Integer b = new Integer(4);, +    ints = Lists.newArrayList(a, b, b);, +    assertSame(a, numberOrdering.max(ints.iterator()));, +    assertSame(a, numberOrdering.min(ints.iterator()));, +  }, +, +  public void testIteratorMinExhaustsIterator() {, +    List<Integer> ints = Lists.newArrayList(9, 0, 3, 5);, +    Iterator<Integer> iterator = ints.iterator();, +    assertEquals(0, (int) numberOrdering.min(iterator));, +    assertFalse(iterator.hasNext());, +  }, +, +  public void testIteratorMaxExhaustsIterator() {, +    List<Integer> ints = Lists.newArrayList(9, 0, 3, 5);, +    Iterator<Integer> iterator = ints.iterator();, +    assertEquals(9, (int) numberOrdering.max(iterator));, +    assertFalse(iterator.hasNext());, +  }, +, +++ b/guava/src/com/google/common/collect/Ordering.java, +   * there are multiple greatest values, the first of those is returned. The, +   * iterator will be left exhausted: its {@code hasNext()} method will return, +   * {@code false}., +   * @param iterator the iterator whose maximum element is to be determined, +   * @throws NoSuchElementException if {@code iterator} is empty, +   *, +   * @since 11.0, +  @Beta, +  public <E extends T> E max(Iterator<E> iterator) {, +   * @param iterable the iterable whose maximum element is to be determined, +   * @throws NoSuchElementException if {@code iterable} is empty, +   * @throws ClassCastException if the parameters are not <i>mutually, +   *     comparable</i> under this ordering., +   */, +  public <E extends T> E max(Iterable<E> iterable) {, +    return max(iterable.iterator());, +  }, +, +  /**, +   * Returns the greatest of the specified values according to this ordering. If, +   * there are multiple greatest values, the first of those is returned., +   *, +   * there are multiple least values, the first of those is returned. The, +   * iterator will be left exhausted: its {@code hasNext()} method will return, +   * {@code false}., +   * @param iterator the iterator whose minimum element is to be determined, +   * @throws NoSuchElementException if {@code iterator} is empty, +   *, +   * @since 11.0, +  @Beta, +  public <E extends T> E min(Iterator<E> iterator) {, +   * @param iterable the iterable whose minimum element is to be determined, +   * @throws NoSuchElementException if {@code iterable} is empty, +   * @throws ClassCastException if the parameters are not <i>mutually, +   *     comparable</i> under this ordering., +   */, +  public <E extends T> E min(Iterable<E> iterable) {, +    return min(iterable.iterator());, +  }, +, +  /**]