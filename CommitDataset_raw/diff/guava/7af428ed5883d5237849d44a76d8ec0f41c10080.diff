[+++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +        return new RegularImmutableBiMap<K, V>(entryArray.length, entryArray);, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +        return new RegularImmutableBiMap<K, V>(entryArray.length, entryArray);, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +  static <K, V> ImmutableMapEntry<K, V> entryOf(K key, V value) {, +    return new ImmutableMapEntry<K, V>(key, value);, +    ImmutableMapEntry<K, V>[] entries;, +      this.entries = new ImmutableMapEntry[initialCapacity];, +      ImmutableMapEntry<K, V> entry = entryOf(key, value);, +        return new RegularImmutableMap<K, V>(entryArray.length, entryArray);, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +        return new RegularImmutableBiMap<K, V>(entryArray.length, entryArray);, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +  static <K, V> ImmutableMapEntry<K, V> entryOf(K key, V value) {, +    return new ImmutableMapEntry<K, V>(key, value);, +    ImmutableMapEntry<K, V>[] entries;, +      this.entries = new ImmutableMapEntry[initialCapacity];, +      ImmutableMapEntry<K, V> entry = entryOf(key, value);, +        return new RegularImmutableMap<K, V>(entryArray.length, entryArray);, +++ b/guava/src/com/google/common/collect/ImmutableMapEntry.java, + * This base implementation has no key or value pointers, so instances of ImmutableMapEntry, + * (but not its subclasses) can be reused when copied from one ImmutableMap to another., + *, +class ImmutableMapEntry<K, V> extends ImmutableEntry<K, V> {, +  ImmutableMapEntry<K, V> getNextInKeyBucket() {, +    return null;, +  @Nullable, +  ImmutableMapEntry<K, V> getNextInValueBucket() {, +    return null;, +  }, +  , +  /**, +   * Returns true if this entry has no bucket links and can safely be reused as a terminal, +   * entry in a bucket in another map., +   */, +  boolean isReusable() {, +    return true;, +  }, +  , +  static class NonTerminalImmutableMapEntry<K, V> extends ImmutableMapEntry<K, V> {, +    private final transient ImmutableMapEntry<K, V> nextInKeyBucket;, +, +    NonTerminalImmutableMapEntry(K key, V value, ImmutableMapEntry<K, V> nextInKeyBucket) {, +      this.nextInKeyBucket = nextInKeyBucket;, +    final ImmutableMapEntry<K, V> getNextInKeyBucket() {, +      return nextInKeyBucket;, +    }, +, +    @Override, +    final boolean isReusable() {, +      return false;, +    }, +  }, +, +  static final class NonTerminalImmutableBiMapEntry<K, V>, +      extends NonTerminalImmutableMapEntry<K, V> {, +    private final transient ImmutableMapEntry<K, V> nextInValueBucket;, +, +    NonTerminalImmutableBiMapEntry(K key, V value, ImmutableMapEntry<K, V> nextInKeyBucket,, +        ImmutableMapEntry<K, V> nextInValueBucket) {, +      super(key, value, nextInKeyBucket);, +      this.nextInValueBucket = nextInValueBucket;, +      return nextInValueBucket;, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +        return new RegularImmutableBiMap<K, V>(entryArray.length, entryArray);, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +  static <K, V> ImmutableMapEntry<K, V> entryOf(K key, V value) {, +    return new ImmutableMapEntry<K, V>(key, value);, +    ImmutableMapEntry<K, V>[] entries;, +      this.entries = new ImmutableMapEntry[initialCapacity];, +      ImmutableMapEntry<K, V> entry = entryOf(key, value);, +        return new RegularImmutableMap<K, V>(entryArray.length, entryArray);, +++ b/guava/src/com/google/common/collect/ImmutableMapEntry.java, + * This base implementation has no key or value pointers, so instances of ImmutableMapEntry, + * (but not its subclasses) can be reused when copied from one ImmutableMap to another., + *, +class ImmutableMapEntry<K, V> extends ImmutableEntry<K, V> {, +  ImmutableMapEntry<K, V> getNextInKeyBucket() {, +    return null;, +  @Nullable, +  ImmutableMapEntry<K, V> getNextInValueBucket() {, +    return null;, +  }, +  , +  /**, +   * Returns true if this entry has no bucket links and can safely be reused as a terminal, +   * entry in a bucket in another map., +   */, +  boolean isReusable() {, +    return true;, +  }, +  , +  static class NonTerminalImmutableMapEntry<K, V> extends ImmutableMapEntry<K, V> {, +    private final transient ImmutableMapEntry<K, V> nextInKeyBucket;, +, +    NonTerminalImmutableMapEntry(K key, V value, ImmutableMapEntry<K, V> nextInKeyBucket) {, +      this.nextInKeyBucket = nextInKeyBucket;, +    final ImmutableMapEntry<K, V> getNextInKeyBucket() {, +      return nextInKeyBucket;]