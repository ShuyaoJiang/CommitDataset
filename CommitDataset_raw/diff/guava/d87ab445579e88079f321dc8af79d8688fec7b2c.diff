[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +import java.util.LinkedHashMap;, +  private static class KeyList<K, V> {, +    Node<K, V> head;, +    Node<K, V> tail;, +    int count;, +    , +    KeyList(Node<K, V> firstNode) {, +      this(firstNode, firstNode, 1);, +    }, +    , +    KeyList(Node<K, V> keyHead, Node<K, V> keyTail, int keyCount) {, +      this.head = keyHead;, +      this.tail = keyTail;, +      this.count = keyCount;, +    }, +  }, +, +  private transient Map<K, KeyList<K, V>> keyToKeyList;, +  private transient int size;, +    keyToKeyList = Maps.newLinkedHashMap();, +    keyToKeyList = new LinkedHashMap<K, KeyList<K, V>>(expectedKeys);, +      keyToKeyList.put(key, new KeyList<K, V>(node));, +      tail = node;, +      KeyList<K, V> keyList = keyToKeyList.get(key);, +      if (keyList == null) {, +        keyToKeyList.put(key, keyList = new KeyList<K, V>(node));, +        keyList.count++;, +        Node<K, V> keyTail = keyList.tail;, +        keyList.tail = node;, +      KeyList<K, V> keyList = keyToKeyList.get(key);, +      keyList.count++;, +        keyToKeyList.get(key).head = node;, +    size++;, +    if (node.previousSibling == null && node.nextSibling == null) {, +      keyToKeyList.remove(node.key);, +    } else {, +      KeyList<K, V> keyList = keyToKeyList.get(node.key);, +      keyList.count--;, +, +      if (node.previousSibling == null) {, +        keyList.head = node.nextSibling;, +      } else {, +      , +      if (node.nextSibling == null) {, +        keyList.tail = node.previousSibling;, +      } else {, +    }, +    size--;, +      KeyList<K, V> keyList = keyToKeyList.get(key);, +      next = (keyList == null) ? null : keyList.head;, +      KeyList<K,V> keyList = keyToKeyList.get(key);, +      int size = (keyList == null) ? 0 : keyList.count;, +        previous = (keyList == null) ? null : keyList.tail;, +        next = (keyList == null) ? null : keyList.head;, +    return size;, +    return keyToKeyList.containsKey(key);, +    keyToKeyList.clear();, +    size = 0;, +        KeyList<K, V> keyList = keyToKeyList.get(key);, +        return (keyList == null) ? 0 : keyList.count;, +          return keyToKeyList.size();, +      return size;, +      KeyList<K, V> keyList = keyToKeyList.get(element);, +      return (keyList == null) ? 0 : keyList.count;, +              return keyToKeyList.get(key).count;, +          return size;, +          return size;, +          return keyToKeyList.size();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +import java.util.LinkedHashMap;, +  private static class KeyList<K, V> {, +    Node<K, V> head;, +    Node<K, V> tail;, +    int count;, +    , +    KeyList(Node<K, V> firstNode) {, +      this(firstNode, firstNode, 1);, +    }, +    , +    KeyList(Node<K, V> keyHead, Node<K, V> keyTail, int keyCount) {, +      this.head = keyHead;, +      this.tail = keyTail;, +      this.count = keyCount;, +    }, +  }, +, +  private transient Map<K, KeyList<K, V>> keyToKeyList;, +  private transient int size;, +    keyToKeyList = Maps.newLinkedHashMap();, +    keyToKeyList = new LinkedHashMap<K, KeyList<K, V>>(expectedKeys);, +      keyToKeyList.put(key, new KeyList<K, V>(node));, +      tail = node;, +      KeyList<K, V> keyList = keyToKeyList.get(key);, +      if (keyList == null) {, +        keyToKeyList.put(key, keyList = new KeyList<K, V>(node));, +        keyList.count++;, +        Node<K, V> keyTail = keyList.tail;, +        keyList.tail = node;, +      KeyList<K, V> keyList = keyToKeyList.get(key);]