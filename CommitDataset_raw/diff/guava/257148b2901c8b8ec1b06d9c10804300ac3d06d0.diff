[+++ b/guava/src/com/google/common/collect/FilteredEntryMultimap.java, +  boolean removeEntriesIf(Predicate<? super Entry<K, Collection<V>>> predicate) {, +          return removeEntriesIf(Maps.<K>keyPredicateOnEntries(in(c)));, +          return removeEntriesIf(Maps.<K>keyPredicateOnEntries(not(in(c))));, +          return removeEntriesIf(in(c));, +          return removeEntriesIf(not(in(c)));, +          return removeEntriesIf(Maps.<Collection<V>>valuePredicateOnEntries(in(c)));, +          return removeEntriesIf(Maps.<Collection<V>>valuePredicateOnEntries(not(in(c))));, +        private boolean removeEntriesIf(final Predicate<? super Multiset.Entry<K>> predicate) {, +          return FilteredEntryMultimap.this.removeEntriesIf(, +              new Predicate<Map.Entry<K, Collection<V>>>() {, +          return removeEntriesIf(in(c));, +          return removeEntriesIf(not(in(c)));, +++ b/guava/src/com/google/common/collect/FilteredEntryMultimap.java, +  boolean removeEntriesIf(Predicate<? super Entry<K, Collection<V>>> predicate) {, +          return removeEntriesIf(Maps.<K>keyPredicateOnEntries(in(c)));, +          return removeEntriesIf(Maps.<K>keyPredicateOnEntries(not(in(c))));, +          return removeEntriesIf(in(c));, +          return removeEntriesIf(not(in(c)));, +          return removeEntriesIf(Maps.<Collection<V>>valuePredicateOnEntries(in(c)));, +          return removeEntriesIf(Maps.<Collection<V>>valuePredicateOnEntries(not(in(c))));, +        private boolean removeEntriesIf(final Predicate<? super Multiset.Entry<K>> predicate) {, +          return FilteredEntryMultimap.this.removeEntriesIf(, +              new Predicate<Map.Entry<K, Collection<V>>>() {, +          return removeEntriesIf(in(c));, +          return removeEntriesIf(not(in(c)));, +++ b/guava/src/com/google/common/collect/StandardTable.java, +    boolean removeFromColumnIf(Predicate<? super Entry<R, V>> predicate) {, +        removeFromColumnIf(alwaysTrue());, +        return removeFromColumnIf(not(in(c)));, +        return removeFromColumnIf(Maps.<R>keyPredicateOnEntries(not(in(c))));, +        return obj != null && removeFromColumnIf(Maps.<V>valuePredicateOnEntries(equalTo(obj)));, +        return removeFromColumnIf(Maps.<V>valuePredicateOnEntries(in(c)));, +        return removeFromColumnIf(Maps.<V>valuePredicateOnEntries(not(in(c))));, +++ b/guava/src/com/google/common/collect/FilteredEntryMultimap.java, +  boolean removeEntriesIf(Predicate<? super Entry<K, Collection<V>>> predicate) {, +          return removeEntriesIf(Maps.<K>keyPredicateOnEntries(in(c)));, +          return removeEntriesIf(Maps.<K>keyPredicateOnEntries(not(in(c))));, +          return removeEntriesIf(in(c));, +          return removeEntriesIf(not(in(c)));, +          return removeEntriesIf(Maps.<Collection<V>>valuePredicateOnEntries(in(c)));, +          return removeEntriesIf(Maps.<Collection<V>>valuePredicateOnEntries(not(in(c))));, +        private boolean removeEntriesIf(final Predicate<? super Multiset.Entry<K>> predicate) {, +          return FilteredEntryMultimap.this.removeEntriesIf(, +              new Predicate<Map.Entry<K, Collection<V>>>() {, +          return removeEntriesIf(in(c));, +          return removeEntriesIf(not(in(c)));, +++ b/guava/src/com/google/common/collect/StandardTable.java, +    boolean removeFromColumnIf(Predicate<? super Entry<R, V>> predicate) {, +        removeFromColumnIf(alwaysTrue());, +        return removeFromColumnIf(not(in(c)));, +        return removeFromColumnIf(Maps.<R>keyPredicateOnEntries(not(in(c))));, +        return obj != null && removeFromColumnIf(Maps.<V>valuePredicateOnEntries(equalTo(obj)));, +        return removeFromColumnIf(Maps.<V>valuePredicateOnEntries(in(c)));, +        return removeFromColumnIf(Maps.<V>valuePredicateOnEntries(not(in(c))));, +++ b/guava/src/com/google/common/collect/TreeRangeMap.java, +      private boolean removeEntryIf(Predicate<? super Entry<Range<K>, V>> predicate) {, +            return removeEntryIf(compose(not(in(c)), Maps.<Range<K>>keyFunction()));, +            return removeEntryIf(not(in(c)));, +            return removeEntryIf(compose(in(c), Maps.<V>valueFunction()));            , +            return removeEntryIf(compose(not(in(c)), Maps.<V>valueFunction()));]