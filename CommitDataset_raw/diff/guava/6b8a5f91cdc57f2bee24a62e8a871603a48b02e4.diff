[+++ b/guava-tests/test/com/google/common/collect/MapMakerTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.base.Function;, +import com.google.common.collect.CustomConcurrentHashMapTest.QueuingRemovalListener;, +import com.google.common.collect.MapMaker.RemovalNotification;, +import com.google.common.testing.NullPointerTester;, +, +import junit.framework.TestCase;, +, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.atomic.AtomicInteger;, +, +/**, + * @author Charles Fry, + */, +public class MapMakerTest extends TestCase {, +, +  public void testNullParameters() throws Exception {, +    NullPointerTester tester = new NullPointerTester();, +    tester.testAllPublicInstanceMethods(new MapMaker());, +  }, +, +  public void testRemovalNotification_clear() throws InterruptedException {, +    // If a clear() happens while a computation is pending, we should not get a removal, +    // notification., +, +    final CountDownLatch computingLatch = new CountDownLatch(1);, +    Function<String, String> computingFunction = new Function<String, String>() {, +      @Override public String apply(String key) {, +        try {, +          computingLatch.await();, +        } catch (InterruptedException e) {, +          Thread.currentThread().interrupt();, +        }, +        return key;, +      }, +    };, +    QueuingRemovalListener<String, String> listener = new QueuingRemovalListener<String, String>();, +, +    @SuppressWarnings("deprecation") // test of deprecated code, +    final ConcurrentMap<String, String> map = new MapMaker(), +        .concurrencyLevel(1), +        .removalListener(listener), +        .makeComputingMap(computingFunction);, +, +    // seed the map, so its segment's count > 0, +    map.put("a", "a");, +, +    final CountDownLatch computationStarted = new CountDownLatch(1);, +    final CountDownLatch computationComplete = new CountDownLatch(1);, +    new Thread(new Runnable() {, +      @Override public void run() {, +        computationStarted.countDown();, +        map.get("b");, +        computationComplete.countDown();, +      }, +    }).start();, +, +    // wait for the computingEntry to be created, +    computationStarted.await();, +    map.clear();, +    // let the computation proceed, +    computingLatch.countDown();, +    // don't check map.size() until we know the get("b") call is complete, +    computationComplete.await();, +, +    // At this point, the listener should be holding the seed value (a -> a), and the map should, +    // contain the computed value (b -> b), since the clear() happened before the computation, +    // completed., +    assertEquals(1, listener.size());, +    RemovalNotification<String, String> notification = listener.remove();, +    assertEquals("a", notification.getKey());, +    assertEquals("a", notification.getValue());, +    assertEquals(1, map.size());, +    assertEquals("b", map.get("b"));, +  }, +, +  // "Basher tests", where we throw a bunch of stuff at a Cache and check basic invariants.]