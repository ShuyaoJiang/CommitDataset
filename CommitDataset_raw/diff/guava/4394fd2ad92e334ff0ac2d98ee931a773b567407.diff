[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +      fail();, +  public void testThrowingServiceStopAndWait_stopThrowing() throws Exception {, +      fail();, +  public void testThrowingServiceStopAndWait_runThrowing() throws Exception {, +    RunThrowingService service = new RunThrowingService();, +, +    service.startAndWait();, +    try {, +      service.stopAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(EXCEPTION, e.getCause().getCause());, +    }, +  }, +, +  private static class RunThrowingService extends AbstractService {, +    @Override protected void doStart() {, +      notifyStarted();, +      notifyFailed(EXCEPTION);, +    }, +, +    @Override protected void doStop() {, +      fail();, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +      fail();, +  public void testThrowingServiceStopAndWait_stopThrowing() throws Exception {, +      fail();, +  public void testThrowingServiceStopAndWait_runThrowing() throws Exception {, +    RunThrowingService service = new RunThrowingService();, +, +    service.startAndWait();, +    try {, +      service.stopAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(EXCEPTION, e.getCause().getCause());, +    }, +  }, +, +  private static class RunThrowingService extends AbstractService {, +    @Override protected void doStart() {, +      notifyStarted();, +      notifyFailed(EXCEPTION);, +    }, +, +    @Override protected void doStop() {, +      fail();, +    }, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractService.java, +      } else if (state == State.RUNNING) {, +        shutdown.setException(new Exception("Service failed while running", cause));, +      } else if (state == State.NEW || state == State.TERMINATED) {, +        throw new IllegalStateException("Failed while in state:" + state, cause);]