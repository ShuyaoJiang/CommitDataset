[+++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static com.google.common.hash.Hashing.ConcatenatedHashFunction;, +, +import com.google.common.testing.NullPointerTester;, +import java.nio.ByteBuffer;, +, +  public void testConcatenatedHashFunction_bits() {, +    assertEquals(Hashing.md5().bits(),, +        new ConcatenatedHashFunction(Hashing.md5()).bits());, +    assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits(),, +        new ConcatenatedHashFunction(Hashing.md5(), Hashing.murmur3_32()).bits());, +    assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),, +        new ConcatenatedHashFunction(, +            Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()).bits());, +  }, +, +  public void testConcatenatedHashFunction_makeHash() {, +    byte[] md5Hash = Hashing.md5().hashLong(42L).asBytes();, +    byte[] murmur3Hash = Hashing.murmur3_32().hashLong(42L).asBytes();, +    byte[] combined = new byte[md5Hash.length + murmur3Hash.length];, +    ByteBuffer buffer = ByteBuffer.wrap(combined);, +    buffer.put(md5Hash);, +    buffer.put(murmur3Hash);, +, +    assertEquals(HashCodes.fromBytes(combined),, +        new ConcatenatedHashFunction(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));, +  }, +, +  public void testNullPointers() {, +    NullPointerTester tester = new NullPointerTester();, +    tester.testAllPublicStaticMethods(Hashing.class);, +  }, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static com.google.common.hash.Hashing.ConcatenatedHashFunction;, +, +import com.google.common.testing.NullPointerTester;, +import java.nio.ByteBuffer;, +, +  public void testConcatenatedHashFunction_bits() {, +    assertEquals(Hashing.md5().bits(),, +        new ConcatenatedHashFunction(Hashing.md5()).bits());, +    assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits(),, +        new ConcatenatedHashFunction(Hashing.md5(), Hashing.murmur3_32()).bits());, +    assertEquals(Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),, +        new ConcatenatedHashFunction(, +            Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()).bits());, +  }, +, +  public void testConcatenatedHashFunction_makeHash() {, +    byte[] md5Hash = Hashing.md5().hashLong(42L).asBytes();, +    byte[] murmur3Hash = Hashing.murmur3_32().hashLong(42L).asBytes();, +    byte[] combined = new byte[md5Hash.length + murmur3Hash.length];, +    ByteBuffer buffer = ByteBuffer.wrap(combined);, +    buffer.put(md5Hash);, +    buffer.put(murmur3Hash);, +, +    assertEquals(HashCodes.fromBytes(combined),, +        new ConcatenatedHashFunction(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));, +  }, +, +  public void testNullPointers() {, +    NullPointerTester tester = new NullPointerTester();, +    tester.testAllPublicStaticMethods(Hashing.class);, +  }, +++ b/guava/src/com/google/common/hash/Hashing.java, +import com.google.common.annotations.VisibleForTesting;, +  // TODO(kevinb): Maybe expose this class via a static Hashing method?, +  @VisibleForTesting, +  static final class ConcatenatedHashFunction extends AbstractCompositeHashFunction {, +    private final int bits;, +    ConcatenatedHashFunction(HashFunction... functions) {, +      for (HashFunction function : functions) {, +        bitSum += function.bits();, +      // TODO(user): Get rid of the ByteBuffer here?]