[+++ b/guava-tests/test/com/google/common/hash/HashFunctionEnum.java, +  SIP_HASH24(Hashing.sipHash24()),, +++ b/guava-tests/test/com/google/common/hash/HashFunctionEnum.java, +  SIP_HASH24(Hashing.sipHash24()),, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +  public void testSipHash24() {, +    HashTestUtils.check2BitAvalanche(Hashing.sipHash24(), 250, 0.14);, +    HashTestUtils.checkAvalanche(Hashing.sipHash24(), 250, 0.10);, +    HashTestUtils.checkNo2BitCharacteristics(Hashing.sipHash24());, +    HashTestUtils.checkNoFunnels(Hashing.sipHash24());, +    HashTestUtils.assertInvariants(Hashing.sipHash24());, +    assertEquals("Hashing.sipHash24(506097522914230528, 1084818905618843912)",, +        Hashing.sipHash24().toString());, +  }, +, +          .put(Hashing.sipHash24(), EMPTY_STRING, "310e0edd47db6f72"), +          .put(Hashing.sipHash24(), TQBFJOTLD, "e46f1fdc05612752"), +          .put(Hashing.sipHash24(), TQBFJOTLDP, "9b602581fce4d4f8"), +++ b/guava-tests/test/com/google/common/hash/HashFunctionEnum.java, +  SIP_HASH24(Hashing.sipHash24()),, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +  public void testSipHash24() {, +    HashTestUtils.check2BitAvalanche(Hashing.sipHash24(), 250, 0.14);, +    HashTestUtils.checkAvalanche(Hashing.sipHash24(), 250, 0.10);, +    HashTestUtils.checkNo2BitCharacteristics(Hashing.sipHash24());, +    HashTestUtils.checkNoFunnels(Hashing.sipHash24());, +    HashTestUtils.assertInvariants(Hashing.sipHash24());, +    assertEquals("Hashing.sipHash24(506097522914230528, 1084818905618843912)",, +        Hashing.sipHash24().toString());, +  }, +, +          .put(Hashing.sipHash24(), EMPTY_STRING, "310e0edd47db6f72"), +          .put(Hashing.sipHash24(), TQBFJOTLD, "e46f1fdc05612752"), +          .put(Hashing.sipHash24(), TQBFJOTLDP, "9b602581fce4d4f8"), +++ b/guava-tests/test/com/google/common/hash/SipHashFunctionTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.hash;, +, +import static com.google.common.base.Charsets.UTF_8;, +, +import com.google.common.collect.ImmutableSet;, +, +import junit.framework.TestCase;, +, +/**, + * Unit tests for {@link SipHashFunction}., + *, + * @author Kurt Alfred Kluever, + */, +public class SipHashFunctionTest extends TestCase {, +, +  // From https://131002.net/siphash/siphash24.c, +  // k = 00 01 02 ..., +  private static final long K0 = 0x0706050403020100L;, +  private static final long K1 = 0x0f0e0d0c0b0a0908L;, +  private static final HashFunction SIP_WITH_KEY = Hashing.sipHash24(K0, K1);, +  private static final HashFunction SIP_WITHOUT_KEY = Hashing.sipHash24();, +, +  // These constants were originally ported from https://www.131002.net/siphash/siphash24.c. See:, +  // https://github.com/nahi/siphash-java-inline/blob/master/src/test/java/SipHashInlineTest.java, +  private static final long[] EXPECTED = new long[] {, +        0x726fdb47dd0e0e31L,, +        0x74f839c593dc67fdL,, +        0x0d6c8009d9a94f5aL,, +        0x85676696d7fb7e2dL,, +        0xcf2794e0277187b7L,, +        0x18765564cd99a68dL,, +        0xcbc9466e58fee3ceL,, +        0xab0200f58b01d137L,, +        0x93f5f5799a932462L,, +        0x9e0082df0ba9e4b0L,, +        0x7a5dbbc594ddb9f3L,, +        0xf4b32f46226bada7L,, +        0x751e8fbc860ee5fbL,, +        0x14ea5627c0843d90L,, +        0xf723ca908e7af2eeL,, +        0xa129ca6149be45e5L,, +        0x3f2acc7f57c29bdbL,, +        0x699ae9f52cbe4794L,, +        0x4bc1b3f0968dd39cL,, +        0xbb6dc91da77961bdL,, +        0xbed65cf21aa2ee98L,, +        0xd0f2cbb02e3b67c7L,, +        0x93536795e3a33e88L,, +        0xa80c038ccd5ccec8L,, +        0xb8ad50c6f649af94L,, +        0xbce192de8a85b8eaL,]