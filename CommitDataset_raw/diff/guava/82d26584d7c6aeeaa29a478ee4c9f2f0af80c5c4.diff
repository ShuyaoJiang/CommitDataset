[+++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +import java.util.Arrays;, +, +    @GwtIncompatible("expandedCapacity"), +    public void testCapacityExpansion() {, +      assertEquals(1, ImmutableList.expandedCapacity(0, 1));, +      assertEquals(2, ImmutableList.expandedCapacity(0, 2));, +      assertEquals(2, ImmutableList.expandedCapacity(1, 2));, +      assertEquals(Integer.MAX_VALUE, ImmutableList.expandedCapacity(0, Integer.MAX_VALUE));, +      assertEquals(Integer.MAX_VALUE, ImmutableList.expandedCapacity(1, Integer.MAX_VALUE));, +      assertEquals(Integer.MAX_VALUE,, +          ImmutableList.expandedCapacity(Integer.MAX_VALUE - 1, Integer.MAX_VALUE));, +, +      assertEquals(13, ImmutableList.expandedCapacity(8, 9));, +    }, +, +    public void testBuilderAddArrayHandlesNulls() {, +      String[] elements = {"a", null, "b"};, +      ImmutableList.Builder<String> builder = ImmutableList.builder();, +      try {, +        builder.add(elements);, +        fail ("Expected NullPointerException");, +      } catch (NullPointerException expected) {, +      }, +      ImmutableList<String> result = builder.build();, +      assertEquals(ImmutableList.of("a"), result);, +      assertEquals(1, result.size());, +    }, +, +    public void testBuilderAddCollectionHandlesNulls() {, +      List<String> elements = Arrays.asList("a", null, "b");, +      ImmutableList.Builder<String> builder = ImmutableList.builder();, +      try {, +        builder.addAll(elements);, +        fail ("Expected NullPointerException");, +      } catch (NullPointerException expected) {, +      }, +      ImmutableList<String> result = builder.build();, +      assertEquals(ImmutableList.of("a"), result);, +      assertEquals(1, result.size());, +    }, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +import java.util.Arrays;, +, +    @GwtIncompatible("expandedCapacity"), +    public void testCapacityExpansion() {, +      assertEquals(1, ImmutableList.expandedCapacity(0, 1));, +      assertEquals(2, ImmutableList.expandedCapacity(0, 2));, +      assertEquals(2, ImmutableList.expandedCapacity(1, 2));, +      assertEquals(Integer.MAX_VALUE, ImmutableList.expandedCapacity(0, Integer.MAX_VALUE));, +      assertEquals(Integer.MAX_VALUE, ImmutableList.expandedCapacity(1, Integer.MAX_VALUE));, +      assertEquals(Integer.MAX_VALUE,, +          ImmutableList.expandedCapacity(Integer.MAX_VALUE - 1, Integer.MAX_VALUE));, +, +      assertEquals(13, ImmutableList.expandedCapacity(8, 9));, +    }, +, +    public void testBuilderAddArrayHandlesNulls() {, +      String[] elements = {"a", null, "b"};, +      ImmutableList.Builder<String> builder = ImmutableList.builder();, +      try {, +        builder.add(elements);, +        fail ("Expected NullPointerException");, +      } catch (NullPointerException expected) {, +      }, +      ImmutableList<String> result = builder.build();, +      assertEquals(ImmutableList.of("a"), result);, +      assertEquals(1, result.size());, +    }, +, +    public void testBuilderAddCollectionHandlesNulls() {, +      List<String> elements = Arrays.asList("a", null, "b");, +      ImmutableList.Builder<String> builder = ImmutableList.builder();, +      try {, +        builder.addAll(elements);, +        fail ("Expected NullPointerException");, +      } catch (NullPointerException expected) {, +      }, +      ImmutableList<String> result = builder.build();, +      assertEquals(ImmutableList.of("a"), result);, +      assertEquals(1, result.size());, +    }, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +import com.google.common.annotations.VisibleForTesting;, +  @VisibleForTesting, +  static int expandedCapacity(int oldCapacity, int minCapacity) {, +    if (minCapacity < 0) {, +      throw new AssertionError("cannot store more than MAX_VALUE elements");, +    }, +    // careful of overflow!, +    int newCapacity = oldCapacity + (oldCapacity >> 1) + 1;, +    if (newCapacity < minCapacity) {, +      newCapacity = Integer.highestOneBit(minCapacity - 1) << 1;, +    }, +    if (newCapacity < 0) {, +      newCapacity = Integer.MAX_VALUE;, +      // guaranteed to be >= newCapacity, +    }, +    return newCapacity;, +  }]