[+++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +        .setDefault(RateLimiter.class, RateLimiter.create(1.0)), +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +        .setDefault(RateLimiter.class, RateLimiter.create(1.0)), +++ b/guava-tests/test/com/google/common/util/concurrent/PackageSanityTests.java, +public class PackageSanityTests extends AbstractPackageSanityTests {, +  public PackageSanityTests() {, +    setDefault(RateLimiter.class, RateLimiter.create(1.0));, +  }, +}, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +        .setDefault(RateLimiter.class, RateLimiter.create(1.0)), +++ b/guava-tests/test/com/google/common/util/concurrent/PackageSanityTests.java, +public class PackageSanityTests extends AbstractPackageSanityTests {, +  public PackageSanityTests() {, +    setDefault(RateLimiter.class, RateLimiter.create(1.0));, +  }, +}, +++ b/guava/src/com/google/common/util/concurrent/RateLimiter.java, +   * Acquires a single permit from this {@code RateLimiter}, blocking until the, +    long microsToWait = reserve(permits);, +   * Reserves a single permit from this {@code RateLimiter} for future use, returning the number of, +   * microseconds until the reservation., +   *, +   * <p>This method is equivalent to {@code reserve(1)}., +   *, +   * @return time in microseconds to wait until the resource can be acquired., +   */, +  long reserve() {, +    return reserve(1);, +  }, +, +  /**, +   * Reserves the given number of permits from this {@code RateLimiter} for future use, returning, +   * the number of microseconds until the reservation can be consumed., +   *, +   * @return time in microseconds to wait until the resource can be acquired., +   */, +  long reserve(int permits) {, +    checkPermits(permits);, +    synchronized (mutex) {, +      return reserveNextTicket(permits, readSafeMicros());, +    }, +  }, +, +  /**, +   *, +   * <p>The return value is guaranteed to be non-negative., +    long microsToNextFreeTicket = Math.max(0, nextFreeTicketMicros - nowMicros);]