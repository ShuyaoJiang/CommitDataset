[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumSet.java, +  static <E> ImmutableSet<E> asImmutable(Set<E> delegate) {, +    switch (delegate.size()) {, +      case 0:, +        return ImmutableSet.of();, +      case 1:, +        return ImmutableSet.of(Iterables.getOnlyElement(delegate));, +      default:, +        return new ImmutableEnumSet<E>(delegate);, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumSet.java, +  static <E> ImmutableSet<E> asImmutable(Set<E> delegate) {, +    switch (delegate.size()) {, +      case 0:, +        return ImmutableSet.of();, +      case 1:, +        return ImmutableSet.of(Iterables.getOnlyElement(delegate));, +      default:, +        return new ImmutableEnumSet<E>(delegate);, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +    return ImmutableEnumSet.asImmutable(EnumSet.of(anElement, otherElements));, +    } else if (elements instanceof Collection) {, +      Collection<E> collection = (Collection<E>) elements;, +      if (collection.isEmpty()) {, +        return ImmutableSet.of();, +      } else {, +        return ImmutableEnumSet.asImmutable(EnumSet.copyOf(collection));, +    } else {, +      Iterator<E> itr = elements.iterator();, +      if (itr.hasNext()) {, +        EnumSet<E> enumSet = EnumSet.of(itr.next());, +        Iterators.addAll(enumSet, itr);, +        return ImmutableEnumSet.asImmutable(enumSet);, +      } else {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumSet.java, +  static <E> ImmutableSet<E> asImmutable(Set<E> delegate) {, +    switch (delegate.size()) {, +      case 0:, +        return ImmutableSet.of();, +      case 1:, +        return ImmutableSet.of(Iterables.getOnlyElement(delegate));, +      default:, +        return new ImmutableEnumSet<E>(delegate);, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +    return ImmutableEnumSet.asImmutable(EnumSet.of(anElement, otherElements));, +    } else if (elements instanceof Collection) {, +      Collection<E> collection = (Collection<E>) elements;, +      if (collection.isEmpty()) {, +        return ImmutableSet.of();, +      } else {, +        return ImmutableEnumSet.asImmutable(EnumSet.copyOf(collection));, +    } else {, +      Iterator<E> itr = elements.iterator();, +      if (itr.hasNext()) {, +        EnumSet<E> enumSet = EnumSet.of(itr.next());, +        Iterators.addAll(enumSet, itr);, +        return ImmutableEnumSet.asImmutable(enumSet);, +      } else {, +++ b/guava/src/com/google/common/collect/ImmutableEnumSet.java, +  static <E extends Enum<E>> ImmutableSet<E> asImmutable(EnumSet<E> set) {, +    switch (set.size()) {, +      case 0:, +        return ImmutableSet.of();, +      case 1:, +        return ImmutableSet.of(Iterables.getOnlyElement(set));, +      default:, +        return new ImmutableEnumSet<E>(set);, +    }, +  }, +, +  private ImmutableEnumSet(EnumSet<E> delegate) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumSet.java, +  static <E> ImmutableSet<E> asImmutable(Set<E> delegate) {, +    switch (delegate.size()) {, +      case 0:, +        return ImmutableSet.of();, +      case 1:, +        return ImmutableSet.of(Iterables.getOnlyElement(delegate));, +      default:, +        return new ImmutableEnumSet<E>(delegate);, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +    return ImmutableEnumSet.asImmutable(EnumSet.of(anElement, otherElements));, +    } else if (elements instanceof Collection) {, +      Collection<E> collection = (Collection<E>) elements;, +      if (collection.isEmpty()) {, +        return ImmutableSet.of();, +      } else {, +        return ImmutableEnumSet.asImmutable(EnumSet.copyOf(collection));, +    } else {]