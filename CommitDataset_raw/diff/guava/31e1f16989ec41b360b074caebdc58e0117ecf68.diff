[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +  public static final CharMatcher WHITESPACE = new FastMatcher("WHITESPACE") {, +    private static final String TABLE = "\u0009\u3000\n\u0009\u0009\u0009\u202F\u0009", +        + "\u0009\u2001\u2006\u0009\u0009\u0009\u0009\u0009", +        + "\u180E\u0009\u2029\u0009\u0009\u0009\u2000\u2005", +        + "\u200A\u0009\u0009\u0009\r\u0009\u0009\u2028", +        + "\u1680\u0009\u00A0\u0009\u2004\u2009\u0009\u0009", +        + "\u0009\u000C\u205F\u0009\u0009\u0020\u0009\u0009", +        + "\u2003\u2008\u0009\u0009\u0009\u000B\u0085\u0009", +        + "\u0009\u0009\u0009\u0009\u0009\u2002\u2007\u0009";, +    @Override, +    public boolean matches(char c) {, +      return TABLE.charAt((-844444961 * c) >>> 26) == c;, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +  public static final CharMatcher WHITESPACE = new FastMatcher("WHITESPACE") {, +    private static final String TABLE = "\u0009\u3000\n\u0009\u0009\u0009\u202F\u0009", +        + "\u0009\u2001\u2006\u0009\u0009\u0009\u0009\u0009", +        + "\u180E\u0009\u2029\u0009\u0009\u0009\u2000\u2005", +        + "\u200A\u0009\u0009\u0009\r\u0009\u0009\u2028", +        + "\u1680\u0009\u00A0\u0009\u2004\u2009\u0009\u0009", +        + "\u0009\u000C\u205F\u0009\u0009\u0020\u0009\u0009", +        + "\u2003\u2008\u0009\u0009\u0009\u000B\u0085\u0009", +        + "\u0009\u0009\u0009\u0009\u0009\u2002\u2007\u0009";, +    @Override, +    public boolean matches(char c) {, +      return TABLE.charAt((-844444961 * c) >>> 26) == c;, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/CharMatcherTest.java, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +  public static final CharMatcher WHITESPACE = new FastMatcher("WHITESPACE") {, +    private static final String TABLE = "\u0009\u3000\n\u0009\u0009\u0009\u202F\u0009", +        + "\u0009\u2001\u2006\u0009\u0009\u0009\u0009\u0009", +        + "\u180E\u0009\u2029\u0009\u0009\u0009\u2000\u2005", +        + "\u200A\u0009\u0009\u0009\r\u0009\u0009\u2028", +        + "\u1680\u0009\u00A0\u0009\u2004\u2009\u0009\u0009", +        + "\u0009\u000C\u205F\u0009\u0009\u0020\u0009\u0009", +        + "\u2003\u2008\u0009\u0009\u0009\u000B\u0085\u0009", +        + "\u0009\u0009\u0009\u0009\u0009\u2002\u2007\u0009";, +    @Override, +    public boolean matches(char c) {, +      return TABLE.charAt((-844444961 * c) >>> 26) == c;, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/CharMatcherTest.java, +++ b/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java, +/*, + * Copyright (C) 2010 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import com.google.caliper.BeforeExperiment;, +import com.google.caliper.Benchmark;, +import com.google.caliper.Param;, +import com.google.caliper.runner.CaliperMain;, +import com.google.common.base.CharMatcher.FastMatcher;, +, +import java.util.BitSet;, +import java.util.Random;, +, +/**, + * Benchmark for the {@link CharMatcher#WHITESPACE} implementation., + */, +public class WhitespaceMatcherBenchmark {, +  private static final int STRING_LENGTH = 10000;, +, +  private static final String OLD_WHITESPACE_TABLE =, +      "\u0001\u0000\u00a0\u0000\u0000\u0000\u0000\u0000", +      + "\u0000\u0009\n\u000b\u000c\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202f", +      + "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0020\u0000\u0000\u0000\u0000\u0000", +      + "\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", +      + "\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a", +      + "\u0000\u0000\u0000\u0000\u0000\u205f\u1680\u0000\u0000\u180e\u0000\u0000\u0000";, +, +  public static final CharMatcher OLD_WHITESPACE = new FastMatcher("CharMatcher.WHITESPACE") {, +    @Override public boolean matches(char c) {, +      return OLD_WHITESPACE_TABLE.charAt(c % 79) == c;, +    }, +  };, +, +  @Param, +  private boolean useNew;, +, +  @Param({"20", "50", "80"}), +  private int percentMatching;, +, +  private String teststring;, +  private CharMatcher matcher;, +, +  public static void main(String[] args) throws Exception {, +    CaliperMain.main(WhitespaceMatcherBenchmark.class, new String[] {});]