[+++ b/guava-gwt/test/com/google/common/collect/ImmutableEnumMapTest_gwt.java, +, +public void testToImmutableEnumMap() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableEnumMap();, +}, +, +public void testToImmutableMapMerging() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableMapMerging();, +}, +, +public void testToImmutableMap_exceptionOnDuplicateKey() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableMap_exceptionOnDuplicateKey();, +}, +++ b/guava-gwt/test/com/google/common/collect/ImmutableEnumMapTest_gwt.java, +, +public void testToImmutableEnumMap() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableEnumMap();, +}, +, +public void testToImmutableMapMerging() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableMapMerging();, +}, +, +public void testToImmutableMap_exceptionOnDuplicateKey() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableMap_exceptionOnDuplicateKey();, +}, +++ b/guava-gwt/test/com/google/common/collect/SetsTest_gwt.java, +, +public void testToImmutableEnumSet() throws Exception {, +  com.google.common.collect.SetsTest testCase = new com.google.common.collect.SetsTest();, +  testCase.testToImmutableEnumSet();, +}, +, +public void testToImmutableEnumSetEmpty() throws Exception {, +  com.google.common.collect.SetsTest testCase = new com.google.common.collect.SetsTest();, +  testCase.testToImmutableEnumSetEmpty();, +}, +++ b/guava-gwt/test/com/google/common/collect/ImmutableEnumMapTest_gwt.java, +, +public void testToImmutableEnumMap() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableEnumMap();, +}, +, +public void testToImmutableMapMerging() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableMapMerging();, +}, +, +public void testToImmutableMap_exceptionOnDuplicateKey() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testToImmutableMap_exceptionOnDuplicateKey();, +}, +++ b/guava-gwt/test/com/google/common/collect/SetsTest_gwt.java, +, +public void testToImmutableEnumSet() throws Exception {, +  com.google.common.collect.SetsTest testCase = new com.google.common.collect.SetsTest();, +  testCase.testToImmutableEnumSet();, +}, +, +public void testToImmutableEnumSetEmpty() throws Exception {, +  com.google.common.collect.SetsTest testCase = new com.google.common.collect.SetsTest();, +  testCase.testToImmutableEnumSetEmpty();, +}, +++ b/guava-tests/test/com/google/common/collect/ImmutableEnumMapTest.java, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.base.Equivalence;, +import com.google.common.testing.CollectorTester;, +import java.util.stream.Collector;, +import java.util.stream.Stream;, +, +  public void testToImmutableEnumMap() {, +    Collector<Entry<AnEnum, Integer>, ?, ImmutableMap<AnEnum, Integer>> collector =, +        Maps.toImmutableEnumMap(Entry::getKey, Entry::getValue);, +    Equivalence<ImmutableMap<AnEnum, Integer>> equivalence =, +        Equivalence.equals().<Entry<AnEnum, Integer>>pairwise().onResultOf(ImmutableMap::entrySet);, +    CollectorTester.of(collector, equivalence), +        .expectCollects(, +            ImmutableMap.of(AnEnum.A, 1, AnEnum.C, 2, AnEnum.E, 3),, +            mapEntry(AnEnum.A, 1),, +            mapEntry(AnEnum.C, 2),, +            mapEntry(AnEnum.E, 3));, +  }, +, +  public void testToImmutableMap_exceptionOnDuplicateKey() {, +    Collector<Entry<AnEnum, Integer>, ?, ImmutableMap<AnEnum, Integer>> collector =, +        Maps.toImmutableEnumMap(Entry::getKey, Entry::getValue);, +    try {, +      Stream.of(mapEntry(AnEnum.A, 1), mapEntry(AnEnum.A, 11)).collect(collector);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +]