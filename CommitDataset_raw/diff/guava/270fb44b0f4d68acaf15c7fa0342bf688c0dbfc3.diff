[+++ b/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java, +import static com.google.common.base.Preconditions.checkArgument;, +, + * class implements the {@code submit}, {@code invokeAny} and  {@code invokeAll} methods using a, + * {@link ListenableFutureTask} returned by {@code newTaskFor}.  For example, the implementation of, + * {@code submit(Runnable)} creates an associated {@code ListenableFutureTask} that is executed, +/* MOE: begin_strip */ public /* MOE: end_strip */, +    ListenableFutureTask<Void> ftask = ListenableFutureTask.create(task, null);, +    ListenableFutureTask<T> ftask = ListenableFutureTask.create(task, result);, +    ListenableFutureTask<T> ftask = ListenableFutureTask.create(task);, +    checkArgument(ntasks > 0);, +      for (Future<T> f : futures) {, +  }, +      throw new AssertionError();, +        ListenableFutureTask<T> f = ListenableFutureTask.create(t);, +        for (Future<T> f : futures) {, +  }, +      for (Callable<T> t : tasks) {, +        futures.add(ListenableFutureTask.create(t));, +      }, +        for (Future<T> f : futures) {, +}]