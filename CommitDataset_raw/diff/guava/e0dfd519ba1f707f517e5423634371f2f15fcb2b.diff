[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.reflect;, +, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.base.Charsets;, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.Sets;, +import com.google.common.reflect.ClassPath.ClassInfo;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.NullPointerTester;, +, +import junit.framework.TestCase;, +, +import org.junit.Test;, +, +import java.io.ByteArrayInputStream;, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.net.URL;, +import java.net.URLClassLoader;, +import java.util.Set;, +import java.util.jar.Manifest;, +, +/**, + * Functional tests of {@link ClassPath}., + */, +public class ClassPathTest extends TestCase {, +, +  public void testGetClasses() throws Exception {, +    Set<String> names = Sets.newHashSet();, +    Set<String> strings = Sets.newHashSet();, +    Set<Class<?>> classes = Sets.newHashSet();, +    for (ClassInfo classInfo : ClassPath.from(getClass().getClassLoader()).getClasses()) {, +      if (classInfo.getPackageName().equals(ClassPathTest.class.getPackage().getName())) {, +        names.add(classInfo.getName());, +        strings.add(classInfo.toString());, +        classes.add(classInfo.load());, +      }, +    }, +    ASSERT.that(names).containsAllOf(ClassPath.class.getName(), ClassPathTest.class.getName());, +    ASSERT.that(strings).containsAllOf(ClassPath.class.getName(), ClassPathTest.class.getName());, +    ASSERT.that(classes).containsAllOf(ClassPath.class, ClassPathTest.class);, +  }, +, +  public void testGetClasses_diamond() throws Exception {, +    ClassLoader parent = ClassPathTest.class.getClassLoader();, +    ClassLoader sub1 = new ClassLoader(parent) {};, +    ClassLoader sub2 = new ClassLoader(parent) {};, +    assertEquals(findClass(ClassPath.from(sub1).getClasses(), ClassPathTest.class),, +        findClass(ClassPath.from(sub2).getClasses(), ClassPathTest.class));, +  }, +, +  public void testClassInfo() {, +    new EqualsTester(), +        .addEqualityGroup(classInfo(ClassPathTest.class), classInfo(ClassPathTest.class)), +        .addEqualityGroup(classInfo(Test.class), classInfo(Test.class, getClass().getClassLoader())), +        .testEquals();, +  }, +, +  public void testClassPathEntries_emptyURLClassLoader_noParent() {, +    ASSERT.that(ClassPath.getClassPathEntries(new URLClassLoader(new URL[0], null)).keySet()), +        .isEmpty();, +  }, +, +  public void testClassPathEntries_URLClassLoader_noParent() throws Exception {, +    URL url1 = new URL("file:/a");, +    URL url2 = new URL("file:/b");, +    URLClassLoader classloader = new URLClassLoader(new URL[] {url1, url2}, null);, +    assertEquals(, +        ImmutableMap.of(url1.toURI(), classloader, url2.toURI(), classloader),, +        ClassPath.getClassPathEntries(classloader));, +  }, +, +  public void testClassPathEntries_URLClassLoader_withParent() throws Exception {, +    URL url1 = new URL("file:/a");, +    URL url2 = new URL("file:/b");, +    URLClassLoader parent = new URLClassLoader(new URL[] {url1}, null);, +    URLClassLoader child = new URLClassLoader(new URL[] {url2}, parent) {};, +    ImmutableMap<URI, ClassLoader> classPathEntries = ClassPath.getClassPathEntries(child);, +    assertEquals(ImmutableMap.of(url1.toURI(), parent, url2.toURI(), child),  classPathEntries);]