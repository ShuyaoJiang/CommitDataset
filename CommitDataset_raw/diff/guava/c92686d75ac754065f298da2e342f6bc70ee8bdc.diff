[+++ b/android/guava-tests/test/com/google/common/collect/HashBiMapTest.java, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.collect.HashBiMapTest.HashBiMapGenerator;, +import com.google.common.collect.testing.google.TestBiMapGenerator;, +  private static final ImmutableList<HashBiMapGenerator> GENERATORS =, +      ImmutableList.of(new HashBiMapGenerator());, +, +  public static class HashBiMapGenerator extends TestStringBiMapGenerator {, +    protected HashBiMap<String, String> create(Entry<String, String>[] entries) {, +      HashBiMap<String, String> result = HashBiMap.create();, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map = generator.create(mapEntry("1", "one"));, +      Set<Entry<String, String>> entries = map.entrySet();, +      Iterator<Entry<String, String>> iterator = entries.iterator();, +      Entry<String, String> entry = iterator.next();, +      assertEquals("two", map.get("1"));, +      assertEquals("1", map.inverse().get("two"));, +  }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      assertThat(map).containsExactly("foo", "1", "bar", "2", "quux", "3").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      assertThat(map).containsExactly("bar", "2", "quux", "3").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      assertThat(map).containsExactly("foo", "1", "quux", "3").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      assertThat(map).containsExactly("foo", "1", "bar", "2").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      map.forcePut("quux", "1");, +      assertThat(map).containsExactly("bar", "2", "quux", "1").inOrder();, +      assertThat(map.inverse()).containsExactly("2", "bar", "1", "quux").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      map.inverse().forcePut("1", "quux");, +      assertThat(map).containsExactly("bar", "2", "quux", "1").inOrder();, +      assertThat(map.inverse()).containsExactly("2", "bar", "1", "quux").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map = generator.create(mapEntry("bar", "2"), mapEntry("quux", "1"));, +      assertThat(map.inverse()).containsExactly("2", "bar", "1", "quux").inOrder();, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(, +              mapEntry("foo", "1"),, +              mapEntry("bar", "2"),, +              mapEntry("quux", "3"),, +              mapEntry("nab", "4"));, +      map.inverse().forcePut("4", "bar");, +      assertThat(map).containsExactly("foo", "1", "bar", "4", "quux", "3").inOrder();, +    }, +++ b/android/guava-tests/test/com/google/common/collect/HashBiMapTest.java, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.collect.HashBiMapTest.HashBiMapGenerator;, +import com.google.common.collect.testing.google.TestBiMapGenerator;, +  private static final ImmutableList<HashBiMapGenerator> GENERATORS =, +      ImmutableList.of(new HashBiMapGenerator());, +, +  public static class HashBiMapGenerator extends TestStringBiMapGenerator {, +    protected HashBiMap<String, String> create(Entry<String, String>[] entries) {, +      HashBiMap<String, String> result = HashBiMap.create();, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map = generator.create(mapEntry("1", "one"));, +      Set<Entry<String, String>> entries = map.entrySet();, +      Iterator<Entry<String, String>> iterator = entries.iterator();, +      Entry<String, String> entry = iterator.next();, +      assertEquals("two", map.get("1"));, +      assertEquals("1", map.inverse().get("two"));, +  }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      assertThat(map).containsExactly("foo", "1", "bar", "2", "quux", "3").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      assertThat(map).containsExactly("bar", "2", "quux", "3").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =, +          generator.create(mapEntry("foo", "1"), mapEntry("bar", "2"), mapEntry("quux", "3"));, +      assertThat(map).containsExactly("foo", "1", "quux", "3").inOrder();, +    }, +    for (TestBiMapGenerator<String, String> generator : GENERATORS) {, +      BiMap<String, String> map =]