[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * Creates a new {@code Multimap} backed by {@code map}, whose internal value, +   * collections are generated by {@code factory}., +   *, +   * <b>Warning: do not use</b> this method when the collections returned by, +   * {@code factory} implement either {@link List} or {@code Set}! Use the more, +   * specific method {@link #newListMultimap}, {@link #newSetMultimap} or {@link, +   * #newSortedSetMultimap} instead, to avoid very surprising behavior from, +   * {@link Multimap#equals}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * Creates a new {@code Multimap} backed by {@code map}, whose internal value, +   * collections are generated by {@code factory}., +   *, +   * <b>Warning: do not use</b> this method when the collections returned by, +   * {@code factory} implement either {@link List} or {@code Set}! Use the more, +   * specific method {@link #newListMultimap}, {@link #newSetMultimap} or {@link, +   * #newSortedSetMultimap} instead, to avoid very surprising behavior from, +   * {@link Multimap#equals}., +++ b/guava/src/com/google/common/collect/Multimap.java, + * contents of a multimap either as a map from keys to <i>nonempty</i>, + * collections of values:, + * #asMap} view (or create a {@code Map<K, Collection<V>>} in the first place)., + * <p><b>Warning:</b> instances of type {@code Multimap} may not implement, + * {@link Object#equals} in the way you expect (multimaps containing the same, + * key-value pairs, even in the same order, may or may not be equal). The, + * recommended subinterfaces provide a much stronger guarantee., + * <h3>Comparison to a map of collections</h3>, + *, + * <p>Multimaps are commonly used in places where a {@code Map<K,, + * Collection<V>>} would otherwise have appeared. The differences include:, + * <li>A key contained in the multimap always maps to at least one value. Any, + *     operation that causes a key to have zero associated values has the effect, + *     of <i>removing</i> that key from the multimap., +   * Returns a collection view containing the values associated with {@code key}, +   * in this multimap, if any. Note that even when ({@code containsKey(key)} is, +   * false, {@code get(key)} still returns an empty collection, not {@code, +   * null}., +   * @return a view collection containing the zero or more values that the key, +   *     maps to, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * Creates a new {@code Multimap} backed by {@code map}, whose internal value, +   * collections are generated by {@code factory}., +   *, +   * <b>Warning: do not use</b> this method when the collections returned by, +   * {@code factory} implement either {@link List} or {@code Set}! Use the more, +   * specific method {@link #newListMultimap}, {@link #newSetMultimap} or {@link, +   * #newSortedSetMultimap} instead, to avoid very surprising behavior from, +   * {@link Multimap#equals}., +++ b/guava/src/com/google/common/collect/Multimap.java, + * contents of a multimap either as a map from keys to <i>nonempty</i>, + * collections of values:, + * #asMap} view (or create a {@code Map<K, Collection<V>>} in the first place)., + * <p><b>Warning:</b> instances of type {@code Multimap} may not implement, + * {@link Object#equals} in the way you expect (multimaps containing the same, + * key-value pairs, even in the same order, may or may not be equal). The, + * recommended subinterfaces provide a much stronger guarantee., + * <h3>Comparison to a map of collections</h3>, + *, + * <p>Multimaps are commonly used in places where a {@code Map<K,, + * Collection<V>>} would otherwise have appeared. The differences include:, + * <li>A key contained in the multimap always maps to at least one value. Any, + *     operation that causes a key to have zero associated values has the effect, + *     of <i>removing</i> that key from the multimap., +   * Returns a collection view containing the values associated with {@code key}, +   * in this multimap, if any. Note that even when ({@code containsKey(key)} is, +   * false, {@code get(key)} still returns an empty collection, not {@code, +   * null}., +   * @return a view collection containing the zero or more values that the key, +   *     maps to, +++ b/guava/src/com/google/common/collect/Multimaps.java, +   * Creates a new {@code Multimap} backed by {@code map}, whose internal value, +   * collections are generated by {@code factory}., +   *, +   * <b>Warning: do not use</b> this method when the collections returned by, +   * {@code factory} implement either {@link List} or {@code Set}! Use the more, +   * specific method {@link #newListMultimap}, {@link #newSetMultimap} or {@link, +   * #newSortedSetMultimap} instead, to avoid very surprising behavior from, +   * {@link Multimap#equals}.]