[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +  public static final CharMatcher ASCII = new NamedFastMatcher("CharMatcher.ASCII") {, +    @Override, +    public boolean matches(char c) {, +      return c <= '\u007f';, +    }, +  };, +    private final String description;, +      this.description = description;, +, +    @Override, +    public String toString() {, +      return description;, +    }, +  public static final CharMatcher DIGIT;, +, +  static {, +    char[] zeroes = ZEROES.toCharArray();, +    char[] nines = new char[zeroes.length];, +    for (int i = 0; i < zeroes.length; i++) {, +      nines[i] = (char) (zeroes[i] + 9);, +    }, +    DIGIT = new RangesMatcher("CharMatcher.DIGIT", zeroes, nines);, +  }, +  public static final CharMatcher JAVA_DIGIT = new CharMatcher() {, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_DIGIT";, +    }, +  public static final CharMatcher JAVA_LETTER = new CharMatcher() {, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_LETTER";, +    }, +  public static final CharMatcher JAVA_LETTER_OR_DIGIT = new CharMatcher() {, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_LETTER_OR_DIGIT";, +    }, +  public static final CharMatcher JAVA_UPPER_CASE = new CharMatcher() {, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_UPPER_CASE";, +    }, +  public static final CharMatcher JAVA_LOWER_CASE = new CharMatcher() {, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_LOWER_CASE";, +    }, +      new NamedFastMatcher("CharMatcher.JAVA_ISO_CONTROL") {, +        @Override public boolean matches(char c) {, +          return c <= '\u001f' || (c >= '\u007f' && c <= '\u009f');, +        }, +      };, +  public static final CharMatcher ANY = new NamedFastMatcher("CharMatcher.ANY") {, +  public static final CharMatcher NONE = new NamedFastMatcher("CharMatcher.NONE") {, +    return new FastMatcher() {, +, +      @Override public String toString() {, +        return "CharMatcher.is('" + showCharacter(match) + "')";, +      }, +    return new FastMatcher() {, +, +      @Override public String toString() {, +        return "CharMatcher.isNot('" + showCharacter(match) + "')";, +      }, +    return new CharMatcher() {, +      @Override public boolean matches(char c) {, +        return Arrays.binarySearch(chars, c) >= 0;, +      }, +, +      @Override public String toString() {, +        return description.toString();, +    return new FastMatcher() {, +, +      @Override public String toString() {, +        return "CharMatcher.anyOf(\"" + showCharacter(match1) + showCharacter(match2) + "\")";, +      }, +    return new FastMatcher() {, +, +      @Override public String toString() {, +        return "CharMatcher.inRange('" + showCharacter(startInclusive), +            + "', '" + showCharacter(endInclusive) + "')";, +      }, +    return new CharMatcher() {, +, +      @Override public String toString() {, +        return "CharMatcher.forPredicate(" + predicate + ")";, +      }, +  protected CharMatcher() {}, +      this.original = checkNotNull(original);, +    @Override public String toString() {, +      return original + ".negate()";, +    return new And(this, other);, +    @Override public String toString() {, +      return "CharMatcher.and(" + first + ", " + second + ")";, +    return new Or(this, other);, +    Or(CharMatcher a, CharMatcher b) {, +    @Override public String toString() {, +      return "CharMatcher.or(" + first + ", " + second + ")";]