[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +  private final Executor exceptionCatchingExecutor = new Executor() {, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated();, +  public void testServiceStopIdempotence() throws Exception {, +    service.startAsync().awaitRunning();, +    service.stopAsync();, +    service.stopAsync();, +    service.stopAsync().awaitTerminated();, +    service.stopAsync().awaitTerminated();, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated(); // no-op, +      return exceptionCatchingExecutor;, +    service.startAsync();, +      service.awaitRunning();, +    } catch (IllegalStateException expected) {, +      return exceptionCatchingExecutor;, +    service.startAsync().awaitRunning();, +    service.startAsync().awaitRunning();, +      return exceptionCatchingExecutor;, +    service.startAsync().awaitRunning();, +    service.stopAsync();, +      return exceptionCatchingExecutor;, +      service.startAsync().awaitRunning(1, TimeUnit.MILLISECONDS);, +    service.startAsync();, +    service.stopAsync();, +    service.awaitTerminated();, +    service.stopAsync().awaitTerminated();, +  public void testDefaultService() throws InterruptedException {, +    WaitOnRunService service = new WaitOnRunService();, +    service.startAsync().awaitRunning();, +    enterRun.await();, +    service.stopAsync().awaitTerminated();, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +  private final Executor exceptionCatchingExecutor = new Executor() {, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated();, +  public void testServiceStopIdempotence() throws Exception {, +    service.startAsync().awaitRunning();, +    service.stopAsync();, +    service.stopAsync();, +    service.stopAsync().awaitTerminated();, +    service.stopAsync().awaitTerminated();, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated(); // no-op, +      return exceptionCatchingExecutor;, +    service.startAsync();, +      service.awaitRunning();, +    } catch (IllegalStateException expected) {, +      return exceptionCatchingExecutor;, +    service.startAsync().awaitRunning();, +    service.startAsync().awaitRunning();, +      return exceptionCatchingExecutor;, +    service.startAsync().awaitRunning();, +    service.stopAsync();, +      return exceptionCatchingExecutor;, +      service.startAsync().awaitRunning(1, TimeUnit.MILLISECONDS);, +    service.startAsync();, +    service.stopAsync();, +    service.awaitTerminated();, +    service.stopAsync().awaitTerminated();, +  public void testDefaultService() throws InterruptedException {, +    WaitOnRunService service = new WaitOnRunService();, +    service.startAsync().awaitRunning();, +    enterRun.await();, +    service.stopAsync().awaitTerminated();, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractIdleServiceTest.java, +      service.startAsync().awaitRunning();, +      service.stopAsync().awaitTerminated();, +        service.startAsync().awaitRunning();, +      service.startAsync().awaitRunning();, +        service.stopAsync().awaitTerminated();, +    service.startAsync().awaitRunning();, +      service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated();, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated();, +    service.startAsync().awaitRunning();, +      service.stopAsync().awaitTerminated();, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated();, +      service.startAsync().awaitRunning(1, TimeUnit.MILLISECONDS);, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +  private final Executor exceptionCatchingExecutor = new Executor() {, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated();, +  public void testServiceStopIdempotence() throws Exception {, +    service.startAsync().awaitRunning();, +    service.stopAsync();, +    service.stopAsync();, +    service.stopAsync().awaitTerminated();, +    service.stopAsync().awaitTerminated();, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated(); // no-op, +      return exceptionCatchingExecutor;, +    service.startAsync();, +      service.awaitRunning();, +    } catch (IllegalStateException expected) {, +      return exceptionCatchingExecutor;, +    service.startAsync().awaitRunning();]