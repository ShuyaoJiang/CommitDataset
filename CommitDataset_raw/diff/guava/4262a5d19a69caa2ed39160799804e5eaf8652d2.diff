[+++ b/src/com/google/common/util/concurrent/ForwardingFuture.java, +import com.google.common.annotations.Beta;, +import com.google.common.base.Preconditions;, + * the backing future as desired per the <a, + * <p>Most subclasses can just use {@link SimpleForwardingFuture}., + * , +, +  // TODO(cpovirk): Use Standard Javadoc form for SimpleForwarding*, +  /**, +   * A simplified version of {@link ForwardingFuture} where subclasses, +   * can pass in an already constructed {@link Future} as the delegate., +   * , +   * @since 9, +   */, +  @Beta, +  public abstract static class SimpleForwardingFuture<V> , +      extends ForwardingFuture<V> {, +    private final Future<V> delegate;, +, +    protected SimpleForwardingFuture(Future<V> delegate) {, +      this.delegate = Preconditions.checkNotNull(delegate);, +    }, +, +    @Override, +    protected final Future<V> delegate() {, +      return delegate;, +    }, +    , +  }, +++ b/src/com/google/common/util/concurrent/ForwardingFuture.java, +import com.google.common.annotations.Beta;, +import com.google.common.base.Preconditions;, + * the backing future as desired per the <a, + * <p>Most subclasses can just use {@link SimpleForwardingFuture}., + * , +, +  // TODO(cpovirk): Use Standard Javadoc form for SimpleForwarding*, +  /**, +   * A simplified version of {@link ForwardingFuture} where subclasses, +   * can pass in an already constructed {@link Future} as the delegate., +   * , +   * @since 9, +   */, +  @Beta, +  public abstract static class SimpleForwardingFuture<V> , +      extends ForwardingFuture<V> {, +    private final Future<V> delegate;, +, +    protected SimpleForwardingFuture(Future<V> delegate) {, +      this.delegate = Preconditions.checkNotNull(delegate);, +    }, +, +    @Override, +    protected final Future<V> delegate() {, +      return delegate;, +    }, +    , +  }, +++ b/src/com/google/common/util/concurrent/ForwardingListenableFuture.java, +import com.google.common.base.Preconditions;, + * A {@link ListenableFuture} which forwards all its method calls to another, + * future. Subclasses should override one or more methods to modify the behavior, + * of the backing future as desired per the <a, + * href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>., + * <p>Most subclasses can just use {@link SimpleForwardingListenableFuture}., + *, + * @param <V> The result type returned by this Future's {@code get} method, +, +  // TODO(cpovirk): Use Standard Javadoc form for SimpleForwarding*, +  /**, +   * A simplified version of {@link ForwardingListenableFuture} where subclasses, +   * can pass in an already constructed {@link ListenableFuture} , +   * as the delegate., +   * , +   * @since 9, +   */, +  @Beta, +  public abstract static class SimpleForwardingListenableFuture<V>, +      extends ForwardingListenableFuture<V> {, +    private final ListenableFuture<V> delegate;, +, +    protected SimpleForwardingListenableFuture(ListenableFuture<V> delegate) {, +      this.delegate = Preconditions.checkNotNull(delegate);, +    }, +, +    @Override, +    protected final ListenableFuture<V> delegate() {, +      return delegate;, +    }, +  }]