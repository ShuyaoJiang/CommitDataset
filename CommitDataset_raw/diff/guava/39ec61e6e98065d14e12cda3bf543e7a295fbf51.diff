[+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testInputFutureToString() throws Throwable {, +    assertThat(resultFuture.toString()).contains(inputFuture.toString());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testInputFutureToString() throws Throwable {, +    assertThat(resultFuture.toString()).contains(inputFuture.toString());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  public void testTransformAsync_functionToString() throws Exception {, +  @GwtIncompatible // Threads, +, +  public void testCatchingAsync_functionToString() throws Exception {, +    final CountDownLatch functionCalled = new CountDownLatch(1);, +    final CountDownLatch functionBlocking = new CountDownLatch(1);, +    AsyncFunction<Object, Object> function =, +        new AsyncFunction<Object, Object>() {, +          @Override, +          public ListenableFuture<Object> apply(Object input) throws Exception {, +            functionCalled.countDown();, +            functionBlocking.await();, +            return immediateFuture(null);, +          }, +, +          @Override, +          public String toString() {, +            return "Called my toString";, +          }, +        };, +, +    ExecutorService executor = Executors.newSingleThreadExecutor();, +    try {, +      ListenableFuture<?> output =, +          Futures.catchingAsync(, +              immediateFailedFuture(new RuntimeException()), Throwable.class, function, executor);, +      functionCalled.await();, +      assertThat(output.toString()).contains("Called my toString");, +    } finally {, +      functionBlocking.countDown();, +      executor.shutdown();, +    }, +  }, +, +  public void testCatchingAsync_futureToString() throws Exception {, +    final SettableFuture<Object> toReturn = SettableFuture.create();, +    AsyncFunction<Object, Object> function =, +        new AsyncFunction<Object, Object>() {, +          @Override, +          public ListenableFuture<Object> apply(Object input) throws Exception {, +            return toReturn;, +          }, +, +          @Override, +          public String toString() {, +            return "Called my toString";, +          }, +        };, +, +    ListenableFuture<?> output =, +        Futures.catchingAsync(, +            immediateFailedFuture(new RuntimeException()),, +            Throwable.class,, +            function,, +            directExecutor());, +    assertThat(output.toString()).contains(toReturn.toString());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testInputFutureToString() throws Throwable {, +    assertThat(resultFuture.toString()).contains(inputFuture.toString());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  public void testTransformAsync_functionToString() throws Exception {, +  @GwtIncompatible // Threads, +, +  public void testCatchingAsync_functionToString() throws Exception {, +    final CountDownLatch functionCalled = new CountDownLatch(1);, +    final CountDownLatch functionBlocking = new CountDownLatch(1);, +    AsyncFunction<Object, Object> function =, +        new AsyncFunction<Object, Object>() {, +          @Override, +          public ListenableFuture<Object> apply(Object input) throws Exception {, +            functionCalled.countDown();, +            functionBlocking.await();, +            return immediateFuture(null);, +          }, +, +          @Override, +          public String toString() {, +            return "Called my toString";, +          }]