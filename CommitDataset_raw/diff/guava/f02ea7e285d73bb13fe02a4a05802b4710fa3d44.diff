[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    directedGraph.putEdge(N1, N3);, +    expectedTranspose.putEdge(N3, N1);, +    directedGraph.putEdgeValue(N1, N3, E13);, +    expectedTranspose.putEdgeValue(N3, N1, E13);, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    directedGraph.addEdge(N1, N3, E13);, +    directedGraph.addEdge(N1, N2, E12_A);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    expectedTranspose.addEdge(N3, N1, E13);, +    expectedTranspose.addEdge(N2, N1, E12_A);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    directedGraph.putEdge(N1, N3);, +    expectedTranspose.putEdge(N3, N1);, +    directedGraph.putEdgeValue(N1, N3, E13);, +    expectedTranspose.putEdgeValue(N3, N1, E13);, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    directedGraph.addEdge(N1, N3, E13);, +    directedGraph.addEdge(N1, N2, E12_A);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    expectedTranspose.addEdge(N3, N1, E13);, +    expectedTranspose.addEdge(N2, N1, E12_A);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +        boolean connected = graph.successors(node).contains(otherNode);, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(connected);, +  public void edgeValueOrDefault() {, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("valueA");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("valueB");, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("valueC");, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    directedGraph.putEdge(N1, N3);, +    expectedTranspose.putEdge(N3, N1);, +    directedGraph.putEdgeValue(N1, N3, E13);, +    expectedTranspose.putEdgeValue(N3, N1, E13);, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    directedGraph.addEdge(N1, N3, E13);, +    directedGraph.addEdge(N1, N2, E12_A);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    expectedTranspose.addEdge(N3, N1, E13);, +    expectedTranspose.addEdge(N2, N1, E12_A);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +        boolean connected = graph.successors(node).contains(otherNode);, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(connected);, +  public void edgeValueOrDefault() {, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("valueA");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("valueB");, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("valueC");, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +import static com.google.common.base.Preconditions.checkNotNull;, +import javax.annotation.Nullable;, +  public V edgeValueOrDefault(Object nodeU, Object nodeV, @Nullable V defaultValue) {, +    checkNotNull(nodeU);, +    checkNotNull(nodeV);, +    boolean connected = nodes().contains(nodeU) && successors(nodeU).contains(nodeV);, +    return connected ? edgeValue(nodeU, nodeV) : defaultValue;, +    return String.format(GRAPH_STRING_FORMAT, propertiesString, nodes(), edgeValueMap());, +  }, +, +  private Map<EndpointPair<N>, V> edgeValueMap() {, +    Function<EndpointPair<N>, V> edgeToValueFn =, +        new Function<EndpointPair<N>, V>() {, +          @Override, +          public V apply(EndpointPair<N> edge) {, +            return edgeValue(edge.nodeU(), edge.nodeV());, +          }, +        };, +    return Maps.asMap(edges(), edgeToValueFn);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    directedGraph.putEdge(N1, N3);, +    expectedTranspose.putEdge(N3, N1);, +    directedGraph.putEdgeValue(N1, N3, E13);, +    expectedTranspose.putEdgeValue(N3, N1, E13);, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isNull();, +    assertThat(transpose.edgeValueOrDefault(N1, N2, null)).isEqualTo(E21);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    directedGraph.addEdge(N1, N3, E13);, +    directedGraph.addEdge(N1, N2, E12_A);, +        NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();, +    expectedTranspose.addEdge(N3, N1, E13);, +    expectedTranspose.addEdge(N2, N1, E12_A);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +        boolean connected = graph.successors(node).contains(otherNode);, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(connected);, +  public void edgeValueOrDefault() {, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("default");, +    assertThat(graph.edgeValueOrDefault(1, 2, "default")).isEqualTo("valueA");, +    assertThat(graph.edgeValueOrDefault(2, 1, "default")).isEqualTo("valueB");]