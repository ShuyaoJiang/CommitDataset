[+++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +        MoreExecutors.newThread(getServiceName(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +        MoreExecutors.newThread(getServiceName(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +        MoreExecutors.newThread(getServiceName() + " " + state, command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +        MoreExecutors.newThread(getServiceName(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +        MoreExecutors.newThread(getServiceName() + " " + state, command).start();, +++ b/guava/src/com/google/common/util/concurrent/MoreExecutors.java, +import com.google.common.base.Throwables;, +import java.lang.reflect.InvocationTargetException;, +      addShutdownHook(MoreExecutors.newThread("DelayedShutdownHook-for-" + service, new Runnable() {, +      }));, +, +  /**, +   * Returns a default thread factory used to create new threads., +   *, +   * <p>On AppEngine, returns {@code ThreadManager.currentRequestThreadFactory()}., +   * Otherwise, returns {@link Executors#defaultThreadFactory()}., +   *, +   * @since 14.0, +   */, +  @Beta, +  public static ThreadFactory platformThreadFactory() {, +    if (System.getProperty("com.google.appengine.runtime.environment") == null) {, +      return Executors.defaultThreadFactory();, +    }, +    try {, +      return (ThreadFactory) Class.forName("com.google.appengine.api.ThreadManager"), +          .getMethod("currentRequestThreadFactory"), +          .invoke(null);, +    } catch (IllegalAccessException e) {, +      throw new RuntimeException("Couldn't invoke ThreadManager.currentRequestThreadFactory", e);, +    } catch (InvocationTargetException e) {, +      throw Throwables.propagate(e.getCause());, +    } catch (NoSuchMethodException e) {, +      throw new RuntimeException("Couldn't invoke ThreadManager.currentRequestThreadFactory", e);, +    } catch (ClassNotFoundException e) {, +      // Not really on AppEngine?, +      return Executors.defaultThreadFactory();, +    }, +  }, +, +  /**, +   * Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name}, +   * unless changing the name is forbidden by the security manager., +   */, +  static Thread newThread(String name, Runnable runnable) {, +    checkNotNull(name);, +    checkNotNull(runnable);, +    Thread result = platformThreadFactory().newThread(runnable);, +    try {, +      result.setName(name);, +    } catch (SecurityException e) {, +      // OK if we can't set the name in this environment., +    }, +    return result;, +  }]