[+++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationEqualTester.java, +    assertEquals(SerializableTester.reserialize(actualContents()), actualContents());, +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationEqualTester.java, +    assertEquals(SerializableTester.reserialize(actualContents()), actualContents());, +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/ListSubListTester.java, +    assertEquals(size, list.subList(0, size).size());, +    assertEquals(size - 1, list.subList(0, size - 1).size());, +    assertEquals(size - 1, list.subList(1, size).size());, +    assertEquals(0, list.subList(size, size).size());, +    assertEquals(0, list.subList(0, 0).size());, +      assertEquals(subList.size() == 0, subList.isEmpty());, +    assertEquals(0, copy.indexOf(list.get(0)));, +    assertEquals(0, head.indexOf(list.get(0)));, +    assertEquals(0, tail.indexOf(list.get(1)));, +    assertEquals(size - 1, copy.indexOf(list.get(size - 1)));, +    assertEquals(size - 2, head.indexOf(list.get(size - 2)));, +    assertEquals(size - 2, tail.indexOf(list.get(size - 1)));, +    assertEquals(-1, head.indexOf(list.get(size - 1)));, +    assertEquals(-1, tail.indexOf(list.get(0)));, +    assertEquals(size - 1, copy.lastIndexOf(list.get(size - 1)));, +    assertEquals(size - 2, head.lastIndexOf(list.get(size - 2)));, +    assertEquals(size - 2, tail.lastIndexOf(list.get(size - 1)));, +    assertEquals(0, copy.lastIndexOf(list.get(0)));, +    assertEquals(0, head.lastIndexOf(list.get(0)));, +    assertEquals(0, tail.lastIndexOf(list.get(1)));, +    assertEquals(-1, head.lastIndexOf(list.get(size - 1)));, +    assertEquals(-1, tail.lastIndexOf(list.get(0)));, +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationEqualTester.java, +    assertEquals(SerializableTester.reserialize(actualContents()), actualContents());, +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/ListSubListTester.java, +    assertEquals(size, list.subList(0, size).size());, +    assertEquals(size - 1, list.subList(0, size - 1).size());, +    assertEquals(size - 1, list.subList(1, size).size());, +    assertEquals(0, list.subList(size, size).size());, +    assertEquals(0, list.subList(0, 0).size());, +      assertEquals(subList.size() == 0, subList.isEmpty());, +    assertEquals(0, copy.indexOf(list.get(0)));, +    assertEquals(0, head.indexOf(list.get(0)));, +    assertEquals(0, tail.indexOf(list.get(1)));, +    assertEquals(size - 1, copy.indexOf(list.get(size - 1)));, +    assertEquals(size - 2, head.indexOf(list.get(size - 2)));, +    assertEquals(size - 2, tail.indexOf(list.get(size - 1)));, +    assertEquals(-1, head.indexOf(list.get(size - 1)));, +    assertEquals(-1, tail.indexOf(list.get(0)));, +    assertEquals(size - 1, copy.lastIndexOf(list.get(size - 1)));, +    assertEquals(size - 2, head.lastIndexOf(list.get(size - 2)));, +    assertEquals(size - 2, tail.lastIndexOf(list.get(size - 1)));, +    assertEquals(0, copy.lastIndexOf(list.get(0)));, +    assertEquals(0, head.lastIndexOf(list.get(0)));, +    assertEquals(0, tail.lastIndexOf(list.get(1)));, +    assertEquals(-1, head.lastIndexOf(list.get(size - 1)));, +    assertEquals(-1, tail.lastIndexOf(list.get(0)));, +++ b/android/guava-tests/test/com/google/common/base/AsciiTest.java, +    assertEquals("PASSWORD", "pa\u00dfword".toUpperCase()); // [*], +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationEqualTester.java, +    assertEquals(SerializableTester.reserialize(actualContents()), actualContents());, +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/ListSubListTester.java, +    assertEquals(size, list.subList(0, size).size());, +    assertEquals(size - 1, list.subList(0, size - 1).size());, +    assertEquals(size - 1, list.subList(1, size).size());, +    assertEquals(0, list.subList(size, size).size());, +    assertEquals(0, list.subList(0, 0).size());, +      assertEquals(subList.size() == 0, subList.isEmpty());, +    assertEquals(0, copy.indexOf(list.get(0)));, +    assertEquals(0, head.indexOf(list.get(0)));, +    assertEquals(0, tail.indexOf(list.get(1)));, +    assertEquals(size - 1, copy.indexOf(list.get(size - 1)));, +    assertEquals(size - 2, head.indexOf(list.get(size - 2)));, +    assertEquals(size - 2, tail.indexOf(list.get(size - 1)));, +    assertEquals(-1, head.indexOf(list.get(size - 1)));, +    assertEquals(-1, tail.indexOf(list.get(0)));, +    assertEquals(size - 1, copy.lastIndexOf(list.get(size - 1)));, +    assertEquals(size - 2, head.lastIndexOf(list.get(size - 2)));, +    assertEquals(size - 2, tail.lastIndexOf(list.get(size - 1)));, +    assertEquals(0, copy.lastIndexOf(list.get(0)));, +    assertEquals(0, head.lastIndexOf(list.get(0)));, +    assertEquals(0, tail.lastIndexOf(list.get(1)));, +    assertEquals(-1, head.lastIndexOf(list.get(size - 1)));, +    assertEquals(-1, tail.lastIndexOf(list.get(0)));, +++ b/android/guava-tests/test/com/google/common/base/AsciiTest.java, +    assertEquals("PASSWORD", "pa\u00dfword".toUpperCase()); // [*], +++ b/android/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +    assertEquals(12, multiset.add(KEY, 3));, +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionSerializationEqualTester.java, +    assertEquals(SerializableTester.reserialize(actualContents()), actualContents());, +++ b/android/guava-testlib/src/com/google/common/collect/testing/testers/ListSubListTester.java, +    assertEquals(size, list.subList(0, size).size());, +    assertEquals(size - 1, list.subList(0, size - 1).size());, +    assertEquals(size - 1, list.subList(1, size).size());, +    assertEquals(0, list.subList(size, size).size());, +    assertEquals(0, list.subList(0, 0).size());, +      assertEquals(subList.size() == 0, subList.isEmpty());, +    assertEquals(0, copy.indexOf(list.get(0)));, +    assertEquals(0, head.indexOf(list.get(0)));, +    assertEquals(0, tail.indexOf(list.get(1)));, +    assertEquals(size - 1, copy.indexOf(list.get(size - 1)));, +    assertEquals(size - 2, head.indexOf(list.get(size - 2)));, +    assertEquals(size - 2, tail.indexOf(list.get(size - 1)));, +    assertEquals(-1, head.indexOf(list.get(size - 1)));, +    assertEquals(-1, tail.indexOf(list.get(0)));]