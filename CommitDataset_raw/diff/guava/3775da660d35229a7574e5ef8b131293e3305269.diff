[+++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import com.google.common.collect.ImmutableList;, +, +  public void testConcat() throws IOException {, +    ByteSource b1 = ByteStreams.asByteSource(new byte[] {0, 1, 2, 3});, +    ByteSource b2 = ByteStreams.asByteSource(new byte[0]);, +    ByteSource b3 = ByteStreams.asByteSource(new byte[] {4, 5});, +, +    byte[] expected = {0, 1, 2, 3, 4, 5};, +, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3)).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(b1, b2, b3).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3).iterator()).read());, +  }, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import com.google.common.collect.ImmutableList;, +, +  public void testConcat() throws IOException {, +    ByteSource b1 = ByteStreams.asByteSource(new byte[] {0, 1, 2, 3});, +    ByteSource b2 = ByteStreams.asByteSource(new byte[0]);, +    ByteSource b3 = ByteStreams.asByteSource(new byte[] {4, 5});, +, +    byte[] expected = {0, 1, 2, 3, 4, 5};, +, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3)).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(b1, b2, b3).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3).iterator()).read());, +  }, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import com.google.common.collect.ImmutableList;, +, +  public void testConcat() throws IOException {, +    ByteSource b1 = ByteStreams.asByteSource(new byte[] {0, 1, 2, 3});, +    ByteSource b2 = ByteStreams.asByteSource(new byte[0]);, +    ByteSource b3 = ByteStreams.asByteSource(new byte[] {4, 5});, +, +    byte[] expected = {0, 1, 2, 3, 4, 5};, +, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3)).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(b1, b2, b3).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3).iterator()).read());, +  }, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +, +  public void testConcat() throws IOException {, +    CharSource c1 = CharStreams.asCharSource("abc");, +    CharSource c2 = CharStreams.asCharSource("");, +    CharSource c3 = CharStreams.asCharSource("de");, +, +    String expected = "abcde";, +, +    assertEquals(expected,, +        CharSource.concat(ImmutableList.of(c1, c2, c3)).read());, +    assertEquals(expected,, +        CharSource.concat(c1, c2, c3).read());, +    assertEquals(expected,, +        CharSource.concat(ImmutableList.of(c1, c2, c3).iterator()).read());, +  }, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import com.google.common.collect.ImmutableList;, +, +  public void testConcat() throws IOException {, +    ByteSource b1 = ByteStreams.asByteSource(new byte[] {0, 1, 2, 3});, +    ByteSource b2 = ByteStreams.asByteSource(new byte[0]);, +    ByteSource b3 = ByteStreams.asByteSource(new byte[] {4, 5});, +, +    byte[] expected = {0, 1, 2, 3, 4, 5};, +, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3)).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(b1, b2, b3).read());, +    assertArrayEquals(expected,, +        ByteSource.concat(ImmutableList.of(b1, b2, b3).iterator()).read());, +  }, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +, +  public void testConcat() throws IOException {, +    CharSource c1 = CharStreams.asCharSource("abc");, +    CharSource c2 = CharStreams.asCharSource("");, +    CharSource c3 = CharStreams.asCharSource("de");, +, +    String expected = "abcde";, +, +    assertEquals(expected,, +        CharSource.concat(ImmutableList.of(c1, c2, c3)).read());, +    assertEquals(expected,, +        CharSource.concat(c1, c2, c3).read());]