[+++ b/guava/src/com/google/common/cache/AbstractCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/Cache.java, +  V get(K key, Callable<? extends V> valueLoader) throws ExecutionException;, +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +++ b/guava/src/com/google/common/cache/AbstractCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/Cache.java, +  V get(K key, Callable<? extends V> valueLoader) throws ExecutionException;, +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * access. Access time is reset by all cache read and write operations (including, +   * {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by operations, +   * on the collection-views of {@link Cache#asMap}., +++ b/guava/src/com/google/common/cache/AbstractCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/Cache.java, +  V get(K key, Callable<? extends V> valueLoader) throws ExecutionException;, +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * access. Access time is reset by all cache read and write operations (including, +   * {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by operations, +   * on the collection-views of {@link Cache#asMap}., +++ b/guava/src/com/google/common/cache/ForwardingCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/Cache.java, +  V get(K key, Callable<? extends V> valueLoader) throws ExecutionException;, +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * access. Access time is reset by all cache read and write operations (including, +   * {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by operations, +   * on the collection-views of {@link Cache#asMap}., +++ b/guava/src/com/google/common/cache/ForwardingCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/LocalCache.java, +    public V get(K key, final Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +  public V get(K key, Callable<? extends V> valueLoader) throws ExecutionException {, +++ b/guava/src/com/google/common/cache/Cache.java, +  V get(K key, Callable<? extends V> valueLoader) throws ExecutionException;, +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}., +   * removed from {@code Cache} in Guava release 12.0. Note that, +   * {@link CacheBuilder#build(CacheLoader)} now returns a {@code LoadingCache}, so this deprecation, +   * (migration) can be dealt with by simply changing the type of references to the results of, +   * {@link CacheBuilder#build(CacheLoader)}.]