[+++ b/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java, +   * {@link MoreExecutors#newDirectExecutorService} and subject to the same, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java, +   * {@link MoreExecutors#newDirectExecutorService} and subject to the same, +++ b/guava/src/com/google/common/util/concurrent/ExecutionList.java, + * MoreExecutors#directExecutor direct execution}) will be caught and, +   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier, +   * listeners, {@code directExecutor()} carries some caveats: First, the, +   * as an RPC network thread, and {@code directExecutor()} listeners may, +   * directExecutor} listener, all other registered but unexecuted, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java, +   * {@link MoreExecutors#newDirectExecutorService} and subject to the same, +++ b/guava/src/com/google/common/util/concurrent/ExecutionList.java, + * MoreExecutors#directExecutor direct execution}) will be caught and, +   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier, +   * listeners, {@code directExecutor()} carries some caveats: First, the, +   * as an RPC network thread, and {@code directExecutor()} listeners may, +   * directExecutor} listener, all other registered but unexecuted, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * executor, {@code withFallback} will use a, +   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   *       }, directExecutor());}</pre>, +   *       }, directExecutor());}</pre>, +   * directExecutor}. However, be aware of the caveats documented in the, +   * executor, {@code transform} will use a, +   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   * the executor} or explicitly specifying {@code directExecutor}., +   * explicitly specifying {@code directExecutor}. However, be aware of the, +    // have directExecutor listeners. In this situation, the listeners may end up running on a, +    // 1. Using the directExecutor implies that your callback is safe to run on any thread., +    //    a directExecutor listener on one of the output futures which is an antipattern anyway., +   * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   * some caveats for heavier operations. For example, the callback may run on, +   * an unpredictable or undesirable thread:, +   * explicitly specifying {@code directExecutor}. However, be aware of the, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java, +   * {@link MoreExecutors#newDirectExecutorService} and subject to the same, +++ b/guava/src/com/google/common/util/concurrent/ExecutionList.java, + * MoreExecutors#directExecutor direct execution}) will be caught and, +   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier, +   * listeners, {@code directExecutor()} carries some caveats: First, the, +   * as an RPC network thread, and {@code directExecutor()} listeners may, +   * directExecutor} listener, all other registered but unexecuted, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * executor, {@code withFallback} will use a, +   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   *       }, directExecutor());}</pre>, +   *       }, directExecutor());}</pre>, +   * directExecutor}. However, be aware of the caveats documented in the, +   * executor, {@code transform} will use a, +   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   * the executor} or explicitly specifying {@code directExecutor}., +   * explicitly specifying {@code directExecutor}. However, be aware of the, +    // have directExecutor listeners. In this situation, the listeners may end up running on a, +    // 1. Using the directExecutor implies that your callback is safe to run on any thread., +    //    a directExecutor listener on one of the output futures which is an antipattern anyway., +   * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   * some caveats for heavier operations. For example, the callback may run on, +   * an unpredictable or undesirable thread:, +   * explicitly specifying {@code directExecutor}. However, be aware of the, +++ b/guava/src/com/google/common/util/concurrent/ListenableFuture.java, +   * MoreExecutors#directExecutor direct execution}) will be caught and, +   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier, +   * listeners, {@code directExecutor()} carries some caveats.  For, +   * {@code directExecutor()} listener, all other registered but unexecuted, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java, +   * {@link MoreExecutors#newDirectExecutorService} and subject to the same, +++ b/guava/src/com/google/common/util/concurrent/ExecutionList.java, + * MoreExecutors#directExecutor direct execution}) will be caught and, +   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier, +   * listeners, {@code directExecutor()} carries some caveats: First, the, +   * as an RPC network thread, and {@code directExecutor()} listeners may, +   * directExecutor} listener, all other registered but unexecuted, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * executor, {@code withFallback} will use a, +   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   *       }, directExecutor());}</pre>, +   *       }, directExecutor());}</pre>, +   * directExecutor}. However, be aware of the caveats documented in the, +   * executor, {@code transform} will use a, +   * {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   * the executor} or explicitly specifying {@code directExecutor}., +   * explicitly specifying {@code directExecutor}. However, be aware of the, +    // have directExecutor listeners. In this situation, the listeners may end up running on a, +    // 1. Using the directExecutor implies that your callback is safe to run on any thread., +    //    a directExecutor listener on one of the output futures which is an antipattern anyway., +   * a {@linkplain MoreExecutors#directExecutor direct executor}, which carries, +   * some caveats for heavier operations. For example, the callback may run on, +   * an unpredictable or undesirable thread:, +   * explicitly specifying {@code directExecutor}. However, be aware of the, +++ b/guava/src/com/google/common/util/concurrent/ListenableFuture.java, +   * MoreExecutors#directExecutor direct execution}) will be caught and, +   * any thread, consider {@link MoreExecutors#directExecutor}. For heavier, +   * listeners, {@code directExecutor()} carries some caveats.  For, +   * {@code directExecutor()} listener, all other registered but unexecuted, +++ b/guava/src/com/google/common/util/concurrent/Service.java, +   *     {@link MoreExecutors#directExecutor}., +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/TestingExecutors.java, +   * {@link MoreExecutors#newDirectExecutorService} and subject to the same, +++ b/guava/src/com/google/common/util/concurrent/ExecutionList.java]