[+++ b/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +  public void testDoCancelStart() throws TimeoutException {, +    Service a =, +        new AbstractService() {, +          @Override, +          protected void doStart() {, +            // Never starts!, +          }, +, +          @Override, +          protected void doCancelStart() {, +            assertThat(state()).isEqualTo(Service.State.STOPPING);, +            notifyStopped();, +          }, +, +          @Override, +          protected void doStop() {, +            throw new AssertionError(); // Should not be called., +          }, +        };, +, +    final ServiceManager manager = new ServiceManager(asList(a));, +    manager.startAsync();, +    manager.stopAsync();, +    manager.awaitStopped(10, TimeUnit.MILLISECONDS);, +    assertThat(manager.servicesByState().keySet()).containsExactly(Service.State.TERMINATED);, +  }, +, +  public void testNotifyStoppedAfterFailure() throws TimeoutException {, +    Service a =, +        new AbstractService() {, +          @Override, +          protected void doStart() {, +            notifyFailed(new IllegalStateException("start failure"));, +            notifyStopped(); // This will be a no-op., +          }, +, +          @Override, +          protected void doStop() {, +            notifyStopped();, +          }, +        };, +    final ServiceManager manager = new ServiceManager(asList(a));, +    manager.startAsync();, +    manager.awaitStopped(10, TimeUnit.MILLISECONDS);, +    assertThat(manager.servicesByState().keySet()).containsExactly(Service.State.FAILED);, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +  public void testDoCancelStart() throws TimeoutException {, +    Service a =, +        new AbstractService() {, +          @Override, +          protected void doStart() {, +            // Never starts!, +          }, +, +          @Override, +          protected void doCancelStart() {, +            assertThat(state()).isEqualTo(Service.State.STOPPING);, +            notifyStopped();, +          }, +, +          @Override, +          protected void doStop() {, +            throw new AssertionError(); // Should not be called., +          }, +        };, +, +    final ServiceManager manager = new ServiceManager(asList(a));, +    manager.startAsync();, +    manager.stopAsync();, +    manager.awaitStopped(10, TimeUnit.MILLISECONDS);, +    assertThat(manager.servicesByState().keySet()).containsExactly(Service.State.TERMINATED);, +  }, +, +  public void testNotifyStoppedAfterFailure() throws TimeoutException {, +    Service a =, +        new AbstractService() {, +          @Override, +          protected void doStart() {, +            notifyFailed(new IllegalStateException("start failure"));, +            notifyStopped(); // This will be a no-op., +          }, +, +          @Override, +          protected void doStop() {, +            notifyStopped();, +          }, +        };, +    final ServiceManager manager = new ServiceManager(asList(a));, +    manager.startAsync();, +    manager.awaitStopped(10, TimeUnit.MILLISECONDS);, +    assertThat(manager.servicesByState().keySet()).containsExactly(Service.State.FAILED);, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractService.java, +  private static final ListenerCallQueue.Event<Listener> TERMINATED_FROM_STARTING_EVENT =, +      terminatedEvent(STARTING);, +   *]