[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +    limiter.setRate(2.0);, +    limiter.acquire();, +    limiter.acquire();, +    assertEvents(, +        "R0.00", // First comes the saved-up burst, which defaults to a 1-second burst (2 requests)., +        "R0.00",, +        "R0.00", // Now comes the free request., +        "R0.50", // Now it's 0.5 seconds per request., +        "R0.50");, +    assertEvents("R0.50", "R0.00", "R0.00"); // we repay the last request (.5sec), then back to +oo, +  }, +, +  /** https://code.google.com/p/guava-libraries/issues/detail?id=1791 */, +  public void testInfinity_BustyTimeElapsed() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, Double.POSITIVE_INFINITY);, +    stopwatch.instant += 1000000;, +    limiter.setRate(2.0);, +    for (int i = 0; i < 5; i++) {, +      limiter.acquire();, +    }, +    assertEvents(, +        "R0.00", // First comes the saved-up burst, which defaults to a 1-second burst (2 requests)., +        "R0.00",, +        "R0.00", // Now comes the free request., +        "R0.50", // Now it's 0.5 seconds per request., +        "R0.50");, +  public void testInfinity_WarmUpTimeElapsed() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, Double.POSITIVE_INFINITY, 10, SECONDS);, +    stopwatch.instant += 1000000;, +    limiter.setRate(1.0);, +    for (int i = 0; i < 5; i++) {, +      limiter.acquire();, +    }, +    assertEvents("R0.00", "R1.00", "R1.00", "R1.00", "R1.00");, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +    limiter.setRate(2.0);, +    limiter.acquire();, +    limiter.acquire();, +    assertEvents(, +        "R0.00", // First comes the saved-up burst, which defaults to a 1-second burst (2 requests)., +        "R0.00",, +        "R0.00", // Now comes the free request., +        "R0.50", // Now it's 0.5 seconds per request., +        "R0.50");, +    assertEvents("R0.50", "R0.00", "R0.00"); // we repay the last request (.5sec), then back to +oo, +  }, +, +  /** https://code.google.com/p/guava-libraries/issues/detail?id=1791 */, +  public void testInfinity_BustyTimeElapsed() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, Double.POSITIVE_INFINITY);, +    stopwatch.instant += 1000000;, +    limiter.setRate(2.0);, +    for (int i = 0; i < 5; i++) {, +      limiter.acquire();, +    }, +    assertEvents(, +        "R0.00", // First comes the saved-up burst, which defaults to a 1-second burst (2 requests)., +        "R0.00",, +        "R0.00", // Now comes the free request., +        "R0.50", // Now it's 0.5 seconds per request., +        "R0.50");, +  public void testInfinity_WarmUpTimeElapsed() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, Double.POSITIVE_INFINITY, 10, SECONDS);, +    stopwatch.instant += 1000000;, +    limiter.setRate(1.0);, +    for (int i = 0; i < 5; i++) {, +      limiter.acquire();, +    }, +    assertEvents("R0.00", "R1.00", "R1.00", "R1.00", "R1.00");, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java, +      if (oldMaxPermits == Double.POSITIVE_INFINITY) {, +        // if we don't special-case this, we would get storedPermits == NaN, below, +        storedPermits = maxPermits;, +      } else {, +    }]