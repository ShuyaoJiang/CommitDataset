[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import java.util.NoSuchElementException;, +      } catch (IllegalArgumentException expected) {}, +  public void testSpanEmpty() {, +    try {, +      ImmutableRangeMap.of().span();, +      fail("Expected NoSuchElementException");, +    } catch (NoSuchElementException expected) {}, +  }, +, +  public void testSpanSingleRange() {, +    for (Range<Integer> range : RANGES) {, +      RangeMap<Integer, Integer> rangemap = ImmutableRangeMap.<Integer, Integer>builder(), +          .put(range, 1), +          .build();, +      assertEquals(range, rangemap.span());, +    }, +  }, +, +  public void testSpanTwoRanges() {, +    for (Range<Integer> range1 : RANGES) {, +      for (Range<Integer> range2 : RANGES) {, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +          RangeMap<Integer, Integer> rangemap = ImmutableRangeMap.<Integer, Integer>builder(), +              .put(range1, 1), +              .put(range2, 2), +              .build();, +          assertEquals(range1.span(range2), rangemap.span());, +        }, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import java.util.NoSuchElementException;, +      } catch (IllegalArgumentException expected) {}, +  public void testSpanEmpty() {, +    try {, +      ImmutableRangeMap.of().span();, +      fail("Expected NoSuchElementException");, +    } catch (NoSuchElementException expected) {}, +  }, +, +  public void testSpanSingleRange() {, +    for (Range<Integer> range : RANGES) {, +      RangeMap<Integer, Integer> rangemap = ImmutableRangeMap.<Integer, Integer>builder(), +          .put(range, 1), +          .build();, +      assertEquals(range, rangemap.span());, +    }, +  }, +, +  public void testSpanTwoRanges() {, +    for (Range<Integer> range1 : RANGES) {, +      for (Range<Integer> range2 : RANGES) {, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +          RangeMap<Integer, Integer> rangemap = ImmutableRangeMap.<Integer, Integer>builder(), +              .put(range1, 1), +              .put(range2, 2), +              .build();, +          assertEquals(range1.span(range2), rangemap.span());, +        }, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java, +import java.util.NoSuchElementException;, +  public void testSpanSingleRange() {, +    for (Range<Integer> range : RANGES) {, +      RangeMap<Integer, Integer> rangeMap = TreeRangeMap.create();, +      rangeMap.put(range, 1);, +, +      try {, +        assertEquals(range, rangeMap.span());, +        assertFalse(range.isEmpty());, +      } catch (NoSuchElementException e) {, +        assertTrue(range.isEmpty());, +      }, +    }, +  }, +, +  public void testSpanTwoRanges() {, +    for (Range<Integer> range1 : RANGES) {, +      for (Range<Integer> range2 : RANGES) {, +        RangeMap<Integer, Integer> rangeMap = TreeRangeMap.create();, +        rangeMap.put(range1, 1);, +        rangeMap.put(range2, 2);, +, +        Range<Integer> expected;, +        if (range1.isEmpty()) {, +          if (range2.isEmpty()) {, +            expected = null;, +          } else {, +            expected = range2;, +          }, +        } else {, +          if (range2.isEmpty()) {, +            expected = range1;, +          } else {]