[+++ b/guava-gwt/src-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/SetGenerators.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect.testing.google;, +, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.collect.Lists.newArrayList;, +import static com.google.common.collect.Sets.newTreeSet;, +import static com.google.common.collect.testing.SampleElements.Strings.AFTER_LAST;, +import static com.google.common.collect.testing.SampleElements.Strings.AFTER_LAST_2;, +import static com.google.common.collect.testing.SampleElements.Strings.BEFORE_FIRST;, +import static com.google.common.collect.testing.SampleElements.Strings.BEFORE_FIRST_2;, +import static junit.framework.Assert.assertEquals;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.collect.ContiguousSet;, +import com.google.common.collect.DiscreteDomains;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.ImmutableSortedSet;, +import com.google.common.collect.Lists;, +import com.google.common.collect.Ordering;, +import com.google.common.collect.Range;, +import com.google.common.collect.Ranges;, +import com.google.common.collect.Sets;, +import com.google.common.collect.testing.TestCollectionGenerator;, +import com.google.common.collect.testing.TestCollidingSetGenerator;, +import com.google.common.collect.testing.TestIntegerSortedSetGenerator;, +import com.google.common.collect.testing.TestSetGenerator;, +import com.google.common.collect.testing.TestStringListGenerator;, +import com.google.common.collect.testing.TestStringSetGenerator;, +import com.google.common.collect.testing.TestStringSortedSetGenerator;, +import com.google.common.collect.testing.TestUnhashableCollectionGenerator;, +import com.google.common.collect.testing.UnhashableObject;, +, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +import java.util.Set;, +import java.util.SortedSet;, +, +/**, + * Generators of different types of sets and derived collections from sets., + *, + * @author Kevin Bourrillion, + * @author Jared Levy, + * @author Hayward Chan, + */, +@GwtCompatible(emulated = true), +public class SetGenerators {, +, +  public static class ImmutableSetCopyOfGenerator extends TestStringSetGenerator {, +    @Override protected Set<String> create(String[] elements) {, +      return ImmutableSet.copyOf(elements);, +    }, +  }, +, +  public static class ImmutableSetWithBadHashesGenerator, +      extends TestCollidingSetGenerator, +      // Work around a GWT compiler bug.  Not explicitly listing this will, +      // cause the createArray() method missing in the generated javascript., +      // TODO: Remove this once the GWT bug is fixed., +      implements TestCollectionGenerator<Object> {, +    @Override, +    public Set<Object> create(Object... elements) {, +      return ImmutableSet.copyOf(elements);, +    }, +  }, +, +  public static class DegeneratedImmutableSetGenerator, +      extends TestStringSetGenerator {, +    // Make sure we get what we think we're getting, or else this test, +    // is pointless, +    @SuppressWarnings("cast"), +    @Override protected Set<String> create(String[] elements) {, +      return (ImmutableSet<String>), +          ImmutableSet.of(elements[0], elements[0]);, +    }, +  }, +, +  public static class ImmutableSortedSetCopyOfGenerator, +      extends TestStringSortedSetGenerator {, +    @Override protected SortedSet<String> create(String[] elements) {, +      return ImmutableSortedSet.copyOf(elements);, +    }, +  }]