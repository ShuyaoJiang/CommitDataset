[+++ b/guava/src/com/google/common/hash/HashFunction.java, +   * <p><b>Warning:</b> This method will produce different output than most other languages do when, +   * running the same hash function on the equivalent input. For cross-language compatibility, use, +   * {@link #hashString}, usually with a charset of UTF-8. For other use cases, use {@code, +   * hashUnencodedChars}., +   *, +   *, +   * <p><b>Warning:</b> This method, which reencodes the input before hashing it, is useful only for, +   * cross-language compatibility. For other use cases, prefer {@link #hashUnencodedChars}, which is, +   * faster, produces the same output across Java releases, and hashes every {@code char} in the, +   * input, even if some are invalid., +++ b/guava/src/com/google/common/hash/HashFunction.java, +   * <p><b>Warning:</b> This method will produce different output than most other languages do when, +   * running the same hash function on the equivalent input. For cross-language compatibility, use, +   * {@link #hashString}, usually with a charset of UTF-8. For other use cases, use {@code, +   * hashUnencodedChars}., +   *, +   *, +   * <p><b>Warning:</b> This method, which reencodes the input before hashing it, is useful only for, +   * cross-language compatibility. For other use cases, prefer {@link #hashUnencodedChars}, which is, +   * faster, produces the same output across Java releases, and hashes every {@code char} in the, +   * input, even if some are invalid., +++ b/guava/src/com/google/common/hash/Hasher.java, +   * Equivalent to processing each {@code char} value in the {@code CharSequence}, in order. In, +   * other words, no character encoding is performed; the low byte and high byte of each {@code, +   * char} are hashed directly (in that order). The input must not be updated while this method is, +   * in progress., +   *, +   * <p><b>Warning:</b> This method will produce different output than most other languages do when, +   * running the same hash function on the equivalent input. For cross-language compatibility, use, +   * {@link #putString}, usually with a charset of UTF-8. For other use cases, use {@code, +   * putUnencodedChars}., +   *, +   * <p><b>Warning:</b> This method, which reencodes the input before hashing it, is useful only for, +   * cross-language compatibility. For other use cases, prefer {@link #putUnencodedChars}, which is, +   * faster, produces the same output across Java releases, and hashes every {@code char} in the, +   * input, even if some are invalid., +++ b/guava/src/com/google/common/hash/HashFunction.java, +   * <p><b>Warning:</b> This method will produce different output than most other languages do when, +   * running the same hash function on the equivalent input. For cross-language compatibility, use, +   * {@link #hashString}, usually with a charset of UTF-8. For other use cases, use {@code, +   * hashUnencodedChars}., +   *, +   *, +   * <p><b>Warning:</b> This method, which reencodes the input before hashing it, is useful only for, +   * cross-language compatibility. For other use cases, prefer {@link #hashUnencodedChars}, which is, +   * faster, produces the same output across Java releases, and hashes every {@code char} in the, +   * input, even if some are invalid., +++ b/guava/src/com/google/common/hash/Hasher.java, +   * Equivalent to processing each {@code char} value in the {@code CharSequence}, in order. In, +   * other words, no character encoding is performed; the low byte and high byte of each {@code, +   * char} are hashed directly (in that order). The input must not be updated while this method is, +   * in progress., +   *, +   * <p><b>Warning:</b> This method will produce different output than most other languages do when, +   * running the same hash function on the equivalent input. For cross-language compatibility, use, +   * {@link #putString}, usually with a charset of UTF-8. For other use cases, use {@code, +   * putUnencodedChars}., +   *, +   * <p><b>Warning:</b> This method, which reencodes the input before hashing it, is useful only for, +   * cross-language compatibility. For other use cases, prefer {@link #putUnencodedChars}, which is, +   * faster, produces the same output across Java releases, and hashes every {@code char} in the, +   * input, even if some are invalid., +++ b/guava/src/com/google/common/hash/PrimitiveSink.java, +   * <p><b>Warning:</b> This method will produce different output than most other languages do when, +   * running on the equivalent input. For cross-language compatibility, use {@link #putString},, +   * usually with a charset of UTF-8. For other use cases, use {@code putUnencodedChars}., +   *, +   *, +   * <p><b>Warning:</b> This method, which reencodes the input before processing it, is useful only, +   * for cross-language compatibility. For other use cases, prefer {@link #putUnencodedChars}, which, +   * is faster, produces the same output across Java releases, and processes every {@code char} in, +   * the input, even if some are invalid.]