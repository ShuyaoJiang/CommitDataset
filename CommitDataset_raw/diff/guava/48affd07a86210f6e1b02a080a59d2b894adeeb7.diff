[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.adjacentNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.adjacentNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).adjacentNode(node))), +            .contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.adjacentNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).adjacentNode(node))), +            .contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/EndpointsTest.java, +    assertThat(directed.adjacentNode("source")).isEqualTo("target");, +    assertThat(directed.adjacentNode("target")).isEqualTo("source");, +    assertThat(undirected.adjacentNode("chicken")).isEqualTo("egg");, +    assertThat(undirected.adjacentNode("egg")).isEqualTo("chicken");, +    assertThat(undirected.adjacentNode("node")).isEqualTo("node");, +  public void testAdjacentNode_nodeNotIncident() {, +        endpoints.adjacentNode(3);, +        fail("Should have rejected adjacentNode() called with a node not incident to edge.");, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.adjacentNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).adjacentNode(node))), +            .contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/EndpointsTest.java, +    assertThat(directed.adjacentNode("source")).isEqualTo("target");, +    assertThat(directed.adjacentNode("target")).isEqualTo("source");, +    assertThat(undirected.adjacentNode("chicken")).isEqualTo("egg");, +    assertThat(undirected.adjacentNode("egg")).isEqualTo("chicken");, +    assertThat(undirected.adjacentNode("node")).isEqualTo("node");, +  public void testAdjacentNode_nodeNotIncident() {, +        endpoints.adjacentNode(3);, +        fail("Should have rejected adjacentNode() called with a node not incident to edge.");, +++ b/guava/src/com/google/common/graph/Endpoints.java, +  public final N adjacentNode(Object node) {, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.adjacentNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).adjacentNode(node))), +            .contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/EndpointsTest.java, +    assertThat(directed.adjacentNode("source")).isEqualTo("target");, +    assertThat(directed.adjacentNode("target")).isEqualTo("source");, +    assertThat(undirected.adjacentNode("chicken")).isEqualTo("egg");, +    assertThat(undirected.adjacentNode("egg")).isEqualTo("chicken");, +    assertThat(undirected.adjacentNode("node")).isEqualTo("node");, +  public void testAdjacentNode_nodeNotIncident() {, +        endpoints.adjacentNode(3);, +        fail("Should have rejected adjacentNode() called with a node not incident to edge.");, +++ b/guava/src/com/google/common/graph/Endpoints.java, +  public final N adjacentNode(Object node) {, +++ b/guava/src/com/google/common/graph/Graphs.java, +        N adjacentNode = graph.incidentNodes(edge).adjacentNode(node);, +        if (subgraph.nodes().contains(adjacentNode)) {, +          subgraph.addEdge(edge, node, adjacentNode);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.adjacentNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).adjacentNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).adjacentNode(node))), +            .contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/EndpointsTest.java, +    assertThat(directed.adjacentNode("source")).isEqualTo("target");, +    assertThat(directed.adjacentNode("target")).isEqualTo("source");, +    assertThat(undirected.adjacentNode("chicken")).isEqualTo("egg");, +    assertThat(undirected.adjacentNode("egg")).isEqualTo("chicken");, +    assertThat(undirected.adjacentNode("node")).isEqualTo("node");, +  public void testAdjacentNode_nodeNotIncident() {, +        endpoints.adjacentNode(3);, +        fail("Should have rejected adjacentNode() called with a node not incident to edge.");, +++ b/guava/src/com/google/common/graph/Endpoints.java, +  public final N adjacentNode(Object node) {, +++ b/guava/src/com/google/common/graph/Graphs.java, +        N adjacentNode = graph.incidentNodes(edge).adjacentNode(node);, +        if (subgraph.nodes().contains(adjacentNode)) {, +          subgraph.addEdge(edge, node, adjacentNode);, +++ b/guava/src/com/google/common/graph/ImmutableNetwork.java, +      Map<E, N> incidentEdgeMap =, +          Maps.asMap(graph.incidentEdges(node), adjacentNodeFn(graph, node));, +  private static <N, E> Function<E, N> adjacentNodeFn(final Network<N, E> graph, final N node) {, +        return graph.incidentNodes(edge).adjacentNode(node);]