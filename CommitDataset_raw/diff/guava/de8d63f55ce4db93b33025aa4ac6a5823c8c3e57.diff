[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +++ b/guava/src/com/google/common/graph/AbstractBaseGraph.java, +      // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe, +      // operations only in weird cases like checking for an EndpointPair<ArrayList> in a, +      // Graph<LinkedList>., +      @SuppressWarnings("unchecked"), +            && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());, +  public int degree(N node) {, +  public int inDegree(N node) {, +  public int outDegree(N node) {, +  public boolean hasEdge(N nodeU, N nodeV) {, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +++ b/guava/src/com/google/common/graph/AbstractBaseGraph.java, +      // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe, +      // operations only in weird cases like checking for an EndpointPair<ArrayList> in a, +      // Graph<LinkedList>., +      @SuppressWarnings("unchecked"), +            && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());, +  public int degree(N node) {, +  public int inDegree(N node) {, +  public int outDegree(N node) {, +  public boolean hasEdge(N nodeU, N nodeV) {, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +          // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe, +          // operations only in weird cases like checking for an EndpointPair<ArrayList> in a, +          // Network<LinkedList>., +          @SuppressWarnings("unchecked"), +                && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());, +      public Set<N> adjacentNodes(N node) {, +      public Set<N> predecessors(N node) {, +      public Set<N> successors(N node) {, +  public int degree(N node) {, +  public int inDegree(N node) {, +  public int outDegree(N node) {, +    EndpointPair<N> endpointPair = incidentNodes(edge); // Verifies that edge is in this network., +  public Optional<E> edgeConnecting(N nodeU, N nodeV) {, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +++ b/guava/src/com/google/common/graph/AbstractBaseGraph.java, +      // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe, +      // operations only in weird cases like checking for an EndpointPair<ArrayList> in a, +      // Graph<LinkedList>., +      @SuppressWarnings("unchecked"), +            && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());, +  public int degree(N node) {, +  public int inDegree(N node) {, +  public int outDegree(N node) {, +  public boolean hasEdge(N nodeU, N nodeV) {, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +          // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe, +          // operations only in weird cases like checking for an EndpointPair<ArrayList> in a, +          // Network<LinkedList>., +          @SuppressWarnings("unchecked"), +                && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());, +      public Set<N> adjacentNodes(N node) {, +      public Set<N> predecessors(N node) {, +      public Set<N> successors(N node) {, +  public int degree(N node) {, +  public int inDegree(N node) {, +  public int outDegree(N node) {, +    EndpointPair<N> endpointPair = incidentNodes(edge); // Verifies that edge is in this network., +  public Optional<E> edgeConnecting(N nodeU, N nodeV) {, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +      public Set<N> adjacentNodes(N node) {, +      public Set<N> predecessors(N node) {, +      public Set<N> successors(N node) {, +      public int degree(N node) {, +      public int inDegree(N node) {, +      public int outDegree(N node) {, +  public V edgeValue(N nodeU, N nodeV) {, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +++ b/guava/src/com/google/common/graph/AbstractBaseGraph.java, +      // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe, +      // operations only in weird cases like checking for an EndpointPair<ArrayList> in a, +      // Graph<LinkedList>., +      @SuppressWarnings("unchecked"), +            && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());, +  public int degree(N node) {, +  public int inDegree(N node) {, +  public int outDegree(N node) {, +  public boolean hasEdge(N nodeU, N nodeV) {, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +          // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe, +          // operations only in weird cases like checking for an EndpointPair<ArrayList> in a, +          // Network<LinkedList>., +          @SuppressWarnings("unchecked"), +                && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());, +      public Set<N> adjacentNodes(N node) {, +      public Set<N> predecessors(N node) {, +      public Set<N> successors(N node) {, +  public int degree(N node) {, +  public int inDegree(N node) {, +  public int outDegree(N node) {, +    EndpointPair<N> endpointPair = incidentNodes(edge); // Verifies that edge is in this network., +  public Optional<E> edgeConnecting(N nodeU, N nodeV) {, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +      public Set<N> adjacentNodes(N node) {, +      public Set<N> predecessors(N node) {, +      public Set<N> successors(N node) {, +      public int degree(N node) {]