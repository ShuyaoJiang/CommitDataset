[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(Equivalence.class, Equivalence.equals()), +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(Equivalence.class, Equivalence.equals()), +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +import com.google.common.base.Equivalence;, +        .keyEquivalence(Equivalence.identity());, +        .keyEquivalence(Equivalence.equals());, +        .keyEquivalence(Equivalence.identity());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(Equivalence.class, Equivalence.equals()), +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +import com.google.common.base.Equivalence;, +        .keyEquivalence(Equivalence.identity());, +        .keyEquivalence(Equivalence.equals());, +        .keyEquivalence(Equivalence.identity());, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +    tester.setDefault(Equivalence.class, Equivalence.equals());, +    Equivalence<String> caseInsensitiveEquivalence = Equivalence.equals().onResultOf(, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(Equivalence.class, Equivalence.equals()), +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +import com.google.common.base.Equivalence;, +        .keyEquivalence(Equivalence.identity());, +        .keyEquivalence(Equivalence.equals());, +        .keyEquivalence(Equivalence.identity());, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +    tester.setDefault(Equivalence.class, Equivalence.equals());, +    Equivalence<String> caseInsensitiveEquivalence = Equivalence.equals().onResultOf(, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when, +   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise., +   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when, +   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(Equivalence.class, Equivalence.equals()), +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +import com.google.common.base.Equivalence;, +        .keyEquivalence(Equivalence.identity());, +        .keyEquivalence(Equivalence.equals());, +        .keyEquivalence(Equivalence.identity());, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +    tester.setDefault(Equivalence.class, Equivalence.equals());, +    Equivalence<String> caseInsensitiveEquivalence = Equivalence.equals().onResultOf(, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when, +   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise., +   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when, +   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}, +++ b/guava/src/com/google/common/cache/LocalCache.java, +        return Equivalence.equals();, +        return Equivalence.identity();, +        return Equivalence.identity();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(Equivalence.class, Equivalence.equals()), +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +import com.google.common.base.Equivalence;, +        .keyEquivalence(Equivalence.identity());, +        .keyEquivalence(Equivalence.equals());, +        .keyEquivalence(Equivalence.identity());, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +    tester.setDefault(Equivalence.class, Equivalence.equals());, +    Equivalence<String> caseInsensitiveEquivalence = Equivalence.equals().onResultOf(, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when, +   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise., +   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when, +   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}, +++ b/guava/src/com/google/common/cache/LocalCache.java, +        return Equivalence.equals();, +        return Equivalence.identity();, +        return Equivalence.identity();, +++ b/guava/src/com/google/common/collect/Interners.java, +import com.google.common.base.Equivalence;, +          .keyEquivalence(Equivalence.equals()), +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return difference(left, right, Equivalence.equals());, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java]