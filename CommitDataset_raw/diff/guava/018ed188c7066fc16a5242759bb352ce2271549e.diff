[+++ b/guava/src/com/google/common/reflect/AbstractInvocationHandler.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + *   protected Object handleInvocation(Object proxy, Method method, Object[] args) {, +   * <ul>, +   * <li>{@code proxy.equals(argument)} returns true if:, +   *   <ul>, +   *   <li>and {@link AbstractInvocationHandler#equals} returns true for the, +   *       {@link InvocationHandler} of {@code argument}, +  @Override, +  public final Object invoke(Object proxy, Method method, @Nullable Object[] args), +   * identical. {@code proxy.equals(argument)} returns true if:, +   *, +   * <ul>, +   *, +  @Override, +  public boolean equals(Object obj) {, +  @Override, +  public int hashCode() {, +  @Override, +  public String toString() {, +++ b/guava/src/com/google/common/reflect/AbstractInvocationHandler.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + *   protected Object handleInvocation(Object proxy, Method method, Object[] args) {, +   * <ul>, +   * <li>{@code proxy.equals(argument)} returns true if:, +   *   <ul>, +   *   <li>and {@link AbstractInvocationHandler#equals} returns true for the, +   *       {@link InvocationHandler} of {@code argument}, +  @Override, +  public final Object invoke(Object proxy, Method method, @Nullable Object[] args), +   * identical. {@code proxy.equals(argument)} returns true if:, +   *, +   * <ul>, +   *, +  @Override, +  public boolean equals(Object obj) {, +  @Override, +  public int hashCode() {, +  @Override, +  public String toString() {, +++ b/guava/src/com/google/common/reflect/ClassPath.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +  private static final Predicate<ClassInfo> IS_TOP_LEVEL =, +      new Predicate<ClassInfo>() {, +        @Override, +        public boolean apply(ClassInfo info) {, +    @Override, +    public int hashCode() {, +    @Override, +    public boolean equals(Object obj) {, +        return resourceName.equals(that.resourceName) && loader == that.loader;, +    @Override, +    public String toString() {, +    @Override, +    public String toString() {, +    protected abstract void scanDirectory(ClassLoader loader, File directory) throws IOException;, +    @VisibleForTesting, +    final void scan(File file, ClassLoader classloader) throws IOException {, +        } catch (IOException ignored) {, +        }, +    @VisibleForTesting, +    static ImmutableSet<File> getClassPathFromManifest(File jarFile, @Nullable Manifest manifest) {, +      String classpathAttribute =, +          manifest.getMainAttributes().getValue(Attributes.Name.CLASS_PATH.toString());, +    @VisibleForTesting, +    static ImmutableMap<File, ClassLoader> getClassPathEntries(ClassLoader classloader) {, +    @VisibleForTesting, +    static URL getClassPathEntry(File jarFile, String path) throws MalformedURLException {, +  @VisibleForTesting, +  static final class DefaultScanner extends Scanner {, +    @Override, +    protected void scanJarFile(ClassLoader classloader, JarFile file) {, +    @Override, +    protected void scanDirectory(ClassLoader classloader, File directory) throws IOException {, +    private void scanDirectory(File directory, ClassLoader classloader, String packagePrefix), +        throws IOException {, +  @VisibleForTesting, +  static String getClassName(String filename) {, +++ b/guava/src/com/google/common/reflect/AbstractInvocationHandler.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License.]