[+++ b/guava/src/com/google/common/hash/Hashing.java, +   * Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm, +   * the returned function implements is unspecified and subject to change without notice., +   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code, +   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current, +   * process in any way, for example being sent over RPC, or saved to disk., +   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value, +   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances., +   * @param minimumBits a positive integer (can be arbitrarily large), +   * @return a hash function, described above, that produces hash codes of length {@code, +   *     minimumBits} or greater, +   * Used to randomize {@link #goodFastHash} instances, so that programs which persist anything, +   * dependent on the hash codes they produce will fail sooner., +   */, +  private static final int GOOD_FAST_HASH_SEED = (int) System.currentTimeMillis();, +, +  /** Returned by {@link #goodFastHash} when {@code minimumBits <= 32}. */, +  private static final HashFunction GOOD_FAST_HASH_FUNCTION_32 = murmur3_32(GOOD_FAST_HASH_SEED);, +, +  /** Returned by {@link #goodFastHash} when {@code 32 < minimumBits <= 128}. */, +  private static final HashFunction GOOD_FAST_HASH_FUNCTION_128 = murmur3_128(GOOD_FAST_HASH_SEED);, +, +  /**, +, +  private Hashing() {}]