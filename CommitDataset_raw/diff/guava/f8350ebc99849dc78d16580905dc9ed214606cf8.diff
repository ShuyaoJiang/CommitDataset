[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <p>Any structural changes to the underlying iteration (aside from those, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <p>Any structural changes to the underlying iteration (aside from those, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, + * <p>changes the entries iteration order to {@code [key2=bar, key1=baz]} and the, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * <p>Now {@code MY_SPLITTER.split("foo,,,  bar ,")} returns just {@code ["foo",, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, + * <p>Or equivalently, <pre>   {@code, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, + * <p>Anything which can be done using {@code FluentIterable} could be done in a different fashion, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +   * <p>Builder instances can be reused; it is safe to call {@link #build} multiple]