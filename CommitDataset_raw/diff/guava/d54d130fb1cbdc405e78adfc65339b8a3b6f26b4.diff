[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +        return map().keySet().remove(entry.getKey());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +        return map().keySet().remove(entry.getKey());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +import static com.google.common.base.Preconditions.checkArgument;, +import java.util.AbstractCollection;, +, +  static abstract class Keys<K, V> extends AbstractMultiset<K> {, +    abstract Multimap<K, V> multimap();, +, +    private Set<Multiset.Entry<K>> entrySet;, +, +    @Override public Set<Multiset.Entry<K>> entrySet() {, +      return (entrySet == null) ? entrySet = createEntrySet() : entrySet;, +    }, + , +    @Override Iterator<Multiset.Entry<K>> entryIterator() {, +      final Iterator<Map.Entry<K, Collection<V>>> backingIterator =, +          multimap().asMap().entrySet().iterator();, +      return new Iterator<Multiset.Entry<K>>() {, +        @Override public boolean hasNext() {, +          return backingIterator.hasNext();, +        }, +, +        @Override public Multiset.Entry<K> next() {, +          final Map.Entry<K, Collection<V>> backingEntry =, +              backingIterator.next();, +          return new Multisets.AbstractEntry<K>() {, +            @Override public K getElement() {, +              return backingEntry.getKey();, +            }, +, +            @Override public int getCount() {, +              return backingEntry.getValue().size();, +            }, +          };, +        }, +, +        @Override public void remove() {, +          backingIterator.remove();, +        }, +      };, +    }, +, +    @Override int distinctElements() {, +      return multimap().asMap().size();, +    }, +, +    @Override Set<Multiset.Entry<K>> createEntrySet() {, +      return new KeysEntrySet();, +    }, +, +    class KeysEntrySet extends Multisets.EntrySet<K> {, +      @Override Multiset<K> multiset() {, +        return Keys.this;, +      }, +, +      @Override public Iterator<Multiset.Entry<K>> iterator() {, +        return entryIterator();, +      }, +, +      @Override public int size() {, +        return distinctElements();, +      }, +, +      @Override public boolean isEmpty() {, +        return multimap().isEmpty();, +      }, +, +      @Override public boolean contains(@Nullable Object o) {, +        if (o instanceof Multiset.Entry<?>) {, +          Multiset.Entry<?> entry = (Multiset.Entry<?>) o;, +          Collection<V> collection = multimap().asMap().get(entry.getElement());, +          return collection != null && collection.size() == entry.getCount();, +        }, +        return false;, +      }, +, +      @Override public boolean remove(@Nullable Object o) {, +        if (o instanceof Multiset.Entry<?>) {, +          Multiset.Entry<?> entry = (Multiset.Entry<?>) o;, +          Collection<V> collection = multimap().asMap().get(entry.getElement());, +          if (collection != null && collection.size() == entry.getCount()) {, +            collection.clear();, +            return true;, +          }, +        }, +        return false;, +      }, +    }, +, +    @Override public boolean contains(@Nullable Object element) {, +      return multimap().containsKey(element);, +    }, +, +    @Override public Iterator<K> iterator() {, +      return Iterators.transform(multimap().entries().iterator(),, +          new Function<Map.Entry<K, V>, K>() {, +            @Override public K apply(Map.Entry<K, V> entry) {]