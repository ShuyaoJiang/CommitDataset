[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import com.google.common.annotations.Beta;, +import com.google.common.base.Equivalence;, +import com.google.common.base.Equivalences;, +import com.google.common.base.Preconditions;, +    return difference(left, right, Equivalences.equals());, +  }, +, +  /**, +   * Computes the difference between two maps. This difference is an immutable, +   * snapshot of the state of the maps at the time this method is called. It, +   * will never change, even if the maps change at a later time., +   *, +   * <p>Values are compared using a provided equivalence, in the case of, +   * equality, the value on the 'left' is returned in the difference., +   *, +   * <p>Since this method uses {@code HashMap} instances internally, the keys of, +   * the supplied maps must be well-behaved with respect to, +   * {@link Object#equals} and {@link Object#hashCode}., +   *, +   * @param left the map to treat as the "left" map for purposes of comparison, +   * @param right the map to treat as the "right" map for purposes of comparison, +   * @param valueEquivalence the equivalence relationship to use to compare, +   *    values, +   * @return the difference between the two maps, +   * @since Guava release 10, +   */, +  @Beta, +  public static <K, V> MapDifference<K, V> difference(, +      Map<? extends K, ? extends V> left, Map<? extends K, ? extends V> right,, +      Equivalence<? super V> equivalence) {, +    Preconditions.checkNotNull(equivalence);, +, +        if (equivalence.equivalent(leftValue, rightValue)) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import com.google.common.annotations.Beta;, +import com.google.common.base.Equivalence;, +import com.google.common.base.Equivalences;, +import com.google.common.base.Preconditions;, +    return difference(left, right, Equivalences.equals());, +  }, +, +  /**, +   * Computes the difference between two maps. This difference is an immutable, +   * snapshot of the state of the maps at the time this method is called. It, +   * will never change, even if the maps change at a later time., +   *, +   * <p>Values are compared using a provided equivalence, in the case of, +   * equality, the value on the 'left' is returned in the difference., +   *, +   * <p>Since this method uses {@code HashMap} instances internally, the keys of, +   * the supplied maps must be well-behaved with respect to, +   * {@link Object#equals} and {@link Object#hashCode}., +   *, +   * @param left the map to treat as the "left" map for purposes of comparison, +   * @param right the map to treat as the "right" map for purposes of comparison, +   * @param valueEquivalence the equivalence relationship to use to compare, +   *    values, +   * @return the difference between the two maps, +   * @since Guava release 10, +   */, +  @Beta, +  public static <K, V> MapDifference<K, V> difference(, +      Map<? extends K, ? extends V> left, Map<? extends K, ? extends V> right,, +      Equivalence<? super V> equivalence) {, +    Preconditions.checkNotNull(equivalence);, +, +        if (equivalence.equivalent(leftValue, rightValue)) {, +++ b/guava/src/com/google/common/collect/Maps.java, +import com.google.common.annotations.Beta;, +import com.google.common.base.Equivalence;, +import com.google.common.base.Equivalences;, +import com.google.common.base.Preconditions;, +    return difference(left, right, Equivalences.equals());, +  }, +, +  /**, +   * Computes the difference between two maps. This difference is an immutable, +   * snapshot of the state of the maps at the time this method is called. It, +   * will never change, even if the maps change at a later time., +   *, +   * <p>Values are compared using a provided equivalence, in the case of, +   * equality, the value on the 'left' is returned in the difference., +   *, +   * <p>Since this method uses {@code HashMap} instances internally, the keys of, +   * the supplied maps must be well-behaved with respect to, +   * {@link Object#equals} and {@link Object#hashCode}., +   *, +   * @param left the map to treat as the "left" map for purposes of comparison, +   * @param right the map to treat as the "right" map for purposes of comparison, +   * @param valueEquivalence the equivalence relationship to use to compare, +   *    values, +   * @return the difference between the two maps, +   * @since Guava release 10, +   */, +  @Beta, +  public static <K, V> MapDifference<K, V> difference(, +      Map<? extends K, ? extends V> left, Map<? extends K, ? extends V> right,, +      Equivalence<? super V> equivalence) {, +    Preconditions.checkNotNull(equivalence);]