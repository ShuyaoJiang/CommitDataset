[+++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  private static final DiscreteDomain<Integer> NOT_EQUAL_TO_INTEGERS =, +      new DiscreteDomain<Integer>() {, +        @Override, +        public Integer next(Integer value) {, +        @Override, +        public Integer previous(Integer value) {, +        @Override, +        public long distance(Integer start, Integer end) {, +        @Override, +        public Integer minValue() {, +        @Override, +        public Integer maxValue() {, +    assertThat(set.headSet(2)).containsExactly(1).inOrder();, +    assertThat(set.headSet(1, true)).containsExactly(1).inOrder();, +    assertThat(set.tailSet(3)).containsExactly(3).inOrder();, +    assertThat(set.tailSet(2, false)).containsExactly(3).inOrder();, +    assertThat(set.subSet(3, 4)).containsExactly(3).inOrder();, +    assertThat(set.subSet(2, 3)).containsExactly(2).inOrder();, +    assertThat(set.subSet(1, 2)).containsExactly(1).inOrder();, +    assertThat(set.subSet(1, false, 3, false)).containsExactly(2).inOrder();, +    assertEquals(, +        ImmutableSet.of(3), set.intersection(ContiguousSet.create(Range.closed(3, 5), integers())));, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  private static final DiscreteDomain<Integer> NOT_EQUAL_TO_INTEGERS =, +      new DiscreteDomain<Integer>() {, +        @Override, +        public Integer next(Integer value) {, +        @Override, +        public Integer previous(Integer value) {, +        @Override, +        public long distance(Integer start, Integer end) {, +        @Override, +        public Integer minValue() {, +        @Override, +        public Integer maxValue() {, +    assertThat(set.headSet(2)).containsExactly(1).inOrder();, +    assertThat(set.headSet(1, true)).containsExactly(1).inOrder();, +    assertThat(set.tailSet(3)).containsExactly(3).inOrder();, +    assertThat(set.tailSet(2, false)).containsExactly(3).inOrder();, +    assertThat(set.subSet(3, 4)).containsExactly(3).inOrder();, +    assertThat(set.subSet(2, 3)).containsExactly(2).inOrder();, +    assertThat(set.subSet(1, 2)).containsExactly(1).inOrder();, +    assertThat(set.subSet(1, false, 3, false)).containsExactly(2).inOrder();, +    assertEquals(, +        ImmutableSet.of(3), set.intersection(ContiguousSet.create(Range.closed(3, 5), integers())));, +++ b/guava/src/com/google/common/collect/RegularContiguousSet.java, +      return (lowerEndpoint.compareTo(upperEndpoint) <= 0)]