[+++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Doubles.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.primitives;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkElementIndex;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +import static java.lang.Double.NEGATIVE_INFINITY;, +import static java.lang.Double.POSITIVE_INFINITY;, +, +import com.google.common.annotations.GwtCompatible;, +, +import java.io.Serializable;, +import java.util.AbstractList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +import java.util.RandomAccess;, +, +/**, + * Static utility methods pertaining to {@code double} primitives, that are not, + * already found in either {@link Double} or {@link Arrays}., + *, + * <p>See the Guava User Guide article on <a href=, + * "http://code.google.com/p/guava-libraries/wiki/PrimitivesExplained">, + * primitive utilities</a>., + *, + * @author Kevin Bourrillion, + * @since 1.0, + */, +@GwtCompatible(emulated = true), +public final class Doubles {, +  private Doubles() {}, +, +  /**, +   * The number of bytes required to represent a primitive {@code double}, +   * value., +   *, +   * @since 10.0, +   */, +  public static final int BYTES = Double.SIZE / Byte.SIZE;, +, +  /**, +   * Returns a hash code for {@code value}; equal to the result of invoking, +   * {@code ((Double) value).hashCode()}., +   *, +   * @param value a primitive {@code double} value, +   * @return a hash code for the value, +   */, +  public static int hashCode(double value) {, +    return ((Double) value).hashCode();, +    // TODO(kevinb): do it this way when we can (GWT problem):, +    // long bits = Double.doubleToLongBits(value);, +    // return (int)(bits ^ (bits >>> 32));, +  }, +, +  /**, +   * Compares the two specified {@code double} values. The sign of the value, +   * returned is the same as that of <code>((Double) a).{@linkplain, +   * Double#compareTo compareTo}(b)</code>. As with that method, {@code NaN} is, +   * treated as greater than all other values, and {@code 0.0 > -0.0}., +   *, +   * @param a the first {@code double} to compare, +   * @param b the second {@code double} to compare, +   * @return a negative value if {@code a} is less than {@code b}; a positive, +   *     value if {@code a} is greater than {@code b}; or zero if they are equal, +   */, +  public static int compare(double a, double b) {, +    return Double.compare(a, b);, +  }, +, +  /**, +   * Returns {@code true} if {@code value} represents a real number. This is, +   * equivalent to, but not necessarily implemented as,, +   * {@code !(Double.isInfinite(value) || Double.isNaN(value))}., +   *, +   * @since 10.0, +   */, +  public static boolean isFinite(double value) {, +    return NEGATIVE_INFINITY < value & value < POSITIVE_INFINITY;, +  }, +, +  /**]