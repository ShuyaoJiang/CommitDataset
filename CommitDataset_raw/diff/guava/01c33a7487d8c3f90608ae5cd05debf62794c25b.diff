[+++ b/guava/src/com/google/common/collect/EmptyImmutableList.java, +import java.util.List;, +  @Override public boolean isEmpty() {, +    return true;, +  }, +, +  @Override public boolean equals(@Nullable Object object) {, +    if (object instanceof List) {, +      List<?> that = (List<?>) object;, +      return that.isEmpty();, +    }, +    return false;, +  }, +, +++ b/guava/src/com/google/common/collect/EmptyImmutableList.java, +import java.util.List;, +  @Override public boolean isEmpty() {, +    return true;, +  }, +, +  @Override public boolean equals(@Nullable Object object) {, +    if (object instanceof List) {, +      List<?> that = (List<?>) object;, +      return that.isEmpty();, +    }, +    return false;, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +import static com.google.common.base.Preconditions.checkPositionIndex;, +    return construct(e1, e2);, +    return construct(e1, e2, e3);, +    return construct(e1, e2, e3, e4);, +    return construct(e1, e2, e3, e4, e5);, +    return construct(e1, e2, e3, e4, e5, e6);, +    return construct(e1, e2, e3, e4, e5, e6, e7);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8, e9);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);, +    Object[] array = new Object[12 + others.length];, +    array[0] = e1;, +    array[1] = e2;, +    array[2] = e3;, +    array[3] = e4;, +    array[4] = e5;, +    array[5] = e6;, +    array[6] = e7;, +    array[7] = e8;, +    array[8] = e9;, +    array[9] = e10;, +    array[10] = e11;, +    array[11] = e12;, +    System.arraycopy(others, 0, array, 12, others.length);, +    return construct(array);, +    switch (elements.length) {, +      case 0:, +        return ImmutableList.of();, +      case 1:, +        return new SingletonImmutableList<E>(elements[0]);, +      default:, +        return construct(elements.clone());, +    }, +  static <E> ImmutableList<E> asImmutableList(Object[] elements) {, +        return construct(elements);, +  /** {@code elements} has to be internally created array. */, +  private static <E> ImmutableList<E> construct(Object... elements) {, +    for (int i = 0; i < elements.length; i++) {, +      ObjectArrays.checkElementNotNull(elements[i], i);, +    }, +    return new RegularImmutableList<E>(elements);, +  }, +, +    @Override public UnmodifiableListIterator<E> listIterator(int index) {, +      checkPositionIndex(index, size);, +      final UnmodifiableListIterator<E> forward =, +          forwardList.listIterator(reversePosition(index));, +      return new UnmodifiableListIterator<E>() {, +        @Override public boolean hasNext() {, +          return forward.hasPrevious();, +        }, +, +        @Override public boolean hasPrevious() {, +          return forward.hasNext();, +        }, +, +        @Override public E next() {, +          return forward.previous();, +        }, +, +        @Override public int nextIndex() {, +          return reverseIndex(forward.previousIndex());, +        }, +, +        @Override public E previous() {, +          return forward.next();, +        }, +, +        @Override public int previousIndex() {, +          return reverseIndex(forward.nextIndex());]