[+++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * Verifies that {@code key} and {@code value} are non-null, and returns a new, +   * immutable entry with those values., +   *, +   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always, +   * throw {@link UnsupportedOperationException}., +   */, +  private static <K, V> ImmutableEntry<K, V> entryOf(K key, V value) {, +    checkEntryNotNull(key, value);, +    return new ImmutableEntry<K, V>(key, value);, +  }, +, +  /**, +    @SuppressWarnings("unchecked"), +    public Builder() {, +      super(new ImmutableEntry[ImmutableCollection.Builder.DEFAULT_INITIAL_CAPACITY]);, +    }, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * Verifies that {@code key} and {@code value} are non-null, and returns a new, +   * immutable entry with those values., +   *, +   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always, +   * throw {@link UnsupportedOperationException}., +   */, +  private static <K, V> ImmutableEntry<K, V> entryOf(K key, V value) {, +    checkEntryNotNull(key, value);, +    return new ImmutableEntry<K, V>(key, value);, +  }, +, +  /**, +    @SuppressWarnings("unchecked"), +    public Builder() {, +      super(new ImmutableEntry[ImmutableCollection.Builder.DEFAULT_INITIAL_CAPACITY]);, +    }, +++ b/guava/src/com/google/common/collect/ImmutableEntry.java, +  @Nullable @Override public final K getKey() {, +  @Nullable @Override public final V getValue() {, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * Verifies that {@code key} and {@code value} are non-null, and returns a new, +   * immutable entry with those values., +   *, +   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always, +   * throw {@link UnsupportedOperationException}., +   */, +  private static <K, V> ImmutableEntry<K, V> entryOf(K key, V value) {, +    checkEntryNotNull(key, value);, +    return new ImmutableEntry<K, V>(key, value);, +  }, +, +  /**, +    @SuppressWarnings("unchecked"), +    public Builder() {, +      super(new ImmutableEntry[ImmutableCollection.Builder.DEFAULT_INITIAL_CAPACITY]);, +    }, +++ b/guava/src/com/google/common/collect/ImmutableEntry.java, +  @Nullable @Override public final K getKey() {, +  @Nullable @Override public final V getValue() {, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +import com.google.common.collect.RegularImmutableMap.TerminalMapEntry;, +, +  private static <K, V> TerminalMapEntry<K, V> entryOf(K key, V value) {, +    return new TerminalMapEntry<K, V>(key, value);, +  }, +, +  /**, +   * Returns a new builder. The generated builder is equivalent to the builder, +   * created by the {@link Builder} constructor., +   */, +  public static <K, V> Builder<K, V> builder() {, +    return new Builder<K, V>();, +    ImmutableEntry<K, V>[] entries;, +    Builder(ImmutableEntry<K, V>[] entries) {, +      this.entries = entries;, +    Builder(int initialCapacity) {, +      this(new TerminalMapEntry[initialCapacity]);, +      this.size = 0;, +    ImmutableEntry<K, V> entryOf(K key, V value) {, +      return ImmutableMap.entryOf(key, value);, +    }, +, +      ImmutableEntry<K, V> entry = entryOf(key, value);, +      put(entry.getKey(), entry.getValue());, +        put(entry);, +      switch (size) {, +        case 0:, +          return of();, +        case 1:, +          return of(entries[0].getKey(), entries[0].getValue());, +        default:, +          return new RegularImmutableMap<K, V>(size, (TerminalMapEntry<?, ?>[]) entries);, +      }, +    switch (entries.length) {, +        return of(onlyEntry.getKey(), onlyEntry.getValue());, +        return new RegularImmutableMap<K, V>(entries);, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * Verifies that {@code key} and {@code value} are non-null, and returns a new, +   * immutable entry with those values., +   *, +   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always, +   * throw {@link UnsupportedOperationException}.]