[+++ b/android/guava-tests/test/com/google/common/primitives/BooleansTest.java, +  public void testReverse() {, +    testReverse(new boolean[] {}, new boolean[] {});, +    testReverse(new boolean[] {true}, new boolean[] {true});, +    testReverse(new boolean[] {false, true}, new boolean[] {true, false});, +    testReverse(new boolean[] {true, false, false}, new boolean[] {false, false, true});, +    testReverse(new boolean[] {true, true, false, false}, new boolean[] {false, false, true, true});, +  }, +, +  public void testReverseIndexed() {, +    testReverse(new boolean[] {}, 0, 0, new boolean[] {});, +    testReverse(new boolean[] {true}, 0, 1, new boolean[] {true});, +    testReverse(new boolean[] {false, true}, 0, 2, new boolean[] {true, false});, +    testReverse(new boolean[] {true, false, false}, 0, 2, new boolean[] {false, true, false});, +    testReverse(new boolean[] {true, false, false}, 0, 1, new boolean[] {true, false, false});, +    testReverse(, +        new boolean[] {true, true, false, false}, 1, 3, new boolean[] {true, false, true, false});, +  }, +, +  private static void testReverse(boolean[] input, boolean[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Booleans.reverse(input);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +  private static void testReverse(, +      boolean[] input, int fromIndex, int toIndex, boolean[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Booleans.reverse(input, fromIndex, toIndex);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +++ b/android/guava-tests/test/com/google/common/primitives/BooleansTest.java, +  public void testReverse() {, +    testReverse(new boolean[] {}, new boolean[] {});, +    testReverse(new boolean[] {true}, new boolean[] {true});, +    testReverse(new boolean[] {false, true}, new boolean[] {true, false});, +    testReverse(new boolean[] {true, false, false}, new boolean[] {false, false, true});, +    testReverse(new boolean[] {true, true, false, false}, new boolean[] {false, false, true, true});, +  }, +, +  public void testReverseIndexed() {, +    testReverse(new boolean[] {}, 0, 0, new boolean[] {});, +    testReverse(new boolean[] {true}, 0, 1, new boolean[] {true});, +    testReverse(new boolean[] {false, true}, 0, 2, new boolean[] {true, false});, +    testReverse(new boolean[] {true, false, false}, 0, 2, new boolean[] {false, true, false});, +    testReverse(new boolean[] {true, false, false}, 0, 1, new boolean[] {true, false, false});, +    testReverse(, +        new boolean[] {true, true, false, false}, 1, 3, new boolean[] {true, false, true, false});, +  }, +, +  private static void testReverse(boolean[] input, boolean[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Booleans.reverse(input);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +  private static void testReverse(, +      boolean[] input, int fromIndex, int toIndex, boolean[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Booleans.reverse(input, fromIndex, toIndex);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +++ b/android/guava-tests/test/com/google/common/primitives/BytesTest.java, +  public void testReverse() {, +    testReverse(new byte[] {}, new byte[] {});, +    testReverse(new byte[] {1}, new byte[] {1});, +    testReverse(new byte[] {1, 2}, new byte[] {2, 1});, +    testReverse(new byte[] {3, 1, 1}, new byte[] {1, 1, 3});, +    testReverse(new byte[] {-1, 1, -2, 2}, new byte[] {2, -2, 1, -1});, +  }, +, +  public void testReverseIndexed() {, +    testReverse(new byte[] {}, 0, 0, new byte[] {});, +    testReverse(new byte[] {1}, 0, 1, new byte[] {1});, +    testReverse(new byte[] {1, 2}, 0, 2, new byte[] {2, 1});, +    testReverse(new byte[] {3, 1, 1}, 0, 2, new byte[] {1, 3, 1});, +    testReverse(new byte[] {3, 1, 1}, 0, 1, new byte[] {3, 1, 1});, +    testReverse(new byte[] {-1, 1, -2, 2}, 1, 3, new byte[] {-1, -2, 1, 2});, +  }, +, +  private static void testReverse(byte[] input, byte[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Bytes.reverse(input);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +  private static void testReverse(byte[] input, int fromIndex, int toIndex, byte[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Bytes.reverse(input, fromIndex, toIndex);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +++ b/android/guava-tests/test/com/google/common/primitives/BooleansTest.java, +  public void testReverse() {, +    testReverse(new boolean[] {}, new boolean[] {});, +    testReverse(new boolean[] {true}, new boolean[] {true});, +    testReverse(new boolean[] {false, true}, new boolean[] {true, false});, +    testReverse(new boolean[] {true, false, false}, new boolean[] {false, false, true});]