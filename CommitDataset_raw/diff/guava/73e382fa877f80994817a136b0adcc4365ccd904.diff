[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java, +import com.google.common.annotations.Beta;, +import java.util.function.Function;, +import java.util.stream.Collector;, +  @Beta, +  public static <T, K, V> Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(, +      Function<? super T, ? extends K> keyFunction,, +      Function<? super T, ? extends V> valueFunction) {, +    return CollectCollectors.toImmutableBiMap(keyFunction, valueFunction);, +  }, +    Builder<K, V> combine(Builder<K, V> other) {, +      super.combine(other);, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java, +import com.google.common.annotations.Beta;, +import java.util.function.Function;, +import java.util.stream.Collector;, +  @Beta, +  public static <T, K, V> Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(, +      Function<? super T, ? extends K> keyFunction,, +      Function<? super T, ? extends V> valueFunction) {, +    return CollectCollectors.toImmutableBiMap(keyFunction, valueFunction);, +  }, +    Builder<K, V> combine(Builder<K, V> other) {, +      super.combine(other);, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableCollection.java, +import java.util.Spliterator;, +  static final int SPLITERATOR_CHARACTERISTICS =, +      Spliterator.IMMUTABLE | Spliterator.NONNULL | Spliterator.ORDERED;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java, +import com.google.common.annotations.Beta;, +import java.util.function.Function;, +import java.util.stream.Collector;, +  @Beta, +  public static <T, K, V> Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(, +      Function<? super T, ? extends K> keyFunction,, +      Function<? super T, ? extends V> valueFunction) {, +    return CollectCollectors.toImmutableBiMap(keyFunction, valueFunction);, +  }, +    Builder<K, V> combine(Builder<K, V> other) {, +      super.combine(other);, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableCollection.java, +import java.util.Spliterator;, +  static final int SPLITERATOR_CHARACTERISTICS =, +      Spliterator.IMMUTABLE | Spliterator.NONNULL | Spliterator.ORDERED;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +import com.google.common.annotations.Beta;, +import java.util.stream.Collector;, +  @Beta, +  public static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {, +    return CollectCollectors.toImmutableList();, +  }, +, +    @CanIgnoreReturnValue, +    Builder<E> combine(Builder<E> builder) {, +      checkNotNull(builder);, +      contents.addAll(builder.contents);, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java, +import com.google.common.annotations.Beta;, +import java.util.function.Function;, +import java.util.stream.Collector;, +  @Beta, +  public static <T, K, V> Collector<T, ?, ImmutableBiMap<K, V>> toImmutableBiMap(, +      Function<? super T, ? extends K> keyFunction,, +      Function<? super T, ? extends V> valueFunction) {, +    return CollectCollectors.toImmutableBiMap(keyFunction, valueFunction);, +  }, +    Builder<K, V> combine(Builder<K, V> other) {, +      super.combine(other);, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableCollection.java, +import java.util.Spliterator;, +  static final int SPLITERATOR_CHARACTERISTICS =, +      Spliterator.IMMUTABLE | Spliterator.NONNULL | Spliterator.ORDERED;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +import com.google.common.annotations.Beta;, +import java.util.stream.Collector;, +  @Beta, +  public static <E> Collector<E, ?, ImmutableList<E>> toImmutableList() {, +    return CollectCollectors.toImmutableList();, +  }, +, +    @CanIgnoreReturnValue, +    Builder<E> combine(Builder<E> builder) {, +      checkNotNull(builder);, +      contents.addAll(builder.contents);, +      return this;]