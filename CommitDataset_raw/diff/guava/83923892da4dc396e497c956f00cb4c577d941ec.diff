[+++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return (ImmutableSortedMultiset) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +    if (Ordering.natural().equals(comparator)) {, +      return (ImmutableSortedMultiset<E>) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return (ImmutableSortedMultiset) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +    if (Ordering.natural().equals(comparator)) {, +      return (ImmutableSortedMultiset<E>) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +++ b/guava/src/com/google/common/collect/ImmutableSortedSet.java, +    if (Ordering.natural().equals(comparator)) {, +      return (RegularImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +    return (ImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return (ImmutableSortedMultiset) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +    if (Ordering.natural().equals(comparator)) {, +      return (ImmutableSortedMultiset<E>) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +++ b/guava/src/com/google/common/collect/ImmutableSortedSet.java, +    if (Ordering.natural().equals(comparator)) {, +      return (RegularImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +    return (ImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +    return (ImmutableTable<R, C, V>) SparseImmutableTable.EMPTY;, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return (ImmutableSortedMultiset) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +    if (Ordering.natural().equals(comparator)) {, +      return (ImmutableSortedMultiset<E>) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +++ b/guava/src/com/google/common/collect/ImmutableSortedSet.java, +    if (Ordering.natural().equals(comparator)) {, +      return (RegularImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +    return (ImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +    return (ImmutableTable<R, C, V>) SparseImmutableTable.EMPTY;, +++ b/guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java, +  static final ImmutableSortedMultiset<Comparable> NATURAL_EMPTY_MULTISET =, +      new RegularImmutableSortedMultiset<Comparable>(Ordering.natural());, +, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return (ImmutableSortedMultiset) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +    if (Ordering.natural().equals(comparator)) {, +      return (ImmutableSortedMultiset<E>) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +++ b/guava/src/com/google/common/collect/ImmutableSortedSet.java, +    if (Ordering.natural().equals(comparator)) {, +      return (RegularImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +    return (ImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +    return (ImmutableTable<R, C, V>) SparseImmutableTable.EMPTY;, +++ b/guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java, +  static final ImmutableSortedMultiset<Comparable> NATURAL_EMPTY_MULTISET =, +      new RegularImmutableSortedMultiset<Comparable>(Ordering.natural());, +, +++ b/guava/src/com/google/common/collect/RegularImmutableSortedSet.java, +  static final RegularImmutableSortedSet<Comparable> NATURAL_EMPTY_SET =, +      new RegularImmutableSortedSet<Comparable>(ImmutableList.<Comparable>of(), Ordering.natural());, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return (ImmutableSortedMultiset) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +    if (Ordering.natural().equals(comparator)) {, +      return (ImmutableSortedMultiset<E>) RegularImmutableSortedMultiset.NATURAL_EMPTY_MULTISET;, +++ b/guava/src/com/google/common/collect/ImmutableSortedSet.java, +    if (Ordering.natural().equals(comparator)) {, +      return (RegularImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +    return (ImmutableSortedSet<E>) RegularImmutableSortedSet.NATURAL_EMPTY_SET;, +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +    return (ImmutableTable<R, C, V>) SparseImmutableTable.EMPTY;, +++ b/guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java, +  static final ImmutableSortedMultiset<Comparable> NATURAL_EMPTY_MULTISET =, +      new RegularImmutableSortedMultiset<Comparable>(Ordering.natural());, +, +++ b/guava/src/com/google/common/collect/RegularImmutableSortedSet.java, +  static final RegularImmutableSortedSet<Comparable> NATURAL_EMPTY_SET =, +      new RegularImmutableSortedSet<Comparable>(ImmutableList.<Comparable>of(), Ordering.natural());, +++ b/guava/src/com/google/common/collect/SparseImmutableTable.java, +  static final ImmutableTable<Object, Object, Object> EMPTY =, +      new SparseImmutableTable<Object, Object, Object>(, +          ImmutableList.<Cell<Object, Object, Object>>of(), ImmutableSet.of(), ImmutableSet.of());]