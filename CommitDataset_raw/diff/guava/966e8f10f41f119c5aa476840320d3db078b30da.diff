[+++ b/guava-tests/test/com/google/common/graph/IncidentNodesTest.java, + *, + * TODO(b/24415223): Consider SetTestSuiteBuilder once this supports > 2 nodes (i.e. hypergraphs)., +, +  @Test, +  public void testSet_basic() {, +    IncidentNodes<String> incidentNodes = IncidentNodes.of("source", "target");, +    assertThat(incidentNodes).containsExactly("source", "target").inOrder();, +    new EqualsTester().addEqualityGroup(incidentNodes, ImmutableSet.of("source", "target")), +        .testEquals();, +  }, +, +  @Test, +  public void testSet_selfLoop() {, +    // Allocate new strings to ensure that equals() equality is used instead of reference equality., +    IncidentNodes<String> incidentNodes = IncidentNodes.of(new String("node"), new String("node"));, +    assertThat(incidentNodes).containsExactly("node").inOrder();, +    new EqualsTester().addEqualityGroup(incidentNodes, ImmutableSet.of("node")).testEquals();, +  }, +++ b/guava-tests/test/com/google/common/graph/IncidentNodesTest.java, + *, + * TODO(b/24415223): Consider SetTestSuiteBuilder once this supports > 2 nodes (i.e. hypergraphs)., +, +  @Test, +  public void testSet_basic() {, +    IncidentNodes<String> incidentNodes = IncidentNodes.of("source", "target");, +    assertThat(incidentNodes).containsExactly("source", "target").inOrder();, +    new EqualsTester().addEqualityGroup(incidentNodes, ImmutableSet.of("source", "target")), +        .testEquals();, +  }, +, +  @Test, +  public void testSet_selfLoop() {, +    // Allocate new strings to ensure that equals() equality is used instead of reference equality., +    IncidentNodes<String> incidentNodes = IncidentNodes.of(new String("node"), new String("node"));, +    assertThat(incidentNodes).containsExactly("node").inOrder();, +    new EqualsTester().addEqualityGroup(incidentNodes, ImmutableSet.of("node")).testEquals();, +  }, +++ b/guava/src/com/google/common/graph/IncidentNodes.java, +import javax.annotation.Nullable;, +, + * An immutable set representing the nodes incident to an edge in a graph., +   * In the case of a directed graph, returns the source node of the incident edge. In the case of, +   * an undirected graph, returns an arbitrary (but consistent) endpoint of the incident edge., +   * Returns the node opposite to {@link #node1} along the incident edge. In the case of a directed, +   * graph, this will always be the target node of the incident edge., +      this.node = checkNotNull(node, "node");, +    public boolean contains(@Nullable Object object) {, +      return node.equals(object);, +    }, +, +    @Override, +    /**, +     * An immutable set with two non-equal nodes. Iterates as {@code node1}, {@code node2}., +     */, +      this.node1 = checkNotNull(node1, "node1");, +      this.node2 = checkNotNull(node2, "node2");, +    public boolean contains(@Nullable Object object) {, +      return node1.equals(object) || node2.equals(object);, +    }, +, +    @Override]