[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +  public void testExpectedFpp() {, +    double fpp = bf.expectedFpp();, +      double newFpp = bf.expectedFpp();, +    assertEquals(bf.expectedFpp(), copy.expectedFpp());, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +  public void testExpectedFpp() {, +    double fpp = bf.expectedFpp();, +      double newFpp = bf.expectedFpp();, +    assertEquals(bf.expectedFpp(), copy.expectedFpp());, +++ b/guava/src/com/google/common/hash/BloomFilter.java, + * <p>The false positive probability ({@code FPP}) of a bloom filter is defined as the probability, + * that {@linkplain #mightContain(Object)} will erroneously return {@code true} for an object that, + * has not actually been put in the {@code BloomFilter}., + *, +   * <p>Ideally, this number should be close to the {@code fpp} parameter, +   *, +   * @since 14.0 (since 11.0 as expectedFalsePositiveProbability()), +  public double expectedFpp() {, +    // You down with FPP? (Yeah you know me!) Who's down with FPP? (Every last homie!), +   * @deprecated Use {@link expectedFpp} instead., +   */, +  @Deprecated, +  public double expectedFalsePositiveProbability() {, +    return expectedFpp();, +  }, +, +  /**, +   * @param fpp the desired false positive probability (must be positive and less than 1.0), +  public static <T> BloomFilter<T> create(, +      Funnel<T> funnel, int expectedInsertions /* n */, double fpp) {, +    checkArgument(expectedInsertions >= 0, "Expected insertions (%s) cannot be negative",, +        expectedInsertions);, +    checkArgument(fpp > 0.0 & fpp < 1.0,, +        "False positive probability (%s) must be in (0.0, 1.0)", fpp);, +     * TODO(user): Put a warning in the javadoc about tiny fpp values,, +    int numBits = optimalNumOfBits(expectedInsertions, fpp);]