[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their, +   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also, +   * accepts non-{@code Collection} iterables and empty iterables., +   * Creates a <i>mutable</i>, initially empty {@code HashSet} instance., +   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSet#of()} instead. If, +   * {@code E} is an {@link Enum} type, use {@link EnumSet#noneOf} instead. Otherwise, strongly, +   * consider using a {@code LinkedHashSet} instead, at the cost of increased memory footprint, to, +   * get deterministic iteration behavior., +   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as, +   * deprecated. Instead, use the {@code HashSet} constructor directly, taking advantage of the new, +   * <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * Creates a <i>mutable</i> {@code HashSet} instance initially containing the given elements., +   * <p><b>Note:</b> if elements are non-null and won't be added or removed after this point, use, +   * {@link ImmutableSet#of()} or {@link ImmutableSet#copyOf(Object[])} instead. If {@code E} is an, +   * {@link Enum} type, use {@link EnumSet#of(Enum, Enum[])} instead. Otherwise, strongly consider, +   * using a {@code LinkedHashSet} instead, at the cost of increased memory footprint, to get, +   * deterministic iteration behavior., +   * <p>This method is just a small convenience, either for {@code newHashSet(}{@link Arrays#asList, +   * asList}{@code (...))}, or for creating an empty set then calling {@link Collections#addAll}., +   * This method is not actually very useful and will likely be deprecated in the future., +   * Creates a {@code HashSet} instance, with a high enough initial table size that it <i>should</i>, +   * hold {@code expectedSize} elements without resizing. This behavior cannot be broadly, +   * guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the, +   * method isn't inadvertently <i>oversizing</i> the returned set., +   * Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin, +   * convenience for creating an empty set then calling {@link Collection#addAll} or {@link, +   * Iterables#addAll}., +   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link, +   * ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link, +   * FluentIterable} and call {@code elements.toSet()}.), +   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)}, +   * instead., +   * <p><b>Note for Java 7 and later:</b> if {@code elements} is a {@link Collection}, you don't, +   * need this method. Instead, use the {@code HashSet} constructor directly, taking advantage of, +   * the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   *, +   * <p>Overall, this method is not very useful and will likely be deprecated in the future., +   * Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin, +   * convenience for creating an empty set and then calling {@link Iterators#addAll}., +   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link, +   * ImmutableSet#copyOf(Iterator)} instead., +   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet}, +   * instead., +   * <p>Overall, this method is not very useful and will likely be deprecated in the future., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their, +   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also, +   * accepts non-{@code Collection} iterables and empty iterables., +   * Creates a <i>mutable</i>, initially empty {@code HashSet} instance., +   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSet#of()} instead. If, +   * {@code E} is an {@link Enum} type, use {@link EnumSet#noneOf} instead. Otherwise, strongly, +   * consider using a {@code LinkedHashSet} instead, at the cost of increased memory footprint, to, +   * get deterministic iteration behavior., +   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as, +   * deprecated. Instead, use the {@code HashSet} constructor directly, taking advantage of the new, +   * <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * Creates a <i>mutable</i> {@code HashSet} instance initially containing the given elements., +   * <p><b>Note:</b> if elements are non-null and won't be added or removed after this point, use, +   * {@link ImmutableSet#of()} or {@link ImmutableSet#copyOf(Object[])} instead. If {@code E} is an, +   * {@link Enum} type, use {@link EnumSet#of(Enum, Enum[])} instead. Otherwise, strongly consider, +   * using a {@code LinkedHashSet} instead, at the cost of increased memory footprint, to get, +   * deterministic iteration behavior., +   * <p>This method is just a small convenience, either for {@code newHashSet(}{@link Arrays#asList, +   * asList}{@code (...))}, or for creating an empty set then calling {@link Collections#addAll}., +   * This method is not actually very useful and will likely be deprecated in the future., +   * Creates a {@code HashSet} instance, with a high enough initial table size that it <i>should</i>, +   * hold {@code expectedSize} elements without resizing. This behavior cannot be broadly, +   * guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the, +   * method isn't inadvertently <i>oversizing</i> the returned set., +   * Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin, +   * convenience for creating an empty set then calling {@link Collection#addAll} or {@link, +   * Iterables#addAll}., +   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link, +   * ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link, +   * FluentIterable} and call {@code elements.toSet()}.), +   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)}, +   * instead., +   * <p><b>Note for Java 7 and later:</b> if {@code elements} is a {@link Collection}, you don't, +   * need this method. Instead, use the {@code HashSet} constructor directly, taking advantage of, +   * the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   *, +   * <p>Overall, this method is not very useful and will likely be deprecated in the future., +   * Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin, +   * convenience for creating an empty set and then calling {@link Iterators#addAll}., +   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link, +   * ImmutableSet#copyOf(Iterator)} instead., +   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet}, +   * instead., +   * <p>Overall, this method is not very useful and will likely be deprecated in the future., +++ b/guava/src/com/google/common/collect/Multiset.java, +   * <p>To both add the element and obtain the previous count of that element,, +   * use {@link #add(E, int) add}{@code (element, 1)} instead., +   *, +   * <p>To both remove the element and obtain the previous count of that element,, +   * use {@link #remove(E, int) remove}{@code (element, 1)} instead., +   *, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their, +   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also]