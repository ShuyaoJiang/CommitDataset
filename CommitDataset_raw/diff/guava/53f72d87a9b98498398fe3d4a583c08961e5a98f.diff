[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  public void copyOf_directedValueGraph() {, +    ValueGraph<Integer, String> directedGraph = buildDirectedTestValueGraph();, +, +    Graph<Integer> copy = copyOf(directedGraph);, +    assertThat(copy).isEqualTo(directedGraph);, +  }, +, +  @Test, +  public void copyOf_undirectedValueGraph() {, +    ValueGraph<Integer, String> undirectedGraph = buildUndirectedTestValueGraph();, +, +    Graph<Integer> copy = copyOf(undirectedGraph);, +    assertThat(copy).isEqualTo(undirectedGraph);, +  }, +, +  @Test, +    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();, +    MutableGraph<Integer> undirectedGraph = GraphBuilder.undirected().allowsSelfLoops(true).build();, +  private static MutableValueGraph<Integer, String> buildDirectedTestValueGraph() {, +    MutableValueGraph<Integer, String> directedGraph =, +        ValueGraphBuilder.directed().allowsSelfLoops(true).build();, +    directedGraph.putEdgeValue(N1, N1, E11);, +    directedGraph.putEdgeValue(N1, N2, E12);, +    directedGraph.putEdgeValue(N2, N1, E21);, +, +    return directedGraph;, +  }, +, +  private static MutableValueGraph<Integer, String> buildUndirectedTestValueGraph() {, +    MutableValueGraph<Integer, String> undirectedGraph =, +        ValueGraphBuilder.undirected().allowsSelfLoops(true).build();, +    undirectedGraph.putEdgeValue(N1, N1, E11);, +    undirectedGraph.putEdgeValue(N1, N2, E12);, +    undirectedGraph.putEdgeValue(N2, N1, E21); // overwrites E12, +, +    return undirectedGraph;, +  }, +, +        NetworkBuilder.directed().allowsSelfLoops(true).allowsParallelEdges(true).build();, +        NetworkBuilder.undirected().allowsSelfLoops(true).allowsParallelEdges(true).build();, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  public void copyOf_directedValueGraph() {, +    ValueGraph<Integer, String> directedGraph = buildDirectedTestValueGraph();, +, +    Graph<Integer> copy = copyOf(directedGraph);, +    assertThat(copy).isEqualTo(directedGraph);, +  }, +, +  @Test, +  public void copyOf_undirectedValueGraph() {, +    ValueGraph<Integer, String> undirectedGraph = buildUndirectedTestValueGraph();, +, +    Graph<Integer> copy = copyOf(undirectedGraph);, +    assertThat(copy).isEqualTo(undirectedGraph);, +  }, +, +  @Test, +    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(true).build();, +    MutableGraph<Integer> undirectedGraph = GraphBuilder.undirected().allowsSelfLoops(true).build();, +  private static MutableValueGraph<Integer, String> buildDirectedTestValueGraph() {, +    MutableValueGraph<Integer, String> directedGraph =, +        ValueGraphBuilder.directed().allowsSelfLoops(true).build();, +    directedGraph.putEdgeValue(N1, N1, E11);, +    directedGraph.putEdgeValue(N1, N2, E12);, +    directedGraph.putEdgeValue(N2, N1, E21);, +, +    return directedGraph;, +  }, +, +  private static MutableValueGraph<Integer, String> buildUndirectedTestValueGraph() {, +    MutableValueGraph<Integer, String> undirectedGraph =, +        ValueGraphBuilder.undirected().allowsSelfLoops(true).build();, +    undirectedGraph.putEdgeValue(N1, N1, E11);, +    undirectedGraph.putEdgeValue(N1, N2, E12);, +    undirectedGraph.putEdgeValue(N2, N1, E21); // overwrites E12, +, +    return undirectedGraph;, +  }, +, +        NetworkBuilder.directed().allowsSelfLoops(true).allowsParallelEdges(true).build();, +        NetworkBuilder.undirected().allowsSelfLoops(true).allowsParallelEdges(true).build();, +++ b/guava/src/com/google/common/graph/Graphs.java]