[+++ b/android/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testConcatPartiallyAdvancedSecond() {, +    Iterator<String> itr1 =, +        Iterators.concat(Iterators.singletonIterator("a"), Iterators.forArray("b", "c"));, +  public void testConcatPartiallyAdvancedFirst() {, +    Iterator<String> itr1 =, +        Iterators.concat(Iterators.singletonIterator("a"), Iterators.forArray("b", "c"));, +    assertEquals("a", itr1.next());, +    assertEquals("b", itr1.next());, +    Iterator<String> itr2 = Iterators.concat(itr1, Iterators.singletonIterator("d"));, +    assertEquals("c", itr2.next());, +    assertEquals("d", itr2.next());, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testConcatPartiallyAdvancedSecond() {, +    Iterator<String> itr1 =, +        Iterators.concat(Iterators.singletonIterator("a"), Iterators.forArray("b", "c"));, +  public void testConcatPartiallyAdvancedFirst() {, +    Iterator<String> itr1 =, +        Iterators.concat(Iterators.singletonIterator("a"), Iterators.forArray("b", "c"));, +    assertEquals("a", itr1.next());, +    assertEquals("b", itr1.next());, +    Iterator<String> itr2 = Iterators.concat(itr1, Iterators.singletonIterator("d"));, +    assertEquals("c", itr2.next());, +    assertEquals("d", itr2.next());, +  }, +, +++ b/android/guava/src/com/google/common/collect/Iterators.java, +    /* The last iterator to return an element.  Calls to remove() go to this iterator. */, +    /* The iterator currently returning elements. */, +    private Iterator<? extends T> iterator;, +, +    /*, +     * We track the "meta iterators," the iterators-of-iterators, below.  Usually, topMetaIterator, +     * is the only one in use, but if we encounter nested concatenations, we start a deque of, +     * meta-iterators rather than letting the nesting get arbitrarily deep.  This keeps each, +     * operation O(1)., +     */, +, +    private Iterator<? extends Iterator<? extends T>> topMetaIterator;, +, +    // Only becomes nonnull if we encounter nested concatenations., +    @Nullable, +      iterator = emptyIterator();, +      topMetaIterator = checkNotNull(metaIterator);, +    }, +, +    // Returns a nonempty meta-iterator or, if all meta-iterators are empty, null., +    @Nullable, +    private Iterator<? extends Iterator<? extends T>> getTopMetaIterator() {, +      while (topMetaIterator == null || !topMetaIterator.hasNext()) {, +        if (metaIterators != null && !metaIterators.isEmpty()) {, +          topMetaIterator = metaIterators.removeFirst();, +        } else {, +          return null;, +        }, +      }, +      return topMetaIterator;, +        topMetaIterator = getTopMetaIterator();, +        if (topMetaIterator == null) {, +        iterator = topMetaIterator.next();, +, +          // topConcat.topMetaIterator, then topConcat.metaIterators, then this.topMetaIterator,, +          // then this.metaIterators, +, +          if (this.metaIterators == null) {, +            this.metaIterators = new ArrayDeque<>();, +          }, +          this.metaIterators.addFirst(this.topMetaIterator);, +          if (topConcat.metaIterators != null) {, +            while (!topConcat.metaIterators.isEmpty()) {, +              this.metaIterators.addFirst(topConcat.metaIterators.removeLast());, +            }, +          }, +          this.topMetaIterator = topConcat.topMetaIterator;, +++ b/android/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testConcatPartiallyAdvancedSecond() {, +    Iterator<String> itr1 =, +        Iterators.concat(Iterators.singletonIterator("a"), Iterators.forArray("b", "c"));, +  public void testConcatPartiallyAdvancedFirst() {, +    Iterator<String> itr1 =, +        Iterators.concat(Iterators.singletonIterator("a"), Iterators.forArray("b", "c"));, +    assertEquals("a", itr1.next());, +    assertEquals("b", itr1.next());, +    Iterator<String> itr2 = Iterators.concat(itr1, Iterators.singletonIterator("d"));, +    assertEquals("c", itr2.next());, +    assertEquals("d", itr2.next());, +  }, +, +++ b/android/guava/src/com/google/common/collect/Iterators.java, +    /* The last iterator to return an element.  Calls to remove() go to this iterator. */, +    /* The iterator currently returning elements. */, +    private Iterator<? extends T> iterator;, +, +    /*, +     * We track the "meta iterators," the iterators-of-iterators, below.  Usually, topMetaIterator, +     * is the only one in use, but if we encounter nested concatenations, we start a deque of, +     * meta-iterators rather than letting the nesting get arbitrarily deep.  This keeps each, +     * operation O(1).]