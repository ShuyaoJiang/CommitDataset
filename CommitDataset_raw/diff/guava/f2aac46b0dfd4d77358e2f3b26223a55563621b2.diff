[+++ b/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java, +import com.google.common.collect.Lists;, +import com.google.common.collect.Queues;, +, +import java.util.concurrent.BlockingQueue;, +  /** The main mechanics of invokeAny. */, +    List<Future<T>> futures = Lists.newArrayListWithCapacity(ntasks);, +    BlockingQueue<Future<T>> futureQueue = Queues.newLinkedBlockingQueue();, +      futures.add(submitAndAddQueueListener(it.next(), futureQueue));, +        Future<T> f = futureQueue.poll();, +            futures.add(submitAndAddQueueListener(it.next(), futureQueue));, +            f = futureQueue.poll(nanos, TimeUnit.NANOSECONDS);, +            f = futureQueue.take();, +  /**, +   * Submits the task and adds a listener that adds the future to {@code queue} when it completes., +   */, +  private <T> ListenableFuture<T> submitAndAddQueueListener(, +      Callable<T> task, final BlockingQueue<Future<T>> queue) {, +    final ListenableFuture<T> future = submit(task);, +    future.addListener(new Runnable() {, +      @Override public void run() {, +        queue.add(future);, +      }, +    }, MoreExecutors.sameThreadExecutor());, +    return future;, +  }, +]