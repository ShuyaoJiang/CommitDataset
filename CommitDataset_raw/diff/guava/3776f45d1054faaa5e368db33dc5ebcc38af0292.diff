[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    for (Integer node : network.nodes()) {, +      for (String inEdge : network.inEdges(node)) {, +        Endpoints<Integer> endpoints = network.incidentNodes(inEdge);, +      for (String outEdge : network.outEdges(node)) {, +        Endpoints<Integer> endpoints = network.incidentNodes(outEdge);, +      for (Integer adjacentNode : network.adjacentNodes(node)) {, +        Set<String> edges = network.edgesConnecting(node, adjacentNode);, +        Set<String> antiParallelEdges = network.edgesConnecting(adjacentNode, node);, +    assertThat(network.incidentNodes(E12)).containsExactly(N1, N2).inOrder();, +    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertThat(network.edgesConnecting(N2, N1)).isEmpty();, +    assertThat(network.inEdges(N2)).containsExactly(E12);, +    assertThat(network.inEdges(N1)).isEmpty();, +    assertThat(network.outEdges(N1)).containsExactly(E12);, +    assertThat(network.outEdges(N2)).isEmpty();, +    assertThat(network.predecessors(N2)).containsExactly(N1);, +    assertThat(network.predecessors(N1)).isEmpty();, +    assertThat(network.successors(N1)).containsExactly(N2);, +    assertThat(network.successors(N2)).isEmpty();, +    assertEquals(1, network.inDegree(N2));, +    assertEquals(0, network.inDegree(N1));, +    assertEquals(1, network.outDegree(N1));, +    assertEquals(0, network.outDegree(N2));, +    assertEquals(N1, network.incidentNodes(E12).source());, +      network.incidentNodes(EDGE_NOT_IN_GRAPH).source();, +    assertEquals(N2, network.incidentNodes(E12).target());, +      network.incidentNodes(EDGE_NOT_IN_GRAPH).target();, +    assertThat(network.edges()).contains(E12);, +    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertThat(network.edgesConnecting(N2, N1)).isEmpty();, +    ImmutableSet<String> edges = ImmutableSet.copyOf(network.edges());, +    assertThat(network.edges()).containsExactlyElementsIn(edges);, +    assertTrue(network.removeEdge(E12));, +    assertThat(network.edges()).doesNotContain(E12);, +    assertThat(network.edgesConnecting(N1, N2)).isEmpty();, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    for (Integer node : network.nodes()) {, +      for (String inEdge : network.inEdges(node)) {, +        Endpoints<Integer> endpoints = network.incidentNodes(inEdge);, +      for (String outEdge : network.outEdges(node)) {, +        Endpoints<Integer> endpoints = network.incidentNodes(outEdge);, +      for (Integer adjacentNode : network.adjacentNodes(node)) {, +        Set<String> edges = network.edgesConnecting(node, adjacentNode);, +        Set<String> antiParallelEdges = network.edgesConnecting(adjacentNode, node);, +    assertThat(network.incidentNodes(E12)).containsExactly(N1, N2).inOrder();, +    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertThat(network.edgesConnecting(N2, N1)).isEmpty();, +    assertThat(network.inEdges(N2)).containsExactly(E12);, +    assertThat(network.inEdges(N1)).isEmpty();, +    assertThat(network.outEdges(N1)).containsExactly(E12);, +    assertThat(network.outEdges(N2)).isEmpty();, +    assertThat(network.predecessors(N2)).containsExactly(N1);, +    assertThat(network.predecessors(N1)).isEmpty();, +    assertThat(network.successors(N1)).containsExactly(N2);, +    assertThat(network.successors(N2)).isEmpty();, +    assertEquals(1, network.inDegree(N2));, +    assertEquals(0, network.inDegree(N1));, +    assertEquals(1, network.outDegree(N1));, +    assertEquals(0, network.outDegree(N2));, +    assertEquals(N1, network.incidentNodes(E12).source());, +      network.incidentNodes(EDGE_NOT_IN_GRAPH).source();, +    assertEquals(N2, network.incidentNodes(E12).target());, +      network.incidentNodes(EDGE_NOT_IN_GRAPH).target();, +    assertThat(network.edges()).contains(E12);, +    assertThat(network.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertThat(network.edgesConnecting(N2, N1)).isEmpty();, +    ImmutableSet<String> edges = ImmutableSet.copyOf(network.edges());, +    assertThat(network.edges()).containsExactlyElementsIn(edges);, +    assertTrue(network.removeEdge(E12));, +    assertThat(network.edges()).doesNotContain(E12);, +    assertThat(network.edgesConnecting(N1, N2)).isEmpty();, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +  MutableNetwork<Integer, String> network;, +    return network.addNode(n);, +    network.addNode(n1);, +    network.addNode(n2);, +    return network.addEdge(e, n1, n2);, +    network = createGraph();, +        network,, +        Graphs.copyOf(network),, +        ImmutableNetwork.copyOf(network)).testEquals();, +    String networkString = network.toString();, +    assertThat(networkString).contains("isDirected: " + network.isDirected());, +    assertThat(networkString).contains("allowsParallelEdges: " + network.allowsParallelEdges());, +    assertThat(networkString).contains("allowsSelfLoops: " + network.allowsSelfLoops());, +    int nodeStart = networkString.indexOf("nodes:");, +    int edgeStart = networkString.indexOf("edges:");, +    String nodeString = networkString.substring(nodeStart, edgeStart);, +    String edgeString = networkString.substring(edgeStart);, +    Graph<Integer> asGraph = network.asGraph();, +    assertThat(network.nodes()).isEqualTo(asGraph.nodes());, +    assertThat(network.nodeOrder()).isEqualTo(asGraph.nodeOrder());, +    assertThat(network.isDirected()).isEqualTo(asGraph.isDirected());, +    assertThat(network.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());, +, +    for (String edge : network.edges()) {, +      Iterator<Integer> endpointsIterator = network.incidentNodes(edge).iterator();, +      assertThat(network.edgesConnecting(nodeA, nodeB)).contains(edge);, +      assertThat(network.successors(nodeA)).contains(nodeB);]