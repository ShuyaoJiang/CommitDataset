[+++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +      // See AbstractFutureCancellationCauseTest for how to set causes., +      assertThat(expected.getCause()).isNull();, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +      // See AbstractFutureCancellationCauseTest for how to set causes., +      assertThat(expected.getCause()).isNull();, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +          // We call interuptTask before calling complete(), which is consistent with, +, +  private static CancellationException cancellationExceptionWithCause(, +      @Nullable String message, @Nullable Throwable cause) {, +    CancellationException exception = new CancellationException(message);, +    exception.initCause(cause);, +    return exception;, +  }, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +      // See AbstractFutureCancellationCauseTest for how to set causes., +      assertThat(expected.getCause()).isNull();, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +          // We call interuptTask before calling complete(), which is consistent with, +, +  private static CancellationException cancellationExceptionWithCause(, +      @Nullable String message, @Nullable Throwable cause) {, +    CancellationException exception = new CancellationException(message);, +    exception.initCause(cause);, +    return exception;, +  }, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +      // See AbstractFutureCancellationCauseTest for how to set causes., +      assertThat(expected.getCause()).isNull();, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +          // We call interuptTask before calling complete(), which is consistent with, +, +  private static CancellationException cancellationExceptionWithCause(, +      @Nullable String message, @Nullable Throwable cause) {, +    CancellationException exception = new CancellationException(message);, +    exception.initCause(cause);, +    return exception;, +  }, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +++ b/guava/src/com/google/common/util/concurrent/ImmediateFuture.java, +import com.google.common.util.concurrent.AbstractFuture.TrustedFuture;, +  static final class ImmediateFailedFuture<V> extends TrustedFuture<V> {, +      setException(thrown);, +  static final class ImmediateCancelledFuture<V> extends TrustedFuture<V> {, +      cancel(false);]