[+++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ObjectArraysTest.java, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ObjectArraysTest.java, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(keys.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(keys.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(entries.toArray()).asList().has().exactlyAs((Collection<Object>) expected);, +      ASSERT.that(entries.toArray(new Entry[0])).asList(), +          .has().exactlyAs((Collection<Entry>) expected);, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ObjectArraysTest.java, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(keys.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(keys.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(entries.toArray()).asList().has().exactlyAs((Collection<Object>) expected);, +      ASSERT.that(entries.toArray(new Entry[0])).asList(), +          .has().exactlyAs((Collection<Entry>) expected);, +++ b/guava-tests/test/com/google/common/collect/ArrayTableTest.java, +    ASSERT.that(array[0]).asList().has().exactly('a', null, 'c').inOrder();, +    ASSERT.that(array[1]).asList().has().exactly('b', null, null).inOrder();, +    ASSERT.that(array[2]).asList().has().exactly(null, null, null).inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ObjectArraysTest.java, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(keys.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(keys.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(entries.toArray()).asList().has().exactlyAs((Collection<Object>) expected);, +      ASSERT.that(entries.toArray(new Entry[0])).asList(), +          .has().exactlyAs((Collection<Entry>) expected);, +++ b/guava-tests/test/com/google/common/collect/ArrayTableTest.java, +    ASSERT.that(array[0]).asList().has().exactly('a', null, 'c').inOrder();, +    ASSERT.that(array[1]).asList().has().exactly('b', null, null).inOrder();, +    ASSERT.that(array[2]).asList().has().exactly(null, null, null).inOrder();, +++ b/guava-tests/test/com/google/common/collect/ObjectArraysTest.java, +    ASSERT.that(result).asList().has().exactly("a", "b").inOrder();, +    ASSERT.that(result).asList().has().exactly("a", "b").inOrder();, +    ASSERT.that(result).asList().has().exactly("a", "b", "c", "d").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ObjectArraysTest.java, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(keys.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(keys.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray()).asList().has().exactlyAs(expected);, +      ASSERT.that(values.toArray(new Object[0])).asList().has().exactlyAs(expected);, +      ASSERT.that(entries.toArray()).asList().has().exactlyAs((Collection<Object>) expected);, +      ASSERT.that(entries.toArray(new Entry[0])).asList(), +          .has().exactlyAs((Collection<Entry>) expected);, +++ b/guava-tests/test/com/google/common/collect/ArrayTableTest.java, +    ASSERT.that(array[0]).asList().has().exactly('a', null, 'c').inOrder();, +    ASSERT.that(array[1]).asList().has().exactly('b', null, null).inOrder();, +    ASSERT.that(array[2]).asList().has().exactly(null, null, null).inOrder();, +++ b/guava-tests/test/com/google/common/collect/ObjectArraysTest.java, +    ASSERT.that(result).asList().has().exactly("a", "b").inOrder();, +    ASSERT.that(result).asList().has().exactly("a", "b").inOrder();, +    ASSERT.that(result).asList().has().exactly("a", "b", "c", "d").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +    ASSERT.that(result).asList().has().item("foo");, +    ASSERT.that(result).asList().has().exactly("foo", "bar").inOrder();, +    ASSERT.that(result).asList().has().exactly("foo", "bar", "baz").inOrder();, +++ b/guava-tests/test/com/google/common/reflect/ImmutableTypeToInstanceMapTest.java]