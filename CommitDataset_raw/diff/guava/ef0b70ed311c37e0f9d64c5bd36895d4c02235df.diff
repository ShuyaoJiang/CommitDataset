[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.copyEdges;, +import static com.google.common.graph.Graphs.copyNodes;, +  public void copyNodes_directedGraph() {, +    copyNodes(directedGraph, actualGraph);, +  public void copyNodes_undirectedGraph() {, +    copyNodes(undirectedGraph, actualGraph);, +  public void copyNodes_directedNetwork() {, +    copyNodes(directedGraph, actualGraph);, +  public void copyEdges_directedNetwork() {, +    copyEdges(directedGraph, actualGraph);, +  public void copyNodes_undirectedNetwork() {, +    copyNodes(undirectedGraph, actualGraph);, +  public void copyEdges_undirectedNetwork() {, +    copyEdges(undirectedGraph, actualGraph);, +  public void copyEdges_incidentNodesMissing() {, +    MutableNetwork<Integer, String> srcGraph = NetworkBuilder.undirected().build();, +    srcGraph.addEdge(E12, N1, N2);, +    srcGraph.addEdge(E13, N1, N3);, +    MutableNetwork<Integer, String> destGraph = NetworkBuilder.undirected().build();, +    destGraph.addNode(N1);, +    destGraph.addNode(N2);, +    copyEdges(srcGraph, destGraph);, +    // E13 should not be copied over because an incident node is missing in the destination graph., +    assertThat(destGraph.edges()).containsExactly(E12);, +    assertThat(destGraph.nodes()).doesNotContain(N3);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.copyEdges;, +import static com.google.common.graph.Graphs.copyNodes;, +  public void copyNodes_directedGraph() {, +    copyNodes(directedGraph, actualGraph);, +  public void copyNodes_undirectedGraph() {, +    copyNodes(undirectedGraph, actualGraph);, +  public void copyNodes_directedNetwork() {, +    copyNodes(directedGraph, actualGraph);, +  public void copyEdges_directedNetwork() {, +    copyEdges(directedGraph, actualGraph);, +  public void copyNodes_undirectedNetwork() {, +    copyNodes(undirectedGraph, actualGraph);, +  public void copyEdges_undirectedNetwork() {, +    copyEdges(undirectedGraph, actualGraph);, +  public void copyEdges_incidentNodesMissing() {, +    MutableNetwork<Integer, String> srcGraph = NetworkBuilder.undirected().build();, +    srcGraph.addEdge(E12, N1, N2);, +    srcGraph.addEdge(E13, N1, N3);, +    MutableNetwork<Integer, String> destGraph = NetworkBuilder.undirected().build();, +    destGraph.addNode(N1);, +    destGraph.addNode(N2);, +    copyEdges(srcGraph, destGraph);, +    // E13 should not be copied over because an incident node is missing in the destination graph., +    assertThat(destGraph.edges()).containsExactly(E12);, +    assertThat(destGraph.nodes()).doesNotContain(N3);, +++ b/guava/src/com/google/common/graph/Graphs.java, +    return copyOfInternal(graph, Predicates.alwaysTrue());, +  private static <N> MutableGraph<N> copyOfInternal(Graph<N> graph,, +      Predicate<? super N> nodePredicate) {, +   * Copies all nodes from {@code src} into {@code dest}., +  public static <N> void copyNodes(Graph<N> src, MutableGraph<N> dest) {, +    copyNodesInteral(src, dest, Predicates.alwaysTrue());, +  private static <N, E> void copyNodesInteral(, +      Graph<N> src, MutableGraph<N> dest, Predicate<? super N> nodePredicate) {, +    checkNotNull(src, "src");, +    checkNotNull(dest, "dest");, +    for (N node : Sets.filter(src.nodes(), nodePredicate)) {, +      dest.addNode(node);, +    return copyOfInternal(graph, Predicates.alwaysTrue(), Predicates.alwaysTrue());, +  private static <N, E> MutableNetwork<N, E> copyOfInternal(, +    copyNodesInternal(graph, copy, nodePredicate);, +    copyEdgesInternal(graph, copy, edgePredicate);, +   * Copies all nodes from {@code src} into {@code dest}., +  public static <N> void copyNodes(Graph<N> src, MutableNetwork<N, ?> dest) {, +    copyNodesInternal(src, dest, Predicates.alwaysTrue());, +  private static <N, E> void copyNodesInternal(, +      Graph<N> src, MutableNetwork<N, ?> dest, Predicate<? super N> nodePredicate) {, +    checkNotNull(src, "src");, +    checkNotNull(dest, "dest");, +    for (N node : Sets.filter(src.nodes(), nodePredicate)) {, +      dest.addNode(node);, +   * Copies edges from {@code src} into {@code dest}., +   * <p>, +   * This method DOES NOT copy over edges if their incident nodes are not already in {@code dest}., +  public static <N, E> void copyEdges(Network<N, E> src, MutableNetwork<N, E> dest) {, +    copyEdgesInternal(src, dest, Predicates.alwaysTrue());, +  private static <N, E> void copyEdgesInternal(, +      Network<N, E> src, MutableNetwork<N, E> dest, Predicate<? super E> edgePredicate) {, +    checkNotNull(src, "src");, +    checkNotNull(dest, "dest");, +    for (E edge : Sets.filter(src.edges(), edgePredicate)) {, +      Endpoints<N> endpoints = src.incidentNodes(edge);, +      if (dest.nodes().containsAll(endpoints)) {, +        addEdge(dest, edge, endpoints);, +      }]