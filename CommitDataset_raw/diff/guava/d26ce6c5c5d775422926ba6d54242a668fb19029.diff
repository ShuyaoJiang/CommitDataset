[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +public abstract class FluentIterable<E> implements Iterable<E> {, +  // We store 'iterable' and use it instead of 'this' to allow Iterables to perform instanceof, +  // checks on the _original_ iterable when FluentIterable.from is used., +  /** Constructor for use by subclasses. */, +  protected FluentIterable() {, +    this.iterable = this;, +  }, +, +  FluentIterable(Iterable<E> iterable) {, +  public static <E> FluentIterable<E> from(final Iterable<E> iterable) {, +    return (iterable instanceof FluentIterable) ? (FluentIterable<E>) iterable, +        : new FluentIterable<E>(iterable) {, +          @Override, +          public Iterator<E> iterator() {, +            return iterable.iterator();, +          }, +        };, +  public final int size() {, +  public final boolean contains(@Nullable Object element) {, +  public final E getOnlyElement() {, +  public final E getOnlyElement(@Nullable E defaultValue) {, +  public final FluentIterable<E> cycle() {, +  public final FluentIterable<E> append(Iterable<? extends E> other) {, +  public final FluentIterable<E> append(E... elements) {, +  // TODO(kevinb): return FluentIterable<List<E>> instead?, +  public final FluentIterable<FluentIterable<E>> partition(int size) {, +  // TODO(kevinb): return FluentIterable<List<E>> instead, +  public final FluentIterable<FluentIterable<E>> partitionWithPadding(int size) {, +  public final FluentIterable<E> filter(Predicate<? super E> predicate) {, +  public final boolean anyMatch(Predicate<? super E> predicate) {, +  public final boolean allMatch(Predicate<? super E> predicate) {, +  public final Optional<E> firstMatch(Predicate<? super E> predicate) {, +  public final <T> FluentIterable<T> transform(Function<? super E, T> function) {, +  public final Optional<E> first() {, +        ? Optional.of(iterator.next()), +  public final Optional<E> last() {, +  public final FluentIterable<E> skip(int numberToSkip) {, +  public final FluentIterable<E> limit(int size) {, +  public final boolean isEmpty() {, +  public final ImmutableList<E> toImmutableList() {, +  public final ImmutableSet<E> toImmutableSet() {, +  public final E get(int position) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +public abstract class FluentIterable<E> implements Iterable<E> {, +  // We store 'iterable' and use it instead of 'this' to allow Iterables to perform instanceof, +  // checks on the _original_ iterable when FluentIterable.from is used., +  /** Constructor for use by subclasses. */, +  protected FluentIterable() {, +    this.iterable = this;, +  }, +, +  FluentIterable(Iterable<E> iterable) {, +  public static <E> FluentIterable<E> from(final Iterable<E> iterable) {, +    return (iterable instanceof FluentIterable) ? (FluentIterable<E>) iterable, +        : new FluentIterable<E>(iterable) {, +          @Override, +          public Iterator<E> iterator() {, +            return iterable.iterator();, +          }, +        };, +  public final int size() {, +  public final boolean contains(@Nullable Object element) {, +  public final E getOnlyElement() {, +  public final E getOnlyElement(@Nullable E defaultValue) {, +  public final FluentIterable<E> cycle() {, +  public final FluentIterable<E> append(Iterable<? extends E> other) {, +  public final FluentIterable<E> append(E... elements) {, +  // TODO(kevinb): return FluentIterable<List<E>> instead?, +  public final FluentIterable<FluentIterable<E>> partition(int size) {, +  // TODO(kevinb): return FluentIterable<List<E>> instead, +  public final FluentIterable<FluentIterable<E>> partitionWithPadding(int size) {, +  public final FluentIterable<E> filter(Predicate<? super E> predicate) {, +  public final boolean anyMatch(Predicate<? super E> predicate) {, +  public final boolean allMatch(Predicate<? super E> predicate) {, +  public final Optional<E> firstMatch(Predicate<? super E> predicate) {, +  public final <T> FluentIterable<T> transform(Function<? super E, T> function) {, +  public final Optional<E> first() {, +        ? Optional.of(iterator.next()), +  public final Optional<E> last() {, +  public final FluentIterable<E> skip(int numberToSkip) {, +  public final FluentIterable<E> limit(int size) {, +  public final boolean isEmpty() {, +  public final ImmutableList<E> toImmutableList() {, +  public final ImmutableSet<E> toImmutableSet() {, +  public final E get(int position) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +  private static final class UnmodifiableIterable<T> extends FluentIterable<T> {, +    return new FluentIterable<T>() {, +    return new FluentIterable<T>() {, +    return new FluentIterable<List<T>>() {, +    return new FluentIterable<List<T>>() {, +    return new FluentIterable<T>() {, +    return new FluentIterable<T>() {, +      return new FluentIterable<T>() {, +    return new FluentIterable<T>() {, +    return new FluentIterable<T>() {, +      return new FluentIterable<T>() {, +    return new FluentIterable<T>() {, +    Iterable<T> iterable = new FluentIterable<T>() {]