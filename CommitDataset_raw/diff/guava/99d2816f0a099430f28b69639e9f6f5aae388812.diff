[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * Mostly just tests that TrustedListenableFutureTask are created and run; tests for, +     * TrustedListenableFutureTask should ensure that listeners are called correctly., +    assertTrue(runnableFuture instanceof TrustedListenableFutureTask);, +    assertTrue(callableFuture instanceof TrustedListenableFutureTask);, +    assertTrue(runnableFuture2 instanceof TrustedListenableFutureTask);, +      assertTrue(runnable instanceof TrustedListenableFutureTask);, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * Mostly just tests that TrustedListenableFutureTask are created and run; tests for, +     * TrustedListenableFutureTask should ensure that listeners are called correctly., +    assertTrue(runnableFuture instanceof TrustedListenableFutureTask);, +    assertTrue(callableFuture instanceof TrustedListenableFutureTask);, +    assertTrue(runnableFuture2 instanceof TrustedListenableFutureTask);, +      assertTrue(runnable instanceof TrustedListenableFutureTask);, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +    assertThat(getOnlyElement(results)).isInstanceOf(TrustedListenableFutureTask.class);, +    assertThat(getOnlyElement(results)).isInstanceOf(TrustedListenableFutureTask.class);, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * Mostly just tests that TrustedListenableFutureTask are created and run; tests for, +     * TrustedListenableFutureTask should ensure that listeners are called correctly., +    assertTrue(runnableFuture instanceof TrustedListenableFutureTask);, +    assertTrue(callableFuture instanceof TrustedListenableFutureTask);, +    assertTrue(runnableFuture2 instanceof TrustedListenableFutureTask);, +      assertTrue(runnable instanceof TrustedListenableFutureTask);, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +    assertThat(getOnlyElement(results)).isInstanceOf(TrustedListenableFutureTask.class);, +    assertThat(getOnlyElement(results)).isInstanceOf(TrustedListenableFutureTask.class);, +++ b/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java, +/*, + * Copyright (C) 2014 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import static com.google.common.util.concurrent.Callables.returning;, +, +import junit.framework.TestCase;, +, +import java.util.concurrent.Callable;, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.CyclicBarrier;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +, +/**, + * Test case for {@link TrustedListenableFutureTask}., + */, +public class TrustedListenableFutureTaskTest extends TestCase {, +, +  public void testSuccessful() throws Exception {, +    TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(returning(2));, +    assertFalse(task.isDone());, +    task.run();, +    assertTrue(task.isDone());, +    assertFalse(task.isCancelled());, +    assertEquals(2, task.get().intValue());, +  }, +, +  public void testCancelled() throws Exception {, +    TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(returning(2));, +    assertFalse(task.isDone());, +    task.cancel(false);, +    assertTrue(task.isDone());, +    assertTrue(task.isCancelled());, +    assertFalse(task.wasInterrupted());, +    try {, +      task.get();, +      fail();, +    } catch (CancellationException expected) {, +    }, +    assertFalse(Thread.currentThread().isInterrupted());, +  }, +, +  public void testFailed() throws Exception {, +    final Exception e = new Exception();, +    TrustedListenableFutureTask<Integer> task = TrustedListenableFutureTask.create(, +        new Callable<Integer>() {, +          @Override public Integer call() throws Exception {, +            throw e;, +          }, +        });, +    task.run();, +    assertTrue(task.isDone());, +    assertFalse(task.isCancelled());]