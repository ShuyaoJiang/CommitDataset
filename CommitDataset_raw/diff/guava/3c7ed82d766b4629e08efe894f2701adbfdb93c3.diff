[+++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +  public void testLeastOf_simple_nMinusOne_withNullElement() {, +    List<Integer> list = Arrays.asList(3, null, 5, -1);, +    List<Integer> result = Ordering.natural().nullsLast().leastOf(list, list.size() - 1);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.of(-1, 3, 5), result);, +  }, +, +  public void testLeastOf_simple_n_withNullElement() {, +    List<Integer> list = Arrays.asList(3, 4, 5, null, -1);, +    List<Integer> result = Ordering.natural().nullsLast().leastOf(list, list.size());, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(Arrays.asList(-1, 3, 4, 5, null), result);, +  }, +, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +  public void testLeastOf_simple_nMinusOne_withNullElement() {, +    List<Integer> list = Arrays.asList(3, null, 5, -1);, +    List<Integer> result = Ordering.natural().nullsLast().leastOf(list, list.size() - 1);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.of(-1, 3, 5), result);, +  }, +, +  public void testLeastOf_simple_n_withNullElement() {, +    List<Integer> list = Arrays.asList(3, 4, 5, null, -1);, +    List<Integer> result = Ordering.natural().nullsLast().leastOf(list, list.size());, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(Arrays.asList(-1, 3, 4, 5, null), result);, +  }, +, +++ b/guava/src/com/google/common/collect/Ordering.java, +   * <p>The implementation requires that all elements of the underlying iterator, +   * fit into memory at once. If this is not possible, consider using a, +   * {@link java.util.PriorityQueue} instead., +   *, +    // We can't use ImmutableList since we want to support null elements., +   * <p>The implementation requires that all elements of the underlying iterator, +   * fit into memory at once. If this is not possible, consider using a, +   * {@link java.util.PriorityQueue} instead., +   *]