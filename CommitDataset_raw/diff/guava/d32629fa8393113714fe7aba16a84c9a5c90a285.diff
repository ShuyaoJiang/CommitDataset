[+++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java, + * <li>algorithm: the algorithm to hash with (e.g. MD5, SHA1, etc.)., + * <li>hashMethod: how to hash the data (using the Hashing API or the MessageDigest API)., +  @Param({"10", "1000", "100000", "1000000"}) int size;, +  @Param Algorithm algorithm;, +  @Param HashMethod hashMethod;, +, +  private enum HashMethod {, +    MESSAGE_DIGEST_API() {, +      @Override public byte[] hash(Algorithm algorithm, byte[] input) {, +        MessageDigest md = algorithm.getMessageDigest();, +        md.update(input);, +        return md.digest();, +      }, +    },, +    HASH_FUNCTION_API() {, +      @Override public byte[] hash(Algorithm algorithm, byte[] input) {, +        return algorithm.getHashFunction().hashBytes(input).asBytes();, +      }, +    };, +    public abstract byte[] hash(Algorithm algorithm, byte[] input);, +  }, +, +  private enum Algorithm {, +    MD5("MD5", Hashing.md5()),, +    SHA_1("SHA-1", Hashing.sha1()),, +    SHA_256("SHA-256", Hashing.sha256()),, +    SHA_512("SHA-512", Hashing.sha512());, +, +    private final String algorithmName;, +    private final HashFunction hashFn;, +    Algorithm(String algorithmName, HashFunction hashFn) {, +      this.algorithmName = algorithmName;, +      this.hashFn = hashFn;, +    }, +    public MessageDigest getMessageDigest() {, +      try {, +        return MessageDigest.getInstance(algorithmName);, +      } catch (NoSuchAlgorithmException e) {, +        throw new AssertionError(e);, +      }, +    }, +    public HashFunction getHashFunction() {, +      return hashFn;, +    }, +  }, +  public byte timeHashing(int reps) {, +    HashMethod hashMethod = this.hashMethod;, +    Algorithm algorithm = this.algorithm;, +      result ^= hashMethod.hash(algorithm, testBytes)[0];]