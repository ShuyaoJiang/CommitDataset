[+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import static org.junit.Assert.assertEquals;, +, +import com.google.common.base.Charsets;, +import com.google.common.collect.ImmutableList;, +import java.nio.charset.Charset;, +    assertShortcutsAreEquivalent(hashFunction, 256);, +, +  private static void assertShortcutsAreEquivalent(HashFunction hashFunction, int trials) {, +    Random random = new Random(42085L);, +    for (int i = 0; i < trials; i++) {, +      assertHashBytesEquivalence(hashFunction, random);, +      assertHashIntEquivalence(hashFunction, random);, +      assertHashLongEquivalence(hashFunction, random);, +      assertHashStringEquivalence(hashFunction, random);, +    }, +  }, +, +  private static void assertHashBytesEquivalence(HashFunction hashFunction, Random random) {, +    int size = random.nextInt(2048);, +    byte[] bytes = new byte[size];, +    random.nextBytes(bytes);, +    assertEquals(hashFunction.hashBytes(bytes),, +        hashFunction.newHasher(size).putBytes(bytes).hash());, +    int off = random.nextInt(size);, +    int len = random.nextInt(size - off);, +    assertEquals(hashFunction.hashBytes(bytes, off, len),, +        hashFunction.newHasher(size).putBytes(bytes, off, len).hash());, +  }, +, +  private static void assertHashIntEquivalence(HashFunction hashFunction, Random random) {, +    int i = random.nextInt();, +    assertEquals(hashFunction.hashInt(i),, +        hashFunction.newHasher().putInt(i).hash());, +  }, +, +  private static void assertHashLongEquivalence(HashFunction hashFunction, Random random) {, +    long l = random.nextLong();, +    assertEquals(hashFunction.hashLong(l),, +        hashFunction.newHasher().putLong(l).hash());, +  }, +, +  private static final ImmutableList<Charset> CHARSETS = ImmutableList.of(, +      Charsets.ISO_8859_1,, +      Charsets.US_ASCII,, +      Charsets.UTF_16,, +      Charsets.UTF_16BE,, +      Charsets.UTF_16LE,, +      Charsets.UTF_8);, +, +  private static void assertHashStringEquivalence(HashFunction hashFunction, Random random) {, +    int size = random.nextInt(2048);, +    byte[] bytes = new byte[size];, +    random.nextBytes(bytes);, +    String string = new String(bytes);, +    assertEquals(hashFunction.hashString(string),, +        hashFunction.newHasher().putString(string).hash());, +    for (Charset charset : CHARSETS) {, +      assertEquals(hashFunction.hashString(string, charset),, +          hashFunction.newHasher().putString(string, charset).hash());, +    }, +  }, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import static org.junit.Assert.assertEquals;, +, +import com.google.common.base.Charsets;, +import com.google.common.collect.ImmutableList;, +import java.nio.charset.Charset;, +    assertShortcutsAreEquivalent(hashFunction, 256);, +, +  private static void assertShortcutsAreEquivalent(HashFunction hashFunction, int trials) {, +    Random random = new Random(42085L);, +    for (int i = 0; i < trials; i++) {, +      assertHashBytesEquivalence(hashFunction, random);, +      assertHashIntEquivalence(hashFunction, random);, +      assertHashLongEquivalence(hashFunction, random);, +      assertHashStringEquivalence(hashFunction, random);, +    }, +  }, +, +  private static void assertHashBytesEquivalence(HashFunction hashFunction, Random random) {, +    int size = random.nextInt(2048);, +    byte[] bytes = new byte[size];, +    random.nextBytes(bytes);, +    assertEquals(hashFunction.hashBytes(bytes),, +        hashFunction.newHasher(size).putBytes(bytes).hash());, +    int off = random.nextInt(size);, +    int len = random.nextInt(size - off);, +    assertEquals(hashFunction.hashBytes(bytes, off, len),, +        hashFunction.newHasher(size).putBytes(bytes, off, len).hash());, +  }, +, +  private static void assertHashIntEquivalence(HashFunction hashFunction, Random random) {, +    int i = random.nextInt();, +    assertEquals(hashFunction.hashInt(i),, +        hashFunction.newHasher().putInt(i).hash());, +  }, +, +  private static void assertHashLongEquivalence(HashFunction hashFunction, Random random) {, +    long l = random.nextLong();]