[+++ b/android/guava-tests/test/com/google/common/collect/ListsImplTest.java, +import java.util.Collections;, +  /**, +   * Describes how a list is modifiable, +   */, +  public enum Modifiability {, +    NONE, // immutable lists, +    BY_ELEMENT, // elements can change (set), but not structure, +    DIRECT_ONLY, // Element can be added and removed only via direct calls, not through iterators, +    ALL // Elements can be added and removed as well as modified., +  }, +, +    private final Modifiability modifiability;, +    protected ListExample(String name, Modifiability modifiability) {, +      this.modifiability = modifiability;, +, +    /**, +     * The modifiablity of this list example., +     */, +    public Modifiability modifiability() {, +      return modifiability;, +    }, +  public void testAddAllImpl() {, +    if (getExample().modifiability() != Modifiability.ALL) {, +      return;, +    }, +    List<String> toTest = createList(String.class);, +, +    List<Iterable<String>> toAdd = ImmutableList.of(, +        (Iterable<String>) Collections.singleton("A"),, +        Collections.<String>emptyList(),, +        ImmutableList.of("A", "B", "C"),, +        ImmutableList.of("D", "E"));, +    List<Integer> indexes = ImmutableList.of(0, 0, 1, 3);, +    List<List<String>> expected = ImmutableList.of(, +        Collections.singletonList("A"),, +        ImmutableList.of("A"),, +        ImmutableList.of("A", "A", "B", "C"),, +        ImmutableList.of("A", "A", "D", "E", "B", "C"));, +, +    String format = "Adding %s at %s";, +    for (int i = 0; i < toAdd.size(); i++) {, +      int index = indexes.get(i);, +      Iterable<String> iterableToAdd = toAdd.get(i);, +      boolean expectedChanged = iterableToAdd.iterator().hasNext();, +      assertThat(Lists.addAllImpl(toTest, index, iterableToAdd)).named(format, iterableToAdd, index), +          .isEqualTo(expectedChanged);, +      assertThat(toTest).named(format, iterableToAdd, index), +          .containsExactlyElementsIn(expected.get(i));, +    }, +  }, +, +      super(name, Modifiability.ALL);, +      super(name, Modifiability.ALL);, +      super(name, Modifiability.BY_ELEMENT);, +      super(name, Modifiability.NONE);, +      super(name, Modifiability.DIRECT_ONLY);, +++ b/android/guava-tests/test/com/google/common/collect/ListsImplTest.java, +import java.util.Collections;, +  /**, +   * Describes how a list is modifiable, +   */, +  public enum Modifiability {, +    NONE, // immutable lists, +    BY_ELEMENT, // elements can change (set), but not structure, +    DIRECT_ONLY, // Element can be added and removed only via direct calls, not through iterators, +    ALL // Elements can be added and removed as well as modified., +  }, +, +    private final Modifiability modifiability;, +    protected ListExample(String name, Modifiability modifiability) {, +      this.modifiability = modifiability;, +, +    /**, +     * The modifiablity of this list example., +     */, +    public Modifiability modifiability() {, +      return modifiability;, +    }, +  public void testAddAllImpl() {, +    if (getExample().modifiability() != Modifiability.ALL) {, +      return;, +    }, +    List<String> toTest = createList(String.class);, +, +    List<Iterable<String>> toAdd = ImmutableList.of(, +        (Iterable<String>) Collections.singleton("A"),, +        Collections.<String>emptyList(),, +        ImmutableList.of("A", "B", "C"),, +        ImmutableList.of("D", "E"));, +    List<Integer> indexes = ImmutableList.of(0, 0, 1, 3);, +    List<List<String>> expected = ImmutableList.of(, +        Collections.singletonList("A"),, +        ImmutableList.of("A"),, +        ImmutableList.of("A", "A", "B", "C"),, +        ImmutableList.of("A", "A", "D", "E", "B", "C"));, +, +    String format = "Adding %s at %s";, +    for (int i = 0; i < toAdd.size(); i++) {, +      int index = indexes.get(i);]