[+++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    EqualsTester tester = new EqualsTester(new ItemReporter() {, +      @Override String reportItem(Item<?> item) {, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    EqualsTester tester = new EqualsTester(new ItemReporter() {, +      @Override String reportItem(Item<?> item) {, +++ b/guava-testlib/src/com/google/common/testing/EqualsTester.java, +import com.google.common.base.Equivalence;, +  private final RelationshipTester.ItemReporter itemReporter;, +  public EqualsTester() {, +    this(new RelationshipTester.ItemReporter());, +  }, +, +  EqualsTester(RelationshipTester.ItemReporter itemReporter) {, +    this.itemReporter = checkNotNull(itemReporter);, +  }, +        Equivalence.equals(), "Object#equals", "Object#hashCode", itemReporter);, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    EqualsTester tester = new EqualsTester(new ItemReporter() {, +      @Override String reportItem(Item<?> item) {, +++ b/guava-testlib/src/com/google/common/testing/EqualsTester.java, +import com.google.common.base.Equivalence;, +  private final RelationshipTester.ItemReporter itemReporter;, +  public EqualsTester() {, +    this(new RelationshipTester.ItemReporter());, +  }, +, +  EqualsTester(RelationshipTester.ItemReporter itemReporter) {, +    this.itemReporter = checkNotNull(itemReporter);, +  }, +        Equivalence.equals(), "Object#equals", "Object#hashCode", itemReporter);, +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, +import com.google.common.testing.RelationshipTester.ItemReporter;, +  private EquivalenceTester(Equivalence<? super T> equivalence) {, +    this.delegate = new RelationshipTester<T>(, +        equivalence, "equivalent", "hash", new ItemReporter());, +      /*, +       * TODO(cpovirk): consider no longer running these equivalent() tests on every Equivalence,, +       * since the Equivalence base type now implements this logic itself, +       */, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    EqualsTester tester = new EqualsTester(new ItemReporter() {, +      @Override String reportItem(Item<?> item) {, +++ b/guava-testlib/src/com/google/common/testing/EqualsTester.java, +import com.google.common.base.Equivalence;, +  private final RelationshipTester.ItemReporter itemReporter;, +  public EqualsTester() {, +    this(new RelationshipTester.ItemReporter());, +  }, +, +  EqualsTester(RelationshipTester.ItemReporter itemReporter) {, +    this.itemReporter = checkNotNull(itemReporter);, +  }, +        Equivalence.equals(), "Object#equals", "Object#hashCode", itemReporter);, +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, +import com.google.common.testing.RelationshipTester.ItemReporter;, +  private EquivalenceTester(Equivalence<? super T> equivalence) {, +    this.delegate = new RelationshipTester<T>(, +        equivalence, "equivalent", "hash", new ItemReporter());, +      /*, +       * TODO(cpovirk): consider no longer running these equivalent() tests on every Equivalence,, +       * since the Equivalence base type now implements this logic itself, +       */, +++ b/guava-testlib/src/com/google/common/testing/RelationshipTester.java, +import com.google.common.base.Equivalence;, + * Implementation helper for {@link EqualsTester} and {@link EquivalenceTester} that tests for, + * equivalence classes., +    String reportItem(Item<?> item) {, +  /**, +   * A word about using {@link Equivalence}, which automatically checks for {@code null} and, +   * identical inputs: This sounds like it ought to be a problem here, since the goals of this class, +   * include testing that {@code equals()} is reflexive and is tolerant of {@code null}. However,, +   * there's no problem. The reason: {@link EqualsTester} tests {@code null} and identical inputs, +   * directly against {@code equals()} rather than through the {@code Equivalence}., +   */, +  private final Equivalence<? super T> equivalence;, +  private final String relationshipName;, +  private final String hashName;, +  private final List<ImmutableList<T>> groups = Lists.newArrayList();, +  RelationshipTester(Equivalence<? super T> equivalence, String relationshipName, String hashName,, +      ItemReporter itemReporter) {, +    this.equivalence = checkNotNull(equivalence);, +    this.relationshipName = checkNotNull(relationshipName);, +    this.hashName = checkNotNull(hashName);, +  // TODO(cpovirk): should we reject null items, since the tests already check null automatically?, +    Item<T> itemInfo = getItem(groupNumber, itemNumber);, +    Item<T> relatedInfo = getItem(groupNumber, relatedItemNumber);, +, +    T item = itemInfo.value;, +    T related = relatedInfo.value;, +    assertWithTemplate("$ITEM must be $RELATIONSHIP to $OTHER", itemInfo, relatedInfo,, +        equivalence.equivalent(item, related));, +    , +    int itemHash = equivalence.hash(item);, +    int relatedHash = equivalence.hash(related);, +    assertWithTemplate("the $HASH (" + itemHash + ") of $ITEM must be equal to the $HASH (", +        + relatedHash + ") of $OTHER", itemInfo, relatedInfo, itemHash == relatedHash);, +    Item<T> itemInfo = getItem(groupNumber, itemNumber);, +    Item<T> unrelatedInfo = getItem(unrelatedGroupNumber, unrelatedItemNumber);, +]