[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Collections2.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.base.Function;, +import com.google.common.base.Joiner;, +import com.google.common.base.Predicate;, +import com.google.common.base.Predicates;, +import com.google.common.primitives.Ints;, +, +import java.util.AbstractCollection;, +import java.util.Collection;, +import java.util.Iterator;, +, +/**, + * Provides static methods for working with {@code Collection} instances., + *, + * @author Chris Povirk, + * @author Mike Bostock, + * @author Jared Levy, + * @since 2.0 (imported from Google Collections Library), + */, +@GwtCompatible(emulated = true), +public final class Collections2 {, +  private Collections2() {}, +, +  /**, +   * Returns the elements of {@code unfiltered} that satisfy a predicate. The, +   * returned collection is a live view of {@code unfiltered}; changes to one, +   * affect the other., +   *, +   * <p>The resulting collection's iterator does not support {@code remove()},, +   * but all other collection methods are supported. When given an element that, +   * doesn't satisfy the predicate, the collection's {@code add()} and {@code, +   * addAll()} methods throw an {@link IllegalArgumentException}. When methods, +   * such as {@code removeAll()} and {@code clear()} are called on the filtered, +   * collection, only elements that satisfy the filter will be removed from the, +   * underlying collection., +   *, +   * <p>The returned collection isn't threadsafe or serializable, even if, +   * {@code unfiltered} is., +   *, +   * <p>Many of the filtered collection's methods, such as {@code size()},, +   * iterate across every element in the underlying collection and determine, +   * which elements satisfy the filter. When a live view is <i>not</i> needed,, +   * it may be faster to copy {@code Iterables.filter(unfiltered, predicate)}, +   * and use the copy., +   *, +   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>,, +   * as documented at {@link Predicate#apply}. Do not provide a predicate such, +   * as {@code Predicates.instanceOf(ArrayList.class)}, which is inconsistent, +   * with equals. (See {@link Iterables#filter(Iterable, Class)} for related, +   * functionality.), +   */, +  // TODO(kevinb): how can we omit that Iterables link when building gwt, +  // javadoc?, +  public static <E> Collection<E> filter(, +      Collection<E> unfiltered, Predicate<? super E> predicate) {, +    if (unfiltered instanceof FilteredCollection) {, +      // Support clear(), removeAll(), and retainAll() when filtering a filtered, +      // collection., +      return ((FilteredCollection<E>) unfiltered).createCombined(predicate);, +    }, +, +    return new FilteredCollection<E>(, +        checkNotNull(unfiltered), checkNotNull(predicate));, +  }, +, +  /**, +   * Delegates to {@link Collection#contains}. Returns {@code false} if the, +   * {@code contains} method throws a {@code ClassCastException}., +   */, +  static boolean safeContains(Collection<?> collection, Object object) {, +    try {, +      return collection.contains(object);, +    } catch (ClassCastException e) {, +      return false;, +    }, +  }, +, +  static class FilteredCollection<E> implements Collection<E> {]