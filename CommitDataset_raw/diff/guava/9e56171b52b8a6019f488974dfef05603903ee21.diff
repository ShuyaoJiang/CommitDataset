[+++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import com.google.common.reflect.Invokable;, +import com.google.common.reflect.Parameter;, +      @Nullable final Object instance, final Method method, int paramIndex) {, +    testParameter(instance, invokable(instance, method), paramIndex, method.getDeclaringClass());, +    testParameter(null, Invokable.from(ctor), paramIndex, ctor.getDeclaringClass());, +        if (Invokable.from(method).isStatic()) {, +        if (!Invokable.from(method).isStatic()) {, +   * Verifies that {@code invokable} produces a {@link NullPointerException} or, +   * @param instance the instance to invoke {@code invokable} on, or null if, +   *     {@code invokable} is static, +  private void testParameter(Object instance, Invokable<?, ?> invokable,, +    if (isPrimitiveOrNullable(invokable.getParameters().get(paramIndex))) {, +    Object[] params = buildParamList(invokable, paramIndex);, +      @SuppressWarnings("unchecked") // We'll get a runtime exception if the type is wrong., +      Invokable<Object, ?> unsafe = (Invokable<Object, ?>) invokable;, +      unsafe.invoke(instance, params);, +      Assert.fail("No exception thrown from " + invokable +, +          "wrong exception thrown from " + invokable + ": " + cause);, +  private Object[] buildParamList(Invokable<?, ?> invokable, int indexOfParamToSetToNull) {, +    ImmutableList<Parameter> params = invokable.getParameters();, +    Object[] args = new Object[params.size()];, +    for (int i = 0; i < args.length; i++) {, +      Parameter param = params.get(i);, +        args[i] = getDefaultValue(param.getType());, +        if (!isPrimitiveOrNullable(param)) {, +          Assert.assertTrue("No default value found for " + param, args[i] != null);, +    return args;, +            Invokable<?, ?> invokable = invokable(proxy, method);, +            ImmutableList<Parameter> params = invokable.getParameters();, +              if (!isPrimitiveOrNullable(params.get(i))) {, +  private static Invokable<?, ?> invokable(@Nullable Object instance, Method method) {, +    if (instance == null) {, +      return Invokable.from(method);, +      return TypeToken.of(instance.getClass()).method(method);, +  private static boolean isPrimitiveOrNullable(Parameter param) {, +    return param.getType().getRawType().isPrimitive() || param.isAnnotationPresent(Nullable.class);, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import com.google.common.reflect.Invokable;, +import com.google.common.reflect.Parameter;, +      @Nullable final Object instance, final Method method, int paramIndex) {, +    testParameter(instance, invokable(instance, method), paramIndex, method.getDeclaringClass());, +    testParameter(null, Invokable.from(ctor), paramIndex, ctor.getDeclaringClass());, +        if (Invokable.from(method).isStatic()) {, +        if (!Invokable.from(method).isStatic()) {, +   * Verifies that {@code invokable} produces a {@link NullPointerException} or, +   * @param instance the instance to invoke {@code invokable} on, or null if, +   *     {@code invokable} is static, +  private void testParameter(Object instance, Invokable<?, ?> invokable,, +    if (isPrimitiveOrNullable(invokable.getParameters().get(paramIndex))) {, +    Object[] params = buildParamList(invokable, paramIndex);, +      @SuppressWarnings("unchecked") // We'll get a runtime exception if the type is wrong., +      Invokable<Object, ?> unsafe = (Invokable<Object, ?>) invokable;, +      unsafe.invoke(instance, params);, +      Assert.fail("No exception thrown from " + invokable +, +          "wrong exception thrown from " + invokable + ": " + cause);, +  private Object[] buildParamList(Invokable<?, ?> invokable, int indexOfParamToSetToNull) {, +    ImmutableList<Parameter> params = invokable.getParameters();, +    Object[] args = new Object[params.size()];, +    for (int i = 0; i < args.length; i++) {, +      Parameter param = params.get(i);, +        args[i] = getDefaultValue(param.getType());, +        if (!isPrimitiveOrNullable(param)) {, +          Assert.assertTrue("No default value found for " + param, args[i] != null);, +    return args;, +            Invokable<?, ?> invokable = invokable(proxy, method);, +            ImmutableList<Parameter> params = invokable.getParameters();, +              if (!isPrimitiveOrNullable(params.get(i))) {, +  private static Invokable<?, ?> invokable(@Nullable Object instance, Method method) {, +    if (instance == null) {, +      return Invokable.from(method);, +      return TypeToken.of(instance.getClass()).method(method);, +  private static boolean isPrimitiveOrNullable(Parameter param) {, +    return param.getType().getRawType().isPrimitive() || param.isAnnotationPresent(Nullable.class);, +++ b/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java, +        new NullPointerTester().testMethodParameter(new OneArg(), method, 0);, +        new NullPointerTester().testMethodParameter(new OneArg(), method, 0);]