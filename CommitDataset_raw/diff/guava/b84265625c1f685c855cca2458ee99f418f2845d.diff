[+++ b/guava-tests/test/com/google/common/reflect/ElementTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.reflect;, +, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.NullPointerTester;, +, +import junit.framework.TestCase;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.reflect.Constructor;, +, +/**, + * Unit tests of {@link Element}., + *, + * @author Ben Yu, + */, +public class ElementTest extends TestCase {, +, +  public void testPrivateField() throws Exception {, +    Element element = A.field("privateField");, +    assertTrue(element.isPrivate());, +    assertFalse(element.isAbstract());, +    assertFalse(element.isPackagePrivate());, +    assertFalse(element.isProtected());, +    assertFalse(element.isPublic());, +    assertFalse(element.isFinal());, +    assertFalse(element.isStatic());, +    assertTrue(element.isAnnotationPresent(Tested.class));, +  }, +, +  public void testPackagePrivateField() throws Exception {, +    Element element = A.field("packagePrivateField");, +    assertFalse(element.isPrivate());, +    assertTrue(element.isPackagePrivate());, +    assertFalse(element.isProtected());, +    assertFalse(element.isPublic());, +    assertFalse(element.isFinal());, +    assertFalse(element.isStatic());, +    assertTrue(element.isAnnotationPresent(Tested.class));, +  }, +, +  public void testProtectedField() throws Exception {, +    Element element = A.field("protectedField");, +    assertFalse(element.isPrivate());, +    assertFalse(element.isPackagePrivate());, +    assertTrue(element.isProtected());, +    assertFalse(element.isPublic());, +    assertFalse(element.isFinal());, +    assertFalse(element.isStatic());, +    assertTrue(element.isAnnotationPresent(Tested.class));, +  }, +, +  public void testPublicField() throws Exception {, +    Element element = A.field("publicField");, +    assertFalse(element.isPrivate());, +    assertFalse(element.isPackagePrivate());, +    assertFalse(element.isProtected());, +    assertTrue(element.isPublic());, +    assertFalse(element.isFinal());, +    assertFalse(element.isStatic());, +    assertTrue(element.isAnnotationPresent(Tested.class));, +  }, +, +  public void testFinalField() throws Exception {, +    Element element = A.field("finalField");, +    assertTrue(element.isFinal());, +    assertFalse(element.isStatic());, +    assertTrue(element.isAnnotationPresent(Tested.class));, +  }, +, +  public void testStaticField() throws Exception {, +    Element element = A.field("staticField");, +    assertTrue(element.isStatic());, +    assertTrue(element.isAnnotationPresent(Tested.class));, +  }, +, +  public void testVolatileField() throws Exception {, +    Element element = A.field("volatileField");, +    assertTrue(element.isVolatile());, +  }, +, +  public void testTransientField() throws Exception {, +    Element element = A.field("transientField");]