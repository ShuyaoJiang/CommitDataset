[+++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();, +        .resolveType(subtype));, +    Type subtype = new TypeCapture<TypedListKeyMap<T>>() {}.capture();, +        .resolveType(subtype));, +    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();, +            .resolveType(subtype);, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();, +        .resolveType(subtype));, +    Type subtype = new TypeCapture<TypedListKeyMap<T>>() {}.capture();, +        .resolveType(subtype));, +    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();, +            .resolveType(subtype);, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java, +    SubtypeOfWithFalseRecursiveType<List<V>, List<K>> evenSubtypeWorks();, +  private interface SubtypeOfWithFalseRecursiveType<K1, V1>, +    SubtypeOfWithFalseRecursiveType<V1, K1> revertKeyAndValueTypes();, +        WithFalseRecursiveType.class, "evenSubtypeWorks");, +        SubtypeOfWithFalseRecursiveType.class, "revertKeyAndValueTypes");, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();, +        .resolveType(subtype));, +    Type subtype = new TypeCapture<TypedListKeyMap<T>>() {}.capture();, +        .resolveType(subtype));, +    Type subtype = new TypeCapture<TypedKeyMap<T>>() {}.capture();, +            .resolveType(subtype);, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java, +    SubtypeOfWithFalseRecursiveType<List<V>, List<K>> evenSubtypeWorks();, +  private interface SubtypeOfWithFalseRecursiveType<K1, V1>, +    SubtypeOfWithFalseRecursiveType<V1, K1> revertKeyAndValueTypes();, +        WithFalseRecursiveType.class, "evenSubtypeWorks");, +        SubtypeOfWithFalseRecursiveType.class, "revertKeyAndValueTypes");, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +    TypeToken<TwoTypeArgs<?, ?>> supertype =, +    TypeToken<StringForFirstTypeArg<String>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +        supertype.getSubtype(subtype.getRawType()));, +    TypeToken<TwoTypeArgs<?, ?>.InnerType<?, ?>> supertype =, +    TypeToken<StringForFirstTypeArg<Integer>.StringInnerType<Long>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +    ParameterizedType actualSubtype = (ParameterizedType), +        supertype.getSubtype(subtype.getRawType()).getType();, +    assertEquals(StringForFirstTypeArg.StringInnerType.class, actualSubtype.getRawType());, +    assertThat(actualSubtype.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);, +    ParameterizedType actualOwnerType = (ParameterizedType) actualSubtype.getOwnerType();, +    TypeToken<TwoTypeArgs<?, ? extends Number>> supertype =, +    TypeToken<StringForFirstTypeArg<Integer>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +    TypeToken<?> unused = supertype.getSubtype(subtype.getRawType());, +    TypeToken<Base> supertype = new TypeToken<Base>() {};, +    TypeToken<SingleGenericExtendsBase<String>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +    ParameterizedType actualSubtype =, +        (ParameterizedType) supertype.getSubtype(subtype.getRawType()).getType();, +    assertEquals(SingleGenericExtendsBase.class, actualSubtype.getRawType());, +    TypeToken<GenericClass.Base> supertype = new TypeToken<GenericClass.Base>() {};, +    TypeToken<SingleGenericExtendsBase<String>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +    ParameterizedType actualSubtype =, +        (ParameterizedType) supertype.getSubtype(subtype.getRawType()).getType();, +    assertEquals(SingleGenericExtendsBase.class, actualSubtype.getRawType());, +    assertTrue(TypeToken.of(actualSubtype).isSubtypeOf(supertype));, +    TypeToken<Serializable> supertype = new TypeToken<Serializable>() {};, +    TypeToken<ArrayList<String>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +    ParameterizedType actualSubtype =, +        (ParameterizedType) supertype.getSubtype(subtype.getRawType()).getType();, +    assertEquals(ArrayList.class, actualSubtype.getRawType());, +    assertThat(actualSubtype.getActualTypeArguments()[0]).isInstanceOf(TypeVariable.class);, +    assertTrue(TypeToken.of(actualSubtype).isSubtypeOf(supertype));, +    TypeToken<List<String>> supertype = new TypeToken<List<String>>() {};, +    TypeToken<MySpecialList<String, ?>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +    ParameterizedType actualSubtype =, +        (ParameterizedType) supertype.getSubtype(subtype.getRawType()).getType();, +    assertEquals(MySpecialList.class, actualSubtype.getRawType());, +    assertThat(actualSubtype.getActualTypeArguments()[0]).isEqualTo(String.class);, +    assertThat(actualSubtype.getActualTypeArguments()[1]).isInstanceOf(TypeVariable.class);, +    assertTrue(TypeToken.of(actualSubtype).isSubtypeOf(supertype));, +    TypeToken<List> supertype = new TypeToken<List>() {};, +    TypeToken<MySpecialList> subtype = new TypeToken<MySpecialList>() {};, +    assertTrue(subtype.isSubtypeOf(supertype));, +    Class<?> actualSubtype =, +        (Class<?>) supertype.getSubtype(subtype.getRawType()).getType();, +    assertEquals(MySpecialList.class, actualSubtype);, +    assertTrue(TypeToken.of(actualSubtype).isSubtypeOf(supertype));, +    TypeToken<SingleGenericExtendsBase<?>> supertype =, +    TypeToken<DoubleGenericExtendsSingleGeneric<String, Integer>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +    ParameterizedType actualSubtype = (ParameterizedType), +        supertype.getSubtype(subtype.getRawType()).getType();, +    assertEquals(DoubleGenericExtendsSingleGeneric.class, actualSubtype.getRawType());, +    assertThat(actualSubtype.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);, +    TypeToken<FourTypeArgs<T, Integer, ?, ?>> supertype =, +    TypeToken<ThreeTypeArgs<T, Integer, String>> subtype =, +    assertTrue(subtype.isSubtypeOf(supertype));, +        supertype.getSubtype(subtype.getRawType()));, +  public void testGetSubtype_recursiveTypeBoundInSubtypeTranslatedAsIs() {, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java]