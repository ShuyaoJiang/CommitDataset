[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +    BloomFilter<CharSequence> bf =, +        BloomFilter.create(Funnels.unencodedCharsFunnel(), numInsertions);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), -1);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), -1, 0.03);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), 1, 0.0);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), 1, 1.0);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), n, p);, +    tester.testAllPublicInstanceMethods(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100));, +    BloomFilter<CharSequence> original = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +          BloomFilter.create(Funnels.unencodedCharsFunnel(), i, fpp).bitSize());, +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100, 0.01)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100, 0.02)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 200, 0.01)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 200, 0.02)), +    BloomFilter<CharSequence> bf1 = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +    BloomFilter<CharSequence> bf2 = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +      BloomFilter<CharSequence> bf = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +    BloomFilter<CharSequence> bf =, +        BloomFilter.create(Funnels.unencodedCharsFunnel(), numInsertions);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), -1);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), -1, 0.03);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), 1, 0.0);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), 1, 1.0);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), n, p);, +    tester.testAllPublicInstanceMethods(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100));, +    BloomFilter<CharSequence> original = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +          BloomFilter.create(Funnels.unencodedCharsFunnel(), i, fpp).bitSize());, +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100, 0.01)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100, 0.02)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 200, 0.01)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 200, 0.02)), +    BloomFilter<CharSequence> bf1 = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +    BloomFilter<CharSequence> bf2 = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +      BloomFilter<CharSequence> bf = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.byteArrayFunnel().funnel(new byte[] { 4, 3, 2, 1 }, primitiveSink);, +    verify(primitiveSink).putBytes(new byte[] { 4, 3, 2, 1 });, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.unencodedCharsFunnel().funnel("test", primitiveSink);, +    verify(primitiveSink).putUnencodedChars("test");, +    assertNullsThrowException(Funnels.unencodedCharsFunnel());, +      PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +      Funnels.stringFunnel(charset).funnel("test", primitiveSink);, +      verify(primitiveSink).putString("test", charset);, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.integerFunnel().funnel(value, primitiveSink);, +    verify(primitiveSink).putInt(1234);, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.longFunnel().funnel(value, primitiveSink);, +    verify(primitiveSink).putLong(1234);, +    PrimitiveSink primitiveSink = new AbstractStreamingHasher(4, 4) {, +      funnel.funnel(null, primitiveSink);, +        Funnels.unencodedCharsFunnel(),, +        SerializableTester.reserialize(Funnels.unencodedCharsFunnel()));, +       .addEqualityGroup(Funnels.unencodedCharsFunnel()), +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +    BloomFilter<CharSequence> bf =, +        BloomFilter.create(Funnels.unencodedCharsFunnel(), numInsertions);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), -1);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), -1, 0.03);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), 1, 0.0);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), 1, 1.0);, +      BloomFilter.create(Funnels.unencodedCharsFunnel(), n, p);, +    tester.testAllPublicInstanceMethods(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100));, +    BloomFilter<CharSequence> original = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +          BloomFilter.create(Funnels.unencodedCharsFunnel(), i, fpp).bitSize());, +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100, 0.01)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 100, 0.02)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 200, 0.01)), +        .addEqualityGroup(BloomFilter.create(Funnels.unencodedCharsFunnel(), 200, 0.02)), +    BloomFilter<CharSequence> bf1 = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +    BloomFilter<CharSequence> bf2 = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +      BloomFilter<CharSequence> bf = BloomFilter.create(Funnels.unencodedCharsFunnel(), 100);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.byteArrayFunnel().funnel(new byte[] { 4, 3, 2, 1 }, primitiveSink);, +    verify(primitiveSink).putBytes(new byte[] { 4, 3, 2, 1 });, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.unencodedCharsFunnel().funnel("test", primitiveSink);, +    verify(primitiveSink).putUnencodedChars("test");, +    assertNullsThrowException(Funnels.unencodedCharsFunnel());, +      PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +      Funnels.stringFunnel(charset).funnel("test", primitiveSink);, +      verify(primitiveSink).putString("test", charset);, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.integerFunnel().funnel(value, primitiveSink);, +    verify(primitiveSink).putInt(1234);, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnels.longFunnel().funnel(value, primitiveSink);, +    verify(primitiveSink).putLong(1234);, +    PrimitiveSink primitiveSink = new AbstractStreamingHasher(4, 4) {, +      funnel.funnel(null, primitiveSink);, +        Funnels.unencodedCharsFunnel(),, +        SerializableTester.reserialize(Funnels.unencodedCharsFunnel()));, +       .addEqualityGroup(Funnels.unencodedCharsFunnel()), +++ b/guava/src/com/google/common/hash/Funnels.java, +   * Returns a funnel that extracts the characters from a {@code CharSequence}, a character at a]