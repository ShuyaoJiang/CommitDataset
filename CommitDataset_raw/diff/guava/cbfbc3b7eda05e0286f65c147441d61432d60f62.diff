[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * A no-frills implementation of AbstractListeningExecutorService, designed, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * A no-frills implementation of AbstractListeningExecutorService, designed, +++ b/guava/src/com/google/common/collect/ListMultimap.java, +   *, +   * <p>An empty {@code ListMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code SetMultimap}., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * A no-frills implementation of AbstractListeningExecutorService, designed, +++ b/guava/src/com/google/common/collect/ListMultimap.java, +   *, +   * <p>An empty {@code ListMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code SetMultimap}., +++ b/guava/src/com/google/common/collect/SetMultimap.java, +   *, +   * <p>An empty {@code SetMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code ListMultimap}., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * A no-frills implementation of AbstractListeningExecutorService, designed, +++ b/guava/src/com/google/common/collect/ListMultimap.java, +   *, +   * <p>An empty {@code ListMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code SetMultimap}., +++ b/guava/src/com/google/common/collect/SetMultimap.java, +   *, +   * <p>An empty {@code SetMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code ListMultimap}., +++ b/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java, + * Implements {@link ListeningExecutorService} execution methods atop the abstract {@link #execute}, + * method. More concretely, the {@code submit}, {@code invokeAny} and {@code invokeAll} methods, + * create {@link ListenableFutureTask} instances and pass them to {@link #execute}., + *, + * <p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and, + * termination., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * A no-frills implementation of AbstractListeningExecutorService, designed, +++ b/guava/src/com/google/common/collect/ListMultimap.java, +   *, +   * <p>An empty {@code ListMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code SetMultimap}., +++ b/guava/src/com/google/common/collect/SetMultimap.java, +   *, +   * <p>An empty {@code SetMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code ListMultimap}., +++ b/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java, + * Implements {@link ListeningExecutorService} execution methods atop the abstract {@link #execute}, + * method. More concretely, the {@code submit}, {@code invokeAny} and {@code invokeAll} methods, + * create {@link ListenableFutureTask} instances and pass them to {@link #execute}., + *, + * <p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and, + * termination., +++ b/guava/src/com/google/common/util/concurrent/ExecutionList.java, +   * thread that the listener runs in depends on whether the {@code, +   * ExecutionList} has been executed at the time it is added. In particular,, +   * listeners may run in the thread that calls {@code add}. Second, the thread, +   * that calls {@link #execute} may be an internal implementation thread, such, +   * as an RPC network thread, and {@code sameThreadExecutor()} listeners may, +   * run in this thread. Finally, during the execution of a {@code, +   * sameThreadExecutor} listener, all other registered but unexecuted, +   * listeners are prevented from running, even if those listeners are to run, +   * in other executors., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractListeningExecutorServiceTest.java, +     * A no-frills implementation of AbstractListeningExecutorService, designed, +++ b/guava/src/com/google/common/collect/ListMultimap.java, +   *, +   * <p>An empty {@code ListMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code SetMultimap}., +++ b/guava/src/com/google/common/collect/SetMultimap.java, +   *, +   * <p>An empty {@code SetMultimap} is equal to any other empty {@code, +   * Multimap}, including an empty {@code ListMultimap}., +++ b/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java, + * Implements {@link ListeningExecutorService} execution methods atop the abstract {@link #execute}, + * method. More concretely, the {@code submit}, {@code invokeAny} and {@code invokeAll} methods, + * create {@link ListenableFutureTask} instances and pass them to {@link #execute}., + *, + * <p>In addition to {@link #execute}, subclasses must implement all methods related to shutdown and, + * termination., +++ b/guava/src/com/google/common/util/concurrent/ExecutionList.java, +   * thread that the listener runs in depends on whether the {@code, +   * ExecutionList} has been executed at the time it is added. In particular,, +   * listeners may run in the thread that calls {@code add}. Second, the thread, +   * that calls {@link #execute} may be an internal implementation thread, such, +   * as an RPC network thread, and {@code sameThreadExecutor()} listeners may, +   * run in this thread. Finally, during the execution of a {@code, +   * sameThreadExecutor} listener, all other registered but unexecuted, +   * listeners are prevented from running, even if those listeners are to run, +   * in other executors., +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * does not accept an {@code Executor} to perform the the work in. For, +   * heavier derivations, this overload carries some caveats: First, the thread, +   * that the derivation runs in depends on whether the input {@code Future} is, +   * done at the time {@code chain} is called. In particular, if called late,, +   * {@code chain} will run the derivation in the thread that called {@code, +   * chain}.  Second, derivations may run in an internal thread of the system, +   * responsible for the input {@code Future}, such as an RPC network thread., +   * Finally, during the execution of a {@code sameThreadExecutor} {@code, +   * chain} function, all other registered but unexecuted listeners are, +   * prevented from running, even if those listeners are to run in other]