[+++ b/guava-gwt/test/com/google/common/util/concurrent/TrustedInputFutureTest_gwt.java, +public void testNegativeTimeout() throws Exception {, +  com.google.common.util.concurrent.TrustedInputFutureTest testCase = new com.google.common.util.concurrent.TrustedInputFutureTest();, +  testCase.setUp();, +  testCase.testNegativeTimeout();, +}, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/TrustedInputFutureTest_gwt.java, +public void testNegativeTimeout() throws Exception {, +  com.google.common.util.concurrent.TrustedInputFutureTest testCase = new com.google.common.util.concurrent.TrustedInputFutureTest();, +  testCase.setUp();, +  testCase.testNegativeTimeout();, +}, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/UntrustedInputFutureTest_gwt.java, +public void testNegativeTimeout() throws Exception {, +  com.google.common.util.concurrent.UntrustedInputFutureTest testCase = new com.google.common.util.concurrent.UntrustedInputFutureTest();, +  testCase.setUp();, +  testCase.testNegativeTimeout();, +}, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/TrustedInputFutureTest_gwt.java, +public void testNegativeTimeout() throws Exception {, +  com.google.common.util.concurrent.TrustedInputFutureTest testCase = new com.google.common.util.concurrent.TrustedInputFutureTest();, +  testCase.setUp();, +  testCase.testNegativeTimeout();, +}, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/UntrustedInputFutureTest_gwt.java, +public void testNegativeTimeout() throws Exception {, +  com.google.common.util.concurrent.UntrustedInputFutureTest testCase = new com.google.common.util.concurrent.UntrustedInputFutureTest();, +  testCase.setUp();, +  testCase.testNegativeTimeout();, +}, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java, +import static com.google.common.util.concurrent.Futures.getDone;, +import static com.google.common.util.concurrent.TestPlatform.getDoneFromTimeoutOverload;, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.util.concurrent.AbstractFutureTest.TimedWaiterThread;, +@GwtCompatible(emulated = true), +  public void testNegativeTimeout() throws Exception {, +    future.set(1);, +    assertEquals(1, future.get(-1, SECONDS).intValue());, +  }, +, +  @GwtIncompatible // threads, +, +  public void testOverflowTimeout() throws Exception {, +    // First, sanity check that naive multiplication would really overflow to a negative number:, +    long nanosPerSecond = NANOSECONDS.convert(1, SECONDS);, +    assertThat(nanosPerSecond * Long.MAX_VALUE).isLessThan(0L);, +, +    // Check that we wait long enough anyway (presumably as long as MAX_VALUE nanos):, +    TimedWaiterThread waiter = new TimedWaiterThread(future, Long.MAX_VALUE, SECONDS);, +    waiter.start();, +    waiter.awaitWaiting();, +, +    future.set(1);, +    waiter.join();, +  }, +, +    assertThat(getDone(future)).isEqualTo(expectedResult);, +    assertThat(getDoneFromTimeoutOverload(future)).isEqualTo(expectedResult);, +      getDone(future);, +      getDoneFromTimeoutOverload(future);, +      getDone(future);, +      getDoneFromTimeoutOverload(future);, +++ b/guava-gwt/test/com/google/common/util/concurrent/TrustedInputFutureTest_gwt.java, +public void testNegativeTimeout() throws Exception {, +  com.google.common.util.concurrent.TrustedInputFutureTest testCase = new com.google.common.util.concurrent.TrustedInputFutureTest();, +  testCase.setUp();, +  testCase.testNegativeTimeout();, +}, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/UntrustedInputFutureTest_gwt.java, +public void testNegativeTimeout() throws Exception {, +  com.google.common.util.concurrent.UntrustedInputFutureTest testCase = new com.google.common.util.concurrent.UntrustedInputFutureTest();, +  testCase.setUp();, +  testCase.testNegativeTimeout();, +}, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java, +import static com.google.common.util.concurrent.Futures.getDone;, +import static com.google.common.util.concurrent.TestPlatform.getDoneFromTimeoutOverload;, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.util.concurrent.AbstractFutureTest.TimedWaiterThread;, +@GwtCompatible(emulated = true), +  public void testNegativeTimeout() throws Exception {, +    future.set(1);, +    assertEquals(1, future.get(-1, SECONDS).intValue());, +  }, +, +  @GwtIncompatible // threads, +, +  public void testOverflowTimeout() throws Exception {, +    // First, sanity check that naive multiplication would really overflow to a negative number:, +    long nanosPerSecond = NANOSECONDS.convert(1, SECONDS);]