[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +  @Override, +  protected Map<K, V> delegate() {, +  @Override, +  public boolean containsValue(@Nullable Object value) {, +  @Override, +  public V put(@Nullable K key, @Nullable V value) {, +  private void updateInverseMap(K key, boolean containedKey, V oldValue, V newValue) {, +  @Override, +  public V remove(@Nullable Object key) {, +  @Override, +  public void putAll(Map<? extends K, ? extends V> map) {, +  @Override, +  public void clear() {, +  @Override, +  public Set<K> keySet() {, +    @Override, +    protected Set<K> delegate() {, +    @Override, +    public void clear() {, +    @Override, +    public boolean remove(Object key) {, +    @Override, +    public boolean removeAll(Collection<?> keysToRemove) {, +    @Override, +    public boolean retainAll(Collection<?> keysToRetain) {, +    @Override, +    public Iterator<K> iterator() {, +  @Override, +  public Set<V> values() {, +    @Override, +    protected Set<V> delegate() {, +    @Override, +    public Iterator<V> iterator() {, +    @Override, +    public Object[] toArray() {, +    @Override, +    public <T> T[] toArray(T[] array) {, +    @Override, +    public String toString() {, +  @Override, +  public Set<Entry<K, V>> entrySet() {, +    @Override, +    protected Set<Entry<K, V>> delegate() {, +    @Override, +    public void clear() {, +    @Override, +    public boolean remove(Object object) {, +    @Override, +    public Iterator<Entry<K, V>> iterator() {, +        @Override, +        public boolean hasNext() {, +        @Override, +        public Entry<K, V> next() {, +            @Override, +            protected Entry<K, V> delegate() {, +            @Override, +            public V setValue(V value) {, +              checkArgument(!containsValue(value), "value already present: %s", value);, +              checkState(Objects.equal(value, get(getKey())), "entry no longer in map");, +        @Override, +        public void remove() {, +    @Override, +    public Object[] toArray() {, +, +    @Override, +    public <T> T[] toArray(T[] array) {, +, +    @Override, +    public boolean contains(Object o) {, +, +    @Override, +    public boolean containsAll(Collection<?> c) {, +, +    @Override, +    public boolean removeAll(Collection<?> c) {, +, +    @Override, +    public boolean retainAll(Collection<?> c) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +  @Override, +  protected Map<K, V> delegate() {, +  @Override, +  public boolean containsValue(@Nullable Object value) {, +  @Override, +  public V put(@Nullable K key, @Nullable V value) {, +  private void updateInverseMap(K key, boolean containedKey, V oldValue, V newValue) {, +  @Override, +  public V remove(@Nullable Object key) {, +  @Override, +  public void putAll(Map<? extends K, ? extends V> map) {, +  @Override, +  public void clear() {, +  @Override, +  public Set<K> keySet() {, +    @Override, +    protected Set<K> delegate() {, +    @Override, +    public void clear() {, +    @Override]