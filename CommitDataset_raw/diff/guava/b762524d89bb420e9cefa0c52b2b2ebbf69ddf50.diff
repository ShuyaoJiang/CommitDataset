[+++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, + * An immutable well-formed internet domain name, such as {@code com} or {@code, + * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other, + * network interactions take place. Thus there is no guarantee that the domain, + * actually exists on the internet., + * candidate string {@code "xxx"}, might browsing to {@code "http://xxx/"}, + * result in a webpage being displayed? In the past, this test was frequently, + * done by determining whether the domain ended with a {@linkplain, + * #isPublicSuffix() public suffix} but was not itself a public suffix. However,, + * this test is no longer accurate. There are many domains which are both public, + * suffixes and addressable as hosts; {@code "uk.com"} is one example. As a, + * result, the only useful test to determine if a domain is a plausible web host, + * is {@link #hasPublicSuffix()}. This will return {@code true} for many domains, + * which (currently) are not hosts, such as {@code "com"}), but given that any, + * public suffix may become a host without warning, it is better to err on the, + * side of permissiveness and thus avoid spurious rejection of valid sites., + * <p>During construction, names are normalized in two ways:, + * <ol>, + * <li>ASCII uppercase characters are converted to lowercase., + * <li>Unicode dot separators other than the ASCII period ({@code '.'}) are, + * converted to the ASCII period., + * </ol>, + * The normalized values will be returned from {@link #name()} and, + * {@link #parts()}, and will be reflected in the result of, + * {@link #equals(Object)}., + * internationalized domain names</a> such as {@code ??.cn} are supported, as, + * are the equivalent <a, + * href="http://en.wikipedia.org/wiki/Internationalized_domain_name">IDNA, + * Punycode-encoded</a> versions., +   * with an excluded domain pattern such as {@code "nhs.uk"}., +   * ("Internationalizing Domain Names in Applications") is skipped, while, +   * validation against <a, +   * href="http://www.ietf.org/rfc/rfc1035.txt">RFC 1035</a> is relaxed in, +   * the following ways:, +   * <ul>, +   * <li>Any part containing non-ASCII characters is considered valid., +   * <li>Underscores ('_') are permitted wherever dashes ('-') are permitted., +   * <li>Parts other than the final part may start with a digit., +   * </ul>, +   * Does the domain name match one of the "wildcard" patterns (e.g., +   * {@code "*.ar"})?, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, + * An immutable well-formed internet domain name, such as {@code com} or {@code, + * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other, + * network interactions take place. Thus there is no guarantee that the domain, + * actually exists on the internet., + * candidate string {@code "xxx"}, might browsing to {@code "http://xxx/"}, + * result in a webpage being displayed? In the past, this test was frequently, + * done by determining whether the domain ended with a {@linkplain, + * #isPublicSuffix() public suffix} but was not itself a public suffix. However,, + * this test is no longer accurate. There are many domains which are both public, + * suffixes and addressable as hosts; {@code "uk.com"} is one example. As a, + * result, the only useful test to determine if a domain is a plausible web host, + * is {@link #hasPublicSuffix()}. This will return {@code true} for many domains, + * which (currently) are not hosts, such as {@code "com"}), but given that any, + * public suffix may become a host without warning, it is better to err on the, + * side of permissiveness and thus avoid spurious rejection of valid sites., + * <p>During construction, names are normalized in two ways:, + * <ol>, + * <li>ASCII uppercase characters are converted to lowercase., + * <li>Unicode dot separators other than the ASCII period ({@code '.'}) are, + * converted to the ASCII period., + * </ol>, + * The normalized values will be returned from {@link #name()} and, + * {@link #parts()}, and will be reflected in the result of, + * {@link #equals(Object)}., + * internationalized domain names</a> such as {@code ??.cn} are supported, as, + * are the equivalent <a, + * href="http://en.wikipedia.org/wiki/Internationalized_domain_name">IDNA, + * Punycode-encoded</a> versions., +   * with an excluded domain pattern such as {@code "nhs.uk"}., +   * ("Internationalizing Domain Names in Applications") is skipped, while, +   * validation against <a, +   * href="http://www.ietf.org/rfc/rfc1035.txt">RFC 1035</a> is relaxed in, +   * the following ways:, +   * <ul>, +   * <li>Any part containing non-ASCII characters is considered valid., +   * <li>Underscores ('_') are permitted wherever dashes ('-') are permitted., +   * <li>Parts other than the final part may start with a digit., +   * </ul>, +   * Does the domain name match one of the "wildcard" patterns (e.g., +   * {@code "*.ar"})?, +++ b/src/com/google/common/net/InternetDomainName.java, + * An immutable well-formed internet domain name, such as {@code com} or {@code, + * foo.co.uk}. Only syntactic analysis is performed; no DNS lookups or other, + * network interactions take place. Thus there is no guarantee that the domain, + * actually exists on the internet., + * candidate string {@code "xxx"}, might browsing to {@code "http://xxx/"}, + * result in a webpage being displayed? In the past, this test was frequently, + * done by determining whether the domain ended with a {@linkplain, + * #isPublicSuffix() public suffix} but was not itself a public suffix. However,, + * this test is no longer accurate. There are many domains which are both public, + * suffixes and addressable as hosts; {@code "uk.com"} is one example. As a, + * result, the only useful test to determine if a domain is a plausible web host, + * is {@link #hasPublicSuffix()}. This will return {@code true} for many domains, + * which (currently) are not hosts, such as {@code "com"}), but given that any, + * public suffix may become a host without warning, it is better to err on the, + * side of permissiveness and thus avoid spurious rejection of valid sites., + * <p>During construction, names are normalized in two ways:, + * <ol>]