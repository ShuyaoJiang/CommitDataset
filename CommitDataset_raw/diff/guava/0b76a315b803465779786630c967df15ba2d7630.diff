[+++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +    expect(mock.size()).andReturn(0L);, +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +    expect(mock.size()).andReturn(0L);, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(asList(keys.toArray(new Object[(int) cache.size()]))), +      ASSERT.that(asList(values.toArray(new Object[(int) cache.size()]))), +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +    expect(mock.size()).andReturn(0L);, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(asList(keys.toArray(new Object[(int) cache.size()]))), +      ASSERT.that(asList(values.toArray(new Object[(int) cache.size()]))), +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * {@link #invalidateAll}, {@link #stats}, and {@link #asMap}. The methods, +  public long size() {, +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +    expect(mock.size()).andReturn(0L);, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(asList(keys.toArray(new Object[(int) cache.size()]))), +      ASSERT.that(asList(values.toArray(new Object[(int) cache.size()]))), +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * {@link #invalidateAll}, {@link #stats}, and {@link #asMap}. The methods, +  public long size() {, +++ b/guava/src/com/google/common/cache/Cache.java, +   * Returns the approximate number of entries in this cache., +  long size();, +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +    expect(mock.size()).andReturn(0L);, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(asList(keys.toArray(new Object[(int) cache.size()]))), +      ASSERT.that(asList(values.toArray(new Object[(int) cache.size()]))), +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * {@link #invalidateAll}, {@link #stats}, and {@link #asMap}. The methods, +  public long size() {, +++ b/guava/src/com/google/common/cache/Cache.java, +   * Returns the approximate number of entries in this cache., +  long size();, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +    public long size() {, +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +    expect(mock.size()).andReturn(0L);, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(asList(keys.toArray(new Object[(int) cache.size()]))), +      ASSERT.that(asList(values.toArray(new Object[(int) cache.size()]))), +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * {@link #invalidateAll}, {@link #stats}, and {@link #asMap}. The methods, +  public long size() {, +++ b/guava/src/com/google/common/cache/Cache.java, +   * Returns the approximate number of entries in this cache., +  long size();, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +    public long size() {, +++ b/guava/src/com/google/common/cache/ComputingCache.java, +  public long size() {, +    return map.longSize();, +++ b/guava-tests/test/com/google/common/cache/CacheReferencesTest.java, +    long initialSize = cache.size();, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +      // check count after we have a strong reference to all entries, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +    expect(mock.size()).andReturn(0L);, +++ b/guava-tests/test/com/google/common/cache/PopulatedCachesTest.java, +      ASSERT.that(asList(keys.toArray(new Object[(int) cache.size()]))), +      ASSERT.that(asList(values.toArray(new Object[(int) cache.size()]))), +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * {@link #invalidateAll}, {@link #stats}, and {@link #asMap}. The methods, +  public long size() {, +++ b/guava/src/com/google/common/cache/Cache.java, +   * Returns the approximate number of entries in this cache., +  long size();]