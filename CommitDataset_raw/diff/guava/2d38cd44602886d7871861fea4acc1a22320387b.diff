[+++ b/guava/src/com/google/common/escape/ArrayBasedCharEscaper.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * A {@link CharEscaper} that uses an array to quickly look up replacement characters for a given, + * {@code char} value. An additional safe range is provided that determines whether {@code char}, + * values without specific replacements are to be considered safe and left unescaped or should be, + * <p>A good example of usage of this class is for Java source code escaping where the replacement, + * array contains information about special ASCII characters such as {@code \\t} and {@code \\n}, + * while {@link #escapeUnsafe} is overridden to handle general escaping of the form {@code \\uxxxx}., + * <p>The size of the data structure used by {@link ArrayBasedCharEscaper} is proportional to the, + * highest valued character that requires escaping. For example a replacement map containing the, + * single character '{@code \}{@code u1000}' will require approximately 16K of memory. If you need, + * to create multiple escaper instances that have the same character replacement mapping consider, + * using {@link ArrayBasedEscaperMap}., +   * Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe, +   * range. If {@code safeMax < safeMin} then no characters are considered safe., +   * <p>If a character has no mapped replacement then it is checked against the safe range. If it, +   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed., +  protected ArrayBasedCharEscaper(, +      Map<Character, String> replacementMap, char safeMin, char safeMax) {, +   * Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe, +   * range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is, +   * useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large, +   * replacement mappings., +   * <p>If a character has no mapped replacement then it is checked against the safe range. If it, +   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed., +  protected ArrayBasedCharEscaper(ArrayBasedEscaperMap escaperMap, char safeMin, char safeMax) {, +   * This is overridden to improve performance. Rough benchmarking shows that this almost doubles, +   * the speed when processing strings that do not require any escaping., +      if ((c < replacementsLength && replacements[c] != null) || c > safeMax || c < safeMin) {, +   * Escapes a single character using the replacement array and safe range values. If the given, +   * character does not have an explicit replacement and lies outside the safe range then, +   * {@link #escapeUnsafe} is called., +  @Override, +  protected final char[] escape(char c) {, +   * Escapes a {@code char} value that has no direct explicit value in the replacement array and, +   * lies outside the stated safe range. Subclasses should override this method to provide, +   * generalized escaping for characters., +   * <p>Note that arrays returned by this method must not be modified once they have been returned., +   * However it is acceptable to return the same array multiple times (even for different input, +   * characters)., +   * @return the replacement characters, or {@code null} if no escaping was required, +++ b/guava/src/com/google/common/escape/ArrayBasedCharEscaper.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * A {@link CharEscaper} that uses an array to quickly look up replacement characters for a given, + * {@code char} value. An additional safe range is provided that determines whether {@code char}, + * values without specific replacements are to be considered safe and left unescaped or should be, + * <p>A good example of usage of this class is for Java source code escaping where the replacement, + * array contains information about special ASCII characters such as {@code \\t} and {@code \\n}, + * while {@link #escapeUnsafe} is overridden to handle general escaping of the form {@code \\uxxxx}., + * <p>The size of the data structure used by {@link ArrayBasedCharEscaper} is proportional to the, + * highest valued character that requires escaping. For example a replacement map containing the, + * single character '{@code \}{@code u1000}' will require approximately 16K of memory. If you need, + * to create multiple escaper instances that have the same character replacement mapping consider, + * using {@link ArrayBasedEscaperMap}., +   * Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe, +   * range. If {@code safeMax < safeMin} then no characters are considered safe., +   * <p>If a character has no mapped replacement then it is checked against the safe range. If it, +   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed., +  protected ArrayBasedCharEscaper(, +      Map<Character, String> replacementMap, char safeMin, char safeMax) {, +   * Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe, +   * range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is, +   * useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large, +   * replacement mappings., +   * <p>If a character has no mapped replacement then it is checked against the safe range. If it, +   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed., +  protected ArrayBasedCharEscaper(ArrayBasedEscaperMap escaperMap, char safeMin, char safeMax) {, +   * This is overridden to improve performance. Rough benchmarking shows that this almost doubles, +   * the speed when processing strings that do not require any escaping., +      if ((c < replacementsLength && replacements[c] != null) || c > safeMax || c < safeMin) {, +   * Escapes a single character using the replacement array and safe range values. If the given, +   * character does not have an explicit replacement and lies outside the safe range then, +   * {@link #escapeUnsafe} is called., +  @Override, +  protected final char[] escape(char c) {, +   * Escapes a {@code char} value that has no direct explicit value in the replacement array and, +   * lies outside the stated safe range. Subclasses should override this method to provide, +   * generalized escaping for characters., +   * <p>Note that arrays returned by this method must not be modified once they have been returned., +   * However it is acceptable to return the same array multiple times (even for different input, +   * characters)., +   * @return the replacement characters, or {@code null} if no escaping was required, +++ b/guava/src/com/google/common/escape/ArrayBasedEscaperMap.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * {@link ArrayBasedCharEscaper} or {@link ArrayBasedUnicodeEscaper} instances. This class should be]