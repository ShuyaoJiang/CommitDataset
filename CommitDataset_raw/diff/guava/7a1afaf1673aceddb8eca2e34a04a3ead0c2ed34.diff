[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkElementIndex;, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.base.Objects;, +, +import java.io.Serializable;, +import java.util.AbstractCollection;, +import java.util.AbstractSet;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import javax.annotation.Nullable;, +, +/**, + * Fixed-size {@link Table} implementation backed by a two-dimensional array., + *, + * <p>The allowed row and column keys must be supplied when the table is, + * created. The table always contains a mapping for every row key / column pair., + * The value corresponding to a given row and column is null unless another, + * value is provided., + *, + * <p>The table's size is constant: the product of the number of supplied row, + * keys and the number of supplied column keys. The {@code remove} and {@code, + * clear} methods are not supported by the table or its views. The {@link, + * #erase} and {@link #eraseAll} methods may be used instead., + *, + * <p>The ordering of the row and column keys provided when the table is, + * constructed determines the iteration ordering across rows and columns in the, + * table's views. None of the view iterators support {@link Iterator#remove}., + * If the table is modified after an iterator is created, the iterator remains, + * valid., + *, + * <p>This class requires less memory than the {@link HashBasedTable} and {@link, + * TreeBasedTable} implementations, except when the table is sparse., + *, + * <p>Null row keys or column keys are not permitted., + *, + * <p>This class provides methods involving the underlying array structure,, + * where the array indices correspond to the position of a row or column in the, + * lists of allowed keys and values. See the {@link #at}, {@link #set}, {@link, + * #toArray}, {@link #rowKeyList}, and {@link #columnKeyList} methods for more, + * details., + *, + * <p>Note that this implementation is not synchronized. If multiple threads, + * access the same cell of an {@code ArrayTable} concurrently and one of the, + * threads modifies its value, there is no guarantee that the new value will be, + * fully visible to the other threads. To guarantee that modifications are, + * visible, synchronize access to the table. Unlike other {@code Table}, + * implementations, synchronization is unnecessary between a thread that writes, + * to one cell and a thread that reads from another., + *, + * <p>See the Guava User Guide article on <a href=, + * "http://code.google.com/p/guava-libraries/wiki/NewCollectionTypesExplained#Table">, + * {@code Table}</a>., + *, + * @author Jared Levy, + * @since 10.0, + */, +@Beta, +@GwtCompatible(serializable = true, emulated = true), +public final class ArrayTable<R, C, V> implements Table<R, C, V>, Serializable {, +, +  /**, +   * Creates an empty {@code ArrayTable}., +   *, +   * @param rowKeys row keys that may be stored in the generated table, +   * @param columnKeys column keys that may be stored in the generated table, +   * @throws NullPointerException if any of the provided keys is null, +   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys}, +   *     contains duplicates or is empty, +   */, +  public static <R, C, V> ArrayTable<R, C, V> create(, +      Iterable<? extends R> rowKeys, Iterable<? extends C> columnKeys) {, +    return new ArrayTable<R, C, V>(rowKeys, columnKeys);]