[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}. The resulting iterable's iterator does not support {@code remove()}., +      final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +        return Iterators.filter(unfiltered.iterator(), retainIfTrue);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}. The resulting iterable's iterator does not support {@code remove()}., +      final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +        return Iterators.filter(unfiltered.iterator(), retainIfTrue);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}., +      final Iterator<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +          if (retainIfTrue.apply(element)) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}. The resulting iterable's iterator does not support {@code remove()}., +      final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +        return Iterators.filter(unfiltered.iterator(), retainIfTrue);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}., +      final Iterator<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +          if (retainIfTrue.apply(element)) {, +++ b/guava/src/com/google/common/collect/Iterables.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}. The resulting iterable's iterator does not support {@code remove()}., +      final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +        return Iterators.filter(unfiltered.iterator(), retainIfTrue);, +   * Returns all elements in {@code unfiltered} that are of the type {@code desiredType}., +   * The returned iterable's iterator does not support {@code remove()}., +   * @param unfiltered an iterable containing objects of any type, to be filtered on, +   * @param desiredType the type of elements desired in the result iterable, +  public static <T> Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType) {, +    checkNotNull(desiredType);, +        return Iterators.filter(unfiltered.iterator(), desiredType);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}. The resulting iterable's iterator does not support {@code remove()}., +      final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +        return Iterators.filter(unfiltered.iterator(), retainIfTrue);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}., +      final Iterator<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +          if (retainIfTrue.apply(element)) {, +++ b/guava/src/com/google/common/collect/Iterables.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}. The resulting iterable's iterator does not support {@code remove()}., +      final Iterable<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +        return Iterators.filter(unfiltered.iterator(), retainIfTrue);, +   * Returns all elements in {@code unfiltered} that are of the type {@code desiredType}., +   * The returned iterable's iterator does not support {@code remove()}., +   * @param unfiltered an iterable containing objects of any type, to be filtered on, +   * @param desiredType the type of elements desired in the result iterable, +  public static <T> Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType) {, +    checkNotNull(desiredType);, +        return Iterators.filter(unfiltered.iterator(), desiredType);, +++ b/guava/src/com/google/common/collect/Iterators.java, +   * Returns the elements of {@code unfiltered} that satisfy the input predicate, +   * {@code retainIfTrue}., +      final Iterator<T> unfiltered, final Predicate<? super T> retainIfTrue) {, +    checkNotNull(retainIfTrue);, +          if (retainIfTrue.apply(element)) {, +   * Returns all elements in {@code unfiltered} that are of the type {@code desiredType}., +   * @param unfiltered an iterator containing objects of any type, to be filtered on, +   * @param desiredType the type of elements desired in the result iterator, +  public static <T> UnmodifiableIterator<T> filter(Iterator<?> unfiltered, Class<T> desiredType) {, +    return (UnmodifiableIterator<T>) filter(unfiltered, instanceOf(desiredType));]