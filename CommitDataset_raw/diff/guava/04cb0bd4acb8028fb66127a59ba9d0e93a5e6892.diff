[+++ b/guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, + * instances from its {@code ExecutorService} methods., + * To create an instance from an existing {@link ScheduledExecutorService}, , + * call {@link MoreExecutors#listeningDecorator(ScheduledExecutorService)}., +  /**, +   * Helper interface to implement both {@link ListenableFuture} and, +   * {@link ScheduledFuture}. , +   */, +  public interface ListenableScheduledFuture<V> , +      extends ScheduledFuture<V>, ListenableFuture<V> {, +  }, +, +  @Override, +  public ListenableScheduledFuture<?> schedule(, +      Runnable command, long delay, TimeUnit unit);, +, +  @Override, +  public <V> ListenableScheduledFuture<V> schedule(, +      Callable<V> callable, long delay, TimeUnit unit);, +, +  @Override, +  public ListenableScheduledFuture<?> scheduleAtFixedRate(, +      Runnable command, long initialDelay, long period, TimeUnit unit);, +, +  @Override, +  public ListenableScheduledFuture<?> scheduleWithFixedDelay(, +      Runnable command, long initialDelay, long delay, TimeUnit unit);, +++ b/guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, + * instances from its {@code ExecutorService} methods., + * To create an instance from an existing {@link ScheduledExecutorService}, , + * call {@link MoreExecutors#listeningDecorator(ScheduledExecutorService)}., +  /**, +   * Helper interface to implement both {@link ListenableFuture} and, +   * {@link ScheduledFuture}. , +   */, +  public interface ListenableScheduledFuture<V> , +      extends ScheduledFuture<V>, ListenableFuture<V> {, +  }, +, +  @Override, +  public ListenableScheduledFuture<?> schedule(, +      Runnable command, long delay, TimeUnit unit);, +, +  @Override, +  public <V> ListenableScheduledFuture<V> schedule(, +      Callable<V> callable, long delay, TimeUnit unit);, +, +  @Override, +  public ListenableScheduledFuture<?> scheduleAtFixedRate(, +      Runnable command, long initialDelay, long period, TimeUnit unit);, +, +  @Override, +  public ListenableScheduledFuture<?> scheduleWithFixedDelay(, +      Runnable command, long initialDelay, long delay, TimeUnit unit);, +++ b/guava/src/com/google/common/util/concurrent/MoreExecutors.java, +import com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture;, +import java.util.concurrent.Delayed;, +    private final ExecutorService delegate;, +    public ListenableScheduledFuture<?> schedule(, +      ListenableFutureTask<Void> task = , +          ListenableFutureTask.create(command, null);, +      Delayed delayed = delegate.schedule(task, delay, unit);, +      return new ListenableScheduledTask<Void>(task, delayed);, +    public <V> ListenableScheduledFuture<V> schedule(, +      ListenableFutureTask<V> task = ListenableFutureTask.create(callable);, +      Delayed delayed = delegate.schedule(task, delay, unit);, +      return new ListenableScheduledTask<V>(task, delayed);, +    public ListenableScheduledFuture<?> scheduleAtFixedRate(, +      ListenableFutureTask<Void> task =, +          ListenableFutureTask.create(command, null);, +      Delayed delayed = , +          delegate.scheduleAtFixedRate(task, initialDelay, period, unit);, +      return new ListenableScheduledTask<Void>(task, delayed);, +    public ListenableScheduledFuture<?> scheduleWithFixedDelay(, +      ListenableFutureTask<Object> task = , +          ListenableFutureTask.create(command, null);, +      Delayed delayed = , +          delegate.scheduleWithFixedDelay(task, initialDelay, delay, unit);, +      return new ListenableScheduledTask<Object>(task, delayed);, +    }, +, +    private static final class ListenableScheduledTask<V> , +        extends SimpleForwardingListenableFuture<V> , +        implements ListenableScheduledFuture<V> {, +       , +      private final Delayed delayedDelegate;, +, +      public ListenableScheduledTask(, +          ListenableFuture<V> futureDelegate,  Delayed delayedDelegate) {, +        super(futureDelegate);, +        this.delayedDelegate = delayedDelegate;, +      }, +, +      @Override]