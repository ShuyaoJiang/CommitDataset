[+++ b/src/com/google/common/annotations/GwtIncompatible.java, + * <p>Note that this annotation should only be applied to methods, fields, or, + * inner classes of types which are annotated as {@link GwtCompatible}., +@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD }), +++ b/src/com/google/common/annotations/GwtIncompatible.java, + * <p>Note that this annotation should only be applied to methods, fields, or, + * inner classes of types which are annotated as {@link GwtCompatible}., +@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD }), +++ b/src/com/google/common/collect/ComputingConcurrentHashMap.java, +    if (expires) {, +      segment.lock();, +      try {, +      } finally {, +        segment.unlock();, +      }, +    } else {, +      segment.setValue(entry, value, true);, +    }, +++ b/src/com/google/common/annotations/GwtIncompatible.java, + * <p>Note that this annotation should only be applied to methods, fields, or, + * inner classes of types which are annotated as {@link GwtCompatible}., +@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD }), +++ b/src/com/google/common/collect/ComputingConcurrentHashMap.java, +    if (expires) {, +      segment.lock();, +      try {, +      } finally {, +        segment.unlock();, +      }, +    } else {, +      segment.setValue(entry, value, true);, +    }, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +    @GuardedBy("Segment.this"), +    @GuardedBy("Segment.this"), +      connectExpirable(originalExpirable.getPreviousExpirable(), newExpirable);, +      connectExpirable(newExpirable, originalExpirable.getNextExpirable());, +      nullifyExpirable(originalExpirable);, +  @GuardedBy("Segment.this"), +  @GuardedBy("Segment.this"), +  static void connectExpirable(Expirable previous, Expirable next) {, +    previous.setNextExpirable(next);, +    next.setPreviousExpirable(previous);, +  }, +, +  @GuardedBy("Segment.this"), +  static void nullifyExpirable(Expirable nulled) {, +    nulled.setNextExpirable(NullExpirable.INSTANCE);, +    nulled.setPreviousExpirable(NullExpirable.INSTANCE);, +  }, +, +    @GuardedBy("Segment.this") // if expires, +      connectExpirable(added.getPreviousExpirable(),, +          added.getNextExpirable());, +      connectExpirable(removed.getPreviousExpirable(),, +          removed.getNextExpirable());, +      nullifyExpirable(removed);, +    @GuardedBy("Segment.this"), +        nullifyExpirable(expirable);, +++ b/src/com/google/common/annotations/GwtIncompatible.java, + * <p>Note that this annotation should only be applied to methods, fields, or, + * inner classes of types which are annotated as {@link GwtCompatible}., +@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD }), +++ b/src/com/google/common/collect/ComputingConcurrentHashMap.java, +    if (expires) {, +      segment.lock();, +      try {, +      } finally {, +        segment.unlock();, +      }, +    } else {, +      segment.setValue(entry, value, true);, +    }, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +    @GuardedBy("Segment.this"), +    @GuardedBy("Segment.this"), +      connectExpirable(originalExpirable.getPreviousExpirable(), newExpirable);, +      connectExpirable(newExpirable, originalExpirable.getNextExpirable());, +      nullifyExpirable(originalExpirable);, +  @GuardedBy("Segment.this"), +  @GuardedBy("Segment.this"), +  static void connectExpirable(Expirable previous, Expirable next) {, +    previous.setNextExpirable(next);, +    next.setPreviousExpirable(previous);, +  }, +, +  @GuardedBy("Segment.this"), +  static void nullifyExpirable(Expirable nulled) {, +    nulled.setNextExpirable(NullExpirable.INSTANCE);, +    nulled.setPreviousExpirable(NullExpirable.INSTANCE);, +  }, +, +    @GuardedBy("Segment.this") // if expires, +      connectExpirable(added.getPreviousExpirable(),, +          added.getNextExpirable());, +      connectExpirable(removed.getPreviousExpirable(),, +          removed.getNextExpirable());, +      nullifyExpirable(removed);, +    @GuardedBy("Segment.this"), +        nullifyExpirable(expirable);]