[+++ b/guava/src/com/google/common/base/Stopwatch.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import com.google.common.annotations.Beta;, +, + * An object that measures elapsed time in nanoseconds. It is useful to measure, + * elapsed time using this class instead of direct calls to {@link, + * System#nanoTime} for a few reasons:, + * <ul>, + * <li>An alternate time source can be substituted, for testing or performance, + *     reasons., + * <li>As documented by {@code nanoTime}, the value returned has no absolute, + *     meaning, and can only be interpreted as relative to another timestamp, + *     returned by {@code nanoTime} at a different time. {@code Stopwatch} is a, + *     more effective abstraction because it exposes only these relative values,, + *     not the absolute ones., + * </ul>, + *   Stopwatch stopwatch = new Stopwatch().{@link #start start}();, + *   doSomething();, + *   stopwatch.{@link #stop stop}(); // optional, + *   long millis = stopwatch.{@link #elapsedMillis elapsedMillis}();, + *   log.info("that took: " + stopwatch); // formatted string like "12.3 ms", + * <p>Stopwatch methods are not idempotent; it is an error to start or stop a, + * stopwatch that is already in the desired state., + * <p>When testing code that uses this class, use the {@linkplain, + * #Stopwatch(Ticker) alternate constructor} to supply a fake or mock ticker., + * <!-- TODO(kevinb): restore the "such as" --> This allows you to, + * simulate any valid behavior of the stopwatch., + * <p><b>Note:</b> This class is not thread-safe., + *, + * @author Kevin Bourrillion, + * @since Guava release 10, +@Beta, +++ b/guava/src/com/google/common/base/Stopwatch.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +import com.google.common.annotations.Beta;, +, + * An object that measures elapsed time in nanoseconds. It is useful to measure, + * elapsed time using this class instead of direct calls to {@link, + * System#nanoTime} for a few reasons:, + * <ul>, + * <li>An alternate time source can be substituted, for testing or performance, + *     reasons., + * <li>As documented by {@code nanoTime}, the value returned has no absolute, + *     meaning, and can only be interpreted as relative to another timestamp, + *     returned by {@code nanoTime} at a different time. {@code Stopwatch} is a, + *     more effective abstraction because it exposes only these relative values,, + *     not the absolute ones., + * </ul>, + *   Stopwatch stopwatch = new Stopwatch().{@link #start start}();, + *   doSomething();, + *   stopwatch.{@link #stop stop}(); // optional, + *   long millis = stopwatch.{@link #elapsedMillis elapsedMillis}();, + *   log.info("that took: " + stopwatch); // formatted string like "12.3 ms", + * <p>Stopwatch methods are not idempotent; it is an error to start or stop a, + * stopwatch that is already in the desired state., + * <p>When testing code that uses this class, use the {@linkplain, + * #Stopwatch(Ticker) alternate constructor} to supply a fake or mock ticker., + * <!-- TODO(kevinb): restore the "such as" --> This allows you to, + * simulate any valid behavior of the stopwatch., + * <p><b>Note:</b> This class is not thread-safe., + *, + * @author Kevin Bourrillion, + * @since Guava release 10, +@Beta, +++ b/guava/src/com/google/common/base/Ticker.java, +   * Constructor for use by subclasses., +   */, +  protected Ticker() {}, +, +  /**, +++ b/guava/src/com/google/common/base/Stopwatch.java, +/*]