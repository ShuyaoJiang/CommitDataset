[+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +  public void testToString_delayedTimeout() throws Exception {, +    TimedWaiterThread thread =, +        new TimedWaiterThread(new AbstractFuture<Object>() {}, 2, TimeUnit.SECONDS);, +    thread.setPriority(Thread.MIN_PRIORITY);, +    thread.start();, +    thread.awaitWaiting();, +    thread.suspend();, +    Thread.sleep(3500);, +    thread.setPriority(Thread.MAX_PRIORITY);, +    thread.resume();, +    thread.join();, +, +    assertThat(thread.exception), +        .hasMessageThat(), +        .matches("Waited 2 seconds \\(plus 1 seconds, [5-6][0-9]+ nanoseconds delay\\).*");, +  }, +, +      while (!isBlocked()) {, +, +    private boolean isBlocked() {, +      switch (getState()) {, +        case TIMED_WAITING:, +        case WAITING:, +          return LockSupport.getBlocker(this) == future;, +        default:, +          return false;, +      }, +    }, +    private Exception exception;, +        exception = e;, +      while (!isBlocked()) {, +, +    private boolean isBlocked() {, +      switch (getState()) {, +        case TIMED_WAITING:, +        case WAITING:, +          return LockSupport.getBlocker(this) == future;, +        default:, +          return false;, +      }, +    }, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +  public void testToString_delayedTimeout() throws Exception {, +    TimedWaiterThread thread =, +        new TimedWaiterThread(new AbstractFuture<Object>() {}, 2, TimeUnit.SECONDS);, +    thread.setPriority(Thread.MIN_PRIORITY);, +    thread.start();, +    thread.awaitWaiting();, +    thread.suspend();, +    Thread.sleep(3500);, +    thread.setPriority(Thread.MAX_PRIORITY);, +    thread.resume();, +    thread.join();, +, +    assertThat(thread.exception), +        .hasMessageThat(), +        .matches("Waited 2 seconds \\(plus 1 seconds, [5-6][0-9]+ nanoseconds delay\\).*");, +  }, +, +      while (!isBlocked()) {, +, +    private boolean isBlocked() {, +      switch (getState()) {, +        case TIMED_WAITING:, +        case WAITING:, +          return LockSupport.getBlocker(this) == future;, +        default:, +          return false;, +      }, +    }, +    private Exception exception;, +        exception = e;, +      while (!isBlocked()) {, +, +    private boolean isBlocked() {, +      switch (getState()) {, +        case TIMED_WAITING:, +        case WAITING:, +          return LockSupport.getBlocker(this) == future;, +        default:, +          return false;, +      }, +    }, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    final long timeoutNanos = unit.toNanos(timeout); // we rely on the implicit null check on unit., +    long remainingNanos = timeoutNanos;, +    final String unitString = unit.toString().toLowerCase(Locale.ROOT);, +    String message = "Waited " + timeout + " " + unit.toString().toLowerCase(Locale.ROOT);, +    // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise, +    if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {, +      // We over-waited for our timeout., +      message += " (plus ";, +      long overWaitNanos = -remainingNanos;, +      long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);, +      long overWaitLeftoverNanos = overWaitNanos - unit.toNanos(overWaitUnits);, +      boolean shouldShowExtraNanos =, +          overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;, +      if (overWaitUnits > 0) {, +        message += overWaitUnits + " " + unitString;]