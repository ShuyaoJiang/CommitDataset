[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +        ListenableFuture<? extends O> outputFuture = function.apply(sourceResult);, +        checkNotNull(outputFuture, "AsyncFunction.apply returned null instead of a Future. ", +            + "Did you mean to return immediateFuture(null)?");, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +        ListenableFuture<? extends O> outputFuture = function.apply(sourceResult);, +        checkNotNull(outputFuture, "AsyncFunction.apply returned null instead of a Future. ", +            + "Did you mean to return immediateFuture(null)?");, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  public void testWithFallback_nullInsteadOfFuture() throws Exception {, +    ListenableFuture<?> inputFuture = immediateFailedFuture(new Exception());, +    ListenableFuture<?> chainedFuture =, +        Futures.withFallback(inputFuture, new FutureFallback<Integer>() {, +          @Override public ListenableFuture<Integer> create(Throwable t) {, +            return null;, +          }, +        });, +    try {, +      chainedFuture.get();, +      fail();, +    } catch (ExecutionException expected) {, +      NullPointerException cause = (NullPointerException) expected.getCause();, +      assertThat(cause).hasMessage("FutureFallback.create returned null instead of a Future. ", +          + "Did you mean to return immediateFuture(null)?");, +    }, +  }, +, +    ListenableFuture<?> nullFuture = immediateFuture(null);, +  public void testTransform_asyncFunction_nullInsteadOfFuture() throws Exception {, +    ListenableFuture<?> inputFuture = immediateFuture("a");, +    ListenableFuture<?> chainedFuture =, +        Futures.transform(inputFuture, constantAsyncFunction(null));, +    try {, +      chainedFuture.get();, +      fail();, +    } catch (ExecutionException expected) {, +      NullPointerException cause = (NullPointerException) expected.getCause();, +      assertThat(cause).hasMessage("AsyncFunction.apply returned null instead of a Future. ", +          + "Did you mean to return immediateFuture(null)?");, +    }, +  }, +, +    // This next call is "unused," but it is an important part of the test. Don't remove it!, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +        ListenableFuture<? extends O> outputFuture = function.apply(sourceResult);, +        checkNotNull(outputFuture, "AsyncFunction.apply returned null instead of a Future. ", +            + "Did you mean to return immediateFuture(null)?");, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  public void testWithFallback_nullInsteadOfFuture() throws Exception {, +    ListenableFuture<?> inputFuture = immediateFailedFuture(new Exception());, +    ListenableFuture<?> chainedFuture =, +        Futures.withFallback(inputFuture, new FutureFallback<Integer>() {, +          @Override public ListenableFuture<Integer> create(Throwable t) {, +            return null;, +          }, +        });, +    try {, +      chainedFuture.get();, +      fail();, +    } catch (ExecutionException expected) {, +      NullPointerException cause = (NullPointerException) expected.getCause();, +      assertThat(cause).hasMessage("FutureFallback.create returned null instead of a Future. ", +          + "Did you mean to return immediateFuture(null)?");, +    }, +  }, +, +    ListenableFuture<?> nullFuture = immediateFuture(null);, +  public void testTransform_asyncFunction_nullInsteadOfFuture() throws Exception {, +    ListenableFuture<?> inputFuture = immediateFuture("a");, +    ListenableFuture<?> chainedFuture =, +        Futures.transform(inputFuture, constantAsyncFunction(null));, +    try {, +      chainedFuture.get();, +      fail();, +    } catch (ExecutionException expected) {, +      NullPointerException cause = (NullPointerException) expected.getCause();, +      assertThat(cause).hasMessage("AsyncFunction.apply returned null instead of a Future. ", +          + "Did you mean to return immediateFuture(null)?");, +    }, +  }, +, +    // This next call is "unused," but it is an important part of the test. Don't remove it!, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +            ListenableFuture<? extends V> replacement = fallback.create(throwable);, +            checkNotNull(replacement, "FutureFallback.create returned null instead of a Future. ", +                + "Did you mean to return immediateFuture(null)?");, +            setFuture(replacement);, +        ListenableFuture<? extends O> outputFuture = function.apply(sourceResult);, +        checkNotNull(outputFuture, "AsyncFunction.apply returned null instead of a Future. ", +            + "Did you mean to return immediateFuture(null)?");]