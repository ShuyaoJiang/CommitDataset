[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +import com.google.common.collect.testing.NavigableSetTestSuiteBuilder;, +import com.google.common.collect.testing.SampleElements;, +import com.google.common.collect.testing.TestSetGenerator;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +import junit.framework.Test;, +import junit.framework.TestSuite;, +, +import java.math.BigInteger;, +import java.util.List;, +  static final class ImmutableRangeSetIntegerAsSetGenerator implements TestSetGenerator<Integer> {, +    @Override, +    public SampleElements<Integer> samples() {, +      return new SampleElements<Integer>(1, 4, 3, 2, 5);, +    }, +, +    @Override, +    public Integer[] createArray(int length) {, +      return new Integer[length];, +    }, +, +    @Override, +    public Iterable<Integer> order(List<Integer> insertionOrder) {, +      return Ordering.natural().sortedCopy(insertionOrder);, +    }, +, +    @Override, +    public Set<Integer> create(Object... elements) {, +      ImmutableRangeSet.Builder<Integer> builder = ImmutableRangeSet.builder();, +      for (Object o : elements) {, +        Integer i = (Integer) o;, +        builder.add(Range.singleton(i));, +      }, +      return builder.build().asSet(DiscreteDomains.integers());, +    }, +  }, +, +  static final class ImmutableRangeSetBigIntegerAsSetGenerator, +      implements TestSetGenerator<BigInteger> {, +    @Override, +    public SampleElements<BigInteger> samples() {, +      return new SampleElements<BigInteger>(, +          BigInteger.valueOf(1),, +          BigInteger.valueOf(4),, +          BigInteger.valueOf(3),, +          BigInteger.valueOf(2),, +          BigInteger.valueOf(5));, +    }, +, +    @Override, +    public BigInteger[] createArray(int length) {, +      return new BigInteger[length];, +    }, +, +    @Override, +    public Iterable<BigInteger> order(List<BigInteger> insertionOrder) {, +      return Ordering.natural().sortedCopy(insertionOrder);, +    }, +, +    @Override, +    public Set<BigInteger> create(Object... elements) {, +      ImmutableRangeSet.Builder<BigInteger> builder = ImmutableRangeSet.builder();, +      for (Object o : elements) {, +        BigInteger i = (BigInteger) o;, +        builder.add(Range.closedOpen(i, i.add(BigInteger.ONE)));, +      }, +      return builder.build().asSet(DiscreteDomains.bigIntegers());, +    }, +  }, +, +  public static Test suite() {, +    TestSuite suite = new TestSuite();, +    suite.addTestSuite(ImmutableRangeSetTest.class);, +    suite.addTest(NavigableSetTestSuiteBuilder.using(new ImmutableRangeSetIntegerAsSetGenerator()), +        .named("ImmutableRangeSet.asSet[DiscreteDomains.integers[]]"), +        .withFeatures(, +            CollectionSize.ANY,, +            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,, +            CollectionFeature.ALLOWS_NULL_QUERIES,, +            CollectionFeature.KNOWN_ORDER,, +            CollectionFeature.NON_STANDARD_TOSTRING,, +            CollectionFeature.SERIALIZABLE), +        .createTestSuite());, +, +    suite.addTest(NavigableSetTestSuiteBuilder.using(, +          new ImmutableRangeSetBigIntegerAsSetGenerator()), +        .named("ImmutableRangeSet.asSet[DiscreteDomains.bigIntegers[]]"), +        .withFeatures(, +            CollectionSize.ANY,, +            CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,, +            CollectionFeature.ALLOWS_NULL_QUERIES,, +            CollectionFeature.KNOWN_ORDER,, +            CollectionFeature.NON_STANDARD_TOSTRING,, +            CollectionFeature.SERIALIZABLE), +        .createTestSuite());, +    return suite;, +  }, +, +]