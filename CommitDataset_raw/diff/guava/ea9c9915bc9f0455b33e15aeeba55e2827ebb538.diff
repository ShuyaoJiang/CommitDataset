[+++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  public <From extends String&List<? extends String>>, +  void testMultipleTypeBoundsAssignability() {, +    assertTrue(new Assignability<From, String>() {}.isAssignable());, +    assertFalse(new Assignability<From, Number>() {}.isAssignable());, +    assertTrue(new Assignability<From, Iterable<? extends CharSequence>>() {}.isAssignable());, +    assertFalse(new Assignability<From, Iterable<Object>>() {}.isAssignable());, +  }, +, +  public <A, T extends Number&Iterable<A>>, +  void testGetSupertype_typeVariableWithMultipleBounds() {, +    assertEquals(Number.class,, +        new TypeToken<T>(getClass()) {}.getSupertype(Number.class).getType());, +    assertEquals(new TypeToken<Iterable<A>>() {},, +        new TypeToken<T>(getClass()) {}.getSupertype(Iterable.class));, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  public <From extends String&List<? extends String>>, +  void testMultipleTypeBoundsAssignability() {, +    assertTrue(new Assignability<From, String>() {}.isAssignable());, +    assertFalse(new Assignability<From, Number>() {}.isAssignable());, +    assertTrue(new Assignability<From, Iterable<? extends CharSequence>>() {}.isAssignable());, +    assertFalse(new Assignability<From, Iterable<Object>>() {}.isAssignable());, +  }, +, +  public <A, T extends Number&Iterable<A>>, +  void testGetSupertype_typeVariableWithMultipleBounds() {, +    assertEquals(Number.class,, +        new TypeToken<T>(getClass()) {}.getSupertype(Number.class).getType());, +    assertEquals(new TypeToken<Iterable<A>>() {},, +        new TypeToken<T>(getClass()) {}.getSupertype(Iterable.class));, +  }, +, +++ b/guava/src/com/google/common/reflect/TypeToken.java, +    // At this point, it's either a raw class or parameterized type., +    checkArgument(getRawType().isAssignableFrom(subclass),, +        "%s isn't a subclass of %s", subclass, this);, +    checkArgument(this.extendsFromClass(method.getDeclaringClass()),, +    for (Class<?> rawType : getRawTypes()) {, +      if (superclass.isAssignableFrom(rawType)) {, +        return true;, +      }, +    }, +    return false;]