[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  static final class KeyPredicate<K, V> implements Predicate<Entry<K, V>> {, +  static final class ValuePredicate<K, V> implements Predicate<Entry<K, V>> {, +      private boolean removeIf(Predicate<? super V> valuePredicate) {, +            predicate, new ValuePredicate<K, V>(valuePredicate)));, +      }, +, +      @Override public boolean removeAll(Collection<?> collection) {, +        return removeIf(Predicates.in(collection));, +        return removeIf(Predicates.not(Predicates.in(collection)));, +      private boolean removeIf(Predicate<? super K> keyPredicate) {, +        return Iterables.removeIf(unfiltered.entrySet(), Predicates.<Entry<K, V>>and(, +            predicate, new KeyPredicate<K, V>(keyPredicate)));, +      }, +, +        return removeIf(Predicates.in(c));, +        return removeIf(Predicates.not(Predicates.in(c)));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  static final class KeyPredicate<K, V> implements Predicate<Entry<K, V>> {, +  static final class ValuePredicate<K, V> implements Predicate<Entry<K, V>> {, +      private boolean removeIf(Predicate<? super V> valuePredicate) {, +            predicate, new ValuePredicate<K, V>(valuePredicate)));, +      }, +, +      @Override public boolean removeAll(Collection<?> collection) {, +        return removeIf(Predicates.in(collection));, +        return removeIf(Predicates.not(Predicates.in(collection)));, +      private boolean removeIf(Predicate<? super K> keyPredicate) {, +        return Iterables.removeIf(unfiltered.entrySet(), Predicates.<Entry<K, V>>and(, +            predicate, new KeyPredicate<K, V>(keyPredicate)));, +      }, +, +        return removeIf(Predicates.in(c));, +        return removeIf(Predicates.not(Predicates.in(c)));, +++ b/guava/src/com/google/common/collect/FilteredKeyMultimap.java, +    return new Maps.KeyPredicate<K, V>(keyPredicate);, +    throw new AssertionError("should never be called");, +  class Entries extends ForwardingCollection<Entry<K, V>> {, +    protected Collection<Entry<K, V>> delegate() {, +      return Collections2.filter(unfiltered.entries(), entryPredicate());, +        if (unfiltered.containsKey(entry.getKey()), +            // if this holds, then we know entry.getKey() is a K, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  static final class KeyPredicate<K, V> implements Predicate<Entry<K, V>> {, +  static final class ValuePredicate<K, V> implements Predicate<Entry<K, V>> {, +      private boolean removeIf(Predicate<? super V> valuePredicate) {, +            predicate, new ValuePredicate<K, V>(valuePredicate)));, +      }, +, +      @Override public boolean removeAll(Collection<?> collection) {, +        return removeIf(Predicates.in(collection));, +        return removeIf(Predicates.not(Predicates.in(collection)));, +      private boolean removeIf(Predicate<? super K> keyPredicate) {, +        return Iterables.removeIf(unfiltered.entrySet(), Predicates.<Entry<K, V>>and(, +            predicate, new KeyPredicate<K, V>(keyPredicate)));, +      }, +, +        return removeIf(Predicates.in(c));, +        return removeIf(Predicates.not(Predicates.in(c)));, +++ b/guava/src/com/google/common/collect/FilteredKeyMultimap.java, +    return new Maps.KeyPredicate<K, V>(keyPredicate);, +    throw new AssertionError("should never be called");, +  class Entries extends ForwardingCollection<Entry<K, V>> {, +    protected Collection<Entry<K, V>> delegate() {, +      return Collections2.filter(unfiltered.entries(), entryPredicate());, +        if (unfiltered.containsKey(entry.getKey()), +            // if this holds, then we know entry.getKey() is a K, +++ b/guava/src/com/google/common/collect/Maps.java, +  static final class KeyPredicate<K, V> implements Predicate<Entry<K, V>> {, +  static final class ValuePredicate<K, V> implements Predicate<Entry<K, V>> {, +      private boolean removeIf(Predicate<? super V> valuePredicate) {, +            predicate, new ValuePredicate<K, V>(valuePredicate)));, +      }, +, +      @Override public boolean removeAll(Collection<?> collection) {, +        return removeIf(Predicates.in(collection));, +        return removeIf(Predicates.not(Predicates.in(collection)));, +      private boolean removeIf(Predicate<? super K> keyPredicate) {, +        return Iterables.removeIf(unfiltered.entrySet(), Predicates.<Entry<K, V>>and(, +            predicate, new KeyPredicate<K, V>(keyPredicate)));, +      }, +, +        return removeIf(Predicates.in(c));, +        return removeIf(Predicates.not(Predicates.in(c)));]