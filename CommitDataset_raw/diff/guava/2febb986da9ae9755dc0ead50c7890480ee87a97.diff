[+++ b/guava-tests/test/com/google/common/graph/GraphPropertiesTest.java, +import static com.google.common.graph.Graphs.hasCycle;, + * Tests for {@link Graphs#hasCycle(Graph)} and {@link Graphs#hasCycle(Network)}., +// TODO(user): Consider moving this to GraphsTest., +  public void hasCycle_emptyGraph() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_isolatedNodes() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_oneEdge() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_selfLoopEdge() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isTrue();, +  public void hasCycle_twoAcyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_twoCyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_threeAcyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isTrue(); // cyclic in undirected case, +  public void hasCycle_threeCyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isTrue();, +  public void hasCycle_disconnectedCyclicGraph() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_multipleCycles() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isTrue();, +  public void hasCycle_twoParallelEdges() {, +    assertThat(hasCycle(directedNetwork)).isFalse();, +    assertThat(hasCycle(undirectedNetwork)).isTrue(); // cyclic in undirected case, +  public void hasCycle_cyclicMultigraph() {, +    assertThat(hasCycle(directedNetwork)).isTrue();, +    assertThat(hasCycle(undirectedNetwork)).isTrue();, +++ b/guava-tests/test/com/google/common/graph/GraphPropertiesTest.java, +import static com.google.common.graph.Graphs.hasCycle;, + * Tests for {@link Graphs#hasCycle(Graph)} and {@link Graphs#hasCycle(Network)}., +// TODO(user): Consider moving this to GraphsTest., +  public void hasCycle_emptyGraph() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_isolatedNodes() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_oneEdge() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_selfLoopEdge() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isTrue();, +  public void hasCycle_twoAcyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_twoCyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_threeAcyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isTrue(); // cyclic in undirected case, +  public void hasCycle_threeCyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isTrue();, +  public void hasCycle_disconnectedCyclicGraph() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_multipleCycles() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isTrue();, +  public void hasCycle_twoParallelEdges() {, +    assertThat(hasCycle(directedNetwork)).isFalse();, +    assertThat(hasCycle(undirectedNetwork)).isTrue(); // cyclic in undirected case, +  public void hasCycle_cyclicMultigraph() {, +    assertThat(hasCycle(directedNetwork)).isTrue();, +    assertThat(hasCycle(undirectedNetwork)).isTrue();, +++ /dev/null, +++ b/guava-tests/test/com/google/common/graph/GraphPropertiesTest.java, +import static com.google.common.graph.Graphs.hasCycle;, + * Tests for {@link Graphs#hasCycle(Graph)} and {@link Graphs#hasCycle(Network)}., +// TODO(user): Consider moving this to GraphsTest., +  public void hasCycle_emptyGraph() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_isolatedNodes() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_oneEdge() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();, +  public void hasCycle_selfLoopEdge() {, +    assertThat(hasCycle(directedGraph)).isTrue();, +    assertThat(hasCycle(undirectedGraph)).isTrue();, +  public void hasCycle_twoAcyclicEdges() {, +    assertThat(hasCycle(directedGraph)).isFalse();, +    assertThat(hasCycle(undirectedGraph)).isFalse();]