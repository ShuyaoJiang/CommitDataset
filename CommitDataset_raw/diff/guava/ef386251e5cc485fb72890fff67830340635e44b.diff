[+++ b/guava-tests/test/com/google/common/collect/InternersTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +import com.google.common.collect.Interners.StrongInterner;, +import com.google.common.collect.Interners.WeakInterner;, +  public void testStrong_builder() {, +    int concurrencyLevel = 42;, +    Interner<Object> interner = Interners.newBuilder(), +        .strong(), +        .concurrencyLevel(concurrencyLevel), +        .build();, +    assertThat(interner).isInstanceOf(StrongInterner.class);, +  }, +, +  public void testWeak_builder() {, +    int concurrencyLevel = 42;, +    Interner<Object> interner = Interners.newBuilder(), +        .weak(), +        .concurrencyLevel(concurrencyLevel), +        .build();, +    assertThat(interner).isInstanceOf(WeakInterner.class);, +    WeakInterner<Object> weakInterner = (WeakInterner<Object>) interner;, +    assertEquals(concurrencyLevel, weakInterner.map.concurrencyLevel);, +  }, +, +, +  public void testConcurrencyLevel_Zero() {, +    Interners.InternerBuilder builder = Interners.newBuilder();, +    try {, +      builder.concurrencyLevel(0);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testConcurrencyLevel_Negative() {, +    Interners.InternerBuilder builder = Interners.newBuilder();, +    try {, +      builder.concurrencyLevel(-42);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/guava-tests/test/com/google/common/collect/InternersTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +import com.google.common.collect.Interners.StrongInterner;, +import com.google.common.collect.Interners.WeakInterner;, +  public void testStrong_builder() {, +    int concurrencyLevel = 42;, +    Interner<Object> interner = Interners.newBuilder(), +        .strong(), +        .concurrencyLevel(concurrencyLevel), +        .build();, +    assertThat(interner).isInstanceOf(StrongInterner.class);, +  }, +, +  public void testWeak_builder() {, +    int concurrencyLevel = 42;, +    Interner<Object> interner = Interners.newBuilder(), +        .weak(), +        .concurrencyLevel(concurrencyLevel), +        .build();, +    assertThat(interner).isInstanceOf(WeakInterner.class);, +    WeakInterner<Object> weakInterner = (WeakInterner<Object>) interner;, +    assertEquals(concurrencyLevel, weakInterner.map.concurrencyLevel);, +  }, +, +, +  public void testConcurrencyLevel_Zero() {, +    Interners.InternerBuilder builder = Interners.newBuilder();, +    try {, +      builder.concurrencyLevel(0);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testConcurrencyLevel_Negative() {, +    Interners.InternerBuilder builder = Interners.newBuilder();, +    try {, +      builder.concurrencyLevel(-42);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/guava/src/com/google/common/collect/Interners.java, +import com.google.common.annotations.VisibleForTesting;, +  /** Builder for {@link Interner} instances. */, +  public static class InternerBuilder {, +    private final MapMaker mapMaker = new MapMaker();, +    private boolean strong = true;, +, +    private InternerBuilder() {, +    }, +, +    /**, +     * Instructs the {@link InternerBuilder} to build a strong interner., +     *, +     * @see Interners#newStrongInterner()]