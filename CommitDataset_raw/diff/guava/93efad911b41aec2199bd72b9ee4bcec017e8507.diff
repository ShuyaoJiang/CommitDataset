[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  private static final String ERROR_NEGATIVE_COUNT = "is non-negative";, +      fail("Should have rejected getting induced subgraph with node not in original graph.");, +      fail("Should have rejected a null graph.");, +      fail("Should have rejected negative expected node count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +      fail("Should have rejected negative expected edge count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  private static final String ERROR_NEGATIVE_COUNT = "is non-negative";, +      fail("Should have rejected getting induced subgraph with node not in original graph.");, +      fail("Should have rejected a null graph.");, +      fail("Should have rejected negative expected node count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +      fail("Should have rejected negative expected edge count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +++ b/guava/src/com/google/common/graph/ElementOrder.java, +import static com.google.common.base.Preconditions.checkState;, + * MutableGraph<Integer> graph =, + *     GraphBuilder.directed().nodeOrder(ElementOrder.<Integer>natural()).build();, +    checkState((type == Type.SORTED) == (comparator != null));, +   * @throws UnsupportedOperationException if comparator is not defined, +    throw new UnsupportedOperationException("This ordering does not define a comparator.");, +        throw new IllegalStateException(type.toString());, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  private static final String ERROR_NEGATIVE_COUNT = "is non-negative";, +      fail("Should have rejected getting induced subgraph with node not in original graph.");, +      fail("Should have rejected a null graph.");, +      fail("Should have rejected negative expected node count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +      fail("Should have rejected negative expected edge count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +++ b/guava/src/com/google/common/graph/ElementOrder.java, +import static com.google.common.base.Preconditions.checkState;, + * MutableGraph<Integer> graph =, + *     GraphBuilder.directed().nodeOrder(ElementOrder.<Integer>natural()).build();, +    checkState((type == Type.SORTED) == (comparator != null));, +   * @throws UnsupportedOperationException if comparator is not defined, +    throw new UnsupportedOperationException("This ordering does not define a comparator.");, +        throw new IllegalStateException(type.toString());, +++ b/guava/src/com/google/common/graph/GraphBuilder.java, +import static com.google.common.graph.Graphs.checkNonNegative;, +    this.expectedNodeCount = Optional.of(checkNonNegative(expectedNodeCount));, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  private static final String ERROR_NEGATIVE_COUNT = "is non-negative";, +      fail("Should have rejected getting induced subgraph with node not in original graph.");, +      fail("Should have rejected a null graph.");, +      fail("Should have rejected negative expected node count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +      fail("Should have rejected negative expected edge count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +++ b/guava/src/com/google/common/graph/ElementOrder.java, +import static com.google.common.base.Preconditions.checkState;, + * MutableGraph<Integer> graph =, + *     GraphBuilder.directed().nodeOrder(ElementOrder.<Integer>natural()).build();, +    checkState((type == Type.SORTED) == (comparator != null));, +   * @throws UnsupportedOperationException if comparator is not defined, +    throw new UnsupportedOperationException("This ordering does not define a comparator.");, +        throw new IllegalStateException(type.toString());, +++ b/guava/src/com/google/common/graph/GraphBuilder.java, +import static com.google.common.graph.Graphs.checkNonNegative;, +    this.expectedNodeCount = Optional.of(checkNonNegative(expectedNodeCount));, +++ b/guava/src/com/google/common/graph/Graphs.java, +    checkArgument(value >= 0, "Not true that %s is non-negative.", value);, +    checkArgument(value > 0, "Not true that %s is positive.", value);, +    checkArgument(value >= 0, "Not true that %s is non-negative.", value);, +    checkArgument(value > 0, "Not true that %s is positive.", value);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  private static final String ERROR_NEGATIVE_COUNT = "is non-negative";, +      fail("Should have rejected getting induced subgraph with node not in original graph.");, +      fail("Should have rejected a null graph.");, +      fail("Should have rejected negative expected node count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +      fail("Should have rejected negative expected edge count.");, +      assertThat(e.getMessage()).contains(ERROR_NEGATIVE_COUNT);, +++ b/guava/src/com/google/common/graph/ElementOrder.java, +import static com.google.common.base.Preconditions.checkState;, + * MutableGraph<Integer> graph =, + *     GraphBuilder.directed().nodeOrder(ElementOrder.<Integer>natural()).build();, +    checkState((type == Type.SORTED) == (comparator != null));, +   * @throws UnsupportedOperationException if comparator is not defined, +    throw new UnsupportedOperationException("This ordering does not define a comparator.");, +        throw new IllegalStateException(type.toString());, +++ b/guava/src/com/google/common/graph/GraphBuilder.java, +import static com.google.common.graph.Graphs.checkNonNegative;, +    this.expectedNodeCount = Optional.of(checkNonNegative(expectedNodeCount));, +++ b/guava/src/com/google/common/graph/Graphs.java, +    checkArgument(value >= 0, "Not true that %s is non-negative.", value);, +    checkArgument(value > 0, "Not true that %s is positive.", value);, +    checkArgument(value >= 0, "Not true that %s is non-negative.", value);, +    checkArgument(value > 0, "Not true that %s is positive.", value);, +++ b/guava/src/com/google/common/graph/NetworkBuilder.java, +import static com.google.common.graph.Graphs.checkNonNegative;, +    this.expectedNodeCount = Optional.of(checkNonNegative(expectedNodeCount));, +    this.expectedEdgeCount = Optional.of(checkNonNegative(expectedEdgeCount));, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +  private static final String ERROR_NEGATIVE_COUNT = "is non-negative";, +      fail("Should have rejected getting induced subgraph with node not in original graph.");, +      fail("Should have rejected a null graph.");, +      fail("Should have rejected negative expected node count.");]