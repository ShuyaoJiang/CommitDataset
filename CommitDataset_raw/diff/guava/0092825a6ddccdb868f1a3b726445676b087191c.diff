[+++ b/guava/src/com/google/common/util/concurrent/CheckedFuture.java, + * A {@code CheckedFuture} is a {@link ListenableFuture} that includes versions, + * of the {@code get} methods that can throw a checked exception.  This makes it, + * easier to create a future that executes logic which can throw an exception., +++ b/guava/src/com/google/common/util/concurrent/CheckedFuture.java, + * A {@code CheckedFuture} is a {@link ListenableFuture} that includes versions, + * of the {@code get} methods that can throw a checked exception.  This makes it, + * easier to create a future that executes logic which can throw an exception., +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * <p>Note: This overload of {@code chain} should be used only when creating, +   * the derived future is fast and lightweight, as it does not accept an {@code, +   * Executor} to perform the the work in. Consequently, the chaining function, +   * may run in the thread that calls {@code chain} or in an internal thread of, +   * the system responsible for the input {@code Future}, such an an RPC network, +   * thread., +   * <p>The returned {@code Future} attempts to keep its cancellation state in, +   * sync with that of the input future and that of the future returned by the, +   * chain function. That is, if the returned {@code Future} is cancelled, it, +   * will attempt to cancel the other two, and if either of the other two is, +   * cancelled, the returned {@code Future} will receive a callback in which it, +   * will attempt to cancel itself., +   * <p>The returned {@code Future} attempts to keep its cancellation state in, +   * sync with that of the input future and that of the future returned by the, +   * chain function. That is, if the returned {@code Future} is cancelled, it, +   * will attempt to cancel the other two, and if either of the other two is, +   * cancelled, the returned {@code Future} will receive a callback in which it, +   * will attempt to cancel itself., +   * <p>Note: This overload of {@code transform} should be used only for fast,, +   * lightweight transformations, as it does not accept an {@code Executor} to, +   * perform the the work in. Consequently, the transformation may run in the, +   * thread that calls {@code transform} or in an internal thread of the system, +   * responsible for the input {@code Future}, such an an RPC network thread., +   *, +   * <p>The returned {@code Future} attempts to keep its cancellation state in, +   * sync with that of the input future. That is, if the returned {@code Future}, +   * is cancelled, it will attempt to cancel the input, and if the input is, +   * cancelled, the returned {@code Future} will receive a callback in which it, +   * will attempt to cancel itself., +   * <p>The returned {@code Future} attempts to keep its cancellation state in, +   * sync with that of the input future. That is, if the returned {@code Future}, +   * is cancelled, it will attempt to cancel the input, and if the input is, +   * cancelled, the returned {@code Future} will receive a callback in which it, +   * will attempt to cancel itself.]