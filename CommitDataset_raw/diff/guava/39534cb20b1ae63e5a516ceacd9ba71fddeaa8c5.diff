[+++ b/guava/src/com/google/common/base/MoreObjects.java, +/*, + * Copyright (C) 2014 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import com.google.common.annotations.GwtCompatible;, +, +import javax.annotation.Nullable;, +, +/**, + * Helper functions that operate on any {@code Object}, and are not already provided in, + * {@link java.util.Objects}., + *, + * <p>See the Guava User Guide on <a, + * href="http://code.google.com/p/guava-libraries/wiki/CommonObjectUtilitiesExplained">writing, + * {@code Object} methods with {@code MoreObjects}</a>., + *, + * @author Laurence Gonsalves, + * @since 18.0 (since 2.0 as {@code Objects}), + */, +@GwtCompatible, +public final class MoreObjects {, +  /**, +   * Returns the first of two given parameters that is not {@code null}, if either is, or otherwise, +   * throws a {@link NullPointerException}., +   *, +   * <p><b>Note:</b> if {@code first} is represented as an {@link Optional}, this can be, +   * accomplished with {@link Optional#or(Object) first.or(second)}. That approach also allows for, +   * lazy evaluation of the fallback instance, using {@link Optional#or(Supplier), +   * first.or(supplier)}., +   *, +   * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null, +   * @throws NullPointerException if both {@code first} and {@code second} are null, +   * @since 18.0 (since 3.0 as {@code Objects.firstNonNull()}., +   */, +  public static <T> T firstNonNull(@Nullable T first, @Nullable T second) {, +    return Objects.firstNonNull(first, second);, +  }, +, +  /**, +   * Creates an instance of {@link ToStringHelper}., +   *, +   * <p>This is helpful for implementing {@link Object#toString()}., +   * Specification by example: <pre>   {@code, +   *   // Returns "ClassName{}", +   *   MoreObjects.toStringHelper(this), +   *       .toString();, +   *, +   *   // Returns "ClassName{x=1}", +   *   MoreObjects.toStringHelper(this), +   *       .add("x", 1), +   *       .toString();, +   *, +   *   // Returns "MyObject{x=1}", +   *   MoreObjects.toStringHelper("MyObject"), +   *       .add("x", 1), +   *       .toString();, +   *, +   *   // Returns "ClassName{x=1, y=foo}", +   *   MoreObjects.toStringHelper(this), +   *       .add("x", 1), +   *       .add("y", "foo"), +   *       .toString();, +   *, +   *   // Returns "ClassName{x=1}", +   *   MoreObjects.toStringHelper(this), +   *       .omitNullValues(), +   *       .add("x", 1), +   *       .add("y", null), +   *       .toString();, +   *   }}</pre>, +   *, +   * <p>Note that in GWT, class names are often obfuscated., +   *, +   * @param self the object to generate the string for (typically {@code this}), used only for its, +   *     class name, +   * @since 18.0 (since 2.0 as {@code Objects.toStringHelper()}., +   */, +  public static ToStringHelper toStringHelper(Object self) {, +    return new ToStringHelper(simpleName(self.getClass()));, +  }, +, +  /**, +   * Creates an instance of {@link ToStringHelper} in the same manner as {@link]