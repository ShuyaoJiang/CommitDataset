[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Returns an {@code ImmutableList} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}.  To produce an, +   * {@code ImmutableList} sorted by its natural ordering, use, +   * {@code toImmutableSortedList(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort list elements, +   * @throws NullPointerException if any element is null, +   * @since 13.0, +   */, +  public final ImmutableList<E> toSortedImmutableList(Comparator<? super E> comparator) {, +    return Ordering.from(comparator).immutableSortedCopy(iterable);, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Returns an {@code ImmutableList} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}.  To produce an, +   * {@code ImmutableList} sorted by its natural ordering, use, +   * {@code toImmutableSortedList(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort list elements, +   * @throws NullPointerException if any element is null, +   * @since 13.0, +   */, +  public final ImmutableList<E> toSortedImmutableList(Comparator<? super E> comparator) {, +    return Ordering.from(comparator).immutableSortedCopy(iterable);, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  public void testToSortedImmutableList_withComparator() {, +    assertEquals(Lists.newArrayList(4, 3, 2, 1),, +        fluent(4, 1, 3, 2).toSortedImmutableList(Ordering.<Integer>natural().reverse()));, +  }, +, +  public void testToSortedImmutableList_withDuplicates() {, +    assertEquals(Lists.newArrayList(4, 3, 1, 1),, +        fluent(1, 4, 1, 3).toSortedImmutableList(Ordering.<Integer>natural().reverse()));, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Returns an {@code ImmutableList} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}.  To produce an, +   * {@code ImmutableList} sorted by its natural ordering, use, +   * {@code toImmutableSortedList(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort list elements, +   * @throws NullPointerException if any element is null, +   * @since 13.0, +   */, +  public final ImmutableList<E> toSortedImmutableList(Comparator<? super E> comparator) {, +    return Ordering.from(comparator).immutableSortedCopy(iterable);, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  public void testToSortedImmutableList_withComparator() {, +    assertEquals(Lists.newArrayList(4, 3, 2, 1),, +        fluent(4, 1, 3, 2).toSortedImmutableList(Ordering.<Integer>natural().reverse()));, +  }, +, +  public void testToSortedImmutableList_withDuplicates() {, +    assertEquals(Lists.newArrayList(4, 3, 1, 1),, +        fluent(1, 4, 1, 3).toSortedImmutableList(Ordering.<Integer>natural().reverse()));, +  }, +, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +   * Returns an {@code ImmutableList} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}.  To produce an, +   * {@code ImmutableList} sorted by its natural ordering, use, +   * {@code toImmutableSortedList(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort list elements, +   * @throws NullPointerException if any element is null, +   * @since 13.0, +   */, +  public final ImmutableList<E> toSortedImmutableList(Comparator<? super E> comparator) {, +    return Ordering.from(comparator).immutableSortedCopy(iterable);, +  }, +, +  /**]