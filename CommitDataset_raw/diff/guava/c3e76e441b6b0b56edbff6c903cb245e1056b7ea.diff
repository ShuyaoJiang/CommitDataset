[+++ b/guava/src/com/google/common/collect/BstMutationResult.java, +  public static <K, N extends BstNode<K, N>> BstMutationResult<K, N> mutationResult(, +      @Nullable K targetKey, @Nullable N originalRoot, @Nullable N changedRoot,, +  private BstMutationResult(@Nullable K targetKey, @Nullable N originalRoot,, +                            @Nullable N changedRoot,, +    this.targetKey = targetKey;, +++ b/guava/src/com/google/common/collect/BstMutationResult.java, +  public static <K, N extends BstNode<K, N>> BstMutationResult<K, N> mutationResult(, +      @Nullable K targetKey, @Nullable N originalRoot, @Nullable N changedRoot,, +  private BstMutationResult(@Nullable K targetKey, @Nullable N originalRoot,, +                            @Nullable N changedRoot,, +    this.targetKey = targetKey;, +++ b/guava/src/com/google/common/collect/BstNode.java, + * A reusable abstraction for a node in a binary search tree. Null keys are allowed., +  BstNode(@Nullable K key, @Nullable N left, @Nullable N right) {, +    this.key = key;, +  @Nullable, +++ b/guava/src/com/google/common/collect/BstMutationResult.java, +  public static <K, N extends BstNode<K, N>> BstMutationResult<K, N> mutationResult(, +      @Nullable K targetKey, @Nullable N originalRoot, @Nullable N changedRoot,, +  private BstMutationResult(@Nullable K targetKey, @Nullable N originalRoot,, +                            @Nullable N changedRoot,, +    this.targetKey = targetKey;, +++ b/guava/src/com/google/common/collect/BstNode.java, + * A reusable abstraction for a node in a binary search tree. Null keys are allowed., +  BstNode(@Nullable K key, @Nullable N left, @Nullable N right) {, +    this.key = key;, +  @Nullable, +++ b/guava/src/com/google/common/collect/BstOperations.java, +      Comparator<? super K> comparator, @Nullable N tree, @Nullable K key) {, +      @Nullable K key) {]