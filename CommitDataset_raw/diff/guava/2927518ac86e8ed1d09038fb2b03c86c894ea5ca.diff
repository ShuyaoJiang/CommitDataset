[+++ b/android/guava/src/com/google/common/base/internal/Finalizer.java, +import java.lang.reflect.Constructor;, +    String threadName = Finalizer.class.getName();, +    Thread thread = null;, +    if (bigThreadConstructor != null) {, +      try {, +        boolean inheritThreadLocals = false;, +        long defaultStackSize = 0;, +        thread = bigThreadConstructor.newInstance(, +            (ThreadGroup) null, finalizer, threadName, defaultStackSize, inheritThreadLocals);, +      } catch (Throwable t) {, +        logger.log(, +            Level.INFO,, +            "Failed to create a thread without inherited thread-local values",, +            t);, +      }, +    }, +    if (thread == null) {, +      thread = new Thread((ThreadGroup) null, finalizer, threadName);, +    }, +  // By preference, we will use the Thread constructor that has an `inheritThreadLocals` parameter., +  // But before Java 9, our only way not to inherit ThreadLocals is to zap them after the thread, +  // is created, by accessing a private field., +  private static final Constructor<Thread> bigThreadConstructor = getBigThreadConstructor();, +  private static final Field inheritableThreadLocals =, +      (bigThreadConstructor == null) ? getInheritableThreadLocalsField() : null;, +  private static Field getInheritableThreadLocalsField() {, +, +  @Nullable, +  private static Constructor<Thread> getBigThreadConstructor() {, +    try {, +      return Thread.class.getConstructor(, +          ThreadGroup.class, Runnable.class, String.class, long.class, boolean.class);, +    } catch (Throwable t) {, +      // Probably pre Java 9. We'll fall back to Thread.inheritableThreadLocals., +      return null;, +    }, +  }, +++ b/android/guava/src/com/google/common/base/internal/Finalizer.java, +import java.lang.reflect.Constructor;, +    String threadName = Finalizer.class.getName();, +    Thread thread = null;, +    if (bigThreadConstructor != null) {, +      try {, +        boolean inheritThreadLocals = false;, +        long defaultStackSize = 0;, +        thread = bigThreadConstructor.newInstance(, +            (ThreadGroup) null, finalizer, threadName, defaultStackSize, inheritThreadLocals);, +      } catch (Throwable t) {, +        logger.log(, +            Level.INFO,, +            "Failed to create a thread without inherited thread-local values",, +            t);, +      }, +    }, +    if (thread == null) {, +      thread = new Thread((ThreadGroup) null, finalizer, threadName);, +    }, +  // By preference, we will use the Thread constructor that has an `inheritThreadLocals` parameter., +  // But before Java 9, our only way not to inherit ThreadLocals is to zap them after the thread, +  // is created, by accessing a private field., +  private static final Constructor<Thread> bigThreadConstructor = getBigThreadConstructor();, +  private static final Field inheritableThreadLocals =, +      (bigThreadConstructor == null) ? getInheritableThreadLocalsField() : null;, +  private static Field getInheritableThreadLocalsField() {, +, +  @Nullable, +  private static Constructor<Thread> getBigThreadConstructor() {, +    try {, +      return Thread.class.getConstructor(, +          ThreadGroup.class, Runnable.class, String.class, long.class, boolean.class);, +    } catch (Throwable t) {, +      // Probably pre Java 9. We'll fall back to Thread.inheritableThreadLocals., +      return null;, +    }, +  }, +++ b/guava/src/com/google/common/base/internal/Finalizer.java, +import java.lang.reflect.Constructor;, +    String threadName = Finalizer.class.getName();, +    Thread thread = null;, +    if (bigThreadConstructor != null) {, +      try {, +        boolean inheritThreadLocals = false;, +        long defaultStackSize = 0;, +        thread = bigThreadConstructor.newInstance(, +            (ThreadGroup) null, finalizer, threadName, defaultStackSize, inheritThreadLocals);, +      } catch (Throwable t) {, +        logger.log(, +            Level.INFO,, +            "Failed to create a thread without inherited thread-local values",, +            t);, +      }, +    }, +    if (thread == null) {, +      thread = new Thread((ThreadGroup) null, finalizer, threadName);, +    }, +  // By preference, we will use the Thread constructor that has an `inheritThreadLocals` parameter., +  // But before Java 9, our only way not to inherit ThreadLocals is to zap them after the thread, +  // is created, by accessing a private field., +  private static final Constructor<Thread> bigThreadConstructor = getBigThreadConstructor();]