[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +    Multiset.Entry<K> getEntry(int index) {, +      Map.Entry<K, ? extends Collection<V>> entry = map.entrySet().asList().get(index);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +    Multiset.Entry<K> getEntry(int index) {, +      Map.Entry<K, ? extends Collection<V>> entry = map.entrySet().asList().get(index);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +  private final ImmutableSet<Entry<E>> createEntrySet() {, +    return isEmpty() ? ImmutableSet.<Entry<E>>of() : new EntrySet();, +  }, +  abstract Entry<E> getEntry(int index);, +, +  private final class EntrySet extends ImmutableSet<Entry<E>> {, +    public UnmodifiableIterator<Entry<E>> iterator() {, +      return asList().iterator();, +    }, +, +    @Override, +    ImmutableList<Entry<E>> createAsList() {, +      return new ImmutableAsList<Entry<E>>() {, +        @Override, +        public Entry<E> get(int index) {, +          return getEntry(index);, +        }, +, +        @Override, +        ImmutableCollection<Entry<E>> delegateCollection() {, +          return EntrySet.this;, +        }, +      };, +    }, +, +    @Override, +    public int size() {, +      return elementSet().size();, +    }, +, +    @Override, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +    Multiset.Entry<K> getEntry(int index) {, +      Map.Entry<K, ? extends Collection<V>> entry = map.entrySet().asList().get(index);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +  private final ImmutableSet<Entry<E>> createEntrySet() {, +    return isEmpty() ? ImmutableSet.<Entry<E>>of() : new EntrySet();, +  }, +  abstract Entry<E> getEntry(int index);, +, +  private final class EntrySet extends ImmutableSet<Entry<E>> {, +    public UnmodifiableIterator<Entry<E>> iterator() {, +      return asList().iterator();, +    }, +, +    @Override, +    ImmutableList<Entry<E>> createAsList() {, +      return new ImmutableAsList<Entry<E>>() {, +        @Override, +        public Entry<E> get(int index) {, +          return getEntry(index);, +        }, +, +        @Override, +        ImmutableCollection<Entry<E>> delegateCollection() {, +          return EntrySet.this;, +        }, +      };, +    }, +, +    @Override, +    public int size() {, +      return elementSet().size();, +    }, +, +    @Override, +++ b/guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java, +  Entry<E> getEntry(int index) {, +    return forward.entrySet().asList().reverse().get(index);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +    Multiset.Entry<K> getEntry(int index) {, +      Map.Entry<K, ? extends Collection<V>> entry = map.entrySet().asList().get(index);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +  private final ImmutableSet<Entry<E>> createEntrySet() {, +    return isEmpty() ? ImmutableSet.<Entry<E>>of() : new EntrySet();, +  }, +  abstract Entry<E> getEntry(int index);, +, +  private final class EntrySet extends ImmutableSet<Entry<E>> {, +    public UnmodifiableIterator<Entry<E>> iterator() {, +      return asList().iterator();, +    }, +, +    @Override, +    ImmutableList<Entry<E>> createAsList() {, +      return new ImmutableAsList<Entry<E>>() {, +        @Override, +        public Entry<E> get(int index) {, +          return getEntry(index);, +        }]