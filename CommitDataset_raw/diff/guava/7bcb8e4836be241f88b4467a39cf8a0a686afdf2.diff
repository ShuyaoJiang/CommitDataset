[+++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +    h2.putUnencodedChars(s);, +++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +    h2.putUnencodedChars(s);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    verify(bytePrimitiveSink).putUnencodedChars("test");, +++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +    h2.putUnencodedChars(s);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    verify(bytePrimitiveSink).putUnencodedChars("test");, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +            hashFunction.newHasher().putUnencodedChars("abc").hash(),, +            hashFunction.newHasher().putUnencodedChars("ab").putUnencodedChars("c").hash(),, +            hashFunction.newHasher().putUnencodedChars("a").putUnencodedChars("bc").hash(),, +            hashFunction.newHasher().putUnencodedChars("a").putUnencodedChars("b"), +                .putUnencodedChars("c").hash(),, +            hashFunction.newHasher().putChar('a').putUnencodedChars("bc").hash(),, +            hashFunction.newHasher().putUnencodedChars("ab").putChar('c').hash(),, +        hashFunction.newHasher().putUnencodedChars(string).hash());, +    // assertEquals(hashFunction.hashUnencodedChars(string),, +    // assertEquals(hashFunction.hashUnencodedChars(string),, +    //     hashFunction.newHasher().putUnencodedChars(string, Charsets.UTF_16LE).hash());, +   * This verifies that putUnencodedChars(String) and hashUnencodedChars(String) are equivalent,, +   * even for funny strings composed by (possibly unmatched, and mostly illegal) surrogate, +   * characters. (But doesn't test that they do the right thing - just their consistency)., +        hashFunction.newHasher().putUnencodedChars(string).hash());, +++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +    h2.putUnencodedChars(s);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    verify(bytePrimitiveSink).putUnencodedChars("test");, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +          sink.putUnencodedChars(s);, +            hashFunction.newHasher().putUnencodedChars("abc").hash(),, +            hashFunction.newHasher().putUnencodedChars("ab").putUnencodedChars("c").hash(),, +            hashFunction.newHasher().putUnencodedChars("a").putUnencodedChars("bc").hash(),, +            hashFunction.newHasher().putUnencodedChars("a").putUnencodedChars("b"), +                .putUnencodedChars("c").hash(),, +            hashFunction.newHasher().putChar('a').putUnencodedChars("bc").hash(),, +            hashFunction.newHasher().putUnencodedChars("ab").putChar('c').hash(),, +        hashFunction.newHasher().putUnencodedChars(string).hash());, +    // assertEquals(hashFunction.hashUnencodedChars(string),, +    // assertEquals(hashFunction.hashUnencodedChars(string),, +    //     hashFunction.newHasher().putUnencodedChars(string, Charsets.UTF_16LE).hash());, +   * This verifies that putUnencodedChars(String) and hashUnencodedChars(String) are equivalent,, +   * even for funny strings composed by (possibly unmatched, and mostly illegal) surrogate, +   * characters. (But doesn't test that they do the right thing - just their consistency)., +        hashFunction.newHasher().putUnencodedChars(string).hash());, +++ b/guava/src/com/google/common/hash/Funnels.java, +      into.putUnencodedChars(from);]