[+++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +  @SuppressWarnings("unchecked") // mock, +    mock = mock(Cache.class);, +    when(mock.getIfPresent("key")).thenReturn(Boolean.TRUE);, +    when(mock.getAllPresent(ImmutableList.of("key"))), +        .thenReturn(ImmutableMap.of("key", Boolean.TRUE));, +    verify(mock).invalidate("key");, +    verify(mock).invalidateAll(ImmutableList.of("key"));, +    verify(mock).invalidateAll();, +    when(mock.size()).thenReturn(0L);, +    assertEquals(0, forward.size());, +    when(mock.stats()).thenReturn(null);, +    when(mock.asMap()).thenReturn(null);, +    verify(mock).cleanUp();, +++ b/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +  @SuppressWarnings("unchecked") // mock, +    mock = mock(Cache.class);, +    when(mock.getIfPresent("key")).thenReturn(Boolean.TRUE);, +    when(mock.getAllPresent(ImmutableList.of("key"))), +        .thenReturn(ImmutableMap.of("key", Boolean.TRUE));, +    verify(mock).invalidate("key");, +    verify(mock).invalidateAll(ImmutableList.of("key"));, +    verify(mock).invalidateAll();, +    when(mock.size()).thenReturn(0L);, +    assertEquals(0, forward.size());, +    when(mock.stats()).thenReturn(null);, +    when(mock.asMap()).thenReturn(null);, +    verify(mock).cleanUp();, +++ b/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.when;, +  @SuppressWarnings("unchecked") // mock, +    mock = mock(LoadingCache.class);, +    when(mock.get("key")).thenReturn(Boolean.TRUE);, +    when(mock.getUnchecked("key")).thenReturn(Boolean.TRUE);, +    when(mock.getAll(ImmutableList.of("key"))).thenReturn(ImmutableMap.of("key", Boolean.TRUE));, +    when(mock.apply("key")).thenReturn(Boolean.TRUE);, +    verify(mock).invalidate("key");, +    verify(mock).refresh("key");, +    verify(mock).invalidateAll();, +    when(mock.size()).thenReturn(0L);, +    when(mock.stats()).thenReturn(null);, +    when(mock.asMap()).thenReturn(null);, +    verify(mock).cleanUp();]