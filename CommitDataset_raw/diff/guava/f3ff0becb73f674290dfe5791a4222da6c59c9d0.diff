[+++ b/guava/src/com/google/common/hash/BloomFilter.java, +   * Puts an element into this {@code BloomFilter}. Ensures that subsequent invocations of {@link, +   * #mightContain(Object)} with the same element will always return {@code true}., +   *     result to what {@code mightContain(t)} would have returned at the time it is called., +++ b/guava/src/com/google/common/hash/BloomFilter.java, +   * Puts an element into this {@code BloomFilter}. Ensures that subsequent invocations of {@link, +   * #mightContain(Object)} with the same element will always return {@code true}., +   *     result to what {@code mightContain(t)} would have returned at the time it is called., +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, + * {@link #afterDone()}, which will be invoked automatically when the future completes. Subclasses, + * should rarely override other methods., +   *, +   * <p>Rather than override this method to perform additional cancellation work or cleanup,, +   * subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link, +   * #wasInterrupted} as necessary. This ensures that the work is done even if the future is, +   * cancelled without a call to {@code cancel}, such as by calling {@code, +   * setFuture(cancelledFuture)}., +   * <p>This method is likely to be deprecated. Prefer to override {@link #afterDone}, checking, +   * {@link #wasInterrupted} to decide whether to interrupt your task., +   *]