[+++ b/guava-tests/test/com/google/common/cache/CacheBuilderSpecTest.java, +        CacheBuilder.newBuilder(), +          .expireAfterAccess(10L, TimeUnit.SECONDS), +          .expireAfterWrite(9L, TimeUnit.MINUTES),, +        .expireAfterAccess(10L, TimeUnit.MINUTES), +        .expireAfterWrite(1L, TimeUnit.HOURS);, +  private static void assertCacheBuilderEquivalence(CacheBuilder a, CacheBuilder b) {, +    assertEquals("concurrencyLevel", a.concurrencyLevel, b.concurrencyLevel);, +    assertEquals("expireAfterAccessNanos", a.expireAfterAccessNanos, b.expireAfterAccessNanos);, +    assertEquals("expireAfterWriteNanos", a.expireAfterWriteNanos, b.expireAfterWriteNanos);, +    assertEquals("initialCapacity", a.initialCapacity, b.initialCapacity);, +    assertEquals("maximumSize", a.maximumSize, b.maximumSize);, +    assertEquals("maximumWeight", a.maximumWeight, b.maximumWeight);, +    assertEquals("refreshNanos", a.refreshNanos, b.refreshNanos);, +    assertEquals("keyEquivalence", a.keyEquivalence, b.keyEquivalence);, +    assertEquals("keyStrength", a.keyStrength, b.keyStrength);, +    assertEquals("removalListener", a.removalListener, b.removalListener);, +    assertEquals("weigher", a.weigher, b.weigher);, +    assertEquals("valueEquivalence", a.valueEquivalence, b.valueEquivalence);, +    assertEquals("valueStrength", a.valueStrength, b.valueStrength);, +    assertEquals("statsCounterSupplier", a.statsCounterSupplier, b.statsCounterSupplier);, +    assertEquals("ticker", a.ticker, b.ticker);]