[+++ b/guava/src/com/google/common/reflect/Types.java, +import com.google.common.collect.ImmutableMap;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Proxy;, +    return newTypeVariableImpl(, +  private static <D extends GenericDeclaration> TypeVariable<D> newTypeVariableImpl(, +      D genericDeclaration, String name, Type[] bounds) {, +    TypeVariableImpl<D> typeVariableImpl =, +        new TypeVariableImpl<D>(genericDeclaration, name, bounds);, +    @SuppressWarnings("unchecked"), +    TypeVariable<D> typeVariable = Reflection.newProxy(, +        TypeVariable.class, new TypeVariableInvocationHandler(typeVariableImpl));, +    return typeVariable;, +  }, +, +  /**, +   * Invocation handler to work around a compatibility problem between Java 7 and Java 8., +   *, +   * <p>Java 8 introduced a new method {@code getAnnotatedBounds()} in the {@link TypeVariable}, +   * interface, whose return type {@code AnnotatedType[]} is also new in Java 8. That means that we, +   * cannot implement that interface in source code in a way that will compile on both Java 7 and, +   * Java 8. If we include the {@code getAnnotatedBounds()} method then its return type means, +   * it won't compile on Java 7, while if we don't include the method then the compiler will, +   * complain that an abstract method is unimplemented. So instead we use a dynamic proxy to, +   * get an implementation. If the method being called on the {@code TypeVariable} instance has, +   * the same name as one of the public methods of {@link TypeVariableImpl}, the proxy calls, +   * the same method on its instance of {@code TypeVariableImpl}. Otherwise it throws {@link, +   * UnsupportedOperationException}; this should only apply to {@code getAnnotatedBounds()}. This, +   * does mean that users on Java 8 who obtain an instance of {@code TypeVariable} from {@link, +   * TypeResolver#resolveType} will not be able to call {@code getAnnotatedBounds()} on it, but that, +   * should hopefully be rare., +   *, +   * <p>This workaround should be removed at a distant future time when we no longer support Java, +   * versions earlier than 8., +   */, +  private static final class TypeVariableInvocationHandler implements InvocationHandler {, +    private static final ImmutableMap<String, Method> typeVariableMethods;, +    static {, +      ImmutableMap.Builder<String, Method> builder = ImmutableMap.builder();, +      for (Method method : TypeVariableImpl.class.getMethods()) {, +        if (method.getDeclaringClass().equals(TypeVariableImpl.class)) {, +          builder.put(method.getName(), method);, +        }, +      }, +      typeVariableMethods = builder.build();, +    }, +, +    private final TypeVariableImpl<?> typeVariableImpl;, +, +    TypeVariableInvocationHandler(TypeVariableImpl<?> typeVariableImpl) {, +      this.typeVariableImpl = typeVariableImpl;, +    }, +, +    @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {, +      String methodName = method.getName();, +      Method typeVariableMethod = typeVariableMethods.get(methodName);, +      if (typeVariableMethod == null) {, +        throw new UnsupportedOperationException(methodName);, +      } else {, +        try {, +          return typeVariableMethod.invoke(typeVariableImpl, args);, +        } catch (InvocationTargetException e) {, +          throw e.getCause();, +        }, +      }, +    }, +  }, +, +  private static final class TypeVariableImpl<D extends GenericDeclaration> {, +    public Type[] getBounds() {, +    public D getGenericDeclaration() {, +    public String getName() {, +      return name;, +    }, +, +    public String getTypeName() {, +        if (obj != null, +            && Proxy.isProxyClass(obj.getClass()), +            && Proxy.getInvocationHandler(obj) instanceof TypeVariableInvocationHandler) {, +          TypeVariableInvocationHandler typeVariableInvocationHandler =, +              (TypeVariableInvocationHandler) Proxy.getInvocationHandler(obj);, +          TypeVariableImpl<?> that = typeVariableInvocationHandler.typeVariableImpl;]