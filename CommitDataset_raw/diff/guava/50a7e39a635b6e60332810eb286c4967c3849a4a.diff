[+++ b/guava/src/com/google/common/util/concurrent/ServiceManager.java, +import static com.google.common.base.Predicates.instanceOf;, +import static com.google.common.base.Predicates.not;, +import com.google.common.collect.Collections2;, +    if (copy.isEmpty()) {, +      // Having no services causes the manager to behave strangely. Notably, listeners are never , +      // fired.  To avoid this we substitute a placeholder service., +      logger.log(Level.WARNING, , +          "ServiceManager configured with no services.  Is your application configured properly?", , +          new EmptyServiceManagerWarning());, +      copy = ImmutableList.<Service>of(new NoOpService());, +    }, +      if (!(service instanceof NoOpService)) {, +    }, +      if (state != State.NEW & state != State.STARTING & !(service instanceof NoOpService)) {, +        .add("services", Collections2.filter(services.keySet(), not(instanceOf(NoOpService.class)))), +      if (!(service instanceof NoOpService)) {, +      }, +        if (!(service instanceof NoOpService)) {, +      }, +          if (!(service instanceof NoOpService)) {, +    }, +  , +  /**, +   * A {@link Service} instance that does nothing.  This is only useful as a placeholder to, +   * ensure that the {@link ServiceManager} functions properly even when it is managing no services., +   * , +   * <p>The use of this class is considered an implementation detail of the class and as such it is, +   * excluded from {@link #servicesByState}, {@link #startupTimes}, {@link #toString} and all , +   * logging statements., +   */, +  private static final class NoOpService extends AbstractService {, +    @Override protected void doStart() { notifyStarted(); }, +    @Override protected void doStop() { notifyStopped(); }, +  }, +  , +  /** This is never thrown but only used for logging. */, +  private static final class EmptyServiceManagerWarning extends Throwable {}]