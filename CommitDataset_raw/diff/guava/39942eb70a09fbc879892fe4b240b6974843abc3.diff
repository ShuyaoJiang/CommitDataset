[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import static com.google.common.base.Predicates.equalTo;, +import static com.google.common.base.Predicates.in;, +import static com.google.common.base.Predicates.not;, +  public static boolean contains(Iterator<?> iterator, @Nullable Object element) {, +    return any(iterator, equalTo(element));, +    return removeIf(removeFrom, in(elementsToRemove));, +    return removeIf(removeFrom, not(in(elementsToRetain)));, +    return size(filter(iterator, equalTo(element)));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import static com.google.common.base.Predicates.equalTo;, +import static com.google.common.base.Predicates.in;, +import static com.google.common.base.Predicates.not;, +  public static boolean contains(Iterator<?> iterator, @Nullable Object element) {, +    return any(iterator, equalTo(element));, +    return removeIf(removeFrom, in(elementsToRemove));, +    return removeIf(removeFrom, not(in(elementsToRetain)));, +    return size(filter(iterator, equalTo(element)));, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testEmptyModifiableIterator() {, +    Iterator<String> iterator = Iterators.emptyModifiableIterator();, +    assertFalse(iterator.hasNext());, +    try {, +      iterator.next();, +      fail("Expected NoSuchElementException");, +    } catch (NoSuchElementException expected) {, +    }, +    try {, +      iterator.remove();, +      fail("Expected IllegalStateException");, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import static com.google.common.base.Predicates.equalTo;, +import static com.google.common.base.Predicates.in;, +import static com.google.common.base.Predicates.not;, +  public static boolean contains(Iterator<?> iterator, @Nullable Object element) {, +    return any(iterator, equalTo(element));, +    return removeIf(removeFrom, in(elementsToRemove));, +    return removeIf(removeFrom, not(in(elementsToRetain)));, +    return size(filter(iterator, equalTo(element)));, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testEmptyModifiableIterator() {, +    Iterator<String> iterator = Iterators.emptyModifiableIterator();, +    assertFalse(iterator.hasNext());, +    try {, +      iterator.next();, +      fail("Expected NoSuchElementException");, +    } catch (NoSuchElementException expected) {, +    }, +    try {, +      iterator.remove();, +      fail("Expected IllegalStateException");, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +++ b/guava/src/com/google/common/collect/Iterators.java, +import static com.google.common.base.Predicates.equalTo;, +import static com.google.common.base.Predicates.in;, +import static com.google.common.base.Predicates.instanceOf;, +import static com.google.common.base.Predicates.not;, +  public static boolean contains(Iterator<?> iterator, @Nullable Object element) {, +    return any(iterator, equalTo(element));, +    return removeIf(removeFrom, in(elementsToRemove));, +    return removeIf(removeFrom, not(in(elementsToRetain)));, +    return size(filter(iterator, equalTo(element)));, +    return (UnmodifiableIterator<T>) filter(unfiltered, instanceOf(type));]