[+++ b/guava-tests/test/com/google/common/eventbus/EventBusTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +  /**, +   * Tests that bridge methods are not subscribed to events. In Java 8,, +   * annotations are included on the bridge method in addition to the original, +   * method, which causes both the original and bridge methods to be subscribed, +   * (since both are annotated @Subscribe) without specifically checking for, +   * bridge methods., +   */, +  public void testRegistrationWithBridgeMethod() {, +    final AtomicInteger calls = new AtomicInteger();, +    bus.register(new Callback<String>() {, +      @Subscribe, +      @Override, +      public void call(String s) {, +        calls.incrementAndGet();, +      }, +    });, +, +    bus.post("hello");, +, +    assertEquals(1, calls.get());, +  }, +, +   * Records thrown exception information., +  private interface HierarchyFixtureInterface {, +  private interface HierarchyFixtureSubinterface, +  private static class HierarchyFixtureParent, +  private static class HierarchyFixture extends HierarchyFixtureParent {, +  private interface Callback<T> {, +    void call(T t);, +  }, +++ b/guava-tests/test/com/google/common/eventbus/EventBusTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +  /**, +   * Tests that bridge methods are not subscribed to events. In Java 8,, +   * annotations are included on the bridge method in addition to the original, +   * method, which causes both the original and bridge methods to be subscribed, +   * (since both are annotated @Subscribe) without specifically checking for, +   * bridge methods., +   */, +  public void testRegistrationWithBridgeMethod() {, +    final AtomicInteger calls = new AtomicInteger();, +    bus.register(new Callback<String>() {, +      @Subscribe, +      @Override, +      public void call(String s) {, +        calls.incrementAndGet();, +      }, +    });, +, +    bus.post("hello");, +, +    assertEquals(1, calls.get());, +  }, +, +   * Records thrown exception information., +  private interface HierarchyFixtureInterface {, +  private interface HierarchyFixtureSubinterface, +  private static class HierarchyFixtureParent, +  private static class HierarchyFixture extends HierarchyFixtureParent {, +  private interface Callback<T> {, +    void call(T t);, +  }, +++ b/guava/src/com/google/common/eventbus/AnnotatedSubscriberFinder.java, +        if (superClazzMethod.isAnnotationPresent(Subscribe.class), +            && !superClazzMethod.isBridge()) {]