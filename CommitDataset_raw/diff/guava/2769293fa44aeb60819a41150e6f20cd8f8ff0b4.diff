[+++ b/guava/src/com/google/common/collect/BstCountBasedBalancePolicies.java, +// Copyright 2011 Google Inc. All Rights Reserved., +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.collect.BstNode.countOrZero;, +import static com.google.common.collect.BstSide.LEFT;, +import static com.google.common.collect.BstSide.RIGHT;, +import static com.google.common.collect.BstUtilities.extractMax;, +import static com.google.common.collect.BstUtilities.extractMin;, +import static com.google.common.collect.BstUtilities.insertMax;, +import static com.google.common.collect.BstUtilities.insertMin;, +, +import com.google.common.annotations.GwtCompatible;, +, +import javax.annotation.Nullable;, +, +/**, + * A tree-size-based set of balancing policies, based on <a, + * href="http://www.swiss.ai.mit.edu/~adams/BB/"> Stephen Adams, "Efficient sets: a balancing, + * act."</a>., + *, + * @author Louis Wasserman, + */, +@GwtCompatible, +final class BstCountBasedBalancePolicies {, +  private BstCountBasedBalancePolicies() {}, +, +  private static final int SINGLE_ROTATE_RATIO = 4;, +  private static final int SECOND_ROTATE_RATIO = 2;, +, +  /**, +   * Returns a balance policy that does no balancing or the bare minimum (for {@code combine})., +   */, +  public static <N extends BstNode<?, N>> BstBalancePolicy<N> noRebalancePolicy() {, +    return new BstBalancePolicy<N>() {, +      @Override, +      public N balance(, +          BstNodeFactory<N> nodeFactory, N source, @Nullable N left, @Nullable N right) {, +        return checkNotNull(nodeFactory).createNode(source, left, right);, +      }, +, +      @Nullable, +      @Override, +      public N combine(BstNodeFactory<N> nodeFactory, @Nullable N left, @Nullable N right) {, +        if (left == null) {, +          return right;, +        } else if (right == null) {, +          return left;, +        } else if (left.count() > right.count()) {, +          return nodeFactory.createNode(, +              left, left.childOrNull(LEFT), combine(nodeFactory, left.childOrNull(RIGHT), right));, +        } else {, +          return nodeFactory.createNode(right, combine(nodeFactory, left, right.childOrNull(LEFT)),, +              right.childOrNull(RIGHT));, +        }, +      }, +    };, +  }, +, +  /**, +   * Returns a balance policy that expects the sizes of each side to be at most one node (added or, +   * removed) away from being balanced. {@code balance} takes {@code O(1)} time, and {@code, +   * combine} takes {@code O(log n)} time., +   */, +  public static <K, N extends BstNode<K, N>> BstBalancePolicy<N> singleRebalancePolicy() {, +    return new BstBalancePolicy<N>() {, +      @Override, +      public N balance(, +          BstNodeFactory<N> nodeFactory, N source, @Nullable N left, @Nullable N right) {, +        int countL = countOrZero(left);, +        int countR = countOrZero(right);, +        if (countL + countR > 1) {, +          if (countR >= SINGLE_ROTATE_RATIO * countL) {, +            return rotateL(nodeFactory, source, left, right);, +          } else if (countL >= SINGLE_ROTATE_RATIO * countR) {, +            return rotateR(nodeFactory, source, left, right);, +          }, +        }, +        return nodeFactory.createNode(source, left, right);, +      }, +, +      private N rotateL(BstNodeFactory<N> nodeFactory, N source, @Nullable N left, N right) {, +        checkNotNull(right);, +        N rl = right.childOrNull(LEFT);, +        N rr = right.childOrNull(RIGHT);, +        if (countOrZero(rl) >= SECOND_ROTATE_RATIO * countOrZero(rr)) {, +          right = singleR(nodeFactory, right, rl, rr);, +        }, +        return singleL(nodeFactory, source, left, right);, +      }, +, +      private N rotateR(BstNodeFactory<N> nodeFactory, N source, N left, @Nullable N right) {, +        checkNotNull(left);, +        N lr = left.childOrNull(RIGHT);, +        N ll = left.childOrNull(LEFT);, +        if (countOrZero(lr) >= SECOND_ROTATE_RATIO * countOrZero(ll)) {, +          left = singleL(nodeFactory, left, ll, lr);, +        }]