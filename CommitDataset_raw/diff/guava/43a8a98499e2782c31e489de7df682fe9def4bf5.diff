[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +  public void testReadBytes() throws IOException {, +    final byte[] array = newPreFilledByteArray(1000);, +    assertEquals(array, ByteStreams.readBytes(, +      new ByteArrayInputStream(array), new TestByteProcessor()));, +    assertEquals(array, ByteStreams.readBytes(, +      new InputSupplier<InputStream>() {, +        @Override, +        public InputStream getInput() {, +          return new ByteArrayInputStream(array);, +        }, +      }, new TestByteProcessor()));, +  }, +, +  private class TestByteProcessor implements ByteProcessor<byte[]> {, +    private final ByteArrayOutputStream out = new ByteArrayOutputStream();, +, +    @Override, +    public boolean processBytes(byte[] buf, int off, int len), +        throws IOException {, +      out.write(buf, off, len);, +      return true;, +    }, +, +    @Override, +    public byte[] getResult() {, +      return out.toByteArray();, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +  public void testReadBytes() throws IOException {, +    final byte[] array = newPreFilledByteArray(1000);, +    assertEquals(array, ByteStreams.readBytes(, +      new ByteArrayInputStream(array), new TestByteProcessor()));, +    assertEquals(array, ByteStreams.readBytes(, +      new InputSupplier<InputStream>() {, +        @Override, +        public InputStream getInput() {, +          return new ByteArrayInputStream(array);, +        }, +      }, new TestByteProcessor()));, +  }, +, +  private class TestByteProcessor implements ByteProcessor<byte[]> {, +    private final ByteArrayOutputStream out = new ByteArrayOutputStream();, +, +    @Override, +    public boolean processBytes(byte[] buf, int off, int len), +        throws IOException {, +      out.write(buf, off, len);, +      return true;, +    }, +, +    @Override, +    public byte[] getResult() {, +      return out.toByteArray();, +    }, +  }, +, +++ b/guava/src/com/google/common/io/ByteStreams.java, +      throw new EOFException("reached end of stream after reading ", +          + read + " bytes; " + len + " bytes expected");, +          throw new EOFException("reached end of stream after skipping ", +              + skipped + " bytes; " + toSkip + " bytes expected");, +    checkNotNull(supplier);, +      return readBytes(in, processor);, +   * Process the bytes of the given input stream using the given processor., +   *, +   * @param input the input stream to process, +   * @param processor the object to which to pass the bytes of the stream, +   * @return the result of the byte processor, +   * @throws IOException if an I/O error occurs, +   * @since 14.0, +   */, +  public static <T> T readBytes(, +      InputStream input, ByteProcessor<T> processor) throws IOException {, +    checkNotNull(input);, +    checkNotNull(processor);, +, +    byte[] buf = new byte[BUF_SIZE];, +    int read;, +    do {, +      read = input.read(buf);, +    } while (read != -1 && processor.processBytes(buf, 0, read));, +    return processor.getResult();, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +  public void testReadBytes() throws IOException {, +    final byte[] array = newPreFilledByteArray(1000);, +    assertEquals(array, ByteStreams.readBytes(, +      new ByteArrayInputStream(array), new TestByteProcessor()));, +    assertEquals(array, ByteStreams.readBytes(, +      new InputSupplier<InputStream>() {, +        @Override, +        public InputStream getInput() {, +          return new ByteArrayInputStream(array);, +        }]