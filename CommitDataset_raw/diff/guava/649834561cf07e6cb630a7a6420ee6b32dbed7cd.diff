[+++ b/guava-tests/test/com/google/common/math/DoubleMathTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.math;, +, +import static com.google.common.math.MathTesting.ALL_DOUBLE_CANDIDATES;, +import static com.google.common.math.MathTesting.ALL_ROUNDING_MODES;, +import static com.google.common.math.MathTesting.ALL_SAFE_ROUNDING_MODES;, +import static com.google.common.math.MathTesting.FRACTIONAL_DOUBLE_CANDIDATES;, +import static com.google.common.math.MathTesting.INTEGRAL_DOUBLE_CANDIDATES;, +import static com.google.common.math.MathTesting.NEGATIVE_INTEGER_CANDIDATES;, +import static com.google.common.math.MathTesting.POSITIVE_FINITE_DOUBLE_CANDIDATES;, +import static java.math.RoundingMode.CEILING;, +import static java.math.RoundingMode.DOWN;, +import static java.math.RoundingMode.FLOOR;, +import static java.math.RoundingMode.HALF_DOWN;, +import static java.math.RoundingMode.HALF_EVEN;, +import static java.math.RoundingMode.HALF_UP;, +import static java.math.RoundingMode.UNNECESSARY;, +import static java.math.RoundingMode.UP;, +import static java.util.Arrays.asList;, +, +import com.google.common.testing.NullPointerTester;, +, +import junit.framework.TestCase;, +, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.math.RoundingMode;, +import java.util.Arrays;, +, +/**, + * Tests for {@code DoubleMath}., + *, + * @author Louis Wasserman, + */, +public class DoubleMathTest extends TestCase {, +, +  private static final BigDecimal MAX_INT_AS_BIG_DECIMAL = BigDecimal.valueOf(Integer.MAX_VALUE);, +  private static final BigDecimal MIN_INT_AS_BIG_DECIMAL = BigDecimal.valueOf(Integer.MIN_VALUE);, +, +  private static final BigDecimal MAX_LONG_AS_BIG_DECIMAL = BigDecimal.valueOf(Long.MAX_VALUE);, +  private static final BigDecimal MIN_LONG_AS_BIG_DECIMAL = BigDecimal.valueOf(Long.MIN_VALUE);, +, +  public void testConstantsMaxFactorial(){, +    BigInteger MAX_DOUBLE_VALUE = BigDecimal.valueOf(Double.MAX_VALUE).toBigInteger();, +    assertTrue(BigIntegerMath.factorial(DoubleMath.MAX_FACTORIAL).compareTo(MAX_DOUBLE_VALUE) <= 0);, +    assertTrue(, +        BigIntegerMath.factorial(DoubleMath.MAX_FACTORIAL + 1).compareTo(MAX_DOUBLE_VALUE) > 0);, +  }, +, +  public void testConstantsEverySixteenthFactorial() {, +    for (int i = 0, n = 0; n <= DoubleMath.MAX_FACTORIAL; i++, n += 16) {, +      assertEquals(, +          BigIntegerMath.factorial(n).doubleValue(), DoubleMath.EVERY_SIXTEENTH_FACTORIAL[i]);, +    }, +  }, +  , +  public void testRoundIntegralDoubleToInt() {, +    for (double d : INTEGRAL_DOUBLE_CANDIDATES) {, +      for (RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {, +        BigDecimal expected = new BigDecimal(d).setScale(0, mode);, +        boolean isInBounds = expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0, +            & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;, +, +        try {, +          assertEquals(expected.intValue(), DoubleMath.roundToInt(d, mode));, +          assertTrue(isInBounds);, +        } catch (ArithmeticException e) {, +          assertFalse(isInBounds);, +        }, +      }, +    }, +  }, +, +  public void testRoundFractionalDoubleToInt() {, +    for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {, +      for (RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {, +        BigDecimal expected = new BigDecimal(d).setScale(0, mode);, +        boolean isInBounds = expected.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0, +            & expected.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0;, +, +        try {, +          assertEquals(expected.intValue(), DoubleMath.roundToInt(d, mode));, +          assertTrue(isInBounds);, +        } catch (ArithmeticException e) {]