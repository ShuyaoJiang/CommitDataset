[+++ b/guava/src/com/google/common/graph/AbstractGraph.java, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edges());, +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edges());, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +  private transient Map<EndpointPair<N>, V> edgeValueMap;, +, +    if (edgeValueMap == null) {, +          return edgeValue(edge.nodeU(), edge.nodeV());, +      edgeValueMap = Maps.asMap(edges(), edgeToValueFn);, +    }, +    return edgeValueMap;, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edgeValues());, +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edges());, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +  private transient Map<EndpointPair<N>, V> edgeValueMap;, +, +    if (edgeValueMap == null) {, +          return edgeValue(edge.nodeU(), edge.nodeV());, +      edgeValueMap = Maps.asMap(edges(), edgeToValueFn);, +    }, +    return edgeValueMap;, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edgeValues());, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +  private final MutableValueGraph<N, Presence> backingValueGraph;, +    this.backingValueGraph = new ConfigurableMutableValueGraph<N, Presence>(builder);, +    return backingValueGraph;, +    return backingValueGraph.addNode(node);, +    return backingValueGraph.putEdgeValue(nodeU, nodeV, Presence.EDGE_EXISTS) == null;, +    return backingValueGraph.removeNode(node);, +    return backingValueGraph.removeEdge(nodeU, nodeV) != null;, +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edges());, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +  private transient Map<EndpointPair<N>, V> edgeValueMap;, +, +    if (edgeValueMap == null) {, +          return edgeValue(edge.nodeU(), edge.nodeV());, +      edgeValueMap = Maps.asMap(edges(), edgeToValueFn);, +    }, +    return edgeValueMap;, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edgeValues());, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +  private final MutableValueGraph<N, Presence> backingValueGraph;, +    this.backingValueGraph = new ConfigurableMutableValueGraph<N, Presence>(builder);, +    return backingValueGraph;, +    return backingValueGraph.addNode(node);, +    return backingValueGraph.putEdgeValue(nodeU, nodeV, Presence.EDGE_EXISTS) == null;, +    return backingValueGraph.removeNode(node);, +    return backingValueGraph.removeEdge(nodeU, nodeV) != null;, +++ b/guava/src/com/google/common/graph/ForwardingGraph.java, +abstract class ForwardingGraph<N> extends AbstractGraph<N> {, +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edges());, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +  private transient Map<EndpointPair<N>, V> edgeValueMap;, +, +    if (edgeValueMap == null) {, +          return edgeValue(edge.nodeU(), edge.nodeV());, +      edgeValueMap = Maps.asMap(edges(), edgeToValueFn);, +    }, +    return edgeValueMap;, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),, +        edgeValues());, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +  private final MutableValueGraph<N, Presence> backingValueGraph;, +    this.backingValueGraph = new ConfigurableMutableValueGraph<N, Presence>(builder);, +    return backingValueGraph;, +    return backingValueGraph.addNode(node);, +    return backingValueGraph.putEdgeValue(nodeU, nodeV, Presence.EDGE_EXISTS) == null;, +    return backingValueGraph.removeNode(node);, +    return backingValueGraph.removeEdge(nodeU, nodeV) != null;, +++ b/guava/src/com/google/common/graph/ForwardingGraph.java, +abstract class ForwardingGraph<N> extends AbstractGraph<N> {, +++ b/guava/src/com/google/common/graph/ImmutableGraph.java, +    protected final ValueGraph<N, V> backingValueGraph;, +      this.backingValueGraph =, +          new ConfigurableValueGraph<N, V>(builder, nodeConnections, edgeCount);, +      return backingValueGraph;, +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +        nodes(),]