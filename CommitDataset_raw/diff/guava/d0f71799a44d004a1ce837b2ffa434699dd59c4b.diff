[+++ b/guava-tests/test/com/google/common/hash/HashCodeTest.java, +  public void testIntWriteBytesTo() {, +    byte[] dest = new byte[4];, +    HashCodes.fromInt(42).writeBytesTo(dest, 0, 4);, +    assertTrue(Arrays.equals(, +        HashCodes.fromInt(42).asBytes(),, +        dest));, +  }, +, +  public void testLongWriteBytesTo() {, +    byte[] dest = new byte[8];, +    HashCodes.fromLong(42).writeBytesTo(dest, 0, 8);, +    assertTrue(Arrays.equals(, +        HashCodes.fromLong(42).asBytes(),, +        dest));, +  }, +, +++ b/guava-tests/test/com/google/common/hash/HashCodeTest.java, +  public void testIntWriteBytesTo() {, +    byte[] dest = new byte[4];, +    HashCodes.fromInt(42).writeBytesTo(dest, 0, 4);, +    assertTrue(Arrays.equals(, +        HashCodes.fromInt(42).asBytes(),, +        dest));, +  }, +, +  public void testLongWriteBytesTo() {, +    byte[] dest = new byte[8];, +    HashCodes.fromLong(42).writeBytesTo(dest, 0, 8);, +    assertTrue(Arrays.equals(, +        HashCodes.fromLong(42).asBytes(),, +        dest));, +  }, +, +++ b/guava/src/com/google/common/hash/HashCode.java, +   * Returns the number of bits in this hash code; a positive multiple of 8., +   */, +  public abstract int bits();, +, +  /**, +   * Copies bytes from this hash code into {@code dest}., +   *, +   * @param dest the byte array into which the hash code will be written, +   * @param offset the start offset in the data, +   * @param maxLength the maximum number of bytes to write, +   * @return the number of bytes written to {@code dest}, +   * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}, +   */, +  public int writeBytesTo(byte[] dest, int offset, int maxLength) {, +    maxLength = Ints.min(maxLength, bits() / 8);, +    Preconditions.checkPositionIndexes(offset, offset + maxLength, dest.length);, +    writeBytesToImpl(dest, offset, maxLength);, +    return maxLength;, +  }, +, +  abstract void writeBytesToImpl(byte[] dest, int offset, int maxLength);, +, +  /**, +    @Override, +    void writeBytesToImpl(byte[] dest, int offset, int maxLength) {, +      for (int i = 0; i < maxLength; i++) {, +        dest[offset + i] = (byte) (hash >> (i * 8));, +      }, +    }, +, +    @Override, +    void writeBytesToImpl(byte[] dest, int offset, int maxLength) {, +      for (int i = 0; i < maxLength; i++) {, +        dest[offset + i] = (byte) (hash >> (i * 8));, +      }, +    }, +, +    @Override, +    void writeBytesToImpl(byte[] dest, int offset, int maxLength) {, +      System.arraycopy(bytes, 0, dest, offset, maxLength);, +    private static final long serialVersionUID = 0;, +  }]