[+++ b/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java, +import java.util.concurrent.ExecutionException;, +  @GwtIncompatible, +  public void testAsAsyncCallable() throws Exception {, +    final String expected = "MyCallableString";, +    Callable<String> callable = new Callable<String>() {, +      @Override, +      public String call() throws Exception {, +        return expected;, +      }, +    };, +, +    AsyncCallable<String> asyncCallable =, +        Callables.asAsyncCallable(callable, MoreExecutors.newDirectExecutorService());, +, +    ListenableFuture<String> future = asyncCallable.call();, +    assertSame(expected, future.get());, +  }, +, +  @GwtIncompatible, +  public void testAsAsyncCallable_exception() throws Exception {, +    final Exception expected = new IllegalArgumentException();, +    Callable<String> callable = new Callable<String>() {, +      @Override, +      public String call() throws Exception {, +        throw expected;, +      }, +    };, +, +    AsyncCallable<String> asyncCallable =, +        Callables.asAsyncCallable(callable, MoreExecutors.newDirectExecutorService());, +, +    ListenableFuture<String> future = asyncCallable.call();, +    try {, +      future.get();, +      fail("Expected exception to be thrown");, +    } catch (ExecutionException e) {, +      assertSame(expected, e.getCause());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java, +import java.util.concurrent.ExecutionException;, +  @GwtIncompatible, +  public void testAsAsyncCallable() throws Exception {, +    final String expected = "MyCallableString";, +    Callable<String> callable = new Callable<String>() {, +      @Override, +      public String call() throws Exception {, +        return expected;, +      }, +    };, +, +    AsyncCallable<String> asyncCallable =, +        Callables.asAsyncCallable(callable, MoreExecutors.newDirectExecutorService());, +, +    ListenableFuture<String> future = asyncCallable.call();, +    assertSame(expected, future.get());, +  }, +, +  @GwtIncompatible, +  public void testAsAsyncCallable_exception() throws Exception {, +    final Exception expected = new IllegalArgumentException();, +    Callable<String> callable = new Callable<String>() {, +      @Override, +      public String call() throws Exception {, +        throw expected;, +      }, +    };, +, +    AsyncCallable<String> asyncCallable =, +        Callables.asAsyncCallable(callable, MoreExecutors.newDirectExecutorService());, +, +    ListenableFuture<String> future = asyncCallable.call();, +    try {, +      future.get();, +      fail("Expected exception to be thrown");, +    } catch (ExecutionException e) {, +      assertSame(expected, e.getCause());, +    }, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/Callables.java, +import com.google.common.annotations.Beta;, +   * Creates an {@link AsyncCallable} from a {@link Callable}., +   *, +   * <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from, +   * {@link ListeningExecutorService#submit(Callable)}., +   *, +   * @since 20.0, +   */, +  @Beta, +  @GwtIncompatible, +  public static <T> AsyncCallable<T> asAsyncCallable(, +      final Callable<T> callable,, +      final ListeningExecutorService listeningExecutorService) {, +    checkNotNull(callable);, +    checkNotNull(listeningExecutorService);, +    return new AsyncCallable<T>() {, +      @Override]