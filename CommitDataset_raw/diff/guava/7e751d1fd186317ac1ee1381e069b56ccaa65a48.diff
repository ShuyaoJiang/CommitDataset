[+++ b/guava/src/com/google/common/graph/Graph.java, + * with an undirected graph, where an edge that connects node U to node V also connects node V to, + * node U. If the relation to be modeled is asymmetric (such as "employees managed"), that can be, +++ b/guava/src/com/google/common/graph/Graph.java, + * with an undirected graph, where an edge that connects node U to node V also connects node V to, + * node U. If the relation to be modeled is asymmetric (such as "employees managed"), that can be, +++ b/guava/src/com/google/common/graph/Network.java, + * with an undirected graph, where an edge that connects node U to node V also connects node V to, + * node U. If the relation to be modeled is asymmetric (such as "employees managed"), that can be, +++ b/guava/src/com/google/common/graph/Graph.java, + * with an undirected graph, where an edge that connects node U to node V also connects node V to, + * node U. If the relation to be modeled is asymmetric (such as "employees managed"), that can be, +++ b/guava/src/com/google/common/graph/Network.java, + * with an undirected graph, where an edge that connects node U to node V also connects node V to, + * node U. If the relation to be modeled is asymmetric (such as "employees managed"), that can be, +++ b/guava/src/com/google/common/graph/ValueGraph.java, + * with an undirected graph, where an edge that connects node U to node V also connects node V to, + * node U. If the relation to be modeled is asymmetric (such as "employees managed"), that can be]