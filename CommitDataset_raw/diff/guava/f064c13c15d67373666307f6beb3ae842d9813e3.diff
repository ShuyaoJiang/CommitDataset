[+++ b/android/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +  public void testParanoidHashBytes() {, +    HashFn hf = new HashFn() {, +      @Override public byte[] hash(byte[] input, int seed) {, +        return murmur3_32(seed).hashBytes(input).asBytes();, +      }, +    };, +    // Murmur3A, MurmurHash3 for x86, 32-bit (MurmurHash3_x86_32), +    // http://code.google.com/p/smhasher/source/browse/trunk/main.cpp, +    HashTestUtils.verifyHashFunction(hf, 32, 0xB0F57EE3);, +  }, +, +++ b/android/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +  public void testParanoidHashBytes() {, +    HashFn hf = new HashFn() {, +      @Override public byte[] hash(byte[] input, int seed) {, +        return murmur3_32(seed).hashBytes(input).asBytes();, +      }, +    };, +    // Murmur3A, MurmurHash3 for x86, 32-bit (MurmurHash3_x86_32), +    // http://code.google.com/p/smhasher/source/browse/trunk/main.cpp, +    HashTestUtils.verifyHashFunction(hf, 32, 0xB0F57EE3);, +  }, +, +++ b/android/guava/src/com/google/common/hash/AbstractStreamingHashFunction.java, +    return hashBytes(input, 0, input.length);, +++ b/android/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +  public void testParanoidHashBytes() {, +    HashFn hf = new HashFn() {, +      @Override public byte[] hash(byte[] input, int seed) {, +        return murmur3_32(seed).hashBytes(input).asBytes();, +      }, +    };, +    // Murmur3A, MurmurHash3 for x86, 32-bit (MurmurHash3_x86_32), +    // http://code.google.com/p/smhasher/source/browse/trunk/main.cpp, +    HashTestUtils.verifyHashFunction(hf, 32, 0xB0F57EE3);, +  }, +, +++ b/android/guava/src/com/google/common/hash/AbstractStreamingHashFunction.java, +    return hashBytes(input, 0, input.length);, +++ b/android/guava/src/com/google/common/hash/Murmur3_32HashFunction.java, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +import java.nio.charset.Charset;, +  private static final int CHUNK_SIZE = 4;, +  , +  @Override, +  public HashCode hashString(CharSequence input, Charset charset) {, +    return hashBytes(input.toString().getBytes(charset));, +  }, +, +  @Override, +  public HashCode hashBytes(byte[] input, int off, int len) {, +    checkPositionIndexes(off, off + len, input.length);, +    int h1 = seed;, +    int i;, +    for (i = 0; i + CHUNK_SIZE <= len; i += CHUNK_SIZE) {, +      int k1 = mixK1(getIntLittleEndian(input, off + i));, +      h1 = mixH1(h1, k1);, +    }, +    , +    int k1 = 0;, +    for (int shift = 0; i < len; i++, shift += 8) {, +      k1 ^= toInt(input[off + i]) << shift;, +    }, +    h1 ^= mixK1(k1);, +    return fmix(h1, len);, +  }, +  , +  private static int getIntLittleEndian(byte[] input, int offset) {, +    return Ints.fromBytes(input[offset + 3], input[offset + 2], input[offset + 1], input[offset]);, +  }, +, +++ b/android/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +  public void testParanoidHashBytes() {, +    HashFn hf = new HashFn() {, +      @Override public byte[] hash(byte[] input, int seed) {, +        return murmur3_32(seed).hashBytes(input).asBytes();, +      }, +    };, +    // Murmur3A, MurmurHash3 for x86, 32-bit (MurmurHash3_x86_32), +    // http://code.google.com/p/smhasher/source/browse/trunk/main.cpp, +    HashTestUtils.verifyHashFunction(hf, 32, 0xB0F57EE3);, +  }, +, +++ b/android/guava/src/com/google/common/hash/AbstractStreamingHashFunction.java, +    return hashBytes(input, 0, input.length);, +++ b/android/guava/src/com/google/common/hash/Murmur3_32HashFunction.java, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +import java.nio.charset.Charset;, +  private static final int CHUNK_SIZE = 4;, +  , +  @Override, +  public HashCode hashString(CharSequence input, Charset charset) {, +    return hashBytes(input.toString().getBytes(charset));, +  }, +, +  @Override, +  public HashCode hashBytes(byte[] input, int off, int len) {, +    checkPositionIndexes(off, off + len, input.length);, +    int h1 = seed;]