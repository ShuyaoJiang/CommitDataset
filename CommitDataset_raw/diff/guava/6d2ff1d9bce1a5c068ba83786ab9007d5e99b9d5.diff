[+++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      counter.recordHits(1);, +      counter.recordMisses(1);, +      counter1.recordHits(1);, +      counter1.recordMisses(1);, +      counter2.recordHits(1);, +      counter2.recordMisses(1);, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      counter.recordHits(1);, +      counter.recordMisses(1);, +      counter1.recordHits(1);, +      counter1.recordMisses(1);, +      counter2.recordHits(1);, +      counter2.recordMisses(1);, +++ /dev/null, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      counter.recordHits(1);, +      counter.recordMisses(1);, +      counter1.recordHits(1);, +      counter1.recordMisses(1);, +      counter2.recordHits(1);, +      counter2.recordMisses(1);, +++ /dev/null, +++ b/guava-tests/test/com/google/common/cache/CacheLoadingTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.cache;, +, +import static com.google.common.cache.TestingCacheLoaders.bulkLoader;, +import static com.google.common.cache.TestingCacheLoaders.constantLoader;, +import static com.google.common.cache.TestingCacheLoaders.errorLoader;, +import static com.google.common.cache.TestingCacheLoaders.exceptionLoader;, +import static com.google.common.cache.TestingCacheLoaders.identityLoader;, +import static com.google.common.cache.TestingRemovalListeners.countingRemovalListener;, +import static java.util.Arrays.asList;, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.cache.CacheLoader.InvalidCacheLoadException;, +import com.google.common.cache.TestingCacheLoaders.CountingLoader;, +import com.google.common.cache.TestingCacheLoaders.IdentityLoader;, +import com.google.common.cache.TestingRemovalListeners.CountingRemovalListener;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.Lists;, +import com.google.common.collect.Maps;, +import com.google.common.util.concurrent.Callables;, +import com.google.common.util.concurrent.ExecutionError;, +import com.google.common.util.concurrent.UncheckedExecutionException;, +, +import junit.framework.TestCase;, +, +import java.io.IOException;, +import java.lang.ref.WeakReference;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReferenceArray;, +, +/**, + * Tests relating to cache loading: concurrent loading, exceptions during loading, etc., + *, + * @author mike nonemacher, + */, +public class CacheLoadingTest extends TestCase {, +  public void testLoad() throws ExecutionException {, +    Cache<Object, Object> cache = CacheBuilder.newBuilder().build(identityLoader());, +    CacheStats stats = cache.stats();, +    assertEquals(0, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    Object key = new Object();, +    assertSame(key, cache.get(key));, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    key = new Object();, +    assertSame(key, cache.getUnchecked(key));, +    stats = cache.stats();]