[+++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Lists;, +import com.google.common.collect.Queues;, +import java.util.List;, +import java.util.Queue;, +import java.util.concurrent.CyclicBarrier;, +import java.util.concurrent.Executor;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.RejectedExecutionException;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import junit.framework.TestCase;, +, +/**, + * Tests {@link SequentialExecutor}., + *, + * @author JJ Furman, + */, +public class SequentialExecutorTest extends TestCase {, +  private static class FakeExecutor implements Executor {, +    Queue<Runnable> tasks = Queues.newArrayDeque();, +    @Override public void execute(Runnable command) {, +      tasks.add(command);, +    }, +, +    boolean hasNext() {, +      return !tasks.isEmpty();, +    }, +, +    void runNext() {, +      assertTrue("expected at least one task to run", hasNext());, +      tasks.remove().run();, +    }, +, +    void runAll() {, +      while (hasNext()) {, +        runNext();, +      }, +    }, +  }, +  private FakeExecutor fakePool;, +  private SequentialExecutor e;, +, +  @Override, +  public void setUp() {, +    fakePool = new FakeExecutor();, +    e = new SequentialExecutor(fakePool);, +  }, +, +  public void testConstructingWithNullExecutor_fails() {, +    try {, +      new SequentialExecutor(null);, +      fail("Should have failed with NullPointerException.");, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  public void testBasics() {, +    final AtomicInteger totalCalls = new AtomicInteger();, +    Runnable intCounter = new Runnable() {, +      @Override, +      public void run() {, +        totalCalls.incrementAndGet();, +        // Make sure that no other tasks are scheduled to run while this is running., +        assertFalse(fakePool.hasNext());, +      }, +    };, +, +    assertFalse(fakePool.hasNext());, +    e.execute(intCounter);, +    // A task should have been scheduled, +    assertTrue(fakePool.hasNext());, +    e.execute(intCounter);, +    // Our executor hasn't run any tasks yet., +    assertEquals(0, totalCalls.get());, +    fakePool.runAll();, +    assertEquals(2, totalCalls.get());, +    // Queue is empty so no runner should be scheduled., +    assertFalse(fakePool.hasNext());]