[+++ b/android/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java, +import static com.google.common.base.Objects.equal;, +    assertIntact(mmHeap);, +          assertThat(mmHeap).contains(v);, +        assertIntact(mmHeap);, +    assertIntact(mmHeap);, +    assertIntact(q);, +    assertIntact(q);, +, +          @Override, +          protected Iterator<T> newTargetIterator() {, +, +          @Override, +          protected void verify(List<T> elements) {, +            assertEquals(Sets.newHashSet(elements), Sets.newHashSet(mmHeap.iterator()));, +            assertIntact(mmHeap);, +      assertIntactUsingSeed(seed, mmHeap);, +      assertIntactUsingSeed(seed, mmHeap);, +        assertIntactUsingStartedWith(perm, q);, +        assertEqualsUsingSeed(seed, expected, elements);, +        assertEqualsUsingSeed(seed, expected, elements);, +      assertEqualsUsingSeed(seed, expected, elements);, +    assertIntact(q);, +      assertIntact(q);, +    assertEqualsUsingSeed(seed, expected, elements);, +      assertEqualsUsingSeed(seed, expected, elements);, +    assertIntact(q);, +        assertEqualsUsingSeed(seed, control.poll(), q.pollFirst());, +      assertEqualsUsingSeed(seed, control.poll(), q.pollFirst());, +      assertEqualsUsingStartedWith(perm, expected, elements);, +        assertIntact(queue);, +      assertIntact(queue);, +      assertIntact(queue);, +, +  private static void assertIntact(MinMaxPriorityQueue<?> q) {, +    if (!q.isIntact()) {, +      fail("State " + Arrays.toString(q.toArray()));, +    }, +  }, +, +  private static void assertIntactUsingSeed(long seed, MinMaxPriorityQueue<?> q) {, +    if (!q.isIntact()) {, +      fail("Using seed " + seed + ". State " + Arrays.toString(q.toArray()));, +    }, +  }, +, +  private static void assertIntactUsingStartedWith(, +      Collection<?> startedWith, MinMaxPriorityQueue<?> q) {, +    if (!q.isIntact()) {, +      fail("Started with " + startedWith + ". State " + Arrays.toString(q.toArray()));, +    }, +  }, +, +  private static void assertEqualsUsingSeed(long seed, Object expected, Object actual) {, +    if (!equal(actual, expected)) {, +      // fail(), but with the JUnit-supplied message., +      assertEquals("Using seed " + seed, expected, actual);, +    }, +  }, +, +  private static void assertEqualsUsingStartedWith(, +      Collection<?> startedWith, Object expected, Object actual) {, +    if (!equal(actual, expected)) {, +      // fail(), but with the JUnit-supplied message., +      assertEquals("Started with " + startedWith, expected, actual);, +    }, +  }, +++ b/android/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java, +import static com.google.common.base.Objects.equal;, +    assertIntact(mmHeap);, +          assertThat(mmHeap).contains(v);, +        assertIntact(mmHeap);, +    assertIntact(mmHeap);, +    assertIntact(q);, +    assertIntact(q);, +, +          @Override, +          protected Iterator<T> newTargetIterator() {, +, +          @Override, +          protected void verify(List<T> elements) {, +            assertEquals(Sets.newHashSet(elements), Sets.newHashSet(mmHeap.iterator()));, +            assertIntact(mmHeap);, +      assertIntactUsingSeed(seed, mmHeap);, +      assertIntactUsingSeed(seed, mmHeap);, +        assertIntactUsingStartedWith(perm, q);, +        assertEqualsUsingSeed(seed, expected, elements);, +        assertEqualsUsingSeed(seed, expected, elements);, +      assertEqualsUsingSeed(seed, expected, elements);, +    assertIntact(q);, +      assertIntact(q);, +    assertEqualsUsingSeed(seed, expected, elements);, +      assertEqualsUsingSeed(seed, expected, elements);, +    assertIntact(q);, +        assertEqualsUsingSeed(seed, control.poll(), q.pollFirst());, +      assertEqualsUsingSeed(seed, control.poll(), q.pollFirst());, +      assertEqualsUsingStartedWith(perm, expected, elements);, +        assertIntact(queue);, +      assertIntact(queue);, +      assertIntact(queue);]