[+++ b/guava/src/com/google/common/net/InetAddresses.java, +import com.google.common.base.Objects;, +  private static final Inet4Address LOOPBACK4 = (Inet4Address) forString("127.0.0.1");, +  private static final Inet4Address ANY4 = (Inet4Address) forString("0.0.0.0");, +   * Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address., +   * @param bytes byte array representing an IPv4 address (should be of length 4), +   * @return {@link Inet4Address} corresponding to the supplied byte array, +   * @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created, +   * Returns the {@link InetAddress} having the given string representation., +   * @param ipString {@code String} containing an IPv4 or IPv6 string literal, e.g., +   *     {@code "192.168.0.1"} or {@code "2001:db8::1"}, +   * @throws IllegalArgumentException if the argument is not a valid IP string literal, +   * @param hextets {@code int[]} mutable array of eight 16-bit hextets, +   * @param hextets {@code int[]} array of eight 16-bit hextets, or -1s, +   * @param ip {@link Inet6Address} to be examined for embedded IPv4 compatible address format, +   * @param ip {@link Inet6Address} to be examined for an embedded IPv4 address, +   * @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address, +    return getInet4Address(Arrays.copyOfRange(ip.getAddress(), 12, 16));, +   * @param ip {@link Inet6Address} to be examined for 6to4 address format, +   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address, +   * @return {@link Inet4Address} of embedded IPv4 in 6to4 address, +   * @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address, +    return getInet4Address(Arrays.copyOfRange(ip.getAddress(), 2, 6));, +   * A simple immutable data class to encapsulate the information to be found in a, +     * @throws IllegalArgumentException if either of the {@code port} or the {@code flags}, +     *     arguments are out of range of an unsigned short, +    public TeredoInfo(, +        @Nullable Inet4Address server, @Nullable Inet4Address client, int port, int flags) {, +      this.server = Objects.firstNonNull(server, ANY4);, +      this.client = Objects.firstNonNull(client, ANY4);, +   * @param ip {@link Inet6Address} to be examined for Teredo address format, +   * @param ip {@link Inet6Address} to be examined for embedded Teredo information, +   * @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address, +    Inet4Address server = getInet4Address(Arrays.copyOfRange(bytes, 4, 8));, +    byte[] clientBytes = Arrays.copyOfRange(bytes, 12, 16);, +   * @param ip {@link Inet6Address} to be examined for ISATAP address format, +   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address, +   * @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address, +    return getInet4Address(Arrays.copyOfRange(ip.getAddress(), 12, 16));, +   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address, +   * @return {@code true} if there is an embedded IPv4 client address, +    return isCompatIPv4Address(ip) || is6to4Address(ip) || isTeredoAddress(ip);, +   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address, +   * @return {@link Inet4Address} of embedded IPv4 client address, +   * @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address, +        String.format("'%s' has no embedded IPv4 address.", toAddrString(ip)));, +   * @param ipString {@code String} to be examined for embedded IPv4-mapped IPv6 address format, +  public static InetAddress fromLittleEndianByteArray(byte[] addr) throws UnknownHostException {, +   * @return a new InetAddress that is one more than the passed in address, +   * @throws IllegalArgumentException if InetAddress is at the end of its range, +   *     ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff for IPv6]