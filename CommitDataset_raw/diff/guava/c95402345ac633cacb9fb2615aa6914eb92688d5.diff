[+++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java, +    SHA_384("SHA-384", Hashing.sha384()),, +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java, +    SHA_384("SHA-384", Hashing.sha384()),, +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestCreationBenchmark.java, +  @Param({"MD5", "SHA-1", "SHA-256", "SHA-384", "SHA-512"}), +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java, +    SHA_384("SHA-384", Hashing.sha384()),, +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestCreationBenchmark.java, +  @Param({"MD5", "SHA-1", "SHA-256", "SHA-384", "SHA-512"}), +++ b/guava-tests/test/com/google/common/hash/HashFunctionEnum.java, +  SHA384(Hashing.sha384()),, +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java, +    SHA_384("SHA-384", Hashing.sha384()),, +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestCreationBenchmark.java, +  @Param({"MD5", "SHA-1", "SHA-256", "SHA-384", "SHA-512"}), +++ b/guava-tests/test/com/google/common/hash/HashFunctionEnum.java, +  SHA384(Hashing.sha384()),, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +  public void testSha384() {, +    HashTestUtils.checkAvalanche(Hashing.sha384(), 100, 0.4);, +    HashTestUtils.checkNo2BitCharacteristics(Hashing.sha384());, +    HashTestUtils.checkNoFunnels(Hashing.sha384());, +    HashTestUtils.assertInvariants(Hashing.sha384());, +    assertEquals("Hashing.sha384()", Hashing.sha384().toString());, +  }, +, +          .put(Hashing.sha384(), EMPTY_STRING,, +               "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da2", +               + "74edebfe76f65fbd51ad2f14898b95b"), +          .put(Hashing.sha384(), TQBFJOTLD,, +               "ca737f1014a48f4c0b6dd43cb177b0afd9e5169367544c494011e3317dbf9a509", +               + "cb1e5dc1e85a941bbee3d7f2afbc9b1"), +          .put(Hashing.sha384(), TQBFJOTLDP,, +               "ed892481d8272ca6df370bf706e4d7bc1b5739fa2177aae6c50e946678718fc67", +               + "a7af2819a021c2fc34e91bdb63409d7"), +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java, +    SHA_384("SHA-384", Hashing.sha384()),, +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestCreationBenchmark.java, +  @Param({"MD5", "SHA-1", "SHA-256", "SHA-384", "SHA-512"}), +++ b/guava-tests/test/com/google/common/hash/HashFunctionEnum.java, +  SHA384(Hashing.sha384()),, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +  public void testSha384() {, +    HashTestUtils.checkAvalanche(Hashing.sha384(), 100, 0.4);, +    HashTestUtils.checkNo2BitCharacteristics(Hashing.sha384());, +    HashTestUtils.checkNoFunnels(Hashing.sha384());, +    HashTestUtils.assertInvariants(Hashing.sha384());, +    assertEquals("Hashing.sha384()", Hashing.sha384().toString());, +  }, +, +          .put(Hashing.sha384(), EMPTY_STRING,, +               "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da2", +               + "74edebfe76f65fbd51ad2f14898b95b"), +          .put(Hashing.sha384(), TQBFJOTLD,, +               "ca737f1014a48f4c0b6dd43cb177b0afd9e5169367544c494011e3317dbf9a509", +               + "cb1e5dc1e85a941bbee3d7f2afbc9b1"), +          .put(Hashing.sha384(), TQBFJOTLDP,, +               "ed892481d8272ca6df370bf706e4d7bc1b5739fa2177aae6c50e946678718fc67", +               + "a7af2819a021c2fc34e91bdb63409d7"), +++ b/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java, +          .put("SHA-384", Hashing.sha384()), +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestAlgorithmBenchmark.java, +    SHA_384("SHA-384", Hashing.sha384()),, +++ b/guava-tests/benchmark/com/google/common/hash/MessageDigestCreationBenchmark.java, +  @Param({"MD5", "SHA-1", "SHA-256", "SHA-384", "SHA-512"}), +++ b/guava-tests/test/com/google/common/hash/HashFunctionEnum.java, +  SHA384(Hashing.sha384()),, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +  public void testSha384() {, +    HashTestUtils.checkAvalanche(Hashing.sha384(), 100, 0.4);, +    HashTestUtils.checkNo2BitCharacteristics(Hashing.sha384());, +    HashTestUtils.checkNoFunnels(Hashing.sha384());, +    HashTestUtils.assertInvariants(Hashing.sha384());, +    assertEquals("Hashing.sha384()", Hashing.sha384().toString());, +  }, +, +          .put(Hashing.sha384(), EMPTY_STRING,, +               "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da2", +               + "74edebfe76f65fbd51ad2f14898b95b"), +          .put(Hashing.sha384(), TQBFJOTLD,, +               "ca737f1014a48f4c0b6dd43cb177b0afd9e5169367544c494011e3317dbf9a509", +               + "cb1e5dc1e85a941bbee3d7f2afbc9b1"), +          .put(Hashing.sha384(), TQBFJOTLDP,, +               "ed892481d8272ca6df370bf706e4d7bc1b5739fa2177aae6c50e946678718fc67", +               + "a7af2819a021c2fc34e91bdb63409d7"), +++ b/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java, +          .put("SHA-384", Hashing.sha384()), +++ b/guava/src/com/google/common/hash/Hashing.java, +   * Returns a hash function implementing the SHA-384 algorithm (384 hash bits) by delegating to, +   * the SHA-384 {@link MessageDigest}., +   *, +   * @since 19.0, +   */, +  public static HashFunction sha384() {, +    return Sha384Holder.SHA_384;, +  }, +, +  private static class Sha384Holder {, +    static final HashFunction SHA_384 =]