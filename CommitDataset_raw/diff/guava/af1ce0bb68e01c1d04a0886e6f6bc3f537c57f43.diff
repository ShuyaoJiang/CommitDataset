[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.sanityCheckCollection;, +    validateGraph(graph);, +  }, +, +  static <N> void validateGraph(Graph<N> graph) {, +    sanityCheckCollection(graph.nodes());, +    sanityCheckCollection(graph.edges());, +    Set<Endpoints<N>> allEndpoints = new HashSet<Endpoints<N>>();, +, +    for (N node : graph.nodes()) {, +      sanityCheckCollection(graph.adjacentNodes(node));, +      sanityCheckCollection(graph.predecessors(node));, +      sanityCheckCollection(graph.successors(node));, +, +      for (N adjacentNode : graph.adjacentNodes(node)) {, +      for (N predecessor : graph.predecessors(node)) {, +      for (N successor : graph.successors(node)) {, +        allEndpoints.add(Endpoints.of(graph, node, successor));, +    assertThat(graph.removeNode(N1)).isFalse();, +  public void removeEdge_existingEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.successors(N1)).containsExactly(N2);, +    assertThat(graph.predecessors(N2)).containsExactly(N1);, +    assertThat(graph.removeEdge(N1, N2)).isTrue();, +    assertThat(graph.removeEdge(N1, N2)).isFalse();, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N2)).isEmpty();, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.sanityCheckCollection;, +    validateGraph(graph);, +  }, +, +  static <N> void validateGraph(Graph<N> graph) {, +    sanityCheckCollection(graph.nodes());, +    sanityCheckCollection(graph.edges());, +    Set<Endpoints<N>> allEndpoints = new HashSet<Endpoints<N>>();, +, +    for (N node : graph.nodes()) {, +      sanityCheckCollection(graph.adjacentNodes(node));, +      sanityCheckCollection(graph.predecessors(node));, +      sanityCheckCollection(graph.successors(node));, +, +      for (N adjacentNode : graph.adjacentNodes(node)) {, +      for (N predecessor : graph.predecessors(node)) {, +      for (N successor : graph.successors(node)) {, +        allEndpoints.add(Endpoints.of(graph, node, successor));, +    assertThat(graph.removeNode(N1)).isFalse();, +  public void removeEdge_existingEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.successors(N1)).containsExactly(N2);, +    assertThat(graph.predecessors(N2)).containsExactly(N1);, +    assertThat(graph.removeEdge(N1, N2)).isTrue();, +    assertThat(graph.removeEdge(N1, N2)).isFalse();, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N2)).isEmpty();, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import static com.google.common.graph.TestUtil.sanityCheckCollection;, +    sanityCheckCollection(network.nodes());, +    sanityCheckCollection(network.edges());, +    sanityCheckCollection(asGraph.edges());, +, +      sanityCheckCollection(network.adjacentNodes(node));, +      sanityCheckCollection(network.predecessors(node));, +      sanityCheckCollection(network.successors(node));, +      sanityCheckCollection(network.incidentEdges(node));, +      sanityCheckCollection(network.inEdges(node));, +      sanityCheckCollection(network.outEdges(node));, +, +    assertFalse(network.removeNode(N1));, +  public void removeEdge_existingEdge() {, +    addEdge(E12, N1, N2);, +    assertTrue(network.removeEdge(E12));, +    assertFalse(network.removeEdge(E12));, +    assertThat(network.edges()).doesNotContain(E12);, +    assertThat(network.edgesConnecting(N1, N2)).isEmpty();, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.sanityCheckCollection;, +    validateGraph(graph);, +  }, +, +  static <N> void validateGraph(Graph<N> graph) {]