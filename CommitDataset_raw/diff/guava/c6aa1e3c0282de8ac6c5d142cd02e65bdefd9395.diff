[+++ b/guava/src/com/google/common/math/BigIntegerMath.java, +import static java.math.RoundingMode.FLOOR;, +    int approxSize = IntMath.divide(n * IntMath.log2(n, CEILING), Long.SIZE, CEILING);, +    ArrayList<BigInteger> bignums = new ArrayList<BigInteger>(approxSize);, +    int productBits = LongMath.log2(product, FLOOR) + 1;, +    int bits = LongMath.log2(startingNumber, FLOOR) + 1;, +      productBits = LongMath.log2(product, FLOOR) + 1;, +  static BigInteger listProduct(List<BigInteger> nums, int start, int end) {, +    switch (end - start) {, +      case 0:, +        return BigInteger.ONE;, +      case 1:, +        return nums.get(start);, +      case 2:, +        return nums.get(start).multiply(nums.get(start + 1));, +      case 3:, +        return nums.get(start).multiply(nums.get(start + 1)).multiply(nums.get(start + 2));, +      default:, +  }]