[+++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +  public void testFromFluentFuturePassingAsNonFluent() {, +    ListenableFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +    assertThat(FluentFuture.from(f)).isSameAs(f);, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +  public void testFromFluentFuturePassingAsNonFluent() {, +    ListenableFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +    assertThat(FluentFuture.from(f)).isSameAs(f);, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/FluentFuture.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +   * Simply returns its argument., +   *, +   * @deprecated no need to use this, +   * @since NEXT, +   */, +  @Deprecated, +  public static <V> FluentFuture<V> from(FluentFuture<V> future) {, +    return checkNotNull(future);, +  }, +, +  /**, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +  public void testFromFluentFuturePassingAsNonFluent() {, +    ListenableFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +    assertThat(FluentFuture.from(f)).isSameAs(f);, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/FluentFuture.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +   * Simply returns its argument., +   *, +   * @deprecated no need to use this, +   * @since NEXT, +   */, +  @Deprecated, +  public static <V> FluentFuture<V> from(FluentFuture<V> future) {, +    return checkNotNull(future);, +  }, +, +  /**, +++ b/guava-gwt/test/com/google/common/util/concurrent/FluentFutureTest_gwt.java, +public void testFromFluentFuturePassingAsNonFluent() throws Exception {, +  com.google.common.util.concurrent.FluentFutureTest testCase = new com.google.common.util.concurrent.FluentFutureTest();, +  testCase.testFromFluentFuturePassingAsNonFluent();, +}, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +  public void testFromFluentFuturePassingAsNonFluent() {, +    ListenableFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +    assertThat(FluentFuture.from(f)).isSameAs(f);, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/FluentFuture.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +   * Simply returns its argument., +   *, +   * @deprecated no need to use this, +   * @since NEXT, +   */, +  @Deprecated, +  public static <V> FluentFuture<V> from(FluentFuture<V> future) {, +    return checkNotNull(future);, +  }, +, +  /**, +++ b/guava-gwt/test/com/google/common/util/concurrent/FluentFutureTest_gwt.java, +public void testFromFluentFuturePassingAsNonFluent() throws Exception {, +  com.google.common.util.concurrent.FluentFutureTest testCase = new com.google.common.util.concurrent.FluentFutureTest();, +  testCase.testFromFluentFuturePassingAsNonFluent();, +}, +, +++ b/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +  public void testFromFluentFuturePassingAsNonFluent() {, +    ListenableFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +    assertThat(FluentFuture.from(f)).isSameAs(f);, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +  public void testFromFluentFuturePassingAsNonFluent() {, +    ListenableFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +    assertThat(FluentFuture.from(f)).isSameAs(f);, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/FluentFuture.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +   * Simply returns its argument., +   *, +   * @deprecated no need to use this, +   * @since NEXT, +   */, +  @Deprecated, +  public static <V> FluentFuture<V> from(FluentFuture<V> future) {]