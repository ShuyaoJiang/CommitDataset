[+++ b/guava-tests/test/com/google/common/hash/Murmur3Hash128Test.java, +import java.nio.ByteOrder;, + * Tests for {@link Murmur3_128HashFunction}., +  public void testKnownValues() {, +    assertHash(0, 0x629942693e10f867L, 0x92db0b82baeb5347L, "hell");, +    assertHash(1, 0xa78ddff5adae8d10L, 0x128900ef20900135L, "hello");, +    assertHash(2, 0x8a486b23f422e826L, 0xf962a2c58947765fL, "hello ");, +    assertHash(3, 0x2ea59f466f6bed8cL, 0xc610990acc428a17L, "hello w");, +    assertHash(4, 0x79f6305a386c572cL, 0x46305aed3483b94eL, "hello wo");, +    assertHash(5, 0xc2219d213ec1f1b5L, 0xa1d8e2e0a52785bdL, "hello wor");, +    assertHash(0, 0xe34bbc7bbc071b6cL, 0x7a433ca9c49a9347L,, +        "The quick brown fox jumps over the lazy dog");, +    assertHash(0, 0x658ca970ff85269aL, 0x43fee3eaa68e5c3eL,, +        "The quick brown fox jumps over the lazy cog");, +  private static void assertHash(int seed, long expected1, long expected2, String stringInput) {, +    byte[] expectedHash = HashTestUtils.toBytes(ByteOrder.LITTLE_ENDIAN, expected1, expected2);, +    byte[] input = HashTestUtils.ascii(stringInput);, +    byte[] actual1 = murmur3_128(seed).hashBytes(input).asBytes();, +    byte[] actual2 = murmur3_128(seed).newHasher().putBytes(input).hash().asBytes();, +    assertTrue(Arrays.equals(expectedHash, actual1));, +    assertTrue(Arrays.equals(expectedHash, actual2));, +    // Murmur3A, MurmurHash3 for x86, 128-bit (MurmurHash3_x86_128), +    // http://code.google.com/p/smhasher/source/browse/trunk/main.cpp, +, +  public void testInvariants() {, +    HashTestUtils.assertInvariants(murmur3_128());, +  }, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash128Test.java, +import java.nio.ByteOrder;, + * Tests for {@link Murmur3_128HashFunction}., +  public void testKnownValues() {, +    assertHash(0, 0x629942693e10f867L, 0x92db0b82baeb5347L, "hell");, +    assertHash(1, 0xa78ddff5adae8d10L, 0x128900ef20900135L, "hello");, +    assertHash(2, 0x8a486b23f422e826L, 0xf962a2c58947765fL, "hello ");, +    assertHash(3, 0x2ea59f466f6bed8cL, 0xc610990acc428a17L, "hello w");, +    assertHash(4, 0x79f6305a386c572cL, 0x46305aed3483b94eL, "hello wo");, +    assertHash(5, 0xc2219d213ec1f1b5L, 0xa1d8e2e0a52785bdL, "hello wor");, +    assertHash(0, 0xe34bbc7bbc071b6cL, 0x7a433ca9c49a9347L,, +        "The quick brown fox jumps over the lazy dog");, +    assertHash(0, 0x658ca970ff85269aL, 0x43fee3eaa68e5c3eL,, +        "The quick brown fox jumps over the lazy cog");, +  private static void assertHash(int seed, long expected1, long expected2, String stringInput) {, +    byte[] expectedHash = HashTestUtils.toBytes(ByteOrder.LITTLE_ENDIAN, expected1, expected2);, +    byte[] input = HashTestUtils.ascii(stringInput);, +    byte[] actual1 = murmur3_128(seed).hashBytes(input).asBytes();, +    byte[] actual2 = murmur3_128(seed).newHasher().putBytes(input).hash().asBytes();, +    assertTrue(Arrays.equals(expectedHash, actual1));, +    assertTrue(Arrays.equals(expectedHash, actual2));, +    // Murmur3A, MurmurHash3 for x86, 128-bit (MurmurHash3_x86_128), +    // http://code.google.com/p/smhasher/source/browse/trunk/main.cpp, +, +  public void testInvariants() {, +    HashTestUtils.assertInvariants(murmur3_128());, +  }, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, + * Tests for {@link Murmur3_32HashFunction}., +  public void testKnownIntegerInputs() {, +    assertHash(593689054, 0);, +    assertHash(-189366624, -42);, +    assertHash(-1134849565, 42);, +    assertHash(-1718298732, Integer.MIN_VALUE);, +    assertHash(-1653689534, Integer.MAX_VALUE);, +  }, +, +  public void testKnownStringInputs() {, +    assertHash(0, "");, +    assertHash(679745764, "k");, +    assertHash(-675079799, "hello");, +    assertHash(1935035788, "http://www.google.com/");, +    assertHash(-528633700, "The quick brown fox jumps over the lazy dog");, +  }, +, +  private static void assertHash(int expected, int input) {, +    assertEquals(expected, murmur3_32().hashInt(input).asInt());, +    assertEquals(expected, murmur3_32().newHasher().putInt(input).hash().asInt());, +  }, +, +  private static void assertHash(int expected, String input) {, +    assertEquals(expected, murmur3_32().hashString(input).asInt());, +    assertEquals(expected, murmur3_32().newHasher().putString(input).hash().asInt());, +  }, +, +    // Murmur3A, MurmurHash3 for x86, 32-bit (MurmurHash3_x86_32), +    // http://code.google.com/p/smhasher/source/browse/trunk/main.cpp, +, +  public void testInvariants() {, +    HashTestUtils.assertInvariants(murmur3_32());, +  }]