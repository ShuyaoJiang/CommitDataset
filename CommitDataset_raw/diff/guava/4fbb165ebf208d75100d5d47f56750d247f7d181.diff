[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +import static com.google.common.base.Preconditions.checkPositionIndex;, +import com.google.common.annotations.VisibleForTesting;, + *   String trimmed = {@link #whitespace() whitespace()}.{@link #trimFrom trimFrom}(userInput);, + *   if ({@link #ascii() ascii()}.{@link #matchesAllOf matchesAllOf}(s)) { ... }</pre>, +  // Constant matcher factory methods, +, +  /**, +   * Matches any character., +   *, +   * @since 19.0 (since 1.0 as constant {@code ANY}), +   */, +  public static CharMatcher any() {, +    return Any.INSTANCE;, +  }, +, +  /**, +   * Matches no characters., +   *, +   * @since 19.0 (since 1.0 as constant {@code NONE}), +   */, +  public static CharMatcher none() {, +    return None.INSTANCE;, +  }, +, +  /**, +   * Determines whether a character is whitespace according to the latest Unicode standard, as, +   * illustrated <a href="http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D">here</a>., +   * This is not the same definition used by other Java APIs. (See a <a, +   * href="http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ">comparison of several, +   * definitions of "whitespace"</a>.), +   *, +   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this matcher to keep it up, +   * to date., +   *, +   * @since 19.0 (since 1.0 as constant {@code WHITESPACE}), +   */, +  public static CharMatcher whitespace() {, +    return Whitespace.INSTANCE;, +  }, +, +  /**, +   * Determines whether a character is a breaking whitespace (that is, a whitespace which can be, +   * interpreted as a break between words for formatting purposes). See {@link #whitespace()} for a, +   * discussion of that term., +   *, +   * @since 19.0 (since 2.0 as constant {@code BREAKING_WHITESPACE}), +   */, +  public static CharMatcher breakingWhitespace() {, +    return BreakingWhitespace.INSTANCE;, +  }, +, +  /**, +   * Determines whether a character is ASCII, meaning that its code point is less than 128., +   *, +   * @since 19.0 (since 1.0 as constant {@code ASCII}), +   */, +  public static CharMatcher ascii() {, +    return Ascii.INSTANCE;, +  }, +, +  /**, +   * Determines whether a character is a digit according to, +   * <a href="http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D">Unicode</a>., +   * If you only care to match ASCII digits, you can use {@code inRange('0', '9')}., +   *, +   * @since 19.0 (since 1.0 as constant {@code DIGIT}), +   */, +  public static CharMatcher digit() {, +    return Digit.INSTANCE;, +  }, +, +  /**, +   * Determines whether a character is a digit according to {@linkplain Character#isDigit(char), +   * Java's definition}. If you only care to match ASCII digits, you can use {@code inRange('0',, +   * '9')}., +   *, +   * @since 19.0 (since 1.0 as constant {@code JAVA_DIGIT}), +   */, +  public static CharMatcher javaDigit() {, +    return JavaDigit.INSTANCE;, +  }, +, +  /**, +   * Determines whether a character is a letter according to {@linkplain Character#isLetter(char), +   * Java's definition}. If you only care to match letters of the Latin alphabet, you can use {@code, +   * inRange('a', 'z').or(inRange('A', 'Z'))}., +   *, +   * @since 19.0 (since 1.0 as constant {@code JAVA_LETTER}), +   */, +  public static CharMatcher javaLetter() {, +    return JavaLetter.INSTANCE;, +  }, +, +  /**, +   * Determines whether a character is a letter or digit according to {@linkplain, +   * Character#isLetterOrDigit(char) Java's definition}., +   *, +   * @since 19.0 (since 1.0 as constant {@code JAVA_LETTER_OR_DIGIT})., +   */]