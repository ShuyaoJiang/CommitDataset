[+++ b/guava/src/com/google/common/collect/MapMaker.java, + * <li>keys or values automatically wrapped in {@linkplain WeakReference weak} references, + * specified, the map uses identity ({@code ==}) comparisons instead for keys. Likewise, if, + * {@link #weakValues}, + * was specified, the map uses identity comparisons for values., + * <p>If {@link #weakKeys}/{@link #weakValues}, + * are requested, it is possible for a key or value present in the map to be reclaimed by the, + * garbage collector. Entries with reclaimed keys or values may be removed from the map on each map, + * modification or on occasional map accesses; such entries may be counted by {@link Map#size}, but, + * will never be visible to read or write operations. A partially-reclaimed entry is never exposed, + * to the user. Any {@link java.util.Map.Entry} instance retrieved from the map's, + * {@linkplain Map#entrySet entry set} is a snapshot of that entry's state at the time of retrieval;, + * such entries do, however, support {@link java.util.Map.Entry#setValue}, which simply calls, + * {@link Map#put} on the entry's key., + * used weak, + * references, the entries are reconstructed as they were, but it's not unlikely they'll be quickly, + * garbage-collected before they are ever accessed., + * <p>{@code new MapMaker().weakKeys().makeMap()} is a recommended replacement for, + * {@link java.util.WeakHashMap}, but note that it compares keys using object identity whereas, + * {@code WeakHashMap} uses {@link Object#equals}., +   * <p>By default, the map uses {@link Equivalence#identity} to determine key equality when, +   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this, +   * is used is in {@link Interners.WeakInterner}., +   * immediately. This has the same effect as invoking {@link #expireAfterWrite expireAfterWrite}, +   * {@code (0, unit)} or {@link #expireAfterAccess expireAfterAccess}{@code (0, unit)}. It can be, +   * useful in testing, or to disable caching temporarily without a code change., +   *     {@link com.google.common.cache.CacheBuilder}, with {@link #maximumSize} being replaced by, +   *     {@link com.google.common.cache.CacheBuilder#maximumSize}. Note that {@code CacheBuilder} is, +   *     simply an enhanced API for an implementation which was branched from {@code MapMaker}., +        this.maximumSize == UNSET_INT, "maximum size was already set to %s", this.maximumSize);, +   * Specifies that each key (not value) stored in the map should be wrapped in a, +   * {@link WeakReference} (by default, strong references are used)., +   * candidate for caching., +   * comparison to determine equality of values. This technically violates the specifications of the, +   * methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object), +   * remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V,, +   * V)}, and may not be what you expect., +   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache, +   * {@linkplain #maximumSize maximum size} instead of using soft references. You should only use, +   * this method if you are well familiar with the practical consequences of soft references., +   * comparison to determine equality of values. This technically violates the specifications of the, +   * methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object), +   * remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V,, +   * V)}, and may not be what you expect., +   * @deprecated Caching functionality in {@code MapMaker} has been moved to, +   *     {@link com.google.common.cache.CacheBuilder}, with {@link #softValues} being replaced by, +   *     {@link com.google.common.cache.CacheBuilder#softValues}. Note that {@code CacheBuilder} is, +   *     simply an enhanced API for an implementation which was branched from {@code MapMaker}., +   *     {@link com.google.common.cache.CacheBuilder}, with {@link #expireAfterWrite} being replaced, +   *     by {@link com.google.common.cache.CacheBuilder#expireAfterWrite}. Note that, +   *     {@code CacheBuilder} is simply an enhanced API for an implementation which was branched, +   *     from {@code MapMaker}., +   * <p><b>Important note:</b> Instead of returning <i>this</i> as a {@code MapMaker} instance, this, +   * method returns {@code GenericMapMaker<K, V>}. From this point on, either the original reference, +   * or the returned reference may be used to complete configuration and build the map, but only the, +   * "generic" one is type-safe. That is, it will properly prevent you from building maps whose key, +   * or value types are incompatible with the types accepted by the listener already provided; the, +   * {@code MapMaker} type cannot do this. For best results, simply use the standard method-chaining, +   * idiom, as illustrated in the documentation at top, configuring a {@code MapMaker} and building, +   * your {@link Map} all in a single statement., +   *     {@link com.google.common.cache.CacheBuilder}, with {@link #removalListener} being replaced, +   *     by {@link com.google.common.cache.CacheBuilder#removalListener}. Note that, +   *     {@code CacheBuilder} is simply an enhanced API for an implementation which was branched, +   *     from {@code MapMaker}., +   * be performed atomically on the returned map. Additionally, {@code size} and, +   * {@code containsValue} are implemented as bulk read operations, and thus may fail to observe, +   * concurrent writes., +   * Returns a MapMakerInternalMap for the benefit of internal callers that use features of that, +   * class not exposed through ConcurrentMap., +   * be performed atomically on the returned map. Additionally, {@code size} and, +   * {@code containsValue} are implemented as bulk read operations, and thus may fail to observe, +   * concurrent writes., +   *     <a href="https://github.com/google/guava/wiki/MapMakerMigration">MapMaker Migration, +   *     Guide</a> for more details., +   * @param <K> the most general type of keys this listener can listen for; for example, +   *     {@code Object} if any key is acceptable, +   * @param <V> the most general type of values this listener can listen for; for example, +   *     {@code Object} if any key is acceptable, +     * The entry's expiration timestamp has passed. This can occur when using, +     * {@link #expireAfterWrite} or {@link #expireAfterAccess}., +     * The entry was evicted due to size constraints. This can occur when using, +     * {@link #maximumSize}.]