[+++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * executor, {@code withFallback} will use an inline executor, which carries, +   * some caveats for heavier operations. For example, the call to {@code, +   * fallback.create}, all other registered but unexecuted listeners are, +   * prevented from running during its execution, even if those listeners are, +   * to run in other executors., +   * executor, {@code transform} will use an inline executor, which carries, +   * some caveats for heavier operations. For example, the call to {@code, +   * function.apply}, all other registered but unexecuted listeners are, +   * prevented from running during its execution, even if those listeners are, +   * to run in other executors., +   * If you do not supply an executor, {@code transform} will use an inline, +   * executor, which carries some caveats for heavier operations.  For example,, +   * the call to {@code function.apply} may run on an unpredictable or, +   * undesirable thread:, +   * function.apply}, all other registered but unexecuted listeners are, +   * prevented from running during its execution, even if those listeners are, +   * to run in other executors., +   * an inline executor, which carries some caveats for heavier operations. For, +   * example, the callback may run on an unpredictable or undesirable thread:, +   * <p>Also note that, regardless of which thread executes the callback, all, +   * other registered but unexecuted listeners are prevented from running, +   * during its execution, even if those listeners are to run in other, +   * executors.]