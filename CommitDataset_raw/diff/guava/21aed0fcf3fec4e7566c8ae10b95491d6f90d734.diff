[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(graph, Graphs.copyOf(graph));, +    assertStronglyEquivalent(graph, ImmutableGraph.copyOf(graph));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(graph, Graphs.copyOf(graph));, +    assertStronglyEquivalent(graph, ImmutableGraph.copyOf(graph));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(network, Graphs.copyOf(network));, +    assertStronglyEquivalent(network, ImmutableNetwork.copyOf(network));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(graph, Graphs.copyOf(graph));, +    assertStronglyEquivalent(graph, ImmutableGraph.copyOf(graph));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(network, Graphs.copyOf(network));, +    assertStronglyEquivalent(network, ImmutableNetwork.copyOf(network));, +++ b/guava-tests/test/com/google/common/graph/TestUtil.java, +final class TestUtil {, +  static void assertStronglyEquivalent(Graph<?> graphA, Graph<?> graphB) {, +    // Properties not covered by Graphs.equivalent(), +    assertThat(graphA.allowsSelfLoops()).isEqualTo(graphB.allowsSelfLoops());, +    assertThat(graphA.nodeOrder()).isEqualTo(graphB.nodeOrder());, +, +    assertThat(Graphs.equivalent(graphA, graphB)).isTrue();, +  }, +, +  static void assertStronglyEquivalent(ValueGraph<?, ?> graphA, ValueGraph<?, ?> graphB) {, +    // Properties not covered by Graphs.equivalent(), +    assertThat(graphA.allowsSelfLoops()).isEqualTo(graphB.allowsSelfLoops());, +    assertThat(graphA.nodeOrder()).isEqualTo(graphB.nodeOrder());, +, +    assertThat(Graphs.equivalent(graphA, graphB)).isTrue();, +  }, +, +  static void assertStronglyEquivalent(Network<?, ?> networkA, Network<?, ?> networkB) {, +    // Properties not covered by Graphs.equivalent(), +    assertThat(networkA.allowsParallelEdges()).isEqualTo(networkB.allowsParallelEdges());, +    assertThat(networkA.allowsSelfLoops()).isEqualTo(networkB.allowsSelfLoops());, +    assertThat(networkA.nodeOrder()).isEqualTo(networkB.nodeOrder());, +    assertThat(networkA.edgeOrder()).isEqualTo(networkB.edgeOrder());, +, +    assertThat(Graphs.equivalent(networkA, networkB)).isTrue();, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(graph, Graphs.copyOf(graph));, +    assertStronglyEquivalent(graph, ImmutableGraph.copyOf(graph));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(network, Graphs.copyOf(network));, +    assertStronglyEquivalent(network, ImmutableNetwork.copyOf(network));, +++ b/guava-tests/test/com/google/common/graph/TestUtil.java, +final class TestUtil {, +  static void assertStronglyEquivalent(Graph<?> graphA, Graph<?> graphB) {, +    // Properties not covered by Graphs.equivalent(), +    assertThat(graphA.allowsSelfLoops()).isEqualTo(graphB.allowsSelfLoops());, +    assertThat(graphA.nodeOrder()).isEqualTo(graphB.nodeOrder());, +, +    assertThat(Graphs.equivalent(graphA, graphB)).isTrue();, +  }, +, +  static void assertStronglyEquivalent(ValueGraph<?, ?> graphA, ValueGraph<?, ?> graphB) {, +    // Properties not covered by Graphs.equivalent(), +    assertThat(graphA.allowsSelfLoops()).isEqualTo(graphB.allowsSelfLoops());, +    assertThat(graphA.nodeOrder()).isEqualTo(graphB.nodeOrder());, +, +    assertThat(Graphs.equivalent(graphA, graphB)).isTrue();, +  }, +, +  static void assertStronglyEquivalent(Network<?, ?> networkA, Network<?, ?> networkB) {, +    // Properties not covered by Graphs.equivalent(), +    assertThat(networkA.allowsParallelEdges()).isEqualTo(networkB.allowsParallelEdges());, +    assertThat(networkA.allowsSelfLoops()).isEqualTo(networkB.allowsSelfLoops());, +    assertThat(networkA.nodeOrder()).isEqualTo(networkB.nodeOrder());, +    assertThat(networkA.edgeOrder()).isEqualTo(networkB.edgeOrder());, +, +    assertThat(Graphs.equivalent(networkA, networkB)).isTrue();, +  }, +, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +import static com.google.common.graph.TestUtil.assertStronglyEquivalent;, +    assertStronglyEquivalent(graph, Graphs.copyOf(graph));, +    assertStronglyEquivalent(graph, ImmutableValueGraph.copyOf(graph));]