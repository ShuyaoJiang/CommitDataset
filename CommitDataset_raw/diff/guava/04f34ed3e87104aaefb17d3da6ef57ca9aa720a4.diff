[+++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTester.java, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTester.java, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import java.io.InputStream;, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTester.java, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import java.io.InputStream;, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTester.java, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import java.io.InputStream;, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/CharSinkTest.java, +import java.io.Writer;, +    Writer writer = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTester.java, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import java.io.InputStream;, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/CharSinkTest.java, +import java.io.Writer;, +    Writer writer = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/CharSinkTester.java, +    Writer writer = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTester.java, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import java.io.InputStream;, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/CharSinkTest.java, +import java.io.Writer;, +    Writer writer = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/CharSinkTester.java, +    Writer writer = sink.openBufferedStream();, +++ b/guava/src/com/google/common/io/ByteSink.java, +   *     {@link OutputSupplier} interface and should not be called directly. Use, +   *     {@link #openStream} instead., +   * Opens a new buffered {@link OutputStream} for writing to this sink. The returned stream is, +   * not required to be a {@link BufferedOutputStream} in order to allow implementations to simply, +   * delegate to {@link #openStream()} when the stream returned by that method does not benefit, +   * from additional buffering (for example, a {@code ByteArrayOutputStream}). This method should, +   * return a new, independent stream each time it is called., +   * @since 15.0 (in 14.0 with return type {@link BufferedOutputStream}), +  public OutputStream openBufferedStream() throws IOException {, +++ b/guava-tests/test/com/google/common/io/ByteSinkTest.java, +import java.io.OutputStream;, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSinkTester.java, +    OutputStream out = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import java.io.InputStream;, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +    InputStream in = source.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/CharSinkTest.java, +import java.io.Writer;, +    Writer writer = sink.openBufferedStream();, +++ b/guava-tests/test/com/google/common/io/CharSinkTester.java, +    Writer writer = sink.openBufferedStream();, +++ b/guava/src/com/google/common/io/ByteSink.java, +   *     {@link OutputSupplier} interface and should not be called directly. Use, +   *     {@link #openStream} instead., +   * Opens a new buffered {@link OutputStream} for writing to this sink. The returned stream is, +   * not required to be a {@link BufferedOutputStream} in order to allow implementations to simply, +   * delegate to {@link #openStream()} when the stream returned by that method does not benefit]