[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +  public static final CharMatcher BREAKING_WHITESPACE = new CharMatcher() {, +    @Override, +    public boolean matches(char c) {, +      switch (c) {, +        case '\t':, +        case '\n':, +        case '\013':, +        case '\f':, +        case '\r':, +        case ' ':, +        case '\u0085':, +        case '\u1680':, +        case '\u2028':, +        case '\u2029':, +        case '\u205f':, +        case '\u3000':, +          return true;, +        case '\u2007':, +          return false;, +        default:, +          return c >= '\u2000' && c <= '\u200a';, +      }, +    }, +, +    @Override, +    public String toString() {, +      return "CharMatcher.BREAKING_WHITESPACE";, +    }, +  };, +  private static class RangesMatcher extends CharMatcher {, +    private final char[] rangeStarts;, +    private final char[] rangeEnds;, +, +    RangesMatcher(String description, char[] rangeStarts, char[] rangeEnds) {, +      super(description);, +      this.rangeStarts = rangeStarts;, +      this.rangeEnds = rangeEnds;, +      checkArgument(rangeStarts.length == rangeEnds.length);, +      for (int i = 0; i < rangeStarts.length; i++) {, +        checkArgument(rangeStarts[i] <= rangeEnds[i]);, +        if (i + 1 < rangeStarts.length) {, +          checkArgument(rangeEnds[i] < rangeStarts[i + 1]);, +        }, +      }, +    }, +, +    @Override, +    public boolean matches(char c) {, +      int index = Arrays.binarySearch(rangeStarts, c);, +      if (index >= 0) {, +        return true;, +      } else {, +        index = ~index - 1;, +        return index >= 0 && c <= rangeEnds[index];, +      }, +    }, +  }, +, +  // Must be in ascending order., +  private static final String ZEROES = "0\u0660\u06f0\u07c0\u0966\u09e6\u0a66\u0ae6\u0b66\u0be6", +      + "\u0c66\u0ce6\u0d66\u0e50\u0ed0\u0f20\u1040\u1090\u17e0\u1810\u1946\u19d0\u1b50\u1bb0", +      + "\u1c40\u1c50\ua620\ua8d0\ua900\uaa50\uff10";, +, +  private static final String NINES;, +  static {, +    StringBuilder builder = new StringBuilder(ZEROES.length());, +    for (int i = 0; i < ZEROES.length(); i++) {, +      builder.append((char) (ZEROES.charAt(i) + 9));, +    }, +    NINES = builder.toString();, +  }, +, +  public static final CharMatcher DIGIT = new RangesMatcher(, +      "CharMatcher.DIGIT", ZEROES.toCharArray(), NINES.toCharArray());, +  public static final CharMatcher INVISIBLE = new RangesMatcher("CharMatcher.INVISIBLE", (, +      "\u0000\u007f\u00ad\u0600\u06dd\u070f\u1680\u180e\u2000\u2028\u205f\u206a\u3000\ud800\ufeff", +      + "\ufff9\ufffa").toCharArray(), (, +      "\u0020\u00a0\u00ad\u0604\u06dd\u070f\u1680\u180e\u200f\u202f\u2064\u206f\u3000\uf8ff\ufeff", +      + "\ufff9\ufffb").toCharArray());, +  public static final CharMatcher SINGLE_WIDTH = new RangesMatcher("CharMatcher.SINGLE_WIDTH",, +      "\u0000\u05be\u05d0\u05f3\u0600\u0750\u0e00\u1e00\u2100\ufb50\ufe70\uff61".toCharArray(),, +      "\u04f9\u05be\u05ea\u05f4\u06ff\u077f\u0e7f\u20af\u213a\ufdff\ufeff\uffdc".toCharArray());, +  private static final String WHITESPACE_TABLE = "\u0001\u0000\u00a0\u0000\u0000\u0000\u0000\u0000", +      + "\u0000\u0009\n\u000b\u000c\r\u0000\u0000\u2028\u2029\u0000\u0000\u0000\u0000\u0000\u202f", +      + "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0020\u0000\u0000\u0000\u0000\u0000", +      + "\u0000\u0000\u0000\u0000\u0000\u3000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", +      + "\u0000\u0000\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a", +      + "\u0000\u0000\u0000\u0000\u0000\u205f\u1680\u0000\u0000\u180e\u0000\u0000\u0000";, +  /**, +   * Determines whether a character is whitespace according to the latest Unicode standard, as, +   * illustrated, +   * <a href="http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D">here</a>., +   * This is not the same definition used by other Java APIs. (See a, +   * <a href="http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ">comparison of several, +   * definitions of "whitespace"</a>.), +   *, +   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this constant to keep it up, +   * to date., +   */]