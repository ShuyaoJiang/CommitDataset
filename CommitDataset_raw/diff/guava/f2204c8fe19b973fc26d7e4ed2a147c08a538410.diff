[+++ b/guava-tests/test/com/google/common/util/concurrent/StripedTest.java, +, +  public void testMaxSize() {, +    for (Striped<?> striped : ImmutableList.of(, +        Striped.lazyWeakLock(Integer.MAX_VALUE),, +        Striped.lazyWeakSemaphore(Integer.MAX_VALUE, Integer.MAX_VALUE),, +        Striped.lazyWeakReadWriteLock(Integer.MAX_VALUE))) {, +      for (int i = 0; i < 3; i++) {, +        // doesn't throw exception, +        striped.get(new Integer(Integer.MAX_VALUE - i));, +      }, +    }, +  }, +++ b/guava-tests/test/com/google/common/util/concurrent/StripedTest.java, +, +  public void testMaxSize() {, +    for (Striped<?> striped : ImmutableList.of(, +        Striped.lazyWeakLock(Integer.MAX_VALUE),, +        Striped.lazyWeakSemaphore(Integer.MAX_VALUE, Integer.MAX_VALUE),, +        Striped.lazyWeakReadWriteLock(Integer.MAX_VALUE))) {, +      for (int i = 0; i < 3; i++) {, +        // doesn't throw exception, +        striped.get(new Integer(Integer.MAX_VALUE - i));, +      }, +    }, +  }, +++ b/guava/src/com/google/common/util/concurrent/Striped.java, +   * Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks., +   * Every lock is reentrant., +   * Creates a {@code Striped<Lock>} with lazily initialized, weakly referenced locks., +   * Every lock is reentrant., +   * with the specified number of permits., +   * with the specified number of permits., +   * read-write locks. Every lock is reentrant., +   * read-write locks. Every lock is reentrant., +      if (size != Integer.MAX_VALUE) {, +      } // else no check necessary, all index values are valid]