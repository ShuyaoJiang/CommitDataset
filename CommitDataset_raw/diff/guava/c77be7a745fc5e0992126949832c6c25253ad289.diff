[+++ b/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +          .hasMessageThat(), +          .isEqualTo(, +          .hasMessageThat(), +          .isEqualTo(, +++ b/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +          .hasMessageThat(), +          .isEqualTo(, +          .hasMessageThat(), +          .isEqualTo(, +++ b/android/guava-testlib/test/com/google/common/testing/GcFinalizationTest.java, +    assertThat(e).hasMessageThat().contains("Unexpected interrupt");, +    assertThat(e).hasCauseThat().isInstanceOf(InterruptedException.class);, +++ b/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +          .hasMessageThat(), +          .isEqualTo(, +          .hasMessageThat(), +          .isEqualTo(, +++ b/android/guava-testlib/test/com/google/common/testing/GcFinalizationTest.java, +    assertThat(e).hasMessageThat().contains("Unexpected interrupt");, +    assertThat(e).hasCauseThat().isInstanceOf(InterruptedException.class);, +++ b/android/guava-testlib/test/com/google/common/testing/TearDownStackTest.java, +      assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");, +++ b/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +          .hasMessageThat(), +          .isEqualTo(, +          .hasMessageThat(), +          .isEqualTo(, +++ b/android/guava-testlib/test/com/google/common/testing/GcFinalizationTest.java, +    assertThat(e).hasMessageThat().contains("Unexpected interrupt");, +    assertThat(e).hasCauseThat().isInstanceOf(InterruptedException.class);, +++ b/android/guava-testlib/test/com/google/common/testing/TearDownStackTest.java, +      assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");, +++ b/android/guava-tests/test/com/google/common/base/PreconditionsTest.java, +      assertThat(expected).hasMessageThat().isEqualTo("null");, +      assertThat(expected).hasMessageThat().isEqualTo("null");, +      assertThat(expected).hasMessageThat().isEqualTo("index (-1) must not be negative");, +      assertThat(expected).hasMessageThat().isEqualTo("index (1) must be less than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (-1) must not be negative");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (1) must be less than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("index (-1) must not be negative");, +      assertThat(expected), +          .hasMessageThat(), +          .isEqualTo("index (2) must not be greater than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (-1) must not be negative");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (2) must not be greater than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("start index (-1) must not be negative");, +      assertThat(expected), +          .hasMessageThat(), +          .isEqualTo("end index (2) must not be greater than size (1)");, +      assertThat(expected), +          .hasMessageThat(), +          .isEqualTo("end index (0) must not be less than start index (1)");, +      assertThat(throwable).hasMessageThat().isNull();, +      assertThat(throwable).hasMessageThat().isEmpty();, +          .hasMessageThat(), +          .isEqualTo(Strings.lenientFormat("", Arrays.copyOfRange(params, 2, params.length)));, +    assertThat(e).hasMessageThat().isEqualTo("A message");, +    assertThat(e).hasMessageThat().isEqualTo("I ate 5 pies.");, +++ b/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +          .hasMessageThat(), +          .isEqualTo(, +          .hasMessageThat(), +          .isEqualTo(, +++ b/android/guava-testlib/test/com/google/common/testing/GcFinalizationTest.java, +    assertThat(e).hasMessageThat().contains("Unexpected interrupt");, +    assertThat(e).hasCauseThat().isInstanceOf(InterruptedException.class);, +++ b/android/guava-testlib/test/com/google/common/testing/TearDownStackTest.java, +      assertThat(expected).hasCauseThat().hasMessageThat().isEqualTo("two");, +++ b/android/guava-tests/test/com/google/common/base/PreconditionsTest.java, +      assertThat(expected).hasMessageThat().isEqualTo("null");, +      assertThat(expected).hasMessageThat().isEqualTo("null");, +      assertThat(expected).hasMessageThat().isEqualTo("index (-1) must not be negative");, +      assertThat(expected).hasMessageThat().isEqualTo("index (1) must be less than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (-1) must not be negative");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (1) must be less than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("index (-1) must not be negative");, +      assertThat(expected), +          .hasMessageThat(), +          .isEqualTo("index (2) must not be greater than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (-1) must not be negative");, +      assertThat(expected).hasMessageThat().isEqualTo("foo (2) must not be greater than size (1)");, +      assertThat(expected).hasMessageThat().isEqualTo("start index (-1) must not be negative");, +      assertThat(expected), +          .hasMessageThat(), +          .isEqualTo("end index (2) must not be greater than size (1)");, +      assertThat(expected), +          .hasMessageThat(), +          .isEqualTo("end index (0) must not be less than start index (1)");, +      assertThat(throwable).hasMessageThat().isNull();, +      assertThat(throwable).hasMessageThat().isEmpty();, +          .hasMessageThat(), +          .isEqualTo(Strings.lenientFormat("", Arrays.copyOfRange(params, 2, params.length)));, +    assertThat(e).hasMessageThat().isEqualTo("A message");, +    assertThat(e).hasMessageThat().isEqualTo("I ate 5 pies.");, +++ b/android/guava-tests/test/com/google/common/base/SuppliersTest.java, +      assertThat(ex).hasCauseThat().isInstanceOf(java.io.NotSerializableException.class);, +++ b/android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +          .hasMessageThat(), +          .isEqualTo(]