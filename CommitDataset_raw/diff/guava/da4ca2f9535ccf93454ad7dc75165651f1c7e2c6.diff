[+++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, +      "base64()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", '=');, +      "base64Url()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", '=');, +      new StandardBaseEncoding("base32()", "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", '=');, +      new StandardBaseEncoding("base32Hex()", "0123456789ABCDEFGHIJKLMNOPQRSTUV", '=');, +  private static final BaseEncoding BASE16 =, +      new StandardBaseEncoding("base16()", "0123456789ABCDEF", null);, +    private final String name;, +    Alphabet(String name, char[] chars) {, +      this.name = checkNotNull(name);, +          result = upperCase = new Alphabet(name + ".upperCase()", upperCased);, +          result = lowerCase = new Alphabet(name + ".lowerCase()", lowerCased);, +, +    @Override, +    public String toString() {, +      return name;, +    }, +    StandardBaseEncoding(String name, String alphabetChars, @Nullable Character paddingChar) {, +      this(new Alphabet(name, alphabetChars.toCharArray()), paddingChar);, +, +    @Override, +    public String toString() {, +      StringBuilder builder = new StringBuilder("BaseEncoding.");, +      builder.append(alphabet.toString());, +      if (8 % alphabet.bitsPerChar != 0) {, +        if (paddingChar == null) {, +          builder.append(".omitPadding()");, +        } else {, +          builder.append(".withPadChar(").append(paddingChar).append(')');, +        }, +      }, +      return builder.toString();, +    }, +, +    @Override, +    public String toString() {, +      return delegate.toString() +, +          ".withSeparator(\"" + separator + "\", " + afterEveryChars + ")";, +    }, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, +      "base64()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", '=');, +      "base64Url()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", '=');, +      new StandardBaseEncoding("base32()", "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", '=');, +      new StandardBaseEncoding("base32Hex()", "0123456789ABCDEFGHIJKLMNOPQRSTUV", '=');, +  private static final BaseEncoding BASE16 =, +      new StandardBaseEncoding("base16()", "0123456789ABCDEF", null);, +    private final String name;, +    Alphabet(String name, char[] chars) {, +      this.name = checkNotNull(name);, +          result = upperCase = new Alphabet(name + ".upperCase()", upperCased);, +          result = lowerCase = new Alphabet(name + ".lowerCase()", lowerCased);, +, +    @Override, +    public String toString() {, +      return name;, +    }, +    StandardBaseEncoding(String name, String alphabetChars, @Nullable Character paddingChar) {, +      this(new Alphabet(name, alphabetChars.toCharArray()), paddingChar);, +, +    @Override, +    public String toString() {, +      StringBuilder builder = new StringBuilder("BaseEncoding.");, +      builder.append(alphabet.toString());, +      if (8 % alphabet.bitsPerChar != 0) {, +        if (paddingChar == null) {, +          builder.append(".omitPadding()");, +        } else {, +          builder.append(".withPadChar(").append(paddingChar).append(')');, +        }, +      }, +      return builder.toString();, +    }, +, +    @Override, +    public String toString() {, +      return delegate.toString() +, +          ".withSeparator(\"" + separator + "\", " + afterEveryChars + ")";, +    }, +++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java, +  , +  public void testToString() {, +    assertEquals("BaseEncoding.base64().withPadChar(=)", BaseEncoding.base64().toString());, +    assertEquals("BaseEncoding.base32Hex().omitPadding()", , +        BaseEncoding.base32Hex().omitPadding().toString());, +    assertEquals("BaseEncoding.base32().lowerCase().withPadChar($)", , +        BaseEncoding.base32().lowerCase().withPadChar('$').toString());, +    assertEquals("BaseEncoding.base16().withSeparator(\"\n\", 10)",, +        BaseEncoding.base16().withSeparator("\n", 10).toString());, +  }, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, +      "base64()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", '=');, +      "base64Url()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", '=');, +      new StandardBaseEncoding("base32()", "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", '=');, +      new StandardBaseEncoding("base32Hex()", "0123456789ABCDEFGHIJKLMNOPQRSTUV", '=');, +  private static final BaseEncoding BASE16 =, +      new StandardBaseEncoding("base16()", "0123456789ABCDEF", null);, +    private final String name;, +    Alphabet(String name, char[] chars) {, +      this.name = checkNotNull(name);, +          result = upperCase = new Alphabet(name + ".upperCase()", upperCased);]