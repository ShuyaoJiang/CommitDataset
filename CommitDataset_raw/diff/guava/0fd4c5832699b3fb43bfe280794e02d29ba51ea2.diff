[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import static java.util.Collections.list;, +import com.google.common.collect.ImmutableSet;, +import java.util.List;, +  private static final ImmutableSet<URL> TEST_URLS;, +  static {, +    try {, +      TEST_URLS = ImmutableSet.of(new URL("file://foo/bar/baz.txt"));, +    } catch (MalformedURLException e) {, +      throw new RuntimeException(e);, +    }, +  }, +  public void testEquals() throws IOException {, +            new ResourceInfo("a/b/c.txt", TEST_URLS, getClass().getClassLoader()),, +            new ResourceInfo("a/b/c.txt", TEST_URLS, getClass().getClassLoader())), +            new ResourceInfo("x.txt", TEST_URLS, getClass().getClassLoader())), +  public void testResourceInfo_of() throws IOException {, +    ClassLoader classLoader = getClass().getClassLoader();, +        new ClassInfo("Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1Local.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("Foo.class", TEST_URLS, getClass().getClassLoader()).getPackageName());, +        new ClassInfo("a/b/Foo.class", TEST_URLS, getClass().getClassLoader()).getPackageName());, +  }, +, +  // Test that ResourceInfo.urls() returns identical content to ClassLoader.getResources(), +, +  public void testUrls() throws IOException {, +    ClassLoader loader = ClassLoader.getSystemClassLoader();, +    for (ResourceInfo resource : ClassPath.from(loader).getResources()) {, +      String resourceName = resource.getResourceName();, +      assertTrue(, +          resourceName + " has different content when loaded by resource.url()",, +          contentEquals(resource.url(), loader.getResource(resourceName)));, +      List<URL> urlsFromLoader = list(loader.getResources(resourceName));, +      List<URL> urlsFromClassPath = resource.urls();, +      assertEquals(urlsFromLoader.size(), urlsFromClassPath.size());, +      for (int i = 0; i < urlsFromClassPath.size(); i++) {, +        assertTrue(, +            resourceName + " #" + i + "has different content when loaded by resource.url()",, +            contentEquals(urlsFromLoader.get(i), urlsFromClassPath.get(i)));, +      }, +    }, +  }, +, +  private static boolean contentEquals(URL left, URL right) throws IOException {, +    return Resources.asByteSource(left).contentEquals(Resources.asByteSource(right));, +  private static ResourceInfo resourceInfo(Class<?> cls) throws IOException {, +    String resource = cls.getName().replace('.', '/') + ".class";, +    ClassLoader loader = cls.getClassLoader();, +    return ResourceInfo.of(resource, list(loader.getResources(resource)), loader);, +  private static ClassInfo classInfo(Class<?> cls) throws IOException {, +  private static ClassInfo classInfo(Class<?> cls, ClassLoader classLoader) throws IOException {, +    String resource = cls.getName().replace('.', '/') + ".class";, +    return new ClassInfo(resource, list(classLoader.getResources(resource)), classLoader);, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import static java.util.Collections.list;, +import com.google.common.collect.ImmutableSet;, +import java.util.List;, +  private static final ImmutableSet<URL> TEST_URLS;, +  static {, +    try {, +      TEST_URLS = ImmutableSet.of(new URL("file://foo/bar/baz.txt"));, +    } catch (MalformedURLException e) {, +      throw new RuntimeException(e);, +    }, +  }, +  public void testEquals() throws IOException {, +            new ResourceInfo("a/b/c.txt", TEST_URLS, getClass().getClassLoader()),, +            new ResourceInfo("a/b/c.txt", TEST_URLS, getClass().getClassLoader())), +            new ResourceInfo("x.txt", TEST_URLS, getClass().getClassLoader())), +  public void testResourceInfo_of() throws IOException {, +    ClassLoader classLoader = getClass().getClassLoader();, +        new ClassInfo("Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("a/b/Bar$1Local.class", TEST_URLS, classLoader).getSimpleName());, +        new ClassInfo("Foo.class", TEST_URLS, getClass().getClassLoader()).getPackageName());, +        new ClassInfo("a/b/Foo.class", TEST_URLS, getClass().getClassLoader()).getPackageName());, +  }, +, +  // Test that ResourceInfo.urls() returns identical content to ClassLoader.getResources(), +, +  public void testUrls() throws IOException {, +    ClassLoader loader = ClassLoader.getSystemClassLoader();, +    for (ResourceInfo resource : ClassPath.from(loader).getResources()) {, +      String resourceName = resource.getResourceName();, +      assertTrue(, +          resourceName + " has different content when loaded by resource.url()",, +          contentEquals(resource.url(), loader.getResource(resourceName)));, +      List<URL> urlsFromLoader = list(loader.getResources(resourceName));, +      List<URL> urlsFromClassPath = resource.urls();, +      assertEquals(urlsFromLoader.size(), urlsFromClassPath.size());]