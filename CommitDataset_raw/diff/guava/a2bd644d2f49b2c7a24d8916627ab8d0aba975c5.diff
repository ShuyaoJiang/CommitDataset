[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  public void testTryAcquire_noWaitAllowed() {, +  public void testTryAcquire_someWaitAllowed() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(0, SECONDS));, +    assertTrue(limiter.tryAcquire(200, MILLISECONDS));, +    assertFalse(limiter.tryAcquire(100, MILLISECONDS));, +    stopwatch.sleepMillis(100);, +    assertTrue(limiter.tryAcquire(100, MILLISECONDS));, +  }, +, +  public void testTryAcquire_overflow() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(0, MICROSECONDS));, +    stopwatch.sleepMillis(100);, +    assertTrue(limiter.tryAcquire(Long.MAX_VALUE, MICROSECONDS));, +  }, +, +  public void testTryAcquire_negative() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(5, 0, SECONDS));, +    stopwatch.sleepMillis(900);, +    assertFalse(limiter.tryAcquire(1, Long.MIN_VALUE, SECONDS));, +    stopwatch.sleepMillis(100);, +    assertTrue(limiter.tryAcquire(1, -1, SECONDS));, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  public void testTryAcquire_noWaitAllowed() {, +  public void testTryAcquire_someWaitAllowed() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(0, SECONDS));, +    assertTrue(limiter.tryAcquire(200, MILLISECONDS));, +    assertFalse(limiter.tryAcquire(100, MILLISECONDS));, +    stopwatch.sleepMillis(100);, +    assertTrue(limiter.tryAcquire(100, MILLISECONDS));, +  }, +, +  public void testTryAcquire_overflow() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(0, MICROSECONDS));, +    stopwatch.sleepMillis(100);, +    assertTrue(limiter.tryAcquire(Long.MAX_VALUE, MICROSECONDS));, +  }, +, +  public void testTryAcquire_negative() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(5, 0, SECONDS));, +    stopwatch.sleepMillis(900);, +    assertFalse(limiter.tryAcquire(1, Long.MIN_VALUE, SECONDS));, +    stopwatch.sleepMillis(100);, +    assertTrue(limiter.tryAcquire(1, -1, SECONDS));, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/RateLimiter.java, +    long timeoutMicros = max(unit.toMicros(timeout), 0);, +    return earliestAvailable(nowMicros) - timeoutMicros <= nowMicros;]