[+++ b/guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java, +    Comparator<Object> keyComparator = (Comparator<Object>) in.readObject();, +    Comparator<Object> valueComparator = (Comparator<Object>) in.readObject();, +++ b/guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java, +    Comparator<Object> keyComparator = (Comparator<Object>) in.readObject();, +    Comparator<Object> valueComparator = (Comparator<Object>) in.readObject();, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super K>) NATURAL_ORDER;, +++ b/guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java, +    Comparator<Object> keyComparator = (Comparator<Object>) in.readObject();, +    Comparator<Object> valueComparator = (Comparator<Object>) in.readObject();, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super K>) NATURAL_ORDER;, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeSet.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super E>) NATURAL_ORDER;, +++ b/guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java, +    Comparator<Object> keyComparator = (Comparator<Object>) in.readObject();, +    Comparator<Object> valueComparator = (Comparator<Object>) in.readObject();, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super K>) NATURAL_ORDER;, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeSet.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super E>) NATURAL_ORDER;, +++ b/guava/src/com/google/common/collect/ImmutableRangeMap.java, +  private static final ImmutableRangeMap<Comparable<?>, Object> EMPTY =, +      new ImmutableRangeMap<Comparable<?>, Object>(, +          ImmutableList.<Range<Comparable<?>>>of(), ImmutableList.of());, +    return (ImmutableRangeMap<K, V>) EMPTY;, +++ b/guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java, +    Comparator<Object> keyComparator = (Comparator<Object>) in.readObject();, +    Comparator<Object> valueComparator = (Comparator<Object>) in.readObject();, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super K>) NATURAL_ORDER;, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeSet.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super E>) NATURAL_ORDER;, +++ b/guava/src/com/google/common/collect/ImmutableRangeMap.java, +  private static final ImmutableRangeMap<Comparable<?>, Object> EMPTY =, +      new ImmutableRangeMap<Comparable<?>, Object>(, +          ImmutableList.<Range<Comparable<?>>>of(), ImmutableList.of());, +    return (ImmutableRangeMap<K, V>) EMPTY;, +++ b/guava/src/com/google/common/collect/ImmutableRangeSet.java, +  private static final ImmutableRangeSet<Comparable<?>> EMPTY =, +      new ImmutableRangeSet<Comparable<?>>(ImmutableList.<Range<Comparable<?>>>of());, +  private static final ImmutableRangeSet<Comparable<?>> ALL =, +      new ImmutableRangeSet<Comparable<?>>(ImmutableList.of(Range.<Comparable<?>>all()));, +    return (ImmutableRangeSet<C>) EMPTY;, +    return (ImmutableRangeSet<C>) ALL;, +++ b/guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java, +    Comparator<Object> keyComparator = (Comparator<Object>) in.readObject();, +    Comparator<Object> valueComparator = (Comparator<Object>) in.readObject();, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super K>) NATURAL_ORDER;, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeSet.java, +  private static final Comparator<Object> NATURAL_ORDER = new Comparator<Object>() {, +    @Override public int compare(Object o1, Object o2) {, +      return ((Comparable<Object>) o1).compareTo(o2);, +      comparator = (Comparator<? super E>) NATURAL_ORDER;, +++ b/guava/src/com/google/common/collect/ImmutableRangeMap.java, +  private static final ImmutableRangeMap<Comparable<?>, Object> EMPTY =, +      new ImmutableRangeMap<Comparable<?>, Object>(, +          ImmutableList.<Range<Comparable<?>>>of(), ImmutableList.of());, +    return (ImmutableRangeMap<K, V>) EMPTY;, +++ b/guava/src/com/google/common/collect/ImmutableRangeSet.java, +  private static final ImmutableRangeSet<Comparable<?>> EMPTY =, +      new ImmutableRangeSet<Comparable<?>>(ImmutableList.<Range<Comparable<?>>>of());, +  private static final ImmutableRangeSet<Comparable<?>> ALL =, +      new ImmutableRangeSet<Comparable<?>>(ImmutableList.of(Range.<Comparable<?>>all()));, +    return (ImmutableRangeSet<C>) EMPTY;, +    return (ImmutableRangeSet<C>) ALL;, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +  private static final class SerializedForm<E> implements Serializable {, +    Comparator<? super E> comparator;, +    E[] elements;, +    @SuppressWarnings("unchecked"), +    SerializedForm(SortedMultiset<E> multiset) {, +      elements = (E[]) new Object[n];, +      for (Entry<E> entry : multiset.entrySet()) {]