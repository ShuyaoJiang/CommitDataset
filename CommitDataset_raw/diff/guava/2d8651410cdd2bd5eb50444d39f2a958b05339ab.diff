[+++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +import com.google.common.base.Splitter.MapSplitter;, +, +  public void testMapSplitter_varyingTrimLevels() {, +    MapSplitter splitter = COMMA_SPLITTER.trimResults().withKeyValueSeparator(Splitter.on("->"));, +    Map<String, String> split = splitter.split(" x -> y, z-> a ");, +    assertThat(split).containsEntry("x ", " y");, +    assertThat(split).containsEntry("z", " a");, +  }, +++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +import com.google.common.base.Splitter.MapSplitter;, +, +  public void testMapSplitter_varyingTrimLevels() {, +    MapSplitter splitter = COMMA_SPLITTER.trimResults().withKeyValueSeparator(Splitter.on("->"));, +    Map<String, String> split = splitter.split(" x -> y, z-> a ");, +    assertThat(split).containsEntry("x ", " y");, +    assertThat(split).containsEntry("z", " a");, +  }, +++ b/android/guava/src/com/google/common/base/Splitter.java, +++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +import com.google.common.base.Splitter.MapSplitter;, +, +  public void testMapSplitter_varyingTrimLevels() {, +    MapSplitter splitter = COMMA_SPLITTER.trimResults().withKeyValueSeparator(Splitter.on("->"));, +    Map<String, String> split = splitter.split(" x -> y, z-> a ");, +    assertThat(split).containsEntry("x ", " y");, +    assertThat(split).containsEntry("z", " a");, +  }, +++ b/android/guava/src/com/google/common/base/Splitter.java, +++ b/guava-gwt/test/com/google/common/base/SplitterTest_gwt.java, +public void testMapSplitter_varyingTrimLevels() throws Exception {, +  com.google.common.base.SplitterTest testCase = new com.google.common.base.SplitterTest();, +  testCase.testMapSplitter_varyingTrimLevels();, +}, +, +++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +import com.google.common.base.Splitter.MapSplitter;, +, +  public void testMapSplitter_varyingTrimLevels() {, +    MapSplitter splitter = COMMA_SPLITTER.trimResults().withKeyValueSeparator(Splitter.on("->"));, +    Map<String, String> split = splitter.split(" x -> y, z-> a ");, +    assertThat(split).containsEntry("x ", " y");, +    assertThat(split).containsEntry("z", " a");, +  }, +++ b/android/guava/src/com/google/common/base/Splitter.java, +++ b/guava-gwt/test/com/google/common/base/SplitterTest_gwt.java, +public void testMapSplitter_varyingTrimLevels() throws Exception {, +  com.google.common.base.SplitterTest testCase = new com.google.common.base.SplitterTest();, +  testCase.testMapSplitter_varyingTrimLevels();, +}, +, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +import com.google.common.base.Splitter.MapSplitter;, +, +  public void testMapSplitter_varyingTrimLevels() {, +    MapSplitter splitter = COMMA_SPLITTER.trimResults().withKeyValueSeparator(Splitter.on("->"));, +    Map<String, String> split = splitter.split(" x -> y, z-> a ");, +    assertThat(split).containsEntry("x ", " y");, +    assertThat(split).containsEntry("z", " a");, +  }, +++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +import com.google.common.base.Splitter.MapSplitter;, +, +  public void testMapSplitter_varyingTrimLevels() {, +    MapSplitter splitter = COMMA_SPLITTER.trimResults().withKeyValueSeparator(Splitter.on("->"));, +    Map<String, String> split = splitter.split(" x -> y, z-> a ");, +    assertThat(split).containsEntry("x ", " y");, +    assertThat(split).containsEntry("z", " a");, +  }, +++ b/android/guava/src/com/google/common/base/Splitter.java, +++ b/guava-gwt/test/com/google/common/base/SplitterTest_gwt.java, +public void testMapSplitter_varyingTrimLevels() throws Exception {, +  com.google.common.base.SplitterTest testCase = new com.google.common.base.SplitterTest();, +  testCase.testMapSplitter_varyingTrimLevels();, +}, +, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +import com.google.common.base.Splitter.MapSplitter;, +, +  public void testMapSplitter_varyingTrimLevels() {, +    MapSplitter splitter = COMMA_SPLITTER.trimResults().withKeyValueSeparator(Splitter.on("->"));, +    Map<String, String> split = splitter.split(" x -> y, z-> a ");, +    assertThat(split).containsEntry("x ", " y");, +    assertThat(split).containsEntry("z", " a");, +  }, +++ b/guava/src/com/google/common/base/Splitter.java]