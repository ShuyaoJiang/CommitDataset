[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +      keySet = result = new Sets.ImprovedAbstractSet<K>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +      keySet = result = new Sets.ImprovedAbstractSet<K>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    private class KeySet extends Sets.ImprovedAbstractSet<K> {, +          if (predicate.apply(entry) && !collection.contains(entry.getKey())) {, +  abstract static class KeySet<K, V> extends Sets.ImprovedAbstractSet<K> {, +  abstract static class EntrySet<K, V>, +      extends Sets.ImprovedAbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +      keySet = result = new Sets.ImprovedAbstractSet<K>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    private class KeySet extends Sets.ImprovedAbstractSet<K> {, +          if (predicate.apply(entry) && !collection.contains(entry.getKey())) {, +  abstract static class KeySet<K, V> extends Sets.ImprovedAbstractSet<K> {, +  abstract static class EntrySet<K, V>, +      extends Sets.ImprovedAbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      return new Sets.ImprovedAbstractSet<V>() {, +    class AsMapEntries extends Sets.ImprovedAbstractSet<Entry<K, Collection<V>>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +      keySet = result = new Sets.ImprovedAbstractSet<K>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    private class KeySet extends Sets.ImprovedAbstractSet<K> {, +          if (predicate.apply(entry) && !collection.contains(entry.getKey())) {, +  abstract static class KeySet<K, V> extends Sets.ImprovedAbstractSet<K> {, +  abstract static class EntrySet<K, V>, +      extends Sets.ImprovedAbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      return new Sets.ImprovedAbstractSet<V>() {, +    class AsMapEntries extends Sets.ImprovedAbstractSet<Entry<K, Collection<V>>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * {@link AbstractSet} substitute without the potentially-quadratic, +   * {@code removeAll} implementation., +   */, +  abstract static class ImprovedAbstractSet<E> extends AbstractSet<E> {, +    @Override, +    public boolean removeAll(Collection<?> c) {, +      return removeAllImpl(this, c);, +    }, +, +    @Override, +    public boolean retainAll(Collection<?> c) {, +      return super.retainAll(checkNotNull(c)); // GWT compatibility, +    }, +  }, +, +  /**, +    checkNotNull(collection); // for GWT, +    /*, +     * AbstractSet.removeAll(List) has quadratic behavior if the list size, +     * is just less than the set's size.  We augment the test by, +     * assuming that sets have fast contains() performance, and other, +     * collections don't.  See, +     * http://code.google.com/p/guava-libraries/issues/detail?id=1013, +     */, +    if (collection instanceof Set && collection.size() > set.size()) {, +      Iterator<?> setIterator = set.iterator();, +      boolean changed = false;, +      while (setIterator.hasNext()) {, +        if (collection.contains(setIterator.next())) {, +          changed = true;, +          setIterator.remove();, +        }, +      }, +      return changed;, +      return removeAllImpl(set, collection.iterator());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedListMultimap.java, +      keySet = result = new Sets.ImprovedAbstractSet<K>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    private class KeySet extends Sets.ImprovedAbstractSet<K> {, +          if (predicate.apply(entry) && !collection.contains(entry.getKey())) {, +  abstract static class KeySet<K, V> extends Sets.ImprovedAbstractSet<K> {, +  abstract static class EntrySet<K, V>, +      extends Sets.ImprovedAbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      return new Sets.ImprovedAbstractSet<V>() {, +    class AsMapEntries extends Sets.ImprovedAbstractSet<Entry<K, Collection<V>>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * {@link AbstractSet} substitute without the potentially-quadratic, +   * {@code removeAll} implementation., +   */, +  abstract static class ImprovedAbstractSet<E> extends AbstractSet<E> {, +    @Override, +    public boolean removeAll(Collection<?> c) {, +      return removeAllImpl(this, c);, +    }, +, +    @Override, +    public boolean retainAll(Collection<?> c) {, +      return super.retainAll(checkNotNull(c)); // GWT compatibility, +    }, +  }, +, +  /**, +    checkNotNull(collection); // for GWT, +    /*, +     * AbstractSet.removeAll(List) has quadratic behavior if the list size, +     * is just less than the set's size.  We augment the test by]