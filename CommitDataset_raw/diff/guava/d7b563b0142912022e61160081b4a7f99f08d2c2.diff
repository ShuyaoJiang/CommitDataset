[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetWritesTester.java, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 2));, +    assertEquals("old count", originalCount + 2, getMultiset().count(samples.e0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().remove(samples.e0, 0));, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetWritesTester.java, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 2));, +    assertEquals("old count", originalCount + 2, getMultiset().count(samples.e0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().remove(samples.e0, 0));, +++ b/guava/src/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetWritesTester.java, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 2));, +    assertEquals("old count", originalCount + 2, getMultiset().count(samples.e0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().remove(samples.e0, 0));, +++ b/guava/src/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava/src/com/google/common/collect/AllEqualOrdering.java, +    return 0;, +    return Lists.newArrayList(iterable);, +    return ImmutableList.copyOf(iterable);, +    return (Ordering<S>) this;, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetWritesTester.java, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().add(samples.e0, 2));, +    assertEquals("old count", originalCount + 2, getMultiset().count(samples.e0));, +    int originalCount = getMultiset().count(samples.e0);, +    assertEquals("old count", originalCount, getMultiset().remove(samples.e0, 0));, +++ b/guava/src/com/google/common/base/Predicates.java, +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +      // Avoid using the Iterator to avoid generating garbage (issue 820)., +++ b/guava/src/com/google/common/collect/AllEqualOrdering.java, +    return 0;, +    return Lists.newArrayList(iterable);, +    return ImmutableList.copyOf(iterable);, +    return (Ordering<S>) this;, +++ b/guava/src/com/google/common/collect/CompoundOrdering.java, +    // Avoid using the Iterator to avoid generating garbage (issue 979).]