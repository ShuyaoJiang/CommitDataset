[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +  public void testFailureCause_throwsIfNotFailed() {, +    StopFailingService service = new StopFailingService();, +    try {, +      service.failureCause();, +      fail();, +    } catch (IllegalStateException e) {, +      // expected, +    }, +    service.startAndWait();, +    try {, +      service.failureCause();, +      fail();, +    } catch (IllegalStateException e) {, +      // expected, +    }, +    try {, +      service.stopAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(EXCEPTION, service.failureCause());, +      assertEquals(EXCEPTION, e.getCause());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +  public void testFailureCause_throwsIfNotFailed() {, +    StopFailingService service = new StopFailingService();, +    try {, +      service.failureCause();, +      fail();, +    } catch (IllegalStateException e) {, +      // expected, +    }, +    service.startAndWait();, +    try {, +      service.failureCause();, +      fail();, +    } catch (IllegalStateException e) {, +      // expected, +    }, +    try {, +      service.stopAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(EXCEPTION, service.failureCause());, +      assertEquals(EXCEPTION, e.getCause());, +    }, +  }, +, +++ b/guava/pom.xml, +    Guava has two code dependencies - javax.annotation, +    per the JSR-305 spec and javax.inject per the JSR-330 spec., +    <dependency>, +      <groupId>javax.inject</groupId>, +      <artifactId>javax.inject</artifactId>, +      <version>1</version>, +      <scope>provided</scope>, +    </dependency>, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +  public void testFailureCause_throwsIfNotFailed() {, +    StopFailingService service = new StopFailingService();, +    try {, +      service.failureCause();, +      fail();, +    } catch (IllegalStateException e) {, +      // expected, +    }, +    service.startAndWait();, +    try {, +      service.failureCause();, +      fail();, +    } catch (IllegalStateException e) {, +      // expected, +    }, +    try {, +      service.stopAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(EXCEPTION, service.failureCause());, +      assertEquals(EXCEPTION, e.getCause());, +    }, +  }, +, +++ b/guava/pom.xml, +    Guava has two code dependencies - javax.annotation, +    per the JSR-305 spec and javax.inject per the JSR-330 spec., +    <dependency>, +      <groupId>javax.inject</groupId>, +      <artifactId>javax.inject</artifactId>, +      <version>1</version>, +      <scope>provided</scope>, +    </dependency>, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +  /**, +   * @since 13.0, +   */, +   * @since 14.0, +   */, +  @Override public final Throwable failureCause() {]