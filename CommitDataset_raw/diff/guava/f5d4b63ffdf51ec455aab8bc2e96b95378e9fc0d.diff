[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMultimap.java, +/*, + * Copyright (C) 2007 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import com.google.common.annotations.GwtCompatible;, +, +import java.io.Serializable;, +import java.util.AbstractCollection;, +import java.util.AbstractMap;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.ConcurrentModificationException;, +import java.util.Iterator;, +import java.util.List;, +import java.util.ListIterator;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.RandomAccess;, +import java.util.Set;, +import java.util.SortedMap;, +import java.util.SortedSet;, +, +import javax.annotation.Nullable;, +, +/**, + * Basic implementation of the {@link Multimap} interface. This class represents, + * a multimap as a map that associates each key with a collection of values. All, + * methods of {@link Multimap} are supported, including those specified as, + * optional in the interface., + *, + * <p>To implement a multimap, a subclass must define the method {@link, + * #createCollection()}, which creates an empty collection of values for a key., + *, + * <p>The multimap constructor takes a map that has a single entry for each, + * distinct key. When you insert a key-value pair with a key that isn't already, + * in the multimap, {@code AbstractMultimap} calls {@link #createCollection()}, + * to create the collection of values for that key. The subclass should not call, + * {@link #createCollection()} directly, and a new instance should be created, + * every time the method is called., + *, + * <p>For example, the subclass could pass a {@link java.util.TreeMap} during, + * construction, and {@link #createCollection()} could return a {@link, + * java.util.TreeSet}, in which case the multimap's iterators would propagate, + * through the keys and values in sorted order., + *, + * <p>Keys and values may be null, as long as the underlying collection classes, + * support null elements., + *, + * <p>The collections created by {@link #createCollection()} may or may not, + * allow duplicates. If the collection, such as a {@link Set}, does not support, + * duplicates, an added key-value pair will replace an existing pair with the, + * same key and value, if such a pair is present. With collections like {@link, + * List} that allow duplicates, the collection will keep the existing key-value, + * pairs while adding a new pair., + *, + * <p>This class is not threadsafe when any concurrent operations update the, + * multimap, even if the underlying map and {@link #createCollection()} method, + * return threadsafe classes. Concurrent read operations will work correctly. To, + * allow concurrent update operations, wrap your multimap with a call to {@link, + * Multimaps#synchronizedMultimap}., + *, + * <p>For serialization to work, the subclass must specify explicit, + * {@code readObject} and {@code writeObject} methods., + *, + * @author Jared Levy, + * @author Louis Wasserman, + */, +@GwtCompatible(emulated = true), +abstract class AbstractMultimap<K, V> implements Multimap<K, V>, Serializable {, +  /*, +   * Here's an outline of the overall design., +   *, +   * The map variable contains the collection of values associated with each, +   * key. When a key-value pair is added to a multimap that didn't previously, +   * contain any values for that key, a new collection generated by, +   * createCollection is added to the map. That same collection instance, +   * remains in the map as long as the multimap has any values for the key. If, +   * all values for the key are removed, the key and collection are removed, +   * from the map., +   *, +   * The get method returns a WrappedCollection, which decorates the collection]