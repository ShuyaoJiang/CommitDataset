[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * @author Louis Wasserman, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * @author Louis Wasserman, +++ b/guava/src/com/google/common/base/Splitter.java, + * @author Louis Wasserman, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, + * @author Louis Wasserman, +++ b/guava/src/com/google/common/base/Splitter.java, + * @author Louis Wasserman, +++ b/guava/test/com/google/common/base/SplitterTest.java, +import com.google.testing.util.MoreAsserts;, +import java.util.Map;, +, +  public void testMapSplitter_trimmedBoth() {, +    Map<String, String> m = Splitter.on(','), +        .trimResults(), +        .withKeyValueSeparator(Splitter.on(':').trimResults()), +        .split("boy  : tom , girl: tina , cat  : kitty , dog: tommy ");, +    assertEquals("tom", m.get("boy"));, +    assertEquals("tina", m.get("girl"));, +    assertEquals("kitty", m.get("cat"));, +    assertEquals("tommy", m.get("dog"));, +  }, +, +  public void testMapSplitter_trimmedEntries() {, +    Map<String, String> m = Splitter.on(','), +        .trimResults(), +        .withKeyValueSeparator(":"), +        .split("boy  : tom , girl: tina , cat  : kitty , dog: tommy ");, +    assertEquals(" tom", m.get("boy  "));, +    assertEquals(" tina", m.get("girl"));, +    assertEquals(" kitty", m.get("cat  "));, +    assertEquals(" tommy", m.get("dog"));, +  }, +, +  public void testMapSplitter_trimmedKeyValue() {, +    Map<String, String> m = Splitter.on(','), +        .withKeyValueSeparator(Splitter.on(':').trimResults()), +        .split("boy  : tom , girl: tina , cat  : kitty , dog: tommy ");, +    assertEquals("tom", m.get("boy"));, +    assertEquals("tina", m.get("girl"));, +    assertEquals("kitty", m.get("cat"));, +    assertEquals("tommy", m.get("dog"));, +  }, +, +  public void testMapSplitter_notTrimmed() {, +    Map<String, String> m = Splitter.on(','), +        .withKeyValueSeparator(":"), +        .split(" boy:tom , girl: tina , cat :kitty , dog:  tommy ");, +    assertEquals("tom ", m.get(" boy"));, +    assertEquals(" tina ", m.get(" girl"));, +    assertEquals("kitty ", m.get(" cat "));, +    assertEquals("  tommy ", m.get(" dog"));, +  }, +, +  public void testMapSplitter_multiCharacterSeparator() {, +, +    // try different delimiters., +    Map<String, String> m = Splitter.on(","), +        .withKeyValueSeparator(":^&"), +        .split("boy:^&tom,girl:^&tina,cat:^&kitty,dog:^&tommy");, +    assertEquals("tom", m.get("boy"));, +    assertEquals("tina", m.get("girl"));, +    assertEquals("kitty", m.get("cat"));, +    assertEquals("tommy", m.get("dog"));, +  }, +, +  public void testMapSplitter_emptySeparator() {, +    try {, +      Splitter.on(",").withKeyValueSeparator("");, +      fail("Should be impossible to use an empty separator.");, +    } catch (IllegalArgumentException expected) {, +      // Pass, +    }, +  }, +, +  public void testMapSplitter_malformedEntry() {, +    try {, +      Splitter.on(",").withKeyValueSeparator("=").split("a=1,b,c=2");, +      fail("Shouldn't accept malformed entry \"b\"");, +    } catch(IllegalArgumentException expected) {, +      // Pass, +    }, +  }, +, +  public void testMapSplitter_orderedResults() {, +    Map<String, String> m = Splitter.on(","), +        .withKeyValueSeparator(":"), +        .split("boy:tom,girl:tina,cat:kitty,dog:tommy");, +    MoreAsserts.assertContentsInOrder(m.keySet(), "boy", "girl", "cat", "dog");, +, +    assertEquals("tom", m.get("boy"));, +    assertEquals("tina", m.get("girl"));, +    assertEquals("kitty", m.get("cat"));, +    assertEquals("tommy", m.get("dog"));, +, +    // try in a different order, +    m = Splitter.on(","), +        .withKeyValueSeparator(":")]