[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}., +   * {@link LoadingCache#getAll}., +   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls, +   * to {@link LoadingCache#get} if this method is not overriden., +    // This will be caught by getAll(), causing it to fall back to multiple calls to, +    // LoadingCache.get, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}., +   * {@link LoadingCache#getAll}., +   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls, +   * to {@link LoadingCache#get} if this method is not overriden., +    // This will be caught by getAll(), causing it to fall back to multiple calls to, +    // LoadingCache.get, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no, +   * effect on selecting which entry should be evicted next., +   *, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}., +   * {@link LoadingCache#getAll}., +   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls, +   * to {@link LoadingCache#get} if this method is not overriden., +    // This will be caught by getAll(), causing it to fall back to multiple calls to, +    // LoadingCache.get, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no, +   * effect on selecting which entry should be evicted next., +   *, +++ b/guava/src/com/google/common/cache/CacheLoader.java, + * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}., +   * {@link CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}., +   * {@link LoadingCache#getAll}., +   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls, +   * to {@link LoadingCache#get} if this method is not overriden., +    // This will be caught by getAll(), causing it to fall back to multiple calls to, +    // LoadingCache.get, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}., +   * {@link LoadingCache#getAll}., +   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls, +   * to {@link LoadingCache#get} if this method is not overriden., +    // This will be caught by getAll(), causing it to fall back to multiple calls to, +    // LoadingCache.get, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no, +   * effect on selecting which entry should be evicted next., +   *, +++ b/guava/src/com/google/common/cache/CacheLoader.java, + * Computes or retrieves values, based on a key, for use in populating a {@link LoadingCache}., +   * {@link CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}., +   * {@link LoadingCache#getAll}., +   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls, +   * to {@link LoadingCache#get} if this method is not overriden., +    // This will be caught by getAll(), causing it to fall back to multiple calls to, +    // LoadingCache.get, +++ b/guava/src/com/google/common/cache/LocalCache.java, +      this(new LocalCache<K, V>(builder, null));, +    private LocalManualCache(LocalCache<K, V> localCache) {, +      this.localCache = localCache;, +      super(new LocalCache<K, V>(builder, checkNotNull(loader)));, +    // LoadingCache methods, +, +    @Override, +    public V get(K key) throws ExecutionException {, +      return localCache.getOrLoad(key);, +    }, +, +    @Override, +    public V getUnchecked(K key) {, +      try {, +        return get(key);, +      } catch (ExecutionException e) {, +        throw new UncheckedExecutionException(e.getCause());, +      }, +    }, +    @Override, +    public final V apply(K key) {, +      return getUnchecked(key);, +    }, +]