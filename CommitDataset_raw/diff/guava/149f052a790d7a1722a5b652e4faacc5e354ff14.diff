[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java, +import static com.google.common.util.concurrent.AbstractScheduledService.Scheduler.newFixedDelaySchedule;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +import java.util.concurrent.TimeoutException;, +  volatile Scheduler configuration = newFixedDelaySchedule(0, 10, TimeUnit.MILLISECONDS);, +        return newFixedDelaySchedule(0, 1, TimeUnit.MILLISECONDS);, +        return newFixedDelaySchedule(0, 1, TimeUnit.MILLISECONDS);, +      Scheduler schedule = newFixedDelaySchedule(initialDelay, delay, unit);, +    public void testFixedDelayScheduleFarFuturePotentiallyOverflowingScheduleIsNeverReached(), +        throws Exception {, +      TestAbstractScheduledCustomService service = new TestAbstractScheduledCustomService() {, +        @Override protected Scheduler scheduler() {, +          return newFixedDelaySchedule(Long.MAX_VALUE, Long.MAX_VALUE, SECONDS);, +        }, +      };, +      service.startAsync().awaitRunning();, +      try {, +        service.firstBarrier.await(5, SECONDS);, +        fail();, +      } catch (TimeoutException expected) {, +      }, +      assertEquals(0, service.numIterations.get());, +      service.stopAsync();, +      service.awaitTerminated();, +    }, +, +    public void testCustomSchedulerFarFuturePotentiallyOverflowingScheduleIsNeverReached(), +        throws Exception {, +      TestAbstractScheduledCustomService service = new TestAbstractScheduledCustomService() {, +        @Override protected Scheduler scheduler() {, +          return new AbstractScheduledService.CustomScheduler() {, +            @Override, +            protected Schedule getNextSchedule() throws Exception {, +              return new Schedule(Long.MAX_VALUE, SECONDS);, +            }, +          };, +        }, +      };, +      service.startAsync().awaitRunning();, +      try {, +        service.firstBarrier.await(5, SECONDS);, +        fail();, +      } catch (TimeoutException expected) {, +      }, +      assertEquals(0, service.numIterations.get());, +      service.stopAsync();, +      service.awaitTerminated();, +    }, +]