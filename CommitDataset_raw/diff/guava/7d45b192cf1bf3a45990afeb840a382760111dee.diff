[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Set;, +      // TODO(b/28087289): update if support for parallel edges added, +      assertThat(graph.adjacentNodes(node)).hasSize(graph.degree(node));, +      assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));, +      assertThat(graph.successors(node)).hasSize(graph.outDegree(node));, +, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Set;, +      // TODO(b/28087289): update if support for parallel edges added, +      assertThat(graph.adjacentNodes(node)).hasSize(graph.degree(node));, +      assertThat(graph.predecessors(node)).hasSize(graph.inDegree(node));, +      assertThat(graph.successors(node)).hasSize(graph.outDegree(node));, +, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import com.google.common.collect.Sets;, +import java.util.Iterator;, +import java.util.Set;, +      Iterator<Integer> endpointsIterator = graph.incidentNodes(edge).iterator();, +      Integer nodeA = endpointsIterator.next();, +      Integer nodeB = endpointsIterator.next();, +      assertThat(graph.incidentEdges(node)).hasSize(graph.degree(node));, +      assertThat(graph.degree(node)).isAtLeast(graph.adjacentNodes(node).size());, +      assertThat(graph.inEdges(node)).hasSize(graph.inDegree(node));, +      assertThat(graph.inDegree(node)).isAtLeast(graph.predecessors(node).size());, +      assertThat(graph.outEdges(node)).hasSize(graph.outDegree(node));, +      assertThat(graph.outDegree(node)).isAtLeast(graph.successors(node).size());, +, +      for (Integer otherNode : graph.nodes()) {, +        Set<String> edgesConnecting = graph.edgesConnecting(node, otherNode);, +        boolean isSelfLoop = node.equals(otherNode);, +        if (graph.isDirected() || !isSelfLoop) {, +          assertThat(edgesConnecting).isEqualTo(, +              Sets.intersection(graph.outEdges(node), graph.inEdges(otherNode)));, +        }, +        if (!graph.allowsParallelEdges()) {, +          assertThat(edgesConnecting.size()).isAtMost(1);, +        }, +        if (!graph.allowsSelfLoops() && isSelfLoop) {, +          assertThat(edgesConnecting).isEmpty();, +        }, +        for (String edge : edgesConnecting) {, +          assertThat(graph.incidentNodes(edge)).isEqualTo(Endpoints.of(graph, node, otherNode));, +        }, +      }, +]