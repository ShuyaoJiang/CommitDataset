[+++ b/android/guava-tests/test/com/google/common/graph/TraverserTest.java, +   * A graph consisting of a single root {@code a}:, +   *, +   * <pre>{@code, +   * a, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> SINGLE_ROOT = createSingleRootGraph();, +, +  /**, +  public void forGraph_breadthFirst_singleRoot() {, +    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).breadthFirst('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_singleRoot() {, +    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_singleRoot() {, +    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).depthFirstPostOrder('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forTree_breadthFirst_singleRoot() {, +    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).breadthFirst('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forTree_depthFirstPreOrder_singleRoot() {, +    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forTree_depthFirstPostOrder_singleRoot() {, +    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).depthFirstPostOrder('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  private static ImmutableGraph<Character> createSingleRootGraph() {, +    MutableGraph<Character> graph = GraphBuilder.directed().build();, +    graph.addNode('a');, +    return ImmutableGraph.copyOf(graph);, +  }, +, +++ b/android/guava-tests/test/com/google/common/graph/TraverserTest.java, +   * A graph consisting of a single root {@code a}:, +   *, +   * <pre>{@code, +   * a, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> SINGLE_ROOT = createSingleRootGraph();, +, +  /**, +  public void forGraph_breadthFirst_singleRoot() {, +    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).breadthFirst('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_singleRoot() {, +    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_singleRoot() {, +    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).depthFirstPostOrder('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forTree_breadthFirst_singleRoot() {, +    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).breadthFirst('a');, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forTree_depthFirstPreOrder_singleRoot() {, +    Iterable<Character> result = Traverser.forTree(SINGLE_ROOT).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(result, "a");]