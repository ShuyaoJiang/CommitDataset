[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMapKeySet.java, +final class ImmutableMapKeySet<K, V> extends ImmutableSet.Indexed<K> {, +  K get(int index) {, +    return map.entrySet().asList().get(index).getKey();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMapKeySet.java, +final class ImmutableMapKeySet<K, V> extends ImmutableSet.Indexed<K> {, +  K get(int index) {, +    return map.entrySet().asList().get(index).getKey();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +  private final class EntrySet extends ImmutableSet.Indexed<Entry<E>> {, +    Entry<E> get(int index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMapKeySet.java, +final class ImmutableMapKeySet<K, V> extends ImmutableSet.Indexed<K> {, +  K get(int index) {, +    return map.entrySet().asList().get(index).getKey();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +  private final class EntrySet extends ImmutableSet.Indexed<Entry<E>> {, +    Entry<E> get(int index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java, +  , +  abstract static class Indexed<E> extends ImmutableSet<E> {, +    abstract E get(int index);, +, +    @Override, +    public UnmodifiableIterator<E> iterator() {, +      return asList().iterator();, +    }, +, +    @Override, +    ImmutableList<E> createAsList() {, +      return new ImmutableAsList<E>() {, +        @Override, +        public E get(int index) {, +          return Indexed.this.get(index);, +        }, +, +        @Override, +        Indexed<E> delegateCollection() {, +          return Indexed.this;, +        }, +      };, +    }, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMapKeySet.java, +final class ImmutableMapKeySet<K, V> extends ImmutableSet.Indexed<K> {, +  K get(int index) {, +    return map.entrySet().asList().get(index).getKey();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +  private final class EntrySet extends ImmutableSet.Indexed<Entry<E>> {, +    Entry<E> get(int index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java, +  , +  abstract static class Indexed<E> extends ImmutableSet<E> {, +    abstract E get(int index);, +, +    @Override, +    public UnmodifiableIterator<E> iterator() {, +      return asList().iterator();, +    }, +, +    @Override, +    ImmutableList<E> createAsList() {, +      return new ImmutableAsList<E>() {, +        @Override, +        public E get(int index) {, +          return Indexed.this.get(index);, +        }, +, +        @Override, +        Indexed<E> delegateCollection() {, +          return Indexed.this;, +        }, +      };, +    }, +  }, +++ b/guava/src/com/google/common/collect/ImmutableMapKeySet.java, +final class ImmutableMapKeySet<K, V> extends ImmutableSet.Indexed<K> {, +  K get(int index) {, +    return map.entrySet().asList().get(index).getKey();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMapKeySet.java, +final class ImmutableMapKeySet<K, V> extends ImmutableSet.Indexed<K> {, +  K get(int index) {, +    return map.entrySet().asList().get(index).getKey();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +  private final class EntrySet extends ImmutableSet.Indexed<Entry<E>> {, +    Entry<E> get(int index) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java, +  , +  abstract static class Indexed<E> extends ImmutableSet<E> {, +    abstract E get(int index);, +, +    @Override, +    public UnmodifiableIterator<E> iterator() {, +      return asList().iterator();, +    }, +]