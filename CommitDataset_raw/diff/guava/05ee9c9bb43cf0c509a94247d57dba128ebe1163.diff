[+++ b/android/guava-tests/test/com/google/common/collect/ImmutableEnumMapTest.java, +import static com.google.common.base.Preconditions.checkState;, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.base.Function;, +  public void testIteratesOnce() {, +    Map<AnEnum, AnEnum> map = Maps.asMap(ImmutableSet.of(AnEnum.A), new Function<AnEnum, AnEnum>() {, +      boolean used = false;, +, +      @Override public AnEnum apply(AnEnum ae) {, +        checkState(!used, "should not be applied more than once");, +        used = true;, +        return ae;, +      }, +    });, +    ImmutableMap<AnEnum, AnEnum> copy = Maps.immutableEnumMap(map);, +    assertThat(copy.entrySet()).containsExactly(Helpers.mapEntry(AnEnum.A, AnEnum.A));, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableEnumMapTest.java, +import static com.google.common.base.Preconditions.checkState;, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.base.Function;, +  public void testIteratesOnce() {, +    Map<AnEnum, AnEnum> map = Maps.asMap(ImmutableSet.of(AnEnum.A), new Function<AnEnum, AnEnum>() {, +      boolean used = false;, +, +      @Override public AnEnum apply(AnEnum ae) {, +        checkState(!used, "should not be applied more than once");, +        used = true;, +        return ae;, +      }, +    });, +    ImmutableMap<AnEnum, AnEnum> copy = Maps.immutableEnumMap(map);, +    assertThat(copy.entrySet()).containsExactly(Helpers.mapEntry(AnEnum.A, AnEnum.A));, +  }, +, +++ b/android/guava/src/com/google/common/collect/Maps.java, +import static com.google.common.collect.CollectPreconditions.checkEntryNotNull;, +    }, +    Iterator<? extends Map.Entry<K, ? extends V>> entryItr = map.entrySet().iterator();, +    if (!entryItr.hasNext()) {, +    Map.Entry<K, ? extends V> entry1 = entryItr.next();, +    K key1 = entry1.getKey();, +    V value1 = entry1.getValue();, +    checkEntryNotNull(key1, value1);, +    Class<K> clazz = key1.getDeclaringClass();, +    EnumMap<K, V> enumMap = new EnumMap<K, V>(clazz);, +    enumMap.put(key1, value1);, +    while (entryItr.hasNext()) {, +      Entry<K, ? extends V> entry = entryItr.next();, +      K key = entry.getKey();, +      V value = entry.getValue();, +      checkEntryNotNull(key, value);, +      enumMap.put(key, value);, +    return ImmutableEnumMap.asImmutable(enumMap);, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableEnumMapTest.java, +import static com.google.common.base.Preconditions.checkState;, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.base.Function;, +  public void testIteratesOnce() {, +    Map<AnEnum, AnEnum> map = Maps.asMap(ImmutableSet.of(AnEnum.A), new Function<AnEnum, AnEnum>() {, +      boolean used = false;, +, +      @Override public AnEnum apply(AnEnum ae) {, +        checkState(!used, "should not be applied more than once");, +        used = true;, +        return ae;, +      }, +    });, +    ImmutableMap<AnEnum, AnEnum> copy = Maps.immutableEnumMap(map);, +    assertThat(copy.entrySet()).containsExactly(Helpers.mapEntry(AnEnum.A, AnEnum.A));, +  }, +, +++ b/android/guava/src/com/google/common/collect/Maps.java, +import static com.google.common.collect.CollectPreconditions.checkEntryNotNull;, +    }, +    Iterator<? extends Map.Entry<K, ? extends V>> entryItr = map.entrySet().iterator();, +    if (!entryItr.hasNext()) {, +    Map.Entry<K, ? extends V> entry1 = entryItr.next();, +    K key1 = entry1.getKey();, +    V value1 = entry1.getValue();, +    checkEntryNotNull(key1, value1);, +    Class<K> clazz = key1.getDeclaringClass();, +    EnumMap<K, V> enumMap = new EnumMap<K, V>(clazz);, +    enumMap.put(key1, value1);, +    while (entryItr.hasNext()) {, +      Entry<K, ? extends V> entry = entryItr.next();, +      K key = entry.getKey();, +      V value = entry.getValue();, +      checkEntryNotNull(key, value);, +      enumMap.put(key, value);, +    return ImmutableEnumMap.asImmutable(enumMap);, +++ b/guava-gwt/test/com/google/common/collect/ImmutableEnumMapTest_gwt.java, +public void testIteratesOnce() throws Exception {, +  com.google.common.collect.ImmutableEnumMapTest testCase = new com.google.common.collect.ImmutableEnumMapTest();, +  testCase.testIteratesOnce();, +}, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableEnumMapTest.java, +import static com.google.common.base.Preconditions.checkState;]