[+++ b/guava/src/com/google/common/collect/Ordering.java, + * A comparator, with additional methods to support common operations. This is an "enriched", + * version of {@code Comparator}, in the same sense that {@link FluentIterable} is an enriched, + * {@link Iterable}., + *, + * <h3>Three types of methods</h3>, + *, + * Like other fluent types, there are three types of methods present: methods for <i>acquiring</i>,, + * <i>chaining</i>, and <i>using</i>., + *, + * <h4>Acquiring</h4>, + * <li>Subclass it and implement {@link #compare} instead of implementing {@link Comparator}, + *     directly, + * <li>Pass a <i>pre-existing</i> {@link Comparator} instance to {@link #from(Comparator)}, + * <h4>Chaining</h4>, + *, + * <p>Then you can use the <i>chaining</i> methods to get an altered version of that {@code, + * Ordering}, including:, + * <h4>Using</h4>, + *, + * <p>Finally, use the resulting {@code Ordering} anywhere a {@link Comparator} is required, or use, + * any of its special operations, such as:</p>, + * <h3>Understanding complex orderings</h3>, + *, + * <p>Complex chained orderings like the following example can be challenging to understand., + * <pre>   {@code, + *, + *   Ordering<Foo> ordering =, + *       Ordering.natural(), + *           .nullsFirst(), + *           .onResultOf(getBarFunction), + *           .nullsLast();}</pre>, + *, + * Note that each chaining method returns a new ordering instance which is backed by the previous, + * instance, but has the chance to act on values <i>before</i> handing off to that backing, + * instance. As a result, it usually helps to read chained ordering expressions <i>backwards</i>., + * For example, when {@code compare} is called on the above ordering:, + *, + * <ol>, + * <li>First, if only one {@code Foo} is null, that null value is treated as <i>greater</i>, + * <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be, + *     comparing {@code Bar} values from now on), + * <li>Next, if only one {@code Bar} is null, that null value is treated as <i>lesser</i>, + * <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is, + *     returned), + * </ol>, + *, + * <p>Alas, {@link #reverse} is a little different. As you read backwards through a chain and, + * encounter a call to {@code reverse}, continue working backwards until a result is determined,, + * and then reverse that result., + *, + * <h3>Additional notes</h3>, + *, + * "http://code.google.com/p/guava-libraries/wiki/OrderingExplained">]