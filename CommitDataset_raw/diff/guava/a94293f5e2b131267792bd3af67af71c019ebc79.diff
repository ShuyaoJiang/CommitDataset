[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +public abstract class ImmutableMap<K, V> implements Map<K, V>, Serializable {, +  public boolean isEmpty() {, +    return size() == 0;, +  }, +, +  @Override, +  private transient ImmutableSet<Entry<K, V>> cachedEntrySet = null;, +, +    if (cachedEntrySet != null) {, +      return cachedEntrySet;, +    }, +    return cachedEntrySet = createEntrySet();, +  private transient ImmutableSet<K> cachedKeySet = null;, +, +    if (cachedKeySet != null) {, +      return cachedKeySet;, +    }, +    return cachedKeySet = createKeySet();, +  private transient ImmutableCollection<V> cachedValues = null;, +  public ImmutableCollection<V> values() {, +    if (cachedValues != null) {, +      return cachedValues;, +    }, +    return cachedValues = createValues();, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +  }, +, +  @Override public boolean equals(@Nullable Object object) {, +    return Maps.equalsImpl(this, object);, +  }, +, +  @Override public int hashCode() {, +    // not caching hash code since it could change if map values are mutable, +    // in a way that modifies their hash codes, +    return entrySet().hashCode();, +  }, +, +  @Override public String toString() {, +    return Maps.toStringImpl(this);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +public abstract class ImmutableMap<K, V> implements Map<K, V>, Serializable {, +  public boolean isEmpty() {, +    return size() == 0;, +  }, +, +  @Override, +  private transient ImmutableSet<Entry<K, V>> cachedEntrySet = null;, +, +    if (cachedEntrySet != null) {, +      return cachedEntrySet;, +    }, +    return cachedEntrySet = createEntrySet();, +  private transient ImmutableSet<K> cachedKeySet = null;, +, +    if (cachedKeySet != null) {, +      return cachedKeySet;, +    }, +    return cachedKeySet = createKeySet();, +  private transient ImmutableCollection<V> cachedValues = null;, +  public ImmutableCollection<V> values() {, +    if (cachedValues != null) {, +      return cachedValues;, +    }, +    return cachedValues = createValues();, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +  }, +, +  @Override public boolean equals(@Nullable Object object) {, +    return Maps.equalsImpl(this, object);, +  }, +, +  @Override public int hashCode() {, +    // not caching hash code since it could change if map values are mutable, +    // in a way that modifies their hash codes, +    return entrySet().hashCode();, +  }, +, +  @Override public String toString() {, +    return Maps.toStringImpl(this);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import java.util.AbstractMap;, +   * {@code AbstractMap} extension that implements {@link #isEmpty()} as {@code, +   * entrySet().isEmpty()} instead of {@code size() == 0} to speed up, +   * implementations where {@code size()} is O(n), and it delegates the {@code, +   * isEmpty()} methods of its key set and value collection to this, +   * implementation., +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +public abstract class ImmutableMap<K, V> implements Map<K, V>, Serializable {, +  public boolean isEmpty() {, +    return size() == 0;, +  }, +]