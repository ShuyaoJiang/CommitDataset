[+++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  private static final Future<String> FAILED_FUTURE_ERROR =, +      immediateFailedFuture(ERROR);, +    SettableFuture<String> future = SettableFuture.create();, +      get(future, TwoArgConstructorException.class);, +    SettableFuture<String> future = SettableFuture.create();, +      get(future, 0, SECONDS, TwoArgConstructorException.class);, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  private static final Future<String> FAILED_FUTURE_ERROR =, +      immediateFailedFuture(ERROR);, +    SettableFuture<String> future = SettableFuture.create();, +      get(future, TwoArgConstructorException.class);, +    SettableFuture<String> future = SettableFuture.create();, +      get(future, 0, SECONDS, TwoArgConstructorException.class);, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +  private abstract static class ImmediateFuture<V>, +      implements ListenableFuture<V> {, +    @Override, +    public void addListener(Runnable listener, Executor executor) {, +      executor.execute(listener);, +    }, +, +    @Override, +    public boolean cancel(boolean mayInterruptIfRunning) {, +      return false;, +    }, +, +    @Override, +    public abstract V get() throws ExecutionException;, +, +    @Override, +    public V get(long timeout, TimeUnit unit) throws ExecutionException {, +      return get();, +    }, +, +    @Override, +    public boolean isCancelled() {, +      return false;, +    }, +, +    @Override, +    public boolean isDone() {, +      return true;, +    }, +  }, +, +  private static class ImmediateSuccessfulFuture<V> extends ImmediateFuture<V> {, +, +    private final V value;, +, +    ImmediateSuccessfulFuture(V value) {, +      this.value = value;, +    }, +, +    @Override, +    public V get() {, +      return value;, +    }, +  }, +, +  private static class ImmediateSuccessfulCheckedFuture<V, X extends Exception>, +      extends ImmediateFuture<V> implements CheckedFuture<V, X> {, +, +    private final V value;, +, +    ImmediateSuccessfulCheckedFuture(V value) {, +      this.value = value;, +    }, +, +    @Override, +    public V get() {, +      return value;, +    }, +, +    @Override, +    public V checkedGet() {, +      return value;, +    }, +, +    @Override, +    public V checkedGet(long timeout, TimeUnit unit) {, +      return value;, +    }, +  }, +, +  private static class ImmediateFailedFuture<V> extends ImmediateFuture<V> {, +, +    private final Throwable thrown;, +, +    ImmediateFailedFuture(Throwable thrown) {, +      this.thrown = thrown;, +    }, +, +    @Override, +    public V get() throws ExecutionException {, +      throw new ExecutionException(thrown);, +    }, +  }, +, +  private static class ImmediateCancelledFuture<V> extends ImmediateFuture<V> {]