[+++ b/guava/src/com/google/common/base/Optional.java, + * <p><b>Comparison to {@code java.util.Optional} (JDK 8 and higher):</b> A new {@code Optional}, + * class was added for Java 8. The two classes are extremely similar, but incompatible (they cannot, + * share a common supertype). <i>All</i> known differences are listed either here or with the, + * relevant methods below., + *, + * <ul>, + * <li>This class is serializable; {@code java.util.Optional} is not., + * <li>{@code java.util.Optional} has the additional methods {@code ifPresent}, {@code filter},, + *     {@code flatMap}, and {@code orElseThrow}., + * <li>{@code java.util} offers the primitive-specialized versions {@code OptionalInt}, {@code, + *     OptionalLong} and {@code OptionalDouble}, the use of which is recommended; Guava does not, + *     have these., + * </ul>, + *, + * <p><b>There are no plans to deprecate this class in the foreseeable future.</b> However, we do, + * gently recommend that you prefer the new, standard Java class whenever possible., + *, +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's, +   * {@code Optional.empty}., +   * Returns an {@code Optional} instance containing the given non-null reference. To have {@code, +   * null} treated as {@link #absent}, use {@link #fromNullable} instead., +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences., +   *, +   * @throws NullPointerException if {@code reference} is null, +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's, +   * {@code Optional.ofNullable}., +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences., +   * <p><b>Comparison to {@code java.util.Optional}:</b> when the value is absent, this method, +   * throws {@link IllegalStateException}, whereas the Java 8 counterpart throws {@link, +   * NoSuchElementException}., +   *, +   *     {@code false}); depending on this <i>specific</i> exception type (over the more general, +   *     {@link RuntimeException}) is discouraged, +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's, +   * {@code Optional.orElse}, but will not accept {@code null} as a {@code defaultValue} ({@link, +   * #orNull} must be used instead). As a result, the value returned by this method is guaranteed, +   * non-null, which is not the case for the {@code java.util} equivalent., +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's, +   * {@code Optional} class; write {@code thisOptional.isPresent() ? thisOptional : secondChoice}, +   * instead., +   * Returns the contained instance if it is present; {@code supplier.get()} otherwise., +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's, +   * {@code Optional.orElseGet}, except when {@code supplier} returns {@code null}. In this case, +   * this method throws an exception, whereas the Java 8 method returns the {@code null} to the, +   * caller., +   *, +   * @throws NullPointerException if this optional's value is absent and the supplier returns, +   *     {@code null}, +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's, +   * {@code Optional.orElse(null)}., +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's, +   * {@code Optional} class. However, this common usage: <pre>   {@code, +   *, +   *   for (Foo foo : possibleFoo.asSet()) {, +   *     doSomethingWith(foo);, +   *   }}</pre>, +   *, +   * ... can be replaced with: <pre>   {@code, +   *, +   *   possibleFoo.ifPresent(foo -> doSomethingWith(foo));}</pre>, +   *, +   * {@link Optional#absent} is returned., +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is similar to Java 8's, +   * {@code Optional.map}, except when {@code function} returns {@code null}. In this case this, +   * method throws an exception, whereas the Java 8 method returns {@code Optional.absent()}., +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences., +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this class leaves the specific choice of, +   * hash code unspecified, unlike the Java 8 equivalent., +   * Returns a string representation for this instance., +   *, +   * <p><b>Comparison to {@code java.util.Optional}:</b> this class leaves the specific string, +   * representation unspecified, unlike the Java 8 equivalent., +   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's, +   * {@code Optional} class; use, +   * {@code optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead., +   *]