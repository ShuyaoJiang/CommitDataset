[+++ b/guava/src/com/google/common/eventbus/AnnotatedHandlerFinder.java, +import com.google.common.base.Objects;, +import com.google.common.collect.Maps;, +import java.util.Arrays;, +import java.util.List;, +import java.util.Map;, +import javax.annotation.Nullable;, +, +  private static final class MethodIdentifier {, +    private final String name;, +    private final List<Class<?>> parameterTypes;, +    , +    MethodIdentifier(Method method) {, +      this.name = method.getName();, +      this.parameterTypes = Arrays.asList(method.getParameterTypes());, +    }, +    , +    @Override, +    public int hashCode() {, +      return Objects.hashCode(name, parameterTypes);, +    }, +    , +    @Override, +    public boolean equals(@Nullable Object o) {, +      if (o instanceof MethodIdentifier) {, +        MethodIdentifier ident = (MethodIdentifier) o;, +        return name.equals(ident.name) && parameterTypes.equals(ident.parameterTypes);, +      }, +      return false;, +    }, +  }, +, +    Map<MethodIdentifier, Method> identifiers = Maps.newHashMap();, +    for (Class<?> superClazz : supers) {, +      for (Method superClazzMethod : superClazz.getMethods()) {, +        if (superClazzMethod.isAnnotationPresent(Subscribe.class)) {, +          Class<?>[] parameterTypes = superClazzMethod.getParameterTypes();, +            throw new IllegalArgumentException("Method " + superClazzMethod, +          , +          MethodIdentifier ident = new MethodIdentifier(superClazzMethod);, +          if (!identifiers.containsKey(ident)) {, +            identifiers.put(ident, superClazzMethod);, +    }, +    return ImmutableList.copyOf(identifiers.values());]