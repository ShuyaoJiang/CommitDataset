[+++ b/guava-tests/test/com/google/common/base/ThrowablesTest.java, +import static com.google.common.base.Throwables.throwIfInstanceOf;, +import static com.google.common.base.Throwables.throwIfUnchecked;, +  public void testThrowIfUnchecked_Unchecked() {, +    try {, +      throwIfUnchecked(new SomeUncheckedException());, +      fail();, +    } catch (SomeUncheckedException expected) {, +    }, +  }, +, +  public void testThrowIfUnchecked_Error() {, +    try {, +      throwIfUnchecked(new SomeError());, +      fail();, +    } catch (SomeError expected) {, +    }, +  }, +, +  public void testThrowIfUnchecked_Checked() {, +    throwIfUnchecked(new SomeCheckedException());, +  }, +, +  public void testThrowIfUnchecked_null() throws SomeCheckedException {, +    try {, +      throwIfUnchecked(null);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  public void testThrowIfInstanceOf_Unchecked() throws SomeCheckedException {, +    throwIfInstanceOf(new SomeUncheckedException(), SomeCheckedException.class);, +  }, +, +  public void testThrowIfInstanceOf_CheckedDifferent() throws SomeCheckedException {, +    throwIfInstanceOf(new SomeOtherCheckedException(), SomeCheckedException.class);, +  }, +, +  public void testThrowIfInstanceOf_CheckedSame() {, +    try {, +      throwIfInstanceOf(new SomeCheckedException(), SomeCheckedException.class);, +      fail();, +    } catch (SomeCheckedException expected) {, +    }, +  }, +, +  public void testThrowIfInstanceOf_CheckedSubclass() {, +    try {, +      throwIfInstanceOf(new SomeCheckedException() {}, SomeCheckedException.class);, +      fail();, +    } catch (SomeCheckedException expected) {, +    }, +  }, +, +  public void testThrowIfInstanceOf_null() throws SomeCheckedException {, +    try {, +      throwIfInstanceOf(null, SomeCheckedException.class);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/base/ThrowablesTest.java, +import static com.google.common.base.Throwables.throwIfInstanceOf;, +import static com.google.common.base.Throwables.throwIfUnchecked;, +  public void testThrowIfUnchecked_Unchecked() {, +    try {, +      throwIfUnchecked(new SomeUncheckedException());, +      fail();, +    } catch (SomeUncheckedException expected) {, +    }, +  }, +, +  public void testThrowIfUnchecked_Error() {, +    try {, +      throwIfUnchecked(new SomeError());, +      fail();, +    } catch (SomeError expected) {, +    }, +  }, +, +  public void testThrowIfUnchecked_Checked() {, +    throwIfUnchecked(new SomeCheckedException());, +  }, +, +  public void testThrowIfUnchecked_null() throws SomeCheckedException {, +    try {, +      throwIfUnchecked(null);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  public void testThrowIfInstanceOf_Unchecked() throws SomeCheckedException {, +    throwIfInstanceOf(new SomeUncheckedException(), SomeCheckedException.class);, +  }, +, +  public void testThrowIfInstanceOf_CheckedDifferent() throws SomeCheckedException {, +    throwIfInstanceOf(new SomeOtherCheckedException(), SomeCheckedException.class);]