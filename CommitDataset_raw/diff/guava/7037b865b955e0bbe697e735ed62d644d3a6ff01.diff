[+++ b/guava-tests/test/com/google/common/collect/TopKSelectorTest.java, +/*, + * Copyright (C) 2014 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.truth.Truth.assertThat;, +, +import com.google.common.math.IntMath;, +import com.google.common.primitives.Ints;, +, +import junit.framework.TestCase;, +, +import java.math.RoundingMode;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +, +/**, + * Tests for {@code TopKSelector}., + *, + * @author Louis Wasserman, + */, +public class TopKSelectorTest extends TestCase {, +, +  public void testNegativeK() {, +    try {, +      TopKSelector.least(-1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      TopKSelector.greatest(-1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      TopKSelector.least(-1, Ordering.natural());, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      TopKSelector.greatest(-1, Ordering.natural());, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +  , +  public void testZeroK() {, +    TopKSelector<Integer> top = TopKSelector.least(0);, +    for (int i = 0; i < 10; i++) {, +      top.offer(i);, +    }, +    assertThat(top.topK()).isEmpty();, +  }, +  , +  public void testNoElementsOffered() {, +    TopKSelector<Integer> top = TopKSelector.least(10);, +    assertThat(top.topK()).isEmpty();, +  }, +  , +  public void testOfferedFewerThanK() {, +    TopKSelector<Integer> top = TopKSelector.least(10);, +    top.offer(3);, +    top.offer(5);, +    top.offer(2);, +    assertThat(top.topK()).containsExactly(2, 3, 5).inOrder();, +  }, +  , +  public void testOfferedKPlusOne() {, +    for (List<Integer> list : Collections2.permutations(Ints.asList(1, 2, 3, 4, 5))) {, +      TopKSelector<Integer> top = TopKSelector.least(4);, +      top.offerAll(list);, +      assertThat(top.topK()).containsExactly(1, 2, 3, 4).inOrder();, +    }, +  }, +  , +  public void testOfferedThreeK() {, +    for (List<Integer> list : Collections2.permutations(Ints.asList(1, 2, 3, 4, 5, 6))) {, +      TopKSelector<Integer> top = TopKSelector.least(2);, +      top.offerAll(list);, +      assertThat(top.topK()).containsExactly(1, 2).inOrder();, +    }, +  }, +  , +  public void testDifferentComparator() {, +    TopKSelector<String> top = TopKSelector.least(3, String.CASE_INSENSITIVE_ORDER);]