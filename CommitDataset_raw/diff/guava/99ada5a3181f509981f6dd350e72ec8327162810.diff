[+++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  /**, +   * An inlined private copy of {@link Uninterruptibles#getUninterruptibly} used to break an, +   * internal dependency on other /util/concurrent classes., +   */, +  private static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          return future.get();, +        } catch (InterruptedException e) {, +          interrupted = true;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +, +      V value = getUninterruptibly(this);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  /**, +   * An inlined private copy of {@link Uninterruptibles#getUninterruptibly} used to break an, +   * internal dependency on other /util/concurrent classes., +   */, +  private static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          return future.get();, +        } catch (InterruptedException e) {, +          interrupted = true;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +, +      V value = getUninterruptibly(this);, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  /**, +   * An inlined private copy of {@link Uninterruptibles#getUninterruptibly} used to break an, +   * internal dependency on other /util/concurrent classes., +   */, +  private static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          return future.get();, +        } catch (InterruptedException e) {, +          interrupted = true;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +, +      V value = getUninterruptibly(this);]