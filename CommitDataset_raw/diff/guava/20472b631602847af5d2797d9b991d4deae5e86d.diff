[+++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +      list.add(checkNotNull(input));, +    return concat(list);, +        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());, +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +      list.add(checkNotNull(input));, +    return concat(list);, +        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());, +++ b/android/guava/src/com/google/common/collect/Iterators.java, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(a, b));, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(a, b, c));, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(a, b, c, d));, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(inputs));, +  private static class ConcatenatedIterator<T>, +      extends MultitransformedIterator<Iterator<? extends T>, T> {, +    public ConcatenatedIterator(Iterator<? extends Iterator<? extends T>> iterators) {, +      super(getComponentIterators(iterators));, +    Iterator<? extends T> transform(Iterator<? extends T> iterator) {, +      return iterator;, +    /**, +     * Using the component iterators, rather than the input iterators directly,, +     * allows for higher performance in the case of nested concatenation., +     */, +    private static <T> Iterator<Iterator<? extends T>> getComponentIterators(, +        Iterator<? extends Iterator<? extends T>> iterators) {, +      return new MultitransformedIterator<Iterator<? extends T>, Iterator<? extends T>>(iterators) {, +        @Override, +        Iterator<? extends Iterator<? extends T>> transform(Iterator<? extends T> iterator) {, +            ConcatenatedIterator<? extends T> concatIterator =, +                (ConcatenatedIterator<? extends T>) iterator;, +            if (!concatIterator.current.hasNext()) {, +              return getComponentIterators(concatIterator.backingIterator);, +          return Iterators.singletonIterator(iterator);, +      };, +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +      list.add(checkNotNull(input));, +    return concat(list);, +        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());, +++ b/android/guava/src/com/google/common/collect/Iterators.java, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(a, b));, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(a, b, c));, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(a, b, c, d));, +    return concat(new ConsumingQueueIterator<Iterator<? extends T>>(inputs));, +  private static class ConcatenatedIterator<T>, +      extends MultitransformedIterator<Iterator<? extends T>, T> {, +    public ConcatenatedIterator(Iterator<? extends Iterator<? extends T>> iterators) {, +      super(getComponentIterators(iterators));, +    Iterator<? extends T> transform(Iterator<? extends T> iterator) {, +      return iterator;, +    /**, +     * Using the component iterators, rather than the input iterators directly,, +     * allows for higher performance in the case of nested concatenation., +     */, +    private static <T> Iterator<Iterator<? extends T>> getComponentIterators(, +        Iterator<? extends Iterator<? extends T>> iterators) {, +      return new MultitransformedIterator<Iterator<? extends T>, Iterator<? extends T>>(iterators) {, +        @Override, +        Iterator<? extends Iterator<? extends T>> transform(Iterator<? extends T> iterator) {, +            ConcatenatedIterator<? extends T> concatIterator =, +                (ConcatenatedIterator<? extends T>) iterator;, +            if (!concatIterator.current.hasNext()) {, +              return getComponentIterators(concatIterator.backingIterator);, +          return Iterators.singletonIterator(iterator);, +      };, +++ b/android/guava/src/com/google/common/collect/MultitransformedIterator.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkNotNull;]