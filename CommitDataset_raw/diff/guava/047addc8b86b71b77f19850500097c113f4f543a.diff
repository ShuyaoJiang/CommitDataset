[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +import java.util.LinkedHashMap;, +   * Multimap for {@link ImmutableMultimap.Builder} that maintains key and, +   * value orderings, allows duplicate values, and performs better than, +   * {@link LinkedListMultimap}., +   */, +  private static class BuilderMultimap<K, V> extends AbstractMapBasedMultimap<K, V> {, +    BuilderMultimap() {, +      super(new LinkedHashMap<K, Collection<V>>());, +    }, +, +    @Override, +    Collection<V> createCollection() {, +      return Lists.newArrayList();, +    }, +, +    private static final long serialVersionUID = 0;, +  }, +, +  /**, +    Multimap<K, V> builderMultimap = new BuilderMultimap<K, V>();, +    public Builder() {}, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +import java.util.LinkedHashMap;, +   * Multimap for {@link ImmutableMultimap.Builder} that maintains key and, +   * value orderings, allows duplicate values, and performs better than, +   * {@link LinkedListMultimap}., +   */, +  private static class BuilderMultimap<K, V> extends AbstractMapBasedMultimap<K, V> {, +    BuilderMultimap() {, +      super(new LinkedHashMap<K, Collection<V>>());, +    }, +, +    @Override, +    Collection<V> createCollection() {, +      return Lists.newArrayList();, +    }, +, +    private static final long serialVersionUID = 0;, +  }, +, +  /**, +    Multimap<K, V> builderMultimap = new BuilderMultimap<K, V>();, +    public Builder() {}, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +import java.util.LinkedHashMap;, +   * Multimap for {@link ImmutableSetMultimap.Builder} that maintains key, +   * and value orderings and performs better than {@link LinkedHashMultimap}., +   */, +  private static class BuilderMultimap<K, V> extends AbstractMapBasedMultimap<K, V> {, +    BuilderMultimap() {, +      super(new LinkedHashMap<K, Collection<V>>());, +    }, +, +    @Override, +    Collection<V> createCollection() {, +      return Sets.newLinkedHashSet();, +    }, +, +    private static final long serialVersionUID = 0;, +  }, +, +  /**, +      builderMultimap = new BuilderMultimap<K, V>();, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +import java.util.LinkedHashMap;, +   * Multimap for {@link ImmutableMultimap.Builder} that maintains key and, +   * value orderings, allows duplicate values, and performs better than, +   * {@link LinkedListMultimap}., +   */, +  private static class BuilderMultimap<K, V> extends AbstractMapBasedMultimap<K, V> {, +    BuilderMultimap() {, +      super(new LinkedHashMap<K, Collection<V>>());, +    }, +, +    @Override, +    Collection<V> createCollection() {, +      return Lists.newArrayList();, +    }, +, +    private static final long serialVersionUID = 0;, +  }, +, +  /**, +    Multimap<K, V> builderMultimap = new BuilderMultimap<K, V>();, +    public Builder() {}, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +import java.util.LinkedHashMap;, +   * Multimap for {@link ImmutableSetMultimap.Builder} that maintains key, +   * and value orderings and performs better than {@link LinkedHashMultimap}., +   */, +  private static class BuilderMultimap<K, V> extends AbstractMapBasedMultimap<K, V> {, +    BuilderMultimap() {, +      super(new LinkedHashMap<K, Collection<V>>());, +    }, +]