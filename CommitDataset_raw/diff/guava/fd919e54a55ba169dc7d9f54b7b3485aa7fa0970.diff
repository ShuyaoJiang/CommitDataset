[+++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java, +  /** @return an array of the proper size with {@code null} inserted into the middle element. */, +   * Equivalent to {@link #expectMissing(Object[]) expectMissing}{@code (null)} except that the call, +   * to {@code contains(null)} is permitted to throw a {@code NullPointerException}., +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java, +  /** @return an array of the proper size with {@code null} inserted into the middle element. */, +   * Equivalent to {@link #expectMissing(Object[]) expectMissing}{@code (null)} except that the call, +   * to {@code contains(null)} is permitted to throw a {@code NullPointerException}., +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractContainerTester.java, + * Base class for testers of classes (including {@link Collection} and {@link java.util.Map Map}), + * that contain elements., +   * @return the contents of the container under test, for use by {@link #expectContents(Object[]), +   *     expectContents(E...)} and its friends., +   * Replaces the existing container under test with a new container created by the subject, +   * generator., +   * Replaces the existing container under test with a new container. This is useful when a single, +   * test method needs to create multiple containers while retaining the ability to use {@link, +   * #expectContents(Object[]) expectContents(E...)} and other convenience methods. The creation of, +   * multiple containers in a single method is discouraged in most cases, but it is vital to the, +   * iterator tests., +   * Asserts that the collection under test contains exactly the given elements, respecting, +   * cardinality but not order. Subclasses may override this method to provide stronger assertions,, +   * e.g., to check ordering in lists, but realize that <strong>unless a test extends {@link, +   * com.google.common.collect.testing.testers.AbstractListTester AbstractListTester}, a call to, +   * {@code expectContents()} invokes this version</strong>., +   * Asserts that the collection under test contains exactly the elements it was initialized with, +   * plus the given elements, according to {@link #expectContents(java.util.Collection)}. In other, +   * words, for the default {@code expectContents()} implementation, the number of occurrences of, +   * each given element has increased by one since the test collection was created, and the number, +   * of occurrences of all other elements has not changed., +   * <p>Note: This means that a test like the following will fail if {@code collection} is a {@code, +   * Set}:, +   * <p>In this case, {@code collection} was not modified as a result of the {@code add()} call, and, +   * the test will fail because the number of occurrences of {@code existingElement} is unchanged., +   * @return an array of the proper size with a duplicate element. The size must be at least three., +   * Returns the {@linkplain #getSampleElements() sample elements} as ordered by {@link, +   * TestContainerGenerator#order(List)}. Tests should used this method only if they declare, +   * requirement {@link com.google.common.collect.testing.features.CollectionFeature#KNOWN_ORDER}., +   * @return a suitable location for a null element, to use when initializing containers for tests, +   *     that involve a null element being present., +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java, +  /** @return an array of the proper size with {@code null} inserted into the middle element. */, +   * Equivalent to {@link #expectMissing(Object[]) expectMissing}{@code (null)} except that the call, +   * to {@code contains(null)} is permitted to throw a {@code NullPointerException}., +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractContainerTester.java, + * Base class for testers of classes (including {@link Collection} and {@link java.util.Map Map}), + * that contain elements., +   * @return the contents of the container under test, for use by {@link #expectContents(Object[]), +   *     expectContents(E...)} and its friends., +   * Replaces the existing container under test with a new container created by the subject, +   * generator., +   * Replaces the existing container under test with a new container. This is useful when a single, +   * test method needs to create multiple containers while retaining the ability to use {@link, +   * #expectContents(Object[]) expectContents(E...)} and other convenience methods. The creation of, +   * multiple containers in a single method is discouraged in most cases, but it is vital to the, +   * iterator tests., +   * Asserts that the collection under test contains exactly the given elements, respecting, +   * cardinality but not order. Subclasses may override this method to provide stronger assertions,, +   * e.g., to check ordering in lists, but realize that <strong>unless a test extends {@link, +   * com.google.common.collect.testing.testers.AbstractListTester AbstractListTester}, a call to, +   * {@code expectContents()} invokes this version</strong>., +   * Asserts that the collection under test contains exactly the elements it was initialized with, +   * plus the given elements, according to {@link #expectContents(java.util.Collection)}. In other, +   * words, for the default {@code expectContents()} implementation, the number of occurrences of, +   * each given element has increased by one since the test collection was created, and the number, +   * of occurrences of all other elements has not changed., +   * <p>Note: This means that a test like the following will fail if {@code collection} is a {@code, +   * Set}:, +   * <p>In this case, {@code collection} was not modified as a result of the {@code add()} call, and, +   * the test will fail because the number of occurrences of {@code existingElement} is unchanged., +   * @return an array of the proper size with a duplicate element. The size must be at least three., +   * Returns the {@linkplain #getSampleElements() sample elements} as ordered by {@link, +   * TestContainerGenerator#order(List)}. Tests should used this method only if they declare, +   * requirement {@link com.google.common.collect.testing.features.CollectionFeature#KNOWN_ORDER}., +   * @return a suitable location for a null element, to use when initializing containers for tests, +   *     that involve a null element being present., +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java, + * @param <I> the type of the iterator ({@link Iterator} or {@link ListIterator}), +   * Quasi-implementation of {@link ListIterator} that works from a list of elements and a set of, +   * features to support (from the enclosing {@link AbstractIteratorTester} instance). Instead of, +   * throwing exceptions like {@link NoSuchElementException} at the appropriate times, it throws, +   * {@link PermittedMetaException} instances, which wrap a set of all exceptions that the iterator, +   * could throw during the invocation of that method. This is necessary because, e.g., a call to, +   * {@code iterator().remove()} of an unmodifiable list could throw either {@link, +   * IllegalStateException} or {@link UnsupportedOperationException}. Note that iterator, +   * implementations should always throw one of the exceptions in a {@code PermittedExceptions}, +   * instance, since {@code PermittedExceptions} is thrown only when a method call is invalid., +   * <p>This class is accessible but not supported in GWT as it references {@link, +   * PermittedMetaException}., +     * The elements to be returned by future calls to {@code next()}, with the first at the top of, +     * the stack., +     * The elements to be returned by future calls to {@code previous()}, with the first at the top, +     * of the stack., +     * {@link #nextElements} if {@code next()} was called more recently then {@code previous},, +     * {@link #previousElements} if the reverse is true, or -- overriding both of these -- {@code, +     * null} if {@code remove()} or {@code add()} has been called more recently than either. We use, +     * this to determine which stack to pop from on a call to {@code remove()} (or to pop from and, +     * push to on a call to {@code set()}., +     * Moves the given element from its current position in {@link #nextElements} to the top of the, +     * stack so that it is returned by the next call to {@link Iterator#next()}. If the element is]