[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +    return Ints.checkedCast(BstRangeOps.totalInRange(distinctAggregate(), range, root));, +    return Ints.saturatedCast(BstRangeOps.totalInRange(sizeAggregate(), range, root));, +        return countOrZero(node);, +    return countOrZero(original);, +            toRemove = path.getTip().getKey(), path.getTip().elemCount());, +    private final long size;, +    private Node(E key, int elemCount, @Nullable Node<E> left,, +        @Nullable Node<E> right) {, +      this.size = (long) elemCount + sizeOrZero(left) + sizeOrZero(right);, +    int elemCount() {, +      long result = size - sizeOrZero(childOrNull(LEFT)), +          - sizeOrZero(childOrNull(RIGHT));, +      return Ints.checkedCast(result);, +    }, +, +  private static long sizeOrZero(@Nullable Node<?> node) {, +  private static int countOrZero(@Nullable Node<?> entry) {, +    return (entry == null) ? 0 : entry.elemCount();, +  }, +, +    public long treeValue(@Nullable Node<Object> tree) {, +          return entry.elemCount();, +        public long treeValue(@Nullable Node<Object> tree) {, +          return new Node<Object>(source.getKey(), source.elemCount(), left, right);, +      int oldCount = countOrZero(originalEntry);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +    return Ints.checkedCast(BstRangeOps.totalInRange(distinctAggregate(), range, root));, +    return Ints.saturatedCast(BstRangeOps.totalInRange(sizeAggregate(), range, root));, +        return countOrZero(node);, +    return countOrZero(original);, +            toRemove = path.getTip().getKey(), path.getTip().elemCount());, +    private final long size;, +    private Node(E key, int elemCount, @Nullable Node<E> left,, +        @Nullable Node<E> right) {, +      this.size = (long) elemCount + sizeOrZero(left) + sizeOrZero(right);, +    int elemCount() {, +      long result = size - sizeOrZero(childOrNull(LEFT)), +          - sizeOrZero(childOrNull(RIGHT));, +      return Ints.checkedCast(result);, +    }, +, +  private static long sizeOrZero(@Nullable Node<?> node) {, +  private static int countOrZero(@Nullable Node<?> entry) {, +    return (entry == null) ? 0 : entry.elemCount();, +  }, +, +    public long treeValue(@Nullable Node<Object> tree) {, +          return entry.elemCount();, +        public long treeValue(@Nullable Node<Object> tree) {, +          return new Node<Object>(source.getKey(), source.elemCount(), left, right);, +      int oldCount = countOrZero(originalEntry);, +++ b/guava-tests/test/com/google/common/collect/BstRangeOpsTest.java, +        long count = BstRangeOps.totalInRange(, +        long count = BstRangeOps.totalInRange(, +            long count = BstRangeOps.totalInRange(countAggregate, GeneralRange.range(, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +    return Ints.checkedCast(BstRangeOps.totalInRange(distinctAggregate(), range, root));, +    return Ints.saturatedCast(BstRangeOps.totalInRange(sizeAggregate(), range, root));, +        return countOrZero(node);, +    return countOrZero(original);, +            toRemove = path.getTip().getKey(), path.getTip().elemCount());, +    private final long size;, +    private Node(E key, int elemCount, @Nullable Node<E> left,, +        @Nullable Node<E> right) {, +      this.size = (long) elemCount + sizeOrZero(left) + sizeOrZero(right);, +    int elemCount() {, +      long result = size - sizeOrZero(childOrNull(LEFT)), +          - sizeOrZero(childOrNull(RIGHT));, +      return Ints.checkedCast(result);, +    }, +, +  private static long sizeOrZero(@Nullable Node<?> node) {, +  private static int countOrZero(@Nullable Node<?> entry) {, +    return (entry == null) ? 0 : entry.elemCount();, +  }, +, +    public long treeValue(@Nullable Node<Object> tree) {, +          return entry.elemCount();, +        public long treeValue(@Nullable Node<Object> tree) {, +          return new Node<Object>(source.getKey(), source.elemCount(), left, right);, +      int oldCount = countOrZero(originalEntry);, +++ b/guava-tests/test/com/google/common/collect/BstRangeOpsTest.java, +        long count = BstRangeOps.totalInRange(, +        long count = BstRangeOps.totalInRange(, +            long count = BstRangeOps.totalInRange(countAggregate, GeneralRange.range(, +++ b/guava-tests/test/com/google/common/collect/BstTesting.java, +    public long treeValue(@Nullable SimpleNode tree) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +    return Ints.checkedCast(BstRangeOps.totalInRange(distinctAggregate(), range, root));, +    return Ints.saturatedCast(BstRangeOps.totalInRange(sizeAggregate(), range, root));, +        return countOrZero(node);, +    return countOrZero(original);, +            toRemove = path.getTip().getKey(), path.getTip().elemCount());, +    private final long size;, +    private Node(E key, int elemCount, @Nullable Node<E> left,, +        @Nullable Node<E> right) {, +      this.size = (long) elemCount + sizeOrZero(left) + sizeOrZero(right);, +    int elemCount() {, +      long result = size - sizeOrZero(childOrNull(LEFT))]