[+++ b/guava-tests/test/com/google/common/collect/AbstractImmutableTableTest.java, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +++ b/guava-tests/test/com/google/common/collect/AbstractImmutableTableTest.java, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +++ b/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +      BiMap<String, Integer> bimap = ImmutableBiMap.copyOf(ImmutableMap.of("one", 1, "two", 2));, +++ b/guava-tests/test/com/google/common/collect/AbstractImmutableTableTest.java, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +    for (Table<Character, Integer, String> testInstance : getTestInstances()) {, +++ b/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +      BiMap<String, Integer> bimap = ImmutableBiMap.copyOf(ImmutableMap.of("one", 1, "two", 2));, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +    RangeSet<Integer> rangeSet =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.closed(5, 8)), +            .add(Range.closedOpen(1, 3)), +            .build();, +    RangeSet<Integer> rangeSet =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.closed(5, 8)), +            .add(Range.closedOpen(1, 3)), +            .build();, +    RangeSet<Integer> rangeSet =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.closed(5, 8)), +            .add(Range.closedOpen(1, 3)), +            .build();, +    RangeSet<Integer> rangeSet =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.closed(5, 8)), +            .add(Range.closedOpen(1, 3)), +            .build();]