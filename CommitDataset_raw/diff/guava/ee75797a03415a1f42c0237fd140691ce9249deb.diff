[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +        ImmutableList.of(, +        ImmutableList.of(, +        ImmutableList.of(, +        ImmutableList.of(, +        ImmutableList.of(, +    assertEquals(ImmutableList.of(State.TERMINATED), listener.getStateHistory());, +    assertEquals(ImmutableList.of(State.STARTING, State.FAILED), listener.getStateHistory());, +    assertEquals(ImmutableList.of(State.STARTING, State.RUNNING, State.FAILED),, +    assertEquals(ImmutableList.of(State.STARTING, State.RUNNING, State.STOPPING, State.FAILED),, +    service.stopAndWait();, +        ImmutableList.of(, +    RecordingListener.record(service);, +      fail();, +  public void testFailingServiceStartAndWait() throws Exception {, +    StartFailingService service = new StartFailingService();, +        ImmutableList.of(, +            State.STARTING,, +            State.FAILED),, +        listener.getStateHistory());, +  }, +, +  public void testFailingServiceStopAndWait_stopFailing() throws Exception {, +    StopFailingService service = new StopFailingService();, +    RecordingListener listener = RecordingListener.record(service);, +, +    service.startAndWait();, +    try {, +      service.stopAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(EXCEPTION, e.getCause());, +    }, +    assertEquals(, +        ImmutableList.of(, +            State.STARTING,, +            State.RUNNING,, +            State.STOPPING,, +            State.FAILED),, +        listener.getStateHistory());, +  }, +, +  public void testFailingServiceStopAndWait_runFailinging() throws Exception {, +    RunFailingService service = new RunFailingService();, +    RecordingListener listener = RecordingListener.record(service);, +, +    service.startAndWait();, +    try {, +      service.stopAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(EXCEPTION, e.getCause().getCause());, +    }, +    assertEquals(, +        ImmutableList.of(, +            State.STARTING,, +            State.RUNNING,, +            State.FAILED),, +        listener.getStateHistory());, +  }, +, +  public void testThrowingServiceStartAndWait() throws Exception {, +    StartThrowingService service = new StartThrowingService();, +    RecordingListener listener = RecordingListener.record(service);, +, +    try {, +      service.startAndWait();, +      fail();, +    } catch (UncheckedExecutionException e) {, +      assertEquals(service.exception, e.getCause());, +    }, +    assertEquals(, +        ImmutableList.of(, +      assertEquals(service.exception, e.getCause());, +        ImmutableList.of(, +      assertEquals(service.exception, e.getCause().getCause());, +        ImmutableList.of(, +    final StartFailingService service = new StartFailingService();, +  private static class StartFailingService extends AbstractService {, +  private static class RunFailingService extends AbstractService {, +    @Override protected void doStart() {, +      notifyStarted();, +      notifyFailed(EXCEPTION);, +    }, +, +    @Override protected void doStop() {, +      fail();, +    }, +  }, +, +  private static class StopFailingService extends AbstractService {, +    @Override protected void doStart() {, +      notifyStarted();, +    }, +, +    @Override protected void doStop() {, +      notifyFailed(EXCEPTION);, +    }, +  }, +]