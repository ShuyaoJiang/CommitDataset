[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import java.net.MalformedURLException;, +        ImmutableMap.of(new File("/a"), classloader, new File("/b"), classloader),, +    ImmutableMap<File, ClassLoader> classPathEntries = ClassPath.getClassPathEntries(child);, +    assertEquals(ImmutableMap.of(new File("/a"), parent, new File("/b"), child),  classPathEntries);, +    assertThat(classPathEntries.keySet()).containsExactly(new File("/a"), new File("/b")).inOrder();, +    assertEquals(ImmutableMap.of(new File("/a"), parent), ClassPath.getClassPathEntries(child));, +        ImmutableMap.of(new File("/a"), parent),, +        ImmutableMap.of(new File("/a"), grandParent, new File("/b"), parent),, +        ImmutableMap.of(new File("/a"), grandParent),, +      scanner.scan(jarFile, ClassPathTest.class.getClassLoader());, +  public void testGetClassPathEntry() throws MalformedURLException, URISyntaxException {, +    assertEquals(new File("/usr/test/dep.jar").toURI(),, +            new File("/home/build/outer.jar"), "file:/usr/test/dep.jar").toURI());, +    assertEquals(new File("/home/build/a.jar").toURI(),, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "a.jar").toURI());, +    assertEquals(new File("/home/build/x/y/z").toURI(),, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "x/y/z").toURI());, +    assertEquals(new File("/home/build/x/y/z.jar").toURI(),, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "x/y/z.jar"), +            .toURI());, +    assertEquals("/home/build/x y.jar",, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "x y.jar"), +            .getFile());, +    Manifest manifest = manifestClasspath("nosuchscheme:an_invalid^path");, +  public void testGetClassPathFromManifest_pathWithStrangeCharacter() throws IOException {, +    File jarFile = new File("base/some.jar");, +    Manifest manifest = manifestClasspath("file:the^file.jar");, +    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest)), +        .containsExactly(fullpath("base/the^file.jar"));, +  }, +, +        .containsExactly(fullpath("base/with/relative/dir"));, +        .containsExactly(fullpath("base/with/relative.jar"));, +        .containsExactly(fullpath("base/current.jar"));, +        .containsExactly(fullpath("/with/absolute/dir"));, +        .containsExactly(fullpath("/with/absolute.jar"));, +            fullpath("/with/absolute.jar"),, +            fullpath("base/relative.jar"),, +            fullpath("base/relative/dir")), +        .containsExactly(fullpath("base/relative.jar"));, +        .containsExactly(fullpath("base/relative.jar"));, +, +  private static File fullpath(String path) {, +    return new File(new File(path).toURI());, +  }, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import java.net.MalformedURLException;, +        ImmutableMap.of(new File("/a"), classloader, new File("/b"), classloader),, +    ImmutableMap<File, ClassLoader> classPathEntries = ClassPath.getClassPathEntries(child);, +    assertEquals(ImmutableMap.of(new File("/a"), parent, new File("/b"), child),  classPathEntries);, +    assertThat(classPathEntries.keySet()).containsExactly(new File("/a"), new File("/b")).inOrder();, +    assertEquals(ImmutableMap.of(new File("/a"), parent), ClassPath.getClassPathEntries(child));, +        ImmutableMap.of(new File("/a"), parent),, +        ImmutableMap.of(new File("/a"), grandParent, new File("/b"), parent),, +        ImmutableMap.of(new File("/a"), grandParent),, +      scanner.scan(jarFile, ClassPathTest.class.getClassLoader());, +  public void testGetClassPathEntry() throws MalformedURLException, URISyntaxException {, +    assertEquals(new File("/usr/test/dep.jar").toURI(),, +            new File("/home/build/outer.jar"), "file:/usr/test/dep.jar").toURI());, +    assertEquals(new File("/home/build/a.jar").toURI(),, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "a.jar").toURI());, +    assertEquals(new File("/home/build/x/y/z").toURI(),, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "x/y/z").toURI());, +    assertEquals(new File("/home/build/x/y/z.jar").toURI(),, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "x/y/z.jar"), +            .toURI());, +    assertEquals("/home/build/x y.jar",, +        ClassPath.Scanner.getClassPathEntry(new File("/home/build/outer.jar"), "x y.jar"), +            .getFile());, +    Manifest manifest = manifestClasspath("nosuchscheme:an_invalid^path");, +  public void testGetClassPathFromManifest_pathWithStrangeCharacter() throws IOException {, +    File jarFile = new File("base/some.jar");, +    Manifest manifest = manifestClasspath("file:the^file.jar");, +    assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile, manifest)), +        .containsExactly(fullpath("base/the^file.jar"));, +  }, +, +        .containsExactly(fullpath("base/with/relative/dir"));, +        .containsExactly(fullpath("base/with/relative.jar"));, +        .containsExactly(fullpath("base/current.jar"));, +        .containsExactly(fullpath("/with/absolute/dir"));, +        .containsExactly(fullpath("/with/absolute.jar"));, +            fullpath("/with/absolute.jar"),, +            fullpath("base/relative.jar"),, +            fullpath("base/relative/dir")), +        .containsExactly(fullpath("base/relative.jar"));, +        .containsExactly(fullpath("base/relative.jar"));, +, +  private static File fullpath(String path) {, +    return new File(new File(path).toURI());, +  }, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +import java.net.MalformedURLException;, +    for (Map.Entry<File, ClassLoader> entry : getClassPathEntries(classloader).entrySet()) {, +  @VisibleForTesting static ImmutableMap<File, ClassLoader> getClassPathEntries(, +    LinkedHashMap<File, ClassLoader> entries = Maps.newLinkedHashMap();, +        if (entry.getProtocol().equals("file")) {, +          File file = new File(entry.getFile());, +          if (!entries.containsKey(file)) {]