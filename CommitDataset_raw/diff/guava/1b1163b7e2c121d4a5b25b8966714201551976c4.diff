[+++ b/guava-tests/test/com/google/common/math/DoubleMathTest.java, +          assertEquals(, +              "Rounding " + d + " with mode " + mode,, +              expected.intValue(),, +              DoubleMath.roundToInt(d, mode));, +++ b/guava-tests/test/com/google/common/math/DoubleMathTest.java, +          assertEquals(, +              "Rounding " + d + " with mode " + mode,, +              expected.intValue(),, +              DoubleMath.roundToInt(d, mode));, +++ b/guava-tests/test/com/google/common/math/MathTesting.java, +    for (int i = Double.MIN_EXPONENT; i <= Double.MAX_EXPONENT; i++) {, +      for (int direction : new int[] {1, -1}) {, +        double d = , +            Double.longBitsToDouble(Double.doubleToLongBits(Math.scalb(1.0, i)) + direction);, +        // Math.nextUp/nextDown, +        if (d != Math.rint(d)) {, +          fractionalBuilder.add(d);, +        }, +      }, +    }, +++ b/guava-tests/test/com/google/common/math/DoubleMathTest.java, +          assertEquals(, +              "Rounding " + d + " with mode " + mode,, +              expected.intValue(),, +              DoubleMath.roundToInt(d, mode));, +++ b/guava-tests/test/com/google/common/math/MathTesting.java, +    for (int i = Double.MIN_EXPONENT; i <= Double.MAX_EXPONENT; i++) {, +      for (int direction : new int[] {1, -1}) {, +        double d = , +            Double.longBitsToDouble(Double.doubleToLongBits(Math.scalb(1.0, i)) + direction);, +        // Math.nextUp/nextDown, +        if (d != Math.rint(d)) {, +          fractionalBuilder.add(d);, +        }, +      }, +    }, +++ b/guava/src/com/google/common/math/DoubleMath.java, +          return (long) x - 1;, +          return (long) x + 1;, +          return (long) x + (x > 0 ? 1 : -1);]