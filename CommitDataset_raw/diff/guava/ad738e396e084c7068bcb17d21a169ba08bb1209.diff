[+++ b/guava-tests/test/com/google/common/collect/GeneralRangeTest.java, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.List;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.base.Objects;, +import com.google.common.testing.NullPointerTester;, +  private static final Ordering<Integer> ORDERING = Ordering.natural().nullsFirst();, +, +  private static final List<Integer> IN_ORDER_VALUES = Arrays.asList(null, 1, 2, 3, 4, 5);, +, +          GeneralRange<Integer> range = GeneralRange.range(ORDERING, 4, lboundType, 2, uboundType);, +    for (Integer i : IN_ORDER_VALUES) {, +        GeneralRange.range(ORDERING, i, OPEN, i, OPEN);, +    for (Integer i : IN_ORDER_VALUES) {, +      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, CLOSED, i, OPEN);, +      for (Integer j : IN_ORDER_VALUES) {, +    for (Integer i : IN_ORDER_VALUES) {, +      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, OPEN, i, CLOSED);, +      for (Integer j : IN_ORDER_VALUES) {, +    for (Integer i : IN_ORDER_VALUES) {, +      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, CLOSED, i, CLOSED);, +      for (Integer j : IN_ORDER_VALUES) {, +        assertEquals(Objects.equal(i, j), range.contains(j));, +    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 3, CLOSED, 3, CLOSED);, +    for (Integer i : IN_ORDER_VALUES) {, +      assertEquals(ORDERING.compare(i, 3) == 0, range.contains(i));, +      GeneralRange<Integer> range = GeneralRange.downTo(ORDERING, 3, lBoundType);, +      for (Integer i : IN_ORDER_VALUES) {, +        assertEquals(ORDERING.compare(i, 3) > 0, +            || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED), range.contains(i));, +        assertEquals(ORDERING.compare(i, 3) < 0, +            || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN), range.tooLow(i));, +      GeneralRange<Integer> range = GeneralRange.upTo(ORDERING, 3, lBoundType);, +      for (Integer i : IN_ORDER_VALUES) {, +        assertEquals(ORDERING.compare(i, 3) < 0, +            || (ORDERING.compare(i, 3) == 0 && lBoundType == CLOSED), range.contains(i));, +        assertEquals(ORDERING.compare(i, 3) > 0, +            || (ORDERING.compare(i, 3) == 0 && lBoundType == OPEN), range.tooHigh(i));, +        GeneralRange<Integer> gRange = GeneralRange.range(ORDERING, 2, lboundType, 4, uboundType);, +        for (Integer i : IN_ORDER_VALUES) {, +          assertEquals(i != null && range.contains(i), gRange.contains(i));, +    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN);, +    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),, +        range.intersect(GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED)));, +    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN);, +    assertEquals(GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),, +        range.intersect(GeneralRange.range(ORDERING, null, OPEN, 5, CLOSED)));, +    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN),, +        range.intersect(GeneralRange.range(ORDERING, 2, OPEN, 5, CLOSED)));, +    assertEquals(GeneralRange.range(ORDERING, 2, CLOSED, 4, OPEN),, +        range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 4, OPEN)));, +    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, OPEN);, +    assertEquals(GeneralRange.range(ORDERING, 3, CLOSED, 4, OPEN),, +        range.intersect(GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED)));, +    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED);, +    assertEquals(GeneralRange.range(ORDERING, 3, CLOSED, 4, CLOSED),, +        range.intersect(GeneralRange.range(ORDERING, 3, CLOSED, 5, CLOSED)));, +    assertEquals(GeneralRange.range(ORDERING, 2, OPEN, 3, OPEN),, +        range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 3, OPEN)));, +    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 2, OPEN, 4, CLOSED);, +    assertTrue(range.intersect(GeneralRange.range(ORDERING, 5, CLOSED, 6, CLOSED)).isEmpty());, +    assertTrue(range.intersect(GeneralRange.range(ORDERING, 1, OPEN, 2, OPEN)).isEmpty());, +    assertEquals(GeneralRange.all(ORDERING.reverse()), GeneralRange.all(ORDERING).reverse());, +    assertEquals(GeneralRange.downTo(ORDERING.reverse(), 3, CLOSED),, +        GeneralRange.upTo(ORDERING, 3, CLOSED).reverse());, +    assertEquals(GeneralRange.upTo(ORDERING.reverse(), 3, OPEN),, +        GeneralRange.downTo(ORDERING, 3, OPEN).reverse());, +    assertEquals(GeneralRange.range(ORDERING.reverse(), 5, OPEN, 3, CLOSED),, +        GeneralRange.range(ORDERING, 3, CLOSED, 5, OPEN).reverse());, +++ b/guava-tests/test/com/google/common/collect/GeneralRangeTest.java, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.List;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.base.Objects;, +import com.google.common.testing.NullPointerTester;, +  private static final Ordering<Integer> ORDERING = Ordering.natural().nullsFirst();, +, +  private static final List<Integer> IN_ORDER_VALUES = Arrays.asList(null, 1, 2, 3, 4, 5);, +, +          GeneralRange<Integer> range = GeneralRange.range(ORDERING, 4, lboundType, 2, uboundType);, +    for (Integer i : IN_ORDER_VALUES) {, +        GeneralRange.range(ORDERING, i, OPEN, i, OPEN);, +    for (Integer i : IN_ORDER_VALUES) {, +      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, CLOSED, i, OPEN);, +      for (Integer j : IN_ORDER_VALUES) {, +    for (Integer i : IN_ORDER_VALUES) {, +      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, OPEN, i, CLOSED);, +      for (Integer j : IN_ORDER_VALUES) {, +    for (Integer i : IN_ORDER_VALUES) {, +      GeneralRange<Integer> range = GeneralRange.range(ORDERING, i, CLOSED, i, CLOSED);, +      for (Integer j : IN_ORDER_VALUES) {, +        assertEquals(Objects.equal(i, j), range.contains(j));, +    GeneralRange<Integer> range = GeneralRange.range(ORDERING, 3, CLOSED, 3, CLOSED);, +    for (Integer i : IN_ORDER_VALUES) {, +      assertEquals(ORDERING.compare(i, 3) == 0, range.contains(i));, +      GeneralRange<Integer> range = GeneralRange.downTo(ORDERING, 3, lBoundType);]