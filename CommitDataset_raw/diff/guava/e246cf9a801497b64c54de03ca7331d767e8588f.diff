[+++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, +  protected final NodeAdjacencies<N> checkedConnections(Object node) {, +  protected final boolean containsNode(@Nullable Object node) {, +++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, +  protected final NodeAdjacencies<N> checkedConnections(Object node) {, +  protected final boolean containsNode(@Nullable Object node) {, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(nodeA, nodeB, isDirected);, +  protected final NodeConnections<N, E> checkedConnections(Object node) {, +  protected final N checkedReferenceNode(Object edge) {, +  protected final boolean containsNode(@Nullable Object node) {, +  protected final boolean containsEdge(@Nullable Object edge) {, +++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, +  protected final NodeAdjacencies<N> checkedConnections(Object node) {, +  protected final boolean containsNode(@Nullable Object node) {, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(nodeA, nodeB, isDirected);, +  protected final NodeConnections<N, E> checkedConnections(Object node) {, +  protected final N checkedReferenceNode(Object edge) {, +  protected final boolean containsNode(@Nullable Object node) {, +  protected final boolean containsEdge(@Nullable Object edge) {, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +import static com.google.common.base.Preconditions.checkState;, +    addNodeInternal(node);, +   * Adds {@code node} to the graph and returns the associated {@link NodeAdjacencies}., +   *, +   * @throws IllegalStateException if {@code node} is already present, +   */, +  @CanIgnoreReturnValue, +  private NodeAdjacencies<N> addNodeInternal(N node) {, +    NodeAdjacencies<N> connections = newNodeConnections();, +    checkState(nodeConnections.put(node, connections) == null);, +    return connections;, +  }, +, +  /**, +, +    boolean isSelfLoop = nodeA.equals(nodeB);, +    if (!allowsSelfLoops()) {, +      checkArgument(!isSelfLoop, SELF_LOOPS_NOT_ALLOWED, nodeA);, +    // TODO(b/28087289): does not support parallel edges, +    if (connectionsA != null && connectionsB != null && connectionsA.successors().contains(nodeB)) {, +      return false;, +    }, +, +    if (connectionsA == null) {, +      connectionsA = addNodeInternal(nodeA);, +    }, +    connectionsA.addSuccessor(nodeB);, +    if (connectionsB == null) {, +      connectionsB = isSelfLoop ? connectionsA : addNodeInternal(nodeB);, +    }, +++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, +  protected final NodeAdjacencies<N> checkedConnections(Object node) {, +  protected final boolean containsNode(@Nullable Object node) {, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    return Endpoints.of(nodeA, nodeB, isDirected);, +  protected final NodeConnections<N, E> checkedConnections(Object node) {, +  protected final N checkedReferenceNode(Object edge) {, +  protected final boolean containsNode(@Nullable Object node) {, +  protected final boolean containsEdge(@Nullable Object edge) {, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +import static com.google.common.base.Preconditions.checkState;, +    addNodeInternal(node);, +   * Adds {@code node} to the graph and returns the associated {@link NodeAdjacencies}., +   *, +   * @throws IllegalStateException if {@code node} is already present, +   */, +  @CanIgnoreReturnValue, +  private NodeAdjacencies<N> addNodeInternal(N node) {, +    NodeAdjacencies<N> connections = newNodeConnections();, +    checkState(nodeConnections.put(node, connections) == null);, +    return connections;, +  }, +, +  /**, +, +    boolean isSelfLoop = nodeA.equals(nodeB);, +    if (!allowsSelfLoops()) {, +      checkArgument(!isSelfLoop, SELF_LOOPS_NOT_ALLOWED, nodeA);, +    // TODO(b/28087289): does not support parallel edges, +    if (connectionsA != null && connectionsB != null && connectionsA.successors().contains(nodeB)) {, +      return false;, +    }, +, +    if (connectionsA == null) {, +      connectionsA = addNodeInternal(nodeA);, +    }, +    connectionsA.addSuccessor(nodeB);, +    if (connectionsB == null) {, +      connectionsB = isSelfLoop ? connectionsA : addNodeInternal(nodeB);, +    }, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +import static com.google.common.base.Preconditions.checkState;, +    addNodeInternal(node);, +   * Adds {@code node} to the graph and returns the associated {@link NodeConnections}., +   *, +   * @throws IllegalStateException if {@code node} is already present, +   */, +  @CanIgnoreReturnValue]