[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, +import java.util.NoSuchElementException;, +, + * <p><b>Warning:</b> Be extremely careful what you do with conceptually large instances (such as, + * {@code ContiguousSet.create(Ranges.greaterThan(0), DiscreteDomains.integers()}). Certain, + * operations on such a set can be performed efficiently, but others (such as {@link Set#hashCode}, + * or {@link Collections#frequency}) can cause major performance problems., + *, +@SuppressWarnings("rawtypes") // allow ungenerified Comparable types, +  /**, +   * Returns a {@code ContiguousSet} containing the same values in the given domain, +   * {@linkplain Range#contains contained} by the range., +   *, +   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if, +   *     neither has an upper bound, +   *, +   * @since 13.0, +   */, +  public static <C extends Comparable> ContiguousSet<C> create(, +      Range<C> range, DiscreteDomain<C> domain) {, +    checkNotNull(range);, +    checkNotNull(domain);, +    Range<C> effectiveRange = range;, +    try {, +      if (!range.hasLowerBound()) {, +        effectiveRange = effectiveRange.intersection(Ranges.atLeast(domain.minValue()));, +      }, +      if (!range.hasUpperBound()) {, +        effectiveRange = effectiveRange.intersection(Ranges.atMost(domain.maxValue()));, +      }, +    } catch (NoSuchElementException e) {, +      throw new IllegalArgumentException(e);, +    }, +, +    // Per class spec, we are allowed to throw CCE if necessary, +    boolean empty = effectiveRange.isEmpty(), +        || Range.compareOrThrow(, +            range.lowerBound.leastValueAbove(domain),, +            range.upperBound.greatestValueBelow(domain)) > 0;, +, +    return empty, +        ? new EmptyContiguousSet<C>(domain), +        : new RegularContiguousSet<C>(effectiveRange, domain);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ContiguousSet.java, +import java.util.NoSuchElementException;, +, + * <p><b>Warning:</b> Be extremely careful what you do with conceptually large instances (such as, + * {@code ContiguousSet.create(Ranges.greaterThan(0), DiscreteDomains.integers()}). Certain, + * operations on such a set can be performed efficiently, but others (such as {@link Set#hashCode}, + * or {@link Collections#frequency}) can cause major performance problems., + *, +@SuppressWarnings("rawtypes") // allow ungenerified Comparable types, +  /**, +   * Returns a {@code ContiguousSet} containing the same values in the given domain, +   * {@linkplain Range#contains contained} by the range., +   *, +   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if, +   *     neither has an upper bound, +   *, +   * @since 13.0, +   */, +  public static <C extends Comparable> ContiguousSet<C> create(, +      Range<C> range, DiscreteDomain<C> domain) {, +    checkNotNull(range);, +    checkNotNull(domain);, +    Range<C> effectiveRange = range;, +    try {, +      if (!range.hasLowerBound()) {, +        effectiveRange = effectiveRange.intersection(Ranges.atLeast(domain.minValue()));, +      }, +      if (!range.hasUpperBound()) {, +        effectiveRange = effectiveRange.intersection(Ranges.atMost(domain.maxValue()));, +      }, +    } catch (NoSuchElementException e) {, +      throw new IllegalArgumentException(e);, +    }, +, +    // Per class spec, we are allowed to throw CCE if necessary, +    boolean empty = effectiveRange.isEmpty(), +        || Range.compareOrThrow(, +            range.lowerBound.leastValueAbove(domain),, +            range.upperBound.greatestValueBelow(domain)) > 0;, +, +    return empty, +        ? new EmptyContiguousSet<C>(domain), +        : new RegularContiguousSet<C>(effectiveRange, domain);, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +            ContiguousSet.create(Ranges.closed(1, 3), integers()),, +            ContiguousSet.create(Ranges.closedOpen(1, 4), integers()),, +            ContiguousSet.create(Ranges.openClosed(0, 3), integers()),, +            ContiguousSet.create(Ranges.open(0, 4), integers()),, +            ContiguousSet.create(Ranges.closed(1, 3), NOT_EQUAL_TO_INTEGERS),, +            ContiguousSet.create(Ranges.closedOpen(1, 4), NOT_EQUAL_TO_INTEGERS),, +            ContiguousSet.create(Ranges.openClosed(0, 3), NOT_EQUAL_TO_INTEGERS),, +            ContiguousSet.create(Ranges.open(0, 4), NOT_EQUAL_TO_INTEGERS),, +    assertEquals(]