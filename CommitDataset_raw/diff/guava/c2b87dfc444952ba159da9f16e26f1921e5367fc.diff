[+++ b/guava-gwt/test/com/google/common/base/AsciiTest_gwt.java, +public void testEqualsIgnoreCase() throws Exception {, +  com.google.common.base.AsciiTest testCase = new com.google.common.base.AsciiTest();, +  testCase.testEqualsIgnoreCase();, +}, +, +public void testEqualsIgnoreCaseUnicodeEquivalence() throws Exception {, +  com.google.common.base.AsciiTest testCase = new com.google.common.base.AsciiTest();, +  testCase.testEqualsIgnoreCaseUnicodeEquivalence();, +}, +, +++ b/guava-gwt/test/com/google/common/base/AsciiTest_gwt.java, +public void testEqualsIgnoreCase() throws Exception {, +  com.google.common.base.AsciiTest testCase = new com.google.common.base.AsciiTest();, +  testCase.testEqualsIgnoreCase();, +}, +, +public void testEqualsIgnoreCaseUnicodeEquivalence() throws Exception {, +  com.google.common.base.AsciiTest testCase = new com.google.common.base.AsciiTest();, +  testCase.testEqualsIgnoreCaseUnicodeEquivalence();, +}, +, +++ b/guava-tests/benchmark/com/google/common/base/AsciiBenchmark.java, +  @Benchmark boolean equalsIgnoreCaseCharSequence(int reps) {, +    // This benchmark has no concept of "noWorkToDo"., +    String upperString = testString.toUpperCase();, +    CharSequence testSeq = new StringBuilder(testString);, +    CharSequence upperSeq = new StringBuilder(upperString);, +    CharSequence[] lhs = new CharSequence[] { testString, testSeq, testString, testSeq };, +    CharSequence[] rhs = new CharSequence[] { upperString, upperString, upperSeq, upperSeq };, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      dummy ^= Ascii.equalsIgnoreCase(lhs[i & 0x3], rhs[i & 0x3]);, +    }, +    return dummy;, +  }, +, +  @Benchmark boolean equalsIgnoreCaseStringOnly(int reps) {, +    // This benchmark has no concept of "noWorkToDo"., +    String lhs = testString;, +    String rhs = testString.toUpperCase();, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      dummy ^= Ascii.equalsIgnoreCase(lhs, rhs);, +    }, +    return dummy;, +  }, +, +  @Benchmark boolean equalsIgnoreCaseJDK(int reps) {, +    // This benchmark has no concept of "noWorkToDo"., +    String lhs = testString;, +    String rhs = testString.toUpperCase();, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +        dummy ^= lhs.equalsIgnoreCase(rhs);, +    }, +    return dummy;, +  }, +, +  @Benchmark boolean isUpperCase(int reps) {, +    // This benchmark has no concept of "noWorkToDo"., +    char[] chars = testString.toCharArray();, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      for (int n = 0; n < chars.length; n++) {, +        dummy ^= Ascii.isUpperCase(chars[n]);, +      }, +    }, +    return dummy;, +  }, +, +++ b/guava-gwt/test/com/google/common/base/AsciiTest_gwt.java, +public void testEqualsIgnoreCase() throws Exception {, +  com.google.common.base.AsciiTest testCase = new com.google.common.base.AsciiTest();, +  testCase.testEqualsIgnoreCase();, +}, +, +public void testEqualsIgnoreCaseUnicodeEquivalence() throws Exception {, +  com.google.common.base.AsciiTest testCase = new com.google.common.base.AsciiTest();, +  testCase.testEqualsIgnoreCaseUnicodeEquivalence();, +}, +, +++ b/guava-tests/benchmark/com/google/common/base/AsciiBenchmark.java, +  @Benchmark boolean equalsIgnoreCaseCharSequence(int reps) {, +    // This benchmark has no concept of "noWorkToDo"., +    String upperString = testString.toUpperCase();, +    CharSequence testSeq = new StringBuilder(testString);, +    CharSequence upperSeq = new StringBuilder(upperString);, +    CharSequence[] lhs = new CharSequence[] { testString, testSeq, testString, testSeq };, +    CharSequence[] rhs = new CharSequence[] { upperString, upperString, upperSeq, upperSeq };, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      dummy ^= Ascii.equalsIgnoreCase(lhs[i & 0x3], rhs[i & 0x3]);, +    }, +    return dummy;]