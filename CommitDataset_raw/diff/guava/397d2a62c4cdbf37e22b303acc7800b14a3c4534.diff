[+++ b/guava-gwt/test/com/google/common/collect/MinMaxPriorityQueueTest_gwt.java, +public void testRandomAddsAndRemoves_duplicateElements() throws Exception {, +  com.google.common.collect.MinMaxPriorityQueueTest testCase = new com.google.common.collect.MinMaxPriorityQueueTest();, +  testCase.testRandomAddsAndRemoves_duplicateElements();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/MinMaxPriorityQueueTest_gwt.java, +public void testRandomAddsAndRemoves_duplicateElements() throws Exception {, +  com.google.common.collect.MinMaxPriorityQueueTest testCase = new com.google.common.collect.MinMaxPriorityQueueTest();, +  testCase.testRandomAddsAndRemoves_duplicateElements();, +}, +, +++ b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java, +    // After this remove, 400 has moved up and 20 down past cursor, +    // After this remove, 400 moved down again and 500 up past the cursor, +    // Not skipping 400, because it moved back down, +    assertEquals((Integer) 400, it.next());, +    // Last from forgetMeNot., +      int remaining = queue.size();, +        remaining--;, +      assertThat(remaining).isEqualTo(0);, +      assertThat(queue.isIntact()).isTrue();, +      assertThat(queue).containsExactlyElementsIn(elements);, +    }, +  }, +, +  private enum Element {, +    ONE, TWO, THREE, FOUR, FIVE;, +  }, +, +  public void testRandomAddsAndRemoves_duplicateElements() {, +    Random random = new Random(0);, +    Multiset<Element> elements = HashMultiset.create();, +    MinMaxPriorityQueue<Element> queue = MinMaxPriorityQueue.create();, +    int range = Element.values().length;, +    for (int iter = 0; iter < 1000; iter++) {, +      for (int i = 0; i < 100; i++) {, +        Element element = Element.values()[random.nextInt(range)];, +        elements.add(element);, +        queue.add(element);, +      }, +      Iterator<Element> queueIterator = queue.iterator();, +      int remaining = queue.size();, +      while (queueIterator.hasNext()) {, +        Element element = queueIterator.next();, +        remaining--;, +        assertThat(elements).contains(element);, +        if (random.nextBoolean()) {, +          elements.remove(element);, +          queueIterator.remove();, +        }, +      }, +      assertThat(remaining).isEqualTo(0);, +++ b/guava-gwt/test/com/google/common/collect/MinMaxPriorityQueueTest_gwt.java, +public void testRandomAddsAndRemoves_duplicateElements() throws Exception {, +  com.google.common.collect.MinMaxPriorityQueueTest testCase = new com.google.common.collect.MinMaxPriorityQueueTest();, +  testCase.testRandomAddsAndRemoves_duplicateElements();, +}, +, +++ b/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java, +    // After this remove, 400 has moved up and 20 down past cursor, +    // After this remove, 400 moved down again and 500 up past the cursor, +    // Not skipping 400, because it moved back down, +    assertEquals((Integer) 400, it.next());, +    // Last from forgetMeNot., +      int remaining = queue.size();, +        remaining--;, +      assertThat(remaining).isEqualTo(0);, +      assertThat(queue.isIntact()).isTrue();, +      assertThat(queue).containsExactlyElementsIn(elements);, +    }, +  }, +, +  private enum Element {, +    ONE, TWO, THREE, FOUR, FIVE;, +  }, +, +  public void testRandomAddsAndRemoves_duplicateElements() {, +    Random random = new Random(0);, +    Multiset<Element> elements = HashMultiset.create();, +    MinMaxPriorityQueue<Element> queue = MinMaxPriorityQueue.create();, +    int range = Element.values().length;, +    for (int iter = 0; iter < 1000; iter++) {, +      for (int i = 0; i < 100; i++) {, +        Element element = Element.values()[random.nextInt(range)];, +        elements.add(element);, +        queue.add(element);, +      }, +      Iterator<Element> queueIterator = queue.iterator();, +      int remaining = queue.size();, +      while (queueIterator.hasNext()) {, +        Element element = queueIterator.next();, +        remaining--;, +        assertThat(elements).contains(element);, +        if (random.nextBoolean()) {, +          elements.remove(element);, +          queueIterator.remove();, +        }, +      }, +      assertThat(remaining).isEqualTo(0);]