[+++ b/guava-tests/test/com/google/common/graph/ElementOrderTest.java, +import static com.google.common.base.Preconditions.checkNotNull;, +import java.util.Comparator;, +, +  public void nodeOrder_none() {, +  public void nodeOrder_insertion() {, +  public void nodeOrder_default() {, +  public void nodeOrder_natural() {, +  public void nodeOrder_sorted() {, +  public void edgeOrder_none() {, +  public void edgeOrder_insertion() {, +  public void edgeOrder_default() {, +  public void edgeOrder_natural() {, +  public void edgeOrder_sorted() {, +, +  public void nodeOrderUnorderedandEdgesSorted() {, +  // Sorting of user-defined classes, +, +  @Test, +  public void customComparator() {, +    Comparator<NonComparableSuperClass> comparator = new Comparator<NonComparableSuperClass>() {, +      @Override, +      public int compare(NonComparableSuperClass left, NonComparableSuperClass right) {, +        return left.value.compareTo(right.value);, +      }, +    };, +, +    MutableGraph<NonComparableSuperClass> graph = GraphBuilder, +        .undirected(), +        .nodeOrder(ElementOrder.sorted(comparator)), +        .build();, +, +    NonComparableSuperClass node1 = new NonComparableSuperClass(1);, +    NonComparableSuperClass node3 = new NonComparableSuperClass(3);, +    NonComparableSuperClass node5 = new NonComparableSuperClass(5);, +    NonComparableSuperClass node7 = new NonComparableSuperClass(7);, +, +    graph.addNode(node1);, +    graph.addNode(node7);, +    graph.addNode(node5);, +    graph.addNode(node3);, +, +    assertThat(graph.nodes()).containsExactly(node1, node3, node5, node7).inOrder();, +  }, +, +  @Test, +  public void customComparable() {, +    MutableGraph<ComparableSubClass> graph = GraphBuilder, +        .undirected(), +        .nodeOrder(ElementOrder.<ComparableSubClass>natural()), +        .build();, +, +    ComparableSubClass node2 = new ComparableSubClass(2);, +    ComparableSubClass node4 = new ComparableSubClass(4);, +    ComparableSubClass node6 = new ComparableSubClass(6);, +    ComparableSubClass node8 = new ComparableSubClass(8);, +, +    graph.addNode(node4);, +    graph.addNode(node2);, +    graph.addNode(node6);, +    graph.addNode(node8);, +, +    assertThat(graph.nodes()).containsExactly(node2, node4, node6, node8).inOrder();, +  }, +, +, +  private static class NonComparableSuperClass {, +    final Integer value;, +, +    NonComparableSuperClass(Integer value) {, +      this.value = checkNotNull(value);, +    }, +, +    @Override, +    public String toString() {, +      return "value=" + value;, +    }, +  }, +, +  private static class ComparableSubClass extends NonComparableSuperClass, +      implements Comparable<NonComparableSuperClass> {, +, +    ComparableSubClass(Integer value) {, +      super(value);, +    }, +, +    @Override, +    public int compareTo(NonComparableSuperClass other) {, +      return value.compareTo(other.value);, +    }, +  }, +++ b/guava-tests/test/com/google/common/graph/ElementOrderTest.java, +import static com.google.common.base.Preconditions.checkNotNull;, +import java.util.Comparator;, +, +  public void nodeOrder_none() {, +  public void nodeOrder_insertion() {, +  public void nodeOrder_default() {, +  public void nodeOrder_natural() {, +  public void nodeOrder_sorted() {]