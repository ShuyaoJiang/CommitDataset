[+++ b/guava-tests/test/com/google/common/io/CloseablesTest.java, +import java.io.ByteArrayInputStream;, +import java.io.InputStream;, +import java.io.Reader;, +  public void testCloseQuietly_inputStreamWithEatenException() throws IOException {, +    TestInputStream in = new TestInputStream(, +        new ByteArrayInputStream(new byte[1]), TestOption.CLOSE_THROWS);, +    Closeables.closeQuietly(in);, +    assertTrue(in.closed());, +  }, +, +  public void testCloseQuietly_readerWithEatenException() throws IOException {, +    TestReader in = new TestReader(TestOption.CLOSE_THROWS);, +    Closeables.closeQuietly(in);, +    assertTrue(in.closed());, +  }, +, +  public void testCloseQuietlyNull_inputStream() {, +    Closeables.closeQuietly((InputStream) null);, +  }, +, +  public void testCloseQuietlyNull_reader() {, +    Closeables.closeQuietly((Reader) null);, +  }, +, +++ b/guava-tests/test/com/google/common/io/CloseablesTest.java, +import java.io.ByteArrayInputStream;, +import java.io.InputStream;, +import java.io.Reader;, +  public void testCloseQuietly_inputStreamWithEatenException() throws IOException {, +    TestInputStream in = new TestInputStream(, +        new ByteArrayInputStream(new byte[1]), TestOption.CLOSE_THROWS);, +    Closeables.closeQuietly(in);, +    assertTrue(in.closed());, +  }, +, +  public void testCloseQuietly_readerWithEatenException() throws IOException {, +    TestReader in = new TestReader(TestOption.CLOSE_THROWS);, +    Closeables.closeQuietly(in);, +    assertTrue(in.closed());, +  }, +, +  public void testCloseQuietlyNull_inputStream() {, +    Closeables.closeQuietly((InputStream) null);, +  }, +, +  public void testCloseQuietlyNull_reader() {, +    Closeables.closeQuietly((Reader) null);, +  }, +, +++ b/guava/src/com/google/common/io/Closeables.java, +import java.io.InputStream;, +import java.io.Reader;, +, +  /**, +   * Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather, +   * than propagating it., +   *, +   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing, +   * an I/O resource, it should generally be safe in the case of a resource that's being used only, +   * for reading, such as an {@code InputStream}. Unlike with writable resources, there's no, +   * chance that a failure that occurs when closing the stream indicates a meaningful problem such, +   * as a failure to flush all bytes to the underlying resource., +   *, +   * @param inputStream the input stream to be closed, or {@code null} in which case this method, +   *     does nothing, +   * @since 17.0, +   */, +  public static void closeQuietly(@Nullable InputStream inputStream) {, +    try {, +      close(inputStream, true);, +    } catch (IOException impossible) {, +      throw new AssertionError(impossible);, +    }, +  }, +, +  /**, +   * Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than, +   * propagating it., +   *, +   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing, +   * an I/O resource, it should generally be safe in the case of a resource that's being used only, +   * for reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that, +   * a failure that occurs when closing the reader indicates a meaningful problem such as a failure, +   * to flush all bytes to the underlying resource., +   *, +   * @param reader the reader to be closed, or {@code null} in which case this method does nothing, +   * @since 17.0, +   */, +  public static void closeQuietly(@Nullable Reader reader) {, +    try {, +      close(reader, true);, +    } catch (IOException impossible) {, +      throw new AssertionError(impossible);, +    }, +  }]