[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  public void testDoubleMinValueCanAcquireExactlyOnce() {, +    RateLimiter r = RateLimiter.create(stopwatch, Double.MIN_VALUE);, +    assertTrue("Unable to acquire initial permit", r.tryAcquire());, +    assertFalse("Capable of acquiring an additional permit", r.tryAcquire());, +    stopwatch.sleepMillis(Integer.MAX_VALUE);, +    assertFalse("Capable of acquiring an additional permit after sleeping", r.tryAcquire());, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  public void testDoubleMinValueCanAcquireExactlyOnce() {, +    RateLimiter r = RateLimiter.create(stopwatch, Double.MIN_VALUE);, +    assertTrue("Unable to acquire initial permit", r.tryAcquire());, +    assertFalse("Capable of acquiring an additional permit", r.tryAcquire());, +    stopwatch.sleepMillis(Integer.MAX_VALUE);, +    assertFalse("Capable of acquiring an additional permit after sleeping", r.tryAcquire());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java, +import com.google.common.math.LongMath;, +, +    try {, +      this.nextFreeTicketMicros = LongMath.checkedAdd(nextFreeTicketMicros, waitMicros);, +    } catch (ArithmeticException e) {, +      this.nextFreeTicketMicros = Long.MAX_VALUE;, +    }]