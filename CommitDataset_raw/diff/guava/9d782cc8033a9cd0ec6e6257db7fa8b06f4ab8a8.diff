[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +      final ToRemove<E> toRemove = new ToRemove<E>();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +      final ToRemove<E> toRemove = new ToRemove<E>();, +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +      final ToRemove<E> toRemove = new ToRemove<E>();, +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +++ b/guava/src/com/google/common/collect/ForwardingSet.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import java.util.Collection;, +   * A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}., +   * If you override {@code iterator} or {@code remove}, you may wish to override, +   * {@link #removeAll} to forward to this implementation., +   *, +   * @since 12.0, +   */, +  @Beta, +  @Override, +  protected boolean standardRemoveAll(Collection<?> collection) {, +    checkNotNull(collection); // for GWT, +    if (collection instanceof Multiset) {, +      collection = ((Multiset<?>) collection).elementSet();, +    }, +    if (collection.size() < size()) {, +      boolean changed = false;, +      for (Object o : collection) {, +        changed |= remove(o);, +      }, +      return changed;, +    } else {, +      return Iterators.removeAll(iterator(), collection);, +    }, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +      final ToRemove<E> toRemove = new ToRemove<E>();, +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +++ b/guava/src/com/google/common/collect/ForwardingSet.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import java.util.Collection;, +   * A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}., +   * If you override {@code iterator} or {@code remove}, you may wish to override, +   * {@link #removeAll} to forward to this implementation., +   *, +   * @since 12.0, +   */, +  @Beta, +  @Override, +  protected boolean standardRemoveAll(Collection<?> collection) {, +    checkNotNull(collection); // for GWT, +    if (collection instanceof Multiset) {, +      collection = ((Multiset<?>) collection).elementSet();, +    }, +    if (collection.size() < size()) {, +      boolean changed = false;, +      for (Object o : collection) {, +        changed |= remove(o);, +      }, +      return changed;, +    } else {, +      return Iterators.removeAll(iterator(), collection);, +    }, +  }, +, +  /**, +++ b/guava/src/com/google/common/collect/TreeMultiset.java, +      final ToRemove<E> toRemove = new ToRemove<E>();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +      final ToRemove<E> toRemove = new ToRemove<E>();, +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +++ b/guava/src/com/google/common/collect/ForwardingSet.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import java.util.Collection;, +   * A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}., +   * If you override {@code iterator} or {@code remove}, you may wish to override, +   * {@link #removeAll} to forward to this implementation., +   *, +   * @since 12.0, +   */, +  @Beta, +  @Override, +  protected boolean standardRemoveAll(Collection<?> collection) {, +    checkNotNull(collection); // for GWT, +    if (collection instanceof Multiset) {, +      collection = ((Multiset<?>) collection).elementSet();, +    }, +    if (collection.size() < size()) {, +      boolean changed = false;, +      for (Object o : collection) {, +        changed |= remove(o);, +      }, +      return changed;, +    } else {, +      return Iterators.removeAll(iterator(), collection);, +    }]