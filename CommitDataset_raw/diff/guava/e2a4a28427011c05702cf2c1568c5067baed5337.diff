[+++ b/guava-tests/test/com/google/common/collect/ImmutableMapTest.java, +  @GwtIncompatible("assumptions about splitting"), +  public void testKeySetSplittable() {, +    ImmutableMap<Integer, Integer> map = ImmutableMap.<Integer, Integer>builder(), +        .put(1, 1), +        .put(2, 2), +        .put(3, 3), +        .put(4, 4), +        .put(5, 5), +        .put(6, 6), +        .build();, +    assertNotNull(map.keySet().spliterator().trySplit());, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableMapTest.java, +  @GwtIncompatible("assumptions about splitting"), +  public void testKeySetSplittable() {, +    ImmutableMap<Integer, Integer> map = ImmutableMap.<Integer, Integer>builder(), +        .put(1, 1), +        .put(2, 2), +        .put(3, 3), +        .put(4, 4), +        .put(5, 5), +        .put(6, 6), +        .build();, +    assertNotNull(map.keySet().spliterator().trySplit());, +  }, +, +++ b/guava/src/com/google/common/collect/CollectSpliterators.java, +import java.util.function.IntConsumer;, +      private final Spliterator.OfInt delegate;, +      WithCharacteristics(Spliterator.OfInt delegate) {, +        return delegate.tryAdvance((IntConsumer) i -> action.accept(function.apply(i)));, +        delegate.forEachRemaining((IntConsumer) i -> action.accept(function.apply(i)));, +        Spliterator.OfInt split = delegate.trySplit();, +        return Spliterator.ORDERED, +            | Spliterator.SIZED, +            | Spliterator.SUBSIZED, +            | extraCharacteristics;, +    return new WithCharacteristics(IntStream.range(0, size).spliterator());]