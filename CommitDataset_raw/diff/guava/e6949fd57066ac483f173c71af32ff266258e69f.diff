[+++ b/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package com.google.common.util.concurrent;, +, +import static java.util.Arrays.asList;, +, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Sets;, +import com.google.common.testing.TestLogHandler;, +import com.google.common.util.concurrent.ServiceManager.Listener;, +, +import junit.framework.TestCase;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Set;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.logging.Formatter;, +import java.util.logging.Level;, +import java.util.logging.LogRecord;, +import java.util.logging.Logger;, +, +/**, + * Tests for {@link ServiceManager}., + *, + * @author Luke Sandberg, + * @author Chris Nokleberg, + */, +public class ServiceManagerTest extends TestCase {, +, +  private static class NoOpService extends AbstractService {, +    @Override protected void doStart() {, +      notifyStarted();, +    }, +, +    @Override protected void doStop() {, +      notifyStopped();, +    }, +  }, +, +  /*, +   * A NoOp service that will delay the startup and shutdown notification for a configurable amount, +   * of time., +   */, +  private static class NoOpDelayedSerivce extends NoOpService {, +    private long delay;, +, +    public NoOpDelayedSerivce(long delay) {, +      this.delay = delay;, +    }, +, +    @Override protected void doStart() {, +      new Thread() {, +        @Override public void run() {, +          Uninterruptibles.sleepUninterruptibly(delay, TimeUnit.MILLISECONDS);, +          notifyStarted();, +        }, +      }.start();, +    }, +, +    @Override protected void doStop() {, +      new Thread() {, +        @Override public void run() {, +          Uninterruptibles.sleepUninterruptibly(delay, TimeUnit.MILLISECONDS);, +          notifyStopped();, +        }, +      }.start();, +    }, +  }, +, +  private static class FailStartService extends NoOpService {, +    @Override protected void doStart() {, +      notifyFailed(new IllegalStateException("failed"));, +    }, +  }, +, +  private static class FailRunService extends NoOpService {, +    @Override protected void doStart() {, +      super.doStart();, +      notifyFailed(new IllegalStateException("failed"));, +    }, +  }, +, +  private static class FailStopService extends NoOpService {]