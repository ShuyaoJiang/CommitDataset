[+++ b/guava/src/com/google/common/cache/AbstractCache.java, +      throw new UncheckedExecutionException(e.getCause());, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +      throw new UncheckedExecutionException(e.getCause());, +++ b/guava/src/com/google/common/cache/Cache.java, +   * @throws ExecutionException if a checked exception was thrown while loading the response, +   * @throws UncheckedExecutionException if an unchecked exception was thrown while loading the, +   *     response, +   * @throws ExecutionError if an error was thrown while loading the response, +   * situations where checked exceptions are not thrown by the cache loader., +   *, +   * <p><b>Warning:</b> this method silently converts checked exceptions to unchecked exceptions., +   * The {@link #get} method should be preferred for cache loaders which throw checked exceptions., +   * @throws UncheckedExecutionException if an exception was thrown while loading the response,, +   *     regardless of whether the exception was checked or unchecked, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +      throw new UncheckedExecutionException(e.getCause());, +++ b/guava/src/com/google/common/cache/Cache.java, +   * @throws ExecutionException if a checked exception was thrown while loading the response, +   * @throws UncheckedExecutionException if an unchecked exception was thrown while loading the, +   *     response, +   * @throws ExecutionError if an error was thrown while loading the response, +   * situations where checked exceptions are not thrown by the cache loader., +   *, +   * <p><b>Warning:</b> this method silently converts checked exceptions to unchecked exceptions., +   * The {@link #get} method should be preferred for cache loaders which throw checked exceptions., +   * @throws UncheckedExecutionException if an exception was thrown while loading the response,, +   *     regardless of whether the exception was checked or unchecked, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +import com.google.common.util.concurrent.ExecutionError;, +      } catch (Exception e) {, +        throw new UncheckedExecutionException(e);, +      } catch (Error e) {, +        throw new ExecutionError(e);, +      } catch (RuntimeException e) {, +        throw new UncheckedExecutionException(e);, +      } catch (Exception e) {, +        long end = System.nanoTime();, +        statsCounter.recordCreateException(end - start);, +        throw new ExecutionException(e);, +      } catch (Error e) {, +        long end = System.nanoTime();, +        statsCounter.recordCreateException(end - start);, +        throw new ExecutionError(e);, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +      throw new UncheckedExecutionException(e.getCause());, +++ b/guava/src/com/google/common/cache/Cache.java, +   * @throws ExecutionException if a checked exception was thrown while loading the response, +   * @throws UncheckedExecutionException if an unchecked exception was thrown while loading the, +   *     response, +   * @throws ExecutionError if an error was thrown while loading the response, +   * situations where checked exceptions are not thrown by the cache loader., +   *, +   * <p><b>Warning:</b> this method silently converts checked exceptions to unchecked exceptions., +   * The {@link #get} method should be preferred for cache loaders which throw checked exceptions., +   * @throws UncheckedExecutionException if an exception was thrown while loading the response,, +   *     regardless of whether the exception was checked or unchecked, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +import com.google.common.util.concurrent.ExecutionError;, +      } catch (Exception e) {, +        throw new UncheckedExecutionException(e);, +      } catch (Error e) {, +        throw new ExecutionError(e);, +      } catch (RuntimeException e) {, +        throw new UncheckedExecutionException(e);, +      } catch (Exception e) {, +        long end = System.nanoTime();, +        statsCounter.recordCreateException(end - start);, +        throw new ExecutionException(e);, +      } catch (Error e) {, +        long end = System.nanoTime();, +        statsCounter.recordCreateException(end - start);, +        throw new ExecutionError(e);, +++ b/guava/src/com/google/common/cache/CustomConcurrentHashMap.java, +import com.google.common.util.concurrent.ExecutionError;, +import com.google.common.util.concurrent.UncheckedExecutionException;, +     * @throws ExecutionError if the computing thread throws an error, +  private static abstract class AbstractValueReference<K, V> implements ValueReference<K, V> {, +      return null;, +   * Used to propogate unchecked computation exceptions to other threads., +   */, +  private static final class UncheckedComputationExceptionReference<K, V>, +      extends AbstractValueReference<K, V> {, +    final RuntimeException e;, +, +    UncheckedComputationExceptionReference(RuntimeException e) {, +      this.e = e;, +    }, +, +    @Override, +    public V waitForValue() {, +      throw new UncheckedExecutionException(e);, +    }, +  }, +, +  /**, +   * Used to propogate computation exceptions to other threads., +   */, +  private static final class ComputationExceptionReference<K, V>, +      extends AbstractValueReference<K, V> {]