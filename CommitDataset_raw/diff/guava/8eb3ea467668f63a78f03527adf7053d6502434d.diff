[+++ b/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;, +import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;, +, +import com.google.common.collect.ImmutableList;, +import java.io.File;, +import java.net.MalformedURLException;, +    final ClassLoader myLoader = getClass().getClassLoader();, +    URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());, +    final ClassLoader myLoader = getClass().getClassLoader();, +    URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());, +, +  private URL[] getClassPathUrls() {, +    ClassLoader classLoader = getClass().getClassLoader();, +    return classLoader instanceof URLClassLoader, +        ? ((URLClassLoader) classLoader).getURLs(), +        : parseJavaClassPath().toArray(new URL[0]);, +  }, +, +  /**, +   * Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain, +   * System#getProperty system property}., +   */, +  // TODO(b/65488446): Make this a public API., +  private static ImmutableList<URL> parseJavaClassPath() {, +    ImmutableList.Builder<URL> urls = ImmutableList.builder();, +    for (String entry : Splitter.on(PATH_SEPARATOR.value()).split(JAVA_CLASS_PATH.value())) {, +      try {, +        try {, +          urls.add(new File(entry).toURI().toURL());, +        } catch (SecurityException e) { // File.toURI checks to see if the file is a directory, +          urls.add(new URL("file", null, new File(entry).getAbsolutePath()));, +        }, +      } catch (MalformedURLException e) {, +        AssertionError error = new AssertionError("malformed class path entry: " + entry);, +        error.initCause(e);, +        throw error;, +      }, +    }, +    return urls.build();, +  }, +++ b/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;, +import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;, +, +import com.google.common.collect.ImmutableList;, +import java.io.File;, +import java.net.MalformedURLException;, +    final ClassLoader myLoader = getClass().getClassLoader();, +    URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());, +    final ClassLoader myLoader = getClass().getClassLoader();, +    URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());, +, +  private URL[] getClassPathUrls() {, +    ClassLoader classLoader = getClass().getClassLoader();, +    return classLoader instanceof URLClassLoader, +        ? ((URLClassLoader) classLoader).getURLs(), +        : parseJavaClassPath().toArray(new URL[0]);, +  }, +, +  /**, +   * Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain, +   * System#getProperty system property}., +   */, +  // TODO(b/65488446): Make this a public API., +  private static ImmutableList<URL> parseJavaClassPath() {, +    ImmutableList.Builder<URL> urls = ImmutableList.builder();, +    for (String entry : Splitter.on(PATH_SEPARATOR.value()).split(JAVA_CLASS_PATH.value())) {, +      try {, +        try {, +          urls.add(new File(entry).toURI().toURL());, +        } catch (SecurityException e) { // File.toURI checks to see if the file is a directory, +          urls.add(new URL("file", null, new File(entry).getAbsolutePath()));, +        }, +      } catch (MalformedURLException e) {, +        AssertionError error = new AssertionError("malformed class path entry: " + entry);, +        error.initCause(e);, +        throw error;, +      }, +    }, +    return urls.build();, +  }, +++ b/guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;, +import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;, +, +import com.google.common.collect.ImmutableList;, +import java.io.File;, +import java.net.MalformedURLException;, +    final ClassLoader myLoader = getClass().getClassLoader();, +    URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());, +    final ClassLoader myLoader = getClass().getClassLoader();, +    URLClassLoader sepLoader = new URLClassLoader(getClassPathUrls(), myLoader.getParent());, +, +  private URL[] getClassPathUrls() {, +    ClassLoader classLoader = getClass().getClassLoader();, +    return classLoader instanceof URLClassLoader, +        ? ((URLClassLoader) classLoader).getURLs(), +        : parseJavaClassPath().toArray(new URL[0]);, +  }]