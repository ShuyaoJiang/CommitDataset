[+++ b/guava-gwt/src-super/com/google/common/net/super/com/google/common/net/MediaType.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.net;, +, +import static com.google.common.base.CharMatcher.ASCII;, +import static com.google.common.base.CharMatcher.JAVA_ISO_CONTROL;, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.base.Preconditions.checkState;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.base.Ascii;, +import com.google.common.base.CharMatcher;, +import com.google.common.base.Function;, +import com.google.common.base.Joiner;, +import com.google.common.base.Joiner.MapJoiner;, +import com.google.common.base.Objects;, +import com.google.common.collect.ImmutableListMultimap;, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.ImmutableMultiset;, +import com.google.common.collect.Maps;, +import com.google.common.collect.Multimap;, +import com.google.common.collect.Multimaps;, +import com.google.common.escape.CharEscaper;, +import com.google.common.escape.CharEscaperBuilder;, +, +import java.util.Collection;, +import java.util.Map;, +import java.util.Map.Entry;, +, +import javax.annotation.Nullable;, +import javax.annotation.concurrent.Immutable;, +, +/**, + * Represents an <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type</a>, + * (also known as a MIME Type or Content Type). All values for type, subtype, parameter attributes, + * or parameter values must be valid according to RFCs 2045 and 2046., + *, + * <p>All portions of the media type that are case-insensitive (type, subtype, parameter attributes), + * are normalized to lowercase. The value of the {@code charset} parameter is normalized to, + * lowercase, but all others are left as-is., + *, + * <p>Note that this specifically does <strong>not</strong> represent the value of the MIME, + * {@code Content-Type} header and as such has no support for header-specific considerations such as, + * line wrapping and comments., + *, + * <p>For media types that take a charset the predefined constants default to UTF-8 and have a, + * "_UTF_8" suffix. To get a version without a character set, use {@link #withoutParameters}., + *, + * @since 12.0, + *, + * @author Gregory Kick, + */, +@Beta, +@GwtCompatible(emulated = true), +@Immutable, +public final class MediaType {, +  private static final String CHARSET_ATTRIBUTE = "charset";, +  private static final String UTF_8 = "utf-8";, +, +  /** Matcher for type, subtype and attributes. */, +  private static final CharMatcher TOKEN_MATCHER = ASCII.and(JAVA_ISO_CONTROL.negate()), +      .and(CharMatcher.isNot(' ')), +      .and(CharMatcher.noneOf("()<>@,;:\\\"/[]?="));, +  private static final CharMatcher QUOTED_TEXT_MATCHER = ASCII, +      .and(CharMatcher.noneOf("\"\\\r"));, +, +  // TODO(gak): make these public?, +  private static final String APPLICATION_TYPE = "application";, +  private static final String AUDIO_TYPE = "audio";, +  private static final String IMAGE_TYPE = "image";, +  private static final String TEXT_TYPE = "text";, +  private static final String VIDEO_TYPE = "video";, +, +  /*, +   * The following constants are grouped by their type and ordered alphabetically by the constant, +   * name within that type. The constant name should be a sensible identifier that is closest to the, +   * "common name" of the media.  This is often, but not necessarily the same as the subtype., +   *, +   * Be sure to declare all constants with the type and subtype in all lowercase., +   *, +   * When adding constants, be sure to add an entry into the KNOWN_TYPES map. For types that, +   * take a charset (e.g. all text/* types), default to UTF-8 and suffix with "_UTF_8"., +   */]