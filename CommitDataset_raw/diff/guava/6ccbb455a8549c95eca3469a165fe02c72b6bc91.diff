[+++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +  // TODO(user): deprecate, +  /**, +   * See {@link MapMaker#timeToLive}., +   */, +  public abstract GenericMapMaker<K0, V0> timeToLive(, +      long duration, TimeUnit unit);, +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +  // TODO(user): deprecate, +  /**, +   * See {@link MapMaker#timeToLive}., +   */, +  public abstract GenericMapMaker<K0, V0> timeToLive(, +      long duration, TimeUnit unit);, +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return new AbstractIndexedListIterator<T>(array.length) {, +    return new AbstractIndexedListIterator<T>(length) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +  // TODO(user): deprecate, +  /**, +   * See {@link MapMaker#timeToLive}., +   */, +  public abstract GenericMapMaker<K0, V0> timeToLive(, +      long duration, TimeUnit unit);, +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return new AbstractIndexedListIterator<T>(array.length) {, +    return new AbstractIndexedListIterator<T>(length) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    return timeToLive(duration, unit);, +  }, +, +  @Override, +  public MapMaker timeToLive(long duration, TimeUnit unit) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +  // TODO(user): deprecate, +  /**, +   * See {@link MapMaker#timeToLive}., +   */, +  public abstract GenericMapMaker<K0, V0> timeToLive(, +      long duration, TimeUnit unit);, +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return new AbstractIndexedListIterator<T>(array.length) {, +    return new AbstractIndexedListIterator<T>(length) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    return timeToLive(duration, unit);, +  }, +, +  @Override, +  public MapMaker timeToLive(long duration, TimeUnit unit) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * other methods are supported by the map and its views. When given a key that, +   * doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()}, +   * methods throw an {@link IllegalArgumentException}., +   * other methods are supported by the map and its views. When given a value, +   * that doesn't satisfy the predicate, the map's {@code put()}, {@code, +   * putAll()}, and {@link Entry#setValue} methods throw an {@link, +   * IllegalArgumentException}., +   * other methods are supported by the map and its views. When given a, +   * key/value pair that doesn't satisfy the predicate, the map's {@code put()}, +   * and {@code putAll()} methods throw an {@link IllegalArgumentException}., +   * Similarly, the map's entries have a {@link Entry#setValue} method that, +   * throws an {@link IllegalArgumentException} when the existing key and the, +   * provided value don't satisfy the predicate., +   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with, +  static class FilteredEntryMap<K, V> extends AbstractFilteredMap<K, V> {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +  // TODO(user): deprecate, +  /**, +   * See {@link MapMaker#timeToLive}., +   */, +  public abstract GenericMapMaker<K0, V0> timeToLive(, +      long duration, TimeUnit unit);, +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    return new AbstractIndexedListIterator<T>(array.length) {, +    return new AbstractIndexedListIterator<T>(length) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    return timeToLive(duration, unit);, +  }, +, +  @Override, +  public MapMaker timeToLive(long duration, TimeUnit unit) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * other methods are supported by the map and its views. When given a key that, +   * doesn't satisfy the predicate, the map's {@code put()} and {@code putAll()}, +   * methods throw an {@link IllegalArgumentException}., +   * other methods are supported by the map and its views. When given a value, +   * that doesn't satisfy the predicate, the map's {@code put()}, {@code, +   * putAll()}, and {@link Entry#setValue} methods throw an {@link, +   * IllegalArgumentException}., +   * other methods are supported by the map and its views. When given a, +   * key/value pair that doesn't satisfy the predicate, the map's {@code put()}, +   * and {@code putAll()} methods throw an {@link IllegalArgumentException}., +   * Similarly, the map's entries have a {@link Entry#setValue} method that, +   * throws an {@link IllegalArgumentException} when the existing key and the, +   * provided value don't satisfy the predicate.]