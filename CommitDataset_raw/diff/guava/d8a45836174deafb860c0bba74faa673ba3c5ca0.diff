[+++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +   *, +   * <p>Note that constructors taking a builder object cannot be tested effectively because, +   * semantics of builder can be arbitrarily complex. Still, a factory class can be created in the, +   * test to facilitate equality testing. For example: <pre>, +   * public class FooTest {, +   *, +   *   private static class FooFactoryForTest {, +   *     public static Foo create(String a, String b, int c, boolean d) {, +   *       return Foo.builder(), +   *           .setA(a), +   *           .setB(b), +   *           .setC(c), +   *           .setD(d), +   *           .build();, +   *     }, +   *   }, +   *, +   *   public void testEquals() {, +   *     new ClassSanityTester(), +   *       .forAllPublicStaticMethods(FooFactoryForTest.class), +   *       .thatReturn(Foo.class), +   *       .testEquals();, +   *   }, +   * }, +   * </pre>, +   * It will test that Foo objects created by the {@code create(a, b, c, d)} factory method with, +   * equal parameters are equal and vice versa, thus indirectly tests the builder equality., +      invokable.setAccessible(true);, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +   *, +   * <p>Note that constructors taking a builder object cannot be tested effectively because, +   * semantics of builder can be arbitrarily complex. Still, a factory class can be created in the, +   * test to facilitate equality testing. For example: <pre>, +   * public class FooTest {, +   *, +   *   private static class FooFactoryForTest {, +   *     public static Foo create(String a, String b, int c, boolean d) {, +   *       return Foo.builder(), +   *           .setA(a), +   *           .setB(b), +   *           .setC(c), +   *           .setD(d), +   *           .build();, +   *     }, +   *   }, +   *, +   *   public void testEquals() {, +   *     new ClassSanityTester(), +   *       .forAllPublicStaticMethods(FooFactoryForTest.class), +   *       .thatReturn(Foo.class), +   *       .testEquals();, +   *   }, +   * }, +   * </pre>, +   * It will test that Foo objects created by the {@code create(a, b, c, d)} factory method with, +   * equal parameters are equal and vice versa, thus indirectly tests the builder equality., +      invokable.setAccessible(true);, +++ b/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +  private static class BadEqualsFactory {, +    @SuppressWarnings("unused") // Called by reflection, +        @Nullable OneConstantEnum oneConstantOnly) {, +  private static class GoodNullsFactory {, +    @SuppressWarnings("unused") // Called by reflection, +  private static class JdkObjectFactory {, +    @SuppressWarnings("unused") // Called by reflection]