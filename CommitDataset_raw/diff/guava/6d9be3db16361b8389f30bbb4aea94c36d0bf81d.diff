[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <i>no</i> element will match, use {@link #tryFind} or {@link, +   * #find(Iterator, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <i>no</i> element will match, use {@link #tryFind} or {@link, +   * #find(Iterator, Predicate, Object)} instead., +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, + * Note that testing {@link Object#equals(Object)} is more simply done using, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <i>no</i> element will match, use {@link #tryFind} or {@link, +   * #find(Iterator, Predicate, Object)} instead., +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, + * Note that testing {@link Object#equals(Object)} is more simply done using, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + * }}</pre>, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <i>no</i> element will match, use {@link #tryFind} or {@link, +   * #find(Iterator, Predicate, Object)} instead., +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, + * Note that testing {@link Object#equals(Object)} is more simply done using, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + * }}</pre>, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +     * {@link #recordMisses}, this method should only be called by the loading thread., +     * {@link #recordMisses}, this method should only be called by the loading thread., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <i>no</i> element will match, use {@link #tryFind} or {@link, +   * #find(Iterator, Predicate, Object)} instead., +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, + * Note that testing {@link Object#equals(Object)} is more simply done using, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + * }}</pre>, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +     * {@link #recordMisses}, this method should only be called by the loading thread., +     * {@link #recordMisses}, this method should only be called by the loading thread., +++ b/guava/src/com/google/common/collect/ForwardingNavigableSet.java, +   * A sensible implementation of {@link NavigableSet#descendingSet} in terms of the other methods, +   * of {@link NavigableSet}, notably including {@link NavigableSet#descendingIterator}., +   * <p>In many cases, you may wish to override {@link ForwardingNavigableSet#descendingSet} to, +   * forward to this implementation or a subclass thereof., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <i>no</i> element will match, use {@link #tryFind} or {@link, +   * #find(Iterator, Predicate, Object)} instead., +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, + * Note that testing {@link Object#equals(Object)} is more simply done using, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + * }}</pre>, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +     * {@link #recordMisses}, this method should only be called by the loading thread., +     * {@link #recordMisses}, this method should only be called by the loading thread., +++ b/guava/src/com/google/common/collect/ForwardingNavigableSet.java, +   * A sensible implementation of {@link NavigableSet#descendingSet} in terms of the other methods, +   * of {@link NavigableSet}, notably including {@link NavigableSet#descendingIterator}., +   * <p>In many cases, you may wish to override {@link ForwardingNavigableSet#descendingSet} to, +   * forward to this implementation or a subclass thereof., +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +   * created by the {@link Builder#ImmutableTable.Builder()} constructor., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or, +   * {@link #find(Iterable, Predicate, Object)} instead., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * <i>no</i> element will match, use {@link #tryFind} or {@link, +   * #find(Iterator, Predicate, Object)} instead., +++ b/guava-testlib/src/com/google/common/testing/EquivalenceTester.java, + * Note that testing {@link Object#equals(Object)} is more simply done using, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + * }}</pre>, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +     * {@link #recordMisses}, this method should only be called by the loading thread., +     * {@link #recordMisses}, this method should only be called by the loading thread., +++ b/guava/src/com/google/common/collect/ForwardingNavigableSet.java, +   * A sensible implementation of {@link NavigableSet#descendingSet} in terms of the other methods, +   * of {@link NavigableSet}, notably including {@link NavigableSet#descendingIterator}., +   * <p>In many cases, you may wish to override {@link ForwardingNavigableSet#descendingSet} to, +   * forward to this implementation or a subclass thereof., +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +   * created by the {@link Builder#ImmutableTable.Builder()} constructor., +++ b/guava/src/com/google/common/collect/Iterables.java, +   * it is possible that <i>no</i> element will match, use {@link #tryFind} or]