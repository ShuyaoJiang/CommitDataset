[+++ b/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java, +import com.google.common.testing.SerializableTester;, +import java.io.Serializable;, +  interface A {}, +  interface B{}, +, +    class AB implements A, B {}, +    class BA implements B, A {}, +    AB ab = new AB();, +    BA ba = new BA();, +        .addEqualityGroup(, +            newProxyWithEqualsForInterfaces(List.class, Runnable.class),, +            newProxyWithEqualsForInterfaces(List.class, Runnable.class)), +        .addEqualityGroup(, +            newProxyWithEqualsForInterfaces(Runnable.class, List.class)), +        .addEqualityGroup(, +            newDelegatingListWithEquals(LIST1),, +            newDelegatingListWithEquals(LIST1),, +            SerializableTester.reserialize(newDelegatingListWithEquals(LIST1))), +  private static Object newProxyWithEqualsForInterfaces(, +      Class<?>... interfaces) {, +    return Proxy.newProxyInstance(AbstractInvocationHandlerTest.class.getClassLoader(),, +        interfaces, new DelegatingInvocationHandlerWithEquals("a string"));, +  }, +, +  private static class DelegatingInvocationHandler extends AbstractInvocationHandler, +      implements Serializable {, +, +    @Override public String toString() {, +      return "another arbitrary string";, +    }, +++ b/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java, +import com.google.common.testing.SerializableTester;, +import java.io.Serializable;, +  interface A {}, +  interface B{}, +, +    class AB implements A, B {}, +    class BA implements B, A {}, +    AB ab = new AB();, +    BA ba = new BA();, +        .addEqualityGroup(, +            newProxyWithEqualsForInterfaces(List.class, Runnable.class),, +            newProxyWithEqualsForInterfaces(List.class, Runnable.class)), +        .addEqualityGroup(, +            newProxyWithEqualsForInterfaces(Runnable.class, List.class)), +        .addEqualityGroup(, +            newDelegatingListWithEquals(LIST1),, +            newDelegatingListWithEquals(LIST1),, +            SerializableTester.reserialize(newDelegatingListWithEquals(LIST1))), +  private static Object newProxyWithEqualsForInterfaces(, +      Class<?>... interfaces) {, +    return Proxy.newProxyInstance(AbstractInvocationHandlerTest.class.getClassLoader(),, +        interfaces, new DelegatingInvocationHandlerWithEquals("a string"));, +  }, +, +  private static class DelegatingInvocationHandler extends AbstractInvocationHandler, +      implements Serializable {, +, +    @Override public String toString() {, +      return "another arbitrary string";, +    }, +++ b/guava/src/com/google/common/reflect/AbstractInvocationHandler.java, +import java.util.Arrays;, +      if (arg == null) {, +        return false;, +      }, +      if (proxy == arg) {, +        return true;, +      }, +      return isProxyOfSameInterfaces(arg, proxy.getClass()), +          && equals(Proxy.getInvocationHandler(arg));, +, +  private static boolean isProxyOfSameInterfaces(Object arg, Class<?> proxyClass) {, +    return proxyClass.isInstance(arg), +        // Equal proxy instances should mostly be instance of proxyClass, +        // Under some edge cases (such as the proxy of JDK types serialized and then deserialized), +        // the proxy type may not be the same., +        // We first check isProxyClass() so that the common case of comparing with non-proxy objects, +        // is efficient., +        || (Proxy.isProxyClass(arg.getClass()), +            && Arrays.equals(arg.getClass().getInterfaces(), proxyClass.getInterfaces()));, +  }]