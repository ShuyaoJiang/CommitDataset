[+++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/SetsTest.java, +import static com.google.common.collect.Sets.newLinkedHashSet;, +    Set<Set<Integer>> expected = newLinkedHashSet();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/SetsTest.java, +import static com.google.common.collect.Sets.newLinkedHashSet;, +    Set<Set<Integer>> expected = newLinkedHashSet();, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import java.util.ArrayList;, +import java.util.HashSet;, +    // Depending on JDK version, either toArray() or toArray(T[]) may be called... use this class, +    // rather than mocking to ensure that one of those methods is called., +    class TestArrayList<E> extends ArrayList<E> {, +      boolean toArrayCalled = false;, +, +      @Override, +      public Object[] toArray() {, +        toArrayCalled = true;, +        return super.toArray();, +      }, +, +      @Override, +      public <T> T[] toArray(T[] a) {, +        toArrayCalled = true;, +        return super.toArray(a);, +      }, +    }, +, +    TestArrayList<String> toCopy = new TestArrayList<String>();, +    assertTrue(toCopy.toArrayCalled);, +    // Depending on JDK version, either toArray() or toArray(T[]) may be called... use this class, +    // rather than mocking to ensure that one of those methods is called., +    class TestHashSet<E> extends HashSet<E> {, +      boolean toArrayCalled = false;, +, +      @Override, +      public Object[] toArray() {, +        toArrayCalled = true;, +        return super.toArray();, +      }, +, +      @Override, +      public <T> T[] toArray(T[] a) {, +        toArrayCalled = true;, +        return super.toArray(a);, +      }, +    }, +, +    TestHashSet<Entry<String>> entrySet = new TestHashSet<Entry<String>>();, +    EasyMock.replay(toCopy);, +    EasyMock.verify(toCopy);, +    assertTrue(entrySet.toArrayCalled);, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/SetsTest.java, +import static com.google.common.collect.Sets.newLinkedHashSet;, +    Set<Set<Integer>> expected = newLinkedHashSet();, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import java.util.ArrayList;, +import java.util.HashSet;, +    // Depending on JDK version, either toArray() or toArray(T[]) may be called... use this class, +    // rather than mocking to ensure that one of those methods is called., +    class TestArrayList<E> extends ArrayList<E> {, +      boolean toArrayCalled = false;, +, +      @Override, +      public Object[] toArray() {, +        toArrayCalled = true;, +        return super.toArray();, +      }, +, +      @Override, +      public <T> T[] toArray(T[] a) {, +        toArrayCalled = true;, +        return super.toArray(a);, +      }, +    }, +, +    TestArrayList<String> toCopy = new TestArrayList<String>();, +    assertTrue(toCopy.toArrayCalled);, +    // Depending on JDK version, either toArray() or toArray(T[]) may be called... use this class, +    // rather than mocking to ensure that one of those methods is called., +    class TestHashSet<E> extends HashSet<E> {, +      boolean toArrayCalled = false;, +, +      @Override, +      public Object[] toArray() {, +        toArrayCalled = true;, +        return super.toArray();, +      }, +, +      @Override, +      public <T> T[] toArray(T[] a) {, +        toArrayCalled = true;, +        return super.toArray(a);, +      }, +    }, +, +    TestHashSet<Entry<String>> entrySet = new TestHashSet<Entry<String>>();, +    EasyMock.replay(toCopy);, +    EasyMock.verify(toCopy);, +    assertTrue(entrySet.toArrayCalled);, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java]