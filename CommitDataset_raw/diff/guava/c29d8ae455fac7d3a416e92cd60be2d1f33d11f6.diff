[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +    public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {, +      if (entry instanceof ImmutableEntry<?, ?>) {, +        checkNotNull(entry.getKey());, +        checkNotNull(entry.getValue());, +        @SuppressWarnings("unchecked") // all supported methods are covariant, +        Entry<K, V> immutableEntry = (Entry<K, V>) entry;, +        entries.add(immutableEntry);, +      } else {, +        entries.add(entryOf((K) entry.getKey(), (V) entry.getValue()));, +      }, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +    public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {, +      if (entry instanceof ImmutableEntry<?, ?>) {, +        checkNotNull(entry.getKey());, +        checkNotNull(entry.getValue());, +        @SuppressWarnings("unchecked") // all supported methods are covariant, +        Entry<K, V> immutableEntry = (Entry<K, V>) entry;, +        entries.add(immutableEntry);, +      } else {, +        entries.add(entryOf((K) entry.getKey(), (V) entry.getValue()));, +      }, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java, +    @Override public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {, +      super.put(entry);, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +    public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {, +      if (entry instanceof ImmutableEntry<?, ?>) {, +        checkNotNull(entry.getKey());, +        checkNotNull(entry.getValue());, +        @SuppressWarnings("unchecked") // all supported methods are covariant, +        Entry<K, V> immutableEntry = (Entry<K, V>) entry;, +        entries.add(immutableEntry);, +      } else {, +        entries.add(entryOf((K) entry.getKey(), (V) entry.getValue()));, +      }, +      return this;, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java, +    @Override public Builder<K, V> put(Entry<? extends K, ? extends V> entry) {, +      super.put(entry);, +      return this;, +    }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableMapTest.java, +    public void testBuilder_withImmutableEntry() {, +      ImmutableMap<String, Integer> map = new Builder<String, Integer>(), +          .put(Maps.immutableEntry("one", 1)), +          .build();, +      assertMapEquals(map, "one", 1);, +    }, +, +    public void testBuilder_withImmutableEntryAndNullContents() {, +      Builder<String, Integer> builder = new Builder<String, Integer>();, +      try {, +        builder.put(Maps.immutableEntry("one", (Integer) null));, +        fail();, +      } catch (NullPointerException expected) {, +      }, +      try {, +        builder.put(Maps.immutableEntry((String) null, 1));, +        fail();, +      } catch (NullPointerException expected) {, +      }, +    }, +, +    private static class StringHolder {, +      String string;, +    }, +, +    public void testBuilder_withMutableEntry() {, +      ImmutableMap.Builder<String, Integer> builder =, +          new Builder<String, Integer>();, +      final StringHolder holder = new StringHolder();, +      holder.string = "one";, +      Entry<String, Integer> entry = new AbstractMapEntry<String, Integer>() {, +        @Override public String getKey() {, +          return holder.string;, +        }, +        @Override public Integer getValue() {, +          return 1;, +        }, +      };, +, +      builder.put(entry);, +      holder.string = "two";, +      assertMapEquals(builder.build(), "one", 1);, +    }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java]