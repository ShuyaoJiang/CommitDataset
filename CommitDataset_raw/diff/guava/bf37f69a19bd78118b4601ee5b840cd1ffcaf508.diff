[+++ b/android/guava/src/com/google/common/net/InetAddresses.java, +import com.google.common.collect.Iterables;, +import java.util.List;, +  private static final Splitter IPV6_SPLITTER = Splitter.on(':').limit(IPV6_PART_COUNT + 2);, +    List<String> parts = IPV6_SPLITTER.splitToList(ipString);, +    if (parts.size() < 3 || parts.size() > IPV6_PART_COUNT + 1) {, +    for (int i = 1; i < parts.size() - 1; i++) {, +      if (parts.get(i).length() == 0) {, +      partsLo = parts.size() - skipIndex - 1;, +      if (parts.get(0).length() == 0 && --partsHi != 0) {, +       if (Iterables.getLast(parts).length() == 0 && --partsLo != 0) {, +      partsHi = parts.size();, +        rawBytes.putShort(parseHextet(parts.get(i)));, +        rawBytes.putShort(parseHextet(parts.get(parts.size() - i)));, +++ b/android/guava/src/com/google/common/net/InetAddresses.java, +import com.google.common.collect.Iterables;, +import java.util.List;, +  private static final Splitter IPV6_SPLITTER = Splitter.on(':').limit(IPV6_PART_COUNT + 2);, +    List<String> parts = IPV6_SPLITTER.splitToList(ipString);, +    if (parts.size() < 3 || parts.size() > IPV6_PART_COUNT + 1) {, +    for (int i = 1; i < parts.size() - 1; i++) {, +      if (parts.get(i).length() == 0) {, +      partsLo = parts.size() - skipIndex - 1;, +      if (parts.get(0).length() == 0 && --partsHi != 0) {, +       if (Iterables.getLast(parts).length() == 0 && --partsLo != 0) {, +      partsHi = parts.size();, +        rawBytes.putShort(parseHextet(parts.get(i)));, +        rawBytes.putShort(parseHextet(parts.get(parts.size() - i)));, +++ b/guava/src/com/google/common/net/InetAddresses.java, +import com.google.common.collect.Iterables;, +import java.util.List;, +  private static final Splitter IPV6_SPLITTER = Splitter.on(':').limit(IPV6_PART_COUNT + 2);, +    List<String> parts = IPV6_SPLITTER.splitToList(ipString);, +    if (parts.size() < 3 || parts.size() > IPV6_PART_COUNT + 1) {, +    for (int i = 1; i < parts.size() - 1; i++) {, +      if (parts.get(i).length() == 0) {, +      partsLo = parts.size() - skipIndex - 1;, +      if (parts.get(0).length() == 0 && --partsHi != 0) {, +       if (Iterables.getLast(parts).length() == 0 && --partsLo != 0) {, +      partsHi = parts.size();, +        rawBytes.putShort(parseHextet(parts.get(i)));, +        rawBytes.putShort(parseHextet(parts.get(parts.size() - i)));]