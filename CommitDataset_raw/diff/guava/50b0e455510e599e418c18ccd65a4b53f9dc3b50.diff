[+++ b/android/guava-tests/test/com/google/common/graph/TraverserTest.java, +   * Two disjoint tree-shaped graphs that look as follows (all edges are directed facing downwards):, +   *, +   * <pre>{@code, +   * a   c, +   * |   |, +   * |   |, +   * b   d, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> TWO_TREES = createDirectedGraph("ab", "cd");, +, +  /**, +  @Test, +  public void forGraph_breadthFirst_twoTrees() {, +    Iterable<Character> result = Traverser.forGraph(TWO_TREES).breadthFirst('a');, +, +    assertEqualCharNodes(result, "ab");, +  }, +, +  @Test, +  public void forGraph_breadthFirst_emptyGraph() {, +    try {, +      Traverser.forGraph(createDirectedGraph()).breadthFirst('a');, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b');, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b');, +  public void forGraph_depthFirstPreOrder_twoTrees() {, +    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(result, "ab");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_emptyGraph() {, +    try {, +      Traverser.forGraph(createDirectedGraph()).depthFirstPreOrder('a');, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');, +  public void forGraph_depthFirstPostOrder_twoTrees() {, +    Iterable<Character> result = Traverser.forGraph(TWO_TREES).depthFirstPostOrder('a');, +, +    assertEqualCharNodes(result, "ba");, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_emptyGraph() {, +    try {, +      Traverser.forGraph(createDirectedGraph()).depthFirstPostOrder('a');, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'd');, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'd', 'd');, +  public void forTree_breadthFirst_twoTrees() {, +    Iterable<Character> result = Traverser.forTree(TWO_TREES).breadthFirst('a');, +, +    assertEqualCharNodes(result, "ab");, +  }, +, +  @Test, +  public void forTree_breadthFirst_emptyGraph() {, +    try {, +      Traverser.forTree(createDirectedGraph()).breadthFirst('a');, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test, +    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'd');, +    assertThat(graph.requestedNodes).containsExactly('h', 'h', 'h', 'd', 'd');, +  public void forTree_depthFirstPreOrder_twoTrees() {, +    Iterable<Character> result = Traverser.forTree(TWO_TREES).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(result, "ab");, +  }, +, +  @Test, +  public void forTree_depthFirstPreOrder_emptyGraph() {, +    try {, +      Traverser.forTree(createDirectedGraph()).depthFirstPreOrder('a');, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +]