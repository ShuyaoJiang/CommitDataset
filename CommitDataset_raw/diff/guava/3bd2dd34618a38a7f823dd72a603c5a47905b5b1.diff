[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +import com.google.common.math.LongMath;, +import java.math.RoundingMode;, +  public void testSize() {, +    double fpp = 0.03;, +    for (int i = 1; i < 10000; i++) {, +      long numBits = BloomFilter.optimalNumOfBits(i, fpp);, +      int arraySize = Ints.checkedCast(LongMath.divide(numBits, 64, RoundingMode.CEILING));, +      assertEquals(, +          arraySize * Long.SIZE,, +          BloomFilter.create(Funnels.stringFunnel(), i, fpp).size());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +import com.google.common.math.LongMath;, +import java.math.RoundingMode;, +  public void testSize() {, +    double fpp = 0.03;, +    for (int i = 1; i < 10000; i++) {, +      long numBits = BloomFilter.optimalNumOfBits(i, fpp);, +      int arraySize = Ints.checkedCast(LongMath.divide(numBits, 64, RoundingMode.CEILING));, +      assertEquals(, +          arraySize * Long.SIZE,, +          BloomFilter.create(Funnels.stringFunnel(), i, fpp).size());, +    }, +  }, +, +++ b/guava/src/com/google/common/hash/BloomFilter.java, +    return Math.pow((double) bits.bitCount() / size(), numHashFunctions);, +   * Returns the size of the underlying bit array., +   *, +   * @since 15.0, +  public long size() {, +    return bits.size();, +    checkArgument(this.size() == that.size(),, +        this.size(), that.size());]