[+++ b/test/com/google/common/base/CaseFormatTest.java, +/*, + * Copyright (C) 2006 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import static com.google.common.base.CaseFormat.LOWER_CAMEL;, +import static com.google.common.base.CaseFormat.LOWER_HYPHEN;, +import static com.google.common.base.CaseFormat.LOWER_UNDERSCORE;, +import static com.google.common.base.CaseFormat.UPPER_CAMEL;, +import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;, +, +import junit.framework.TestCase;, +, +/**, + * Unit test for {@link CaseFormat}., + *, + * @author Mike Bostock, + */, +public class CaseFormatTest extends TestCase {, +, +  public void testIdentity() {, +    for (CaseFormat from : CaseFormat.values()) {, +      assertSame(from + " to " + from, "foo", from.to(from, "foo"));, +      for (CaseFormat to : CaseFormat.values()) {, +        assertEquals(from + " to " + to, "", from.to(to, ""));, +        assertEquals(from + " to " + to, " ", from.to(to, " "));, +      }, +    }, +  }, +, +  public void testNullPointer() {, +    try {, +      LOWER_CAMEL.to(null, "");, +      fail();, +    } catch (NullPointerException expected) {}, +    try {, +      LOWER_CAMEL.to(LOWER_HYPHEN, null);, +      fail();, +    } catch (NullPointerException expected) {}, +  }, +, +  public void testLowerHyphenToLowerHyphen() {, +    assertEquals("foo", LOWER_HYPHEN.to(LOWER_HYPHEN, "foo"));, +    assertEquals("foo-bar", LOWER_HYPHEN.to(LOWER_HYPHEN, "foo-bar"));, +  }, +, +  public void testLowerHyphenToLowerUnderscore() {, +    assertEquals("foo", LOWER_HYPHEN.to(LOWER_UNDERSCORE, "foo"));, +    assertEquals("foo_bar", LOWER_HYPHEN.to(LOWER_UNDERSCORE, "foo-bar"));, +  }, +, +  public void testLowerHyphenToLowerCamel() {, +    assertEquals("foo", LOWER_HYPHEN.to(LOWER_CAMEL, "foo"));, +    assertEquals("fooBar", LOWER_HYPHEN.to(LOWER_CAMEL, "foo-bar"));, +  }, +, +  public void testLowerHyphenToUpperCamel() {, +    assertEquals("Foo", LOWER_HYPHEN.to(UPPER_CAMEL, "foo"));, +    assertEquals("FooBar", LOWER_HYPHEN.to(UPPER_CAMEL, "foo-bar"));, +  }, +, +  public void testLowerHyphenToUpperUnderscore() {, +    assertEquals("FOO", LOWER_HYPHEN.to(UPPER_UNDERSCORE, "foo"));, +    assertEquals("FOO_BAR", LOWER_HYPHEN.to(UPPER_UNDERSCORE, "foo-bar"));, +  }, +, +  public void testLowerUnderscoreToLowerHyphen() {, +    assertEquals("foo", LOWER_UNDERSCORE.to(LOWER_HYPHEN, "foo"));, +    assertEquals("foo-bar", LOWER_UNDERSCORE.to(LOWER_HYPHEN, "foo_bar"));, +  }, +, +  public void testLowerUnderscoreToLowerUnderscore() {, +    assertEquals("foo", LOWER_UNDERSCORE.to(LOWER_UNDERSCORE, "foo"));, +    assertEquals("foo_bar", LOWER_UNDERSCORE.to(LOWER_UNDERSCORE, "foo_bar"));, +  }, +, +  public void testLowerUnderscoreToLowerCamel() {, +    assertEquals("foo", LOWER_UNDERSCORE.to(LOWER_CAMEL, "foo"));, +    assertEquals("fooBar", LOWER_UNDERSCORE.to(LOWER_CAMEL, "foo_bar"));, +  }, +, +  public void testLowerUnderscoreToUpperCamel() {, +    assertEquals("Foo", LOWER_UNDERSCORE.to(UPPER_CAMEL, "foo"));, +    assertEquals("FooBar", LOWER_UNDERSCORE.to(UPPER_CAMEL, "foo_bar"));, +  }, +]