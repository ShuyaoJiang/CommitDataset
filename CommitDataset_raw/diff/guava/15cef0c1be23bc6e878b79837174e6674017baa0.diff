[+++ b/guava-tests/test/com/google/common/math/BigIntegerMathTest.java, +        BigIntegerMath.log2(BigInteger.valueOf(-1), mode);, +        BigIntegerMath.log10(BigInteger.valueOf(-1), mode);, +        BigIntegerMath.sqrt(BigInteger.valueOf(-1), mode);, +    for (int i = 1; i <= 200; i++) {, +      BigIntegerMath.factorial(-1);, +++ b/guava-tests/test/com/google/common/math/BigIntegerMathTest.java, +        BigIntegerMath.log2(BigInteger.valueOf(-1), mode);, +        BigIntegerMath.log10(BigInteger.valueOf(-1), mode);, +        BigIntegerMath.sqrt(BigInteger.valueOf(-1), mode);, +    for (int i = 1; i <= 200; i++) {, +      BigIntegerMath.factorial(-1);, +++ b/guava-tests/test/com/google/common/math/MathTesting.java, +  static final ImmutableList<Integer> EXPONENTS = ImmutableList.of(0, 1, 2, 3, 4, 7, 10, 15,, +      20, 25, 40, 70);, +    // Add values up to 40. This covers cases like "square of a prime" and such., +    for (int i = 1; i <= 40; i++) {, +    for (int exponent : asList(2, 3, 4, 9, 15, 16, 17, 24, 25, 30)) {, +    NEGATIVE_INTEGER_CANDIDATES = ImmutableList.copyOf(Iterables.concat(, +        Iterables.transform(POSITIVE_INTEGER_CANDIDATES, NEGATE_INT),, +        ImmutableList.of(Integer.MIN_VALUE)));, +    NONZERO_INTEGER_CANDIDATES = ImmutableList.copyOf(, +        Iterables.concat(POSITIVE_INTEGER_CANDIDATES, NEGATIVE_INTEGER_CANDIDATES));]