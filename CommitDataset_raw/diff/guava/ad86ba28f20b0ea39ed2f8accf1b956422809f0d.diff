[+++ b/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java, +import java.util.Arrays;, +    MessageDigest digest = MessageDigest.getInstance(algorithmName);, +        HashCodes.fromBytes(digest.digest(input)),, +    for (int bytes = 4; bytes <= digest.getDigestLength(); bytes++) {, +      assertEquals(, +          HashCodes.fromBytes(Arrays.copyOf(digest.digest(input), bytes)),, +          new MessageDigestHashFunction(algorithmName, bytes).hashBytes(input));, +    }, +    try {, +      int maxSize = digest.getDigestLength();, +      new MessageDigestHashFunction(algorithmName, maxSize + 1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +++ b/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java, +import java.util.Arrays;, +    MessageDigest digest = MessageDigest.getInstance(algorithmName);, +        HashCodes.fromBytes(digest.digest(input)),, +    for (int bytes = 4; bytes <= digest.getDigestLength(); bytes++) {, +      assertEquals(, +          HashCodes.fromBytes(Arrays.copyOf(digest.digest(input), bytes)),, +          new MessageDigestHashFunction(algorithmName, bytes).hashBytes(input));, +    }, +    try {, +      int maxSize = digest.getDigestLength();, +      new MessageDigestHashFunction(algorithmName, maxSize + 1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +++ b/guava/src/com/google/common/hash/MessageDigestHashFunction.java, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +import java.util.Arrays;, +  private final int bytes;, +    this.algorithmName = checkNotNull(algorithmName);, +    this.bytes = getMessageDigestLength(algorithmName);, +  }, +, +  MessageDigestHashFunction(String algorithmName, int bytes) {, +    int maxLength = getMessageDigestLength(algorithmName);, +    checkArgument(bytes >= 4 && bytes <= maxLength,, +        "bytes (%s) must be >= 4 and < %s", bytes, maxLength);, +    this.algorithmName = checkNotNull(algorithmName);, +    this.bytes = bytes;, +    return bytes * Byte.SIZE;, +  }, +, +  private static int getMessageDigestLength(String algorithmName) {, +    return getMessageDigest(algorithmName).getDigestLength();, +    return new MessageDigestHasher(getMessageDigest(algorithmName), bytes);, +    private final int bytes;, +    private MessageDigestHasher(MessageDigest digest, int bytes) {, +      this.bytes = bytes;, +      return (bytes == digest.getDigestLength()), +          ? HashCodes.fromBytesNoCopy(digest.digest()), +          : HashCodes.fromBytesNoCopy(Arrays.copyOf(digest.digest(), bytes));]