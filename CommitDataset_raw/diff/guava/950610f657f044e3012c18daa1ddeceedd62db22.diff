[+++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type unused =, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type unused =, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +    TypeToken<?> unused = superType.getSubtype(subType.getRawType());, +    TypeToken<?> unused = new TypeToken<BaseWithTypeVar<List<?>>>() {}.getSubtype(Outer.Sub2.class);, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type unused =, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +    TypeToken<?> unused = superType.getSubtype(subType.getRawType());, +    TypeToken<?> unused = new TypeToken<BaseWithTypeVar<List<?>>>() {}.getSubtype(Outer.Sub2.class);, +  @CanIgnoreReturnValue, +++ b/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +   * @deprecated unsupported operation, +  @CanIgnoreReturnValue, +  @Deprecated, +   * @deprecated unsupported operation, +  @CanIgnoreReturnValue, +  @Deprecated, +  /**, +   * Guaranteed to throw an exception and leave the map unmodified., +   *, +   * @deprecated unsupported operation, +   * @throws UnsupportedOperationException always, +   */, +  @CanIgnoreReturnValue, +  @Deprecated, +  @Override public B put(TypeToken<? extends B> key, B value) {, +    throw new UnsupportedOperationException();, +  }, +, +  /**, +   * Guaranteed to throw an exception and leave the map unmodified., +   *, +   * @deprecated unsupported operation, +   * @throws UnsupportedOperationException always, +   */, +  @Deprecated, +  @Override public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) {, +    throw new UnsupportedOperationException();, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type unused =, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +    TypeToken<?> unused = superType.getSubtype(subType.getRawType());, +    TypeToken<?> unused = new TypeToken<BaseWithTypeVar<List<?>>>() {}.getSubtype(Outer.Sub2.class);, +  @CanIgnoreReturnValue, +++ b/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +   * @deprecated unsupported operation, +  @CanIgnoreReturnValue, +  @Deprecated, +   * @deprecated unsupported operation, +  @CanIgnoreReturnValue, +  @Deprecated, +  /**, +   * Guaranteed to throw an exception and leave the map unmodified., +   *, +   * @deprecated unsupported operation, +   * @throws UnsupportedOperationException always, +   */, +  @CanIgnoreReturnValue, +  @Deprecated, +  @Override public B put(TypeToken<? extends B> key, B value) {, +    throw new UnsupportedOperationException();, +  }, +, +  /**, +   * Guaranteed to throw an exception and leave the map unmodified., +   *, +   * @deprecated unsupported operation, +   * @throws UnsupportedOperationException always, +   */, +  @Deprecated, +  @Override public void putAll(Map<? extends TypeToken<? extends B>, ? extends B> map) {, +    throw new UnsupportedOperationException();, +  }, +, +++ b/guava/src/com/google/common/reflect/Invokable.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    Type unused =, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +    TypeToken<?> unused = superType.getSubtype(subType.getRawType());, +    TypeToken<?> unused = new TypeToken<BaseWithTypeVar<List<?>>>() {}.getSubtype(Outer.Sub2.class);, +  @CanIgnoreReturnValue, +++ b/guava/src/com/google/common/reflect/ImmutableTypeToInstanceMap.java]