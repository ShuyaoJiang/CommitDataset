[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * Returns a {@code Future} whose result is taken from the given primary, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,, +   *     AsyncFunction) catchingAsync(input, Throwable.class,, +   *     fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code, +   *     Throwable.class} with the specific type you want to handle. This method, +   *     will be removed in Guava release 20.0., +  @Deprecated, +   * Returns a {@code Future} whose result is taken from the given primary, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,, +   *     AsyncFunction, Executor) catchingAsync(input, Throwable.class,, +   *     fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing, +   *     {@code Throwable.class} with the specific type you want to handle. This method, +   *     will be removed in Guava release 20.0., +  @Deprecated, +   * Returns a new {@code ListenableFuture} whose result is asynchronously, +   * @deprecated These {@code AsyncFunction} overloads of {@code transform} are, +   *     being renamed to {@code transformAsync}. (The {@code Function}, +   *     overloads are keeping the "transform" name.) This method will be removed in Guava release, +   *     20.0., +  @Deprecated, +   * Returns a new {@code ListenableFuture} whose result is asynchronously, +   * @deprecated These {@code AsyncFunction} overloads of {@code transform} are, +   *     being renamed to {@code transformAsync}. (The {@code Function}, +   *     overloads are keeping the "transform" name.) This method will be removed in Guava release, +   *     20.0., +  @Deprecated, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * Returns a {@code Future} whose result is taken from the given primary, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,, +   *     AsyncFunction) catchingAsync(input, Throwable.class,, +   *     fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code, +   *     Throwable.class} with the specific type you want to handle. This method, +   *     will be removed in Guava release 20.0., +  @Deprecated, +   * Returns a {@code Future} whose result is taken from the given primary, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,, +   *     AsyncFunction, Executor) catchingAsync(input, Throwable.class,, +   *     fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing, +   *     {@code Throwable.class} with the specific type you want to handle. This method, +   *     will be removed in Guava release 20.0., +  @Deprecated, +   * Returns a new {@code ListenableFuture} whose result is asynchronously, +   * @deprecated These {@code AsyncFunction} overloads of {@code transform} are, +   *     being renamed to {@code transformAsync}. (The {@code Function}, +   *     overloads are keeping the "transform" name.) This method will be removed in Guava release, +   *     20.0., +  @Deprecated, +   * Returns a new {@code ListenableFuture} whose result is asynchronously, +   * @deprecated These {@code AsyncFunction} overloads of {@code transform} are, +   *     being renamed to {@code transformAsync}. (The {@code Function}, +   *     overloads are keeping the "transform" name.) This method will be removed in Guava release, +   *     20.0., +  @Deprecated, +++ b/guava/src/com/google/common/util/concurrent/FutureFallback.java, + * Provides a backup {@code Future} to replace an earlier failed {@code Future}. An implementation, + * of this interface can be applied to an input {@code Future} with {@link Futures#withFallback}., + * @deprecated This interface's main user, {@link Futures#withFallback(ListenableFuture,, + *     FutureFallback) Futures.withFallback}, has been updated to use {@link AsyncFunction}. We, + *     recommend that other APIs be updated in the same way. This interface will be removed in Guava, + *     release 20.0., +@Deprecated, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * Returns a {@code Future} whose result is taken from the given primary, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,, +   *     AsyncFunction) catchingAsync(input, Throwable.class,, +   *     fallbackImplementedAsAnAsyncFunction)}, usually replacing {@code, +   *     Throwable.class} with the specific type you want to handle. This method, +   *     will be removed in Guava release 20.0., +  @Deprecated, +   * Returns a {@code Future} whose result is taken from the given primary, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,, +   *     AsyncFunction, Executor) catchingAsync(input, Throwable.class,, +   *     fallbackImplementedAsAnAsyncFunction, executor)}, usually replacing, +   *     {@code Throwable.class} with the specific type you want to handle. This method, +   *     will be removed in Guava release 20.0., +  @Deprecated, +   * Returns a new {@code ListenableFuture} whose result is asynchronously, +   * @deprecated These {@code AsyncFunction} overloads of {@code transform} are, +   *     being renamed to {@code transformAsync}. (The {@code Function}, +   *     overloads are keeping the "transform" name.) This method will be removed in Guava release, +   *     20.0., +  @Deprecated, +   * Returns a new {@code ListenableFuture} whose result is asynchronously, +   * @deprecated These {@code AsyncFunction} overloads of {@code transform} are, +   *     being renamed to {@code transformAsync}. (The {@code Function}, +   *     overloads are keeping the "transform" name.) This method will be removed in Guava release, +   *     20.0., +  @Deprecated, +++ b/guava/src/com/google/common/util/concurrent/FutureFallback.java, + * Provides a backup {@code Future} to replace an earlier failed {@code Future}. An implementation, + * of this interface can be applied to an input {@code Future} with {@link Futures#withFallback}., + * @deprecated This interface's main user, {@link Futures#withFallback(ListenableFuture,, + *     FutureFallback) Futures.withFallback}, has been updated to use {@link AsyncFunction}. We, + *     recommend that other APIs be updated in the same way. This interface will be removed in Guava, + *     release 20.0., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * Returns a {@code Future} whose result is taken from the given primary, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class,]