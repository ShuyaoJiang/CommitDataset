[+++ b/guava-gwt/src/com/google/common/math/Math.gwt.xml, +<module>, +    <source path=""/>, +    <inherits name="com.google.common.annotations.Annotations"/>, +    <inherits name="com.google.common.base.Base"/>, +</module>, +++ b/guava-gwt/src/com/google/common/math/Math.gwt.xml, +<module>, +    <source path=""/>, +    <inherits name="com.google.common.annotations.Annotations"/>, +    <inherits name="com.google.common.base.Base"/>, +</module>, +++ b/guava-tests/test/com/google/common/math/BigIntegerMathTest.java, +// Copyright 2011 Google Inc. All Rights Reserved., +, +package com.google.common.math;, +, +import static com.google.common.math.MathTesting.ALL_BIGINTEGER_CANDIDATES;, +import static com.google.common.math.MathTesting.ALL_ROUNDING_MODES;, +import static com.google.common.math.MathTesting.ALL_SAFE_ROUNDING_MODES;, +import static com.google.common.math.MathTesting.NEGATIVE_BIGINTEGER_CANDIDATES;, +import static com.google.common.math.MathTesting.NEGATIVE_INTEGER_CANDIDATES;, +import static com.google.common.math.MathTesting.NONZERO_BIGINTEGER_CANDIDATES;, +import static com.google.common.math.MathTesting.POSITIVE_BIGINTEGER_CANDIDATES;, +import static java.math.BigInteger.ONE;, +import static java.math.BigInteger.TEN;, +import static java.math.BigInteger.ZERO;, +import static java.math.RoundingMode.CEILING;, +import static java.math.RoundingMode.DOWN;, +import static java.math.RoundingMode.FLOOR;, +import static java.math.RoundingMode.HALF_DOWN;, +import static java.math.RoundingMode.HALF_EVEN;, +import static java.math.RoundingMode.HALF_UP;, +import static java.math.RoundingMode.UNNECESSARY;, +import static java.math.RoundingMode.UP;, +import static java.util.Arrays.asList;, +, +import com.google.common.testing.NullPointerTester;, +, +import junit.framework.TestCase;, +, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.math.RoundingMode;, +, +/**, + * Tests for BigIntegerMath., + *, + * @author Louis Wasserman, + */, +public class BigIntegerMathTest extends TestCase {, +  public void testConstantSqrt2PrecomputedBits() {, +    assertEquals(BigIntegerMath.sqrt(, +        BigInteger.ZERO.setBit(2 * BigIntegerMath.SQRT2_PRECOMPUTE_THRESHOLD + 1), FLOOR),, +        BigIntegerMath.SQRT2_PRECOMPUTED_BITS);, +  }, +  , +  public void testIsPowerOfTwo() {, +    for (BigInteger x : ALL_BIGINTEGER_CANDIDATES) {, +      // Checks for a single bit set., +      boolean expected = x.signum() > 0 & x.and(x.subtract(ONE)).equals(ZERO);, +      assertEquals(expected, BigIntegerMath.isPowerOfTwo(x));, +    }, +  }, +, +  public void testLog2ZeroAlwaysThrows() {, +    for (RoundingMode mode : ALL_ROUNDING_MODES) {, +      try {, +        BigIntegerMath.log2(ZERO, mode);, +        fail("Expected IllegalArgumentException");, +      } catch (IllegalArgumentException expected) {}, +    }, +  }, +, +  public void testLog2NegativeAlwaysThrows() {, +    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {, +      for (RoundingMode mode : ALL_ROUNDING_MODES) {, +        try {, +          BigIntegerMath.log2(x.negate(), mode);, +          fail("Expected IllegalArgumentException");, +        } catch (IllegalArgumentException expected) {}, +      }, +    }, +  }, +, +  public void testLog2Floor() {, +    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {, +      for (RoundingMode mode : asList(FLOOR, DOWN)) {, +        int result = BigIntegerMath.log2(x, mode);, +        assertTrue(ZERO.setBit(result).compareTo(x) <= 0);, +        assertTrue(ZERO.setBit(result + 1).compareTo(x) > 0);, +      }, +    }, +  }, +, +  public void testLog2Ceiling() {, +    for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {, +      for (RoundingMode mode : asList(CEILING, UP)) {, +        int result = BigIntegerMath.log2(x, mode);, +        assertTrue(ZERO.setBit(result).compareTo(x) >= 0);]