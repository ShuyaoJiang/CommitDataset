[+++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +    assertSame(range, reserializeAndAssert(range));, +    assertSame(range, Range.all());, +++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +    assertSame(range, reserializeAndAssert(range));, +    assertSame(range, Range.all());, +++ b/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +  private static final ImmutableList<Range<Integer>> QUERY_RANGES;, +, +  static {, +    ImmutableList.Builder<Range<Integer>> queryBuilder = ImmutableList.builder();, +, +    queryBuilder.add(Range.<Integer>all());, +, +    for (int i = 0; i <= 4; i++) {, +      for (BoundType boundType : BoundType.values()) {, +        queryBuilder.add(Range.upTo(i, boundType));, +        queryBuilder.add(Range.downTo(i, boundType));, +      }, +      queryBuilder.add(Range.singleton(i));, +      queryBuilder.add(Range.openClosed(i, i));, +      queryBuilder.add(Range.closedOpen(i, i));, +, +      for (BoundType lowerBoundType : BoundType.values()) {, +        for (int j = i + 1; j <= 4; j++) {, +          for (BoundType upperBoundType : BoundType.values()) {, +            queryBuilder.add(Range.range(i, lowerBoundType, j, upperBoundType));, +          }, +        }, +      }, +    }, +    QUERY_RANGES = queryBuilder.build();, +  }, +, +  public void testEnclosing(RangeSet<Integer> rangeSet) {, +    for (Range<Integer> query : QUERY_RANGES) {, +      boolean expectEnclose = false;, +      for (Range<Integer> expectedRange : rangeSet.asRanges()) {, +        if (expectedRange.encloses(query)) {, +          expectEnclose = true;, +          break;, +        }, +      }, +, +      assertEquals(rangeSet + " was incorrect on encloses(" + query + ")", expectEnclose,, +          rangeSet.encloses(query));, +    }, +  }, +, +  public void testAllSingleRangesComplementAgainstRemove() {, +    for (Range<Integer> range : QUERY_RANGES) {, +      TreeRangeSet<Integer> rangeSet = TreeRangeSet.create();, +      rangeSet.add(range);, +, +      TreeRangeSet<Integer> complement = TreeRangeSet.create();, +      complement.add(Range.<Integer>all());, +      complement.remove(range);, +, +      assertEquals(complement, rangeSet.complement());, +      ASSERT.that(rangeSet.complement().asRanges()), +          .hasContentsInOrder(complement.asRanges().toArray());, +    }, +  }, +, +  public void testAllSingleRangesEnclosing() {, +    for (Range<Integer> range : QUERY_RANGES) {, +      TreeRangeSet<Integer> rangeSet = TreeRangeSet.create();, +      rangeSet.add(range);, +      testEnclosing(rangeSet);, +      testEnclosing(rangeSet.complement());, +    }, +  }, +, +  public void testAllTwoRangesEnclosing() {, +    for (Range<Integer> range1 : QUERY_RANGES) {, +      for (Range<Integer> range2 : QUERY_RANGES) {, +        TreeRangeSet<Integer> rangeSet = TreeRangeSet.create();, +        rangeSet.add(range1);, +        rangeSet.add(range2);, +        testEnclosing(rangeSet);, +        testEnclosing(rangeSet.complement());, +      }, +    }, +  }, +, +    ASSERT.that(rangeSet.complement().asRanges()), +        .hasContentsInOrder(Range.lessThan(1), Range.atLeast(6));, +    ASSERT.that(rangeSet.complement().asRanges()), +        .hasContentsInOrder(Range.lessThan(1), Range.atLeast(6));, +    ASSERT.that(rangeSet.complement().asRanges()), +        .hasContentsInOrder(Range.lessThan(1), Range.greaterThan(6));, +    ASSERT.that(rangeSet.complement().asRanges()), +        .hasContentsInOrder(Range.lessThan(1), Range.greaterThan(6));, +    ASSERT.that(rangeSet.complement().asRanges()), +        .hasContentsInOrder(Range.lessThan(1), Range.greaterThan(6));, +    ASSERT.that(rangeSet.complement().asRanges())]