[+++ b/guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java, +public void testWhenAllComplete_wildcard() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testWhenAllComplete_wildcard();, +  } catch (Throwable t) {, +    failure = t;, +  }, +  try {, +    testCase.tearDown();, +  } catch (Throwable t) {, +    if (failure == null) {, +      failure = t;, +    }, +  }, +  if (failure instanceof Exception) {, +    throw (Exception) failure;, +  }, +  if (failure instanceof Error) {, +    throw (Error) failure;, +  }, +  if (failure != null) {, +    throw new RuntimeException(failure);, +  }, +}, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java, +public void testWhenAllComplete_wildcard() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testWhenAllComplete_wildcard();, +  } catch (Throwable t) {, +    failure = t;, +  }, +  try {, +    testCase.tearDown();, +  } catch (Throwable t) {, +    if (failure == null) {, +      failure = t;, +    }, +  }, +  if (failure instanceof Exception) {, +    throw (Exception) failure;, +  }, +  if (failure instanceof Error) {, +    throw (Error) failure;, +  }, +  if (failure != null) {, +    throw new RuntimeException(failure);, +  }, +}, +, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  public void testWhenAllComplete_wildcard() throws Exception {, +    ListenableFuture<?> futureA = immediateFuture("a");, +    ListenableFuture<?> futureB = immediateFuture("b");, +    ListenableFuture<?>[] futures = new ListenableFuture<?>[0];, +    Callable<String> combiner = new Callable<String>() {, +      @Override, +      public String call() throws Exception {, +        return "hi";, +      }, +    };, +, +    // We'd like for all the following to compile., +    ListenableFuture<String> unused;, +, +    // Compiles:, +    unused = whenAllComplete(futureA, futureB).call(combiner);, +, +    // Does not compile:, +    // unused = whenAllComplete(futures).call(combiner);, +, +    // Workaround for the above:, +    unused = whenAllComplete(asList(futures)).call(combiner);, +  }, +]