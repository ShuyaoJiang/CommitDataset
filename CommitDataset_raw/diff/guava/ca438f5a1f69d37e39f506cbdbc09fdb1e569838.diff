[+++ b/android/guava-tests/test/com/google/common/graph/TraverserTest.java, +import static com.google.common.base.Preconditions.checkNotNull;, +  public void forGraph_breadthFirst_javadocExample_canBeIteratedMultipleTimes() {, +    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);, +    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst('a');, +    assertEqualCharNodes(Iterables.limit(result, 2), "ab");, +    assertThat(graph.requestedNodes).containsExactly('a', 'b');, +    assertEqualCharNodes(Iterables.limit(result, 2), "ab");, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b');, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_javadocExample_canBeIteratedMultipleTimes() {, +    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(result, "abecfd");, +    assertEqualCharNodes(result, "abecfd");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_diamond() {, +    Traverser<Character> traverser = Traverser.forGraph(DIAMOND_GRAPH);, +    assertEqualCharNodes(traverser.depthFirstPreOrder('a'), "abdc");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('b'), "bd");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('c'), "cd");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('d'), "d");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_multigraph() {, +    Traverser<Character> traverser = Traverser.forGraph(MULTI_GRAPH);, +    assertEqualCharNodes(traverser.depthFirstPreOrder('a'), "abdc");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('b'), "bd");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('c'), "cabd");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('d'), "d");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_cycle() {, +    Traverser<Character> traverser = Traverser.forGraph(CYCLE_GRAPH);, +    assertEqualCharNodes(traverser.depthFirstPreOrder('a'), "abcd");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('b'), "bcda");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('c'), "cdab");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('d'), "dabc");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_twoCycles() {, +    Traverser<Character> traverser = Traverser.forGraph(TWO_CYCLES_GRAPH);, +    assertEqualCharNodes(traverser.depthFirstPreOrder('a'), "abcd");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('b'), "bcda");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('c'), "cdab");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('d'), "dabc");, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrder_iterableIsLazy() {, +    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);, +    Iterable<Character> result = Traverser.forGraph(graph).depthFirstPreOrder('a');, +, +    assertEqualCharNodes(Iterables.limit(result, 2), "ab");, +    assertThat(graph.requestedNodes).containsExactly('a', 'b', 'd');, +, +    // Iterate again to see if calculation is done again, +    assertEqualCharNodes(Iterables.limit(result, 2), "ab");, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b', 'd', 'd');, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_javadocExample_canBeIteratedMultipleTimes() {, +    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).depthFirstPostOrder('a');, +, +    assertEqualCharNodes(result, "fcebda");, +    assertEqualCharNodes(result, "fcebda");, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_diamond() {, +    Traverser<Character> traverser = Traverser.forGraph(DIAMOND_GRAPH);, +    assertEqualCharNodes(traverser.depthFirstPostOrder('a'), "dbca");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('b'), "db");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('c'), "dc");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('d'), "d");, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_multigraph() {, +    Traverser<Character> traverser = Traverser.forGraph(MULTI_GRAPH);, +    assertEqualCharNodes(traverser.depthFirstPostOrder('a'), "dbca");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('b'), "db");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('c'), "dbac");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('d'), "d");, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_cycle() {, +    Traverser<Character> traverser = Traverser.forGraph(CYCLE_GRAPH);, +    assertEqualCharNodes(traverser.depthFirstPostOrder('a'), "dcba");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('b'), "adcb");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('c'), "badc");]