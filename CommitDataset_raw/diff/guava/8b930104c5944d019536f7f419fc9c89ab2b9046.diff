[+++ b/guava-testlib/pom.xml, +      <version>0.11</version>, +++ b/guava-testlib/pom.xml, +      <version>0.11</version>, +++ b/guava-tests/pom.xml, +      <version>0.11</version>, +++ b/guava-testlib/pom.xml, +      <version>0.11</version>, +++ b/guava-tests/pom.xml, +      <version>0.11</version>, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +    ASSERT.that(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()).isEmpty();, +    ASSERT.that(TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()).isEmpty();, +    ASSERT.that((List) TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()), +        .iteratesAs(new TypeToken<Iterable<String>>() {});, +    ASSERT.that((List) TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()), +        .iteratesAs(TypeToken.of(CharSequence.class), new TypeToken<Iterable<String>>() {});, +    ASSERT.that((List) TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()), +        .iteratesAs(TypeToken.of(CharSequence.class), new TypeToken<Iterable<T>>() {});, +    ASSERT.that((List) TypeToken.of(new TypeCapture<T>() {}.capture()).getGenericInterfaces()), +        .iteratesAs(new TypeToken<Iterable<T>>() {});, +    ASSERT.that(TypeToken.of(new TypeCapture<T2>() {}.capture()).getGenericInterfaces()).isEmpty();, +    ASSERT.that((List) TypeToken.of(new TypeCapture<T2>() {}.capture()).getGenericInterfaces()), +        .iteratesAs(TypeToken.of(new TypeCapture<T1>() {}.capture()));, +    ASSERT.that(TypeToken.of(Types.supertypeOf(String.class)).getGenericInterfaces()).isEmpty();, +    ASSERT.that(TypeToken.of(Types.supertypeOf(String[].class)).getGenericInterfaces()).isEmpty();, +    ASSERT.that(TypeToken.of(Types.subtypeOf(Object.class)).getGenericInterfaces()).isEmpty();, +    ASSERT.that(TypeToken.of(Types.subtypeOf(Object[].class)).getGenericInterfaces()).isEmpty();, +    ASSERT.that((List) TypeToken.of(, +        Types.subtypeOf(interfaceType.getType())).getGenericInterfaces()), +            .iteratesAs(interfaceType);, +    ASSERT.that(new TypeToken<NoInterface>() {}.getGenericInterfaces()).isEmpty();]