[+++ b/guava/src/com/google/common/base/Equivalences.java, +  /**, +   * Returns an equivalence over iterables based on the equivalence of their elements.  More, +   * specifically, two iterables are considered equivalent if they both contain the same number of, +   * elements, and each pair of corresponding elements is equivalent according to, +   * {@code elementEquivalence}.  Null iterables are equivalent to one another., +   *, +   * @since Guava release 09, +   * @deprecated use {@link Equivalence#pairwise}, which behaves exactly the same. <b>This method is, +   *     scheduled for deletion Guava release 11.</b>, +   */, +  @Deprecated, +  @GwtCompatible(serializable = true), +  public, +  static <T> Equivalence<Iterable<T>> pairwise(Equivalence<? super T> elementEquivalence) {, +    /*, +     * Ideally, the returned equivalence would support {@code Iterable<? extends T>}.  However, the, +     * need for this is so rare that it's not worth making callers deal with the ugly wildcard., +     */, +    return new PairwiseEquivalence<T>(elementEquivalence);, +  }, +, +++ b/guava/src/com/google/common/base/Equivalences.java, +  /**, +   * Returns an equivalence over iterables based on the equivalence of their elements.  More, +   * specifically, two iterables are considered equivalent if they both contain the same number of, +   * elements, and each pair of corresponding elements is equivalent according to, +   * {@code elementEquivalence}.  Null iterables are equivalent to one another., +   *, +   * @since Guava release 09, +   * @deprecated use {@link Equivalence#pairwise}, which behaves exactly the same. <b>This method is, +   *     scheduled for deletion Guava release 11.</b>, +   */, +  @Deprecated, +  @GwtCompatible(serializable = true), +  public, +  static <T> Equivalence<Iterable<T>> pairwise(Equivalence<? super T> elementEquivalence) {, +    /*, +     * Ideally, the returned equivalence would support {@code Iterable<? extends T>}.  However, the, +     * need for this is so rare that it's not worth making callers deal with the ugly wildcard., +     */, +    return new PairwiseEquivalence<T>(elementEquivalence);, +  }, +, +++ b/guava/src/com/google/common/collect/EvictionListeners.java, +/*, + * Copyright (C) 2010 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.annotations.Beta;, +, +import java.util.concurrent.Executor;, +, +import javax.annotation.Nullable;, +, +/**, + * A collection of common eviction listeners., + *, + * @author Charles Fry, + * @since Guava release 07, + * @deprecated <b>This class is scheduled for deletion in Guava release 11.</b>, + */, +@Beta, +@Deprecated, +public, +final class EvictionListeners {, +, +  private EvictionListeners() {}, +, +  /**, +   * Returns an asynchronous {@code MapEvictionListener} which processes all, +   * eviction notifications asynchronously, using {@code executor}., +   *, +   * @param listener the backing listener, +   * @param executor the executor with which eviciton notifications are, +   *     asynchronously executed, +   */, +  public static <K, V> MapEvictionListener<K, V> asynchronous(, +      final MapEvictionListener<K, V> listener, final Executor executor) {, +    return new MapEvictionListener<K, V>() {, +      @Override, +      public void onEviction(@Nullable final K key, @Nullable final V value) {, +        executor.execute(new Runnable() {, +          @Override, +          public void run() {, +            listener.onEviction(key, value);]