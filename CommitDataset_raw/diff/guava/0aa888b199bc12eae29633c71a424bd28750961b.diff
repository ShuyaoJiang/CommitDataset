[+++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import com.google.common.collect.Lists;, +import com.google.common.testing.TestLogHandler;, +import java.util.logging.Logger;, +  private static final Logger combinedFutureLogger = Logger.getLogger(, +      "com.google.common.util.concurrent.Futures$CombinedFuture");, +  private final TestLogHandler combinedFutureLogHandler = new TestLogHandler();, +, +    combinedFutureLogger.addHandler(combinedFutureLogHandler);, +    combinedFutureLogger.removeHandler(combinedFutureLogHandler);, +  /**, +   * A single non-error failure is not logged because it is reported via the output future., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_exception() throws Exception {, +    try {, +      Futures.allAsList(immediateFailedFuture(new MyException())).get();, +      fail();, +    } catch (ExecutionException e) {, +      assertTrue(e.getCause() instanceof MyException);, +      assertEquals("Nothing should be logged", 0,, +          combinedFutureLogHandler.getStoredLogRecords().size());, +    }, +  }, +, +  /**, +   * Ensure that errors are always logged., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_error() throws Exception {, +    try {, +      Futures.allAsList(immediateFailedFuture(new MyError())).get();, +      fail();, +    } catch (ExecutionException e) {, +      assertTrue(e.getCause() instanceof MyError);, +      List<LogRecord> logged = combinedFutureLogHandler.getStoredLogRecords();, +      assertEquals(1, logged.size());  // errors are always logged, +      assertTrue(logged.get(0).getThrown() instanceof MyError);, +    }, +  }, +, +  /**, +   * All as list will log extra exceptions that occur after failure., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_multipleExceptions() throws Exception {, +    try {, +      Futures.allAsList(immediateFailedFuture(new MyException()),, +          immediateFailedFuture(new MyException())).get();, +      fail();, +    } catch (ExecutionException e) {, +      assertTrue(e.getCause() instanceof MyException);, +      List<LogRecord> logged = combinedFutureLogHandler.getStoredLogRecords();, +      assertEquals(1, logged.size());  // the second failure is logged, +      assertTrue(logged.get(0).getThrown() instanceof MyException);, +    }, +  }, +, +  /** Non-Error exceptions are never logged. */, +  @SuppressWarnings("unchecked"), +  public void testSuccessfulAsList_logging_exception() throws Exception {, +    assertEquals(Lists.newArrayList((Object) null),, +        Futures.successfulAsList(, +            immediateFailedFuture(new MyException())).get());, +    assertEquals("Nothing should be logged", 0,, +        combinedFutureLogHandler.getStoredLogRecords().size());, +, +    // Not even if there are a bunch of failures., +    assertEquals(Lists.newArrayList(null, null, null),, +        Futures.successfulAsList(, +            immediateFailedFuture(new MyException()),, +            immediateFailedFuture(new MyException()),, +            immediateFailedFuture(new MyException())).get());, +    assertEquals("Nothing should be logged", 0,, +        combinedFutureLogHandler.getStoredLogRecords().size());, +  }, +, +  /**, +   * Ensure that errors are always logged., +   */, +  @SuppressWarnings("unchecked"), +  public void testSuccessfulAsList_logging_error() throws Exception {, +    assertEquals(Lists.newArrayList((Object) null),, +        Futures.successfulAsList(, +            immediateFailedFuture(new MyError())).get());, +    List<LogRecord> logged = combinedFutureLogHandler.getStoredLogRecords();, +    assertEquals(1, logged.size());  // errors are always logged, +    assertTrue(logged.get(0).getThrown() instanceof MyError);, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import com.google.common.collect.Lists;, +import com.google.common.testing.TestLogHandler;, +import java.util.logging.Logger;, +  private static final Logger combinedFutureLogger = Logger.getLogger(, +      "com.google.common.util.concurrent.Futures$CombinedFuture");, +  private final TestLogHandler combinedFutureLogHandler = new TestLogHandler();, +, +    combinedFutureLogger.addHandler(combinedFutureLogHandler);, +    combinedFutureLogger.removeHandler(combinedFutureLogHandler);]