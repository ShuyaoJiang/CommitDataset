[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +import java.util.concurrent.Executor;, +  public void testEvilFuture_setFuture() throws Exception {, +    final RuntimeException exception = new RuntimeException("you didn't say the magic word!");, +    AbstractFuture<String> evilFuture = new AbstractFuture<String>() {, +      @Override public void addListener(Runnable r, Executor e) {, +        throw exception;, +      }, +    };, +    AbstractFuture<String> normalFuture = new AbstractFuture<String>() {};, +    normalFuture.setFuture(evilFuture);, +    assertTrue(normalFuture.isDone());, +    try {, +      normalFuture.get();, +      fail();, +    } catch (ExecutionException e) {, +      assertSame(exception, e.getCause());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +import java.util.concurrent.Executor;, +  public void testEvilFuture_setFuture() throws Exception {, +    final RuntimeException exception = new RuntimeException("you didn't say the magic word!");, +    AbstractFuture<String> evilFuture = new AbstractFuture<String>() {, +      @Override public void addListener(Runnable r, Executor e) {, +        throw exception;, +      }, +    };, +    AbstractFuture<String> normalFuture = new AbstractFuture<String>() {};, +    normalFuture.setFuture(evilFuture);, +    assertTrue(normalFuture.isDone());, +    try {, +      normalFuture.get();, +      fail();, +    } catch (ExecutionException e) {, +      assertSame(exception, e.getCause());, +    }, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    static final Failure FALLBACK_INSTANCE = new Failure(, +        new Throwable("Failure occurred while trying to finish a future.") {, +          @Override public synchronized Throwable fillInStackTrace() {, +            return this;  // no stack trace, +          }, +        });, +      try {, +      } catch (Throwable t) {, +        // addListener has thrown an exception!  SetFuture.run can't throw any exceptions so this, +        // must have been caused by addListener itself.  The most likely explanation is a, +        // misconfigured mock.  Try to switch to Failure., +        Failure failure;, +        try {, +          failure = new Failure(t);, +        } catch (Throwable oomMostLikely) {, +          failure = Failure.FALLBACK_INSTANCE;, +        }, +        // Note: The only way this CAS could fail is if cancel() has raced with us. That is ok., +        ATOMIC_HELPER.casValue(this, valueToSet, failure);, +      }]