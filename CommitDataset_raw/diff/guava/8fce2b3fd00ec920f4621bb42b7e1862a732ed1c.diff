[+++ b/guava-tests/test/com/google/common/base/JoinerTest.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Iterators;, +import java.util.Iterator;, +  private static final Joiner J = Joiner.on("-");, +  private static final Iterable<Integer> ITERABLE_ = Arrays.<Integer>asList();, +  private static final Iterable<Integer> ITERABLE_1 = Arrays.asList(1);, +  private static final Iterable<Integer> ITERABLE_12 = Arrays.asList(1, 2);, +  private static final Iterable<Integer> ITERABLE_123 = Arrays.asList(1, 2, 3);, +  private static final Iterable<Integer> ITERABLE_NULL = Arrays.asList((Integer) null);, +  private static final Iterable<Integer> ITERABLE_NULL_NULL, +  private static final Iterable<Integer> ITERABLE_NULL_1 = Arrays.asList(null, 1);, +  private static final Iterable<Integer> ITERABLE_1_NULL = Arrays.asList(1, null);, +  private static final Iterable<Integer> ITERABLE_1_NULL_2 = Arrays.asList(1, null, 2);, +  private static final Iterable<Integer> ITERABLE_FOUR_NULLS, +, +    try {, +      J.join(ITERABLE_NULL.iterator());, +      fail();, +    } catch (NullPointerException expected) {, +    }, +    try {, +      J.join(ITERABLE_1_NULL_2.iterator());, +      fail();, +    } catch (NullPointerException expected) {, +    }, +    assertEquals("", joiner.join(set.iterator()));, +, +    Object[] array = Lists.newArrayList(set).toArray(new Integer[0]);, +    StringBuilder sb1FromIterable = new StringBuilder();, +    assertSame(sb1FromIterable, joiner.appendTo(sb1FromIterable, set));, +    assertEquals(0, sb1FromIterable.length());, +, +    StringBuilder sb1FromIterator = new StringBuilder();, +    assertSame(sb1FromIterator, joiner.appendTo(sb1FromIterator, set));, +    assertEquals(0, sb1FromIterator.length());, +    } catch (IOException e) {, +      throw new AssertionError(e);, +    }, +, +    try {, +      joiner.appendTo(NASTY_APPENDABLE, set.iterator());, +    } catch (IOException e) {, +      throw new AssertionError(e);, +    }, +, +    try {, +    public Appendable append(CharSequence csq, int start, int end) throws IOException {, +  private static void checkResult(Joiner joiner, Iterable<Integer> parts, String expected) {, +    assertEquals(expected, joiner.join(parts.iterator()));, +, +    StringBuilder sb1FromIterable = new StringBuilder().append('x');, +    joiner.appendTo(sb1FromIterable, parts);, +    assertEquals("x" + expected, sb1FromIterable.toString());, +, +    StringBuilder sb1FromIterator = new StringBuilder().append('x');, +    joiner.appendTo(sb1FromIterator, parts.iterator());, +    assertEquals("x" + expected, sb1FromIterator.toString());, +, +    Integer[] partsArray = Lists.newArrayList(parts).toArray(new Integer[0]);, +    assertEquals(expected, joiner.join(partsArray));, +, +    StringBuilder sb2 = new StringBuilder().append('x');, +    joiner.appendTo(sb2, partsArray);, +    assertEquals("x" + expected, sb2.toString());, +, +    int num = partsArray.length - 2;, +    if (num >= 0) {, +      Object[] rest = new Integer[num];, +      for (int i = 0; i < num; i++) {, +        rest[i] = partsArray[i + 2];, +      }, +, +      assertEquals(expected, joiner.join(partsArray[0], partsArray[1], rest));, +, +      StringBuilder sb3 = new StringBuilder().append('x');, +      joiner.appendTo(sb3, partsArray[0], partsArray[1], rest);, +      assertEquals("x" + expected, sb3.toString());, +    }, +  }, +, +  public void testIterableIterator() {, +    Joiner onChar = Joiner.on('-');, +    checkIterableIterator(onChar, "1-2-3-4");, +, +    Joiner skipNulls = J.skipNulls();, +    checkIterableIterator(skipNulls, "1-2-3-4");, +, +    Joiner zeroForNull = J.useForNull("0");, +    checkIterableIterator(zeroForNull, "1-2-3-4");, +  }, +  , +  private static void checkIterableIterator(Joiner joiner, String expected) {, +    assertEquals(expected, joiner.join(new IterableIterator()));, +    joiner.appendTo(sb1, new IterableIterator());, +    Integer[] partsArray =, +        Lists.newArrayList(new IterableIterator().iterator()).toArray(new Integer[0]);, +    assertEquals("", j.join(ImmutableMultimap.of().entries().iterator()));, +    assertEquals(":", j.join(ImmutableMultimap.of("", "").entries().iterator()));, +    assertEquals("1:a;1:b", j.join(ImmutableMultimap.of("1", "a", "1", "b").entries().iterator()));]