[+++ b/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Iterables;, +import com.google.common.collect.testing.TestMapGenerator;, +      return new SampleElements<>(, +      EnumMap<AnEnum, String> map = new EnumMap<>(AnEnum.class);, +  public static class ImmutableMapValuesAsSingletonSetGenerator, +      implements TestMapGenerator<String, Collection<Integer>> {, +, +    @Override, +    public SampleElements<Entry<String, Collection<Integer>>> samples() {, +      return new SampleElements<>(, +          mapEntry("one", ImmutableSet.of(10000)),, +          mapEntry("two", ImmutableSet.of(-2000)),, +          mapEntry("three", ImmutableSet.of(300)),, +          mapEntry("four", ImmutableSet.of(-40)),, +          mapEntry("five", ImmutableSet.of(5)));, +    }, +, +    @Override, +    public Map<String, Collection<Integer>> create(Object... elements) {, +      ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();, +      // assumes that each set is a singleton or less (as is done for the samples), +      for (Object elem : elements) {, +        @SuppressWarnings("unchecked") // safe by generator contract, +        Entry<String, Collection<Integer>> entry = (Entry<String, Collection<Integer>>) elem;, +        Integer value = Iterables.getOnlyElement(entry.getValue());, +        builder.put(entry.getKey(), value);, +      }, +      return builder.build().asMultimap().asMap();, +    }, +, +    @Override, +    @SuppressWarnings({"unchecked", "rawtypes"}) // needed for arrays, +    public Entry<String, Collection<Integer>>[] createArray(int length) {, +      return new Entry[length];, +    }, +, +    @Override, +    public Iterable<Entry<String, Collection<Integer>>> order(, +        List<Entry<String, Collection<Integer>>> insertionOrder) {, +      return insertionOrder;, +    }, +, +    @Override, +    public String[] createKeyArray(int length) {, +      return new String[length];, +    }, +, +    @Override, +    @SuppressWarnings({"unchecked", "rawtypes"}) // needed for arrays, +    public ImmutableSet<Integer>[] createValueArray(int length) {, +      return new ImmutableSet[length];, +    }, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Iterables;, +import com.google.common.collect.testing.TestMapGenerator;, +      return new SampleElements<>(, +      EnumMap<AnEnum, String> map = new EnumMap<>(AnEnum.class);, +  public static class ImmutableMapValuesAsSingletonSetGenerator, +      implements TestMapGenerator<String, Collection<Integer>> {, +, +    @Override, +    public SampleElements<Entry<String, Collection<Integer>>> samples() {, +      return new SampleElements<>(, +          mapEntry("one", ImmutableSet.of(10000)),, +          mapEntry("two", ImmutableSet.of(-2000)),, +          mapEntry("three", ImmutableSet.of(300)),, +          mapEntry("four", ImmutableSet.of(-40)),, +          mapEntry("five", ImmutableSet.of(5)));, +    }, +, +    @Override, +    public Map<String, Collection<Integer>> create(Object... elements) {, +      ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();, +      // assumes that each set is a singleton or less (as is done for the samples), +      for (Object elem : elements) {, +        @SuppressWarnings("unchecked") // safe by generator contract, +        Entry<String, Collection<Integer>> entry = (Entry<String, Collection<Integer>>) elem;, +        Integer value = Iterables.getOnlyElement(entry.getValue());, +        builder.put(entry.getKey(), value);, +      }, +      return builder.build().asMultimap().asMap();, +    }, +, +    @Override, +    @SuppressWarnings({"unchecked", "rawtypes"}) // needed for arrays, +    public Entry<String, Collection<Integer>>[] createArray(int length) {, +      return new Entry[length];, +    }, +, +    @Override, +    public Iterable<Entry<String, Collection<Integer>>> order(, +        List<Entry<String, Collection<Integer>>> insertionOrder) {, +      return insertionOrder;, +    }, +, +    @Override, +    public String[] createKeyArray(int length) {]