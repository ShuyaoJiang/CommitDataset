[+++ b/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java, +    return ListenableFutureTask.create(runnable, value);, +    return ListenableFutureTask.create(callable);, +++ b/guava/src/com/google/common/util/concurrent/AbstractListeningExecutorService.java, +    return ListenableFutureTask.create(runnable, value);, +    return ListenableFutureTask.create(callable);, +++ b/guava/src/com/google/common/util/concurrent/ListenableFutureTask.java, +  @SuppressWarnings("deprecation") // will be un-deprecated when private, +  public static <V> ListenableFutureTask<V> create(Callable<V> callable) {, +    return new ListenableFutureTask<V>(callable);, +  }, +, +  /**, +   * Creates a {@code ListenableFutureTask} that will upon running, execute the, +   * given {@code Runnable}, and arrange that {@code get} will return the, +   * given result on successful completion., +   *, +   * @param  runnable the runnable task, +   * @param result the result to return on successful completion. If, +   * you don't need a particular result, consider using, +   * constructions of the form:, +   * {@code ListenableFuture<?> f =, +   *     ListenableFutureTask.create(runnable, null)}, +   * @throws NullPointerException if runnable is null, +   */, +  @SuppressWarnings("deprecation") // will be un-deprecated when private, +  public static <V> ListenableFutureTask<V> create(Runnable runnable, V result) {, +    return new ListenableFutureTask<V>(runnable, result);, +  }, +, +  /**, +   * Creates a {@code ListenableFutureTask} that will upon running, execute the, +   * given {@code Callable}., +   *, +   * @param  callable the callable task, +   * @throws NullPointerException if callable is null, +   * @deprecated Use {@link #create(Callable)} instead., +   */, +  @Deprecated, +   *     ListenableFutureTask.create(runnable, null)}, +   * @deprecated Use {@link #create(Runnable, Object)} instead., +  @Deprecated]