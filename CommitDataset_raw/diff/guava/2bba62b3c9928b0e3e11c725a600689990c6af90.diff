[+++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import com.google.common.base.Defaults;, +import com.google.common.collect.ClassToInstanceMap;, +import com.google.common.collect.ImmutableCollection;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.ImmutableMultimap;, +import com.google.common.collect.ImmutableMultiset;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.ImmutableSortedMap;, +import com.google.common.collect.ImmutableSortedSet;, +import com.google.common.collect.ImmutableTable;, +import com.google.common.collect.Multimap;, +import com.google.common.collect.Multiset;, +import com.google.common.collect.MutableClassToInstanceMap;, +import com.google.common.collect.Table;, +import com.google.common.primitives.Primitives;, +import java.lang.reflect.Array;, +import java.util.SortedMap;, +  private final ClassToInstanceMap<Object> defaults =, +      MutableClassToInstanceMap.create();, +    // miscellaneous value types, +    setDefault(Object.class, new Object());, +    setDefault(String.class, "");, +    setDefault(Pattern.class, Pattern.compile(""));, +    setDefault(TimeUnit.class, TimeUnit.SECONDS);, +    setDefault(Throwable.class, new Exception());, +, +    // Collections, +    setDefault(ImmutableList.class, ImmutableList.of());, +    setDefault(ImmutableSet.class, ImmutableSet.of());, +    // TODO(benyu): should this be ImmutableSortedSet? Not type safe., +    setDefault(ImmutableSortedSet.class, ImmutableSortedSet.of());, +    setDefault(ImmutableCollection.class, ImmutableList.of());, +    setDefault(Map.class, Collections.emptyMap());, +    setDefault(ImmutableMap.class, ImmutableMap.of());, +    setDefault(SortedMap.class, ImmutableSortedMap.of());, +    setDefault(ImmutableSortedMap.class, ImmutableSortedMap.of());, +    setDefault(Multimap.class, ImmutableMultimap.of());, +    setDefault(ImmutableMultimap.class, ImmutableMultimap.of());, +    setDefault(Multiset.class, ImmutableMultiset.of());, +    setDefault(ImmutableMultiset.class, ImmutableMultiset.of());, +    setDefault(Table.class, ImmutableTable.of());, +    setDefault(ImmutableTable.class, ImmutableTable.of());, +, +    // Function object types, +    setDefault(Comparator.class, Collections.reverseOrder());, +    setDefault(Predicate.class, Predicates.alwaysTrue());, +, +    // The following 3 aren't really safe generically, +    // For example, Comparable<String> can't be 0, +    setDefault(Comparable.class, 0);, +    setDefault(Function.class, Functions.identity());, +, +    // TODO(benyu): We would have delegated to Defaults.getDefault(), +    // By changing it now risks breaking existing clients, and we don't really, +    // care the default value anyway., +, +  public void testAllPublicConstructors(Class<?> c) {, +      if (isPublic(constructor) && !isIgnored(constructor)) {, +  public void testAllPublicStaticMethods(Class<?> c) {, +  public void testAllPublicInstanceMethods(Object instance) {, +  public void testMethod(Object instance, Method method) {, +  public void testConstructor(Constructor<?> ctor) {, +      int paramIndex) {, +      int paramIndex) {, +      int paramIndex, Class<?> testedClass) {, +    } catch (IllegalAccessException e) {, +      throw new RuntimeException(e);, +    } catch (InstantiationException e) {, +      throw new RuntimeException(e);, +        Class<?> type = types[i];, +        params[i] = getDefaultValue(type);, +          Assert.assertTrue("No default value found for " + type.getName(),, +  private <T> T getDefaultValue(Class<T> type) {, +    T value = defaults.getInstance(type);, +    if (value != null) {, +      return value;, +    }, +    if (type.isEnum()) {, +      T[] constants = type.getEnumConstants();, +      if (constants.length > 0) {, +        return constants[0];, +      }, +    } else if (type.isArray()) {, +      @SuppressWarnings("unchecked") // T[].componentType[] == T[], +      T emptyArray = (T) Array.newInstance(type.getComponentType(), 0);, +      return emptyArray;, +    }, +    return Defaults.defaultValue(Primitives.unwrap(type));, +  }, +, +    void invoke(Object o, Object[] params), +        throws InvocationTargetException, IllegalAccessException,, +            InstantiationException;, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import com.google.common.base.Defaults;, +import com.google.common.collect.ClassToInstanceMap;, +import com.google.common.collect.ImmutableCollection;, +import com.google.common.collect.ImmutableList;]