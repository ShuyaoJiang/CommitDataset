[+++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +  @MonotonicNonNullDecl Weigher<? super K, ? super V> weigher;, +  @MonotonicNonNullDecl Strength keyStrength;, +  @MonotonicNonNullDecl Strength valueStrength;, +  @MonotonicNonNullDecl Equivalence<Object> keyEquivalence;, +  @MonotonicNonNullDecl Equivalence<Object> valueEquivalence;, +  @MonotonicNonNullDecl RemovalListener<? super K, ? super V> removalListener;, +  @MonotonicNonNullDecl Ticker ticker;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +  @MonotonicNonNullDecl Weigher<? super K, ? super V> weigher;, +  @MonotonicNonNullDecl Strength keyStrength;, +  @MonotonicNonNullDecl Strength valueStrength;, +  @MonotonicNonNullDecl Equivalence<Object> keyEquivalence;, +  @MonotonicNonNullDecl Equivalence<Object> valueEquivalence;, +  @MonotonicNonNullDecl RemovalListener<? super K, ? super V> removalListener;, +  @MonotonicNonNullDecl Ticker ticker;, +++ b/android/guava/src/com/google/common/cache/CacheBuilderSpec.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +  @MonotonicNonNullDecl @VisibleForTesting Integer initialCapacity;, +  @MonotonicNonNullDecl @VisibleForTesting Long maximumSize;, +  @MonotonicNonNullDecl @VisibleForTesting Long maximumWeight;, +  @MonotonicNonNullDecl @VisibleForTesting Integer concurrencyLevel;, +  @MonotonicNonNullDecl @VisibleForTesting Strength keyStrength;, +  @MonotonicNonNullDecl @VisibleForTesting Strength valueStrength;, +  @MonotonicNonNullDecl @VisibleForTesting Boolean recordStats;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit writeExpirationTimeUnit;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit accessExpirationTimeUnit;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit refreshTimeUnit;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +  @MonotonicNonNullDecl Weigher<? super K, ? super V> weigher;, +  @MonotonicNonNullDecl Strength keyStrength;, +  @MonotonicNonNullDecl Strength valueStrength;, +  @MonotonicNonNullDecl Equivalence<Object> keyEquivalence;, +  @MonotonicNonNullDecl Equivalence<Object> valueEquivalence;, +  @MonotonicNonNullDecl RemovalListener<? super K, ? super V> removalListener;, +  @MonotonicNonNullDecl Ticker ticker;, +++ b/android/guava/src/com/google/common/cache/CacheBuilderSpec.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +  @MonotonicNonNullDecl @VisibleForTesting Integer initialCapacity;, +  @MonotonicNonNullDecl @VisibleForTesting Long maximumSize;, +  @MonotonicNonNullDecl @VisibleForTesting Long maximumWeight;, +  @MonotonicNonNullDecl @VisibleForTesting Integer concurrencyLevel;, +  @MonotonicNonNullDecl @VisibleForTesting Strength keyStrength;, +  @MonotonicNonNullDecl @VisibleForTesting Strength valueStrength;, +  @MonotonicNonNullDecl @VisibleForTesting Boolean recordStats;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit writeExpirationTimeUnit;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit accessExpirationTimeUnit;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit refreshTimeUnit;, +++ b/android/guava/src/com/google/common/cache/LocalCache.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +    @NullableDecl final ReferenceEntry<K, V> next;, +    @NullableDecl final ReferenceEntry<K, V> next;, +    @MonotonicNonNullDecl volatile AtomicReferenceArray<ReferenceEntry<K, V>> table;, +    @NullableDecl final ReferenceQueue<K> keyReferenceQueue;, +    @NullableDecl final ReferenceQueue<V> valueReferenceQueue;, +  @MonotonicNonNullDecl Set<K> keySet;, +  @MonotonicNonNullDecl Collection<V> values;, +  @MonotonicNonNullDecl Set<Entry<K, V>> entrySet;, +    @MonotonicNonNullDecl Segment<K, V> currentSegment;, +    @MonotonicNonNullDecl AtomicReferenceArray<ReferenceEntry<K, V>> currentTable;, +    @NullableDecl ReferenceEntry<K, V> nextEntry;, +    @NullableDecl WriteThroughEntry nextExternal;, +    @NullableDecl WriteThroughEntry lastReturned;, +    @NullableDecl final Ticker ticker;, +    @MonotonicNonNullDecl transient Cache<K, V> delegate;, +    @MonotonicNonNullDecl transient LoadingCache<K, V> autoDelegate;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +  @MonotonicNonNullDecl Weigher<? super K, ? super V> weigher;, +  @MonotonicNonNullDecl Strength keyStrength;, +  @MonotonicNonNullDecl Strength valueStrength;, +  @MonotonicNonNullDecl Equivalence<Object> keyEquivalence;, +  @MonotonicNonNullDecl Equivalence<Object> valueEquivalence;, +  @MonotonicNonNullDecl RemovalListener<? super K, ? super V> removalListener;, +  @MonotonicNonNullDecl Ticker ticker;, +++ b/android/guava/src/com/google/common/cache/CacheBuilderSpec.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +  @MonotonicNonNullDecl @VisibleForTesting Integer initialCapacity;, +  @MonotonicNonNullDecl @VisibleForTesting Long maximumSize;, +  @MonotonicNonNullDecl @VisibleForTesting Long maximumWeight;, +  @MonotonicNonNullDecl @VisibleForTesting Integer concurrencyLevel;, +  @MonotonicNonNullDecl @VisibleForTesting Strength keyStrength;, +  @MonotonicNonNullDecl @VisibleForTesting Strength valueStrength;, +  @MonotonicNonNullDecl @VisibleForTesting Boolean recordStats;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit writeExpirationTimeUnit;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit accessExpirationTimeUnit;, +  @MonotonicNonNullDecl @VisibleForTesting TimeUnit refreshTimeUnit;, +++ b/android/guava/src/com/google/common/cache/LocalCache.java, +import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;, +    @NullableDecl final ReferenceEntry<K, V> next;, +    @NullableDecl final ReferenceEntry<K, V> next;, +    @MonotonicNonNullDecl volatile AtomicReferenceArray<ReferenceEntry<K, V>> table;, +    @NullableDecl final ReferenceQueue<K> keyReferenceQueue;, +    @NullableDecl final ReferenceQueue<V> valueReferenceQueue;, +  @MonotonicNonNullDecl Set<K> keySet;, +  @MonotonicNonNullDecl Collection<V> values;, +  @MonotonicNonNullDecl Set<Entry<K, V>> entrySet;]