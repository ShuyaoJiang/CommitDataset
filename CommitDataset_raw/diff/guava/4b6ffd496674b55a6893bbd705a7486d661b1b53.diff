[+++ b/guava-gwt/test/com/google/common/collect/IteratorsTest_gwt.java, +public void testConcatNested_appendToBeginning() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToBeginning();, +}, +, +public void testConcatNested_appendToEnd() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToEnd();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/IteratorsTest_gwt.java, +public void testConcatNested_appendToBeginning() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToBeginning();, +}, +, +public void testConcatNested_appendToEnd() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToEnd();, +}, +, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testConcatNested_appendToEnd() {, +    final int nestingDepth = 128;, +    Iterator<Integer> iterator = iterateOver();, +    for (int i = 0; i < nestingDepth; i++) {, +      iterator = Iterators.concat(iterator, iterateOver(1));, +    }, +    assertEquals(nestingDepth, Iterators.size(iterator));, +  }, +, +  public void testConcatNested_appendToBeginning() {, +    final int nestingDepth = 128;, +    Iterator<Integer> iterator = iterateOver();, +    for (int i = 0; i < nestingDepth; i++) {, +      iterator = Iterators.concat(iterateOver(1), iterator);, +    }, +    assertEquals(nestingDepth, Iterators.size(iterator));, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/IteratorsTest_gwt.java, +public void testConcatNested_appendToBeginning() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToBeginning();, +}, +, +public void testConcatNested_appendToEnd() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToEnd();, +}, +, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testConcatNested_appendToEnd() {, +    final int nestingDepth = 128;, +    Iterator<Integer> iterator = iterateOver();, +    for (int i = 0; i < nestingDepth; i++) {, +      iterator = Iterators.concat(iterator, iterateOver(1));, +    }, +    assertEquals(nestingDepth, Iterators.size(iterator));, +  }, +, +  public void testConcatNested_appendToBeginning() {, +    final int nestingDepth = 128;, +    Iterator<Integer> iterator = iterateOver();, +    for (int i = 0; i < nestingDepth; i++) {, +      iterator = Iterators.concat(iterateOver(1), iterator);, +    }, +    assertEquals(nestingDepth, Iterators.size(iterator));, +  }, +, +++ b/guava/src/com/google/common/collect/Iterables.java, +        return Iterators.concat(Iterables.transform(inputs, Iterables.<T>toIterator()).iterator());, +++ b/guava-gwt/test/com/google/common/collect/IteratorsTest_gwt.java, +public void testConcatNested_appendToBeginning() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToBeginning();, +}, +, +public void testConcatNested_appendToEnd() throws Exception {, +  com.google.common.collect.IteratorsTest testCase = new com.google.common.collect.IteratorsTest();, +  testCase.testConcatNested_appendToEnd();, +}, +, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +  public void testConcatNested_appendToEnd() {, +    final int nestingDepth = 128;, +    Iterator<Integer> iterator = iterateOver();, +    for (int i = 0; i < nestingDepth; i++) {, +      iterator = Iterators.concat(iterator, iterateOver(1));, +    }, +    assertEquals(nestingDepth, Iterators.size(iterator));, +  }, +, +  public void testConcatNested_appendToBeginning() {, +    final int nestingDepth = 128;, +    Iterator<Integer> iterator = iterateOver();, +    for (int i = 0; i < nestingDepth; i++) {, +      iterator = Iterators.concat(iterateOver(1), iterator);, +    }]