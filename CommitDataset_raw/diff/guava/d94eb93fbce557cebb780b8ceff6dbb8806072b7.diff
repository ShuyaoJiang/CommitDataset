[+++ b/android/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private static final ImmutableSet<String> NULLABLE_ANNOTATION_SIMPLE_NAMES =, +      ImmutableSet.of("CheckForNull", "Nullable", "NullableDecl", "NullableType");, +      if (NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())) {, +++ b/android/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private static final ImmutableSet<String> NULLABLE_ANNOTATION_SIMPLE_NAMES =, +      ImmutableSet.of("CheckForNull", "Nullable", "NullableDecl", "NullableType");, +      if (NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())) {, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private static final ImmutableSet<String> NULLABLE_ANNOTATION_SIMPLE_NAMES =, +      ImmutableSet.of("CheckForNull", "Nullable", "NullableDecl", "NullableType");, +    return isNullable(e.getAnnotations());, +  }, +, +  static boolean isNullable(Parameter param) {, +    return isNullable(param.getAnnotatedType().getAnnotations()), +        || isNullable(param.getAnnotations());, +  }, +, +  private static boolean isNullable(Annotation[] annotations) {, +    for (Annotation annotation : annotations) {, +      if (NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())) {, +++ b/android/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private static final ImmutableSet<String> NULLABLE_ANNOTATION_SIMPLE_NAMES =, +      ImmutableSet.of("CheckForNull", "Nullable", "NullableDecl", "NullableType");, +      if (NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())) {, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private static final ImmutableSet<String> NULLABLE_ANNOTATION_SIMPLE_NAMES =, +      ImmutableSet.of("CheckForNull", "Nullable", "NullableDecl", "NullableType");, +    return isNullable(e.getAnnotations());, +  }, +, +  static boolean isNullable(Parameter param) {, +    return isNullable(param.getAnnotatedType().getAnnotations()), +        || isNullable(param.getAnnotations());, +  }, +, +  private static boolean isNullable(Annotation[] annotations) {, +    for (Annotation annotation : annotations) {, +      if (NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())) {, +++ b/guava/src/com/google/common/reflect/Invokable.java, +import java.lang.reflect.AnnotatedType;, +    AnnotatedType[] annotatedTypes = getAnnotatedParameterTypes();, +      builder.add(, +          new Parameter(, +              this, i, TypeToken.of(parameterTypes[i]), annotations[i], annotatedTypes[i]));, +  abstract AnnotatedType[] getAnnotatedParameterTypes();, +, +    AnnotatedType[] getAnnotatedParameterTypes() {, +      return method.getAnnotatedParameterTypes();, +    }, +, +    @Override, +    AnnotatedType[] getAnnotatedParameterTypes() {, +      return constructor.getAnnotatedParameterTypes();, +    }, +, +    @Override, +++ b/android/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private static final ImmutableSet<String> NULLABLE_ANNOTATION_SIMPLE_NAMES =, +      ImmutableSet.of("CheckForNull", "Nullable", "NullableDecl", "NullableType");, +      if (NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())) {, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private static final ImmutableSet<String> NULLABLE_ANNOTATION_SIMPLE_NAMES =, +      ImmutableSet.of("CheckForNull", "Nullable", "NullableDecl", "NullableType");, +    return isNullable(e.getAnnotations());, +  }, +, +  static boolean isNullable(Parameter param) {, +    return isNullable(param.getAnnotatedType().getAnnotations()), +        || isNullable(param.getAnnotations());, +  }, +, +  private static boolean isNullable(Annotation[] annotations) {, +    for (Annotation annotation : annotations) {, +      if (NULLABLE_ANNOTATION_SIMPLE_NAMES.contains(annotation.annotationType().getSimpleName())) {, +++ b/guava/src/com/google/common/reflect/Invokable.java, +import java.lang.reflect.AnnotatedType;, +    AnnotatedType[] annotatedTypes = getAnnotatedParameterTypes();, +      builder.add(, +          new Parameter(, +              this, i, TypeToken.of(parameterTypes[i]), annotations[i], annotatedTypes[i]));, +  abstract AnnotatedType[] getAnnotatedParameterTypes();, +, +    AnnotatedType[] getAnnotatedParameterTypes() {, +      return method.getAnnotatedParameterTypes();, +    }, +, +    @Override, +    AnnotatedType[] getAnnotatedParameterTypes() {, +      return constructor.getAnnotatedParameterTypes();, +    }, +, +    @Override, +++ b/guava/src/com/google/common/reflect/Parameter.java, +import java.lang.reflect.AnnotatedType;, +  private final AnnotatedType annotatedType;, +      Invokable<?, ?> declaration,, +      int position,, +      TypeToken<?> type,]