[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    Set<Entry<K, V2>> entrySet;, +      Set<Entry<K, V2>> result = entrySet;, +        entrySet = result = new EntrySet<K, V2>() {, +          @Override Map<K, V2> map() {, +            return TransformedEntriesMap.this;, +          }, +, +          @Override public Iterator<Entry<K, V2>> iterator() {, +            final Iterator<Entry<K, V1>> backingIterator =, +                fromMap.entrySet().iterator();, +            return Iterators.transform(backingIterator,, +                new Function<Entry<K, V1>, Entry<K, V2>>() {, +                  @Override public Entry<K, V2> apply(Entry<K, V1> entry) {, +                    return immutableEntry(, +                        entry.getKey(),, +                        transformer.transformEntry(entry.getKey(),, +                            entry.getValue()));, +                  }, +                });, +          }, +        };, +    Collection<V2> values;, +      Collection<V2> result = values;, +      if (result == null) {, +        return values = new Values<K, V2>() {, +          @Override Map<K, V2> map() {, +            return TransformedEntriesMap.this;, +        };, +      return result;, +  static abstract class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +        return keySet = new KeySet<K, V>() {, +          @Override Map<K, V> map() {, +            return ImprovedAbstractMap.this;, +        return values = new Values<K, V>(){, +          @Override Map<K, V> map() {, +            return ImprovedAbstractMap.this;, +  static abstract class KeySet<K, V> extends AbstractSet<K> {, +    abstract Map<K, V> map();, +    @Override public Iterator<K> iterator() {, +      return Iterators.transform(map().entrySet().iterator(),, +          new Function<Map.Entry<K, V>, K>() {, +            @Override public K apply(Entry<K, V> entry) {, +              return entry.getKey();, +          });, +      return map().size();, +    }, +, +    @Override public boolean isEmpty() {, +      return map().isEmpty();, +    }, +, +    @Override public boolean contains(Object o) {, +      return map().containsKey(o);, +    }, +, +    @Override public boolean remove(Object o) {, +      if (contains(o)) {, +        map().remove(o);, +        return true;, +      }, +      return false;, +    }, +, +    @Override public void clear() {, +      map().clear();, +    }, +  }, +, +  static abstract class Values<K, V> extends AbstractCollection<V> {, +    abstract Map<K, V> map();, +, +    @Override public Iterator<V> iterator() {, +      return Iterators.transform(map().entrySet().iterator(),, +          new Function<Entry<K, V>, V>() {, +            @Override public V apply(Entry<K, V> entry) {, +              return entry.getValue();, +            }, +          });, +    }, +, +    @Override public boolean remove(Object o) {, +      try {, +        return super.remove(o);, +      } catch (UnsupportedOperationException e) {, +        for (Entry<K, V> entry : map().entrySet()) {, +          if (Objects.equal(o, entry.getValue())) {, +            map().remove(entry.getKey());, +            return true;, +          }, +        }, +        return false;, +      }, +    }, +, +    @Override public boolean removeAll(Collection<?> c) {, +      try {, +        return super.removeAll(c);, +      } catch (UnsupportedOperationException e) {, +        Set<K> toRemove = Sets.newHashSet();]