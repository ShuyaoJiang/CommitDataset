[+++ b/guava-tests/test/com/google/common/reflect/SubtypeTester.java, +        .named("%s is subtype of %s", paramType, returnType), +        .named("%s is supertype of %s", returnType, paramType), +        .named("%s is subtype of %s", paramType, returnType), +        .named("%s is supertype of %s", returnType, paramType), +++ b/guava-tests/test/com/google/common/reflect/SubtypeTester.java, +        .named("%s is subtype of %s", paramType, returnType), +        .named("%s is supertype of %s", returnType, paramType), +        .named("%s is subtype of %s", paramType, returnType), +        .named("%s is supertype of %s", returnType, paramType), +++ b/guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java, +import java.io.Serializable;, +, +    // Can't test getSupertype() or getSubtype() because JDK reflection doesn't consider, +    // Foo<?> and Foo<? extends Bar> equal for class Foo<T extends Bar>, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseIterable<?> explicitTypeBoundIsSubtypeOfImplicitTypeBound(, +        UseIterable<? extends Iterable<?>> obj) {, +      return isSubtype(obj);, +    }, +, +    // Can't test getSupertype() or getSubtype() because JDK reflection doesn't consider, +    // Foo<?> and Foo<? extends Bar> equal for class Foo<T extends Bar>, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseIterable<? extends Iterable<?>> implicitTypeBoundIsSubtypeOfExplicitTypeBound(, +        UseIterable<?> obj) {, +      return isSubtype(obj);, +    }, +, +    // Can't test getSupertype() or getSubtype() because JDK reflection doesn't consider, +    // Foo<?> and Foo<? extends Bar> equal for class Foo<T extends Bar>, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseIterable<? extends Iterable<?>> omittedTypeBoundIsSubtypeOfExplicitTypeBound(, +        UseIterable<? extends CharSequence> obj) {, +      return isSubtype(obj);, +    }, +, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public Enum<? extends Enum<?>> implicitlyBoundedEnumIsSubtypeOfExplicitlyBoundedEnum(, +        Enum<?> obj) {, +      return isSubtype(obj);, +    }, +, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public Enum<?> explicitlyBoundedEnumIsSubtypeOfImplicitlyBoundedEnum(, +        Enum<? extends Enum<?>> obj) {, +      return isSubtype(obj);, +    }, +, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseSerializableIterable<? extends Serializable>, +    implicitTypeBoundIsSubtypeOfPartialExplicitTypeBound(UseSerializableIterable<?> obj) {, +      return isSubtype(obj);, +    }, +, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseSerializableIterable<?> partialImplicitTypeBoundIsSubtypeOfImplicitTypeBound(, +        UseSerializableIterable<? extends Iterable<?>> obj) {, +      return isSubtype(obj);, +    }, +, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseSerializableIterable<? extends CharSequence>, +    implicitTypeBoundIsNotSubtypeOfDifferentTypeBound(UseSerializableIterable<?> obj) {, +      return notSubtype(obj);, +    }, +, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseSerializableIterable<? extends CharSequence>, +    partialExplicitTypeBoundIsNotSubtypeOfDifferentTypeBound(, +        UseSerializableIterable<? extends Serializable> obj) {, +      return notSubtype(obj);, +    }, +  private static interface UseIterable<T extends Iterable<?>> {}, +, +  private static interface UseSerializableIterable<T extends Serializable&Iterable<?>> {}, +}, +++ b/guava-tests/test/com/google/common/reflect/SubtypeTester.java, +        .named("%s is subtype of %s", paramType, returnType), +        .named("%s is supertype of %s", returnType, paramType), +        .named("%s is subtype of %s", paramType, returnType), +        .named("%s is supertype of %s", returnType, paramType), +++ b/guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java, +import java.io.Serializable;, +, +    // Can't test getSupertype() or getSubtype() because JDK reflection doesn't consider, +    // Foo<?> and Foo<? extends Bar> equal for class Foo<T extends Bar>, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseIterable<?> explicitTypeBoundIsSubtypeOfImplicitTypeBound(, +        UseIterable<? extends Iterable<?>> obj) {, +      return isSubtype(obj);, +    }, +, +    // Can't test getSupertype() or getSubtype() because JDK reflection doesn't consider, +    // Foo<?> and Foo<? extends Bar> equal for class Foo<T extends Bar>, +    @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true), +    public UseIterable<? extends Iterable<?>> implicitTypeBoundIsSubtypeOfExplicitTypeBound(, +        UseIterable<?> obj) {, +      return isSubtype(obj);, +    }]