[+++ b/guava-tests/test/com/google/common/util/concurrent/MonitorTestCase.java, +/*, + * Copyright (C) 2010 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import com.google.common.testing.NullPointerTester;, +import com.google.common.testing.TearDownStack;, +, +import junit.framework.TestCase;, +, +import java.util.Random;, +import java.util.concurrent.TimeUnit;, +, +/**, + * Tests for {@link Monitor}, either interruptible or uninterruptible., + *, + * @author Justin T. Sampson, + */, +, +public abstract class MonitorTestCase extends TestCase {, +, +  public class TestGuard extends Monitor.Guard {, +    private volatile boolean satisfied;, +, +    public TestGuard(boolean satisfied) {, +      super(MonitorTestCase.this.monitor);, +      this.satisfied = satisfied;, +    }, +, +    @Override public boolean isSatisfied() {, +      return this.satisfied;, +    }, +, +    public void setSatisfied(boolean satisfied) {, +      this.satisfied = satisfied;, +    }, +  }, +, +  private final boolean interruptible;, +  private Monitor monitor;, +  private final TearDownStack tearDownStack = new TearDownStack(true);, +  private TestThread<Monitor> thread1;, +  private TestThread<Monitor> thread2;, +, +  protected MonitorTestCase(boolean interruptible) {, +    this.interruptible = interruptible;, +  }, +, +  @Override protected final void setUp() throws Exception {, +    boolean fair = new Random().nextBoolean();, +    monitor = new Monitor(fair);, +    tearDownStack.addTearDown(thread1 = new TestThread<Monitor>(monitor, "TestThread #1"));, +    tearDownStack.addTearDown(thread2 = new TestThread<Monitor>(monitor, "TestThread #2"));, +  }, +, +  @Override protected final void tearDown() {, +    tearDownStack.runTearDown();, +  }, +, +  private String enter() {, +    return interruptible ? "enterInterruptibly" : "enter";, +  }, +, +  private String tryEnter() {, +    return "tryEnter";, +  }, +, +  private String enterIf() {, +    return interruptible ? "enterIfInterruptibly" : "enterIf";, +  }, +, +  private String tryEnterIf() {, +    return "tryEnterIf";, +  }, +, +  private String enterWhen() {, +    return interruptible ? "enterWhen" : "enterWhenUninterruptibly";, +  }, +, +  private String waitFor() {, +    return interruptible ? "waitFor" : "waitForUninterruptibly";, +  }, +, +  private String leave() {, +    return "leave";, +  }]