[+++ b/guava-tests/benchmark/com/google/common/collect/MapBenchmark.java, +, +  @Benchmark boolean iterateValuesAndGet(int reps) {, +    Map<Element, Element> map = mapToTest;, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      for (Element key : map.values()) {, +        // This normally wouldn't make sense, but because our keys are our values it kind of does, +        Element value = map.get(key);, +        dummy ^= key != value;, +      }, +    }, +    return dummy;, +, +  }, +++ b/guava-tests/benchmark/com/google/common/collect/MapBenchmark.java, +, +  @Benchmark boolean iterateValuesAndGet(int reps) {, +    Map<Element, Element> map = mapToTest;, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      for (Element key : map.values()) {, +        // This normally wouldn't make sense, but because our keys are our values it kind of does, +        Element value = map.get(key);, +        dummy ^= key != value;, +      }, +    }, +    return dummy;, +, +  }, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +    return (result == null) ? values = createValues() : result;, +  }, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +++ b/guava-tests/benchmark/com/google/common/collect/MapBenchmark.java, +, +  @Benchmark boolean iterateValuesAndGet(int reps) {, +    Map<Element, Element> map = mapToTest;, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      for (Element key : map.values()) {, +        // This normally wouldn't make sense, but because our keys are our values it kind of does, +        Element value = map.get(key);, +        dummy ^= key != value;, +      }, +    }, +    return dummy;, +, +  }, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +    return (result == null) ? values = createValues() : result;, +  }, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +++ b/guava/src/com/google/common/collect/ImmutableMapEntrySet.java, +      return Iterators.forArray(entries);, +++ b/guava-tests/benchmark/com/google/common/collect/MapBenchmark.java, +, +  @Benchmark boolean iterateValuesAndGet(int reps) {, +    Map<Element, Element> map = mapToTest;, +, +    boolean dummy = false;, +    for (int i = 0; i < reps; i++) {, +      for (Element key : map.values()) {, +        // This normally wouldn't make sense, but because our keys are our values it kind of does, +        Element value = map.get(key);, +        dummy ^= key != value;, +      }, +    }, +    return dummy;, +, +  }, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +    return (result == null) ? values = createValues() : result;, +  }, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +++ b/guava/src/com/google/common/collect/ImmutableMapEntrySet.java, +      return Iterators.forArray(entries);, +++ b/guava/src/com/google/common/collect/RegularImmutableMap.java, +import com.google.common.annotations.GwtIncompatible;, +import com.google.j2objc.annotations.Weak;, +import java.io.Serializable;, +  @Override, +  ImmutableSet<K> createKeySet() {, +    return new KeySet<K, V>(this);, +  }, +, +  @GwtCompatible(emulated = true), +  private static final class KeySet<K, V> extends ImmutableSet.Indexed<K> {, +    @Weak private final RegularImmutableMap<K, V> map;, +, +    KeySet(RegularImmutableMap<K, V> map) {]