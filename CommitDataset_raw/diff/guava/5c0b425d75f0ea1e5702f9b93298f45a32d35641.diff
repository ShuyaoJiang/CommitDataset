[+++ b/src/com/google/common/util/concurrent/Uninterruptibles.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +, +import com.google.common.annotations.Beta;, +, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, +/**, + * Utilities for treating interruptible operations as uninterruptible., + * In all cases, if a thread is interrupted during such a call, the call, + * continues to block until the result is available or the timeout elapses,, + * and only then re-interrupts the thread., + *, + * <p>For operations involving {@link java.util.concurrent.Future},, + * see {@link UninterruptibleFuture}., + *, + * @author Anthony Zana, + * @since 9, + */, +@Beta, +public final class Uninterruptibles {, +, +  // Implementation Note: As of 3-7-11, the logic for each blocking/timeout, +  // methods is identical, save for method being invoked., +  // (Which is also identical to the logic in Futures.makeUninterruptiple), +, +  /**, +   * Invokes {@code latch.}{@link CountDownLatch#await() await()}, +   * uninterruptibly., +   */, +  public static void awaitUninterruptibly(CountDownLatch latch) {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          latch.await();, +          return;, +        } catch (InterruptedException ignored) {, +          interrupted = true;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +, +  /**, +   * Invokes, +   * {@code latch.}{@link CountDownLatch#await(long, TimeUnit), +   * await(long, TimeUnit)} uninterruptibly., +   */, +  public static boolean awaitUninterruptibly(CountDownLatch latch,, +      long timeout, TimeUnit unit) {, +    boolean interrupted = false;, +    try {, +      long remainingNanos = unit.toNanos(timeout);, +      long end = System.nanoTime() + remainingNanos;, +, +      while (true) {, +        try {, +          // CountDownLatch treats negative timeouts just like zero., +          return latch.await(remainingNanos, NANOSECONDS);, +        } catch (InterruptedException e) {, +          interrupted = true;, +          remainingNanos = end - System.nanoTime();, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +, +  // TODO(user): Support Sleeper somehow (wrapper or interface method)?, +  /**, +   * Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)}, +   * uninterruptibly., +   */]