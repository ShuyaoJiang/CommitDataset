[+++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java, +  public void testEviction_overflow() {, +    CountingRemovalListener<Object, Object> removalListener = countingRemovalListener();, +    IdentityLoader<Object> loader = identityLoader();, +    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder(), +        .concurrencyLevel(1), +        .maximumWeight(1L << 31), +        .weigher(constantWeigher(Integer.MAX_VALUE)), +        .removalListener(removalListener), +        .build(loader);, +    cache.getUnchecked(objectWithHash(0));, +    cache.getUnchecked(objectWithHash(0));, +    CacheTesting.processPendingNotifications(cache);, +    assertEquals(1, removalListener.getCount());, +  }, +, +, +  private Object objectWithHash(final int hash) {, +    return new Object() {, +      @Override public int hashCode() {, +        return hash;, +      }, +    };, +  }, +++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java, +  public void testEviction_overflow() {, +    CountingRemovalListener<Object, Object> removalListener = countingRemovalListener();, +    IdentityLoader<Object> loader = identityLoader();, +    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder(), +        .concurrencyLevel(1), +        .maximumWeight(1L << 31), +        .weigher(constantWeigher(Integer.MAX_VALUE)), +        .removalListener(removalListener), +        .build(loader);, +    cache.getUnchecked(objectWithHash(0));, +    cache.getUnchecked(objectWithHash(0));, +    CacheTesting.processPendingNotifications(cache);, +    assertEquals(1, removalListener.getCount());, +  }, +, +, +  private Object objectWithHash(final int hash) {, +    return new Object() {, +      @Override public int hashCode() {, +        return hash;, +      }, +    };, +  }, +++ b/guava/src/com/google/common/cache/LocalCache.java, +    long totalWeight;]