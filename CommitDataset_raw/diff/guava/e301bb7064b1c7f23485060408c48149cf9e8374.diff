[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +        "com.google.common.reflect.ClassPathTest$Nested",, +  public void testGetAllClasses() throws Exception {, +    Set<String> names = Sets.newHashSet();, +    Set<String> strings = Sets.newHashSet();, +    Set<Class<?>> classes = Sets.newHashSet();, +    Set<String> packageNames = Sets.newHashSet();, +    Set<String> simpleNames = Sets.newHashSet();, +    ClassPath classpath = ClassPath.from(getClass().getClassLoader());, +    for (ClassInfo classInfo : classpath.getAllClasses()) {, +      if (!classInfo.getPackageName().equals(ClassPathTest.class.getPackage().getName())) {, +        continue;, +      }, +      names.add(classInfo.getName());, +      strings.add(classInfo.toString());, +      classes.add(classInfo.load());, +      packageNames.add(classInfo.getPackageName());, +      simpleNames.add(classInfo.getSimpleName());, +    }, +    class LocalClass {}, +    Class<?> anonymousClass = new Object() {}.getClass();, +    ASSERT.that(names).has().allOf(anonymousClass.getName(), LocalClass.class.getName(),, +        ClassPath.class.getName(), ClassPathTest.class.getName());, +    ASSERT.that(strings).has().allOf(anonymousClass.getName(), LocalClass.class.getName(),, +        ClassPath.class.getName(), ClassPathTest.class.getName());, +    ASSERT.that(classes).has().allOf(anonymousClass, LocalClass.class, ClassPath.class,, +        ClassPathTest.class);, +    ASSERT.that(packageNames).has().exactly(ClassPath.class.getPackage().getName());, +    ASSERT.that(simpleNames).has().allOf("", "Local", "ClassPath", "ClassPathTest");, +  }, +, +  public void testGetTopLevelClasses() throws Exception {, +  public void testGetTopLevelClassesRecursive() throws Exception {, +      if (classInfo.getName().contains("ClassPathTest")) {, +        System.err.println("");, +      }, +  public void testGetTopLevelClasses_diamond() throws Exception {, +    assertEquals(ClassInfo.class, resourceInfo(Nested.class).getClass());, +    assertEquals("Foo",, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("",, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("Foo",, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("",, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("Local",, +        new ClassInfo("a/b/Bar$1Local.class", getClass().getClassLoader()).getSimpleName());, +, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +        "com.google.common.reflect.ClassPathTest$Nested",, +  public void testGetAllClasses() throws Exception {, +    Set<String> names = Sets.newHashSet();, +    Set<String> strings = Sets.newHashSet();, +    Set<Class<?>> classes = Sets.newHashSet();, +    Set<String> packageNames = Sets.newHashSet();, +    Set<String> simpleNames = Sets.newHashSet();, +    ClassPath classpath = ClassPath.from(getClass().getClassLoader());, +    for (ClassInfo classInfo : classpath.getAllClasses()) {, +      if (!classInfo.getPackageName().equals(ClassPathTest.class.getPackage().getName())) {, +        continue;, +      }, +      names.add(classInfo.getName());, +      strings.add(classInfo.toString());, +      classes.add(classInfo.load());, +      packageNames.add(classInfo.getPackageName());, +      simpleNames.add(classInfo.getSimpleName());, +    }, +    class LocalClass {}, +    Class<?> anonymousClass = new Object() {}.getClass();, +    ASSERT.that(names).has().allOf(anonymousClass.getName(), LocalClass.class.getName(),, +        ClassPath.class.getName(), ClassPathTest.class.getName());, +    ASSERT.that(strings).has().allOf(anonymousClass.getName(), LocalClass.class.getName(),, +        ClassPath.class.getName(), ClassPathTest.class.getName());, +    ASSERT.that(classes).has().allOf(anonymousClass, LocalClass.class, ClassPath.class,, +        ClassPathTest.class);, +    ASSERT.that(packageNames).has().exactly(ClassPath.class.getPackage().getName());, +    ASSERT.that(simpleNames).has().allOf("", "Local", "ClassPath", "ClassPathTest");, +  }, +, +  public void testGetTopLevelClasses() throws Exception {, +  public void testGetTopLevelClassesRecursive() throws Exception {, +      if (classInfo.getName().contains("ClassPathTest")) {, +        System.err.println("");, +      }, +  public void testGetTopLevelClasses_diamond() throws Exception {, +    assertEquals(ClassInfo.class, resourceInfo(Nested.class).getClass());, +    assertEquals("Foo",, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("",, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("Foo",, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("",, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +    assertEquals("Local",, +        new ClassInfo("a/b/Bar$1Local.class", getClass().getClassLoader()).getSimpleName());, +, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +import com.google.common.base.CharMatcher;]