[+++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +import static org.mockito.Mockito.inOrder;, +import com.google.common.base.Charsets;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.SerializableTester;, +import org.mockito.InOrder;, +, +import java.nio.charset.Charset;, +import java.util.Arrays;, +  public void testForStringsCharset() {, +    for (Charset charset : Charset.availableCharsets().values()) {, +      PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +      Funnels.stringFunnel(charset).funnel("test", bytePrimitiveSink);, +      verify(bytePrimitiveSink).putString("test", charset);, +    }, +  }, +, +  public void testForStringsCharset_null() {, +    for (Charset charset : Charset.availableCharsets().values()) {, +      assertNullsThrowException(Funnels.stringFunnel(charset));, +    }, +  }, +, +  public void testSequential() {, +    @SuppressWarnings("unchecked"), +    Funnel<Object> elementFunnel = mock(Funnel.class);, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnel<Iterable<? extends Object>> sequential = Funnels.sequentialFunnel(elementFunnel);, +    sequential.funnel(Arrays.asList("foo", "bar", "baz", "quux"), primitiveSink);, +    InOrder inOrder = inOrder(elementFunnel);, +    inOrder.verify(elementFunnel).funnel("foo", primitiveSink);, +    inOrder.verify(elementFunnel).funnel("bar", primitiveSink);, +    inOrder.verify(elementFunnel).funnel("baz", primitiveSink);, +    inOrder.verify(elementFunnel).funnel("quux", primitiveSink);, +  }, +, +, +  public void testSerialization() {, +    assertSame(, +        Funnels.byteArrayFunnel(),, +        SerializableTester.reserialize(Funnels.byteArrayFunnel()));, +    assertSame(, +        Funnels.integerFunnel(),, +        SerializableTester.reserialize(Funnels.integerFunnel()));, +    assertSame(, +        Funnels.longFunnel(),, +        SerializableTester.reserialize(Funnels.longFunnel()));, +    assertSame(, +        Funnels.stringFunnel(),, +        SerializableTester.reserialize(Funnels.stringFunnel()));, +    assertEquals(, +        Funnels.sequentialFunnel(Funnels.integerFunnel()),, +        SerializableTester.reserialize(Funnels.sequentialFunnel(Funnels.integerFunnel())));, +    assertEquals(, +        Funnels.stringFunnel(Charsets.US_ASCII),, +        SerializableTester.reserialize(Funnels.stringFunnel(Charsets.US_ASCII)));, +  }, +, +  public void testEquals() {, +     new EqualsTester(), +       .addEqualityGroup(Funnels.byteArrayFunnel()), +       .addEqualityGroup(Funnels.integerFunnel()), +       .addEqualityGroup(Funnels.longFunnel()), +       .addEqualityGroup(Funnels.stringFunnel()), +       .addEqualityGroup(Funnels.stringFunnel(Charsets.UTF_8)), +       .addEqualityGroup(Funnels.stringFunnel(Charsets.US_ASCII)), +       .addEqualityGroup(Funnels.sequentialFunnel(Funnels.integerFunnel()),, +                         SerializableTester.reserialize(Funnels.sequentialFunnel(, +                           Funnels.integerFunnel()))), +       .addEqualityGroup(Funnels.sequentialFunnel(Funnels.longFunnel())), +       .testEquals();, +  }, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +import static org.mockito.Mockito.inOrder;, +import com.google.common.base.Charsets;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.SerializableTester;, +import org.mockito.InOrder;, +, +import java.nio.charset.Charset;, +import java.util.Arrays;, +  public void testForStringsCharset() {, +    for (Charset charset : Charset.availableCharsets().values()) {, +      PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +      Funnels.stringFunnel(charset).funnel("test", bytePrimitiveSink);, +      verify(bytePrimitiveSink).putString("test", charset);, +    }, +  }, +, +  public void testForStringsCharset_null() {, +    for (Charset charset : Charset.availableCharsets().values()) {, +      assertNullsThrowException(Funnels.stringFunnel(charset));, +    }, +  }, +, +  public void testSequential() {, +    @SuppressWarnings("unchecked"), +    Funnel<Object> elementFunnel = mock(Funnel.class);, +    PrimitiveSink primitiveSink = mock(PrimitiveSink.class);, +    Funnel<Iterable<? extends Object>> sequential = Funnels.sequentialFunnel(elementFunnel);]