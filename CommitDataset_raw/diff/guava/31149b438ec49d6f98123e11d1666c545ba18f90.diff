[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +    // and some crazy values (this used to be capped to Integer.MAX_VALUE, now it can go bigger, +    assertEquals(3327428144502L, BloomFilter.optimalNumOfBits(, +    try {, +      BloomFilter.create(HashTestUtils.BAD_FUNNEL, Integer.MAX_VALUE, Double.MIN_VALUE);, +      fail("we can't represent such a large BF!");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Could not create BloomFilter of 3327428144502 bits", expected.getMessage());, +    }, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +    // and some crazy values (this used to be capped to Integer.MAX_VALUE, now it can go bigger, +    assertEquals(3327428144502L, BloomFilter.optimalNumOfBits(, +    try {, +      BloomFilter.create(HashTestUtils.BAD_FUNNEL, Integer.MAX_VALUE, Double.MIN_VALUE);, +      fail("we can't represent such a large BF!");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Could not create BloomFilter of 3327428144502 bits", expected.getMessage());, +    }, +++ b/guava/src/com/google/common/hash/BloomFilter.java, +    long numBits = optimalNumOfBits(expectedInsertions, fpp);, +    try {, +    } catch (IllegalArgumentException e) {, +      throw new IllegalArgumentException("Could not create BloomFilter of " + numBits + " bits", e);, +    }, +  @VisibleForTesting static int optimalNumOfHashFunctions(long n, long m) {, +  @VisibleForTesting static long optimalNumOfBits(long n, double p) {, +    if (p == 0) p = Double.MIN_VALUE;, +    return (long) (-n * Math.log(p) / LN2_SQUARED);, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +    // and some crazy values (this used to be capped to Integer.MAX_VALUE, now it can go bigger, +    assertEquals(3327428144502L, BloomFilter.optimalNumOfBits(, +    try {, +      BloomFilter.create(HashTestUtils.BAD_FUNNEL, Integer.MAX_VALUE, Double.MIN_VALUE);, +      fail("we can't represent such a large BF!");, +    } catch (IllegalArgumentException expected) {, +      assertEquals("Could not create BloomFilter of 3327428144502 bits", expected.getMessage());, +    }, +++ b/guava/src/com/google/common/hash/BloomFilter.java, +    long numBits = optimalNumOfBits(expectedInsertions, fpp);, +    try {, +    } catch (IllegalArgumentException e) {, +      throw new IllegalArgumentException("Could not create BloomFilter of " + numBits + " bits", e);, +    }, +  @VisibleForTesting static int optimalNumOfHashFunctions(long n, long m) {, +  @VisibleForTesting static long optimalNumOfBits(long n, double p) {, +    if (p == 0) p = Double.MIN_VALUE;, +    return (long) (-n * Math.log(p) / LN2_SQUARED);, +++ b/guava/src/com/google/common/hash/BloomFilterStrategies.java, +import com.google.common.math.LongMath;, +import com.google.common.primitives.Ints;, +    BitArray(long bits) {, +      this(new long[Ints.checkedCast(LongMath.divide(bits, 64, RoundingMode.CEILING))]);]