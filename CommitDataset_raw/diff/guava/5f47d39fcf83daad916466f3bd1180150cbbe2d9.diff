[+++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());, +++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());, +++ b/android/guava/src/com/google/common/collect/RegularImmutableTable.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +  /** @throws IllegalArgumentException if {@code existingValue} is not null. */, +  /*, +   * We could have declared this method 'static' but the additional compile-time checks achieved by, +   * referencing the type variables seem worthwhile., +   */, +  final void checkNoDuplicate(R rowKey, C columnKey, V existingValue, V newValue) {, +    checkArgument(, +        existingValue == null,, +        "Duplicate key: (row=%s, column=%s), values: [%s, %s].",, +        rowKey,, +        columnKey,, +        newValue,, +        existingValue);, +  }, +++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());, +++ b/android/guava/src/com/google/common/collect/RegularImmutableTable.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +  /** @throws IllegalArgumentException if {@code existingValue} is not null. */, +  /*, +   * We could have declared this method 'static' but the additional compile-time checks achieved by, +   * referencing the type variables seem worthwhile., +   */, +  final void checkNoDuplicate(R rowKey, C columnKey, V existingValue, V newValue) {, +    checkArgument(, +        existingValue == null,, +        "Duplicate key: (row=%s, column=%s), values: [%s, %s].",, +        rowKey,, +        columnKey,, +        newValue,, +        existingValue);, +  }, +++ b/android/guava/src/com/google/common/collect/SparseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, oldValue, value);, +++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());, +++ b/android/guava/src/com/google/common/collect/RegularImmutableTable.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +  /** @throws IllegalArgumentException if {@code existingValue} is not null. */, +  /*, +   * We could have declared this method 'static' but the additional compile-time checks achieved by, +   * referencing the type variables seem worthwhile., +   */, +  final void checkNoDuplicate(R rowKey, C columnKey, V existingValue, V newValue) {, +    checkArgument(, +        existingValue == null,, +        "Duplicate key: (row=%s, column=%s), values: [%s, %s].",, +        rowKey,, +        columnKey,, +        newValue,, +        existingValue);, +  }, +++ b/android/guava/src/com/google/common/collect/SparseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, oldValue, value);, +++ b/guava/src/com/google/common/collect/DenseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());, +++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());, +++ b/android/guava/src/com/google/common/collect/RegularImmutableTable.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +  /** @throws IllegalArgumentException if {@code existingValue} is not null. */, +  /*, +   * We could have declared this method 'static' but the additional compile-time checks achieved by, +   * referencing the type variables seem worthwhile., +   */, +  final void checkNoDuplicate(R rowKey, C columnKey, V existingValue, V newValue) {, +    checkArgument(, +        existingValue == null,, +        "Duplicate key: (row=%s, column=%s), values: [%s, %s].",, +        rowKey,, +        columnKey,, +        newValue,, +        existingValue);, +  }, +++ b/android/guava/src/com/google/common/collect/SparseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, oldValue, value);, +++ b/guava/src/com/google/common/collect/DenseImmutableTable.java, +      checkNoDuplicate(rowKey, columnKey, existingValue, cell.getValue());, +++ b/guava/src/com/google/common/collect/RegularImmutableTable.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +  /** @throws IllegalArgumentException if {@code existingValue} is not null. */, +  /*, +   * We could have declared this method 'static' but the additional compile-time checks achieved by, +   * referencing the type variables seem worthwhile., +   */, +  final void checkNoDuplicate(R rowKey, C columnKey, V existingValue, V newValue) {, +    checkArgument(, +        existingValue == null,, +        "Duplicate key: (row=%s, column=%s), values: [%s, %s].",]