[+++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-tests/test/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-tests/test/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-tests/test/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-tests/test/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-tests/test/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    assertThat(byName.keySet()).containsAllOf(, +    assertThat(byToString.keySet()).containsAllOf(, +    assertThat(names).containsAllOf(anonymousClass.getName(), LocalClass.class.getName(),, +    assertThat(strings).containsAllOf(anonymousClass.getName(), LocalClass.class.getName(),, +    assertThat(classes).containsAllOf(anonymousClass, LocalClass.class, ClassPath.class,, +    assertThat(simpleNames).containsAllOf("", "Local", "ClassPath", "ClassPathTest");, +    assertThat(names).containsAllOf(ClassPath.class.getName(), ClassPathTest.class.getName());, +    assertThat(strings).containsAllOf(ClassPath.class.getName(), ClassPathTest.class.getName());, +    assertThat(classes).containsAllOf(ClassPath.class, ClassPathTest.class);, +    assertThat(simpleNames).containsAllOf("ClassPath", "ClassPathTest");, +    assertThat(classes).containsAllOf(ClassPathTest.class, ClassInSubPackage.class);, +    assertThat(classPathEntries.keySet()).containsExactly(url1.toURI(), url2.toURI()).inOrder();, +        .containsExactly(, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/primitives/super/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-tests/test/com/google/common/primitives/DoublesTest.java, +    assertThat(list).containsExactly((double) 2, (double) 3).inOrder();, +++ b/guava-tests/test/com/google/common/primitives/FloatsTest.java, +    assertThat(list).containsExactly((float) 2, (float) 3).inOrder();, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    assertThat(byName.keySet()).containsAllOf(, +    assertThat(byToString.keySet()).containsAllOf(, +    assertThat(names).containsAllOf(anonymousClass.getName(), LocalClass.class.getName(),, +    assertThat(strings).containsAllOf(anonymousClass.getName(), LocalClass.class.getName(),, +    assertThat(classes).containsAllOf(anonymousClass, LocalClass.class, ClassPath.class,, +    assertThat(simpleNames).containsAllOf("", "Local", "ClassPath", "ClassPathTest");, +    assertThat(names).containsAllOf(ClassPath.class.getName(), ClassPathTest.class.getName());, +    assertThat(strings).containsAllOf(ClassPath.class.getName(), ClassPathTest.class.getName());, +    assertThat(classes).containsAllOf(ClassPath.class, ClassPathTest.class);, +    assertThat(simpleNames).containsAllOf("ClassPath", "ClassPathTest");, +    assertThat(classes).containsAllOf(ClassPathTest.class, ClassInSubPackage.class);, +    assertThat(classPathEntries.keySet()).containsExactly(url1.toURI(), url2.toURI()).inOrder();, +        .containsExactly(, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +    makeUnmodifiable(types).containsExactly(, +    makeUnmodifiable(types.interfaces()).containsExactly(, +    makeUnmodifiable(types.classes()).containsExactly(, +    makeUnmodifiable(types.rawTypes()).containsExactly(, +    makeUnmodifiable(types.interfaces().rawTypes()).containsExactly(, +    makeUnmodifiable(types.classes().rawTypes()).containsExactly(, +    makeUnmodifiable(types).containsExactly(, +        .containsExactly(Interface1.class, Class1.class, Object.class);, +        .containsExactly(Interface1.class, Interface2.class, Interface3.class, Iterable.class);, +        .containsExactly(TypeToken.of(CharSequence.class), new TypeToken<Iterable<String>>() {});, +        .containsExactly(TypeToken.of(CharSequence.class), new TypeToken<Iterable<T>>() {});]