[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.hasEdge(node, new Object())).isFalse();, +      assertThat(graph.hasEdge(new Object(), node)).isFalse();, +        assertThat(graph.hasEdge(predecessor, node)).isTrue();, +        assertThat(graph.hasEdge(node, successor)).isTrue();, +    assertThat(graph.hasEdge(new Object(), new Object())).isFalse();, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.hasEdge(node, new Object())).isFalse();, +      assertThat(graph.hasEdge(new Object(), node)).isFalse();, +        assertThat(graph.hasEdge(predecessor, node)).isTrue();, +        assertThat(graph.hasEdge(node, successor)).isTrue();, +    assertThat(graph.hasEdge(new Object(), new Object())).isFalse();, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +    Graph<Integer> asGraph = graph.asGraph();, +    AbstractGraphTest.validateGraph(asGraph);, +    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());, +    assertThat(graph.edges()).isEqualTo(asGraph.edges());, +    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());, +    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());, +    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());, +    for (Integer node : graph.nodes()) {, +      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));, +      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));, +      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));, +      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));, +      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));, +      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));, +, +      for (Integer otherNode : graph.nodes()) {, +        boolean hasEdge = graph.hasEdge(node, otherNode);, +        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);, +      }, +    }, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.hasEdge(node, new Object())).isFalse();, +      assertThat(graph.hasEdge(new Object(), node)).isFalse();, +        assertThat(graph.hasEdge(predecessor, node)).isTrue();, +        assertThat(graph.hasEdge(node, successor)).isTrue();, +    assertThat(graph.hasEdge(new Object(), new Object())).isFalse();, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +    Graph<Integer> asGraph = graph.asGraph();, +    AbstractGraphTest.validateGraph(asGraph);, +    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());, +    assertThat(graph.edges()).isEqualTo(asGraph.edges());, +    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());, +    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());, +    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());, +    for (Integer node : graph.nodes()) {, +      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));, +      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));, +      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));, +      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));, +      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));, +      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));, +, +      for (Integer otherNode : graph.nodes()) {, +        boolean hasEdge = graph.hasEdge(node, otherNode);, +        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);, +      }, +    }, +++ b/guava/src/com/google/common/graph/AbstractBaseGraph.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  @Override, +  public boolean hasEdge(Object nodeU, Object nodeV) {, +    checkNotNull(nodeU);, +    checkNotNull(nodeV);, +    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);, +  }, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.hasEdge(node, new Object())).isFalse();, +      assertThat(graph.hasEdge(new Object(), node)).isFalse();, +        assertThat(graph.hasEdge(predecessor, node)).isTrue();, +        assertThat(graph.hasEdge(node, successor)).isTrue();, +    assertThat(graph.hasEdge(new Object(), new Object())).isFalse();, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +    Graph<Integer> asGraph = graph.asGraph();, +    AbstractGraphTest.validateGraph(asGraph);, +    assertThat(graph.nodes()).isEqualTo(asGraph.nodes());, +    assertThat(graph.edges()).isEqualTo(asGraph.edges());, +    assertThat(graph.nodeOrder()).isEqualTo(asGraph.nodeOrder());, +    assertThat(graph.isDirected()).isEqualTo(asGraph.isDirected());, +    assertThat(graph.allowsSelfLoops()).isEqualTo(asGraph.allowsSelfLoops());, +    for (Integer node : graph.nodes()) {, +      assertThat(graph.adjacentNodes(node)).isEqualTo(asGraph.adjacentNodes(node));, +      assertThat(graph.predecessors(node)).isEqualTo(asGraph.predecessors(node));, +      assertThat(graph.successors(node)).isEqualTo(asGraph.successors(node));, +      assertThat(graph.degree(node)).isEqualTo(asGraph.degree(node));, +      assertThat(graph.inDegree(node)).isEqualTo(asGraph.inDegree(node));, +      assertThat(graph.outDegree(node)).isEqualTo(asGraph.outDegree(node));, +, +      for (Integer otherNode : graph.nodes()) {, +        boolean hasEdge = graph.hasEdge(node, otherNode);, +        assertThat(hasEdge).isEqualTo(asGraph.hasEdge(node, otherNode));, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);, +      }, +    }, +++ b/guava/src/com/google/common/graph/AbstractBaseGraph.java]