[+++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +  public void testGetOwnerType_constructor() throws Exception {, +    Invokable<String, String> invokable = Invokable.from(String.class.getConstructor());, +    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());, +  }, +, +  public void testGetOwnerType_method() throws Exception {, +    Invokable<?, ?> invokable = Invokable.from(String.class.getMethod("length"));, +    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +  public void testGetOwnerType_constructor() throws Exception {, +    Invokable<String, String> invokable = Invokable.from(String.class.getConstructor());, +    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());, +  }, +, +  public void testGetOwnerType_method() throws Exception {, +    Invokable<?, ?> invokable = Invokable.from(String.class.getMethod("length"));, +    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  private static void assertSubtypeTokenBeforeSupertypeToken(, +      Iterable<? extends TypeToken<?>> types) {, +        .iteratesOverSequence(, +            TypeToken.of(CharSequence.class), new TypeToken<Iterable<String>>() {});, +  public void testMethod_getOwnerType() throws NoSuchMethodException {, +    Method sizeMethod = List.class.getMethod("size");, +    assertEquals(TypeToken.of(List.class),, +        TypeToken.of(List.class).method(sizeMethod).getOwnerType());, +    assertEquals(new TypeToken<List<String>>() {},, +        new TypeToken<List<String>>() {}.method(sizeMethod).getOwnerType());, +  }, +, +  public void testConstructor_getOwnerType() throws NoSuchMethodException {, +    @SuppressWarnings("rawtypes") // raw class ArrayList.class, +    Constructor<ArrayList> constructor = ArrayList.class.getConstructor();, +    assertEquals(TypeToken.of(ArrayList.class),, +        TypeToken.of(ArrayList.class).constructor(constructor).getOwnerType());, +    assertEquals(new TypeToken<ArrayList<String>>() {},, +        new TypeToken<ArrayList<String>>() {}.constructor(constructor).getOwnerType());, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +  public void testGetOwnerType_constructor() throws Exception {, +    Invokable<String, String> invokable = Invokable.from(String.class.getConstructor());, +    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());, +  }, +, +  public void testGetOwnerType_method() throws Exception {, +    Invokable<?, ?> invokable = Invokable.from(String.class.getMethod("length"));, +    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  private static void assertSubtypeTokenBeforeSupertypeToken(, +      Iterable<? extends TypeToken<?>> types) {, +        .iteratesOverSequence(, +            TypeToken.of(CharSequence.class), new TypeToken<Iterable<String>>() {});, +  public void testMethod_getOwnerType() throws NoSuchMethodException {, +    Method sizeMethod = List.class.getMethod("size");, +    assertEquals(TypeToken.of(List.class),, +        TypeToken.of(List.class).method(sizeMethod).getOwnerType());, +    assertEquals(new TypeToken<List<String>>() {},, +        new TypeToken<List<String>>() {}.method(sizeMethod).getOwnerType());, +  }, +, +  public void testConstructor_getOwnerType() throws NoSuchMethodException {, +    @SuppressWarnings("rawtypes") // raw class ArrayList.class, +    Constructor<ArrayList> constructor = ArrayList.class.getConstructor();, +    assertEquals(TypeToken.of(ArrayList.class),, +        TypeToken.of(ArrayList.class).constructor(constructor).getOwnerType());, +    assertEquals(new TypeToken<ArrayList<String>>() {},, +        new TypeToken<ArrayList<String>>() {}.constructor(constructor).getOwnerType());, +  }, +, +++ b/guava/src/com/google/common/reflect/Invokable.java, + * <p>In addition to convenience methods, {@link TypeToken#method} and {@link, + * TypeToken#constructor} will resolve the type parameters of the method or constructor in the, + * context of the owner type, which may be a subtype of the declaring class. For example:, + * <pre>   {@code, + *, + *   Method getMethod = List.class.getMethod("get", int.class);, + *   Invokable<List<String>, ?> invokable = new TypeToken<List<String>>() {}.method(getMethod);, + *   assertEquals(TypeToken.of(String.class), invokable.getReturnType()); // Not Object.class!, + *   assertEquals(new TypeToken<List<String>>() {}, invokable.getOwnerType());}</pre>, + * , + * @param <T> the type that owns this method or constructor., +  /** Returns the type of {@code T}. */, +  // Overridden in TypeToken#method() and TypeToken#constructor(), +  @SuppressWarnings("unchecked") // The declaring class is T., +  public TypeToken<T> getOwnerType() {, +    return (TypeToken<T>) TypeToken.of(getDeclaringClass());, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +  public void testGetOwnerType_constructor() throws Exception {, +    Invokable<String, String> invokable = Invokable.from(String.class.getConstructor());, +    assertEquals(TypeToken.of(String.class), invokable.getOwnerType());]