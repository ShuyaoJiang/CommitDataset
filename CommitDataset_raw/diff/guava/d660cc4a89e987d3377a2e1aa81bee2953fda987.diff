[+++ b/guava/src/com/google/common/collect/Multimap.java, +  /**, +   * Returns the number of key-value pairs in this multimap., +   *, +   * <p><b>Note:</b> this method does not return the number of <i>distinct, +   * keys</i> in the multimap, which is given by {@code keySet().size()} or, +   * {@code asMap().size()}. See the opening section of the {@link Multimap}, +   * class documentation for clarification., +   */, +  /**, +   * Returns {@code true} if this multimap contains no key-value pairs., +   * Equivalent to {@code size() == 0}, but can in some cases be more efficient., +   */, +   * Returns {@code true} if this multimap contains at least one key-value pair, +   * with the key {@code key}., +   * Returns {@code true} if this multimap contains at least one key-value pair, +   * with the value {@code value}., +   * Returns {@code true} if this multimap contains at least one key-value pair, +   * with the key {@code key} and the value {@code value}., +   * Stores a key-value pair in this multimap., +   * Removes a single key-value pair with the key {@code key} and the value, +   * {@code value} from this multimap, if such exists. If multiple key-value, +   * pairs in the multimap fit this description, which one is removed is, +   * unspecified., +   * Stores a key-value pair in this multimap for each of {@code values}, all, +   * using the same key, {@code key}. Equivalent to (but expected to be more, +   * efficient than): <pre>   {@code, +   * Stores all key-value pairs of {@code multimap} in this multimap, in the, +   * order returned by {@code multimap.entries()}., +   * Removes all values associated with the key {@code key}., +   * @return the values that were removed (possibly empty). The returned, +   *     collection <i>may</i> be modifiable, but updating it will have no, +   *     effect on the multimap., +   * Removes all key-value pairs from the multimap, leaving it {@linkplain, +   * #isEmpty empty}., +   * Returns a view collection of the values associated with {@code key} in this, +   * multimap, if any. Note that when {@code containsKey(key)} is false, this , +   * returns an empty collection, not {@code null}., +   * Returns a view collection of all <i>distinct</i> keys contained in this, +   * multimap. Note that the key set contains a key if and only if this multimap, +   * maps that key to at least one value., +   * <p>Changes to the returned set will update the underlying multimap, and, +   * vice versa. However, <i>adding</i> to the returned set is not possible., +   * Returns a view collection containing the key from each key-value pair in, +   * this multimap, <i>without</i> collapsing duplicates. This collection has, +   * the same size as this multimap, and {@code keys().count(k) ==, +   * get(k).size()} for all {@code k}., +   * <p>Changes to the returned multiset will update the underlying multimap,, +   * and vice versa. However, <i>adding</i> to the returned collection is not, +   * possible., +   * Returns a view collection containing the <i>value</i> from each key-value, +   * pair contained in this multimap, without collapsing duplicates (so {@code, +   * values().size() == size()})., +   * <p>Changes to the returned collection will update the underlying multimap,, +   * and vice versa. However, <i>adding</i> to the returned collection is not, +   * possible., +   * Returns a view collection of all key-value pairs contained in this, +   * multimap, as {@link Map.Entry} instances., +   * <p>Changes to the returned collection or the entries it contains will, +   * update the underlying multimap, and vice versa. However, <i>adding</i> to, +   * the returned collection is not possible., +   * Returns a view of this multimap as a {@code Map} from each distinct key, +   * to the nonempty collection of that key's associated values. Note that, +   * {@code this.asMap().get(k)} is equivalent to {@code this.get(k)} only when, +   * {@code k} is a key contained in the multimap; otherwise it returns {@code, +   * null} as opposed to an empty collection., +   * <p>Changes to the returned map or the collections that serve as its values, +   * will update the underlying multimap, and vice versa. The map does not, +   * support {@code put} or {@code putAll}, nor do its entries support {@link, +   * Map.Entry#setValue setValue}.]