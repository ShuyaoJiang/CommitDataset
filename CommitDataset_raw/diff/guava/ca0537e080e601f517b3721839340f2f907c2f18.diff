[+++ b/guava/src/com/google/common/base/Joiner.java, +  public, +  final <A extends Appendable, I extends Object & Iterable<?> & Iterator<?>> A, +  public, +  final <I extends Object & Iterable<?> & Iterator<?>> StringBuilder, +  public, +  final <I extends Object & Iterable<?> & Iterator<?>> String join(I parts) {, +    public, +    <A extends Appendable,, +    public, +    <I extends Object & Iterable<? extends Entry<?, ?>> & Iterator<? extends Entry<?, ?>>>, +    public, +    <I extends Object & Iterable<? extends Entry<?, ?>> & Iterator<? extends Entry<?, ?>>>, +++ b/guava/src/com/google/common/base/Joiner.java, +  public, +  final <A extends Appendable, I extends Object & Iterable<?> & Iterator<?>> A, +  public, +  final <I extends Object & Iterable<?> & Iterator<?>> StringBuilder, +  public, +  final <I extends Object & Iterable<?> & Iterator<?>> String join(I parts) {, +    public, +    <A extends Appendable,, +    public, +    <I extends Object & Iterable<? extends Entry<?, ?>> & Iterator<? extends Entry<?, ?>>>, +    public, +    <I extends Object & Iterable<? extends Entry<?, ?>> & Iterator<? extends Entry<?, ?>>>, +++ b/guava/src/com/google/common/cache/Cache.java, +   * <p>Prefer {@link #get(Object, Callable)} when using the conventional "if cached, return;, +   * otherwise create, cache and return" pattern., +++ b/guava/src/com/google/common/base/Joiner.java, +  public, +  final <A extends Appendable, I extends Object & Iterable<?> & Iterator<?>> A, +  public, +  final <I extends Object & Iterable<?> & Iterator<?>> StringBuilder, +  public, +  final <I extends Object & Iterable<?> & Iterator<?>> String join(I parts) {, +    public, +    <A extends Appendable,, +    public, +    <I extends Object & Iterable<? extends Entry<?, ?>> & Iterator<? extends Entry<?, ?>>>, +    public, +    <I extends Object & Iterable<? extends Entry<?, ?>> & Iterator<? extends Entry<?, ?>>>, +++ b/guava/src/com/google/common/cache/Cache.java, +   * <p>Prefer {@link #get(Object, Callable)} when using the conventional "if cached, return;, +   * otherwise create, cache and return" pattern., +++ b/guava/src/com/google/common/cache/CacheBuilder.java, + * {@linkplain #maximumSize(long) maximumSize}, {@linkplain #maximumWeight(long) maximumWeight},, + * <p>If {@linkplain #maximumSize(long) maximumSize} or, + * {@linkplain #maximumWeight(long) maximumWeight} is requested entries may be evicted on each cache, + * modification., +   * into consideration by {@link #maximumWeight(long)} when determining which entries to evict, and, +   * use of this method requires a corresponding call to {@link #maximumWeight(long)} prior to, +   * calling {@link #build}. Weights are measured and recorded when entries are inserted into the, +   * #maximumSize(long) maximum size} instead of using soft references. You should only use this, +   * method if you are well familiar with the practical consequences of soft references., +   * {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum, +   * size or weight. This can be useful in testing, or to disable caching temporarily without a code, +   * change., +   * {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum, +   * size or weight. This can be useful in testing, or to disable caching temporarily without a code, +   * change.]