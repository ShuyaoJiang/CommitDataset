[+++ b/guava/src/com/google/common/hash/Murmur3_128HashFunction.java, +import com.google.common.primitives.UnsignedBytes;, +    private static final int CHUNK_SIZE = 16;, +    private static final long C1 = 0x87c37b91114253d5L;, +    private static final long C2 = 0x4cf5ad432745937fL;, +    private long h1;, +    private long h2;, +    private int len;, +      super(CHUNK_SIZE);, +      len += CHUNK_SIZE;;, +      k1 *= C1;, +      k1 *= C2;, +      k2 *= C2;, +      k2 *= C1;, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(14)) << 48; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(13)) << 40; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(12)) << 32; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(11)) << 24; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(10)) << 16; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(9)) << 8; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(8)) << 0;, +          k2 *= C2;, +          k2 *= C1;, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(7)) << 56; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(6)) << 48; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(5)) << 40; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(4)) << 32; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(3)) << 24; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(2)) << 16; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(1)) << 8; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(0)) << 0;, +          k1 *= C1;, +          k1 *= C2;, +      return HashCodes.fromBytesNoCopy(ByteBuffer, +          .wrap(new byte[CHUNK_SIZE]), +          .order(ByteOrder.LITTLE_ENDIAN), +          .putLong(h1), +          .putLong(h2), +          .array());, +    private static long fmix64(long k) {, +++ b/guava/src/com/google/common/hash/Murmur3_128HashFunction.java, +import com.google.common.primitives.UnsignedBytes;, +    private static final int CHUNK_SIZE = 16;, +    private static final long C1 = 0x87c37b91114253d5L;, +    private static final long C2 = 0x4cf5ad432745937fL;, +    private long h1;, +    private long h2;, +    private int len;, +      super(CHUNK_SIZE);, +      len += CHUNK_SIZE;;, +      k1 *= C1;, +      k1 *= C2;, +      k2 *= C2;, +      k2 *= C1;, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(14)) << 48; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(13)) << 40; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(12)) << 32; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(11)) << 24; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(10)) << 16; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(9)) << 8; // fall through, +          k2 ^= (long) UnsignedBytes.toInt(bb.get(8)) << 0;, +          k2 *= C2;, +          k2 *= C1;, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(7)) << 56; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(6)) << 48; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(5)) << 40; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(4)) << 32; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(3)) << 24; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(2)) << 16; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(1)) << 8; // fall through, +          k1 ^= (long) UnsignedBytes.toInt(bb.get(0)) << 0;, +          k1 *= C1;, +          k1 *= C2;, +      return HashCodes.fromBytesNoCopy(ByteBuffer, +          .wrap(new byte[CHUNK_SIZE]), +          .order(ByteOrder.LITTLE_ENDIAN), +          .putLong(h1), +          .putLong(h2), +          .array());, +    private static long fmix64(long k) {, +++ b/guava/src/com/google/common/hash/Murmur3_32HashFunction.java, +    private static final int CHUNK_SIZE = 4;, +    private static final int C1 = 0xcc9e2d51;, +    private static final int C2 = 0x1b873593;, +    private int h1;, +    private int len;, +      super(CHUNK_SIZE);, +      len += CHUNK_SIZE;, +      k1 *= C1;, +      k1 *= C2;, +          k1 *= C1;, +          k1 *= C2;]