[+++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import static com.google.common.io.TestOption.AVAILABLE_ALWAYS_ZERO;, +, +    // test that we can get the size even if available() always returns zero, +    assertEquals(bytes.length, new TestByteSource(bytes, AVAILABLE_ALWAYS_ZERO).size());, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import static com.google.common.io.TestOption.AVAILABLE_ALWAYS_ZERO;, +, +    // test that we can get the size even if available() always returns zero, +    assertEquals(bytes.length, new TestByteSource(bytes, AVAILABLE_ALWAYS_ZERO).size());, +++ b/guava-tests/test/com/google/common/io/TestInputStream.java, +  public int available() throws IOException {, +    throwIf(closed);, +    return options.contains(TestOption.AVAILABLE_ALWAYS_ZERO) ? 0 : in.available();, +  }, +, +  @Override, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import static com.google.common.io.TestOption.AVAILABLE_ALWAYS_ZERO;, +, +    // test that we can get the size even if available() always returns zero, +    assertEquals(bytes.length, new TestByteSource(bytes, AVAILABLE_ALWAYS_ZERO).size());, +++ b/guava-tests/test/com/google/common/io/TestInputStream.java, +  public int available() throws IOException {, +    throwIf(closed);, +    return options.contains(TestOption.AVAILABLE_ALWAYS_ZERO) ? 0 : in.available();, +  }, +, +  @Override, +++ b/guava-tests/test/com/google/common/io/TestOption.java, +  CLOSE_THROWS,, +  AVAILABLE_ALWAYS_ZERO, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +import static com.google.common.io.TestOption.AVAILABLE_ALWAYS_ZERO;, +, +    // test that we can get the size even if available() always returns zero, +    assertEquals(bytes.length, new TestByteSource(bytes, AVAILABLE_ALWAYS_ZERO).size());, +++ b/guava-tests/test/com/google/common/io/TestInputStream.java, +  public int available() throws IOException {, +    throwIf(closed);, +    return options.contains(TestOption.AVAILABLE_ALWAYS_ZERO) ? 0 : in.available();, +  }, +, +  @Override, +++ b/guava-tests/test/com/google/common/io/TestOption.java, +  CLOSE_THROWS,, +  AVAILABLE_ALWAYS_ZERO, +++ b/guava/src/com/google/common/io/ByteSource.java, +        } else if (count == 0 && in.available() == 0) {, +          // if available is still zero after reading a single byte, it, +          // will probably always be zero, so we should countByReading, +          throw new IOException();]