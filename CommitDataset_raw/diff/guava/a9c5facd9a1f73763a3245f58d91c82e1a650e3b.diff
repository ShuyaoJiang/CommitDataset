[+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    assertEquals(hashFunction.hashString(string),, +        hashFunction.hashString(string, Charsets.UTF_16LE));, +    assertEquals(hashFunction.hashString(string),, +        hashFunction.newHasher().putString(string, Charsets.UTF_16LE).hash());, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    assertEquals(hashFunction.hashString(string),, +        hashFunction.hashString(string, Charsets.UTF_16LE));, +    assertEquals(hashFunction.hashString(string),, +        hashFunction.newHasher().putString(string, Charsets.UTF_16LE).hash());, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +    assertEquals(1510782915, murmur3_32().hashString("hell").asInt());, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    assertEquals(hashFunction.hashString(string),, +        hashFunction.hashString(string, Charsets.UTF_16LE));, +    assertEquals(hashFunction.hashString(string),, +        hashFunction.newHasher().putString(string, Charsets.UTF_16LE).hash());, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +    assertEquals(1510782915, murmur3_32().hashString("hell").asInt());, +++ b/guava/src/com/google/common/hash/Murmur3_32HashFunction.java, +import com.google.common.primitives.Chars;, + * @author Kurt Alfred Kluever, +  // TODO(user): Maybe implement #hashBytes instead?, +  @Override public HashCode hashString(CharSequence input) {, +    int h1 = seed;, +, +    // step through the CharSequence 2 chars at a time, +    for (int i = 1; i < input.length(); i += 2) {, +      int k1 = input.charAt(i - 1) | (input.charAt(i) << 16);, +      k1 = mixK1(k1);, +      h1 = mixH1(h1, k1);, +    }, +, +    // deal with any remaining characters, +    if ((input.length() & 1) == 1) {, +      int k1 = input.charAt(input.length() - 1);, +      k1 = mixK1(k1);, +      h1 ^= k1;, +    }, +, +    return fmix(h1, Chars.BYTES * input.length());, +  }]