[+++ b/guava/src/com/google/common/util/concurrent/Uninterruptibles.java, +import com.google.common.base.Preconditions;, +        } catch (InterruptedException e) {, +   * await(timeout, unit)} uninterruptibly., +  /**, +   * Invokes {@code toJoin.}{@link Thread#join() join()} uninterruptibly., +   */, +  public static void joinUninterruptibly(Thread toJoin) {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          toJoin.join();, +          return;, +        } catch (InterruptedException e) {, +          interrupted = true;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +, +  /**, +   * Invokes, +   * {@code unit.}{@link TimeUnit#timedJoin(Thread, long), +   * timedJoin(toJoin, timeout)} uninterruptibly., +   */, +  public static void joinUninterruptibly(Thread toJoin,, +      long timeout, TimeUnit unit) {, +    Preconditions.checkNotNull(toJoin);, +    boolean interrupted = false;, +    try {, +      long remainingNanos = unit.toNanos(timeout);, +      long end = System.nanoTime() + remainingNanos;, +      while (true) {, +        try {, +          // TimeUnit.timedJoin() treats negative timeouts just like zero., +          NANOSECONDS.timedJoin(toJoin, remainingNanos);, +          return;, +        } catch (InterruptedException e) {, +          interrupted = true;, +          remainingNanos = end - System.nanoTime();, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +  // TODO(user): Add support for waitUninterruptibly.]