[+++ b/src/com/google/common/collect/CacheStats.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkArgument;, +, +import com.google.common.base.Objects;, +, +import javax.annotation.Nullable;, +, +/**, + * Statistics about the performance of a {@link Cache}. Instances of this class are immutable., + *, + * <p>Cache statistics are incremented according to the following rules:, + *, + * <ul>, + * <li>A cache lookup that encounters an existing cache entry will increment {@code hitCount}.</li>, + * <li>The first cache lookup that encounters a missing cache entry will create a new entry. After, + *     successful creation it will increment {@code missCount} and {@code createCount}, and add the, + *     total creation time, in nanoseconds, to {@code totalCreateTime}.</li>, + * <li>Cache lookups that encounter a missing cache entry that is pending creation will await, + *     successful creation and then increment {@code missCount}.</li>, + * <li>No stats are modified when entry creation throws an exception, neither for the creating, + *     thread nor for waiting threads.</li>, + * <li>When an entry is evicted from the cache, {@code evictionCount} is incremented.</li>, + * <li>No stats are modified when a cache entry is invalidated or manually removed.</li>, + * <li>No stats are modified by operations invoked on the {@linkplain Cache#asMap asMap} view of, + *     the cache.<li>, + * </ul>, + *, + * @author Charles Fry, + */, +public final class CacheStats {, +  private final long hitCount;, +  private final long missCount;, +  private final long createCount;, +  private final long evictionCount;, +  private final long totalCreateTime;, +, +  /**, +   * Constructs a new {@code CacheStats} instance., +   *, +   * <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed, +   * by end users and is too fine-grained for a builder., +   */, +  public CacheStats(long hitCount, long missCount, long createCount, long evictionCount,, +      long totalCreateTime) {, +    checkArgument(hitCount >= 0);, +    checkArgument(missCount >= 0);, +    checkArgument(createCount >= 0);, +    checkArgument(evictionCount >= 0);, +    checkArgument(totalCreateTime >= 0);, +, +    this.hitCount = hitCount;, +    this.missCount = missCount;, +    this.createCount = createCount;, +    this.evictionCount = evictionCount;, +    this.totalCreateTime = totalCreateTime;, +  }, +, +  /**, +   * Returns the number of times {@link Cache#get} has returned either a cached or uncached value., +   * This is defined as {@code hitCount() + missCount()}., +   */, +  public long requestCount() {, +    return hitCount + missCount;, +  }, +, +  /**, +   * Returns the number of times {@link Cache#get} has returned a cached value., +   */, +  public long hitCount() {, +    return hitCount;, +  }, +, +  /**, +   * Returns the ratio of cache requests which were hits. This is defined as, +   * {@code hitCount() / requestCount()}, or {@code 1.0} when {@code requestCount() == 0}., +   * Note that {@code hitRate() + missRate() =~ 1.0}., +   */, +  public double hitRate() {, +    long reqeustCount = requestCount();, +    return (reqeustCount == 0) ? 1.0 : (double) hitCount / reqeustCount;, +  }, +]