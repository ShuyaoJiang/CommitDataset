[+++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetWritesTester.java, +  public void testAddOccurrencesZero() {, +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().add(samples.e0, 0));, +    expectUnchanged();, +  }, +, +  @CollectionFeature.Require(SUPPORTS_ADD), +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().add(samples.e0, 2));, +    assertEquals(expectedCount + 2, getMultiset().count(samples.e0));, +  @CollectionFeature.Require(SUPPORTS_ADD), +  public void testAdd_occurrences_negative() {, +    try {, +      getMultiset().add(samples.e0, -1);, +      fail("multiset.add(E, -1) didn't throw an exception");, +    } catch (IllegalArgumentException required) {}, +  }, +, +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveZeroNoOp() {, +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().remove(samples.e0, 0));, +    expectUnchanged();, +  }, +, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetWritesTester.java, +  public void testAddOccurrencesZero() {, +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().add(samples.e0, 0));, +    expectUnchanged();, +  }, +, +  @CollectionFeature.Require(SUPPORTS_ADD), +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().add(samples.e0, 2));, +    assertEquals(expectedCount + 2, getMultiset().count(samples.e0));, +  @CollectionFeature.Require(SUPPORTS_ADD), +  public void testAdd_occurrences_negative() {, +    try {, +      getMultiset().add(samples.e0, -1);, +      fail("multiset.add(E, -1) didn't throw an exception");, +    } catch (IllegalArgumentException required) {}, +  }, +, +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveZeroNoOp() {, +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().remove(samples.e0, 0));, +    expectUnchanged();, +  }, +, +++ b/guava-tests/test/com/google/common/math/DoubleMathTest.java, +  public void testRoundLog2Exact() {, +    for (double x : POSITIVE_FINITE_DOUBLE_CANDIDATES) {, +      boolean isPowerOfTwo = StrictMath.pow(2.0, DoubleMath.log2(x, FLOOR)) == x;, +      try {, +        int log2 = DoubleMath.log2(x, UNNECESSARY);, +        assertEquals(x, Math.scalb(1.0, log2));, +        assertTrue(isPowerOfTwo);, +      } catch (ArithmeticException e) {, +        assertFalse(isPowerOfTwo);, +      }, +    }, +  }, +, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetWritesTester.java, +  public void testAddOccurrencesZero() {, +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().add(samples.e0, 0));, +    expectUnchanged();, +  }, +, +  @CollectionFeature.Require(SUPPORTS_ADD), +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().add(samples.e0, 2));, +    assertEquals(expectedCount + 2, getMultiset().count(samples.e0));, +  @CollectionFeature.Require(SUPPORTS_ADD), +  public void testAdd_occurrences_negative() {, +    try {, +      getMultiset().add(samples.e0, -1);, +      fail("multiset.add(E, -1) didn't throw an exception");, +    } catch (IllegalArgumentException required) {}, +  }, +, +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveZeroNoOp() {, +    int expectedCount = getMultiset().count(samples.e0);, +    assertEquals(expectedCount, getMultiset().remove(samples.e0, 0));, +    expectUnchanged();, +  }, +, +++ b/guava-tests/test/com/google/common/math/DoubleMathTest.java, +  public void testRoundLog2Exact() {, +    for (double x : POSITIVE_FINITE_DOUBLE_CANDIDATES) {, +      boolean isPowerOfTwo = StrictMath.pow(2.0, DoubleMath.log2(x, FLOOR)) == x;, +      try {, +        int log2 = DoubleMath.log2(x, UNNECESSARY);, +        assertEquals(x, Math.scalb(1.0, log2));, +        assertTrue(isPowerOfTwo);]