[+++ b/src/com/google/common/base/Equivalences.java, + * @author Gregory Kick, +++ b/src/com/google/common/base/Equivalences.java, + * @author Gregory Kick, +++ b/test/com/google/common/base/EquivalencesTest.java, +import com.google.testing.util.EqualsTester;, +  private static final Object OBJECT = 42;, +    assertTrue(Equivalences.equals().equivalent((42), OBJECT));, +    assertTrue(Equivalences.equals().equivalent(OBJECT, (42)));, +, +  private static final Equivalence<String> LENGTH_EQUIVALENCE = new Equivalence<String>() {, +    @Override public boolean equivalent(String a, String b) {, +      return (a == null) ? (b == null) : (b != null) && (a.length() == b.length());, +    }, +, +    @Override public int hash(String t) {, +      return (t == null) ? 0 : t.length();, +    }, +  };, +, +  public void testWrap() {, +    new EqualsTester(), +        .addEqualityGroup(, +            Equivalences.wrap(LENGTH_EQUIVALENCE, "hello"),, +            Equivalences.wrap(LENGTH_EQUIVALENCE, "hello"),, +            Equivalences.wrap(LENGTH_EQUIVALENCE, "world")), +        .addEqualityGroup(, +            Equivalences.wrap(LENGTH_EQUIVALENCE, "hi"),, +            Equivalences.wrap(LENGTH_EQUIVALENCE, "yo")), +        .addEqualityGroup(, +            Equivalences.wrap(LENGTH_EQUIVALENCE, null),, +            Equivalences.wrap(LENGTH_EQUIVALENCE, null)), +        .addEqualityGroup(Equivalences.wrap(Equivalences.equals(), "hello")), +        .addEqualityGroup(Equivalences.wrap(Equivalences.equals(), null)), +        .testEquals();, +  }]