[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import com.google.common.collect.ImmutableList;, +  public void testConcat() throws IOException {, +    ByteSource b1 = ByteStreams.asByteSource(new byte[] {0, 1, 2, 3});, +    ByteSource b2 = ByteStreams.asByteSource(new byte[0]);, +    ByteSource b3 = ByteStreams.asByteSource(new byte[] {4, 5});, +, +    byte[] expected = {0, 1, 2, 3, 4, 5};, +, +    assertEquals(expected,, +        ByteStreams.concat(ImmutableList.of(b1, b2, b3)).read());, +    assertEquals(expected,, +        ByteStreams.concat(b1, b2, b3).read());, +    assertEquals(expected,, +        ByteStreams.concat(ImmutableList.of(b1, b2, b3).iterator()).read());, +  }, +  , +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import com.google.common.collect.ImmutableList;, +  public void testConcat() throws IOException {, +    ByteSource b1 = ByteStreams.asByteSource(new byte[] {0, 1, 2, 3});, +    ByteSource b2 = ByteStreams.asByteSource(new byte[0]);, +    ByteSource b3 = ByteStreams.asByteSource(new byte[] {4, 5});, +, +    byte[] expected = {0, 1, 2, 3, 4, 5};, +, +    assertEquals(expected,, +        ByteStreams.concat(ImmutableList.of(b1, b2, b3)).read());, +    assertEquals(expected,, +        ByteStreams.concat(b1, b2, b3).read());, +    assertEquals(expected,, +        ByteStreams.concat(ImmutableList.of(b1, b2, b3).iterator()).read());, +  }, +  , +++ b/guava-tests/test/com/google/common/io/CharStreamsTest.java, +  public void testConcat() throws IOException {, +    CharSource c1 = CharStreams.asCharSource("abc");, +    CharSource c2 = CharStreams.asCharSource("");, +    CharSource c3 = CharStreams.asCharSource("de");, +, +    String expected = "abcde";, +, +    assertEquals(expected,, +        CharStreams.concat(ImmutableList.of(c1, c2, c3)).read());, +    assertEquals(expected,, +        CharStreams.concat(c1, c2, c3).read());, +    assertEquals(expected,, +        CharStreams.concat(ImmutableList.of(c1, c2, c3).iterator()).read());, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import com.google.common.collect.ImmutableList;, +  public void testConcat() throws IOException {, +    ByteSource b1 = ByteStreams.asByteSource(new byte[] {0, 1, 2, 3});, +    ByteSource b2 = ByteStreams.asByteSource(new byte[0]);, +    ByteSource b3 = ByteStreams.asByteSource(new byte[] {4, 5});, +, +    byte[] expected = {0, 1, 2, 3, 4, 5};, +, +    assertEquals(expected,, +        ByteStreams.concat(ImmutableList.of(b1, b2, b3)).read());, +    assertEquals(expected,, +        ByteStreams.concat(b1, b2, b3).read());, +    assertEquals(expected,, +        ByteStreams.concat(ImmutableList.of(b1, b2, b3).iterator()).read());, +  }, +  , +++ b/guava-tests/test/com/google/common/io/CharStreamsTest.java, +  public void testConcat() throws IOException {, +    CharSource c1 = CharStreams.asCharSource("abc");, +    CharSource c2 = CharStreams.asCharSource("");, +    CharSource c3 = CharStreams.asCharSource("de");, +, +    String expected = "abcde";, +, +    assertEquals(expected,, +        CharStreams.concat(ImmutableList.of(c1, c2, c3)).read());, +    assertEquals(expected,, +        CharStreams.concat(c1, c2, c3).read());, +    assertEquals(expected,, +        CharStreams.concat(ImmutableList.of(c1, c2, c3).iterator()).read());, +  }, +, +++ b/guava/src/com/google/common/io/ByteSink.java, +public abstract class ByteSink implements OutputSupplier<OutputStream> {, +   * This method is a temporary method provided for easing migration from suppliers to sources and, +   * sinks., +   *, +   * @since 15.0, +   * @deprecated This method is only provided for temporary compatibility with the, +   *     {@link OutputSupplier} interface and should not be called directly. Use {@link #openStream}, +   *     instead., +   */, +  @Override, +  @Deprecated, +  public final OutputStream getOutput() throws IOException {, +    return openStream();, +  }, +, +  /**]