[+++ b/guava/src/com/google/common/collect/AbstractCache.java, +import javax.annotation.Nullable;, +, + * implementation for the {@code get} method., +  @Nullable, +      return get(key);, +      throw new UncheckedExecutionException(e.getCause());, +  @Nullable, +  public void invalidate(@Nullable Object key) {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public void invalidateAll() {, +++ b/guava/src/com/google/common/collect/AbstractCache.java, +import javax.annotation.Nullable;, +, + * implementation for the {@code get} method., +  @Nullable, +      return get(key);, +      throw new UncheckedExecutionException(e.getCause());, +  @Nullable, +  public void invalidate(@Nullable Object key) {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public void invalidateAll() {, +++ b/guava/src/com/google/common/collect/Cache.java, + * <p>All methods other than {@link #get} and {@link #getUnchecked} are optional., +   * necessary, and throwing an execution exception on failure. No state associated with this cache, +   * is modified until computation completes., +  @Nullable V get(K key) throws ExecutionException;, +   * necessary. No state associated with this cache is modified until computation completes. Unlike, +   * {@link #get}, this method does not throw a checked exception, and thus should only be used in, +   * situations where exceptions are not thrown by the cache loader., +   * @throws UncheckedExecutionException wraps errors which occur while loading the response, +  @Nullable V getUnchecked(K key);, +   * Discouraged. Provided to satisfy the {@code Function} interface; use {@link #get} or, +   * @throws UncheckedExecutionException wraps errors which occur while loading the response, +  @Nullable V apply(K key);, +   * Discards any cached value for key {@code key}, possibly asynchronously, so that a future, +   * invocation of {@code get(key)} will result in a cache miss and reload., +   * Discards all entries in the cache, possibly asynchronously., +   *, +   * @throws UnsupportedOperationException if this operation is not supported by the cache, +   *     implementation, +   */, +  void invalidateAll();, +, +  /**, +   * {@link #get} and {@link #getUnchecked}, this map's {@link Map#get get} method, +++ b/guava/src/com/google/common/collect/AbstractCache.java, +import javax.annotation.Nullable;, +, + * implementation for the {@code get} method., +  @Nullable, +      return get(key);, +      throw new UncheckedExecutionException(e.getCause());, +  @Nullable, +  public void invalidate(@Nullable Object key) {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public void invalidateAll() {, +++ b/guava/src/com/google/common/collect/Cache.java, + * <p>All methods other than {@link #get} and {@link #getUnchecked} are optional., +   * necessary, and throwing an execution exception on failure. No state associated with this cache, +   * is modified until computation completes., +  @Nullable V get(K key) throws ExecutionException;, +   * necessary. No state associated with this cache is modified until computation completes. Unlike, +   * {@link #get}, this method does not throw a checked exception, and thus should only be used in, +   * situations where exceptions are not thrown by the cache loader., +   * @throws UncheckedExecutionException wraps errors which occur while loading the response, +  @Nullable V getUnchecked(K key);, +   * Discouraged. Provided to satisfy the {@code Function} interface; use {@link #get} or, +   * @throws UncheckedExecutionException wraps errors which occur while loading the response, +  @Nullable V apply(K key);, +   * Discards any cached value for key {@code key}, possibly asynchronously, so that a future, +   * invocation of {@code get(key)} will result in a cache miss and reload., +   * Discards all entries in the cache, possibly asynchronously., +   *, +   * @throws UnsupportedOperationException if this operation is not supported by the cache, +   *     implementation, +   */, +  void invalidateAll();, +, +  /**, +   * {@link #get} and {@link #getUnchecked}, this map's {@link Map#get get} method, +++ b/guava/src/com/google/common/collect/CacheLoader.java, +   * @param key the key whose value should be loaded; will never be null, +   * @return the value associated with {@code key}; <b>may not be null</b>, +  public abstract V load(K key) throws Exception;, +++ b/guava/src/com/google/common/collect/AbstractCache.java, +import javax.annotation.Nullable;, +, + * implementation for the {@code get} method., +  @Nullable, +      return get(key);]