[+++ b/guava/src/com/google/common/hash/HashingOutputStream.java, +, +  // Overriding close() because FilterOutputStream's close() method pre-JDK8 has bad behavior:, +  // it silently ignores any exception thrown by flush(). Instead, just close the delegate stream., +  // It should flush itself if necessary., +  @Override public void close() throws IOException {, +    out.close();, +  }, +++ b/guava/src/com/google/common/hash/HashingOutputStream.java, +, +  // Overriding close() because FilterOutputStream's close() method pre-JDK8 has bad behavior:, +  // it silently ignores any exception thrown by flush(). Instead, just close the delegate stream., +  // It should flush itself if necessary., +  @Override public void close() throws IOException {, +    out.close();, +  }, +++ b/guava/src/com/google/common/io/CountingOutputStream.java, +, +  // Overriding close() because FilterOutputStream's close() method pre-JDK8 has bad behavior:, +  // it silently ignores any exception thrown by flush(). Instead, just close the delegate stream., +  // It should flush itself if necessary., +  @Override public void close() throws IOException {, +    out.close();, +  }, +++ b/guava/src/com/google/common/hash/HashingOutputStream.java, +, +  // Overriding close() because FilterOutputStream's close() method pre-JDK8 has bad behavior:, +  // it silently ignores any exception thrown by flush(). Instead, just close the delegate stream., +  // It should flush itself if necessary., +  @Override public void close() throws IOException {, +    out.close();, +  }, +++ b/guava/src/com/google/common/io/CountingOutputStream.java, +, +  // Overriding close() because FilterOutputStream's close() method pre-JDK8 has bad behavior:, +  // it silently ignores any exception thrown by flush(). Instead, just close the delegate stream., +  // It should flush itself if necessary., +  @Override public void close() throws IOException {, +    out.close();, +  }, +++ b/guava/src/com/google/common/io/LittleEndianDataOutputStream.java, +, +  // Overriding close() because FilterOutputStream's close() method pre-JDK8 has bad behavior:, +  // it silently ignores any exception thrown by flush(). Instead, just close the delegate stream., +  // It should flush itself if necessary., +  @Override public void close() throws IOException {, +    out.close();, +  }]