[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import com.google.common.math.IntMath;, +      int dividend = 1;, +      try {, +          Axis axis = new Axis(set, dividend);, +          dividend = IntMath.checkedMultiply(dividend, axis.size());, +        }, +      } catch (ArithmeticException overflow) {, +        throw new IllegalArgumentException("cartesian product too big");, +      size = dividend;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import com.google.common.math.IntMath;, +      int dividend = 1;, +      try {, +          Axis axis = new Axis(set, dividend);, +          dividend = IntMath.checkedMultiply(dividend, axis.size());, +        }, +      } catch (ArithmeticException overflow) {, +        throw new IllegalArgumentException("cartesian product too big");, +      size = dividend;, +++ b/guava-gwt/src/com/google/common/collect/Collect.gwt.xml, +  <inherits name="com.google.common.math.Math"/>, +   , +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import com.google.common.math.IntMath;, +      int dividend = 1;, +      try {, +          Axis axis = new Axis(set, dividend);, +          dividend = IntMath.checkedMultiply(dividend, axis.size());, +        }, +      } catch (ArithmeticException overflow) {, +        throw new IllegalArgumentException("cartesian product too big");, +      size = dividend;, +++ b/guava-gwt/src/com/google/common/collect/Collect.gwt.xml, +  <inherits name="com.google.common.math.Math"/>, +   , +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +import com.google.common.math.IntMath;, +          try {, +            int newValue = IntMath.checkedAdd(oldValue, occurrences);, +          } catch (ArithmeticException overflow) {, +            throw new IllegalArgumentException("Overflow adding " + occurrences, +                + " occurrences to a count of " + oldValue);, +          }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import com.google.common.math.IntMath;, +      int dividend = 1;, +      try {, +          Axis axis = new Axis(set, dividend);, +          dividend = IntMath.checkedMultiply(dividend, axis.size());, +        }, +      } catch (ArithmeticException overflow) {, +        throw new IllegalArgumentException("cartesian product too big");, +      size = dividend;, +++ b/guava-gwt/src/com/google/common/collect/Collect.gwt.xml, +  <inherits name="com.google.common.math.Math"/>, +   , +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +import com.google.common.math.IntMath;, +          try {, +            int newValue = IntMath.checkedAdd(oldValue, occurrences);, +          } catch (ArithmeticException overflow) {, +            throw new IllegalArgumentException("Overflow adding " + occurrences, +                + " occurrences to a count of " + oldValue);, +          }, +++ b/guava/src/com/google/common/collect/MinMaxPriorityQueue.java, +import com.google.common.math.IntMath;, +        : IntMath.checkedMultiply(oldCapacity / 2, 3);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import com.google.common.math.IntMath;, +      int dividend = 1;, +      try {, +          Axis axis = new Axis(set, dividend);, +          dividend = IntMath.checkedMultiply(dividend, axis.size());, +        }, +      } catch (ArithmeticException overflow) {, +        throw new IllegalArgumentException("cartesian product too big");, +      size = dividend;, +++ b/guava-gwt/src/com/google/common/collect/Collect.gwt.xml, +  <inherits name="com.google.common.math.Math"/>, +   , +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +import com.google.common.math.IntMath;, +          try {, +            int newValue = IntMath.checkedAdd(oldValue, occurrences);, +          } catch (ArithmeticException overflow) {, +            throw new IllegalArgumentException("Overflow adding " + occurrences, +                + " occurrences to a count of " + oldValue);, +          }, +++ b/guava/src/com/google/common/collect/MinMaxPriorityQueue.java, +import com.google.common.math.IntMath;, +        : IntMath.checkedMultiply(oldCapacity / 2, 3);, +++ b/guava/src/com/google/common/collect/Sets.java, +import com.google.common.math.IntMath;, +      int dividend = 1;, +      try {, +          Axis axis = new Axis(set, dividend);, +          dividend = IntMath.checkedMultiply(dividend, axis.size());, +        }, +      } catch (ArithmeticException overflow) {]