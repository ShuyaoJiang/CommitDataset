[+++ b/guava-tests/lib/libtruth-gwt.jar, +++ b/guava-tests/lib/libtruth-gwt.jar, +++ b/guava-tests/lib/libtruth.jar, +++ b/guava-tests/lib/libtruth-gwt.jar, +++ b/guava-tests/lib/libtruth.jar, +++ b/guava-tests/test/com/google/common/util/concurrent/AtomicDoubleArrayTest.java, +/*, + * Written by Doug Lea and Martin Buchholz with assistance from, + * members of JCP JSR-166 Expert Group and released to the public, + * domain, as explained at, + * http://creativecommons.org/publicdomain/zero/1.0/, + */, +, +/*, + * Source:, + * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/test/tck-jsr166e/AtomicDoubleArrayTest.java?revision=1.13, + * (Modified to adapt to guava coding conventions), + */, +, +package com.google.common.util.concurrent;, +, +import junit.framework.*;, +import java.util.Arrays;, +, +/**, + * Unit test for {@link AtomicDoubleArray}., + */, +public class AtomicDoubleArrayTest extends JSR166TestCase {, +, +  private static final double[] VALUES = {, +    Double.NEGATIVE_INFINITY,, +    -Double.MAX_VALUE,, +    (double) Long.MIN_VALUE,, +    (double) Integer.MIN_VALUE,, +    -Math.PI,, +    -1.0,, +    -Double.MIN_VALUE,, +    -0.0,, +    +0.0,, +    Double.MIN_VALUE,, +    1.0,, +    Math.PI,, +    (double) Integer.MAX_VALUE,, +    (double) Long.MAX_VALUE,, +    Double.MAX_VALUE,, +    Double.POSITIVE_INFINITY,, +    Double.NaN,, +    Float.MAX_VALUE,, +  };, +, +  /** The notion of equality used by AtomicDoubleArray */, +  static boolean bitEquals(double x, double y) {, +    return Double.doubleToRawLongBits(x) == Double.doubleToRawLongBits(y);, +  }, +, +  static void assertBitEquals(double x, double y) {, +    assertEquals(Double.doubleToRawLongBits(x),, +                 Double.doubleToRawLongBits(y));, +  }, +, +  /**, +   * constructor creates array of given size with all elements zero, +   */, +  public void testConstructor() {, +    AtomicDoubleArray aa = new AtomicDoubleArray(SIZE);, +    for (int i = 0; i < SIZE; i++) {, +      assertBitEquals(0.0, aa.get(i));, +    }, +  }, +, +  /**, +   * constructor with null array throws NPE, +   */, +  public void testConstructor2NPE() {, +    try {, +      double[] a = null;, +      AtomicDoubleArray aa = new AtomicDoubleArray(a);, +      shouldThrow();, +    } catch (NullPointerException success) {}, +  }, +, +  /**, +   * constructor with array is of same size and has all elements, +   */, +  public void testConstructor2() {, +    AtomicDoubleArray aa = new AtomicDoubleArray(VALUES);, +    assertEquals(VALUES.length, aa.length());, +    for (int i = 0; i < VALUES.length; i++) {, +      assertBitEquals(VALUES[i], aa.get(i));, +    }, +  }, +, +  /**, +   * constructor with empty array has size 0 and contains no elements, +   */, +  public void testConstructorEmptyArray() {, +    AtomicDoubleArray aa = new AtomicDoubleArray(new double[0]);, +    assertEquals(0, aa.length());, +    try {, +      aa.get(0);]