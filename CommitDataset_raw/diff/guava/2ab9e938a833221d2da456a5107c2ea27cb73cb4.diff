[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * @deprecated This method has been renamed to {@link #advance(java.util.Iterator, int) advance}., +   *     This method is scheduled to be deleted in Guava 14.0., +  @Deprecated, +    return advance(iterator, numberToSkip);, +  }, +, +  /**, +   * Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times, +   * or until {@code hasNext()} returns {@code false}, whichever comes first., +   *, +   * @return the number of elements the iterator was advanced, +   * @since 13.0 (since 3.0 as {@code Iterators.skip}), +   */, +  @Beta, +  public static int advance(Iterator<?> iterator, int numberToAdvance) {, +    checkArgument(numberToAdvance >= 0, "number to advance cannot be negative");, +    for (i = 0; i < numberToAdvance && iterator.hasNext(); i++) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * @deprecated This method has been renamed to {@link #advance(java.util.Iterator, int) advance}., +   *     This method is scheduled to be deleted in Guava 14.0., +  @Deprecated, +    return advance(iterator, numberToSkip);, +  }, +, +  /**, +   * Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times, +   * or until {@code hasNext()} returns {@code false}, whichever comes first., +   *, +   * @return the number of elements the iterator was advanced, +   * @since 13.0 (since 3.0 as {@code Iterators.skip}), +   */, +  @Beta, +  public static int advance(Iterator<?> iterator, int numberToAdvance) {, +    checkArgument(numberToAdvance >= 0, "number to advance cannot be negative");, +    for (i = 0; i < numberToAdvance && iterator.hasNext(); i++) {, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +import static com.google.common.collect.Iterators.advance;, +  public void testAdvance_basic() {, +    advance(iterator, 1);, +  public void testAdvance_pastEnd() {, +    advance(iterator, 5);, +  public void testAdvance_illegalArgument() {, +      advance(iterator, -1);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * @deprecated This method has been renamed to {@link #advance(java.util.Iterator, int) advance}., +   *     This method is scheduled to be deleted in Guava 14.0., +  @Deprecated, +    return advance(iterator, numberToSkip);, +  }, +, +  /**, +   * Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times, +   * or until {@code hasNext()} returns {@code false}, whichever comes first., +   *, +   * @return the number of elements the iterator was advanced, +   * @since 13.0 (since 3.0 as {@code Iterators.skip}), +   */, +  @Beta, +  public static int advance(Iterator<?> iterator, int numberToAdvance) {, +    checkArgument(numberToAdvance >= 0, "number to advance cannot be negative");, +    for (i = 0; i < numberToAdvance && iterator.hasNext(); i++) {, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +import static com.google.common.collect.Iterators.advance;, +  public void testAdvance_basic() {, +    advance(iterator, 1);, +  public void testAdvance_pastEnd() {, +    advance(iterator, 5);, +  public void testAdvance_illegalArgument() {, +      advance(iterator, -1);, +++ b/guava/src/com/google/common/collect/Iterators.java, +   * @deprecated This method has been renamed to {@link #advance(java.util.Iterator, int) advance}., +   *     This method is scheduled to be deleted in Guava 14.0., +  @Deprecated, +    return advance(iterator, numberToSkip);, +  }, +, +  /**, +   * Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times, +   * or until {@code hasNext()} returns {@code false}, whichever comes first., +   *, +   * @return the number of elements the iterator was advanced, +   * @since 13.0 (since 3.0 as {@code Iterators.skip}), +   */, +  @Beta, +  public static int advance(Iterator<?> iterator, int numberToAdvance) {, +    checkArgument(numberToAdvance >= 0, "number to advance cannot be negative");, +    for (i = 0; i < numberToAdvance && iterator.hasNext(); i++) {]