[+++ b/android/guava-tests/test/com/google/common/base/ThrowablesTest.java, +  public void testGetRootCause_Loop() {, +    Exception cause = new Exception();, +    Exception exception = new Exception(cause);, +    cause.initCause(exception);, +    try {, +      Throwables.getRootCause(cause);, +      fail("Should have throw IAE");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testGetCasualChainLoop() {, +    Exception cause = new Exception();, +    Exception exception = new Exception(cause);, +    cause.initCause(exception);, +    try {, +      Throwables.getCausalChain(cause);, +      fail("Should have throw IAE");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/base/ThrowablesTest.java, +  public void testGetRootCause_Loop() {, +    Exception cause = new Exception();, +    Exception exception = new Exception(cause);, +    cause.initCause(exception);, +    try {, +      Throwables.getRootCause(cause);, +      fail("Should have throw IAE");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testGetCasualChainLoop() {, +    Exception cause = new Exception();, +    Exception exception = new Exception(cause);, +    cause.initCause(exception);, +    try {, +      Throwables.getCausalChain(cause);, +      fail("Should have throw IAE");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +++ b/android/guava/src/com/google/common/base/Throwables.java, +   *, +   * @throws IllegalArgumentException if there is a loop in the causal chain, +    // Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches, +    // the slower pointer, then there's a loop., +    Throwable slowPointer = throwable;, +    boolean advanceSlowPointer = false;, +, +, +      if (throwable == slowPointer) {, +        throw new IllegalArgumentException("Loop in causal chain detected @ " + throwable);, +      }, +      if (advanceSlowPointer) {, +        slowPointer = slowPointer.getCause();, +      }, +      advanceSlowPointer = !advanceSlowPointer; // only advance every other iteration, +   * @throws IllegalArgumentException if there is a loop in the causal chain, +, +    // Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches, +    // the slower pointer, then there's a loop., +    Throwable slowPointer = throwable;, +    boolean advanceSlowPointer = false;, +, +    Throwable cause;, +    while ((cause = throwable.getCause()) != null) {, +      throwable = cause;, +      causes.add(throwable);, +, +      if (throwable == slowPointer) {, +        throw new IllegalArgumentException("Loop in causal chain detected @ " + throwable);, +      }, +      if (advanceSlowPointer) {, +        slowPointer = slowPointer.getCause();, +      }, +      advanceSlowPointer = !advanceSlowPointer; // only advance every other iteration, +++ b/android/guava-tests/test/com/google/common/base/ThrowablesTest.java, +  public void testGetRootCause_Loop() {, +    Exception cause = new Exception();, +    Exception exception = new Exception(cause);, +    cause.initCause(exception);, +    try {, +      Throwables.getRootCause(cause);, +      fail("Should have throw IAE");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testGetCasualChainLoop() {, +    Exception cause = new Exception();, +    Exception exception = new Exception(cause);, +    cause.initCause(exception);, +    try {, +      Throwables.getCausalChain(cause);, +      fail("Should have throw IAE");]