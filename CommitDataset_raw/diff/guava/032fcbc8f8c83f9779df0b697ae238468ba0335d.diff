[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}., +++ b/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +      @Override public final ListenableFuture<State> start() {, +        return delegate.start();, +      }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}., +++ b/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +      @Override public final ListenableFuture<State> start() {, +        return delegate.start();, +      }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}., +++ b/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +      @Override public final ListenableFuture<State> start() {, +        return delegate.start();, +      }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}., +++ b/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +      @Override public final ListenableFuture<State> start() {, +        return delegate.start();, +      }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java, + * {@link Scheduler}. When this service is asked to stop via {@link #stopAsync} it will cancel the, + * periodic task (but not interrupt it) and wait for it to stop before running the, + * {@link #shutDown} method., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}., +++ b/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +      @Override public final ListenableFuture<State> start() {, +        return delegate.start();, +      }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java, + * {@link Scheduler}. When this service is asked to stop via {@link #stopAsync} it will cancel the, + * periodic task (but not interrupt it) and wait for it to stop before running the, + * {@link #shutDown} method., +++ b/guava/src/com/google/common/util/concurrent/AbstractService.java, +, +              case TERMINATED:  // fall-through, +              case FAILED:  // fall-through, +              case NEW:  // fall-through, +, +   * This method is called by {@link #startAsync} to initiate service startup. The invocation of, +   * this method should cause a call to {@link #notifyStarted()}, either during this method's run,, +   * or after it has returned. If startup fails, the invocation should cause a call to, +   * convenient. It is invoked exactly once on service startup, even when {@link #startAsync} is, +   * called multiple times., +   * convenient. It is invoked exactly once on service shutdown, even when {@link #stopAsync} is, +   * called multiple times., +    return this;, +  }, +, +  @Deprecated, +  @Override, +  public final ListenableFuture<State> stop() {, +  // A change from one service state to another, plus the result of the change., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +   * #notifyStopped} after calling {@link #startAsync} and {@link #stopAsync}., +++ b/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java, +      @Override public final ListenableFuture<State> start() {, +        return delegate.start();, +      }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java, + * {@link Scheduler}. When this service is asked to stop via {@link #stopAsync} it will cancel the, + * periodic task (but not interrupt it) and wait for it to stop before running the, + * {@link #shutDown} method., +++ b/guava/src/com/google/common/util/concurrent/AbstractService.java, +, +              case TERMINATED:  // fall-through, +              case FAILED:  // fall-through, +              case NEW:  // fall-through, +, +   * This method is called by {@link #startAsync} to initiate service startup. The invocation of, +   * this method should cause a call to {@link #notifyStarted()}, either during this method's run,, +   * or after it has returned. If startup fails, the invocation should cause a call to, +   * convenient. It is invoked exactly once on service startup, even when {@link #startAsync} is, +   * called multiple times., +   * convenient. It is invoked exactly once on service shutdown, even when {@link #stopAsync} is, +   * called multiple times., +    return this;, +  }]