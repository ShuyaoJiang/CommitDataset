[+++ b/guava-tests/test/com/google/common/collect/ForwardingNavigableSetTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.collect.testing.SafeTreeSet;, +import com.google.common.collect.testing.SetTestSuiteBuilder;, +import com.google.common.collect.testing.TestStringSetGenerator;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.List;, +import java.util.NavigableSet;, +import java.util.Set;, +import java.util.SortedSet;, +, +import junit.framework.Test;, +import junit.framework.TestSuite;, +, +/**, + * Tests for {@code ForwardingNavigableSet}., + *, + * @author Louis Wasserman, + */, +public class ForwardingNavigableSetTest extends ForwardingSortedSetTest {, +  static class StandardImplForwardingNavigableSet<T>, +      extends ForwardingNavigableSet<T> {, +    private final NavigableSet<T> backingSet;, +, +    StandardImplForwardingNavigableSet(NavigableSet<T> backingSet) {, +      this.backingSet = backingSet;, +    }, +, +    @Override protected NavigableSet<T> delegate() {, +      return backingSet;, +    }, +, +    @Override public boolean equals(Object object) {, +      return standardEquals(object);, +    }, +, +    @Override public int hashCode() {, +      return standardHashCode();, +    }, +, +    @Override public boolean addAll(Collection<? extends T> collection) {, +      return standardAddAll(collection);, +    }, +, +    @Override public void clear() {, +      standardClear();, +    }, +, +    @Override public boolean contains(Object object) {, +      return standardContains(object);, +    }, +, +    @Override public boolean containsAll(Collection<?> collection) {, +      return standardContainsAll(collection);, +    }, +, +    @Override public boolean remove(Object object) {, +      return standardRemove(object);, +    }, +, +    @Override public boolean removeAll(Collection<?> collection) {, +      return standardRemoveAll(collection);, +    }, +, +    @Override public boolean retainAll(Collection<?> collection) {, +      return standardRetainAll(collection);, +    }, +, +    @Override public Object[] toArray() {, +      return standardToArray();, +    }, +, +    @Override public <T> T[] toArray(T[] array) {, +      return standardToArray(array);, +    }, +, +    @Override public String toString() {, +      return standardToString();, +    }]