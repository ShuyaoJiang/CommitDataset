[+++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +        : ClassPath.from(getClass().getClassLoader()).getTopLevelClasses(packageName)) {, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +        : ClassPath.from(getClass().getClassLoader()).getTopLevelClasses(packageName)) {, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    for (ClassInfo classInfo : classpath.getTopLevelClasses(ClassPathTest.class.getPackage().getName())) {, +        : classpath.getTopLevelClassesRecursive(ClassPathTest.class.getPackage().getName())) {, +    assertEquals(findClass(ClassPath.from(sub1).getTopLevelClasses(), ClassPathTest.class),, +        findClass(ClassPath.from(sub2).getTopLevelClasses(), ClassPathTest.class));, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +        : ClassPath.from(getClass().getClassLoader()).getTopLevelClasses(packageName)) {, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    for (ClassInfo classInfo : classpath.getTopLevelClasses(ClassPathTest.class.getPackage().getName())) {, +        : classpath.getTopLevelClassesRecursive(ClassPathTest.class.getPackage().getName())) {, +    assertEquals(findClass(ClassPath.from(sub1).getTopLevelClasses(), ClassPathTest.class),, +        findClass(ClassPath.from(sub2).getTopLevelClasses(), ClassPathTest.class));, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +import com.google.common.collect.ImmutableSortedSet;, +import com.google.common.collect.Ordering;, +    ImmutableSortedSet.Builder<ClassInfo> builder = new ImmutableSortedSet.Builder<ClassInfo>(, +        Ordering.usingToString());, +  public ImmutableSet<ClassInfo> getTopLevelClasses() {, +  public ImmutableSet<ClassInfo> getTopLevelClasses(String packageName) {, +  public ImmutableSet<ClassInfo> getTopLevelClassesRecursive(String packageName) {]