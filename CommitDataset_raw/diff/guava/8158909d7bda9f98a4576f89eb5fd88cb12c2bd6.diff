[+++ b/android/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +    @GwtIncompatible, +    public void testBuilderExactlySizedReusesArray() {, +      ImmutableBiMap.Builder<Integer, Integer> builder = ImmutableBiMap.builderWithExpectedSize(10);, +      Object[] builderArray = builder.alternatingKeysAndValues;, +      for (int i = 0; i < 10; i++) {, +        builder.put(i, i);, +      }, +      Object[] builderArrayAfterPuts = builder.alternatingKeysAndValues;, +      RegularImmutableBiMap<Integer, Integer> map =, +          (RegularImmutableBiMap<Integer, Integer>) builder.build();, +      Object[] mapInternalArray = map.alternatingKeysAndValues;, +      assertSame(builderArray, builderArrayAfterPuts);, +      assertSame(builderArray, mapInternalArray);, +    }, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +    @GwtIncompatible, +    public void testBuilderExactlySizedReusesArray() {, +      ImmutableBiMap.Builder<Integer, Integer> builder = ImmutableBiMap.builderWithExpectedSize(10);, +      Object[] builderArray = builder.alternatingKeysAndValues;, +      for (int i = 0; i < 10; i++) {, +        builder.put(i, i);, +      }, +      Object[] builderArrayAfterPuts = builder.alternatingKeysAndValues;, +      RegularImmutableBiMap<Integer, Integer> map =, +          (RegularImmutableBiMap<Integer, Integer>) builder.build();, +      Object[] mapInternalArray = map.alternatingKeysAndValues;, +      assertSame(builderArray, builderArrayAfterPuts);, +      assertSame(builderArray, mapInternalArray);, +    }, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java, +    @GwtIncompatible, +    public void testBuilderExactlySizedReusesArray() {, +      ImmutableMap.Builder<Integer, Integer> builder = ImmutableMap.builderWithExpectedSize(10);, +      Object[] builderArray = builder.alternatingKeysAndValues;, +      for (int i = 0; i < 10; i++) {, +        builder.put(i, i);, +      }, +      Object[] builderArrayAfterPuts = builder.alternatingKeysAndValues;, +      RegularImmutableMap<Integer, Integer> map =, +          (RegularImmutableMap<Integer, Integer>) builder.build();, +      Object[] mapInternalArray = map.alternatingKeysAndValues;, +      assertSame(builderArray, builderArrayAfterPuts);, +      assertSame(builderArray, mapInternalArray);, +    }, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +    @GwtIncompatible, +    public void testBuilderExactlySizedReusesArray() {, +      ImmutableBiMap.Builder<Integer, Integer> builder = ImmutableBiMap.builderWithExpectedSize(10);, +      Object[] builderArray = builder.alternatingKeysAndValues;, +      for (int i = 0; i < 10; i++) {, +        builder.put(i, i);, +      }, +      Object[] builderArrayAfterPuts = builder.alternatingKeysAndValues;, +      RegularImmutableBiMap<Integer, Integer> map =, +          (RegularImmutableBiMap<Integer, Integer>) builder.build();, +      Object[] mapInternalArray = map.alternatingKeysAndValues;, +      assertSame(builderArray, builderArrayAfterPuts);, +      assertSame(builderArray, mapInternalArray);, +    }, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java, +    @GwtIncompatible, +    public void testBuilderExactlySizedReusesArray() {, +      ImmutableMap.Builder<Integer, Integer> builder = ImmutableMap.builderWithExpectedSize(10);, +      Object[] builderArray = builder.alternatingKeysAndValues;, +      for (int i = 0; i < 10; i++) {, +        builder.put(i, i);, +      }, +      Object[] builderArrayAfterPuts = builder.alternatingKeysAndValues;, +      RegularImmutableMap<Integer, Integer> map =, +          (RegularImmutableMap<Integer, Integer>) builder.build();, +      Object[] mapInternalArray = map.alternatingKeysAndValues;, +      assertSame(builderArray, builderArrayAfterPuts);, +      assertSame(builderArray, mapInternalArray);, +    }, +, +++ b/android/guava/src/com/google/common/collect/ImmutableBiMap.java, +import static com.google.common.collect.CollectPreconditions.checkNonnegative;, +   * Returns a new builder, expecting the specified number of entries to be added., +   *, +   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link, +   * Builder#build} is called, the builder is likely to perform better than an unsized {@link, +   * #builder()} would have., +   *, +   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,, +   * but not exactly, the number of entries added to the builder., +   * , +   * @since 24.0, +   */, +  @Beta, +  public static <K, V> Builder<K, V> builderWithExpectedSize(int expectedSize) {, +    checkNonnegative(expectedSize, "expectedSize");, +    return new Builder<K, V>(expectedSize);, +  }, +, +  /**]