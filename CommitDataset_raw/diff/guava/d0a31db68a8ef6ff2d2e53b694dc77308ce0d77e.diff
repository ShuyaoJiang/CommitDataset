[+++ b/guava/src/com/google/common/graph/Graph.java, + * <p>If you don't need to associate value objects with edges (e.g. you're modeling a binary, + * relation where an edge either exists or doesn't), see the {@link BasicGraph} interface., + * TODO(b/30133524): Rewrite the top-level javadoc from scratch., +   * Returns {@code true} iff {@code object} is a {@link Graph} that has the same elements and the, +   * same structural relationships as those in this graph., +++ b/guava/src/com/google/common/graph/Graph.java, + * <p>If you don't need to associate value objects with edges (e.g. you're modeling a binary, + * relation where an edge either exists or doesn't), see the {@link BasicGraph} interface., + * TODO(b/30133524): Rewrite the top-level javadoc from scratch., +   * Returns {@code true} iff {@code object} is a {@link Graph} that has the same elements and the, +   * same structural relationships as those in this graph., +++ b/guava/src/com/google/common/graph/ImmutableBasicGraph.java, + * A {@link BasicGraph} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(BasicGraph)}., +public class ImmutableBasicGraph<N> extends ImmutableGraph<N, Presence> implements BasicGraph<N> {, +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/Graph.java, + * <p>If you don't need to associate value objects with edges (e.g. you're modeling a binary, + * relation where an edge either exists or doesn't), see the {@link BasicGraph} interface., + * TODO(b/30133524): Rewrite the top-level javadoc from scratch., +   * Returns {@code true} iff {@code object} is a {@link Graph} that has the same elements and the, +   * same structural relationships as those in this graph., +++ b/guava/src/com/google/common/graph/ImmutableBasicGraph.java, + * A {@link BasicGraph} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(BasicGraph)}., +public class ImmutableBasicGraph<N> extends ImmutableGraph<N, Presence> implements BasicGraph<N> {, +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/ImmutableGraph.java, + * A {@link Graph} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(Graph)}., +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/Graph.java, + * <p>If you don't need to associate value objects with edges (e.g. you're modeling a binary, + * relation where an edge either exists or doesn't), see the {@link BasicGraph} interface., + * TODO(b/30133524): Rewrite the top-level javadoc from scratch., +   * Returns {@code true} iff {@code object} is a {@link Graph} that has the same elements and the, +   * same structural relationships as those in this graph., +++ b/guava/src/com/google/common/graph/ImmutableBasicGraph.java, + * A {@link BasicGraph} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(BasicGraph)}., +public class ImmutableBasicGraph<N> extends ImmutableGraph<N, Presence> implements BasicGraph<N> {, +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/ImmutableGraph.java, + * A {@link Graph} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(Graph)}., +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/ImmutableNetwork.java, + * A {@link Network} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(Network)}., +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/Graph.java, + * <p>If you don't need to associate value objects with edges (e.g. you're modeling a binary, + * relation where an edge either exists or doesn't), see the {@link BasicGraph} interface., + * TODO(b/30133524): Rewrite the top-level javadoc from scratch., +   * Returns {@code true} iff {@code object} is a {@link Graph} that has the same elements and the, +   * same structural relationships as those in this graph., +++ b/guava/src/com/google/common/graph/ImmutableBasicGraph.java, + * A {@link BasicGraph} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(BasicGraph)}., +public class ImmutableBasicGraph<N> extends ImmutableGraph<N, Presence> implements BasicGraph<N> {, +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/ImmutableGraph.java, + * A {@link Graph} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(Graph)}., +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/ImmutableNetwork.java, + * A {@link Network} whose elements and structural relationships will never change. Instances of, + * this class may be obtained with {@link #copyOf(Network)}., +  /**, +   * To ensure the immutability contract is maintained, there must be no public constructors., +   */, +++ b/guava/src/com/google/common/graph/Network.java, +   * Returns {@code true} iff {@code object} is a {@link Network} that has the same elements and the, +   * same structural relationships as those in this network.]