[+++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, + * An abstract implementation of {@link ListenableFuture}, intended for advanced users only. More, + * common ways to create a {@code ListenableFuture} include instantiating a {@link SettableFuture},, + * submitting a task to a {@link ListeningExecutorService}, and deriving a {@code Future} from an, + * existing one, typically using methods like {@link Futures#transform(ListenableFuture, Function), + * Futures.transform} and {@link Futures#catching(ListenableFuture, Class, Function), + * Futures.catching}., + * <p>This class implements all methods in {@code ListenableFuture}. Subclasses should provide a way, + * to set the result of the computation through the protected methods {@link #set(Object)}, {@link, + * #setFuture(ListenableFuture)} and {@link #setException(Throwable)}. Subclasses may also override, + * {@link #interruptTask()}, which will be invoked automatically if a call to {@link, + * #cancel(boolean) cancel(true)} succeeds in canceling the future. Subclasses should rarely, + * override other methods., +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, + * An abstract implementation of {@link ListenableFuture}, intended for advanced users only. More, + * common ways to create a {@code ListenableFuture} include instantiating a {@link SettableFuture},, + * submitting a task to a {@link ListeningExecutorService}, and deriving a {@code Future} from an, + * existing one, typically using methods like {@link Futures#transform(ListenableFuture, Function), + * Futures.transform} and {@link Futures#catching(ListenableFuture, Class, Function), + * Futures.catching}., + * <p>This class implements all methods in {@code ListenableFuture}. Subclasses should provide a way, + * to set the result of the computation through the protected methods {@link #set(Object)}, {@link, + * #setFuture(ListenableFuture)} and {@link #setException(Throwable)}. Subclasses may also override, + * {@link #interruptTask()}, which will be invoked automatically if a call to {@link, + * #cancel(boolean) cancel(true)} succeeds in canceling the future. Subclasses should rarely, + * override other methods., +++ b/guava/src/com/google/common/util/concurrent/ListenableFuture.java, + * methods so that users can take advantages of the {@linkplain Futures, + * utilities built atop the class}. The way that they will create {@code, + * ListenableFuture} instances depends on how they currently create {@code, + * Future} instances:]