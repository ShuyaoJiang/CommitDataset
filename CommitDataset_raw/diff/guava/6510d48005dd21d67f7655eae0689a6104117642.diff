[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return toMap(keys.iterator(), valueFunction);, +  }, +, +  /**, +   * Returns an immutable map for which the given {@code keys} are mapped to, +   * values by the given function in the order they appear in the original, +   * iterator. If {@code keys} contains duplicate elements, the returned map, +   * will contain each distinct key once in the order it first appears in, +   * {@code keys}., +   *, +   * @throws NullPointerException if any element of {@code keys} is, +   *     {@code null}, or if {@code valueFunction} produces {@code null}, +   *     for any key, +   * @since 14.0, +   */, +  @Beta, +  public static <K, V> ImmutableMap<K, V> toMap(Iterator<K> keys,, +      Function<? super K, V> valueFunction) {, +    while (keys.hasNext()) {, +      K key = keys.next();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return toMap(keys.iterator(), valueFunction);, +  }, +, +  /**, +   * Returns an immutable map for which the given {@code keys} are mapped to, +   * values by the given function in the order they appear in the original, +   * iterator. If {@code keys} contains duplicate elements, the returned map, +   * will contain each distinct key once in the order it first appears in, +   * {@code keys}., +   *, +   * @throws NullPointerException if any element of {@code keys} is, +   *     {@code null}, or if {@code valueFunction} produces {@code null}, +   *     for any key, +   * @since 14.0, +   */, +  @Beta, +  public static <K, V> ImmutableMap<K, V> toMap(Iterator<K> keys,, +      Function<? super K, V> valueFunction) {, +    while (keys.hasNext()) {, +      K key = keys.next();, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +  public void testToMapIterator() {, +    Iterator<String> strings = ImmutableList.of("one", "two", "three").iterator();, +    ImmutableMap<String, Integer> map = Maps.toMap(strings, LENGTH_FUNCTION);, +    assertEquals(ImmutableMap.of("one", 3, "two", 3, "three", 5), map);, +    ASSERT.that(map.entrySet()).hasContentsInOrder(, +        mapEntry("one", 3),, +        mapEntry("two", 3),, +        mapEntry("three", 5));, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return toMap(keys.iterator(), valueFunction);, +  }, +, +  /**, +   * Returns an immutable map for which the given {@code keys} are mapped to, +   * values by the given function in the order they appear in the original, +   * iterator. If {@code keys} contains duplicate elements, the returned map, +   * will contain each distinct key once in the order it first appears in, +   * {@code keys}., +   *, +   * @throws NullPointerException if any element of {@code keys} is, +   *     {@code null}, or if {@code valueFunction} produces {@code null}, +   *     for any key, +   * @since 14.0, +   */, +  @Beta, +  public static <K, V> ImmutableMap<K, V> toMap(Iterator<K> keys,, +      Function<? super K, V> valueFunction) {, +    while (keys.hasNext()) {, +      K key = keys.next();, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +  public void testToMapIterator() {, +    Iterator<String> strings = ImmutableList.of("one", "two", "three").iterator();, +    ImmutableMap<String, Integer> map = Maps.toMap(strings, LENGTH_FUNCTION);, +    assertEquals(ImmutableMap.of("one", 3, "two", 3, "three", 5), map);, +    ASSERT.that(map.entrySet()).hasContentsInOrder(, +        mapEntry("one", 3),, +        mapEntry("two", 3),, +        mapEntry("three", 5));, +  }, +, +++ b/guava/src/com/google/common/collect/Maps.java, +    return toMap(keys.iterator(), valueFunction);, +  }, +, +  /**, +   * Returns an immutable map for which the given {@code keys} are mapped to, +   * values by the given function in the order they appear in the original, +   * iterator. If {@code keys} contains duplicate elements, the returned map, +   * will contain each distinct key once in the order it first appears in, +   * {@code keys}., +   *, +   * @throws NullPointerException if any element of {@code keys} is, +   *     {@code null}, or if {@code valueFunction} produces {@code null}, +   *     for any key, +   * @since 14.0]