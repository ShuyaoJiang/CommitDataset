[+++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +  /**, +   * Returns the arithmetic mean of {@code x} and {@code y}, rounded towards, +   * negative infinity. This method is overflow resilient., +   *, +   * @since 14.0, +   */, +  public static int mean(int x, int y) {, +    // Efficient method for computing the arithmetic mean., +    // The alternative (x + y) / 2 fails for large values., +    // The alternative (x + y) >>> 1 fails for negative values., +    return (x & y) + ((x ^ y) >> 1);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +  /**, +   * Returns the arithmetic mean of {@code x} and {@code y}, rounded towards, +   * negative infinity. This method is overflow resilient., +   *, +   * @since 14.0, +   */, +  public static int mean(int x, int y) {, +    // Efficient method for computing the arithmetic mean., +    // The alternative (x + y) / 2 fails for large values., +    // The alternative (x + y) >>> 1 fails for negative values., +    return (x & y) + ((x ^ y) >> 1);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +  /**, +   * Returns the arithmetic mean of {@code x} and {@code y}, rounded toward, +   * negative infinity. This method is resilient to overflow., +   *, +   * @since 14.0, +   */, +  public static long mean(long x, long y) {, +    // Efficient method for computing the arithmetic mean., +    // The alternative (x + y) / 2 fails for large values., +    // The alternative (x + y) >>> 1 fails for negative values., +    return (x & y) + ((x ^ y) >> 1);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +  /**, +   * Returns the arithmetic mean of {@code x} and {@code y}, rounded towards, +   * negative infinity. This method is overflow resilient., +   *, +   * @since 14.0, +   */, +  public static int mean(int x, int y) {, +    // Efficient method for computing the arithmetic mean., +    // The alternative (x + y) / 2 fails for large values., +    // The alternative (x + y) >>> 1 fails for negative values., +    return (x & y) + ((x ^ y) >> 1);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +  /**, +   * Returns the arithmetic mean of {@code x} and {@code y}, rounded toward, +   * negative infinity. This method is resilient to overflow., +   *, +   * @since 14.0, +   */, +  public static long mean(long x, long y) {, +    // Efficient method for computing the arithmetic mean., +    // The alternative (x + y) / 2 fails for large values., +    // The alternative (x + y) >>> 1 fails for negative values., +    return (x & y) + ((x ^ y) >> 1);, +  }, +, +++ b/guava-tests/test/com/google/common/math/IntMathTest.java, +  @GwtIncompatible("java.math.BigInteger"), +  public void testMean() {, +    // Odd-sized ranges have an obvious mean, +    assertMean(2, 1, 3);, +, +    assertMean(-2, -3, -1);, +    assertMean(0, -1, 1);, +    assertMean(1, -1, 3);, +    assertMean((1 << 30) - 1, -1, Integer.MAX_VALUE);, +, +    // Even-sized ranges should prefer the lower mean, +    assertMean(2, 1, 4);, +    assertMean(-3, -4, -1);, +    assertMean(0, -1, 2);, +    assertMean(0, Integer.MIN_VALUE + 2, Integer.MAX_VALUE);, +    assertMean(0, 0, 1);, +    assertMean(-1, -1, 0);, +    assertMean(-1, Integer.MIN_VALUE, Integer.MAX_VALUE);, +, +    // x == y == mean, +    assertMean(1, 1, 1);, +    assertMean(0, 0, 0);, +    assertMean(-1, -1, -1);, +    assertMean(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);, +    assertMean(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);, +, +    // Exhaustive checks, +    for (int x : ALL_INTEGER_CANDIDATES) {, +      for (int y : ALL_INTEGER_CANDIDATES) {]