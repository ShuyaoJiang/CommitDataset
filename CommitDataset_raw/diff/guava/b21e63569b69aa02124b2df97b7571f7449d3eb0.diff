[+++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +++ b/guava/src/com/google/common/collect/RegularImmutableList.java, +++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +++ b/guava/src/com/google/common/collect/RegularImmutableList.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  /**, +   * <p>Subclasses can invoke this method to mark the future as cancelled., +   * This will set the state of the future to {@link, +   * AbstractFuture.Sync#CANCELLED} and call {@link #done()} if the state was, +   * successfully changed., +   *, +   * @return true if the state was successfully changed., +   * @deprecated Most implementations will be satisfied with the default, +   * implementation of {@link #cancel(boolean)} and not need to call this method, +   * at all. Those that are not can delegate to {@code, +   * super.cancel(mayInterruptIfRunning)} or, to get behavior exactly equivalent, +   * to this method, {@code super.cancel(false)}. This method will be removed in, +   * Guava release 11., +   */, +  @Beta @Deprecated, +  protected final boolean cancel() {, +    boolean result = sync.cancel();, +    if (result) {, +      done();, +    }, +    return result;, +  }, +, +  /**, +   * <b>Deprecated.</b> {@linkplain #addListener Add listeners} (possible executed, +   * in {@link MoreExecutors#sameThreadExecutor}) to perform the work currently, +   * performed by your {@code done} implementation. This method will be removed, +   * in Guava release 11., +   *, +  @Beta @Deprecated protected, +  void done() {, +++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +++ b/guava/src/com/google/common/collect/RegularImmutableList.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  /**, +   * <p>Subclasses can invoke this method to mark the future as cancelled., +   * This will set the state of the future to {@link, +   * AbstractFuture.Sync#CANCELLED} and call {@link #done()} if the state was, +   * successfully changed., +   *, +   * @return true if the state was successfully changed., +   * @deprecated Most implementations will be satisfied with the default, +   * implementation of {@link #cancel(boolean)} and not need to call this method, +   * at all. Those that are not can delegate to {@code, +   * super.cancel(mayInterruptIfRunning)} or, to get behavior exactly equivalent, +   * to this method, {@code super.cancel(false)}. This method will be removed in, +   * Guava release 11., +   */, +  @Beta @Deprecated, +  protected final boolean cancel() {, +    boolean result = sync.cancel();, +    if (result) {, +      done();, +    }, +    return result;, +  }, +, +  /**, +   * <b>Deprecated.</b> {@linkplain #addListener Add listeners} (possible executed, +   * in {@link MoreExecutors#sameThreadExecutor}) to perform the work currently, +   * performed by your {@code done} implementation. This method will be removed, +   * in Guava release 11., +   *, +  @Beta @Deprecated protected, +  void done() {, +++ b/guava/src/com/google/common/util/concurrent/ListenableFutureTask.java, +   * <b>Deprecated.</b> Use {@link #create(Callable)} instead. This method will be, +   * removed in Guava release 11., +   *, +  @Beta @Deprecated public, +  ListenableFutureTask(Callable<V> callable) {, +   * <b>Deprecated. Use {@link #create(Runnable, Object)} instead. This method, +   * will be removed in Guava release 11.</b>, +   *, +  @Beta @Deprecated public, +  ListenableFutureTask(Runnable runnable, @Nullable V result) {]