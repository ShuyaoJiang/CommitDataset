[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.Map;, +        return spliterator(sequence);, +  private Iterator<String> spliterator(CharSequence sequence) {, +    return strategy.iterator(this, sequence);, +  }, +, +  /**, +   * Returns a {@code MapSplitter} which splits entries based on this splitter,, +   * and splits entries into keys and values using the specified separator., +   *, +   * @since Guava release 10, +   */, +  @CheckReturnValue, +  @Beta, +  public MapSplitter withKeyValueSeparator(String separator) {, +    return withKeyValueSeparator(on(separator));, +  }, +, +  /**, +   * Returns a {@code MapSplitter} which splits entries based on this splitter,, +   * and splits entries into keys and values using the specified key-value, +   * splitter., +   *, +   * @since Guava release 10, +   */, +  @CheckReturnValue, +  @Beta, +  public MapSplitter withKeyValueSeparator(Splitter keyValueSplitter) {, +    return new MapSplitter(this, keyValueSplitter);, +  }, +, +  /**, +   * An object that splits strings into maps as {@code Splitter} splits, +   * iterables and lists. Like {@code Splitter}, it is thread-safe and, +   * immutable., +   *, +   * @since Guava release 10, +   */, +  @Beta, +  public static final class MapSplitter {, +    private static final String INVALID_ENTRY_MESSAGE =, +        "Chunk [%s] is not a valid entry";, +    private final Splitter outerSplitter;, +    private final Splitter entrySplitter;, +, +    private MapSplitter(Splitter outerSplitter, Splitter entrySplitter) {, +      this.outerSplitter = outerSplitter; // only "this" is passed, +      this.entrySplitter = checkNotNull(entrySplitter);, +    }, +, +    /**, +     * Splits {@code sequence} into substrings, splits each substring into, +     * an entry, and returns an unmodifiable map with each of the entries. For, +     * example, <code>, +     * Splitter.on(';').trimResults().withKeyValueSeparator("=>"), +     * .split("a=>b ; c=>b"), +     * </code> will return a mapping from {@code "a"} to {@code "b"} and, +     * {@code "c"} to {@code b}., +     *, +     * @throws IllegalArgumentException if the specified sequence does not split, +     *         into valid map entries, or if there are duplicate keys, +     */, +    public Map<String, String> split(CharSequence sequence) {, +      Map<String, String> map = new LinkedHashMap<String, String>();, +      for (String entry : outerSplitter.split(sequence)) {, +        Iterator<String> entryFields = entrySplitter.spliterator(entry);, +, +        checkArgument(entryFields.hasNext(), INVALID_ENTRY_MESSAGE, entry);, +        String key = entryFields.next();, +        checkArgument(!map.containsKey(key), "Duplicate key [%s] found.", key);, +, +        checkArgument(entryFields.hasNext(), INVALID_ENTRY_MESSAGE, entry);, +        String value = entryFields.next();, +        map.put(key, value);, +, +        checkArgument(!entryFields.hasNext(), INVALID_ENTRY_MESSAGE, entry);, +      }, +      return Collections.unmodifiableMap(map);, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.Map;, +        return spliterator(sequence);, +  private Iterator<String> spliterator(CharSequence sequence) {, +    return strategy.iterator(this, sequence);, +  }, +, +  /**, +   * Returns a {@code MapSplitter} which splits entries based on this splitter,, +   * and splits entries into keys and values using the specified separator., +   *, +   * @since Guava release 10, +   */, +  @CheckReturnValue]