[+++ b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java, +  private static void assertParseFails(String value) {, +      fail();, +    } catch (NumberFormatException expected) {, +    assertParseFails("256");, +  private static void assertParseFails(String value, int radix) {, +      fail();, +    } catch (NumberFormatException expected) {, +      assertParseFails(Integer.toString(-128, radix), radix);, +      assertParseFails(Integer.toString(256, radix), radix);, +++ b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java, +  private static void assertParseFails(String value) {, +      fail();, +    } catch (NumberFormatException expected) {, +    assertParseFails("256");, +  private static void assertParseFails(String value, int radix) {, +      fail();, +    } catch (NumberFormatException expected) {, +      assertParseFails(Integer.toString(-128, radix), radix);, +      assertParseFails(Integer.toString(256, radix), radix);, +++ b/guava/src/com/google/common/math/DoubleMath.java, +   * <p>The computed result is within 1 ulp of the exact result., +++ b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java, +  private static void assertParseFails(String value) {, +      fail();, +    } catch (NumberFormatException expected) {, +    assertParseFails("256");, +  private static void assertParseFails(String value, int radix) {, +      fail();, +    } catch (NumberFormatException expected) {, +      assertParseFails(Integer.toString(-128, radix), radix);, +      assertParseFails(Integer.toString(256, radix), radix);, +++ b/guava/src/com/google/common/math/DoubleMath.java, +   * <p>The computed result is within 1 ulp of the exact result., +++ b/guava/src/com/google/common/math/DoubleUtils.java, + * Utilities for {@code double} primitives., +++ b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java, +  private static void assertParseFails(String value) {, +      fail();, +    } catch (NumberFormatException expected) {, +    assertParseFails("256");, +  private static void assertParseFails(String value, int radix) {, +      fail();, +    } catch (NumberFormatException expected) {, +      assertParseFails(Integer.toString(-128, radix), radix);, +      assertParseFails(Integer.toString(256, radix), radix);, +++ b/guava/src/com/google/common/math/DoubleMath.java, +   * <p>The computed result is within 1 ulp of the exact result., +++ b/guava/src/com/google/common/math/DoubleUtils.java, + * Utilities for {@code double} primitives., +++ b/guava/src/com/google/common/primitives/UnsignedBytes.java, +            return (int) (((lw >>> n) & UNSIGNED_MASK) - ((rw >>> n) & UNSIGNED_MASK));]