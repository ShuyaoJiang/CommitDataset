[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import static com.google.common.io.ByteStreams.copy;, +import static com.google.common.io.ByteStreams.newInputStreamSupplier;, +, +import com.google.common.collect.ImmutableSet;, +import com.google.common.testing.TestLogHandler;, +  /** Provides an InputStream that throws an IOException on every read. */, +  /** Provides an OutputStream that throws an IOException on every write. */, +  /** Provides an InputStream that throws an IOException on close. */, +  static final InputSupplier<InputStream> BROKEN_CLOSE_INPUT =, +      new InputSupplier<InputStream>() {, +        @Override, +        public InputStream getInput() {, +          return new FilterInputStream(new ByteArrayInputStream(new byte[10])) {, +            @Override public void close() throws IOException {, +              throw new IOException("broken close input");, +            }, +          };, +        }, +      };, +, +  /** Provides an OutputStream that throws an IOException on every close. */, +  static final OutputSupplier<OutputStream> BROKEN_CLOSE_OUTPUT =, +      new OutputSupplier<OutputStream>() {, +        @Override, +        public OutputStream getOutput() {, +          return new FilterOutputStream(new ByteArrayOutputStream()) {, +            @Override public void close() throws IOException {, +              throw new IOException("broken close output");, +            }, +          };, +        }, +      };, +, +  /** Throws an IOException from getInput. */, +  static final InputSupplier<InputStream> BROKEN_GET_INPUT =, +      new InputSupplier<InputStream>() {, +        @Override, +        public InputStream getInput() throws IOException {, +          throw new IOException("broken get input");, +        }, +      };, +, +  /** Throws an IOException from getOutput. */, +  static final OutputSupplier<OutputStream> BROKEN_GET_OUTPUT =, +      new OutputSupplier<OutputStream>() {, +        @Override, +        public OutputStream getOutput() throws IOException {, +          throw new IOException("broken get output");, +        }, +      };, +, +  private static final ImmutableSet<InputSupplier<InputStream>> BROKEN_INPUTS =, +      ImmutableSet.of(BROKEN_CLOSE_INPUT, BROKEN_GET_INPUT, BROKEN_READ);, +  private static final ImmutableSet<OutputSupplier<OutputStream>> BROKEN_OUTPUTS, +      = ImmutableSet.of(BROKEN_CLOSE_OUTPUT, BROKEN_GET_OUTPUT, BROKEN_WRITE);, +, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +    } catch (IOException e) {, +  private static int getAndResetRecords(TestLogHandler logHandler) {, +    int records = logHandler.getStoredLogRecords().size();, +    logHandler.clear();, +    return records;, +  }, +, +  private static void runFailureTest(, +      InputSupplier<? extends InputStream> in, OutputSupplier<OutputStream> out) {, +    try {, +      copy(in, out);, +      fail();, +    } catch (IOException expected) {, +    }, +  }, +, +  private static OutputSupplier<OutputStream> newByteArrayOutputStreamSupplier() {, +    return new OutputSupplier<OutputStream>() {, +      @Override public OutputStream getOutput() {, +        return new ByteArrayOutputStream();, +      }, +    };, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import static com.google.common.io.ByteStreams.copy;, +import static com.google.common.io.ByteStreams.newInputStreamSupplier;, +, +import com.google.common.collect.ImmutableSet;, +import com.google.common.testing.TestLogHandler;, +  /** Provides an InputStream that throws an IOException on every read. */]