[+++ /dev/null, +++ /dev/null, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3),, +        entryOf(k4, v4));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3),, +        entryOf(k4, v4), entryOf(k5, v5));, +      return fromEntries(size, entries);, +    Entry<?, ?>[] entries = map.entrySet().toArray(EMPTY_ENTRY_ARRAY);, +    return fromEntries(entries.length, entries);, +  private static final Entry<?, ?>[] EMPTY_ENTRY_ARRAY = new Entry<?, ?>[0];, +, +      int n, Entry<?, ?>[] entries) {, +    switch (n) {, +        @SuppressWarnings("unchecked") // all callers only have Ks here, +        K key = (K) entries[0].getKey();, +        @SuppressWarnings("unchecked") // all callers only have Vs here, +        V value = (V) entries[0].getValue();, +        return new SingletonImmutableBiMap<K, V>(key, value);, +        return new RegularImmutableBiMap<K, V>(n, entries);, +++ /dev/null, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3),, +        entryOf(k4, v4));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3),, +        entryOf(k4, v4), entryOf(k5, v5));, +      return fromEntries(size, entries);, +    Entry<?, ?>[] entries = map.entrySet().toArray(EMPTY_ENTRY_ARRAY);, +    return fromEntries(entries.length, entries);, +  private static final Entry<?, ?>[] EMPTY_ENTRY_ARRAY = new Entry<?, ?>[0];, +, +      int n, Entry<?, ?>[] entries) {, +    switch (n) {, +        @SuppressWarnings("unchecked") // all callers only have Ks here, +        K key = (K) entries[0].getKey();, +        @SuppressWarnings("unchecked") // all callers only have Vs here, +        V value = (V) entries[0].getValue();, +        return new SingletonImmutableBiMap<K, V>(key, value);, +        return new RegularImmutableBiMap<K, V>(n, entries);, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, +++ /dev/null, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3),, +        entryOf(k4, v4));, +    return new RegularImmutableBiMap<K, V>(entryOf(k1, v1), entryOf(k2, v2), entryOf(k3, v3),, +        entryOf(k4, v4), entryOf(k5, v5));, +      return fromEntries(size, entries);, +    Entry<?, ?>[] entries = map.entrySet().toArray(EMPTY_ENTRY_ARRAY);, +    return fromEntries(entries.length, entries);, +  private static final Entry<?, ?>[] EMPTY_ENTRY_ARRAY = new Entry<?, ?>[0];, +, +      int n, Entry<?, ?>[] entries) {, +    switch (n) {, +        @SuppressWarnings("unchecked") // all callers only have Ks here, +        K key = (K) entries[0].getKey();, +        @SuppressWarnings("unchecked") // all callers only have Vs here, +        V value = (V) entries[0].getValue();, +        return new SingletonImmutableBiMap<K, V>(key, value);, +        return new RegularImmutableBiMap<K, V>(n, entries);, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +    checkEntryNotNull(key, value);, +  static void checkEntryNotNull(Object key, Object value) {, +    if (key == null) {, +      throw new NullPointerException("null key in entry: null=" + value);, +    } else if (value == null) {, +      throw new NullPointerException("null value in entry: " + key + "=null");, +    }, +  }, +, +    Entry<K, V>[] entries;, +    int size;, +    public Builder() {, +      this(ImmutableCollection.Builder.DEFAULT_INITIAL_CAPACITY);, +    }, +, +    Builder(int initialCapacity) {, +      this.entries = createEntryArray(initialCapacity);, +      this.size = 0;, +    }, +, +    @SuppressWarnings("unchecked"), +    Entry<K, V>[] createEntryArray(int size) {, +      return new Entry[size];, +    }, +, +    private void ensureCapacity(int minCapacity) {, +      if (minCapacity > entries.length) {, +        entries = ObjectArrays.arraysCopyOf(, +            entries, ImmutableCollection.Builder.expandedCapacity(entries.length, minCapacity));, +      }, +    }, +      ensureCapacity(size + 1);, +      entries[size++] = entryOf(key, value);]