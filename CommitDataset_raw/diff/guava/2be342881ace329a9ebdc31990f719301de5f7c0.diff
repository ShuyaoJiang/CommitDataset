[+++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private ExceptionTypePolicy policy = ExceptionTypePolicy.NPE_OR_UOE;, +, +      if (policy.isExpectedType(cause)) {, +, +  /**, +   * Strategy for exception type matching used by {@link NullPointerTester}., +   */, +  private enum ExceptionTypePolicy {, +, +    /**, +     * Exceptions should be {@link NullPointerException} or, +     * {@link UnsupportedOperationException}., +     */, +    NPE_OR_UOE() {, +      @Override, +      public boolean isExpectedType(Throwable cause) {, +        return cause instanceof NullPointerException, +            || cause instanceof UnsupportedOperationException;, +      }, +    },, +, +    /**, +     * Exceptions should be {@link NullPointerException},, +     * {@link IllegalArgumentException}, or, +     * {@link UnsupportedOperationException}., +     */, +    NPE_IAE_OR_UOE() {, +      @Override, +      public boolean isExpectedType(Throwable cause) {, +        return cause instanceof NullPointerException, +            || cause instanceof IllegalArgumentException, +            || cause instanceof UnsupportedOperationException;, +      }, +    };, +, +    public abstract boolean isExpectedType(Throwable cause);, +  }, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  private ExceptionTypePolicy policy = ExceptionTypePolicy.NPE_OR_UOE;, +, +      if (policy.isExpectedType(cause)) {, +, +  /**, +   * Strategy for exception type matching used by {@link NullPointerTester}., +   */, +  private enum ExceptionTypePolicy {, +, +    /**, +     * Exceptions should be {@link NullPointerException} or, +     * {@link UnsupportedOperationException}., +     */, +    NPE_OR_UOE() {, +      @Override, +      public boolean isExpectedType(Throwable cause) {, +        return cause instanceof NullPointerException, +            || cause instanceof UnsupportedOperationException;, +      }, +    },, +, +    /**, +     * Exceptions should be {@link NullPointerException},, +     * {@link IllegalArgumentException}, or, +     * {@link UnsupportedOperationException}., +     */, +    NPE_IAE_OR_UOE() {, +      @Override, +      public boolean isExpectedType(Throwable cause) {, +        return cause instanceof NullPointerException, +            || cause instanceof IllegalArgumentException, +            || cause instanceof UnsupportedOperationException;, +      }, +    };, +, +    public abstract boolean isExpectedType(Throwable cause);, +  }, +++ b/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +  private static class ThrowsIae {, +    public static void christenPoodle(String name) {, +      checkArgument(name != null);, +    }, +  }, +, +  private static class ThrowsNpe {, +    public static void christenPoodle(String name) {, +      checkNotNull(name);, +    }, +  }, +, +  private static class ThrowsUoe {, +    public static void christenPoodle(String name) {, +      throw new UnsupportedOperationException();, +    }, +  }, +, +  private static class ThrowsSomethingElse {, +    public static void christenPoodle(String name) {, +      throw new RuntimeException();, +    }]