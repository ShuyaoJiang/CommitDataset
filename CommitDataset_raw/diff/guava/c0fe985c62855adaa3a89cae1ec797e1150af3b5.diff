[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +import org.junit.After;, +  @After, +  public void validateSourceAndTarget() {, +    for (Integer node : graph.nodes()) {, +      for (String inEdge : graph.inEdges(node)) {, +        assertThat(directedGraph.target(inEdge)).isEqualTo(node);, +      }, +, +      for (String outEdge : graph.outEdges(node)) {, +        assertThat(directedGraph.source(outEdge)).isEqualTo(node);, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +import org.junit.After;, +  @After, +  public void validateSourceAndTarget() {, +    for (Integer node : graph.nodes()) {, +      for (String inEdge : graph.inEdges(node)) {, +        assertThat(directedGraph.target(inEdge)).isEqualTo(node);, +      }, +, +      for (String outEdge : graph.outEdges(node)) {, +        assertThat(directedGraph.source(outEdge)).isEqualTo(node);, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import com.google.common.collect.Iterables;, +import com.google.common.testing.EqualsTester;, +import org.junit.After;, +import java.util.Set;, +, +  @After, +  public void validateGraphState() {, +    new EqualsTester().addEqualityGroup(graph).testEquals();, +, +    for (String edge : graph.edges()) {, +      Set<Integer> incidentNodes = graph.incidentNodes(edge);, +      Integer node1 = Iterables.get(incidentNodes, 0);, +      Integer node2 = Iterables.get(incidentNodes, 1, node1);, +      assertThat(graph.successors(node1)).contains(node2);, +      assertThat(graph.adjacentNodes(node1)).contains(node2);, +      assertThat(graph.outEdges(node1)).contains(edge);, +      assertThat(graph.incidentEdges(node1)).contains(edge);, +      assertThat(graph.predecessors(node2)).contains(node1);, +      assertThat(graph.adjacentNodes(node2)).contains(node1);, +      assertThat(graph.inEdges(node2)).contains(edge);, +      assertThat(graph.incidentEdges(node2)).contains(edge);, +, +      for (Integer incidentNode : incidentNodes) {, +        for (String adjacentEdge : graph.incidentEdges(incidentNode)) {, +          assertTrue(adjacentEdge.equals(edge) || graph.adjacentEdges(edge).contains(adjacentEdge));, +        }, +      }, +    }, +, +    for (Integer node : graph.nodes()) {, +      for (String incidentEdge : graph.incidentEdges(node)) {, +        assertTrue(graph.inEdges(node).contains(incidentEdge), +            || graph.outEdges(node).contains(incidentEdge));, +        assertThat(graph.incidentNodes(incidentEdge)).contains(node);, +      }, +, +      for (String inEdge : graph.inEdges(node)) {, +        assertThat(graph.incidentEdges(node)).contains(inEdge);, +      }, +, +      for (String outEdge : graph.outEdges(node)) {, +        assertThat(graph.incidentEdges(node)).contains(outEdge);, +      }, +, +      for (Integer adjacentNode : graph.adjacentNodes(node)) {, +        assertTrue(graph.predecessors(node).contains(adjacentNode), +            || graph.successors(node).contains(adjacentNode));, +        assertTrue(!graph.edgesConnecting(node, adjacentNode).isEmpty(), +            || !graph.edgesConnecting(adjacentNode, node).isEmpty());, +        assertThat(graph.incidentEdges(node)).isNotEmpty();, +        assertThat(graph.incidentEdges(node)).hasSize((int) graph.degree(node));, +      }, +, +      for (Integer predecessor : graph.predecessors(node)) {, +        assertThat(graph.successors(predecessor)).contains(node);, +        assertThat(graph.edgesConnecting(predecessor, node)).isNotEmpty();, +        assertThat(graph.inEdges(node)).isNotEmpty();, +        assertThat(graph.inEdges(node)).hasSize((int) graph.inDegree(node));, +      }, +, +      for (Integer successor : graph.successors(node)) {, +        assertThat(graph.predecessors(successor)).contains(node);, +        assertThat(graph.edgesConnecting(node, successor)).isNotEmpty();, +        assertThat(graph.outEdges(node)).isNotEmpty();, +        assertThat(graph.outEdges(node)).hasSize((int) graph.outDegree(node));, +      }, +    }, +  }, +]