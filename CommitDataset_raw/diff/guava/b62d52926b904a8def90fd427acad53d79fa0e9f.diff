[+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureCancellationCauseTest.java, +import java.lang.reflect.Method;, +  private Class<?> settableFutureClass;, +  private Class<?> abstractFutureClass;, +    abstractFutureClass = classReloader.loadClass(AbstractFuture.class.getName());, +    settableFutureClass = classReloader.loadClass(SettableFuture.class.getName());, +    assertNull(tryInternalFastPathGetFailure(future));, +    assertNull(tryInternalFastPathGetFailure(future));, +    return (Future<?>) settableFutureClass.getMethod("create").invoke(null);, +  }, +, +  private Throwable tryInternalFastPathGetFailure(Future<?> future) throws Exception {, +    Method tryInternalFastPathGetFailureMethod =, +        abstractFutureClass.getDeclaredMethod("tryInternalFastPathGetFailure");, +    tryInternalFastPathGetFailureMethod.setAccessible(true);, +    return (Throwable) tryInternalFastPathGetFailureMethod.invoke(future);, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureCancellationCauseTest.java, +import java.lang.reflect.Method;, +  private Class<?> settableFutureClass;, +  private Class<?> abstractFutureClass;, +    abstractFutureClass = classReloader.loadClass(AbstractFuture.class.getName());, +    settableFutureClass = classReloader.loadClass(SettableFuture.class.getName());, +    assertNull(tryInternalFastPathGetFailure(future));, +    assertNull(tryInternalFastPathGetFailure(future));, +    return (Future<?>) settableFutureClass.getMethod("create").invoke(null);, +  }, +, +  private Throwable tryInternalFastPathGetFailure(Future<?> future) throws Exception {, +    Method tryInternalFastPathGetFailureMethod =, +        abstractFutureClass.getDeclaredMethod("tryInternalFastPathGetFailure");, +    tryInternalFastPathGetFailureMethod.setAccessible(true);, +    return (Throwable) tryInternalFastPathGetFailureMethod.invoke(future);, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +import com.google.common.util.concurrent.internal.InternalFutureFailureAccess;, +  public void testTrustedGetFailure_Completed() {, +    SettableFuture<String> future = SettableFuture.create();, +    future.set("261");, +    assertThat(future.tryInternalFastPathGetFailure()).isNull();, +  }, +, +  public void testTrustedGetFailure_Failed() {, +    SettableFuture<String> future = SettableFuture.create();, +    Throwable failure = new Throwable();, +    future.setException(failure);, +    assertThat(future.tryInternalFastPathGetFailure()).isEqualTo(failure);, +  }, +, +  public void testTrustedGetFailure_NotCompleted() {, +    SettableFuture<String> future = SettableFuture.create();, +    assertThat(future.isDone()).isFalse();, +    assertThat(future.tryInternalFastPathGetFailure()).isNull();, +  }, +, +  public void testTrustedGetFailure_CanceledNoCause() {, +    SettableFuture<String> future = SettableFuture.create();, +    future.cancel(false);, +    assertThat(future.tryInternalFastPathGetFailure()).isNull();, +  }, +, +  public void testGetFailure_Completed() {, +    AbstractFuture<String> future = new AbstractFuture<String>() {};, +    future.set("261");, +    assertThat(future.tryInternalFastPathGetFailure()).isNull();, +  }, +, +  public void testGetFailure_Failed() {, +    AbstractFuture<String> future = new AbstractFuture<String>() {};, +    final Throwable failure = new Throwable();, +    future.setException(failure);, +    assertThat(future.tryInternalFastPathGetFailure()).isNull();, +  }, +, +  public void testGetFailure_NotCompleted() {, +    AbstractFuture<String> future = new AbstractFuture<String>() {};, +    assertThat(future.isDone()).isFalse();, +    assertThat(future.tryInternalFastPathGetFailure()).isNull();, +  }, +, +  public void testGetFailure_CanceledNoCause() {, +    AbstractFuture<String> future = new AbstractFuture<String>() {};, +    future.cancel(false);, +    assertThat(future.tryInternalFastPathGetFailure()).isNull();, +  }, +, +  public void testForwardExceptionFastPath() throws Exception {, +    class FailFuture extends InternalFutureFailureAccess implements ListenableFuture<String> {, +      Throwable failure;, +, +      FailFuture(Throwable throwable) {, +        failure = throwable;, +      }, +, +      @Override, +      public boolean cancel(boolean mayInterruptIfRunning) {, +        throw new AssertionFailedError("cancel shouldn't be called on this object");, +      }, +, +      @Override, +      public boolean isCancelled() {, +        return false;]