[+++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +  public void testGreatestOfIterable_simple() {, +  public void testGreatestOfIterator_simple() {, +    /*, +     * If greatestOf() promised to be implemented as reverse().leastOf(), this, +     * test would be enough. It doesn't... but we'll cheat and act like it does, +     * anyway. There's a comment there to remind us to fix this if we change it., +     */, +    List<Integer> list = Arrays.asList(3, 1, 3, 2, 4, 2, 4, 3);, +    assertEquals(Arrays.asList(4, 4, 3, 3),, +        numberOrdering.greatestOf(list.iterator(), 4));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +  public void testGreatestOfIterable_simple() {, +  public void testGreatestOfIterator_simple() {, +    /*, +     * If greatestOf() promised to be implemented as reverse().leastOf(), this, +     * test would be enough. It doesn't... but we'll cheat and act like it does, +     * anyway. There's a comment there to remind us to fix this if we change it., +     */, +    List<Integer> list = Arrays.asList(3, 1, 3, 2, 4, 2, 4, 3);, +    assertEquals(Arrays.asList(4, 4, 3, 3),, +        numberOrdering.greatestOf(list.iterator(), 4));, +  }, +, +++ b/guava/src/com/google/common/collect/Ordering.java, +   * Returns the {@code k} greatest elements from the given iterator according to, +   * this ordering, in order from greatest to least. If there are fewer than, +   * {@code k} elements present, all will be included., +   *, +   * <p>The implementation does not necessarily use a <i>stable</i> sorting, +   * algorithm; when multiple elements are equivalent, it is undefined which, +   * will come first., +   *, +   * @return an immutable {@code RandomAccess} list of the {@code k} greatest, +   *     elements in <i>descending order</i>, +   * @throws IllegalArgumentException if {@code k} is negative, +   * @since 14.0, +   */, +  @Beta, +  public <E extends T> List<E> greatestOf(Iterator<E> iterator, int k) {, +    return reverse().leastOf(iterator, k);, +  }, +, +  /**]