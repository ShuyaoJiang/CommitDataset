[+++ b/guava-tests/test/com/google/common/cache/AutoLocalCacheTest.java, +    return new AutoLocalCache<K, V>(builder, loader);, +  public void testDisableStats() {, +    CacheBuilder<Object, Object> builder = createCacheBuilder(), +        .concurrencyLevel(1), +        .maximumSize(2), +        .disableStats();, +    AutoLocalCache<Object, Object> cache = makeCache(builder, identityLoader());, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object one = new Object();, +    cache.getUnchecked(one);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    cache.getUnchecked(one);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object two = new Object();, +    cache.getUnchecked(two);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object three = new Object();, +    cache.getUnchecked(three);, +    assertEquals(EMPTY_STATS, cache.stats());, +  }, +, +++ b/guava-tests/test/com/google/common/cache/AutoLocalCacheTest.java, +    return new AutoLocalCache<K, V>(builder, loader);, +  public void testDisableStats() {, +    CacheBuilder<Object, Object> builder = createCacheBuilder(), +        .concurrencyLevel(1), +        .maximumSize(2), +        .disableStats();, +    AutoLocalCache<Object, Object> cache = makeCache(builder, identityLoader());, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object one = new Object();, +    cache.getUnchecked(one);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    cache.getUnchecked(one);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object two = new Object();, +    cache.getUnchecked(two);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object three = new Object();, +    cache.getUnchecked(three);, +    assertEquals(EMPTY_STATS, cache.stats());, +  }, +, +++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +    return new LocalCache<K, V>(builder, CacheLoader.from(Suppliers.<V>ofInstance(null)));, +    return new LocalCache<K, V>(builder, loader);, +++ b/guava-tests/test/com/google/common/cache/AutoLocalCacheTest.java, +    return new AutoLocalCache<K, V>(builder, loader);, +  public void testDisableStats() {, +    CacheBuilder<Object, Object> builder = createCacheBuilder(), +        .concurrencyLevel(1), +        .maximumSize(2), +        .disableStats();, +    AutoLocalCache<Object, Object> cache = makeCache(builder, identityLoader());, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object one = new Object();, +    cache.getUnchecked(one);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    cache.getUnchecked(one);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object two = new Object();, +    cache.getUnchecked(two);, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object three = new Object();, +    cache.getUnchecked(three);, +    assertEquals(EMPTY_STATS, cache.stats());, +  }, +, +++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +    return new LocalCache<K, V>(builder, CacheLoader.from(Suppliers.<V>ofInstance(null)));, +    return new LocalCache<K, V>(builder, loader);, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +  static final Supplier<? extends StatsCounter> NULL_STATS_COUNTER = Suppliers.ofInstance(, +  Supplier<? extends StatsCounter> statsCounterSupplier = CACHE_STATS_COUNTER;, +, +   * Disable the accumulation of {@link CacheStats} during the operation of the cache., +   */, +  CacheBuilder<K, V> disableStats() {, +    checkState(statsCounterSupplier == CACHE_STATS_COUNTER);, +    statsCounterSupplier = NULL_STATS_COUNTER;, +    return this;, +  }, +, +  Supplier<? extends StatsCounter> getStatsCounterSupplier() {, +    return statsCounterSupplier;, +  }, +]