[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +  public void testAddListenerAfterFailureDoesntCauseDeadlock() throws InterruptedException {, +    final StartThrowingService service = new StartThrowingService();, +    service.start();, +    assertEquals(State.FAILED, service.state());, +    service.addListener(new RecordingListener(), MoreExecutors.sameThreadExecutor());, +    Thread thread = new Thread() {, +      @Override public void run() {, +        // Internally state() grabs a lock, this could be any such method on AbstractService., +        service.state();, +      }, +    };, +    thread.start();, +    thread.join(100);, +    assertFalse(thread + " is deadlocked", thread.isAlive());, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +  public void testAddListenerAfterFailureDoesntCauseDeadlock() throws InterruptedException {, +    final StartThrowingService service = new StartThrowingService();, +    service.start();, +    assertEquals(State.FAILED, service.state());, +    service.addListener(new RecordingListener(), MoreExecutors.sameThreadExecutor());, +    Thread thread = new Thread() {, +      @Override public void run() {, +        // Internally state() grabs a lock, this could be any such method on AbstractService., +        service.state();, +      }, +    };, +    thread.start();, +    thread.join(100);, +    assertFalse(thread + " is deadlocked", thread.isAlive());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractService.java, +      if (state != State.TERMINATED && state != State.FAILED) {, +      }, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +  public void testAddListenerAfterFailureDoesntCauseDeadlock() throws InterruptedException {, +    final StartThrowingService service = new StartThrowingService();, +    service.start();, +    assertEquals(State.FAILED, service.state());, +    service.addListener(new RecordingListener(), MoreExecutors.sameThreadExecutor());, +    Thread thread = new Thread() {, +      @Override public void run() {, +        // Internally state() grabs a lock, this could be any such method on AbstractService., +        service.state();, +      }, +    };, +    thread.start();, +    thread.join(100);, +    assertFalse(thread + " is deadlocked", thread.isAlive());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractService.java, +      if (state != State.TERMINATED && state != State.FAILED) {, +      }, +++ b/guava/src/com/google/common/util/concurrent/Service.java, +   * @throws UncheckedExecutionException if the service has failed or fails during shutdown, +  interface Listener {]