[+++ b/android/guava/src/com/google/common/collect/Sets.java, +        int size = set1.size();, +        for (E e : set2) {, +          if (!set1.contains(e)) {, +            size++;, +          }, +        }, +        return size;, +        return new AbstractIterator<E>() {, +          final Iterator<? extends E> itr1 = set1.iterator();, +          final Iterator<? extends E> itr2 = set2.iterator();, +, +          @Override, +          protected E computeNext() {, +            if (itr1.hasNext()) {, +              return itr1.next();, +            }, +            while (itr2.hasNext()) {, +              E e = itr2.next();, +              if (!set1.contains(e)) {, +                return e;, +              }, +            }, +            return endOfData();, +          }, +        };, +        return new AbstractIterator<E>() {, +          final Iterator<E> itr = set1.iterator();, +, +          @Override, +          protected E computeNext() {, +            while (itr.hasNext()) {, +              E e = itr.next();, +              if (set2.contains(e)) {, +                return e;, +              }, +            }, +            return endOfData();, +          }, +        };, +        int size = 0;, +        for (E e : set1) {, +          if (set2.contains(e)) {, +            size++;, +          }, +        }, +        return size;, +        return Collections.disjoint(set1, set2);, +        return new AbstractIterator<E>(){, +          final Iterator<E> itr = set1.iterator();, +          @Override, +          protected E computeNext() {, +            while (itr.hasNext()) {, +              E e = itr.next();, +              if (!set2.contains(e)) {, +                return e;, +              }, +            }, +            return endOfData();, +          }, +        };, +        int size = 0;, +        for (E e : set1) {, +          if (!set2.contains(e)) {, +            size++;, +          }, +        }, +        return size;, +        int size = 0;, +        for (E e : set1) {, +          if (!set2.contains(e)) {, +            size++;, +          }, +        }, +        for (E e : set2) {, +          if (!set1.contains(e)) {, +            size++;, +          }, +        }, +        return size;, +++ b/android/guava/src/com/google/common/collect/Sets.java, +        int size = set1.size();, +        for (E e : set2) {, +          if (!set1.contains(e)) {, +            size++;, +          }, +        }, +        return size;, +        return new AbstractIterator<E>() {, +          final Iterator<? extends E> itr1 = set1.iterator();, +          final Iterator<? extends E> itr2 = set2.iterator();, +, +          @Override, +          protected E computeNext() {, +            if (itr1.hasNext()) {, +              return itr1.next();, +            }, +            while (itr2.hasNext()) {, +              E e = itr2.next();, +              if (!set1.contains(e)) {]