[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import com.google.common.collect.Lists;, +, +import junit.framework.TestCase;, +, +import java.util.Arrays;, +import java.util.List;, +import java.util.Random;, +import java.util.concurrent.TimeUnit;, +, +/**, + * Tests for RateLimiter., + *, + * @author andreou@google.com (Dimitris Andreou), + */, +public class RateLimiterTest extends TestCase {, +  /**, +   * The ticker gathers events and presents them as strings., +   * R0.6 means a delay of 0.6 seconds caused by the (R)ateLimiter, +   * U1.0 means the (U)ser caused the ticker to sleep for a second., +   */, +  private final FakeTicker ticker = new FakeTicker();, +, +  public void testSimple() {, +    RateLimiter limiter = RateLimiter.create(ticker, 5.0);, +    limiter.acquire(); // R0.00, since it's the first request, +    limiter.acquire(); // R0.20, +    limiter.acquire(); // R0.20, +    assertEvents("R0.00", "R0.20", "R0.20");, +  }, +, +  public void testSimpleRateUpdate() {, +    RateLimiter limiter = RateLimiter.create(5.0, 5, TimeUnit.SECONDS);, +    assertEquals(5.0, limiter.getRate());, +    limiter.setRate(10.0);, +    assertEquals(10.0, limiter.getRate());, +, +    try {, +      limiter.setRate(0.0);, +      fail();, +    } catch (IllegalArgumentException ok) {}, +    try {, +      limiter.setRate(-10.0);, +      fail();, +    } catch (IllegalArgumentException ok) {}, +  }, +, +  public void testSimpleWithWait() {, +    RateLimiter limiter = RateLimiter.create(ticker, 5.0);, +    limiter.acquire();          // R0.00, +    ticker.sleepMillis(200);    // U0.20, we are ready for the next request..., +    limiter.acquire();          // R0.00, ...which is granted immediately, +    limiter.acquire();          // R0.20, +    assertEvents("R0.00", "U0.20", "R0.00", "R0.20");, +  }, +, +  public void testOneSecondBurst() {, +    RateLimiter limiter = RateLimiter.create(ticker, 5.0);, +    ticker.sleepMillis(1000); // max capacity reached, +    ticker.sleepMillis(1000); // this makes no difference, +    limiter.acquire(1); // R0.00, since it's the first request, +, +    limiter.acquire(1); // R0.00, from capacity, +    limiter.acquire(3); // R0.00, from capacity, +    limiter.acquire(1); // R0.00, concluding a burst of 5 permits, +, +    limiter.acquire(); // R0.20, capacity exhausted, +    assertEvents("U1.00", "U1.00",, +        "R0.00", "R0.00", "R0.00", "R0.00", // first request and burst, +        "R0.20");, +  }, +, +  public void testWarmUp() {, +    RateLimiter limiter = RateLimiter.create(ticker, 2.0, 4000, TimeUnit.MILLISECONDS);, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // #1, +    }, +    ticker.sleepMillis(500); // #2: to repay for the last acquire, +    ticker.sleepMillis(4000); // #3: becomes cold again, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // // #4, +    }]