[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  @Override, +  public Set<Multiset.Entry<E>> entrySet() {, +    return super.entrySet();, +  @Override, +  Iterator<Entry<E>> entryIterator() {, +    final Iterator<Map.Entry<E, AtomicInteger>> backingEntries =, +        backingMap.entrySet().iterator();, +  @Override, +  public void clear() {, +  @Override, +  int distinctElements() {, +    return backingMap.size();, +  // TODO(user): once TreeMultiset is replaced with a SortedMultiset implementation,, +  // replace this with a subclass of Multisets.ElementSet., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  @Override, +  public Set<Multiset.Entry<E>> entrySet() {, +    return super.entrySet();, +  @Override, +  Iterator<Entry<E>> entryIterator() {, +    final Iterator<Map.Entry<E, AtomicInteger>> backingEntries =, +        backingMap.entrySet().iterator();, +  @Override, +  public void clear() {, +  @Override, +  int distinctElements() {, +    return backingMap.size();, +  // TODO(user): once TreeMultiset is replaced with a SortedMultiset implementation,, +  // replace this with a subclass of Multisets.ElementSet., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * Clears the iterator using its remove method., +   */, +  static void clear(Iterator<?> iterator) {, +    checkNotNull(iterator);, +    while (iterator.hasNext()) {, +      iterator.next();, +      iterator.remove();, +    }, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  @Override, +  public Set<Multiset.Entry<E>> entrySet() {, +    return super.entrySet();, +  @Override, +  Iterator<Entry<E>> entryIterator() {, +    final Iterator<Map.Entry<E, AtomicInteger>> backingEntries =, +        backingMap.entrySet().iterator();, +  @Override, +  public void clear() {, +  @Override, +  int distinctElements() {, +    return backingMap.size();, +  // TODO(user): once TreeMultiset is replaced with a SortedMultiset implementation,, +  // replace this with a subclass of Multisets.ElementSet., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * Clears the iterator using its remove method., +   */, +  static void clear(Iterator<?> iterator) {, +    checkNotNull(iterator);, +    while (iterator.hasNext()) {, +      iterator.next();, +      iterator.remove();, +    }, +  }, +, +  /**, +++ b/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java, +  @Override, +  public Set<Multiset.Entry<E>> entrySet() {, +    return super.entrySet();, +  @Override, +  Iterator<Entry<E>> entryIterator() {, +    final Iterator<Map.Entry<E, AtomicInteger>> backingEntries =, +        backingMap.entrySet().iterator();, +  @Override, +  public void clear() {, +  @Override, +  int distinctElements() {, +    return backingMap.size();, +  // TODO(user): once TreeMultiset is replaced with a SortedMultiset implementation,, +  // replace this with a subclass of Multisets.ElementSet., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  @Override, +  public Set<Multiset.Entry<E>> entrySet() {, +    return super.entrySet();, +  @Override, +  Iterator<Entry<E>> entryIterator() {, +    final Iterator<Map.Entry<E, AtomicInteger>> backingEntries =, +        backingMap.entrySet().iterator();, +  @Override, +  public void clear() {, +  @Override, +  int distinctElements() {, +    return backingMap.size();, +  // TODO(user): once TreeMultiset is replaced with a SortedMultiset implementation,, +  // replace this with a subclass of Multisets.ElementSet., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java]