[+++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +++ b/guava/src/com/google/common/graph/MutableGraph.java, +   * Adds {@code node} to this graph., +   * Adds an (implicit) edge to this graph connecting {@code nodeA} to {@code nodeB}., +   * to the graph (this is the behavior of the default graph implementations) or (b) throwing, +   * {@code IllegalArgumentException}., +   * @throws IllegalArgumentException if the introduction of the edge would violate, +   *     {@link #allowsSelfLoops()}, +   * Removes {@code node} from this graph, if it is present., +   * Removes an edge connecting {@code nodeA} to {@code nodeB} from this graph, if one is present., +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +++ b/guava/src/com/google/common/graph/MutableGraph.java, +   * Adds {@code node} to this graph., +   * Adds an (implicit) edge to this graph connecting {@code nodeA} to {@code nodeB}., +   * to the graph (this is the behavior of the default graph implementations) or (b) throwing, +   * {@code IllegalArgumentException}., +   * @throws IllegalArgumentException if the introduction of the edge would violate, +   *     {@link #allowsSelfLoops()}, +   * Removes {@code node} from this graph, if it is present., +   * Removes an edge connecting {@code nodeA} to {@code nodeB} from this graph, if one is present., +++ b/guava/src/com/google/common/graph/MutableNetwork.java, +   * Adds {@code node} to this graph., +   * Adds {@code edge} to this graph, connecting {@code nodeA} to {@code nodeB}., +   * to the graph (this is the behavior of the default graph implementations) or (b) throwing, +   * {@code IllegalArgumentException}., +   *     {@code nodeA} and {@code nodeB}, or if the introduction of the edge would violate, +   *     {@link #allowsParallelEdges()} or {@link #allowsSelfLoops()}, +   * Removes {@code node} from this graph, if it is present., +   * Removes {@code edge} from this graph, if it is present.]