[+++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +    assertThat(future.toString()).contains("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=FAILURE, cause=[" + exception + "]]");, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +    assertThat(future.toString()).contains("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=FAILURE, cause=[" + exception + "]]");, +++ b/android/guava/src/com/google/common/util/concurrent/ImmediateFuture.java, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=SUCCESS, result=[" + value + "]]";, +    }, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=SUCCESS, result=[" + value + "]]";, +    }, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=FAILURE, cause=[" + thrown + "]]";, +    }, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +    assertThat(future.toString()).contains("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=FAILURE, cause=[" + exception + "]]");, +++ b/android/guava/src/com/google/common/util/concurrent/ImmediateFuture.java, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=SUCCESS, result=[" + value + "]]";, +    }, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=SUCCESS, result=[" + value + "]]";, +    }, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=FAILURE, cause=[" + thrown + "]]";, +    }, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +      V value = getDone(this);, +      builder.append("SUCCESS, result=[").append(value).append("]");, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +    assertThat(future.toString()).contains("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()), +        .endsWith("[status=FAILURE, cause=[" + exception + "]]");, +++ b/android/guava/src/com/google/common/util/concurrent/ImmediateFuture.java, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=SUCCESS, result=[" + value + "]]";, +    }, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=SUCCESS, result=[" + value + "]]";, +    }, +, +    @Override, +    public String toString() {, +      // Behaviour analogous to AbstractFuture#toString()., +      return super.toString() + "[status=FAILURE, cause=[" + thrown + "]]";, +    }, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +      V value = getDone(this);, +      builder.append("SUCCESS, result=[").append(value).append("]");, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +    assertThat(future.toString()).contains("[status=SUCCESS, result=[" + DATA1 + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString()).endsWith("[status=FAILURE, cause=[" + exception + "]]");, +    assertThat(future.toString())]