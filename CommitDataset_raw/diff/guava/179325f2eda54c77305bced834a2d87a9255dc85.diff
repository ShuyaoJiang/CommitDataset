[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      SortedMap<K, V1> fromMap,, +      EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return Platform.mapsTransformEntriesSortedMap(fromMap, transformer);, +  }, +, +  static <K, V1, V2> SortedMap<K, V2> transformEntriesIgnoreNavigable(, +      SortedMap<K, V1> fromMap,, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      SortedMap<K, V1> fromMap,, +      EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return Platform.mapsTransformEntriesSortedMap(fromMap, transformer);, +  }, +, +  static <K, V1, V2> SortedMap<K, V2> transformEntriesIgnoreNavigable(, +      SortedMap<K, V1> fromMap,, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import com.google.common.collect.Maps.EntryTransformer;, +, +import java.util.SortedMap;, +, +, +  static <K, V1, V2> SortedMap<K, V2> mapsTransformEntriesSortedMap(, +      SortedMap<K, V1> fromMap,, +      EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return Maps.transformEntriesIgnoreNavigable(fromMap, transformer);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      SortedMap<K, V1> fromMap,, +      EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return Platform.mapsTransformEntriesSortedMap(fromMap, transformer);, +  }, +, +  static <K, V1, V2> SortedMap<K, V2> transformEntriesIgnoreNavigable(, +      SortedMap<K, V1> fromMap,, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import com.google.common.collect.Maps.EntryTransformer;, +, +import java.util.SortedMap;, +, +, +  static <K, V1, V2> SortedMap<K, V2> mapsTransformEntriesSortedMap(, +      SortedMap<K, V1> fromMap,, +      EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return Maps.transformEntriesIgnoreNavigable(fromMap, transformer);, +  }, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +import static com.google.common.collect.Maps.transformValues;, +import java.util.NavigableMap;, +  private static final Function<Integer, Double> SQRT_FUNCTION = new Function<Integer, Double>() {, +      @Override, +      public Double apply(Integer in) {, +        return Math.sqrt(in);, +      }, +    };, +, +    Map<String, Double> transformed = transformValues(map, SQRT_FUNCTION);, +    Map<String, Integer> map =, +        sortedNotNavigable(ImmutableSortedMap.of("a", 4, "b", 9));, +    Map<String, Double> transformed = transformValues(map, SQRT_FUNCTION);, +  @GwtIncompatible("NavigableMap"), +  public void testTransformValuesSecretlyNavigable() {, +    Map<String, Integer> map = ImmutableSortedMap.of("a", 4, "b", 9);, +    Map<String, Double> transformed;, +, +    transformed = transformValues(map, SQRT_FUNCTION);, +    assertEquals(ImmutableMap.of("a", 2.0, "b", 3.0), transformed);, +    assertTrue(transformed instanceof NavigableMap);, +, +    transformed =, +        transformValues((SortedMap<String, Integer>) map, SQRT_FUNCTION);, +    assertEquals(ImmutableMap.of("a", 2.0, "b", 3.0), transformed);, +    assertTrue(transformed instanceof NavigableMap);, +  }, +, +    Map<String, String> transformed = transformEntries(map, concat);, +    Map<String, String> transformed = transformEntries(map, concat);, +  @GwtIncompatible("NavigableMap"), +  public void testTransformEntriesSecretlyNavigable() {, +    Map<String, String> map = ImmutableSortedMap.of("a", "4", "b", "9");, +    EntryTransformer<String, String, String> concat =, +        new EntryTransformer<String, String, String>() {, +          @Override, +          public String transformEntry(String key, String value) {, +            return key + value;, +          }, +        };, +    Map<String, String> transformed;, +, +    transformed = transformEntries(map, concat);, +    assertEquals(ImmutableMap.of("a", "a4", "b", "b9"), transformed);, +    assertTrue(transformed instanceof NavigableMap);, +, +    transformed = transformEntries((SortedMap<String, String>) map, concat);, +    assertEquals(ImmutableMap.of("a", "a4", "b", "b9"), transformed);, +    assertTrue(transformed instanceof NavigableMap);, +  }, +, +    Map<String, String> transformed = transformEntries(options, flagPrefixer);, +  // Logically this would accept a NavigableMap, but that won't work under GWT.]