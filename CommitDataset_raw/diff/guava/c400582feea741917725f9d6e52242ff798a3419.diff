[+++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +    assertEquals(expected.length, ByteSource.concat(b1, b2, b3).size());, +    assertFalse(ByteSource.concat(b1, b2, b3).isEmpty());, +, +    ByteSource emptyConcat = ByteSource.concat(ByteSource.empty(), ByteSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +    assertEquals(0, emptyConcat.size());, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +    assertEquals(expected.length, ByteSource.concat(b1, b2, b3).size());, +    assertFalse(ByteSource.concat(b1, b2, b3).isEmpty());, +, +    ByteSource emptyConcat = ByteSource.concat(ByteSource.empty(), ByteSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +    assertEquals(0, emptyConcat.size());, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +  public void testIsEmpty() throws IOException {, +    assertEquals(expected.length == 0, source.isEmpty());, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +    assertEquals(expected.length, ByteSource.concat(b1, b2, b3).size());, +    assertFalse(ByteSource.concat(b1, b2, b3).isEmpty());, +, +    ByteSource emptyConcat = ByteSource.concat(ByteSource.empty(), ByteSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +    assertEquals(0, emptyConcat.size());, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +  public void testIsEmpty() throws IOException {, +    assertEquals(expected.length == 0, source.isEmpty());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +    assertFalse(CharSource.concat(c1, c2, c3).isEmpty());, +, +    CharSource emptyConcat = CharSource.concat(CharSource.empty(), CharSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +    assertEquals(expected.length, ByteSource.concat(b1, b2, b3).size());, +    assertFalse(ByteSource.concat(b1, b2, b3).isEmpty());, +, +    ByteSource emptyConcat = ByteSource.concat(ByteSource.empty(), ByteSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +    assertEquals(0, emptyConcat.size());, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +  public void testIsEmpty() throws IOException {, +    assertEquals(expected.length == 0, source.isEmpty());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +    assertFalse(CharSource.concat(c1, c2, c3).isEmpty());, +, +    CharSource emptyConcat = CharSource.concat(CharSource.empty(), CharSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +++ b/guava-tests/test/com/google/common/io/CharSourceTester.java, +  public void testIsEmpty() throws IOException {, +    assertEquals(expected.isEmpty(), source.isEmpty());, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteSourceTest.java, +    assertEquals(expected.length, ByteSource.concat(b1, b2, b3).size());, +    assertFalse(ByteSource.concat(b1, b2, b3).isEmpty());, +, +    ByteSource emptyConcat = ByteSource.concat(ByteSource.empty(), ByteSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +    assertEquals(0, emptyConcat.size());, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +  public void testIsEmpty() throws IOException {, +    assertEquals(expected.length == 0, source.isEmpty());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +    assertFalse(CharSource.concat(c1, c2, c3).isEmpty());, +, +    CharSource emptyConcat = CharSource.concat(CharSource.empty(), CharSource.empty());, +    assertTrue(emptyConcat.isEmpty());, +++ b/guava-tests/test/com/google/common/io/CharSourceTester.java, +  public void testIsEmpty() throws IOException {, +    assertEquals(expected.isEmpty(), source.isEmpty());, +  }, +, +++ b/guava/src/com/google/common/io/ByteSource.java, +   * Returns whether the source has zero bytes. The default implementation is to open a stream and, +   * check for EOF., +   *, +   * @throws IOException if an I/O error occurs, +   * @since 15.0, +   */, +  public boolean isEmpty() throws IOException {, +    Closer closer = Closer.create();, +    try {, +      InputStream in = closer.register(openStream());, +      return in.read() == -1;, +    } catch (Throwable e) {, +      throw closer.rethrow(e);, +    } finally {, +      closer.close();, +    }, +  }, +, +  /**]