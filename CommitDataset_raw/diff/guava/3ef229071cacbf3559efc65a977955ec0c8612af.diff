[+++ b/guava-tests/test/com/google/common/eventbus/outside/AnnotatedHandlerFinderTests.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.eventbus.outside;, +, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.collect.Lists;, +import com.google.common.eventbus.EventBus;, +import com.google.common.eventbus.Subscribe;, +, +import junit.framework.TestCase;, +, +import java.util.List;, +, +/**, + * Test that EventBus finds the correct handlers., + *, + * This test must be outside the c.g.c.eventbus package to test correctly., + * @author Louis Wasserman, + */, +public class AnnotatedHandlerFinderTests {, +, +  private static final Object EVENT = new Object();, +, +  abstract static class AbstractEventBusTest<H> extends TestCase {, +    abstract H createHandler();, +, +    private H handler;, +, +    H getHandler() {, +      return handler;, +    }, +, +    @Override, +    protected void setUp() throws Exception {, +      handler = createHandler();, +      EventBus bus = new EventBus();, +      bus.register(handler);, +      bus.post(EVENT);, +    }, +, +    @Override, +    protected void tearDown() throws Exception {, +      handler = null;, +    }, +  }, +, +  /*, +   * We break the tests up based on whether they are annotated or abstract in the superclass., +   */, +  public static class BaseHandlerFinderTest extends, +      AbstractEventBusTest<BaseHandlerFinderTest.Handler> {, +    static class Handler {, +      final List<Object> nonSubscriberEvents = Lists.newArrayList();, +      final List<Object> subscriberEvents = Lists.newArrayList();, +, +      public void notASubscriber(Object o) {, +        nonSubscriberEvents.add(o);, +      }, +, +      @Subscribe, +      public void subscriber(Object o) {, +        subscriberEvents.add(o);, +      }, +    }, +, +    public void testNonSubscriber() {, +      ASSERT.that(getHandler().nonSubscriberEvents).isEmpty();, +    }, +, +    public void testSubscriber() {, +      ASSERT.that(getHandler().subscriberEvents).hasContentsInOrder(EVENT);, +    }, +, +    @Override, +    Handler createHandler() {, +      return new Handler();, +    }, +  }, +, +  public static class AnnotatedAndAbstractInSuperclassTest extends, +      AbstractEventBusTest<AnnotatedAndAbstractInSuperclassTest.SubClass> {, +    abstract static class SuperClass {, +      @Subscribe, +      public abstract void overriddenAndAnnotatedInSubclass(Object o);]