[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  public void testImmediateTryAcquire() {, +    RateLimiter r = RateLimiter.create(1);, +    assertTrue("Unable to acquire initial permit", r.tryAcquire());, +    assertFalse("Capable of acquiring secondary permit", r.tryAcquire());, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  public void testImmediateTryAcquire() {, +    RateLimiter r = RateLimiter.create(1);, +    assertTrue("Unable to acquire initial permit", r.tryAcquire());, +    assertFalse("Capable of acquiring secondary permit", r.tryAcquire());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/RateLimiter.java, +   * Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay., +   *, +   * <p>, +   * This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}., +   *, +   * @param permits the number of permits to acquire, +   * @return {@code true} if the permits were acquired, {@code false} otherwise, +   */, +  public boolean tryAcquire(int permits) {, +    return tryAcquire(permits, 0, TimeUnit.MICROSECONDS);, +  }, +, +  /**, +   * Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without, +   * delay., +   *, +   * <p>, +   * This method is equivalent to {@code tryAcquire(1)}., +   *, +   * @return {@code true} if the permit was acquired, {@code false} otherwise, +   */, +  public boolean tryAcquire() {, +    return tryAcquire(1, 0, TimeUnit.MICROSECONDS);, +  }, +, +  /**]