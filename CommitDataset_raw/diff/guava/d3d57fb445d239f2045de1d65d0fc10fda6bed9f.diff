[+++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +  public void testTransform_inputCancelButNotInterruptPropagatesToOutput() throws Exception {, +    SettableFuture<String> f1 = SettableFuture.create();, +    ListenableFuture<Object> f2 = Futures.transform(f1, Functions.identity());, +    f1.cancel(true);, +    assertTrue(f2.isCancelled());, +    /*, +     * We might like to propagate interruption, too, but it's not clear that it matters. For now, we, +     * test for the behavior that we have today., +     */, +    assertFalse(((AbstractFuture<?>) f2).wasInterrupted());, +  }, +, +  public void testTransformAsync_inputCancelButNotInterruptPropagatesToOutput() throws Exception {, +    SettableFuture<Foo> f1 = SettableFuture.create();, +    final SettableFuture<Bar> secondary = SettableFuture.create();, +    AsyncFunction<Foo, Bar> function =, +        new AsyncFunction<Foo, Bar>() {, +          @Override, +          public ListenableFuture<Bar> apply(Foo unused) {, +            return secondary;, +          }, +        };, +    ListenableFuture<Bar> f2 = Futures.transformAsync(f1, function);, +    f1.cancel(true);, +    assertTrue(f2.isCancelled());, +    /*, +     * We might like to propagate interruption, too, but it's not clear that it matters. For now, we, +     * test for the behavior that we have today., +     */, +    assertFalse(((AbstractFuture<?>) f2).wasInterrupted());, +  }, +, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +  public void testTransform_inputCancelButNotInterruptPropagatesToOutput() throws Exception {, +    SettableFuture<String> f1 = SettableFuture.create();, +    ListenableFuture<Object> f2 = Futures.transform(f1, Functions.identity());, +    f1.cancel(true);, +    assertTrue(f2.isCancelled());, +    /*, +     * We might like to propagate interruption, too, but it's not clear that it matters. For now, we, +     * test for the behavior that we have today., +     */, +    assertFalse(((AbstractFuture<?>) f2).wasInterrupted());, +  }, +, +  public void testTransformAsync_inputCancelButNotInterruptPropagatesToOutput() throws Exception {, +    SettableFuture<Foo> f1 = SettableFuture.create();, +    final SettableFuture<Bar> secondary = SettableFuture.create();, +    AsyncFunction<Foo, Bar> function =, +        new AsyncFunction<Foo, Bar>() {, +          @Override, +          public ListenableFuture<Bar> apply(Foo unused) {, +            return secondary;, +          }, +        };, +    ListenableFuture<Bar> f2 = Futures.transformAsync(f1, function);, +    f1.cancel(true);, +    assertTrue(f2.isCancelled());, +    /*, +     * We might like to propagate interruption, too, but it's not clear that it matters. For now, we, +     * test for the behavior that we have today., +     */, +    assertFalse(((AbstractFuture<?>) f2).wasInterrupted());, +  }, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java, +public void testTransformAsync_inputCancelButNotInterruptPropagatesToOutput() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testTransformAsync_inputCancelButNotInterruptPropagatesToOutput();, +  } catch (Throwable t) {, +    failure = t;, +  }, +  try {, +    testCase.tearDown();, +  } catch (Throwable t) {, +    if (failure == null) {, +      failure = t;, +    }, +  }, +  if (failure instanceof Exception) {, +    throw (Exception) failure;, +  }, +  if (failure instanceof Error) {, +    throw (Error) failure;, +  }, +  if (failure != null) {, +    throw new RuntimeException(failure);, +  }, +}, +, +public void testTransform_inputCancelButNotInterruptPropagatesToOutput() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testTransform_inputCancelButNotInterruptPropagatesToOutput();]