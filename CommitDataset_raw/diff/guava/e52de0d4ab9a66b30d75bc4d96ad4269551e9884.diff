[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, +  // Create a second ClassLoader and use it to get a second version of the TestEnum class., +  // Run Enums.getIfPresent on that other TestEnum and then return a WeakReference containing the, +  // new ClassLoader. If Enums.getIfPresent does caching that prevents the shadow TestEnum, +  // (and therefore its ClassLoader) from being unloaded, then this WeakReference will never be, +  // cleared., +, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, +  // Create a second ClassLoader and use it to get a second version of the TestEnum class., +  // Run Enums.getIfPresent on that other TestEnum and then return a WeakReference containing the, +  // new ClassLoader. If Enums.getIfPresent does caching that prevents the shadow TestEnum, +  // (and therefore its ClassLoader) from being unloaded, then this WeakReference will never be, +  // cleared., +, +++ b/guava-tests/test/com/google/common/base/EnumsTest.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.testing.GcFinalization;, +import java.lang.ref.WeakReference;, +import java.net.URLClassLoader;, +import java.util.HashSet;, +import java.util.Set;, +  @GwtIncompatible("weak references"), +  public void testGetIfPresent_doesNotPreventClassUnloading() throws Exception {, +    WeakReference<?> shadowLoaderReference = doTestClassUnloading();, +    GcFinalization.awaitClear(shadowLoaderReference);, +  }, +, +  // Create a second ClassLoader and use it to get a second version of the TestEnum class., +  // Run Enums.getIfPresent on that other TestEnum and then return a WeakReference containing the, +  // new ClassLoader. If Enums.getIfPresent does caching that prevents the shadow TestEnum, +  // (and therefore its ClassLoader) from being unloaded, then this WeakReference will never be, +  // cleared., +  @GwtIncompatible("weak references"), +  private WeakReference<?> doTestClassUnloading() throws Exception {, +    URLClassLoader myLoader = (URLClassLoader) getClass().getClassLoader();, +    URLClassLoader shadowLoader = new URLClassLoader(myLoader.getURLs(), null);, +    @SuppressWarnings("unchecked"), +    Class<TestEnum> shadowTestEnum =, +        (Class<TestEnum>) Class.forName(TestEnum.class.getName(), false, shadowLoader);, +    assertNotSame(shadowTestEnum, TestEnum.class);, +    Set<TestEnum> shadowConstants = new HashSet<TestEnum>();, +    for (TestEnum constant : TestEnum.values()) {, +      Optional<TestEnum> result = Enums.getIfPresent(shadowTestEnum, constant.name());, +      assertTrue(result.isPresent());, +      shadowConstants.add(result.get());, +    }, +    assertEquals(ImmutableSet.copyOf(shadowTestEnum.getEnumConstants()), shadowConstants);, +    Optional<TestEnum> result = Enums.getIfPresent(shadowTestEnum, "blibby");, +    assertFalse(result.isPresent());, +    return new WeakReference<ClassLoader>(shadowLoader);, +  }, +]