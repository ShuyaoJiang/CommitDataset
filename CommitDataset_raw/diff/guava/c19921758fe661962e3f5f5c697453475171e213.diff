[+++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +    void enqueueNotification(K key, int hash, V value, RemovalCause cause) {, +        RemovalNotification<K, V> notification = new RemovalNotification<K, V>(key, value, cause);, +              enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +              enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +            enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +              enqueueNotification(entryKey, hash, entryValue, RemovalCause.EXPLICIT);, +              enqueueNotification(entryKey, hash, entryValue, RemovalCause.EXPLICIT);, +                    e.getKey(), e.getHash(), e.getValueReference().get(), RemovalCause.EXPLICIT);, +            enqueueNotification(, +                e.getKey(), hash, e.getValueReference().get(), RemovalCause.COLLECTED);, +              enqueueNotification(key, hash, valueReference.get(), RemovalCause.COLLECTED);, +      enqueueNotification(key, hash, valueReference.get(), cause);, +  @Override, +  @Override, +  @Override, +  @Override, +    @Override, +    @Override, +    @Override, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +    void enqueueNotification(K key, int hash, V value, RemovalCause cause) {, +        RemovalNotification<K, V> notification = new RemovalNotification<K, V>(key, value, cause);, +              enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +              enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +            enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +              enqueueNotification(entryKey, hash, entryValue, RemovalCause.EXPLICIT);, +              enqueueNotification(entryKey, hash, entryValue, RemovalCause.EXPLICIT);, +                    e.getKey(), e.getHash(), e.getValueReference().get(), RemovalCause.EXPLICIT);, +            enqueueNotification(, +                e.getKey(), hash, e.getValueReference().get(), RemovalCause.COLLECTED);, +              enqueueNotification(key, hash, valueReference.get(), RemovalCause.COLLECTED);, +      enqueueNotification(key, hash, valueReference.get(), cause);, +  @Override, +  @Override, +  @Override, +  @Override, +    @Override, +    @Override, +    @Override, +++ /dev/null, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +    void enqueueNotification(K key, int hash, V value, RemovalCause cause) {, +        RemovalNotification<K, V> notification = new RemovalNotification<K, V>(key, value, cause);, +              enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +              enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +            enqueueNotification(key, hash, entryValue, RemovalCause.REPLACED);, +              enqueueNotification(entryKey, hash, entryValue, RemovalCause.EXPLICIT);, +              enqueueNotification(entryKey, hash, entryValue, RemovalCause.EXPLICIT);, +                    e.getKey(), e.getHash(), e.getValueReference().get(), RemovalCause.EXPLICIT);, +            enqueueNotification(, +                e.getKey(), hash, e.getValueReference().get(), RemovalCause.COLLECTED);, +              enqueueNotification(key, hash, valueReference.get(), RemovalCause.COLLECTED);, +      enqueueNotification(key, hash, valueReference.get(), cause);, +  @Override, +  @Override, +  @Override, +  @Override, +    @Override, +    @Override, +    @Override, +++ /dev/null, +++ b/guava/src/com/google/common/collect/MapMaker.java, +   * for any reason (see removal causes in {@link RemovalCause}). It will invoke the listener during, +   * invocations of any of that map's public methods (even read-only methods)., +   * @since Guava release 10, +  @Beta, +  public <K, V> GenericMapMaker<K, V> removalListener(RemovalListener<K, V> listener) {, +   * @deprecated use {@link #removalListener}, which provides additional information about the, +   *     entry being evicted; note that {@link #evictionListener} only notifies on removals due to, +   *     eviction, while {@link #removalListener} also notifies on explicit removal (providing the, +   *     {@link RemovalCause} to indicate the specific cause of removal., +  @Deprecated, +   * @since Guava release 10, +  @Beta, +  public interface RemovalListener<K, V> {, +   *, +   * @since Guava release 10, +  @Beta, +  public static final class RemovalNotification<K, V> extends ImmutableEntry<K, V> {, +     * Returns {@code true} if there was an automatic removal due to eviction (the cause is neither, +     * {@link RemovalCause#EXPLICIT} nor {@link RemovalCause#REPLACED})., +  /**, +   * The reason why an entry was removed., +   *, +   * @since Guava release 10, +   */, +  @Beta, +  public enum RemovalCause {, +     * java.util.Iterator#remove}., +     * result from the user invoking {@link Map#put}, {@link Map#putAll},, +     * {@link ConcurrentMap#replace(Object, Object)}, or, +     * {@link ConcurrentMap#replace(Object, Object, Object)}., +     * Returns {@code true} if there was an automatic removal due to eviction (the cause is neither]