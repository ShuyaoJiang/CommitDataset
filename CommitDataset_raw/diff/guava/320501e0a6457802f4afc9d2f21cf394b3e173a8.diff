[+++ b/guava/src/com/google/common/collect/AbstractSortedMultiset.java, +  @GwtTransient final Comparator<? super E> comparator;, +++ b/guava/src/com/google/common/collect/AbstractSortedMultiset.java, +  @GwtTransient final Comparator<? super E> comparator;, +++ b/guava/src/com/google/common/collect/Multiset.java, + * <p>Elements of a multiset that are equal to one another are referred to as, + * <i>occurrences</i> of the same single element. The total number of, + * occurrences of an element in a multiset is called the <i>count</i> of that, + * element (the terms "frequency" and "multiplicity" are equivalent, but not, + * used in this API). Since the count of an element is represented as an {@code, + * int}, a multiset may never contain more than {@link Integer#MAX_VALUE}, + * occurrences of any one element., +++ b/guava/src/com/google/common/collect/AbstractSortedMultiset.java, +  @GwtTransient final Comparator<? super E> comparator;, +++ b/guava/src/com/google/common/collect/Multiset.java, + * <p>Elements of a multiset that are equal to one another are referred to as, + * <i>occurrences</i> of the same single element. The total number of, + * occurrences of an element in a multiset is called the <i>count</i> of that, + * element (the terms "frequency" and "multiplicity" are equivalent, but not, + * used in this API). Since the count of an element is represented as an {@code, + * int}, a multiset may never contain more than {@link Integer#MAX_VALUE}, + * occurrences of any one element., +++ b/guava/src/com/google/common/io/ByteStreams.java, +   * input stream., +++ b/guava/src/com/google/common/collect/AbstractSortedMultiset.java, +  @GwtTransient final Comparator<? super E> comparator;, +++ b/guava/src/com/google/common/collect/Multiset.java, + * <p>Elements of a multiset that are equal to one another are referred to as, + * <i>occurrences</i> of the same single element. The total number of, + * occurrences of an element in a multiset is called the <i>count</i> of that, + * element (the terms "frequency" and "multiplicity" are equivalent, but not, + * used in this API). Since the count of an element is represented as an {@code, + * int}, a multiset may never contain more than {@link Integer#MAX_VALUE}, + * occurrences of any one element., +++ b/guava/src/com/google/common/io/ByteStreams.java, +   * input stream., +++ b/guava/src/com/google/common/primitives/package-info.java, + * Static utilities for working with the eight primitive types and {@code void},, + * and value types for treating them as unsigned., +++ b/guava/src/com/google/common/collect/AbstractSortedMultiset.java, +  @GwtTransient final Comparator<? super E> comparator;, +++ b/guava/src/com/google/common/collect/Multiset.java, + * <p>Elements of a multiset that are equal to one another are referred to as, + * <i>occurrences</i> of the same single element. The total number of, + * occurrences of an element in a multiset is called the <i>count</i> of that, + * element (the terms "frequency" and "multiplicity" are equivalent, but not, + * used in this API). Since the count of an element is represented as an {@code, + * int}, a multiset may never contain more than {@link Integer#MAX_VALUE}, + * occurrences of any one element., +++ b/guava/src/com/google/common/io/ByteStreams.java, +   * input stream., +++ b/guava/src/com/google/common/primitives/package-info.java, + * Static utilities for working with the eight primitive types and {@code void},, + * and value types for treating them as unsigned., +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   * @param input The future to transform, +  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,, +    return transform(input, function, MoreExecutors.sameThreadExecutor());, +   * @param input The future to transform, +  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> input,, +    AsyncFunction<I, O> wrapperFunction, +        = new AsyncFunction<I, O>() {, +    return transform(input, wrapperFunction, executor);, +   * @param input The future to transform, +  public static <I, O> Future<O> lazyTransform(final Future<I> input,, +    checkNotNull(input);, +        return input.cancel(mayInterruptIfRunning);, +        return input.isCancelled();, +        return input.isDone();, +        return applyTransformation(input.get());, +        return applyTransformation(input.get(timeout, unit));]