[+++ b/guava-tests/test/com/google/common/io/CountingInputStreamTest.java, +import java.io.InputStream;, +  , +  public void testMarkNotSet() {, +    try {, +      counter.reset();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Mark not set", expected.getMessage());, +    }, +  }, +  , +  public void testMarkNotSupported() {, +    counter = new CountingInputStream(new UnmarkableInputStream());, +, +    try {, +      counter.reset();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Mark not supported", expected.getMessage());, +    }, +  }, +  , +  private static class UnmarkableInputStream extends InputStream {, +    @Override, +    public int read() throws IOException {, +      return 0;, +    }, +    , +    @Override, +    public boolean markSupported() {, +      return false;, +    }    , +  }, +++ b/guava-tests/test/com/google/common/io/CountingInputStreamTest.java, +import java.io.InputStream;, +  , +  public void testMarkNotSet() {, +    try {, +      counter.reset();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Mark not set", expected.getMessage());, +    }, +  }, +  , +  public void testMarkNotSupported() {, +    counter = new CountingInputStream(new UnmarkableInputStream());, +, +    try {, +      counter.reset();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Mark not supported", expected.getMessage());, +    }, +  }, +  , +  private static class UnmarkableInputStream extends InputStream {, +    @Override, +    public int read() throws IOException {, +      return 0;, +    }, +    , +    @Override, +    public boolean markSupported() {, +      return false;, +    }    , +  }, +++ b/guava-tests/test/com/google/common/io/LimitInputStreamTest.java, +import java.io.IOException;, +  , +  public void testMarkNotSet() {, +    byte[] big = newPreFilledByteArray(5);, +    InputStream bin = new ByteArrayInputStream(big);, +    InputStream lin = new LimitInputStream(bin, 2);, +, +    try {, +      lin.reset();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Mark not set", expected.getMessage());, +    }, +  }, +  , +  public void testMarkNotSupported() {, +    InputStream lin = new LimitInputStream(new UnmarkableInputStream(), 2);, +, +    try {, +      lin.reset();, +      fail();, +    } catch (IOException expected) {, +      assertEquals("Mark not supported", expected.getMessage());, +    }, +  }, +  , +  private static class UnmarkableInputStream extends InputStream {, +    @Override, +    public int read() throws IOException {, +      return 0;, +    }]