[+++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + *   BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + *  byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre>   {@code, + *  BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>, + * <pre>   {@code, + *   return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + *   BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + *  byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre>   {@code, + *  BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>, + * <pre>   {@code, + *   return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + *   GcFinalization.await(latch);}</pre>, + *   });}</pre>, +   *   });}</pre>, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + *   BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + *  byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre>   {@code, + *  BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>, + * <pre>   {@code, + *   return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + *   GcFinalization.await(latch);}</pre>, + *   });}</pre>, +   *   });}</pre>, +++ b/guava/src/com/google/common/base/Equivalence.java, +   *    Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);}</pre>, +   *   equiv.wrap("a").equals(equiv.wrap("hello")) // false}</pre>, +   *   equiv.wrap(obj).equals(obj) // always false}</pre>, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + *   BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + *  byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre>   {@code, + *  BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>, + * <pre>   {@code, + *   return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + *   GcFinalization.await(latch);}</pre>, + *   });}</pre>, +   *   });}</pre>, +++ b/guava/src/com/google/common/base/Equivalence.java, +   *    Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);}</pre>, +   *   equiv.wrap("a").equals(equiv.wrap("hello")) // false}</pre>, +   *   equiv.wrap(obj).equals(obj) // always false}</pre>, +++ b/guava/src/com/google/common/base/Objects.java, +   * <pre>   {@code, +   *   }}</pre>, +   * <p><b>Warning</b>: When a single object is supplied, the returned hash code, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + *   BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + *  byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre>   {@code, + *  BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>, + * <pre>   {@code, + *   return hex.decode("deadbeef"); // throws an IllegalArgumentException}</pre>, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + *   GcFinalization.await(latch);}</pre>, + *   });}</pre>, +   *   });}</pre>, +++ b/guava/src/com/google/common/base/Equivalence.java, +   *    Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);}</pre>, +   *   equiv.wrap("a").equals(equiv.wrap("hello")) // false}</pre>, +   *   equiv.wrap(obj).equals(obj) // always false}</pre>, +++ b/guava/src/com/google/common/base/Objects.java, +   * <pre>   {@code, +   *   }}</pre>, +   * <p><b>Warning</b>: When a single object is supplied, the returned hash code, +++ b/guava/src/com/google/common/base/Preconditions.java, + *, + * <pre>   {@code, + *   }}</pre>, + * <pre>   {@code, + *   checkArgument(count > 0, "must be positive: %s", count);}</pre>, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, + *, + *   BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))}</pre>, + *  byte[] decoded = BaseEncoding.base32().decode("MZXW6===");}</pre>, + * <p>...returns the ASCII bytes of the string {@code "foo"}., + * with modified behavior:, + * <pre>   {@code, + *  BaseEncoding.base16().lowerCase().decode("deadbeef");}</pre>]