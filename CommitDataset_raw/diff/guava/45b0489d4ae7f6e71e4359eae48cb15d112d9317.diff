[+++ b/android/guava-tests/test/com/google/common/collect/HashBiMapTest.java, +  public static final class HashBiMapGenerator extends TestStringBiMapGenerator {, +    protected BiMap<String, String> create(Entry<String, String>[] entries) {, +      BiMap<String, String> result = HashBiMap.create();, +    BiMap<Integer, String> map = HashBiMap.create();, +    map.put(1, "one");, +    Set<Entry<Integer, String>> entries = map.entrySet();, +    Iterator<Entry<Integer, String>> iterator = entries.iterator();, +    Entry<Integer, String> entry = iterator.next();, +    assertEquals("two", map.get(1));, +    assertEquals(Integer.valueOf(1), map.inverse().get("two"));, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +    assertThat(map.entrySet()), +        .containsExactly(, +            Maps.immutableEntry("foo", 1),, +            Maps.immutableEntry("bar", 2),, +            Maps.immutableEntry("quux", 3)), +        .inOrder();, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +, +    assertThat(map.entrySet()), +        .containsExactly(Maps.immutableEntry("bar", 2), Maps.immutableEntry("quux", 3)), +        .inOrder();, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +, +    assertThat(map.entrySet()), +        .containsExactly(Maps.immutableEntry("foo", 1), Maps.immutableEntry("quux", 3)), +        .inOrder();, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +, +    assertThat(map.entrySet()), +        .containsExactly(Maps.immutableEntry("foo", 1), Maps.immutableEntry("bar", 2)), +        .inOrder();, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +, +    map.forcePut("quux", 1);, +    assertThat(map.entrySet()), +        .containsExactly(Maps.immutableEntry("bar", 2), Maps.immutableEntry("quux", 1)), +        .inOrder();, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +, +    map.inverse().forcePut(1, "quux");, +    assertThat(map.entrySet()), +        .containsExactly(Maps.immutableEntry("bar", 2), Maps.immutableEntry("quux", 1)), +        .inOrder();, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("bar", 2);, +    map.put("quux", 1);, +, +    assertThat(map.inverse().entrySet()), +        .containsExactly(Maps.immutableEntry(2, "bar"), Maps.immutableEntry(1, "quux")), +        .inOrder();, +, +  public void testInverseInsertionOrderAfterInverseForcePut() {, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +, +    map.inverse().forcePut(1, "quux");, +    assertThat(map.inverse().entrySet()), +        .containsExactly(Maps.immutableEntry(2, "bar"), Maps.immutableEntry(1, "quux")), +        .inOrder();, +    BiMap<String, Integer> map = HashBiMap.create();, +    map.put("foo", 1);, +    map.put("bar", 2);, +    map.put("quux", 3);, +    map.put("nab", 4);, +, +    map.inverse().forcePut(4, "bar");, +    assertThat(map.entrySet()), +        .containsExactly(, +            Maps.immutableEntry("foo", 1),, +            Maps.immutableEntry("bar", 4),, +            Maps.immutableEntry("quux", 3)), +        .inOrder();, +++ b/android/guava-tests/test/com/google/common/collect/HashBiMapTest.java, +  public static final class HashBiMapGenerator extends TestStringBiMapGenerator {, +    protected BiMap<String, String> create(Entry<String, String>[] entries) {, +      BiMap<String, String> result = HashBiMap.create();, +    BiMap<Integer, String> map = HashBiMap.create();, +    map.put(1, "one");]