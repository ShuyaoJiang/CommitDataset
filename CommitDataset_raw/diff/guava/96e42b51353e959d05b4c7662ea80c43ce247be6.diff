[+++ b/src/com/google/common/base/CharMatcher.java, +          .or(inRange('\u2000', '\u200a')), +          .precomputed();, +          .or(inRange('\u2008', '\u200a')), +          .precomputed();, +    DIGIT = digit.precomputed();, +      .or(is('\u3000')), +      .precomputed();, +      .or(anyOf("\ufeff\ufff9\ufffa\ufffb")), +      .precomputed();, +      .or(inRange('\uff61', '\uffdc')), +      .precomputed();, +++ b/src/com/google/common/base/CharMatcher.java, +          .or(inRange('\u2000', '\u200a')), +          .precomputed();, +          .or(inRange('\u2008', '\u200a')), +          .precomputed();, +    DIGIT = digit.precomputed();, +      .or(is('\u3000')), +      .precomputed();, +      .or(anyOf("\ufeff\ufff9\ufffa\ufffb")), +      .precomputed();, +      .or(inRange('\uff61', '\uffdc')), +      .precomputed();, +++ b/src/com/google/common/base/Joiner.java, + * <p><b>Warning: joiner instances are always immutable</b>; a configuration, + * method such as {@code useForNull} has no effect on the instance it is invoked, + * on! You must store and use the new joiner instance returned by the method., + * This makes joiners thread-safe, and safe to store as {@code static final}, + * constants. <pre>   {@code, + *, + *   // Bad! Do not do this!, + *   Joiner joiner = Joiner.on(',');, + *   joiner.skipNulls(); // does nothing!, + *   return joiner.join("wrong", null, "wrong");}</pre>, + *, +   * Object, Object...)}, except that it does not throw {@link IOException}., +   * iterables and arrays. Like {@code Joiner}, it is thread-safe and immutable., +    private final Joiner joiner;, +    private final String keyValueSeparator;, +++ b/src/com/google/common/base/CharMatcher.java, +          .or(inRange('\u2000', '\u200a')), +          .precomputed();, +          .or(inRange('\u2008', '\u200a')), +          .precomputed();, +    DIGIT = digit.precomputed();, +      .or(is('\u3000')), +      .precomputed();, +      .or(anyOf("\ufeff\ufff9\ufffa\ufffb")), +      .precomputed();, +      .or(inRange('\uff61', '\uffdc')), +      .precomputed();, +++ b/src/com/google/common/base/Joiner.java, + * <p><b>Warning: joiner instances are always immutable</b>; a configuration, + * method such as {@code useForNull} has no effect on the instance it is invoked, + * on! You must store and use the new joiner instance returned by the method., + * This makes joiners thread-safe, and safe to store as {@code static final}, + * constants. <pre>   {@code, + *, + *   // Bad! Do not do this!, + *   Joiner joiner = Joiner.on(',');, + *   joiner.skipNulls(); // does nothing!, + *   return joiner.join("wrong", null, "wrong");}</pre>, + *, +   * Object, Object...)}, except that it does not throw {@link IOException}., +   * iterables and arrays. Like {@code Joiner}, it is thread-safe and immutable., +    private final Joiner joiner;, +    private final String keyValueSeparator;, +++ b/src/com/google/common/base/Throwables.java, +  @Beta // TODO: decide best return type, +++ b/src/com/google/common/base/CharMatcher.java, +          .or(inRange('\u2000', '\u200a')), +          .precomputed();, +          .or(inRange('\u2008', '\u200a')), +          .precomputed();, +    DIGIT = digit.precomputed();, +      .or(is('\u3000')), +      .precomputed();, +      .or(anyOf("\ufeff\ufff9\ufffa\ufffb")), +      .precomputed();, +      .or(inRange('\uff61', '\uffdc')), +      .precomputed();, +++ b/src/com/google/common/base/Joiner.java, + * <p><b>Warning: joiner instances are always immutable</b>; a configuration, + * method such as {@code useForNull} has no effect on the instance it is invoked, + * on! You must store and use the new joiner instance returned by the method., + * This makes joiners thread-safe, and safe to store as {@code static final}, + * constants. <pre>   {@code, + *, + *   // Bad! Do not do this!, + *   Joiner joiner = Joiner.on(',');, + *   joiner.skipNulls(); // does nothing!, + *   return joiner.join("wrong", null, "wrong");}</pre>, + *, +   * Object, Object...)}, except that it does not throw {@link IOException}., +   * iterables and arrays. Like {@code Joiner}, it is thread-safe and immutable., +    private final Joiner joiner;, +    private final String keyValueSeparator;, +++ b/src/com/google/common/base/Throwables.java, +  @Beta // TODO: decide best return type]