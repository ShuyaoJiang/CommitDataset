[+++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +        if (left.isSupertypeOf(right)) {, +    assertTrue(tokL.isSupertypeOf(List.class));, +    assertTrue(tokL.isSupertypeOf(ArrayList.class));, +    assertFalse(tokL.isSupertypeOf(List[].class));, +    assertTrue(tokN.isSupertypeOf(Number.class));, +    assertTrue(tokN.isSupertypeOf(Integer.class));, +    assertTrue(TypeToken.of(Object.class).isSupertypeOf(, +    assertFalse(TypeToken.of(int.class).isSupertypeOf(, +    assertTrue(new TypeToken<T[]>() {}.isSupertypeOf(new TypeToken<T[]>() {}));, +    assertTrue(new TypeToken<T[]>() {}.isSupertypeOf(new TypeToken<T1[]>() {}));, +    assertFalse(new TypeToken<T[]>() {}.isSupertypeOf(new TypeToken<T[][]>() {}));, +        .isSupertypeOf(new TypeToken<T[]>() {}));, +          .isSupertypeOf(new TypeToken<T[]>() {}));, +    assertTrue(TypeToken.of(Object.class).isSupertypeOf(new TypeToken<T[]>() {}));, +    assertFalse(TypeToken.of(String.class).isSupertypeOf(new TypeToken<T[]>() {}));, +    assertTrue(TypeToken.of(Object[].class).isSupertypeOf(wildcardType));, +    assertTrue(TypeToken.of(Object.class).isSupertypeOf(wildcardType));, +    assertFalse(TypeToken.of(wildcardType).isSupertypeOf(wildcardType));, +    assertFalse(TypeToken.of(int[].class).isSupertypeOf(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object[]>>() {}.isSupertypeOf(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object>>() {}.isSupertypeOf(wildcardType));, +    assertTrue(wildcardType.isSupertypeOf(wildcardType));, +    assertFalse(new TypeToken<Iterable<int[]>>() {}.isSupertypeOf(wildcardType));, +    assertFalse(subtypeOfArray.isSupertypeOf(Object[].class));, +    assertFalse(subtypeOfArray.isSupertypeOf(Object[][].class));, +    assertFalse(subtypeOfArray.isSupertypeOf(String[].class));, +    assertTrue(supertypeOfArray.isSupertypeOf(Object[].class));, +    assertFalse(supertypeOfArray.isSupertypeOf(Object.class));, +    assertTrue(supertypeOfArray.isSupertypeOf(Object[][].class));, +    assertTrue(supertypeOfArray.isSupertypeOf(String[].class));, +    assertTrue(subtypeOfArray.isSupertypeOf(new TypeToken<Iterable<Object[]>>() {}));, +    assertTrue(subtypeOfArray.isSupertypeOf(new TypeToken<Iterable<Object[][]>>() {}));, +    assertTrue(subtypeOfArray.isSupertypeOf(new TypeToken<Iterable<String[]>>() {}));, +    assertTrue(supertypeOfArray.isSupertypeOf(new TypeToken<Iterable<Object[]>>() {}));, +    assertTrue(supertypeOfArray.isSupertypeOf(new TypeToken<Iterable<Object>>() {}));, +    assertFalse(supertypeOfArray.isSupertypeOf(new TypeToken<Iterable<Object[][]>>() {}));, +    assertFalse(supertypeOfArray.isSupertypeOf(new TypeToken<Iterable<String[]>>() {}));, +    assertFalse(supertypeOfString.isSupertypeOf(supertypeOfString));, +    assertFalse(supertypeOfString.isSupertypeOf(Object.class));, +    assertFalse(supertypeOfString.isSupertypeOf(CharSequence.class));, +    assertTrue(supertypeOfString.isSupertypeOf(String.class));, +    assertTrue(supertypeOfString.isSupertypeOf(Types.subtypeOf(String.class)));, +    assertTrue(TypeToken.of(int[].class).isSupertypeOf(wildcardType));, +    assertTrue(TypeToken.of(Object.class).isSupertypeOf(wildcardType));, +    assertFalse(TypeToken.of(wildcardType).isSupertypeOf(wildcardType));, +    assertFalse(TypeToken.of(Object[].class).isSupertypeOf(wildcardType));, +    assertFalse(new TypeToken<Iterable<int[]>>() {}.isSupertypeOf(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object>>() {}.isSupertypeOf(wildcardType));, +    assertTrue(wildcardType.isSupertypeOf(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object[]>>() {}.isSupertypeOf(wildcardType));, +    assertTrue(supertypeOfArray.isSupertypeOf(subtypeOfArray));, +    assertFalse(supertypeOfArray.isSupertypeOf(supertypeOfArray));, +    assertFalse(subtypeOfArray.isSupertypeOf(subtypeOfArray));, +    assertFalse(subtypeOfArray.isSupertypeOf(supertypeOfArray));, +    assertFalse(supertypeOfArray.isSupertypeOf(subtypeOfArray));, +    assertTrue(supertypeOfArray.isSupertypeOf(supertypeOfArray));, +    assertTrue(subtypeOfArray.isSupertypeOf(subtypeOfArray));, +    assertFalse(subtypeOfArray.isSupertypeOf(supertypeOfArray));, +    assertTrue(TypeToken.of(Object[].class).isSupertypeOf(new TypeToken<T[]>() {}));, +    assertTrue(TypeToken.of(Object[].class).isSupertypeOf(new TypeToken<T[][]>() {}));, +    assertTrue(TypeToken.of(Object[][].class).isSupertypeOf(new TypeToken<T[][]>() {}));, +    assertTrue(tokL.isSupertypeOf(StringList.class));, +    assertTrue(tokL.isSupertypeOf(, +    assertTrue(tokS.isSupertypeOf(Second.class));, +    assertTrue(tokS.isSupertypeOf(Third.class.getGenericSuperclass()));, +    assertTrue(tokL.isSupertypeOf(List[].class));, +    assertFalse(tokL.isSupertypeOf(List.class));, +    assertTrue(tokS.isSupertypeOf(Second[].class));, +    assertTrue(tokS.isSupertypeOf(Third[].class));, +    assertTrue(tokL.isSupertypeOf(new TypeToken<List>() {}));, +    assertTrue(tokL.isSupertypeOf(new TypeToken<List<String>>() {}));, +    assertTrue(tokL.isSupertypeOf(new TypeToken<List<?>>() {}));, +    assertTrue(tokS.isSupertypeOf(new TypeToken<Second>() {}));, +    assertTrue(tokS.isSupertypeOf(new TypeToken<Third>() {}));, +    assertTrue(tokS.isSupertypeOf(, +    assertTrue(tokA.isSupertypeOf(new TypeToken<List[]>() {}));, +    assertTrue(tokA.isSupertypeOf(new TypeToken<List<String>[]>() {}));, +    assertTrue(tokA.isSupertypeOf(new TypeToken<List<?>[]>() {}));, +    assertTrue(tokenL.isSupertypeOf(StringList.class));, +    assertFalse(tokenL.isSupertypeOf(List.class));, +    assertTrue(tokenF.isSupertypeOf(ConcreteIS.class));, +    assertFalse(tokenF.isSupertypeOf(ConcreteSI.class));, +    assertTrue(tokenL.isSupertypeOf(StringList[].class));, +    assertFalse(tokenL.isSupertypeOf(List[].class));, +    assertTrue(tokenL.isSupertypeOf(, +    assertFalse(tokenL.isSupertypeOf(, +    assertTrue(tokenF.isSupertypeOf(, +    assertFalse(tokenF.isSupertypeOf(, +    assertTrue(tokL.isSupertypeOf(tokL.getType()));, +    assertTrue(tokL.isSupertypeOf(token.getType()));, +    assertTrue(tokenL.isSupertypeOf(new TypeToken<List<String>>() {}));, +    assertTrue(tokenL.isSupertypeOf(new TypeToken<ArrayList<String>>() {}));, +    assertTrue(tokenL.isSupertypeOf(new TypeToken<StringList>() {}));, +    assertTrue(tokenF.isSupertypeOf(new TypeToken<Second<String>>() {}));, +    assertTrue(tokenF.isSupertypeOf(, +    assertFalse(tokenF.isSupertypeOf(, +    assertTrue(tokenF.isSupertypeOf(, +    assertFalse(tokenF.isSupertypeOf(, +    assertTrue(tokenF.isSupertypeOf(new TypeToken<ConcreteIS>() {}));]