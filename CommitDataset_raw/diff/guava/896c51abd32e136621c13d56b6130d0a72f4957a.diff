[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    assertThat(ClassPath.Scanner.getClassPathEntries(classloader)), +        .containsExactly(new File("/a"), classloader, new File("/b"), classloader);, +    assertThat(ClassPath.Scanner.getClassPathEntries(child)), +        .containsExactly(new File("/a"), parent, new File("/b"), child), +        .inOrder();, +    assertThat(ClassPath.Scanner.getClassPathEntries(child)), +        .containsExactly(new File("/a"), parent);, +    assertThat(ClassPath.Scanner.getClassPathEntries(new ClassLoader(null) {})).isEmpty();, +    assertThat(ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {})), +        .containsExactly(new File("/a"), parent);, +    assertThat(ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {})), +        .containsExactly(new File("/a"), grandParent, new File("/b"), parent);, +    assertThat(ClassPath.Scanner.getClassPathEntries(new ClassLoader(parent) {})), +        .containsExactly(new File("/a"), grandParent);, +  }, +, +  @AndroidIncompatible // Android forbids null parent ClassLoader, +  // https://github.com/google/guava/issues/2152, +  public void testClassPathEntries_URLClassLoader_pathWithSpace() throws Exception {, +    URL url = new URL("file:///c:/Documents and Settings/");, +    URLClassLoader classloader = new URLClassLoader(new URL[] {url}, null);, +    assertThat(ClassPath.Scanner.getClassPathEntries(classloader)), +        .containsExactly(new File("/c:/Documents and Settings/"), classloader);, +  }, +, +  @AndroidIncompatible // Android forbids null parent ClassLoader, +  // https://github.com/google/guava/issues/2152, +  public void testClassPathEntries_URLClassLoader_pathWithEscapedSpace() throws Exception {, +    URL url = new URL("file:///c:/Documents%20and%20Settings/");, +    URLClassLoader classloader = new URLClassLoader(new URL[] {url}, null);, +    assertThat(ClassPath.Scanner.getClassPathEntries(classloader)), +        .containsExactly(new File("/c:/Documents and Settings/"), classloader);, +  }, +, +  // https://github.com/google/guava/issues/2152, +  public void testToFile() throws Exception {, +    assertThat(ClassPath.toFile(new URL("file:///c:/Documents%20and%20Settings/"))), +        .isEqualTo(new File("/c:/Documents and Settings/"));, +    assertThat(ClassPath.toFile(new URL("file:///c:/Documents ~ Settings, or not/11-12 12:05"))), +        .isEqualTo(new File("/c:/Documents ~ Settings, or not/11-12 12:05"));, +  }, +, +  // https://github.com/google/guava/issues/2152, +  @AndroidIncompatible // works in newer Android versions but fails at the version we test with, +  public void testToFile_AndroidIncompatible() throws Exception {, +    assertThat(ClassPath.toFile(new URL("file:///c:\\Documents ~ Settings, or not\\11-12 12:05"))), +        .isEqualTo(new File("/c:\\Documents ~ Settings, or not\\11-12 12:05"));, +    assertThat(ClassPath.toFile(new URL("file:///C:\\Program Files\\Apache Software Foundation"))), +        .isEqualTo(new File("/C:\\Program Files\\Apache Software Foundation/"));, +    assertThat(ClassPath.toFile(new URL("file:///C:\\\u20320 \u22909")))  // Chinese Ni Hao, +        .isEqualTo(new File("/C:\\\u20320 \u22909"));, +  }, +, +  @AndroidIncompatible // Android forbids null parent ClassLoader, +  // https://github.com/google/guava/issues/2152, +  public void testJarFileWithSpaces() throws Exception {, +    URL url = makeJarUrlWithName("To test unescaped spaces in jar file name.jar");, +    URLClassLoader classloader = new URLClassLoader(new URL[] {url}, null);, +    assertThat(ClassPath.from(classloader).getTopLevelClasses()).isNotEmpty();, +      assertThat(scanner.getResources()).hasSize(1);, +, +  private static URL makeJarUrlWithName(String name) throws IOException {, +    File fullPath = new File(Files.createTempDir(), name);, +    File jarFile = JarFileFinder.pickAnyJarFile();, +    Files.copy(jarFile, fullPath);, +    return fullPath.toURI().toURL();, +  }, +, +  private static final class JarFileFinder extends ClassPath.Scanner {, +, +    private File found;, +, +    static File pickAnyJarFile() throws IOException {, +      JarFileFinder finder = new JarFileFinder();, +      try {, +        finder.scan(JarFileFinder.class.getClassLoader());, +        throw new IllegalStateException("No jar file found!");, +      } catch (StopScanningException expected) {, +        return finder.found;, +      }, +    }, +, +    @Override protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {, +      this.found = new File(file.getName());, +      throw new StopScanningException();, +    }, +, +    @Override protected void scanDirectory(ClassLoader loader, File root) {}, +, +    // Special exception just to terminate the scanning when we get any jar file to use., +    private static final class StopScanningException extends RuntimeException {}, +  }, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    assertThat(ClassPath.Scanner.getClassPathEntries(classloader)), +        .containsExactly(new File("/a"), classloader, new File("/b"), classloader);, +    assertThat(ClassPath.Scanner.getClassPathEntries(child)), +        .containsExactly(new File("/a"), parent, new File("/b"), child), +        .inOrder();, +    assertThat(ClassPath.Scanner.getClassPathEntries(child))]