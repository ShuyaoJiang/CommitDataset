[+++ b/guava-gwt/test/com/google/common/io/testModule.gwt.xml, +  <inherits name="com.google.common.testing.Testing"/>, +++ b/guava-gwt/test/com/google/common/io/testModule.gwt.xml, +  <inherits name="com.google.common.testing.Testing"/>, +++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java, +, +    assertEquals("BaseEncoding.base64().withPadChar(=)", base64().toString());, +    assertEquals("BaseEncoding.base32Hex().omitPadding()", base32Hex().omitPadding().toString());, +    assertEquals(, +        "BaseEncoding.base32().lowerCase().withPadChar($)",, +        base32().lowerCase().withPadChar('$').toString());, +    assertEquals(, +        "BaseEncoding.base16().withSeparator(\"\n\", 10)",, +        base16().withSeparator("\n", 10).toString());, +++ b/guava-gwt/test/com/google/common/io/testModule.gwt.xml, +  <inherits name="com.google.common.testing.Testing"/>, +++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java, +, +    assertEquals("BaseEncoding.base64().withPadChar(=)", base64().toString());, +    assertEquals("BaseEncoding.base32Hex().omitPadding()", base32Hex().omitPadding().toString());, +    assertEquals(, +        "BaseEncoding.base32().lowerCase().withPadChar($)",, +        base32().lowerCase().withPadChar('$').toString());, +    assertEquals(, +        "BaseEncoding.base16().withSeparator(\"\n\", 10)",, +        base16().withSeparator("\n", 10).toString());, +++ b/guava/src/com/google/common/io/BaseEncoding.java, +import com.google.common.base.Objects;, +      try {, +      } catch (ArithmeticException e) {, +        throw new IllegalArgumentException("Illegal alphabet " + new String(chars), e);, +      }, +, +    @Override, +    public boolean equals(@Nullable Object other) {, +      if (other instanceof Alphabet) {, +        Alphabet that = (Alphabet) other;, +        return Arrays.equals(this.chars, that.chars);, +      }, +      return false;, +    }, +, +    @Override, +    public int hashCode() {, +      return Arrays.hashCode(chars);, +    }, +, +    @Override, +    public boolean equals(@Nullable Object other) {, +      if (other instanceof StandardBaseEncoding) {, +        StandardBaseEncoding that = (StandardBaseEncoding) other;, +        return this.alphabet.equals(that.alphabet), +            && Objects.equal(this.paddingChar, that.paddingChar);, +      }, +      return false;, +    }, +, +    @Override, +    public int hashCode() {, +      return alphabet.hashCode() ^ Objects.hashCode(paddingChar);, +    }]