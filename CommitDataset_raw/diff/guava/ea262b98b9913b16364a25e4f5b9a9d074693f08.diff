[+++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +   * #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate, +   * Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or, +   * set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns,, +   * the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was, +   * accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code, +   * Future} may have previously been set asynchronously, in which case its result may not be known, +   * yet. That result, though not yet known, cannot by overridden by a call to a {@code set*}, +   * Sets the failed result of this {@code Future} unless this {@code Future} has already been, +   * Sets the result of this {@code Future} to match the supplied input {@code Future} once the, +   * supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set, +   * (including "set asynchronously," defined below)., +   * is accepted, then this future is guaranteed to have been completed with the supplied future by, +   * the time this method returns. If the supplied future is not done and the call is accepted, then, +   * the future will be <i>set asynchronously</i>. Note that such a result, though not yet known,, +   * cannot by overridden by a call to a {@code set*} method, only by a call to {@link #cancel}., +   *, +   * <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later, +   * cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to, +   * {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code, +   * Future}.]