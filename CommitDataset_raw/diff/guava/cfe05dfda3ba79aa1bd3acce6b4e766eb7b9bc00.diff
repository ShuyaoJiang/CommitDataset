[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link Graph}, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link Graph}, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        EndpointPair<Integer> endpointPair = network.incidentNodes(inEdge);, +        assertThat(endpointPair.source()).isEqualTo(endpointPair.adjacentNode(node));, +        assertThat(endpointPair.target()).isEqualTo(node);, +        EndpointPair<Integer> endpointPair = network.incidentNodes(outEdge);, +        assertThat(endpointPair.source()).isEqualTo(node);, +        assertThat(endpointPair.target()).isEqualTo(endpointPair.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link Graph}, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        EndpointPair<Integer> endpointPair = network.incidentNodes(inEdge);, +        assertThat(endpointPair.source()).isEqualTo(endpointPair.adjacentNode(node));, +        assertThat(endpointPair.target()).isEqualTo(node);, +        EndpointPair<Integer> endpointPair = network.incidentNodes(outEdge);, +        assertThat(endpointPair.source()).isEqualTo(node);, +        assertThat(endpointPair.target()).isEqualTo(endpointPair.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link Graph} interface., +  MutableGraph<Integer> graph;, +  public abstract MutableGraph<Integer> createGraph();, +  static <N> void validateGraph(Graph<N> graph) {, +    assertThat(Graphs.equivalent(graph, Graphs.copyOf(graph))).isTrue();, +    assertThat(Graphs.equivalent(graph, ImmutableGraph.copyOf(graph))).isTrue();, +    assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph, new Object(), new Object()));, +    Set<EndpointPair<N>> allEndpointPairs = new HashSet<EndpointPair<N>>();, +        allEndpointPairs.add(EndpointPair.of(graph, node, successor));, +    assertThat(graph.edges()).isEqualTo(allEndpointPairs);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link Graph}, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        EndpointPair<Integer> endpointPair = network.incidentNodes(inEdge);, +        assertThat(endpointPair.source()).isEqualTo(endpointPair.adjacentNode(node));, +        assertThat(endpointPair.target()).isEqualTo(node);, +        EndpointPair<Integer> endpointPair = network.incidentNodes(outEdge);, +        assertThat(endpointPair.source()).isEqualTo(node);, +        assertThat(endpointPair.target()).isEqualTo(endpointPair.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link Graph} interface., +  MutableGraph<Integer> graph;, +  public abstract MutableGraph<Integer> createGraph();, +  static <N> void validateGraph(Graph<N> graph) {, +    assertThat(Graphs.equivalent(graph, Graphs.copyOf(graph))).isTrue();, +    assertThat(Graphs.equivalent(graph, ImmutableGraph.copyOf(graph))).isTrue();, +    assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph, new Object(), new Object()));, +    Set<EndpointPair<N>> allEndpointPairs = new HashSet<EndpointPair<N>>();, +        allEndpointPairs.add(EndpointPair.of(graph, node, successor));, +    assertThat(graph.edges()).isEqualTo(allEndpointPairs);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    assertThat(Graphs.equivalent(network, Graphs.copyOf(network))).isTrue();, +    assertThat(Graphs.equivalent(network, ImmutableNetwork.copyOf(network))).isTrue();, +    Graph<N> asGraph = network.asGraph();, +      EndpointPair<N> endpointPair = network.incidentNodes(edge);, +      N nodeU = endpointPair.nodeU();, +      N nodeV = endpointPair.nodeV();, +      assertThat(asGraph.edges()).contains(EndpointPair.of(network, nodeU, nodeV));, +      assertThat(network.edgesConnecting(nodeU, nodeV)).contains(edge);, +      assertThat(network.successors(nodeU)).contains(nodeV);, +      assertThat(network.adjacentNodes(nodeU)).contains(nodeV);, +      assertThat(network.outEdges(nodeU)).contains(edge);, +      assertThat(network.incidentEdges(nodeU)).contains(edge);, +      assertThat(network.predecessors(nodeV)).contains(nodeU);, +      assertThat(network.adjacentNodes(nodeV)).contains(nodeU);, +      assertThat(network.inEdges(nodeV)).contains(edge);, +      assertThat(network.incidentEdges(nodeV)).contains(edge);, +          network.incidentNodes(edge).nodeU(), network.incidentNodes(edge).nodeV())) {, +          assertThat(network.incidentNodes(edge)), +              .isEqualTo(EndpointPair.of(network, node, otherNode));, +        assertTrue(network.incidentNodes(incidentEdge).nodeU().equals(node), +            || network.incidentNodes(incidentEdge).nodeV().equals(node));, +        assertThat(network.edgesConnecting(node, successor)).isNotEmpty();, +    EndpointPair<Integer> unused = network.incidentNodes(E12); // ensure cache (if any) is populated, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface., + * <p>This class is responsible for testing that a directed implementation of {@link Graph}, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        EndpointPair<Integer> endpointPair = network.incidentNodes(inEdge);, +        assertThat(endpointPair.source()).isEqualTo(endpointPair.adjacentNode(node));, +        assertThat(endpointPair.target()).isEqualTo(node);, +        EndpointPair<Integer> endpointPair = network.incidentNodes(outEdge);, +        assertThat(endpointPair.source()).isEqualTo(node);, +        assertThat(endpointPair.target()).isEqualTo(endpointPair.adjacentNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, + * Abstract base class for testing implementations of {@link Graph} interface. Graph, + * <li>Test cases related to the specific implementation of the {@link Graph} interface., +  MutableGraph<Integer> graph;, +  public abstract MutableGraph<Integer> createGraph();, +  static <N> void validateGraph(Graph<N> graph) {, +    assertThat(Graphs.equivalent(graph, Graphs.copyOf(graph))).isTrue();, +    assertThat(Graphs.equivalent(graph, ImmutableGraph.copyOf(graph))).isTrue();, +    assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph, new Object(), new Object()));]