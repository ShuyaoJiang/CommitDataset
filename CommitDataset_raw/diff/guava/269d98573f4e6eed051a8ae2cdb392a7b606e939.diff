[+++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  public void testGenericArrayType() {, +  public void testMultiDimensionalGenericArrayType() {, +  public <T> void testGenericVariableTypeArrays() {, +  void testResolveType_fromTypeVariable() {, +  void testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed() {, +  public void testResolveType_fromWildcard() {, +  public void testAssignableWildcardBoundedByArrayToArrayClass() {, +    assertFalse(TypeToken.of(wildcardType).isAssignableFrom(wildcardType));, +  public void testAssignableWildcardTypeParameterToClassTypeParameter() {, +    TypeToken<?> wildcardType = new TypeToken<Iterable<? extends Object[]>>() {};, +    assertFalse(new TypeToken<Iterable<Object[]>>() {}.isAssignableFrom(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object>>() {}.isAssignableFrom(wildcardType));, +    assertTrue(wildcardType.isAssignableFrom(wildcardType));, +    assertFalse(new TypeToken<Iterable<int[]>>() {}.isAssignableFrom(wildcardType));, +  public void testAssignableArrayClassToBoundedWildcard() {, +    TypeToken<?> subtypeOfArray = TypeToken.of(Types.subtypeOf(Object[].class));, +    TypeToken<?> supertypeOfArray = TypeToken.of(Types.supertypeOf(Object[].class));, +    assertFalse(subtypeOfArray.isAssignableFrom(Object[].class));, +    assertFalse(subtypeOfArray.isAssignableFrom(Object[][].class));, +    assertFalse(subtypeOfArray.isAssignableFrom(String[].class));, +    assertTrue(supertypeOfArray.isAssignableFrom(Object[].class));, +    assertFalse(supertypeOfArray.isAssignableFrom(Object.class));, +    assertTrue(supertypeOfArray.isAssignableFrom(Object[][].class));, +    assertTrue(supertypeOfArray.isAssignableFrom(String[].class));, +  }, +, +  public void testAssignableClassTypeParameterToWildcardTypeParameter() {, +    TypeToken<?> subtypeOfArray = new TypeToken<Iterable<? extends Object[]>>() {};, +    TypeToken<?> supertypeOfArray = new TypeToken<Iterable<? super Object[]>>() {};, +    assertTrue(subtypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[]>>() {}));, +    assertTrue(subtypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[][]>>() {}));, +    assertTrue(subtypeOfArray.isAssignableFrom(new TypeToken<Iterable<String[]>>() {}));, +    assertTrue(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[]>>() {}));, +    assertTrue(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object>>() {}));, +    assertFalse(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<Object[][]>>() {}));, +    assertFalse(supertypeOfArray.isAssignableFrom(new TypeToken<Iterable<String[]>>() {}));, +  }, +, +  public void testAssignableNonParameterizedClassToWildcard() {, +    TypeToken<?> supertypeOfString = TypeToken.of(Types.supertypeOf(String.class));, +    assertFalse(supertypeOfString.isAssignableFrom(supertypeOfString));, +    assertFalse(supertypeOfString.isAssignableFrom(Object.class));, +    assertFalse(supertypeOfString.isAssignableFrom(CharSequence.class));, +    assertTrue(supertypeOfString.isAssignableFrom(String.class));, +    assertTrue(supertypeOfString.isAssignableFrom(Types.subtypeOf(String.class)));, +  }, +, +  public void testAssignableWildcardBoundedByIntArrayToArrayClass() {, +    assertFalse(TypeToken.of(wildcardType).isAssignableFrom(wildcardType));, +  public void testAssignableWildcardTypeParameterBoundedByIntArrayToArrayClassTypeParameter() {, +    TypeToken<?> wildcardType = new TypeToken<Iterable<? extends int[]>>() {};, +    assertFalse(new TypeToken<Iterable<int[]>>() {}.isAssignableFrom(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object>>() {}.isAssignableFrom(wildcardType));, +    assertTrue(wildcardType.isAssignableFrom(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object[]>>() {}.isAssignableFrom(wildcardType));, +  }, +, +  public void testAssignableWildcardToWildcard() {, +    TypeToken<?> subtypeOfArray = TypeToken.of(Types.subtypeOf(Object[].class));, +    TypeToken<?> supertypeOfArray = TypeToken.of(Types.supertypeOf(Object[].class));, +    assertTrue(supertypeOfArray.isAssignableFrom(subtypeOfArray));, +    assertFalse(supertypeOfArray.isAssignableFrom(supertypeOfArray));, +    assertFalse(subtypeOfArray.isAssignableFrom(subtypeOfArray));, +    assertFalse(subtypeOfArray.isAssignableFrom(supertypeOfArray));, +  }, +, +  public void testAssignableWildcardTypeParameterToWildcardTypeParameter() {, +    TypeToken<?> subtypeOfArray = new TypeToken<Iterable<? extends Object[]>>() {};, +    TypeToken<?> supertypeOfArray = new TypeToken<Iterable<? super Object[]>>() {};, +    assertFalse(supertypeOfArray.isAssignableFrom(subtypeOfArray));, +    assertTrue(supertypeOfArray.isAssignableFrom(supertypeOfArray));, +    assertTrue(subtypeOfArray.isAssignableFrom(subtypeOfArray));, +    assertFalse(subtypeOfArray.isAssignableFrom(supertypeOfArray));, +  public void testAssignableArrayToClass() {, +  public void testGenericArrayTypeToArrayType() {, +  public void testIsArray_wildcardType() {, +  public void testGetComponentType_wildcardType() {, +  public void testRawTypes() {, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  public void testGenericArrayType() {, +  public void testMultiDimensionalGenericArrayType() {, +  public <T> void testGenericVariableTypeArrays() {, +  void testResolveType_fromTypeVariable() {, +  void testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed() {, +  public void testResolveType_fromWildcard() {, +  public void testAssignableWildcardBoundedByArrayToArrayClass() {, +    assertFalse(TypeToken.of(wildcardType).isAssignableFrom(wildcardType));, +  public void testAssignableWildcardTypeParameterToClassTypeParameter() {, +    TypeToken<?> wildcardType = new TypeToken<Iterable<? extends Object[]>>() {};, +    assertFalse(new TypeToken<Iterable<Object[]>>() {}.isAssignableFrom(wildcardType));, +    assertFalse(new TypeToken<Iterable<Object>>() {}.isAssignableFrom(wildcardType));, +    assertTrue(wildcardType.isAssignableFrom(wildcardType));, +    assertFalse(new TypeToken<Iterable<int[]>>() {}.isAssignableFrom(wildcardType));, +  public void testAssignableArrayClassToBoundedWildcard() {, +    TypeToken<?> subtypeOfArray = TypeToken.of(Types.subtypeOf(Object[].class));, +    TypeToken<?> supertypeOfArray = TypeToken.of(Types.supertypeOf(Object[].class));, +    assertFalse(subtypeOfArray.isAssignableFrom(Object[].class));, +    assertFalse(subtypeOfArray.isAssignableFrom(Object[][].class));, +    assertFalse(subtypeOfArray.isAssignableFrom(String[].class));]