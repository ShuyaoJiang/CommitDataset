[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build., + * For the most part, you should probably just ignore the existence of this class., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build., + * For the most part, you should probably just ignore the existence of this class., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build., + * For the most part, you should probably just ignore the existence of this class., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Equivalence<? super V> valueEquivalence) {, +    Preconditions.checkNotNull(valueEquivalence);, +        if (valueEquivalence.equivalent(leftValue, rightValue)) {, +  abstract static class KeySet<K, V> extends AbstractSet<K> {, +  abstract static class Values<K, V> extends AbstractCollection<V> {, +  abstract static class EntrySet<K, V> extends AbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build., + * For the most part, you should probably just ignore the existence of this class., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Equivalence<? super V> valueEquivalence) {, +    Preconditions.checkNotNull(valueEquivalence);, +        if (valueEquivalence.equivalent(leftValue, rightValue)) {, +  abstract static class KeySet<K, V> extends AbstractSet<K> {, +  abstract static class Values<K, V> extends AbstractCollection<V> {, +  abstract static class EntrySet<K, V> extends AbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * to the way {@code IdentityHashMap} handles key lookups., +   * corresponding {@link Set} implementation (such as {@link java.util.HashMap}, +   * or {@link java.util.TreeMap})., +   * the {@link Map#keySet} of an {@code IdentityHashMap} all are)., +  // TODO(kevinb): how to omit that last sentence when building GWT javadoc?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build., + * For the most part, you should probably just ignore the existence of this class., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Equivalence<? super V> valueEquivalence) {, +    Preconditions.checkNotNull(valueEquivalence);, +        if (valueEquivalence.equivalent(leftValue, rightValue)) {, +  abstract static class KeySet<K, V> extends AbstractSet<K> {, +  abstract static class Values<K, V> extends AbstractCollection<V> {, +  abstract static class EntrySet<K, V> extends AbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * to the way {@code IdentityHashMap} handles key lookups., +   * corresponding {@link Set} implementation (such as {@link java.util.HashMap}, +   * or {@link java.util.TreeMap})., +   * the {@link Map#keySet} of an {@code IdentityHashMap} all are)., +  // TODO(kevinb): how to omit that last sentence when building GWT javadoc?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultimap.java, +   * returns a {@link SortedSet}, instead of the {@link java.util.Set} specified, +   * in the {@link Multimap} interface., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build., + * For the most part, you should probably just ignore the existence of this class., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Equivalence<? super V> valueEquivalence) {, +    Preconditions.checkNotNull(valueEquivalence);, +        if (valueEquivalence.equivalent(leftValue, rightValue)) {, +  abstract static class KeySet<K, V> extends AbstractSet<K> {, +  abstract static class Values<K, V> extends AbstractCollection<V> {, +  abstract static class EntrySet<K, V> extends AbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * to the way {@code IdentityHashMap} handles key lookups., +   * corresponding {@link Set} implementation (such as {@link java.util.HashMap}, +   * or {@link java.util.TreeMap})., +   * the {@link Map#keySet} of an {@code IdentityHashMap} all are)., +  // TODO(kevinb): how to omit that last sentence when building GWT javadoc?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultimap.java, +   * returns a {@link SortedSet}, instead of the {@link java.util.Set} specified, +   * in the {@link Multimap} interface., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, + * resulting multiset will violate the {@link java.util.Collection} contract,, + * which is specified in terms of {@link Object#equals}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * A class exactly like {@link MapMaker}, except restricted in the types of maps it can build., + * For the most part, you should probably just ignore the existence of this class., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Equivalence<? super V> valueEquivalence) {, +    Preconditions.checkNotNull(valueEquivalence);, +        if (valueEquivalence.equivalent(leftValue, rightValue)) {, +  abstract static class KeySet<K, V> extends AbstractSet<K> {, +  abstract static class Values<K, V> extends AbstractCollection<V> {, +  abstract static class EntrySet<K, V> extends AbstractSet<Entry<K, V>> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * to the way {@code IdentityHashMap} handles key lookups., +   * corresponding {@link Set} implementation (such as {@link java.util.HashMap}, +   * or {@link java.util.TreeMap})., +   * the {@link Map#keySet} of an {@code IdentityHashMap} all are)., +  // TODO(kevinb): how to omit that last sentence when building GWT javadoc?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultimap.java, +   * returns a {@link SortedSet}, instead of the {@link java.util.Set} specified, +   * in the {@link Multimap} interface., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, + * resulting multiset will violate the {@link java.util.Collection} contract,]