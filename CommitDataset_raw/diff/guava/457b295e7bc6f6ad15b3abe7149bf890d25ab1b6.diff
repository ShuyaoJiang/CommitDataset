[+++ b/guava/src/com/google/common/collect/Multiset.java, +   * <p><b>Note</b>: This method ignores how often any element might appear in , +   * {@code c}, and only cares whether or not an element appears at all., +   * If you wish to remove one occurrence in this multiset for every occurrence, +   * in {@code c}, see {@link Multisets#removeOccurrences(Multiset, Multiset)}., +   * , +   * <p><b>Note</b>: This method ignores how often any element might appear in , +   * {@code c}, and only cares whether or not an element appears at all., +   * If you wish to remove one occurrence in this multiset for every occurrence, +   * in {@code c}, see {@link Multisets#retainOccurrences(Multiset, Multiset)}., +   * , +   * , +   * @see Multisets#retainOccurrences(Multiset, Multiset), +++ b/guava/src/com/google/common/collect/Multiset.java, +   * <p><b>Note</b>: This method ignores how often any element might appear in , +   * {@code c}, and only cares whether or not an element appears at all., +   * If you wish to remove one occurrence in this multiset for every occurrence, +   * in {@code c}, see {@link Multisets#removeOccurrences(Multiset, Multiset)}., +   * , +   * <p><b>Note</b>: This method ignores how often any element might appear in , +   * {@code c}, and only cares whether or not an element appears at all., +   * If you wish to remove one occurrence in this multiset for every occurrence, +   * in {@code c}, see {@link Multisets#retainOccurrences(Multiset, Multiset)}., +   * , +   * , +   * @see Multisets#retainOccurrences(Multiset, Multiset), +++ b/guava/src/com/google/common/collect/Multisets.java, +import com.google.common.annotations.Beta;, +   * Modifies {@code multisetToModify} so that its count for an element, +   * {@code e} is at most {@code multisetToRetain.count(e)}., +   *, +   * <p>To be precise, {@code multisetToModify.count(e)} is set to, +   * {@code Math.min(multisetToModify.count(e),, +   * multisetToRetain.count(e))}. This is similar to, +   * {@link #intersection(Multiset, Multiset) intersection}, +   * {@code (multisetToModify, multisetToRetain)}, but mutates, +   * {@code multisetToModify} instead of returning a view., +   *, +   * <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps, +   * all occurrences of elements that appear at all in {@code, +   * multisetToRetain}, and deletes all occurrences of all other elements., +   *, +   * @return {@code true} if {@code multisetToModify} was changed as a result, +   *         of this operation, +   * @since Guava release 10, +   */, +  @Beta public static boolean retainOccurrences(Multiset<?> multisetToModify,, +      Multiset<?> multisetToRetain) {, +    return retainOccurrencesImpl(multisetToModify, multisetToRetain);, +  }, +, +  /**, +   * Delegate implementation which cares about the element type., +   */, +  private static <E> boolean retainOccurrencesImpl(, +      Multiset<E> multisetToModify, Multiset<?> occurrencesToRetain) {, +    checkNotNull(multisetToModify);, +    checkNotNull(occurrencesToRetain);, +    // Avoiding ConcurrentModificationExceptions is tricky., +    Iterator<Entry<E>> entryIterator = multisetToModify.entrySet().iterator();, +    boolean changed = false;, +    while (entryIterator.hasNext()) {, +      Entry<E> entry = entryIterator.next();, +      int retainCount = occurrencesToRetain.count(entry.getElement());, +      if (retainCount == 0) {, +        entryIterator.remove();, +        changed = true;, +      } else if (retainCount < entry.getCount()) {, +        multisetToModify.setCount(entry.getElement(), retainCount);, +        changed = true;, +      }, +    }, +    return changed;, +  }, +, +  /**, +   * For each occurrence of an element {@code e} in {@code occurrencesToRemove},, +   * removes one occurrence of {@code e} in {@code multisetToModify}., +   *, +   * <p>Equivalently, this method modifies {@code multisetToModify} so that, +   * {@code multisetToModify.count(e)} is set to, +   * {@code Math.max(0, multisetToModify.count(e) -, +   * occurrencesToRemove.count(e))}., +   *, +   * <p>This is <i>not</i> the same as {@code multisetToModify.}, +   * {@link Multiset#removeAll removeAll}{@code (occurrencesToRemove)}, which, +   * removes all occurrences of elements that appear in, +   * {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent, +   * to, albeit more efficient than, the following: <pre>   {@code, +   *, +   *   for (E e : occurrencesToRemove) {, +   *     multisetToModify.remove(e);, +   *   }}</pre>, +   *, +   * @return {@code true} if {@code multisetToModify} was changed as a result of, +   *         this operation, +   * @since Guava release 10, +   */, +  @Beta public static boolean removeOccurrences(, +      Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove) {]