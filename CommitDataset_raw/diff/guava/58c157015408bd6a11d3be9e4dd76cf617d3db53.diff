[+++ b/guava/src/com/google/common/graph/Endpoints.java, +  final N nodeA() {, +  final N nodeB() {, +, +, +      // Equivalent to the following simple implementation:, +      // boolean condition1 = nodeA().equals(other.nodeA()) && nodeB().equals(other.nodeB());, +      // boolean condition2 = nodeA().equals(other.nodeB()) && nodeB().equals(other.nodeA());, +      // return condition1 || condition2;, +      if (nodeA().equals(other.nodeA())) { // check condition1, +        // Here's the tricky bit. We don't have to explicitly check for condition2 in this case., +        // Why? The second half of condition2 requires that nodeB equals other.nodeA., +        // We already know that nodeA equals other.nodeA. Combined with the earlier statement,, +        // and the transitive property of equality, this implies that nodeA equals nodeB., +        // If nodeA equals nodeB, condition1 == condition2, so checking condition1 is sufficient., +        return nodeB().equals(other.nodeB());, +      }, +      return nodeA().equals(other.nodeB()) && nodeB().equals(other.nodeA()); // check condition2]