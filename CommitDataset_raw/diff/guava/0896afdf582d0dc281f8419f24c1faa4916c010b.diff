[+++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +      "testEqualsAndSerializable", "testEqualsAndSerialization",, +      "testEquality");, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +      "testEqualsAndSerializable", "testEqualsAndSerialization",, +      "testEquality");, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    if (hasInstanceMethodToTestNulls(cls, visibility)) {, +  }, +, +  private boolean hasInstanceMethodToTestNulls(Class<?> c, Visibility visibility) {, +    for (Method method : nullPointerTester.getInstanceMethodsToTest(c, visibility)) {, +      for (Parameter param : Invokable.from(method).getParameters()) {, +        if (!NullPointerTester.isPrimitiveOrNullable(param)) {, +          return true;, +        }, +      }, +    }, +    return false;, +  }, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +      "testEqualsAndSerializable", "testEqualsAndSerialization",, +      "testEquality");, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    if (hasInstanceMethodToTestNulls(cls, visibility)) {, +  }, +, +  private boolean hasInstanceMethodToTestNulls(Class<?> c, Visibility visibility) {, +    for (Method method : nullPointerTester.getInstanceMethodsToTest(c, visibility)) {, +      for (Parameter param : Invokable.from(method).getParameters()) {, +        if (!NullPointerTester.isPrimitiveOrNullable(param)) {, +          return true;, +        }, +      }, +    }, +    return false;, +  }, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  public void testInstanceMethods(Object instance, Visibility minimalVisibility) {, +    for (Method method : getInstanceMethodsToTest(instance.getClass(), minimalVisibility)) {, +, +  ImmutableList<Method> getInstanceMethodsToTest(Class<?> c, Visibility minimalVisibility) {, +    ImmutableList.Builder<Method> builder = ImmutableList.builder();, +    for (Method method : minimalVisibility.getInstanceMethods(c)) {, +      if (!isIgnored(method)) {, +        builder.add(method);, +      }, +    }, +    return builder.build();, +  public void testConstructorParameter(Constructor<?> ctor, int paramIndex) {, +  static boolean isPrimitiveOrNullable(Parameter param) {, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +      "testEqualsAndSerializable", "testEqualsAndSerialization",, +      "testEquality");, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    if (hasInstanceMethodToTestNulls(cls, visibility)) {, +  }, +, +  private boolean hasInstanceMethodToTestNulls(Class<?> c, Visibility visibility) {, +    for (Method method : nullPointerTester.getInstanceMethodsToTest(c, visibility)) {, +      for (Parameter param : Invokable.from(method).getParameters()) {, +        if (!NullPointerTester.isPrimitiveOrNullable(param)) {, +          return true;, +        }, +      }, +    }, +    return false;, +  }, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +  public void testInstanceMethods(Object instance, Visibility minimalVisibility) {, +    for (Method method : getInstanceMethodsToTest(instance.getClass(), minimalVisibility)) {, +, +  ImmutableList<Method> getInstanceMethodsToTest(Class<?> c, Visibility minimalVisibility) {, +    ImmutableList.Builder<Method> builder = ImmutableList.builder();, +    for (Method method : minimalVisibility.getInstanceMethods(c)) {, +      if (!isIgnored(method)) {, +        builder.add(method);, +      }, +    }, +    return builder.build();, +  public void testConstructorParameter(Constructor<?> ctor, int paramIndex) {, +  static boolean isPrimitiveOrNullable(Parameter param) {, +++ b/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +import com.google.common.testing.NullPointerTester.Visibility;, +  public void testNullsOnReturnValues_good() throws Exception {, +  public void testNullsOnReturnValues_bad() throws Exception {, +  public void testNoNullCheckNeededDespitNotInstantiable() throws Exception {, +    tester.doTestNulls(NoNullCheckNeededDespitNotInstantiable.class, Visibility.PACKAGE);, +  }, +, +  public static class NoNullCheckNeededDespitNotInstantiable {, +, +    public NoNullCheckNeededDespitNotInstantiable(NotInstantiable x) {, +      checkNotNull(x);, +    }, +, +    @SuppressWarnings("unused") // reflected, +    void primitiveOnly(int i) {}, +, +    @SuppressWarnings("unused") //reflected]