[+++ b/build.xml, +<!-- TODO: there should be some better way to do this -->, +    <javadoc packagenames="com.google.common.annotations,com.google.common.base,com.google.common.collect,com.google.common.io,com.google.common.net,com.google.common.primitives,com.google.common.util.concurrent", +++ b/build.xml, +<!-- TODO: there should be some better way to do this -->, +    <javadoc packagenames="com.google.common.annotations,com.google.common.base,com.google.common.collect,com.google.common.io,com.google.common.net,com.google.common.primitives,com.google.common.util.concurrent", +++ b/src/com/google/common/base/CaseFormat.java, +++ b/build.xml, +<!-- TODO: there should be some better way to do this -->, +    <javadoc packagenames="com.google.common.annotations,com.google.common.base,com.google.common.collect,com.google.common.io,com.google.common.net,com.google.common.primitives,com.google.common.util.concurrent", +++ b/src/com/google/common/base/CaseFormat.java, +++ b/src/com/google/common/base/Preconditions.java, +++ b/build.xml, +<!-- TODO: there should be some better way to do this -->, +    <javadoc packagenames="com.google.common.annotations,com.google.common.base,com.google.common.collect,com.google.common.io,com.google.common.net,com.google.common.primitives,com.google.common.util.concurrent", +++ b/src/com/google/common/base/CaseFormat.java, +++ b/src/com/google/common/base/Preconditions.java, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +  /**, +   * Returns true if the given entry has expired., +   */, +  boolean isExpired(ReferenceEntry<K, V> entry) {, +    return isExpired((Expirable) entry, System.nanoTime());, +  }, +, +  /**, +   * Returns true if the given entry has expired., +   */, +  boolean isExpired(Expirable expirable, long now) {, +    // Avoid overflow., +    return now - expirable.getWriteTime() > expirationNanos;, +  }, +, +  /**, +   * Gets the value from an entry. Returns null if the value is null (i.e., +   * reclaimed or not computed yet) or if the entry is expired. If, +   * you already called expireEntries() you can just check the value for, +   * null and skip the expiration check., +   */, +  V getUnexpiredValue(ReferenceEntry<K, V> e) {, +    V value = e.getValueReference().get();, +    return (expires && isExpired(e)) ? null : value;, +  }, +, +            return getUnexpiredValue(e) != null;, +            V entryValue = getUnexpiredValue(e);, +       * here as it can be called over and over., +      V value = getUnexpiredValue(entry);, +++ b/build.xml, +<!-- TODO: there should be some better way to do this -->, +    <javadoc packagenames="com.google.common.annotations,com.google.common.base,com.google.common.collect,com.google.common.io,com.google.common.net,com.google.common.primitives,com.google.common.util.concurrent", +++ b/src/com/google/common/base/CaseFormat.java, +++ b/src/com/google/common/base/Preconditions.java, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +  /**, +   * Returns true if the given entry has expired., +   */, +  boolean isExpired(ReferenceEntry<K, V> entry) {, +    return isExpired((Expirable) entry, System.nanoTime());, +  }, +, +  /**, +   * Returns true if the given entry has expired., +   */, +  boolean isExpired(Expirable expirable, long now) {, +    // Avoid overflow., +    return now - expirable.getWriteTime() > expirationNanos;, +  }, +, +  /**, +   * Gets the value from an entry. Returns null if the value is null (i.e., +   * reclaimed or not computed yet) or if the entry is expired. If, +   * you already called expireEntries() you can just check the value for, +   * null and skip the expiration check., +   */, +  V getUnexpiredValue(ReferenceEntry<K, V> e) {, +    V value = e.getValueReference().get();, +    return (expires && isExpired(e)) ? null : value;, +  }, +, +            return getUnexpiredValue(e) != null;, +            V entryValue = getUnexpiredValue(e);, +       * here as it can be called over and over., +      V value = getUnexpiredValue(entry);, +++ b/src/com/google/common/collect/Lists.java, +++ b/build.xml, +<!-- TODO: there should be some better way to do this -->, +    <javadoc packagenames="com.google.common.annotations,com.google.common.base,com.google.common.collect,com.google.common.io,com.google.common.net,com.google.common.primitives,com.google.common.util.concurrent", +++ b/src/com/google/common/base/CaseFormat.java, +++ b/src/com/google/common/base/Preconditions.java, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +  /**, +   * Returns true if the given entry has expired., +   */, +  boolean isExpired(ReferenceEntry<K, V> entry) {, +    return isExpired((Expirable) entry, System.nanoTime());, +  }, +, +  /**, +   * Returns true if the given entry has expired.]