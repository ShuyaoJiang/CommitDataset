[+++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +      EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +      EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +      int unused = comparator.compare(1, null);, +      int unused = comparator.compare(null, 2);, +      int unused = comparator.compare(null, null);, +      Ordering<Integer> unused = Ordering.explicit(1, 2, 3, 4, 2);, +      List<Integer> unused = Ordering.natural().nullsFirst().immutableSortedCopy(listWithNull);, +      List<Integer> unused = numberOrdering.leastOf(Arrays.asList(3, 4, 5, -1), -1);, +      List<Integer> unused = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), -1);, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +      EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +      int unused = comparator.compare(1, null);, +      int unused = comparator.compare(null, 2);, +      int unused = comparator.compare(null, null);, +      Ordering<Integer> unused = Ordering.explicit(1, 2, 3, 4, 2);, +      List<Integer> unused = Ordering.natural().nullsFirst().immutableSortedCopy(listWithNull);, +      List<Integer> unused = numberOrdering.leastOf(Arrays.asList(3, 4, 5, -1), -1);, +      List<Integer> unused = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), -1);, +++ b/guava/src/com/google/common/collect/Collections2.java, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +      EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +      int unused = comparator.compare(1, null);, +      int unused = comparator.compare(null, 2);, +      int unused = comparator.compare(null, null);, +      Ordering<Integer> unused = Ordering.explicit(1, 2, 3, 4, 2);, +      List<Integer> unused = Ordering.natural().nullsFirst().immutableSortedCopy(listWithNull);, +      List<Integer> unused = numberOrdering.leastOf(Arrays.asList(3, 4, 5, -1), -1);, +      List<Integer> unused = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), -1);, +++ b/guava/src/com/google/common/collect/Collections2.java, +++ b/guava/src/com/google/common/collect/EvictingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +import javax.annotation.CheckReturnValue;, +, +@CheckReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +      EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +      int unused = comparator.compare(1, null);, +      int unused = comparator.compare(null, 2);, +      int unused = comparator.compare(null, null);, +      Ordering<Integer> unused = Ordering.explicit(1, 2, 3, 4, 2);, +      List<Integer> unused = Ordering.natural().nullsFirst().immutableSortedCopy(listWithNull);, +      List<Integer> unused = numberOrdering.leastOf(Arrays.asList(3, 4, 5, -1), -1);, +      List<Integer> unused = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), -1);, +++ b/guava/src/com/google/common/collect/Collections2.java, +++ b/guava/src/com/google/common/collect/EvictingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +import javax.annotation.CheckReturnValue;, +, +@CheckReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CheckReturnValue, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +      EvictingQueue<Object> unused = EvictingQueue.create(-1);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +      int unused = comparator.compare(1, null);, +      int unused = comparator.compare(null, 2);, +      int unused = comparator.compare(null, null);, +      Ordering<Integer> unused = Ordering.explicit(1, 2, 3, 4, 2);, +      List<Integer> unused = Ordering.natural().nullsFirst().immutableSortedCopy(listWithNull);, +      List<Integer> unused = numberOrdering.leastOf(Arrays.asList(3, 4, 5, -1), -1);, +      List<Integer> unused = numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), -1);, +++ b/guava/src/com/google/common/collect/Collections2.java, +++ b/guava/src/com/google/common/collect/EvictingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +import javax.annotation.CheckReturnValue;, +, +@CheckReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +  @CanIgnoreReturnValue, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CheckReturnValue, +  @CanIgnoreReturnValue, +++ b/guava/src/com/google/common/collect/Ordering.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +import javax.annotation.CheckReturnValue;, +@CheckReturnValue, +  @CanIgnoreReturnValue // TODO(kak): Consider removing this, +  @CanIgnoreReturnValue // TODO(kak): Consider removing this, +  @CanIgnoreReturnValue // TODO(kak): Consider removing this, +  @CanIgnoreReturnValue // TODO(kak): Consider removing this, +  @CanIgnoreReturnValue // TODO(kak): Consider removing this]