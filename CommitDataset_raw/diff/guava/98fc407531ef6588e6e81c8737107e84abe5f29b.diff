[+++ b/android/guava-tests/test/com/google/common/graph/DefaultNetworkImplementationsTest.java, +/*, + * Copyright (C) 2017 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import static com.google.common.graph.AbstractNetworkTest.ERROR_MODIFIABLE_COLLECTION;, +import static com.google.common.graph.TestUtil.ERROR_NODE_NOT_IN_GRAPH;, +import static com.google.common.graph.TestUtil.EdgeType.DIRECTED;, +import static com.google.common.graph.TestUtil.EdgeType.UNDIRECTED;, +import static com.google.common.graph.TestUtil.assertNodeNotInGraphErrorMessage;, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +, +import com.google.common.graph.TestUtil.EdgeType;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Set;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +import org.junit.runners.Parameterized.Parameters;, +, +/**, + * Test for {@link Network} methods which have default implementations., + * Currently those implementations are in {@link AbstractNetwork}; in future they might be in, + * {@link Network} itself, once we are willing to use Java 8 default methods., + */, +@AndroidIncompatible, +// TODO(cpovirk): Figure out Android JUnit 4 support. Does it work with Gingerbread? @RunWith?, +@RunWith(Parameterized.class), +public final class DefaultNetworkImplementationsTest {, +  private MutableNetwork<Integer, String> network;, +  private NetworkForTest<Integer, String> networkForTest;, +  private static final Integer N1 = 1;, +  private static final Integer N2 = 2;, +  private static final Integer NODE_NOT_IN_GRAPH = 1000;, +  private static final String E11 = "1-1";, +  private static final String E11_A = "1-1a";, +  private static final String E12 = "1-2";, +  private static final String E12_A = "1-2a";, +  private static final String E21 = "2-1";, +  private static final String E23 = "2-3";, +, +  @Parameters, +  public static Collection<Object[]> parameters() {, +    return Arrays.asList(, +        new Object[][] {, +          { UNDIRECTED },, +          { DIRECTED },, +        });, +  }, +, +  private final EdgeType edgeType;, +, +  public DefaultNetworkImplementationsTest(EdgeType edgeType) {, +    this.edgeType = edgeType;, +  }, +, +  @Before, +  public void setUp() throws Exception {, +    NetworkBuilder<Object, Object> builder = (edgeType == EdgeType.DIRECTED), +        ? NetworkBuilder.directed(), +        : NetworkBuilder.undirected();, +, +    network = builder.allowsSelfLoops(true).allowsParallelEdges(true).build();, +    networkForTest = NetworkForTest.from(network);, +  }, +, +  @Test, +  public void edgesConnecting_disconnectedNodes() {, +    network.addNode(N1);, +    network.addNode(N2);, +    assertThat(networkForTest.edgesConnecting(N1, N2)).isEmpty();, +  }, +, +  @Test, +  public void edgesConnecting_nodesNotInGraph() {, +    network.addNode(N1);, +    network.addNode(N2);, +    try {, +      networkForTest.edgesConnecting(N1, NODE_NOT_IN_GRAPH);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);]