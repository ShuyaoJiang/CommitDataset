[+++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      return HashCode.fromBytes(Arrays.copyOfRange(input, off, off + len));, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      return HashCode.fromBytes(Arrays.copyOfRange(input, off, off + len));, +++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import java.nio.ByteBuffer;, +          sink.putBytes(value, off, len);, +        }, +      }, +    },, +    PUT_BYTE_BUFFER() {, +      @Override, +      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        byte[] value = new byte[random.nextInt(128)];, +        random.nextBytes(value);, +        int pos = random.nextInt(value.length + 1);, +        int limit = pos + random.nextInt(value.length - pos + 1);, +        for (PrimitiveSink sink : sinks) {, +          ByteBuffer buffer = ByteBuffer.wrap(value);, +          buffer.position(pos);, +          buffer.limit(limit);, +          sink.putBytes(buffer);, +          assertEquals(limit, buffer.limit());, +          assertEquals(limit, buffer.position());, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      return HashCode.fromBytes(Arrays.copyOfRange(input, off, off + len));, +++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import java.nio.ByteBuffer;, +          sink.putBytes(value, off, len);, +        }, +      }, +    },, +    PUT_BYTE_BUFFER() {, +      @Override, +      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        byte[] value = new byte[random.nextInt(128)];, +        random.nextBytes(value);, +        int pos = random.nextInt(value.length + 1);, +        int limit = pos + random.nextInt(value.length - pos + 1);, +        for (PrimitiveSink sink : sinks) {, +          ByteBuffer buffer = ByteBuffer.wrap(value);, +          buffer.position(pos);, +          buffer.limit(limit);, +          sink.putBytes(buffer);, +          assertEquals(limit, buffer.limit());, +          assertEquals(limit, buffer.position());, +++ b/android/guava/src/com/google/common/hash/AbstractByteHasher.java, +  /** Updates this hasher with bytes from the given buffer. */, +  protected void update(ByteBuffer b) {, +    if (b.hasArray()) {, +      update(b.array(), b.arrayOffset() + b.position(), b.remaining());, +      b.position(b.limit());, +    } else {, +      for (int remaining = b.remaining(); remaining > 0; remaining--) {, +        update(b.get());, +      }, +    }, +  }, +, +  @Override, +  public Hasher putBytes(ByteBuffer bytes) {, +    update(bytes);, +    return this;, +  }, +, +++ b/android/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +++ b/android/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      return HashCode.fromBytes(Arrays.copyOfRange(input, off, off + len));, +++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import java.nio.ByteBuffer;, +          sink.putBytes(value, off, len);, +        }, +      }, +    },, +    PUT_BYTE_BUFFER() {, +      @Override, +      void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        byte[] value = new byte[random.nextInt(128)];, +        random.nextBytes(value);, +        int pos = random.nextInt(value.length + 1);, +        int limit = pos + random.nextInt(value.length - pos + 1);, +        for (PrimitiveSink sink : sinks) {, +          ByteBuffer buffer = ByteBuffer.wrap(value);, +          buffer.position(pos);, +          buffer.limit(limit);, +          sink.putBytes(buffer);, +          assertEquals(limit, buffer.limit());, +          assertEquals(limit, buffer.position());, +++ b/android/guava/src/com/google/common/hash/AbstractByteHasher.java, +  /** Updates this hasher with bytes from the given buffer. */, +  protected void update(ByteBuffer b) {, +    if (b.hasArray()) {, +      update(b.array(), b.arrayOffset() + b.position(), b.remaining());, +      b.position(b.limit());, +    } else {, +      for (int remaining = b.remaining(); remaining > 0; remaining--) {]