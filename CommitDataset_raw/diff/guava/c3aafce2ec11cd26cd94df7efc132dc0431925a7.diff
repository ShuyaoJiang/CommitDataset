[+++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java, +  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {, +    Iterable<? extends E> iterable = elements;, +    return copyOf(iterable);, +  } , +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java, +  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {, +    Iterable<? extends E> iterable = elements;, +    return copyOf(iterable);, +  } , +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +      Collection<? extends E> elements) {, +    return copyOfInternal(Ordering.natural(), elements, false);, +  }, +, +  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> copyOf(, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java, +  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {, +    Iterable<? extends E> iterable = elements;, +    return copyOf(iterable);, +  } , +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +      Collection<? extends E> elements) {, +    return copyOfInternal(Ordering.natural(), elements, false);, +  }, +, +  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> copyOf(, +++ b/src/com/google/common/collect/ImmutableSet.java, +   * @since 7 (source-compatible since release 2), +  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java, +  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {, +    Iterable<? extends E> iterable = elements;, +    return copyOf(iterable);, +  } , +, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +      Collection<? extends E> elements) {, +    return copyOfInternal(Ordering.natural(), elements, false);, +  }, +, +  public static <E extends Comparable<? super E>> ImmutableSortedSet<E> copyOf(, +++ b/src/com/google/common/collect/ImmutableSet.java, +   * @since 7 (source-compatible since release 2), +  public static <E> ImmutableSet<E> copyOf(Collection<? extends E> elements) {, +++ b/src/com/google/common/collect/ImmutableSortedSet.java, +    return copyOf(naturalOrder, elements);, +  }, +, +  /**, +   * Returns an immutable sorted set containing the given elements sorted by, +   * their natural ordering. When multiple elements are equivalent according to, +   * {@code compareTo()}, only the first one specified is included. To create a, +   * copy of a {@code SortedSet} that preserves the comparator, call, +   * {@link #copyOfSorted} instead. This method iterates over {@code elements}, +   * at most once., +   *, +   * <p>Note that if {@code s} is a {@code Set<String>}, then, +   * {@code ImmutableSortedSet.copyOf(s)} returns an, +   * {@code ImmutableSortedSet<String>} containing each of the strings in, +   * {@code s}, while {@code ImmutableSortedSet.of(s)} returns an, +   * {@code ImmutableSortedSet<Set<String>>} containing one element (the given, +   * set itself)., +   *, +   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements}, +   * is an {@code ImmutableSortedSet}, it may be returned instead of a copy., +   *, +   * <p>This method is not type-safe, as it may be called on elements that are, +   * not mutually comparable., +   *, +   * <p>This method is safe to use even when {@code elements} is a synchronized, +   * or concurrent collection that is currently being modified by another, +   * thread., +   *, +   * @throws ClassCastException if the elements are not mutually comparable, +   * @throws NullPointerException if any of {@code elements} is null, +   * @since 7 (source-compatible since release 2), +   */, +  public static <E> ImmutableSortedSet<E> copyOf(, +      Collection<? extends E> elements) {, +    // Hack around K not being a subtype of Comparable., +    // Unsafe, see ImmutableSortedSetFauxverideShim., +    @SuppressWarnings("unchecked"), +    Ordering<E> naturalOrder = (Ordering) Ordering.<Comparable>natural();, +    return copyOf(naturalOrder, elements);, +   * according to {@code compareTo()}, only the first one specified is, +   * included., +   *, +   * @throws NullPointerException if {@code comparator} or any of, +   *     {@code elements} is null, +   */, +  public static <E> ImmutableSortedSet<E> copyOf(, +      Comparator<? super E> comparator, Iterator<? extends E> elements) {, +    checkNotNull(comparator);, +    return copyOfInternal(comparator, elements);, +  }, +]