[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +  private static final ImmutableRangeSet<Integer> RANGE_SET_ONE =, +      ImmutableRangeSet.<Integer>builder(), +, +  private static final ImmutableRangeSet<Integer> RANGE_SET_TWO =, +      ImmutableRangeSet.<Integer>builder(), +          .add(Range.openClosed(0, 3)), +          .add(Range.closed(5, 8)), +          .add(Range.closedOpen(12, 15)), +          .add(Range.open(19, 20)), +          .build();, +, +  public void testUnion() {, +    RangeSet<Integer> expected =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.openClosed(0, 4)), +            .add(Range.closedOpen(5, 10)), +            .add(Range.closedOpen(12, 15)), +            .add(Range.openClosed(15, 17)), +            .add(Range.open(19, 20)), +            .build();, +, +    assertThat(RANGE_SET_ONE.union(RANGE_SET_TWO)).isEqualTo(expected);, +  }, +, +  public void testIntersection() {, +    RangeSet<Integer> expected =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.closed(2, 3)), +            .add(Range.open(6, 7)), +            .add(Range.singleton(8)), +            .build();, +, +    assertThat(RANGE_SET_ONE.intersection(RANGE_SET_TWO)).isEqualTo(expected);, +  }, +, +  public void testDifference() {, +    RangeSet<Integer> expected =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.openClosed(3, 4)), +            .add(Range.open(8, 10)), +            .add(Range.openClosed(15, 17)), +            .build();, +, +    assertThat(RANGE_SET_ONE.difference(RANGE_SET_TWO)).isEqualTo(expected);, +  }, +, +  public void testAsSet() {, +    ImmutableSortedSet<Integer> asSet = RANGE_SET_ONE.asSet(DiscreteDomain.integers());, +    ImmutableSortedSet<Integer> asSet = RANGE_SET_ONE.asSet(DiscreteDomain.integers());, +    ImmutableSortedSet<Integer> asSet = RANGE_SET_ONE.asSet(DiscreteDomain.integers());, +    ImmutableSortedSet<Integer> asSet = RANGE_SET_ONE.asSet(DiscreteDomain.integers());, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +  private static final ImmutableRangeSet<Integer> RANGE_SET_ONE =, +      ImmutableRangeSet.<Integer>builder(), +, +  private static final ImmutableRangeSet<Integer> RANGE_SET_TWO =, +      ImmutableRangeSet.<Integer>builder(), +          .add(Range.openClosed(0, 3)), +          .add(Range.closed(5, 8)), +          .add(Range.closedOpen(12, 15)), +          .add(Range.open(19, 20)), +          .build();, +, +  public void testUnion() {, +    RangeSet<Integer> expected =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.openClosed(0, 4)), +            .add(Range.closedOpen(5, 10)), +            .add(Range.closedOpen(12, 15)), +            .add(Range.openClosed(15, 17)), +            .add(Range.open(19, 20)), +            .build();, +, +    assertThat(RANGE_SET_ONE.union(RANGE_SET_TWO)).isEqualTo(expected);, +  }, +, +  public void testIntersection() {, +    RangeSet<Integer> expected =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.closed(2, 3)), +            .add(Range.open(6, 7)), +            .add(Range.singleton(8)), +            .build();, +, +    assertThat(RANGE_SET_ONE.intersection(RANGE_SET_TWO)).isEqualTo(expected);, +  }, +, +  public void testDifference() {, +    RangeSet<Integer> expected =, +        ImmutableRangeSet.<Integer>builder(), +            .add(Range.openClosed(3, 4)), +            .add(Range.open(8, 10)), +            .add(Range.openClosed(15, 17)), +            .build();, +, +    assertThat(RANGE_SET_ONE.difference(RANGE_SET_TWO)).isEqualTo(expected);, +  }, +, +  public void testAsSet() {]