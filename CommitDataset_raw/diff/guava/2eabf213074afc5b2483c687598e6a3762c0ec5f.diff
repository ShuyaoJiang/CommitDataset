[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  private enum EntryFunction implements Function<Entry, Object> {, +    KEY {, +      @Nullable, +    },, +    VALUE {, +      @Nullable, +  }, +  static <K> Function<Entry<K, ?>, K> keyFunction() {, +    return (Function) EntryFunction.KEY;, +  }, +, +    return (Function) EntryFunction.VALUE;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  private enum EntryFunction implements Function<Entry, Object> {, +    KEY {, +      @Nullable, +    },, +    VALUE {, +      @Nullable, +  }, +  static <K> Function<Entry<K, ?>, K> keyFunction() {, +    return (Function) EntryFunction.KEY;, +  }, +, +    return (Function) EntryFunction.VALUE;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * the FilteredEntryMultimap constructor would lead to a multimap whose removal, +  private static <K, V> Multimap<K, V> filterFiltered(FilteredMultimap<K, V> multimap,, +        = Predicates.and(multimap.entryPredicate(), entryPredicate);, +    return new FilteredEntryMultimap<K, V>(multimap.unfiltered, predicate);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  private enum EntryFunction implements Function<Entry, Object> {, +    KEY {, +      @Nullable, +    },, +    VALUE {, +      @Nullable, +  }, +  static <K> Function<Entry<K, ?>, K> keyFunction() {, +    return (Function) EntryFunction.KEY;, +  }, +, +    return (Function) EntryFunction.VALUE;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * the FilteredEntryMultimap constructor would lead to a multimap whose removal, +  private static <K, V> Multimap<K, V> filterFiltered(FilteredMultimap<K, V> multimap,, +        = Predicates.and(multimap.entryPredicate(), entryPredicate);, +    return new FilteredEntryMultimap<K, V>(multimap.unfiltered, predicate);, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java, +  , +  /**, +   * Returns the {@link Method} instance for the test that assumes the multiset iterator supports , +   * {@code remove()} so that the test for {@code Multisets.filter} can suppress it., +   */, +  @GwtIncompatible("reflection"), +  public static Method getIteratorUnknownOrderRemoveSupportedMethod() {, +    return Helpers.getMethod(MultisetIteratorTester.class, "testRemovingIteratorUnknownOrder");, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  private enum EntryFunction implements Function<Entry, Object> {, +    KEY {, +      @Nullable, +    },, +    VALUE {, +      @Nullable, +  }, +  static <K> Function<Entry<K, ?>, K> keyFunction() {, +    return (Function) EntryFunction.KEY;, +  }, +, +    return (Function) EntryFunction.VALUE;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * the FilteredEntryMultimap constructor would lead to a multimap whose removal, +  private static <K, V> Multimap<K, V> filterFiltered(FilteredMultimap<K, V> multimap,, +        = Predicates.and(multimap.entryPredicate(), entryPredicate);, +    return new FilteredEntryMultimap<K, V>(multimap.unfiltered, predicate);, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java, +  , +  /**, +   * Returns the {@link Method} instance for the test that assumes the multiset iterator supports , +   * {@code remove()} so that the test for {@code Multisets.filter} can suppress it., +   */, +  @GwtIncompatible("reflection"), +  public static Method getIteratorUnknownOrderRemoveSupportedMethod() {, +    return Helpers.getMethod(MultisetIteratorTester.class, "testRemovingIteratorUnknownOrder");, +  }, +++ b/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java, +import com.google.common.base.Predicates;, +import com.google.common.collect.testing.google.MultisetIteratorTester;, +    // TODO: use collection testers on Multimaps.forMap.values, +, +    // TODO: use collection testers on Multimaps.forMap.entries, +    , +    suite.addTest(filterSuite());, +, +    return suite;, +  }, +  , +  static abstract class TestFilteredMultimapGenerator ]