[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/OptionalTest.java, +    ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "b", "c");, +    ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs(2);, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/OptionalTest.java, +    ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "b", "c");, +    ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs(2);, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a,b,c");, +    ASSERT.that(letters).iteratesAs("a", "", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", " b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "");, +    ASSERT.that(letters).iteratesAs("", "a", "b", "c");, +    ASSERT.that(testCharacteringMotto).iteratesAs(, +    ASSERT.that(testCharacteringMotto).iteratesAs(, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", "c");, +    ASSERT.that(letters).iteratesAs("a", "c");, +    ASSERT.that(nothing).iteratesAs("");, +    ASSERT.that(blankblank).iteratesAs("", "");, +    ASSERT.that(family).iteratesAs(, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a,b,c");, +    ASSERT.that(letters).iteratesAs("a", "", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", " b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "");, +    ASSERT.that(letters).iteratesAs("", "a", "b", "c");, +    ASSERT.that(testStringingMotto).iteratesAs(, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", "c");, +    ASSERT.that(letters).iteratesAs("a", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("", "a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "");, +    ASSERT.that(threeCommasThenThreeSpaces).iteratesAs(",,,", "   ");, +    ASSERT.that(notMuch).iteratesAs("");, +    ASSERT.that(blankblank).iteratesAs("", "");, +    ASSERT.that(family).iteratesAs(, +    ASSERT.that(letters).iteratesAs("ab", "cd", "e");, +    ASSERT.that(letters).iteratesAs("ab", "cd", "ef");, +    ASSERT.that(letters).iteratesAs("abc");, +    ASSERT.that(letters).iteratesAs("ab");, +    ASSERT.that(letters).iteratesAs("");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "d");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "d");, +    ASSERT.that(letters).iteratesAs("abcd");, +    ASSERT.that(letters).iteratesAs("a", "bcd");, +    ASSERT.that(items).iteratesAs("a", "b,c,d");, +    ASSERT.that(items).iteratesAs("a", ",,b,,c,d");, +    ASSERT.that(items).iteratesAs("a", "b,,c,d");, +    ASSERT.that(items).iteratesAs("a", "b", "c,d");, +    ASSERT.that(items).iteratesAs("a", "b ,, c,d");, +    ASSERT.that(items).iteratesAs("a", "b", "c,d");, +    ASSERT.that(items).iteratesAs("a,,  , b ,, c,d");, +    ASSERT.that(items).iteratesAs(",,a,,  , b ,, c,d");, +    ASSERT.that(items).iteratesAs("");, +    ASSERT.that(m.keySet()).iteratesAs("boy", "girl", "cat", "dog");, +    ASSERT.that(m.keySet()).iteratesAs("girl", "boy", "dog", "cat");, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/OptionalTest.java, +    ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "b", "c");, +    ASSERT.that(Optional.presentInstances(optionals)).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs("a", "c");, +    ASSERT.that(onlyPresent).iteratesAs(2);, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a,b,c");, +    ASSERT.that(letters).iteratesAs("a", "", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", " b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "");, +    ASSERT.that(letters).iteratesAs("", "a", "b", "c");, +    ASSERT.that(testCharacteringMotto).iteratesAs(, +    ASSERT.that(testCharacteringMotto).iteratesAs(, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", "c");, +    ASSERT.that(letters).iteratesAs("a", "c");, +    ASSERT.that(nothing).iteratesAs("");, +    ASSERT.that(blankblank).iteratesAs("", "");, +    ASSERT.that(family).iteratesAs(, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a,b,c");, +    ASSERT.that(letters).iteratesAs("a", "", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", " b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "");, +    ASSERT.that(letters).iteratesAs("", "a", "b", "c");, +    ASSERT.that(testStringingMotto).iteratesAs(, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "", "c");, +    ASSERT.that(letters).iteratesAs("a", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c");, +    ASSERT.that(letters).iteratesAs("", "a", "b", "c");, +    ASSERT.that(letters).iteratesAs("a", "b", "c", "");]