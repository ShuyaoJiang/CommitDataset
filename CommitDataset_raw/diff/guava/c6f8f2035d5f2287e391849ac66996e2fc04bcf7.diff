[+++ b/guava/src/com/google/common/net/HostAndPort.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.net;, +, +import com.google.common.annotations.Beta;, +import com.google.common.base.Objects;, +import com.google.common.base.Preconditions;, +, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +/**, + * HostAndPort performs high-level segmenting of host:port strings., + *, + * <p>Example usage:, + * <pre>, + * HostAndPort hp = HostAndPort.fromString("[2001:db8::1]"), + *     .withDefaultPort(80), + *     .requireBracketsForIPv6();, + * hp.getHostText();  // returns "2001:db8::1", + * hp.getPort();      // returns 80, + * hp.toString();     // returns "[2001:db8::1]:80", + * </pre>, + *, + * <p>Here are some examples of recognized formats:, + * <ul>, + *   <li>example.com, + *   <li>example.com:80, + *   <li>192.0.2.1, + *   <li>192.0.2.1:80, + *   <li>[2001:db8::1]     - {@link #getHostText()} omits brackets, + *   <li>[2001:db8::1]:80  - {@link #getHostText()} omits brackets, + *   <li>2001:db8::1       - Use {@link #requireBracketsForIPv6()} to prohibit this, + * </ul>, + *, + * <p>Note that this is not an exhaustive list, because these methods are only, + * concerned with brackets, colons, and port numbers.  Full validation of the, + * host field (if desired) is the caller's responsibility., + *, + * @author pmarks@google.com (Paul Marks), + * @since Guava release 10, + */, +@Beta, +public final class HostAndPort {, +  /** Magic value indicating the absence of a port number. */, +  private static final int NO_PORT = -1;, +, +  /** Hostname, IPv4/IPv6 literal, or unvalidated nonsense. */, +  private final String host;, +, +  /** Validated port number in the range [0..65535], or NO_PORT */, +  private int port;, +, +  /** True if the parsed host has colons, but no surrounding brackets. */, +  private final boolean hasBracketlessColons;, +, +  private HostAndPort(String host, int port, boolean hasBracketlessColons) {, +    this.host = host;, +    this.port = port;, +    this.hasBracketlessColons = hasBracketlessColons;, +  }, +, +  /**, +   * Returns the portion of this {@code HostAndPort} instance that should, +   * represent the hostname or IPv4/IPv6 literal., +   *, +   * A successful parse does not imply any degree of sanity in this field., +   * For additional validation, see the {@link HostSpecifier} class., +   */, +  public String getHostText() {, +    return host;, +  }, +, +  /** Return true if this instance has a defined port. */, +  public boolean hasPort() {, +    return port >= 0;, +  }, +, +  /**, +   * Get the current port number, failing if no port is defined., +   *, +   * @return a validated port number, in the range [0..65535], +   * @throws IllegalStateException if no port is defined.  You can use, +   *         {@link #withDefaultPort(int)} to prevent this from occurring., +   */]