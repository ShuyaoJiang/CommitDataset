[+++ b/guava/src/com/google/common/util/concurrent/Service.java, + * An object with an operational state, plus asynchronous {@link #start()} and {@link #stop()}, + * lifecycle methods to transition between states. Example services include webservers, RPC servers, + * and timers., + * before the {@link Service} reaches the {@linkplain State#RUNNING RUNNING} state. The set of legal, + * transitions form a <a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</a>, , + * therefore every method of the listener will be called at most once. N.B. The {@link State#FAILED}, + * and {@link State#TERMINATED} states are terminal states, once a service enters either of these, + * states it cannot ever leave them., + * <p>Implementors of this interface are strongly encouraged to extend one of the abstract classes , + * in this package which implement this interface and make the threading and state management , + * easier., + * @since 9.0 (in 1.0 as {@code com.google.common.base.Service}), +@Beta, +   * If the service state is {@link State#NEW}, this initiates service startup and returns, +   * immediately. If the service has already been started, this method returns immediately without, +   * taking action. A stopped service may not be restarted., +   * @return a future for the startup result, regardless of whether this call initiated startup., +   *         Calling {@link ListenableFuture#get} will block until the service has finished, +   *         starting, and returns one of {@link State#RUNNING}, {@link State#STOPPING} or, +   *         {@link State#TERMINATED}. If the service fails to start, {@link ListenableFuture#get}, +   *         will throw an {@link ExecutionException}, and the service's state will be, +   *         {@link State#FAILED}. If it has already finished starting, {@link ListenableFuture#get}, +   *         returns immediately. Cancelling this future has no effect on the service., +   * Initiates service startup (if necessary), returning once the service has finished starting., +   * Unlike calling {@code start().get()}, this method throws no checked exceptions, and it cannot, +   * be {@linkplain Thread#interrupt interrupted}., +   * If the service is {@linkplain State#STARTING starting} or {@linkplain State#RUNNING running},, +   * this initiates service shutdown and returns immediately. If the service is, +   * {@linkplain State#NEW new}, it is {@linkplain State#TERMINATED terminated} without having been, +   * started nor stopped. If the service has already been stopped, this method returns immediately, +   * without taking action., +   * @return a future for the shutdown result, regardless of whether this call initiated shutdown., +   *         Calling {@link ListenableFuture#get} will block until the service has finished shutting, +   *         down, and either returns {@link State#TERMINATED} or throws an, +   *         {@link ExecutionException}. If it has already finished stopping,, +   *         {@link ListenableFuture#get} returns immediately. Cancelling this future has no effect, +   *         on the service., +   * Initiates service shutdown (if necessary), returning once the service has finished stopping. If, +   * this is {@link State#STARTING}, startup will be cancelled. If this is {@link State#NEW}, it is, +   * {@link State#TERMINATED terminated} without having been started nor stopped. Unlike calling, +   * {@code stop().get()}, this method throws no checked exceptions., +   * @since 9.0 (in 1.0 as {@code com.google.common.base.Service.State}), +     * A service in this state has completed execution normally. It does minimal work and consumes, +     * minimal resources., +     * A service in this state has encountered a problem and may not be operational. It cannot be, +     * started nor stopped.]