[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import com.google.common.testing.CollectorTester;, +, +  public void testToImmutableRangeSet() {, +    Range<Integer> rangeOne = Range.closedOpen(1, 5);, +    Range<Integer> rangeTwo = Range.openClosed(6, 7);, +    ImmutableRangeMap<Integer, Integer> rangeMap =, +        new ImmutableRangeMap.Builder<Integer, Integer>().put(rangeOne, 1).put(rangeTwo, 6).build();, +    CollectorTester.of(, +            ImmutableRangeMap.<Range<Integer>, Integer, Integer>toImmutableRangeMap(, +                k -> k, k -> k.lowerEndpoint())), +        .expectCollects(rangeMap, rangeOne, rangeTwo);, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import com.google.common.testing.CollectorTester;, +, +  public void testToImmutableRangeSet() {, +    Range<Integer> rangeOne = Range.closedOpen(1, 5);, +    Range<Integer> rangeTwo = Range.openClosed(6, 7);, +    ImmutableRangeMap<Integer, Integer> rangeMap =, +        new ImmutableRangeMap.Builder<Integer, Integer>().put(rangeOne, 1).put(rangeTwo, 6).build();, +    CollectorTester.of(, +            ImmutableRangeMap.<Range<Integer>, Integer, Integer>toImmutableRangeMap(, +                k -> k, k -> k.lowerEndpoint())), +        .expectCollects(rangeMap, rangeOne, rangeTwo);, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +import com.google.common.testing.CollectorTester;, +, +  public void testToImmutableRangeSet() {, +    Range<Integer> rangeOne = Range.closedOpen(1, 5);, +    Range<Integer> rangeTwo = Range.openClosed(6, 7);, +    ImmutableRangeSet<Integer> ranges =, +        ImmutableRangeSet.copyOf(ImmutableList.of(rangeOne, rangeTwo));, +    CollectorTester.of(ImmutableRangeSet.<Integer>toImmutableRangeSet()), +        .expectCollects(ranges, rangeOne, rangeTwo);, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import com.google.common.testing.CollectorTester;, +, +  public void testToImmutableRangeSet() {, +    Range<Integer> rangeOne = Range.closedOpen(1, 5);, +    Range<Integer> rangeTwo = Range.openClosed(6, 7);, +    ImmutableRangeMap<Integer, Integer> rangeMap =, +        new ImmutableRangeMap.Builder<Integer, Integer>().put(rangeOne, 1).put(rangeTwo, 6).build();, +    CollectorTester.of(, +            ImmutableRangeMap.<Range<Integer>, Integer, Integer>toImmutableRangeMap(, +                k -> k, k -> k.lowerEndpoint())), +        .expectCollects(rangeMap, rangeOne, rangeTwo);, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +import com.google.common.testing.CollectorTester;, +, +  public void testToImmutableRangeSet() {, +    Range<Integer> rangeOne = Range.closedOpen(1, 5);, +    Range<Integer> rangeTwo = Range.openClosed(6, 7);, +    ImmutableRangeSet<Integer> ranges =, +        ImmutableRangeSet.copyOf(ImmutableList.of(rangeOne, rangeTwo));, +    CollectorTester.of(ImmutableRangeSet.<Integer>toImmutableRangeSet()), +        .expectCollects(ranges, rangeOne, rangeTwo);, +  }, +++ b/guava/src/com/google/common/collect/CollectCollectors.java, +import com.google.common.annotations.GwtIncompatible;, +, +  @GwtIncompatible, +  private static final Collector<Range<Comparable>, ?, ImmutableRangeSet<Comparable>>, +      TO_IMMUTABLE_RANGE_SET =, +          Collector.of(, +              ImmutableRangeSet::<Comparable>builder,, +              ImmutableRangeSet.Builder::add,, +              ImmutableRangeSet.Builder::combine,, +              ImmutableRangeSet.Builder::build);, +, +  @GwtIncompatible, +  static <E extends Comparable<? super E>>, +      Collector<Range<E>, ?, ImmutableRangeSet<E>> toImmutableRangeSet() {, +    return (Collector) TO_IMMUTABLE_RANGE_SET;, +  }, +, +  @GwtIncompatible, +  static <T, K extends Comparable<? super K>, V>, +      Collector<T, ?, ImmutableRangeMap<K, V>> toImmutableRangeMap(, +          Function<? super T, Range<K>> keyFunction,, +          Function<? super T, ? extends V> valueFunction) {, +    checkNotNull(keyFunction);, +    checkNotNull(valueFunction);, +    return Collector.of(, +        ImmutableRangeMap::<K, V>builder,, +        (builder, input) -> builder.put(keyFunction.apply(input), valueFunction.apply(input)),, +        ImmutableRangeMap.Builder::combine,, +        ImmutableRangeMap.Builder::build);, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import com.google.common.testing.CollectorTester;, +, +  public void testToImmutableRangeSet() {, +    Range<Integer> rangeOne = Range.closedOpen(1, 5);, +    Range<Integer> rangeTwo = Range.openClosed(6, 7);, +    ImmutableRangeMap<Integer, Integer> rangeMap =, +        new ImmutableRangeMap.Builder<Integer, Integer>().put(rangeOne, 1).put(rangeTwo, 6).build();]