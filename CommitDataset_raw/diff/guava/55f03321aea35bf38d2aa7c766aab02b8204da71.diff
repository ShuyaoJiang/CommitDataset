[+++ b/guava/src/com/google/common/primitives/Booleans.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * Static utility methods pertaining to {@code boolean} primitives, that are not already found in, + * either {@link Boolean} or {@link Arrays}., + * <p>See the Guava User Guide article on, + * <a href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>., +   * Compares the two specified {@code boolean} values in the standard way ({@code false} is, +   * considered less than {@code true}). The sign of the value returned is the same as that of, +   * {@code ((Boolean) a).compareTo(b)}., +   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the, +   * equivalent {@link Boolean#compare} method instead., +   * @return a positive number if only {@code a} is {@code true}, a negative number if only, +   *     {@code b} is true, or zero if {@code a == b}, +   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}., +   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead,, +   * replacing {@code Booleans.contains(array, true)} with {@code !bitSet.isEmpty()} and, +   * {@code Booleans.contains(array, false)} with {@code bitSet.nextClearBit(0) == sizeOfBitSet}., +   * Returns the index of the first appearance of the value {@code target} in {@code array}., +   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and, +   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}., +   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no, +   *     such index exists., +   * Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as, +   * {@code target}., +   * Returns the index of the last appearance of the value {@code target} in {@code array}., +   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no, +   *     such index exists., +   * Returns the values from each provided array combined into a single array. For example,, +   * {@code concat(new boolean[] {a, b}, new boolean[] {}, new boolean[] {c}} returns the array, +   * {@code {a, b, c}}., +   * @return a single array containing all the values from the source arrays, in order, +   * Returns an array containing the same values as {@code array}, but guaranteed to be of a, +   * specified minimum length. If {@code array} already has a length of at least {@code minLength},, +   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is, +   * returned, containing the values of {@code array}, and zeroes in the remaining places., +   * @param padding an extra amount to "grow" the array by if growth is necessary, +   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative, +   * @return an array containing the values of {@code array}, with guaranteed minimum length, +   *     {@code minLength}, +   * Returns a string containing the supplied {@code boolean} values separated by {@code separator}., +   * For example, {@code join("-", false, true, false)} returns the string, +   * {@code "false-true-false"}., +   * @param separator the text that should appear between consecutive values in the resulting string, +   *     (but not at the start or end), +   * Returns a comparator that compares two {@code boolean} arrays <a, +   * href="http://en.wikipedia.org/wiki/Lexicographical_order">lexicographically</a>. That is, it, +   * compares, using {@link #compare(boolean, boolean)}), the first pair of values that follow any, +   * common prefix, or when one array is a prefix of the other, treats the shorter array as the, +   * lesser. For example, {@code [] < [false] < [false, true] < [true]}., +   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays, +   * support only identity equality), but it is consistent with, +   * {@link Arrays#equals(boolean[], boolean[])}., +   * Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}, +   * values., +   * collection.toArray()}. Calling this method is as thread-safe as calling that method., +   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead., +   * @return an array containing the same values as {@code collection}, in the same order, converted, +   *     to primitives, +   * @throws NullPointerException if {@code collection} or any of its elements is null, +   * Returns a fixed-size list backed by the specified array, similar to, +   * {@link Arrays#asList(Object[])}. The list supports {@link List#set(int, Object)}, but any, +   * attempt to set a value to {@code null} will result in a {@link NullPointerException}., +   * <p>The returned list maintains the values, but not the identities, of {@code Boolean} objects, +   * written to or read from it. For example, whether {@code list.get(0) == list.get(0)} is true for, +   * the returned list is unspecified., +++ b/guava/src/com/google/common/primitives/Booleans.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * Static utility methods pertaining to {@code boolean} primitives, that are not already found in, + * either {@link Boolean} or {@link Arrays}., + * <p>See the Guava User Guide article on, + * <a href="https://github.com/google/guava/wiki/PrimitivesExplained">primitive utilities</a>., +   * Compares the two specified {@code boolean} values in the standard way ({@code false} is, +   * considered less than {@code true}). The sign of the value returned is the same as that of, +   * {@code ((Boolean) a).compareTo(b)}., +   * <p><b>Note for Java 7 and later:</b> this method should be treated as deprecated; use the, +   * equivalent {@link Boolean#compare} method instead., +   * @return a positive number if only {@code a} is {@code true}, a negative number if only, +   *     {@code b} is true, or zero if {@code a == b}, +   * Returns {@code true} if {@code target} is present as an element anywhere in {@code array}., +   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead,, +   * replacing {@code Booleans.contains(array, true)} with {@code !bitSet.isEmpty()} and, +   * {@code Booleans.contains(array, false)} with {@code bitSet.nextClearBit(0) == sizeOfBitSet}., +   * Returns the index of the first appearance of the value {@code target} in {@code array}., +   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and, +   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}., +   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no, +   *     such index exists., +   * Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as, +   * {@code target}., +   * Returns the index of the last appearance of the value {@code target} in {@code array}.]