[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +  private abstract class Itr<T> extends UnmodifiableIterator<T> {, +    final Iterator<Entry<K, Collection<V>>> mapIterator = asMap().entrySet().iterator();, +    K key = null;, +    Iterator<V> valueIterator = Iterators.emptyIterator();, +    abstract T output(K key, V value);, +      return mapIterator.hasNext() || valueIterator.hasNext();, +    public T next() {, +      if (!valueIterator.hasNext()) {, +        Entry<K, Collection<V>> mapEntry = mapIterator.next();, +        key = mapEntry.getKey();, +        valueIterator = mapEntry.getValue().iterator();, +      return output(key, valueIterator.next());, +    }, +  }, +  , +  @Override, +  UnmodifiableIterator<Entry<K, V>> entryIterator() {, +    return new Itr<Entry<K, V>>() {, +      @Override, +      Entry<K, V> output(K key, V value) {, +        return Maps.immutableEntry(key, value);, +    return new Values();, +  private final class Values extends ImmutableCollection<V> {, +      return containsValue(object);, +      return new Itr<V>() {, +        @Override, +        V output(K key, V value) {, +          return value;, +        }, +      };, +      return ImmutableMultimap.this.size();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +  private abstract class Itr<T> extends UnmodifiableIterator<T> {, +    final Iterator<Entry<K, Collection<V>>> mapIterator = asMap().entrySet().iterator();, +    K key = null;, +    Iterator<V> valueIterator = Iterators.emptyIterator();, +    abstract T output(K key, V value);, +      return mapIterator.hasNext() || valueIterator.hasNext();, +    public T next() {, +      if (!valueIterator.hasNext()) {, +        Entry<K, Collection<V>> mapEntry = mapIterator.next();, +        key = mapEntry.getKey();, +        valueIterator = mapEntry.getValue().iterator();, +      return output(key, valueIterator.next());, +    }, +  }, +  , +  @Override, +  UnmodifiableIterator<Entry<K, V>> entryIterator() {, +    return new Itr<Entry<K, V>>() {, +      @Override, +      Entry<K, V> output(K key, V value) {, +        return Maps.immutableEntry(key, value);, +    return new Values();, +  private final class Values extends ImmutableCollection<V> {, +      return containsValue(object);, +      return new Itr<V>() {, +        @Override, +        V output(K key, V value) {, +          return value;, +        }, +      };, +      return ImmutableMultimap.this.size();, +++ b/guava/src/com/google/common/collect/ImmutableMultimap.java, +  private abstract class Itr<T> extends UnmodifiableIterator<T> {, +    final Iterator<Entry<K, Collection<V>>> mapIterator = asMap().entrySet().iterator();, +    K key = null;, +    Iterator<V> valueIterator = Iterators.emptyIterator();, +    abstract T output(K key, V value);, +      return mapIterator.hasNext() || valueIterator.hasNext();, +    public T next() {, +      if (!valueIterator.hasNext()) {, +        Entry<K, Collection<V>> mapEntry = mapIterator.next();, +        key = mapEntry.getKey();, +        valueIterator = mapEntry.getValue().iterator();, +      return output(key, valueIterator.next());, +    }, +  }, +  , +  @Override, +  UnmodifiableIterator<Entry<K, V>> entryIterator() {, +    return new Itr<Entry<K, V>>() {, +      @Override, +      Entry<K, V> output(K key, V value) {, +        return Maps.immutableEntry(key, value);, +    return new Values();, +  private final class Values extends ImmutableCollection<V> {, +      return containsValue(object);, +      return new Itr<V>() {, +        @Override, +        V output(K key, V value) {, +          return value;, +        }, +      };, +      return ImmutableMultimap.this.size();]