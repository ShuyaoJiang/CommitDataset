[+++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      counter.recordMiss();, +    int requestCount = 11 + 23;, +    int missCount = 23;, +      counter1.recordMiss();, +      counter2.recordMiss();, +    assertEquals(new CacheStats(38, 60, 44, 54, totalLoadTime, 66),, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      counter.recordMiss();, +    int requestCount = 11 + 23;, +    int missCount = 23;, +      counter1.recordMiss();, +      counter2.recordMiss();, +    assertEquals(new CacheStats(38, 60, 44, 54, totalLoadTime, 66),, +++ b/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +    cache.invalidateAll();, +    cache.invalidateAll();, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      counter.recordMiss();, +    int requestCount = 11 + 23;, +    int missCount = 23;, +      counter1.recordMiss();, +      counter2.recordMiss();, +    assertEquals(new CacheStats(38, 60, 44, 54, totalLoadTime, 66),, +++ b/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +    cache.invalidateAll();, +    cache.invalidateAll();, +++ b/guava-tests/test/com/google/common/cache/CacheComputationTest.java, +  public void testComputerThatReturnsNull_compute() throws ExecutionException {, +      cache.get(new Object());, +, +    try {, +      cache.getUnchecked(new Object());, +      fail();, +    } catch (NullPointerException expected) {}, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(2, stats.loadCount());, +, +    try {, +      cache.refresh(new Object());, +      fail();, +    } catch (NullPointerException expected) {}, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(3, stats.loadCount());, +, +    try {, +      cache.refresh(new Object());, +      fail();, +    } catch (ExecutionError expected) {, +      assertSame(e, expected.getCause());, +    }, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(3, stats.loadExceptionCount());, +, +    try {, +      cache.refresh(new Object());, +      fail();, +    } catch (ExecutionException expected) {, +      assertSame(e, expected.getCause());, +    }, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(3, stats.loadExceptionCount());, +, +    try {, +      cache.refresh(new Object());, +      fail();, +    } catch (UncheckedExecutionException expected) {, +      assertSame(e, expected.getCause());, +    }, +    stats = cache.stats();, +    assertEquals(2, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(3, stats.loadExceptionCount());, +  public void testRecomputeAfterFailure() throws ExecutionException {, +    final AtomicInteger count = new AtomicInteger();, +, +    count.set(0);, +    try {, +      cache.refresh(2);, +      fail();, +    } catch (UncheckedExecutionException e) {, +      // expected, +    assertEquals("2", cache.getUnchecked(2));, +    assertEquals(0, removalListener.getCount());, +, +  }, +, +  public void testRecomputeAfterValueReclamation() throws InterruptedException, ExecutionException {, +    ConcurrentMap<Object, Object> map = cache.asMap();, +, +    for (int i = 0; i < iterations; i++) {, +      // The entry should get garbage collected and recomputed., +      Object oldValue = ref.get();, +      if (oldValue == null) {]