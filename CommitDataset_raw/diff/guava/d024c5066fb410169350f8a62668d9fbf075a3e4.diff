[+++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +    ImmutableList<Parameter> parameters = delegate.getParameters();, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    ImmutableList<Parameter> parameters = delegate.getParameters();, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, Iterable<String>> delegate = Prepender.method(, +    Invokable<?, Iterable> delegate = Prepender.method(, +    Invokable<?, Object> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    ImmutableList<Parameter> parameters = delegate.getParameters();, +    Invokable<Prepender, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<Prepender, Iterable<String>> delegate = Prepender.method(, +    Invokable<Prepender, Iterable> delegate = Prepender.method("prepend", Iterable.class), +    Invokable<?, Object> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("privateMethod");, +    Invokable<?, ?> delegate = Prepender.method("privateFinalMethod");, +    Invokable<?, ?> delegate = Prepender.method("staticMethod");, +    Invokable<?, ?> delegate = Prepender.method("staticFinalMethod");, +    Invokable<?, ?> delegate = Invokable.from(, +    static Invokable<Prepender, Object> method(String name, Class<?>... parameterTypes) {, +        @SuppressWarnings("unchecked") // The method is from Prepender., +        Invokable<Prepender, Object> invokable = (Invokable<Prepender, Object>), +            Invokable.from(method);, +        return invokable;, +++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +    ImmutableList<Parameter> parameters = delegate.getParameters();, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    ImmutableList<Parameter> parameters = delegate.getParameters();, +    Invokable<?, ?> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, Iterable<String>> delegate = Prepender.method(, +    Invokable<?, Iterable> delegate = Prepender.method(, +    Invokable<?, Object> delegate = Prepender.method("prepend", String.class, Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("prepend", Iterable.class);, +    ImmutableList<Parameter> parameters = delegate.getParameters();, +    Invokable<Prepender, ?> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<Prepender, Iterable<String>> delegate = Prepender.method(, +    Invokable<Prepender, Iterable> delegate = Prepender.method("prepend", Iterable.class), +    Invokable<?, Object> delegate = Prepender.method("prepend", Iterable.class);, +    Invokable<?, ?> delegate = Prepender.method("privateMethod");, +    Invokable<?, ?> delegate = Prepender.method("privateFinalMethod");, +    Invokable<?, ?> delegate = Prepender.method("staticMethod");, +    Invokable<?, ?> delegate = Prepender.method("staticFinalMethod");, +    Invokable<?, ?> delegate = Invokable.from(, +    static Invokable<Prepender, Object> method(String name, Class<?>... parameterTypes) {, +        @SuppressWarnings("unchecked") // The method is from Prepender., +        Invokable<Prepender, Object> invokable = (Invokable<Prepender, Object>), +            Invokable.from(method);, +        return invokable;, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import java.lang.reflect.Constructor;, +  public void testMethod_notDeclaredByType() throws NoSuchMethodException {, +    Method sizeMethod = Map.class.getMethod("size");, +    try {, +      TypeToken.of(List.class).method(sizeMethod);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testMethod_declaredBySuperclass() throws Exception {, +    Method toStringMethod = Object.class.getMethod("toString");, +    ImmutableList<String> list = ImmutableList.of("foo");, +    assertEquals(list.toString(), TypeToken.of(List.class).method(toStringMethod).invoke(list));, +  }, +, +  public <T extends Number & List<String>> void testMethod_returnType_resolvedAgainstTypeBound(), +      throws NoSuchMethodException {, +    Method getMethod = List.class.getMethod("get", int.class);, +    Invokable<T, String> Invokable = new TypeToken<T>(getClass()) {}, +        .method(getMethod), +        .returning(String.class);, +    assertEquals(TypeToken.of(String.class), Invokable.getReturnType());, +  }, +, +  public <T extends List<String>> void testMethod_parameterTypes(), +      throws NoSuchMethodException {, +    Method setMethod = List.class.getMethod("set", int.class, Object.class);, +    Invokable<T, ?> invokable = new TypeToken<T>(getClass()) {}.method(setMethod);, +    ImmutableList<Parameter> params = invokable.getParameters();, +    assertEquals(2, params.size());, +    assertEquals(TypeToken.of(int.class), params.get(0).getType());, +    assertEquals(TypeToken.of(String.class), params.get(1).getType());, +  }, +, +  private interface Loser<E extends Throwable> {, +    void lose() throws E;, +  }, +, +  public <T extends Loser<AssertionError>> void testMethod_exceptionTypes()]