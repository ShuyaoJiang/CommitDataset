[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final in AbstractFuture itself under GWT., +     */, +  public final boolean cancel(boolean mayInterruptIfRunning) {, +    // TODO(cpovirk): Should we do this at the end of the method, as in the server version?, +    // TODO(cpovirk): Use maybePropagateCancellation?, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final in AbstractFuture itself under GWT., +     */, +  public final boolean cancel(boolean mayInterruptIfRunning) {, +    // TODO(cpovirk): Should we do this at the end of the method, as in the server version?, +    // TODO(cpovirk): Use maybePropagateCancellation?, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final in AbstractFuture itself under GWT., +     */, +  public final boolean cancel(boolean mayInterruptIfRunning) {, +    // TODO(cpovirk): Should we do this at the end of the method, as in the server version?, +    // TODO(cpovirk): Use maybePropagateCancellation?, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call, +   * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture., +   */, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final in AbstractFuture itself under GWT., +     */, +  public final boolean cancel(boolean mayInterruptIfRunning) {, +    // TODO(cpovirk): Should we do this at the end of the method, as in the server version?, +    // TODO(cpovirk): Use maybePropagateCancellation?, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call, +   * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture., +   */, +++ b/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call, +   * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture., +   */, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final in AbstractFuture itself under GWT., +     */, +  public final boolean cancel(boolean mayInterruptIfRunning) {, +    // TODO(cpovirk): Should we do this at the end of the method, as in the server version?, +    // TODO(cpovirk): Use maybePropagateCancellation?, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call, +   * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture., +   */, +++ b/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call, +   * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture., +   */, +++ b/guava/src/com/google/common/util/concurrent/AggregateFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call, +   * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture., +   */, +      boolean wasInterrupted = wasInterrupted();, +, +      if (wasInterrupted()) {, +        localRunningState.interruptTask();, +      if (isCancelled() & futures != null) {, +        for (ListenableFuture<?> future : futures) {, +          future.cancel(wasInterrupted);, +        }, +      }, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +    /*, +     * We don't need to override any of methods that we override in the prod version (and in fact we, +     * can't) because they are already final in AbstractFuture itself under GWT., +     */, +  public final boolean cancel(boolean mayInterruptIfRunning) {, +    // TODO(cpovirk): Should we do this at the end of the method, as in the server version?, +    // TODO(cpovirk): Use maybePropagateCancellation?, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call, +   * triggered by cancel(). For details, see the comments on the fields of TimeoutFuture., +   */, +++ b/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +  /*, +   * In certain circumstances, this field might theoretically not be visible to an afterDone() call]