[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +, +import java.util.Arrays;, +, +import javax.annotation.CheckReturnValue;, +, +/**, + * Determines a true or false value for any Java {@code char} value, just as {@link Predicate} does, + * for any {@link Object}. Also offers basic text processing methods based on this function., + * Implementations are strongly encouraged to be side-effect-free and immutable., + *, + * <p>Throughout the documentation of this class, the phrase "matching character" is used to mean, + * "any character {@code c} for which {@code this.matches(c)} returns {@code true}"., + *, + * <p><b>Note:</b> This class deals only with {@code char} values; it does not understand, + * supplementary Unicode code points in the range {@code 0x10000} to {@code 0x10FFFF}. Such logical, + * characters are encoded into a {@code String} using surrogate pairs, and a {@code CharMatcher}, + * treats these just as two separate characters., + *, + * <p>Example usages: <pre>, + *   String trimmed = {@link #WHITESPACE WHITESPACE}.{@link #trimFrom trimFrom}(userInput);, + *   if ({@link #ASCII ASCII}.{@link #matchesAllOf matchesAllOf}(s)) { ... }</pre>, + *, + * <p>See the Guava User Guide article on <a href=, + * "http://code.google.com/p/guava-libraries/wiki/StringsExplained#CharMatcher">, + * {@code CharMatcher}</a>., + *, + * @author Kevin Bourrillion, + * @since 1.0, + */, +@Beta // Possibly change from chars to code points; decide constants vs. methods, +@GwtCompatible(emulated = true), +public abstract class CharMatcher implements Predicate<Character> {, +  // Constants, +  /**, +   * Determines whether a character is a breaking whitespace (that is, a whitespace which can be, +   * interpreted as a break between words for formatting purposes). See {@link #WHITESPACE} for a, +   * discussion of that term., +   *, +   * @since 2.0, +   */, +  public static final CharMatcher BREAKING_WHITESPACE =, +      anyOf("\t\n\013\f\r \u0085\u1680\u2028\u2029\u205f\u3000"), +          .or(inRange('\u2000', '\u2006')), +          .or(inRange('\u2008', '\u200a')), +          .withToString("CharMatcher.BREAKING_WHITESPACE"), +          .precomputed();, +, +  /**, +   * Determines whether a character is ASCII, meaning that its code point is less than 128., +   */, +  public static final CharMatcher ASCII = inRange('\0', '\u007f', "CharMatcher.ASCII");, +, +  /**, +   * Determines whether a character is a digit according to, +   * <a href="http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bdigit%7D">Unicode</a>., +   */, +  public static final CharMatcher DIGIT;, +, +  static {, +    CharMatcher digit = inRange('0', '9');, +    String zeroes =, +        "\u0660\u06f0\u07c0\u0966\u09e6\u0a66\u0ae6\u0b66\u0be6\u0c66", +            + "\u0ce6\u0d66\u0e50\u0ed0\u0f20\u1040\u1090\u17e0\u1810\u1946", +            + "\u19d0\u1b50\u1bb0\u1c40\u1c50\ua620\ua8d0\ua900\uaa50\uff10";, +    for (char base : zeroes.toCharArray()) {, +      digit = digit.or(inRange(base, (char) (base + 9)));, +    }, +    DIGIT = digit.withToString("CharMatcher.DIGIT").precomputed();, +  }, +, +  /**, +   * Determines whether a character is a digit according to {@link Character#isDigit(char) Java's, +   * definition}. If you only care to match ASCII digits, you can use {@code inRange('0', '9')}., +   */, +  public static final CharMatcher JAVA_DIGIT = new CharMatcher("CharMatcher.JAVA_DIGIT") {, +    @Override public boolean matches(char c) {]