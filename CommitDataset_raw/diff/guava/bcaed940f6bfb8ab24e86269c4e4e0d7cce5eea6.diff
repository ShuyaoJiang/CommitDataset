[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java, +  // Lazily initialized the first time we see an exception; not released until all the input futures, +  // & this future completes. Released when the future releases the reference to the running state, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java, +  // Lazily initialized the first time we see an exception; not released until all the input futures, +  // & this future completes. Released when the future releases the reference to the running state, +++ b/guava/src/com/google/common/util/concurrent/AggregateFuture.java, +    void releaseResourcesAfterFailure() {, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java, +  // Lazily initialized the first time we see an exception; not released until all the input futures, +  // & this future completes. Released when the future releases the reference to the running state, +++ b/guava/src/com/google/common/util/concurrent/AggregateFuture.java, +    void releaseResourcesAfterFailure() {, +++ b/guava/src/com/google/common/util/concurrent/AggregateFutureState.java, +  // Lazily initialized the first time we see an exception; not released until all the input futures, +  // & this future completes. Released when the future releases the reference to the running state, +      // Guaranteed to get us the right value because we only set this once (here)]