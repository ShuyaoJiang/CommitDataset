[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import java.util.concurrent.ConcurrentHashMap;, +  /**, +   * Creates a thread-safe set backed by a hash map. The set is backed by a, +   * {@link ConcurrentHashMap} instance, and thus carries the same concurrency, +   * guarantees., +   *, +   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be, +   * used as an element. The set is serializable., +   *, +   * @return a new, empty thread-safe {@code Set}, +   * @since 15.0, +   */, +  public static <E> Set<E> newConcurrentHashSet() {, +    return newSetFromMap(new ConcurrentHashMap<E, Boolean>());, +  }, +, +  /**, +   * Creates a thread-safe set backed by a hash map and containing the given, +   * elements. The set is backed by a {@link ConcurrentHashMap} instance, and, +   * thus carries the same concurrency guarantees., +   *, +   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be, +   * used as an element. The set is serializable., +   *, +   * @param elements the elements that the set should contain, +   * @return a new thread-safe set containing those elements (minus duplicates), +   * @throws NullPointerException if {@code elements} or any of its contents is, +   *      null, +   * @since 15.0, +   */, +  public static <E> Set<E> newConcurrentHashSet(, +      Iterable<? extends E> elements) {, +    Set<E> set = newConcurrentHashSet();, +    Iterables.addAll(set, elements);, +    return set;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import java.util.concurrent.ConcurrentHashMap;, +  /**, +   * Creates a thread-safe set backed by a hash map. The set is backed by a, +   * {@link ConcurrentHashMap} instance, and thus carries the same concurrency, +   * guarantees., +   *, +   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be, +   * used as an element. The set is serializable., +   *, +   * @return a new, empty thread-safe {@code Set}, +   * @since 15.0, +   */, +  public static <E> Set<E> newConcurrentHashSet() {, +    return newSetFromMap(new ConcurrentHashMap<E, Boolean>());, +  }, +, +  /**, +   * Creates a thread-safe set backed by a hash map and containing the given, +   * elements. The set is backed by a {@link ConcurrentHashMap} instance, and, +   * thus carries the same concurrency guarantees., +   *, +   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be, +   * used as an element. The set is serializable., +   *, +   * @param elements the elements that the set should contain, +   * @return a new thread-safe set containing those elements (minus duplicates), +   * @throws NullPointerException if {@code elements} or any of its contents is, +   *      null, +   * @since 15.0, +   */, +  public static <E> Set<E> newConcurrentHashSet(, +      Iterable<? extends E> elements) {, +    Set<E> set = newConcurrentHashSet();, +    Iterables.addAll(set, elements);, +    return set;, +  }, +, +++ b/guava-tests/test/com/google/common/collect/SetsTest.java, +            return Sets.newConcurrentHashSet(Arrays.asList(elements));, +          }, +        }), +        .named("Sets.newConcurrentHashSet"), +        .withFeatures(CollectionSize.ANY, SetFeature.GENERAL_PURPOSE), +        .createTestSuite());, +, +    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +  public void testNewConcurrentHashSetEmpty() {, +    Set<Integer> set = Sets.newConcurrentHashSet();, +    verifySetContents(set, EMPTY_COLLECTION);, +  }, +, +  public void testNewConcurrentHashSetFromCollection() {, +    Set<Integer> set = Sets.newConcurrentHashSet(SOME_COLLECTION);, +    verifySetContents(set, SOME_COLLECTION);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +import java.util.concurrent.ConcurrentHashMap;, +  /**, +   * Creates a thread-safe set backed by a hash map. The set is backed by a]