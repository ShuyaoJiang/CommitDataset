[+++ b/guava/src/com/google/common/base/CharMatcher.java, +      anyOf("\t\n\013\f\r \u0085\u1680\u2028\u2029\u205f\u3000"), +      if (matches(c)) {, +      if (matches(c)) {, +, +  /**, +   * Determines whether a character is whitespace according to the latest Unicode standard, as, +   * illustrated, +   * <a href="http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5Cp%7Bwhitespace%7D">here</a>., +   * This is not the same definition used by other Java APIs. (See a, +   * <a href="http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ">comparison of several, +   * definitions of "whitespace"</a>.), +   *, +   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this constant to keep it up, +   * to date., +   */, +  public static final CharMatcher WHITESPACE = new CharMatcher() {, +    /**, +     * A special-case CharMatcher for Unicode whitespace characters that is extremely, +     * efficient both in space required and in time to check for matches., +     *, +     * Implementation details., +     * It turns out that all current (early 2012) Unicode characters are unique modulo 79:, +     * so we can construct a lookup table of exactly 79 entries, and just check the character code, +     * mod 79, and see if that character is in the table., +     *, +     * There is a 1 at the beginning of the table so that the null character is not listed, +     * as whitespace., +     *, +     * Other things we tried that did not prove to be beneficial, mostly due to speed concerns:, +     *, +     *   * Binary search into the sorted list of characters, i.e., what, +     *     CharMatcher.anyOf() does</li>, +     *   * Perfect hash function into a table of size 26 (using an offset table and a special, +     *     Jenkins hash function)</li>, +     *   * Perfect-ish hash function that required two lookups into a single table of size 26.</li>, +     *   * Using a power-of-2 sized hash table (size 64) with linear probing.</li>, +     *, +     * --Christopher Swenson, February 2012., +     */, +, +    // Mod-79 lookup table., +    private final char[] table = {1, 0, 160, 0, 0, 0, 0, 0, 0, 9, 10, 11, 12, 13, 0, 0,, +        8232, 8233, 0, 0, 0, 0, 0, 8239, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,, +        12288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199,, +        8200, 8201, 8202, 0, 0, 0, 0, 0, 8287, 5760, 0, 0, 6158, 0, 0, 0};, +, +    @Override public boolean matches(char c) {, +      return table[c % 79] == c;, +    }, +, +    @Override public CharMatcher precomputed() {, +      return this;, +    }, +, +    @Override public String toString() {, +      return "CharMatcher.WHITESPACE";, +    }, +  };]