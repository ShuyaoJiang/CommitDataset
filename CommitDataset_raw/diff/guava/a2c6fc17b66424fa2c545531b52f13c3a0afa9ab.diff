[+++ b/android/guava/src/com/google/common/collect/Maps.java, +      Iterator<Entry<K, V>> entryItr = unfiltered.entrySet().iterator();, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (predicate.apply(entry) && Objects.equal(entry.getValue(), o)) {, +          entryItr.remove();, +          return true;, +      }, +      return false;, +      Iterator<Entry<K, V>> entryItr = unfiltered.entrySet().iterator();, +      boolean result = false;, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (predicate.apply(entry) && collection.contains(entry.getValue())) {, +          entryItr.remove();, +          result = true;, +        }, +      }, +      return result;, +      Iterator<Entry<K, V>> entryItr = unfiltered.entrySet().iterator();, +      boolean result = false;, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (predicate.apply(entry) && !collection.contains(entry.getValue())) {, +          entryItr.remove();, +          result = true;, +        }, +      }, +      return result;, +    static <K, V> boolean removeAllKeys(, +        Map<K, V> map, Predicate<? super Entry<K, V>> entryPredicate, Collection<?> keyCollection) {, +      Iterator<Entry<K, V>> entryItr = map.entrySet().iterator();, +      boolean result = false;, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (entryPredicate.apply(entry) && keyCollection.contains(entry.getKey())) {, +          entryItr.remove();, +          result = true;, +        }, +      }, +      return result;, +    }, +    , +    static <K, V> boolean retainAllKeys(, +        Map<K, V> map, Predicate<? super Entry<K, V>> entryPredicate, Collection<?> keyCollection) {, +      Iterator<Entry<K, V>> entryItr = map.entrySet().iterator();, +      boolean result = false;, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (entryPredicate.apply(entry) && !keyCollection.contains(entry.getKey())) {, +          entryItr.remove();, +          result = true;, +        }, +      }, +      return result;, +    }, +, +      @Override, +      public boolean removeAll(Collection<?> collection) {, +        return removeAllKeys(unfiltered, predicate, collection);, +      public boolean retainAll(Collection<?> collection) {, +        return retainAllKeys(unfiltered, predicate, collection);, +        public boolean removeAll(Collection<?> collection) {, +          return FilteredEntryMap.removeAllKeys(unfiltered, entryPredicate, collection);, +        public boolean retainAll(Collection<?> collection) {, +          return FilteredEntryMap.retainAllKeys(unfiltered, entryPredicate, collection);, +++ b/android/guava/src/com/google/common/collect/Maps.java, +      Iterator<Entry<K, V>> entryItr = unfiltered.entrySet().iterator();, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (predicate.apply(entry) && Objects.equal(entry.getValue(), o)) {, +          entryItr.remove();, +          return true;, +      }, +      return false;, +      Iterator<Entry<K, V>> entryItr = unfiltered.entrySet().iterator();, +      boolean result = false;, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (predicate.apply(entry) && collection.contains(entry.getValue())) {, +          entryItr.remove();, +          result = true;, +        }, +      }, +      return result;, +      Iterator<Entry<K, V>> entryItr = unfiltered.entrySet().iterator();, +      boolean result = false;, +      while (entryItr.hasNext()) {, +        Entry<K, V> entry = entryItr.next();, +        if (predicate.apply(entry) && !collection.contains(entry.getValue())) {, +          entryItr.remove();, +          result = true;, +        }, +      }, +      return result;, +    static <K, V> boolean removeAllKeys(, +        Map<K, V> map, Predicate<? super Entry<K, V>> entryPredicate, Collection<?> keyCollection) {, +      Iterator<Entry<K, V>> entryItr = map.entrySet().iterator();, +      boolean result = false;, +      while (entryItr.hasNext()) {]