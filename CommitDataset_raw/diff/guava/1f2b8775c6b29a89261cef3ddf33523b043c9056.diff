[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "cHEETO")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "Honda")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "poodlE")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "WOMBAT")).isAbsent();, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "cHEETO")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "Honda")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "poodlE")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "WOMBAT")).isAbsent();, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/PreconditionsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +      assertThat(expected).hasMessage("null");, +      assertThat(expected).hasMessage("null");, +      assertThat(expected).hasMessage("index (-1) must not be negative");, +      assertThat(expected).hasMessage("index (1) must be less than size (1)");, +      assertThat(expected).hasMessage("foo (-1) must not be negative");, +      assertThat(expected).hasMessage("foo (1) must be less than size (1)");, +      assertThat(expected).hasMessage("index (-1) must not be negative");, +      assertThat(expected).hasMessage("index (2) must not be greater than size (1)");, +      assertThat(expected).hasMessage("foo (-1) must not be negative");, +      assertThat(expected).hasMessage("foo (2) must not be greater than size (1)");, +      assertThat(expected).hasMessage("start index (-1) must not be negative");, +      assertThat(expected).hasMessage("end index (2) must not be greater than size (1)");, +      assertThat(expected).hasMessage("end index (0) must not be less than start index (1)");, +    assertThat(e).hasMessage("A message");, +    assertThat(e).hasMessage("I ate 5 pies.");, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "cHEETO")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "Honda")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "poodlE")).isAbsent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "WOMBAT")).isAbsent();, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/PreconditionsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +      assertThat(expected).hasMessage("null");, +      assertThat(expected).hasMessage("null");, +      assertThat(expected).hasMessage("index (-1) must not be negative");, +      assertThat(expected).hasMessage("index (1) must be less than size (1)");, +      assertThat(expected).hasMessage("foo (-1) must not be negative");, +      assertThat(expected).hasMessage("foo (1) must be less than size (1)");, +      assertThat(expected).hasMessage("index (-1) must not be negative");, +      assertThat(expected).hasMessage("index (2) must not be greater than size (1)");, +      assertThat(expected).hasMessage("foo (-1) must not be negative");, +      assertThat(expected).hasMessage("foo (2) must not be greater than size (1)");, +      assertThat(expected).hasMessage("start index (-1) must not be negative");, +      assertThat(expected).hasMessage("end index (2) must not be greater than size (1)");, +      assertThat(expected).hasMessage("end index (0) must not be less than start index (1)");, +    assertThat(e).hasMessage("A message");, +    assertThat(e).hasMessage("I ate 5 pies.");, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/Utf8Test.java, +import static com.google.common.truth.Truth.assertThat;, +      assertThat(expected).hasMessage("Unpaired surrogate at index " + invalidCodePointIndex);, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/EnumsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).isPresent();, +    assertThat(Enums.getIfPresent(TestEnum.class, "CHEETO")).hasValue(TestEnum.CHEETO);, +    assertThat(Enums.getIfPresent(TestEnum.class, "HONDA")).hasValue(TestEnum.HONDA);, +    assertThat(Enums.getIfPresent(TestEnum.class, "POODLE")).hasValue(TestEnum.POODLE);, +    assertThat(Enums.getIfPresent(TestEnum.class, "cHEETO")).isAbsent();]