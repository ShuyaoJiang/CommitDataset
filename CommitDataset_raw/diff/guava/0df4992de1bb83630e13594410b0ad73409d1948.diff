[+++ b/guava-tests/benchmark/com/google/common/base/AsciiBenchmark.java, +  @Benchmark int asciiStringToUpperCase(int reps) {, +  @Benchmark int asciiCharSequenceToUpperCase(int reps) {, +        ? charSequenceToUpperCase(testString), +      dummy += charSequenceToUpperCase(string).length();, +  @Benchmark int stringToUpperCase(int reps) {, +, +  static String charSequenceToUpperCase(CharSequence chars) {, +    int length = chars.length();, +    StringBuilder builder = new StringBuilder(length);, +    for (int i = 0; i < length; i++) {, +      builder.append(Ascii.toUpperCase(chars.charAt(i)));, +    }, +    return builder.toString();, +  }, +++ b/guava-tests/benchmark/com/google/common/base/AsciiBenchmark.java, +  @Benchmark int asciiStringToUpperCase(int reps) {, +  @Benchmark int asciiCharSequenceToUpperCase(int reps) {, +        ? charSequenceToUpperCase(testString), +      dummy += charSequenceToUpperCase(string).length();, +  @Benchmark int stringToUpperCase(int reps) {, +, +  static String charSequenceToUpperCase(CharSequence chars) {, +    int length = chars.length();, +    StringBuilder builder = new StringBuilder(length);, +    for (int i = 0; i < length; i++) {, +      builder.append(Ascii.toUpperCase(chars.charAt(i)));, +    }, +    return builder.toString();, +  }, +++ b/guava-tests/test/com/google/common/base/AsciiTest.java, +    assertSame(LOWER, Ascii.toLowerCase(LOWER));, +    assertEquals(IGNORED, Ascii.toLowerCase(IGNORED));, +    assertEquals("foobar", Ascii.toLowerCase("fOobaR"));, +    assertSame(UPPER, Ascii.toUpperCase(UPPER));, +    assertEquals("FOOBAR", Ascii.toUpperCase("FoOBAr"));, +++ b/guava-tests/benchmark/com/google/common/base/AsciiBenchmark.java, +  @Benchmark int asciiStringToUpperCase(int reps) {, +  @Benchmark int asciiCharSequenceToUpperCase(int reps) {, +        ? charSequenceToUpperCase(testString), +      dummy += charSequenceToUpperCase(string).length();, +  @Benchmark int stringToUpperCase(int reps) {, +, +  static String charSequenceToUpperCase(CharSequence chars) {, +    int length = chars.length();, +    StringBuilder builder = new StringBuilder(length);, +    for (int i = 0; i < length; i++) {, +      builder.append(Ascii.toUpperCase(chars.charAt(i)));, +    }, +    return builder.toString();, +  }, +++ b/guava-tests/test/com/google/common/base/AsciiTest.java, +    assertSame(LOWER, Ascii.toLowerCase(LOWER));, +    assertEquals(IGNORED, Ascii.toLowerCase(IGNORED));, +    assertEquals("foobar", Ascii.toLowerCase("fOobaR"));, +    assertSame(UPPER, Ascii.toUpperCase(UPPER));, +    assertEquals("FOOBAR", Ascii.toUpperCase("FoOBAr"));, +++ b/guava/src/com/google/common/base/Ascii.java, +    int length = string.length();, +    for (int i = 0; i < length; i++) {, +      if (isUpperCase(string.charAt(i))) {, +        char[] chars = string.toCharArray();, +        for (; i < length; i++) {, +          char c = chars[i];, +          if (isUpperCase(c)) {, +            chars[i] = (char) (c ^ 0x20);, +          }, +        }, +        return String.valueOf(chars);, +      }, +    }, +    return string;, +    if (chars instanceof String) {, +      return toLowerCase((String) chars);, +    }, +    int length = string.length();, +    for (int i = 0; i < length; i++) {, +      if (isLowerCase(string.charAt(i))) {, +        char[] chars = string.toCharArray();, +        for (; i < length; i++) {, +          char c = chars[i];, +          if (isLowerCase(c)) {, +            chars[i] = (char) (c & 0x5f);, +          }, +        }, +        return String.valueOf(chars);, +      }, +    }, +    return string;, +    if (chars instanceof String) {, +      return toUpperCase((String) chars);, +    }]