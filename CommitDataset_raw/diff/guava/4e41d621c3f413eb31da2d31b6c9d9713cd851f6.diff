[+++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import com.google.common.testing.GcFinalization;, +import java.lang.ref.WeakReference;, +  public void testCompletionOrderFutureInterruption() throws Exception {, +    SettableFuture<Long> future3 = SettableFuture.create();, +, +    ImmutableList<ListenableFuture<Long>> futures = inCompletionOrder(, +        ImmutableList.<ListenableFuture<Long>>of(future1, future2, future3));, +    future2.set(1L);, +, +    futures.get(1).cancel(true);, +    futures.get(2).cancel(false);, +, +    assertTrue(future1.isCancelled());, +    assertFalse(future1.wasInterrupted());, +    assertTrue(future3.isCancelled());, +    assertFalse(future3.wasInterrupted());, +  }, +, +  public void testCancellingADelegatePropagates() throws Exception {, +    SettableFuture<Long> future1 = SettableFuture.create();, +    SettableFuture<Long> future2 = SettableFuture.create();, +    SettableFuture<Long> future3 = SettableFuture.create();, +        ImmutableList.<ListenableFuture<Long>>of(future1, future2, future3));, +, +    // All futures are now complete; outstanding inputs are cancelled, +    assertTrue(future3.isCancelled());, +    assertTrue(future3.wasInterrupted());, +  }, +, +  public void testCancellingAllDelegatesIsNotQuadratic() throws Exception {, +    ImmutableList.Builder<SettableFuture<Long>> builder = ImmutableList.builder();, +    for (int i = 0; i < 500_000; i++) {, +      builder.add(SettableFuture.<Long>create());, +    }, +    ImmutableList<SettableFuture<Long>> inputs = builder.build();, +    ImmutableList<ListenableFuture<Long>> delegates = inCompletionOrder(inputs);, +, +    for (ListenableFuture<?> delegate : delegates) {, +      delegate.cancel(true);, +    }, +, +    for (ListenableFuture<?> input : inputs) {, +      assertTrue(input.isDone());, +    }, +  }, +, +  @GwtIncompatible, +  public void testInputGCedIfUnreferenced() throws Exception {, +    SettableFuture<Long> future1 = SettableFuture.create();, +    SettableFuture<Long> future2 = SettableFuture.create();, +    WeakReference<SettableFuture<Long>> future1Ref = new WeakReference<>(future1);, +    WeakReference<SettableFuture<Long>> future2Ref = new WeakReference<>(future2);, +, +    ImmutableList<ListenableFuture<Long>> delegates = inCompletionOrder(, +        ImmutableList.<ListenableFuture<Long>>of(future1, future2));, +, +    future1.set(1L);, +, +    future1 = null;, +    // First future is complete, should be unreferenced, +    GcFinalization.awaitClear(future1Ref);, +    ListenableFuture<Long> outputFuture1 = delegates.get(0);, +    delegates = null;, +    future2 = null;, +    // No references to list or other output future, second future should be unreferenced, +    GcFinalization.awaitClear(future2Ref);, +    outputFuture1.get();, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import com.google.common.testing.GcFinalization;, +import java.lang.ref.WeakReference;, +  public void testCompletionOrderFutureInterruption() throws Exception {, +    SettableFuture<Long> future3 = SettableFuture.create();, +, +    ImmutableList<ListenableFuture<Long>> futures = inCompletionOrder(, +        ImmutableList.<ListenableFuture<Long>>of(future1, future2, future3));, +    future2.set(1L);, +, +    futures.get(1).cancel(true);, +    futures.get(2).cancel(false);, +, +    assertTrue(future1.isCancelled());, +    assertFalse(future1.wasInterrupted());, +    assertTrue(future3.isCancelled());, +    assertFalse(future3.wasInterrupted());, +  }, +, +  public void testCancellingADelegatePropagates() throws Exception {, +    SettableFuture<Long> future1 = SettableFuture.create();, +    SettableFuture<Long> future2 = SettableFuture.create();, +    SettableFuture<Long> future3 = SettableFuture.create();, +        ImmutableList.<ListenableFuture<Long>>of(future1, future2, future3));, +, +    // All futures are now complete; outstanding inputs are cancelled, +    assertTrue(future3.isCancelled());, +    assertTrue(future3.wasInterrupted());, +  }, +, +  public void testCancellingAllDelegatesIsNotQuadratic() throws Exception {, +    ImmutableList.Builder<SettableFuture<Long>> builder = ImmutableList.builder();]