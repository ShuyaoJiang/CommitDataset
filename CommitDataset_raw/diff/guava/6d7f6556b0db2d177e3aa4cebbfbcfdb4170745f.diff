[+++ b/android/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java, +, +  @Test, +  public void immutableNetworkBuilder_appliesNetworkBuilderConfig() {, +    ImmutableNetwork<String, Integer> emptyNetwork =, +        NetworkBuilder.directed(), +            .allowsSelfLoops(true), +            .nodeOrder(ElementOrder.<String>natural()), +            .<String, Integer>immutable(), +            .build();, +, +    assertThat(emptyNetwork.isDirected()).isTrue();, +    assertThat(emptyNetwork.allowsSelfLoops()).isTrue();, +    assertThat(emptyNetwork.nodeOrder()).isEqualTo(ElementOrder.<String>natural());, +  }, +, +  /**, +   * Tests that the ImmutableNetwork.Builder doesn't change when the creating NetworkBuilder, +   * changes., +   */, +  @Test, +  @SuppressWarnings("CheckReturnValue"), +  public void immutableNetworkBuilder_copiesNetworkBuilder() {, +    NetworkBuilder<String, Object> networkBuilder =, +        NetworkBuilder.directed(), +            .allowsSelfLoops(true), +            .<String>nodeOrder(ElementOrder.<String>natural());, +    ImmutableNetwork.Builder<String, Integer> immutableNetworkBuilder =, +        networkBuilder.<String, Integer>immutable();, +, +    // Update NetworkBuilder, but this shouldn't impact immutableNetworkBuilder, +    networkBuilder.allowsSelfLoops(false).nodeOrder(ElementOrder.<String>unordered());, +, +    ImmutableNetwork<String, Integer> emptyNetwork = immutableNetworkBuilder.build();, +, +    assertThat(emptyNetwork.isDirected()).isTrue();, +    assertThat(emptyNetwork.allowsSelfLoops()).isTrue();, +    assertThat(emptyNetwork.nodeOrder()).isEqualTo(ElementOrder.<String>natural());, +  }, +, +  @Test, +  public void immutableNetworkBuilder_addNode() {, +    ImmutableNetwork<String, Integer> network =, +        NetworkBuilder.directed().<String, Integer>immutable().addNode("A").build();, +, +    assertThat(network.nodes()).containsExactly("A");, +    assertThat(network.edges()).isEmpty();, +  }, +, +  @Test, +  public void immutableNetworkBuilder_putEdgeFromNodes() {, +    ImmutableNetwork<String, Integer> network =, +        NetworkBuilder.directed().<String, Integer>immutable().addEdge("A", "B", 10).build();, +, +    assertThat(network.nodes()).containsExactly("A", "B");, +    assertThat(network.edges()).containsExactly(10);, +    assertThat(network.incidentNodes(10)).isEqualTo(EndpointPair.ordered("A", "B"));, +  }, +, +  @Test, +  public void immutableNetworkBuilder_putEdgeFromEndpointPair() {, +    ImmutableNetwork<String, Integer> network =, +        NetworkBuilder.directed(), +            .<String, Integer>immutable(), +            .addEdge(EndpointPair.ordered("A", "B"), 10), +            .build();, +, +    assertThat(network.nodes()).containsExactly("A", "B");, +    assertThat(network.edges()).containsExactly(10);, +    assertThat(network.incidentNodes(10)).isEqualTo(EndpointPair.ordered("A", "B"));, +  }, +++ b/android/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java, +, +  @Test, +  public void immutableNetworkBuilder_appliesNetworkBuilderConfig() {, +    ImmutableNetwork<String, Integer> emptyNetwork =, +        NetworkBuilder.directed(), +            .allowsSelfLoops(true), +            .nodeOrder(ElementOrder.<String>natural()), +            .<String, Integer>immutable(), +            .build();, +, +    assertThat(emptyNetwork.isDirected()).isTrue();, +    assertThat(emptyNetwork.allowsSelfLoops()).isTrue();, +    assertThat(emptyNetwork.nodeOrder()).isEqualTo(ElementOrder.<String>natural());, +  }, +, +  /**, +   * Tests that the ImmutableNetwork.Builder doesn't change when the creating NetworkBuilder, +   * changes., +   */, +  @Test, +  @SuppressWarnings("CheckReturnValue"), +  public void immutableNetworkBuilder_copiesNetworkBuilder() {, +    NetworkBuilder<String, Object> networkBuilder =, +        NetworkBuilder.directed(), +            .allowsSelfLoops(true), +            .<String>nodeOrder(ElementOrder.<String>natural());, +    ImmutableNetwork.Builder<String, Integer> immutableNetworkBuilder =, +        networkBuilder.<String, Integer>immutable();]