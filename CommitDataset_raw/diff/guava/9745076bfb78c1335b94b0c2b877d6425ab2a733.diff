[+++ b/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java, +  private Set<DurationSpec> expireAfterWrites = Sets.newHashSet((DurationSpec) null);, +  private Set<DurationSpec> expireAfterAccesses = Sets.newHashSet((DurationSpec) null);, +  private Set<DurationSpec> refreshes = Sets.newHashSet((DurationSpec) null);, +  CacheBuilderFactory withExpireAfterWrites(Set<DurationSpec> durations) {, +    this.expireAfterWrites = Sets.newLinkedHashSet(durations);, +    return this;, +  }, +, +  CacheBuilderFactory withExpireAfterAccesses(Set<DurationSpec> durations) {, +    this.expireAfterAccesses = Sets.newLinkedHashSet(durations);, +    return this;, +  }, +, +  CacheBuilderFactory withRefreshes(Set<DurationSpec> durations) {, +    this.refreshes = Sets.newLinkedHashSet(durations);, +        initialCapacities, maximumSizes, expireAfterWrites, expireAfterAccesses, refreshes,, +        keyStrengths, valueStrengths);, +                (DurationSpec) combination.get(3),, +                (DurationSpec) combination.get(4),, +                (DurationSpec) combination.get(5),, +                (Strength) combination.get(6),, +                (Strength) combination.get(7));, +      DurationSpec expireAfterWrite, DurationSpec expireAfterAccess, DurationSpec refresh,, +      Strength keyStrength, Strength valueStrength) {, +    if (expireAfterWrite != null) {, +      builder.expireAfterWrite(expireAfterWrite.duration, expireAfterWrite.unit);, +    if (expireAfterAccess != null) {, +      builder.expireAfterAccess(expireAfterAccess.duration, expireAfterAccess.unit);, +    if (refresh != null) {, +      builder.refreshInterval(refresh.duration, refresh.unit);, +  static class DurationSpec {, +    private final long duration;, +    private final TimeUnit unit;, +    private DurationSpec(long duration, TimeUnit unit) {, +      this.duration = duration;, +      this.unit = unit;, +    public static DurationSpec of(long duration, TimeUnit unit) {, +      return new DurationSpec(duration, unit);, +      return Objects.hashCode(duration, unit);, +      if (o instanceof DurationSpec) {, +        DurationSpec that = (DurationSpec) o;, +        return unit.toNanos(duration) == that.unit.toNanos(that.duration);, +          .add("duration", duration), +          .add("unit", unit), +++ b/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java, +  private Set<DurationSpec> expireAfterWrites = Sets.newHashSet((DurationSpec) null);, +  private Set<DurationSpec> expireAfterAccesses = Sets.newHashSet((DurationSpec) null);, +  private Set<DurationSpec> refreshes = Sets.newHashSet((DurationSpec) null);, +  CacheBuilderFactory withExpireAfterWrites(Set<DurationSpec> durations) {, +    this.expireAfterWrites = Sets.newLinkedHashSet(durations);, +    return this;, +  }, +, +  CacheBuilderFactory withExpireAfterAccesses(Set<DurationSpec> durations) {, +    this.expireAfterAccesses = Sets.newLinkedHashSet(durations);, +    return this;, +  }, +, +  CacheBuilderFactory withRefreshes(Set<DurationSpec> durations) {, +    this.refreshes = Sets.newLinkedHashSet(durations);, +        initialCapacities, maximumSizes, expireAfterWrites, expireAfterAccesses, refreshes,, +        keyStrengths, valueStrengths);, +                (DurationSpec) combination.get(3),, +                (DurationSpec) combination.get(4),, +                (DurationSpec) combination.get(5),, +                (Strength) combination.get(6),, +                (Strength) combination.get(7));, +      DurationSpec expireAfterWrite, DurationSpec expireAfterAccess, DurationSpec refresh,, +      Strength keyStrength, Strength valueStrength) {, +    if (expireAfterWrite != null) {, +      builder.expireAfterWrite(expireAfterWrite.duration, expireAfterWrite.unit);, +    if (expireAfterAccess != null) {, +      builder.expireAfterAccess(expireAfterAccess.duration, expireAfterAccess.unit);, +    if (refresh != null) {, +      builder.refreshInterval(refresh.duration, refresh.unit);, +  static class DurationSpec {, +    private final long duration;, +    private final TimeUnit unit;, +    private DurationSpec(long duration, TimeUnit unit) {, +      this.duration = duration;, +      this.unit = unit;, +    public static DurationSpec of(long duration, TimeUnit unit) {, +      return new DurationSpec(duration, unit);, +      return Objects.hashCode(duration, unit);, +      if (o instanceof DurationSpec) {, +        DurationSpec that = (DurationSpec) o;, +        return unit.toNanos(duration) == that.unit.toNanos(that.duration);, +          .add("duration", duration), +          .add("unit", unit), +++ b/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +        .expireAfterWrite(1, NANOSECONDS), +  public void testRefresh_zero() {, +    CacheBuilder<Object, Object> builder = new CacheBuilder<Object, Object>();, +    try {, +      builder.refreshInterval(0, SECONDS);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +]