[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java, +  public static <T extends Enum<T>> Optional<T> getIfPresent(, +      Class<T> enumClass, String value) {, +    return Platform.getEnumIfPresent(enumClass, value);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java, +  public static <T extends Enum<T>> Optional<T> getIfPresent(, +      Class<T> enumClass, String value) {, +    return Platform.getEnumIfPresent(enumClass, value);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java, +  static <T extends Enum<T>> Optional<T> getEnumIfPresent(Class<T> enumClass, String value) {, +    try {, +      return Optional.of(Enum.valueOf(enumClass, value));, +    } catch (IllegalArgumentException iae) {, +      return Optional.absent();, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java, +  public static <T extends Enum<T>> Optional<T> getIfPresent(, +      Class<T> enumClass, String value) {, +    return Platform.getEnumIfPresent(enumClass, value);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java, +  static <T extends Enum<T>> Optional<T> getEnumIfPresent(Class<T> enumClass, String value) {, +    try {, +      return Optional.of(Enum.valueOf(enumClass, value));, +    } catch (IllegalArgumentException iae) {, +      return Optional.absent();, +    }, +  }, +, +++ b/guava-tests/benchmark/com/google/common/base/EnumsBenchmark.java, +/*, + * Copyright (C) 2014 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import com.google.caliper.BeforeExperiment;, +import com.google.caliper.Benchmark;, +import com.google.caliper.Param;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +, +@SuppressWarnings("unused") // Nested enums used reflectively in setUp., +public class EnumsBenchmark {, +, +  @Param({"Small", "Medium", "Large"}), +  String enumSize;, +  @Param({"0.2", "0.8"}), +  float hitRate;, +, +  private Class<? extends Enum> enumType;, +  private String[] sampleData;, +, +  @BeforeExperiment, +  @SuppressWarnings("unchecked"), +  void setUp() throws ClassNotFoundException {, +    Preconditions.checkArgument(hitRate >= 0 && hitRate <= 1,, +        "hitRate must be in the range [0,1]");, +, +    enumType = (Class<? extends Enum>), +        Class.forName(EnumsBenchmark.class.getCanonicalName() + "$" + enumSize + "Enum");, +, +    Enum<?>[] allConstants = enumType.getEnumConstants();, +    List<String> hits = new ArrayList<String>();, +    for (int i = 0; i < hitRate * 256 / 3; ++i) {, +      hits.add(allConstants[0].name());, +      hits.add(allConstants[allConstants.length / 2].name());, +      hits.add(allConstants[allConstants.length - 1].name());, +    }, +    , +    List<String> misses = new ArrayList<String>();, +    for (int i = 0; i < 256 - hits.size(); ++i) {, +      misses.add("INVALID");, +    }, +, +    List<String> sampleDataList = new ArrayList<String>();, +    sampleDataList.addAll(hits);, +    sampleDataList.addAll(misses);, +    Collections.shuffle(sampleDataList);, +    sampleData = sampleDataList.toArray(new String[sampleDataList.size()]);, +  }, +, +  @Benchmark, +  void getIfPresent(int repetitions) {, +    for (int i = 0; i < repetitions; ++i) {]