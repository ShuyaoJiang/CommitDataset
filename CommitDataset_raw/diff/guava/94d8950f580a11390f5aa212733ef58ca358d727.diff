[+++ b/guava/src/com/google/common/collect/SortedMultisets.java, +/*, + * Copyright (C) 2011 The Guava Authors, + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.annotations.Beta;, +import com.google.common.collect.Multiset.Entry;, +import com.google.common.collect.Range.BoundType;, +, +import java.util.Comparator;, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +import java.util.Set;, +import java.util.SortedSet;, +, +/**, + * Provides static utility methods for creating and working with, + * {@link SortedMultiset} instances., + * , + * @author Louis Wasserman, + */, +@Beta, +final class SortedMultisets {, +  private SortedMultisets() {, +  }, +, +  /**, +   * A skeleton implementation for {@link SortedMultiset#elementSet}., +   */, +  static abstract class ElementSet<E> extends Multisets.ElementSet<E> implements, +      SortedSet<E> {, +    @Override abstract SortedMultiset<E> multiset();, +, +    @Override public Comparator<? super E> comparator() {, +      return multiset().comparator();, +    }, +, +    @Override public SortedSet<E> subSet(E fromElement, E toElement) {, +      return multiset().subMultiset(fromElement, BoundType.CLOSED, toElement,, +          BoundType.OPEN).elementSet();, +    }, +, +    @Override public SortedSet<E> headSet(E toElement) {, +      return multiset().headMultiset(toElement, BoundType.OPEN).elementSet();, +    }, +, +    @Override public SortedSet<E> tailSet(E fromElement) {, +      return multiset().tailMultiset(fromElement, BoundType.CLOSED), +          .elementSet();, +    }, +, +    @Override public E first() {, +      return getElementOrThrow(multiset().firstEntry());, +    }, +, +    @Override public E last() {, +      return getElementOrThrow(multiset().lastEntry());, +    }, +  }, +, +  private static <E> E getElementOrThrow(Entry<E> entry) {, +    if (entry == null) {, +      throw new NoSuchElementException();, +    }, +    return entry.getElement();, +  }, +  , +  /**, +   * A skeleton implementation of a descending multiset.  Only needs, +   * {@code forwardMultiset()} and {@code entryIterator()}., +   */, +  static abstract class DescendingMultiset<E> extends ForwardingMultiset<E>, +      implements SortedMultiset<E> {, +    abstract SortedMultiset<E> forwardMultiset();, +, +    private transient Comparator<? super E> comparator;, +, +    @Override public Comparator<? super E> comparator() {, +      Comparator<? super E> result = comparator;, +      if (result == null) {, +        return comparator =, +            Ordering.from(forwardMultiset().comparator()).<E>reverse();, +      }, +      return result;, +    }, +]