[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +import static com.google.common.hash.BloomFilterStrategies.BitArray;, +, +  public void testLargeBloomFilterDoesntOverflow() {, +    long numBits = Integer.MAX_VALUE;, +    numBits++;, +, +    BitArray bitArray = new BitArray(numBits);, +    assertTrue(, +        "BitArray.bitSize() must return a positive number, but was " + bitArray.bitSize(),, +        bitArray.bitSize() > 0);, +, +    // Ideally we would also test the bitSize() overflow of this BF, but it runs out of heap space, +    // BloomFilter.create(Funnels.unencodedCharsFunnel(), 244412641, 1e-11);, +  }, +, +  public void testCreateAndCheckMitz32BloomFilterWithKnownFalsePositives() {, +    BloomFilter<CharSequence> bf = BloomFilter.create(, +        Funnels.unencodedCharsFunnel(), numInsertions, 0.03,, +        BloomFilterStrategies.MURMUR128_MITZ_32);, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +import static com.google.common.hash.BloomFilterStrategies.BitArray;, +, +  public void testLargeBloomFilterDoesntOverflow() {, +    long numBits = Integer.MAX_VALUE;, +    numBits++;, +, +    BitArray bitArray = new BitArray(numBits);, +    assertTrue(, +        "BitArray.bitSize() must return a positive number, but was " + bitArray.bitSize(),, +        bitArray.bitSize() > 0);, +, +    // Ideally we would also test the bitSize() overflow of this BF, but it runs out of heap space, +    // BloomFilter.create(Funnels.unencodedCharsFunnel(), 244412641, 1e-11);, +  }, +, +  public void testCreateAndCheckMitz32BloomFilterWithKnownFalsePositives() {, +    BloomFilter<CharSequence> bf = BloomFilter.create(, +        Funnels.unencodedCharsFunnel(), numInsertions, 0.03,, +        BloomFilterStrategies.MURMUR128_MITZ_32);, +++ b/guava/src/com/google/common/hash/BloomFilter.java, +    return create(funnel, expectedInsertions, fpp, BloomFilterStrategies.MURMUR128_MITZ_32);, +  }, +, +  @VisibleForTesting, +  static <T> BloomFilter<T> create(, +      Funnel<T> funnel, int expectedInsertions /* n */, double fpp, Strategy strategy) {, +    checkNotNull(strategy);, +, +      return new BloomFilter<T>(new BitArray(numBits), numHashFunctions, funnel, strategy);, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +import static com.google.common.hash.BloomFilterStrategies.BitArray;, +, +  public void testLargeBloomFilterDoesntOverflow() {, +    long numBits = Integer.MAX_VALUE;, +    numBits++;, +, +    BitArray bitArray = new BitArray(numBits);, +    assertTrue(, +        "BitArray.bitSize() must return a positive number, but was " + bitArray.bitSize(),, +        bitArray.bitSize() > 0);, +, +    // Ideally we would also test the bitSize() overflow of this BF, but it runs out of heap space, +    // BloomFilter.create(Funnels.unencodedCharsFunnel(), 244412641, 1e-11);, +  }, +, +  public void testCreateAndCheckMitz32BloomFilterWithKnownFalsePositives() {, +    BloomFilter<CharSequence> bf = BloomFilter.create(, +        Funnels.unencodedCharsFunnel(), numInsertions, 0.03,, +        BloomFilterStrategies.MURMUR128_MITZ_32);, +++ b/guava/src/com/google/common/hash/BloomFilter.java, +    return create(funnel, expectedInsertions, fpp, BloomFilterStrategies.MURMUR128_MITZ_32);, +  }, +, +  @VisibleForTesting, +  static <T> BloomFilter<T> create(, +      Funnel<T> funnel, int expectedInsertions /* n */, double fpp, Strategy strategy) {, +    checkNotNull(strategy);, +, +      return new BloomFilter<T>(new BitArray(numBits), numHashFunctions, funnel, strategy);, +++ b/guava/src/com/google/common/hash/BloomFilterStrategies.java, +    long bitCount;, +      long bitCount = 0;, +    boolean set(long index) {, +        data[(int) (index >>> 6)] |= (1L << index);, +    boolean get(long index) {, +      return (data[(int) (index >>> 6)] & (1L << index)) != 0;, +    long bitSize() {, +      return (long) data.length * Long.SIZE;, +    long bitCount() {]