[+++ b/cycle_whitelist.txt, +FIELD java.util.AbstractMap.values com.google.common.collect.TreeRangeMap.SubRangeMap.SubRangeMapAsMap.values.$, +++ b/cycle_whitelist.txt, +FIELD java.util.AbstractMap.values com.google.common.collect.TreeRangeMap.SubRangeMap.SubRangeMapAsMap.values.$, +++ b/guava/pom.xml, +        <version>2.5.0</version>, +++ b/cycle_whitelist.txt, +FIELD java.util.AbstractMap.values com.google.common.collect.TreeRangeMap.SubRangeMap.SubRangeMapAsMap.values.$, +++ b/guava/pom.xml, +        <version>2.5.0</version>, +++ b/guava/src/com/google/common/base/Platform.java, +    /*, +     * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid, +     * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and, +     * in Guava, at least for now)., +     */, +++ b/cycle_whitelist.txt, +FIELD java.util.AbstractMap.values com.google.common.collect.TreeRangeMap.SubRangeMap.SubRangeMapAsMap.values.$, +++ b/guava/pom.xml, +        <version>2.5.0</version>, +++ b/guava/src/com/google/common/base/Platform.java, +    /*, +     * We'd normally use ServiceLoader here, but it hurts Android startup performance. To avoid, +     * that, we hardcode the JDK Pattern compiler on Android (and, inadvertently, on App Engine and, +     * in Guava, at least for now)., +     */, +++ b/guava/src/com/google/common/collect/Ordering.java, +   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,, +   * use {@code Streams.stream(iterable).collect(Comparators.least(k, thisComparator))} instead., +   * <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,, +   * use {@code Streams.stream(iterable).collect(Comparators.greatest(k, thisComparator))} instead.]