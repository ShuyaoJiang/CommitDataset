[+++ b/guava-tests/test/com/google/common/collect/QueuesTest.java, +  public void testNewLinkedBlockingDequeCapacity() {, +    try {, +      Queues.newLinkedBlockingDeque(0);, +      fail("Should have thrown IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +      // any capacity less than 1 should throw IllegalArgumentException, +    }, +    assertEquals(1, Queues.newLinkedBlockingDeque(1).remainingCapacity());, +    assertEquals(11, Queues.newLinkedBlockingDeque(11).remainingCapacity());, +  }, +, +++ b/guava-tests/test/com/google/common/collect/QueuesTest.java, +  public void testNewLinkedBlockingDequeCapacity() {, +    try {, +      Queues.newLinkedBlockingDeque(0);, +      fail("Should have thrown IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +      // any capacity less than 1 should throw IllegalArgumentException, +    }, +    assertEquals(1, Queues.newLinkedBlockingDeque(1).remainingCapacity());, +    assertEquals(11, Queues.newLinkedBlockingDeque(11).remainingCapacity());, +  }, +, +++ b/guava/src/com/google/common/collect/Queues.java, +import java.util.Deque;, + * Static utility methods pertaining to {@link Queue} and {@link Deque} instances., + * Also see this class's counterparts {@link Lists}, {@link Sets}, and {@link Maps}., +  /**, +   * Creates an empty {@code ArrayDeque} instance., +   *, +   * @return a new, empty {@code ArrayDeque}, +   */, +  public static <E> ArrayDeque<E> newArrayDeque() {, +    return new ArrayDeque<E>();, +  }, +, +  /**, +   * Creates an {@code ArrayDeque} instance containing the given elements., +   *, +   * @param elements the elements that the queue should contain, in order, +   * @return a new {@code ArrayDeque} containing those elements, +   */, +  public static <E> ArrayDeque<E> newArrayDeque(Iterable<? extends E> elements) {, +    if (elements instanceof Collection) {, +      return new ArrayDeque<E>(Collections2.cast(elements));, +    }, +    ArrayDeque<E> deque = new ArrayDeque<E>();, +    Iterables.addAll(deque, elements);, +    return deque;, +  }, +, +  /**, +   * Creates an empty {@code LinkedBlockingDeque} instance., +   *, +   * @return a new, empty {@code LinkedBlockingDeque}, +   */, +  public static <E> LinkedBlockingDeque<E> newLinkedBlockingDeque() {, +    return new LinkedBlockingDeque<E>();, +  }, +, +  /**, +   * Creates a {@code LinkedBlockingDeque} with the given (fixed) capacity., +   *, +   * @param capacity the capacity of this deque, +   * @return a new, empty {@code LinkedBlockingDeque}, +   * @throws IllegalArgumentException if {@code capacity} is less than 1, +   */, +  public static <E> LinkedBlockingDeque<E> newLinkedBlockingDeque(int capacity) {, +    return new LinkedBlockingDeque<E>(capacity);, +  }, +, +  /**, +   * Creates an {@code LinkedBlockingDeque} instance containing the given elements., +   *, +   * @param elements the elements that the queue should contain, in order, +   * @return a new {@code LinkedBlockingDeque} containing those elements, +   */, +  public static <E> LinkedBlockingDeque<E> newLinkedBlockingDeque(Iterable<? extends E> elements) {, +    if (elements instanceof Collection) {, +      return new LinkedBlockingDeque<E>(Collections2.cast(elements));, +    }, +    LinkedBlockingDeque<E> deque = new LinkedBlockingDeque<E>();, +    Iterables.addAll(deque, elements);, +    return deque;, +  }, +]