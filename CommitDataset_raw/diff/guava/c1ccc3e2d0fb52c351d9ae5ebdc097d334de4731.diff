[+++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +  public void testExpectedFalsePositiveProbability() {, +    BloomFilter<Object> bf = BloomFilter.create(HashTestUtils.BAD_FUNNEL, 10, 0.03);, +    double fpp = bf.expectedFalsePositiveProbability();, +    assertEquals(0.0, fpp);, +    // usually completed in less than 200 iterations, +    while (fpp != 1.0) {, +      boolean changed = bf.put(new Object());, +      double newFpp = bf.expectedFalsePositiveProbability();, +      // if changed, the new fpp is strictly higher, otherwise it is the same, +      assertTrue(changed ? newFpp > fpp : newFpp == fpp);, +      fpp = newFpp;, +    }, +  }, +, +    BloomFilter<byte[]> copy = SerializableTester.reserialize(bf);, +      assertTrue(copy.mightContain(Ints.toByteArray(i)));, +    assertEquals(bf.expectedFalsePositiveProbability(), copy.expectedFalsePositiveProbability());, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +  public void testExpectedFalsePositiveProbability() {, +    BloomFilter<Object> bf = BloomFilter.create(HashTestUtils.BAD_FUNNEL, 10, 0.03);, +    double fpp = bf.expectedFalsePositiveProbability();, +    assertEquals(0.0, fpp);, +    // usually completed in less than 200 iterations, +    while (fpp != 1.0) {, +      boolean changed = bf.put(new Object());, +      double newFpp = bf.expectedFalsePositiveProbability();, +      // if changed, the new fpp is strictly higher, otherwise it is the same, +      assertTrue(changed ? newFpp > fpp : newFpp == fpp);, +      fpp = newFpp;, +    }, +  }, +, +    BloomFilter<byte[]> copy = SerializableTester.reserialize(bf);, +      assertTrue(copy.mightContain(Ints.toByteArray(i)));, +    assertEquals(bf.expectedFalsePositiveProbability(), copy.expectedFalsePositiveProbability());, +++ b/guava/src/com/google/common/hash/BloomFilter.java, + *, +   * Returns the probability that {@linkplain #mightContain(Object)} will erroneously return, +   * {@code true} for an object that has not actually been put in the {@code BloomFilter}., +   *, +   * <p>Ideally, this number should be close to the {@code falsePositiveProbability} parameter, +   * passed in {@linkplain #create(Funnel, int, double)}, or smaller. If it is, +   * significantly higher, it is usually the case that too many elements (more than, +   * expected) have been put in the {@code BloomFilter}, degenerating it., +   */, +  public double expectedFalsePositiveProbability() {, +    return Math.pow((double) bits.bitCount() / bits.size(), numHashFunctions);, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/hash/BloomFilterTest.java, +  public void testExpectedFalsePositiveProbability() {, +    BloomFilter<Object> bf = BloomFilter.create(HashTestUtils.BAD_FUNNEL, 10, 0.03);, +    double fpp = bf.expectedFalsePositiveProbability();, +    assertEquals(0.0, fpp);, +    // usually completed in less than 200 iterations, +    while (fpp != 1.0) {, +      boolean changed = bf.put(new Object());, +      double newFpp = bf.expectedFalsePositiveProbability();, +      // if changed, the new fpp is strictly higher, otherwise it is the same, +      assertTrue(changed ? newFpp > fpp : newFpp == fpp);, +      fpp = newFpp;, +    }, +  }, +, +    BloomFilter<byte[]> copy = SerializableTester.reserialize(bf);, +      assertTrue(copy.mightContain(Ints.toByteArray(i)));, +    assertEquals(bf.expectedFalsePositiveProbability(), copy.expectedFalsePositiveProbability());, +++ b/guava/src/com/google/common/hash/BloomFilter.java, + *, +   * Returns the probability that {@linkplain #mightContain(Object)} will erroneously return, +   * {@code true} for an object that has not actually been put in the {@code BloomFilter}., +   *, +   * <p>Ideally, this number should be close to the {@code falsePositiveProbability} parameter, +   * passed in {@linkplain #create(Funnel, int, double)}, or smaller. If it is, +   * significantly higher, it is usually the case that too many elements (more than, +   * expected) have been put in the {@code BloomFilter}, degenerating it., +   */, +  public double expectedFalsePositiveProbability() {, +    return Math.pow((double) bits.bitCount() / bits.size(), numHashFunctions);, +  }, +, +  /**, +++ b/guava/src/com/google/common/hash/BloomFilterStrategies.java, +    int bitCount;, +      int bitCount = 0;, +      for (long value : data) {, +        bitCount += Long.bitCount(value);, +      }, +      this.bitCount = bitCount;, +      if (!get(index)) {, +        bitCount++;, +        return true;, +      }, +      return false;, +    /** Number of set bits (1s) */, +    int bitCount() {, +      return bitCount;, +    }]