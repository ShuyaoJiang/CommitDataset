[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +    assertNull("exceptions should not be propagated to uncaught exception handlers",, +        thrownByExecutionThread);, +    assertEquals("kaboom!", service.failureCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +    assertEquals("kaboom!", service.failureCause().getMessage());, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +    assertNull("exceptions should not be propagated to uncaught exception handlers",, +        thrownByExecutionThread);, +    assertEquals("kaboom!", service.failureCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +    assertEquals("kaboom!", service.failureCause().getMessage());, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.CountDownLatch;, +    } catch (CancellationException expected) {, +    }, +    assertEquals(service.runException, service.failureCause());, +  public void testFailOnErrorFromStartUpListener() throws InterruptedException {, +    final Error error = new Error();, +    final CountDownLatch latch = new CountDownLatch(1);, +    TestService service = new TestService();, +    service.addListener(new Service.Listener() {, +      @Override public void running() {, +        throw error;, +      }, +      @Override public void failed(State from, Throwable failure) {, +        assertEquals(State.RUNNING, from);, +        assertEquals(error, failure);, +        latch.countDown();, +      }, +    }, directExecutor());, +    service.startAsync();, +    latch.await();, +, +    assertEquals(0, service.numberOfTimesRunCalled.get());, +    assertEquals(Service.State.FAILED, service.state());, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +    assertNull("exceptions should not be propagated to uncaught exception handlers",, +        thrownByExecutionThread);, +    assertEquals("kaboom!", service.failureCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +    assertEquals("kaboom!", service.failureCause().getMessage());, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.CountDownLatch;, +    } catch (CancellationException expected) {, +    }, +    assertEquals(service.runException, service.failureCause());, +  public void testFailOnErrorFromStartUpListener() throws InterruptedException {, +    final Error error = new Error();, +    final CountDownLatch latch = new CountDownLatch(1);, +    TestService service = new TestService();, +    service.addListener(new Service.Listener() {, +      @Override public void running() {, +        throw error;, +      }, +      @Override public void failed(State from, Throwable failure) {, +        assertEquals(State.RUNNING, from);, +        assertEquals(error, failure);, +        latch.countDown();, +      }, +    }, directExecutor());, +    service.startAsync();, +    latch.await();, +, +    assertEquals(0, service.numberOfTimesRunCalled.get());, +    assertEquals(Service.State.FAILED, service.state());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +            // If stopAsync() is called while starting we may be in the STOPPING state in which, +            // case we should skip right down to shutdown., +                  // TODO(user): if guava ever moves to java7, this would be a good candidate for, +                  // a suppressed exception, or maybe we could generalize Closer.Suppressor, +                notifyFailed(t);, +                return;, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java, +    assertNull("exceptions should not be propagated to uncaught exception handlers",, +        thrownByExecutionThread);, +    assertEquals("kaboom!", service.failureCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +      assertEquals(service.failureCause(), expected.getCause());, +      assertEquals("kaboom!", expected.getCause().getMessage());, +    assertEquals("kaboom!", service.failureCause().getMessage());, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java]