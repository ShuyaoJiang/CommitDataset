[+++ b/guava-gwt/pom.xml, +      <version>${truth.version}</version>, +++ b/guava-gwt/pom.xml, +      <version>${truth.version}</version>, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractImmutableSetTest.java, +    ASSERT.that(set).has().exactly(, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c", "d").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c").inOrder();, +    ASSERT.that(set).has().exactly("a", "b", "c", "d", "e").inOrder();, +++ b/guava-gwt/pom.xml, +      <version>${truth.version}</version>, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractImmutableSetTest.java, +    ASSERT.that(set).has().exactly(, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c", "d").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c").inOrder();, +    ASSERT.that(set).has().exactly("a", "b", "c", "d", "e").inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractTableReadTest.java, +    ASSERT.that(table.columnKeySet()).has().exactly(1, 2, 3);, +++ b/guava-gwt/pom.xml, +      <version>${truth.version}</version>, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractImmutableSetTest.java, +    ASSERT.that(set).has().exactly(, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c", "d").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c").inOrder();, +    ASSERT.that(set).has().exactly("a", "b", "c", "d", "e").inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractTableReadTest.java, +    ASSERT.that(table.columnKeySet()).has().exactly(1, 2, 3);, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ArrayListMultimapTest.java, +    ASSERT.that(multimap.get("foo")).has().exactly(1, 2, 3, 4, 5).inOrder();, +    ASSERT.that(sublist).has().exactly(1, 2, 3, 4, 5).inOrder();, +    ASSERT.that(multimap.get("foo")).has().exactly(1, 2).inOrder();, +++ b/guava-gwt/pom.xml, +      <version>${truth.version}</version>, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractImmutableSetTest.java, +    ASSERT.that(set).has().exactly(, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c", "d").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c").inOrder();, +    ASSERT.that(set).has().exactly("a", "b", "c", "d", "e").inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractTableReadTest.java, +    ASSERT.that(table.columnKeySet()).has().exactly(1, 2, 3);, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ArrayListMultimapTest.java, +    ASSERT.that(multimap.get("foo")).has().exactly(1, 2, 3, 4, 5).inOrder();, +    ASSERT.that(sublist).has().exactly(1, 2, 3, 4, 5).inOrder();, +    ASSERT.that(multimap.get("foo")).has().exactly(1, 2).inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ArrayTableTest.java, +    ASSERT.that(table.rowKeyList()).has().exactly("foo", "bar", "cat").inOrder();, +    ASSERT.that(table.columnKeyList()).has().exactly(1, 2, 3).inOrder();, +++ b/guava-gwt/pom.xml, +      <version>${truth.version}</version>, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractImmutableSetTest.java, +    ASSERT.that(set).has().exactly(, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c", "d").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b").inOrder();, +    ASSERT.that(builder.build()).has().exactly("a", "b", "c").inOrder();, +    ASSERT.that(set).has().exactly("a", "b", "c", "d", "e").inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractTableReadTest.java, +    ASSERT.that(table.columnKeySet()).has().exactly(1, 2, 3);, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ArrayListMultimapTest.java, +    ASSERT.that(multimap.get("foo")).has().exactly(1, 2, 3, 4, 5).inOrder();, +    ASSERT.that(sublist).has().exactly(1, 2, 3, 4, 5).inOrder();, +    ASSERT.that(multimap.get("foo")).has().exactly(1, 2).inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ArrayTableTest.java, +    ASSERT.that(table.rowKeyList()).has().exactly("foo", "bar", "cat").inOrder();, +    ASSERT.that(table.columnKeyList()).has().exactly(1, 2, 3).inOrder();, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ConstraintsTest.java, +    ASSERT.that(collection).has(), +        .exactly("foo", "bar", TEST_ELEMENT, "qux", "cat", "dog").inOrder();, +        .exactly("foo", "bar", TEST_ELEMENT, "qux", "cat", "dog").inOrder();, +    ASSERT.that(constrained).has().exactly("foo", "bar").inOrder();, +    ASSERT.that(collection).has().exactly("foo", "bar").inOrder();, +    ASSERT.that(set).has().exactly("foo", "bar", TEST_ELEMENT, "qux", "cat", "dog").inOrder();, +        .exactly("foo", "bar", TEST_ELEMENT, "qux", "cat", "dog").inOrder();, +    ASSERT.that(constrained).has().exactly("foo", "bar").inOrder();, +    ASSERT.that(set).has().exactly("foo", "bar").inOrder();, +    ASSERT.that(sortedSet).has().exactly("bar", "cat", "dog", "foo", "qux", TEST_ELEMENT).inOrder();, +        .exactly("bar", "cat", "dog", "foo", "qux", TEST_ELEMENT).inOrder();, +    ASSERT.that(constrained).has().exactly("bar", "foo").inOrder();, +    ASSERT.that(sortedSet).has().exactly("bar", "foo").inOrder();, +    ASSERT.that(list).has().exactly(, +    ASSERT.that(constrained).has().exactly(, +    ASSERT.that(list).has().exactly(, +    ASSERT.that(constrained).has().exactly(, +    ASSERT.that(constrained).has().exactly("foo", "bar").inOrder();, +    ASSERT.that(list).has().exactly("foo", "bar").inOrder();, +    ASSERT.that(multiset).has().exactly(, +    ASSERT.that(constrained).has().exactly(, +    ASSERT.that(multiset).has().exactly("bar", TEST_ELEMENT, "qux", "cat", "dog");, +    ASSERT.that(constrained).has().exactly("bar", TEST_ELEMENT, "qux", "cat", "dog");, +    ASSERT.that(constrained).has().exactly("foo", "bar");, +    ASSERT.that(multiset).has().exactly("foo", "bar");, +    ASSERT.that(constrained).has().exactly("foo", "bar", "baz").inOrder();]