[+++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +   * See {@link MapMaker#maximumSize}., +   *, +   * @since 8, +   */, +  @Beta, +  public abstract GenericMapMaker<K0, V0> maximumSize(int maximumSize);, +, +  /**, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +   * See {@link MapMaker#maximumSize}., +   *, +   * @since 8, +   */, +  @Beta, +  public abstract GenericMapMaker<K0, V0> maximumSize(int maximumSize);, +, +  /**, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +      extends LinkedHashMap<K, V> implements ConcurrentMap<K, V> {, +    private final long expirationMillis;, +    private final int maximumSize;, +    ExpiringComputingMap(long expirationMillis, int maximumSize,, +        int initialCapacity, float loadFactor) {, +      this(expirationMillis, null, maximumSize, initialCapacity, loadFactor);, +    ExpiringComputingMap(long expirationMillis,, +        Function<? super K, ? extends V> computer, int maximumSize,, +        int initialCapacity, float loadFactor) {, +      super(initialCapacity, loadFactor, (maximumSize != -1));, +      this.maximumSize = maximumSize;, +    @Override, +    protected boolean removeEldestEntry(Map.Entry<K, V> ignored) {, +      return (maximumSize == -1) ? false : size() > maximumSize;, +    }, +, +    @Override, +    public V putIfAbsent(K key, V value) {, +      if (!containsKey(key)) {, +        return put(key, value);, +      } else {, +        return get(key);, +      }, +    }, +, +    @Override, +    public boolean remove(Object key, Object value) {, +      if (containsKey(key) && get(key).equals(value)) {, +        remove(key);, +        return true;, +      }, +      return false;, +    }, +, +    @Override, +    public boolean replace(K key, V oldValue, V newValue) {, +      if (containsKey(key) && get(key).equals(oldValue)) {, +        put(key, newValue);, +        return true;, +      }, +      return false;, +    }, +, +    @Override, +    public V replace(K key, V value) {, +      return containsKey(key) ? put(key, value) : null;, +    }, +, +  private int maximumSize = -1;, +  public MapMaker() {}, +  public MapMaker maximumSize(int maximumSize) {, +    if (this.maximumSize != -1) {, +      throw new IllegalStateException("maximum size of " + maximumSize, +          + " was already set");, +    }, +    if (maximumSize < 0) {, +      throw new IllegalArgumentException("invalid maximum size: ", +          + maximumSize);, +    }, +    this.maximumSize = maximumSize;, +    useCustomMap = true;, +    return this;, +  }, +, +  @Override, +        ? new ExpiringComputingMap<K, V>(, +            expirationMillis, null, maximumSize, initialCapacity, loadFactor), +    return new ExpiringComputingMap<K, V>(, +        expirationMillis, computer, maximumSize, initialCapacity, loadFactor);, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, +   * See {@link MapMaker#maximumSize}., +   *, +   * @since 8, +   */, +  @Beta, +  public abstract GenericMapMaker<K0, V0> maximumSize(int maximumSize);, +, +  /**, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java]