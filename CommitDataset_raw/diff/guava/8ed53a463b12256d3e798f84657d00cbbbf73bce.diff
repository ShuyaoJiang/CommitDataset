[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Override, +  @Test, +  public void incidentNodes_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Override, +  @Test, +  public void incidentNodes_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();, +  }, +, +++ b/guava-tests/test/com/google/common/graph/ImmutableDirectedMultigraphTest.java, +  @Test, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Override, +  @Test, +  public void incidentNodes_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();, +  }, +, +++ b/guava-tests/test/com/google/common/graph/ImmutableDirectedMultigraphTest.java, +  @Test, +  @Test, +++ b/guava-tests/test/com/google/common/graph/ImmutableUndirectedMultigraphTest.java, +  @Test, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Override, +  @Test, +  public void incidentNodes_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();, +  }, +, +++ b/guava-tests/test/com/google/common/graph/ImmutableDirectedMultigraphTest.java, +  @Test, +  @Test, +++ b/guava-tests/test/com/google/common/graph/ImmutableUndirectedMultigraphTest.java, +  @Test, +  @Test, +++ b/guava/src/com/google/common/graph/DirectedGraph.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +import java.util.Set;, +, +  /**, +   * {@inheritDoc}, +   *, +   * <p>If {@code edge} is not a self-loop, the iteration order will be, +   * {@code [source(edge), target(edge)]}., +   *, +   */, +  @Override, +  Set<N> incidentNodes(Object edge);, +, +  /**, +   * {@inheritDoc}, +   *, +   * <p>The {@linkplain #source(Object) source} and {@linkplain #target(Object) target}, +   * of the edges returned must be {@code source} and {@code target}, respectively., +   *, +   */, +  @Override, +  Set<E> edgesConnecting(Object source, Object target);, +, +  /**, +   * {@inheritDoc}, +   *, +   * <p>{@code edge} is an outgoing edge of {@code source} and an incoming edge of {@code target}., +   */, +  @Override, +  @CanIgnoreReturnValue, +  boolean addEdge(E edge, N source, N target);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Override, +  @Test, +  public void incidentNodes_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(graph.incidentNodes(E12)).containsExactly(N1, N2).inOrder();, +  }, +, +++ b/guava-tests/test/com/google/common/graph/ImmutableDirectedMultigraphTest.java, +  @Test, +  @Test, +++ b/guava-tests/test/com/google/common/graph/ImmutableUndirectedMultigraphTest.java, +  @Test, +  @Test, +++ b/guava/src/com/google/common/graph/DirectedGraph.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +import java.util.Set;, +, +  /**]