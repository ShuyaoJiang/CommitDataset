[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    EndpointPair<Integer> pair12 = EndpointPair.ordered(N1, N2);, +    assertThat(transpose.edgeValues().get(pair12)).isNull();, +    assertThat(transpose.edgeValues().get(pair12)).isEqualTo(E21);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    EndpointPair<Integer> pair12 = EndpointPair.ordered(N1, N2);, +    assertThat(transpose.edgeValues().get(pair12)).isNull();, +    assertThat(transpose.edgeValues().get(pair12)).isEqualTo(E21);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +import java.util.Map;, +    assertThat(graph.edgeValues().keySet()).isEqualTo(graph.edges());, +, +        EndpointPair<Integer> endpointPair = EndpointPair.of(graph, node, otherNode);, +          String value = graph.edgeValue(node, otherNode);, +          assertThat(value).isNotNull();, +          assertThat(value).isEqualTo(graph.edgeValues().get(endpointPair));, +          assertThat(graph.edgeValues()).doesNotContainKey(endpointPair);, +  public void edgeValues() {, +    Map<EndpointPair<Integer>, String> edgeValues = graph.edgeValues();, +    EndpointPair<Integer> pair12 = EndpointPair.ordered(1, 2);, +    EndpointPair<Integer> pair21 = EndpointPair.ordered(2, 1);, +    assertThat(edgeValues).doesNotContainKey(pair12);, +    assertThat(edgeValues).doesNotContainKey(pair21);, +    assertThat(edgeValues.get(pair12)).isEqualTo("valueA");, +    assertThat(edgeValues.get(pair21)).isEqualTo("valueB");, +    assertThat(edgeValues).doesNotContainKey(pair12);, +    assertThat(edgeValues.get(pair21)).isEqualTo("valueC");, +, +    try {, +      edgeValues.put(pair12, "valueA");, +      fail("Map returned by edgeValues() should be unmodifiable");, +    } catch (UnsupportedOperationException expected) {, +    }, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    EndpointPair<Integer> pair12 = EndpointPair.ordered(N1, N2);, +    assertThat(transpose.edgeValues().get(pair12)).isNull();, +    assertThat(transpose.edgeValues().get(pair12)).isEqualTo(E21);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +import java.util.Map;, +    assertThat(graph.edgeValues().keySet()).isEqualTo(graph.edges());, +, +        EndpointPair<Integer> endpointPair = EndpointPair.of(graph, node, otherNode);, +          String value = graph.edgeValue(node, otherNode);, +          assertThat(value).isNotNull();, +          assertThat(value).isEqualTo(graph.edgeValues().get(endpointPair));, +          assertThat(graph.edgeValues()).doesNotContainKey(endpointPair);, +  public void edgeValues() {, +    Map<EndpointPair<Integer>, String> edgeValues = graph.edgeValues();, +    EndpointPair<Integer> pair12 = EndpointPair.ordered(1, 2);, +    EndpointPair<Integer> pair21 = EndpointPair.ordered(2, 1);, +    assertThat(edgeValues).doesNotContainKey(pair12);, +    assertThat(edgeValues).doesNotContainKey(pair21);, +    assertThat(edgeValues.get(pair12)).isEqualTo("valueA");, +    assertThat(edgeValues.get(pair21)).isEqualTo("valueB");, +    assertThat(edgeValues).doesNotContainKey(pair12);, +    assertThat(edgeValues.get(pair21)).isEqualTo("valueC");, +, +    try {, +      edgeValues.put(pair12, "valueA");, +      fail("Map returned by edgeValues() should be unmodifiable");, +    } catch (UnsupportedOperationException expected) {, +    }, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +  @Override, +  public Map<EndpointPair<N>, V> edgeValues() {, +    return edgeValues(this);, +  }, +, +  static <N, V> Map<EndpointPair<N>, V> edgeValues(final ValueGraph<N, V> graph) {, +    Function<EndpointPair<N>, V> edgeToValueFn = new Function<EndpointPair<N>, V>() {, +      @Override, +      public V apply(EndpointPair<N> edge) {, +        return graph.edgeValue(edge.nodeU(), edge.nodeV());, +      }, +    };, +    return Maps.asMap(graph.edges(), edgeToValueFn);, +  }, +, +        graph.edgeValues());, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    EndpointPair<Integer> pair12 = EndpointPair.ordered(N1, N2);, +    assertThat(transpose.edgeValues().get(pair12)).isNull();, +    assertThat(transpose.edgeValues().get(pair12)).isEqualTo(E21);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +import java.util.Map;, +    assertThat(graph.edgeValues().keySet()).isEqualTo(graph.edges());, +, +        EndpointPair<Integer> endpointPair = EndpointPair.of(graph, node, otherNode);, +          String value = graph.edgeValue(node, otherNode);, +          assertThat(value).isNotNull();, +          assertThat(value).isEqualTo(graph.edgeValues().get(endpointPair));, +          assertThat(graph.edgeValues()).doesNotContainKey(endpointPair);, +  public void edgeValues() {, +    Map<EndpointPair<Integer>, String> edgeValues = graph.edgeValues();, +    EndpointPair<Integer> pair12 = EndpointPair.ordered(1, 2);, +    EndpointPair<Integer> pair21 = EndpointPair.ordered(2, 1);, +    assertThat(edgeValues).doesNotContainKey(pair12);, +    assertThat(edgeValues).doesNotContainKey(pair21);, +    assertThat(edgeValues.get(pair12)).isEqualTo("valueA");, +    assertThat(edgeValues.get(pair21)).isEqualTo("valueB");]