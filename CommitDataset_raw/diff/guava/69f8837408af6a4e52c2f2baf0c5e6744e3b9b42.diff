[+++ b/guava-gwt/test/com/google/common/collect/MultimapsTest_gwt.java, +public void testMultimapCollectorGenerics() throws Exception {, +  com.google.common.collect.MultimapsTest testCase = new com.google.common.collect.MultimapsTest();, +  testCase.testMultimapCollectorGenerics();, +}, +, +public void testToMultimap() throws Exception {, +  com.google.common.collect.MultimapsTest testCase = new com.google.common.collect.MultimapsTest();, +  testCase.testToMultimap();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/MultimapsTest_gwt.java, +public void testMultimapCollectorGenerics() throws Exception {, +  com.google.common.collect.MultimapsTest testCase = new com.google.common.collect.MultimapsTest();, +  testCase.testMultimapCollectorGenerics();, +}, +, +public void testToMultimap() throws Exception {, +  com.google.common.collect.MultimapsTest testCase = new com.google.common.collect.MultimapsTest();, +  testCase.testToMultimap();, +}, +, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.base.Equivalence;, +import com.google.common.testing.CollectorTester;, +import java.util.function.BiPredicate;, +import java.util.stream.Collector;, +import java.util.stream.Stream;, +  public void testMultimapCollectorGenerics() {, +    ListMultimap<Integer, String> unused =, +        Stream.of("foo", "bar", "quux"), +            .collect(, +                Multimaps.toMultimap(, +                    String::length, s -> s, MultimapBuilder.treeKeys().arrayListValues()::build));, +  }, +, +  public void testToMultimap() {, +    Collector<Entry<String, Integer>, ?, TreeMultimap<String, Integer>> collector =, +        Multimaps.toMultimap(Entry::getKey, Entry::getValue, TreeMultimap::create);, +    BiPredicate<Multimap<?, ?>, Multimap<?, ?>> equivalence =, +        Equivalence.equals(), +            .onResultOf((Multimap<?, ?> mm) -> ImmutableList.copyOf(mm.asMap().entrySet())), +            .and(Equivalence.equals());, +    TreeMultimap<String, Integer> empty = TreeMultimap.create();, +    TreeMultimap<String, Integer> filled = TreeMultimap.create();, +    filled.put("a", 1);, +    filled.put("a", 2);, +    filled.put("b", 2);, +    filled.put("c", 3);, +    CollectorTester.of(collector, equivalence), +        .expectCollects(empty), +        .expectCollects(, +            filled, mapEntry("a", 1), mapEntry("a", 2), mapEntry("b", 2), mapEntry("c", 3));, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/MultimapsTest_gwt.java, +public void testMultimapCollectorGenerics() throws Exception {, +  com.google.common.collect.MultimapsTest testCase = new com.google.common.collect.MultimapsTest();, +  testCase.testMultimapCollectorGenerics();, +}, +, +public void testToMultimap() throws Exception {, +  com.google.common.collect.MultimapsTest testCase = new com.google.common.collect.MultimapsTest();, +  testCase.testToMultimap();, +}, +, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.base.Equivalence;, +import com.google.common.testing.CollectorTester;, +import java.util.function.BiPredicate;, +import java.util.stream.Collector;, +import java.util.stream.Stream;, +  public void testMultimapCollectorGenerics() {, +    ListMultimap<Integer, String> unused =, +        Stream.of("foo", "bar", "quux"), +            .collect(, +                Multimaps.toMultimap(, +                    String::length, s -> s, MultimapBuilder.treeKeys().arrayListValues()::build));, +  }, +, +  public void testToMultimap() {, +    Collector<Entry<String, Integer>, ?, TreeMultimap<String, Integer>> collector =, +        Multimaps.toMultimap(Entry::getKey, Entry::getValue, TreeMultimap::create);, +    BiPredicate<Multimap<?, ?>, Multimap<?, ?>> equivalence =, +        Equivalence.equals(), +            .onResultOf((Multimap<?, ?> mm) -> ImmutableList.copyOf(mm.asMap().entrySet())), +            .and(Equivalence.equals());, +    TreeMultimap<String, Integer> empty = TreeMultimap.create();, +    TreeMultimap<String, Integer> filled = TreeMultimap.create();, +    filled.put("a", 1);, +    filled.put("a", 2);, +    filled.put("b", 2);, +    filled.put("c", 3);, +    CollectorTester.of(collector, equivalence), +        .expectCollects(empty), +        .expectCollects(, +            filled, mapEntry("a", 1), mapEntry("a", 2), mapEntry("b", 2), mapEntry("c", 3));, +  }]