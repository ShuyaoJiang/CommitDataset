[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java, +import com.google.common.collect.ImmutableSortedSet;, +, +import java.util.Iterator;, +  private static final ImmutableSortedMap<Object, Object> NATURAL_EMPTY_MAP, +  K higher(K k) {, +    Iterator<K> iterator = keySet().tailSet(k).iterator();, +    while (iterator.hasNext()) {, +      K tmp = iterator.next();, +      if (comparator().compare(k, tmp) < 0) {, +        return tmp;, +      }, +    }, +    return null;, +  }, +, +  ImmutableSortedMap<K, V> headMap(K toKey, boolean inclusive) {, +    checkNotNull(toKey);, +    if (inclusive) {, +      K tmp = higher(toKey);, +      if (tmp == null) {, +        return this;, +      }, +      toKey = tmp;, +    }, +    return headMap(toKey);, +  }, +, +  ImmutableSortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive){, +    checkNotNull(fromKey);, +    checkNotNull(toKey);, +    checkArgument(comparator.compare(fromKey, toKey) <= 0);, +    return tailMap(fromKey, fromInclusive).headMap(toKey, toInclusive);, +  }, +  , +, +  public ImmutableSortedMap<K, V> tailMap(K fromKey, boolean inclusive) {, +    checkNotNull(fromKey);, +    if (!inclusive) {, +      fromKey = higher(fromKey);, +      if (fromKey == null) {, +        return emptyMap(comparator());, +      }, +    }, +    return tailMap(fromKey);, +  }, +, +  static <K, V> ImmutableSortedMap<K, V> emptyMap(Comparator<? super K> comparator) {, +    if (comparator == NATURAL_ORDER) {, +      return (ImmutableSortedMap) NATURAL_EMPTY_MAP;, +    }, +    return create(comparator);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java, +import com.google.common.collect.ImmutableSortedSet;, +, +import java.util.Iterator;, +  private static final ImmutableSortedMap<Object, Object> NATURAL_EMPTY_MAP, +  K higher(K k) {, +    Iterator<K> iterator = keySet().tailSet(k).iterator();, +    while (iterator.hasNext()) {, +      K tmp = iterator.next();, +      if (comparator().compare(k, tmp) < 0) {, +        return tmp;, +      }, +    }, +    return null;, +  }, +, +  ImmutableSortedMap<K, V> headMap(K toKey, boolean inclusive) {, +    checkNotNull(toKey);, +    if (inclusive) {, +      K tmp = higher(toKey);, +      if (tmp == null) {, +        return this;, +      }, +      toKey = tmp;, +    }, +    return headMap(toKey);, +  }, +, +  ImmutableSortedMap<K, V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive){, +    checkNotNull(fromKey);, +    checkNotNull(toKey);, +    checkArgument(comparator.compare(fromKey, toKey) <= 0);, +    return tailMap(fromKey, fromInclusive).headMap(toKey, toInclusive);, +  }, +  , +, +  public ImmutableSortedMap<K, V> tailMap(K fromKey, boolean inclusive) {, +    checkNotNull(fromKey);, +    if (!inclusive) {, +      fromKey = higher(fromKey);, +      if (fromKey == null) {, +        return emptyMap(comparator());, +      }, +    }, +    return tailMap(fromKey);, +  }, +]