[+++ b/android/guava-tests/test/com/google/common/graph/TraverserTest.java, +import static com.google.common.collect.Lists.charactersOf;, +  public void forGraph_breadthFirstIterable_javadocExample_canBeIteratedMultipleTimes() {, +    Iterable<Character> result = Traverser.forGraph(JAVADOC_GRAPH).breadthFirst(charactersOf("bf"));, +, +    assertEqualCharNodes(result, "bfaecd");, +    assertEqualCharNodes(result, "bfaecd");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_diamond() {, +    Traverser<Character> traverser = Traverser.forGraph(DIAMOND_GRAPH);, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("")), "");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("bc")), "bcd");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("a")), "abcd");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("acdb")), "acdb");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("db")), "db");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_multiGraph() {, +    Traverser<Character> traverser = Traverser.forGraph(MULTI_GRAPH);, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("ac")), "acbd");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("cb")), "cbad");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("db")), "db");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("d")), "d");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_cycle() {, +    Traverser<Character> traverser = Traverser.forGraph(CYCLE_GRAPH);, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("a")), "abcd");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("bd")), "bdca");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("dc")), "dcab");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("bc")), "bcda");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_twoCycles() {, +    Traverser<Character> traverser = Traverser.forGraph(TWO_CYCLES_GRAPH);, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("a")), "abcd");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("bd")), "bdca");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("dc")), "dcab");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("bc")), "bcda");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_tree() throws Exception {, +    Traverser<Character> traverser = Traverser.forGraph(TREE);, +, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("hg")), "hgdefabc");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("gd")), "gdfabc");, +    assertEqualCharNodes(traverser.breadthFirst(charactersOf("bdgh")), "bdghacfe");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_twoTrees() {, +    assertEqualCharNodes(Traverser.forGraph(TWO_TREES).breadthFirst(charactersOf("a")), "ab");, +    assertEqualCharNodes(Traverser.forGraph(TWO_TREES).breadthFirst(charactersOf("ac")), "acbd");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_singleRoot() {, +    Iterable<Character> result = Traverser.forGraph(SINGLE_ROOT).breadthFirst(charactersOf("a"));, +, +    assertEqualCharNodes(result, "a");, +  }, +, +  @Test, +  public void forGraph_breadthFirstIterable_emptyGraph() {, +    assertEqualCharNodes(, +        Traverser.forGraph(createDirectedGraph()).breadthFirst(charactersOf("")), "");, +    try {, +      Traverser.forGraph(createDirectedGraph()).breadthFirst(charactersOf("a"));, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  /**, +   * Checks that the elements of the iterable are calculated on the fly. Concretely, that means that, +   * {@link SuccessorsFunction#successors(Object)} can only be called for a subset of all nodes., +   */, +  @Test, +  public void forGraph_breadthFirstIterable_iterableIsLazy() {, +    RequestSavingGraph graph = new RequestSavingGraph(DIAMOND_GRAPH);, +    Iterable<Character> result = Traverser.forGraph(graph).breadthFirst(charactersOf("ab"));, +, +    assertEqualCharNodes(Iterables.limit(result, 2), "ab");, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'b', 'b');, +, +    // Iterate again to see if calculation is done again, +    assertEqualCharNodes(Iterables.limit(result, 2), "ab");, +    assertThat(graph.requestedNodes).containsExactly('a', 'a', 'a', 'b', 'b', 'b');, +  }, +, +  @Test, +  public void forGraph_depthFirstPreOrderIterable_javadocExample_canBeIteratedMultipleTimes() {, +    Iterable<Character> result =, +        Traverser.forGraph(JAVADOC_GRAPH).depthFirstPreOrder(charactersOf("bc"));]