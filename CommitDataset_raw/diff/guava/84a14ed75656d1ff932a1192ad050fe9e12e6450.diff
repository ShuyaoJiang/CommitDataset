[+++ b/guava-gwt/test/com/google/common/primitives/ImmutableIntArrayTest_gwt.java, +public void testCopyOf_stream() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testCopyOf_stream();, +}, +, +public void testForEach() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testForEach();, +}, +, +public void testStream() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testStream();, +}, +, +++ b/guava-gwt/test/com/google/common/primitives/ImmutableIntArrayTest_gwt.java, +public void testCopyOf_stream() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testCopyOf_stream();, +}, +, +public void testForEach() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testForEach();, +}, +, +public void testStream() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testStream();, +}, +, +++ b/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java, +import java.util.stream.IntStream;, +  public void testCopyOf_stream() {, +    assertThat(ImmutableIntArray.copyOf(IntStream.empty())).isSameAs(ImmutableIntArray.of());, +    assertThat(ImmutableIntArray.copyOf(IntStream.of(0, 1, 3)).asList()), +        .containsExactly(0, 1, 3), +        .inOrder();, +  }, +, +    ADD_STREAM {, +      @Override, +      void doIt(ImmutableIntArray.Builder builder, AtomicInteger counter) {, +        int[] array = new int[RANDOM.nextInt(10)];, +        for (int i = 0; i < array.length; i++) {, +          array[i] = counter.getAndIncrement();, +        }, +        builder.addAll(Arrays.stream(array));, +      }, +    },, +  public void testForEach() {, +    ImmutableIntArray.of().forEach(i -> fail());, +    ImmutableIntArray.of(0, 1, 3).subArray(1, 1).forEach(i -> fail());, +, +    AtomicInteger count = new AtomicInteger(0);, +    ImmutableIntArray.of(0, 1, 2, 3).forEach(i -> assertThat(i).isEqualTo(count.getAndIncrement()));, +    assertEquals(4, count.get());, +  }, +, +  public void testStream() {, +    ImmutableIntArray.of().stream().forEach(i -> fail());, +    ImmutableIntArray.of(0, 1, 3).subArray(1, 1).stream().forEach(i -> fail());, +    assertThat(ImmutableIntArray.of(0, 1, 3).stream().toArray()).isEqualTo(new int[] {0, 1, 3});, +  }, +, +++ b/guava-gwt/test/com/google/common/primitives/ImmutableIntArrayTest_gwt.java, +public void testCopyOf_stream() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testCopyOf_stream();, +}, +, +public void testForEach() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testForEach();, +}, +, +public void testStream() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testStream();, +}, +, +++ b/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java, +import java.util.stream.IntStream;, +  public void testCopyOf_stream() {, +    assertThat(ImmutableIntArray.copyOf(IntStream.empty())).isSameAs(ImmutableIntArray.of());, +    assertThat(ImmutableIntArray.copyOf(IntStream.of(0, 1, 3)).asList()), +        .containsExactly(0, 1, 3), +        .inOrder();, +  }, +, +    ADD_STREAM {, +      @Override, +      void doIt(ImmutableIntArray.Builder builder, AtomicInteger counter) {, +        int[] array = new int[RANDOM.nextInt(10)];, +        for (int i = 0; i < array.length; i++) {, +          array[i] = counter.getAndIncrement();, +        }, +        builder.addAll(Arrays.stream(array));, +      }]