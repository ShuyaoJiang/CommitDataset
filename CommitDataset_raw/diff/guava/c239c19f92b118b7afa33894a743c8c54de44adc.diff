[+++ /dev/null, +++ /dev/null, +++ b/guava-tests/test/com/google/common/util/concurrent/SettableFutureTest.java, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.ExecutionException;, +, +  /** Tests the initial state of the future. */, +  public void testCreate() throws Exception {, +    SettableFuture<Integer> future = SettableFuture.create();, +    assertFalse(future.isDone());, +    assertFalse(future.isCancelled());, +  }, +, +  public void testSetValue_simpleThreaded() throws Exception {, +    SettableFuture<Integer> future = SettableFuture.create();, +    assertTrue(future.set(42));, +    // Later attempts to set the future should return false., +    assertFalse(future.set(23));, +    assertFalse(future.setException(new Exception("bar")));, +    assertFalse(future.setFuture(SettableFuture.<Integer>create()));, +    // Check that the future has been set properly., +    assertTrue(future.isDone());, +    assertFalse(future.isCancelled());, +    assertEquals(42, (int) future.get());, +  }, +, +  public void testSetException() throws Exception {, +    SettableFuture<Object> future = SettableFuture.create();, +    Exception e = new Exception("foobarbaz");, +    assertTrue(future.setException(e));, +    // Later attempts to set the future should return false., +    assertFalse(future.set(23));, +    assertFalse(future.setException(new Exception("quux")));, +    assertFalse(future.setFuture(SettableFuture.create()));, +    // Check that the future has been set properly., +    assertTrue(future.isDone());, +    assertFalse(future.isCancelled());, +    try {, +      future.get();, +      fail("Expected ExecutionException");, +    } catch (ExecutionException ee) {, +      assertSame(e, ee.getCause());, +    }, +  }, +, +  public void testSetFuture() throws Exception {, +    SettableFuture<String> future = SettableFuture.create();, +    SettableFuture<String> nested = SettableFuture.create();, +    assertTrue(future.setFuture(nested));, +    // Later attempts to set the future should return false., +    assertFalse(future.set("x"));, +    assertFalse(future.setException(new Exception("bar")));, +    assertFalse(future.setFuture(SettableFuture.<String>create()));, +    // Check that the future has been set properly., +    assertFalse(future.isDone());, +    assertFalse(future.isCancelled());, +    try {, +      future.get(0, TimeUnit.MILLISECONDS);, +      fail("Expected TimeoutException");, +    } catch (TimeoutException expected) { /* expected */ }, +    nested.set("foo");, +    assertTrue(future.isDone());, +    assertFalse(future.isCancelled());, +    assertEquals("foo", future.get());, +  }, +, +  private static class Foo {}, +  private static class FooChild extends Foo {}, +, +  public void testSetFuture_genericsHierarchy() throws Exception {, +    SettableFuture<Foo> future = SettableFuture.create();, +    SettableFuture<FooChild> nested = SettableFuture.create();, +    assertTrue(future.setFuture(nested));, +    // Later attempts to set the future should return false., +    assertFalse(future.set(new Foo()));, +    assertFalse(future.setException(new Exception("bar")));, +    assertFalse(future.setFuture(SettableFuture.<Foo>create()));, +    // Check that the future has been set properly., +    assertFalse(future.isDone());, +    assertFalse(future.isCancelled());, +    try {, +      future.get(0, TimeUnit.MILLISECONDS);, +      fail("Expected TimeoutException");, +    } catch (TimeoutException expected) { /* expected */ }, +    FooChild value = new FooChild();, +    nested.set(value);, +    assertTrue(future.isDone());, +    assertFalse(future.isCancelled());, +    assertSame(value, future.get());, +  }, +, +  public void testCancel_innerCancelsAsync() throws Exception {, +    SettableFuture<Object> async = SettableFuture.create();, +    SettableFuture<Object> inner = SettableFuture.create();, +    async.setFuture(inner);, +    inner.cancel(true);, +    assertTrue(async.isCancelled());, +    try {, +      async.get();, +      fail("Expected CancellationException");]