[+++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, + * <p>This class maintains a map of nodes to {@link GraphConnections}., +  protected final MapIteratorCache<N, GraphConnections<N>> nodeConnections;, +        builder.nodeOrder.<N, GraphConnections<N>>createMap(, +      Map<N, GraphConnections<N>> nodeConnections) {, +        ? new MapRetrievalCache<N, GraphConnections<N>>(nodeConnections), +        : new MapIteratorCache<N, GraphConnections<N>>(nodeConnections);, +  protected final GraphConnections<N> checkedConnections(Object node) {, +    GraphConnections<N> connections = nodeConnections.get(node);, +++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, + * <p>This class maintains a map of nodes to {@link GraphConnections}., +  protected final MapIteratorCache<N, GraphConnections<N>> nodeConnections;, +        builder.nodeOrder.<N, GraphConnections<N>>createMap(, +      Map<N, GraphConnections<N>> nodeConnections) {, +        ? new MapRetrievalCache<N, GraphConnections<N>>(nodeConnections), +        : new MapIteratorCache<N, GraphConnections<N>>(nodeConnections);, +  protected final GraphConnections<N> checkedConnections(Object node) {, +    GraphConnections<N> connections = nodeConnections.get(node);, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, + * <p>This class maintains a map of nodes to {@link NetworkConnections}. This class also maintains, +  protected final MapIteratorCache<N, NetworkConnections<N, E>> nodeConnections;, +        builder.nodeOrder.<N, NetworkConnections<N, E>>createMap(, +      Map<N, NetworkConnections<N, E>> nodeConnections,, +        ? new MapRetrievalCache<N, NetworkConnections<N, E>>(nodeConnections), +        : new MapIteratorCache<N, NetworkConnections<N, E>>(nodeConnections);, +    NetworkConnections<N, E> connectionsA = checkedConnections(nodeA);, +  protected final NetworkConnections<N, E> checkedConnections(Object node) {, +    NetworkConnections<N, E> connections = nodeConnections.get(node);, +++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, + * <p>This class maintains a map of nodes to {@link GraphConnections}., +  protected final MapIteratorCache<N, GraphConnections<N>> nodeConnections;, +        builder.nodeOrder.<N, GraphConnections<N>>createMap(, +      Map<N, GraphConnections<N>> nodeConnections) {, +        ? new MapRetrievalCache<N, GraphConnections<N>>(nodeConnections), +        : new MapIteratorCache<N, GraphConnections<N>>(nodeConnections);, +  protected final GraphConnections<N> checkedConnections(Object node) {, +    GraphConnections<N> connections = nodeConnections.get(node);, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, + * <p>This class maintains a map of nodes to {@link NetworkConnections}. This class also maintains, +  protected final MapIteratorCache<N, NetworkConnections<N, E>> nodeConnections;, +        builder.nodeOrder.<N, NetworkConnections<N, E>>createMap(, +      Map<N, NetworkConnections<N, E>> nodeConnections,, +        ? new MapRetrievalCache<N, NetworkConnections<N, E>>(nodeConnections), +        : new MapIteratorCache<N, NetworkConnections<N, E>>(nodeConnections);, +    NetworkConnections<N, E> connectionsA = checkedConnections(nodeA);, +  protected final NetworkConnections<N, E> checkedConnections(Object node) {, +    NetworkConnections<N, E> connections = nodeConnections.get(node);, +++ b/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.base.Preconditions.checkState;, +, +import com.google.common.collect.Iterators;, +import com.google.common.collect.Sets;, +import com.google.common.collect.UnmodifiableIterator;, +import com.google.common.math.IntMath;, +import java.util.AbstractSet;, +import java.util.Collections;, +import java.util.Map;, +import java.util.Set;, +, +/**, + * A base implementation of {@link NetworkConnections} for directed networks., + *, + * @author James Sexton, + * @param <N> Node parameter type, + * @param <E> Edge parameter type, + */, +abstract class AbstractDirectedNetworkConnections<N, E> implements NetworkConnections<N, E> {, +  /**, +   * Keys are edges incoming to the origin node, values are the source node., +   */, +  protected final Map<E, N> inEdgeMap;, +, +  /**, +   * Keys are edges outgoing from the origin node, values are the target node., +   */, +  protected final Map<E, N> outEdgeMap;, +, +  private int selfLoopCount;, +, +  protected AbstractDirectedNetworkConnections(Map<E, N> inEdgeMap, Map<E, N> outEdgeMap,, +      int selfLoopCount) {]