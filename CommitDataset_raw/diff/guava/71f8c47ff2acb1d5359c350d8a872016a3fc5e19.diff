[+++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java, +++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java, +++ b/android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java, + * <p>The execution of tasks is done by one thread as long as there are tasks left in the queue., + * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks, + * continues. {@code RuntimeException}s thrown by tasks are simply logged and the executor keeps, + * trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until, + * it is restarted by a call to {@link #execute}., +final class SequentialExecutor implements Executor {, +   * Adds a task to the queue and makes sure a worker thread is running., +      if (isWorkerRunning) {, +   * Worker that runs tasks from {@link #queue} until it is empty., +++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java, +++ b/android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java, + * <p>The execution of tasks is done by one thread as long as there are tasks left in the queue., + * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks, + * continues. {@code RuntimeException}s thrown by tasks are simply logged and the executor keeps, + * trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until, + * it is restarted by a call to {@link #execute}., +final class SequentialExecutor implements Executor {, +   * Adds a task to the queue and makes sure a worker thread is running., +      if (isWorkerRunning) {, +   * Worker that runs tasks from {@link #queue} until it is empty., +++ b/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java, +++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java, +++ b/android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java, + * <p>The execution of tasks is done by one thread as long as there are tasks left in the queue., + * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks, + * continues. {@code RuntimeException}s thrown by tasks are simply logged and the executor keeps, + * trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until, + * it is restarted by a call to {@link #execute}., +final class SequentialExecutor implements Executor {, +   * Adds a task to the queue and makes sure a worker thread is running., +      if (isWorkerRunning) {, +   * Worker that runs tasks from {@link #queue} until it is empty., +++ b/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java, +++ b/guava/src/com/google/common/util/concurrent/SequentialExecutor.java, + * <p>The execution of tasks is done by one thread as long as there are tasks left in the queue., + * When a task is {@linkplain Thread#interrupt interrupted}, execution of subsequent tasks, + * continues. {@code RuntimeException}s thrown by tasks are simply logged and the executor keeps, + * trucking. If an {@code Error} is thrown, the error will propagate and execution will stop until, + * it is restarted by a call to {@link #execute}., +final class SequentialExecutor implements Executor {, +   * Adds a task to the queue and makes sure a worker thread is running., +      if (isWorkerRunning) {, +   * Worker that runs tasks from {@link #queue} until it is empty.]