[+++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CanIgnoreReturnValue, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CanIgnoreReturnValue, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict., +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CanIgnoreReturnValue, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +    @CanIgnoreReturnValue, +, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +    @Override, +    public boolean set(T t) {, +, +    @CanIgnoreReturnValue, +    @Override, +    public boolean setException(Throwable t) {, +    @CanIgnoreReturnValue, +    @Override, +    public boolean set(T t) {, +, +    @CanIgnoreReturnValue, +    @Override, +    public boolean setException(Throwable t) {, +    @CanIgnoreReturnValue, +    public V get(long timeout, TimeUnit unit), +        throws InterruptedException, TimeoutException, ExecutionException {, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CanIgnoreReturnValue, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +    @CanIgnoreReturnValue, +, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +    @Override, +    public boolean set(T t) {, +, +    @CanIgnoreReturnValue, +    @Override, +    public boolean setException(Throwable t) {, +    @CanIgnoreReturnValue, +    @Override, +    public boolean set(T t) {, +, +    @CanIgnoreReturnValue, +    @Override, +    public boolean setException(Throwable t) {, +    @CanIgnoreReturnValue, +    public V get(long timeout, TimeUnit unit), +        throws InterruptedException, TimeoutException, ExecutionException {, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureCancellationCauseTest.java, +    // Load the "normal" copy of SettableFuture and related classes., +    SettableFuture<?> unused = SettableFuture.create();, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +@CanIgnoreReturnValue, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +@CanIgnoreReturnValue // TODO(cpovirk): Consider being more strict., +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +    @CanIgnoreReturnValue, +, +    @CanIgnoreReturnValue, +    @CanIgnoreReturnValue, +    @Override, +    public boolean set(T t) {, +, +    @CanIgnoreReturnValue, +    @Override]