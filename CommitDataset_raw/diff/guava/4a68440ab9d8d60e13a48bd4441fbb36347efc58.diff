[+++ b/guava-tests/test/com/google/common/collect/ListsTest.java, +      List<Object> unused = Lists.newArrayListWithCapacity(-1);, +      List<Object> unused = Lists.newArrayListWithExpectedSize(-1);, +      List<List<String>> unused = Lists.cartesianProduct(list, list, list, list, list);, +      List<List<Integer>> unused = Lists.partition(source, 0);, +++ b/guava-tests/test/com/google/common/collect/ListsTest.java, +      List<Object> unused = Lists.newArrayListWithCapacity(-1);, +      List<Object> unused = Lists.newArrayListWithExpectedSize(-1);, +      List<List<String>> unused = Lists.cartesianProduct(list, list, list, list, list);, +      List<List<Integer>> unused = Lists.partition(source, 0);, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +      int unused = Maps.capacity(-1);, +      Map<SomeEnum, Long> unused = Maps.<SomeEnum, Long>newEnumMap((Class<MapsTest.SomeEnum>) null);, +      Map<SomeEnum, Integer> unused = Maps.newEnumMap(original);, +      Map<String, String> unused = Maps.toMap(strings, Functions.constant("foo"));, +      Map<String, Object> unused = Maps.toMap(strings, Functions.constant(null));, +      Map<Integer, String> unused =, +      Map<Integer, String> unused = Maps.uniqueIndex(listWithNull, Functions.constant(1));, +      Map<Object, String> unused = Maps.uniqueIndex(oneStringList, Functions.constant(null));, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<Integer, Integer> unused = Maps.subMap(map, Range.closed(4, 8));, +++ b/guava-tests/test/com/google/common/collect/ListsTest.java, +      List<Object> unused = Lists.newArrayListWithCapacity(-1);, +      List<Object> unused = Lists.newArrayListWithExpectedSize(-1);, +      List<List<String>> unused = Lists.cartesianProduct(list, list, list, list, list);, +      List<List<Integer>> unused = Lists.partition(source, 0);, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +      int unused = Maps.capacity(-1);, +      Map<SomeEnum, Long> unused = Maps.<SomeEnum, Long>newEnumMap((Class<MapsTest.SomeEnum>) null);, +      Map<SomeEnum, Integer> unused = Maps.newEnumMap(original);, +      Map<String, String> unused = Maps.toMap(strings, Functions.constant("foo"));, +      Map<String, Object> unused = Maps.toMap(strings, Functions.constant(null));, +      Map<Integer, String> unused =, +      Map<Integer, String> unused = Maps.uniqueIndex(listWithNull, Functions.constant(1));, +      Map<Object, String> unused = Maps.uniqueIndex(oneStringList, Functions.constant(null));, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<Integer, Integer> unused = Maps.subMap(map, Range.closed(4, 8));, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +      Multimap<Object, Integer> unused = Multimaps.index(values, Functions.identity());, +      Multimap<Object, Integer> unused = Multimaps.index(values, Functions.constant(null));, +++ b/guava-tests/test/com/google/common/collect/ListsTest.java, +      List<Object> unused = Lists.newArrayListWithCapacity(-1);, +      List<Object> unused = Lists.newArrayListWithExpectedSize(-1);, +      List<List<String>> unused = Lists.cartesianProduct(list, list, list, list, list);, +      List<List<Integer>> unused = Lists.partition(source, 0);, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +      int unused = Maps.capacity(-1);, +      Map<SomeEnum, Long> unused = Maps.<SomeEnum, Long>newEnumMap((Class<MapsTest.SomeEnum>) null);, +      Map<SomeEnum, Integer> unused = Maps.newEnumMap(original);, +      Map<String, String> unused = Maps.toMap(strings, Functions.constant("foo"));, +      Map<String, Object> unused = Maps.toMap(strings, Functions.constant(null));, +      Map<Integer, String> unused =, +      Map<Integer, String> unused = Maps.uniqueIndex(listWithNull, Functions.constant(1));, +      Map<Object, String> unused = Maps.uniqueIndex(oneStringList, Functions.constant(null));, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<Integer, Integer> unused = Maps.subMap(map, Range.closed(4, 8));, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +      Multimap<Object, Integer> unused = Multimaps.index(values, Functions.identity());, +      Multimap<Object, Integer> unused = Multimaps.index(values, Functions.constant(null));, +++ b/guava-tests/test/com/google/common/collect/QueuesTest.java, +import java.util.Queue;, +      Queue<Object> unused = Queues.newLinkedBlockingDeque(0);, +      Queue<Object> unused = Queues.newLinkedBlockingQueue(0);, +++ b/guava-tests/test/com/google/common/collect/ListsTest.java, +      List<Object> unused = Lists.newArrayListWithCapacity(-1);, +      List<Object> unused = Lists.newArrayListWithExpectedSize(-1);, +      List<List<String>> unused = Lists.cartesianProduct(list, list, list, list, list);, +      List<List<Integer>> unused = Lists.partition(source, 0);, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +      int unused = Maps.capacity(-1);, +      Map<SomeEnum, Long> unused = Maps.<SomeEnum, Long>newEnumMap((Class<MapsTest.SomeEnum>) null);, +      Map<SomeEnum, Integer> unused = Maps.newEnumMap(original);, +      Map<String, String> unused = Maps.toMap(strings, Functions.constant("foo"));, +      Map<String, Object> unused = Maps.toMap(strings, Functions.constant(null));, +      Map<Integer, String> unused =, +      Map<Integer, String> unused = Maps.uniqueIndex(listWithNull, Functions.constant(1));, +      Map<Object, String> unused = Maps.uniqueIndex(oneStringList, Functions.constant(null));, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<String, String> unused = Maps.fromProperties(properties);, +      Map<Integer, Integer> unused = Maps.subMap(map, Range.closed(4, 8));, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +      Multimap<Object, Integer> unused = Multimaps.index(values, Functions.identity());, +      Multimap<Object, Integer> unused = Multimaps.index(values, Functions.constant(null));, +++ b/guava-tests/test/com/google/common/collect/QueuesTest.java, +import java.util.Queue;, +      Queue<Object> unused = Queues.newLinkedBlockingDeque(0);, +      Queue<Object> unused = Queues.newLinkedBlockingQueue(0);, +++ b/guava-tests/test/com/google/common/collect/SetsTest.java, +      Set<SomeEnum> unused = Sets.complementOf(set);, +      Set<Integer> unused = Sets.newSetFromMap(map);, +      Set<List<Integer>> unused = Sets.cartesianProduct(set, set, set, set, set);, +    } catch (IllegalArgumentException expected) {, +    }, +      Set<Set<Character>> unused =, +          powerSet(, +              newHashSet(, +                  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',]