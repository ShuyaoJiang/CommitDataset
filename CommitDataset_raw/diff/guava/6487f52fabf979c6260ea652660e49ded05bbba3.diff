[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * @deprecated This class existed only to support the generic paramterization necessary for the, + *     caching functionality in {@code MapMaker}. That functionality has been moved to {@link, + *     com.google.common.cache.CacheBuilder}, which is a properly generified class and thus needs no, + *     "Generic" equivalent; simple use {@code CacheBuilder} naturally. For general migration, + *     instructions, see the <a, + *     href="http://code.google.com/p/guava-libraries/wiki/MapMakerMigration">MapMaker Migration, + *     Guide</a>. This class is scheduled for removal in Guava 16.0., +@Deprecated, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * @deprecated This class existed only to support the generic paramterization necessary for the, + *     caching functionality in {@code MapMaker}. That functionality has been moved to {@link, + *     com.google.common.cache.CacheBuilder}, which is a properly generified class and thus needs no, + *     "Generic" equivalent; simple use {@code CacheBuilder} naturally. For general migration, + *     instructions, see the <a, + *     href="http://code.google.com/p/guava-libraries/wiki/MapMakerMigration">MapMaker Migration, + *     Guide</a>. This class is scheduled for removal in Guava 16.0., +@Deprecated, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +public final class MapMaker extends GenericMapMaker<Object, Object> {, +        long expirationMillis, int maximumSize, int initialCapacity) {, +      this(expirationMillis, null, maximumSize, initialCapacity);, +        int maximumSize, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, (maximumSize != -1));, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, maximumSize, initialCapacity), +        : new ConcurrentHashMap<K, V>(initialCapacity);, +        expirationMillis, computer, maximumSize, initialCapacity);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * @deprecated This class existed only to support the generic paramterization necessary for the, + *     caching functionality in {@code MapMaker}. That functionality has been moved to {@link, + *     com.google.common.cache.CacheBuilder}, which is a properly generified class and thus needs no, + *     "Generic" equivalent; simple use {@code CacheBuilder} naturally. For general migration, + *     instructions, see the <a, + *     href="http://code.google.com/p/guava-libraries/wiki/MapMakerMigration">MapMaker Migration, + *     Guide</a>. This class is scheduled for removal in Guava 16.0., +@Deprecated, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +public final class MapMaker extends GenericMapMaker<Object, Object> {, +        long expirationMillis, int maximumSize, int initialCapacity) {, +      this(expirationMillis, null, maximumSize, initialCapacity);, +        int maximumSize, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, (maximumSize != -1));, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, maximumSize, initialCapacity), +        : new ConcurrentHashMap<K, V>(initialCapacity);, +        expirationMillis, computer, maximumSize, initialCapacity);, +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +    MapMaker mapMaker = new MapMaker(), +        .maximumSize(1);, +    /*, +     * Cleverly ignore the return type now that ConcurrentHashMultiset accepts only MapMaker and not, +     * the deprecated GenericMapMaker. We know that a RemovalListener<String, Number> is a type that, +     * will work with ConcurrentHashMultiset., +     */, +    mapMaker.removalListener(removalListener);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * @deprecated This class existed only to support the generic paramterization necessary for the, + *     caching functionality in {@code MapMaker}. That functionality has been moved to {@link, + *     com.google.common.cache.CacheBuilder}, which is a properly generified class and thus needs no, + *     "Generic" equivalent; simple use {@code CacheBuilder} naturally. For general migration, + *     instructions, see the <a, + *     href="http://code.google.com/p/guava-libraries/wiki/MapMakerMigration">MapMaker Migration, + *     Guide</a>. This class is scheduled for removal in Guava 16.0., +@Deprecated, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +public final class MapMaker extends GenericMapMaker<Object, Object> {, +        long expirationMillis, int maximumSize, int initialCapacity) {, +      this(expirationMillis, null, maximumSize, initialCapacity);, +        int maximumSize, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, (maximumSize != -1));, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, maximumSize, initialCapacity), +        : new ConcurrentHashMap<K, V>(initialCapacity);, +        expirationMillis, computer, maximumSize, initialCapacity);, +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +    MapMaker mapMaker = new MapMaker(), +        .maximumSize(1);, +    /*, +     * Cleverly ignore the return type now that ConcurrentHashMultiset accepts only MapMaker and not, +     * the deprecated GenericMapMaker. We know that a RemovalListener<String, Number> is a type that, +     * will work with ConcurrentHashMultiset., +     */, +    mapMaker.removalListener(removalListener);, +++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, +   * @since 15.0 (source compatible (accepting the since removed {@code GenericMapMaker} class), +   *     since 7.0), +  public static <E> ConcurrentHashMultiset<E> create(MapMaker mapMaker) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/GenericMapMaker.java, + * @deprecated This class existed only to support the generic paramterization necessary for the, + *     caching functionality in {@code MapMaker}. That functionality has been moved to {@link, + *     com.google.common.cache.CacheBuilder}, which is a properly generified class and thus needs no, + *     "Generic" equivalent; simple use {@code CacheBuilder} naturally. For general migration, + *     instructions, see the <a, + *     href="http://code.google.com/p/guava-libraries/wiki/MapMakerMigration">MapMaker Migration, + *     Guide</a>. This class is scheduled for removal in Guava 16.0., +@Deprecated, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +public final class MapMaker extends GenericMapMaker<Object, Object> {, +        long expirationMillis, int maximumSize, int initialCapacity) {, +      this(expirationMillis, null, maximumSize, initialCapacity);, +        int maximumSize, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, (maximumSize != -1));]