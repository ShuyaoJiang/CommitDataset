[+++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  /**, +   * The same exception happening on multiple futures should not be logged., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_same_exception() throws Exception {, +    try {, +      MyException sameInstance = new MyException();, +      Futures.allAsList(immediateFailedFuture(sameInstance),, +          immediateFailedFuture(sameInstance)).get();, +      fail();, +    } catch (ExecutionException e) {, +      assertTrue(e.getCause() instanceof MyException);, +      assertEquals("Nothing should be logged", 0,, +          combinedFutureLogHandler.getStoredLogRecords().size());, +    }, +  }, +, +  /**, +   * Different exceptions happening on multiple futures with the same cause, +   * should not be logged., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_same_cause() throws Exception {, +    try {, +      MyException exception1 = new MyException();, +      MyException exception2 = new MyException();, +      MyException exception3 = new MyException();, +, +      MyException sameInstance = new MyException();, +      exception1.initCause(sameInstance);, +      exception2.initCause(sameInstance);, +      exception3.initCause(exception2);, +      Futures.allAsList(immediateFailedFuture(exception1),, +          immediateFailedFuture(exception3)).get();, +      fail();, +    } catch (ExecutionException e) {, +      assertTrue(e.getCause() instanceof MyException);, +      assertEquals("Nothing should be logged", 0,, +          combinedFutureLogHandler.getStoredLogRecords().size());, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  /**, +   * The same exception happening on multiple futures should not be logged., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_same_exception() throws Exception {, +    try {, +      MyException sameInstance = new MyException();, +      Futures.allAsList(immediateFailedFuture(sameInstance),, +          immediateFailedFuture(sameInstance)).get();, +      fail();, +    } catch (ExecutionException e) {, +      assertTrue(e.getCause() instanceof MyException);, +      assertEquals("Nothing should be logged", 0,, +          combinedFutureLogHandler.getStoredLogRecords().size());, +    }, +  }, +, +  /**, +   * Different exceptions happening on multiple futures with the same cause, +   * should not be logged., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_same_cause() throws Exception {, +    try {, +      MyException exception1 = new MyException();, +      MyException exception2 = new MyException();, +      MyException exception3 = new MyException();, +, +      MyException sameInstance = new MyException();, +      exception1.initCause(sameInstance);, +      exception2.initCause(sameInstance);, +      exception3.initCause(exception2);, +      Futures.allAsList(immediateFailedFuture(exception1),, +          immediateFailedFuture(exception3)).get();, +      fail();, +    } catch (ExecutionException e) {, +      assertTrue(e.getCause() instanceof MyException);, +      assertEquals("Nothing should be logged", 0,, +          combinedFutureLogHandler.getStoredLogRecords().size());, +    }, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;, +import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;, +    @SuppressWarnings({"unchecked", "rawtypes"}), +    @SuppressWarnings({"rawtypes", "unchecked"}), +    private static final AtomicReferenceFieldUpdater<CombinedFuture<?, ?>, Set<Throwable>>, +        SEEN_EXCEPTIONS_UDPATER = newUpdater(, +            (Class) CombinedFuture.class, (Class) Set.class, "seenExceptions");, +, +    volatile Set<Throwable> seenExceptions;, +      this.seenExceptions = null; // Initialized once the first time we see an exception, +        // seenExceptions is only set once; but we don't allocate it until we get a failure, +        Set<Throwable> seenExceptionsLocal = seenExceptions;, +        if (seenExceptionsLocal == null) {]