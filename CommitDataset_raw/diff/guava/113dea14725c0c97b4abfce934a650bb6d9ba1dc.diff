[+++ b/guava/src/com/google/common/cache/AbstractCache.java, + * implementation for the {@link #put} and {@link #getIfPresent} methods. {@link #getAllPresent} is, + * implemented in terms of {@link #getIfPresent}; {@link #putAll} is implemented in terms of, + * {@link #put}, {@link #invalidateAll(Iterable)} is implemented in terms of {@link #invalidate}., + * The method {@link #cleanUp} is a no-op. All other methods throw an, +  /**, +   * @since 12.0, +   */, +  @Override, +  public void putAll(Map<? extends K, ? extends V> m) {, +    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {, +      put(entry.getKey(), entry.getValue());, +    }, +  }, +, +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * implementation for the {@link #put} and {@link #getIfPresent} methods. {@link #getAllPresent} is, + * implemented in terms of {@link #getIfPresent}; {@link #putAll} is implemented in terms of, + * {@link #put}, {@link #invalidateAll(Iterable)} is implemented in terms of {@link #invalidate}., + * The method {@link #cleanUp} is a no-op. All other methods throw an, +  /**, +   * @since 12.0, +   */, +  @Override, +  public void putAll(Map<? extends K, ? extends V> m) {, +    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {, +      put(entry.getKey(), entry.getValue());, +    }, +  }, +, +++ b/guava/src/com/google/common/cache/AbstractLoadingCache.java, + * {@link #getAllPresent} is implemented in terms of {@code getIfPresent}; {@link #putAll} is, + * implemented in terms of {@link #put}, {@link #invalidateAll(Iterable)} is implemented in terms of, + * {@link #invalidate}. The method {@link #cleanUp} is a no-op. All other methods throw an, + * {@link UnsupportedOperationException}., +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * implementation for the {@link #put} and {@link #getIfPresent} methods. {@link #getAllPresent} is, + * implemented in terms of {@link #getIfPresent}; {@link #putAll} is implemented in terms of, + * {@link #put}, {@link #invalidateAll(Iterable)} is implemented in terms of {@link #invalidate}., + * The method {@link #cleanUp} is a no-op. All other methods throw an, +  /**, +   * @since 12.0, +   */, +  @Override, +  public void putAll(Map<? extends K, ? extends V> m) {, +    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {, +      put(entry.getKey(), entry.getValue());, +    }, +  }, +, +++ b/guava/src/com/google/common/cache/AbstractLoadingCache.java, + * {@link #getAllPresent} is implemented in terms of {@code getIfPresent}; {@link #putAll} is, + * implemented in terms of {@link #put}, {@link #invalidateAll(Iterable)} is implemented in terms of, + * {@link #invalidate}. The method {@link #cleanUp} is a no-op. All other methods throw an, + * {@link UnsupportedOperationException}., +++ b/guava/src/com/google/common/cache/Cache.java, +import java.util.Map;, +   * Copies all of the mappings from the specified map to the cache. The effect of this call is, +   * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key, +   * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined, +   * if the specified map is modified while the operation is in progress., +   *, +   * @since 12.0, +   */, +  void putAll(Map<? extends K,? extends V> m);, +, +  /**, +++ b/guava/src/com/google/common/cache/AbstractCache.java, + * implementation for the {@link #put} and {@link #getIfPresent} methods. {@link #getAllPresent} is, + * implemented in terms of {@link #getIfPresent}; {@link #putAll} is implemented in terms of, + * {@link #put}, {@link #invalidateAll(Iterable)} is implemented in terms of {@link #invalidate}., + * The method {@link #cleanUp} is a no-op. All other methods throw an, +  /**, +   * @since 12.0, +   */, +  @Override, +  public void putAll(Map<? extends K, ? extends V> m) {, +    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {, +      put(entry.getKey(), entry.getValue());, +    }, +  }, +, +++ b/guava/src/com/google/common/cache/AbstractLoadingCache.java, + * {@link #getAllPresent} is implemented in terms of {@code getIfPresent}; {@link #putAll} is, + * implemented in terms of {@link #put}, {@link #invalidateAll(Iterable)} is implemented in terms of, + * {@link #invalidate}. The method {@link #cleanUp} is a no-op. All other methods throw an, + * {@link UnsupportedOperationException}., +++ b/guava/src/com/google/common/cache/Cache.java, +import java.util.Map;, +   * Copies all of the mappings from the specified map to the cache. The effect of this call is, +   * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key, +   * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined, +   * if the specified map is modified while the operation is in progress., +   *, +   * @since 12.0, +   */, +  void putAll(Map<? extends K,? extends V> m);, +, +  /**, +++ b/guava/src/com/google/common/cache/ForwardingCache.java]