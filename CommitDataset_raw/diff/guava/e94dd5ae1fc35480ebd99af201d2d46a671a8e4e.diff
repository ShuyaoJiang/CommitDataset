[+++ b/android/guava/src/com/google/common/collect/Collections2.java, +      boolean changed = false;, +      Iterator<E> itr = unfiltered.iterator();, +      while (itr.hasNext()) {, +        E e = itr.next();, +        if (predicate.apply(e) && collection.contains(e)) {, +          itr.remove();, +          changed = true;, +        }, +      }, +      return changed;, +      boolean changed = false;, +      Iterator<E> itr = unfiltered.iterator();, +      while (itr.hasNext()) {, +        E e = itr.next();, +        if (predicate.apply(e) && !collection.contains(e)) {, +          itr.remove();, +          changed = true;, +        }, +      }, +      return changed;, +      int size = 0;, +      for (E e : unfiltered) {, +        if (predicate.apply(e)) {, +          size++;, +        }, +      }, +      return size;, +    for (Object o : c) {, +      if (!self.contains(o)) {, +        return false;, +      }, +    }, +    return true;, +++ b/android/guava/src/com/google/common/collect/Collections2.java, +      boolean changed = false;, +      Iterator<E> itr = unfiltered.iterator();, +      while (itr.hasNext()) {, +        E e = itr.next();, +        if (predicate.apply(e) && collection.contains(e)) {, +          itr.remove();, +          changed = true;, +        }, +      }, +      return changed;, +      boolean changed = false;, +      Iterator<E> itr = unfiltered.iterator();, +      while (itr.hasNext()) {, +        E e = itr.next();, +        if (predicate.apply(e) && !collection.contains(e)) {, +          itr.remove();, +          changed = true;, +        }, +      }, +      return changed;, +      int size = 0;, +      for (E e : unfiltered) {, +        if (predicate.apply(e)) {, +          size++;, +        }, +      }, +      return size;, +    for (Object o : c) {, +      if (!self.contains(o)) {, +        return false;, +      }, +    }, +    return true;, +++ b/guava/src/com/google/common/collect/Collections2.java, +      int size = 0;, +      for (E e : unfiltered) {, +        if (predicate.apply(e)) {, +          size++;, +        }, +      }, +      return size;, +    for (Object o : c) {, +      if (!self.contains(o)) {, +        return false;, +      }, +    }, +    return true;]