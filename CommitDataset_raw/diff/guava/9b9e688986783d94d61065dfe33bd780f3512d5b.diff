[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/EnumMultiset.java, +  , +  /**, +   * Returns a new {@code EnumMultiset} instance containing the given elements.  Unlike, +   * {@link EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty, +   * iterable., +   * , +   * @since 14.0, +   */, +  public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type) {, +    EnumMultiset<E> result = create(type);, +    Iterables.addAll(result, elements);, +    return result;, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/EnumMultiset.java, +  , +  /**, +   * Returns a new {@code EnumMultiset} instance containing the given elements.  Unlike, +   * {@link EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty, +   * iterable., +   * , +   * @since 14.0, +   */, +  public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type) {, +    EnumMultiset<E> result = create(type);, +    Iterables.addAll(result, elements);, +    return result;, +  }, +++ b/guava-tests/test/com/google/common/collect/EnumMultisetTest.java, +  , +  public void testCreateEmptyWithClass() {, +    Multiset<Color> ms = EnumMultiset.create(ImmutableList.<Color>of(), Color.class);, +    ms.add(Color.RED);, +  }, +  , +  public void testCreateEmptyWithoutClassFails() {, +    try {, +      Multiset<Color> ms = EnumMultiset.create(ImmutableList.<Color> of());, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/EnumMultiset.java, +  , +  /**, +   * Returns a new {@code EnumMultiset} instance containing the given elements.  Unlike, +   * {@link EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty, +   * iterable., +   * , +   * @since 14.0, +   */, +  public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type) {, +    EnumMultiset<E> result = create(type);, +    Iterables.addAll(result, elements);, +    return result;, +  }, +++ b/guava-tests/test/com/google/common/collect/EnumMultisetTest.java, +  , +  public void testCreateEmptyWithClass() {, +    Multiset<Color> ms = EnumMultiset.create(ImmutableList.<Color>of(), Color.class);, +    ms.add(Color.RED);, +  }, +  , +  public void testCreateEmptyWithoutClassFails() {, +    try {, +      Multiset<Color> ms = EnumMultiset.create(ImmutableList.<Color> of());, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/guava/src/com/google/common/collect/EnumMultiset.java, +  , +  /**, +   * Returns a new {@code EnumMultiset} instance containing the given elements.  Unlike, +   * {@link EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty, +   * iterable., +   * , +   * @since 14.0, +   */, +  public static <E extends Enum<E>> EnumMultiset<E> create(Iterable<E> elements, Class<E> type) {, +    EnumMultiset<E> result = create(type);, +    Iterables.addAll(result, elements);, +    return result;, +  }]