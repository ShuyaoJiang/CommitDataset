[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Charsets.java, +   * <p><b>Note for Java 7 and later:</b> this constant should be treated as deprecated; use, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Charsets.java, +   * <p><b>Note for Java 7 and later:</b> this constant should be treated as deprecated; use, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +   * Creates a <i>mutable</i>, empty {@code ArrayList} instance (for Java 6 and, +   * earlier)., +   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and, +   * should be treated as deprecated. Instead, use the {@code ArrayList}, +   * {@linkplain ArrayList#ArrayList() constructor} directly, taking advantage, +   * of the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * <p><b>Note:</b> essentially the only reason to use this method is when you, +   * will need to add or remove elements later. Otherwise, for non-null elements, +   * use {@link ImmutableList#of()} (for varargs) or {@link, +   * ImmutableList#copyOf(Object[])} (for an array) instead. If any elements, +   * might be null, or you need support for {@link List#set(int, Object)}, use, +   * {@link Arrays#asList}., +   * <p>Note that even when you do need the ability to add or remove, this method, +   * provides only a tiny bit of syntactic sugar for {@code newArrayList(}{@link, +   * Arrays#asList asList}{@code (...))}, or for creating an empty list then, +   * calling {@link Collections#addAll}. This method is not actually very useful, +   * and will likely be deprecated in the future., +   * elements; a very thin shortcut for creating an empty list then calling, +   * {@link Iterables#addAll}., +   * non-null, use {@link ImmutableList#copyOf(Iterable)} instead. (Or, change, +   * {@code elements} to be a {@link FluentIterable} and call, +   * {@code elements.toList()}.), +   * <p><b>Note for Java 7 and later:</b> if {@code elements} is a {@link, +   * Collection}, you don't need this method. Use the {@code ArrayList}, +   * {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking, +   * advantage of the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * elements; a very thin shortcut for creating an empty list and then calling, +   * {@link Iterators#addAll}., +   * Creates an {@code ArrayList} instance backed by an array with the specified, +   * initial size; simply delegates to {@link ArrayList#ArrayList(int)}., +   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and, +   * should be treated as deprecated. Instead, use {@code new }{@link, +   * ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking, +   * advantage of the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * (Unlike here, there is no risk of overload ambiguity, since the {@code, +   * ArrayList} constructors very wisely did not accept varargs.), +   * Creates an {@code ArrayList} instance to hold {@code estimatedSize}, +   * elements, <i>plus</i> an unspecified amount of padding; you almost, +   * certainly mean to call {@link #newArrayListWithCapacity} (see that method, +   * for further advice on usage)., +   * <p><b>Note:</b> This method will soon be deprecated. Even in the rare case, +   * that you do want some amount of padding, it's best if you choose your, +   * desired amount explicitly., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Charsets.java, +   * <p><b>Note for Java 7 and later:</b> this constant should be treated as deprecated; use, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +   * Creates a <i>mutable</i>, empty {@code ArrayList} instance (for Java 6 and, +   * earlier)., +   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and, +   * should be treated as deprecated. Instead, use the {@code ArrayList}, +   * {@linkplain ArrayList#ArrayList() constructor} directly, taking advantage, +   * of the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * <p><b>Note:</b> essentially the only reason to use this method is when you, +   * will need to add or remove elements later. Otherwise, for non-null elements, +   * use {@link ImmutableList#of()} (for varargs) or {@link, +   * ImmutableList#copyOf(Object[])} (for an array) instead. If any elements, +   * might be null, or you need support for {@link List#set(int, Object)}, use, +   * {@link Arrays#asList}., +   * <p>Note that even when you do need the ability to add or remove, this method, +   * provides only a tiny bit of syntactic sugar for {@code newArrayList(}{@link, +   * Arrays#asList asList}{@code (...))}, or for creating an empty list then, +   * calling {@link Collections#addAll}. This method is not actually very useful, +   * and will likely be deprecated in the future., +   * elements; a very thin shortcut for creating an empty list then calling, +   * {@link Iterables#addAll}., +   * non-null, use {@link ImmutableList#copyOf(Iterable)} instead. (Or, change, +   * {@code elements} to be a {@link FluentIterable} and call, +   * {@code elements.toList()}.), +   * <p><b>Note for Java 7 and later:</b> if {@code elements} is a {@link, +   * Collection}, you don't need this method. Use the {@code ArrayList}, +   * {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking, +   * advantage of the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * elements; a very thin shortcut for creating an empty list and then calling, +   * {@link Iterators#addAll}., +   * Creates an {@code ArrayList} instance backed by an array with the specified, +   * initial size; simply delegates to {@link ArrayList#ArrayList(int)}., +   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and, +   * should be treated as deprecated. Instead, use {@code new }{@link, +   * ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking, +   * advantage of the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>., +   * (Unlike here, there is no risk of overload ambiguity, since the {@code, +   * ArrayList} constructors very wisely did not accept varargs.), +   * Creates an {@code ArrayList} instance to hold {@code estimatedSize}, +   * elements, <i>plus</i> an unspecified amount of padding; you almost, +   * certainly mean to call {@link #newArrayListWithCapacity} (see that method, +   * for further advice on usage)., +   * <p><b>Note:</b> This method will soon be deprecated. Even in the rare case, +   * that you do want some amount of padding, it's best if you choose your, +   * desired amount explicitly., +++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Chars.java, +   * <p><b>Note for Java 7 and later:</b> this method should be treated as, +   * deprecated; use the equivalent {@link Character#compare} method instead., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Charsets.java, +   * <p><b>Note for Java 7 and later:</b> this constant should be treated as deprecated; use, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java]