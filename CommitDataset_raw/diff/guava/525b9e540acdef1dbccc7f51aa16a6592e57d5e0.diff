[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   *, +   * @since 14.0, +  public static <K, V> Map<K, V> asMap(, +   *, +   * @since 14.0, +  public static <K, V> SortedMap<K, V> asMap(, +   * Returns an immutable map for which the given {@code keys} are mapped to, +   * values by the given function in the order they appear in the original, +   * iterable. If {@code keys} contains duplicate elements, the returned map, +   * will contain each distinct key once in the order it first appears in, +   * {@code keys}., +   *, +   * @throws NullPointerException if any element of {@code keys} is, +   *     {@code null}, or if {@code valueFunction} produces {@code null}, +   *     for any key, +   * @since 14.0, +   */, +  @Beta, +  public static <K, V> ImmutableMap<K, V> toMap(Iterable<K> keys,, +      Function<? super K, V> valueFunction) {, +    checkNotNull(valueFunction);, +    // Using LHM instead of a builder so as not to fail on duplicate keys, +    Map<K, V> builder = newLinkedHashMap();, +    for (K key : keys) {, +      builder.put(key, valueFunction.apply(key));, +    }, +    return ImmutableMap.copyOf(builder);, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   *, +   * @since 14.0, +  public static <K, V> Map<K, V> asMap(, +   *, +   * @since 14.0, +  public static <K, V> SortedMap<K, V> asMap(, +   * Returns an immutable map for which the given {@code keys} are mapped to, +   * values by the given function in the order they appear in the original, +   * iterable. If {@code keys} contains duplicate elements, the returned map, +   * will contain each distinct key once in the order it first appears in, +   * {@code keys}., +   *, +   * @throws NullPointerException if any element of {@code keys} is, +   *     {@code null}, or if {@code valueFunction} produces {@code null}, +   *     for any key, +   * @since 14.0, +   */, +  @Beta, +  public static <K, V> ImmutableMap<K, V> toMap(Iterable<K> keys,, +      Function<? super K, V> valueFunction) {, +    checkNotNull(valueFunction);, +    // Using LHM instead of a builder so as not to fail on duplicate keys, +    Map<K, V> builder = newLinkedHashMap();, +    for (K key : keys) {, +      builder.put(key, valueFunction.apply(key));, +    }, +    return ImmutableMap.copyOf(builder);, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +  public void testToMap() {, +    Iterable<String> strings = ImmutableList.of("one", "two", "three");, +    ImmutableMap<String, Integer> map = Maps.toMap(strings, LENGTH_FUNCTION);, +    assertEquals(ImmutableMap.of("one", 3, "two", 3, "three", 5), map);, +    ASSERT.that(map.entrySet()).hasContentsInOrder(, +        mapEntry("one", 3),, +        mapEntry("two", 3),, +        mapEntry("three", 5));, +  }, +, +  public void testToMapWithDuplicateKeys() {, +    Iterable<String> strings = ImmutableList.of("one", "two", "three", "two", "one");, +    ImmutableMap<String, Integer> map = Maps.toMap(strings, LENGTH_FUNCTION);, +    assertEquals(ImmutableMap.of("one", 3, "two", 3, "three", 5), map);, +    ASSERT.that(map.entrySet()).hasContentsInOrder(, +        mapEntry("one", 3),, +        mapEntry("two", 3),, +        mapEntry("three", 5));, +  }, +, +  public void testToMapWithNullKeys() {, +    Iterable<String> strings = Arrays.asList("one", null, "three");, +    try {, +      Maps.toMap(strings, Functions.constant("foo"));, +      fail();, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  public void testToMapWithNullValues() {, +    Iterable<String> strings = ImmutableList.of("one", "two", "three");, +    try {, +      Maps.toMap(strings, Functions.constant(null));, +      fail();, +    } catch (NullPointerException expected) {, +    }, +  }]