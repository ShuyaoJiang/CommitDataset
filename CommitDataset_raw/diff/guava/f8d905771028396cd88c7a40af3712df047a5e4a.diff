[+++ b/android/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testInvalidIntRange() {, +    try {, +      ContiguousSet.closed(2, 1);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      ContiguousSet.closedOpen(2, 1);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testInvalidLongRange() {, +    try {, +      ContiguousSet.closed(2L, 1L);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      ContiguousSet.closedOpen(2L, 1L);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +            ContiguousSet.closed(1, 3),, +            ContiguousSet.closedOpen(1, 4),, +            ContiguousSet.closedOpen(1, 1),, +            ContiguousSet.closedOpen(Integer.MIN_VALUE, Integer.MIN_VALUE),, +        ContiguousSet.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),, +        ContiguousSet.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),, +        ContiguousSet.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),, +    assertEquals(ImmutableSet.of(), ContiguousSet.closedOpen(1, 1));, +    assertEquals(Range.closed(1, 3), ContiguousSet.create(Range.closed(1, 3), integers()).range());, +    assertEquals(Range.closed(1, 3), ContiguousSet.closed(1, 3).range());, +    assertEquals(Range.closed(1, 3), ContiguousSet.closedOpen(1, 4).range());, +    ContiguousSet<Integer> set = ContiguousSet.closed(1, 3);, +    ContiguousSet<Integer> emptySet = ContiguousSet.closedOpen(2, 2);, +++ b/android/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testInvalidIntRange() {, +    try {, +      ContiguousSet.closed(2, 1);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      ContiguousSet.closedOpen(2, 1);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testInvalidLongRange() {, +    try {, +      ContiguousSet.closed(2L, 1L);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +    try {, +      ContiguousSet.closedOpen(2L, 1L);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +            ContiguousSet.closed(1, 3),, +            ContiguousSet.closedOpen(1, 4),, +            ContiguousSet.closedOpen(1, 1),, +            ContiguousSet.closedOpen(Integer.MIN_VALUE, Integer.MIN_VALUE),, +        ContiguousSet.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),, +        ContiguousSet.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),, +        ContiguousSet.closed(Integer.MIN_VALUE, Integer.MAX_VALUE),, +    assertEquals(ImmutableSet.of(), ContiguousSet.closedOpen(1, 1));, +    assertEquals(Range.closed(1, 3), ContiguousSet.create(Range.closed(1, 3), integers()).range());, +    assertEquals(Range.closed(1, 3), ContiguousSet.closed(1, 3).range());, +    assertEquals(Range.closed(1, 3), ContiguousSet.closedOpen(1, 4).range());, +    ContiguousSet<Integer> set = ContiguousSet.closed(1, 3);, +    ContiguousSet<Integer> emptySet = ContiguousSet.closedOpen(2, 2);, +++ b/android/guava/src/com/google/common/collect/ContiguousSet.java, +import com.google.common.annotations.Beta;, + * A sorted set of contiguous values in a given {@link DiscreteDomain}. Example:, + *, + * <pre>{@code, + * ContiguousSet.create(Range.closed(5, 42), DiscreteDomain.integers()), + * }</pre>, + *, + * <p>Note that because bounded ranges over {@code int} and {@code long} values are so common, this, + * particular example can be written as just:, + *, + * <pre>{@code, + * ContiguousSet.closed(5, 42), + * }</pre>, +  /**, +   * Returns a nonempty contiguous set containing all {@code int} values from {@code lower}, +   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code, +   * Range.closed(lower, upper)}.), +   *, +   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}, +   *, +   * @since 23.0, +   */, +  @Beta, +  public static ContiguousSet<Integer> closed(int lower, int upper) {, +    return create(Range.closed(lower, upper), DiscreteDomain.integers());, +  }, +]