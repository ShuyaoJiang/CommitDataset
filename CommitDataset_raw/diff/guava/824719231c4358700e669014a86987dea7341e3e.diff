[+++ b/guava/src/com/google/common/util/concurrent/ServiceManager.java, +import com.google.common.annotations.Beta;, + *         public void healthy() {, + *           // Services have been initialized and are healthy, start accepting requests..., + *         }, + *     manager.startAsync();  // start all the services asynchronously, +@Beta, +  @Beta  // Should come out of Beta when ServiceManager does, +   * service listeners}.  This is extracted into its own object so that {@link ServiceListener} , +   * could be made {@code static} and its instances can be safely constructed and added in the , +   * {@link ServiceManager} constructor without having to close over the partially constructed , +   * {@link ServiceManager} instance (i.e. avoid leaking a pointer to {@code this})., +   * dependency injection frameworks inject instances of {@link ServiceManager}., +   * suggested that listeners are added before any of the managed services are , +   * {@linkplain Service#start started}., +      // likely to point out the culprit, but may not.  If we really wanted to solve this we could, +      // change state to track exactly which services have started and then we could accurately , +      // report on this. But it is only for logging so we likely don't care., +  @Immutable private static final class ListenerExecutorPair {]