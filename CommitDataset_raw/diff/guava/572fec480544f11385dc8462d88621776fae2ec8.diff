[+++ b/guava/src/com/google/common/collect/Ordering.java, + * A comparator, with additional methods to support common operations. This is an "enriched" version, + * of {@code Comparator} for pre-Java-8 users, in the same sense that {@link FluentIterable} is an, + * enriched {@link Iterable} for pre-Java-8 users., + * any of its special operations, such as:, + * <pre>{@code, + *         .nullsLast();, + * }</pre>, + * instance, but has the chance to act on values <i>before</i> handing off to that backing instance., + * As a result, it usually helps to read chained ordering expressions <i>backwards</i>. For example,, + * when {@code compare} is called on the above ordering:, + * <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be comparing, + *     {@code Bar} values from now on), + * <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is returned), + * encounter a call to {@code reverse}, continue working backwards until a result is determined, and, + * then reverse that result., + * <p>Except as noted, the orderings returned by the factory methods of this class are serializable, + * if and only if the provided instances that back them are. For example, if {@code ordering} and, + * {@code function} can themselves be serialized, then {@code ordering.onResultOf(function)} can as, + * well., + *, + * <h3>For Java 8 users</h3>, + *, + * <p>If you are using Java 8, this class is now obsolete <i>(pending a few August 2016, + * updates)</i>. Most of its functionality is now provided by {@link Stream} and by {@link, + * Comparator} itself, and the rest can now be found as static methods in our new {@link, + * Comparators} class. See each method below for further instructions. Whenever possible, you should, + * change any references of type {@code Ordering} to be of type {@code Comparator} instead. However,, + * at this time we have no plan to <i>deprecate</i> this class., + *, + * <p>Many replacements involve adopting {@code Stream}, and these changes can sometimes make your, + * code verbose. Whenever following this advice, you should check whether {@code Stream} could be, + * adopted more comprehensively in your code; the end result may be quite a bit simpler., + *, + * <h3>See also</h3>, + * "https://github.com/google/guava/wiki/OrderingExplained">{@code Ordering}</a>., +   * Returns a serializable ordering that uses the natural order of the values. The ordering throws, +   * a {@link NullPointerException} when passed a null parameter., +   * <p>The type specification is {@code <C extends Comparable>}, instead of the technically correct, +   * {@code <C extends Comparable<? super C>>}, to support legacy types from before Java 5., +   *, +   * <p><b>Java 8 users:</b> use {@link Comparator#naturalOrder} instead., +   * Returns an ordering based on an <i>existing</i> comparator instance. Note that it is, +   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just, +   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}, +   * method directly., +   *, +   * <p><b>Java 8 users:</b> this class is now obsolete as explained in the class documentation, so, +   * there is no need to use this method., +   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that, +   *     wraps that comparator, +   * Returns an ordering that compares objects according to the order in which they appear in the, +   * given list. Only objects present in the list (according to {@link Object#equals}) may be, +   * compared. This comparator imposes a "partial ordering" over the type {@code T}. Subsequent, +   * changes to the {@code valuesInOrder} list will have no effect on the returned comparator. Null, +   * values in the list are not supported., +   * <p>The returned comparator throws a {@link ClassCastException} when it receives an input, +   * parameter that isn't among the provided values., +   * <p>The generated comparator is serializable if all the provided values are serializable., +   * @param valuesInOrder the values that the returned comparator will be able to compare, in the, +   *     order the comparator should induce, +   * @throws IllegalArgumentException if {@code valuesInOrder} contains any duplicate values, +   *     (according to {@link Object#equals}), +  // TODO(kevinb): provide replacement, +   * Returns an ordering that compares objects according to the order in which they are given to, +   * this method. Only objects present in the argument list (according to {@link Object#equals}) may, +   * be compared. This comparator imposes a "partial ordering" over the type {@code T}. Null values, +   * in the argument list are not supported., +   * <p>The returned comparator throws a {@link ClassCastException} when it receives an input, +   * parameter that isn't among the provided values., +   * <p>The generated comparator is serializable if all the provided values are serializable., +   * @param leastValue the value which the returned comparator should consider the "least" of all, +   *     values, +   * @param remainingValuesInOrder the rest of the values that the returned comparator will be able, +   *     to compare, in the order the comparator should follow, +   * @throws IllegalArgumentException if any duplicate values (according to {@link, +   *     Object#equals(Object)}) are present among the method arguments, +  // TODO(kevinb): provide replacement, +   * Returns an ordering which treats all values as equal, indicating "no ordering." Passing this, +   * ordering to any <i>stable</i> sort algorithm results in no change to the order of elements., +   * Note especially that {@link #sortedCopy} and {@link #immutableSortedCopy} are stable, and in, +   * the returned instance these are implemented by simply copying the source list., +   * <p>Example:, +   * <pre>{@code, +   *     asList(t, null, e, s, null, t, null)), +   * }</pre>, +   * <p>Assuming {@code t}, {@code e} and {@code s} are non-null, this returns {@code [t, e, s, t,, +   * null, null, null]} regardlesss of the true comparison order of those three values (which might, +   * not even implement {@link Comparable} at all)., +   * <p><b>Warning:</b> by definition, this comparator is not <i>consistent with equals</i> (as, +   * defined {@linkplain Comparator here}). Avoid its use in APIs, such as {@link, +   * TreeSet#TreeSet(Comparator)}, where such consistency is expected., +   * <p><b>Java 8 users:</b> Use the lambda expression {@code (a, b) -> 0} instead (in certain cases, +   * you may need to cast that to {@code Comparator<YourType>})., +   *, +   * Returns an ordering that compares objects by the natural ordering of their string, +   * representations as returned by {@code toString()}. It does not support null values., +   *, +   * <p><b>Java 8 users:</b> Use {@code Comparator.comparing(Object::toString)} instead., +   * Returns an arbitrary ordering over all objects, for which {@code compare(a, b) == 0} implies]