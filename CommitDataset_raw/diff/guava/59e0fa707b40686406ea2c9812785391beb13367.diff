[+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash128Test.java, +import java.nio.ByteBuffer;, +    HashCode expected = toHashCode(expected1, expected2);, +    assertEquals(expected, murmur3_128(seed).hashBytes(input));, +    assertEquals(expected, murmur3_128(seed).newHasher().putBytes(input).hash());, +  }, +, +  /**, +   * Returns a {@link HashCode} for a sequence of longs, in big-endian order., +   */, +  private static HashCode toHashCode(long... longs) {, +    ByteBuffer bb = ByteBuffer.wrap(new byte[longs.length * 8]).order(ByteOrder.LITTLE_ENDIAN);, +    for (long x : longs) {, +      bb.putLong(x);, +    }, +    return HashCodes.fromBytes(bb.array());, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash128Test.java, +import java.nio.ByteBuffer;, +    HashCode expected = toHashCode(expected1, expected2);, +    assertEquals(expected, murmur3_128(seed).hashBytes(input));, +    assertEquals(expected, murmur3_128(seed).newHasher().putBytes(input).hash());, +  }, +, +  /**, +   * Returns a {@link HashCode} for a sequence of longs, in big-endian order., +   */, +  private static HashCode toHashCode(long... longs) {, +    ByteBuffer bb = ByteBuffer.wrap(new byte[longs.length * 8]).order(ByteOrder.LITTLE_ENDIAN);, +    for (long x : longs) {, +      bb.putLong(x);, +    }, +    return HashCodes.fromBytes(bb.array());, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +    assertHash(593689054, murmur3_32().hashInt(0));, +    assertHash(-189366624, murmur3_32().hashInt(-42));, +    assertHash(-1134849565, murmur3_32().hashInt(42));, +    assertHash(-1718298732, murmur3_32().hashInt(Integer.MIN_VALUE));, +    assertHash(-1653689534, murmur3_32().hashInt(Integer.MAX_VALUE));, +    assertHash(1669671676, murmur3_32().hashLong(0L));, +    assertHash(-846261623, murmur3_32().hashLong(-42L));, +    assertHash(1871679806, murmur3_32().hashLong(42L));, +    assertHash(1366273829, murmur3_32().hashLong(Long.MIN_VALUE));, +    assertHash(-2106506049, murmur3_32().hashLong(Long.MAX_VALUE));, +    assertHash(0, murmur3_32().hashString(""));, +    assertHash(679745764, murmur3_32().hashString("k"));, +    assertHash(1510782915, murmur3_32().hashString("hell"));, +    assertHash(-675079799, murmur3_32().hashString("hello"));, +    assertHash(1935035788, murmur3_32().hashString("http://www.google.com/"));, +    assertHash(-528633700, murmur3_32().hashString("The quick brown fox jumps over the lazy dog"));, +  }, +, +  private static void assertHash(int expected, HashCode actual) {, +    assertEquals(HashCodes.fromInt(expected), actual);, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash128Test.java, +import java.nio.ByteBuffer;, +    HashCode expected = toHashCode(expected1, expected2);, +    assertEquals(expected, murmur3_128(seed).hashBytes(input));, +    assertEquals(expected, murmur3_128(seed).newHasher().putBytes(input).hash());, +  }, +, +  /**, +   * Returns a {@link HashCode} for a sequence of longs, in big-endian order., +   */, +  private static HashCode toHashCode(long... longs) {, +    ByteBuffer bb = ByteBuffer.wrap(new byte[longs.length * 8]).order(ByteOrder.LITTLE_ENDIAN);, +    for (long x : longs) {, +      bb.putLong(x);, +    }, +    return HashCodes.fromBytes(bb.array());, +++ b/guava-tests/test/com/google/common/hash/Murmur3Hash32Test.java, +    assertHash(593689054, murmur3_32().hashInt(0));, +    assertHash(-189366624, murmur3_32().hashInt(-42));, +    assertHash(-1134849565, murmur3_32().hashInt(42));, +    assertHash(-1718298732, murmur3_32().hashInt(Integer.MIN_VALUE));, +    assertHash(-1653689534, murmur3_32().hashInt(Integer.MAX_VALUE));, +    assertHash(1669671676, murmur3_32().hashLong(0L));, +    assertHash(-846261623, murmur3_32().hashLong(-42L));, +    assertHash(1871679806, murmur3_32().hashLong(42L));, +    assertHash(1366273829, murmur3_32().hashLong(Long.MIN_VALUE));, +    assertHash(-2106506049, murmur3_32().hashLong(Long.MAX_VALUE));, +    assertHash(0, murmur3_32().hashString(""));, +    assertHash(679745764, murmur3_32().hashString("k"));, +    assertHash(1510782915, murmur3_32().hashString("hell"));, +    assertHash(-675079799, murmur3_32().hashString("hello"));, +    assertHash(1935035788, murmur3_32().hashString("http://www.google.com/"));, +    assertHash(-528633700, murmur3_32().hashString("The quick brown fox jumps over the lazy dog"));, +  }, +, +  private static void assertHash(int expected, HashCode actual) {, +    assertEquals(HashCodes.fromInt(expected), actual);, +++ b/guava/src/com/google/common/hash/Murmur3_128HashFunction.java, +import static com.google.common.primitives.UnsignedBytes.toInt;, +    private int length;, +      this.h1 = seed;, +      this.h2 = seed;, +      this.length = 0;]