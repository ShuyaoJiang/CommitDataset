[+++ b/android/guava-tests/test/com/google/common/base/PreconditionsTest.java, +          .hasMessage(Strings.lenientFormat("", Arrays.copyOfRange(params, 2, params.length)));, +    Preconditions.checkState(boxedBoolean.booleanValue(), "", 1);, +    Preconditions.checkState(boxedBoolean, "", (Object) boxedLong);, +    Preconditions.checkState(aBoolean, "", aBoolean ? "" : anInt, (Object) anInt);, +    Preconditions.checkState(boxedBoolean.booleanValue(), "", s);, +++ b/android/guava-tests/test/com/google/common/base/PreconditionsTest.java, +          .hasMessage(Strings.lenientFormat("", Arrays.copyOfRange(params, 2, params.length)));, +    Preconditions.checkState(boxedBoolean.booleanValue(), "", 1);, +    Preconditions.checkState(boxedBoolean, "", (Object) boxedLong);, +    Preconditions.checkState(aBoolean, "", aBoolean ? "" : anInt, (Object) anInt);, +    Preconditions.checkState(boxedBoolean.booleanValue(), "", s);, +++ b/android/guava/src/com/google/common/base/Preconditions.java, +import static com.google.common.base.Strings.lenientFormat;, +, + * <p>{@code Preconditions} uses {@link Strings#lenientFormat} to format error message template, + * strings. This only supports the {@code "%s"} specifier, not the full range of {@link, + * java.util.Formatter} specifiers. However, note that if the number of arguments does not match the, + * number of occurrences of {@code "%s"} in the format string, {@code Preconditions} will still, + * behave as expected, and will still include all argument values in the error message; the message, + * will simply not be formatted exactly as intended., +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, errorMessageArgs));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3));, +      throw new IllegalArgumentException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, errorMessageArgs));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3));, +      throw new IllegalStateException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, errorMessageArgs));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3));, +      throw new NullPointerException(lenientFormat(errorMessageTemplate, p1, p2, p3, p4));, +      return lenientFormat("%s (%s) must not be negative", desc, index);, +      return lenientFormat("%s (%s) must be less than size (%s)", desc, index, size);, +      return lenientFormat("%s (%s) must not be negative", desc, index);, +      return lenientFormat("%s (%s) must not be greater than size (%s)", desc, index, size);, +    return lenientFormat("end index (%s) must not be less than start index (%s)", end, start);, +++ b/android/guava-tests/test/com/google/common/base/PreconditionsTest.java, +          .hasMessage(Strings.lenientFormat("", Arrays.copyOfRange(params, 2, params.length)));, +    Preconditions.checkState(boxedBoolean.booleanValue(), "", 1);, +    Preconditions.checkState(boxedBoolean, "", (Object) boxedLong);, +    Preconditions.checkState(aBoolean, "", aBoolean ? "" : anInt, (Object) anInt);]