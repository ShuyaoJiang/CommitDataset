[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +   * Determines whether a character is single-width (not double-width). When in doubt, this matcher, +   * Returns a {@code char} matcher that matches only one specified character., +   * Returns a {@code char} matcher that matches any character except the one specified., +   * Returns a {@code char} matcher that matches any character present in the given character, +    // TODO(user): is it potentially worth just going ahead and building a precomputed matcher?, +   * Returns a {@code char} matcher that matches any character not present in the given character, +   * Returns a {@code char} matcher that matches any character in a given range (both endpoints are, +   * Returns a matcher with identical behavior to the given {@link Character}-based predicate, but, +   * Returns a matcher that matches any character not matched by this matcher., +   * Returns a matcher that matches any character matched by both this matcher and {@code other}., +   * Returns a matcher that matches any character matched by either this matcher or {@code other}., +   * Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to, +   * worthwhile only if the precomputed matcher is queried many thousands of times., +   * precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a, +   * A matcher for which precomputation will not yield any significant benefit., +   * @return {@code true} if this matcher matches at least one character in the sequence, +   * @return {@code true} if this matcher matches every character in the sequence, including when, +   * @return {@code true} if this matcher matches every character in the sequence, including when, +   * matcher replaced by a given replacement character. For example: <pre>   {@code, +   * matcher replaced by a given replacement sequence. For example: <pre>   {@code, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * characters that match this matcher replaced by a single replacement character. For example:, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +   * Determines whether a character is single-width (not double-width). When in doubt, this matcher, +   * Returns a {@code char} matcher that matches only one specified character., +   * Returns a {@code char} matcher that matches any character except the one specified., +   * Returns a {@code char} matcher that matches any character present in the given character, +    // TODO(user): is it potentially worth just going ahead and building a precomputed matcher?, +   * Returns a {@code char} matcher that matches any character not present in the given character, +   * Returns a {@code char} matcher that matches any character in a given range (both endpoints are, +   * Returns a matcher with identical behavior to the given {@link Character}-based predicate, but, +   * Returns a matcher that matches any character not matched by this matcher., +   * Returns a matcher that matches any character matched by both this matcher and {@code other}., +   * Returns a matcher that matches any character matched by either this matcher or {@code other}., +   * Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to, +   * worthwhile only if the precomputed matcher is queried many thousands of times., +   * precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a, +   * A matcher for which precomputation will not yield any significant benefit., +   * @return {@code true} if this matcher matches at least one character in the sequence, +   * @return {@code true} if this matcher matches every character in the sequence, including when, +   * @return {@code true} if this matcher matches every character in the sequence, including when, +   * matcher replaced by a given replacement character. For example: <pre>   {@code, +   * matcher replaced by a given replacement sequence. For example: <pre>   {@code, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * characters that match this matcher replaced by a single replacement character. For example:, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +   * @return a splitter, with default settings, that uses this matcher, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +   * Determines whether a character is single-width (not double-width). When in doubt, this matcher, +   * Returns a {@code char} matcher that matches only one specified character., +   * Returns a {@code char} matcher that matches any character except the one specified., +   * Returns a {@code char} matcher that matches any character present in the given character, +    // TODO(user): is it potentially worth just going ahead and building a precomputed matcher?, +   * Returns a {@code char} matcher that matches any character not present in the given character, +   * Returns a {@code char} matcher that matches any character in a given range (both endpoints are, +   * Returns a matcher with identical behavior to the given {@link Character}-based predicate, but, +   * Returns a matcher that matches any character not matched by this matcher., +   * Returns a matcher that matches any character matched by both this matcher and {@code other}., +   * Returns a matcher that matches any character matched by either this matcher or {@code other}., +   * Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to, +   * worthwhile only if the precomputed matcher is queried many thousands of times., +   * precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a, +   * A matcher for which precomputation will not yield any significant benefit., +   * @return {@code true} if this matcher matches at least one character in the sequence, +   * @return {@code true} if this matcher matches every character in the sequence, including when, +   * @return {@code true} if this matcher matches every character in the sequence, including when, +   * matcher replaced by a given replacement character. For example: <pre>   {@code, +   * matcher replaced by a given replacement sequence. For example: <pre>   {@code, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * Returns a substring of the input character sequence that omits all characters this matcher, +   * characters that match this matcher replaced by a single replacement character. For example:, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +   * @return a splitter, with default settings, that uses this matcher, +++ b/guava/src/com/google/common/base/CharMatcher.java, +   * Determines whether a character is single-width (not double-width). When in doubt, this matcher, +   * Returns a {@code char} matcher that matches only one specified character., +   * Returns a {@code char} matcher that matches any character except the one specified., +   * Returns a {@code char} matcher that matches any character present in the given character, +    // TODO(user): is it potentially worth just going ahead and building a precomputed matcher?, +   * Returns a {@code char} matcher that matches any character not present in the given character, +   * Returns a {@code char} matcher that matches any character in a given range (both endpoints are, +   * Returns a matcher with identical behavior to the given {@link Character}-based predicate, but, +   * Returns a matcher that matches any character not matched by this matcher., +   * Returns a matcher that matches any character matched by both this matcher and {@code other}., +   * Returns a matcher that matches any character matched by either this matcher or {@code other}., +   * Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to, +   * worthwhile only if the precomputed matcher is queried many thousands of times., +   * precomputed matcher is faster, but it certainly consumes more memory, which doesn't seem like a, +   * the negation is cheaper to precompute than the matcher itself; it tries to build small, +   * In many situations this produces a matcher which is faster to query than the original., +   * A matcher for which precomputation will not yield any significant benefit., +   * Sets bits in {@code table} matched by this matcher., +   * @return {@code true} if this matcher matches at least one character in the sequence, +   * @return {@code true} if this matcher matches every character in the sequence, including when]