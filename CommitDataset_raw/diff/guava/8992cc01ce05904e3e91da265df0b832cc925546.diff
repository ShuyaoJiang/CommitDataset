[+++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +  @Override, +  protected List<Class<? extends AbstractTester>> getTesters() {, +        CollectionToStringTester.class);, +  protected List<TestSuite> createDerivedSuites(, +      FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>, +    return Collections.singletonList(iteratorTestSuiteBuilder.createTestSuite());, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +  @Override, +  protected List<Class<? extends AbstractTester>> getTesters() {, +        CollectionToStringTester.class);, +  protected List<TestSuite> createDerivedSuites(, +      FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>, +    return Collections.singletonList(iteratorTestSuiteBuilder.createTestSuite());, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java, +  @Override, +  protected Collection<E> actualContents() {, +  @Override, +  protected Collection<E> resetContainer(Collection<E> newContents) {, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +  @Override, +  protected List<Class<? extends AbstractTester>> getTesters() {, +        CollectionToStringTester.class);, +  protected List<TestSuite> createDerivedSuites(, +      FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>, +    return Collections.singletonList(iteratorTestSuiteBuilder.createTestSuite());, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java, +  @Override, +  protected Collection<E> actualContents() {, +  @Override, +  protected Collection<E> resetContainer(Collection<E> newContents) {, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractContainerTester.java, +  @Override, +  public void setUp() throws Exception {, +      assertFalse("Should not contain " + element, actualContents().contains(element));, +    for (E e : getSubjectGenerator().order(new ArrayList<E>(getSampleElements()))) {, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +  @Override, +  protected List<Class<? extends AbstractTester>> getTesters() {, +        CollectionToStringTester.class);, +  protected List<TestSuite> createDerivedSuites(, +      FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>, +    return Collections.singletonList(iteratorTestSuiteBuilder.createTestSuite());, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java, +  @Override, +  protected Collection<E> actualContents() {, +  @Override, +  protected Collection<E> resetContainer(Collection<E> newContents) {, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractContainerTester.java, +  @Override, +  public void setUp() throws Exception {, +      assertFalse("Should not contain " + element, actualContents().contains(element));, +    for (E e : getSubjectGenerator().order(new ArrayList<E>(getSampleElements()))) {, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java, +      super("Returned value '" + actual + "' not found. Remaining elements: " + expected);, +  public enum KnownOrder {, +    KNOWN_ORDER,, +    UNKNOWN_ORDER, +  }, +  AbstractIteratorTester(, +      int steps,, +      Iterable<E> elementsToInsertIterable,, +      Iterable<E> expectedElements,, +      KnownOrder knownOrder,, +      int startIndex) {, +  protected abstract Iterable<? extends Stimulus<E, ? super I>> getStimulusValues();, +    MultiExceptionListIterator reference = new MultiExceptionListIterator(expectedElements);, +        Helpers.fail(cause, "failed with stimuli " + subListCopy(stimuli, i + 1));, +      if (method == NEXT_METHOD, +          && targetException == null, +        Helpers.fail(targetException, "Target threw exception when reference did not");, +    @Override, +    public String toString() {, +    return Arrays.asList(hasPrevious, nextIndex, previousIndex, previous, add, set);, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +  @Override, +  protected List<Class<? extends AbstractTester>> getTesters() {, +        CollectionToStringTester.class);, +  protected List<TestSuite> createDerivedSuites(, +      FeatureSpecificTestSuiteBuilder<?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>, +    return Collections.singletonList(iteratorTestSuiteBuilder.createTestSuite());, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTester.java, +  @Override, +  protected Collection<E> actualContents() {, +  @Override, +  protected Collection<E> resetContainer(Collection<E> newContents) {, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractContainerTester.java, +  @Override, +  public void setUp() throws Exception {, +      assertFalse("Should not contain " + element, actualContents().contains(element));, +    for (E e : getSubjectGenerator().order(new ArrayList<E>(getSampleElements()))) {, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java, +      super("Returned value '" + actual + "' not found. Remaining elements: " + expected);, +  public enum KnownOrder {, +    KNOWN_ORDER,, +    UNKNOWN_ORDER, +  }, +  AbstractIteratorTester(, +      int steps,, +      Iterable<E> elementsToInsertIterable,]