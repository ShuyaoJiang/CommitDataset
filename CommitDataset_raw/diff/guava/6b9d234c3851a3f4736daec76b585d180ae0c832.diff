[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +  private static class ImmediateFailedFuture<V> extends ImmediateFuture<V> {, +, +    private final Throwable thrown;, +, +      this.thrown = thrown;, +    }, +, +    @Override, +    public V get() throws ExecutionException {, +      throw new ExecutionException(thrown);, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +  private static class ImmediateFailedFuture<V> extends ImmediateFuture<V> {, +, +    private final Throwable thrown;, +, +      this.thrown = thrown;, +    }, +, +    @Override, +    public V get() throws ExecutionException {, +      throw new ExecutionException(thrown);, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  static final CancellationException cancellationExceptionWithCause(, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +  private static class ImmediateFailedFuture<V> extends ImmediateFuture<V> {, +, +    private final Throwable thrown;, +, +      this.thrown = thrown;, +    }, +, +    @Override, +    public V get() throws ExecutionException {, +      throw new ExecutionException(thrown);, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  static final CancellationException cancellationExceptionWithCause(, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +  private static class ImmediateFailedFuture<V> extends ImmediateFuture<V> {, +, +    private final Throwable thrown;, +, +      this.thrown = thrown;, +    }, +, +    @Override, +    public V get() throws ExecutionException {, +      throw new ExecutionException(thrown);, +  private static class ImmediateCancelledFuture<V> extends ImmediateFuture<V> {, +, +    private final CancellationException thrown;, +, +      this.thrown = new CancellationException("Immediate cancelled future.");, +    @Override, +    public boolean isCancelled() {, +      return true;, +    }, +, +    @Override, +    public V get() {, +      throw AbstractFuture.cancellationExceptionWithCause(, +          "Task was cancelled.", thrown);]