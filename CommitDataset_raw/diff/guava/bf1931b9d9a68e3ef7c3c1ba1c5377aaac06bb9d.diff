[+++ b/android/guava/src/com/google/common/collect/HashBiMap.java, +  abstract static class View<K, V, T> extends AbstractSet<T> {, +    final HashBiMap<K, V> biMap;, +, +    View(HashBiMap<K, V> biMap) {, +      this.biMap = biMap;, +    }, +, +        private int index = biMap.firstInInsertionOrder;, +        private int expectedModCount = biMap.modCount;, +        private int remaining = biMap.size;, +          if (biMap.modCount != expectedModCount) {, +          index = biMap.nextInInsertionOrder[index];, +          biMap.removeEntry(indexToRemove);, +          if (index == biMap.size) {, +          expectedModCount = biMap.modCount;, +      return biMap.size;, +      biMap.clear();, +  final class KeySet extends View<K, V, K> {, +    KeySet() {, +      super(HashBiMap.this);, +    }, +, +  final class ValueSet extends View<K, V, V> {, +    ValueSet() {, +      super(HashBiMap.this);, +    }, +, +  final class EntrySet extends View<K, V, Entry<K, V>> {, +    EntrySet() {, +      super(HashBiMap.this);, +    }, +, +      return (result == null) ? inverseEntrySet = new InverseEntrySet<K, V>(forward) : result;, +  static class InverseEntrySet<K, V> extends View<K, V, Entry<V, K>> {, +    InverseEntrySet(HashBiMap<K, V> biMap) {, +      super(biMap);, +    }, +, +        int eIndex = biMap.findEntryByValue(v);, +        return eIndex != ABSENT && Objects.equal(biMap.keys[eIndex], k);, +        int eIndex = biMap.findEntryByValue(v, vHash);, +        if (eIndex != ABSENT && Objects.equal(biMap.keys[eIndex], k)) {, +          biMap.removeEntryValueHashKnown(eIndex, vHash);, +      return new EntryForValue<K, V>(biMap, entry);, +  static final class EntryForValue<K, V> extends AbstractMapEntry<V, K> {, +    final HashBiMap<K, V> biMap;, +    EntryForValue(HashBiMap<K, V> biMap, int index) {, +      this.biMap = biMap;, +      this.value = biMap.values[index];, +      if (index == ABSENT || index > biMap.size || !Objects.equal(value, biMap.values[index])) {, +        index = biMap.findEntryByValue(value);, +      return (index == ABSENT) ? null : biMap.keys[index];, +        return biMap.putInverse(value, key, false);, +      K oldKey = biMap.keys[index];, +      biMap.replaceKeyInEntry(index, key, false);]