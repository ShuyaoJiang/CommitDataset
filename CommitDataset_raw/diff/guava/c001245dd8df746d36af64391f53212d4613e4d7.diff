[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.collect.BoundType.CLOSED;, +, +import com.google.common.annotations.GwtCompatible;, +, +import java.io.Serializable;, +import java.util.Collection;, +, +import javax.annotation.Nullable;, +, +/**, + * An implementation of {@link ContiguousSet} that contains one or more elements., + *, + * @author gak@google.com (Gregory Kick), + */, +@GwtCompatible(emulated = true), +@SuppressWarnings("unchecked") // allow ungenerified Comparable types, +final class RegularContiguousSet<C extends Comparable>, +    extends ContiguousSet<C> implements Serializable {, +  private final Range<C> range;, +, +  RegularContiguousSet(Range<C> range, DiscreteDomain<C> domain) {, +    super(domain);, +    this.range = range;, +  }, +, +  // Abstract method doesn't exist in GWT emulation, +  /* @Override */ ContiguousSet<C> headSetImpl(C toElement, boolean inclusive) {, +    return range.intersection(Ranges.upTo(toElement, BoundType.forBoolean(inclusive))), +        .asSet(domain);, +  }, +, +  // Abstract method doesn't exist in GWT emulation, +  /* @Override */ int indexOf(Object target) {, +    return contains(target) ? (int) domain.distance(first(), (C) target) : -1;, +  }, +, +  // Abstract method doesn't exist in GWT emulation, +  /* @Override */ ContiguousSet<C> subSetImpl(C fromElement, boolean fromInclusive, C toElement,, +      boolean toInclusive) {, +    return range.intersection(Ranges.range(fromElement, BoundType.forBoolean(fromInclusive),, +        toElement, BoundType.forBoolean(toInclusive))).asSet(domain);, +  }, +, +  // Abstract method doesn't exist in GWT emulation, +  /* @Override */ ContiguousSet<C> tailSetImpl(C fromElement, boolean inclusive) {, +    return range.intersection(Ranges.downTo(fromElement, BoundType.forBoolean(inclusive))), +        .asSet(domain);, +  }, +, +  @Override public UnmodifiableIterator<C> iterator() {, +    return new AbstractLinkedIterator<C>(first()) {, +      final C last = last();, +, +      @Override, +      protected C computeNext(C previous) {, +        return equalsOrThrow(previous, last) ? null : domain.next(previous);, +      }, +    };, +  }, +, +  private static boolean equalsOrThrow(Comparable<?> left, @Nullable Comparable<?> right) {, +    return right != null && Range.compareOrThrow(left, right) == 0;, +  }, +, +  @Override boolean isPartialView() {, +    return false;, +  }, +, +  @Override public C first() {, +    return range.lowerBound.leastValueAbove(domain);, +  }, +, +  @Override public C last() {, +    return range.upperBound.greatestValueBelow(domain);, +  }, +, +  @Override public int size() {, +    long distance = domain.distance(first(), last());, +    return (distance >= Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int) distance + 1;]