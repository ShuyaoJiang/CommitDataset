[+++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +import static com.google.common.base.Predicates.and;, +import static com.google.common.base.Predicates.not;, +import com.google.common.base.Predicate;, +import com.google.common.collect.Iterables;, + * Automatically runs sanity checks against top level classes in the same package of the test that, + * <p>Note that only top-level classes with either a non-private constructor or a non-private static, + * factory method to construct instances can have their instance methods checked. For example: <pre>, + * please use {@link ClassSanityTester#forAllPublicStaticMethods}., +  private Predicate<Class<?>> classFilter = new Predicate<Class<?>>() {, +    @Override public boolean apply(Class<?> cls) {, +      return visibility.isVisible(cls.getModifiers());, +    }, +  };, +  /** Specifies that classes that satisfy the given predicate aren't tested for sanity. */, +  protected final void ignoreClasses(Predicate<? super Class<?>> condition) {, +    this.classFilter = and(this.classFilter, not(condition));, +  }, +, +    LinkedHashSet<Class<?>> candidateClasses = Sets.newLinkedHashSet();, +        candidateClasses.add(cls);, +    List<Class<?>> result = Lists.newArrayList();, +    NEXT_CANDIDATE: for (Class<?> candidate : Iterables.filter(candidateClasses, classFilter)) {, +      for (Class<?> testClass : testClasses.get(candidate)) {, +      result.add(candidate);, +    return result;, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +import static com.google.common.base.Predicates.and;, +import static com.google.common.base.Predicates.not;, +import com.google.common.base.Predicate;, +import com.google.common.collect.Iterables;, + * Automatically runs sanity checks against top level classes in the same package of the test that, + * <p>Note that only top-level classes with either a non-private constructor or a non-private static, + * factory method to construct instances can have their instance methods checked. For example: <pre>, + * please use {@link ClassSanityTester#forAllPublicStaticMethods}., +  private Predicate<Class<?>> classFilter = new Predicate<Class<?>>() {, +    @Override public boolean apply(Class<?> cls) {, +      return visibility.isVisible(cls.getModifiers());, +    }, +  };, +  /** Specifies that classes that satisfy the given predicate aren't tested for sanity. */, +  protected final void ignoreClasses(Predicate<? super Class<?>> condition) {, +    this.classFilter = and(this.classFilter, not(condition));, +  }, +, +    LinkedHashSet<Class<?>> candidateClasses = Sets.newLinkedHashSet();, +        candidateClasses.add(cls);, +    List<Class<?>> result = Lists.newArrayList();, +    NEXT_CANDIDATE: for (Class<?> candidate : Iterables.filter(candidateClasses, classFilter)) {, +      for (Class<?> testClass : testClasses.get(candidate)) {, +      result.add(candidate);, +    return result;, +++ b/guava-testlib/src/com/google/common/testing/package-info.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +/**, + * This package contains testing utilities., + * It is a part of the open-source, + * <a href="http://guava-libraries.googlecode.com">Guava libraries</a>., + */, +@javax.annotation.ParametersAreNonnullByDefault, +package com.google.common.testing;, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +import static com.google.common.base.Predicates.and;, +import static com.google.common.base.Predicates.not;, +import com.google.common.base.Predicate;, +import com.google.common.collect.Iterables;, + * Automatically runs sanity checks against top level classes in the same package of the test that, + * <p>Note that only top-level classes with either a non-private constructor or a non-private static, + * factory method to construct instances can have their instance methods checked. For example: <pre>, + * please use {@link ClassSanityTester#forAllPublicStaticMethods}., +  private Predicate<Class<?>> classFilter = new Predicate<Class<?>>() {, +    @Override public boolean apply(Class<?> cls) {, +      return visibility.isVisible(cls.getModifiers());, +    }, +  };, +  /** Specifies that classes that satisfy the given predicate aren't tested for sanity. */, +  protected final void ignoreClasses(Predicate<? super Class<?>> condition) {, +    this.classFilter = and(this.classFilter, not(condition));, +  }, +, +    LinkedHashSet<Class<?>> candidateClasses = Sets.newLinkedHashSet();, +        candidateClasses.add(cls);, +    List<Class<?>> result = Lists.newArrayList();, +    NEXT_CANDIDATE: for (Class<?> candidate : Iterables.filter(candidateClasses, classFilter)) {, +      for (Class<?> testClass : testClasses.get(candidate)) {]