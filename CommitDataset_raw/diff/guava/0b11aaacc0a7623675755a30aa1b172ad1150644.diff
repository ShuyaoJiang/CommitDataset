[+++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +import com.google.common.collect.MapMaker.ComputingMapAdapter;, +++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +import com.google.common.collect.MapMaker.ComputingMapAdapter;, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +++ b/guava-tests/test/com/google/common/collect/ComputingConcurrentHashMapTest.java, +import com.google.common.collect.MapMaker.ComputingMapAdapter;, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +++ b/guava/src/com/google/common/collect/MapMaker.java, +import com.google.common.base.Throwables;, +import java.util.concurrent.ExecutionException;, +        ? new MapMaker.ComputingMapAdapter<K, V>(this, computingFunction), +  /**, +   * Overrides get() to compute on demand. Also throws an exception when {@code null} is returned, +   * from a computation., +   */, +  /*, +   * This might make more sense in ComputingConcurrentHashMap, but it causes a javac crash in some, +   * cases there: http://code.google.com/p/guava-libraries/issues/detail?id=950, +   */, +  static final class ComputingMapAdapter<K, V>, +      extends ComputingConcurrentHashMap<K, V> implements Serializable {, +    private static final long serialVersionUID = 0;, +, +    ComputingMapAdapter(MapMaker mapMaker,, +        Function<? super K, ? extends V> computingFunction) {, +      super(mapMaker, computingFunction);, +    }, +, +    @SuppressWarnings("unchecked") // unsafe, which is one advantage of Cache over Map, +    @Override, +    public V get(Object key) {, +      V value;, +      try {, +        value = getOrCompute((K) key);, +      } catch (ExecutionException e) {, +        Throwable cause = e.getCause();, +        Throwables.propagateIfInstanceOf(cause, ComputationException.class);, +        throw new ComputationException(cause);, +      }, +, +      if (value == null) {, +        throw new NullPointerException(computingFunction + " returned null for key " + key + ".");, +      }, +      return value;, +    }, +  }]