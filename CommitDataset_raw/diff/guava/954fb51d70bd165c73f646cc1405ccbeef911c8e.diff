[+++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import com.google.common.testing.EqualsTester;, +    // Test that only data and data-order is important, not the individual operations., +    new EqualsTester(), +        .addEqualityGroup(, +            hashFunction.newHasher().putString("abc").hash(),, +            hashFunction.newHasher().putString("ab").putString("c").hash(),, +            hashFunction.newHasher().putString("a").putString("bc").hash(),, +            hashFunction.newHasher().putString("a").putString("b").putString("c").hash(),, +            hashFunction.newHasher().putChar('a').putString("bc").hash(),, +            hashFunction.newHasher().putString("ab").putChar('c').hash(),, +            hashFunction.newHasher().putChar('a').putChar('b').putChar('c').hash()), +        .testEquals();, +, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import com.google.common.testing.EqualsTester;, +    // Test that only data and data-order is important, not the individual operations., +    new EqualsTester(), +        .addEqualityGroup(, +            hashFunction.newHasher().putString("abc").hash(),, +            hashFunction.newHasher().putString("ab").putString("c").hash(),, +            hashFunction.newHasher().putString("a").putString("bc").hash(),, +            hashFunction.newHasher().putString("a").putString("b").putString("c").hash(),, +            hashFunction.newHasher().putChar('a').putString("bc").hash(),, +            hashFunction.newHasher().putString("ab").putChar('c').hash(),, +            hashFunction.newHasher().putChar('a').putChar('b').putChar('c').hash()), +        .testEquals();, +, +++ b/guava/src/com/google/common/hash/Hasher.java, + * <p><b>Warning:</b> Chunks of data that are put into the {@link Hasher} are not delimited., + * The resulting {@link HashCode} is dependent only on the bytes inserted, and the order in which, + * they were inserted, not how those bytes were chunked into discrete put() operations. For example,, + * the following three expressions all generate colliding hash codes: <pre>   {@code, + *, + *   newHasher().putString("ab").putString("c").hash(), + *   newHasher().putString("a").putString("bc").hash(), + *   newHasher().putChar('a').putChar('b').putChar('c').hash()}</pre>, + *, + * If you wish to avoid this, you must explicitly delimit your data chunks. For example:, + * <pre>   {@code, + *, + *   newHasher().putString("ab").putByte(DELIM).putString("c").hash()}</pre>, + *]