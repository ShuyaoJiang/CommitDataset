[+++ /dev/null, +++ /dev/null, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +      helper = UnsafeAtomicHelperFactory.values()[0].tryCreateUnsafeAtomicHelper();, +   * Temporary hack to hide the reference to {@link UnsafeAtomicHelper} from Android. The caller of, +   * this code will execute {@link #tryCreateUnsafeAtomicHelper} on the <b>first</b> enum value, +   * present. On the server, this will try to create {@link UnsafeAtomicHelper}. On Android, it will, +   * just return {@code null}., +   */, +  private enum UnsafeAtomicHelperFactory {, +    @SuppressUnderAndroid // temporarily while we make Proguard tolerate Unsafe, +    REALLY_TRY_TO_CREATE {, +      @Override, +      AtomicHelper tryCreateUnsafeAtomicHelper() {, +        return new UnsafeAtomicHelper();, +      }, +    },, +, +    DONT_EVEN_TRY_TO_CREATE {, +      @Override, +      AtomicHelper tryCreateUnsafeAtomicHelper() {, +        return null;, +      }, +    },, +, +  ;, +, +    abstract AtomicHelper tryCreateUnsafeAtomicHelper();, +  }, +, +  /**, +  @SuppressUnderAndroid // temporarily while we make Proguard tolerate Unsafe, +    @Override, +    void putThread(Waiter waiter, Thread thread) {, +    @Override, +    void putNext(Waiter waiter, Waiter next) {, +    @Override, +    boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {, +    @Override, +    boolean casListeners(AbstractFuture future, Listener curr, Listener next) {, +    @Override, +    boolean casValue(AbstractFuture future, Object expected, Object v) {, +++ /dev/null, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +      helper = UnsafeAtomicHelperFactory.values()[0].tryCreateUnsafeAtomicHelper();, +   * Temporary hack to hide the reference to {@link UnsafeAtomicHelper} from Android. The caller of, +   * this code will execute {@link #tryCreateUnsafeAtomicHelper} on the <b>first</b> enum value, +   * present. On the server, this will try to create {@link UnsafeAtomicHelper}. On Android, it will, +   * just return {@code null}., +   */, +  private enum UnsafeAtomicHelperFactory {, +    @SuppressUnderAndroid // temporarily while we make Proguard tolerate Unsafe, +    REALLY_TRY_TO_CREATE {, +      @Override, +      AtomicHelper tryCreateUnsafeAtomicHelper() {, +        return new UnsafeAtomicHelper();, +      }, +    },, +, +    DONT_EVEN_TRY_TO_CREATE {, +      @Override, +      AtomicHelper tryCreateUnsafeAtomicHelper() {, +        return null;, +      }, +    },, +, +  ;, +, +    abstract AtomicHelper tryCreateUnsafeAtomicHelper();, +  }, +, +  /**, +  @SuppressUnderAndroid // temporarily while we make Proguard tolerate Unsafe, +    @Override, +    void putThread(Waiter waiter, Thread thread) {, +    @Override, +    void putNext(Waiter waiter, Waiter next) {, +    @Override, +    boolean casWaiters(AbstractFuture future, Waiter curr, Waiter next) {, +    @Override, +    boolean casListeners(AbstractFuture future, Listener curr, Listener next) {, +    @Override, +    boolean casValue(AbstractFuture future, Object expected, Object v) {, +++ b/guava/src/com/google/common/util/concurrent/FuturesGetChecked.java, +  @SuppressUnderAndroid // ClassValue, +    @SuppressUnderAndroid // ClassValue, +++ /dev/null, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +      helper = UnsafeAtomicHelperFactory.values()[0].tryCreateUnsafeAtomicHelper();, +   * Temporary hack to hide the reference to {@link UnsafeAtomicHelper} from Android. The caller of, +   * this code will execute {@link #tryCreateUnsafeAtomicHelper} on the <b>first</b> enum value, +   * present. On the server, this will try to create {@link UnsafeAtomicHelper}. On Android, it will, +   * just return {@code null}., +   */, +  private enum UnsafeAtomicHelperFactory {, +    @SuppressUnderAndroid // temporarily while we make Proguard tolerate Unsafe, +    REALLY_TRY_TO_CREATE {, +      @Override, +      AtomicHelper tryCreateUnsafeAtomicHelper() {, +        return new UnsafeAtomicHelper();]