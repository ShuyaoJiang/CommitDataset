[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * <p>Usage example: <pre>   {@code, + *, + *   CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {, + *     public Graph load(Key key) throws AnyException {, + *       return createExpensiveGraph(key);, + *     }, + *   };, + *   LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);}</pre>, + *, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * <p>Usage example: <pre>   {@code, + *, + *   CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {, + *     public Graph load(Key key) throws AnyException {, + *       return createExpensiveGraph(key);, + *     }, + *   };, + *   LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);}</pre>, + *, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}., +   *, +   * @throws IllegalStateException if a maximum size or weight was already set, +   * <p>This feature cannot be used in conjunction with {@link #maximumSize}., +   *, +   * @param weight the maximum total weight of entries the cache may contain, +   * @throws IllegalArgumentException if {@code weight} is negative, +   * @throws IllegalStateException if a maximum weight or size was already set, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * <p>Usage example: <pre>   {@code, + *, + *   CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {, + *     public Graph load(Key key) throws AnyException {, + *       return createExpensiveGraph(key);, + *     }, + *   };, + *   LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);}</pre>, + *, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}., +   *, +   * @throws IllegalStateException if a maximum size or weight was already set, +   * <p>This feature cannot be used in conjunction with {@link #maximumSize}., +   *, +   * @param weight the maximum total weight of entries the cache may contain, +   * @throws IllegalArgumentException if {@code weight} is negative, +   * @throws IllegalStateException if a maximum weight or size was already set, +++ b/guava/src/com/google/common/cache/CacheLoader.java, + * <p>Usage example: <pre>   {@code, + *, + *   CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {, + *     public Graph load(Key key) throws AnyException {, + *       return createExpensiveGraph(key);, + *     }, + *   };, + *   LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);}</pre>, + *, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, + * <p>Usage example: <pre>   {@code, + *, + *   CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {, + *     public Graph load(Key key) throws AnyException {, + *       return createExpensiveGraph(key);, + *     }, + *   };, + *   LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);}</pre>, + *, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}., +   *, +   * @throws IllegalStateException if a maximum size or weight was already set, +   * <p>This feature cannot be used in conjunction with {@link #maximumSize}., +   *, +   * @param weight the maximum total weight of entries the cache may contain, +   * @throws IllegalArgumentException if {@code weight} is negative, +   * @throws IllegalStateException if a maximum weight or size was already set, +++ b/guava/src/com/google/common/cache/CacheLoader.java, + * <p>Usage example: <pre>   {@code, + *, + *   CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {, + *     public Graph load(Key key) throws AnyException {, + *       return createExpensiveGraph(key);, + *     }, + *   };, + *   LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader);}</pre>, + *, +++ b/guava/src/com/google/common/cache/LoadingCache.java, +   * Loading is asynchronous only if {@link CacheLoader#reload} was overridden with an, +   * asynchronous implementation.]