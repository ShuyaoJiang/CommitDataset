[+++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +  static final String E12_B = "1-2b";, +  static final String E31 = "3-1";, +  static final String E34 = "3-4";, +              || network.adjacentEdges(edge).contains(adjacentEdge));, +   * Verifies that the {@code Set} returned by {@code adjacentEdges} has the expected, +   * mutability property (see the {@code Network} documentation for more information)., +   */, +  @Test, +  public abstract void adjacentEdges_checkReturnedSetMutability();, +, +  /**, +  public void adjacentEdges_bothEndpoints() {, +    addEdge(E12, N1, N2);, +    addEdge(E23, N2, N3);, +    addEdge(E31, N3, N1);, +    addEdge(E34, N3, N4);, +    assertThat(network.adjacentEdges(E12)).containsExactly(E31, E23);, +  }, +, +  @Test, +  public void adjacentEdges_noAdjacentEdges() {, +    addEdge(E12, N1, N2);, +    addEdge(E34, N3, N4);, +    assertThat(network.adjacentEdges(E12)).isEmpty();, +  }, +, +  @Test, +  public void adjacentEdges_edgeNotInGraph() {, +    try {, +      network.adjacentEdges(EDGE_NOT_IN_GRAPH);, +      fail(ERROR_EDGE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertEdgeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +  static final String E12_B = "1-2b";, +  static final String E31 = "3-1";, +  static final String E34 = "3-4";, +              || network.adjacentEdges(edge).contains(adjacentEdge));, +   * Verifies that the {@code Set} returned by {@code adjacentEdges} has the expected, +   * mutability property (see the {@code Network} documentation for more information)., +   */, +  @Test, +  public abstract void adjacentEdges_checkReturnedSetMutability();, +, +  /**, +  public void adjacentEdges_bothEndpoints() {, +    addEdge(E12, N1, N2);, +    addEdge(E23, N2, N3);, +    addEdge(E31, N3, N1);, +    addEdge(E34, N3, N4);, +    assertThat(network.adjacentEdges(E12)).containsExactly(E31, E23);, +  }, +, +  @Test, +  public void adjacentEdges_noAdjacentEdges() {, +    addEdge(E12, N1, N2);, +    addEdge(E34, N3, N4);, +    assertThat(network.adjacentEdges(E12)).isEmpty();, +  }, +, +  @Test, +  public void adjacentEdges_edgeNotInGraph() {, +    try {, +      network.adjacentEdges(EDGE_NOT_IN_GRAPH);, +      fail(ERROR_EDGE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertEdgeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/ConfigurableDirectedMultiNetworkTest.java, +  public void adjacentEdges_parallelEdges() {, +    addEdge(E12, N1, N2);, +    addEdge(E12_A, N1, N2);, +    addEdge(E12_B, N1, N2);, +    addEdge(E34, N3, N4);, +    assertThat(network.adjacentEdges(E12)).containsExactly(E12_A, E12_B);, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +  static final String E12_B = "1-2b";, +  static final String E31 = "3-1";, +  static final String E34 = "3-4";, +              || network.adjacentEdges(edge).contains(adjacentEdge));, +   * Verifies that the {@code Set} returned by {@code adjacentEdges} has the expected, +   * mutability property (see the {@code Network} documentation for more information)., +   */, +  @Test, +  public abstract void adjacentEdges_checkReturnedSetMutability();, +, +  /**, +  public void adjacentEdges_bothEndpoints() {, +    addEdge(E12, N1, N2);]