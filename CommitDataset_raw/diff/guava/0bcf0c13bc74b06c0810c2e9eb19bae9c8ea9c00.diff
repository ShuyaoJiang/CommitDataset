[+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +  public void testSetFuture_misbehavingFuture() throws Exception {, +    SettableFuture<String> future = SettableFuture.create();, +    ListenableFuture<String> badFuture =, +        new ListenableFuture<String>() {, +          @Override, +          public boolean cancel(boolean interrupt) {, +            return false;, +          }, +, +          @Override, +          public boolean isDone() {, +            return true;, +          }, +, +          @Override, +          public boolean isCancelled() {, +            return false; // BAD!!, +          }, +, +          @Override, +          public String get() {, +            throw new CancellationException(); // BAD!!, +          }, +, +          @Override, +          public String get(long time, TimeUnit unit) {, +            throw new CancellationException(); // BAD!!, +          }, +, +          @Override, +          public void addListener(Runnable runnable, Executor executor) {, +            executor.execute(runnable);, +          }, +        };, +    future.setFuture(badFuture);, +    ExecutionException expected = getExpectingExecutionException(future);, +    assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);, +    assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +  public void testSetFuture_misbehavingFuture() throws Exception {, +    SettableFuture<String> future = SettableFuture.create();, +    ListenableFuture<String> badFuture =, +        new ListenableFuture<String>() {, +          @Override, +          public boolean cancel(boolean interrupt) {, +            return false;, +          }, +, +          @Override, +          public boolean isDone() {, +            return true;, +          }, +, +          @Override, +          public boolean isCancelled() {, +            return false; // BAD!!, +          }, +, +          @Override, +          public String get() {, +            throw new CancellationException(); // BAD!!, +          }, +, +          @Override, +          public String get(long time, TimeUnit unit) {, +            throw new CancellationException(); // BAD!!, +          }, +, +          @Override, +          public void addListener(Runnable runnable, Executor executor) {, +            executor.execute(runnable);, +          }, +        };, +    future.setFuture(badFuture);, +    ExecutionException expected = getExpectingExecutionException(future);, +    assertThat(expected).hasCauseThat().isInstanceOf(IllegalArgumentException.class);, +    assertThat(expected).hasCauseThat().hasMessageThat().contains(badFuture.toString());, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;, +    }, +    boolean wasCancelled = future.isCancelled();, +    // Don't allocate a CancellationException if it's not necessary, +    if (!GENERATE_CANCELLATION_CAUSES & wasCancelled) {, +      return Cancellation.CAUSELESS_CANCELLED;, +    }, +      Object v = getUninterruptibly(future);, +      if (!wasCancelled) {, +        return new Failure(, +            new IllegalArgumentException(, +                "get() threw CancellationException, despite reporting isCancelled() == false: ", +                    + future,, +                cancellation));, +      }, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +  public void testSetFuture_misbehavingFuture() throws Exception {]