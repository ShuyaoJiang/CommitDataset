[+++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, +import static com.google.common.base.Preconditions.checkState;, +  private static final class Alphabet extends CharMatcher {, +    // this is meant to be immutable -- don't modify it!, +    private final char[] chars;, +    final int mask;, +    final int bitsPerChar;, +    final int charsPerChunk;, +    final int bytesPerChunk;, +    private transient Alphabet lowerCase;, +    private transient Alphabet upperCase;, +, +    Alphabet(char[] chars) {, +      this.chars = checkNotNull(chars);, +        this.bitsPerChar = log2(chars.length, UNNECESSARY);, +        throw new IllegalArgumentException("Illegal alphabet length " + chars.length, e);, +      this.mask = chars.length - 1;, +      for (int i = 0; i < chars.length; i++) {, +        char c = chars[i];, +        checkArgument(decodabet[c] == -1, "Duplicate character: %s", c);, +        validPadding[divide(i * 8, bitsPerChar, CEILING)] = true;, +    char encode(int bits) {, +      return chars[bits];, +    }, +, +    boolean isValidPaddingStartPosition(int index) {, +      return validPadding[index % charsPerChunk];, +    }, +, +    int decode(char ch) throws IOException {, +      if (ch >= 128 || decodabet[ch] == -1) {, +        throw new IOException("Unrecognized character: " + ch);, +      }, +      return decodabet[ch];, +    }, +, +    private boolean hasLowerCase() {, +      for (char c : chars) {, +        if (c >= 'a' & c <= 'z') {, +          return true;, +        }, +      }, +      return false;, +    }, +, +    private boolean hasUpperCase() {, +      for (char c : chars) {, +        if (c >= 'A' & c <= 'Z') {, +          return true;, +        }, +      }, +      return false;, +    }, +, +    Alphabet upperCase() {, +      Alphabet result = upperCase;, +      if (result == null) {, +        if (!hasLowerCase()) {, +          result = upperCase = this;, +        } else {, +          checkState(!hasUpperCase(), "Cannot call upperCase() on a mixed-case alphabet");, +          char[] upperCased = new char[chars.length];, +          for (int i = 0; i < chars.length; i++) {, +            upperCased[i] = Ascii.toUpperCase(chars[i]);, +          }, +          result = upperCase = new Alphabet(upperCased);, +          result.lowerCase = this;, +        }, +      }, +      return result;, +    }, +, +    Alphabet lowerCase() {, +      Alphabet result = lowerCase;, +      if (result == null) {, +        if (!hasUpperCase()) {, +          result = lowerCase = this;, +        } else {, +          checkState(!hasLowerCase(), "Cannot call lowerCase() on a mixed-case alphabet");, +          char[] lowerCased = new char[chars.length];, +          for (int i = 0; i < chars.length; i++) {, +            lowerCased[i] = Ascii.toLowerCase(chars[i]);, +          }, +          result = lowerCase = new Alphabet(lowerCased);, +          result.upperCase = this;, +        }, +      }, +      return result;, +    }, +, +    @Override, +    public boolean matches(char c) {, +      return CharMatcher.ASCII.matches(c) && decodabet[c] != -1;, +    }, +  }, +, +  static final class StandardBaseEncoding extends BaseEncoding {, +    // TODO(user): provide a useful toString, +    private final Alphabet alphabet;, +]