[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +import java.util.ArrayList;, +import java.util.List;, +   * through an {@link Iterator}, which may be lazily evaluated. If you want, +   * an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}., +   * Splits {@code sequence} into string components and returns them as, +   * an immutable list. If you want an {@link Iterable} which may be lazily, +   * evaluated, use {@link #split(CharSequence)}., +   *, +   * @param sequence the sequence of characters to split, +   * @return an immutable list of the segments split from the parameter, +   * @since 15.0, +   */, +  @Beta, +  public List<String> splitToList(CharSequence sequence) {, +    checkNotNull(sequence);, +, +    Iterator<String> iterator = spliterator(sequence);, +    List<String> result = new ArrayList<String>();, +, +    while (iterator.hasNext()) {, +      result.add(iterator.next());, +    }, +, +    return Collections.unmodifiableList(result);, +  }, +, +  /**, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +import java.util.ArrayList;, +import java.util.List;, +   * through an {@link Iterator}, which may be lazily evaluated. If you want, +   * an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}., +   * Splits {@code sequence} into string components and returns them as, +   * an immutable list. If you want an {@link Iterable} which may be lazily, +   * evaluated, use {@link #split(CharSequence)}., +   *, +   * @param sequence the sequence of characters to split, +   * @return an immutable list of the segments split from the parameter, +   * @since 15.0, +   */, +  @Beta, +  public List<String> splitToList(CharSequence sequence) {, +    checkNotNull(sequence);, +, +    Iterator<String> iterator = spliterator(sequence);, +    List<String> result = new ArrayList<String>();, +, +    while (iterator.hasNext()) {, +      result.add(iterator.next());, +    }, +, +    return Collections.unmodifiableList(result);, +  }, +, +  /**, +, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +  /**, +   * All of the infrastructure of split and splitToString is identical, so we, +   * do one test of splitToString. All other cases should be covered by testing, +   * of split., +   *, +   * <p>TODO(user): It would be good to make all the relevant tests run on, +   * both split and splitToString automatically., +   */, +  public void testCharacterSimpleSplitToList() {, +    String simple = "a,b,c";, +    List<String> letters = COMMA_SPLITTER.splitToList(simple);, +    ASSERT.that(letters).iteratesOverSequence("a", "b", "c");, +  }, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +import java.util.ArrayList;, +import java.util.List;, +   * through an {@link Iterator}, which may be lazily evaluated. If you want, +   * an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}., +   * Splits {@code sequence} into string components and returns them as, +   * an immutable list. If you want an {@link Iterable} which may be lazily, +   * evaluated, use {@link #split(CharSequence)}., +   *, +   * @param sequence the sequence of characters to split, +   * @return an immutable list of the segments split from the parameter, +   * @since 15.0, +   */, +  @Beta, +  public List<String> splitToList(CharSequence sequence) {, +    checkNotNull(sequence);, +, +    Iterator<String> iterator = spliterator(sequence);, +    List<String> result = new ArrayList<String>();, +, +    while (iterator.hasNext()) {, +      result.add(iterator.next());, +    }, +, +    return Collections.unmodifiableList(result);, +  }, +]