[+++ b/guava-tests/test/com/google/common/util/concurrent/ExecutionListTest.java, +import java.util.concurrent.atomic.AtomicInteger;, +  private final ExecutionList list = new ExecutionList();, +    Executor exec = Executors.newCachedThreadPool();, +  public void testExecute_idempotent() {, +    final AtomicInteger runCalled = new AtomicInteger();, +    list.add(new Runnable() {, +      @Override public void run() {, +        runCalled.getAndIncrement();, +      }, +    }, MoreExecutors.sameThreadExecutor());, +    list.execute();, +    assertEquals(1, runCalled.get());, +    list.execute();, +    assertEquals(1, runCalled.get());, +  }, +, +  public void testExecute_idempotentConcurrently() throws InterruptedException {, +    final CountDownLatch okayToRun = new CountDownLatch(1);, +    final AtomicInteger runCalled = new AtomicInteger();, +    list.add(new Runnable() {, +      @Override public void run() {, +        try {, +          okayToRun.await();, +        } catch (InterruptedException e) {, +          Thread.currentThread().interrupt();, +          throw new RuntimeException(e);, +        }, +        runCalled.getAndIncrement();, +      }, +    }, MoreExecutors.sameThreadExecutor());, +    Runnable execute = new Runnable() {, +      @Override public void run() {, +        list.execute();, +      }, +    };, +    Thread thread1 = new Thread(execute);, +    Thread thread2 = new Thread(execute);, +    thread1.start();, +    thread2.start();, +    assertEquals(0, runCalled.get());, +    okayToRun.countDown();, +    thread1.join();, +    thread2.join();, +    assertEquals(1, runCalled.get());, +  }, +, +    list.add(new MockRunnable(countDownLatch),  Executors.newCachedThreadPool());, +    @Override public void run() {, +    @Override public void run() {}]