[+++ b/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java, +    matcher = useNew ? CharMatcher.whitespace() : OLD_WHITESPACE;, +++ b/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java, +    matcher = useNew ? CharMatcher.whitespace() : OLD_WHITESPACE;, +++ b/guava-tests/test/com/google/common/base/BenchmarkHelpers.java, +    WHITESPACE(CharMatcher.whitespace(), WHITESPACE_CHARACTERS),, +    ASCII(CharMatcher.ascii(), ASCII_CHARACTERS),, +    ALL_DIGIT(CharMatcher.digit(), ALL_DIGITS),, +++ b/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java, +    matcher = useNew ? CharMatcher.whitespace() : OLD_WHITESPACE;, +++ b/guava-tests/test/com/google/common/base/BenchmarkHelpers.java, +    WHITESPACE(CharMatcher.whitespace(), WHITESPACE_CHARACTERS),, +    ASCII(CharMatcher.ascii(), ASCII_CHARACTERS),, +    ALL_DIGIT(CharMatcher.digit(), ALL_DIGITS),, +++ b/guava-tests/test/com/google/common/base/PredicatesTest.java, +import static com.google.common.base.CharMatcher.whitespace;, +      return whitespace().trimFrom(string);, +++ b/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java, +    matcher = useNew ? CharMatcher.whitespace() : OLD_WHITESPACE;, +++ b/guava-tests/test/com/google/common/base/BenchmarkHelpers.java, +    WHITESPACE(CharMatcher.whitespace(), WHITESPACE_CHARACTERS),, +    ASCII(CharMatcher.ascii(), ASCII_CHARACTERS),, +    ALL_DIGIT(CharMatcher.digit(), ALL_DIGITS),, +++ b/guava-tests/test/com/google/common/base/PredicatesTest.java, +import static com.google.common.base.CharMatcher.whitespace;, +      return whitespace().trimFrom(string);, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +        .on(CharMatcher.whitespace()), +        .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace())), +        .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace())), +        .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace())), +++ b/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java, +    matcher = useNew ? CharMatcher.whitespace() : OLD_WHITESPACE;, +++ b/guava-tests/test/com/google/common/base/BenchmarkHelpers.java, +    WHITESPACE(CharMatcher.whitespace(), WHITESPACE_CHARACTERS),, +    ASCII(CharMatcher.ascii(), ASCII_CHARACTERS),, +    ALL_DIGIT(CharMatcher.digit(), ALL_DIGITS),, +++ b/guava-tests/test/com/google/common/base/PredicatesTest.java, +import static com.google.common.base.CharMatcher.whitespace;, +      return whitespace().trimFrom(string);, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +        .on(CharMatcher.whitespace()), +        .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace())), +        .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace())), +        .trimResults(CharMatcher.anyOf("afro").or(CharMatcher.whitespace())), +++ b/guava/src/com/google/common/base/Splitter.java, +    this(strategy, false, CharMatcher.none(), Integer.MAX_VALUE);, +   * to {@code trimResults(CharMatcher.whitespace())}. For example, {@code, +    return trimResults(CharMatcher.whitespace());]