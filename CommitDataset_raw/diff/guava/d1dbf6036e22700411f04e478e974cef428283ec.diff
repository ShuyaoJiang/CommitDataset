[+++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +  @Empty, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, +    return com.google.common.base.Optional.absent();, +  @Generates, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional(T value) {, +    return com.google.common.base.Optional.of(value);, +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +  @Empty, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, +    return com.google.common.base.Optional.absent();, +  @Generates, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional(T value) {, +    return com.google.common.base.Optional.of(value);, +++ b/android/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +    assertThat(ArbitraryInstances.get(com.google.common.base.Optional.class)).isAbsent();, +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +  @Empty, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, +    return com.google.common.base.Optional.absent();, +  @Generates, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional(T value) {, +    return com.google.common.base.Optional.of(value);, +++ b/android/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +    assertThat(ArbitraryInstances.get(com.google.common.base.Optional.class)).isAbsent();, +++ b/android/guava-testlib/test/com/google/common/testing/FreshValueGeneratorTest.java, +    assertFreshInstance(new TypeToken<com.google.common.base.Optional<OneConstantEnum>>() {}, 2);, +  public void testGoogleOptional() {, +    assertEquals(, +        com.google.common.base.Optional.absent(),, +        generator.generateFresh(new TypeToken<com.google.common.base.Optional<String>>() {}));, +    assertEquals(, +        com.google.common.base.Optional.of("2"),, +        generator.generateFresh(new TypeToken<com.google.common.base.Optional<String>>() {}));, +    // Test that the first generated instance for different cgcb.Optional<T> is always absent()., +    // Having generated cgcb.Optional<String> instances doesn't prevent absent() from being, +    // generated for other cgcb.Optional types., +    assertEquals(, +        com.google.common.base.Optional.absent(),, +        generator.generateFresh(, +            new TypeToken<com.google.common.base.Optional<OneConstantEnum>>() {}));, +    assertEquals(, +        com.google.common.base.Optional.of(OneConstantEnum.CONSTANT1),, +        generator.generateFresh(, +            new TypeToken<com.google.common.base.Optional<OneConstantEnum>>() {}));, +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +  @Empty, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, +    return com.google.common.base.Optional.absent();, +  @Generates, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional(T value) {, +    return com.google.common.base.Optional.of(value);, +++ b/android/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +    assertThat(ArbitraryInstances.get(com.google.common.base.Optional.class)).isAbsent();, +++ b/android/guava-testlib/test/com/google/common/testing/FreshValueGeneratorTest.java, +    assertFreshInstance(new TypeToken<com.google.common.base.Optional<OneConstantEnum>>() {}, 2);, +  public void testGoogleOptional() {, +    assertEquals(, +        com.google.common.base.Optional.absent(),, +        generator.generateFresh(new TypeToken<com.google.common.base.Optional<String>>() {}));, +    assertEquals(, +        com.google.common.base.Optional.of("2"),, +        generator.generateFresh(new TypeToken<com.google.common.base.Optional<String>>() {}));, +    // Test that the first generated instance for different cgcb.Optional<T> is always absent()., +    // Having generated cgcb.Optional<String> instances doesn't prevent absent() from being, +    // generated for other cgcb.Optional types., +    assertEquals(, +        com.google.common.base.Optional.absent(),, +        generator.generateFresh(, +            new TypeToken<com.google.common.base.Optional<OneConstantEnum>>() {}));, +    assertEquals(, +        com.google.common.base.Optional.of(OneConstantEnum.CONSTANT1),, +        generator.generateFresh(, +            new TypeToken<com.google.common.base.Optional<OneConstantEnum>>() {}));, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +import java.util.Optional;, +import java.util.OptionalDouble;, +import java.util.OptionalInt;, +import java.util.OptionalLong;, +      .put(Optional.class, Optional.empty()), +      .put(OptionalInt.class, OptionalInt.empty()), +      .put(OptionalLong.class, OptionalLong.empty()), +      .put(OptionalDouble.class, OptionalDouble.empty()), +      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +      .put(com.google.common.base.Optional.class, com.google.common.base.Optional.absent()), +++ b/android/guava-testlib/src/com/google/common/testing/FreshValueGenerator.java, +  @Empty, +  private <T> com.google.common.base.Optional<T> generateGoogleOptional() {, +    return com.google.common.base.Optional.absent();]