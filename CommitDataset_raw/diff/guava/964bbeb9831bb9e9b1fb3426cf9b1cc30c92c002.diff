[+++ b/guava-tests/test/com/google/common/cache/CacheComputationTest.java, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +      Thread thread = new Thread(new Runnable() {, +      });, +      thread.start();, +      // we want to wait until each thread is WAITING - one thread waiting inside CacheLoader.load, +      // (in startSignal.await()), and the others waiting for that thread's result., +      while (thread.isAlive() && thread.getState() != Thread.State.WAITING) {, +        Thread.yield();, +    }, +    gettersStartedSignal.countDown();, +++ b/guava-tests/test/com/google/common/cache/CacheComputationTest.java, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +    final CountDownLatch startSignal = new CountDownLatch(count + 1);, +      Thread thread = new Thread(new Runnable() {, +      });, +      thread.start();, +      // we want to wait until each thread is WAITING - one thread waiting inside CacheLoader.load, +      // (in startSignal.await()), and the others waiting for that thread's result., +      while (thread.isAlive() && thread.getState() != Thread.State.WAITING) {, +        Thread.yield();, +    }, +    gettersStartedSignal.countDown();, +++ b/guava/src/com/google/common/primitives/UnsignedLongs.java, +   * between Character.MIN_RADIX and Character.MAX_RADIX.  Otherwise,, +   * the radix {@code 10} is used., +    if(radix < Character.MIN_RADIX | radix > Character.MAX_RADIX){, +      radix = 10;, +    }]