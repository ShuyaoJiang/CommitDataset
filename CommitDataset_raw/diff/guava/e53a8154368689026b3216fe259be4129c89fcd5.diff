[+++ b/guava/src/com/google/common/primitives/UnsignedLongs.java, +     * guaranteed to be either exact or one less than the correct value. This follows from the fact, +     * that floor(floor(x)/i) == floor(x/i) for any real x and integer i != 0. The proof is not, +     * quite trivial., +    } else if (x > 0) {, +      return Long.toString(x, radix);, +      if ((radix & (radix - 1)) == 0) {, +        // Radix is a power of two so we can avoid division., +        int shift = Integer.numberOfTrailingZeros(radix);, +        int mask = radix - 1;, +        do {, +          buf[--i] = Character.forDigit(((int) x) & mask, radix);, +          x >>>= shift;, +        } while (x != 0);, +      } else {, +        long quotient;, +        if ((radix & 1) == 0) {, +          // Fast path for the usual case where the radix is even., +          quotient = (x >>> 1) / (radix >>> 1);, +        } else {, +          quotient = divide(x, radix);, +        }, +      }]