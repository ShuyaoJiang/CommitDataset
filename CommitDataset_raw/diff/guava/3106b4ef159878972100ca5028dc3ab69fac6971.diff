[+++ b/android/guava/pom.xml, +          <!-- We add the link ourselves, both so that we can choose Java 9 over the version that -source suggests and so that we can solve the JSR305 problem described below. -->, +          <detectJavaApiLink>false</detectJavaApiLink>, +          <offlineLinks>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>, +              <location>${project.basedir}/javadoc-link/jsr305</location>, +            </offlineLink>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.j2objc/j2objc-annotations/1.1/</url>, +              <location>${project.basedir}/javadoc-link/j2objc-annotations</location>, +            </offlineLink>, +            <!-- The JDK doc must be listed after JSR305 (and as an <offlineLink>, not a <link>) so that JSR305 "claims" javax.annotation. -->, +            <offlineLink>, +              <url>https://docs.oracle.com/javase/9/docs/api/</url>, +              <location>https://docs.oracle.com/javase/9/docs/api/</location>, +            </offlineLink>, +          </offlineLinks>, +          <!-- (We need JDK *sources*, not just -link, so that {@inheritDoc} works.) -->, +++ b/android/guava/pom.xml, +          <!-- We add the link ourselves, both so that we can choose Java 9 over the version that -source suggests and so that we can solve the JSR305 problem described below. -->, +          <detectJavaApiLink>false</detectJavaApiLink>, +          <offlineLinks>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>, +              <location>${project.basedir}/javadoc-link/jsr305</location>, +            </offlineLink>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.j2objc/j2objc-annotations/1.1/</url>, +              <location>${project.basedir}/javadoc-link/j2objc-annotations</location>, +            </offlineLink>, +            <!-- The JDK doc must be listed after JSR305 (and as an <offlineLink>, not a <link>) so that JSR305 "claims" javax.annotation. -->, +            <offlineLink>, +              <url>https://docs.oracle.com/javase/9/docs/api/</url>, +              <location>https://docs.oracle.com/javase/9/docs/api/</location>, +            </offlineLink>, +          </offlineLinks>, +          <!-- (We need JDK *sources*, not just -link, so that {@inheritDoc} works.) -->, +++ b/guava/javadoc-link/j2objc-annotations/package-list, +com.google.j2objc.annotations, +++ b/android/guava/pom.xml, +          <!-- We add the link ourselves, both so that we can choose Java 9 over the version that -source suggests and so that we can solve the JSR305 problem described below. -->, +          <detectJavaApiLink>false</detectJavaApiLink>, +          <offlineLinks>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>, +              <location>${project.basedir}/javadoc-link/jsr305</location>, +            </offlineLink>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.j2objc/j2objc-annotations/1.1/</url>, +              <location>${project.basedir}/javadoc-link/j2objc-annotations</location>, +            </offlineLink>, +            <!-- The JDK doc must be listed after JSR305 (and as an <offlineLink>, not a <link>) so that JSR305 "claims" javax.annotation. -->, +            <offlineLink>, +              <url>https://docs.oracle.com/javase/9/docs/api/</url>, +              <location>https://docs.oracle.com/javase/9/docs/api/</location>, +            </offlineLink>, +          </offlineLinks>, +          <!-- (We need JDK *sources*, not just -link, so that {@inheritDoc} works.) -->, +++ b/guava/javadoc-link/j2objc-annotations/package-list, +com.google.j2objc.annotations, +++ b/guava/javadoc-link/jsr305/package-list, +javax.annotation, +javax.annotation.concurrent, +javax.annotation.meta, +++ b/android/guava/pom.xml, +          <!-- We add the link ourselves, both so that we can choose Java 9 over the version that -source suggests and so that we can solve the JSR305 problem described below. -->, +          <detectJavaApiLink>false</detectJavaApiLink>, +          <offlineLinks>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>, +              <location>${project.basedir}/javadoc-link/jsr305</location>, +            </offlineLink>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.j2objc/j2objc-annotations/1.1/</url>, +              <location>${project.basedir}/javadoc-link/j2objc-annotations</location>, +            </offlineLink>, +            <!-- The JDK doc must be listed after JSR305 (and as an <offlineLink>, not a <link>) so that JSR305 "claims" javax.annotation. -->, +            <offlineLink>, +              <url>https://docs.oracle.com/javase/9/docs/api/</url>, +              <location>https://docs.oracle.com/javase/9/docs/api/</location>, +            </offlineLink>, +          </offlineLinks>, +          <!-- (We need JDK *sources*, not just -link, so that {@inheritDoc} works.) -->, +++ b/guava/javadoc-link/j2objc-annotations/package-list, +com.google.j2objc.annotations, +++ b/guava/javadoc-link/jsr305/package-list, +javax.annotation, +javax.annotation.concurrent, +javax.annotation.meta, +++ b/guava/pom.xml, +          <!-- We add the link ourselves, both so that we can choose Java 9 over the version that -source suggests and so that we can solve the JSR305 problem described below. -->, +          <detectJavaApiLink>false</detectJavaApiLink>, +          <offlineLinks>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.code.findbugs/jsr305/3.0.1/</url>, +              <location>${project.basedir}/javadoc-link/jsr305</location>, +            </offlineLink>, +            <offlineLink>, +              <url>https://static.javadoc.io/com.google.j2objc/j2objc-annotations/1.1/</url>]