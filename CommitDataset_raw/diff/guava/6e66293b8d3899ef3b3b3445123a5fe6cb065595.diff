[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractIdleServiceTest.java, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.collect.Lists;, +import java.util.List;, + * Tests for {@link AbstractIdleService}., + * @author Ben Yu, +, +  // Functional tests using real thread. We only verify publicly visible state., +  // Interaction assertions are done by the single-threaded unit tests., +, +  public static class FunctionalTest extends TestCase {, +, +    private static class DefaultService extends AbstractIdleService {, +      @Override protected void startUp() throws Exception {}, +      @Override protected void shutDown() throws Exception {}, +      AbstractIdleService service = new DefaultService();, +      assertEquals(Service.State.RUNNING, service.startAndWait());, +      assertEquals(Service.State.TERMINATED, service.stopAndWait());, +    public void testStart_failed() throws Exception {, +      final Exception exception = new Exception("deliberate");, +      AbstractIdleService service = new DefaultService() {, +        @Override protected void startUp() throws Exception {, +          throw exception;, +        }, +      };, +      try {, +        service.startAndWait();, +        fail();, +      } catch (RuntimeException e) {, +        assertSame(exception, e.getCause());, +      }, +      assertEquals(Service.State.FAILED, service.state());, +    }, +, +    public void testStop_failed() throws Exception {, +      final Exception exception = new Exception("deliberate");, +      AbstractIdleService service = new DefaultService() {, +        @Override protected void shutDown() throws Exception {, +          throw exception;, +        }, +      };, +      service.startAndWait();, +      try {, +        service.stopAndWait();, +        fail();, +      } catch (RuntimeException e) {, +        assertSame(exception, e.getCause());, +      }, +      assertEquals(Service.State.FAILED, service.state());, +    }, +  }, +, +  public void testStart() {, +    TestService service = new TestService();, +    assertEquals(0, service.startUpCalled);, +    service.startAndWait();, +    assertEquals(1, service.startUpCalled);, +    assertEquals(Service.State.RUNNING, service.state());, +    ASSERT.that(service.transitionStates).hasContentsInOrder(Service.State.STARTING);, +  }, +, +  public void testStart_failed() {, +    final Exception exception = new Exception("deliberate");, +    TestService service = new TestService() {, +      @Override protected void startUp() throws Exception {, +        super.startUp();, +        throw exception;, +      }, +    };, +    assertEquals(0, service.startUpCalled);, +    try {, +      service.startAndWait();, +      fail();, +    } catch (RuntimeException e) {, +      assertSame(exception, e.getCause());, +    }, +    assertEquals(1, service.startUpCalled);, +    assertEquals(Service.State.FAILED, service.state());, +    ASSERT.that(service.transitionStates).hasContentsInOrder(Service.State.STARTING);, +  }, +, +  public void testStop_withoutStart() {, +    TestService service = new TestService();, +    service.stopAndWait();, +    assertEquals(0, service.startUpCalled);, +    assertEquals(0, service.shutDownCalled);, +    assertEquals(Service.State.TERMINATED, service.state());, +    ASSERT.that(service.transitionStates).isEmpty();, +  }, +, +  public void testStop_afterStart() {, +    TestService service = new TestService();, +    service.startAndWait();, +    assertEquals(1, service.startUpCalled);, +    assertEquals(0, service.shutDownCalled);, +    service.stopAndWait();, +    assertEquals(1, service.startUpCalled);, +    assertEquals(1, service.shutDownCalled);, +    assertEquals(Service.State.TERMINATED, service.state());]