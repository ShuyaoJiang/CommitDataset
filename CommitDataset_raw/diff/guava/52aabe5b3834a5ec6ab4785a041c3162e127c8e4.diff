[+++ b/src/com/google/common/base/Joiner.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +import com.google.common.annotations.GwtCompatible;, +, + * An object which joins pieces of text (specified as an array, {@link Iterable}, varargs or even a, + * {@link Map}) with a separator. It either appends the results to an {@link Appendable} or returns, + * them as a {@link String}. Example: <pre>   {@code, + * This returns the string {@code "Harry; Ron; Hermione"}. Note that all input elements are, + * converted to strings using {@link Object#toString()} before being appended., + * <p>If neither {@link #skipNulls()} nor {@link #useForNull(String)} is specified, the joining, + * methods will throw {@link NullPointerException} if any given element is null., + * <p><b>Warning: joiner instances are always immutable</b>; a configuration method such as {@code, + * useForNull} has no effect on the instance it is invoked on! You must store and use the new joiner, + * instance returned by the method. This makes joiners thread-safe, and safe to store as {@code, + * static final} constants. <pre>   {@code, +@GwtCompatible, +public class Joiner {, +   * Returns a joiner which automatically places {@code separator} between consecutive elements., +   * Returns a joiner which automatically places {@code separator} between consecutive elements., +   * Appends the string representation of each of {@code parts}, using the previously configured, +   * separator between each, to {@code appendable}., +  public <A extends Appendable> A appendTo(A appendable, Iterable<?> parts) throws IOException {, +   * Appends the string representation of each of {@code parts}, using the previously configured, +   * separator between each, to {@code appendable}., +  public final <A extends Appendable> A appendTo(A appendable, Object[] parts) throws IOException {, +   * Appends to {@code appendable} the string representation of each of the remaining arguments., +  public final <A extends Appendable> A appendTo(, +      A appendable, @Nullable Object first, @Nullable Object second, Object... rest), +   * Appends the string representation of each of {@code parts}, using the previously configured, +   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,, +   * Iterable)}, except that it does not throw {@link IOException}., +  public final StringBuilder appendTo(StringBuilder builder, Iterable<?> parts) {, +   * Appends the string representation of each of {@code parts}, using the previously configured, +   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,, +   * Iterable)}, except that it does not throw {@link IOException}., +   * Appends to {@code builder} the string representation of each of the remaining arguments., +   * Identical to {@link #appendTo(Appendable, Object, Object, Object...)}, except that it does not, +   * throw {@link IOException}., +  public final StringBuilder appendTo(, +      StringBuilder builder, @Nullable Object first, @Nullable Object second, Object... rest) {, +   * Returns a string containing the string representation of each of {@code parts}, using the, +   * previously configured separator between each., +   * Returns a string containing the string representation of each of {@code parts}, using the, +   * previously configured separator between each., +   * Returns a string containing the string representation of each argument, using the previously, +   * configured separator between each., +  public final String join(@Nullable Object first, @Nullable Object second, Object... rest) {, +   * Returns a joiner with the same behavior as this one, except automatically substituting {@code, +   * nullText} for any provided null elements., +, +        checkNotNull(nullText); // weird: just to satisfy NullPointerTester., +, +   * Returns a joiner with the same behavior as this joiner, except automatically skipping over any, +   * provided null elements., +      @Override public <A extends Appendable> A appendTo(A appendable, Iterable<?> parts), +          throws IOException {, +, +        checkNotNull(nullText); // weird: just to satisfy NullPointerTester., +, +        checkNotNull(kvs); // weird: just to satisfy NullPointerTester., +        throw new UnsupportedOperationException("can't use .skipNulls() with maps");, +   * Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as, +   * this {@code Joiner} otherwise., +   * An object that joins map entries in the same manner as {@code Joiner} joins iterables and, +   * arrays. Like {@code Joiner}, it is thread-safe and immutable., +     * Appends the string representation of each entry of {@code map}, using the previously, +     * configured separator and key-value separator, to {@code appendable}., +    public <A extends Appendable> A appendTo(A appendable, Map<?, ?> map) throws IOException {, +     * Appends the string representation of each entry of {@code map}, using the previously, +     * configured separator and key-value separator, to {@code builder}. Identical to {@link, +     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}., +     * Returns a string containing the string representation of each entry of {@code map}, using the, +     * previously configured separator and key-value separator., +     * Returns a map joiner with the same behavior as this one, except automatically substituting, +     * {@code nullText} for any provided null keys or values., +    return (part instanceof CharSequence) ? (CharSequence) part : part.toString();, +, +++ b/src/com/google/common/base/Joiner.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +import com.google.common.annotations.GwtCompatible;, +, + * An object which joins pieces of text (specified as an array, {@link Iterable}, varargs or even a, + * {@link Map}) with a separator. It either appends the results to an {@link Appendable} or returns, + * them as a {@link String}. Example: <pre>   {@code, + * This returns the string {@code "Harry; Ron; Hermione"}. Note that all input elements are, + * converted to strings using {@link Object#toString()} before being appended., + * <p>If neither {@link #skipNulls()} nor {@link #useForNull(String)} is specified, the joining, + * methods will throw {@link NullPointerException} if any given element is null., + * <p><b>Warning: joiner instances are always immutable</b>; a configuration method such as {@code, + * useForNull} has no effect on the instance it is invoked on! You must store and use the new joiner]