[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import java.util.LinkedList;, +import java.util.Queue;, +  static <E> Queue<E> newFastestQueue(int ignored) {, +    return new LinkedList<E>();, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import java.util.LinkedList;, +import java.util.Queue;, +  static <E> Queue<E> newFastestQueue(int ignored) {, +    return new LinkedList<E>();, +  }, +, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/EvictingQueueTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static java.util.Arrays.asList;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.testing.SerializableTester;, +, +import junit.framework.TestCase;, +, +import java.util.NoSuchElementException;, +, +/**, + * Tests for {@link EvictingQueue}., + *, + * @author Kurt Alfred Kluever, + */, +@GwtCompatible(emulated = true), +public class EvictingQueueTest extends TestCase {, +, +  public void testCreateWithNegativeSize() throws Exception {, +    try {, +      EvictingQueue.create(-1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testCreateWithZeroSize() throws Exception {, +    EvictingQueue<String> queue = EvictingQueue.create(0);, +    assertEquals(0, queue.size());, +, +    assertTrue(queue.add("hi"));, +    assertEquals(0, queue.size());, +, +    assertTrue(queue.offer("hi"));, +    assertEquals(0, queue.size());, +, +    assertFalse(queue.remove("hi"));, +    assertEquals(0, queue.size());, +, +    try {, +      queue.element();, +      fail();, +    } catch (NoSuchElementException expected) {}, +, +    assertNull(queue.peek());, +    assertNull(queue.poll());, +    try {, +      queue.remove();, +      fail();, +    } catch (NoSuchElementException expected) {}, +  }, +, +  public void testRemainingCapacity_maxSize0() {, +    EvictingQueue<String> queue = EvictingQueue.create(0);, +    assertEquals(0, queue.remainingCapacity());, +  }, +, +  public void testRemainingCapacity_maxSize1() {, +    EvictingQueue<String> queue = EvictingQueue.create(1);, +    assertEquals(1, queue.remainingCapacity());, +    queue.add("hi");, +    assertEquals(0, queue.remainingCapacity());, +  }, +, +  public void testRemainingCapacity_maxSize3() {, +    EvictingQueue<String> queue = EvictingQueue.create(3);, +    assertEquals(3, queue.remainingCapacity());, +    queue.add("hi");]