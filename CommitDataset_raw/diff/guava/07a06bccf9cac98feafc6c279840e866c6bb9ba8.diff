[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +  static boolean equalsImpl(List<?> thisList, @Nullable Object other) {, +    if (other == checkNotNull(thisList)) {, +    if (!(other instanceof List)) {, +    List<?> otherList = (List<?>) other;, +    int size = thisList.size();, +    if (size != otherList.size()) {, +      return false;, +    }, +    if (thisList instanceof RandomAccess && otherList instanceof RandomAccess) {, +      // avoid allocation and use the faster loop, +      for (int i = 0; i < size; i++) {, +        if (!Objects.equal(thisList.get(i), otherList.get(i))) {, +          return false;, +        }, +      }, +      return true;, +    } else {, +      return Iterators.elementsEqual(thisList.iterator(), otherList.iterator());, +    }, +    if (list instanceof RandomAccess) {, +      return indexOfRandomAccess(list, element);, +    } else {, +  }, +, +  private static int indexOfRandomAccess(List<?> list, @Nullable Object element) {, +    int size = list.size();, +    if (element == null) {, +      for (int i = 0; i < size; i++) {, +        if (list.get(i) == null) {, +          return i;, +        }, +      }, +    } else {, +      for (int i = 0; i < size; i++) {, +        if (element.equals(list.get(i))) {, +          return i;, +        }, +      }, +    }, +    return -1;, +  }, +    if (list instanceof RandomAccess) {, +      return lastIndexOfRandomAccess(list, element);, +    } else {, +  }, +, +  private static int lastIndexOfRandomAccess(List<?> list, @Nullable Object element) {, +    if (element == null) {, +      for (int i = list.size() - 1; i >= 0; i--) {, +        if (list.get(i) == null) {, +          return i;, +        }, +      }, +    } else {, +      for (int i = list.size() - 1; i >= 0; i--) {, +        if (element.equals(list.get(i))) {, +          return i;, +        }, +      }, +    }, +    return -1;, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +  static boolean equalsImpl(List<?> thisList, @Nullable Object other) {, +    if (other == checkNotNull(thisList)) {, +    if (!(other instanceof List)) {, +    List<?> otherList = (List<?>) other;, +    int size = thisList.size();, +    if (size != otherList.size()) {, +      return false;, +    }, +    if (thisList instanceof RandomAccess && otherList instanceof RandomAccess) {, +      // avoid allocation and use the faster loop, +      for (int i = 0; i < size; i++) {, +        if (!Objects.equal(thisList.get(i), otherList.get(i))) {, +          return false;, +        }, +      }, +      return true;, +    } else {, +      return Iterators.elementsEqual(thisList.iterator(), otherList.iterator());, +    }, +    if (list instanceof RandomAccess) {, +      return indexOfRandomAccess(list, element);, +    } else {, +  }, +, +  private static int indexOfRandomAccess(List<?> list, @Nullable Object element) {, +    int size = list.size();, +    if (element == null) {, +      for (int i = 0; i < size; i++) {, +        if (list.get(i) == null) {, +          return i;, +        }, +      }, +    } else {, +      for (int i = 0; i < size; i++) {, +        if (element.equals(list.get(i))) {, +          return i;]