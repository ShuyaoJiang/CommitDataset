[+++ b/guava/src/com/google/common/graph/AbstractDirectedNodeConnections.java, +    N previousNode = inEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +    N previousNode = outEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    checkState(previousNode == null);, +  public void addOutEdge(E edge, N node) {, +    checkState(previousNode == null);, +++ b/guava/src/com/google/common/graph/AbstractDirectedNodeConnections.java, +    N previousNode = inEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +    N previousNode = outEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    checkState(previousNode == null);, +  public void addOutEdge(E edge, N node) {, +    checkState(previousNode == null);, +++ b/guava/src/com/google/common/graph/AbstractUndirectedNodeConnections.java, +import static com.google.common.base.Preconditions.checkState;, +    if (!isSelfLoop) {, +    return null;, +  }, +    N previousNode = incidentEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    if (!isSelfLoop) {, +      addOutEdge(edge, node);, +  public void addOutEdge(E edge, N node) {, +    checkState(previousNode == null);, +++ b/guava/src/com/google/common/graph/AbstractDirectedNodeConnections.java, +    N previousNode = inEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +    N previousNode = outEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    checkState(previousNode == null);, +  public void addOutEdge(E edge, N node) {, +    checkState(previousNode == null);, +++ b/guava/src/com/google/common/graph/AbstractUndirectedNodeConnections.java, +import static com.google.common.base.Preconditions.checkState;, +    if (!isSelfLoop) {, +    return null;, +  }, +    N previousNode = incidentEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    if (!isSelfLoop) {, +      addOutEdge(edge, node);, +  public void addOutEdge(E edge, N node) {, +    checkState(previousNode == null);, +++ b/guava/src/com/google/common/graph/DirectedMultiNodeConnections.java, +import static com.google.common.base.Preconditions.checkNotNull;, +    N node = checkNotNull(super.removeInEdge(edge, isSelfLoop));, +    N node = checkNotNull(super.removeOutEdge(edge));, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    super.addInEdge(edge, node, isSelfLoop);, +  public void addOutEdge(E edge, N node) {, +    super.addOutEdge(edge, node);, +++ b/guava/src/com/google/common/graph/AbstractDirectedNodeConnections.java, +    N previousNode = inEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +    N previousNode = outEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    checkState(previousNode == null);, +  public void addOutEdge(E edge, N node) {, +    checkState(previousNode == null);, +++ b/guava/src/com/google/common/graph/AbstractUndirectedNodeConnections.java, +import static com.google.common.base.Preconditions.checkState;, +    if (!isSelfLoop) {, +    return null;, +  }, +    N previousNode = incidentEdgeMap.remove(edge);, +    return checkNotNull(previousNode);, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    if (!isSelfLoop) {, +      addOutEdge(edge, node);, +  public void addOutEdge(E edge, N node) {, +    checkState(previousNode == null);, +++ b/guava/src/com/google/common/graph/DirectedMultiNodeConnections.java, +import static com.google.common.base.Preconditions.checkNotNull;, +    N node = checkNotNull(super.removeInEdge(edge, isSelfLoop));, +    N node = checkNotNull(super.removeOutEdge(edge));, +  public void addInEdge(E edge, N node, boolean isSelfLoop) {, +    super.addInEdge(edge, node, isSelfLoop);, +  public void addOutEdge(E edge, N node) {, +    super.addOutEdge(edge, node);, +++ b/guava/src/com/google/common/graph/NodeConnections.java, +   *, +   * <p>In the directed case, {@code edge} is assumed to be an outgoing edge., +   * Remove {@code edge} from the set of incoming edges. Returns the former predecessor node., +   *, +   * <p>In the undirected case, returns {@code null} if {@code isSelfLoop} is true., +   * Remove {@code edge} from the set of outgoing edges. Returns the former successor node., +  void addInEdge(E edge, N node, boolean isSelfLoop);, +  void addOutEdge(E edge, N node);, +++ b/guava/src/com/google/common/graph/AbstractDirectedNodeConnections.java, +    N previousNode = inEdgeMap.remove(edge);, +    return checkNotNull(previousNode);]