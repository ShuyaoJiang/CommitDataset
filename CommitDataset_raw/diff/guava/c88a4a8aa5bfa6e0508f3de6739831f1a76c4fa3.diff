[+++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetNavigationTester.java, +/*, + * Copyright (C) 2011 Google Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect.testing.google;, +, +import static com.google.common.collect.BoundType.CLOSED;, +import static com.google.common.collect.BoundType.OPEN;, +import static com.google.common.collect.testing.Helpers.copyToList;, +import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_ADD;, +import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;, +import static com.google.common.collect.testing.features.CollectionSize.ONE;, +import static com.google.common.collect.testing.features.CollectionSize.SEVERAL;, +import static com.google.common.collect.testing.features.CollectionSize.ZERO;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.collect.BoundType;, +import com.google.common.collect.Iterators;, +import com.google.common.collect.Multiset;, +import com.google.common.collect.Multiset.Entry;, +import com.google.common.collect.Multisets;, +import com.google.common.collect.SortedMultiset;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.NoSuchElementException;, +, +/**, + * Tester for navigation of SortedMultisets., + * , + * @author Louis Wasserman, + */, +@GwtCompatible, +public class MultisetNavigationTester<E> extends AbstractMultisetTester<E> {, +  private SortedMultiset<E> sortedMultiset;, +  private List<E> entries;, +  private Entry<E> a;, +  private Entry<E> b;, +  private Entry<E> c;, +, +  /**, +   * Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557, +   */, +  static <T> SortedMultiset<T> cast(Multiset<T> iterable) {, +    return (SortedMultiset<T>) iterable;, +  }, +, +  @Override, +  public void setUp() throws Exception {, +    super.setUp();, +    sortedMultiset = cast(getMultiset());, +    entries =, +        copyToList(getSubjectGenerator().getSampleElements(, +            getSubjectGenerator().getCollectionSize().getNumElements()));, +    Collections.sort(entries, sortedMultiset.comparator());, +, +    // some tests assume SEVERAL == 3, +    if (entries.size() >= 1) {, +      a = Multisets.immutableEntry(entries.get(0), sortedMultiset.count(entries.get(0)));, +      if (entries.size() >= 3) {, +        b = Multisets.immutableEntry(entries.get(1), sortedMultiset.count(entries.get(1)));, +        c = Multisets.immutableEntry(entries.get(2), sortedMultiset.count(entries.get(2)));, +      }, +    }, +  }, +, +  /**, +   * Resets the contents of sortedMultiset to have entries a, c, for the navigation tests., +   */, +  @SuppressWarnings("unchecked"), +  // Needed to stop Eclipse whining, +  private void resetWithHole() {, +    List<E> container = new ArrayList<E>();, +    container.addAll(Collections.nCopies(a.getCount(), a.getElement()));, +    container.addAll(Collections.nCopies(c.getCount(), c.getElement()));, +    super.resetContainer(getSubjectGenerator().create(container.toArray()));, +    sortedMultiset = (SortedMultiset<E>) getMultiset();, +  }, +, +  @CollectionSize.Require(ZERO), +  public void testEmptyMultisetFirst() {, +    assertNull(sortedMultiset.firstEntry());, +    try {, +      sortedMultiset.elementSet().first();, +      fail();]