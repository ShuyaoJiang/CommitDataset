[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    @Override public Iterator<T> iterator() {, +      return listIterator();, +    }, +    @Override public ListIterator<T> listIterator(int index) {, +      return new TransformedListIterator<F, T>(fromList.listIterator(index)) {, +        @Override, +        T transform(F from) {, +          return function.apply(from);, +        }, +      };, +    }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    @Override public Iterator<T> iterator() {, +      return listIterator();, +    }, +    @Override public ListIterator<T> listIterator(int index) {, +      return new TransformedListIterator<F, T>(fromList.listIterator(index)) {, +        @Override, +        T transform(F from) {, +          return function.apply(from);, +        }, +      };, +    }, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ListsTest.java, +  public void testTransformPreservesIOOBEsThrownByFunction() {, +    try {, +      Lists.transform(ImmutableList.of("foo", "bar"), new Function<String, String>() {, +        @Override, +        public String apply(String input) {, +          throw new IndexOutOfBoundsException();, +        }, +      }).toArray();, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +      // success, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    @Override public Iterator<T> iterator() {, +      return listIterator();, +    }, +    @Override public ListIterator<T> listIterator(int index) {, +      return new TransformedListIterator<F, T>(fromList.listIterator(index)) {, +        @Override, +        T transform(F from) {, +          return function.apply(from);, +        }, +      };, +    }, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ListsTest.java, +  public void testTransformPreservesIOOBEsThrownByFunction() {, +    try {, +      Lists.transform(ImmutableList.of("foo", "bar"), new Function<String, String>() {, +        @Override, +        public String apply(String input) {, +          throw new IndexOutOfBoundsException();, +        }, +      }).toArray();, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +      // success, +    }, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/ListsTest_gwt.java, +public void testTransformPreservesIOOBEsThrownByFunction() throws Exception {, +  com.google.common.collect.ListsTest testCase = new com.google.common.collect.ListsTest();, +  testCase.testTransformPreservesIOOBEsThrownByFunction();, +}, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    @Override public Iterator<T> iterator() {, +      return listIterator();, +    }, +    @Override public ListIterator<T> listIterator(int index) {, +      return new TransformedListIterator<F, T>(fromList.listIterator(index)) {, +        @Override, +        T transform(F from) {, +          return function.apply(from);, +        }, +      };, +    }, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ListsTest.java, +  public void testTransformPreservesIOOBEsThrownByFunction() {, +    try {, +      Lists.transform(ImmutableList.of("foo", "bar"), new Function<String, String>() {, +        @Override, +        public String apply(String input) {, +          throw new IndexOutOfBoundsException();, +        }, +      }).toArray();, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +      // success, +    }, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/ListsTest_gwt.java]