[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +import static com.google.common.truth.Truth.assertThat;, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a,b,c");, +    assertThat(letters).iteratesAs("a", "", "b", "c");, +    assertThat(letters).iteratesAs("a", "", " b", "c");, +    assertThat(letters).iteratesAs("a", "b", "c", "");, +    assertThat(letters).iteratesAs("", "a", "b", "c");, +    assertThat(testCharacteringMotto).iteratesAs(, +    assertThat(testCharacteringMotto).iteratesAs(, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a", "", "c");, +    assertThat(letters).iteratesAs("a", "c");, +    assertThat(nothing).iteratesAs("");, +    assertThat(Splitter.on('.').omitEmptyStrings().split("")).isEmpty();, +    assertThat(blankblank).iteratesAs("", "");, +    assertThat(empty).isEmpty();, +    assertThat(family).iteratesAs(, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a,b,c");, +    assertThat(letters).iteratesAs("a", "", "b", "c");, +    assertThat(letters).iteratesAs("a", "", " b", "c");, +    assertThat(letters).iteratesAs("a", "b", "c", "");, +    assertThat(letters).iteratesAs("", "a", "b", "c");, +    assertThat(testStringingMotto).iteratesAs(, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a", "", "c");, +    assertThat(letters).iteratesAs("a", "c");, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("", "a", "b", "c");, +    assertThat(letters).iteratesAs("a", "b", "c", "");, +    assertThat(threeCommasThenThreeSpaces).iteratesAs(",,,", "   ");, +    assertThat(notMuch).iteratesAs("");, +    assertThat(Splitter.on('.').omitEmptyStrings().split("")).isEmpty();, +    assertThat(blankblank).iteratesAs("", "");, +    assertThat(empty).isEmpty();, +    assertThat(family).iteratesAs(, +    assertThat(letters).iteratesAs("ab", "cd", "e");, +    assertThat(letters).iteratesAs("ab", "cd", "ef");, +    assertThat(letters).iteratesAs("abc");, +    assertThat(letters).iteratesAs("ab");, +    assertThat(letters).iteratesAs("");, +    assertThat(Splitter.fixedLength(3).omitEmptyStrings().split("")).isEmpty();, +    assertThat(letters).iteratesAs("a", "b", "c", "d");, +    assertThat(letters).iteratesAs("a", "b", "c", "d");, +    assertThat(letters).iteratesAs("abcd");, +    assertThat(letters).iteratesAs("a", "bcd");, +    assertThat(items).iteratesAs("a", "b,c,d");, +    assertThat(items).iteratesAs("a", ",,b,,c,d");, +    assertThat(items).iteratesAs("a", "b,,c,d");, +    assertThat(items).iteratesAs("a", "b", "c,d");, +    assertThat(items).iteratesAs("a", "b ,, c,d");, +    assertThat(items).iteratesAs("a", "b", "c,d");, +    assertThat(items).iteratesAs("a,,  , b ,, c,d");, +    assertThat(items).iteratesAs(",,a,,  , b ,, c,d");, +    assertThat(items).iteratesAs("");, +    assertThat(items).isEmpty();, +    assertThat(m).isEqualTo(expected);, +    assertThat(asList(m.entrySet())).is(asList(expected.entrySet()));, +    assertThat(m).isEqualTo(expected);, +    assertThat(asList(m.entrySet())).is(asList(expected.entrySet()));, +    assertThat(m).isEqualTo(expected);, +    assertThat(asList(m.entrySet())).is(asList(expected.entrySet()));, +    assertThat(m).isEqualTo(expected);, +    assertThat(asList(m.entrySet())).is(asList(expected.entrySet()));, +    assertThat(m).isEqualTo(expected);, +    assertThat(asList(m.entrySet())).is(asList(expected.entrySet()));, +    assertThat(m).isEqualTo(expected);, +    assertThat(asList(m.entrySet())).is(asList(expected.entrySet()));, +    assertThat(m.keySet()).iteratesAs("boy", "girl", "cat", "dog");, +    assertThat(m).isEqualTo(, +    assertThat(m.keySet()).iteratesAs("girl", "boy", "dog", "cat");, +    assertThat(m).isEqualTo(, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +import static com.google.common.truth.Truth.assertThat;, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a,b,c");, +    assertThat(letters).iteratesAs("a", "", "b", "c");, +    assertThat(letters).iteratesAs("a", "", " b", "c");, +    assertThat(letters).iteratesAs("a", "b", "c", "");, +    assertThat(letters).iteratesAs("", "a", "b", "c");, +    assertThat(testCharacteringMotto).iteratesAs(, +    assertThat(testCharacteringMotto).iteratesAs(, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a", "", "c");, +    assertThat(letters).iteratesAs("a", "c");, +    assertThat(nothing).iteratesAs("");, +    assertThat(Splitter.on('.').omitEmptyStrings().split("")).isEmpty();, +    assertThat(blankblank).iteratesAs("", "");, +    assertThat(empty).isEmpty();, +    assertThat(family).iteratesAs(, +    assertThat(letters).iteratesAs("a", "b", "c");, +    assertThat(letters).iteratesAs("a,b,c");, +    assertThat(letters).iteratesAs("a", "", "b", "c");, +    assertThat(letters).iteratesAs("a", "", " b", "c");, +    assertThat(letters).iteratesAs("a", "b", "c", "");, +    assertThat(letters).iteratesAs("", "a", "b", "c");, +    assertThat(testStringingMotto).iteratesAs(]