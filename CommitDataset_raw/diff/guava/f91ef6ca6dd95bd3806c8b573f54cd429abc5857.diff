[+++ b/android/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java, +import com.google.common.collect.ImmutableList;, + * Benchmarks for the {@code TreeTraverser} operations on binary trees., +          return Optional.presentInstances(ImmutableList.of(root.left, root.right));, +    this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);, +++ b/android/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java, +import com.google.common.collect.ImmutableList;, + * Benchmarks for the {@code TreeTraverser} operations on binary trees., +          return Optional.presentInstances(ImmutableList.of(root.left, root.right));, +    this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);, +++ b/android/guava-tests/test/com/google/common/collect/TreeTraverserTest.java, +  private static class Node {, +, +    Node(char value) {, +      this.value = value;, +    }, +  }, +, +  private static final class Tree extends Node {, +      super(value);, +  static String iterationOrder(Iterable<? extends Node> iterable) {, +    for (Node t : iterable) {, +++ b/android/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java, +import com.google.common.collect.ImmutableList;, + * Benchmarks for the {@code TreeTraverser} operations on binary trees., +          return Optional.presentInstances(ImmutableList.of(root.left, root.right));, +    this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);, +++ b/android/guava-tests/test/com/google/common/collect/TreeTraverserTest.java, +  private static class Node {, +, +    Node(char value) {, +      this.value = value;, +    }, +  }, +, +  private static final class Tree extends Node {, +      super(value);, +  static String iterationOrder(Iterable<? extends Node> iterable) {, +    for (Node t : iterable) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/android/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java, +import com.google.common.collect.ImmutableList;, + * Benchmarks for the {@code TreeTraverser} operations on binary trees., +          return Optional.presentInstances(ImmutableList.of(root.left, root.right));, +    this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);, +++ b/android/guava-tests/test/com/google/common/collect/TreeTraverserTest.java, +  private static class Node {, +, +    Node(char value) {, +      this.value = value;, +    }, +  }, +, +  private static final class Tree extends Node {, +      super(value);, +  static String iterationOrder(Iterable<? extends Node> iterable) {, +    for (Node t : iterable) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/android/guava/src/com/google/common/base/Predicates.java, +   *     to be removed in April 2018., +  // TODO(b/72241559): Remove by 2018-04, +++ b/android/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java, +import com.google.common.collect.ImmutableList;, + * Benchmarks for the {@code TreeTraverser} operations on binary trees., +          return Optional.presentInstances(ImmutableList.of(root.left, root.right));, +    this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);, +++ b/android/guava-tests/test/com/google/common/collect/TreeTraverserTest.java, +  private static class Node {, +, +    Node(char value) {, +      this.value = value;, +    }, +  }, +, +  private static final class Tree extends Node {, +      super(value);, +  static String iterationOrder(Iterable<? extends Node> iterable) {, +    for (Node t : iterable) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +++ b/android/guava/src/com/google/common/base/Predicates.java, +   *     to be removed in April 2018., +  // TODO(b/72241559): Remove by 2018-04, +++ /dev/null, +++ b/android/guava-tests/benchmark/com/google/common/collect/BinaryTreeTraverserBenchmark.java, +import com.google.common.collect.ImmutableList;, + * Benchmarks for the {@code TreeTraverser} operations on binary trees., +          return Optional.presentInstances(ImmutableList.of(root.left, root.right));, +    this.view = traversal.view(topology.createTree(size, rng).get(), VIEWER);, +++ b/android/guava-tests/test/com/google/common/collect/TreeTraverserTest.java, +  private static class Node {, +, +    Node(char value) {, +      this.value = value;, +    }, +  }, +, +  private static final class Tree extends Node {, +      super(value);, +  static String iterationOrder(Iterable<? extends Node> iterable) {, +    for (Node t : iterable) {]