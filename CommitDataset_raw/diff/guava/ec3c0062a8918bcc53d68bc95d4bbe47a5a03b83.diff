[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import com.google.common.primitives.Bytes;, +import java.util.Random;, +  public void testEqual() throws IOException {, +    equalHelper(false, 0, 1);, +    equalHelper(false, 400, 10000);, +    equalHelper(false, 0x2000, 0x2001);, +    equalHelper(false, new byte[]{ 0 }, new byte[]{ 1 });, +, +    byte[] mutate = newPreFilledByteArray(10000);, +    mutate[9000] = 0;, +    equalHelper(false, mutate, newPreFilledByteArray(10000));, +, +    equalHelper(true, 0, 0);, +    equalHelper(true, 1, 1);, +    equalHelper(true, 400, 400);, +, +    final byte[] tenK = newPreFilledByteArray(10000);, +    equalHelper(true, tenK, tenK);, +    assertTrue(ByteStreams.equal(ByteStreams.newInputStreamSupplier(tenK),, +        new InputSupplier<InputStream>() {, +          @Override, +          public InputStream getInput() {, +            return new RandomAmountInputStream(new ByteArrayInputStream(tenK),, +                new Random(301));, +          }, +        }));, +  }, +, +    assertEquals(BYTES, actual);, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, Arrays.copyOfRange(actual, 2, actual.length));, +    assertEquals(BYTES, out.toByteArray());, +    assertEquals(BYTES, out.toByteArray());, +, +  private static void assertEquals(byte[] expected, byte[] actual) {, +    assertEquals(Bytes.asList(expected), Bytes.asList(actual));, +  }, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +import com.google.common.primitives.Bytes;, +import java.util.Random;, +  public void testEqual() throws IOException {, +    equalHelper(false, 0, 1);, +    equalHelper(false, 400, 10000);, +    equalHelper(false, 0x2000, 0x2001);, +    equalHelper(false, new byte[]{ 0 }, new byte[]{ 1 });, +, +    byte[] mutate = newPreFilledByteArray(10000);, +    mutate[9000] = 0;, +    equalHelper(false, mutate, newPreFilledByteArray(10000));, +, +    equalHelper(true, 0, 0);, +    equalHelper(true, 1, 1);, +    equalHelper(true, 400, 400);, +, +    final byte[] tenK = newPreFilledByteArray(10000);, +    equalHelper(true, tenK, tenK);, +    assertTrue(ByteStreams.equal(ByteStreams.newInputStreamSupplier(tenK),, +        new InputSupplier<InputStream>() {, +          @Override, +          public InputStream getInput() {, +            return new RandomAmountInputStream(new ByteArrayInputStream(tenK),, +                new Random(301));, +          }, +        }));, +  }, +, +    assertEquals(BYTES, actual);, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, Arrays.copyOfRange(actual, 2, actual.length));, +    assertEquals(BYTES, out.toByteArray());, +    assertEquals(BYTES, out.toByteArray());, +, +  private static void assertEquals(byte[] expected, byte[] actual) {, +    assertEquals(Bytes.asList(expected), Bytes.asList(actual));, +  }, +++ b/guava-tests/test/com/google/common/io/LittleEndianDataOutputStreamTest.java, +import com.google.common.primitives.Bytes;, +    assertEquals("r\u00C9sum\u00C9".getBytes(Charsets.ISO_8859_1), b);, +    assertEquals(expected, b);, +  private static void assertEquals(byte[] expected, byte[] actual) {, +    assertEquals(Bytes.asList(expected), Bytes.asList(actual));, +  }]