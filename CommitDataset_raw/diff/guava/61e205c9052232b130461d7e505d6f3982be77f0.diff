[+++ b/guava/src/com/google/common/collect/ComputingCache.java, +import javax.annotation.Nullable;, +, +  public void invalidate(@Nullable Object key) {, +++ b/guava/src/com/google/common/collect/ComputingCache.java, +import javax.annotation.Nullable;, +, +  public void invalidate(@Nullable Object key) {, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +    int hash = hash(checkNotNull(key));, +++ b/guava/src/com/google/common/collect/ComputingCache.java, +import javax.annotation.Nullable;, +, +  public void invalidate(@Nullable Object key) {, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +    int hash = hash(checkNotNull(key));, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +    int h = keyEquivalence.hash(key);, +  public V get(@Nullable Object key) {, +    if (key == null) {, +      return null;, +    }, +  public boolean containsKey(@Nullable Object key) {, +    if (key == null) {, +      return false;, +    }, +  public boolean containsValue(@Nullable Object value) {, +    if (value == null) {, +      return false;, +    }, +    checkNotNull(key);, +    checkNotNull(value);, +    checkNotNull(key);, +    checkNotNull(value);, +  public V remove(@Nullable Object key) {, +    if (key == null) {, +      return null;, +    }, +  public boolean remove(@Nullable Object key, @Nullable Object value) {, +    if (key == null || value == null) {, +      return false;, +    }, +  public boolean replace(K key, @Nullable V oldValue, V newValue) {, +    checkNotNull(key);, +    checkNotNull(newValue);, +    if (oldValue == null) {, +      return false;, +    }, +    checkNotNull(key);, +    checkNotNull(value);, +++ b/guava/src/com/google/common/collect/ComputingCache.java, +import javax.annotation.Nullable;, +, +  public void invalidate(@Nullable Object key) {, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +    int hash = hash(checkNotNull(key));, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +    int h = keyEquivalence.hash(key);, +  public V get(@Nullable Object key) {, +    if (key == null) {, +      return null;, +    }, +  public boolean containsKey(@Nullable Object key) {, +    if (key == null) {, +      return false;, +    }, +  public boolean containsValue(@Nullable Object value) {, +    if (value == null) {, +      return false;, +    }, +    checkNotNull(key);, +    checkNotNull(value);, +    checkNotNull(key);, +    checkNotNull(value);, +  public V remove(@Nullable Object key) {, +    if (key == null) {, +      return null;, +    }, +  public boolean remove(@Nullable Object key, @Nullable Object value) {, +    if (key == null || value == null) {, +      return false;, +    }, +  public boolean replace(K key, @Nullable V oldValue, V newValue) {, +    checkNotNull(key);, +    checkNotNull(newValue);, +    if (oldValue == null) {, +      return false;, +    }, +    checkNotNull(key);, +    checkNotNull(value);, +++ b/guava/src/com/google/common/collect/EvictionListeners.java, +   * @deprecated <b>This method is scheduled for deletion in Guava release 11.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/collect/ComputingCache.java, +import javax.annotation.Nullable;, +, +  public void invalidate(@Nullable Object key) {, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +    int hash = hash(checkNotNull(key));, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java]