[+++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +  // TODO(kevinb): considering having these implement a VisitablePredicate, +  // interface which specifies an accept(PredicateVisitor) method., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +  // TODO(kevinb): considering having these implement a VisitablePredicate, +  // interface which specifies an accept(PredicateVisitor) method., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  // TODO(kevinb): throw if a trimmer was already specified!, +   * Copied from common.collect.AbstractIterator. TODO(kevinb): un-fork if these, +   * packages are ever combined into a single library., +  private abstract static class AbstractIterator<T> implements Iterator<T> {, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +  // TODO(kevinb): considering having these implement a VisitablePredicate, +  // interface which specifies an accept(PredicateVisitor) method., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  // TODO(kevinb): throw if a trimmer was already specified!, +   * Copied from common.collect.AbstractIterator. TODO(kevinb): un-fork if these, +   * packages are ever combined into a single library., +  private abstract static class AbstractIterator<T> implements Iterator<T> {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  // TODO(kevinb): test whether a custom IntegerHolder would be faster, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +  // TODO(kevinb): considering having these implement a VisitablePredicate, +  // interface which specifies an accept(PredicateVisitor) method., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  // TODO(kevinb): throw if a trimmer was already specified!, +   * Copied from common.collect.AbstractIterator. TODO(kevinb): un-fork if these, +   * packages are ever combined into a single library., +  private abstract static class AbstractIterator<T> implements Iterator<T> {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  // TODO(kevinb): test whether a custom IntegerHolder would be faster, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +    // TODO(hhchan): Revert once this class is emulated in GWT., +    // TODO(hhchan): Revert once this class is emulated in GWT., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +  // TODO(kevinb): considering having these implement a VisitablePredicate, +  // interface which specifies an accept(PredicateVisitor) method., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  // TODO(kevinb): throw if a trimmer was already specified!, +   * Copied from common.collect.AbstractIterator. TODO(kevinb): un-fork if these, +   * packages are ever combined into a single library., +  private abstract static class AbstractIterator<T> implements Iterator<T> {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  // TODO(kevinb): test whether a custom IntegerHolder would be faster, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +    // TODO(hhchan): Revert once this class is emulated in GWT., +    // TODO(hhchan): Revert once this class is emulated in GWT., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +  // TODO(kevinb): Fix this so that two copies of the entries are not created., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +  // TODO(kevinb): considering having these implement a VisitablePredicate, +  // interface which specifies an accept(PredicateVisitor) method., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  // TODO(kevinb): throw if a trimmer was already specified!, +   * Copied from common.collect.AbstractIterator. TODO(kevinb): un-fork if these, +   * packages are ever combined into a single library., +  private abstract static class AbstractIterator<T> implements Iterator<T> {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  // TODO(kevinb): test whether a custom IntegerHolder would be faster, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +    // TODO(hhchan): Revert once this class is emulated in GWT., +    // TODO(hhchan): Revert once this class is emulated in GWT., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +  // TODO(kevinb): Fix this so that two copies of the entries are not created., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +     * TODO(kevinb): it would probably be better to do this directly instead of, +     * via transform().  The transform() impl isn't all that hard., +    // TODO(kevinb): Support a concurrently modified collection?, +    /*, +     * TODO(kevinb): consider whether this "optimization" is worthwhile. Users, +     * with SortedSets tend to know they are SortedSets and probably would not, +     * call this method., +     */, +    /*, +     * TODO(kevinb): consider whether this "optimization" is worthwhile. Users, +     * with SortedSets tend to know they are SortedSets and probably would not, +     * call this method., +     */, +          // TODO(kevinb): Support a concurrently modified collection?, +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Predicates.java, +  // TODO(kevinb): considering having these implement a VisitablePredicate, +  // interface which specifies an accept(PredicateVisitor) method., +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  // TODO(kevinb): throw if a trimmer was already specified!, +   * Copied from common.collect.AbstractIterator. TODO(kevinb): un-fork if these, +   * packages are ever combined into a single library., +  private abstract static class AbstractIterator<T> implements Iterator<T> {, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultiset.java, +  // TODO(kevinb): test whether a custom IntegerHolder would be faster, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, +    // TODO(hhchan): Revert once this class is emulated in GWT., +    // TODO(hhchan): Revert once this class is emulated in GWT., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +  // TODO(kevinb): Fix this so that two copies of the entries are not created., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +     * TODO(kevinb): it would probably be better to do this directly instead of, +     * via transform().  The transform() impl isn't all that hard., +    // TODO(kevinb): Support a concurrently modified collection?, +    /*, +     * TODO(kevinb): consider whether this "optimization" is worthwhile. Users]