[+++ b/guava-gwt/test/com/google/common/collect/ContiguousSetTest_gwt.java, +public void testAsList() throws Exception {, +  com.google.common.collect.ContiguousSetTest testCase = new com.google.common.collect.ContiguousSetTest();, +  testCase.testAsList();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ContiguousSetTest_gwt.java, +public void testAsList() throws Exception {, +  com.google.common.collect.ContiguousSetTest testCase = new com.google.common.collect.ContiguousSetTest();, +  testCase.testAsList();, +}, +, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testAsList() {, +    ImmutableList<Integer> list = ContiguousSet.create(Range.closed(1, 3), integers()).asList();, +    for (int i = 0; i < 3; i++) {, +      assertEquals(i + 1, list.get(i).intValue());, +    }, +    assertEquals(ImmutableList.of(1, 2, 3), ImmutableList.copyOf(list.iterator()));, +    assertEquals(ImmutableList.of(1, 2, 3), ImmutableList.copyOf(list.toArray(new Integer[0])));, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/ContiguousSetTest_gwt.java, +public void testAsList() throws Exception {, +  com.google.common.collect.ContiguousSetTest testCase = new com.google.common.collect.ContiguousSetTest();, +  testCase.testAsList();, +}, +, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testAsList() {, +    ImmutableList<Integer> list = ContiguousSet.create(Range.closed(1, 3), integers()).asList();, +    for (int i = 0; i < 3; i++) {, +      assertEquals(i + 1, list.get(i).intValue());, +    }, +    assertEquals(ImmutableList.of(1, 2, 3), ImmutableList.copyOf(list.iterator()));, +    assertEquals(ImmutableList.of(1, 2, 3), ImmutableList.copyOf(list.toArray(new Integer[0])));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/DiscreteDomainTest.java, +import java.math.BigInteger;, +, +  public void testIntegersOffset() {, +    assertEquals(1, DiscreteDomain.integers().offset(0, 1).intValue());, +    assertEquals(, +        Integer.MAX_VALUE,, +        DiscreteDomain.integers().offset(Integer.MIN_VALUE, (1L << 32) - 1).intValue());, +  }, +, +  public void testIntegersOffsetExceptions() {, +    try {, +      DiscreteDomain.integers().offset(0, -1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      DiscreteDomain.integers().offset(Integer.MAX_VALUE, 1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testLongsOffset() {, +    assertEquals(1, DiscreteDomain.longs().offset(0L, 1).longValue());, +    assertEquals(Long.MAX_VALUE, DiscreteDomain.longs().offset(0L, Long.MAX_VALUE).longValue());, +  }, +, +  public void testLongsOffsetExceptions() {, +    try {, +      DiscreteDomain.longs().offset(0L, -1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +    try {, +      DiscreteDomain.longs().offset(Long.MAX_VALUE, 1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testBigIntegersOffset() {, +    assertEquals(BigInteger.ONE, DiscreteDomain.bigIntegers().offset(BigInteger.ZERO, 1));, +    assertEquals(, +        BigInteger.valueOf(Long.MAX_VALUE),, +        DiscreteDomain.bigIntegers().offset(BigInteger.ZERO, Long.MAX_VALUE));, +  }, +, +  public void testBigIntegersOffsetExceptions() {, +    try {, +      DiscreteDomain.bigIntegers().offset(BigInteger.ZERO, -1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +++ b/guava-gwt/test/com/google/common/collect/ContiguousSetTest_gwt.java, +public void testAsList() throws Exception {, +  com.google.common.collect.ContiguousSetTest testCase = new com.google.common.collect.ContiguousSetTest();, +  testCase.testAsList();, +}, +, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java]