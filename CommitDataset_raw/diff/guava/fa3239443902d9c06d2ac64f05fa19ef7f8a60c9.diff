[+++ b/android/guava-tests/test/com/google/common/graph/TraverserTest.java, +import static org.junit.Assert.fail;, +  /**, +   * A tree-shaped graph that looks as follows (all edges are directed facing downwards):, +   *, +   * <pre>{@code, +   *        h, +   *       /|\, +   *      / | \, +   *     /  |  \, +   *    d   e   g, +   *   /|\      |, +   *  / | \     |, +   * a  b  c    f, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> TREE =, +      createDirectedGraph("hd", "he", "hg", "da", "db", "dc", "gf");, +, +  /**, +   * A graph that is not a tree (for example, it has two antiparallel edge between {@code e} and, +   * {@code f} and thus has a cycle) but is a valid input to {@link Traverser#forTree} when starting, +   * e.g. at node {@code a} (all edges without an arrow are directed facing downwards):, +   *, +   * <pre>{@code, +   *     a, +   *    /, +   *   b   e <----> f, +   *  / \ /, +   * c   d, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> CYCLIC_GRAPH_CONTAINING_TREE =, +      createDirectedGraph("ab", "bc", "bd", "ed", "ef", "fe");, +, +  /**, +   * A graph that is not a tree (for example, {@code h} is reachable from {@code f} via both {@code, +   * e} and {@code g}) but is a valid input to {@link Traverser#forTree} when starting e.g. at node, +   * {@code a} (all edges are directed facing downwards):, +   *, +   * <pre>{@code, +   *     a   f, +   *    /   / \, +   *   b   e   g, +   *  / \ / \ /, +   * c   d   h, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> GRAPH_CONTAINING_TREE_AND_DIAMOND =, +      createDirectedGraph("ab", "fe", "fg", "bc", "bd", "ed", "eh", "gh");, +, +  @Test, +  public void forGraph_breadthFirst_tree() throws Exception {, +    Traverser<Character> traverser = Traverser.forGraph(TREE);, +, +    assertEqualCharNodes(traverser.breadthFirst('h'), "hdegabcf");, +    assertEqualCharNodes(traverser.breadthFirst('d'), "dabc");, +    assertEqualCharNodes(traverser.breadthFirst('a'), "a");, +  }, +, +  public void forGraph_depthFirstPreOrder_tree() throws Exception {, +    Traverser<Character> traverser = Traverser.forGraph(TREE);, +, +    assertEqualCharNodes(traverser.depthFirstPreOrder('h'), "hdabcegf");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('d'), "dabc");, +    assertEqualCharNodes(traverser.depthFirstPreOrder('a'), "a");, +  }, +, +  @Test, +  public void forGraph_depthFirstPostOrder_tree() throws Exception {, +    Traverser<Character> traverser = Traverser.forGraph(TREE);, +, +    assertEqualCharNodes(traverser.depthFirstPostOrder('h'), "abcdefgh");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('d'), "abcd");, +    assertEqualCharNodes(traverser.depthFirstPostOrder('a'), "a");, +  }, +, +  @Test, +  @Test, +  @SuppressWarnings("CheckReturnValue"), +  public void forTree_acceptsDirectedGraph() throws Exception {, +    MutableGraph<String> graph = GraphBuilder.directed().build();, +    graph.putEdge("a", "b");, +, +    Traverser.forTree(graph); // Does not throw, +  }, +, +  @Test, +  public void forTree_withUndirectedGraph_throws() throws Exception {, +    MutableGraph<String> graph = GraphBuilder.undirected().build();, +    graph.putEdge("a", "b");, +, +    try {, +      Traverser.forTree(graph);, +      fail("Expected exception");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test]