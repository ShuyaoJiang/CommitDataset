[+++ b/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +import junit.framework.TestCase;, +import sun.misc.FpUtils;, +, +      assertEquals(FpUtils.nextDown(d), DoubleUtils.nextDown(d));, +++ b/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +import junit.framework.TestCase;, +import sun.misc.FpUtils;, +, +      assertEquals(FpUtils.nextDown(d), DoubleUtils.nextDown(d));, +++ b/guava/src/com/google/common/math/BigIntegerMath.java, +    if(log2 < Double.MAX_EXPONENT) {, +++ b/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +import junit.framework.TestCase;, +import sun.misc.FpUtils;, +, +      assertEquals(FpUtils.nextDown(d), DoubleUtils.nextDown(d));, +++ b/guava/src/com/google/common/math/BigIntegerMath.java, +    if(log2 < Double.MAX_EXPONENT) {, +++ b/guava/src/com/google/common/math/DoubleMath.java, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.VisibleForTesting;, +, +          return (z == x) ? x : DoubleUtils.nextDown(z); // x + 0.5 - epsilon, +          return (z == x) ? x : Math.nextUp(z); // x - 0.5 + epsilon, +    int exponent = Math.getExponent(x);, +    int exponent = Math.getExponent(x);, +            - Long.numberOfTrailingZeros(getSignificand(x)) <= Math.getExponent(x));, +++ b/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +import junit.framework.TestCase;, +import sun.misc.FpUtils;, +, +      assertEquals(FpUtils.nextDown(d), DoubleUtils.nextDown(d));, +++ b/guava/src/com/google/common/math/BigIntegerMath.java, +    if(log2 < Double.MAX_EXPONENT) {, +++ b/guava/src/com/google/common/math/DoubleMath.java, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.VisibleForTesting;, +, +          return (z == x) ? x : DoubleUtils.nextDown(z); // x + 0.5 - epsilon, +          return (z == x) ? x : Math.nextUp(z); // x - 0.5 + epsilon, +    int exponent = Math.getExponent(x);, +    int exponent = Math.getExponent(x);, +            - Long.numberOfTrailingZeros(getSignificand(x)) <= Math.getExponent(x));, +++ b/guava/src/com/google/common/math/DoubleUtils.java, +  static double nextDown(double d) {, +    return -Math.nextUp(-d);, +    int exponent = Math.getExponent(d);, +    return (exponent == Double.MIN_EXPONENT - 1) , +    return Math.getExponent(d) <= Double.MAX_EXPONENT;, +    return Math.getExponent(d) >= Double.MIN_EXPONENT;, +    } else if (exponent > Double.MAX_EXPONENT) {]