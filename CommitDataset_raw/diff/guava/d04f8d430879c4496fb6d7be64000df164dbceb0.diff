[+++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/BigIntegerMath.java, +    if (n < LongMath.factorials.length) {, +      return BigInteger.valueOf(LongMath.factorials[n]);, +    int startingNumber = LongMath.factorials.length;, +    long product = LongMath.factorials[startingNumber - 1];, +    if (k < LongMath.biggestBinomials.length && n <= LongMath.biggestBinomials[k]) {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/BigIntegerMath.java, +    if (n < LongMath.factorials.length) {, +      return BigInteger.valueOf(LongMath.factorials[n]);, +    int startingNumber = LongMath.factorials.length;, +    long product = LongMath.factorials[startingNumber - 1];, +    if (k < LongMath.biggestBinomials.length && n <= LongMath.biggestBinomials[k]) {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +    int y = maxLog10ForLeadingZeros[Integer.numberOfLeadingZeros(x)];, +    int sgn = (x - powersOf10[y]) >>> (Integer.SIZE - 1);, +  // maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i))), +  @VisibleForTesting static final byte[] maxLog10ForLeadingZeros = {9, 9, 9, 8, 8, 8,, +  @VisibleForTesting static final int[] powersOf10 = {1, 10, 100, 1000, 10000,, +  // halfPowersOf10[i] = largest int less than 10^(i + 0.5), +  @VisibleForTesting static final int[] halfPowersOf10 =, +    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;, +  private static final int[] factorials = {, +  // binomial(biggestBinomials[k], k) fits in an int, but not binomial(biggestBinomials[k]+1,k)., +  @VisibleForTesting static int[] biggestBinomials = {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/BigIntegerMath.java, +    if (n < LongMath.factorials.length) {, +      return BigInteger.valueOf(LongMath.factorials[n]);, +    int startingNumber = LongMath.factorials.length;, +    long product = LongMath.factorials[startingNumber - 1];, +    if (k < LongMath.biggestBinomials.length && n <= LongMath.biggestBinomials[k]) {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +    int y = maxLog10ForLeadingZeros[Integer.numberOfLeadingZeros(x)];, +    int sgn = (x - powersOf10[y]) >>> (Integer.SIZE - 1);, +  // maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i))), +  @VisibleForTesting static final byte[] maxLog10ForLeadingZeros = {9, 9, 9, 8, 8, 8,, +  @VisibleForTesting static final int[] powersOf10 = {1, 10, 100, 1000, 10000,, +  // halfPowersOf10[i] = largest int less than 10^(i + 0.5), +  @VisibleForTesting static final int[] halfPowersOf10 =, +    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;, +  private static final int[] factorials = {, +  // binomial(biggestBinomials[k], k) fits in an int, but not binomial(biggestBinomials[k]+1,k)., +  @VisibleForTesting static int[] biggestBinomials = {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +  // maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i))), +  @VisibleForTesting static final byte[] maxLog10ForLeadingZeros = {, +  // halfPowersOf10[i] = largest long less than 10^(i + 0.5), +  static final long[] factorials = {, +    if (k >= biggestBinomials.length || n > biggestBinomials[k]) {, +    if (k < biggestSimpleBinomials.length && n <= biggestSimpleBinomials[k]) {, +   * binomial(biggestBinomials[k], k) fits in a long, but not, +   * binomial(biggestBinomials[k] + 1, k)., +  static final int[] biggestBinomials =, +   * binomial(biggestSimpleBinomials[k], k) doesn't need to use the slower GCD-based impl,, +   * but binomial(biggestSimpleBinomials[k] + 1, k) does., +  @VisibleForTesting static final int[] biggestSimpleBinomials =, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/BigIntegerMath.java, +    if (n < LongMath.factorials.length) {, +      return BigInteger.valueOf(LongMath.factorials[n]);, +    int startingNumber = LongMath.factorials.length;, +    long product = LongMath.factorials[startingNumber - 1];, +    if (k < LongMath.biggestBinomials.length && n <= LongMath.biggestBinomials[k]) {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +    int y = maxLog10ForLeadingZeros[Integer.numberOfLeadingZeros(x)];, +    int sgn = (x - powersOf10[y]) >>> (Integer.SIZE - 1);, +  // maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i))), +  @VisibleForTesting static final byte[] maxLog10ForLeadingZeros = {9, 9, 9, 8, 8, 8,, +  @VisibleForTesting static final int[] powersOf10 = {1, 10, 100, 1000, 10000,, +  // halfPowersOf10[i] = largest int less than 10^(i + 0.5), +  @VisibleForTesting static final int[] halfPowersOf10 =, +    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;, +  private static final int[] factorials = {, +  // binomial(biggestBinomials[k], k) fits in an int, but not binomial(biggestBinomials[k]+1,k)., +  @VisibleForTesting static int[] biggestBinomials = {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +  // maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i))), +  @VisibleForTesting static final byte[] maxLog10ForLeadingZeros = {, +  // halfPowersOf10[i] = largest long less than 10^(i + 0.5), +  static final long[] factorials = {, +    if (k >= biggestBinomials.length || n > biggestBinomials[k]) {, +    if (k < biggestSimpleBinomials.length && n <= biggestSimpleBinomials[k]) {, +   * binomial(biggestBinomials[k], k) fits in a long, but not, +   * binomial(biggestBinomials[k] + 1, k)., +  static final int[] biggestBinomials =, +   * binomial(biggestSimpleBinomials[k], k) doesn't need to use the slower GCD-based impl,, +   * but binomial(biggestSimpleBinomials[k] + 1, k) does., +  @VisibleForTesting static final int[] biggestSimpleBinomials =, +++ b/guava-tests/benchmark/com/google/common/math/ApacheBenchmark.java, +      int k = binomials[i][1] = RANDOM_SOURCE.nextInt(MathBenchmarking.biggestBinomials.length);, +      binomials[i][0] = RANDOM_SOURCE.nextInt(MathBenchmarking.biggestBinomials[k] - k) + k;, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/BigIntegerMath.java, +    if (n < LongMath.factorials.length) {, +      return BigInteger.valueOf(LongMath.factorials[n]);, +    int startingNumber = LongMath.factorials.length;, +    long product = LongMath.factorials[startingNumber - 1];, +    if (k < LongMath.biggestBinomials.length && n <= LongMath.biggestBinomials[k]) {, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +    int y = maxLog10ForLeadingZeros[Integer.numberOfLeadingZeros(x)];, +    int sgn = (x - powersOf10[y]) >>> (Integer.SIZE - 1);, +  // maxLog10ForLeadingZeros[i] == floor(log10(2^(Long.SIZE - i))), +  @VisibleForTesting static final byte[] maxLog10ForLeadingZeros = {9, 9, 9, 8, 8, 8,]