[+++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        boolean connected = !edgesConnecting.isEmpty();, +          assertThat(connected).isFalse();, +        assertThat(network.successors(node).contains(otherNode)).isEqualTo(connected);, +        assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(connected);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        boolean connected = !edgesConnecting.isEmpty();, +          assertThat(connected).isFalse();, +        assertThat(network.successors(node).contains(otherNode)).isEqualTo(connected);, +        assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(connected);, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.graph.GraphConstants.EDGE_CONNECTING_NOT_IN_GRAPH;, +import static com.google.common.graph.GraphConstants.NODE_NOT_IN_GRAPH;, +  public V edgeValue(Object nodeU, Object nodeV) {, +    V value = edgeValueOrDefault(nodeU, nodeV, null);, +    if (value == null) {, +      checkArgument(nodes().contains(nodeU), NODE_NOT_IN_GRAPH, nodeU);, +      checkArgument(nodes().contains(nodeV), NODE_NOT_IN_GRAPH, nodeV);, +      throw new IllegalArgumentException(String.format(EDGE_CONNECTING_NOT_IN_GRAPH, nodeU, nodeV));, +    }, +    return value;, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        boolean connected = !edgesConnecting.isEmpty();, +          assertThat(connected).isFalse();, +        assertThat(network.successors(node).contains(otherNode)).isEqualTo(connected);, +        assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(connected);, +++ b/guava/src/com/google/common/graph/AbstractValueGraph.java, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.graph.GraphConstants.EDGE_CONNECTING_NOT_IN_GRAPH;, +import static com.google.common.graph.GraphConstants.NODE_NOT_IN_GRAPH;, +  public V edgeValue(Object nodeU, Object nodeV) {, +    V value = edgeValueOrDefault(nodeU, nodeV, null);, +    if (value == null) {, +      checkArgument(nodes().contains(nodeU), NODE_NOT_IN_GRAPH, nodeU);, +      checkArgument(nodes().contains(nodeV), NODE_NOT_IN_GRAPH, nodeV);, +      throw new IllegalArgumentException(String.format(EDGE_CONNECTING_NOT_IN_GRAPH, nodeU, nodeV));, +    }, +    return value;, +++ b/guava/src/com/google/common/graph/ConfigurableValueGraph.java, +        0L);, +  public V edgeValueOrDefault(Object nodeU, Object nodeV, @Nullable V defaultValue) {, +    GraphConnections<N, V> connectionsU = nodeConnections.get(nodeU);, +    if (connectionsU == null) {, +      return defaultValue;, +    }, +    V value = connectionsU.value(nodeV);, +      return defaultValue;]