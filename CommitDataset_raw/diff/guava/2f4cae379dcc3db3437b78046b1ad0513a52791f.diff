[+++ b/guava/src/com/google/common/collect/Multisets.java, +import com.google.common.base.Function;, +    @Override public Set<Entry<E>> entrySet() {, +      if (es == null) {, +        es = new EntrySet<E>() {, +          @Override Multiset<E> multiset() {, +            return SetMultiset.this;, +          }, +, +          @Override public Iterator<Entry<E>> iterator() {, +            return Iterators.transform(delegate.iterator(),, +                new Function<E, Entry<E>>() {, +                  @Override public Entry<E> apply(E elem) {, +                    return immutableEntry(elem, 1);, +                  }, +                });, +          }, +, +          @Override public int size() {, +            return delegate.size();, +          }, +        };, +      }, +      return es;, +    // TODO(user): retrofit once AbstractMultiset is updated to use the, +    // new EntrySet skeleton, +      private transient Set<Entry<E>> entrySet;, +, +      @Override, +      public Set<Entry<E>> entrySet() {, +        Set<Entry<E>> result = entrySet;, +        if (result == null) {, +          final Multiset<E> self = this;, +          return entrySet = new Multisets.EntrySet<E>() {, +            @Override, +            Multiset<E> multiset() {, +              return self;, +            @Override, +            public Iterator<Multiset.Entry<E>> iterator() {, +              return entryIterator();, +            }, +, +            @Override, +            public int size() {, +              return distinctElements();, +            }, +          };, +        }, +        return result;, +      }, +, +      Iterator<Entry<E>> entryIterator() {, +              int count = Math.min(entry1.getCount(), multiset2.count(element));, +      int distinctElements() {, +  static <E> Set<E> elementSetImpl(final Multiset<E> multiset) {, +    // TODO(user): inline this, +    checkNotNull(multiset);, +    return new ElementSet<E>() {, +      @Override Multiset<E> multiset() {, +        return multiset;, +  static abstract class ElementSet<E> extends AbstractSet<E> {, +    abstract Multiset<E> multiset();, +, +    @Override public void clear() {, +      multiset().clear();, +    }, +, +    @Override public boolean contains(Object o) {, +      return multiset().contains(o);, +    }, +, +    @Override public boolean containsAll(Collection<?> c) {, +      return multiset().containsAll(c);, +    }, +, +    @Override public boolean isEmpty() {, +      return multiset().isEmpty();, +    }, +, +    @Override public Iterator<E> iterator() {, +      return Iterators.transform(multiset().entrySet().iterator(),, +          new Function<Entry<E>, E>() {, +            @Override public E apply(Entry<E> entry) {, +              return entry.getElement();, +            }, +          });, +    }, +, +    @SuppressWarnings("unchecked"), +      try {, +        return multiset().setCount((E) o, 0) > 0;, +      } catch (NullPointerException e) {, +        return false;, +      } catch (ClassCastException e) {, +        return false;, +      } catch (UnsupportedOperationException e) {, +        // Some multisets support remove, but not setCount., +        int count = multiset().count(o);, +          multiset().remove(o, count);, +    @Override public int size() {]