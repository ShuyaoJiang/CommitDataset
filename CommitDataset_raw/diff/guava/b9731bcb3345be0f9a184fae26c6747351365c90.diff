[+++ b/guava/src/com/google/common/graph/AbstractConfigurableGraph.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.graph.GraphErrorMessageUtils.ADDING_PARALLEL_EDGE;, +import static com.google.common.graph.GraphErrorMessageUtils.EDGE_NOT_IN_GRAPH;, +import static com.google.common.graph.GraphErrorMessageUtils.NODE_NOT_IN_GRAPH;, +import static com.google.common.graph.GraphErrorMessageUtils.REUSING_EDGE;, +import static com.google.common.graph.GraphErrorMessageUtils.SELF_LOOPS_NOT_ALLOWED;, +, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Maps;, +import com.google.common.collect.Sets;, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +, +/**, + * Configurable implementation of {@link Graph} that supports both directed and undirected graphs., + *, + * <p>This class maintains a map of {@link NodeConnections} for every node, + * and {@link IncidentNodes} for every edge., + *, + * <p>{@code Set}-returning accessors return unmodifiable views: the view returned will reflect, + * changes to the graph (if the graph is mutable) but may not be modified by the user., + * The behavior of the returned view is undefined in the following cases:, + * <ul>, + * <li>Removing the element on which the accessor is called (e.g.:, + *     <pre>{@code, + *     Set<N> adjacentNodes = adjacentNodes(node);, + *     graph.removeNode(node);}</pre>, + *     At this point, the contents of {@code adjacentNodes} are undefined., + * </ul>, + *, + * <p>The time complexity of all {@code Set}-returning accessors is O(1), since we, + * are returning views., + *, + * @author James Sexton, + * @author Joshua O'Madadhain, + * @author Omar Darwish, + * @param <N> Node parameter type, + * @param <E> Edge parameter type, + * @see Graph, + */, +// TODO(b/24620028): Enable this class to support sorted nodes/edges., +abstract class AbstractConfigurableGraph<N, E> extends AbstractGraph<N, E> {, +  // The default of 11 is rather arbitrary, but roughly matches the sizing of just new HashMap(), +  private static final int DEFAULT_MAP_SIZE = 11;, +, +  private final Map<N, NodeConnections<N, E>> nodeConnections;, +  private final Map<E, IncidentNodes<N>> edgeToIncidentNodes;, +, +  /**, +   * Constructs a mutable graph with the specified configuration., +   */, +  AbstractConfigurableGraph(GraphConfig config) {, +    super(config);, +    this.nodeConnections =, +        Maps.newLinkedHashMapWithExpectedSize(config.getExpectedNodeCount().or(DEFAULT_MAP_SIZE));, +    this.edgeToIncidentNodes =, +        Maps.newLinkedHashMapWithExpectedSize(config.getExpectedEdgeCount().or(DEFAULT_MAP_SIZE));, +  }, +, +  /**, +   * Constructs a graph with the specified configuration and node/edge relationships., +   * May be used for immutable graphs., +   */, +  AbstractConfigurableGraph(GraphConfig config, Map<N, NodeConnections<N, E>> nodeConnections,, +      Map<E, IncidentNodes<N>> edgeToIncidentNodes) {, +    super(config);, +    this.nodeConnections = nodeConnections;, +    this.edgeToIncidentNodes = edgeToIncidentNodes;, +  }, +, +  abstract NodeConnections<N, E> newNodeConnections();, +, +  @Override, +  public Set<N> nodes() {, +    return Collections.unmodifiableSet(nodeConnections.keySet());]