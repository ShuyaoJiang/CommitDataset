[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +  public static final CharMatcher BREAKING_WHITESPACE =, +      new CharMatcher() {, +  public static final CharMatcher ASCII =, +      new NamedFastMatcher("CharMatcher.ASCII") {, +  private static final String ZEROES =, +      "0\u0660\u06f0\u07c0\u0966\u09e6\u0a66\u0ae6\u0b66\u0be6\u0c66\u0ce6\u0d66\u0e50\u0ed0\u0f20", +          + "\u1040\u1090\u17e0\u1810\u1946\u19d0\u1b50\u1bb0\u1c40\u1c50\ua620\ua8d0\ua900\uaa50", +          + "\uff10";, +  public static final CharMatcher JAVA_DIGIT =, +      new CharMatcher() {, +        @Override, +        public boolean matches(char c) {, +        @Override, +        public String toString() {, +  public static final CharMatcher JAVA_LETTER =, +      new CharMatcher() {, +        @Override, +        public boolean matches(char c) {, +        @Override, +        public String toString() {, +  public static final CharMatcher JAVA_LETTER_OR_DIGIT =, +      new CharMatcher() {, +        @Override, +        public boolean matches(char c) {, +        @Override, +        public String toString() {, +  public static final CharMatcher JAVA_UPPER_CASE =, +      new CharMatcher() {, +        @Override, +        public boolean matches(char c) {, +        @Override, +        public String toString() {, +  public static final CharMatcher JAVA_LOWER_CASE =, +      new CharMatcher() {, +        @Override, +        public boolean matches(char c) {, +        @Override, +        public String toString() {, +        @Override, +        public boolean matches(char c) {, +  private static final String INVISIBLE_RANGE_STARTS =, +      "\u0000\u007f\u00ad\u0600\u061c\u06dd\u070f\u1680\u180e\u2000\u2028\u205f\u2066\u2067", +          + "\u2068\u2069\u206a\u3000\ud800\ufeff\ufff9\ufffa";, +  private static final String INVISIBLE_RANGE_ENDS =, +      "\u0020\u00a0\u00ad\u0604\u061c\u06dd\u070f\u1680\u180e\u200f\u202f\u2064\u2066\u2067", +          + "\u2068\u2069\u206f\u3000\uf8ff\ufeff\ufff9\ufffb";, +, +  public static final CharMatcher INVISIBLE =, +      new RangesMatcher(, +          "CharMatcher.INVISIBLE",, +          INVISIBLE_RANGE_STARTS.toCharArray(),, +          INVISIBLE_RANGE_ENDS.toCharArray());, +  public static final CharMatcher SINGLE_WIDTH =, +      new RangesMatcher(, +          "CharMatcher.SINGLE_WIDTH",, +  public static final CharMatcher ANY =, +      new NamedFastMatcher("CharMatcher.ANY") {, +        @Override, +        public boolean matches(char c) {, +        @Override, +        public int indexIn(CharSequence sequence, int start) {, +        @Override, +        public int lastIndexIn(CharSequence sequence) {, +        @Override, +        public boolean matchesAllOf(CharSequence sequence) {, +        @Override, +        public String removeFrom(CharSequence sequence) {, +        @Override, +        public String replaceFrom(CharSequence sequence, char replacement) {, +        @Override, +        public String replaceFrom(CharSequence sequence, CharSequence replacement) {, +        @Override, +        public String collapseFrom(CharSequence sequence, char replacement) {, +        @Override, +        public String trimFrom(CharSequence sequence) {, +        @Override, +        public int countIn(CharSequence sequence) {, +        @Override, +        public CharMatcher and(CharMatcher other) {, +        @Override, +        public CharMatcher or(CharMatcher other) {, +        @Override, +        public CharMatcher negate() {, +  public static final CharMatcher NONE =, +      new NamedFastMatcher("CharMatcher.NONE") {, +        @Override, +        public boolean matches(char c) {, +        @Override, +        public int indexIn(CharSequence sequence, int start) {, +        @Override, +        public int lastIndexIn(CharSequence sequence) {, +        @Override, +        public boolean matchesAllOf(CharSequence sequence) {, +        @Override, +        public String removeFrom(CharSequence sequence) {, +        @Override, +        public String collapseFrom(CharSequence sequence, char replacement) {, +        @Override, +        public String trimFrom(CharSequence sequence) {]