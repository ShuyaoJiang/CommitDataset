[+++ b/android/guava-tests/test/com/google/common/net/InternetDomainNameTest.java, +  private static final ImmutableSet<String> RS =, +      ImmutableSet.of(, +          "co.uk.", // Trailing dot, +          "co\uFF61uk", // Alternate dot character, +          "xn--jrpeland-54a.no"); // IDNA (punycode) encoding of above, +, +  private static final ImmutableSet<String> PS_NOT_RS =, +      ImmutableSet.of("blogspot.com", "blogspot.co.uk", "uk.com");, +, +  private static final ImmutableSet<String> PS =, +      ImmutableSet.<String>builder().addAll(RS).addAll(PS_NOT_RS).build();, +  /**, +   * Having a public suffix is equivalent to having a registry suffix, because all registry suffixes, +   * are public suffixes, and all public suffixes have registry suffixes., +   */, +  private static final ImmutableSet<String> NO_RS = NO_PS;, +  private static final ImmutableSet<String> NON_PS =, +      ImmutableSet.of(, +          "foo.bar.com",, +          "foo.ca",, +          "foo.bar.ca",, +          "foo.blogspot.com",, +          "foo.blogspot.co.uk",, +          "foo.uk.com",, +          "foo.bar.co.il",, +          "state.CA.us",, +          "www.state.pa.us",, +          "pvt.k12.ca.us",, +          "www.google.com",, +          "www4.yahoo.co.uk",, +          "home.netscape.com",, +          "web.MIT.edu",, +          "foo.eDu.au",, +          "utenti.blah.IT",, +          "dominio.com.co");, +, +  private static final ImmutableSet<String> NON_RS =, +      ImmutableSet.<String>builder().addAll(NON_PS).addAll(PS_NOT_RS).build();, +, +  private static final ImmutableSet<String> TOP_UNDER_REGISTRY_SUFFIX =, +  private static final ImmutableSet<String> TOP_PRIVATE_DOMAIN =, +      ImmutableSet.of("google.com", "foo.Co.uk", "foo.ca.us.", "foo.blogspot.com");, +, +  private static final ImmutableSet<String> UNDER_TOP_UNDER_REGISTRY_SUFFIX =, +  private static final ImmutableSet<String> UNDER_PRIVATE_DOMAIN =, +      ImmutableSet.of("foo.bar.google.com", "a.b.co.uk", "x.y.ca.us", "a.b.blogspot.com");, +, +  private static final ImmutableSet<String> SOMEWHERE_UNDER_RS =, +      ImmutableSet.<String>builder().addAll(SOMEWHERE_UNDER_PS).addAll(PS_NOT_RS).build();, +, +  public void testRegistrySuffix() {, +    for (String name : RS) {, +      final InternetDomainName domain = InternetDomainName.from(name);, +      assertTrue(name, domain.isRegistrySuffix());, +      assertTrue(name, domain.hasRegistrySuffix());, +      assertFalse(name, domain.isUnderRegistrySuffix());, +      assertFalse(name, domain.isTopDomainUnderRegistrySuffix());, +      assertEquals(domain, domain.registrySuffix());, +    }, +, +    for (String name : NO_RS) {, +      final InternetDomainName domain = InternetDomainName.from(name);, +      assertFalse(name, domain.isRegistrySuffix());, +      assertFalse(name, domain.hasRegistrySuffix());, +      assertFalse(name, domain.isUnderRegistrySuffix());, +      assertFalse(name, domain.isTopDomainUnderRegistrySuffix());, +      assertNull(domain.registrySuffix());, +    }, +, +    for (String name : NON_RS) {, +      final InternetDomainName domain = InternetDomainName.from(name);, +      assertFalse(name, domain.isRegistrySuffix());, +      assertTrue(name, domain.hasRegistrySuffix());, +      assertTrue(name, domain.isUnderRegistrySuffix());, +    }, +  }, +, +  public void testUnderRegistrySuffix() {, +    for (String name : SOMEWHERE_UNDER_RS) {, +      final InternetDomainName domain = InternetDomainName.from(name);, +      assertFalse(name, domain.isRegistrySuffix());, +      assertTrue(name, domain.hasRegistrySuffix());, +      assertTrue(name, domain.isUnderRegistrySuffix());, +    }, +  }, +, +  public void testTopDomainUnderRegistrySuffix() {, +    for (String name : TOP_UNDER_REGISTRY_SUFFIX) {, +      final InternetDomainName domain = InternetDomainName.from(name);, +      assertFalse(name, domain.isRegistrySuffix());, +      assertTrue(name, domain.hasRegistrySuffix());, +      assertTrue(name, domain.isUnderRegistrySuffix());, +      assertTrue(name, domain.isTopDomainUnderRegistrySuffix());, +      assertEquals(domain.parent(), domain.registrySuffix());, +    }, +  }, +, +  public void testUnderTopDomainUnderRegistrySuffix() {, +    for (String name : UNDER_TOP_UNDER_REGISTRY_SUFFIX) {]