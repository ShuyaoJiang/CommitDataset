[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * <p>This overload, which does not accept an executor, uses {@code, +   * directExecutor}, a dangerous choice in some cases. See the discussion in, +   * the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners", +   * refer here to the work done during {@code FutureFallback.create}, not to, +   * any work done to complete the returned {@code Future}., +   * <p>When selecting an executor, note that {@code directExecutor} is, +   * dangerous in some cases. See the discussion in the {@link, +   * ListenableFuture#addListener ListenableFuture.addListener} documentation., +   * The documentation's warnings about "lightweight listeners" refer here to, +   * the work done during {@code FutureFallback.create}, not to any work done to, +   * complete the returned {@code Future}., +   * <p>This overload, which does not accept an executor, uses {@code, +   * directExecutor}, a dangerous choice in some cases. See the discussion in, +   * the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners", +   * refer here to the work done during {@code AsyncFunction.apply}, not to any, +   * work done to complete the returned {@code Future}., +   * <p>When selecting an executor, note that {@code directExecutor} is, +   * dangerous in some cases. See the discussion in the {@link, +   * ListenableFuture#addListener ListenableFuture.addListener} documentation., +   * The documentation's warnings about "lightweight listeners" refer here to, +   * the work done during {@code AsyncFunction.apply}, not to any work done to, +   * complete the returned {@code Future}., +   *, +   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous, +   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener, +   * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight, +   * listeners" refer here to the work done during {@code AsyncFunction.apply}, not to any work done, +   * to complete the returned {@code Future}., +   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See, +   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners" refer here to the, +   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned, +   * {@code Future}., +   *, +   * <p>This overload, which does not accept an executor, uses {@code, +   * directExecutor}, a dangerous choice in some cases. See the discussion in, +   * the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners", +   * refer here to the work done during {@code Function.apply}., +   * <p>When selecting an executor, note that {@code directExecutor} is, +   * dangerous in some cases. See the discussion in the {@link, +   * ListenableFuture#addListener ListenableFuture.addListener} documentation., +   * The documentation's warnings about "lightweight listeners" refer here to, +   * the work done during {@code Function.apply}., +   *, +   * <p>This overload, which does not accept an executor, uses {@code, +   * directExecutor}, a dangerous choice in some cases. See the discussion in, +   * the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation., +   * <p>When selecting an executor, note that {@code directExecutor} is, +   * dangerous in some cases. See the discussion in the {@link, +   * ListenableFuture#addListener ListenableFuture.addListener} documentation., +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * <p>This overload, which does not accept an executor, uses {@code, +   * directExecutor}, a dangerous choice in some cases. See the discussion in, +   * the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners", +   * refer here to the work done during {@code FutureFallback.create}, not to, +   * any work done to complete the returned {@code Future}., +   * <p>When selecting an executor, note that {@code directExecutor} is, +   * dangerous in some cases. See the discussion in the {@link, +   * ListenableFuture#addListener ListenableFuture.addListener} documentation., +   * The documentation's warnings about "lightweight listeners" refer here to, +   * the work done during {@code FutureFallback.create}, not to any work done to, +   * complete the returned {@code Future}., +   * <p>This overload, which does not accept an executor, uses {@code, +   * directExecutor}, a dangerous choice in some cases. See the discussion in, +   * the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners", +   * refer here to the work done during {@code AsyncFunction.apply}, not to any, +   * work done to complete the returned {@code Future}., +   * <p>When selecting an executor, note that {@code directExecutor} is, +   * dangerous in some cases. See the discussion in the {@link, +   * ListenableFuture#addListener ListenableFuture.addListener} documentation., +   * The documentation's warnings about "lightweight listeners" refer here to, +   * the work done during {@code AsyncFunction.apply}, not to any work done to, +   * complete the returned {@code Future}., +   *, +   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous, +   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener, +   * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight, +   * listeners" refer here to the work done during {@code AsyncFunction.apply}, not to any work done, +   * to complete the returned {@code Future}., +   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See, +   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners" refer here to the, +   * work done during {@code AsyncFunction.apply}, not to any work done to complete the returned, +   * {@code Future}., +   *, +   * <p>This overload, which does not accept an executor, uses {@code, +   * directExecutor}, a dangerous choice in some cases. See the discussion in, +   * the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   * documentation. The documentation's warnings about "lightweight listeners", +   * refer here to the work done during {@code Function.apply}., +   * <p>When selecting an executor, note that {@code directExecutor} is, +   * dangerous in some cases. See the discussion in the {@link, +   * ListenableFuture#addListener ListenableFuture.addListener} documentation.]