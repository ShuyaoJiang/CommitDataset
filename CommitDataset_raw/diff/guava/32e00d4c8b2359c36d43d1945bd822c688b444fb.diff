[+++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +  }, +, +  public void testMethod_isVarArgs() throws Exception {, +    Invokable<?, ?> delegate = Prepender.method("privateVarArgsMethod", String[].class);, +    assertTrue(delegate.isVarArgs());, +  }, +, +  public void testConstructor_isVarArgs() throws Exception {, +    Invokable<?, ?> delegate = Prepender.constructor(String[].class);, +    assertTrue(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +  /** Class for testing constructor, static method and instance method. */, +    Prepender(String... varargs) {, +      this(null, 0);, +    }, +, +, +    private void privateVarArgsMethod(String... varargs) {}, +++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +  }, +, +  public void testMethod_isVarArgs() throws Exception {, +    Invokable<?, ?> delegate = Prepender.method("privateVarArgsMethod", String[].class);, +    assertTrue(delegate.isVarArgs());, +  }, +, +  public void testConstructor_isVarArgs() throws Exception {, +    Invokable<?, ?> delegate = Prepender.constructor(String[].class);, +    assertTrue(delegate.isVarArgs());, +    assertFalse(delegate.isVarArgs());, +  /** Class for testing constructor, static method and instance method. */, +    Prepender(String... varargs) {, +      this(null, 0);, +    }, +, +, +    private void privateVarArgsMethod(String... varargs) {}, +++ b/guava/src/com/google/common/reflect/Invokable.java, +  /** Returns {@code true} if this was declared to take a variable number of arguments. */, +  public abstract boolean isVarArgs();, +, +, +    @Override public final boolean isVarArgs() {, +      return method.isVarArgs();, +    }, +, +    @Override public final boolean isVarArgs() {, +      return constructor.isVarArgs();, +    }]