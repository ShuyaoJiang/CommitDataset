[+++ b/guava/src/com/google/common/collect/BSTBalancePolicy.java, +interface BSTBalancePolicy<N extends BSTNode<?, N>> {, +  N balance(BSTNodeFactory<N> nodeFactory, N source, @Nullable N left, @Nullable N right);, +  N combine(BSTNodeFactory<N> nodeFactory, @Nullable N left, @Nullable N right);, +++ b/guava/src/com/google/common/collect/BSTBalancePolicy.java, +interface BSTBalancePolicy<N extends BSTNode<?, N>> {, +  N balance(BSTNodeFactory<N> nodeFactory, N source, @Nullable N left, @Nullable N right);, +  N combine(BSTNodeFactory<N> nodeFactory, @Nullable N left, @Nullable N right);, +++ b/guava/src/com/google/common/collect/BSTInOrderPath.java, +final class BSTInOrderPath<N extends BSTNode<?, N>> extends BSTPath<N, BSTInOrderPath<N>> {, +  public static <N extends BSTNode<?, N>> BSTPathFactory<N, BSTInOrderPath<N>> inOrderFactory() {, +    return new BSTPathFactory<N, BSTInOrderPath<N>>() {, +      public BSTInOrderPath<N> extension(BSTInOrderPath<N> path, BSTSide side) {, +      public BSTInOrderPath<N> initialPath(N root) {, +        return new BSTInOrderPath<N>(root, null, null);, +  private static <N extends BSTNode<?, N>> BSTInOrderPath<N> extension(, +      BSTInOrderPath<N> path, BSTSide side) {, +    return new BSTInOrderPath<N>(tip.getChild(side), side, path);, +  private transient Optional<BSTInOrderPath<N>> prevInOrder;, +  private transient Optional<BSTInOrderPath<N>> nextInOrder;, +  private BSTInOrderPath(N tip, @Nullable BSTSide side, @Nullable BSTInOrderPath<N> tail) {, +  private Optional<BSTInOrderPath<N>> computeNextInOrder() {, +      BSTInOrderPath<N> path = extension(this, RIGHT);, +      BSTInOrderPath<N> current = this;, +  private Optional<BSTInOrderPath<N>> computePrevInOrder() {, +      BSTInOrderPath<N> path = extension(this, LEFT);, +      BSTInOrderPath<N> current = this;, +  private Optional<BSTInOrderPath<N>> nextInOrder() {, +    Optional<BSTInOrderPath<N>> result = nextInOrder;, +  private Optional<BSTInOrderPath<N>> prevInOrder() {, +    Optional<BSTInOrderPath<N>> result = prevInOrder;, +  public BSTInOrderPath<N> next() {, +  public BSTInOrderPath<N> prev() {, +++ b/guava/src/com/google/common/collect/BSTBalancePolicy.java, +interface BSTBalancePolicy<N extends BSTNode<?, N>> {, +  N balance(BSTNodeFactory<N> nodeFactory, N source, @Nullable N left, @Nullable N right);, +  N combine(BSTNodeFactory<N> nodeFactory, @Nullable N left, @Nullable N right);, +++ b/guava/src/com/google/common/collect/BSTInOrderPath.java, +final class BSTInOrderPath<N extends BSTNode<?, N>> extends BSTPath<N, BSTInOrderPath<N>> {, +  public static <N extends BSTNode<?, N>> BSTPathFactory<N, BSTInOrderPath<N>> inOrderFactory() {, +    return new BSTPathFactory<N, BSTInOrderPath<N>>() {, +      public BSTInOrderPath<N> extension(BSTInOrderPath<N> path, BSTSide side) {, +      public BSTInOrderPath<N> initialPath(N root) {, +        return new BSTInOrderPath<N>(root, null, null);, +  private static <N extends BSTNode<?, N>> BSTInOrderPath<N> extension(, +      BSTInOrderPath<N> path, BSTSide side) {, +    return new BSTInOrderPath<N>(tip.getChild(side), side, path);, +  private transient Optional<BSTInOrderPath<N>> prevInOrder;, +  private transient Optional<BSTInOrderPath<N>> nextInOrder;, +  private BSTInOrderPath(N tip, @Nullable BSTSide side, @Nullable BSTInOrderPath<N> tail) {, +  private Optional<BSTInOrderPath<N>> computeNextInOrder() {, +      BSTInOrderPath<N> path = extension(this, RIGHT);, +      BSTInOrderPath<N> current = this;, +  private Optional<BSTInOrderPath<N>> computePrevInOrder() {, +      BSTInOrderPath<N> path = extension(this, LEFT);, +      BSTInOrderPath<N> current = this;, +  private Optional<BSTInOrderPath<N>> nextInOrder() {, +    Optional<BSTInOrderPath<N>> result = nextInOrder;, +  private Optional<BSTInOrderPath<N>> prevInOrder() {, +    Optional<BSTInOrderPath<N>> result = prevInOrder;, +  public BSTInOrderPath<N> next() {, +  public BSTInOrderPath<N> prev() {, +++ b/guava/src/com/google/common/collect/BSTMutationResult.java, +      BSTNodeFactory<N> nodeFactory, BSTBalancePolicy<N> balancePolicy) {, +++ b/guava/src/com/google/common/collect/BSTBalancePolicy.java, +interface BSTBalancePolicy<N extends BSTNode<?, N>> {, +  N balance(BSTNodeFactory<N> nodeFactory, N source, @Nullable N left, @Nullable N right);, +  N combine(BSTNodeFactory<N> nodeFactory, @Nullable N left, @Nullable N right);, +++ b/guava/src/com/google/common/collect/BSTInOrderPath.java, +final class BSTInOrderPath<N extends BSTNode<?, N>> extends BSTPath<N, BSTInOrderPath<N>> {, +  public static <N extends BSTNode<?, N>> BSTPathFactory<N, BSTInOrderPath<N>> inOrderFactory() {, +    return new BSTPathFactory<N, BSTInOrderPath<N>>() {, +      public BSTInOrderPath<N> extension(BSTInOrderPath<N> path, BSTSide side) {, +      public BSTInOrderPath<N> initialPath(N root) {, +        return new BSTInOrderPath<N>(root, null, null);, +  private static <N extends BSTNode<?, N>> BSTInOrderPath<N> extension(, +      BSTInOrderPath<N> path, BSTSide side) {, +    return new BSTInOrderPath<N>(tip.getChild(side), side, path);, +  private transient Optional<BSTInOrderPath<N>> prevInOrder;, +  private transient Optional<BSTInOrderPath<N>> nextInOrder;, +  private BSTInOrderPath(N tip, @Nullable BSTSide side, @Nullable BSTInOrderPath<N> tail) {, +  private Optional<BSTInOrderPath<N>> computeNextInOrder() {, +      BSTInOrderPath<N> path = extension(this, RIGHT);, +      BSTInOrderPath<N> current = this;, +  private Optional<BSTInOrderPath<N>> computePrevInOrder() {, +      BSTInOrderPath<N> path = extension(this, LEFT);, +      BSTInOrderPath<N> current = this;, +  private Optional<BSTInOrderPath<N>> nextInOrder() {, +    Optional<BSTInOrderPath<N>> result = nextInOrder;, +  private Optional<BSTInOrderPath<N>> prevInOrder() {, +    Optional<BSTInOrderPath<N>> result = prevInOrder;, +  public BSTInOrderPath<N> next() {, +  public BSTInOrderPath<N> prev() {, +++ b/guava/src/com/google/common/collect/BSTMutationResult.java, +      BSTNodeFactory<N> nodeFactory, BSTBalancePolicy<N> balancePolicy) {, +++ b/guava/src/com/google/common/collect/BSTMutationRule.java, +      BSTModifier<K, N> modifier, BSTBalancePolicy<N> balancePolicy,, +      BSTNodeFactory<N> nodeFactory) {, +  private final BSTBalancePolicy<N> balancePolicy;, +  private final BSTNodeFactory<N> nodeFactory;]