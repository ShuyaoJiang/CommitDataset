[+++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.common.primitives.Primitives;, +  public <T extends Integer> void testPrimitiveWrappingAndUnwrapping() {, +    for (Class<?> type : Primitives.allPrimitiveTypes()) {, +      assertIsPrimitive(TypeToken.of(type));, +    }, +    for (Class<?> type : Primitives.allWrapperTypes()) {, +      assertIsWrapper(TypeToken.of(type));, +    }, +    assertNotPrimitiveNorWrapper(TypeToken.of(String.class));, +    assertNotPrimitiveNorWrapper(TypeToken.of(Object[].class));, +    assertNotPrimitiveNorWrapper(TypeToken.of(Types.subtypeOf(Object.class)));, +    assertNotPrimitiveNorWrapper(new TypeToken<List<String>>() {});, +    assertNotPrimitiveNorWrapper(TypeToken.of(new TypeCapture<T>() {}.capture()));, +  }, +, +  private static void assertIsPrimitive(TypeToken<?> type) {, +    assertTrue(type.isPrimitive());, +    assertNotWrapper(type);, +    assertEquals(TypeToken.of(Primitives.wrap((Class<?>) type.getType())), type.wrap());, +  }, +, +  private static void assertNotPrimitive(TypeToken<?> type) {, +    assertFalse(type.isPrimitive());, +    assertSame(type, type.wrap());, +  }, +, +  private static void assertIsWrapper(TypeToken<?> type) {, +    assertNotPrimitive(type);, +    assertEquals(TypeToken.of(Primitives.unwrap((Class<?>) type.getType())), type.unwrap());, +  }, +, +  private static void assertNotWrapper(TypeToken<?> type) {, +    assertSame(type, type.unwrap());, +  }, +, +  private static void assertNotPrimitiveNorWrapper(TypeToken<?> type) {, +    assertNotPrimitive(type);, +    assertNotWrapper(type);, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.common.primitives.Primitives;, +  public <T extends Integer> void testPrimitiveWrappingAndUnwrapping() {, +    for (Class<?> type : Primitives.allPrimitiveTypes()) {, +      assertIsPrimitive(TypeToken.of(type));, +    }, +    for (Class<?> type : Primitives.allWrapperTypes()) {, +      assertIsWrapper(TypeToken.of(type));, +    }, +    assertNotPrimitiveNorWrapper(TypeToken.of(String.class));, +    assertNotPrimitiveNorWrapper(TypeToken.of(Object[].class));, +    assertNotPrimitiveNorWrapper(TypeToken.of(Types.subtypeOf(Object.class)));, +    assertNotPrimitiveNorWrapper(new TypeToken<List<String>>() {});, +    assertNotPrimitiveNorWrapper(TypeToken.of(new TypeCapture<T>() {}.capture()));, +  }, +, +  private static void assertIsPrimitive(TypeToken<?> type) {, +    assertTrue(type.isPrimitive());, +    assertNotWrapper(type);, +    assertEquals(TypeToken.of(Primitives.wrap((Class<?>) type.getType())), type.wrap());, +  }, +, +  private static void assertNotPrimitive(TypeToken<?> type) {, +    assertFalse(type.isPrimitive());, +    assertSame(type, type.wrap());, +  }, +, +  private static void assertIsWrapper(TypeToken<?> type) {, +    assertNotPrimitive(type);, +    assertEquals(TypeToken.of(Primitives.unwrap((Class<?>) type.getType())), type.unwrap());, +  }, +, +  private static void assertNotWrapper(TypeToken<?> type) {, +    assertSame(type, type.unwrap());, +  }, +, +  private static void assertNotPrimitiveNorWrapper(TypeToken<?> type) {, +    assertNotPrimitive(type);, +    assertNotWrapper(type);, +  }, +, +++ b/guava/src/com/google/common/reflect/TypeToken.java, +import com.google.common.primitives.Primitives;, +   * Returns true if this type is one of the nine primitive types (including {@code void})., +   *, +   * @since 15.0, +   */, +  public final boolean isPrimitive() {, +    return (runtimeType instanceof Class) && ((Class<?>) runtimeType).isPrimitive();, +  }, +, +  /**, +   * Returns the corresponding wrapper type if this is a primitive type; otherwise returns, +   * {@code this} itself. Idempotent., +   *, +   * @since 15.0, +   */, +  public final TypeToken<T> wrap() {, +    if (isPrimitive()) {]