[+++ b/guava-tests/test/com/google/common/base/SuppliersTest.java, +, +  static class CountingSupplier implements Supplier<Integer> {, +    int calls = 0;, +, +    @Override, +    public Integer get() {, +      calls++;, +      return calls * 10;, +    }, +  }, +, +  static class ThrowingSupplier implements Supplier<Integer> {, +    @Override, +    public Integer get() {, +      throw new NullPointerException();, +    }, +  }, +, +  static class SerializableCountingSupplier extends CountingSupplier implements Serializable {, +    private static final long serialVersionUID = 0L;, +  }, +, +  static class SerializableThrowingSupplier extends ThrowingSupplier implements Serializable {, +    private static final long serialVersionUID = 0L;, +  }, +, +  static void checkMemoize(CountingSupplier countingSupplier, Supplier<Integer> memoizedSupplier) {, +    // the underlying supplier hasn't executed yet, +    assertEquals(0, countingSupplier.calls);, +, +    assertEquals(10, (int) memoizedSupplier.get());, +, +    // now it has, +    assertEquals(1, countingSupplier.calls);, +, +    assertEquals(10, (int) memoizedSupplier.get());, +, +    // it still should only have executed once due to memoization, +    assertEquals(1, countingSupplier.calls);, +  }, +, +  public void testMemoize() {, +    memoizeTest(new CountingSupplier());, +    memoizeTest(new SerializableCountingSupplier());, +  }, +, +  private void memoizeTest(CountingSupplier countingSupplier) {, +    Supplier<Integer> memoizedSupplier = Suppliers.memoize(countingSupplier);, +    checkMemoize(countingSupplier, memoizedSupplier);, +  }, +, +  public void testMemoize_redudantly() {, +    memoize_redudantlyTest(new CountingSupplier());, +    memoize_redudantlyTest(new SerializableCountingSupplier());, +  }, +, +  private void memoize_redudantlyTest(CountingSupplier countingSupplier) {, +    Supplier<Integer> memoizedSupplier = Suppliers.memoize(countingSupplier);, +    assertSame(memoizedSupplier, Suppliers.memoize(memoizedSupplier));, +  }, +, +  public void testMemoizeExceptionThrown() {, +    memoizeExceptionThrownTest(new ThrowingSupplier());, +    memoizeExceptionThrownTest(new SerializableThrowingSupplier());, +  }, +, +  private void memoizeExceptionThrownTest(ThrowingSupplier memoizedSupplier) {, +    // call get() twice to make sure that memoization doesn't interfere, +    // with throwing the exception, +    for (int i = 0; i < 2; i++) {, +      try {, +        memoizedSupplier.get();, +        fail("failed to throw NullPointerException");, +      } catch (NullPointerException e) {, +        // this is what should happen, +      }, +    }, +  }, +, +  @GwtIncompatible // SerializableTester, +  public void testMemoizeNonSerializable() throws Exception {, +    CountingSupplier countingSupplier = new CountingSupplier();, +    Supplier<Integer> memoizedSupplier = Suppliers.memoize(countingSupplier);, +    checkMemoize(countingSupplier, memoizedSupplier);, +    // Calls to the original memoized supplier shouldn't affect its copy., +    memoizedSupplier.get();, +    // Should get an exception when we try to serialize., +    try {, +      reserialize(memoizedSupplier);, +      fail();, +    } catch (RuntimeException ex) {, +      assertEquals(java.io.NotSerializableException.class, ex.getCause().getClass());, +    }, +  }, +, +  @GwtIncompatible // SerializableTester, +  public void testMemoizeSerializable() throws Exception {, +    SerializableCountingSupplier countingSupplier = new SerializableCountingSupplier();, +]