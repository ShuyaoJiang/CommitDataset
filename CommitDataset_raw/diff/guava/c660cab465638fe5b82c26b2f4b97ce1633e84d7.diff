[+++ b/guava-testlib/src/com/google/common/collect/testing/google/SortedMultisetTestSuiteBuilder.java, +/*, + * Copyright (C) 2011 Google Inc., + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not, + * use this file except in compliance with the License. You may obtain a copy of, + * the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT, + * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the, + * License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.collect.testing.google;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.collect.BoundType;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Lists;, +import com.google.common.collect.Multiset;, +import com.google.common.collect.SortedMultiset;, +import com.google.common.collect.testing.AbstractTester;, +import com.google.common.collect.testing.Helpers;, +import com.google.common.collect.testing.SampleElements;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.Feature;, +, +import junit.framework.TestSuite;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +import java.util.Set;, +, +/**, + * Creates, based on your criteria, a JUnit test suite that exhaustively tests a, + * {@code SortedMultiset} implementation., + * , + * <p><b>Warning</b>: expects that {@code E} is a String., + * , + * @author Louis Wasserman, + */, +@GwtCompatible, +public class SortedMultisetTestSuiteBuilder<E> extends, +    MultisetTestSuiteBuilder<E> {, +  public static <E> SortedMultisetTestSuiteBuilder<E> using(, +      TestMultisetGenerator<E> generator) {, +    SortedMultisetTestSuiteBuilder<E> result =, +        new SortedMultisetTestSuiteBuilder<E>();, +    result.usingGenerator(generator);, +    return result;, +  }, +, +  @Override, +  public TestSuite createTestSuite() {, +    TestSuite suite = super.createTestSuite();, +    for (TestSuite subSuite : createDerivedSuites(this)) {, +      suite.addTest(subSuite);, +    }, +    return suite;, +  }, +, +  @Override, +  protected List<Class<? extends AbstractTester>> getTesters() {, +    List<Class<? extends AbstractTester>> testers =, +        Helpers.copyToList(super.getTesters());, +    testers.add(MultisetNavigationTester.class);, +    return testers;, +  }, +, +  /**, +   * To avoid infinite recursion, test suites with these marker features won't, +   * have derived suites created for them., +   */, +  enum NoRecurse implements Feature<Void> {, +    SUBMULTISET, DESCENDING;, +, +    @Override, +    public Set<Feature<? super Void>> getImpliedFeatures() {, +      return Collections.emptySet();, +    }, +  }, +, +  /**, +   * Two bounds (from and to) define how to build a subMultiset., +   */, +  enum Bound {, +    INCLUSIVE, EXCLUSIVE, NO_BOUND;, +  }, +, +  List<TestSuite> createDerivedSuites(, +      SortedMultisetTestSuiteBuilder<E> parentBuilder) {, +    List<TestSuite> derivedSuites = Lists.newArrayList();, +]