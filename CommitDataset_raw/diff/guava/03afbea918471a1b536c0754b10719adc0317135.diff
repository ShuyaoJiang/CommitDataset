[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +, +  // We do this instead of Preconditions.checkNotNull to save boxing and array, +  // creation cost., +  static Object checkElementNotNull(Object element, int index) {, +    if (element == null) {, +      throw new NullPointerException("at index " + index);, +    }, +    return element;, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +, +  // We do this instead of Preconditions.checkNotNull to save boxing and array, +  // creation cost., +  static Object checkElementNotNull(Object element, int index) {, +    if (element == null) {, +      throw new NullPointerException("at index " + index);, +    }, +    return element;, +  }, +++ b/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java, +  public void testReuseBuilderWithNonDuplicateElements() {, +    ImmutableSet.Builder<String> builder = this.<String>builder(), +        .add("a"), +        .add("b");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b");, +    builder.add("c", "d");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b", "c", "d");, +  }, +, +  public void testReuseBuilderWithDuplicateElements() {, +    ImmutableSet.Builder<String> builder = this.<String>builder(), +        .add("a"), +        .add("a", "a"), +        .add("b");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b");, +    builder.add("a", "b", "c", "c");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b", "c");, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +, +  // We do this instead of Preconditions.checkNotNull to save boxing and array, +  // creation cost., +  static Object checkElementNotNull(Object element, int index) {, +    if (element == null) {, +      throw new NullPointerException("at index " + index);, +    }, +    return element;, +  }, +++ b/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java, +  public void testReuseBuilderWithNonDuplicateElements() {, +    ImmutableSet.Builder<String> builder = this.<String>builder(), +        .add("a"), +        .add("b");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b");, +    builder.add("c", "d");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b", "c", "d");, +  }, +, +  public void testReuseBuilderWithDuplicateElements() {, +    ImmutableSet.Builder<String> builder = this.<String>builder(), +        .add("a"), +        .add("a", "a"), +        .add("b");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b");, +    builder.add("a", "b", "c", "c");, +    ASSERT.that(builder.build()).hasContentsInOrder("a", "b", "c");, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableCollectionTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import junit.framework.TestCase;, +, +/**, + * Tests for {@code ImmutableCollection}., + *, + * @author Louis Wasserman, + */, +public class ImmutableCollectionTest extends TestCase {, +  public void testCapacityExpansion() {, +    assertEquals(1, ImmutableCollection.Builder.expandedCapacity(0, 1));, +    assertEquals(2, ImmutableCollection.Builder.expandedCapacity(0, 2));]