[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Map<K, V1> fromMap, Function<? super V1, V2> function) {, +    return transformEntries(fromMap, asEntryTransformer(function));, +      SortedMap<K, V1> fromMap, Function<? super V1, V2> function) {, +    return transformEntries(fromMap, asEntryTransformer(function));, +  }, +, +  private static <K, V1, V2> EntryTransformer<K, V1, V2>, +      asEntryTransformer(final Function<? super V1, V2> function) {, +    return new EntryTransformer<K, V1, V2>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Map<K, V1> fromMap, Function<? super V1, V2> function) {, +    return transformEntries(fromMap, asEntryTransformer(function));, +      SortedMap<K, V1> fromMap, Function<? super V1, V2> function) {, +    return transformEntries(fromMap, asEntryTransformer(function));, +  }, +, +  private static <K, V1, V2> EntryTransformer<K, V1, V2>, +      asEntryTransformer(final Function<? super V1, V2> function) {, +    return new EntryTransformer<K, V1, V2>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Synchronized.java, +import java.util.Map.Entry;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      Map<K, V1> fromMap, Function<? super V1, V2> function) {, +    return transformEntries(fromMap, asEntryTransformer(function));, +      SortedMap<K, V1> fromMap, Function<? super V1, V2> function) {, +    return transformEntries(fromMap, asEntryTransformer(function));, +  }, +, +  private static <K, V1, V2> EntryTransformer<K, V1, V2>, +      asEntryTransformer(final Function<? super V1, V2> function) {, +    return new EntryTransformer<K, V1, V2>() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Synchronized.java, +import java.util.Map.Entry;, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +import static com.google.common.collect.Maps.unmodifiableNavigableMap;, +import java.util.Collection;, +, +  @GwtIncompatible("NavigableMap"), +  public void testUnmodifiableNavigableMap() {, +    TreeMap<Integer, String> mod = Maps.newTreeMap();, +    mod.put(1, "one");, +    mod.put(2, "two");, +    mod.put(3, "three");, +, +    NavigableMap<Integer, String> unmod = unmodifiableNavigableMap(mod);, +, +    /* unmod is a view. */, +    mod.put(4, "four");, +    assertEquals("four", unmod.get(4));, +    assertEquals("four", unmod.descendingMap().get(4));, +, +    ensureNotDirectlyModifiable(unmod);, +    ensureNotDirectlyModifiable(unmod.descendingMap());, +    ensureNotDirectlyModifiable(unmod.headMap(2, true));, +    ensureNotDirectlyModifiable(unmod.subMap(1, true, 3, true));, +    ensureNotDirectlyModifiable(unmod.tailMap(2, true));, +, +    Collection<String> values = unmod.values();, +    try {, +      values.add("4");, +      fail("UnsupportedOperationException expected");, +    } catch (UnsupportedOperationException expected) {, +    }, +    try {, +      values.remove("four");, +      fail("UnsupportedOperationException expected");, +    } catch (UnsupportedOperationException expected) {, +    }, +    try {, +      values.removeAll(Collections.singleton("four"));, +      fail("UnsupportedOperationException expected");, +    } catch (UnsupportedOperationException expected) {, +    }, +    try {, +      values.retainAll(Collections.singleton("four"));, +      fail("UnsupportedOperationException expected");, +    } catch (UnsupportedOperationException expected) {, +    }, +    try {, +      Iterator<String> iterator = values.iterator();, +      iterator.next();, +      iterator.remove();, +      fail("UnsupportedOperationException expected");, +    } catch (UnsupportedOperationException expected) {, +    }, +, +    Set<Map.Entry<Integer, String>> entries = unmod.entrySet();, +    try {, +      Iterator<Map.Entry<Integer, String>> iterator = entries.iterator();, +      iterator.next();, +      iterator.remove();, +      fail("UnsupportedOperationException expected");, +    } catch (UnsupportedOperationException expected) {, +    }, +    Map.Entry<Integer, String> entry = entries.iterator().next();, +    try {, +      entry.setValue("four");, +      fail("UnsupportedOperationException expected");, +    } catch (UnsupportedOperationException expected) {]