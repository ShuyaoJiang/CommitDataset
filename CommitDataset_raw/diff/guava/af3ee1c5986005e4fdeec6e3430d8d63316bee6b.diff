[+++ b/android/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;, +import static org.junit.Assert.fail;, +  @Test, +  public void hasEdgeConnecting_correct() {, +    putEdge(N1, N2);, +    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(N1, N2))).isTrue();, +  }, +, +  @Test, +  public void hasEdgeConnecting_backwards() {, +    putEdge(N1, N2);, +    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(N2, N1))).isFalse();, +  }, +, +  @Test, +  public void hasEdgeConnecting_mismatch() {, +    putEdge(N1, N2);, +    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(N1, N2))).isFalse();, +    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(N2, N1))).isFalse();, +  }, +, +  public void putEdge_existingNodes() {, +  public void putEdge_existingEdgeBetweenSameNodes() {, +    assertThat(putEdge(N1, N2)).isTrue();, +  @Test, +  public void putEdge_orderMismatch() {, +    EndpointPair<Integer> endpoints = EndpointPair.unordered(N1, N2);, +    try {, +      putEdge(endpoints);, +      fail("Expected IllegalArgumentException: " + ENDPOINTS_MISMATCH);, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);, +    }, +  }, +, +, +  @Test, +  public void removeEdge_orderMismatch() {, +    putEdge(N1, N2);, +    EndpointPair<Integer> endpoints = EndpointPair.unordered(N1, N2);, +    try {, +      graph.removeEdge(endpoints);, +      fail("Expected IllegalArgumentException: " + ENDPOINTS_MISMATCH);, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);, +    }, +  }, +++ b/android/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;, +import static org.junit.Assert.fail;, +  @Test, +  public void hasEdgeConnecting_correct() {, +    putEdge(N1, N2);, +    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(N1, N2))).isTrue();, +  }, +, +  @Test, +  public void hasEdgeConnecting_backwards() {, +    putEdge(N1, N2);, +    assertThat(graph.hasEdgeConnecting(EndpointPair.ordered(N2, N1))).isFalse();, +  }, +, +  @Test, +  public void hasEdgeConnecting_mismatch() {, +    putEdge(N1, N2);, +    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(N1, N2))).isFalse();, +    assertThat(graph.hasEdgeConnecting(EndpointPair.unordered(N2, N1))).isFalse();, +  }, +, +  public void putEdge_existingNodes() {, +  public void putEdge_existingEdgeBetweenSameNodes() {, +    assertThat(putEdge(N1, N2)).isTrue();, +  @Test, +  public void putEdge_orderMismatch() {, +    EndpointPair<Integer> endpoints = EndpointPair.unordered(N1, N2);, +    try {, +      putEdge(endpoints);, +      fail("Expected IllegalArgumentException: " + ENDPOINTS_MISMATCH);, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);, +    }, +  }, +, +, +  @Test, +  public void removeEdge_orderMismatch() {, +    putEdge(N1, N2);, +    EndpointPair<Integer> endpoints = EndpointPair.unordered(N1, N2);, +    try {, +      graph.removeEdge(endpoints);, +      fail("Expected IllegalArgumentException: " + ENDPOINTS_MISMATCH);, +    } catch (IllegalArgumentException e) {, +      assertThat(e).hasMessageThat().contains(ENDPOINTS_MISMATCH);, +    }, +  }, +++ b/android/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +import static com.google.common.graph.GraphConstants.ENDPOINTS_MISMATCH;, +  @Test, +  public void edges_containsOrderMismatch() {]