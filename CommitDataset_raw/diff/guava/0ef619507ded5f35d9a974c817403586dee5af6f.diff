[+++ b/android/guava/src/com/google/common/io/ByteSource.java, +   * Returns whether the source has zero bytes. The default implementation first checks, +   * {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the size is not known, it falls back to opening a stream and checking for EOF., +    if (sizeIfKnown.isPresent()) {, +      return sizeIfKnown.get() == 0L;, +++ b/android/guava/src/com/google/common/io/ByteSource.java, +   * Returns whether the source has zero bytes. The default implementation first checks, +   * {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the size is not known, it falls back to opening a stream and checking for EOF., +    if (sizeIfKnown.isPresent()) {, +      return sizeIfKnown.get() == 0L;, +++ b/android/guava/src/com/google/common/io/CharSource.java, +   * Returns whether the source has zero chars. The default implementation first checks, +   * {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF., +    if (lengthIfKnown.isPresent()) {, +      return lengthIfKnown.get() == 0L;, +++ b/android/guava/src/com/google/common/io/ByteSource.java, +   * Returns whether the source has zero bytes. The default implementation first checks, +   * {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the size is not known, it falls back to opening a stream and checking for EOF., +    if (sizeIfKnown.isPresent()) {, +      return sizeIfKnown.get() == 0L;, +++ b/android/guava/src/com/google/common/io/CharSource.java, +   * Returns whether the source has zero chars. The default implementation first checks, +   * {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF., +    if (lengthIfKnown.isPresent()) {, +      return lengthIfKnown.get() == 0L;, +++ b/guava/src/com/google/common/io/ByteSource.java, +   * Returns whether the source has zero bytes. The default implementation first checks, +   * {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the size is not known, it falls back to opening a stream and checking for EOF., +    if (sizeIfKnown.isPresent()) {, +      return sizeIfKnown.get() == 0L;, +++ b/android/guava/src/com/google/common/io/ByteSource.java, +   * Returns whether the source has zero bytes. The default implementation first checks, +   * {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the size is not known, it falls back to opening a stream and checking for EOF., +    if (sizeIfKnown.isPresent()) {, +      return sizeIfKnown.get() == 0L;, +++ b/android/guava/src/com/google/common/io/CharSource.java, +   * Returns whether the source has zero chars. The default implementation first checks, +   * {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF., +    if (lengthIfKnown.isPresent()) {, +      return lengthIfKnown.get() == 0L;, +++ b/guava/src/com/google/common/io/ByteSource.java, +   * Returns whether the source has zero bytes. The default implementation first checks, +   * {@link #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the size is not known, it falls back to opening a stream and checking for EOF., +    if (sizeIfKnown.isPresent()) {, +      return sizeIfKnown.get() == 0L;, +++ b/guava/src/com/google/common/io/CharSource.java, +   * Returns whether the source has zero chars. The default implementation first checks, +   * {@link #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be, +   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF., +    if (lengthIfKnown.isPresent()) {, +      return lengthIfKnown.get() == 0L;]