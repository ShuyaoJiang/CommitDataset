[+++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  private abstract static class StringList implements List<String> {}, +  private abstract static class IntegerList implements List<Integer> {}, +    assertSubtypeTokenBeforeSupertypeToken(types);, +    assertSubtypeTokenBeforeSupertypeToken(types.interfaces());, +    assertSubtypeTokenBeforeSupertypeToken(types.classes());, +    assertSubtypeBeforeSupertype(types.rawTypes());, +    assertSubtypeBeforeSupertype(types.interfaces().rawTypes());, +    assertSubtypeBeforeSupertype(types.classes().rawTypes());, +  private static void assertSubtypeTokenBeforeSupertypeToken(Iterable<? extends TypeToken<?>> types) {, +  private static void assertSubtypeBeforeSupertype(Iterable<? extends Class<?>> types) {, +    int i = 0;, +    for (Class<?> left : types) {, +      int j = 0;, +      for (Class<?> right : types) {, +        if (left.isAssignableFrom(right)) {, +          assertTrue(left + " should be after " + right, i >= j);, +        }, +        j++;, +      }, +      i++;, +    }, +  }, +, +  public void testAssertSubtypeTokenBeforeSupertypeToken_empty() {, +    assertSubtypeTokenBeforeSupertypeToken(ImmutableList.<TypeToken<?>>of());, +  }, +, +  public void testAssertSubtypeTokenBeforeSupertypeToken_oneType() {, +    assertSubtypeTokenBeforeSupertypeToken(ImmutableList.of(TypeToken.of(String.class)));, +  }, +, +  public void testAssertSubtypeTokenBeforeSupertypeToken_subtypeFirst() {, +    assertSubtypeTokenBeforeSupertypeToken(, +        ImmutableList.of(TypeToken.of(String.class), TypeToken.of(CharSequence.class)));, +  }, +, +  public void testAssertSubtypeTokenBeforeSupertypeToken_supertypeFirst() {, +    try {, +      assertSubtypeTokenBeforeSupertypeToken(, +          ImmutableList.of(TypeToken.of(CharSequence.class), TypeToken.of(String.class)));, +    } catch (AssertionError expected) {, +      return;, +    }, +    fail();, +  }, +, +  public void testAssertSubtypeTokenBeforeSupertypeToken_duplicate() {, +    try {, +      assertSubtypeTokenBeforeSupertypeToken(, +          ImmutableList.of(TypeToken.of(String.class), TypeToken.of(String.class)));, +    } catch (AssertionError expected) {, +      return;, +    }, +    fail();, +  }, +, +    assertSubtypeBeforeSupertype(ImmutableList.<Class<?>>of());, +    assertSubtypeBeforeSupertype(ImmutableList.of(String.class));, +        ImmutableList.of(String.class, CharSequence.class));, +          ImmutableList.of(CharSequence.class, String.class));, +          ImmutableList.of(String.class, String.class));, +  private abstract static class Implementation<K, V>, +  private abstract static class First<T> {}, +  private abstract static class Second<D> extends First<D> {}, +  private abstract static class Third<T, D> extends Second<T> {}, +  private abstract static class Fourth<T, D> extends Third<D, T> {}, +  private abstract static class RawTypeConsistencyTester<T extends Enum<T> & CharSequence> {, +  private abstract static class IKnowMyType<T> {, +  private abstract static class ToReproduceGenericSignatureFormatError<V> {, +    private abstract class BaseOuter {, +      abstract class BaseInner {}, +    }, +    private abstract class SubOuter extends BaseOuter {, +      private abstract class SubInner extends BaseInner {}, +    }, +    , +  }, +, +  // For Guava bug http://code.google.com/p/guava-libraries/issues/detail?id=1025, +  public void testDespiteGenericSignatureFormatError() {, +    ImmutableSet.copyOf(, +        TypeToken.of(ToReproduceGenericSignatureFormatError.SubOuter.SubInner.class), +            .getTypes(), +            .rawTypes());, +  }, +, +  private abstract static class Entry<K, V> {, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +  private abstract static class StringList implements List<String> {}, +  private abstract static class IntegerList implements List<Integer> {}, +    assertSubtypeTokenBeforeSupertypeToken(types);, +    assertSubtypeTokenBeforeSupertypeToken(types.interfaces());, +    assertSubtypeTokenBeforeSupertypeToken(types.classes());, +    assertSubtypeBeforeSupertype(types.rawTypes());, +    assertSubtypeBeforeSupertype(types.interfaces().rawTypes());, +    assertSubtypeBeforeSupertype(types.classes().rawTypes());, +  private static void assertSubtypeTokenBeforeSupertypeToken(Iterable<? extends TypeToken<?>> types) {, +  private static void assertSubtypeBeforeSupertype(Iterable<? extends Class<?>> types) {, +    int i = 0;]