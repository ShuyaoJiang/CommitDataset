[+++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertChecksum(CRC_32, "");, +    assertChecksum(CRC_32, "Z");, +    assertChecksum(CRC_32, "foobar");, +    assertChecksum(ADLER_32, "");, +    assertChecksum(ADLER_32, "Z");, +    assertChecksum(ADLER_32, "foobar");, +  private static void assertChecksum(Supplier<Checksum> supplier, String input) {, +    String toString = "name";, +    HashFunction func = new ChecksumHashFunction(supplier, 32, toString);, +    assertEquals(toString, func.toString());, +    assertEquals(value, func.hashBytes(bytes).padToLong());, +    String toString = "name";, +    HashFunction func = new ChecksumHashFunction(supplier, 32, toString);, +    assertEquals(expected, func.hashBytes(bytes).asInt());, +    assertEquals(toString, func.toString());, +++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertChecksum(CRC_32, "");, +    assertChecksum(CRC_32, "Z");, +    assertChecksum(CRC_32, "foobar");, +    assertChecksum(ADLER_32, "");, +    assertChecksum(ADLER_32, "Z");, +    assertChecksum(ADLER_32, "foobar");, +  private static void assertChecksum(Supplier<Checksum> supplier, String input) {, +    String toString = "name";, +    HashFunction func = new ChecksumHashFunction(supplier, 32, toString);, +    assertEquals(toString, func.toString());, +    assertEquals(value, func.hashBytes(bytes).padToLong());, +    String toString = "name";, +    HashFunction func = new ChecksumHashFunction(supplier, 32, toString);, +    assertEquals(expected, func.hashBytes(bytes).asInt());, +    assertEquals(toString, func.toString());, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +    assertEquals("Hashing.md5()", Hashing.md5().toString());, +    assertEquals("Hashing.sha1()", Hashing.sha1().toString());, +    assertEquals("Hashing.sha256()", Hashing.sha256().toString());, +    assertEquals("Hashing.sha512()", Hashing.sha512().toString());, +    assertEquals("Hashing.crc32()", Hashing.crc32().toString());, +    assertEquals("Hashing.adler32()", Hashing.adler32().toString());, +    assertEquals("Hashing.murmur3_128(0)", Hashing.murmur3_128().toString());, +    assertEquals("Hashing.murmur3_32(0)", Hashing.murmur3_32().toString());, +++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertChecksum(CRC_32, "");, +    assertChecksum(CRC_32, "Z");, +    assertChecksum(CRC_32, "foobar");, +    assertChecksum(ADLER_32, "");, +    assertChecksum(ADLER_32, "Z");, +    assertChecksum(ADLER_32, "foobar");, +  private static void assertChecksum(Supplier<Checksum> supplier, String input) {, +    String toString = "name";, +    HashFunction func = new ChecksumHashFunction(supplier, 32, toString);, +    assertEquals(toString, func.toString());, +    assertEquals(value, func.hashBytes(bytes).padToLong());, +    String toString = "name";, +    HashFunction func = new ChecksumHashFunction(supplier, 32, toString);, +    assertEquals(expected, func.hashBytes(bytes).asInt());, +    assertEquals(toString, func.toString());, +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +    assertEquals("Hashing.md5()", Hashing.md5().toString());, +    assertEquals("Hashing.sha1()", Hashing.sha1().toString());, +    assertEquals("Hashing.sha256()", Hashing.sha256().toString());, +    assertEquals("Hashing.sha512()", Hashing.sha512().toString());, +    assertEquals("Hashing.crc32()", Hashing.crc32().toString());, +    assertEquals("Hashing.adler32()", Hashing.adler32().toString());, +    assertEquals("Hashing.murmur3_128(0)", Hashing.murmur3_128().toString());, +    assertEquals("Hashing.murmur3_32(0)", Hashing.murmur3_32().toString());, +++ b/guava-tests/test/com/google/common/hash/MessageDigestHashFunctionTest.java, +import com.google.common.collect.ImmutableSet;, +, +  private static final ImmutableSet<String> INPUTS = ImmutableSet.of("", "Z", "foobar");, +  private static final ImmutableSet<String> ALGORITHMS = ImmutableSet.of(, +        "MD5", "SHA1", "SHA-1", "SHA-256", "SHA-512");, +, +  public void testHashing() {, +    for (String stringToTest : INPUTS) {, +      for (String algorithmToTest : ALGORITHMS) {, +        assertMessageDigestHashing(HashTestUtils.ascii(stringToTest), algorithmToTest);, +      }, +    }, +  public void testToString() {, +    assertEquals("Hashing.md5()", Hashing.md5().toString());, +    assertEquals("Hashing.sha1()", Hashing.sha1().toString());, +    assertEquals("Hashing.sha256()", Hashing.sha256().toString());, +    assertEquals("Hashing.sha512()", Hashing.sha512().toString());, +  private static void assertMessageDigestHashing(byte[] input, String algorithmName) {, +    try {, +          new MessageDigestHashFunction(algorithmName, algorithmName).hashBytes(input));, +            new MessageDigestHashFunction(algorithmName, bytes, algorithmName).hashBytes(input));, +        new MessageDigestHashFunction(algorithmName, maxSize + 1, algorithmName);, +    } catch (NoSuchAlgorithmException nsae) {, +      throw new AssertionError(nsae);, +    }, +++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertChecksum(CRC_32, "");, +    assertChecksum(CRC_32, "Z");, +    assertChecksum(CRC_32, "foobar");, +    assertChecksum(ADLER_32, "");, +    assertChecksum(ADLER_32, "Z");, +    assertChecksum(ADLER_32, "foobar");, +  private static void assertChecksum(Supplier<Checksum> supplier, String input) {]