[+++ b/guava-gwt/test/com/google/common/collect/HashBasedTableTest_gwt.java, +public void testIterationOrder() throws Exception {, +  com.google.common.collect.HashBasedTableTest testCase = new com.google.common.collect.HashBasedTableTest();, +  testCase.setUp();, +  testCase.testIterationOrder();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/HashBasedTableTest_gwt.java, +public void testIterationOrder() throws Exception {, +  com.google.common.collect.HashBasedTableTest testCase = new com.google.common.collect.HashBasedTableTest();, +  testCase.setUp();, +  testCase.testIterationOrder();, +}, +, +++ b/guava-tests/test/com/google/common/collect/HashBasedTableTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testIterationOrder() {, +    Table<String, String, String> table = HashBasedTable.create();, +    for (int i = 0; i < 5; i++) {, +      table.put("r" + i, "c" + i, "v" + i);, +    }, +    assertThat(table.rowKeySet()).containsExactly("r0", "r1", "r2", "r3", "r4").inOrder();, +    assertThat(table.columnKeySet()).containsExactly("c0", "c1", "c2", "c3", "c4").inOrder();, +    assertThat(table.values()).containsExactly("v0", "v1", "v2", "v3", "v4").inOrder();, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/HashBasedTableTest_gwt.java, +public void testIterationOrder() throws Exception {, +  com.google.common.collect.HashBasedTableTest testCase = new com.google.common.collect.HashBasedTableTest();, +  testCase.setUp();, +  testCase.testIterationOrder();, +}, +, +++ b/guava-tests/test/com/google/common/collect/HashBasedTableTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testIterationOrder() {, +    Table<String, String, String> table = HashBasedTable.create();, +    for (int i = 0; i < 5; i++) {, +      table.put("r" + i, "c" + i, "v" + i);, +    }, +    assertThat(table.rowKeySet()).containsExactly("r0", "r1", "r2", "r3", "r4").inOrder();, +    assertThat(table.columnKeySet()).containsExactly("c0", "c1", "c2", "c3", "c4").inOrder();, +    assertThat(table.values()).containsExactly("v0", "v1", "v2", "v3", "v4").inOrder();, +  }, +, +++ b/guava/src/com/google/common/collect/HashBasedTable.java, +import java.util.LinkedHashMap;, + * Implementation of {@link Table} using linked hash tables. This guarantees predictable iteration, + * order of the various views., +      return Maps.newLinkedHashMapWithExpectedSize(expectedSize);, +    return new HashBasedTable<R, C, V>(new LinkedHashMap<R, Map<C, V>>(), new Factory<C, V>(0));, +    Map<R, Map<C, V>> backingMap = Maps.newLinkedHashMapWithExpectedSize(expectedRows);]