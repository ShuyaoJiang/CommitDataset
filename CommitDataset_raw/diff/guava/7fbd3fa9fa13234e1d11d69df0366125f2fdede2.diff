[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/AbstractIteratorTest.java, +/*, + * Copyright (C) 2007 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import com.google.common.annotations.GwtCompatible;, +, +import junit.framework.TestCase;, +, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +, +/**, + * Unit test for {@code AbstractIterator}., + *, + * @author Kevin Bourrillion, + */, +@SuppressWarnings("serial") // No serialization is used in this test, +@GwtCompatible(emulated = true), +// TODO(cpovirk): why is this slow (>1m/test) under GWT when fully optimized?, +public class AbstractIteratorTest extends TestCase {, +, +  public void testDefaultBehaviorOfNextAndHasNext() {, +, +    // This sample AbstractIterator returns 0 on the first call, 1 on the, +    // second, then signals that it's reached the end of the data, +    Iterator<Integer> iter = new AbstractIterator<Integer>() {, +      private int rep;, +      @Override public Integer computeNext() {, +        switch (rep++) {, +          case 0:, +            return 0;, +          case 1:, +            return 1;, +          case 2:, +            return endOfData();, +          default:, +            fail("Should not have been invoked again");, +            return null;, +        }, +      }, +    };, +, +    assertTrue(iter.hasNext());, +    assertEquals(0, (int) iter.next());, +, +    // verify idempotence of hasNext(), +    assertTrue(iter.hasNext());, +    assertTrue(iter.hasNext());, +    assertTrue(iter.hasNext());, +    assertEquals(1, (int) iter.next());, +, +    assertFalse(iter.hasNext());, +, +    // Make sure computeNext() doesn't get invoked again, +    assertFalse(iter.hasNext());, +, +    try {, +      iter.next();, +      fail("no exception thrown");, +    } catch (NoSuchElementException expected) {, +    }, +  }, +, +  public void testSneakyThrow() throws Exception {, +    Iterator<Integer> iter = new AbstractIterator<Integer>() {, +      boolean haveBeenCalled;, +      @Override public Integer computeNext() {, +        if (haveBeenCalled) {, +          fail("Should not have been called again");, +        } else {, +          haveBeenCalled = true;, +          sneakyThrow(new SomeCheckedException());, +        }, +        return null; // never reached, +      }, +    };, +, +    // The first time, the sneakily-thrown exception comes out, +    try {, +      iter.hasNext();, +      fail("No exception thrown");, +    } catch (Exception e) {, +      if (!(e instanceof SomeCheckedException)) {, +        throw e;, +      }]