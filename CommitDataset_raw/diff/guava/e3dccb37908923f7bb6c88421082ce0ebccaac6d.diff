[+++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      return builder.build().asSet(DiscreteDomain.bigIntegers());, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      return builder.build().asSet(DiscreteDomain.bigIntegers());, +++ b/guava-tests/test/com/google/common/collect/PackageSanityTests.java, +    setDefault(DiscreteDomain.class, DiscreteDomain.integers());, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      return builder.build().asSet(DiscreteDomain.bigIntegers());, +++ b/guava-tests/test/com/google/common/collect/PackageSanityTests.java, +    setDefault(DiscreteDomain.class, DiscreteDomain.integers());, +++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +          return integers().next(value);, +          return integers().previous(value);, +          return integers().distance(start, end);, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      return builder.build().asSet(DiscreteDomain.bigIntegers());, +++ b/guava-tests/test/com/google/common/collect/PackageSanityTests.java, +    setDefault(DiscreteDomain.class, DiscreteDomain.integers());, +++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +          return integers().next(value);, +          return integers().previous(value);, +          return integers().distance(start, end);, +++ b/guava-tests/test/com/google/common/collect/SetsTest.java, +    ASSERT.that(set).has(), +        .allOf(new LegacyComparable("bar"), new LegacyComparable("foo")).inOrder();, +    Set<Integer> set = Range.closed(0, 10000).asSet(DiscreteDomain.integers());, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      return builder.build().asSet(DiscreteDomain.bigIntegers());, +++ b/guava-tests/test/com/google/common/collect/PackageSanityTests.java, +    setDefault(DiscreteDomain.class, DiscreteDomain.integers());, +++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +import static com.google.common.collect.DiscreteDomain.integers;, +          return integers().next(value);, +          return integers().previous(value);, +          return integers().distance(start, end);, +++ b/guava-tests/test/com/google/common/collect/SetsTest.java, +    ASSERT.that(set).has(), +        .allOf(new LegacyComparable("bar"), new LegacyComparable("foo")).inOrder();, +    Set<Integer> set = Range.closed(0, 10000).asSet(DiscreteDomain.integers());, +++ b/guava/src/com/google/common/collect/DiscreteDomain.java, +import java.math.BigInteger;, +  /**, +   * Returns the discrete domain for values of type {@code BigInteger}., +   */, +  // TODO(kevinb): make sure it's tested, and make it public, +  static DiscreteDomain<BigInteger> bigIntegers() {, +    return BigIntegerDomain.INSTANCE;, +  }, +, +  private static final class BigIntegerDomain extends DiscreteDomain<BigInteger>, +      implements Serializable {, +    private static final BigIntegerDomain INSTANCE = new BigIntegerDomain();, +, +    private static final BigInteger MIN_LONG =, +        BigInteger.valueOf(Long.MIN_VALUE);, +    private static final BigInteger MAX_LONG =, +        BigInteger.valueOf(Long.MAX_VALUE);, +, +    @Override public BigInteger next(BigInteger value) {, +      return value.add(BigInteger.ONE);, +    }, +, +    @Override public BigInteger previous(BigInteger value) {, +      return value.subtract(BigInteger.ONE);, +    }, +, +    @Override public long distance(BigInteger start, BigInteger end) {, +      return end.subtract(start).max(MIN_LONG).min(MAX_LONG).longValue();, +    }, +, +    private Object readResolve() {, +      return INSTANCE;]