[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Test, +  public void inDegree_oneEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.inDegree(N2)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(graph.inDegree(N1)).isEqualTo(0);, +  }, +, +  @Test, +  public void outDegree_oneEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.outDegree(N1)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(graph.outDegree(N2)).isEqualTo(0);, +  }, +, +    assertThat(addEdge(N1, N2)).isTrue();, +    assertThat(addEdge(N1, N2)).isFalse();, +    assertThat(graph.removeEdge(N1, N2)).isTrue();, +    assertThat(graph.removeEdge(N2, N1)).isTrue();, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Test, +  public void inDegree_oneEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.inDegree(N2)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(graph.inDegree(N1)).isEqualTo(0);, +  }, +, +  @Test, +  public void outDegree_oneEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.outDegree(N1)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(graph.outDegree(N2)).isEqualTo(0);, +  }, +, +    assertThat(addEdge(N1, N2)).isTrue();, +    assertThat(addEdge(N1, N2)).isFalse();, +    assertThat(graph.removeEdge(N1, N2)).isTrue();, +    assertThat(graph.removeEdge(N2, N1)).isTrue();, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(, +            node.equals(adjacentNode) || Collections.disjoint(edges, antiParallelEdges)).isTrue();, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +  @Test, +  public void inDegree_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(network.inDegree(N2)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(network.inDegree(N1)).isEqualTo(0);, +  }, +, +  @Test, +  public void outDegree_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(network.outDegree(N1)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(network.outDegree(N2)).isEqualTo(0);, +  }, +, +    assertThat(addEdge(E12, N1, N2)).isTrue();, +    assertThat(addEdge(E12, N1, N2)).isFalse();, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  @Test, +  public void inDegree_oneEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.inDegree(N2)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(graph.inDegree(N1)).isEqualTo(0);, +  }, +, +  @Test, +  public void outDegree_oneEdge() {, +    addEdge(N1, N2);, +    assertThat(graph.outDegree(N1)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(graph.outDegree(N2)).isEqualTo(0);, +  }, +, +    assertThat(addEdge(N1, N2)).isTrue();, +    assertThat(addEdge(N1, N2)).isFalse();, +    assertThat(graph.removeEdge(N1, N2)).isTrue();, +    assertThat(graph.removeEdge(N2, N1)).isTrue();, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(, +            node.equals(adjacentNode) || Collections.disjoint(edges, antiParallelEdges)).isTrue();, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +  @Test, +  public void inDegree_oneEdge() {, +    addEdge(E12, N1, N2);, +    assertThat(network.inDegree(N2)).isEqualTo(1);, +    // Edge direction handled correctly, +    assertThat(network.inDegree(N1)).isEqualTo(0);, +  }, +, +  @Test]