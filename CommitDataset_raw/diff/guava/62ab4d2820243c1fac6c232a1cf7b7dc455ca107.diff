[+++ b/guava/src/com/google/common/graph/Endpoints.java, +   * Returns the node {@link #adjacentNode(Object) adjacent} to {@link #nodeA()} along the origin, +   * edge. If these are the {@link Endpoints} of a directed edge, it is equal to {@link #target()}., +   * Returns the node that is adjacent to {@code node} along the origin edge., +  abstract boolean isDirected();, +, +  /**, +   * The hashcode of the {@link Endpoints} of a directed edge is equal to, +   * {@code Objects.hashCode(source(), target())}. The hashcode of the {@link Endpoints}, +   * of an undirected edge is equal to {@code nodeA().hashCode() ^ nodeB().hashCode()}., +   */, +   * The {@link Endpoints} of a directed edge., +  private static final class Directed<N> extends Endpoints<N> {, +    boolean isDirected() {, +      return true;, +    }, +, +    @Override, +      if (!(obj instanceof Endpoints)) {, +      Endpoints<?> other = (Endpoints<?>) obj;, +      if (isDirected() != other.isDirected()) {, +        return false;, +      }, +, +   * The {@link Endpoints} of an undirected edge., +  private static final class Undirected<N> extends Endpoints<N> {, +    boolean isDirected() {, +      return false;, +    }, +, +    @Override, +      if (!(obj instanceof Endpoints)) {, +      Endpoints<?> other = (Endpoints<?>) obj;, +      if (isDirected() != other.isDirected()) {, +        return false;, +      }, +, +++ b/guava/src/com/google/common/graph/Endpoints.java, +   * Returns the node {@link #adjacentNode(Object) adjacent} to {@link #nodeA()} along the origin, +   * edge. If these are the {@link Endpoints} of a directed edge, it is equal to {@link #target()}., +   * Returns the node that is adjacent to {@code node} along the origin edge., +  abstract boolean isDirected();, +, +  /**, +   * The hashcode of the {@link Endpoints} of a directed edge is equal to, +   * {@code Objects.hashCode(source(), target())}. The hashcode of the {@link Endpoints}, +   * of an undirected edge is equal to {@code nodeA().hashCode() ^ nodeB().hashCode()}., +   */, +   * The {@link Endpoints} of a directed edge., +  private static final class Directed<N> extends Endpoints<N> {, +    boolean isDirected() {, +      return true;, +    }, +, +    @Override, +      if (!(obj instanceof Endpoints)) {, +      Endpoints<?> other = (Endpoints<?>) obj;, +      if (isDirected() != other.isDirected()) {, +        return false;, +      }, +, +   * The {@link Endpoints} of an undirected edge., +  private static final class Undirected<N> extends Endpoints<N> {, +    boolean isDirected() {, +      return false;, +    }, +, +    @Override, +      if (!(obj instanceof Endpoints)) {, +      Endpoints<?> other = (Endpoints<?>) obj;, +      if (isDirected() != other.isDirected()) {, +        return false;, +      }, +, +++ b/guava/src/com/google/common/graph/Graphs.java, +    return graph.isDirected() == endpoints.isDirected()]