[+++ b/guava-gwt/test/com/google/common/collect/IterablesTest_gwt.java, +public void testTransform_forEach() throws Exception {, +  testCase.testTransform_forEach();, +}, +, +public void testTransform_iterator() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testTransform_iterator();, +public void testUnmodifiableIterable_forEach() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testUnmodifiableIterable_forEach();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/IterablesTest_gwt.java, +public void testTransform_forEach() throws Exception {, +  testCase.testTransform_forEach();, +}, +, +public void testTransform_iterator() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testTransform_iterator();, +public void testUnmodifiableIterable_forEach() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testUnmodifiableIterable_forEach();, +}, +, +++ b/guava-tests/test/com/google/common/collect/FilteredCollectionsTest.java, +import java.util.ArrayList;, +, +    public void testForEach() {, +      for (List<Integer> contents : SAMPLE_INPUTS) {, +        C unfiltered = createUnfiltered(contents);, +        C filtered = filter(unfiltered, EVEN);, +        List<Integer> foundElements = new ArrayList<>();, +        filtered.forEach(, +            (Integer i) -> {, +              assertTrue("Unexpected element: " + i, EVEN.apply(i));, +              foundElements.add(i);, +            });, +        assertEquals(ImmutableList.copyOf(filtered), foundElements);, +      }, +    }, +++ b/guava-gwt/test/com/google/common/collect/IterablesTest_gwt.java, +public void testTransform_forEach() throws Exception {, +  testCase.testTransform_forEach();, +}, +, +public void testTransform_iterator() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testTransform_iterator();, +public void testUnmodifiableIterable_forEach() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testUnmodifiableIterable_forEach();, +}, +, +++ b/guava-tests/test/com/google/common/collect/FilteredCollectionsTest.java, +import java.util.ArrayList;, +, +    public void testForEach() {, +      for (List<Integer> contents : SAMPLE_INPUTS) {, +        C unfiltered = createUnfiltered(contents);, +        C filtered = filter(unfiltered, EVEN);, +        List<Integer> foundElements = new ArrayList<>();, +        filtered.forEach(, +            (Integer i) -> {, +              assertTrue("Unexpected element: " + i, EVEN.apply(i));, +              foundElements.add(i);, +            });, +        assertEquals(ImmutableList.copyOf(filtered), foundElements);, +      }, +    }, +++ b/guava-tests/test/com/google/common/collect/IterablesTest.java, +  public void testFilterByType_iterator() throws Exception {, +  @GwtIncompatible // Iterables.filter(Iterable, Class), +  public void testFilterByType_forEach() throws Exception {, +    HasBoth hasBoth1 = new HasBoth();, +    HasBoth hasBoth2 = new HasBoth();, +    Iterable<TypeA> alist = Lists, +        .newArrayList(hasBoth1, new TypeA(), hasBoth2, new TypeA());, +    Iterable<TypeB> blist = Iterables.filter(alist, TypeB.class);, +, +    Iterator<TypeB> expectedIterator = Arrays.<TypeB>asList(hasBoth1, hasBoth2).iterator();, +    blist.forEach(b -> assertThat(b).isEqualTo(expectedIterator.next()));, +    assertThat(expectedIterator.hasNext()).isFalse();, +  }, +, +  public void testTransform_iterator() {, +  public void testTransform_forEach() {, +    List<Integer> input = asList(1, 2, 3, 4);, +    Iterable<String> result = Iterables.transform(input,, +        new Function<Integer, String>() {, +          @Override, +          public String apply(Integer from) {, +            return Integer.toBinaryString(from);, +          }, +        });, +, +    Iterator<String> expectedIterator = asList("1", "10", "11", "100").iterator();, +    result.forEach(s -> assertEquals(expectedIterator.next(), s));, +    assertFalse(expectedIterator.hasNext());]