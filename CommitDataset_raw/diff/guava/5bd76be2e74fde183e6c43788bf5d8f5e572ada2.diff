[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.io.ByteStreams;, +import com.google.common.reflect.ClassPath.Entry;, +import java.util.HashSet;, +  public void testGetAllEntries() throws Exception {, +    Set<String> resourceNames = new HashSet<String>();, +    for (Entry entry : ClassPath.getAllEntries(getClass().getClassLoader())) {, +      boolean first = resourceNames.add(entry.toString());, +      byte[] data = Resources.toByteArray(entry.url());, +      if (first) {, +        ResourceInfo resource = entry.toResourceInfo();, +        byte[] resourceData = ByteStreams.toByteArray(resource.url().openStream());, +        assertThat(data).isEqualTo(resourceData);, +      }, +    }, +  }, +, +      assertEquals(1, scanner.getEntries().size());, +    assertThat(scanner.getEntries()).isEmpty();, +    assertThat(scanner.getEntries()).isEmpty();, +        classInfo("Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$1Local.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("Foo.class", getClass().getClassLoader()).getPackageName());, +        classInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());, +    return classInfo(cls, cls.getClassLoader());, +    String name = cls.getName();, +    return classInfo(name, classLoader);, +  }, +, +  private static ClassInfo classInfo(String resourceName, ClassLoader classLoader) {, +    return new ClassInfo(resourceName, ClassPath.getClassName(resourceName), classLoader);, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.io.ByteStreams;, +import com.google.common.reflect.ClassPath.Entry;, +import java.util.HashSet;, +  public void testGetAllEntries() throws Exception {, +    Set<String> resourceNames = new HashSet<String>();, +    for (Entry entry : ClassPath.getAllEntries(getClass().getClassLoader())) {, +      boolean first = resourceNames.add(entry.toString());, +      byte[] data = Resources.toByteArray(entry.url());, +      if (first) {, +        ResourceInfo resource = entry.toResourceInfo();, +        byte[] resourceData = ByteStreams.toByteArray(resource.url().openStream());, +        assertThat(data).isEqualTo(resourceData);, +      }, +    }, +  }, +, +      assertEquals(1, scanner.getEntries().size());, +    assertThat(scanner.getEntries()).isEmpty();, +    assertThat(scanner.getEntries()).isEmpty();, +        classInfo("Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("a/b/Bar$1Local.class", getClass().getClassLoader()).getSimpleName());, +        classInfo("Foo.class", getClass().getClassLoader()).getPackageName());, +        classInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());, +    return classInfo(cls, cls.getClassLoader());, +    String name = cls.getName();, +    return classInfo(name, classLoader);, +  }, +, +  private static ClassInfo classInfo(String resourceName, ClassLoader classLoader) {, +    return new ClassInfo(resourceName, ClassPath.getClassName(resourceName), classLoader);, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +import com.google.common.base.Optional;, +import com.google.common.collect.ImmutableList;, +, +  /**, +   * An item on the classpath., +   *, +   * <p>This is a class-file or some other resource, possibly from a jar., +   */, +  static final class Entry {, +    private final File file;, +    private final String resourceName;, +    private final ClassLoader classLoader;, +    private final Optional<String> className;, +    private final URL url;, +, +    Entry(File file, String resourceName, ClassLoader classLoader, URL url) {, +      this.file = file;, +      this.resourceName = resourceName;, +      this.classLoader = classLoader;, +      this.url = url;, +      this.className = resourceName.endsWith(CLASS_FILE_NAME_EXTENSION), +          ? Optional.of(ClassPath.getClassName(resourceName)), +          : Optional.<String>absent();, +    }, +, +    /**, +     * Returns the file containing this entry.  It could be a jar file, in which case the resource]