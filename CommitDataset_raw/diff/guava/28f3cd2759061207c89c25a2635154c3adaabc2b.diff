[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Maps;, +import com.google.common.reflect.ClassPath.ResourceInfo;, +import java.util.Map;, +  public void testGetResources() throws Exception {, +    Map<String, ResourceInfo> byName = Maps.newHashMap();, +    Map<String, ResourceInfo> byToString = Maps.newHashMap();, +    ClassPath classpath = ClassPath.from(getClass().getClassLoader());, +    for (ResourceInfo resource : classpath.getResources()) {, +      byName.put(resource.getResourceName(), resource);, +      byToString.put(resource.toString(), resource);, +      assertNotNull(resource.url());, +    }, +    String testResourceName = "com/google/common/reflect/test.txt";, +    ASSERT.that(byName.keySet()).has().allOf(, +        "com/google/common/reflect/ClassPath.class",, +        "com/google/common/reflect/ClassPathTest.class",, +        "com/google/common/reflect/ClassPathTest$Nested.class",, +        testResourceName);, +    ASSERT.that(byToString.keySet()).has().allOf(, +        "com.google.common.reflect.ClassPath",, +        "com.google.common.reflect.ClassPathTest",, +        "com/google/common/reflect/ClassPathTest$Nested.class",, +        testResourceName);, +    assertEquals(getClass().getClassLoader().getResource(testResourceName),, +        byName.get("com/google/common/reflect/test.txt").url());, +  }, +, +  public void testEquals() {, +        .addEqualityGroup(, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader()),, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader())), +        .addEqualityGroup(, +            new ResourceInfo("x.txt", getClass().getClassLoader())), +  public void testBrowseFromFile_fileNotExists() throws IOException {, +    ImmutableSet.Builder<ResourceInfo> resources = ImmutableSet.builder();, +    ClassPath.browseFrom(new File("no/such/file/anywhere"), classLoader, resources);, +    ASSERT.that(resources.build()).isEmpty();, +  public void testBrowseFromFile_notJarFile() throws IOException {, +    ImmutableSet.Builder<ResourceInfo> resources = ImmutableSet.builder();, +      ClassPath.browseFrom(notJar, classLoader, resources);, +    ASSERT.that(resources.build()).isEmpty();, +    assertEquals("abc.d.Abc", ClassPath.getClassName("abc/d/Abc.class"));, +  public void testResourceInfo_of() {, +    assertEquals(ClassInfo.class, resourceInfo(ClassPathTest.class).getClass());, +    assertEquals(ClassInfo.class, resourceInfo(ClassPath.class).getClass());, +    assertEquals(ResourceInfo.class, resourceInfo(Nested.class).getClass());, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getPackageName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());, +  private static ResourceInfo resourceInfo(Class<?> cls) {, +    return ResourceInfo.of(cls.getName().replace('.', '/') + ".class", cls.getClassLoader());, +  }, +, +  private static ClassInfo classInfo(Class<?> cls) {, +  private static ClassInfo classInfo(Class<?> cls, ClassLoader classLoader) {, +    return new ClassInfo(cls.getName().replace('.', '/') + ".class", classLoader);, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Maps;, +import com.google.common.reflect.ClassPath.ResourceInfo;, +import java.util.Map;, +  public void testGetResources() throws Exception {, +    Map<String, ResourceInfo> byName = Maps.newHashMap();, +    Map<String, ResourceInfo> byToString = Maps.newHashMap();, +    ClassPath classpath = ClassPath.from(getClass().getClassLoader());, +    for (ResourceInfo resource : classpath.getResources()) {, +      byName.put(resource.getResourceName(), resource);, +      byToString.put(resource.toString(), resource);, +      assertNotNull(resource.url());, +    }, +    String testResourceName = "com/google/common/reflect/test.txt";, +    ASSERT.that(byName.keySet()).has().allOf(, +        "com/google/common/reflect/ClassPath.class",, +        "com/google/common/reflect/ClassPathTest.class",, +        "com/google/common/reflect/ClassPathTest$Nested.class",, +        testResourceName);, +    ASSERT.that(byToString.keySet()).has().allOf(, +        "com.google.common.reflect.ClassPath",, +        "com.google.common.reflect.ClassPathTest",, +        "com/google/common/reflect/ClassPathTest$Nested.class",, +        testResourceName);, +    assertEquals(getClass().getClassLoader().getResource(testResourceName),, +        byName.get("com/google/common/reflect/test.txt").url());, +  }, +, +  public void testEquals() {, +        .addEqualityGroup(, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader()),, +            new ResourceInfo("a/b/c.txt", getClass().getClassLoader())), +        .addEqualityGroup(, +            new ResourceInfo("x.txt", getClass().getClassLoader())), +  public void testBrowseFromFile_fileNotExists() throws IOException {, +    ImmutableSet.Builder<ResourceInfo> resources = ImmutableSet.builder();, +    ClassPath.browseFrom(new File("no/such/file/anywhere"), classLoader, resources);, +    ASSERT.that(resources.build()).isEmpty();, +  public void testBrowseFromFile_notJarFile() throws IOException {, +    ImmutableSet.Builder<ResourceInfo> resources = ImmutableSet.builder();]