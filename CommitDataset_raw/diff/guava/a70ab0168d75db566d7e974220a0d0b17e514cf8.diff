[+++ b/guava/src/com/google/common/collect/ImmutableTable.java, +      return copyOf(table.cellSet());, +  , +  private static <R, C, V> ImmutableTable<R, C, V> copyOf(, +      Iterable<? extends Cell<? extends R, ? extends C, ? extends V>> cells) {, +    ImmutableTable.Builder<R, C, V> builder = ImmutableTable.builder();, +    for (Cell<? extends R, ? extends C, ? extends V> cell : cells) {, +      builder.put(cell);, +    }, +    return builder.build();, +++ b/guava/src/com/google/common/collect/ImmutableTable.java, +      return copyOf(table.cellSet());, +  , +  private static <R, C, V> ImmutableTable<R, C, V> copyOf(, +      Iterable<? extends Cell<? extends R, ? extends C, ? extends V>> cells) {, +    ImmutableTable.Builder<R, C, V> builder = ImmutableTable.builder();, +    for (Cell<? extends R, ? extends C, ? extends V> cell : cells) {, +      builder.put(cell);, +    }, +    return builder.build();, +++ b/guava/src/com/google/common/collect/RegularImmutableTable.java, +, +import java.util.Collections;, +, +      Collections.sort(cells, comparator);, +            : ImmutableSet.copyOf(ImmutableList.sortedCopyOf(rowComparator, rowSpaceBuilder));, +            : ImmutableSet.copyOf(ImmutableList.sortedCopyOf(columnComparator, columnSpaceBuilder));]