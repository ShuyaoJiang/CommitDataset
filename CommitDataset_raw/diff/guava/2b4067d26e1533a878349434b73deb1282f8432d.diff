[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    ExpiringComputingMap(long expirationMillis, int initialCapacity) {, +      this(expirationMillis, null, initialCapacity);, +    ExpiringComputingMap(, +        long expirationMillis, Function<? super K, ? extends V> computer, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, true);, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, initialCapacity), +    return new ExpiringComputingMap<K, V>(expirationMillis, computer, initialCapacity);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    ExpiringComputingMap(long expirationMillis, int initialCapacity) {, +      this(expirationMillis, null, initialCapacity);, +    ExpiringComputingMap(, +        long expirationMillis, Function<? super K, ? extends V> computer, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, true);, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, initialCapacity), +    return new ExpiringComputingMap<K, V>(expirationMillis, computer, initialCapacity);, +++ b/guava-gwt/test/com/google/common/collect/MapMakerTest_gwt.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    ExpiringComputingMap(long expirationMillis, int initialCapacity) {, +      this(expirationMillis, null, initialCapacity);, +    ExpiringComputingMap(, +        long expirationMillis, Function<? super K, ? extends V> computer, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, true);, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, initialCapacity), +    return new ExpiringComputingMap<K, V>(expirationMillis, computer, initialCapacity);, +++ b/guava-gwt/test/com/google/common/collect/MapMakerTest_gwt.java, +++ b/guava-tests/benchmark/com/google/common/collect/MapMakerSingleThreadBenchmark.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    ExpiringComputingMap(long expirationMillis, int initialCapacity) {, +      this(expirationMillis, null, initialCapacity);, +    ExpiringComputingMap(, +        long expirationMillis, Function<? super K, ? extends V> computer, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, true);, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, initialCapacity), +    return new ExpiringComputingMap<K, V>(expirationMillis, computer, initialCapacity);, +++ b/guava-gwt/test/com/google/common/collect/MapMakerTest_gwt.java, +++ b/guava-tests/benchmark/com/google/common/collect/MapMakerSingleThreadBenchmark.java, +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +      fail();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    ExpiringComputingMap(long expirationMillis, int initialCapacity) {, +      this(expirationMillis, null, initialCapacity);, +    ExpiringComputingMap(, +        long expirationMillis, Function<? super K, ? extends V> computer, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, true);, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, initialCapacity), +    return new ExpiringComputingMap<K, V>(expirationMillis, computer, initialCapacity);, +++ b/guava-gwt/test/com/google/common/collect/MapMakerTest_gwt.java, +++ b/guava-tests/benchmark/com/google/common/collect/MapMakerSingleThreadBenchmark.java, +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +      fail();, +++ b/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java, +    MapMakerInternalMap<Object, Object> map =, +        makeMap(, +            createMapMaker().concurrencyLevel(concurrencyLevel).initialCapacity(initialCapacity));, +    if (map.expiresAfterAccess()) {, +   * Returns an iterable containing all combinations of expireAfterAccess/Write., +    return ImmutableList.of(, +        createMapMaker().expireAfterAccess(SMALL_MAX_SIZE, TimeUnit.SECONDS),, +        createMapMaker().expireAfterWrite(SMALL_MAX_SIZE, TimeUnit.SECONDS));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    ExpiringComputingMap(long expirationMillis, int initialCapacity) {, +      this(expirationMillis, null, initialCapacity);, +    ExpiringComputingMap(, +        long expirationMillis, Function<? super K, ? extends V> computer, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, true);, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, initialCapacity), +    return new ExpiringComputingMap<K, V>(expirationMillis, computer, initialCapacity);, +++ b/guava-gwt/test/com/google/common/collect/MapMakerTest_gwt.java, +++ b/guava-tests/benchmark/com/google/common/collect/MapMakerSingleThreadBenchmark.java, +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +      fail();, +++ b/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java, +    MapMakerInternalMap<Object, Object> map =, +        makeMap(, +            createMapMaker().concurrencyLevel(concurrencyLevel).initialCapacity(initialCapacity));, +    if (map.expiresAfterAccess()) {, +   * Returns an iterable containing all combinations of expireAfterAccess/Write., +    return ImmutableList.of(, +        createMapMaker().expireAfterAccess(SMALL_MAX_SIZE, TimeUnit.SECONDS),, +        createMapMaker().expireAfterWrite(SMALL_MAX_SIZE, TimeUnit.SECONDS));, +++ b/guava-tests/test/com/google/common/collect/MapMakerTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java, +    ExpiringComputingMap(long expirationMillis, int initialCapacity) {, +      this(expirationMillis, null, initialCapacity);, +    ExpiringComputingMap(, +        long expirationMillis, Function<? super K, ? extends V> computer, int initialCapacity) {, +      super(initialCapacity, /* ignored loadFactor */ 0.75f, true);, +        ? new ExpiringComputingMap<K, V>(expirationMillis, null, initialCapacity), +    return new ExpiringComputingMap<K, V>(expirationMillis, computer, initialCapacity);, +++ b/guava-gwt/test/com/google/common/collect/MapMakerTest_gwt.java, +++ b/guava-tests/benchmark/com/google/common/collect/MapMakerSingleThreadBenchmark.java, +++ b/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java, +      fail();, +++ b/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java, +    MapMakerInternalMap<Object, Object> map =, +        makeMap(, +            createMapMaker().concurrencyLevel(concurrencyLevel).initialCapacity(initialCapacity));, +    if (map.expiresAfterAccess()) {, +   * Returns an iterable containing all combinations of expireAfterAccess/Write.]