[+++ b/guava-testlib/src/com/google/common/collect/testing/Helpers.java, +import java.io.Serializable;, +   * Compares strings in natural order except that null comes immediately before a given value. This, +   * works better than Ordering.natural().nullsFirst() because, if null comes before all other, +   * values, it lies outside the submap/submultiset ranges we test, and the variety of tests that, +   * exercise null handling fail on those subcollections., +  public abstract static class NullsBefore implements Comparator<String>, Serializable {, +    private final String justAfterNull;, +    protected NullsBefore(String justAfterNull) {, +      if (justAfterNull == null) {, +        throw new NullPointerException();, +      }, +, +      this.justAfterNull = justAfterNull;, +    }, +        // lhs (null) comes just before justAfterNull., +        if (rhs.equals(justAfterNull)) {, +        return justAfterNull.compareTo(rhs);, +        // rhs (null) comes just before justAfterNull., +        if (lhs.equals(justAfterNull)) {, +        return lhs.compareTo(justAfterNull);, +, +    @Override, +    public boolean equals(Object obj) {, +      if (obj instanceof NullsBefore) {, +        NullsBefore other = (NullsBefore) obj;, +        return justAfterNull.equals(other.justAfterNull);, +      }, +      return false;, +    }, +, +    @Override, +    public int hashCode() {, +      return justAfterNull.hashCode();, +    }, +  }, +, +  public static final class NullsBeforeB extends NullsBefore {, +    public static final NullsBeforeB INSTANCE = new NullsBeforeB();, +, +    private NullsBeforeB() {, +      super("b");, +    }, +  }, +, +  public static final class NullsBeforeTwo extends NullsBefore {, +    public static final NullsBeforeTwo INSTANCE = new NullsBeforeTwo();, +, +    private NullsBeforeTwo() {, +      super("two"); // from TestStringSortedMapGenerator's sample keys, +    }, +++ b/guava-testlib/src/com/google/common/collect/testing/Helpers.java, +import java.io.Serializable;, +   * Compares strings in natural order except that null comes immediately before a given value. This, +   * works better than Ordering.natural().nullsFirst() because, if null comes before all other, +   * values, it lies outside the submap/submultiset ranges we test, and the variety of tests that, +   * exercise null handling fail on those subcollections., +  public abstract static class NullsBefore implements Comparator<String>, Serializable {, +    private final String justAfterNull;, +    protected NullsBefore(String justAfterNull) {, +      if (justAfterNull == null) {, +        throw new NullPointerException();, +      }, +, +      this.justAfterNull = justAfterNull;, +    }, +        // lhs (null) comes just before justAfterNull., +        if (rhs.equals(justAfterNull)) {, +        return justAfterNull.compareTo(rhs);, +        // rhs (null) comes just before justAfterNull., +        if (lhs.equals(justAfterNull)) {, +        return lhs.compareTo(justAfterNull);, +, +    @Override, +    public boolean equals(Object obj) {, +      if (obj instanceof NullsBefore) {, +        NullsBefore other = (NullsBefore) obj;, +        return justAfterNull.equals(other.justAfterNull);, +      }, +      return false;, +    }, +, +    @Override, +    public int hashCode() {, +      return justAfterNull.hashCode();, +    }, +  }, +, +  public static final class NullsBeforeB extends NullsBefore {, +    public static final NullsBeforeB INSTANCE = new NullsBeforeB();, +, +    private NullsBeforeB() {, +      super("b");, +    }, +  }, +, +  public static final class NullsBeforeTwo extends NullsBefore {, +    public static final NullsBeforeTwo INSTANCE = new NullsBeforeTwo();, +, +    private NullsBeforeTwo() {]