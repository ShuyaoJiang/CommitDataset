[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +/*, + * Copyright (C) 2007 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkElementIndex;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.base.Preconditions.checkPositionIndex;, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +import static com.google.common.base.Preconditions.checkState;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.VisibleForTesting;, +import com.google.common.base.Function;, +import com.google.common.base.Objects;, +import com.google.common.primitives.Ints;, +, +import java.io.Serializable;, +import java.util.AbstractList;, +import java.util.AbstractSequentialList;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.ListIterator;, +import java.util.NoSuchElementException;, +import java.util.RandomAccess;, +, +import javax.annotation.Nullable;, +, +/**, + * Static utility methods pertaining to {@link List} instances. Also see this, + * class's counterparts {@link Sets} and {@link Maps}., + *, + * <p>See the Guava User Guide article on <a href=, + * "http://code.google.com/p/guava-libraries/wiki/CollectionUtilitiesExplained#Lists">, + * {@code Lists}</a>., + *, + * @author Kevin Bourrillion, + * @author Mike Bostock, + * @author Louis Wasserman, + * @since 2.0 (imported from Google Collections Library), + */, +@GwtCompatible(emulated = true), +public final class Lists {, +  private Lists() {}, +, +  // ArrayList, +, +  /**, +   * Creates a <i>mutable</i>, empty {@code ArrayList} instance., +   *, +   * <p><b>Note:</b> if mutability is not required, use {@link, +   * ImmutableList#of()} instead., +   *, +   * @return a new, empty {@code ArrayList}, +   */, +  @GwtCompatible(serializable = true), +  public static <E> ArrayList<E> newArrayList() {, +    return new ArrayList<E>();, +  }, +, +  /**, +   * Creates a <i>mutable</i> {@code ArrayList} instance containing the given, +   * elements., +   *, +   * <p><b>Note:</b> if mutability is not required and the elements are, +   * non-null, use an overload of {@link ImmutableList#of()} (for varargs) or, +   * {@link ImmutableList#copyOf(Object[])} (for an array) instead., +   *, +   * @param elements the elements that the list should contain, in order, +   * @return a new {@code ArrayList} containing those elements, +   */, +  @GwtCompatible(serializable = true), +  public static <E> ArrayList<E> newArrayList(E... elements) {, +    checkNotNull(elements); // for GWT, +    // Avoid integer overflow when a large array is passed in, +    int capacity = computeArrayListCapacity(elements.length);, +    ArrayList<E> list = new ArrayList<E>(capacity);, +    Collections.addAll(list, elements);, +    return list;, +  }]