[+++ b/android/guava/src/com/google/common/collect/Comparators.java, + * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code, + * com.google.common.collect.Ordering} (otherwise)., + * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is, + * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by, + * the JDK., +++ b/android/guava/src/com/google/common/collect/Comparators.java, + * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code, + * com.google.common.collect.Ordering} (otherwise)., + * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is, + * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by, + * the JDK., +++ b/android/guava/src/com/google/common/collect/Ordering.java, + *   <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be, + *       comparing {@code Bar} values from now on), + *   <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is, + *       returned), + * <p>If you are using Java 8, this class is now obsolete. Most of its functionality is now provided, + * by {@link java.util.stream.Stream Stream} and by {@link Comparator} itself, and the rest can now, + * be found as static methods in our new {@link Comparators} class. See each method below for, + * further instructions. Whenever possible, you should change any references of type {@code, + * Ordering} to be of type {@code Comparator} instead. However, at this time we have no plan to, + * <i>deprecate</i> this class., +++ b/android/guava/src/com/google/common/collect/Comparators.java, + * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code, + * com.google.common.collect.Ordering} (otherwise)., + * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is, + * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by, + * the JDK., +++ b/android/guava/src/com/google/common/collect/Ordering.java, + *   <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be, + *       comparing {@code Bar} values from now on), + *   <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is, + *       returned), + * <p>If you are using Java 8, this class is now obsolete. Most of its functionality is now provided, + * by {@link java.util.stream.Stream Stream} and by {@link Comparator} itself, and the rest can now, + * be found as static methods in our new {@link Comparators} class. See each method below for, + * further instructions. Whenever possible, you should change any references of type {@code, + * Ordering} to be of type {@code Comparator} instead. However, at this time we have no plan to, + * <i>deprecate</i> this class., +++ b/guava/src/com/google/common/collect/Comparators.java, + * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code, + * com.google.common.collect.Ordering} (otherwise)., + * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is, + * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by, + * the JDK., +++ b/android/guava/src/com/google/common/collect/Comparators.java, + * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code, + * com.google.common.collect.Ordering} (otherwise)., + * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is, + * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by, + * the JDK., +++ b/android/guava/src/com/google/common/collect/Ordering.java, + *   <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be, + *       comparing {@code Bar} values from now on), + *   <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is, + *       returned), + * <p>If you are using Java 8, this class is now obsolete. Most of its functionality is now provided, + * by {@link java.util.stream.Stream Stream} and by {@link Comparator} itself, and the rest can now, + * be found as static methods in our new {@link Comparators} class. See each method below for, + * further instructions. Whenever possible, you should change any references of type {@code, + * Ordering} to be of type {@code Comparator} instead. However, at this time we have no plan to, + * <i>deprecate</i> this class., +++ b/guava/src/com/google/common/collect/Comparators.java, + * comparator utilities, see either {@code Comparator} itself (for Java 8 or later), or {@code, + * com.google.common.collect.Ordering} (otherwise)., + * majority of usages of {@code Ordering} can be written using only built-in JDK APIs. This class is, + * intended to "fill the gap" and provide those features of {@code Ordering} not already provided by, + * the JDK., +++ b/guava/src/com/google/common/collect/Ordering.java, + *   <li>Next, non-null {@code Foo} values are passed to {@code getBarFunction} (we will be, + *       comparing {@code Bar} values from now on), + *   <li>Finally, natural ordering is used (i.e. the result of {@code Bar.compareTo(Bar)} is, + *       returned), + * <p>If you are using Java 8, this class is now obsolete. Most of its functionality is now provided, + * by {@link java.util.stream.Stream Stream} and by {@link Comparator} itself, and the rest can now, + * be found as static methods in our new {@link Comparators} class. See each method below for, + * further instructions. Whenever possible, you should change any references of type {@code, + * Ordering} to be of type {@code Comparator} instead. However, at this time we have no plan to, + * <i>deprecate</i> this class.]