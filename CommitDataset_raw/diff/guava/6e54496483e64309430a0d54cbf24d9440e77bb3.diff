[+++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.testing;, +, +import static com.google.common.testing.AbstractPackageSanityTests.Chopper.suffix;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.VisibleForTesting;, +import com.google.common.base.Optional;, +import com.google.common.collect.ComparisonChain;, +import com.google.common.collect.HashMultimap;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Lists;, +import com.google.common.collect.Maps;, +import com.google.common.collect.Multimap;, +import com.google.common.collect.MutableClassToInstanceMap;, +import com.google.common.collect.Ordering;, +import com.google.common.collect.Sets;, +import com.google.common.reflect.ClassPath;, +import com.google.common.reflect.Invokable;, +import com.google.common.reflect.Parameter;, +import com.google.common.reflect.TypeToken;, +, +import junit.framework.AssertionFailedError;, +import junit.framework.TestCase;, +, +import org.junit.Test;, +, +import java.io.IOException;, +import java.io.Serializable;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Modifier;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.TreeMap;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +, +import javax.annotation.Nullable;, +, +/**, + * Automatically runs sanity checks for the entire package of the subclass. Currently sanity checks, + * include {@link NullPointerTester} and {@link SerializableTester}. For example:, + * <pre>, + * {@literal @MediumTest}(MediumTestAttributes.FILE), + * public class PackageSanityTests extends AbstractPackageSanityTests {}, + * </pre>, + *, + * <p>If a certain type Foo's null check testing requires default value to be manually set, or that, + * it needs custom code to instantiate an instance for testing instance methods, add a {@code, + * public void testNulls()} method to FooTest and Foo will be ignored by the automated {@link, + * #testNulls} test., + *, + * <p>Since this class scans the classpath and reads classpath resources, the test is essentially, + * a {@code MediumTest}., + *, + * @author Ben Yu, + * @since 14.0, + */, +@Beta, +// TODO: Switch to JUnit 4 and use @Parameterized and @BeforeClass, +public abstract class AbstractPackageSanityTests extends TestCase {, +, +  /* The names of the expected method that tests null checks. */, +  private static final ImmutableList<String> NULL_TEST_METHOD_NAMES = ImmutableList.of(, +      "testNulls", "testNull", "testNullPointer", "testNullPointerException");, +, +  /* The names of the expected method that tests serializable. */, +  private static final ImmutableList<String> SERIALIZABLE_TEST_METHOD_NAMES =, +      ImmutableList.of("testSerializable", "testSerialization");, +, +  private static final Chopper TEST_SUFFIX =, +      suffix("Test"), +          .or(suffix("Tests")), +          .or(suffix("TestCase")), +          .or(suffix("TestSuite"));, +, +  /**, +   * Sorts methods/constructors with least number of parameters first since it's likely easier to, +   * fill dummy parameter values for them. Ties are broken by name then by the string form of the, +   * parameter list., +   */]