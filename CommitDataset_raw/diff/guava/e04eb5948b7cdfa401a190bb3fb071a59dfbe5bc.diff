[+++ b/guava-gwt/test/com/google/common/collect/StreamsTest_gwt.java, +public void testConcatInfiniteStream() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream();, +}, +, +public void testConcatInfiniteStream_double() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_double();, +}, +, +public void testConcatInfiniteStream_int() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_int();, +}, +, +public void testConcatInfiniteStream_long() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_long();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/StreamsTest_gwt.java, +public void testConcatInfiniteStream() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream();, +}, +, +public void testConcatInfiniteStream_double() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_double();, +}, +, +public void testConcatInfiniteStream_int() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_int();, +}, +, +public void testConcatInfiniteStream_long() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_long();, +}, +, +++ b/guava-tests/test/com/google/common/collect/StreamsTest.java, +  public void testConcatInfiniteStream() {, +    assertThat(Streams.concat(Stream.of(1, 2, 3), Stream.generate(() -> 5)).limit(5)), +        .containsExactly(1, 2, 3, 5, 5), +        .inOrder();, +  }, +, +  public void testConcatInfiniteStream_int() {, +    assertThat(Streams.concat(IntStream.of(1, 2, 3), IntStream.generate(() -> 5)).limit(5)), +        .containsExactly(1, 2, 3, 5, 5), +        .inOrder();, +  }, +, +  public void testConcatInfiniteStream_long() {, +    assertThat(Streams.concat(LongStream.of(1, 2, 3), LongStream.generate(() -> 5)).limit(5)), +        .containsExactly(1L, 2L, 3L, 5L, 5L), +        .inOrder();, +  }, +, +  public void testConcatInfiniteStream_double() {, +    assertThat(Streams.concat(DoubleStream.of(1, 2, 3), DoubleStream.generate(() -> 5)).limit(5)), +        .containsExactly(1., 2., 3., 5., 5.), +        .inOrder();, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/StreamsTest_gwt.java, +public void testConcatInfiniteStream() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream();, +}, +, +public void testConcatInfiniteStream_double() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_double();, +}, +, +public void testConcatInfiniteStream_int() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_int();, +}, +, +public void testConcatInfiniteStream_long() throws Exception {, +  com.google.common.collect.StreamsTest testCase = new com.google.common.collect.StreamsTest();, +  testCase.testConcatInfiniteStream_long();, +}, +, +++ b/guava-tests/test/com/google/common/collect/StreamsTest.java, +  public void testConcatInfiniteStream() {, +    assertThat(Streams.concat(Stream.of(1, 2, 3), Stream.generate(() -> 5)).limit(5)), +        .containsExactly(1, 2, 3, 5, 5), +        .inOrder();, +  }, +, +  public void testConcatInfiniteStream_int() {, +    assertThat(Streams.concat(IntStream.of(1, 2, 3), IntStream.generate(() -> 5)).limit(5)), +        .containsExactly(1, 2, 3, 5, 5), +        .inOrder();, +  }]