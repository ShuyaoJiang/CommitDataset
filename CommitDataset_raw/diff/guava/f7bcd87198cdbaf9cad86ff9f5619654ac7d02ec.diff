[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   *, +   * @since 14.0 (since 10.0 as {@code elapsedTime()}), +  public long elapsed(TimeUnit desiredUnit) {, +   * in the desired time unit, with any fraction rounded down., +   *, +   * <p>Note that the overhead of measurement can be more than a microsecond, so, +   * it is generally not useful to specify {@link TimeUnit#NANOSECONDS}, +   * precision here., +   // TODO(user): @deprecated Use {@link Stopwatch#elapsed(TimeUnit)} instead., +  public long elapsedTime(TimeUnit desiredUnit) {, +    return elapsed(desiredUnit);, +  }, +, +  /**, +   * Returns the current elapsed time shown on this stopwatch, expressed, +   * in milliseconds, with any fraction rounded down. This is identical to, +   * {@code elapsed(TimeUnit.MILLISECONDS)}., +   */, +  // TODO(user): @deprecated Pass {@link TimeUnit#MILLISECONDS} to, +  // {@link Stopwatch#elapsed(TimeUnit)} instead., +    return elapsed(MILLISECONDS);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   *, +   * @since 14.0 (since 10.0 as {@code elapsedTime()}), +  public long elapsed(TimeUnit desiredUnit) {, +   * in the desired time unit, with any fraction rounded down., +   *, +   * <p>Note that the overhead of measurement can be more than a microsecond, so, +   * it is generally not useful to specify {@link TimeUnit#NANOSECONDS}, +   * precision here., +   // TODO(user): @deprecated Use {@link Stopwatch#elapsed(TimeUnit)} instead., +  public long elapsedTime(TimeUnit desiredUnit) {, +    return elapsed(desiredUnit);, +  }, +, +  /**, +   * Returns the current elapsed time shown on this stopwatch, expressed, +   * in milliseconds, with any fraction rounded down. This is identical to, +   * {@code elapsed(TimeUnit.MILLISECONDS)}., +   */, +  // TODO(user): @deprecated Pass {@link TimeUnit#MILLISECONDS} to, +  // {@link Stopwatch#elapsed(TimeUnit)} instead., +    return elapsed(MILLISECONDS);, +++ b/guava-tests/test/com/google/common/base/StopwatchTest.java, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(3, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(2, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +  public void testElapsed_whileRunning() {, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(345, stopwatch.elapsed(NANOSECONDS));, +  public void testElapsed_notRunning() {, +    assertEquals(4, stopwatch.elapsed(NANOSECONDS));, +  public void testElapsed_multipleSegments() {, +    assertEquals(9, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(34, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(34, stopwatch.elapsed(NANOSECONDS));, +  public void testElapsed_micros() {, +    assertEquals(0, stopwatch.elapsed(MICROSECONDS));, +    assertEquals(1, stopwatch.elapsed(MICROSECONDS));, +  public void testElapsed_millis() {, +    assertEquals(0, stopwatch.elapsed(MILLISECONDS));, +    assertEquals(1, stopwatch.elapsed(MILLISECONDS));, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   *, +   * @since 14.0 (since 10.0 as {@code elapsedTime()}), +  public long elapsed(TimeUnit desiredUnit) {, +   * in the desired time unit, with any fraction rounded down., +   *, +   * <p>Note that the overhead of measurement can be more than a microsecond, so, +   * it is generally not useful to specify {@link TimeUnit#NANOSECONDS}, +   * precision here., +   // TODO(user): @deprecated Use {@link Stopwatch#elapsed(TimeUnit)} instead., +  public long elapsedTime(TimeUnit desiredUnit) {, +    return elapsed(desiredUnit);, +  }, +, +  /**, +   * Returns the current elapsed time shown on this stopwatch, expressed, +   * in milliseconds, with any fraction rounded down. This is identical to, +   * {@code elapsed(TimeUnit.MILLISECONDS)}., +   */, +  // TODO(user): @deprecated Pass {@link TimeUnit#MILLISECONDS} to, +  // {@link Stopwatch#elapsed(TimeUnit)} instead., +    return elapsed(MILLISECONDS);, +++ b/guava-tests/test/com/google/common/base/StopwatchTest.java, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(3, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(2, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +  public void testElapsed_whileRunning() {, +    assertEquals(0, stopwatch.elapsed(NANOSECONDS));, +    assertEquals(345, stopwatch.elapsed(NANOSECONDS));, +  public void testElapsed_notRunning() {, +    assertEquals(4, stopwatch.elapsed(NANOSECONDS));]