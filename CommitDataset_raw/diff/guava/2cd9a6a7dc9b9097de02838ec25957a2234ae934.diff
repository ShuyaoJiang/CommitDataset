[+++ b/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +import java.util.Map;, +import java.util.SortedMap;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentSkipListMap;, +  public enum MapImpl {, +    Hash {, +      @Override, +      <K, V> Map<K, V> create(Map<K, V> map) {, +        return Maps.newHashMap(map);, +      }, +    },, +    LinkedHash {, +      @Override, +      <K, V> Map<K, V> create(Map<K, V> map) {, +        return Maps.newLinkedHashMap(map);, +      }, +    },, +    ConcurrentHash {, +      @Override, +      <K, V> Map<K, V> create(Map<K, V> map) {, +        return new ConcurrentHashMap<K, V>(map);, +      }, +    },, +    Immutable {, +      @Override, +      <K, V> Map<K, V> create(Map<K, V> map) {, +        return ImmutableMap.copyOf(map);, +      }, +    };, +, +    abstract <K, V> Map<K, V> create(Map<K, V> map);, +  }, +, +  enum SortedMapImpl {, +    Tree {, +      @Override, +      <K extends Comparable<K>, V> SortedMap<K, V> create(Map<K, V> map) {, +        SortedMap<K, V> result = Maps.newTreeMap();, +        result.putAll(map);, +        return result;, +      }, +    },, +    ConcurrentSkipList {, +      @Override, +      <K extends Comparable<K>, V> SortedMap<K, V> create(Map<K, V> map) {, +        return new ConcurrentSkipListMap<K, V>(map);, +      }, +    },, +    ImmutableSorted {, +      @Override, +      <K extends Comparable<K>, V> SortedMap<K, V> create(Map<K, V> map) {, +        return ImmutableSortedMap.copyOf(map);, +      }, +    };, +, +    abstract <K extends Comparable<K>, V> SortedMap<K, V> create(Map<K, V> map);, +  }, +]