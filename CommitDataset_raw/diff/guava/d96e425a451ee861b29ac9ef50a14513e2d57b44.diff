[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +  private static class FilteredSortedSet<E> extends FilteredSet<E>, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +  private static class FilteredSortedSet<E> extends FilteredSet<E>, +++ b/guava-tests/test/com/google/common/collect/Collections2Test.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +  private static class FilteredSortedSet<E> extends FilteredSet<E>, +++ b/guava-tests/test/com/google/common/collect/Collections2Test.java, +++ b/guava-tests/test/com/google/common/collect/FilteredCollectionsTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.base.Predicate;, +import com.google.common.base.Predicates;, +import com.google.common.testing.EqualsTester;, +, +import junit.framework.TestCase;, +, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.List;, +import java.util.NavigableSet;, +import java.util.NoSuchElementException;, +import java.util.Set;, +import java.util.SortedSet;, +import java.util.TreeSet;, +, +/**, + * Tests for filtered collection views., + *, + * @author Louis Wasserman, + */, +public class FilteredCollectionsTest extends TestCase {, +  private static final Predicate<Integer> EVEN = new Predicate<Integer>() {, +    @Override, +    public boolean apply(Integer input) {, +      return input % 2 == 0;, +    }, +  };, +, +  private static final Predicate<Integer> PRIME_DIGIT =, +      Predicates.in(ImmutableSet.of(2, 3, 5, 7));, +, +  private static final ImmutableList<? extends List<Integer>> SAMPLE_INPUTS =, +      ImmutableList.of(ImmutableList.<Integer>of(),, +          ImmutableList.of(1),, +          ImmutableList.of(2),, +          ImmutableList.of(2, 3),, +          ImmutableList.of(1, 2),, +          ImmutableList.of(3, 5),, +          ImmutableList.of(2, 4),, +          ImmutableList.of(1, 2, 3, 5, 6, 8, 9));, +, +  /*, +   * We have a whole series of abstract test classes that "stack", so e.g. the tests for filtered, +   * NavigableSets inherit the tests for filtered Iterables, Collections, Sets, and SortedSets. The, +   * actual implementation tests are further down., +   */, +, +  public static abstract class AbstractFilteredIterableTest<C extends Iterable<Integer>>, +      extends TestCase {, +    abstract C createUnfiltered(Iterable<Integer> contents);, +, +    abstract C filter(C elements, Predicate<? super Integer> predicate);, +, +    public void testIterationOrderPreserved() {, +      for (List<Integer> contents : SAMPLE_INPUTS) {, +        C unfiltered = createUnfiltered(contents);, +        C filtered = filter(unfiltered, EVEN);, +, +        Iterator<Integer> filteredItr = filtered.iterator();, +        for (Integer i : unfiltered) {, +          if (EVEN.apply(i)) {, +            assertTrue(filteredItr.hasNext());, +            assertEquals(i, filteredItr.next());, +          }, +        }, +        assertFalse(filteredItr.hasNext());, +      }, +    }, +  }, +, +  public static abstract class AbstractFilteredCollectionTest<C extends Collection<Integer>>]