[+++ b/guava/src/com/google/common/io/ByteSource.java, +import static com.google.common.io.ByteStreams.createBuffer;, +      return ByteStreams.exhaust(in);, +    byte[] buf1 = createBuffer();, +    byte[] buf2 = createBuffer();, +        int read1 = ByteStreams.read(in1, buf1, 0, buf1.length);, +        int read2 = ByteStreams.read(in2, buf2, 0, buf2.length);, +        } else if (read1 != buf1.length) {, +++ b/guava/src/com/google/common/io/ByteSource.java, +import static com.google.common.io.ByteStreams.createBuffer;, +      return ByteStreams.exhaust(in);, +    byte[] buf1 = createBuffer();, +    byte[] buf2 = createBuffer();, +        int read1 = ByteStreams.read(in1, buf1, 0, buf1.length);, +        int read2 = ByteStreams.read(in2, buf2, 0, buf2.length);, +        } else if (read1 != buf1.length) {, +++ b/guava/src/com/google/common/io/ByteStreams.java, +   * Creates a new byte array for buffering reads or writes., +  static byte[] createBuffer() {, +    return new byte[8192];, +  }, +    byte[] buf = createBuffer();, +    ByteBuffer buf = ByteBuffer.wrap(createBuffer());, +    long read;, +    byte[] buf = createBuffer();, +    while ((read = in.read(buf)) != -1) {, +    byte[] buf = createBuffer();, +        int skip = (int) Math.min(remaining, buf.length);, +        if ((skipped = in.read(buf, 0, skip)) == -1) {, +    byte[] buf = createBuffer();, +++ b/guava/src/com/google/common/io/ByteSource.java, +import static com.google.common.io.ByteStreams.createBuffer;, +      return ByteStreams.exhaust(in);, +    byte[] buf1 = createBuffer();, +    byte[] buf2 = createBuffer();, +        int read1 = ByteStreams.read(in1, buf1, 0, buf1.length);, +        int read2 = ByteStreams.read(in2, buf2, 0, buf2.length);, +        } else if (read1 != buf1.length) {, +++ b/guava/src/com/google/common/io/ByteStreams.java, +   * Creates a new byte array for buffering reads or writes., +  static byte[] createBuffer() {, +    return new byte[8192];, +  }, +    byte[] buf = createBuffer();, +    ByteBuffer buf = ByteBuffer.wrap(createBuffer());, +    long read;, +    byte[] buf = createBuffer();, +    while ((read = in.read(buf)) != -1) {, +    byte[] buf = createBuffer();, +        int skip = (int) Math.min(remaining, buf.length);, +        if ((skipped = in.read(buf, 0, skip)) == -1) {, +    byte[] buf = createBuffer();, +++ b/guava/src/com/google/common/io/CharStreams.java, +  /**, +   * Creates a new {@code CharBuffer} for buffering reads or writes., +   */, +  static CharBuffer createBuffer() {, +    return CharBuffer.allocate(0x800); // 2K chars (4K bytes), +  }, +    CharBuffer buf = createBuffer();, +    long read;, +    CharBuffer buf = createBuffer();, +    while ((read = readable.read(buf)) != -1) {, +++ b/guava/src/com/google/common/io/ByteSource.java, +import static com.google.common.io.ByteStreams.createBuffer;, +      return ByteStreams.exhaust(in);, +    byte[] buf1 = createBuffer();, +    byte[] buf2 = createBuffer();, +        int read1 = ByteStreams.read(in1, buf1, 0, buf1.length);, +        int read2 = ByteStreams.read(in2, buf2, 0, buf2.length);, +        } else if (read1 != buf1.length) {, +++ b/guava/src/com/google/common/io/ByteStreams.java, +   * Creates a new byte array for buffering reads or writes., +  static byte[] createBuffer() {, +    return new byte[8192];, +  }, +    byte[] buf = createBuffer();, +    ByteBuffer buf = ByteBuffer.wrap(createBuffer());, +    long read;, +    byte[] buf = createBuffer();, +    while ((read = in.read(buf)) != -1) {, +    byte[] buf = createBuffer();, +        int skip = (int) Math.min(remaining, buf.length);, +        if ((skipped = in.read(buf, 0, skip)) == -1) {, +    byte[] buf = createBuffer();, +++ b/guava/src/com/google/common/io/CharStreams.java, +  /**, +   * Creates a new {@code CharBuffer} for buffering reads or writes., +   */, +  static CharBuffer createBuffer() {, +    return CharBuffer.allocate(0x800); // 2K chars (4K bytes), +  }, +    CharBuffer buf = createBuffer();, +    long read;, +    CharBuffer buf = createBuffer();, +    while ((read = readable.read(buf)) != -1) {, +++ b/guava/src/com/google/common/io/LineReader.java, +import static com.google.common.io.CharStreams.createBuffer;, +  private final CharBuffer cbuf = createBuffer();, +  private final char[] buf = cbuf.array();]