[+++ b/guava-tests/test/com/google/common/primitives/LongsTest.java, +import static java.lang.Long.MAX_VALUE;, +import static java.lang.Long.MIN_VALUE;, +, +import java.math.BigInteger;, +      { MIN_VALUE, (long) -1, (long) 0, (long) 1, MAX_VALUE };, +    assertEquals(MIN_VALUE, Longs.max(MIN_VALUE));, +    assertEquals(MAX_VALUE, Longs.max(MAX_VALUE));, +    assertEquals(MIN_VALUE, Longs.min(MIN_VALUE));, +    assertEquals(MAX_VALUE, Longs.min(MAX_VALUE));, +        new long[] {MIN_VALUE},, +        new long[] {MIN_VALUE, MIN_VALUE},, +        new long[] {MIN_VALUE, (long) 1},, +        new long[] {(long) 1, MIN_VALUE},, +        new long[] {MAX_VALUE, MAX_VALUE - (long) 1},, +        new long[] {MAX_VALUE, MAX_VALUE},, +        new long[] {MAX_VALUE, MAX_VALUE, MAX_VALUE});, +, +  @GwtIncompatible("AndroidInteger"), +  public void testTryParse() {, +    tryParseAndAssertEquals(0L, "0");, +    tryParseAndAssertEquals(0L, "-0");, +    tryParseAndAssertEquals(1L, "1");, +    tryParseAndAssertEquals(-1L, "-1");, +    tryParseAndAssertEquals(8900L, "8900");, +    tryParseAndAssertEquals(-8900L, "-8900");, +    tryParseAndAssertEquals(MAX_VALUE, Long.toString(MAX_VALUE));, +    tryParseAndAssertEquals(MIN_VALUE, Long.toString(MIN_VALUE));, +    assertNull(Longs.tryParse(""));, +    assertNull(Longs.tryParse("-"));, +    assertNull(Longs.tryParse("+1"));, +    assertNull(Longs.tryParse("999999999999999999999999"));, +    assertNull("Max integer + 1",, +        Longs.tryParse(BigInteger.valueOf(MAX_VALUE).add(BigInteger.ONE).toString()));, +    assertNull("Min integer - 1",, +        Longs.tryParse(BigInteger.valueOf(MIN_VALUE).subtract(BigInteger.ONE).toString()));, +  }, +, +  /**, +   * Applies {@link Longs#tryParse(String)} to the given string and asserts that, +   * the result is as expected., +   */, +  private static void tryParseAndAssertEquals(Long expected, String value) {, +    assertEquals(expected, Longs.tryParse(value));, +  }, +++ b/guava-tests/test/com/google/common/primitives/LongsTest.java, +import static java.lang.Long.MAX_VALUE;, +import static java.lang.Long.MIN_VALUE;, +, +import java.math.BigInteger;, +      { MIN_VALUE, (long) -1, (long) 0, (long) 1, MAX_VALUE };, +    assertEquals(MIN_VALUE, Longs.max(MIN_VALUE));, +    assertEquals(MAX_VALUE, Longs.max(MAX_VALUE));, +    assertEquals(MIN_VALUE, Longs.min(MIN_VALUE));, +    assertEquals(MAX_VALUE, Longs.min(MAX_VALUE));, +        new long[] {MIN_VALUE},, +        new long[] {MIN_VALUE, MIN_VALUE},, +        new long[] {MIN_VALUE, (long) 1},, +        new long[] {(long) 1, MIN_VALUE},, +        new long[] {MAX_VALUE, MAX_VALUE - (long) 1},, +        new long[] {MAX_VALUE, MAX_VALUE},, +        new long[] {MAX_VALUE, MAX_VALUE, MAX_VALUE});, +, +  @GwtIncompatible("AndroidInteger"), +  public void testTryParse() {, +    tryParseAndAssertEquals(0L, "0");, +    tryParseAndAssertEquals(0L, "-0");, +    tryParseAndAssertEquals(1L, "1");, +    tryParseAndAssertEquals(-1L, "-1");, +    tryParseAndAssertEquals(8900L, "8900");, +    tryParseAndAssertEquals(-8900L, "-8900");, +    tryParseAndAssertEquals(MAX_VALUE, Long.toString(MAX_VALUE));, +    tryParseAndAssertEquals(MIN_VALUE, Long.toString(MIN_VALUE));, +    assertNull(Longs.tryParse(""));, +    assertNull(Longs.tryParse("-"));, +    assertNull(Longs.tryParse("+1"));, +    assertNull(Longs.tryParse("999999999999999999999999"));, +    assertNull("Max integer + 1",, +        Longs.tryParse(BigInteger.valueOf(MAX_VALUE).add(BigInteger.ONE).toString()));, +    assertNull("Min integer - 1",, +        Longs.tryParse(BigInteger.valueOf(MIN_VALUE).subtract(BigInteger.ONE).toString()));, +  }, +, +  /**, +   * Applies {@link Longs#tryParse(String)} to the given string and asserts that, +   * the result is as expected., +   */, +  private static void tryParseAndAssertEquals(Long expected, String value) {, +    assertEquals(expected, Longs.tryParse(value));, +  }, +++ b/guava/src/com/google/common/primitives/Longs.java, +import com.google.common.annotations.Beta;, +   * Parses the specified string as a signed decimal long value. The ASCII, +   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the, +   * minus sign., +   *, +   * <p>Unlike {@link Long#parseLong(String)}, this method returns, +   * {@code null} instead of throwing an exception if parsing fails., +   *, +   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even]