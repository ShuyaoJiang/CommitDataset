[+++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/OrderingTest.java, +  // From https://github.com/google/guava/issues/1342, +  public void testComplicatedOrderingExample() {, +    Integer nullInt = (Integer) null;, +    Ordering<Iterable<Integer>> example =, +        Ordering.<Integer>natural().nullsFirst().reverse().lexicographical().reverse().nullsLast();, +    List<Integer> list1 = Lists.newArrayList();, +    List<Integer> list2 = Lists.newArrayList(1);, +    List<Integer> list3 = Lists.newArrayList(1, 1);, +    List<Integer> list4 = Lists.newArrayList(1, 2);, +    List<Integer> list5 = Lists.newArrayList(1, null, 2);, +    List<Integer> list6 = Lists.newArrayList(2);, +    List<Integer> list7 = Lists.newArrayList(nullInt);, +    List<Integer> list8 = Lists.newArrayList(nullInt, nullInt);, +    List<List<Integer>> list =, +        Lists.newArrayList(list1, list2, list3, list4, list5, list6, list7, list8, null);, +    List<List<Integer>> sorted = example.sortedCopy(list);, +, +    // [[null, null], [null], [1, null, 2], [1, 1], [1, 2], [1], [2], [], null], +    assertThat(sorted), +        .containsExactly(, +            Lists.newArrayList(nullInt, nullInt),, +            Lists.newArrayList(nullInt),, +            Lists.newArrayList(1, null, 2),, +            Lists.newArrayList(1, 1),, +            Lists.newArrayList(1, 2),, +            Lists.newArrayList(1),, +            Lists.newArrayList(2),, +            Lists.newArrayList(),, +            null), +        .inOrder();, +  }, +, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/OrderingTest.java, +  // From https://github.com/google/guava/issues/1342, +  public void testComplicatedOrderingExample() {, +    Integer nullInt = (Integer) null;, +    Ordering<Iterable<Integer>> example =, +        Ordering.<Integer>natural().nullsFirst().reverse().lexicographical().reverse().nullsLast();, +    List<Integer> list1 = Lists.newArrayList();, +    List<Integer> list2 = Lists.newArrayList(1);, +    List<Integer> list3 = Lists.newArrayList(1, 1);, +    List<Integer> list4 = Lists.newArrayList(1, 2);, +    List<Integer> list5 = Lists.newArrayList(1, null, 2);, +    List<Integer> list6 = Lists.newArrayList(2);, +    List<Integer> list7 = Lists.newArrayList(nullInt);, +    List<Integer> list8 = Lists.newArrayList(nullInt, nullInt);, +    List<List<Integer>> list =, +        Lists.newArrayList(list1, list2, list3, list4, list5, list6, list7, list8, null);, +    List<List<Integer>> sorted = example.sortedCopy(list);, +, +    // [[null, null], [null], [1, null, 2], [1, 1], [1, 2], [1], [2], [], null], +    assertThat(sorted), +        .containsExactly(, +            Lists.newArrayList(nullInt, nullInt),, +            Lists.newArrayList(nullInt),, +            Lists.newArrayList(1, null, 2),, +            Lists.newArrayList(1, 1),, +            Lists.newArrayList(1, 2),, +            Lists.newArrayList(1),, +            Lists.newArrayList(2),, +            Lists.newArrayList(),, +            null), +        .inOrder();, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/OrderingTest_gwt.java, +public void testComplicatedOrderingExample() throws Exception {, +  com.google.common.collect.OrderingTest testCase = new com.google.common.collect.OrderingTest();, +  testCase.testComplicatedOrderingExample();, +}, +, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/OrderingTest.java, +  // From https://github.com/google/guava/issues/1342, +  public void testComplicatedOrderingExample() {, +    Integer nullInt = (Integer) null;, +    Ordering<Iterable<Integer>> example =, +        Ordering.<Integer>natural().nullsFirst().reverse().lexicographical().reverse().nullsLast();, +    List<Integer> list1 = Lists.newArrayList();, +    List<Integer> list2 = Lists.newArrayList(1);, +    List<Integer> list3 = Lists.newArrayList(1, 1);, +    List<Integer> list4 = Lists.newArrayList(1, 2);, +    List<Integer> list5 = Lists.newArrayList(1, null, 2);, +    List<Integer> list6 = Lists.newArrayList(2);, +    List<Integer> list7 = Lists.newArrayList(nullInt);, +    List<Integer> list8 = Lists.newArrayList(nullInt, nullInt);, +    List<List<Integer>> list =, +        Lists.newArrayList(list1, list2, list3, list4, list5, list6, list7, list8, null);, +    List<List<Integer>> sorted = example.sortedCopy(list);, +, +    // [[null, null], [null], [1, null, 2], [1, 1], [1, 2], [1], [2], [], null], +    assertThat(sorted), +        .containsExactly(, +            Lists.newArrayList(nullInt, nullInt),, +            Lists.newArrayList(nullInt),, +            Lists.newArrayList(1, null, 2),, +            Lists.newArrayList(1, 1),, +            Lists.newArrayList(1, 2),, +            Lists.newArrayList(1),, +            Lists.newArrayList(2),]