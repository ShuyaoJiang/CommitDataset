[+++ b/guava/src/com/google/common/util/concurrent/ServiceManager.java, +import java.util.Collections;, +   * <p> For fast, lightweight listeners that would be safe to execute in any thread, consider , +   * calling {@link #addListener(Listener)}., +   * , +   * @param executor the executor in which the listeners callback methods will be run., +   * Registers a {@link Listener} to be run when this {@link ServiceManager} changes state. The , +   * listener will not have previous state changes replayed, so it is suggested that listeners are , +   * added before any of the managed services are {@linkplain Service#start started}., +   *, +   * <p>There is no guaranteed ordering of execution of listeners, but any listener added through , +   * this method is guaranteed to be called whenever there is a state change., +   *, +   * <p>Exceptions thrown by a listener will be will be caught and logged., +   * , +   * @param listener the listener to run when the manager changes state, +   */, +  public void addListener(Listener listener) {, +    state.addListener(listener, MoreExecutors.sameThreadExecutor());, +  }, +, +  /**, +    List<Entry<Service, Long>> loadTimes = Lists.newArrayListWithCapacity(services.size());, +      Service service = entry.getKey();, +      State state = service.state();, +      if (state != State.NEW & state != State.STARTING) {, +        loadTimes.add(Maps.immutableEntry(service, entry.getValue().startupTimeMillis()));, +    Collections.sort(loadTimes, Ordering.<Long>natural(), +        .onResultOf(new Function<Entry<Service, Long>, Long>() {, +        }));, +    for (Entry<Service, Long> entry : loadTimes) {, +        return unstartedServices == 0 | unstoppedServices != numberOfServices;, +      monitor.enterWhenUninterruptibly(awaitHealthGuard);, +      if (monitor.enterWhenUninterruptibly(awaitHealthGuard, timeout, unit)) {, +        return true;, +      return false;, +      monitor.enterWhenUninterruptibly(stoppedGuard);, +      if (monitor.enterWhenUninterruptibly(stoppedGuard, timeout, unit)) {, +        return true;, +      return false;]