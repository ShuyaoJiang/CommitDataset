[+++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/TestPlatform.java, +import static com.google.common.base.Preconditions.checkState;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, +      future.get(0, SECONDS);, +  static <V> V getDoneFromTimeoutOverload(Future<V> future) throws ExecutionException {, +    checkState(future.isDone(), "Future was expected to be done: %s", future);, +    try {, +      return future.get(0, SECONDS);, +    } catch (InterruptedException e) {, +      throw new AssertionError();, +    } catch (TimeoutException e) {, +      throw new AssertionError();, +    }, +  }, +, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/TestPlatform.java, +import static com.google.common.base.Preconditions.checkState;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, +      future.get(0, SECONDS);, +  static <V> V getDoneFromTimeoutOverload(Future<V> future) throws ExecutionException {, +    checkState(future.isDone(), "Future was expected to be done: %s", future);, +    try {, +      return future.get(0, SECONDS);, +    } catch (InterruptedException e) {, +      throw new AssertionError();, +    } catch (TimeoutException e) {, +      throw new AssertionError();, +    }, +  }, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java, +public void testAllAsList_emptyList() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testAllAsList_emptyList();, +  } catch (Throwable t) {, +    failure = t;, +  }, +  try {, +    testCase.tearDown();, +  } catch (Throwable t) {, +    if (failure == null) {, +      failure = t;, +    }, +  }, +  if (failure instanceof Exception) {, +    throw (Exception) failure;, +  }, +  if (failure instanceof Error) {, +    throw (Error) failure;, +  }, +  if (failure != null) {, +    throw new RuntimeException(failure);, +  }, +}, +, +public void testAllAsList_error() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testAllAsList_error();, +  } catch (Throwable t) {, +    failure = t;, +  }, +  try {, +    testCase.tearDown();, +  } catch (Throwable t) {, +    if (failure == null) {, +      failure = t;, +    }, +  }, +  if (failure instanceof Exception) {, +    throw (Exception) failure;, +  }, +  if (failure instanceof Error) {, +    throw (Error) failure;, +  }, +  if (failure != null) {, +    throw new RuntimeException(failure);, +  }, +}, +, +public void testAllAsList_immediateFailure() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testAllAsList_immediateFailure();, +  } catch (Throwable t) {, +    failure = t;, +  }, +  try {, +    testCase.tearDown();]