[+++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +++ b/android/guava/src/com/google/common/graph/ForwardingGraph.java, +  /**, +   * Defer to {@link AbstractGraph#edges()} (based on {@link #successors(Object)}) for full edges(), +   * implementation., +   */, +  protected long edgeCount() {, +    return delegate().edges().size();, +, +  @Override, +  public boolean hasEdgeConnecting(N nodeU, N nodeV) {, +    return delegate().hasEdgeConnecting(nodeU, nodeV);, +  }, +++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +    for (Integer node : directedGraph.nodes()) {, +      assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));, +      assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));, +    }, +, +++ b/android/guava/src/com/google/common/graph/ForwardingGraph.java, +  /**, +   * Defer to {@link AbstractGraph#edges()} (based on {@link #successors(Object)}) for full edges(), +   * implementation., +   */, +  protected long edgeCount() {, +    return delegate().edges().size();, +, +  @Override, +  public boolean hasEdgeConnecting(N nodeU, N nodeV) {, +    return delegate().hasEdgeConnecting(nodeU, nodeV);, +  }, +++ b/android/guava/src/com/google/common/graph/ForwardingNetwork.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import com.google.common.annotations.GwtIncompatible;, +import java.util.Set;, +, +/**, + * A class to allow {@link Network} implementations to be backed by a provided delegate. This is not, + * currently planned to be released as a general-purpose forwarding class., + *, + * @author James Sexton, + * @author Joshua O'Madadhain]