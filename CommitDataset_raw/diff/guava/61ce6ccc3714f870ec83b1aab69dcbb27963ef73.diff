[+++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, + * the protected methods {@link #set(Object)} and, + * {@link #setException(Throwable)}. Subclasses may also override {@link, + * #interruptTask()}, which will be invoked automatically if a call to {@link, + * #cancel(boolean) cancel(true)} succeeds in canceling the future., + * completed, failed, or cancelled., +    if (!sync.cancel()) {, +    done();, +    if (mayInterruptIfRunning) {, +      interruptTask();, +    }, +    return true;, +  }, +, +  /**, +   * Subclasses can override this method to implement interruption of the, +   * future's computation. The method is invoked automatically by a successful, +   * call to {@link #cancel(boolean) cancel(true)}., +   *, +   * <p>The default implementation does nothing., +   */, +  protected void interruptTask() {, +  }, +   * <b>Soon to be deprecated.</b> Most implementations will be satisfied with, +   * the default implementation of {@link #cancel(boolean)}. Those that are not, +   * can delegate to {@code super.cancel(mayInterruptIfRunning)} to get the, +   * behavior of this method., +   *, +   * <p>Subclasses can invoke this method to mark the future as cancelled., +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, + * the protected methods {@link #set(Object)} and, + * {@link #setException(Throwable)}. Subclasses may also override {@link, + * #interruptTask()}, which will be invoked automatically if a call to {@link, + * #cancel(boolean) cancel(true)} succeeds in canceling the future., + * completed, failed, or cancelled., +    if (!sync.cancel()) {, +    done();, +    if (mayInterruptIfRunning) {, +      interruptTask();, +    }, +    return true;, +  }, +, +  /**, +   * Subclasses can override this method to implement interruption of the, +   * future's computation. The method is invoked automatically by a successful, +   * call to {@link #cancel(boolean) cancel(true)}., +   *, +   * <p>The default implementation does nothing., +   */, +  protected void interruptTask() {, +  }, +   * <b>Soon to be deprecated.</b> Most implementations will be satisfied with, +   * the default implementation of {@link #cancel(boolean)}. Those that are not, +   * can delegate to {@code super.cancel(mayInterruptIfRunning)} to get the, +   * behavior of this method., +   *, +   * <p>Subclasses can invoke this method to mark the future as cancelled., +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +      /*, +       * Our additional cancellation work needs to occur even if, +       * !mayInterruptIfRunning, so we can't move it into interruptTask()., +       */, +      if (super.cancel(mayInterruptIfRunning)) {, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, + * the protected methods {@link #set(Object)} and, + * {@link #setException(Throwable)}. Subclasses may also override {@link, + * #interruptTask()}, which will be invoked automatically if a call to {@link, + * #cancel(boolean) cancel(true)} succeeds in canceling the future., + * completed, failed, or cancelled., +    if (!sync.cancel()) {, +    done();, +    if (mayInterruptIfRunning) {, +      interruptTask();, +    }, +    return true;, +  }, +, +  /**, +   * Subclasses can override this method to implement interruption of the, +   * future's computation. The method is invoked automatically by a successful, +   * call to {@link #cancel(boolean) cancel(true)}., +   *, +   * <p>The default implementation does nothing., +   */, +  protected void interruptTask() {, +  }, +   * <b>Soon to be deprecated.</b> Most implementations will be satisfied with, +   * the default implementation of {@link #cancel(boolean)}. Those that are not, +   * can delegate to {@code super.cancel(mayInterruptIfRunning)} to get the, +   * behavior of this method., +   *, +   * <p>Subclasses can invoke this method to mark the future as cancelled., +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +      /*, +       * Our additional cancellation work needs to occur even if, +       * !mayInterruptIfRunning, so we can't move it into interruptTask()., +       */, +      if (super.cancel(mayInterruptIfRunning)) {, +++ b/guava/src/com/google/common/util/concurrent/SettableFuture.java]