[+++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +import com.google.common.collect.FluentIterable;, +  private static Optional<Integer> getSomeOptionalInt() {, +    return Optional.of(1);, +  }, +, +  private static FluentIterable<? extends Number> getSomeNumbers() {, +    return FluentIterable.from(ImmutableList.<Number>of());, +  }, +, +  public void testSampleCodeError1() {, +    Optional<Integer> optionalInt = getSomeOptionalInt();, +    // Number value = optionalInt.or(0.5); // error, +  }, +, +  public void testSampleCodeError2() {, +    FluentIterable<? extends Number> numbers = getSomeNumbers();, +    Optional<? extends Number> first = numbers.first();, +    // Number value = first.or(0.5); // error, +  }, +, +  public void testSampleCodeFine1() {, +    Optional<Number> optionalInt = (Optional) getSomeOptionalInt();, +    Number value = optionalInt.or(0.5); // fine, +  }, +, +  public void testSampleCodeFine2() {, +    FluentIterable<? extends Number> numbers = getSomeNumbers();, +    Optional<Number> first = (Optional) numbers.first();, +    Number value = first.or(0.5); // fine, +  }, +, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +import com.google.common.collect.FluentIterable;, +  private static Optional<Integer> getSomeOptionalInt() {, +    return Optional.of(1);, +  }, +, +  private static FluentIterable<? extends Number> getSomeNumbers() {, +    return FluentIterable.from(ImmutableList.<Number>of());, +  }, +, +  public void testSampleCodeError1() {, +    Optional<Integer> optionalInt = getSomeOptionalInt();, +    // Number value = optionalInt.or(0.5); // error, +  }, +, +  public void testSampleCodeError2() {, +    FluentIterable<? extends Number> numbers = getSomeNumbers();, +    Optional<? extends Number> first = numbers.first();, +    // Number value = first.or(0.5); // error, +  }, +, +  public void testSampleCodeFine1() {, +    Optional<Number> optionalInt = (Optional) getSomeOptionalInt();, +    Number value = optionalInt.or(0.5); // fine, +  }, +, +  public void testSampleCodeFine2() {, +    FluentIterable<? extends Number> numbers = getSomeNumbers();, +    Optional<Number> first = (Optional) numbers.first();, +    Number value = first.or(0.5); // fine, +  }, +, +++ b/guava/src/com/google/common/base/Optional.java, +   *, +   * <p>Note about generics: The signature {@code public T or(T defaultValue)} is overly, +   * restrictive. However, the ideal signature, {@code public <S super T> S or(S)}, is not legal, +   * Java. As a result, some sensible operations involving subtypes are compile errors:, +   * <pre>   {@code, +   *, +   *   Optional<Integer> optionalInt = getSomeOptionalInt();, +   *   Number value = optionalInt.or(0.5); // error, +   *, +   *   FluentIterable<? extends Number> numbers = getSomeNumbers();, +   *   Optional<? extends Number> first = numbers.first();, +   *   Number value = first.or(0.5); // error}</pre>, +   *, +   * As a workaround, it is always safe to cast an {@code Optional<? extends T>} to {@code, +   * Optional<T>}. Casting either of the above example {@code Optional} instances to {@code, +   * Optional<Number>} (where {@code Number} is the desired output type) solves the problem:, +   * <pre>   {@code, +   *, +   *   Optional<Number> optionalInt = (Optional) getSomeOptionalInt();, +   *   Number value = optionalInt.or(0.5); // fine, +   *, +   *   FluentIterable<? extends Number> numbers = getSomeNumbers();, +   *   Optional<Number> first = (Optional) numbers.first();, +   *   Number value = first.or(0.5); // fine}</pre>]