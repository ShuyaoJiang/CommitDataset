[+++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, + * <p>Note that only the simplest type of classes are covered. That is, a top-level class with, + * either a non-private constructor or a non-private static factory method to construct instances of, + * the class. For example: <pre>, + * <p>For testing against the returned instances from a static factory class, such as <pre>, + * interface Book {...}, + * public class Books {, + *   public static Book hardcover(String title) {...}, + *   public static Book paperback(String title) {...}, + * }, + * </pre>, + * please use {@link ClassSanityTester}., + *, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, + * <p>Note that only the simplest type of classes are covered. That is, a top-level class with, + * either a non-private constructor or a non-private static factory method to construct instances of, + * the class. For example: <pre>, + * <p>For testing against the returned instances from a static factory class, such as <pre>, + * interface Book {...}, + * public class Books {, + *   public static Book hardcover(String title) {...}, + *   public static Book paperback(String title) {...}, + * }, + * </pre>, + * please use {@link ClassSanityTester}., + *, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, + * Tester that runs automated sanity tests for any given class. A typical use case is to test static, + * factory classes like: <pre>, + * interface Book {...}, + * public class Books {, + *   public static Book hardcover(String title) {...}, + *   public static Book paperback(String title) {...}, + * }, + * </pre>, + * And all the created {@code Book} instances can be tested with: <pre>, + * new ClassSanityTester(), + *     .forAllPublicStaticMethods(Books.class), + *     .thatReturn(Book.class), + *     .testEquals(); // or testNulls(), testSerializable() etc., + * </pre>]