[+++ b/guava/src/com/google/common/eventbus/AnnotatedHandlerFinder.java, +import com.google.common.base.Throwables;, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.CacheLoader;, +import com.google.common.cache.LoadingCache;, +import com.google.common.collect.ImmutableList;, +import com.google.common.util.concurrent.UncheckedExecutionException;, +   * A thread-safe cache that contains the mapping from each class to all methods in that class and, +   * all super-classes, that are annotated with {@code @Subscribe}. The cache is shared across all, +   * instances of this class; this greatly improves performance if multiple EventBus instances are, +   * created and objects of the same class are registered on all of them., +   */, +  private static final LoadingCache<Class<?>, ImmutableList<Method>> handlerMethodsCache =, +      CacheBuilder.newBuilder(), +          .weakKeys(), +          .build(new CacheLoader<Class<?>, ImmutableList<Method>>() {, +            @Override, +            public ImmutableList<Method> load(Class<?> concreteClass) throws Exception {, +              return getAnnotatedMethodsInternal(concreteClass);, +            }, +          });, +, +  /**, +    for (Method method : getAnnotatedMethods(clazz)) {, +      Class<?>[] parameterTypes = method.getParameterTypes();, +      Class<?> eventType = parameterTypes[0];, +      EventHandler handler = makeHandler(listener, method);, +      methodsInListener.put(eventType, handler);, +    }, +    return methodsInListener;, +  }, +  private static ImmutableList<Method> getAnnotatedMethods(Class<?> clazz) {, +    try {, +      return handlerMethodsCache.getUnchecked(clazz);, +    } catch (UncheckedExecutionException e) {, +      throw Throwables.propagate(e.getCause());, +    }, +  }, +, +  private static ImmutableList<Method> getAnnotatedMethodsInternal(Class<?> clazz) {, +    Set<? extends Class<?>> supers = TypeToken.of(clazz).getTypes().rawTypes();, +    ImmutableList.Builder<Method> result = ImmutableList.builder();, +            result.add(method);, +    return result.build();, +++ b/guava/src/com/google/common/eventbus/AnnotatedHandlerFinder.java, +import com.google.common.base.Throwables;, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.CacheLoader;, +import com.google.common.cache.LoadingCache;, +import com.google.common.collect.ImmutableList;, +import com.google.common.util.concurrent.UncheckedExecutionException;, +   * A thread-safe cache that contains the mapping from each class to all methods in that class and, +   * all super-classes, that are annotated with {@code @Subscribe}. The cache is shared across all, +   * instances of this class; this greatly improves performance if multiple EventBus instances are, +   * created and objects of the same class are registered on all of them., +   */, +  private static final LoadingCache<Class<?>, ImmutableList<Method>> handlerMethodsCache =, +      CacheBuilder.newBuilder(), +          .weakKeys(), +          .build(new CacheLoader<Class<?>, ImmutableList<Method>>() {, +            @Override, +            public ImmutableList<Method> load(Class<?> concreteClass) throws Exception {, +              return getAnnotatedMethodsInternal(concreteClass);, +            }, +          });, +, +  /**, +    for (Method method : getAnnotatedMethods(clazz)) {, +      Class<?>[] parameterTypes = method.getParameterTypes();, +      Class<?> eventType = parameterTypes[0];, +      EventHandler handler = makeHandler(listener, method);, +      methodsInListener.put(eventType, handler);, +    }, +    return methodsInListener;, +  }, +  private static ImmutableList<Method> getAnnotatedMethods(Class<?> clazz) {, +    try {, +      return handlerMethodsCache.getUnchecked(clazz);, +    } catch (UncheckedExecutionException e) {, +      throw Throwables.propagate(e.getCause());, +    }, +  }, +, +  private static ImmutableList<Method> getAnnotatedMethodsInternal(Class<?> clazz) {, +    Set<? extends Class<?>> supers = TypeToken.of(clazz).getTypes().rawTypes();, +    ImmutableList.Builder<Method> result = ImmutableList.builder();, +            result.add(method);, +    return result.build();, +++ b/guava/src/com/google/common/eventbus/EventBus.java, +   * A thread-safe cache for flattenHierarchy(). The Class class is immutable. This cache is shared, +   * across all EventBus instances, which greatly improves performance if multiple such instances, +   * are created and objects of the same class are posted on all of them., +   */, +  private static final LoadingCache<Class<?>, Set<Class<?>>> flattenHierarchyCache =, +      CacheBuilder.newBuilder(), +          .weakKeys(), +          .build(new CacheLoader<Class<?>, Set<Class<?>>>() {, +            @SuppressWarnings({"unchecked", "rawtypes"}) // safe cast, +            @Override, +            public Set<Class<?>> load(Class<?> concreteClass) throws Exception {]