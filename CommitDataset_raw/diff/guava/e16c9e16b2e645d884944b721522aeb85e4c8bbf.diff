[+++ b/guava/src/com/google/common/graph/BasicGraphBuilder.java, + * A builder for constructing instances of {@link MutableBasicGraph} with user-defined properties., + *, + * <li>orders {@link Graph#nodes()} in the order in which the elements were added, + * <p>Example of use:, + *, + * <pre><code>, + * MutableBasicGraph<String> graph = BasicGraphBuilder.undirected().build();, + * graph.putEdge("chocolate", "peanut butter");, + * graph.putEdge("peanut butter", "jelly");, + * </code></pre>, + *, +  /** Creates a new instance with the specified edge directionality. */, +  /** Returns a {@link BasicGraphBuilder} for building directed graphs. */, +  /** Returns a {@link BasicGraphBuilder} for building undirected graphs. */, +   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from {@code, +   * graph}., +   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link, +   * UnsupportedOperationException}., +    checkArgument(, +        expectedNodeCount >= 0,, +        "The expected number of nodes can't be negative: %s",, +  /** Specifies the order of iteration for the elements of {@link Graph#nodes()}. */, +   * Returns an empty {@link MutableBasicGraph} with the properties of this {@link, +   * BasicGraphBuilder}., +++ b/guava/src/com/google/common/graph/BasicGraphBuilder.java, + * A builder for constructing instances of {@link MutableBasicGraph} with user-defined properties., + *, + * <li>orders {@link Graph#nodes()} in the order in which the elements were added, + * <p>Example of use:, + *, + * <pre><code>, + * MutableBasicGraph<String> graph = BasicGraphBuilder.undirected().build();, + * graph.putEdge("chocolate", "peanut butter");, + * graph.putEdge("peanut butter", "jelly");, + * </code></pre>, + *, +  /** Creates a new instance with the specified edge directionality. */, +  /** Returns a {@link BasicGraphBuilder} for building directed graphs. */, +  /** Returns a {@link BasicGraphBuilder} for building undirected graphs. */, +   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from {@code, +   * graph}., +   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link, +   * UnsupportedOperationException}., +    checkArgument(, +        expectedNodeCount >= 0,, +        "The expected number of nodes can't be negative: %s",, +  /** Specifies the order of iteration for the elements of {@link Graph#nodes()}. */, +   * Returns an empty {@link MutableBasicGraph} with the properties of this {@link, +   * BasicGraphBuilder}., +++ b/guava/src/com/google/common/graph/GraphBuilder.java, + * A builder for constructing instances of {@link MutableGraph} with user-defined properties., + *, + * <li>orders {@link Graph#nodes()} in the order in which the elements were added, + * <p>Example of use:, + *, + * <pre><code>, + * MutableGraph<String, Double> graph = GraphBuilder.undirected().build();, + * graph.putEdgeValue("Miami", "Denver", 5280.0);, + * </code></pre>, + *, +  /** Creates a new instance with the specified edge directionality. */, +  /** Returns a {@link GraphBuilder} for building directed graphs. */, +  /** Returns a {@link GraphBuilder} for building undirected graphs. */, +   * Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}., +   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link, +   * UnsupportedOperationException}., +    checkArgument(, +        expectedNodeCount >= 0,, +        "The expected number of nodes can't be negative: %s",, +  /** Specifies the order of iteration for the elements of {@link Graph#nodes()}. */, +  /** Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}. */, +++ b/guava/src/com/google/common/graph/BasicGraphBuilder.java, + * A builder for constructing instances of {@link MutableBasicGraph} with user-defined properties., + *, + * <li>orders {@link Graph#nodes()} in the order in which the elements were added, + * <p>Example of use:, + *, + * <pre><code>, + * MutableBasicGraph<String> graph = BasicGraphBuilder.undirected().build();, + * graph.putEdge("chocolate", "peanut butter");, + * graph.putEdge("peanut butter", "jelly");, + * </code></pre>, + *, +  /** Creates a new instance with the specified edge directionality. */, +  /** Returns a {@link BasicGraphBuilder} for building directed graphs. */, +  /** Returns a {@link BasicGraphBuilder} for building undirected graphs. */, +   * Returns a {@link BasicGraphBuilder} initialized with all properties queryable from {@code, +   * graph}., +   * Attempting to add a self-loop to a graph that does not allow them will throw an {@link, +   * UnsupportedOperationException}., +    checkArgument(, +        expectedNodeCount >= 0,, +        "The expected number of nodes can't be negative: %s",, +  /** Specifies the order of iteration for the elements of {@link Graph#nodes()}. */, +   * Returns an empty {@link MutableBasicGraph} with the properties of this {@link, +   * BasicGraphBuilder}., +++ b/guava/src/com/google/common/graph/GraphBuilder.java, + * A builder for constructing instances of {@link MutableGraph} with user-defined properties., + *]