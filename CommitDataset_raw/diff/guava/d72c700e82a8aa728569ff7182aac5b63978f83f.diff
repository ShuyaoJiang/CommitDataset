[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/EmptyImmutableList.java, +, +import static java.util.Collections.emptyList;, +, +final class EmptyImmutableList extends ForwardingImmutableList<Object> {, +, +  EmptyImmutableList() {, +    super(emptyList());, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/EmptyImmutableList.java, +, +import static java.util.Collections.emptyList;, +, +final class EmptyImmutableList extends ForwardingImmutableList<Object> {, +, +  EmptyImmutableList() {, +    super(emptyList());, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableList.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +, +import javax.annotation.Nullable;, +, +/**, + * GWT emulated version of {@link ImmutableList}., + * TODO(cpovirk): more doc, + *, + * @author Hayward Chan, + */, +@SuppressWarnings("serial") // we're overriding default serialization, +public abstract class ForwardingImmutableList<E> extends ImmutableList<E> {, +, +  private final transient List<E> delegate;, +, +  ForwardingImmutableList(List<E> delegate) {, +    this.delegate = Collections.unmodifiableList(delegate);, +  }, +, +  public int indexOf(@Nullable Object object) {, +    return delegate.indexOf(object);, +  }, +, +  public int lastIndexOf(@Nullable Object object) {, +    return delegate.lastIndexOf(object);, +  }, +, +  public E get(int index) {, +    return delegate.get(index);, +  }, +, +  public ImmutableList<E> subList(int fromIndex, int toIndex) {, +    return unsafeDelegateList(delegate.subList(fromIndex, toIndex));, +  }, +, +  public UnmodifiableListIterator<E> listIterator() {, +    return Iterators.unmodifiableListIterator(delegate.listIterator());, +  }, +, +  public UnmodifiableListIterator<E> listIterator(int index) {, +    return Iterators.unmodifiableListIterator(delegate.listIterator(index));, +  }, +, +  @Override public Object[] toArray() {, +    // Note that ArrayList.toArray() doesn't work here because it returns E[], +    // instead of Object[]., +    return delegate.toArray(new Object[size()]);, +  }, +, +  @Override public boolean equals(Object obj) {, +    return delegate.equals(obj);, +  }, +, +  @Override public int hashCode() {, +    return delegate.hashCode();, +  }, +, +  @Override public UnmodifiableIterator<E> iterator() {, +    return Iterators.unmodifiableIterator(delegate.iterator());, +  }, +]