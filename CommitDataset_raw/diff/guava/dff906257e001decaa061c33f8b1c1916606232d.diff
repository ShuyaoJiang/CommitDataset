[+++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +   * Callback method that is called exactly once after the future is completed., +   * <p>If {@link #interruptTask} is also run during completion, {@code done()} runs after it., +   *, +   * <p>The default implementation of this method in {@code AbstractFuture} does nothing., +   *, +   * @since 20.0, +  @Beta, +  protected void done() {}, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +   * Callback method that is called exactly once after the future is completed., +   * <p>If {@link #interruptTask} is also run during completion, {@code done()} runs after it., +   *, +   * <p>The default implementation of this method in {@code AbstractFuture} does nothing., +   *, +   * @since 20.0, +  @Beta, +  protected void done() {}, +++ b/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +   * Callback method that is called exactly once after the future is completed., +   * <p>If {@link #interruptTask} is also run during completion, {@code done()} runs after it., +   *, +   * <p>The default implementation of this method in {@code AbstractFuture} does nothing., +   *, +   * @since 20.0, +  @Beta, +  protected void done() {}, +++ b/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AggregateFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +   * Callback method that is called exactly once after the future is completed., +   * <p>If {@link #interruptTask} is also run during completion, {@code done()} runs after it., +   *, +   * <p>The default implementation of this method in {@code AbstractFuture} does nothing., +   *, +   * @since 20.0, +  @Beta, +  protected void done() {}, +++ b/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AggregateFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/TimeoutFuture.java, +  protected void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +   * Callback method that is called exactly once after the future is completed., +   * <p>If {@link #interruptTask} is also run during completion, {@code done()} runs after it., +   *, +   * <p>The default implementation of this method in {@code AbstractFuture} does nothing., +   *, +   * @since 20.0, +  @Beta, +  protected void done() {}, +++ b/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/AggregateFuture.java, +  protected final void done() {, +++ b/guava/src/com/google/common/util/concurrent/TimeoutFuture.java, +  protected void done() {, +++ b/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java, +  @Override protected final void done() {]