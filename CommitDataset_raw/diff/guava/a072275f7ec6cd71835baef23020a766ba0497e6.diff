[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +, +  /**, +   * Returns a copy of the specified subrange of the specified array that is literally an Object[],, +   * and not e.g. a {@code String[]}., +   */, +  static Object[] copyAsObjectArray(Object[] elements, int offset, int length) {, +    checkPositionIndexes(offset, offset + length, elements.length);, +    Object[] result = new Object[length];, +    System.arraycopy(elements, offset, result, 0, length);, +    return result;, +  }, +, +  static Object[] checkElementsNotNull(Object... array) {, +    return checkElementsNotNull(array, array.length);, +  }, +  , +  static Object[] checkElementsNotNull(Object[] array, int length) {, +    for (int i = 0; i < length; i++) {, +      checkElementNotNull(array[i], i);, +    }, +    return array;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +, +  /**, +   * Returns a copy of the specified subrange of the specified array that is literally an Object[],, +   * and not e.g. a {@code String[]}., +   */, +  static Object[] copyAsObjectArray(Object[] elements, int offset, int length) {, +    checkPositionIndexes(offset, offset + length, elements.length);, +    Object[] result = new Object[length];, +    System.arraycopy(elements, offset, result, 0, length);, +    return result;, +  }, +, +  static Object[] checkElementsNotNull(Object... array) {, +    return checkElementsNotNull(array, array.length);, +  }, +  , +  static Object[] checkElementsNotNull(Object[] array, int length) {, +    for (int i = 0; i < length; i++) {, +      checkElementNotNull(array[i], i);, +    }, +    return array;, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.collect.ObjectArrays.checkElementsNotNull;, +, +  /**, +   * Returns {@code true} if this immutable collection's implementation contains references to, +   * user-created objects that aren't accessible via this collection's methods. This is generally, +   * used to determine whether {@code copyOf} implementations should make an explicit copy to avoid, +   * memory leaks., +   */, +    // We serialize by default to ImmutableList, the simplest thing that works., +    return new ImmutableList.SerializedForm(toArray());, +  , +  abstract static class ArrayBasedBuilder<E> extends ImmutableCollection.Builder<E> {, +    Object[] contents;, +    int size;, +    , +    ArrayBasedBuilder(int initialCapacity) {, +      checkArgument(initialCapacity >= 0, "capacity must be >= 0 but was %s", initialCapacity);, +      this.contents = new Object[initialCapacity];, +      this.size = 0;, +    }, +    , +    /**, +     * Expand the absolute capacity of the builder so it can accept at least, +     * the specified number of elements without being resized., +     */, +    private void ensureCapacity(int minCapacity) {, +      if (contents.length < minCapacity) {, +        this.contents = ObjectArrays.arraysCopyOf(, +            this.contents, expandedCapacity(contents.length, minCapacity));, +      }, +    }, +, +    @Override, +    public ArrayBasedBuilder<E> add(E element) {, +      checkNotNull(element);, +      ensureCapacity(size + 1);, +      contents[size++] = element;, +      return this;, +    }, +, +    @Override, +    public Builder<E> add(E... elements) {, +      checkElementsNotNull(elements);, +      ensureCapacity(size + elements.length);, +      System.arraycopy(elements, 0, contents, size, elements.length);, +      size += elements.length;, +      return this;]