[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +  @Override public boolean containsValue(@Nullable Object value) {, +  @Override public V put(@Nullable K key, @Nullable V value) {, +  public V forcePut(@Nullable K key, @Nullable V value) {, +  @Override public V remove(@Nullable Object key) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +  @Override public boolean containsValue(@Nullable Object value) {, +  @Override public V put(@Nullable K key, @Nullable V value) {, +  public V forcePut(@Nullable K key, @Nullable V value) {, +  @Override public V remove(@Nullable Object key) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultimap.java, +  public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +  @Override public boolean containsValue(@Nullable Object value) {, +  @Override public V put(@Nullable K key, @Nullable V value) {, +  public V forcePut(@Nullable K key, @Nullable V value) {, +  @Override public V remove(@Nullable Object key) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultimap.java, +  public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +  @Override public boolean contains(@Nullable Object object) {, +  @Override public boolean equals(@Nullable Object object) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +  @Override public boolean containsValue(@Nullable Object value) {, +  @Override public V put(@Nullable K key, @Nullable V value) {, +  public V forcePut(@Nullable K key, @Nullable V value) {, +  @Override public V remove(@Nullable Object key) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultimap.java, +  public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +  @Override public boolean contains(@Nullable Object object) {, +  @Override public boolean equals(@Nullable Object object) {, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +import com.google.common.testing.NullPointerTester.Visibility;, +      "testNulls", "testNull",, +      "testNullPointers", "testNullPointer",, +      "testNullPointerExceptions", "testNullPointerException");, +  private Visibility visibility = Visibility.PACKAGE;, +, +  /**, +   * Restricts the sanity tests for public API only. By default, package-private API are also, +   * covered., +   */, +  protected final void publicApiOnly() {, +    visibility = Visibility.PUBLIC;, +  }, +        tester.doTestNulls(classToTest, visibility);, +  @VisibleForTesting List<Class<?>> findClassesToTest(, +      if (!visibility.isVisible(cls.getModifiers())) {, +        continue;, +      }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractBiMap.java, +  @Override public boolean containsValue(@Nullable Object value) {, +  @Override public V put(@Nullable K key, @Nullable V value) {, +  public V forcePut(@Nullable K key, @Nullable V value) {, +  @Override public V remove(@Nullable Object key) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultimap.java, +  public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/RegularContiguousSet.java, +  @Override public boolean contains(@Nullable Object object) {, +  @Override public boolean equals(@Nullable Object object) {, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, +import com.google.common.testing.NullPointerTester.Visibility;, +      "testNulls", "testNull",, +      "testNullPointers", "testNullPointer",, +      "testNullPointerExceptions", "testNullPointerException");, +  private Visibility visibility = Visibility.PACKAGE;, +, +  /**, +   * Restricts the sanity tests for public API only. By default, package-private API are also, +   * covered., +   */, +  protected final void publicApiOnly() {, +    visibility = Visibility.PUBLIC;, +  }, +        tester.doTestNulls(classToTest, visibility);, +  @VisibleForTesting List<Class<?>> findClassesToTest(, +      if (!visibility.isVisible(cls.getModifiers())) {, +        continue;, +      }, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +import com.google.common.collect.ImmutableSortedMultiset;, +      .put(SortedMultiset.class, ImmutableSortedMultiset.of()), +      .put(ImmutableSortedMultiset.class, ImmutableSortedMultiset.of()), +      .put(Comparable.class, ByToString.INSTANCE), +      .put(Comparator.class, AlwaysEqual.INSTANCE), +      .put(Ordering.class, AlwaysEqual.INSTANCE), +  // Compare by toString() to satisfy 2 properties:, +  // 1. compareTo(null) should throw NullPointerException, +  // 2. the order is deterministic and easy to understand, for debugging purpose., +  private static final class ByToString implements Comparable<Object>, Serializable {, +    private static final ByToString INSTANCE = new ByToString();, +, +    @Override public int compareTo(Object o) {, +      return toString().compareTo(o.toString());, +    }, +, +    @Override public String toString() {, +      return "BY_TO_STRING";, +    }]