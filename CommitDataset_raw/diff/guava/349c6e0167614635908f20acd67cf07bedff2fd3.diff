[+++ b/android/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/android/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/android/guava/src/com/google/common/math/DoubleMath.java, +    if (x > 0.0 && isFinite(x)) {, +      long significand = getSignificand(x);, +      return (significand & (significand - 1)) == 0;, +    }, +    return false;, +++ b/android/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/android/guava/src/com/google/common/math/DoubleMath.java, +    if (x > 0.0 && isFinite(x)) {, +      long significand = getSignificand(x);, +      return (significand & (significand - 1)) == 0;, +    }, +    return false;, +++ b/android/guava/src/com/google/common/math/DoubleUtils.java, +import com.google.common.annotations.VisibleForTesting;, +  @VisibleForTesting, +  static final long ONE_BITS = 0x3ff0000000000000L;, +++ b/android/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/android/guava/src/com/google/common/math/DoubleMath.java, +    if (x > 0.0 && isFinite(x)) {, +      long significand = getSignificand(x);, +      return (significand & (significand - 1)) == 0;, +    }, +    return false;, +++ b/android/guava/src/com/google/common/math/DoubleUtils.java, +import com.google.common.annotations.VisibleForTesting;, +  @VisibleForTesting, +  static final long ONE_BITS = 0x3ff0000000000000L;, +++ b/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/android/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/android/guava/src/com/google/common/math/DoubleMath.java, +    if (x > 0.0 && isFinite(x)) {, +      long significand = getSignificand(x);, +      return (significand & (significand - 1)) == 0;, +    }, +    return false;, +++ b/android/guava/src/com/google/common/math/DoubleUtils.java, +import com.google.common.annotations.VisibleForTesting;, +  @VisibleForTesting, +  static final long ONE_BITS = 0x3ff0000000000000L;, +++ b/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/guava/src/com/google/common/math/DoubleMath.java, +    if (x > 0.0 && isFinite(x)) {, +      long significand = getSignificand(x);, +      return (significand & (significand - 1)) == 0;, +    }, +    return false;, +++ b/android/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/android/guava/src/com/google/common/math/DoubleMath.java, +    if (x > 0.0 && isFinite(x)) {, +      long significand = getSignificand(x);, +      return (significand & (significand - 1)) == 0;, +    }, +    return false;, +++ b/android/guava/src/com/google/common/math/DoubleUtils.java, +import com.google.common.annotations.VisibleForTesting;, +  @VisibleForTesting, +  static final long ONE_BITS = 0x3ff0000000000000L;, +++ b/guava-tests/test/com/google/common/math/DoubleUtilsTest.java, +  public void testOneBits() {, +    assertEquals(DoubleUtils.ONE_BITS, Double.doubleToRawLongBits(1.0));, +  }, +, +++ b/guava/src/com/google/common/math/DoubleMath.java, +    if (x > 0.0 && isFinite(x)) {, +      long significand = getSignificand(x);]