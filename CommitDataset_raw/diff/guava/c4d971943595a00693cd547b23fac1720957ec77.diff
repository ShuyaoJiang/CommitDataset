[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isTrue();, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isFalse();, +    putEdge(N1, N2);, +    putEdge(N2, N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isTrue();, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isFalse();, +    putEdge(N1, N2);, +    putEdge(N2, N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    assertThat(addEdge(N1, N2, E12)).isTrue();, +    addEdge(N1, N2, E12);, +    assertThat(addEdge(N1, N2, E12)).isFalse();, +    addEdge(N1, N2, E12);, +      addEdge(N4, N5, E12);, +      addEdge(N2, N1, E12);, +    addEdge(N1, N2, E12);, +      addEdge(N1, N2, EDGE_NOT_IN_GRAPH);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isTrue();, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isFalse();, +    putEdge(N1, N2);, +    putEdge(N2, N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    assertThat(addEdge(N1, N2, E12)).isTrue();, +    addEdge(N1, N2, E12);, +    assertThat(addEdge(N1, N2, E12)).isFalse();, +    addEdge(N1, N2, E12);, +      addEdge(N4, N5, E12);, +      addEdge(N2, N1, E12);, +    addEdge(N1, N2, E12);, +      addEdge(N1, N2, EDGE_NOT_IN_GRAPH);, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +  boolean putEdge(Integer n1, Integer n2) {, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N4, N1);, +    putEdge(N1, N2);, +    putEdge(N2, N1);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N3);, +    putEdge(N1, N4);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isTrue();, +    putEdge(N1, N2);, +    assertThat(putEdge(N1, N2)).isFalse();, +    putEdge(N1, N2);, +    putEdge(N2, N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);, +    addEdge(N1, N2, E12);]