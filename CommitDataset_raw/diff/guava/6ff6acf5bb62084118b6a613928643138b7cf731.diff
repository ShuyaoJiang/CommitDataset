[+++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +  @VisibleForTesting static final long FLOOR_SQRT_MAX_LONG = 3037000499L;, +, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +  @VisibleForTesting static final long FLOOR_SQRT_MAX_LONG = 3037000499L;, +, +++ b/guava-tests/test/com/google/common/math/LongMathTest.java, +      long sqrtFloor = LongMath.sqrt(x, FLOOR);, +      boolean isPerfectSquare = (sqrtFloor * sqrtFloor == x);, +        assertEquals(sqrtFloor, LongMath.sqrt(x, UNNECESSARY));, +  @GwtIncompatible("far too slow"), +  public void testSqrtOfPerfectSquareAsDoubleIsPerfect() {, +    // This takes just over a minute on my machine., +    for (long n = 0; n <= LongMath.FLOOR_SQRT_MAX_LONG; n++) {, +      long actual = (long) Math.sqrt(n * n);, +      assertTrue(actual == n);, +    }, +  }, +, +  public void testSqrtOfLongIsAtMostFloorSqrtMaxLong() {, +    long sqrtMaxLong = (long) Math.sqrt(Long.MAX_VALUE);, +    assertTrue(sqrtMaxLong <= LongMath.FLOOR_SQRT_MAX_LONG);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +  @VisibleForTesting static final long FLOOR_SQRT_MAX_LONG = 3037000499L;, +, +++ b/guava-tests/test/com/google/common/math/LongMathTest.java, +      long sqrtFloor = LongMath.sqrt(x, FLOOR);, +      boolean isPerfectSquare = (sqrtFloor * sqrtFloor == x);, +        assertEquals(sqrtFloor, LongMath.sqrt(x, UNNECESSARY));, +  @GwtIncompatible("far too slow"), +  public void testSqrtOfPerfectSquareAsDoubleIsPerfect() {, +    // This takes just over a minute on my machine., +    for (long n = 0; n <= LongMath.FLOOR_SQRT_MAX_LONG; n++) {, +      long actual = (long) Math.sqrt(n * n);, +      assertTrue(actual == n);, +    }, +  }, +, +  public void testSqrtOfLongIsAtMostFloorSqrtMaxLong() {, +    long sqrtMaxLong = (long) Math.sqrt(Long.MAX_VALUE);, +    assertTrue(sqrtMaxLong <= LongMath.FLOOR_SQRT_MAX_LONG);, +  }, +, +++ b/guava/src/com/google/common/math/LongMath.java, +    /*, +     * Let k be the true value of floor(sqrt(x)), so that, +     * , +     *            k * k <= x          <  (k + 1) * (k + 1), +     * (double) (k * k) <= (double) x <= (double) ((k + 1) * (k + 1)) , +     *          since casting to double is nondecreasing., +     *          Note that the right-hand inequality is no longer strict., +     * Math.sqrt(k * k) <= Math.sqrt(x) <= Math.sqrt((k + 1) * (k + 1)), +     *          since Math.sqrt is monotonic., +     * (long) Math.sqrt(k * k) <= (long) Math.sqrt(x) <= (long) Math.sqrt((k + 1) * (k + 1)), +     *          since casting to long is monotonic, +     * k <= (long) Math.sqrt(x) <= k + 1, +     *          since (long) Math.sqrt(k * k) == k, as checked exhaustively in, +     *          {@link LongMathTest#testSqrtOfPerfectSquareAsDoubleIsPerfect}, +     */, +    long guess = (long) Math.sqrt(x);, +    // Note: guess is always <= FLOOR_SQRT_MAX_LONG., +    long guessSquared = guess * guess;, +    // Note (2013-2-26): benchmarks indicate that, inscrutably enough, using if statements is, +    // faster here than using lessThanBranchFree., +        checkRoundingUnnecessary(guessSquared == x);, +        return guess;, +        if (x < guessSquared) {, +          return guess - 1;, +        }, +        return guess;, +        if (x > guessSquared) {, +          return guess + 1;, +        }, +        return guess;, +        long sqrtFloor = guess - ((x < guessSquared) ? 1 : 0); ]