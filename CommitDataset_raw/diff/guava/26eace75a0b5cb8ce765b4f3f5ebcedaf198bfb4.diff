[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +import java.util.Collection;, +   * Adds all the elements from this fluent iterable to {@code collection}., +   *, +   * @param collection the collection to add elements to, +   * @return the collection passed in as the parameter, +   * @since 14.0, +   */, +  public final <C extends Collection<? super E>> C addTo(C collection) {, +    checkNotNull(collection);, +    if (iterable instanceof Collection) {, +      collection.addAll(Collections2.cast(iterable));, +    } else {, +      for (E item : iterable) {, +        collection.add(item);, +      }, +    }, +    return collection;, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +import java.util.Collection;, +   * Adds all the elements from this fluent iterable to {@code collection}., +   *, +   * @param collection the collection to add elements to, +   * @return the collection passed in as the parameter, +   * @since 14.0, +   */, +  public final <C extends Collection<? super E>> C addTo(C collection) {, +    checkNotNull(collection);, +    if (iterable instanceof Collection) {, +      collection.addAll(Collections2.cast(iterable));, +    } else {, +      for (E item : iterable) {, +        collection.add(item);, +      }, +    }, +    return collection;, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  public void testAddTo_List() {, +    ASSERT.that(fluent(1, 3, 5).addTo(Lists.newArrayList(1, 2))), +        .hasContentsInOrder(1, 2, 1, 3, 5);, +  }, +, +  public void testAddTo_Set() {, +    ASSERT.that(fluent(1, 3, 5).addTo(Sets.newHashSet(1, 2))), +        .hasContentsAnyOrder(1, 2, 3, 5);, +  }, +, +  public void testAddTo_SetAllDuplicates() {, +    ASSERT.that(fluent(1, 3, 5).addTo(Sets.newHashSet(1, 2, 3, 5))), +        .hasContentsAnyOrder(1, 2, 3, 5);, +  }, +, +  public void testAddTo_NonCollection() {, +    final ArrayList<Integer> list = Lists.newArrayList(1, 2, 3);, +, +    final ArrayList<Integer> iterList = Lists.newArrayList(9, 8, 7);, +    Iterable<Integer> iterable = new Iterable<Integer>() {, +      @Override, +      public Iterator<Integer> iterator() {, +        return iterList.iterator();, +      }, +    };, +, +    ASSERT.that(FluentIterable.from(iterable).addTo(list)), +      .hasContentsInOrder(1, 2, 3, 9, 8, 7);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +import java.util.Collection;, +   * Adds all the elements from this fluent iterable to {@code collection}., +   *, +   * @param collection the collection to add elements to, +   * @return the collection passed in as the parameter, +   * @since 14.0, +   */, +  public final <C extends Collection<? super E>> C addTo(C collection) {, +    checkNotNull(collection);, +    if (iterable instanceof Collection) {, +      collection.addAll(Collections2.cast(iterable));, +    } else {, +      for (E item : iterable) {, +        collection.add(item);, +      }, +    }, +    return collection;, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  public void testAddTo_List() {, +    ASSERT.that(fluent(1, 3, 5).addTo(Lists.newArrayList(1, 2))), +        .hasContentsInOrder(1, 2, 1, 3, 5);, +  }, +]