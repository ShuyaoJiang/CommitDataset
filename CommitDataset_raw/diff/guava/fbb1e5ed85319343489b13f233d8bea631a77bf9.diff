[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  private static final double EPSILON = 1e-8;, +, +  public void testSimpleAcquireReturnValues() {, +    RateLimiter limiter = RateLimiter.create(ticker, 5.0);, +    assertEquals(0.0, limiter.acquire(), EPSILON);  // R0.00, +    ticker.sleepMillis(200);                        // U0.20, we are ready for the next request..., +    assertEquals(0.0, limiter.acquire(), EPSILON);  // R0.00, ...which is granted immediately, +    assertEquals(0.2, limiter.acquire(), EPSILON);  // R0.20, +    assertEvents("R0.00", "U0.20", "R0.00", "R0.20");, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +  private static final double EPSILON = 1e-8;, +, +  public void testSimpleAcquireReturnValues() {, +    RateLimiter limiter = RateLimiter.create(ticker, 5.0);, +    assertEquals(0.0, limiter.acquire(), EPSILON);  // R0.00, +    ticker.sleepMillis(200);                        // U0.20, we are ready for the next request..., +    assertEquals(0.0, limiter.acquire(), EPSILON);  // R0.00, ...which is granted immediately, +    assertEquals(0.2, limiter.acquire(), EPSILON);  // R0.20, +    assertEvents("R0.00", "U0.20", "R0.00", "R0.20");, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/RateLimiter.java, +   * Acquires the given number of permits from this {@code RateLimiter}, blocking until the, +   * request can be granted. Tells the amount of time slept, if any., +   *, +   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited, +   * @since 16.0 (present in 13.0 with {@code void} return type}), +  public double acquire() {, +    return acquire(1);, +   * request can be granted. Tells the amount of time slept, if any., +   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited, +   * @since 16.0 (present in 13.0 with {@code void} return type}), +  public double acquire(int permits) {, +    return 1.0 * microsToWait / TimeUnit.SECONDS.toMicros(1L);]