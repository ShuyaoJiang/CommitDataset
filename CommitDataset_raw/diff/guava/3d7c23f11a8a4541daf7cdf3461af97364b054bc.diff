[+++ b/guava/src/com/google/common/collect/MutableClassToInstanceMap.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.Set;, + * A mutable class-to-instance map backed by an arbitrary user-provided map. See also {@link, + * ImmutableClassToInstanceMap}., + * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap"> {@code, + * ClassToInstanceMap}</a>., +public final class MutableClassToInstanceMap<B> extends ForwardingMap<Class<? extends B>, B>, +  private final Map<Class<? extends B>, B> delegate;, +, +    this.delegate = checkNotNull(delegate);, +  protected Map<Class<? extends B>, B> delegate() {, +    return delegate;, +  }, +, +  static <B> Entry<Class<? extends B>, B> checkedEntry(final Entry<Class<? extends B>, B> entry) {, +    return new ForwardingMapEntry<Class<? extends B>, B>() {, +      @Override, +      protected Entry<Class<? extends B>, B> delegate() {, +        return entry;, +      }, +, +      @Override, +      public B setValue(B value) {, +        return super.setValue(cast(getKey(), value));, +  }, +, +  @Override, +  public Set<Entry<Class<? extends B>, B>> entrySet() {, +    return new ForwardingSet<Entry<Class<? extends B>, B>>() {, +, +      @Override, +      protected Set<Entry<Class<? extends B>, B>> delegate() {, +        return MutableClassToInstanceMap.this.delegate().entrySet();, +      }, +, +      @Override, +      public Iterator<Entry<Class<? extends B>, B>> iterator() {, +        return new TransformedIterator<Entry<Class<? extends B>, B>, Entry<Class<? extends B>, B>>(, +            delegate().iterator()) {, +          @Override, +          Entry<Class<? extends B>, B> transform(Entry<Class<? extends B>, B> from) {, +            return checkedEntry(from);, +          }, +        };, +      }, +, +      @Override, +      public Object[] toArray() {, +        return standardToArray();, +      }, +, +      @Override, +      public <T> T[] toArray(T[] array) {, +        return standardToArray(array);, +      }, +    };, +  }, +, +  @Override, +  @CanIgnoreReturnValue, +  public B put(Class<? extends B> key, B value) {, +    return super.put(key, cast(key, value));, +  }, +, +  @Override, +  public void putAll(Map<? extends Class<? extends B>, ? extends B> map) {, +    Map<Class<? extends B>, B> copy = new LinkedHashMap<Class<? extends B>, B>(map);, +    for (Entry<? extends Class<? extends B>, ? extends B> entry : copy.entrySet()) {, +      cast(entry.getKey(), entry.getValue());, +    }, +    super.putAll(copy);, +  }]