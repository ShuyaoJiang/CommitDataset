[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.sanityCheckSet;, +    for (N node : sanityCheckSet(graph.nodes())) {, +      for (N adjacentNode : sanityCheckSet(graph.adjacentNodes(node))) {, +      for (N predecessor : sanityCheckSet(graph.predecessors(node))) {, +      for (N successor : sanityCheckSet(graph.successors(node))) {, +    sanityCheckSet(graph.edges());, +    assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph, new Object(), new Object()));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.sanityCheckSet;, +    for (N node : sanityCheckSet(graph.nodes())) {, +      for (N adjacentNode : sanityCheckSet(graph.adjacentNodes(node))) {, +      for (N predecessor : sanityCheckSet(graph.predecessors(node))) {, +      for (N successor : sanityCheckSet(graph.successors(node))) {, +    sanityCheckSet(graph.edges());, +    assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph, new Object(), new Object()));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import static com.google.common.graph.TestUtil.sanityCheckSet;, +    for (E edge : sanityCheckSet(network.edges())) {, +    for (N node : sanityCheckSet(network.nodes())) {, +      int selfLoopCount = network.edgesConnecting(node, node).size();, +      assertThat(network.incidentEdges(node).size() + selfLoopCount), +          .isEqualTo(network.degree(node));, +        assertThat(network.incidentEdges(node).size() + selfLoopCount), +            .isEqualTo(network.inDegree(node) + network.outDegree(node));, +        assertThat(network.inEdges(node)).hasSize(network.inDegree(node));, +        assertThat(network.outEdges(node)).hasSize(network.outDegree(node));, +        assertThat(network.predecessors(node)).isEqualTo(network.adjacentNodes(node));, +        assertThat(network.successors(node)).isEqualTo(network.adjacentNodes(node));, +        assertThat(network.inEdges(node)).isEqualTo(network.incidentEdges(node));, +        assertThat(network.outEdges(node)).isEqualTo(network.incidentEdges(node));, +        Set<E> edgesConnecting = sanityCheckSet(network.edgesConnecting(node, otherNode));, +        boolean nodesConnected = !edgesConnecting.isEmpty();, +          assertThat(nodesConnected).isFalse();, +        assertThat(network.successors(node).contains(otherNode)).isEqualTo(nodesConnected);, +        assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(nodesConnected);, +          assertThat(network.outEdges(node)).contains(edge);, +          assertThat(network.inEdges(otherNode)).contains(edge);, +      for (N adjacentNode : sanityCheckSet(network.adjacentNodes(node))) {, +      for (N predecessor : sanityCheckSet(network.predecessors(node))) {, +      for (N successor : sanityCheckSet(network.successors(node))) {, +, +      for (E incidentEdge : sanityCheckSet(network.incidentEdges(node))) {, +        assertTrue(, +            network.inEdges(node).contains(incidentEdge), +                || network.outEdges(node).contains(incidentEdge));, +        assertThat(network.edges()).contains(incidentEdge);, +        assertThat(network.incidentNodes(incidentEdge)).contains(node);, +      }, +, +      for (E inEdge : sanityCheckSet(network.inEdges(node))) {, +        assertThat(network.incidentEdges(node)).contains(inEdge);, +        assertThat(network.outEdges(network.incidentNodes(inEdge).adjacentNode(node))), +            .contains(inEdge);, +        if (network.isDirected()) {, +          assertThat(network.incidentNodes(inEdge).target()).isEqualTo(node);, +        }, +      }, +, +      for (E outEdge : sanityCheckSet(network.outEdges(node))) {, +        assertThat(network.incidentEdges(node)).contains(outEdge);, +        assertThat(network.inEdges(network.incidentNodes(outEdge).adjacentNode(node))), +            .contains(outEdge);, +        if (network.isDirected()) {, +          assertThat(network.incidentNodes(outEdge).source()).isEqualTo(node);, +        }, +      }, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import static com.google.common.graph.TestUtil.sanityCheckSet;, +    for (N node : sanityCheckSet(graph.nodes())) {, +      for (N adjacentNode : sanityCheckSet(graph.adjacentNodes(node))) {, +      for (N predecessor : sanityCheckSet(graph.predecessors(node))) {, +      for (N successor : sanityCheckSet(graph.successors(node))) {, +    sanityCheckSet(graph.edges());, +    assertThat(graph.edges()).doesNotContain(EndpointPair.of(graph, new Object(), new Object()));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import static com.google.common.graph.TestUtil.sanityCheckSet;, +    for (E edge : sanityCheckSet(network.edges())) {, +    for (N node : sanityCheckSet(network.nodes())) {, +      int selfLoopCount = network.edgesConnecting(node, node).size();, +      assertThat(network.incidentEdges(node).size() + selfLoopCount), +          .isEqualTo(network.degree(node));, +        assertThat(network.incidentEdges(node).size() + selfLoopCount), +            .isEqualTo(network.inDegree(node) + network.outDegree(node));, +        assertThat(network.inEdges(node)).hasSize(network.inDegree(node));, +        assertThat(network.outEdges(node)).hasSize(network.outDegree(node));, +        assertThat(network.predecessors(node)).isEqualTo(network.adjacentNodes(node));, +        assertThat(network.successors(node)).isEqualTo(network.adjacentNodes(node));, +        assertThat(network.inEdges(node)).isEqualTo(network.incidentEdges(node));, +        assertThat(network.outEdges(node)).isEqualTo(network.incidentEdges(node));, +        Set<E> edgesConnecting = sanityCheckSet(network.edgesConnecting(node, otherNode));, +        boolean nodesConnected = !edgesConnecting.isEmpty();, +          assertThat(nodesConnected).isFalse();, +        assertThat(network.successors(node).contains(otherNode)).isEqualTo(nodesConnected);, +        assertThat(network.predecessors(otherNode).contains(node)).isEqualTo(nodesConnected);, +          assertThat(network.outEdges(node)).contains(edge);, +          assertThat(network.inEdges(otherNode)).contains(edge);, +      for (N adjacentNode : sanityCheckSet(network.adjacentNodes(node))) {, +      for (N predecessor : sanityCheckSet(network.predecessors(node))) {, +      for (N successor : sanityCheckSet(network.successors(node))) {]