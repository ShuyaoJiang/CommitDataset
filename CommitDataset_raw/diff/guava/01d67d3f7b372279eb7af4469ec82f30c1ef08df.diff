[+++ b/guava/src/com/google/common/collect/ImmutableMap.java, +import java.util.AbstractMap;, +   * Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry, +   * with those values., +   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always throw {@link, +   * UnsupportedOperationException}., +  static <K, V> Entry<K, V> entryOf(K key, V value) {, +    checkEntryNotNull(key, value);, +    return new AbstractMap.SimpleImmutableEntry<K, V>(key, value);, +    Entry<K, V>[] entries;, +      this.entries = new Entry[initialCapacity];, +      Entry<K, V> entry = entryOf(key, value);, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +import java.util.AbstractMap;, +   * Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry, +   * with those values., +   * <p>A call to {@link Map.Entry#setValue} on the returned entry will always throw {@link, +   * UnsupportedOperationException}., +  static <K, V> Entry<K, V> entryOf(K key, V value) {, +    checkEntryNotNull(key, value);, +    return new AbstractMap.SimpleImmutableEntry<K, V>(key, value);, +    Entry<K, V>[] entries;, +      this.entries = new Entry[initialCapacity];, +      Entry<K, V> entry = entryOf(key, value);, +++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +import java.util.AbstractMap;, +      Entry<K, V>... entries) {, +            return new AbstractMap.SimpleImmutableEntry<K, V>(, +                keySet.asList().get(index), valueList.get(index));]