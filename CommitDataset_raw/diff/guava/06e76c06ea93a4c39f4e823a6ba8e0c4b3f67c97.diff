[+++ b/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import com.google.common.collect.Multiset.Entry;, +import org.easymock.EasyMock;, +, +, +  public void testCopyOfDefensiveCopy() {, +    // Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified, +    // synchronized collections can be safely copied., +    @SuppressWarnings("unchecked"), +    Collection<String> toCopy = EasyMock.createMock(Collection.class);, +    EasyMock.expect(toCopy.toArray()).andReturn(new Object[0]);, +    EasyMock.replay(toCopy);, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.copyOf(Ordering.natural(), toCopy);, +    EasyMock.verify(toCopy);, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testCopyOfSortedDefensiveCopy() {, +    // Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified, +    // synchronized collections can be safely copied., +    SortedMultiset<String> toCopy = EasyMock.createMock(SortedMultiset.class);, +    Set<Entry<String>> entrySet = EasyMock.createMock(Set.class);, +    EasyMock.expect((Comparator<Comparable>) toCopy.comparator()), +      .andReturn(Ordering.natural());, +    EasyMock.expect(toCopy.entrySet()).andReturn(entrySet);, +    EasyMock.expect(entrySet.toArray()).andReturn(new Object[0]);, +    EasyMock.replay(toCopy, entrySet);, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.copyOfSorted(toCopy);, +    EasyMock.verify(toCopy, entrySet);, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import com.google.common.collect.Multiset.Entry;, +import org.easymock.EasyMock;, +, +, +  public void testCopyOfDefensiveCopy() {, +    // Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified, +    // synchronized collections can be safely copied., +    @SuppressWarnings("unchecked"), +    Collection<String> toCopy = EasyMock.createMock(Collection.class);, +    EasyMock.expect(toCopy.toArray()).andReturn(new Object[0]);, +    EasyMock.replay(toCopy);, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.copyOf(Ordering.natural(), toCopy);, +    EasyMock.verify(toCopy);, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testCopyOfSortedDefensiveCopy() {, +    // Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified, +    // synchronized collections can be safely copied., +    SortedMultiset<String> toCopy = EasyMock.createMock(SortedMultiset.class);, +    Set<Entry<String>> entrySet = EasyMock.createMock(Set.class);, +    EasyMock.expect((Comparator<Comparable>) toCopy.comparator()), +      .andReturn(Ordering.natural());, +    EasyMock.expect(toCopy.entrySet()).andReturn(entrySet);, +    EasyMock.expect(entrySet.toArray()).andReturn(new Object[0]);, +    EasyMock.replay(toCopy, entrySet);, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.copyOfSorted(toCopy);, +    EasyMock.verify(toCopy, entrySet);, +  }, +++ b/guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java, +  public ImmutableSortedSet<E> elementSet() {, +    return forward.elementSet().descendingSet();, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import com.google.common.collect.Multiset.Entry;, +import org.easymock.EasyMock;, +, +, +  public void testCopyOfDefensiveCopy() {, +    // Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified, +    // synchronized collections can be safely copied., +    @SuppressWarnings("unchecked"), +    Collection<String> toCopy = EasyMock.createMock(Collection.class);, +    EasyMock.expect(toCopy.toArray()).andReturn(new Object[0]);, +    EasyMock.replay(toCopy);, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.copyOf(Ordering.natural(), toCopy);, +    EasyMock.verify(toCopy);, +  }, +, +  @SuppressWarnings("unchecked"), +  public void testCopyOfSortedDefensiveCopy() {, +    // Test that toArray() is used to make a defensive copy in copyOf(), so concurrently modified, +    // synchronized collections can be safely copied., +    SortedMultiset<String> toCopy = EasyMock.createMock(SortedMultiset.class);, +    Set<Entry<String>> entrySet = EasyMock.createMock(Set.class);, +    EasyMock.expect((Comparator<Comparable>) toCopy.comparator()), +      .andReturn(Ordering.natural());, +    EasyMock.expect(toCopy.entrySet()).andReturn(entrySet);, +    EasyMock.expect(entrySet.toArray()).andReturn(new Object[0]);, +    EasyMock.replay(toCopy, entrySet);, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.copyOfSorted(toCopy);, +    EasyMock.verify(toCopy, entrySet);, +  }, +++ b/guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java]