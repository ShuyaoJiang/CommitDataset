[+++ b/build.xml, +  <property name="gwthome" value="lib" />, +  <target name="dist" depends="jar, gwtjar, zipsrc, javadoc", +++ b/build.xml, +  <property name="gwthome" value="lib" />, +  <target name="dist" depends="jar, gwtjar, zipsrc, javadoc", +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import com.google.common.collect.MapDifference.ValueDifference;, +    return mapDifference(, +  private static <K, V> MapDifference<K, V> mapDifference(boolean areEqual,, +      Map<K, V> onlyOnLeft, Map<K, V> onlyOnRight, Map<K, V> onBoth,, +      Map<K, ValueDifference<V>> differences) {, +    return new MapDifferenceImpl<K, V>(areEqual,, +        Collections.unmodifiableMap(onlyOnLeft),, +        Collections.unmodifiableMap(onlyOnRight),, +        Collections.unmodifiableMap(onBoth),, +        Collections.unmodifiableMap(differences));, +  }, +, +  static class MapDifferenceImpl<K, V> implements MapDifference<K, V> {, +      this.onlyOnLeft = onlyOnLeft;, +      this.onlyOnRight = onlyOnRight;, +      this.onBoth = onBoth;, +      this.differences = differences;, +++ b/build.xml, +  <property name="gwthome" value="lib" />, +  <target name="dist" depends="jar, gwtjar, zipsrc, javadoc", +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import com.google.common.collect.MapDifference.ValueDifference;, +    return mapDifference(, +  private static <K, V> MapDifference<K, V> mapDifference(boolean areEqual,, +      Map<K, V> onlyOnLeft, Map<K, V> onlyOnRight, Map<K, V> onBoth,, +      Map<K, ValueDifference<V>> differences) {, +    return new MapDifferenceImpl<K, V>(areEqual,, +        Collections.unmodifiableMap(onlyOnLeft),, +        Collections.unmodifiableMap(onlyOnRight),, +        Collections.unmodifiableMap(onBoth),, +        Collections.unmodifiableMap(differences));, +  }, +, +  static class MapDifferenceImpl<K, V> implements MapDifference<K, V> {, +      this.onlyOnLeft = onlyOnLeft;, +      this.onlyOnRight = onlyOnRight;, +      this.onBoth = onBoth;, +      this.differences = differences;, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, +import com.google.common.base.Ascii;, + * <p>{@linkplain #equals(Object) Equality} of domain names is case-insensitive, + * with respect to ASCII characters, so for convenience, the {@link #name()} and, + * {@link #parts()} methods return string with all ASCII characters converted to, + * lowercase., +    /*, +     * RFC 1035 defines ASCII components of domain names to be case-insensitive;, +     * normalizing ASCII characters to lower case allows us to simplify matching, +     * and support more robust equality testing., +     */, +    return new InternetDomainName(Ascii.toLowerCase(checkNotNull(domain)));, +++ b/build.xml, +  <property name="gwthome" value="lib" />, +  <target name="dist" depends="jar, gwtjar, zipsrc, javadoc", +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import com.google.common.collect.MapDifference.ValueDifference;, +    return mapDifference(, +  private static <K, V> MapDifference<K, V> mapDifference(boolean areEqual,, +      Map<K, V> onlyOnLeft, Map<K, V> onlyOnRight, Map<K, V> onBoth,, +      Map<K, ValueDifference<V>> differences) {, +    return new MapDifferenceImpl<K, V>(areEqual,, +        Collections.unmodifiableMap(onlyOnLeft),, +        Collections.unmodifiableMap(onlyOnRight),, +        Collections.unmodifiableMap(onBoth),, +        Collections.unmodifiableMap(differences));, +  }, +, +  static class MapDifferenceImpl<K, V> implements MapDifference<K, V> {, +      this.onlyOnLeft = onlyOnLeft;, +      this.onlyOnRight = onlyOnRight;, +      this.onBoth = onBoth;, +      this.differences = differences;, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, +import com.google.common.base.Ascii;, + * <p>{@linkplain #equals(Object) Equality} of domain names is case-insensitive, + * with respect to ASCII characters, so for convenience, the {@link #name()} and, + * {@link #parts()} methods return string with all ASCII characters converted to, + * lowercase., +    /*, +     * RFC 1035 defines ASCII components of domain names to be case-insensitive;, +     * normalizing ASCII characters to lower case allows us to simplify matching, +     * and support more robust equality testing., +     */, +    return new InternetDomainName(Ascii.toLowerCase(checkNotNull(domain)));, +++ b/lib/gwt-dev.jar, +++ b/build.xml, +  <property name="gwthome" value="lib" />, +  <target name="dist" depends="jar, gwtjar, zipsrc, javadoc", +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import com.google.common.collect.MapDifference.ValueDifference;, +    return mapDifference(, +  private static <K, V> MapDifference<K, V> mapDifference(boolean areEqual,, +      Map<K, V> onlyOnLeft, Map<K, V> onlyOnRight, Map<K, V> onBoth,, +      Map<K, ValueDifference<V>> differences) {]