[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Applies {@code function} to each element of this fluent iterable and returns, +   * a fluent iterable with the concatenated combination of results.  {@code function}, +   * returns an Iterable of results., +   *, +   * <p>The returned fluent iterable's iterator supports {@code remove()} if this, +   * function-returned iterables' iterator does. After a successful {@code remove()} call,, +   * the returned fluent iterable no longer contains the corresponding element., +   *, +   * @since 13.0, +   */, +  public <T> FluentIterable<T> transformAndConcat(, +      Function<? super E, ? extends Iterable<T>> function) {, +    return from(Iterables.concat(transform(function)));, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Applies {@code function} to each element of this fluent iterable and returns, +   * a fluent iterable with the concatenated combination of results.  {@code function}, +   * returns an Iterable of results., +   *, +   * <p>The returned fluent iterable's iterator supports {@code remove()} if this, +   * function-returned iterables' iterator does. After a successful {@code remove()} call,, +   * the returned fluent iterable no longer contains the corresponding element., +   *, +   * @since 13.0, +   */, +  public <T> FluentIterable<T> transformAndConcat(, +      Function<? super E, ? extends Iterable<T>> function) {, +    return from(Iterables.concat(transform(function)));, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  private static final class RepeatedStringValueOfFunction, +      implements Function<Integer, List<String>> {, +    @Override, +    public List<String> apply(Integer from) {, +      String value = String.valueOf(from);, +      return ImmutableList.of(value, value);, +    }, +  }, +, +  public void testTransformAndConcat() {, +    List<Integer> input = asList(1, 2, 3);, +    Iterable<String> result =, +        FluentIterable.from(input).transformAndConcat(new RepeatedStringValueOfFunction());, +    assertEquals(asList("1", "1", "2", "2", "3", "3"), Lists.newArrayList(result));, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Applies {@code function} to each element of this fluent iterable and returns, +   * a fluent iterable with the concatenated combination of results.  {@code function}, +   * returns an Iterable of results., +   *, +   * <p>The returned fluent iterable's iterator supports {@code remove()} if this, +   * function-returned iterables' iterator does. After a successful {@code remove()} call,, +   * the returned fluent iterable no longer contains the corresponding element., +   *, +   * @since 13.0, +   */, +  public <T> FluentIterable<T> transformAndConcat(, +      Function<? super E, ? extends Iterable<T>> function) {, +    return from(Iterables.concat(transform(function)));, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  private static final class RepeatedStringValueOfFunction, +      implements Function<Integer, List<String>> {, +    @Override, +    public List<String> apply(Integer from) {, +      String value = String.valueOf(from);, +      return ImmutableList.of(value, value);, +    }, +  }, +, +  public void testTransformAndConcat() {, +    List<Integer> input = asList(1, 2, 3);, +    Iterable<String> result =, +        FluentIterable.from(input).transformAndConcat(new RepeatedStringValueOfFunction());, +    assertEquals(asList("1", "1", "2", "2", "3", "3"), Lists.newArrayList(result));, +  }, +, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +   * Applies {@code function} to each element of this fluent iterable and returns, +   * a fluent iterable with the concatenated combination of results.  {@code function}, +   * returns an Iterable of results., +   *, +   * <p>The returned fluent iterable's iterator supports {@code remove()} if this, +   * function-returned iterables' iterator does. After a successful {@code remove()} call,, +   * the returned fluent iterable no longer contains the corresponding element., +   *, +   * @since 13.0, +   */, +  public <T> FluentIterable<T> transformAndConcat(, +      Function<? super E, ? extends Iterable<T>> function) {, +    return from(Iterables.concat(transform(function)));, +  }]