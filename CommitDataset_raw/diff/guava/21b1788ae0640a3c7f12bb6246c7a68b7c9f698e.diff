[+++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +import java.util.concurrent.Executors;, +  public void testPlatformThreadFactory_default() {, +    ThreadFactory factory = MoreExecutors.platformThreadFactory();, +    assertNotNull(factory);, +    // Executors#defaultThreadFactory() may return a new instance each time., +    assertEquals(factory.getClass(), Executors.defaultThreadFactory().getClass());, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +import java.util.concurrent.Executors;, +  public void testPlatformThreadFactory_default() {, +    ThreadFactory factory = MoreExecutors.platformThreadFactory();, +    assertNotNull(factory);, +    // Executors#defaultThreadFactory() may return a new instance each time., +    assertEquals(factory.getClass(), Executors.defaultThreadFactory().getClass());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +        MoreExecutors.newThread(serviceName(), command).start();, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +import java.util.concurrent.Executors;, +  public void testPlatformThreadFactory_default() {, +    ThreadFactory factory = MoreExecutors.platformThreadFactory();, +    assertNotNull(factory);, +    // Executors#defaultThreadFactory() may return a new instance each time., +    assertEquals(factory.getClass(), Executors.defaultThreadFactory().getClass());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +        MoreExecutors.newThread(serviceName(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +        MoreExecutors.newThread(serviceName() + " " + state, command).start();, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +import java.util.concurrent.Executors;, +  public void testPlatformThreadFactory_default() {, +    ThreadFactory factory = MoreExecutors.platformThreadFactory();, +    assertNotNull(factory);, +    // Executors#defaultThreadFactory() may return a new instance each time., +    assertEquals(factory.getClass(), Executors.defaultThreadFactory().getClass());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +        MoreExecutors.newThread(serviceName(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +        MoreExecutors.newThread(serviceName() + " " + state, command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java, +import java.util.concurrent.ThreadFactory;, +        new ThreadFactory() {, +          @Override public Thread newThread(Runnable runnable) {, +            return MoreExecutors.newThread(serviceName(), runnable);, +          }, +        });, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +import java.util.concurrent.Executors;, +  public void testPlatformThreadFactory_default() {, +    ThreadFactory factory = MoreExecutors.platformThreadFactory();, +    assertNotNull(factory);, +    // Executors#defaultThreadFactory() may return a new instance each time., +    assertEquals(factory.getClass(), Executors.defaultThreadFactory().getClass());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +        MoreExecutors.newThread(serviceName(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +        MoreExecutors.newThread(serviceName() + " " + state, command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java, +import java.util.concurrent.ThreadFactory;, +        new ThreadFactory() {, +          @Override public Thread newThread(Runnable runnable) {, +            return MoreExecutors.newThread(serviceName(), runnable);, +          }, +        });, +++ b/guava/src/com/google/common/util/concurrent/MoreExecutors.java, +import com.google.common.base.Throwables;, +import java.lang.reflect.InvocationTargetException;, +      addShutdownHook(MoreExecutors.newThread("DelayedShutdownHook-for-" + service, new Runnable() {, +      }));, +, +  /**, +   * Returns a default thread factory used to create new threads., +   *, +   * <p>On AppEngine, returns {@code ThreadManager.currentRequestThreadFactory()}., +   * Otherwise, returns {@link Executors#defaultThreadFactory()}., +   *, +   * @since 14.0, +   */, +  @Beta, +  public static ThreadFactory platformThreadFactory() {, +    if (!isAppEngine()) {, +      return Executors.defaultThreadFactory();, +    }, +    try {, +      return (ThreadFactory) Class.forName("com.google.appengine.api.ThreadManager"), +          .getMethod("currentRequestThreadFactory"), +          .invoke(null);, +    } catch (IllegalAccessException e) {, +      throw new RuntimeException("Couldn't invoke ThreadManager.currentRequestThreadFactory", e);, +    } catch (ClassNotFoundException e) {, +      throw new RuntimeException("Couldn't invoke ThreadManager.currentRequestThreadFactory", e);]