[+++ b/guava-tests/test/com/google/common/graph/GraphEqualsTest.java, +  private static final String E11 = "1-1";, +  // Node/edge sets are the same, but node/edge connections differ due to graph type., +  public void equals_directedVsUndirected() {, +  // Node/edge sets and node/edge connections are the same, but types differ., +  // (In this case the graphs are considered equal; the type differences are irrelevant.), +  @Test, +  public void equals_selfLoop_directedVsUndirected() {, +    graph.addEdge(E11, N1, N1);, +, +    Graph<Integer, String> g2;, +    switch (graphType) {, +      case UNDIRECTED:, +        g2 = Graphs.createDirected();, +        break;, +      case DIRECTED:, +        g2 = Graphs.createUndirected();, +        break;, +      default:, +        throw new IllegalStateException("Unexpected graph type: " + graphType);, +    }, +, +    g2.addEdge(E11, N1, N1);, +, +    new EqualsTester().addEqualityGroup(graph, g2).testEquals();, +  }, +, +  // Node/edge sets are the same, but node/edge connections differ., +  // Node/edge sets and node/edge connections are the same, but GraphConfigs differ., +  // Node/edge sets and node/edge connections are the same, but edge order differs., +++ b/guava-tests/test/com/google/common/graph/GraphEqualsTest.java, +  private static final String E11 = "1-1";, +  // Node/edge sets are the same, but node/edge connections differ due to graph type., +  public void equals_directedVsUndirected() {, +  // Node/edge sets and node/edge connections are the same, but types differ., +  // (In this case the graphs are considered equal; the type differences are irrelevant.), +  @Test, +  public void equals_selfLoop_directedVsUndirected() {, +    graph.addEdge(E11, N1, N1);, +, +    Graph<Integer, String> g2;, +    switch (graphType) {, +      case UNDIRECTED:, +        g2 = Graphs.createDirected();, +        break;, +      case DIRECTED:, +        g2 = Graphs.createUndirected();, +        break;, +      default:, +        throw new IllegalStateException("Unexpected graph type: " + graphType);, +    }, +, +    g2.addEdge(E11, N1, N1);, +, +    new EqualsTester().addEqualityGroup(graph, g2).testEquals();, +  }, +, +  // Node/edge sets are the same, but node/edge connections differ., +  // Node/edge sets and node/edge connections are the same, but GraphConfigs differ., +  // Node/edge sets and node/edge connections are the same, but edge order differs., +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import javax.annotation.Nullable;, +, +/**, + * This class provides a skeletal implementation of {@link Graph}. It is recommended to extend this, + * class rather than implement {@link Graph} directly, to ensure consistent {@link #equals(Object)}, + * and {@link #hashCode()} results across different graph implementations., + *, + * @author James Sexton, + * @param <N> Node parameter type, + * @param <E> Edge parameter type, + */, +public abstract class AbstractGraph<N, E> implements Graph<N, E> {, +, +  protected final GraphConfig config;, +, +  /**, +   * Not all subclasses necessarily need to expose a constructor that takes a {@link GraphConfig},, +   * but they do need to provide the {@code config} here that will be returned by {@link #config()}., +   */, +  protected AbstractGraph(GraphConfig config) {, +    this.config = config;]