[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, +     * Expand the absolute capacity of the builder so it can accept at least, +     * the specified number of elements without being resized., +    private void ensureCapacity(int minCapacity) {, +      ensureCapacity(size + 1);, +      ensureCapacity(size + elements.length);, +        ensureCapacity(size + collection.size());, +      ensureCapacity(size + builder.size);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, +     * Expand the absolute capacity of the builder so it can accept at least, +     * the specified number of elements without being resized., +    private void ensureCapacity(int minCapacity) {, +      ensureCapacity(size + 1);, +      ensureCapacity(size + elements.length);, +        ensureCapacity(size + collection.size());, +      ensureCapacity(size + builder.size);, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +  /**, +   * Views the array as an immutable list. Copies if the specified range does not cover the complete, +   * array. Does not check for nulls., +   */, +    if (length < elements.length) {, +      elements = Arrays.copyOf(elements, length);, +    }, +    return new RegularImmutableList<E>(elements);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, +     * Expand the absolute capacity of the builder so it can accept at least, +     * the specified number of elements without being resized., +    private void ensureCapacity(int minCapacity) {, +      ensureCapacity(size + 1);, +      ensureCapacity(size + elements.length);, +        ensureCapacity(size + collection.size());, +      ensureCapacity(size + builder.size);, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +  /**, +   * Views the array as an immutable list. Copies if the specified range does not cover the complete, +   * array. Does not check for nulls., +   */, +    if (length < elements.length) {, +      elements = Arrays.copyOf(elements, length);, +    }, +    return new RegularImmutableList<E>(elements);, +++ b/guava/src/com/google/common/collect/ImmutableSet.java, +   * Constructs an {@code ImmutableSet} from the first {@code n} elements of the specified array., +   * If {@code k} is the size of the returned {@code ImmutableSet}, then the unique elements of, +   * {@code elements} will be in the first {@code k} positions, and {@code elements[i] == null} for, +   * {@code k <= i < n}., +   * <p>This may modify {@code elements}.  Additionally, if {@code n == elements.length} and, +   * {@code elements} contains no duplicates, {@code elements} may be used without copying in the, +   * returned {@code ImmutableSet}, in which case it may no longer be modified., +   * @throws NullPointerException if any of the first {@code n} elements of {@code elements} is, +   *          null, +    } else if (tableSize != chooseTableSize(uniques)) {, +      // when this happens, we have already made a copy, +          (uniques < elements.length) ? Arrays.copyOf(elements, uniques) : elements;, +      return new RegularImmutableSet<E>(uniqueElements, hashCode, table, mask);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableListTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, +     * Expand the absolute capacity of the builder so it can accept at least, +     * the specified number of elements without being resized., +    private void ensureCapacity(int minCapacity) {, +      ensureCapacity(size + 1);, +      ensureCapacity(size + elements.length);, +        ensureCapacity(size + collection.size());, +      ensureCapacity(size + builder.size);, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +  /**, +   * Views the array as an immutable list. Copies if the specified range does not cover the complete, +   * array. Does not check for nulls., +   */, +    if (length < elements.length) {, +      elements = Arrays.copyOf(elements, length);, +    }, +    return new RegularImmutableList<E>(elements);, +++ b/guava/src/com/google/common/collect/ImmutableSet.java]