[+++ b/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java, +/*, + * Copyright (C) 2008 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect.testing;, +, +import static com.google.common.collect.testing.Helpers.castOrCopyToList;, +import static com.google.common.collect.testing.Helpers.equal;, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import static java.util.Collections.sort;, +, +import com.google.common.collect.testing.DerivedCollectionGenerators.SortedMapSubmapTestMapGenerator;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.Set;, +import java.util.SortedMap;, +, +/**, + * Derived suite generators, split out of the suite builders so that they are available to GWT., + *, + * @author George van den Driessche, + */, +public final class DerivedCollectionGenerators {, +  public static class MapEntrySetGenerator<K, V>, +      implements TestSetGenerator<Map.Entry<K, V>>, DerivedGenerator {, +    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>>, +        mapGenerator;, +, +    public MapEntrySetGenerator(, +        OneSizeTestContainerGenerator<, +            Map<K, V>, Map.Entry<K, V>> mapGenerator) {, +      this.mapGenerator = mapGenerator;, +    }, +, +    @Override, +    public SampleElements<Map.Entry<K, V>> samples() {, +      return mapGenerator.samples();, +    }, +, +    @Override, +    public Set<Map.Entry<K, V>> create(Object... elements) {, +      return mapGenerator.create(elements).entrySet();, +    }, +, +    @Override, +    public Map.Entry<K, V>[] createArray(int length) {, +      return mapGenerator.createArray(length);, +    }, +, +    @Override, +    public Iterable<Map.Entry<K, V>> order(, +        List<Map.Entry<K, V>> insertionOrder) {, +      return mapGenerator.order(insertionOrder);, +    }, +, +    public OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>> getInnerGenerator() {, +      return mapGenerator;, +    }, +  }, +, +  // TODO: investigate some API changes to SampleElements that would tidy up, +  // parts of the following classes., +, +  public static class MapKeySetGenerator<K, V>, +      implements TestSetGenerator<K>, DerivedGenerator {, +    private final OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>>, +        mapGenerator;, +    private final SampleElements<K> samples;, +, +    public MapKeySetGenerator(, +        OneSizeTestContainerGenerator<Map<K, V>, Map.Entry<K, V>>, +            mapGenerator) {, +      this.mapGenerator = mapGenerator;, +      final SampleElements<Map.Entry<K, V>> mapSamples =, +          this.mapGenerator.samples();, +      this.samples = new SampleElements<K>(, +          mapSamples.e0.getKey(),, +          mapSamples.e1.getKey(),, +          mapSamples.e2.getKey(),, +          mapSamples.e3.getKey(),]