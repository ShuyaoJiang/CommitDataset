[+++ b/guava/src/com/google/common/collect/TopKSelector.java, +import java.util.stream.Stream;, + * <p>If your input data is available as a {@link Stream}, prefer passing {@link, + * Comparators#least(int)} to {@link Stream#collect(java.util.stream.Collector)}. If it is available, + * as an {@link Iterable} or {@link Iterator}, prefer {@link Ordering#leastOf(Iterable, int)}., + * offering expected O(n + k log k) performance (worst case O(n log k)) for n calls to {@link, + * #offer} and a call to {@link #topK}, with O(k) memory. In comparison, quickselect has the same, + * asymptotics but requires O(n) memory, and a {@code PriorityQueue} implementation takes O(n log, + * k). In benchmarks, this implementation performs at least as well as either implementation, and, + * degrades more gracefully for worst-case input.]