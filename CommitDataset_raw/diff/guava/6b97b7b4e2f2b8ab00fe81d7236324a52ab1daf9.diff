[+++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    private Class<?> returnTypeToTest = Object.class;, +     * Specifies that only the methods that are declared to return {@code returnType} or its subtype, +     * are tested., +     *, +     * @return this tester object, +     */, +    public FactoryMethodReturnValueTester thatReturn(Class<?> returnType) {, +      this.returnTypeToTest = returnType;, +      return this;, +    }, +, +    /**, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +, +    private ImmutableList<Invokable<?, ?>> getFactoriesToTest() {, +      ImmutableList.Builder<Invokable<?, ?>> builder = ImmutableList.builder();, +      for (Invokable<?, ?> factory : factories) {, +        if (returnTypeToTest.isAssignableFrom(factory.getReturnType().getRawType())) {, +          builder.add(factory);, +        }, +      }, +      return builder.build();, +    }, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    private Class<?> returnTypeToTest = Object.class;, +     * Specifies that only the methods that are declared to return {@code returnType} or its subtype, +     * are tested., +     *, +     * @return this tester object, +     */, +    public FactoryMethodReturnValueTester thatReturn(Class<?> returnType) {, +      this.returnTypeToTest = returnType;, +      return this;, +    }, +, +    /**, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +, +    private ImmutableList<Invokable<?, ?>> getFactoriesToTest() {, +      ImmutableList.Builder<Invokable<?, ?>> builder = ImmutableList.builder();, +      for (Invokable<?, ?> factory : factories) {, +        if (returnTypeToTest.isAssignableFrom(factory.getReturnType().getRawType())) {, +          builder.add(factory);, +        }, +      }, +      return builder.build();, +    }, +++ b/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +  public void testEqualsOnReturnValues_good() throws Exception {, +  public void testEqualsOnReturnValues_bad() throws Exception {, +      tester, +          .forAllPublicStaticMethods(BadNullsFactory.class), +          .thatReturn(Object.class), +          .testNulls();, +  public void testNullsOnReturnValues_returnTypeFiltered() throws Exception {, +    tester, +        .forAllPublicStaticMethods(BadNullsFactory.class), +        .thatReturn(Iterable.class), +        .testNulls();, +  }, +  , +    // ignored by testEquals() since it has less parameters., +    public BadEqualsWithParameterizedType() {}, +++ b/guava-testlib/src/com/google/common/testing/ClassSanityTester.java, +    private Class<?> returnTypeToTest = Object.class;, +     * Specifies that only the methods that are declared to return {@code returnType} or its subtype, +     * are tested., +     *, +     * @return this tester object, +     */, +    public FactoryMethodReturnValueTester thatReturn(Class<?> returnType) {, +      this.returnTypeToTest = returnType;, +      return this;, +    }, +, +    /**, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +      for (Invokable<?, ?> factory : getFactoriesToTest()) {, +, +    private ImmutableList<Invokable<?, ?>> getFactoriesToTest() {, +      ImmutableList.Builder<Invokable<?, ?>> builder = ImmutableList.builder();, +      for (Invokable<?, ?> factory : factories) {, +        if (returnTypeToTest.isAssignableFrom(factory.getReturnType().getRawType())) {, +          builder.add(factory);, +        }, +      }, +      return builder.build();, +    }, +++ b/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java, +  public void testEqualsOnReturnValues_good() throws Exception {, +  public void testEqualsOnReturnValues_bad() throws Exception {]