[+++ b/guava/src/com/google/common/util/concurrent/Futures.java, +import static com.google.common.util.concurrent.Uninterruptibles.putUninterruptibly;, +import static com.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly;, +        putUninterruptibly(mayInterruptIfRunningChannel, mayInterruptIfRunning);, +          outputFuture.cancel(, +              takeUninterruptibly(mayInterruptIfRunningChannel));, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +import static com.google.common.util.concurrent.Uninterruptibles.putUninterruptibly;, +import static com.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly;, +        putUninterruptibly(mayInterruptIfRunningChannel, mayInterruptIfRunning);, +          outputFuture.cancel(, +              takeUninterruptibly(mayInterruptIfRunningChannel));, +++ b/guava/src/com/google/common/util/concurrent/Uninterruptibles.java, +import java.util.concurrent.BlockingQueue;, +        } catch (InterruptedException e) {, +, +  /**, +   * Invokes {@code queue.}{@link BlockingQueue#take() take()} uninterruptibly., +   */, +  public static <E> E takeUninterruptibly(BlockingQueue<E> queue) {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          return queue.take();, +        } catch (InterruptedException e) {, +          interrupted = true;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +, +  /**, +   * Invokes {@code queue.}{@link BlockingQueue#put(Object) put(element)}, +   * uninterruptibly., +   */, +  public static <E> void putUninterruptibly(BlockingQueue<E> queue, E element) {, +    boolean interrupted = false;, +    try {, +      while (true) {, +        try {, +          queue.put(element);, +          return;, +        } catch (InterruptedException e) {, +          interrupted = true;, +        }, +      }, +    } finally {, +      if (interrupted) {, +        Thread.currentThread().interrupt();, +      }, +    }, +  }, +]