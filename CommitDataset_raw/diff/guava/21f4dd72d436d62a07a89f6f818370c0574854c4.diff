[+++ b/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_SPECIFICATION_VERSION;, +, +  /**, +   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the, +   * loader of that class from being garbage-collected., +   */, +    if (isJdk9()) {, +      return;, +    }, +  /**, +   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the, +   * loader of that class from being garbage-collected even if there is a {@link SecurityManager}., +   * The {@link SecurityManager} environment makes such leaks more likely because when you create a, +   * {@link URLClassLoader} with a {@link SecurityManager}, the creating code's {@link, +   * java.security.AccessControlContext} is captured, and that references the creating code's {@link, +   * ClassLoader}., +   */, +    if (isJdk9()) {, +      return;, +    }, +    if (isJdk9()) {, +      return;, +    }, +, +  /**, +   * These tests fail in JDK 9 for an unknown reason. It might be the test; it might be the, +   * underlying functionality. Fixing this is not a high priority; if you need it to be fixed,, +   * please comment on <a href="https://github.com/google/guava/issues/3086">issue 3086</a>., +   */, +  private static boolean isJdk9() {, +    return JAVA_SPECIFICATION_VERSION.value().startsWith("9");, +  }, +++ b/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_SPECIFICATION_VERSION;, +, +  /**, +   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the, +   * loader of that class from being garbage-collected., +   */, +    if (isJdk9()) {, +      return;, +    }, +  /**, +   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the, +   * loader of that class from being garbage-collected even if there is a {@link SecurityManager}., +   * The {@link SecurityManager} environment makes such leaks more likely because when you create a, +   * {@link URLClassLoader} with a {@link SecurityManager}, the creating code's {@link, +   * java.security.AccessControlContext} is captured, and that references the creating code's {@link, +   * ClassLoader}., +   */, +    if (isJdk9()) {, +      return;, +    }, +    if (isJdk9()) {, +      return;, +    }, +, +  /**, +   * These tests fail in JDK 9 for an unknown reason. It might be the test; it might be the, +   * underlying functionality. Fixing this is not a high priority; if you need it to be fixed,, +   * please comment on <a href="https://github.com/google/guava/issues/3086">issue 3086</a>., +   */, +  private static boolean isJdk9() {, +    return JAVA_SPECIFICATION_VERSION.value().startsWith("9");, +  }, +++ b/android/guava/src/com/google/common/base/FinalizableReferenceQueue.java, +   *, +   * NOTE: The tests for this behavior (FinalizableReferenceQueueClassLoaderUnloadingTest) fail, +   * strangely when run in JDK 9. We are considering this a known issue. Please see, +   * https://github.com/google/guava/issues/3086 for more information., +++ b/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_SPECIFICATION_VERSION;, +, +  /**, +   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the, +   * loader of that class from being garbage-collected., +   */, +    if (isJdk9()) {, +      return;, +    }, +  /**, +   * Tests that the use of a {@link FinalizableReferenceQueue} does not subsequently prevent the, +   * loader of that class from being garbage-collected even if there is a {@link SecurityManager}., +   * The {@link SecurityManager} environment makes such leaks more likely because when you create a, +   * {@link URLClassLoader} with a {@link SecurityManager}, the creating code's {@link, +   * java.security.AccessControlContext} is captured, and that references the creating code's {@link, +   * ClassLoader}., +   */, +    if (isJdk9()) {, +      return;, +    }, +    if (isJdk9()) {, +      return;, +    }, +, +  /**, +   * These tests fail in JDK 9 for an unknown reason. It might be the test; it might be the, +   * underlying functionality. Fixing this is not a high priority; if you need it to be fixed,, +   * please comment on <a href="https://github.com/google/guava/issues/3086">issue 3086</a>.]