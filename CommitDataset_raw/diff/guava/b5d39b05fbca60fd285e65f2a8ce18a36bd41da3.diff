[+++ b/guava-tests/test/com/google/common/base/JoinerTest.java, +import com.google.common.collect.ImmutableMultimap;, +import java.util.Set;, +  public void testEntries() {, +    MapJoiner j = Joiner.on(";").withKeyValueSeparator(":");, +    assertEquals("", j.join(ImmutableMultimap.of().entries()));, +    assertEquals(":", j.join(ImmutableMultimap.of("", "").entries()));, +    assertEquals("1:a;1:b", j.join(ImmutableMultimap.of("1", "a", "1", "b").entries()));, +, +    Map<String, String> mapWithNulls = Maps.newLinkedHashMap();, +    mapWithNulls.put("a", null);, +    mapWithNulls.put(null, "b");, +    Set<Map.Entry<String, String>> entriesWithNulls = mapWithNulls.entrySet();, +, +    try {, +      j.join(entriesWithNulls);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +, +    assertEquals("a:00;00:b", j.useForNull("00").join(entriesWithNulls));, +, +    StringBuilder sb = new StringBuilder();, +    j.appendTo(sb, ImmutableMultimap.of(1, 2, 3, 4, 5, 6, 1, 3, 5, 10).entries());, +    assertEquals("1:2;1:3;3:4;5:6;5:10", sb.toString());, +  }, +, +++ b/guava-tests/test/com/google/common/base/JoinerTest.java, +import com.google.common.collect.ImmutableMultimap;, +import java.util.Set;, +  public void testEntries() {, +    MapJoiner j = Joiner.on(";").withKeyValueSeparator(":");, +    assertEquals("", j.join(ImmutableMultimap.of().entries()));, +    assertEquals(":", j.join(ImmutableMultimap.of("", "").entries()));, +    assertEquals("1:a;1:b", j.join(ImmutableMultimap.of("1", "a", "1", "b").entries()));, +, +    Map<String, String> mapWithNulls = Maps.newLinkedHashMap();, +    mapWithNulls.put("a", null);, +    mapWithNulls.put(null, "b");, +    Set<Map.Entry<String, String>> entriesWithNulls = mapWithNulls.entrySet();, +, +    try {, +      j.join(entriesWithNulls);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +, +    assertEquals("a:00;00:b", j.useForNull("00").join(entriesWithNulls));, +, +    StringBuilder sb = new StringBuilder();, +    j.appendTo(sb, ImmutableMultimap.of(1, 2, 3, 4, 5, 6, 1, 3, 5, 10).entries());, +    assertEquals("1:2;1:3;3:4;5:6;5:10", sb.toString());, +  }, +, +++ b/guava/src/com/google/common/base/Joiner.java, +import com.google.common.annotations.Beta;, +   * <p>In addition to operating on {@code Map} instances, {@code MapJoiner} can operate on {@code, +   * Multimap} entries in two distinct modes:, +   *, +   * <ul>, +   * <li>To output a separate entry for each key-value pair, pass {@code multimap.entries()} to a, +   *     {@code MapJoiner} method that accepts entries as input, and receive output of the form, +   *     {@code key1=A&key1=B&key2=C}., +   * <li>To output a single entry for each key, pass {@code multimap.asMap()} to a {@code MapJoiner}, +   *     method that accepts a map as input, and receive output of the form {@code, +   *     key1=[A, B]&key2=C}., +   * </ul>, +   *, +      return appendTo(appendable, map.entrySet());, +    }, +, +    /**, +     * Appends the string representation of each entry of {@code map}, using the previously, +     * configured separator and key-value separator, to {@code builder}. Identical to {@link, +     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}., +     */, +    public StringBuilder appendTo(StringBuilder builder, Map<?, ?> map) {, +      return appendTo(builder, map.entrySet());, +    }, +, +    /**, +     * Returns a string containing the string representation of each entry of {@code map}, using the, +     * previously configured separator and key-value separator., +     */, +    public String join(Map<?, ?> map) {, +      return join(map.entrySet());, +    }, +, +    /**, +     * Appends the string representation of each entry in {@code entries}, using the previously, +     * configured separator and key-value separator, to {@code appendable}., +     *, +     * @since Guava release 10, +     */, +    @Beta, +    public <A extends Appendable> A appendTo(A appendable, Iterable<? extends Entry<?, ?>> entries), +        throws IOException {, +      Iterator<? extends Map.Entry<?, ?>> iterator = entries.iterator();, +     * Appends the string representation of each entry in {@code entries}, using the previously, +     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.]