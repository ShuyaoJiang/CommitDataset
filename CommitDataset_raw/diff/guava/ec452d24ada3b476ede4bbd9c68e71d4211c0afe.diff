[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +/*, + * Copyright (C) 2008 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.base.Function;, +import com.google.common.base.Optional;, +import com.google.common.base.Preconditions;, +import com.google.common.base.Predicate;, +, +import java.util.Arrays;, +import java.util.Comparator;, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +, +import javax.annotation.Nullable;, +, +/**, + * {@code FluentIterable} provides a rich interface for manipulating {@code Iterable}s in a chained, + * fashion. A {@code FluentIterable} can be created from an {@code Iterable}, or from a set of, + * elements. The following types of methods are provided on {@code FluentIterable}:, + * <ul>, + * <li>chained methods which return a new {@code FluentIterable} based in some way on the contents, + * of the current one (for example {@link #transform}), + * <li>conversion methods which copy the {@code FluentIterable}'s contents into a new collection or, + * array (for example {@link #toImmutableList}), + * <li>element extraction methods which facilitate the retrieval of certain elements (for example, + * {@link #getLast}), + * <li>query methods which answer questions about the {@code FluentIterable}'s contents (for example, + * {@link #anyMatches}), + * </ul>, + *, + * <p>Here is an example that merges the lists returned by two separate database calls, transforms, + * it by invoking {@code toString()} on each element, and returns the first 10 elements as an, + * {@code ImmutableList}: <pre>   {@code, + *, + *   FluentIterable, + *       .from(database.getClientList()), + *       .append(database.getProviderList()), + *       .transform(Functions.toStringFunction()), + *       .limit(10), + *       .toImmutableList();}</pre>, + *, + * Anything which can be done using {@code FluentIterable} could be done in a different fashion, + * (often with {@link Iterables}), however the use of {@code FluentIterable} makes many sets of, + * operations significantly more concise., + *, + * @author Marcin Mikosik, + * @since 12.0, + */, +@Beta, +@GwtCompatible(emulated = true), +public final class FluentIterable<E> implements Iterable<E> {, +  private final Iterable<E> iterable;, +, +  private FluentIterable(Iterable<E> iterable) {, +    this.iterable = Preconditions.checkNotNull(iterable);, +  }, +, +  /**, +   * Returns a fluent iterable that wraps {@code iterable}, or {@code iterable} itself if it, +   * is already a {@code FluentIterable}., +   */, +  public static <E> FluentIterable<E> from(Iterable<E> iterable) {, +    return (iterable instanceof FluentIterable<?>), +        ? (FluentIterable<E>) iterable : new FluentIterable<E>(iterable);, +  }, +, +  /**, +   * Construct a fluent iterable from another fluent iterable. This is obviously never necessary,, +   * but is intended to help call out cases where one migration from {@code Iterable} to, +   * {@code FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}., +   *, +   * @deprecated instances of {@code FluentIterable} don't need to be converted to, +   *     {@code FluentIterable}, +   */, +  @Deprecated, +  public static <E> FluentIterable<E> from(FluentIterable<E> iterable) {, +    return Preconditions.checkNotNull(iterable);, +  }, +, +  /**, +   * Returns a fluent iterable containing no elements., +   */]