[+++ b/guava/src/com/google/common/collect/SortedMultiset.java, +// Copyright 2011 Google Inc. All Rights Reserved., +, +package com.google.common.collect;, +, +import com.google.common.annotations.Beta;, +, +import java.util.Collection;, +import java.util.Comparator;, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +import java.util.SortedSet;, +, +/**, + * A {@link Multiset} which maintains the ordering of its elements, according to, + * either their natural order or an explicit {@link Comparator}. In all cases,, + * this implementation uses {@link Comparable#compareTo} or, + * {@link Comparator#compare} instead of {@link Object#equals} to determine, + * equivalence of instances., + *, + * <p><b>Warning:</b> The comparison must be <i>consistent with equals</i> as, + * explained by the {@link Comparable} class specification. Otherwise, the, + * resulting multiset will violate the {@link Collection} contract, which it is, + * specified in terms of {@link Object#equals}., + *, + * @author Louis Wasserman, + */, +@Beta, +interface SortedMultiset<E> extends Multiset<E> {, +  /**, +   * Returns the comparator that orders this multiset, or, +   * {@link Ordering#natural()} if the natural ordering of the elements is used., +   */, +  Comparator<? super E> comparator();, +, +  /**, +   * Returns the greatest element in this multiset that is strictly less than, +   * the specified element, or {@code null} if there is no such element., +   */, +  E lower(E e);, +, +  /**, +   * Returns the greatest element in this multiset that is less than or equal to, +   * the specified element, or {@code null} if there is no such element., +   */, +  E floor(E e);, +, +  /**, +   * Returns the lowest element in this multiset that is greater than or equal, +   * to the specified element, or {@code null} if there is no such element., +   */, +  E ceiling(E e);, +, +  /**, +   * Returns the lowest element in this multiset that is strictly greater than, +   * the specified element, or {@code null} if there is no such element., +   */, +  E higher(E e);, +, +  /**, +   * Returns the entry of the greatest element in this multiset that is strictly, +   * less than the specified element, or {@code null} if there is no such, +   * element., +   *, +   * <p>Equivalent to {@code headMultiset(e, false).lastEntry()}., +   */, +  Entry<E> lowerEntry(E e);, +, +  /**, +   * Returns the entry of the greatest element in this multiset that is less, +   * than or equal to the specified element, or {@code null} if there is no such, +   * element., +   * <p>Equivalent to {@code headMultiset(e, true).lastEntry()}., +   */, +  Entry<E> floorEntry(E e);, +, +  /**, +   * Returns the entry of the lowest element in this multiset that is greater, +   * than or equal to the specified element, or {@code null} if there is no such, +   * element., +   * <p>Equivalent to {@code tailMultiset(e, true).firstEntry()}., +   */, +  Entry<E> ceilingEntry(E e);, +, +  /**, +   * Returns the entry of the lowest element in this multiset that is strictly, +   * greater than the specified element, or {@code null} if there is no such, +   * element., +   * <p>Equivalent to {@code tailMultiset(e, false).firstEntry()}., +   */, +  Entry<E> higherEntry(E e);, +, +  /**, +   * Returns the first element in this multiset. Equivalent to {@code, +   * elementSet().first()}., +   *, +   * @throws NoSuchElementException if this multiset is empty, +   */, +  E first();, +]