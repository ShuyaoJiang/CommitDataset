[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.io.Files;, +import java.net.URI;, +import java.util.Enumeration;, +import java.util.HashSet;, +import java.util.Set;, +import java.util.jar.JarEntry;, +import java.util.jar.JarFile;, +  public void testResourceScanner() throws IOException {, +    ResourceScanner scanner = new ResourceScanner();, +    scanner.scan(ClassLoader.getSystemClassLoader());, +    assertThat(scanner.resources).contains("com/google/common/reflect/ClassPathTest.class");, +  }, +, +, +  private static class ResourceScanner extends ClassPath.Scanner {, +    final Set<String> resources = new HashSet<String>();, +, +    @Override protected void scanDirectory(ClassLoader loader, File root) throws IOException {, +      URI base = root.toURI();, +      for (File entry : Files.fileTreeTraverser().preOrderTraversal(root)) {, +        String resourceName = new File(base.relativize(entry.toURI()).getPath()).getPath();, +        resources.add(resourceName);, +      }, +    }, +, +    @Override protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {, +      Enumeration<JarEntry> entries = file.entries();, +      while (entries.hasMoreElements()) {, +        resources.add(entries.nextElement().getName());, +      }, +    }, +  }, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.io.Files;, +import java.net.URI;, +import java.util.Enumeration;, +import java.util.HashSet;, +import java.util.Set;, +import java.util.jar.JarEntry;, +import java.util.jar.JarFile;, +  public void testResourceScanner() throws IOException {, +    ResourceScanner scanner = new ResourceScanner();, +    scanner.scan(ClassLoader.getSystemClassLoader());, +    assertThat(scanner.resources).contains("com/google/common/reflect/ClassPathTest.class");, +  }, +, +, +  private static class ResourceScanner extends ClassPath.Scanner {, +    final Set<String> resources = new HashSet<String>();, +, +    @Override protected void scanDirectory(ClassLoader loader, File root) throws IOException {, +      URI base = root.toURI();, +      for (File entry : Files.fileTreeTraverser().preOrderTraversal(root)) {, +        String resourceName = new File(base.relativize(entry.toURI()).getPath()).getPath();, +        resources.add(resourceName);, +      }, +    }, +, +    @Override protected void scanJarFile(ClassLoader loader, JarFile file) throws IOException {, +      Enumeration<JarEntry> entries = file.entries();, +      while (entries.hasMoreElements()) {, +        resources.add(entries.nextElement().getName());, +      }, +    }, +  }, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +   * {@link #scanDirectory} and {@link #scanJarFile} for directories and jar files on the class path, +   * respectively., +    /** Called when a directory is scanned for resource files. */, +    protected abstract void scanDirectory(ClassLoader loader, File directory), +    /** Called when a jar file is scanned for resource entries. */, +    protected abstract void scanJarFile(ClassLoader loader, JarFile file) throws IOException;, +        scanDirectory(classloader, file);, +        scanJarFile(classloader, jarFile);, +    @Override protected void scanJarFile(ClassLoader classloader, JarFile file) {, +      Enumeration<JarEntry> entries = file.entries();, +      while (entries.hasMoreElements()) {, +        JarEntry entry = entries.nextElement();, +        if (entry.isDirectory() || entry.getName().equals(JarFile.MANIFEST_NAME)) {, +          continue;, +        }, +        resources.get(classloader).add(entry.getName());, +      }, +    }, +, +    @Override protected void scanDirectory(ClassLoader classloader, File directory), +        throws IOException {, +      scanDirectory(directory, classloader, "");, +    }, +, +    private void scanDirectory(, +        File directory, ClassLoader classloader, String packagePrefix) throws IOException {, +      File[] files = directory.listFiles();, +      if (files == null) {, +        logger.warning("Cannot read directory " + directory);, +        // IO error, just skip the directory, +        return;, +      }, +      for (File f : files) {]