[+++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +, +      suite.addTest(suiteForBytes(sliced, bytes, name + ".slice[long, long]",, +          desc, false));, +, +      // test a slice() of the ByteSource starting at a random offset with a length of, +      // Long.MAX_VALUE, +      ByteSourceFactory slicedLongMaxValue = SourceSinkFactories.asSlicedByteSourceFactory(, +          factory, off, Long.MAX_VALUE);, +      suite.addTest(suiteForBytes(slicedLongMaxValue, bytes, name + ".slice[long, Long.MAX_VALUE]",, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +, +      suite.addTest(suiteForBytes(sliced, bytes, name + ".slice[long, long]",, +          desc, false));, +, +      // test a slice() of the ByteSource starting at a random offset with a length of, +      // Long.MAX_VALUE, +      ByteSourceFactory slicedLongMaxValue = SourceSinkFactories.asSlicedByteSourceFactory(, +          factory, off, Long.MAX_VALUE);, +      suite.addTest(suiteForBytes(slicedLongMaxValue, bytes, name + ".slice[long, Long.MAX_VALUE]",, +++ b/guava-tests/test/com/google/common/io/SourceSinkFactories.java, +      final long off, final long len) {, +        int startOffset = (int) Math.min(off, baseExpected.length);, +        int actualLen = (int) Math.min(len, baseExpected.length - startOffset);, +        return Arrays.copyOfRange(baseExpected, startOffset, startOffset + actualLen);, +++ b/guava-tests/test/com/google/common/io/ByteSourceTester.java, +, +      suite.addTest(suiteForBytes(sliced, bytes, name + ".slice[long, long]",, +          desc, false));, +, +      // test a slice() of the ByteSource starting at a random offset with a length of, +      // Long.MAX_VALUE, +      ByteSourceFactory slicedLongMaxValue = SourceSinkFactories.asSlicedByteSourceFactory(, +          factory, off, Long.MAX_VALUE);, +      suite.addTest(suiteForBytes(slicedLongMaxValue, bytes, name + ".slice[long, Long.MAX_VALUE]",, +++ b/guava-tests/test/com/google/common/io/SourceSinkFactories.java, +      final long off, final long len) {, +        int startOffset = (int) Math.min(off, baseExpected.length);, +        int actualLen = (int) Math.min(len, baseExpected.length - startOffset);, +        return Arrays.copyOfRange(baseExpected, startOffset, startOffset + actualLen);, +++ b/guava/src/com/google/common/io/ByteSource.java, +      Optional<Long> optionalUnslicedSize = ByteSource.this.sizeIfKnown();, +      if (optionalUnslicedSize.isPresent()) {, +        long unslicedSize = optionalUnslicedSize.get();, +        long off = Math.min(offset, unslicedSize);, +        return Optional.of(Math.min(length, unslicedSize - off));]