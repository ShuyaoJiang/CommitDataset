[+++ b/guava/src/com/google/common/math/BigIntegerMath.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * <p>Similar functionality for {@code int} and for {@code long} can be found in {@link IntMath} and, + * {@link LongMath} respectively., +          BigInteger halfPower =, +              SQRT2_PRECOMPUTED_BITS.shiftRight(SQRT2_PRECOMPUTE_THRESHOLD - logFloor);, +        // Since sqrt(2) is irrational, log2(x) - logFloor cannot be exactly 0.5, +        //, +        // To determine which side of logFloor.5 the logarithm is,, +        // we compare x^2 to 2^(2 * logFloor + 1)., +  @VisibleForTesting, +  static final BigInteger SQRT2_PRECOMPUTED_BITS =, +       * correct answer eventually, but in practice this branch should almost never be entered, and, +       * even then the loop should not run more than once., +         * We wish to test whether or not x <= (sqrtFloor + 0.5)^2 = halfSquare + 0.25. Since both x, +         * and halfSquare are integers, this is equivalent to testing whether or not x <=, +   * Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1}, +   * if {@code n == 0}., +   * <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced, +   * multiplies. It also removes all the 2s from the intermediate products (shifting them back in at, +   * the end)., +        accum =, +            accum, +++ b/guava/src/com/google/common/math/BigIntegerMath.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * <p>Similar functionality for {@code int} and for {@code long} can be found in {@link IntMath} and, + * {@link LongMath} respectively., +          BigInteger halfPower =, +              SQRT2_PRECOMPUTED_BITS.shiftRight(SQRT2_PRECOMPUTE_THRESHOLD - logFloor);, +        // Since sqrt(2) is irrational, log2(x) - logFloor cannot be exactly 0.5, +        //, +        // To determine which side of logFloor.5 the logarithm is,, +        // we compare x^2 to 2^(2 * logFloor + 1)., +  @VisibleForTesting, +  static final BigInteger SQRT2_PRECOMPUTED_BITS =, +       * correct answer eventually, but in practice this branch should almost never be entered, and, +       * even then the loop should not run more than once., +         * We wish to test whether or not x <= (sqrtFloor + 0.5)^2 = halfSquare + 0.25. Since both x, +         * and halfSquare are integers, this is equivalent to testing whether or not x <=, +   * Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1}, +   * if {@code n == 0}., +   * <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced, +   * multiplies. It also removes all the 2s from the intermediate products (shifting them back in at, +   * the end)., +        accum =, +            accum, +++ b/guava/src/com/google/common/math/DoubleMath.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * This method returns a value y such that rounding y DOWN (towards zero) gives the same result as, +   * rounding x according to the specified mode., +      case HALF_UP:, +        {, +      case HALF_DOWN:, +        {, +   *     <li>{@code x}, after being rounded to a mathematical integer using the specified rounding, +   *         mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code, +   *     <li>{@code x}, after being rounded to a mathematical integer using the specified rounding, +   *         mode, is either less than {@code Long.MIN_VALUE} or greater than {@code, +  // #roundIntermediate, java.lang.Math.getExponent, com.google.common.math.DoubleUtils, +  @GwtIncompatible, +        && (x == 0.0, +            || SIGNIFICAND_BITS - Long.numberOfTrailingZeros(getSignificand(x)) <= getExponent(x));, +   * Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if, +   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if, +   * {@code n! > Double.MAX_VALUE}., +  @VisibleForTesting static final int MAX_FACTORIAL = 170;, +    0x1.95d5f3d928edep945, +  };, +   * <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a}, +   *     and {@code b} are fuzzily equal if and only if {@code a == b}., +   *     Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves.</li>, +    return Math.copySign(a - b, 1.0) <= tolerance, +  // com.google.common.math.DoubleUtils, +  @GwtIncompatible, +  // com.google.common.math.DoubleUtils, +  @GwtIncompatible, +  // com.google.common.math.DoubleUtils, +  @GwtIncompatible, +++ b/guava/src/com/google/common/math/BigIntegerMath.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License.]