[+++ b/guava/src/com/google/common/base/Preconditions.java, + * correctly (that is, whether its <i>preconditions</i> were met)., + * <p>If the precondition is not met, the {@code Preconditions} method throws an unchecked exception, + * of a specified type, which helps the method in which the exception was thrown communicate that, + * its caller has made a mistake. This allows constructs such as, + *, + * <pre>{@code, + *   if (value < 0) {, + *     throw new IllegalArgumentException("input is negative: " + value);, + *   // calculate square root, + * }, + * }</pre>, + * <p>to be replaced with the more compact, + *, + * <pre>{@code, + * public static double sqrt(double value) {, + *   checkArgument(value >= 0, "input is negative: %s", value);, + *   // calculate square root, + * }, + * }</pre>, + *, + * <p>so that a hypothetical bad caller of this method, such as:, + *, + * <pre>{@code, + * }, + * }</pre>, + * <p>would be flagged as having called {@code sqrt()} with an illegal argument., + * <h3>Performance</h3>, + * <p>Avoid passing message arguments that are expensive to compute; your code will always compute, + * them, even though they usually won't be needed. If you have such arguments, use the conventional, + * if/throw idiom instead., + * <p>Depending on your message arguments, memory may be allocated for boxing and varargs array, + * creation. However, the methods of this class have a large number of overloads that prevent such, + * allocations in many common cases., + *, + * <p>The message string is not formatted unless the exception will be thrown, so the cost of the, + * string formatting itself should not be a concern., + *, + * <p>As with any performance concerns, you should consider profiling your code (in a production, + * environment if possible) before spending a lot of effort on tweaking a particular element., + * standard JDK exceptions such as {@link java.util.NoSuchElementException} or {@link, + * UnsupportedOperationException} in the situations they are intended for., + * misleading to future readers of the code and of stack traces. See <a, + * href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">Conditional failures, + * <p>Projects which use {@code com.google.common} should generally avoid the use of {@link, + * java.util.Objects#requireNonNull(Object)}. Instead, use whichever of {@link, + * #checkNotNull(Object)} or {@link Verify#verifyNotNull(Object)} is appropriate to the situation., + * (The same goes for the message-accepting overloads.), + * <p>See the Guava User Guide on <a, + * href="https://github.com/google/guava/wiki/PreconditionsExplained">using {@code]