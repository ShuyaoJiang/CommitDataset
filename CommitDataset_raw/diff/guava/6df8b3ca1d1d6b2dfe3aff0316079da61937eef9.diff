[+++ b/guava-gwt/test/com/google/common/collect/ImmutableMultisetTest_gwt.java, +public void testToImmutableMultisetCountFunction() throws Exception {, +  com.google.common.collect.ImmutableMultisetTest testCase = new com.google.common.collect.ImmutableMultisetTest();, +  testCase.testToImmutableMultisetCountFunction();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableMultisetTest_gwt.java, +public void testToImmutableMultisetCountFunction() throws Exception {, +  com.google.common.collect.ImmutableMultisetTest testCase = new com.google.common.collect.ImmutableMultisetTest();, +  testCase.testToImmutableMultisetCountFunction();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/MultisetsTest_gwt.java, +public void testToMultisetCountFunction() throws Exception {, +  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();, +  testCase.testToMultisetCountFunction();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableMultisetTest_gwt.java, +public void testToImmutableMultisetCountFunction() throws Exception {, +  com.google.common.collect.ImmutableMultisetTest testCase = new com.google.common.collect.ImmutableMultisetTest();, +  testCase.testToImmutableMultisetCountFunction();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/MultisetsTest_gwt.java, +public void testToMultisetCountFunction() throws Exception {, +  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();, +  testCase.testToMultisetCountFunction();, +}, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java, +  public void testToImmutableMultisetCountFunction() {, +    BiPredicate<ImmutableMultiset<String>, ImmutableMultiset<String>> equivalence =, +        (ms1, ms2) -> ms1.equals(ms2) && ms1.entrySet().asList().equals(ms2.entrySet().asList());, +    CollectorTester.of(, +            ImmutableMultiset.<Multiset.Entry<String>, String>toImmutableMultiset(, +                Multiset.Entry::getElement, Multiset.Entry::getCount),, +            equivalence), +        .expectCollects(ImmutableMultiset.of()), +        .expectCollects(, +            ImmutableMultiset.of("a", "a", "b", "c", "c", "c"),, +            Multisets.immutableEntry("a", 1),, +            Multisets.immutableEntry("b", 1),, +            Multisets.immutableEntry("a", 1),, +            Multisets.immutableEntry("c", 3));, +  }, +, +            ImmutableMultiset.<TypeWithDuplicates>builder().add(a).addCopies(b1, 2).add(c).build(),, +            a,, +            b1,, +            c,, +            b2);, +    collector = ImmutableMultiset.toImmutableMultiset(e -> e, e -> 1);, +    CollectorTester.of(collector, equivalence), +        .expectCollects(, +            ImmutableMultiset.<TypeWithDuplicates>builder().add(a).addCopies(b1, 2).add(c).build(),, +++ b/guava-gwt/test/com/google/common/collect/ImmutableMultisetTest_gwt.java, +public void testToImmutableMultisetCountFunction() throws Exception {, +  com.google.common.collect.ImmutableMultisetTest testCase = new com.google.common.collect.ImmutableMultisetTest();, +  testCase.testToImmutableMultisetCountFunction();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/MultisetsTest_gwt.java, +public void testToMultisetCountFunction() throws Exception {, +  com.google.common.collect.MultisetsTest testCase = new com.google.common.collect.MultisetsTest();, +  testCase.testToMultisetCountFunction();, +}, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java, +  public void testToImmutableMultisetCountFunction() {, +    BiPredicate<ImmutableMultiset<String>, ImmutableMultiset<String>> equivalence =, +        (ms1, ms2) -> ms1.equals(ms2) && ms1.entrySet().asList().equals(ms2.entrySet().asList());, +    CollectorTester.of(, +            ImmutableMultiset.<Multiset.Entry<String>, String>toImmutableMultiset(, +                Multiset.Entry::getElement, Multiset.Entry::getCount),, +            equivalence), +        .expectCollects(ImmutableMultiset.of()), +        .expectCollects(, +            ImmutableMultiset.of("a", "a", "b", "c", "c", "c"),, +            Multisets.immutableEntry("a", 1),, +            Multisets.immutableEntry("b", 1),, +            Multisets.immutableEntry("a", 1),, +            Multisets.immutableEntry("c", 3));, +  }, +, +            ImmutableMultiset.<TypeWithDuplicates>builder().add(a).addCopies(b1, 2).add(c).build(),, +            a,, +            b1,, +            c,, +            b2);, +    collector = ImmutableMultiset.toImmutableMultiset(e -> e, e -> 1);, +    CollectorTester.of(collector, equivalence), +        .expectCollects(, +            ImmutableMultiset.<TypeWithDuplicates>builder().add(a).addCopies(b1, 2).add(c).build(),, +++ b/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +  public void testToImmutableSortedMultisetCountFunction() {, +    BiPredicate<ImmutableSortedMultiset<String>, ImmutableSortedMultiset<String>> equivalence =, +        (ms1, ms2) ->, +            ms1.equals(ms2), +                && ms1.entrySet().asList().equals(ms2.entrySet().asList())]