[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +    } else if ((iterable instanceof Set)) {, +    return concat(ImmutableList.of(a, b));, +    return concat(ImmutableList.of(a, b, c));, +    return concat(ImmutableList.of(a, b, c, d));, +  private static <T> Iterator<Iterator<? extends T>> iterators(, +    return new TransformedIterator<Iterable<? extends T>, Iterator<? extends T>>(, +        iterables.iterator()) {, +      Iterator<? extends T> transform(Iterable<? extends T> from) {, +        return from.iterator();, +    return (iterable instanceof List), +        ? ((List<T>) iterable).get(position), +        : Iterators.get(iterable.iterator(), position);, +    Iterators.checkNonnegative(position);, +    if (iterable instanceof List) {, +      List<? extends T> list = Lists.cast(iterable);, +      return (position < list.size()) ? list.get(position) : defaultValue;, +    } else {, +      Iterator<? extends T> iterator = iterable.iterator();, +      Iterators.advance(iterator, position);, +      return Iterators.getNext(iterator, defaultValue);, +      Collection<? extends T> c = Collections2.cast(iterable);, +      if (c.isEmpty()) {, +      } else if (iterable instanceof List) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +    } else if ((iterable instanceof Set)) {, +    return concat(ImmutableList.of(a, b));, +    return concat(ImmutableList.of(a, b, c));, +    return concat(ImmutableList.of(a, b, c, d));, +  private static <T> Iterator<Iterator<? extends T>> iterators(, +    return new TransformedIterator<Iterable<? extends T>, Iterator<? extends T>>(, +        iterables.iterator()) {, +      Iterator<? extends T> transform(Iterable<? extends T> from) {, +        return from.iterator();, +    return (iterable instanceof List), +        ? ((List<T>) iterable).get(position), +        : Iterators.get(iterable.iterator(), position);, +    Iterators.checkNonnegative(position);, +    if (iterable instanceof List) {, +      List<? extends T> list = Lists.cast(iterable);, +      return (position < list.size()) ? list.get(position) : defaultValue;, +    } else {, +      Iterator<? extends T> iterator = iterable.iterator();, +      Iterators.advance(iterator, position);, +      return Iterators.getNext(iterator, defaultValue);, +      Collection<? extends T> c = Collections2.cast(iterable);, +      if (c.isEmpty()) {, +      } else if (iterable instanceof List) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import com.google.common.base.Predicates;, +    return removeIf(removeFrom, Predicates.in(elementsToRemove));, +    return removeIf(removeFrom, Predicates.not(Predicates.in(elementsToRetain)));, +    return Collections2.STANDARD_JOINER, +    return indexOf(iterator, predicate) != -1;, +    return getNext(filter(iterator, predicate), defaultValue);, +    for (int i = 0; iterator.hasNext(); i++) {, +    int skipped = advance(iterator, position);, +    if (!iterator.hasNext()) {, +    return iterator.next();, +  }, +  static void checkNonnegative(int position) {, +    advance(iterator, position);, +    return getNext(iterator, defaultValue);, +    checkArgument(numberToAdvance >= 0, "numberToAdvance must be nonnegative");, +    return forArray(array, 0, array.length, 0);, +  private static class MergingIterator<T> extends UnmodifiableIterator<T> {, +        final Comparator<? super T> itemComparator) {, +              return itemComparator.compare(o1.peek(), o2.peek());, +    public boolean hasNext() {, +      return !queue.isEmpty();, +    @Override, +    public T next() {, +      PeekingIterator<T> nextIter = queue.remove();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +    } else if ((iterable instanceof Set)) {, +    return concat(ImmutableList.of(a, b));, +    return concat(ImmutableList.of(a, b, c));, +    return concat(ImmutableList.of(a, b, c, d));, +  private static <T> Iterator<Iterator<? extends T>> iterators(, +    return new TransformedIterator<Iterable<? extends T>, Iterator<? extends T>>(, +        iterables.iterator()) {, +      Iterator<? extends T> transform(Iterable<? extends T> from) {, +        return from.iterator();, +    return (iterable instanceof List), +        ? ((List<T>) iterable).get(position), +        : Iterators.get(iterable.iterator(), position);, +    Iterators.checkNonnegative(position);, +    if (iterable instanceof List) {, +      List<? extends T> list = Lists.cast(iterable);, +      return (position < list.size()) ? list.get(position) : defaultValue;, +    } else {, +      Iterator<? extends T> iterator = iterable.iterator();, +      Iterators.advance(iterator, position);, +      return Iterators.getNext(iterator, defaultValue);, +      Collection<? extends T> c = Collections2.cast(iterable);, +      if (c.isEmpty()) {, +      } else if (iterable instanceof List) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import com.google.common.base.Predicates;, +    return removeIf(removeFrom, Predicates.in(elementsToRemove));]