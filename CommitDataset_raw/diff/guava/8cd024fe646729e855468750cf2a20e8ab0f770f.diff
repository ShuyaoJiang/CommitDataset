[+++ /dev/null, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/BigIntegerMath.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.math;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.math.MathPreconditions.checkNonNegative;, +import static com.google.common.math.MathPreconditions.checkPositive;, +import static com.google.common.math.MathPreconditions.checkRoundingUnnecessary;, +import static java.math.RoundingMode.CEILING;, +import static java.math.RoundingMode.FLOOR;, +import static java.math.RoundingMode.HALF_EVEN;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.VisibleForTesting;, +, +import java.math.BigInteger;, +import java.math.RoundingMode;, +import java.util.ArrayList;, +import java.util.List;, +, +/**, + * A class for arithmetic on values of type {@code BigInteger}., + *, + * <p>The implementations of many methods in this class are based on material from Henry S. Warren,, + * Jr.'s <i>Hacker's Delight</i>, (Addison Wesley, 2002)., + *, + * <p>Similar functionality for {@code int} and for {@code long} can be found in, + * {@link IntMath} and {@link LongMath} respectively., + *, + * @author Louis Wasserman, + * @since 11.0, + */, +@Beta, +@GwtCompatible(emulated = true), +public final class BigIntegerMath {, +  /**, +   * Returns {@code true} if {@code x} represents a power of two., +   */, +  public static boolean isPowerOfTwo(BigInteger x) {, +    checkNotNull(x);, +    return x.signum() > 0 && x.getLowestSetBit() == x.bitLength() - 1;, +  }, +, +  /**, +   * Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode., +   *, +   * @throws IllegalArgumentException if {@code x <= 0}, +   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}, +   *         is not a power of two, +   */, +  @SuppressWarnings("fallthrough"), +  public static int log2(BigInteger x, RoundingMode mode) {, +    checkPositive("x", checkNotNull(x));, +    int logFloor = x.bitLength() - 1;, +    switch (mode) {, +      case UNNECESSARY:, +        checkRoundingUnnecessary(isPowerOfTwo(x)); // fall through, +      case DOWN:, +      case FLOOR:, +        return logFloor;, +, +      case UP:, +      case CEILING:, +        return isPowerOfTwo(x) ? logFloor : logFloor + 1;, +, +      case HALF_DOWN:, +      case HALF_UP:, +      case HALF_EVEN:, +        if (logFloor < SQRT2_PRECOMPUTE_THRESHOLD) {, +          BigInteger halfPower = SQRT2_PRECOMPUTED_BITS.shiftRight(, +              SQRT2_PRECOMPUTE_THRESHOLD - logFloor);, +          if (x.compareTo(halfPower) <= 0) {, +            return logFloor;, +          } else {, +            return logFloor + 1;, +          }, +        }, +        /*, +         * Since sqrt(2) is irrational, log2(x) - logFloor cannot be exactly 0.5, +         *, +         * To determine which side of logFloor.5 the logarithm is, we compare x^2 to 2^(2 *]