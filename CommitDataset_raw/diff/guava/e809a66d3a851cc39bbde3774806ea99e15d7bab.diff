[+++ b/guava/src/com/google/common/base/Function.java, + * Determines an output value based on an input value; a pre-Java-8 version of {@code, + * java.util.function.Function}., + * <h3>For Java 8+ users</h3>, + *, + * <p>This interface is now a legacy type. Use {@code java.util.function.Function} (or the, + * appropriate primitive specialization such as {@code ToIntFunction}) instead whenever possible., + * Otherwise, reducing <i>explicit</i> dependencies on this type by using lambda expressions or, + * method references instead of classes will leave your code easier to migrate in the future., + *, + * <p>To use an existing function (say, named {@code function}) in a context where the <i>other, + * type</i> of function is expected, use {@code function::apply}. A future version of, + * {@code com.google.common.base.Function} will be made to <i>extend</i>, + * {@code java.util.function.Function}, making conversion code necessary only in one direction., + * At that time, we plan to also deprecate this interface., + *, +++ b/guava/src/com/google/common/base/Function.java, + * Determines an output value based on an input value; a pre-Java-8 version of {@code, + * java.util.function.Function}., + * <h3>For Java 8+ users</h3>, + *, + * <p>This interface is now a legacy type. Use {@code java.util.function.Function} (or the, + * appropriate primitive specialization such as {@code ToIntFunction}) instead whenever possible., + * Otherwise, reducing <i>explicit</i> dependencies on this type by using lambda expressions or, + * method references instead of classes will leave your code easier to migrate in the future., + *, + * <p>To use an existing function (say, named {@code function}) in a context where the <i>other, + * type</i> of function is expected, use {@code function::apply}. A future version of, + * {@code com.google.common.base.Function} will be made to <i>extend</i>, + * {@code java.util.function.Function}, making conversion code necessary only in one direction., + * At that time, we plan to also deprecate this interface., + *, +++ b/guava/src/com/google/common/base/Functions.java, +   *, +   * <p><b>Warning:</b> as with all function types in this package, avoid depending on the specific, +   * {@code equals}, {@code hashCode} or {@code toString} behavior of the returned function. A, +   * future migration to {@code java.util.function} will not preserve this behavior., +   *, +   * <p><b>For Java 8 users:</b> use the method reference {@code Object::toString} instead. In the, +   * future, when this class requires Java 8, this method will be deprecated. See {@link Function}, +   * for more important information about the Java 8 transition.]