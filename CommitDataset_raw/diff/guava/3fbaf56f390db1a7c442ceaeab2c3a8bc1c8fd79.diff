[+++ b/README, +Report a defect or feature request here:, +4. Our classes are not designed to protect against a malicious caller., +You should not use them for communication between trusted and, +untrusted code., +, +5. We unit-test and benchmark the libraries using only OpenJDK 1.6 on, +Linux. Some features, especially in com.google.common.io, may not work, +correctly in other environments., +, +++ b/README, +Report a defect or feature request here:, +4. Our classes are not designed to protect against a malicious caller., +You should not use them for communication between trusted and, +untrusted code., +, +5. We unit-test and benchmark the libraries using only OpenJDK 1.6 on, +Linux. Some features, especially in com.google.common.io, may not work, +correctly in other environments., +, +++ b/build.xml, +  <property name="fulljavadoc" value="true" />, +         use="${fulljavadoc}", +         linksource="${fulljavadoc}", +++ b/README, +Report a defect or feature request here:, +4. Our classes are not designed to protect against a malicious caller., +You should not use them for communication between trusted and, +untrusted code., +, +5. We unit-test and benchmark the libraries using only OpenJDK 1.6 on, +Linux. Some features, especially in com.google.common.io, may not work, +correctly in other environments., +, +++ b/build.xml, +  <property name="fulljavadoc" value="true" />, +         use="${fulljavadoc}", +         linksource="${fulljavadoc}", +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  private final int limit;, +    this(strategy, false, CharMatcher.NONE, Integer.MAX_VALUE);, +      CharMatcher trimmer, int limit) {, +    this.limit = limit;, +    return new Splitter(strategy, true, trimmer, limit);, +    return new Splitter(strategy, omitEmptyStrings, trimmer, limit);, +    int limit;, +      this.limit = splitter.limit;, +        if (limit == 1) {, +          // The limit has been reached, return the rest of the string as the, +          // final item.  This is tested after empty string removal so that, +          // empty strings do not count towards the limit., +          end = toSplit.length();, +          offset = -1;, +          // Since we may have changed the end, we need to trim it again., +          while (end > start && trimmer.matches(toSplit.charAt(end - 1))) {, +            end--;, +          }, +        } else {, +          limit--;, +        }, +, +++ b/README, +Report a defect or feature request here:, +4. Our classes are not designed to protect against a malicious caller., +You should not use them for communication between trusted and, +untrusted code., +, +5. We unit-test and benchmark the libraries using only OpenJDK 1.6 on, +Linux. Some features, especially in com.google.common.io, may not work, +correctly in other environments., +, +++ b/build.xml, +  <property name="fulljavadoc" value="true" />, +         use="${fulljavadoc}", +         linksource="${fulljavadoc}", +++ b/gwt-super/com/google/common/base/super/com/google/common/base/Splitter.java, +  private final int limit;, +    this(strategy, false, CharMatcher.NONE, Integer.MAX_VALUE);, +      CharMatcher trimmer, int limit) {, +    this.limit = limit;, +    return new Splitter(strategy, true, trimmer, limit);, +    return new Splitter(strategy, omitEmptyStrings, trimmer, limit);, +    int limit;, +      this.limit = splitter.limit;, +        if (limit == 1) {, +          // The limit has been reached, return the rest of the string as the, +          // final item.  This is tested after empty string removal so that, +          // empty strings do not count towards the limit., +          end = toSplit.length();, +          offset = -1;, +          // Since we may have changed the end, we need to trim it again., +          while (end > start && trimmer.matches(toSplit.charAt(end - 1))) {, +            end--;, +          }, +        } else {, +          limit--;, +        }, +, +++ b/src/com/google/common/base/Equivalence.java, +   *     {@code equivalent(x, y)} returns {@code true} and {@code equivalent(y, z)} returns {@code]