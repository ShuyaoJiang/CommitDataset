[+++ b/guava-tests/test/com/google/common/base/StopwatchTest.java, +import com.google.common.annotations.GwtIncompatible;, +import java.time.Duration;, +  @GwtIncompatible, +  public void testElapsed_duration() {, +    stopwatch.start();, +    ticker.advance(999999);, +    assertEquals(Duration.ofNanos(999999), stopwatch.elapsed());, +    ticker.advance(1);, +    assertEquals(Duration.ofMillis(1), stopwatch.elapsed());, +  }, +, +++ b/guava-tests/test/com/google/common/base/StopwatchTest.java, +import com.google.common.annotations.GwtIncompatible;, +import java.time.Duration;, +  @GwtIncompatible, +  public void testElapsed_duration() {, +    stopwatch.start();, +    ticker.advance(999999);, +    assertEquals(Duration.ofNanos(999999), stopwatch.elapsed());, +    ticker.advance(1);, +    assertEquals(Duration.ofMillis(1), stopwatch.elapsed());, +  }, +, +++ b/guava/src/com/google/common/base/Stopwatch.java, +import com.google.common.annotations.GwtIncompatible;, +import com.google.j2objc.annotations.J2ObjCIncompatible;, +import java.time.Duration;, + * Duration duration = stopwatch.elapsed();, +@GwtCompatible(emulated = true), +   * <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally, +   * not useful to specify {@link TimeUnit#NANOSECONDS} precision here., +   *, +   * <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent, +   * elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a, +   * strongly-typed {@link Duration} instance., +  /**, +   * Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link, +   * #elapsed(TimeUnit)}, this method does not lose any precision due to rounding., +   *, +   * @since 22.0, +   */, +  @GwtIncompatible, +  @J2ObjCIncompatible, +  public Duration elapsed() {, +    return Duration.ofNanos(elapsedNanos());, +  }, +]