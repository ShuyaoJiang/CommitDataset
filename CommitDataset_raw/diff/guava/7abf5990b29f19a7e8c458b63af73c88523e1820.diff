[+++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java, +  protected void resetMap(Entry<K, V>[] entries) {, +    resetContainer(getSubjectGenerator().create((Object[]) entries));, +  }, +, +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java, +  protected void resetMap(Entry<K, V>[] entries) {, +    resetContainer(getSubjectGenerator().create((Object[]) entries));, +  }, +, +++ b/android/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java, +   * Find all the constraints explicitly or implicitly specified by a single tester annotation., +   *, +   * @param testerAnnotation a tester annotation, +   * @return the requirements specified by the annotation, +   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent., +   */, +  private static TesterRequirements buildTesterRequirements(Annotation testerAnnotation), +      throws ConflictingRequirementsException {, +    Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();, +    final Feature<?>[] presentFeatures;, +    final Feature<?>[] absentFeatures;, +    try {, +      presentFeatures = (Feature[]) annotationClass.getMethod("value").invoke(testerAnnotation);, +      absentFeatures = (Feature[]) annotationClass.getMethod("absent").invoke(testerAnnotation);, +    } catch (Exception e) {, +      throw new IllegalArgumentException("Error extracting features from tester annotation.", e);, +    }, +    Set<Feature<?>> allPresentFeatures =, +        addImpliedFeatures(Helpers.<Feature<?>>copyToSet(presentFeatures));, +    Set<Feature<?>> allAbsentFeatures =, +        addImpliedFeatures(Helpers.<Feature<?>>copyToSet(absentFeatures));, +    if (!Collections.disjoint(allPresentFeatures, allAbsentFeatures)) {, +      throw new ConflictingRequirementsException(, +          "Annotation explicitly or ", +              + "implicitly requires one or more features to be both present ", +              + "and absent.",, +          intersection(allPresentFeatures, allAbsentFeatures),, +          testerAnnotation);, +    }, +    return new TesterRequirements(allPresentFeatures, allAbsentFeatures);, +  }, +, +  /**, +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java, +  protected void resetMap(Entry<K, V>[] entries) {, +    resetContainer(getSubjectGenerator().create((Object[]) entries));, +  }, +, +++ b/android/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java, +   * Find all the constraints explicitly or implicitly specified by a single tester annotation., +   *, +   * @param testerAnnotation a tester annotation, +   * @return the requirements specified by the annotation, +   * @throws ConflictingRequirementsException if the requirements are mutually inconsistent., +   */, +  private static TesterRequirements buildTesterRequirements(Annotation testerAnnotation), +      throws ConflictingRequirementsException {, +    Class<? extends Annotation> annotationClass = testerAnnotation.annotationType();, +    final Feature<?>[] presentFeatures;, +    final Feature<?>[] absentFeatures;, +    try {, +      presentFeatures = (Feature[]) annotationClass.getMethod("value").invoke(testerAnnotation);, +      absentFeatures = (Feature[]) annotationClass.getMethod("absent").invoke(testerAnnotation);, +    } catch (Exception e) {, +      throw new IllegalArgumentException("Error extracting features from tester annotation.", e);, +    }, +    Set<Feature<?>> allPresentFeatures =, +        addImpliedFeatures(Helpers.<Feature<?>>copyToSet(presentFeatures));, +    Set<Feature<?>> allAbsentFeatures =, +        addImpliedFeatures(Helpers.<Feature<?>>copyToSet(absentFeatures));, +    if (!Collections.disjoint(allPresentFeatures, allAbsentFeatures)) {, +      throw new ConflictingRequirementsException(, +          "Annotation explicitly or ", +              + "implicitly requires one or more features to be both present ", +              + "and absent.",, +          intersection(allPresentFeatures, allAbsentFeatures),, +          testerAnnotation);, +    }, +    return new TesterRequirements(allPresentFeatures, allAbsentFeatures);, +  }, +, +  /**, +++ b/android/guava-testlib/src/com/google/common/escape/testing/EscaperAsserts.java, +   * Asserts that an escaper does not escape the given character., +   *, +   * @param escaper the non-null escaper to test, +   * @param c the character to test, +   */, +  public static void assertUnescaped(CharEscaper escaper, char c) {, +    Assert.assertNull(computeReplacement(escaper, c));, +  }, +, +  /**, +++ b/android/guava-testlib/src/com/google/common/collect/testing/AbstractMapTester.java, +  protected void resetMap(Entry<K, V>[] entries) {, +    resetContainer(getSubjectGenerator().create((Object[]) entries));, +  }, +, +++ b/android/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java]