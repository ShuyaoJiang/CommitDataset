[+++ b/guava-tests/test/com/google/common/hash/MacHashFunctionTest.java, +/*, + * Copyright (C) 2015 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.hash;, +, +import static com.google.common.base.Charsets.UTF_8;, +import static com.google.common.io.BaseEncoding.base16;, +, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.ImmutableTable;, +import com.google.common.collect.Table;, +import com.google.common.testing.NullPointerTester;, +, +import junit.framework.TestCase;, +, +import sun.security.jca.ProviderList;, +import sun.security.jca.Providers;, +, +import java.security.Key;, +import java.util.Arrays;, +, +import javax.crypto.Mac;, +import javax.crypto.SecretKey;, +import javax.crypto.spec.SecretKeySpec;, +, +/**, + * Tests for the MacHashFunction., + *, + * @author Kurt Alfred Kluever, + */, +public class MacHashFunctionTest extends TestCase {, +, +  private static final ImmutableSet<String> INPUTS = ImmutableSet.of("", "Z", "foobar");, +, +  private static final SecretKey MD5_KEY =, +      new SecretKeySpec("secret key".getBytes(UTF_8), "HmacMD5");, +  private static final SecretKey SHA1_KEY =, +      new SecretKeySpec("secret key".getBytes(UTF_8), "HmacSHA1");, +  private static final SecretKey SHA256_KEY =, +      new SecretKeySpec("secret key".getBytes(UTF_8), "HmacSHA256");, +  private static final SecretKey SHA512_KEY =, +      new SecretKeySpec("secret key".getBytes(UTF_8), "HmacSHA512");, +, +  // From http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#Mac, +  private static final ImmutableTable<String, SecretKey, HashFunction> ALGORITHMS =, +      new ImmutableTable.Builder<String, SecretKey, HashFunction>(), +          .put("HmacMD5", MD5_KEY, Hashing.hmacMd5(MD5_KEY)), +          .put("HmacSHA1", SHA1_KEY, Hashing.hmacSha1(SHA1_KEY)), +          .put("HmacSHA256", SHA256_KEY, Hashing.hmacSha256(SHA256_KEY)), +          .put("HmacSHA512", SHA512_KEY, Hashing.hmacSha512(SHA512_KEY)), +          .build();, +, +  public void testNulls() {, +    NullPointerTester tester = new NullPointerTester(), +        .setDefault(String.class, "HmacMD5"), +        .setDefault(Key.class, MD5_KEY);, +    tester.testAllPublicConstructors(MacHashFunction.class);, +    tester.testAllPublicInstanceMethods(new MacHashFunction("HmacMD5", MD5_KEY, "toString"));, +  }, +, +  public void testHashing() throws Exception {, +    for (String stringToTest : INPUTS) {, +      for (Table.Cell<String, SecretKey, HashFunction> cell : ALGORITHMS.cellSet()) {, +        String algorithm = cell.getRowKey();, +        SecretKey key = cell.getColumnKey();, +        HashFunction hashFunc = cell.getValue();, +        assertMacHashing(HashTestUtils.ascii(stringToTest), algorithm, key, hashFunc);, +      }, +    }, +  }, +, +  @SuppressWarnings("CheckReturnValue"), +  public void testNoProviders() {, +    ProviderList providers = Providers.getProviderList();, +    Providers.setProviderList(ProviderList.newList());, +    try {, +      Hashing.hmacMd5(MD5_KEY);, +      fail("expected ISE");, +    } catch (IllegalStateException expected) {, +    } finally {, +      Providers.setProviderList(providers);, +    }, +  }, +, +  public void testMultipleUpdates() throws Exception {, +    Mac mac = Mac.getInstance("HmacSHA1");]