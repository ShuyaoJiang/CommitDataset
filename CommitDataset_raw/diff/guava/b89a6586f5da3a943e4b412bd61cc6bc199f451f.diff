[+++ /dev/null, +++ /dev/null, +++ b/android/guava/src/com/google/common/collect/EnumMultiset.java, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.collect.CollectPreconditions.checkNonnegative;, +import static com.google.common.collect.CollectPreconditions.checkRemove;, +import com.google.common.primitives.Ints;, +import java.io.Serializable;, +import java.util.Arrays;, +import java.util.NoSuchElementException;, +import java.util.Set;, +import javax.annotation.Nullable;, + * Multiset implementation specialized for enum elements, supporting all single-element operations, + * in O(1)., + * "https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"> {@code, + * Multiset}</a>., +public final class EnumMultiset<E extends Enum<E>> extends AbstractMultiset<E>, +    implements Serializable {, +   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}., +   * Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link, +   * EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable., +  private transient E[] enumConstants;, +  private transient int[] counts;, +  private transient int distinctElements;, +  private transient long size;, +    checkArgument(type.isEnum());, +    this.enumConstants = type.getEnumConstants();, +    this.counts = new int[enumConstants.length];, +  }, +  , +  private boolean isActuallyE(@Nullable Object o) {, +    if (o instanceof Enum) {, +      Enum<?> e = (Enum<?>) o;, +      int index = e.ordinal();, +      return index < enumConstants.length && enumConstants[index] == e;, +    }, +    return false;, +  }, +, +  /**, +   * Returns {@code element} cast to {@code E}, if it actually is a nonnull E., +   * Otherwise, throws either a NullPointerException or a ClassCastException as appropriate., +   */, +  @SuppressWarnings("unchecked"), +  void checkIsE(@Nullable Object element) {, +    checkNotNull(element);, +    if (!isActuallyE(element)) {, +      throw new ClassCastException("Expected an " + type + " but got " + element);, +    }, +  }, +, +  @Override, +  int distinctElements() {, +    return distinctElements;, +  }, +, +  @Override, +  public int size() {, +    return Ints.saturatedCast(size);, +  }, +, +  @Override, +  public int count(@Nullable Object element) {, +    if (element == null || !isActuallyE(element)) {, +      return 0;, +    }, +    Enum<?> e = (Enum<?>) element;, +    return counts[e.ordinal()];, +  }, +, +  @Override, +  public int add(E element, int occurrences) {, +    checkIsE(element);, +    checkNonnegative(occurrences, "occurrences");, +    if (occurrences == 0) {, +      return count(element);, +    }, +    int index = element.ordinal();, +    int oldCount = counts[index];, +    long newCount = (long) oldCount + occurrences;, +    checkArgument(newCount <= Integer.MAX_VALUE, "too many occurrences: %s", newCount);, +    counts[index] = (int) newCount;, +    if (oldCount == 0) {, +      distinctElements++;, +    }, +    size += occurrences;, +    return oldCount;, +  }, +, +  @Override, +  public int remove(@Nullable Object element, int occurrences) {, +    if (element == null || !isActuallyE(element)) {, +      return 0;, +    }, +    Enum<?> e = (Enum<?>) element;, +    checkNonnegative(occurrences, "occurrences");, +    if (occurrences == 0) {, +      return count(element);, +    }, +    int index = e.ordinal();]