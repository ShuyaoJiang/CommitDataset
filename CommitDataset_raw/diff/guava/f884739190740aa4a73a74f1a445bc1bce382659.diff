[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code, +   * element}, use {@code Stream.generate(() -> element)}. Otherwise, if the source iterable has, +   * a {@code stream} method (for example, if it is a {@link Collection}), use, +   * {@code Stream.generate(iterable::stream).flatMap(s -> s)}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code, +   * element}, use {@code Stream.generate(() -> element)}. Otherwise, if the source iterable has, +   * a {@code stream} method (for example, if it is a {@link Collection}), use, +   * {@code Stream.generate(iterable::stream).flatMap(s -> s)}., +++ b/guava/src/com/google/common/collect/FluentIterable.java, +   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code, +   * element}, use {@code Stream.generate(() -> element)}. Otherwise, if the source iterable has, +   * a {@code stream} method (for example, if it is a {@link Collection}), use, +   * {@code Stream.generate(iterable::stream).flatMap(s -> s)}.]