[+++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      Iterable<Hasher> sinksAndControl =, +          Iterables.concat(sinks, Collections.singleton(controlSink));, +      // We need to ensure that at least 4 bytes have been put into the hasher or else, +      // Hasher#hash will throw an ISE., +      int intToPut = random.nextInt();, +      for (Hasher hasher : sinksAndControl) {, +        hasher.putInt(intToPut);, +      }, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      Iterable<Hasher> sinksAndControl =, +          Iterables.concat(sinks, Collections.singleton(controlSink));, +      // We need to ensure that at least 4 bytes have been put into the hasher or else, +      // Hasher#hash will throw an ISE., +      int intToPut = random.nextInt();, +      for (Hasher hasher : sinksAndControl) {, +        hasher.putInt(intToPut);, +      }, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +, +  public void testFromBytes_copyOccurs() {, +    byte[] bytes = new byte[] { (byte) 0xcd, (byte) 0xab, (byte) 0x00, (byte) 0x00 };, +    HashCode hashCode = HashCodes.fromBytes(bytes);, +    int expectedInt = 0x0000abcd;, +    String expectedToString = "cdab0000";, +, +    assertEquals(expectedInt, hashCode.asInt());, +    assertEquals(expectedToString, hashCode.toString());, +, +    bytes[0] = (byte) 0x00;, +, +    assertEquals(expectedInt, hashCode.asInt());, +    assertEquals(expectedToString, hashCode.toString());, +  }, +, +  public void testFromBytesNoCopy_noCopyOccurs() {, +    byte[] bytes = new byte[] { (byte) 0xcd, (byte) 0xab, (byte) 0x00, (byte) 0x00 };, +    HashCode hashCode = HashCodes.fromBytesNoCopy(bytes);, +, +    assertEquals(0x0000abcd, hashCode.asInt());, +    assertEquals("cdab0000", hashCode.toString());, +, +    bytes[0] = (byte) 0x00;, +, +    assertEquals(0x0000ab00, hashCode.asInt());, +    assertEquals("00ab0000", hashCode.toString());, +  }, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      Iterable<Hasher> sinksAndControl =, +          Iterables.concat(sinks, Collections.singleton(controlSink));, +      // We need to ensure that at least 4 bytes have been put into the hasher or else, +      // Hasher#hash will throw an ISE., +      int intToPut = random.nextInt();, +      for (Hasher hasher : sinksAndControl) {, +        hasher.putInt(intToPut);, +      }, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +, +  public void testFromBytes_copyOccurs() {, +    byte[] bytes = new byte[] { (byte) 0xcd, (byte) 0xab, (byte) 0x00, (byte) 0x00 };, +    HashCode hashCode = HashCodes.fromBytes(bytes);, +    int expectedInt = 0x0000abcd;, +    String expectedToString = "cdab0000";, +, +    assertEquals(expectedInt, hashCode.asInt());, +    assertEquals(expectedToString, hashCode.toString());, +, +    bytes[0] = (byte) 0x00;, +, +    assertEquals(expectedInt, hashCode.asInt());, +    assertEquals(expectedToString, hashCode.toString());, +  }, +, +  public void testFromBytesNoCopy_noCopyOccurs() {, +    byte[] bytes = new byte[] { (byte) 0xcd, (byte) 0xab, (byte) 0x00, (byte) 0x00 };, +    HashCode hashCode = HashCodes.fromBytesNoCopy(bytes);, +, +    assertEquals(0x0000abcd, hashCode.asInt());, +    assertEquals("cdab0000", hashCode.toString());, +, +    bytes[0] = (byte) 0x00;, +, +    assertEquals(0x0000ab00, hashCode.asInt());, +    assertEquals("00ab0000", hashCode.toString());, +  }, +++ b/guava/src/com/google/common/hash/HashCodes.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +import com.google.common.annotations.Beta;, +, + * Static factories for creating {@link HashCode} instances; most users should never have to use, + * this., + * @author Dimitris Andreou, + * @since 12.0, +@Beta, +public final class HashCodes {, +  public static HashCode fromInt(int hash) {, +  private static final class IntHashCode extends HashCode {, +  public static HashCode fromLong(long hash) {, +  private static final class LongHashCode extends HashCode {]