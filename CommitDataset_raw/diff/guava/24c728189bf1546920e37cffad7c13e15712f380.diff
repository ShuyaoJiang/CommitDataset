[+++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code, +   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}., +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +    for (Iterable<? extends T> input : inputs) {, +      list.add(checkNotNull(input));, +    }, +    return concat(list);, +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code, +   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}., +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +    for (Iterable<? extends T> input : inputs) {, +      list.add(checkNotNull(input));, +    }, +    return concat(list);, +++ b/android/guava/src/com/google/common/collect/Iterables.java, +import com.google.common.base.Predicates;, +    return FluentIterable.concat(inputs);, +  @SuppressWarnings("unchecked"), +    return (Iterable<T>) filter(unfiltered, Predicates.instanceOf(desiredType));, +        if (iterable instanceof List) {, +          final List<T> list = (List<T>) iterable;, +        return (iterable instanceof Queue), +            ? new ConsumingQueueIterator<>((Queue<T>) iterable), +            : Iterators.consumingIterator(iterable.iterator());, +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code, +   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}., +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +    for (Iterable<? extends T> input : inputs) {, +      list.add(checkNotNull(input));, +    }, +    return concat(list);, +++ b/android/guava/src/com/google/common/collect/Iterables.java, +import com.google.common.base.Predicates;, +    return FluentIterable.concat(inputs);, +  @SuppressWarnings("unchecked"), +    return (Iterable<T>) filter(unfiltered, Predicates.instanceOf(desiredType));, +        if (iterable instanceof List) {, +          final List<T> list = (List<T>) iterable;, +        return (iterable instanceof Queue), +            ? new ConsumingQueueIterator<>((Queue<T>) iterable), +            : Iterators.consumingIterator(iterable.iterator());, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +    for (Iterable<? extends T> input : inputs) {, +      list.add(checkNotNull(input));, +    }, +    return concat(list);, +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code, +   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}., +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);, +    for (Iterable<? extends T> input : inputs) {, +      list.add(checkNotNull(input));, +    }, +    return concat(list);, +++ b/android/guava/src/com/google/common/collect/Iterables.java, +import com.google.common.base.Predicates;, +    return FluentIterable.concat(inputs);, +  @SuppressWarnings("unchecked"), +    return (Iterable<T>) filter(unfiltered, Predicates.instanceOf(desiredType));, +        if (iterable instanceof List) {, +          final List<T> list = (List<T>) iterable;, +        return (iterable instanceof Queue), +            ? new ConsumingQueueIterator<>((Queue<T>) iterable), +            : Iterators.consumingIterator(iterable.iterator());, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.ArrayList;, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b)));, +    return concat(Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c)));, +    return concat(, +        Arrays.asList(checkNotNull(a), checkNotNull(b), checkNotNull(c), checkNotNull(d)));, +    List<Iterable<? extends T>> list = new ArrayList<>(inputs.length);]