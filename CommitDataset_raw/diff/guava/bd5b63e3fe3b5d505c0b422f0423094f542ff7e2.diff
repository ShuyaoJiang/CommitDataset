[+++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * @deprecated use {@link Lists#reverse(List)} or {@link, +   *     ImmutableList#reverse()}. <b>This method is scheduled for deletion in, +   *     July 2012.</b>, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * @deprecated use {@link Lists#reverse(List)} or {@link, +   *     ImmutableList#reverse()}. <b>This method is scheduled for deletion in, +   *     July 2012.</b>, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, +   * Private constructor used to implement {@link #fromLenient(String)}., +   * A factory method for creating {@code InternetDomainName} objects. Only, +   * lenient validation of the domain is performed. Specifically,, +   * validation against, +   * <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>, +   * ("Internationalizing Domain Names in Applications") is not performed., +  public static InternetDomainName fromLenient(String domain) {, +    return InternetDomainName.fromLenient(checkNotNull(leftParts) + "." + name);, +   * Indicates whether the argument is a syntactically valid domain name. Only, +   * lenient validation is done, as described in {@link #fromLenient(String)}., +   *, +   * <p>This method is intended for the case where a {@link String} must be, +   * validated as a valid domain name, but no further work with that, +   * {@link String} as an {@link InternetDomainName} will be required. Code like, +   * the following will unnecessarily repeat the work of validation:, +   * <pre>   {@code, +  public static boolean isValidLenient(String name) {, +      fromLenient(name);, +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * @deprecated use {@link Lists#reverse(List)} or {@link, +   *     ImmutableList#reverse()}. <b>This method is scheduled for deletion in, +   *     July 2012.</b>, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, +   * Private constructor used to implement {@link #fromLenient(String)}., +   * A factory method for creating {@code InternetDomainName} objects. Only, +   * lenient validation of the domain is performed. Specifically,, +   * validation against, +   * <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>, +   * ("Internationalizing Domain Names in Applications") is not performed., +  public static InternetDomainName fromLenient(String domain) {, +    return InternetDomainName.fromLenient(checkNotNull(leftParts) + "." + name);, +   * Indicates whether the argument is a syntactically valid domain name. Only, +   * lenient validation is done, as described in {@link #fromLenient(String)}., +   *, +   * <p>This method is intended for the case where a {@link String} must be, +   * validated as a valid domain name, but no further work with that, +   * {@link String} as an {@link InternetDomainName} will be required. Code like, +   * the following will unnecessarily repeat the work of validation:, +   * <pre>   {@code, +  public static boolean isValidLenient(String name) {, +      fromLenient(name);, +++ b/src/com/google/common/base/CharMatcher.java, +   * Returns {@code true} if a character sequence contains at least one matching character., +   * Equivalent to {@code !matchesNoneOf(sequence)}., +   *, +   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each, +   * character, until this returns {@code true} or the end is reached., +   *, +   * @param sequence the character sequence to examine, possibly empty, +   * @return {@code true} if this matcher matches at least one character in the sequence, +   */, +  public boolean matchesAnyOf(CharSequence sequence) {, +    return !matchesNoneOf(sequence);, +  }, +, +  /**, +   * Returns {@code true} if a character sequence contains no matching characters. Equivalent to, +   * {@code !matchesAnyOf(sequence)}., +++ b/gwt-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * @deprecated use {@link Lists#reverse(List)} or {@link, +   *     ImmutableList#reverse()}. <b>This method is scheduled for deletion in, +   *     July 2012.</b>, +++ b/gwt-super/com/google/common/net/super/com/google/common/net/InternetDomainName.java, +   * Private constructor used to implement {@link #fromLenient(String)}., +   * A factory method for creating {@code InternetDomainName} objects. Only, +   * lenient validation of the domain is performed. Specifically,, +   * validation against, +   * <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>, +   * ("Internationalizing Domain Names in Applications") is not performed., +  public static InternetDomainName fromLenient(String domain) {, +    return InternetDomainName.fromLenient(checkNotNull(leftParts) + "." + name);, +   * Indicates whether the argument is a syntactically valid domain name. Only, +   * lenient validation is done, as described in {@link #fromLenient(String)}., +   *, +   * <p>This method is intended for the case where a {@link String} must be, +   * validated as a valid domain name, but no further work with that, +   * {@link String} as an {@link InternetDomainName} will be required. Code like, +   * the following will unnecessarily repeat the work of validation:, +   * <pre>   {@code, +  public static boolean isValidLenient(String name) {, +      fromLenient(name);, +++ b/src/com/google/common/base/CharMatcher.java, +   * Returns {@code true} if a character sequence contains at least one matching character., +   * Equivalent to {@code !matchesNoneOf(sequence)}., +   *, +   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each, +   * character, until this returns {@code true} or the end is reached., +   *, +   * @param sequence the character sequence to examine, possibly empty, +   * @return {@code true} if this matcher matches at least one character in the sequence, +   */]