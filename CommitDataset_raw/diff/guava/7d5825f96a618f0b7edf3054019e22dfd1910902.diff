[+++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Sets;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Random;, +import java.util.Set;, +, +, +  @GwtIncompatible("java.util.Random"), +  public void testSmallCharMatcher() {, +    CharMatcher len1 = SmallCharMatcher.from(new char[] {'#'});, +    CharMatcher len2 = SmallCharMatcher.from(new char[] {'a', 'b'});, +    CharMatcher len3 = SmallCharMatcher.from(new char[] {'a', 'b', 'c'});, +    CharMatcher len4 = SmallCharMatcher.from(new char[] {'a', 'b', 'c', 'd'});, +    assertTrue(len1.matches('#'));, +    assertFalse(len1.matches('!'));, +    assertTrue(len2.matches('a'));, +    assertTrue(len2.matches('b'));, +    for (char c = 'c'; c < 'z'; c++) {, +      assertFalse(len2.matches(c));, +    }, +    assertTrue(len3.matches('a'));, +    assertTrue(len3.matches('b'));, +    assertTrue(len3.matches('c'));, +    for (char c = 'd'; c < 'z'; c++) {, +      assertFalse(len3.matches(c));, +    }, +    assertTrue(len4.matches('a'));, +    assertTrue(len4.matches('b'));, +    assertTrue(len4.matches('c'));, +    assertTrue(len4.matches('d'));, +    for (char c = 'e'; c < 'z'; c++) {, +      assertFalse(len4.matches(c));, +    }, +, +    Random rand = new Random(1234);, +    for (int testCase = 0; testCase < 100; testCase++) {, +      char[] chars = randomChars(rand, rand.nextInt(63) + 1);, +      CharMatcher m = SmallCharMatcher.from(chars);, +      checkExactMatches(m, chars);, +    }, +  }, +, +  static void checkExactMatches(CharMatcher m, char[] chars) {, +    Set<Character> positive = Sets.newHashSetWithExpectedSize(chars.length);, +    for (int i = 0; i < chars.length; i++) {, +      positive.add(chars[i]);, +    }, +    for (int c = 0; c <= Character.MAX_VALUE; c++) {, +      assertFalse(positive.contains(new Character((char) c)) ^ m.matches((char) c));, +    }, +  }, +, +  static char[] randomChars(Random rand, int size) {, +    Set<Character> chars = new HashSet<Character>(size);, +    for (int i = 0; i < size; i++) {, +      char c;, +      while (true) {, +        c = (char) rand.nextInt(Character.MAX_VALUE - Character.MIN_VALUE + 1);, +        if (!chars.contains(c)) {, +          break;, +        }, +      }, +      chars.add(c);, +    }, +    char[] retValue = new char[chars.size()];, +    int i = 0;, +    for (char c : chars) {, +      retValue[i++] = c;, +    }, +    Arrays.sort(retValue);, +    return retValue;, +  }, +, +  @GwtIncompatible("java.util.Random"), +  public void testMediumCharMatcher() {, +    CharMatcher len1 = MediumCharMatcher.from(new char[] {'#'});, +    CharMatcher len2 = MediumCharMatcher.from(new char[] {'a', 'b'});, +    CharMatcher len3 = MediumCharMatcher.from(new char[] {'a', 'b', 'c'});, +    CharMatcher len4 = MediumCharMatcher.from(new char[] {'a', 'b', 'c', 'd'});, +    assertTrue(len1.matches('#'));, +    assertFalse(len1.matches('!'));, +    assertTrue(len2.matches('a'));, +    assertTrue(len2.matches('b'));, +    for (char c = 'c'; c < 'z'; c++) {, +      assertFalse(len2.matches(c));, +    }, +    assertTrue(len3.matches('a'));, +    assertTrue(len3.matches('b'));, +    assertTrue(len3.matches('c'));, +    for (char c = 'd'; c < 'z'; c++) {, +      assertFalse(len3.matches(c));, +    }, +    assertTrue(len4.matches('a'));, +    assertTrue(len4.matches('b'));, +    assertTrue(len4.matches('c'));, +    assertTrue(len4.matches('d'));]