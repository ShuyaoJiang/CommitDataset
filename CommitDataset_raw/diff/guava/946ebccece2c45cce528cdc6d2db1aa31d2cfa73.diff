[+++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import java.lang.reflect.TypeVariable;, +  public void testToGenericType_staticMemberClass() throws Exception {, +    Method getStaticAnonymousClassMethod =, +        TypeTokenTest.class.getDeclaredMethod("getStaticAnonymousClass", Object.class);, +    ParameterizedType javacReturnType =, +        (ParameterizedType) getStaticAnonymousClassMethod.getGenericReturnType();, +, +    ParameterizedType parameterizedType =, +        (ParameterizedType) TypeToken.toGenericType(GenericClass.class).getType();, +    assertThat(parameterizedType.getOwnerType()).isEqualTo(javacReturnType.getOwnerType());, +  }, +, +  public static <T> GenericClass<T> getStaticAnonymousClass(final T value) {, +    return new GenericClass<T>() {, +      @SuppressWarnings("unused"), +      public T innerValue = value;, +    };, +  }, +, +    ParameterizedType actualSubType =, +        (ParameterizedType) superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(SingleGenericExtendsBase.class, actualSubType.getRawType());, +  }, +, +  public void testGetSubtype_baseClassInGenericClassWithNoTypeArgs() {, +    class SingleGenericExtendsBase<T> implements GenericClass.Base {}, +    TypeToken<GenericClass.Base> superType = new TypeToken<GenericClass.Base>() {};, +    TypeToken<SingleGenericExtendsBase<String>> subType =, +        new TypeToken<SingleGenericExtendsBase<String>>() {};, +    assertTrue(subType.isSubtypeOf(superType));, +    ParameterizedType actualSubType =, +        (ParameterizedType) superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(SingleGenericExtendsBase.class, actualSubType.getRawType());, +    assertTrue(TypeToken.of(actualSubType).isSubtypeOf(superType));, +  }, +, +  public void testGetSubtype_genericSubtypeOfNonGenericType() {, +    TypeToken<Serializable> superType = new TypeToken<Serializable>() {};, +    TypeToken<ArrayList<String>> subType =, +        new TypeToken<ArrayList<String>>() {};, +    assertTrue(subType.isSubtypeOf(superType));, +    ParameterizedType actualSubType =, +        (ParameterizedType) superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(ArrayList.class, actualSubType.getRawType());, +    assertThat(actualSubType.getActualTypeArguments()[0]).isInstanceOf(TypeVariable.class);, +    assertTrue(TypeToken.of(actualSubType).isSubtypeOf(superType));, +  }, +, +  private interface MySpecialList<E, F> extends List<E> {}, +, +  public void testGetSubtype_genericSubtypeOfGenericTypeWithFewerParameters() {, +    TypeToken<List<String>> superType = new TypeToken<List<String>>() {};, +    TypeToken<MySpecialList<String, ?>> subType =, +        new TypeToken<MySpecialList<String, ?>>() {};, +    assertTrue(subType.isSubtypeOf(superType));, +    ParameterizedType actualSubType =, +        (ParameterizedType) superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(MySpecialList.class, actualSubType.getRawType());, +    assertThat(actualSubType.getActualTypeArguments()[0]).isEqualTo(String.class);, +    assertThat(actualSubType.getActualTypeArguments()[1]).isInstanceOf(TypeVariable.class);, +    assertTrue(TypeToken.of(actualSubType).isSubtypeOf(superType));, +  }, +, +  public void testGetSubtype_genericSubtypeOfRawTypeWithFewerTypeParameters() {, +    TypeToken<List> superType = new TypeToken<List>() {};, +    TypeToken<MySpecialList> subType = new TypeToken<MySpecialList>() {};, +    assertTrue(subType.isSubtypeOf(superType));, +    Class<?> actualSubType =, +        (Class<?>) superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(MySpecialList.class, actualSubType);, +    assertTrue(TypeToken.of(actualSubType).isSubtypeOf(superType));, +  private static class GenericClass<T> {, +    private static interface Base {}, +  }, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import java.lang.reflect.TypeVariable;, +  public void testToGenericType_staticMemberClass() throws Exception {, +    Method getStaticAnonymousClassMethod =, +        TypeTokenTest.class.getDeclaredMethod("getStaticAnonymousClass", Object.class);, +    ParameterizedType javacReturnType =, +        (ParameterizedType) getStaticAnonymousClassMethod.getGenericReturnType();, +, +    ParameterizedType parameterizedType =, +        (ParameterizedType) TypeToken.toGenericType(GenericClass.class).getType();, +    assertThat(parameterizedType.getOwnerType()).isEqualTo(javacReturnType.getOwnerType());, +  }, +, +  public static <T> GenericClass<T> getStaticAnonymousClass(final T value) {, +    return new GenericClass<T>() {, +      @SuppressWarnings("unused"), +      public T innerValue = value;, +    };, +  }, +, +    ParameterizedType actualSubType =, +        (ParameterizedType) superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(SingleGenericExtendsBase.class, actualSubType.getRawType());, +  }, +]