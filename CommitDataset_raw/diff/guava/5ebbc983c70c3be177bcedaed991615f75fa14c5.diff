[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import java.util.Deque;, +import java.util.LinkedList;, +  static <E> Deque<E> newFastestDeque(int ignored) {, +    return new LinkedList<E>();, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import java.util.Deque;, +import java.util.LinkedList;, +  static <E> Deque<E> newFastestDeque(int ignored) {, +    return new LinkedList<E>();, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeTraverser.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import java.util.Iterator;, +import java.util.LinkedList;, +import java.util.Queue;, +, +/**, + * Views elements of a type {@code T} as nodes in a tree, and provides methods to traverse the trees, + * induced by this traverser., + *, + * <p>For example, the tree <pre>   {@code, + *, + *          h, + *        / | \, + *       /  e  \, + *      d       g, + *     /|\      |, + *    / | \     f, + *   a  b  c, + *   }</pre>, + *, + * can be iterated over in preorder (hdabcegf), postorder (abcdefgh), or breadth-first order, + * (hdegabc)., + *, + * <p>Null nodes are strictly forbidden., + *, + * @author Louis Wasserman, + */, +public abstract class TreeTraverser<T> {, +, +  /**, +   * Returns the children of the specified node.  Must not contain null., +   */, +  public abstract Iterable<T> children(T root);, +, +  /**, +   * Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order, +   * traversal. That is, each node's subtrees are traversed after the node itself is returned., +   *, +   * <p>No guarantees are made about the behavior of the traversal when nodes change while, +   * iteration is in progress or when the iterators generated by {@link #children} are advanced., +   */, +  public final FluentIterable<T> preOrderTraversal(final T root) {, +    checkNotNull(root);, +    return new FluentIterable<T>() {, +      @Override, +      public UnmodifiableIterator<T> iterator() {, +        return preOrderIterator(root);, +      }, +    };, +  }, +, +  // overridden in BinaryTreeTraverser, +  UnmodifiableIterator<T> preOrderIterator(T root) {, +    return new PreOrderIterator(root);, +  }, +, +  private final class PreOrderIterator extends UnmodifiableIterator<T> {, +    private final LinkedList<Iterator<T>> stack;, +, +    PreOrderIterator(T root) {, +      this.stack = Lists.newLinkedList();, +      stack.addLast(Iterators.singletonIterator(checkNotNull(root)));, +    }, +, +    @Override, +    public boolean hasNext() {]