[+++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +    List<String> strings = ImmutableList.of("b", "a", "d", "c");, +    assertEquals(strings, comparator.sortedCopy(strings));, +    assertEquals(strings, comparator.immutableSortedCopy(strings));, +, +    new EqualsTester(), +        .addEqualityGroup(lexy, ordering.lexicographical()), +        .addEqualityGroup(numberOrdering.lexicographical()), +        .addEqualityGroup(Ordering.natural()), +        .testEquals();, +, +    new EqualsTester(), +        .addEqualityGroup(ordering, Ordering.natural().nullsFirst()), +        .addEqualityGroup(numberOrdering.nullsFirst()), +        .addEqualityGroup(Ordering.natural()), +        .testEquals();, +, +    new EqualsTester(), +        .addEqualityGroup(ordering, Ordering.natural().nullsLast()), +        .addEqualityGroup(numberOrdering.nullsLast()), +        .addEqualityGroup(Ordering.natural()), +        .testEquals();, +    testExhaustively(Ordering.<String>natural(), "a", "b", "d");, +        "a", "b", "d");, +    testExhaustively(Ordering.usingToString(), 1, 12, 2);, +  }, +, +  public void testCombinationsExhaustively_startingFromFromComparator() {, +    testExhaustively(Ordering.from(String.CASE_INSENSITIVE_ORDER),, +        "A", "b", "C", "d");, +    Object[] array = {1, "foo", new Object()};, +    Arrays.sort(array, arbitrary);, +    testExhaustively(arbitrary, array);, +  /**, +   * Requires at least 3 elements in {@code strictlyOrderedElements} in order to, +   * test the varargs version of min/max., +   */, +      Ordering<? super T> ordering, T... strictlyOrderedElements) {, +    checkArgument(strictlyOrderedElements.length >= 3, "strictlyOrderedElements ", +        + "requires at least 3 elements");, +    List<T> list = Arrays.asList(strictlyOrderedElements);, +, +    // for use calling Collection.toArray later, +    T[] emptyArray = Platform.newArray(strictlyOrderedElements, 0);, +, +    Scenario<T> starter = new Scenario<T>((Ordering) ordering, list, emptyArray);, +    scenario.testSortedCopy();, +    final T[] emptyArray;, +    Scenario(Ordering<T> ordering, List<T> strictlyOrderedList, T[] emptyArray) {, +      this.emptyArray = emptyArray;, +    @SuppressWarnings("unchecked") // generic arrays and unchecked cast, +      T min = strictlyOrderedList.get(0);, +      T max = strictlyOrderedList.get(strictlyOrderedList.size() - 1);, +, +      T first = shuffledList.get(0);, +      T second = shuffledList.get(1);, +      T third = shuffledList.get(2);, +      T[] rest = shuffledList.subList(3, shuffledList.size()).toArray(emptyArray);, +, +      assertEquals(min, ordering.min(shuffledList));, +      assertEquals(min, ordering.min(shuffledList.iterator()));, +      assertEquals(min, ordering.min(first, second, third, rest));, +      assertEquals(min, ordering.min(min, max));, +      assertEquals(min, ordering.min(max, min));, +, +      assertEquals(max, ordering.max(shuffledList));, +      assertEquals(max, ordering.max(shuffledList.iterator()));, +      assertEquals(max, ordering.max(first, second, third, rest));, +      assertEquals(max, ordering.max(min, max));, +      assertEquals(max, ordering.max(max, min));, +, +    void testSortedCopy() {, +      List<T> shuffledList = Lists.newArrayList(strictlyOrderedList);, +      shuffledList = shuffledCopy(shuffledList, new Random(5));, +, +      assertEquals(strictlyOrderedList, ordering.sortedCopy(shuffledList));, +, +      if (!strictlyOrderedList.contains(null)) {, +        assertEquals(strictlyOrderedList, ordering.immutableSortedCopy(shuffledList));, +      }, +    }, +        return new Scenario<T>(scenario.ordering.reverse(), newList, scenario.emptyArray);, +        return new Scenario<T>(scenario.ordering.nullsFirst(), newList, scenario.emptyArray);, +        return new Scenario<T>(scenario.ordering.nullsLast(), newList, scenario.emptyArray);, +        return new Scenario<Integer>(ordering, list, new Integer[0]);, +      @SuppressWarnings("unchecked") // raw array, +        return new Scenario<Composite<T>>(ordering, composites, new Composite[0]);, +      @SuppressWarnings("unchecked") // raw array, +        return new Scenario<Composite<T>>(ordering, composites, new Composite[0]);, +            scenario.ordering.lexicographical(), words, new Iterable[0]);, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +, +    List<String> strings = ImmutableList.of("b", "a", "d", "c");, +    assertEquals(strings, comparator.sortedCopy(strings));, +    assertEquals(strings, comparator.immutableSortedCopy(strings));, +, +    new EqualsTester()]