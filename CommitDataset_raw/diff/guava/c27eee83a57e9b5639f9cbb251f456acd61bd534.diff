[+++ b/guava-tests/test/com/google/common/net/InetAddressesTest.java, +  public void testForUriStringIPv4Mapped() {, +    Inet4Address expected = (Inet4Address) InetAddresses.forString("192.0.2.1");, +    assertEquals(expected, InetAddresses.forUriString("[::ffff:192.0.2.1]"));, +  }, +, +    assertTrue(InetAddresses.isUriInetAddress("[::ffff:192.0.2.1]"));, +    assertFalse(InetAddresses.isUriInetAddress("3ffe:0:0:0:0:0:0:1"));, +    assertFalse(InetAddresses.isUriInetAddress("::ffff:192.0.2.1"));, +, +    try {, +      InetAddresses.forUriString("3ffe:0:0:0:0:0:0:1");, +      fail("expected IllegalArgumentException");  // COV_NF_LINE, +    } catch (IllegalArgumentException e) {, +      // expected, +    }, +, +    try {, +      InetAddresses.forUriString("::ffff:192.0.2.1");, +      fail("expected IllegalArgumentException");  // COV_NF_LINE, +    } catch (IllegalArgumentException e) {, +      // expected, +    }, +++ b/guava-tests/test/com/google/common/net/InetAddressesTest.java, +  public void testForUriStringIPv4Mapped() {, +    Inet4Address expected = (Inet4Address) InetAddresses.forString("192.0.2.1");, +    assertEquals(expected, InetAddresses.forUriString("[::ffff:192.0.2.1]"));, +  }, +, +    assertTrue(InetAddresses.isUriInetAddress("[::ffff:192.0.2.1]"));, +    assertFalse(InetAddresses.isUriInetAddress("3ffe:0:0:0:0:0:0:1"));, +    assertFalse(InetAddresses.isUriInetAddress("::ffff:192.0.2.1"));, +, +    try {, +      InetAddresses.forUriString("3ffe:0:0:0:0:0:0:1");, +      fail("expected IllegalArgumentException");  // COV_NF_LINE, +    } catch (IllegalArgumentException e) {, +      // expected, +    }, +, +    try {, +      InetAddresses.forUriString("::ffff:192.0.2.1");, +      fail("expected IllegalArgumentException");  // COV_NF_LINE, +    } catch (IllegalArgumentException e) {, +      // expected, +    }, +++ b/guava/src/com/google/common/net/InetAddresses.java, +    // Given a 4-byte array, this cast should always succeed., +    return (Inet4Address) bytesToInetAddress(bytes);, +    return bytesToInetAddress(addr);, +   * Convert a byte array into an InetAddress., +   *, +   * {@link InetAddress#getByAddress} is documented as throwing a checked, +   * exception "if IP address if of illegal length."  We replace it with, +   * an unchecked exception, for use by callers who already know that addr, +   * is an array of length 4 or 16., +   *, +   * @param addr the raw 4-byte or 16-byte IP address in big-endian order, +   * @return an InetAddress object created from the raw IP address, +   */, +  private static InetAddress bytesToInetAddress(byte[] addr) {, +    try {, +      return InetAddress.getByAddress(addr);, +    } catch (UnknownHostException e) {, +      throw new AssertionError(e);, +    }, +  }, +, +  /**, +    // Decide if this should be an IPv6 or IPv4 address., +    String ipString;, +    int expectBytes;, +    if (hostAddr.startsWith("[") && hostAddr.endsWith("]")) {, +      ipString = hostAddr.substring(1, hostAddr.length() - 1);, +      expectBytes = 16;, +    } else {, +      ipString = hostAddr;, +      expectBytes = 4;, +    // Parse the address, and make sure the length/version is correct., +    byte[] addr = ipStringToBytes(ipString);, +    if (addr == null || addr.length != expectBytes) {, +      throw new IllegalArgumentException(, +          String.format("Not a valid URI IP literal: '%s'", hostAddr));, +    return bytesToInetAddress(addr);, +    return bytesToInetAddress(addr);]