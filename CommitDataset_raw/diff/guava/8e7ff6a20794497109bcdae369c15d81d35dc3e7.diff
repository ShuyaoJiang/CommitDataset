[+++ b/android/guava-tests/test/com/google/common/collect/SetsTest.java, +import com.google.common.base.Predicate;, +  public void testCombinations() {, +    ImmutableList<Set<Integer>> sampleSets =, +        ImmutableList.<Set<Integer>>of(, +            ImmutableSet.<Integer>of(),, +            ImmutableSet.of(1, 2),, +            ImmutableSet.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));, +    for (Set<Integer> sampleSet : sampleSets) {, +      for (int k = 0; k <= sampleSet.size(); k++) {, +        final int size = k;, +        Set<Set<Integer>> expected =, +            Sets.filter(, +                Sets.powerSet(sampleSet),, +                new Predicate<Set<Integer>>() {, +, +                  @Override, +                  public boolean apply(Set<Integer> input) {, +                    return input.size() == size;, +                  }, +                });, +        assertThat(Sets.combinations(sampleSet, k)), +            .named("Sets.combinations(%s, %s)", sampleSet, k), +            .containsExactlyElementsIn(expected), +            .inOrder();, +      }, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/SetsTest.java, +import com.google.common.base.Predicate;, +  public void testCombinations() {, +    ImmutableList<Set<Integer>> sampleSets =, +        ImmutableList.<Set<Integer>>of(, +            ImmutableSet.<Integer>of(),, +            ImmutableSet.of(1, 2),, +            ImmutableSet.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));, +    for (Set<Integer> sampleSet : sampleSets) {, +      for (int k = 0; k <= sampleSet.size(); k++) {, +        final int size = k;, +        Set<Set<Integer>> expected =, +            Sets.filter(, +                Sets.powerSet(sampleSet),, +                new Predicate<Set<Integer>>() {, +, +                  @Override, +                  public boolean apply(Set<Integer> input) {, +                    return input.size() == size;, +                  }, +                });, +        assertThat(Sets.combinations(sampleSet, k)), +            .named("Sets.combinations(%s, %s)", sampleSet, k), +            .containsExactlyElementsIn(expected), +            .inOrder();, +      }, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/math/IntMathTest.java, +++ b/android/guava-tests/test/com/google/common/collect/SetsTest.java, +import com.google.common.base.Predicate;, +  public void testCombinations() {, +    ImmutableList<Set<Integer>> sampleSets =, +        ImmutableList.<Set<Integer>>of(, +            ImmutableSet.<Integer>of(),, +            ImmutableSet.of(1, 2),, +            ImmutableSet.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));, +    for (Set<Integer> sampleSet : sampleSets) {, +      for (int k = 0; k <= sampleSet.size(); k++) {, +        final int size = k;, +        Set<Set<Integer>> expected =, +            Sets.filter(, +                Sets.powerSet(sampleSet),, +                new Predicate<Set<Integer>>() {, +, +                  @Override, +                  public boolean apply(Set<Integer> input) {, +                    return input.size() == size;, +                  }, +                });, +        assertThat(Sets.combinations(sampleSet, k)), +            .named("Sets.combinations(%s, %s)", sampleSet, k), +            .containsExactlyElementsIn(expected), +            .inOrder();, +      }, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/math/IntMathTest.java, +++ b/android/guava/src/com/google/common/collect/Sets.java, +import static com.google.common.collect.CollectPreconditions.checkNonnegative;, +import java.util.BitSet;, +   * Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code, +   * combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}., +   *, +   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input, +   * set. The order in which these subsets appear in the outer set is undefined., +   *, +   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements, +   * are identical, even if the input set uses a different concept of equivalence.]