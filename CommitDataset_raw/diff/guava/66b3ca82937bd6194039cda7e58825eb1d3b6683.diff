[+++ b/guava-tests/test/com/google/common/net/MediaTypeTest.java, +import static com.google.common.net.MediaType.*;, +  public void testCreate_wildcardTypeDeclaredSubtype() {, +    try {, +      MediaType.create("*", "text");, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testHasWildcard() {, +    assertFalse(PLAIN_TEXT_UTF_8.hasWildcard());, +    assertFalse(JPEG.hasWildcard());, +    assertTrue(ANY_TYPE.hasWildcard());, +    assertTrue(ANY_APPLICATION_TYPE.hasWildcard());, +    assertTrue(ANY_AUDIO_TYPE.hasWildcard());, +    assertTrue(ANY_IMAGE_TYPE.hasWildcard());, +    assertTrue(ANY_TEXT_TYPE.hasWildcard());, +    assertTrue(ANY_VIDEO_TYPE.hasWildcard());, +  }, +, +  public void testIs() {, +    assertTrue(PLAIN_TEXT_UTF_8.is(ANY_TYPE));, +    assertTrue(JPEG.is(ANY_TYPE));, +    assertTrue(ANY_TEXT_TYPE.is(ANY_TYPE));, +    assertTrue(PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE));, +    assertTrue(PLAIN_TEXT_UTF_8.withoutParameters().is(ANY_TEXT_TYPE));, +    assertFalse(JPEG.is(ANY_TEXT_TYPE));, +    assertTrue(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8));, +    assertTrue(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8.withoutParameters()));, +    assertFalse(PLAIN_TEXT_UTF_8.withoutParameters().is(PLAIN_TEXT_UTF_8));, +    assertFalse(PLAIN_TEXT_UTF_8.is(HTML_UTF_8));, +    assertFalse(PLAIN_TEXT_UTF_8.withParameter("charset", "UTF-16").is(PLAIN_TEXT_UTF_8));, +    assertFalse(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8.withParameter("charset", "UTF-16")));, +  }, +, +++ b/guava-tests/test/com/google/common/net/MediaTypeTest.java, +import static com.google.common.net.MediaType.*;, +  public void testCreate_wildcardTypeDeclaredSubtype() {, +    try {, +      MediaType.create("*", "text");, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testHasWildcard() {, +    assertFalse(PLAIN_TEXT_UTF_8.hasWildcard());, +    assertFalse(JPEG.hasWildcard());, +    assertTrue(ANY_TYPE.hasWildcard());, +    assertTrue(ANY_APPLICATION_TYPE.hasWildcard());, +    assertTrue(ANY_AUDIO_TYPE.hasWildcard());, +    assertTrue(ANY_IMAGE_TYPE.hasWildcard());, +    assertTrue(ANY_TEXT_TYPE.hasWildcard());, +    assertTrue(ANY_VIDEO_TYPE.hasWildcard());, +  }, +, +  public void testIs() {, +    assertTrue(PLAIN_TEXT_UTF_8.is(ANY_TYPE));, +    assertTrue(JPEG.is(ANY_TYPE));, +    assertTrue(ANY_TEXT_TYPE.is(ANY_TYPE));, +    assertTrue(PLAIN_TEXT_UTF_8.is(ANY_TEXT_TYPE));, +    assertTrue(PLAIN_TEXT_UTF_8.withoutParameters().is(ANY_TEXT_TYPE));, +    assertFalse(JPEG.is(ANY_TEXT_TYPE));, +    assertTrue(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8));, +    assertTrue(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8.withoutParameters()));, +    assertFalse(PLAIN_TEXT_UTF_8.withoutParameters().is(PLAIN_TEXT_UTF_8));, +    assertFalse(PLAIN_TEXT_UTF_8.is(HTML_UTF_8));, +    assertFalse(PLAIN_TEXT_UTF_8.withParameter("charset", "UTF-16").is(PLAIN_TEXT_UTF_8));, +    assertFalse(PLAIN_TEXT_UTF_8.is(PLAIN_TEXT_UTF_8.withParameter("charset", "UTF-16")));, +  }, +, +++ b/guava/src/com/google/common/net/MediaType.java, + * (also known as a MIME Type or Content Type). This class also supports the concept of media ranges, + * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1">defined by HTTP/1.1</a>., + * As such, the {@code *} character is treated as a wildcard and is used to represent any acceptable, + * type or subtype value. A media type may not have wildcard type with a declared subtype. The, + * {@code *} character has no special meaning as part of a parameter. All values for type, subtype,, + * parameter attributes or parameter values must be valid according to RFCs, + * <a href="http://www.ietf.org/rfc/rfc2045.txt">2045</a> and, + * <a href="http://www.ietf.org/rfc/rfc2046.txt">2046</a>., +  private static final String WILDCARD = "*";, +, +  public static final MediaType ANY_TYPE = new MediaType(WILDCARD, WILDCARD);, +  public static final MediaType ANY_TEXT_TYPE = new MediaType(TEXT_TYPE, WILDCARD);, +  public static final MediaType ANY_IMAGE_TYPE = new MediaType(IMAGE_TYPE, WILDCARD);, +  public static final MediaType ANY_AUDIO_TYPE = new MediaType(AUDIO_TYPE, WILDCARD);, +  public static final MediaType ANY_VIDEO_TYPE = new MediaType(VIDEO_TYPE, WILDCARD);, +  public static final MediaType ANY_APPLICATION_TYPE = new MediaType(APPLICATION_TYPE, WILDCARD);, +, +          .put(ANY_TYPE, ANY_TYPE), +          .put(ANY_TEXT_TYPE, ANY_TEXT_TYPE), +          .put(ANY_IMAGE_TYPE, ANY_IMAGE_TYPE), +          .put(ANY_AUDIO_TYPE, ANY_AUDIO_TYPE), +          .put(ANY_VIDEO_TYPE, ANY_VIDEO_TYPE), +          .put(ANY_APPLICATION_TYPE, ANY_APPLICATION_TYPE), +  /** Returns true if either the type or subtype is the wildcard. */, +  public boolean hasWildcard() {, +    return WILDCARD.equals(type) || WILDCARD.equals(subtype);, +  }, +, +  /**]