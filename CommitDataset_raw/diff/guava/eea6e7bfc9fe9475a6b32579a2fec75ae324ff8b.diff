[+++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + * period or an interrupt while waiting for the expected event will result in a {@link, + * RuntimeException}., + * <p>This class only provides testing utilities.  It is not designed for direct use in production, + * or for benchmarking., + *, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void awaitDone(Future<?> future) {, +      } catch (InterruptedException ie) {, +        RuntimeException ae = new RuntimeException("Unexpected interrupt while waiting for future");, +        ae.initCause(ie);, +        throw ae;, +    throw new RuntimeException(, +        String.format("Future not done within %d second timeout", timeoutSeconds));, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void await(CountDownLatch latch) {, +      try {, +      } catch (InterruptedException ie) {, +        RuntimeException ae = new RuntimeException("Unexpected interrupt while waiting for latch");, +        ae.initCause(ie);, +        throw ae;, +      }, +    throw new RuntimeException(, +        String.format("Latch failed to count down within %d second timeout", timeoutSeconds));, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void awaitDone(FinalizationPredicate predicate) {, +    throw new RuntimeException(, +        String.format("Predicate did not become true within %d second timeout", timeoutSeconds));, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void awaitClear(final WeakReference<?> ref) {, +++ b/guava-testlib/src/com/google/common/testing/GcFinalization.java, + * period or an interrupt while waiting for the expected event will result in a {@link, + * RuntimeException}., + * <p>This class only provides testing utilities.  It is not designed for direct use in production, + * or for benchmarking., + *, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void awaitDone(Future<?> future) {, +      } catch (InterruptedException ie) {, +        RuntimeException ae = new RuntimeException("Unexpected interrupt while waiting for future");, +        ae.initCause(ie);, +        throw ae;, +    throw new RuntimeException(, +        String.format("Future not done within %d second timeout", timeoutSeconds));, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void await(CountDownLatch latch) {, +      try {, +      } catch (InterruptedException ie) {, +        RuntimeException ae = new RuntimeException("Unexpected interrupt while waiting for latch");, +        ae.initCause(ie);, +        throw ae;, +      }, +    throw new RuntimeException(, +        String.format("Latch failed to count down within %d second timeout", timeoutSeconds));, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void awaitDone(FinalizationPredicate predicate) {, +    throw new RuntimeException(, +        String.format("Predicate did not become true within %d second timeout", timeoutSeconds));, +   * @throws RuntimeException if timed out or interrupted while waiting, +  public static void awaitClear(final WeakReference<?> ref) {, +++ b/guava-tests/test/com/google/common/testing/GcFinalizationTest.java, +  public void testAwait_CountDownLatch() {, +  public void testAwaitDone_Future() {, +  public void testAwaitDone_Future_Cancel() {, +  public void testAwaitClear() {, +  public void testAwaitDone_FinalizationPredicate() {]