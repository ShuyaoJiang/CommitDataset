[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * A {@link ListMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * A {@link ListMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, + * A {@link Multimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., + * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableMultimap} as a type (as with, + * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link, + * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common, + * source of bugs and confusion., + *, + * <p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no, + * need for a distinct {@code ImmutableBiMultimap} type., + * <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all, + * current implementations, the iteration order always keeps multiple entries with the same key, + * together. Any creation method that would customarily respect insertion order (such as {@link, + * #copyOf(Multimap)}) instead preserves key-grouped order by inserting entries for an existing key, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * A {@link ListMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, + * A {@link Multimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., + * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableMultimap} as a type (as with, + * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link, + * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common, + * source of bugs and confusion., + *, + * <p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no, + * need for a distinct {@code ImmutableBiMultimap} type., + * <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all, + * current implementations, the iteration order always keeps multiple entries with the same key, + * together. Any creation method that would customarily respect insertion order (such as {@link, + * #copyOf(Multimap)}) instead preserves key-grouped order by inserting entries for an existing key, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, + * that element when the multiset was created., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * A {@link ListMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, + * A {@link Multimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., + * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableMultimap} as a type (as with, + * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link, + * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common, + * source of bugs and confusion., + *, + * <p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no, + * need for a distinct {@code ImmutableBiMultimap} type., + * <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all, + * current implementations, the iteration order always keeps multiple entries with the same key, + * together. Any creation method that would customarily respect insertion order (such as {@link, + * #copyOf(Multimap)}) instead preserves key-grouped order by inserting entries for an existing key, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, + * that element when the multiset was created., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, + * A {@link SetMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * A {@link ListMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, + * A {@link Multimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., + * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableMultimap} as a type (as with, + * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link, + * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common, + * source of bugs and confusion., + *, + * <p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no, + * need for a distinct {@code ImmutableBiMultimap} type., + * <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all, + * current implementations, the iteration order always keeps multiple entries with the same key, + * together. Any creation method that would customarily respect insertion order (such as {@link, + * #copyOf(Multimap)}) instead preserves key-grouped order by inserting entries for an existing key, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultiset.java, + * that element when the multiset was created., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, + * A {@link SetMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, + * A {@link BiMap} whose contents will never change, with many other important properties detailed, + * at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, + * A {@link ListMultimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, + * A {@link Multimap} whose contents will never change, with many other important properties, + * detailed at {@link ImmutableCollection}., + * <p><b>Warning:</b> avoid <i>direct</i> usage of {@link ImmutableMultimap} as a type (as with, + * {@link Multimap} itself). Prefer subtypes such as {@link ImmutableSetMultimap} or {@link, + * ImmutableListMultimap}, which have well-defined {@link #equals} semantics, thus avoiding a common, + * source of bugs and confusion., + *, + * <p><b>Note:</b> every {@link ImmutableMultimap} offers an {@link #inverse} view, so there is no, + * need for a distinct {@code ImmutableBiMultimap} type., + * <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all]