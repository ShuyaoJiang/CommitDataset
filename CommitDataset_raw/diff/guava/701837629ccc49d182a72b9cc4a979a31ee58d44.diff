[+++ b/guava-tests/test/com/google/common/collect/ForwardingDequeTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import java.util.Collections;, +import java.util.Deque;, +, +/**, + * Tests for {@code ForwardingDeque}., + *, + * @author Kurt Alfred Kluever, + */, +public class ForwardingDequeTest extends ForwardingTestCase {, +  private Deque<String> forward;, +  , +  /*, +   * Class parameters must be raw, so we can't create a proxy with generic, +   * type arguments. The created proxy only records calls and returns null, so, +   * the type is irrelevant at runtime., +   */, +  @SuppressWarnings("unchecked"), +  @Override protected void setUp() throws Exception {, +    super.setUp();, +    final Deque<String> deque = createProxyInstance(Deque.class);, +    forward = new ForwardingDeque<String>() {, +      @Override protected Deque<String> delegate() {, +        return deque;, +      }, +    };, +  }, +, +  public void testAdd_T() {, +    forward.add("asdf");, +    assertEquals("[add(Object)]", getCalls());, +  }, +, +  public void testAddFirst_T() {, +    forward.addFirst("asdf");, +    assertEquals("[addFirst(Object)]", getCalls());, +  }, +, +  public void testAddLast_T() {, +    forward.addLast("asdf");, +    assertEquals("[addLast(Object)]", getCalls());, +  }, +, +  public void testAddAll_Collection() {, +    forward.addAll(Collections.singleton("asdf"));, +    assertEquals("[addAll(Collection)]", getCalls());, +  }, +, +  public void testClear() {, +    forward.clear();, +    assertEquals("[clear]", getCalls());, +  }, +, +  public void testContains_T() {, +    forward.contains("asdf");, +    assertEquals("[contains(Object)]", getCalls());, +  }, +, +  public void testContainsAll_Collection() {, +    forward.containsAll(Collections.singleton("asdf"));, +    assertEquals("[containsAll(Collection)]", getCalls());, +  }, +, +  public void testDescendingIterator() {, +    forward.descendingIterator();, +    assertEquals("[descendingIterator]", getCalls());, +  }, +, +  public void testElement() {, +    forward.element();, +    assertEquals("[element]", getCalls());, +  }, +, +  public void testGetFirst() {, +    forward.getFirst();, +    assertEquals("[getFirst]", getCalls());, +  }, +, +  public void testGetLast() {, +    forward.getLast();, +    assertEquals("[getLast]", getCalls());, +  }]