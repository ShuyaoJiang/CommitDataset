[+++ b/android/guava/src/com/google/common/collect/ImmutableMultimap.java, +  @Override, +  UnmodifiableIterator<Entry<K, V>> entryIterator() {, +    return new UnmodifiableIterator<Entry<K, V>>() {, +      final Iterator<? extends Entry<K, ? extends ImmutableCollection<V>>> asMapItr =, +          map.entrySet().iterator();, +      K currentKey = null;, +      Iterator<V> valueItr = Iterators.emptyIterator();, +        return valueItr.hasNext() || asMapItr.hasNext();, +      public Entry<K, V> next() {, +        if (!valueItr.hasNext()) {, +          Entry<K, ? extends ImmutableCollection<V>> entry = asMapItr.next();, +          currentKey = entry.getKey();, +          valueItr = entry.getValue().iterator();, +        return Maps.immutableEntry(currentKey, valueItr.next());, +    return new UnmodifiableIterator<V>() {, +      Iterator<? extends ImmutableCollection<V>> valueCollectionItr = map.values().iterator();, +      Iterator<V> valueItr = Iterators.emptyIterator();, +, +      public boolean hasNext() {, +        return valueItr.hasNext() || valueCollectionItr.hasNext();, +      }, +, +      @Override, +      public V next() {, +        if (!valueItr.hasNext()) {, +          valueItr = valueCollectionItr.next().iterator();, +        }, +        return valueItr.next();, +++ b/android/guava/src/com/google/common/collect/ImmutableMultimap.java, +  @Override, +  UnmodifiableIterator<Entry<K, V>> entryIterator() {, +    return new UnmodifiableIterator<Entry<K, V>>() {, +      final Iterator<? extends Entry<K, ? extends ImmutableCollection<V>>> asMapItr =, +          map.entrySet().iterator();, +      K currentKey = null;, +      Iterator<V> valueItr = Iterators.emptyIterator();, +        return valueItr.hasNext() || asMapItr.hasNext();, +      public Entry<K, V> next() {, +        if (!valueItr.hasNext()) {, +          Entry<K, ? extends ImmutableCollection<V>> entry = asMapItr.next();, +          currentKey = entry.getKey();, +          valueItr = entry.getValue().iterator();, +        return Maps.immutableEntry(currentKey, valueItr.next());, +    return new UnmodifiableIterator<V>() {, +      Iterator<? extends ImmutableCollection<V>> valueCollectionItr = map.values().iterator();, +      Iterator<V> valueItr = Iterators.emptyIterator();, +, +      public boolean hasNext() {, +        return valueItr.hasNext() || valueCollectionItr.hasNext();, +      }, +, +      @Override, +      public V next() {, +        if (!valueItr.hasNext()) {, +          valueItr = valueCollectionItr.next().iterator();, +        }, +        return valueItr.next();, +++ b/guava/src/com/google/common/collect/ImmutableMultimap.java, +  @Override, +  UnmodifiableIterator<Entry<K, V>> entryIterator() {, +    return new UnmodifiableIterator<Entry<K, V>>() {, +      final Iterator<? extends Entry<K, ? extends ImmutableCollection<V>>> asMapItr =, +          map.entrySet().iterator();, +      K currentKey = null;, +      Iterator<V> valueItr = Iterators.emptyIterator();, +        return valueItr.hasNext() || asMapItr.hasNext();, +      public Entry<K, V> next() {, +        if (!valueItr.hasNext()) {, +          Entry<K, ? extends ImmutableCollection<V>> entry = asMapItr.next();, +          currentKey = entry.getKey();, +          valueItr = entry.getValue().iterator();, +        return Maps.immutableEntry(currentKey, valueItr.next());, +    return new UnmodifiableIterator<V>() {, +      Iterator<? extends ImmutableCollection<V>> valueCollectionItr = map.values().iterator();, +      Iterator<V> valueItr = Iterators.emptyIterator();, +, +      public boolean hasNext() {, +        return valueItr.hasNext() || valueCollectionItr.hasNext();, +      }, +, +      @Override, +      public V next() {, +        if (!valueItr.hasNext()) {, +          valueItr = valueCollectionItr.next().iterator();, +        }, +        return valueItr.next();]