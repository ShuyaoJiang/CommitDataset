[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      for (N otherNode : graph.nodes()) {, +        if (graph.successors(node).contains(otherNode)) {, +          assertThat(graph.edgeValue(node, otherNode)).isNotNull();, +        } else {, +          assertThat(graph.edgeValueOrDefault(node, otherNode, null)).isNull();, +        }, +      }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      for (N otherNode : graph.nodes()) {, +        if (graph.successors(node).contains(otherNode)) {, +          assertThat(graph.edgeValue(node, otherNode)).isNotNull();, +        } else {, +          assertThat(graph.edgeValueOrDefault(node, otherNode, null)).isNull();, +        }, +      }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        Set<E> edgesConnecting = network.edgesConnecting(node, successor);, +        assertThat(edgesConnecting).isNotEmpty();, +        assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, successor));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      for (N otherNode : graph.nodes()) {, +        if (graph.successors(node).contains(otherNode)) {, +          assertThat(graph.edgeValue(node, otherNode)).isNotNull();, +        } else {, +          assertThat(graph.edgeValueOrDefault(node, otherNode, null)).isNull();, +        }, +      }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        Set<E> edgesConnecting = network.edgesConnecting(node, successor);, +        assertThat(edgesConnecting).isNotEmpty();, +        assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, successor));, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.graph.GraphConstants.EDGE_CONNECTING_NOT_IN_GRAPH;, +        Set<E> edges = edgesConnecting(nodeA, nodeB);, +        checkArgument(!edges.isEmpty(), EDGE_CONNECTING_NOT_IN_GRAPH, nodeA, nodeB);, +        return edges;, +        Set<E> edges = edgesConnecting(nodeA, nodeB);, +        return edges.isEmpty() ? defaultValue : edges;, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      for (N otherNode : graph.nodes()) {, +        if (graph.successors(node).contains(otherNode)) {, +          assertThat(graph.edgeValue(node, otherNode)).isNotNull();, +        } else {, +          assertThat(graph.edgeValueOrDefault(node, otherNode, null)).isNull();, +        }, +      }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        Set<E> edgesConnecting = network.edgesConnecting(node, successor);, +        assertThat(edgesConnecting).isNotEmpty();, +        assertThat(edgesConnecting).isEqualTo(asGraph.edgeValue(node, successor));, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.graph.GraphConstants.EDGE_CONNECTING_NOT_IN_GRAPH;, +        Set<E> edges = edgesConnecting(nodeA, nodeB);, +        checkArgument(!edges.isEmpty(), EDGE_CONNECTING_NOT_IN_GRAPH, nodeA, nodeB);, +        return edges;, +        Set<E> edges = edgesConnecting(nodeA, nodeB);, +        return edges.isEmpty() ? defaultValue : edges;, +++ b/guava/src/com/google/common/graph/Network.java, +   * node B if the set is non-empty, otherwise, it will throw {@link IllegalArgumentException}.]