[+++ b/guava-gwt/src/com/google/common/math/Math.gwt.xml, +<?xml version="1.0" encoding="utf-8"?>, +   , +   , +   , +   , +    , +++ b/guava-gwt/src/com/google/common/math/Math.gwt.xml, +<?xml version="1.0" encoding="utf-8"?>, +   , +   , +   , +   , +    , +++ b/guava-gwt/test/com/google/common/math/testModule.gwt.xml, +  <inherits name="org.junit.contrib.truth.Truth"/>, +++ b/guava-gwt/src/com/google/common/math/Math.gwt.xml, +<?xml version="1.0" encoding="utf-8"?>, +   , +   , +   , +   , +    , +++ b/guava-gwt/test/com/google/common/math/testModule.gwt.xml, +  <inherits name="org.junit.contrib.truth.Truth"/>, +++ b/guava-tests/test/com/google/common/math/MathPreconditionsTest.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.math;, +, +import com.google.common.annotations.GwtCompatible;, +, +import junit.framework.TestCase;, +, +import java.math.BigInteger;, +, +/**, + * Unit tests for {@link MathPreconditions}., + *, + * @author Ben Yu, + */, +@GwtCompatible, +public class MathPreconditionsTest extends TestCase {, +, +  public void testCheckPositive_zeroInt() {, +    try {, +      MathPreconditions.checkPositive("int", 0);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCheckPositive_maxInt() {, +    MathPreconditions.checkPositive("int", Integer.MAX_VALUE);, +  }, +, +  public void testCheckPositive_minInt() {, +    try {, +      MathPreconditions.checkPositive("int", Integer.MIN_VALUE);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCheckPositive_positiveInt() {, +    MathPreconditions.checkPositive("int", 1);, +  }, +, +  public void testCheckPositive_negativeInt() {, +    try {, +      MathPreconditions.checkPositive("int", -1);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCheckPositive_zeroLong() {, +    try {, +      MathPreconditions.checkPositive("long", 0L);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCheckPositive_maxLong() {, +    MathPreconditions.checkPositive("long", Long.MAX_VALUE);, +  }, +, +  public void testCheckPositive_minLong() {, +    try {]