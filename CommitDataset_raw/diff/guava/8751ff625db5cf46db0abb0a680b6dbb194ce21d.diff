[+++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +    Set<Integer> set = ContiguousSet.create(Range.closed(1, elements), integers());, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +    Set<Integer> set = ContiguousSet.create(Range.closed(1, elements), integers());, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testCreate_noMin() {, +    Range<Integer> range = Range.lessThan(0);, +    try {, +      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCreate_noMax() {, +    Range<Integer> range = Range.greaterThan(0);, +    try {, +      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCreate_empty() {, +    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.closedOpen(1, 1), integers()));, +    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.openClosed(5, 5), integers()));, +    assertEquals(ImmutableSet.of(),, +        ContiguousSet.create(Range.lessThan(Integer.MIN_VALUE), integers()));, +    assertEquals(ImmutableSet.of(),, +        ContiguousSet.create(Range.greaterThan(Integer.MAX_VALUE), integers()));, +  }, +, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +    Set<Integer> set = ContiguousSet.create(Range.closed(1, elements), integers());, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testCreate_noMin() {, +    Range<Integer> range = Range.lessThan(0);, +    try {, +      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCreate_noMax() {, +    Range<Integer> range = Range.greaterThan(0);, +    try {, +      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCreate_empty() {, +    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.closedOpen(1, 1), integers()));, +    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.openClosed(5, 5), integers()));, +    assertEquals(ImmutableSet.of(),, +        ContiguousSet.create(Range.lessThan(Integer.MIN_VALUE), integers()));, +    assertEquals(ImmutableSet.of(),, +        ContiguousSet.create(Range.greaterThan(Integer.MAX_VALUE), integers()));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +  static final DiscreteDomain<Integer> UNBOUNDED_DOMAIN =, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +    Set<Integer> set = ContiguousSet.create(Range.closed(1, elements), integers());, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testCreate_noMin() {, +    Range<Integer> range = Range.lessThan(0);, +    try {, +      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCreate_noMax() {, +    Range<Integer> range = Range.greaterThan(0);, +    try {, +      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);, +      fail();, +    } catch (IllegalArgumentException expected) {}, +  }, +, +  public void testCreate_empty() {, +    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.closedOpen(1, 1), integers()));, +    assertEquals(ImmutableSet.of(), ContiguousSet.create(Range.openClosed(5, 5), integers()));, +    assertEquals(ImmutableSet.of(),, +        ContiguousSet.create(Range.lessThan(Integer.MIN_VALUE), integers()));, +    assertEquals(ImmutableSet.of(),, +        ContiguousSet.create(Range.greaterThan(Integer.MAX_VALUE), integers()));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +  static final DiscreteDomain<Integer> UNBOUNDED_DOMAIN =, +++ b/guava-tests/test/com/google/common/collect/SetsTest.java, +    Set<Integer> set = ContiguousSet.create(Range.closed(0, 10000), DiscreteDomain.integers());, +++ b/guava-tests/benchmark/com/google/common/collect/PowerSetBenchmark.java, +    Set<Integer> set = ContiguousSet.create(Range.closed(1, elements), integers());, +++ b/guava-tests/test/com/google/common/collect/ContiguousSetTest.java, +  public void testCreate_noMin() {, +    Range<Integer> range = Range.lessThan(0);, +    try {, +      ContiguousSet.create(range, RangeTest.UNBOUNDED_DOMAIN);, +      fail();]