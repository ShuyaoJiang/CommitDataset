[+++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +      FluentFuture<?> f =, +          FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +      FluentFuture<?> f =, +          FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    extends FluentFuture.TrustedFuture<V> implements Runnable {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +      FluentFuture<?> f =, +          FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    extends FluentFuture.TrustedFuture<V> implements Runnable {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +public abstract class AbstractFuture<V> implements ListenableFuture<V> {, +   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation, +   * of this interface must also be an AbstractFuture and must not override or expose for overriding, +   * any of the public methods of ListenableFuture., +   */, +  // TODO(user): move parts into a default method on ListenableFuture?, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +      FluentFuture<?> f =, +          FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    extends FluentFuture.TrustedFuture<V> implements Runnable {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +public abstract class AbstractFuture<V> implements ListenableFuture<V> {, +   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation, +   * of this interface must also be an AbstractFuture and must not override or expose for overriding, +   * any of the public methods of ListenableFuture., +   */, +  // TODO(user): move parts into a default method on ListenableFuture?, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +abstract class AbstractTransformFuture<I, O, F, T> extends FluentFuture.TrustedFuture<O>, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +      FluentFuture<?> f =, +          FluentFuture.from(SettableFuture.create()).withTimeout(0, SECONDS, executor);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    extends FluentFuture.TrustedFuture<V> implements Runnable {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +public abstract class AbstractFuture<V> implements ListenableFuture<V> {, +   * Tag interface marking trusted subclasses. This enables some optimizations. The implementation, +   * of this interface must also be an AbstractFuture and must not override or expose for overriding, +   * any of the public methods of ListenableFuture., +   */, +  // TODO(user): move parts into a default method on ListenableFuture?, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +abstract class AbstractTransformFuture<I, O, F, T> extends FluentFuture.TrustedFuture<O>, +++ b/android/guava/src/com/google/common/util/concurrent/FluentFuture.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +, +  /**, +   * A less abstract subclass of AbstractFuture. This can be used to optimize setFuture by ensuring, +   * that {@link #get} calls exactly the implementation of {@link AbstractFuture#get}., +   */, +  abstract static class TrustedFuture<V> extends FluentFuture<V>, +      implements AbstractFuture.Trusted<V> {, +    @CanIgnoreReturnValue, +    @Override, +    public final V get() throws InterruptedException, ExecutionException {, +      return super.get();, +    }, +, +    @CanIgnoreReturnValue, +    @Override, +    public final V get(long timeout, TimeUnit unit), +        throws InterruptedException, ExecutionException, TimeoutException {, +      return super.get(timeout, unit);, +    }, +, +    @Override, +    public final boolean isDone() {, +      return super.isDone();, +    }, +, +    @Override, +    public final boolean isCancelled() {, +      return super.isCancelled();, +    }, +, +    @Override, +    public final void addListener(Runnable listener, Executor executor) {, +      super.addListener(listener, executor);, +    }, +, +    @CanIgnoreReturnValue, +    @Override, +    public final boolean cancel(boolean mayInterruptIfRunning) {, +      return super.cancel(mayInterruptIfRunning);, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java, +    FluentFuture<String> f = FluentFuture.from(SettableFuture.<String>create());, +      FluentFuture<?> f =]