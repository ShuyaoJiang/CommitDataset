[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.otherNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.otherNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.otherNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.otherNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).otherNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).otherNode(node))).contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.otherNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.otherNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).otherNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).otherNode(node))).contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/EndpointsTest.java, +import static org.junit.Assert.fail;, +import com.google.common.collect.ImmutableList;, +import java.util.List;, +, +    assertThat(directed.otherNode("source")).isEqualTo("target");, +    assertThat(directed.otherNode("target")).isEqualTo("source");, +    assertThat(undirected.otherNode("chicken")).isEqualTo("egg");, +    assertThat(undirected.otherNode("egg")).isEqualTo("chicken");, +    assertThat(undirected.otherNode("node")).isEqualTo("node");, +  public void testOtherNode_nodeNotIncident() {, +    List<MutableNetwork<Integer, String>> testGraphs = ImmutableList.of(, +        NetworkBuilder.directed().<Integer, String>build(),, +        NetworkBuilder.undirected().<Integer, String>build());, +    for (MutableNetwork<Integer, String> graph : testGraphs) {, +      graph.addEdge("1-2", 1, 2);, +      Endpoints<Integer> endpoints = graph.incidentNodes("1-2");, +      try {, +        endpoints.otherNode(3);, +        fail("Should have rejected otherNode() called with a node not incident to edge.");, +      } catch (IllegalArgumentException expected) {, +      }, +    }, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.otherNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.otherNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).otherNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).otherNode(node))).contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/EndpointsTest.java, +import static org.junit.Assert.fail;, +import com.google.common.collect.ImmutableList;, +import java.util.List;, +, +    assertThat(directed.otherNode("source")).isEqualTo("target");, +    assertThat(directed.otherNode("target")).isEqualTo("source");, +    assertThat(undirected.otherNode("chicken")).isEqualTo("egg");, +    assertThat(undirected.otherNode("egg")).isEqualTo("chicken");, +    assertThat(undirected.otherNode("node")).isEqualTo("node");, +  public void testOtherNode_nodeNotIncident() {, +    List<MutableNetwork<Integer, String>> testGraphs = ImmutableList.of(, +        NetworkBuilder.directed().<Integer, String>build(),, +        NetworkBuilder.undirected().<Integer, String>build());, +    for (MutableNetwork<Integer, String> graph : testGraphs) {, +      graph.addEdge("1-2", 1, 2);, +      Endpoints<Integer> endpoints = graph.incidentNodes("1-2");, +      try {, +        endpoints.otherNode(3);, +        fail("Should have rejected otherNode() called with a node not incident to edge.");, +      } catch (IllegalArgumentException expected) {, +      }, +    }, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        assertThat(endpoints.source()).isEqualTo(endpoints.otherNode(node));, +        assertThat(endpoints.target()).isEqualTo(endpoints.otherNode(node));, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        assertThat(graph.outEdges(graph.incidentNodes(inEdge).otherNode(node))).contains(inEdge);, +        assertThat(graph.inEdges(graph.incidentNodes(outEdge).otherNode(node))).contains(outEdge);, +++ b/guava-tests/test/com/google/common/graph/EndpointsTest.java, +import static org.junit.Assert.fail;, +import com.google.common.collect.ImmutableList;, +import java.util.List;, +, +    assertThat(directed.otherNode("source")).isEqualTo("target");, +    assertThat(directed.otherNode("target")).isEqualTo("source");, +    assertThat(undirected.otherNode("chicken")).isEqualTo("egg");, +    assertThat(undirected.otherNode("egg")).isEqualTo("chicken");, +    assertThat(undirected.otherNode("node")).isEqualTo("node");, +  public void testOtherNode_nodeNotIncident() {, +    List<MutableNetwork<Integer, String>> testGraphs = ImmutableList.of(, +        NetworkBuilder.directed().<Integer, String>build(),, +        NetworkBuilder.undirected().<Integer, String>build());, +    for (MutableNetwork<Integer, String> graph : testGraphs) {, +      graph.addEdge("1-2", 1, 2);, +      Endpoints<Integer> endpoints = graph.incidentNodes("1-2");, +      try {, +        endpoints.otherNode(3);, +        fail("Should have rejected otherNode() called with a node not incident to edge.");]