[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    /** @see Predicates#alwaysTrue() */, +      @Override public String toString() {, +        return "Predicates.alwaysTrue()";, +      }, +    /** @see Predicates#alwaysFalse() */, +      @Override public String toString() {, +        return "Predicates.alwaysFalse()";, +      }, +    /** @see Predicates#isNull() */, +      @Override public String toString() {, +        return "Predicates.isNull()";, +      }, +    /** @see Predicates#notNull() */, +      @Override public String toString() {, +        return "Predicates.notNull()";, +      }, +      return "Predicates.not(" + predicate.toString() + ")";, +      return "Predicates.and(" + COMMA_JOINER.join(components) + ")";, +      return "Predicates.or(" + COMMA_JOINER.join(components) + ")";, +      return "Predicates.equalTo(" + target + ")";, +      return "Predicates.in(" + target + ")";, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    /** @see Predicates#alwaysTrue() */, +      @Override public String toString() {, +        return "Predicates.alwaysTrue()";, +      }, +    /** @see Predicates#alwaysFalse() */, +      @Override public String toString() {, +        return "Predicates.alwaysFalse()";, +      }, +    /** @see Predicates#isNull() */, +      @Override public String toString() {, +        return "Predicates.isNull()";, +      }, +    /** @see Predicates#notNull() */, +      @Override public String toString() {, +        return "Predicates.notNull()";, +      }, +      return "Predicates.not(" + predicate.toString() + ")";, +      return "Predicates.and(" + COMMA_JOINER.join(components) + ")";, +      return "Predicates.or(" + COMMA_JOINER.join(components) + ")";, +      return "Predicates.equalTo(" + target + ")";, +      return "Predicates.in(" + target + ")";, +++ b/guava/src/com/google/common/base/Predicates.java, +    return new ContainsPatternFromStringPredicate(pattern);, +    /** @see Predicates#alwaysTrue() */, +      @Override public String toString() {, +        return "Predicates.alwaysTrue()";, +      }, +    /** @see Predicates#alwaysFalse() */, +      @Override public String toString() {, +        return "Predicates.alwaysFalse()";, +      }, +    /** @see Predicates#isNull() */, +      @Override public String toString() {, +        return "Predicates.isNull()";, +      }, +    /** @see Predicates#notNull() */, +      @Override public String toString() {, +        return "Predicates.notNull()";, +      }, +      return "Predicates.not(" + predicate.toString() + ")";, +      return "Predicates.and(" + COMMA_JOINER.join(components) + ")";, +      return "Predicates.or(" + COMMA_JOINER.join(components) + ")";, +      return "Predicates.equalTo(" + target + ")";, +      return "Predicates.instanceOf(" + clazz.getName() + ")";, +      return "Predicates.assignableFrom(" + clazz.getName() + ")";, +      return "Predicates.in(" + target + ")";, +  /** @see Predicates#contains(Pattern) */, +      String patternString = Objects.toStringHelper(pattern), +          .add("pattern", pattern.pattern()), +          .add("pattern.flags", pattern.flags()), +      return "Predicates.contains(" + patternString + ")";, +    }, +, +    private static final long serialVersionUID = 0;, +  }, +, +  /** @see Predicates#containsPattern(String) */, +  @GwtIncompatible("Only used by other GWT-incompatible code."), +  private static class ContainsPatternFromStringPredicate, +      extends ContainsPatternPredicate {, +, +    ContainsPatternFromStringPredicate(String string) {, +      super(Pattern.compile(string));, +    }, +, +    @Override public String toString() {, +      return "Predicates.containsPattern(" + pattern.pattern() + ")";]