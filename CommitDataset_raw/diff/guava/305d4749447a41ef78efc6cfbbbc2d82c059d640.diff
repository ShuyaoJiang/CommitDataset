[+++ b/guava-testlib/src/com/google/common/collect/testing/NavigableMapTestSuiteBuilder.java, +import java.util.SortedMap;, +public class NavigableMapTestSuiteBuilder<K, V> extends SortedMapTestSuiteBuilder<K, V> {, +      // Other combinations are inherited from SortedMapTestSuiteBuilder., +  @Override protected NavigableSetTestSuiteBuilder<K> createDerivedKeySetSuite(, +  @Override NavigableMap<K, V> createSubMap(SortedMap<K, V> sortedMap,, +      K firstInclusive, K firstExclusive, K lastExclusive, K lastInclusive, Bound from, Bound to) {, +    NavigableMap<K, V> map = (NavigableMap<K, V>) sortedMap;, +    if (from == Bound.NO_BOUND && to == Bound.INCLUSIVE) {, +      return (NavigableMap<K, V>) super.createSubMap(, +          map, firstInclusive, firstExclusive, lastExclusive, lastInclusive, from, to);, +  @Override NavigableMapTestSuiteBuilder<K, V> newBuilderUsing(TestMapGenerator<K, V> generator) {, +    return using(generator);, +++ b/guava-testlib/src/com/google/common/collect/testing/NavigableMapTestSuiteBuilder.java, +import java.util.SortedMap;, +public class NavigableMapTestSuiteBuilder<K, V> extends SortedMapTestSuiteBuilder<K, V> {, +      // Other combinations are inherited from SortedMapTestSuiteBuilder., +  @Override protected NavigableSetTestSuiteBuilder<K> createDerivedKeySetSuite(, +  @Override NavigableMap<K, V> createSubMap(SortedMap<K, V> sortedMap,, +      K firstInclusive, K firstExclusive, K lastExclusive, K lastInclusive, Bound from, Bound to) {, +    NavigableMap<K, V> map = (NavigableMap<K, V>) sortedMap;, +    if (from == Bound.NO_BOUND && to == Bound.INCLUSIVE) {, +      return (NavigableMap<K, V>) super.createSubMap(, +          map, firstInclusive, firstExclusive, lastExclusive, lastInclusive, from, to);, +  @Override NavigableMapTestSuiteBuilder<K, V> newBuilderUsing(TestMapGenerator<K, V> generator) {, +    return using(generator);, +++ b/guava-testlib/src/com/google/common/collect/testing/SortedMapTestSuiteBuilder.java, +/*, + * Copyright (C) 2010 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect.testing;, +, +import com.google.common.collect.testing.features.Feature;, +import com.google.common.collect.testing.testers.SortedMapNavigationTester;, +, +import junit.framework.TestSuite;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +import java.util.Map;, +import java.util.Map.Entry;, +import java.util.Set;, +import java.util.SortedMap;, +, +/**, + * Creates, based on your criteria, a JUnit test suite that exhaustively tests, + * a SortedMap implementation., + */, +public class SortedMapTestSuiteBuilder<K, V> extends MapTestSuiteBuilder<K, V> {, +  public static <K, V> SortedMapTestSuiteBuilder<K, V> using(, +      TestMapGenerator<K, V> generator) {, +    SortedMapTestSuiteBuilder<K, V> result = new SortedMapTestSuiteBuilder<K, V>();, +    result.usingGenerator(generator);, +    return result;, +  }, +, +  @Override protected List<Class<? extends AbstractTester>> getTesters() {, +    List<Class<? extends AbstractTester>> testers = Helpers.copyToList(super.getTesters());, +    testers.add(SortedMapNavigationTester.class);, +    return testers;, +  }, +, +  @Override, +  protected List<TestSuite> createDerivedSuites(FeatureSpecificTestSuiteBuilder<?,, +      ? extends OneSizeTestContainerGenerator<Map<K, V>, Entry<K, V>>> parentBuilder) {, +    List<TestSuite> derivedSuites = super.createDerivedSuites(parentBuilder);, +, +    if (!parentBuilder.getFeatures().contains(NoRecurse.SUBMAP)) {, +      derivedSuites.add(createSubmapSuite(parentBuilder, Bound.NO_BOUND, Bound.EXCLUSIVE));, +      derivedSuites.add(createSubmapSuite(parentBuilder, Bound.INCLUSIVE, Bound.NO_BOUND));, +      derivedSuites.add(createSubmapSuite(parentBuilder, Bound.INCLUSIVE, Bound.EXCLUSIVE));, +    }, +, +    return derivedSuites;, +  }, +, +  @Override protected SortedSetTestSuiteBuilder<K> createDerivedKeySetSuite(, +      TestSetGenerator<K> keySetGenerator) {, +    return SortedSetTestSuiteBuilder.using(keySetGenerator);, +  }, +, +  /**, +   * To avoid infinite recursion, test suites with these marker features won't, +   * have derived suites created for them.]