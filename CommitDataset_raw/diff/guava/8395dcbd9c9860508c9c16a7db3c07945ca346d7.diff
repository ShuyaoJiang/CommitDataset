[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +++ b/guava-tests/test/com/google/common/cache/CacheBuilderSpecTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.cache;, +, +import static com.google.common.cache.CacheBuilderSpec.parse;, +import static com.google.common.cache.TestingWeighers.constantWeigher;, +, +import com.google.common.base.Suppliers;, +import com.google.common.cache.LocalCache.Strength;, +import com.google.common.testing.EqualsTester;, +, +import junit.framework.TestCase;, +, +import java.lang.reflect.Field;, +import java.util.concurrent.TimeUnit;, +, +/**, + * Tests CacheBuilderSpec., + * TODO(user): tests of a few invalid input conditions, boundary conditions., + *, + * @author Adam Winer, + */, +public class CacheBuilderSpecTest extends TestCase {, +  public void testParse_empty() {, +    CacheBuilderSpec spec = parse("");, +    assertNull(spec.initialCapacity);, +    assertNull(spec.maximumSize);, +    assertNull(spec.maximumWeight);, +    assertNull(spec.concurrencyLevel);, +    assertNull(spec.keyStrength);, +    assertNull(spec.valueStrength);, +    assertNull(spec.writeExpirationTimeUnit);, +    assertNull(spec.accessExpirationTimeUnit);, +    assertCacheBuilderEquivalence(CacheBuilder.newBuilder(), CacheBuilder.from(spec));, +  }, +, +  public void testParse_initialCapacity() {, +    CacheBuilderSpec spec = parse("initialCapacity=10");, +    assertEquals(10, spec.initialCapacity.intValue());, +    assertNull(spec.maximumSize);, +    assertNull(spec.maximumWeight);, +    assertNull(spec.concurrencyLevel);, +    assertNull(spec.keyStrength);, +    assertNull(spec.valueStrength);, +    assertNull(spec.writeExpirationTimeUnit);, +    assertNull(spec.accessExpirationTimeUnit);, +    assertCacheBuilderEquivalence(, +        CacheBuilder.newBuilder().initialCapacity(10), CacheBuilder.from(spec));, +  }, +, +  public void testParse_initialCapacityRepeated() {, +    try {, +      parse("initialCapacity=10, initialCapacity=20");, +      fail("Expected exception");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +  }, +, +  public void testParse_maximumSize() {, +    CacheBuilderSpec spec = parse("maximumSize=9000");, +    assertNull(spec.initialCapacity);, +    assertEquals(9000, spec.maximumSize.longValue());, +    assertNull(spec.concurrencyLevel);, +    assertNull(spec.keyStrength);, +    assertNull(spec.valueStrength);, +    assertNull(spec.writeExpirationTimeUnit);, +    assertNull(spec.accessExpirationTimeUnit);, +    assertCacheBuilderEquivalence(, +        CacheBuilder.newBuilder().maximumSize(9000), CacheBuilder.from(spec));, +  }, +, +  public void testParse_maximumSizeRepeated() {, +    try {, +      parse("maximumSize=10, maximumSize=20");, +      fail("Expected exception");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +  }]