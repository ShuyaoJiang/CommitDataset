[+++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    public Builder() {}, +      switch (size) {, +        case 0:, +          return of();, +        case 1:, +          return of(entries[0].getKey(), entries[0].getValue());, +        default:, +          return new RegularImmutableBiMap<K, V>(size, entries);, +      }, +    switch (entries.length) {, +      case 0:, +        return of();, +      case 1:, +        @SuppressWarnings("unchecked") // safe covariant cast in this context, +        Entry<K, V> entry = (Entry<K, V>) entries[0];, +        return of(entry.getKey(), entry.getValue());, +      default:, +        return new RegularImmutableBiMap<K, V>(entries);, +    }, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    public Builder() {}, +      switch (size) {, +        case 0:, +          return of();, +        case 1:, +          return of(entries[0].getKey(), entries[0].getValue());, +        default:, +          return new RegularImmutableBiMap<K, V>(size, entries);, +      }, +    switch (entries.length) {, +      case 0:, +        return of();, +      case 1:, +        @SuppressWarnings("unchecked") // safe covariant cast in this context, +        Entry<K, V> entry = (Entry<K, V>) entries[0];, +        return of(entry.getKey(), entry.getValue());, +      default:, +        return new RegularImmutableBiMap<K, V>(entries);, +    }, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +import com.google.common.collect.ImmutableMapEntry.TerminalEntry;, +  static <K, V> TerminalEntry<K, V> entryOf(K key, V value) {, +    checkEntryNotNull(key, value);, +    return new TerminalEntry<K, V>(key, value);, +  /**, +   * Returns a new builder. The generated builder is equivalent to the builder, +   * created by the {@link Builder} constructor., +   */, +  public static <K, V> Builder<K, V> builder() {, +    return new Builder<K, V>();, +  }, +, +    TerminalEntry<K, V>[] entries;, +      this.entries = new TerminalEntry[initialCapacity];, +      TerminalEntry<K, V> entry = entryOf(key, value);, +          return new RegularImmutableMap<K, V>(size, entries);, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    public Builder() {}, +      switch (size) {, +        case 0:, +          return of();, +        case 1:, +          return of(entries[0].getKey(), entries[0].getValue());, +        default:, +          return new RegularImmutableBiMap<K, V>(size, entries);, +      }, +    switch (entries.length) {, +      case 0:, +        return of();, +      case 1:, +        @SuppressWarnings("unchecked") // safe covariant cast in this context, +        Entry<K, V> entry = (Entry<K, V>) entries[0];, +        return of(entry.getKey(), entry.getValue());, +      default:, +        return new RegularImmutableBiMap<K, V>(entries);, +    }, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +import com.google.common.collect.ImmutableMapEntry.TerminalEntry;, +  static <K, V> TerminalEntry<K, V> entryOf(K key, V value) {, +    checkEntryNotNull(key, value);, +    return new TerminalEntry<K, V>(key, value);, +  /**, +   * Returns a new builder. The generated builder is equivalent to the builder, +   * created by the {@link Builder} constructor., +   */, +  public static <K, V> Builder<K, V> builder() {, +    return new Builder<K, V>();, +  }, +, +    TerminalEntry<K, V>[] entries;, +      this.entries = new TerminalEntry[initialCapacity];, +      TerminalEntry<K, V> entry = entryOf(key, value);, +          return new RegularImmutableMap<K, V>(size, entries);, +++ b/guava/src/com/google/common/collect/ImmutableMapEntry.java, +/*, + * Copyright (C) 2013 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License.]