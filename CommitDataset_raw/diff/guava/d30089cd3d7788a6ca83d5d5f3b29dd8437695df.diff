[+++ b/guava/src/com/google/common/collect/BstAggregate.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.annotations.GwtCompatible;, +, +import javax.annotation.Nullable;, +, +/**, + * An integer-valued function on binary search tree nodes that adds between nodes., + * , + * @author Louis Wasserman, + */, +@GwtCompatible, +public interface BstAggregate<N extends BstNode<?, N>> {, +  /**, +   * The total value on an entire subtree. Must be equal to the sum of the {@link #entryValue, +   * entryValue} of this node and all its descendants., +   */, +  int treeValue(@Nullable N tree);, +, +  /**, +   * The value on a single entry, ignoring its descendants., +   */, +  int entryValue(N entry);, +}, +++ b/guava/src/com/google/common/collect/BstAggregate.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.annotations.GwtCompatible;, +, +import javax.annotation.Nullable;, +, +/**, + * An integer-valued function on binary search tree nodes that adds between nodes., + * , + * @author Louis Wasserman, + */, +@GwtCompatible, +public interface BstAggregate<N extends BstNode<?, N>> {, +  /**, +   * The total value on an entire subtree. Must be equal to the sum of the {@link #entryValue, +   * entryValue} of this node and all its descendants., +   */, +  int treeValue(@Nullable N tree);, +, +  /**, +   * The value on a single entry, ignoring its descendants., +   */, +  int entryValue(N entry);, +}, +++ b/guava/src/com/google/common/collect/BstCountBasedBalancePolicies.java, +  public static <N extends BstNode<?, N>> BstBalancePolicy<N> noRebalancePolicy(, +      final BstAggregate<N> countAggregate) {, +    checkNotNull(countAggregate);, +        } else if (countAggregate.treeValue(left) > countAggregate.treeValue(right)) {, +  public static <K, N extends BstNode<K, N>> BstBalancePolicy<N> singleRebalancePolicy(, +      final BstAggregate<N> countAggregate) {, +    checkNotNull(countAggregate);, +        int countL = countAggregate.treeValue(left);, +        int countR = countAggregate.treeValue(right);, +        if (countAggregate.treeValue(rl) >= SECOND_ROTATE_RATIO * countAggregate.treeValue(rr)) {, +        if (countAggregate.treeValue(lr) >= SECOND_ROTATE_RATIO * countAggregate.treeValue(ll)) {, +        if (countAggregate.treeValue(left) > countAggregate.treeValue(right)) {, +  public static <K, N extends BstNode<K, N>> BstBalancePolicy<N> fullRebalancePolicy(, +      final BstAggregate<N> countAggregate) {, +    checkNotNull(countAggregate);, +        BstCountBasedBalancePolicies.<K, N>singleRebalancePolicy(countAggregate);, +        int countL = countAggregate.treeValue(left);, +        int countR = countAggregate.treeValue(right);, +        int countL = countAggregate.treeValue(left);, +        int countR = countAggregate.treeValue(right);, +++ b/guava/src/com/google/common/collect/BstAggregate.java]