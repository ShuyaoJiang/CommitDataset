[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.inducedSubgraph;, +  public void roots_emptyGraph() {, +    Network<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    assertThat(roots(directedGraph)).isEmpty();, +  }, +, +  @Test, +  public void roots_trivialGraph() {, +    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    directedGraph.addNode(N1);, +    assertThat(roots(directedGraph)).isEqualTo(ImmutableSet.of(N1));, +  }, +, +  @Test, +  public void roots_nodeWithSelfLoop() {, +    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    directedGraph.addNode(N1);, +    directedGraph.addEdge(E11, N1, N1);, +    assertThat(roots(directedGraph)).isEmpty();, +  }, +, +  @Test, +  public void roots_nodeWithChildren() {, +    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    directedGraph.addEdge(E12, N1, N2);, +    directedGraph.addEdge(E13, N1, N3);, +    assertThat(roots(directedGraph)).isEqualTo(ImmutableSet.of(N1));, +  }, +, +  @Test, +  public void roots_cycle() {, +    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    directedGraph.addEdge(E12, N1, N2);, +    directedGraph.addEdge(E21, N2, N1);, +    assertThat(roots(directedGraph)).isEmpty();, +  }, +, +  @Test, +  public void roots_multipleRoots() {, +    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    directedGraph.addNode(N1);, +    directedGraph.addNode(N2);, +    assertThat(roots(directedGraph)).isEqualTo(ImmutableSet.of(N1, N2));, +  }, +, +  @Test, +  public void addEdge_mismatchedDirectedness() {, +    try {, +      addEdge(NetworkBuilder.undirected().<Integer, String>build(), E12,, +          Endpoints.ofDirected(N1, N2));, +      fail("Should have rejected adding an edge with directed endpoints to a undirected graph.");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @Test, +  public void addEdge_selfLoop() {, +    MutableNetwork<Integer, String> undirectedGraph = NetworkBuilder.undirected().build();, +    assertThat(addEdge(undirectedGraph, E11, Endpoints.ofUndirected(N1, N1))).isTrue();, +    assertThat(undirectedGraph.edgesConnecting(N1, N1)).containsExactly(E11);, +  }, +, +  @Test, +  public void addEdge_basic() {, +    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    assertThat(addEdge(directedGraph, E12, Endpoints.ofDirected(N1, N2))).isTrue();, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertThat(directedGraph.edgesConnecting(N2, N1)).isEmpty();, +  }, +, +  @Test, +  public void inducedSubgraph_partialEdgeIncidence() {, +    Set<Integer> nodeSubset = ImmutableSet.of(N1, N2, N4);, +, +    MutableNetwork<Integer, String> directedGraph = NetworkBuilder.directed().build();, +    directedGraph.addEdge(E12, N1, N2);, +    directedGraph.addEdge(E21, N2, N1);, +    directedGraph.addEdge(E13, N1, N3); // only incident to one node in nodeSubset, +    directedGraph.addEdge(E44, N4, N4);, +    directedGraph.addEdge("5-6", 5, 6); // not incident to any node in nodeSubset, +, +    MutableNetwork<Integer, String> expectedSubgraph = NetworkBuilder.directed().build();, +    expectedSubgraph.addEdge(E12, N1, N2);, +    expectedSubgraph.addEdge(E21, N2, N1);, +    expectedSubgraph.addEdge(E44, N4, N4);, +, +    assertThat(inducedSubgraph(directedGraph, nodeSubset)).isEqualTo(expectedSubgraph);, +  }, +, +  @Test, +  public void inducedSubgraph_nodeNotInGraph() {, +    MutableNetwork<Integer, String> undirectedGraph = NetworkBuilder.undirected().build();, +, +    try {, +      inducedSubgraph(undirectedGraph, ImmutableSet.of(N1));, +      fail("Should have rejected getting induced subgraph with node not in original graph");, +    } catch (IllegalArgumentException expected) {, +    }, +  }]