[+++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +import static com.google.common.collect.ImmutableList.toImmutableList;, +import java.util.stream.Stream;, +  private static final ImmutableList<String> SPLIT_LINES =, +      ImmutableList.of("foo", "bar", "baz", "something");, +  public void testLines() throws IOException {, +    source = new TestCharSource(LINES);, +, +    ImmutableList<String> lines;, +    try (Stream<String> linesStream = source.lines()) {, +      assertTrue(source.wasStreamOpened());, +      assertFalse(source.wasStreamClosed());, +, +      lines = linesStream.collect(toImmutableList());, +    }, +, +    assertTrue(source.wasStreamClosed());, +    assertEquals(SPLIT_LINES, lines);, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +import static com.google.common.collect.ImmutableList.toImmutableList;, +import java.util.stream.Stream;, +  private static final ImmutableList<String> SPLIT_LINES =, +      ImmutableList.of("foo", "bar", "baz", "something");, +  public void testLines() throws IOException {, +    source = new TestCharSource(LINES);, +, +    ImmutableList<String> lines;, +    try (Stream<String> linesStream = source.lines()) {, +      assertTrue(source.wasStreamOpened());, +      assertFalse(source.wasStreamClosed());, +, +      lines = linesStream.collect(toImmutableList());, +    }, +, +    assertTrue(source.wasStreamClosed());, +    assertEquals(SPLIT_LINES, lines);, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTester.java, +import static com.google.common.collect.ImmutableList.toImmutableList;, +import com.google.common.io.SourceSinkFactory.ByteSourceFactory;, +import com.google.common.io.SourceSinkFactory.CharSourceFactory;, +import java.util.stream.Stream;, +  public void testLines() throws IOException {, +    try (Stream<String> lines = source.lines()) {, +      assertExpectedLines(lines.collect(toImmutableList()));, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +import static com.google.common.collect.ImmutableList.toImmutableList;, +import java.util.stream.Stream;, +  private static final ImmutableList<String> SPLIT_LINES =, +      ImmutableList.of("foo", "bar", "baz", "something");, +  public void testLines() throws IOException {, +    source = new TestCharSource(LINES);, +, +    ImmutableList<String> lines;, +    try (Stream<String> linesStream = source.lines()) {, +      assertTrue(source.wasStreamOpened());, +      assertFalse(source.wasStreamClosed());, +, +      lines = linesStream.collect(toImmutableList());, +    }, +, +    assertTrue(source.wasStreamClosed());, +    assertEquals(SPLIT_LINES, lines);, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSourceTester.java, +import static com.google.common.collect.ImmutableList.toImmutableList;, +import com.google.common.io.SourceSinkFactory.ByteSourceFactory;, +import com.google.common.io.SourceSinkFactory.CharSourceFactory;, +import java.util.stream.Stream;, +  public void testLines() throws IOException {, +    try (Stream<String> lines = source.lines()) {, +      assertExpectedLines(lines.collect(toImmutableList()));, +    }, +  }, +, +++ b/guava/src/com/google/common/io/ByteSink.java, +   * Opens a new {@link OutputStream} for writing to this sink. This method returns a new,, +   * @throws IOException if an I/O error occurs while opening the stream, +   * additional buffering (for example, a {@code ByteArrayOutputStream}). This method returns a new,, +   * independent stream each time it is called., +   * @throws IOException if an I/O error occurs while opening the stream, +   * @throws IOException if an I/O occurs while writing to this sink, +   * @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink, +++ b/guava-tests/test/com/google/common/io/CharSourceTest.java, +import static com.google.common.collect.ImmutableList.toImmutableList;, +import java.util.stream.Stream;, +  private static final ImmutableList<String> SPLIT_LINES =, +      ImmutableList.of("foo", "bar", "baz", "something");, +  public void testLines() throws IOException {, +    source = new TestCharSource(LINES);, +, +    ImmutableList<String> lines;, +    try (Stream<String> linesStream = source.lines()) {]