[+++ b/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java, +      V v = ((TestMapGenerator<K, V>) mapGenerator.getInnerGenerator()).samples().e0.getValue();, +        entries.add(mapEntry(element, v));, +++ b/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java, +      V v = ((TestMapGenerator<K, V>) mapGenerator.getInnerGenerator()).samples().e0.getValue();, +        entries.add(mapEntry(element, v));, +++ b/guava-testlib/src/com/google/common/collect/testing/SampleElements.java, +import java.util.Arrays;, +import java.util.Iterator;, +public class SampleElements<E> implements Iterable<E> {, +  @Override, +  public Iterator<E> iterator() {, +    return Arrays.asList(e0, e1, e2, e3, e4).iterator();, +  }, +, +++ b/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java, +      V v = ((TestMapGenerator<K, V>) mapGenerator.getInnerGenerator()).samples().e0.getValue();, +        entries.add(mapEntry(element, v));, +++ b/guava-testlib/src/com/google/common/collect/testing/SampleElements.java, +import java.util.Arrays;, +import java.util.Iterator;, +public class SampleElements<E> implements Iterable<E> {, +  @Override, +  public Iterator<E> iterator() {, +    return Arrays.asList(e0, e1, e2, e3, e4).iterator();, +  }, +, +++ b/guava-testlib/src/com/google/common/collect/testing/features/CollectionFeature.java, +  SUPPORTS_ADD (SUPPORTS_ADD_ALL),, +  SUPPORTS_REMOVE (SUPPORTS_REMOVE_ALL, SUPPORTS_RETAIN_ALL),, +++ b/guava-testlib/src/com/google/common/collect/testing/DerivedCollectionGenerators.java, +      V v = ((TestMapGenerator<K, V>) mapGenerator.getInnerGenerator()).samples().e0.getValue();, +        entries.add(mapEntry(element, v));, +++ b/guava-testlib/src/com/google/common/collect/testing/SampleElements.java, +import java.util.Arrays;, +import java.util.Iterator;, +public class SampleElements<E> implements Iterable<E> {, +  @Override, +  public Iterator<E> iterator() {, +    return Arrays.asList(e0, e1, e2, e3, e4).iterator();, +  }, +, +++ b/guava-testlib/src/com/google/common/collect/testing/features/CollectionFeature.java, +  SUPPORTS_ADD (SUPPORTS_ADD_ALL),, +  SUPPORTS_REMOVE (SUPPORTS_REMOVE_ALL, SUPPORTS_RETAIN_ALL),, +++ b/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect.testing.google;, +, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.collect.Multimap;, +import com.google.common.collect.testing.AbstractContainerTester;, +import com.google.common.collect.testing.Helpers;, +import com.google.common.collect.testing.SampleElements;, +, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Map.Entry;, +, +/**, + * Superclass for all {@code Multimap} testers., + *, + * @author Louis Wasserman, + */, +@GwtCompatible, +public abstract class AbstractMultimapTester<K, V>, +    extends AbstractContainerTester<Multimap<K, V>, Map.Entry<K, V>> {, +, +  private Multimap<K, V> multimap;, +, +  protected Multimap<K, V> multimap() {, +    return multimap;, +  }, +, +  /**, +   * @return an array of the proper size with {@code null} as the key of the, +   * middle element., +   */, +  protected Map.Entry<K, V>[] createArrayWithNullKey() {, +    Map.Entry<K, V>[] array = createSamplesArray();, +    final int nullKeyLocation = getNullLocation();, +    final Map.Entry<K, V> oldEntry = array[nullKeyLocation];]