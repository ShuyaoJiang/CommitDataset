[+++ b/guava-testlib/src/com/google/common/testing/FakeTicker.java, +import static com.google.common.base.Preconditions.checkArgument;, +, + * The ticker can be configured so that the time is incremented whenever {@link #read} is called:, + * see {@link #setAutoIncrementStep}., + * <p>, +  private volatile long autoIncrementStepNanos;, +  /**, +   * Sets the increment applied to the ticker whenever it is queried., +   *, +   * <p>The default behavior is to auto increment by zero. i.e: The ticker is left unchanged when, +   * queried., +   */, +  public FakeTicker setAutoIncrementStep(long autoIncrementStep, TimeUnit timeUnit) {, +    checkArgument(autoIncrementStep >= 0, "May not auto-increment by a negative amount");, +    this.autoIncrementStepNanos = timeUnit.toNanos(autoIncrementStep);, +    return this;, +  }, +, +    return nanos.getAndAdd(autoIncrementStepNanos);, +++ b/guava-testlib/src/com/google/common/testing/FakeTicker.java, +import static com.google.common.base.Preconditions.checkArgument;, +, + * The ticker can be configured so that the time is incremented whenever {@link #read} is called:, + * see {@link #setAutoIncrementStep}., + * <p>, +  private volatile long autoIncrementStepNanos;, +  /**, +   * Sets the increment applied to the ticker whenever it is queried., +   *, +   * <p>The default behavior is to auto increment by zero. i.e: The ticker is left unchanged when, +   * queried., +   */, +  public FakeTicker setAutoIncrementStep(long autoIncrementStep, TimeUnit timeUnit) {, +    checkArgument(autoIncrementStep >= 0, "May not auto-increment by a negative amount");, +    this.autoIncrementStepNanos = timeUnit.toNanos(autoIncrementStep);, +    return this;, +  }, +, +    return nanos.getAndAdd(autoIncrementStepNanos);, +++ b/guava-testlib/test/com/google/common/testing/FakeTickerTest.java, +import java.util.EnumSet;, +  @GwtIncompatible("NullPointerTester"), +  public void testNullPointerExceptions() {, +    NullPointerTester tester = new NullPointerTester();, +    tester.testAllPublicInstanceMethods(new FakeTicker());, +  }, +, +  public void testAutoIncrementStep_returnsSameInstance() {, +    FakeTicker ticker = new FakeTicker();, +    assertSame(ticker, ticker.setAutoIncrementStep(10, TimeUnit.NANOSECONDS));, +  }, +, +  public void testAutoIncrementStep_nanos() {, +    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(10, TimeUnit.NANOSECONDS);, +    assertEquals(0, ticker.read());, +    assertEquals(10, ticker.read());, +    assertEquals(20, ticker.read());, +  }, +, +  public void testAutoIncrementStep_millis() {, +    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(1, TimeUnit.MILLISECONDS);, +    assertEquals(0, ticker.read());, +    assertEquals(1000000, ticker.read());, +    assertEquals(2000000, ticker.read());, +  }, +, +  public void testAutoIncrementStep_seconds() {, +    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(3, TimeUnit.SECONDS);, +    assertEquals(0, ticker.read());, +    assertEquals(3000000000L, ticker.read());, +    assertEquals(6000000000L, ticker.read());, +  }, +, +  public void testAutoIncrementStep_resetToZero() {, +    FakeTicker ticker = new FakeTicker().setAutoIncrementStep(10, TimeUnit.NANOSECONDS);, +    assertEquals(0, ticker.read());, +    assertEquals(10, ticker.read());, +    assertEquals(20, ticker.read());, +, +    for (TimeUnit timeUnit : EnumSet.allOf(TimeUnit.class)) {, +      ticker.setAutoIncrementStep(0, timeUnit);, +      assertEquals(, +          "Expected no auto-increment when setting autoIncrementStep to 0 " + timeUnit,, +          30, ticker.read());, +    }, +  }, +, +  public void testAutoIncrement_negative() {, +    FakeTicker ticker = new FakeTicker();, +    try {, +      ticker.setAutoIncrementStep(-1, TimeUnit.NANOSECONDS);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +    runConcurrentTest(numberOfThreads,, +        new Callable<Void>() {, +          @Override]