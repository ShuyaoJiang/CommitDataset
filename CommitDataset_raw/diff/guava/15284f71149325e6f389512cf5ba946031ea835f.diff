[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * If you think you would use this method, let us know. You might also also, +   * look into the Fork-Join framework:, +   * http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * If you think you would use this method, let us know. You might also also, +   * look into the Fork-Join framework:, +   * http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +   * If you think you would use this method, let us know. You might also also, +   * look into the Fork-Join framework:, +   * http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/FuturesGetCheckedBenchmark.java, +/*, + * Copyright (C) 2015 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.collect.Lists.newArrayList;, +import static com.google.common.util.concurrent.Futures.immediateFailedFuture;, +import static com.google.common.util.concurrent.Futures.immediateFuture;, +import static com.google.common.util.concurrent.FuturesGetChecked.checkExceptionClassValidity;, +import static com.google.common.util.concurrent.FuturesGetChecked.classValueValidator;, +import static com.google.common.util.concurrent.FuturesGetChecked.getChecked;, +import static com.google.common.util.concurrent.FuturesGetChecked.isCheckedException;, +import static com.google.common.util.concurrent.FuturesGetChecked.weakSetValidator;, +, +import com.google.caliper.BeforeExperiment;, +import com.google.caliper.Benchmark;, +import com.google.caliper.Param;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidator;, +, +import java.io.IOException;, +import java.net.URISyntaxException;, +import java.security.GeneralSecurityException;, +import java.security.acl.NotOwnerException;, +import java.util.List;, +import java.util.TooManyListenersException;, +import java.util.concurrent.BrokenBarrierException;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeoutException;, +import java.util.prefs.BackingStoreException;, +import java.util.prefs.InvalidPreferencesFormatException;, +import java.util.zip.DataFormatException;, +, +import javax.security.auth.RefreshFailedException;, +, +/**, + * Microbenchmark for {@link Futures#getChecked}., + */, +public class FuturesGetCheckedBenchmark {, +  private enum Validator {, +    NON_CACHING_WITH_CONSTRUCTOR_CHECK(nonCachingWithConstructorCheckValidator()),, +    NON_CACHING_WITHOUT_CONSTRUCTOR_CHECK(nonCachingWithoutConstructorCheckValidator()),, +    WEAK_SET(weakSetValidator()),, +    CLASS_VALUE(classValueValidator());, +, +    final GetCheckedTypeValidator validator;, +, +    private Validator(GetCheckedTypeValidator validator) {, +      this.validator = validator;, +    }, +  }, +, +  private enum Result {, +    SUCCESS(immediateFuture(new Object())),, +    FAILURE(immediateFailedFuture(new Exception()));, +, +    final Future<Object> future;, +, +    private Result(Future<Object> result) {, +      this.future = result;, +    }, +  }, +, +  private enum ExceptionType {, +    CHECKED(IOException.class),, +    UNCHECKED(RuntimeException.class);, +, +    final Class<? extends Exception> exceptionType;, +, +    private ExceptionType(Class<? extends Exception> exceptionType) {]