[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.asBasicGraph;, +import static com.google.common.graph.Graphs.transpose;, +import com.google.common.graph.BasicGraph.Presence;, +  private static final String E23 = "2-3";, +  private static final String E31 = "3-1";, +  private static final String E34 = "3-4";, +  @SuppressWarnings("deprecation"), +  public void asBasicGraph_basicGraphOptimized() {, +    BasicGraph<Integer> basicGraph = BasicGraphBuilder.undirected().build();, +    assertThat(asBasicGraph(basicGraph)).isSameAs(basicGraph);, +    assertThat(asBasicGraph((Graph<Integer, Presence>) basicGraph)).isSameAs(basicGraph);, +  }, +, +  @Test, +  public void asBasicGraph_graph() {, +    MutableGraph<Integer, String> graph = GraphBuilder.directed().build();, +    graph.putEdgeValue(N1, N2, E12);, +    graph.putEdgeValue(N1, N3, E13);, +, +    BasicGraph<Integer> basicGraph = asBasicGraph(graph);, +    assertThat(basicGraph.edgeValue(N1, N2)).isEqualTo(Presence.EDGE_EXISTS);, +    assertThat(basicGraph.edgeValue(N1, N3)).isEqualTo(Presence.EDGE_EXISTS);, +    assertThat(basicGraph.edgeValueOrDefault(N2, N3, null)).isEqualTo(null);, +    assertThat(basicGraph.edgeValueOrDefault(N2, N3, Presence.EDGE_EXISTS)), +        .isEqualTo(Presence.EDGE_EXISTS);, +    try {, +      basicGraph.edgeValue(N2, N3);, +      fail("Should have rejected edgeValue() on non-existent edge");, +    } catch (IllegalArgumentException expected) {, +    }, +    AbstractGraphTest.validateGraph(basicGraph);, +, +    graph.putEdgeValue(N2, N3, E23);, +    // View should be updated., +    assertThat(basicGraph.edgeValue(N2, N3)).isEqualTo(Presence.EDGE_EXISTS);, +    AbstractGraphTest.validateGraph(basicGraph);, +  }, +, +  @Test, +  public void transpose_undirectedBasicGraph() {, +    MutableBasicGraph<Integer> undirectedGraph = BasicGraphBuilder.undirected().build();, +    undirectedGraph.putEdge(N1, N2);, +, +    assertThat(transpose(undirectedGraph)).isEqualTo(undirectedGraph);, +  }, +, +  @Test, +  public void transpose_directedBasicGraph() {, +    MutableBasicGraph<Integer> directedGraph =, +        BasicGraphBuilder.directed().allowsSelfLoops(true).build();, +    directedGraph.putEdge(N3, N1);, +    directedGraph.putEdge(N1, N2);, +    directedGraph.putEdge(N1, N1);, +    directedGraph.putEdge(N3, N4);, +, +    MutableBasicGraph<Integer> expectedTranspose =, +        BasicGraphBuilder.directed().allowsSelfLoops(true).build();, +    expectedTranspose.putEdge(N1, N3);, +    expectedTranspose.putEdge(N2, N1);, +    expectedTranspose.putEdge(N1, N1);, +    expectedTranspose.putEdge(N4, N3);, +, +    BasicGraph<Integer> transpose = Graphs.transpose(directedGraph);, +    assertThat(transpose).isEqualTo(expectedTranspose);, +    assertThat(transpose(transpose)).isEqualTo(directedGraph);, +    AbstractGraphTest.validateGraph(transpose);, +, +    assertThat(transpose.successors(N1)).doesNotContain(N2);, +    directedGraph.putEdge(N2, N1);, +    // View should be updated., +    assertThat(transpose.successors(N1)).contains(N2);, +    AbstractGraphTest.validateGraph(transpose);, +  }, +, +  @Test, +  public void transpose_undirectedGraph() {, +    MutableGraph<Integer, String> undirectedGraph = GraphBuilder.undirected().build();, +    undirectedGraph.putEdgeValue(N1, N2, E12);, +, +    assertThat(transpose(undirectedGraph)).isEqualTo(undirectedGraph);, +  }, +, +  @Test, +  public void transpose_directedGraph() {, +    MutableGraph<Integer, String> directedGraph =, +        GraphBuilder.directed().allowsSelfLoops(true).build();, +    directedGraph.putEdgeValue(N3, N1, E31);, +    directedGraph.putEdgeValue(N1, N2, E12);, +    directedGraph.putEdgeValue(N1, N1, E11);, +    directedGraph.putEdgeValue(N3, N4, E34);, +, +    MutableGraph<Integer, String> expectedTranspose =, +        GraphBuilder.directed().allowsSelfLoops(true).build();, +    expectedTranspose.putEdgeValue(N1, N3, E31);, +    expectedTranspose.putEdgeValue(N2, N1, E12);, +    expectedTranspose.putEdgeValue(N1, N1, E11);, +    expectedTranspose.putEdgeValue(N4, N3, E34);, +, +    Graph<Integer, String> transpose = Graphs.transpose(directedGraph);]