[+++ b/src/com/google/common/util/concurrent/Futures.java, +   * @deprecated Use {@code Futures.transform}., +  @Deprecated, +    return transform(future, function);, +   * @deprecated Use {@code Futures.transform}., +  @Deprecated, +    return transform(future, function, exec);, +   * @deprecated Use {@code Futures.transform}., +  @Deprecated, +    return transform(future, function);, +  }, +, +  /**, +   * Returns a new {@code ListenableFuture} whose result is the product of, +   * applying the given {@code Function} to the result of the given {@code, +   * Future}. Example:, +   *, +   * <pre>   {@code, +   *   ListenableFuture<QueryResult> queryFuture = ...;, +   *   Function<QueryResult, List<Row>> rowsFunction =, +   *       new Function<QueryResult, List<Row>>() {, +   *         public List<Row> apply(QueryResult queryResult) {, +   *           return queryResult.getRows();, +   *         }, +   *       };, +   *   ListenableFuture<List<Row>> rowsFuture =, +   *       transform(queryFuture, rowsFunction);, +   * }</pre>, +   *, +   * <p>Successful cancellation of the input future will cause the returned, +   * future to be cancelled.  Cancelling the returned future will succeed if it, +   * is currently running.  In this case, an attempt will be made to cancel the, +   * input future, however there is no guarantee of success., +   *, +   * <p>An example use of this method is to convert a serializable object, +   * returned from an RPC into a POJO., +   *, +   * @param future The future to compose, +   * @param function A Function to compose the results of the provided future, +   *     to the results of the returned future.  This will be run in the thread, +   *     that notifies input it is complete., +   * @return A future that holds result of the composition., +   * @since 9 (in version 1 as {@code compose}), +   */, +  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> future,, +      final Function<? super I, ? extends O> function) {, +    return transform(future, function, MoreExecutors.sameThreadExecutor());, +  }, +, +  /**, +   * Returns a new {@code ListenableFuture} whose result is the product of, +   * applying the given {@code Function} to the result of the given {@code, +   * Future}. Example:, +   *, +   * <pre>   {@code, +   *   ListenableFuture<QueryResult> queryFuture = ...;, +   *   Function<QueryResult, List<Row>> rowsFunction =, +   *       new Function<QueryResult, List<Row>>() {, +   *         public List<Row> apply(QueryResult queryResult) {, +   *           return queryResult.getRows();, +   *         }, +   *       };, +   *   ListenableFuture<List<Row>> rowsFuture =, +   *       transform(queryFuture, rowsFunction, executor);, +   * }</pre>, +   *, +   * <p>Successful cancellation of the input future will cause the returned, +   * future to be cancelled.  Cancelling the returned future will succeed if it, +   * is currently running.  In this case, an attempt will be made to cancel the, +   * input future, however there is no guarantee of success., +   *, +   * <p>An example use of this method is to convert a serializable object, +   * returned from an RPC into a POJO., +   *, +   * <p>This version allows an arbitrary executor to be passed in for running, +   * the chained Function. When using {@link MoreExecutors#sameThreadExecutor},, +   * the thread chained Function executes in will be whichever thread set the, +   * result of the input Future, which may be the network thread in the case of, +   * RPC-based Futures., +   *, +   * @param future The future to compose, +   * @param function A Function to compose the results of the provided future, +   *     to the results of the returned future., +   * @param exec Executor to run the function in., +   * @return A future that holds result of the composition., +   * @since 9 (in version 2 as {@code compose}), +   */, +  public static <I, O> ListenableFuture<O> transform(ListenableFuture<I> future,, +      final Function<? super I, ? extends O> function, Executor exec) {, +    checkNotNull(function);, +    Function<I, ListenableFuture<O>> wrapperFunction, +        = new Function<I, ListenableFuture<O>>() {, +            @Override public ListenableFuture<O> apply(I input) {, +              O output = function.apply(input);, +              return immediateFuture(output);, +            }, +        };, +    return chain(future, wrapperFunction, exec);, +  }, +]