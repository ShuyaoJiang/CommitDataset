[+++ b/guava-gwt/test/com/google/common/collect/ImmutableSetTest_gwt.java, +public void testCopyOf_collection_enumSet() throws Exception {, +  com.google.common.collect.ImmutableSetTest testCase = new com.google.common.collect.ImmutableSetTest();, +  testCase.testCopyOf_collection_enumSet();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSetTest_gwt.java, +public void testCopyOf_collection_enumSet() throws Exception {, +  com.google.common.collect.ImmutableSetTest testCase = new com.google.common.collect.ImmutableSetTest();, +  testCase.testCopyOf_collection_enumSet();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedSetTest_gwt.java, +public void testCopyOf_collection_enumSet() throws Exception {, +  com.google.common.collect.ImmutableSortedSetTest testCase = new com.google.common.collect.ImmutableSortedSetTest();, +  testCase.testCopyOf_collection_enumSet();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSetTest_gwt.java, +public void testCopyOf_collection_enumSet() throws Exception {, +  com.google.common.collect.ImmutableSetTest testCase = new com.google.common.collect.ImmutableSetTest();, +  testCase.testCopyOf_collection_enumSet();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedSetTest_gwt.java, +public void testCopyOf_collection_enumSet() throws Exception {, +  com.google.common.collect.ImmutableSortedSetTest testCase = new com.google.common.collect.ImmutableSortedSetTest();, +  testCase.testCopyOf_collection_enumSet();, +}, +, +++ b/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java, +import java.util.EnumSet;, +  protected abstract <E extends Comparable<? super E>> Set<E> of();, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4, E e5);, +  @SuppressWarnings("unchecked"), +  protected abstract <E extends Comparable<? super E>> Set<E> of(, +      E e1, E e2, E e3, E e4, E e5, E e6, E... rest);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(E[] elements);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(, +      Collection<? extends E> elements);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(, +      Iterable<? extends E> elements);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(, +      Iterator<? extends E> elements);, +  enum TestEnum { A, B, C, D }, +, +  public void testCopyOf_collection_enumSet() {, +    Collection<TestEnum> c = EnumSet.of(TestEnum.A, TestEnum.B, TestEnum.D);, +    Set<TestEnum> set = copyOf(c);, +    assertEquals(3, set.size());, +    assertEquals(c, set);, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSetTest_gwt.java, +public void testCopyOf_collection_enumSet() throws Exception {, +  com.google.common.collect.ImmutableSetTest testCase = new com.google.common.collect.ImmutableSetTest();, +  testCase.testCopyOf_collection_enumSet();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedSetTest_gwt.java, +public void testCopyOf_collection_enumSet() throws Exception {, +  com.google.common.collect.ImmutableSortedSetTest testCase = new com.google.common.collect.ImmutableSortedSetTest();, +  testCase.testCopyOf_collection_enumSet();, +}, +, +++ b/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java, +import java.util.EnumSet;, +  protected abstract <E extends Comparable<? super E>> Set<E> of();, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4);, +  protected abstract <E extends Comparable<? super E>> Set<E> of(E e1, E e2, E e3, E e4, E e5);, +  @SuppressWarnings("unchecked"), +  protected abstract <E extends Comparable<? super E>> Set<E> of(, +      E e1, E e2, E e3, E e4, E e5, E e6, E... rest);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(E[] elements);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(, +      Collection<? extends E> elements);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(, +      Iterable<? extends E> elements);, +  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(, +      Iterator<? extends E> elements);, +  enum TestEnum { A, B, C, D }, +, +  public void testCopyOf_collection_enumSet() {, +    Collection<TestEnum> c = EnumSet.of(TestEnum.A, TestEnum.B, TestEnum.D);, +    Set<TestEnum> set = copyOf(c);, +    assertEquals(3, set.size());, +    assertEquals(c, set);, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +  @Override protected <E extends Comparable<? super E>> Set<E> of() {, +  @Override protected <E extends Comparable<? super E>> Set<E> of(E e) {, +  @Override protected <E extends Comparable<? super E>> Set<E> of(E e1, E e2) {]