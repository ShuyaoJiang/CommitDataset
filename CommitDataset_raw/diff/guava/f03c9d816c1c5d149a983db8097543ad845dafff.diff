[+++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +import com.google.common.base.Supplier;, +      Executor executor = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {, +        @Override public String get() {, +          return serviceName();, +        }, +      });, +      executor.execute(new Runnable() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +import com.google.common.base.Supplier;, +      Executor executor = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {, +        @Override public String get() {, +          return serviceName();, +        }, +      });, +      executor.execute(new Runnable() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +import com.google.common.base.Supplier;, +  /* Thread names will look like {@code "MyService STARTING"}. */, +  private final Supplier<String> threadNameSupplier = new Supplier<String>() {, +    @Override public String get() {, +      return serviceName() + " " + state();, +    }, +  };, +, +      MoreExecutors.renamingDecorator(executor(), threadNameSupplier), +          .execute(new Runnable() {, +      MoreExecutors.renamingDecorator(executor(), threadNameSupplier), +          .execute(new Runnable() {, +      @Override public void execute(Runnable command) {, +        MoreExecutors.newThread(threadNameSupplier.get(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java, +import com.google.common.base.Supplier;, +      Executor executor = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {, +        @Override public String get() {, +          return serviceName();, +        }, +      });, +      executor.execute(new Runnable() {, +++ b/guava/src/com/google/common/util/concurrent/AbstractIdleService.java, +import com.google.common.base.Supplier;, +  /* Thread names will look like {@code "MyService STARTING"}. */, +  private final Supplier<String> threadNameSupplier = new Supplier<String>() {, +    @Override public String get() {, +      return serviceName() + " " + state();, +    }, +  };, +, +      MoreExecutors.renamingDecorator(executor(), threadNameSupplier), +          .execute(new Runnable() {, +      MoreExecutors.renamingDecorator(executor(), threadNameSupplier), +          .execute(new Runnable() {, +      @Override public void execute(Runnable command) {, +        MoreExecutors.newThread(threadNameSupplier.get(), command).start();, +++ b/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java, +import com.google.common.base.Supplier;, +      executorService = MoreExecutors.renamingDecorator(executor(), new Supplier<String>() {, +        @Override public String get() {, +          return serviceName() + " " + state();, +        }, +      });]