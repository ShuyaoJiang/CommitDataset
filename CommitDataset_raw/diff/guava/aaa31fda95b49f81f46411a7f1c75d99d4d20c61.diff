[+++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +    Supplier<Object> nullSupplier = Suppliers.ofInstance(null);, +    Optional<Object> absentOptional = Optional.absent();, +    try {, +      absentOptional.or(nullSupplier);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +    Supplier<Object> nullSupplier = Suppliers.ofInstance(null);, +    Optional<Object> absentOptional = Optional.absent();, +    try {, +      absentOptional.or(nullSupplier);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +++ b/guava/src/com/google/common/base/Optional.java, +   * Returns the contained instance if it is present; {@code supplier.get()} otherwise. If the, +   * supplier returns {@code null}, a {@link NullPointerException} will be thrown., +   *, +   * @throws NullPointerException if the supplier returns {@code null}, +  public abstract T or(Supplier<? extends T> supplier);, +    @Override public Object or(Supplier<?> supplier) {, +      return checkNotNull(supplier.get(),, +          "use orNull() instead of a Supplier that returns null");]