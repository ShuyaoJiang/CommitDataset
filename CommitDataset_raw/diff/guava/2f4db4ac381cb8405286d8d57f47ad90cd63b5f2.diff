[+++ b/guava/src/com/google/common/collect/ImmutableList.java, +  public ImmutableList<E> subList(int fromIndex, int toIndex) {, +    checkPositionIndexes(fromIndex, toIndex, size());, +    int length = toIndex - fromIndex;, +    switch (length) {, +      case 0:, +        return of();, +      case 1:, +        return of(get(fromIndex));, +      default:, +        return subListUnchecked(fromIndex, toIndex);, +    }, +  }, +, +  /**, +   * Called by the default implementation of {@link #subList} when, +   * {@code toIndex - fromIndex > 1}, after index validation has already been performed., +   */, +  ImmutableList<E> subListUnchecked(int fromIndex, int toIndex) {, +    return new SubList(fromIndex, toIndex - fromIndex);, +  }, +, +  class SubList extends ImmutableList<E> {, +    transient final int offset;, +    transient final int length;, +, +    SubList(int offset, int length) {, +      this.offset = offset;, +      this.length = length;, +    }, +, +    @Override, +    public int size() {, +      return length;, +    }, +, +    @Override, +    public E get(int index) {, +      checkElementIndex(index, length);, +      return ImmutableList.this.get(index + offset);, +    }, +, +    @Override, +    public ImmutableList<E> subList(int fromIndex, int toIndex) {, +      checkPositionIndexes(fromIndex, toIndex, length);, +      return ImmutableList.this.subList(fromIndex + offset, toIndex + offset);, +    }, +, +    @Override, +    boolean isPartialView() {, +      return true;, +    }, +  }, +    private final transient ImmutableList<E> forwardList;, +    private final transient int size;, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +  public ImmutableList<E> subList(int fromIndex, int toIndex) {, +    checkPositionIndexes(fromIndex, toIndex, size());, +    int length = toIndex - fromIndex;, +    switch (length) {, +      case 0:, +        return of();, +      case 1:, +        return of(get(fromIndex));, +      default:, +        return subListUnchecked(fromIndex, toIndex);, +    }, +  }, +, +  /**, +   * Called by the default implementation of {@link #subList} when, +   * {@code toIndex - fromIndex > 1}, after index validation has already been performed., +   */, +  ImmutableList<E> subListUnchecked(int fromIndex, int toIndex) {, +    return new SubList(fromIndex, toIndex - fromIndex);, +  }, +, +  class SubList extends ImmutableList<E> {, +    transient final int offset;, +    transient final int length;, +, +    SubList(int offset, int length) {, +      this.offset = offset;, +      this.length = length;, +    }, +, +    @Override, +    public int size() {, +      return length;, +    }, +, +    @Override, +    public E get(int index) {, +      checkElementIndex(index, length);, +      return ImmutableList.this.get(index + offset);, +    }, +, +    @Override, +    public ImmutableList<E> subList(int fromIndex, int toIndex) {, +      checkPositionIndexes(fromIndex, toIndex, length);]