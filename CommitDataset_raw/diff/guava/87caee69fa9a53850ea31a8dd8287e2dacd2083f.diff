[+++ b/guava-tests/benchmark/com/google/common/io/BaseEncodingBenchmark.java, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.StringReader;, +import java.io.StringWriter;, +  private static final int INPUTS_COUNT = 0x1000;, +  private static final int INPUTS_MASK = 0xFFF;, +, +  private final byte[][] encodingInputs = new byte[INPUTS_COUNT][];, +  private final String[] decodingInputs = new String[INPUTS_COUNT];, +    for (int i = 0; i < encodingInputs.length; i++) {, +      encodingInputs[i] = new byte[n];, +      rng.nextBytes(encodingInputs[i]);, +      decodingInputs[i] = encoding.encoding.encode(encodingInputs[i]);, +      tmp += System.identityHashCode(encoding.encoding.encode(encodingInputs[i & INPUTS_MASK]));, +    }, +    return tmp;, +  }, +, +  @Benchmark public int decode(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      tmp += System.identityHashCode(encoding.encoding.decode(decodingInputs[i & INPUTS_MASK]));, +    }, +    return tmp;, +  }, +, +  @Benchmark public int encodingStream(int reps) throws IOException {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      StringWriter target = new StringWriter(2 * n);, +      OutputStream encodingStream = encoding.encoding.encodingStream(target);, +      encodingStream.write(encodingInputs[i & INPUTS_MASK]);, +      encodingStream.close();, +      tmp += target.getBuffer().length();, +    }, +    return tmp;, +  }, +, +  @Benchmark public int decodingStream(int reps) throws IOException {, +    int tmp = 0;, +    byte[] target = new byte[n];, +    for (int i = 0; i < reps; i++) {, +      StringReader source = new StringReader(decodingInputs[i & INPUTS_MASK]);, +      InputStream decodingStream = encoding.encoding.decodingStream(source);, +      decodingStream.read(target);, +      decodingStream.close();, +      tmp += target[0];]