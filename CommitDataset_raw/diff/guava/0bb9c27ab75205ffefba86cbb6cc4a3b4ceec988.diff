[+++ b/guava/src/com/google/common/collect/ImmutableMapEntry.java, +  /**, +   * Creates an {@code ImmutableMapEntry} array to hold parameterized entries. The, +   * result must never be upcast back to ImmutableMapEntry[] (or Object[], etc.), or, +   * allowed to escape the class., +   */, +  @SuppressWarnings("unchecked") // Safe as long as the javadocs are followed, +  static <K, V> ImmutableMapEntry<K, V>[] createEntryArray(int size) {, +    return new ImmutableMapEntry[size];, +  }, +  , +++ b/guava/src/com/google/common/collect/ImmutableMapEntry.java, +  /**, +   * Creates an {@code ImmutableMapEntry} array to hold parameterized entries. The, +   * result must never be upcast back to ImmutableMapEntry[] (or Object[], etc.), or, +   * allowed to escape the class., +   */, +  @SuppressWarnings("unchecked") // Safe as long as the javadocs are followed, +  static <K, V> ImmutableMapEntry<K, V>[] createEntryArray(int size) {, +    return new ImmutableMapEntry[size];, +  }, +  , +++ b/guava/src/com/google/common/collect/RegularImmutableBiMap.java, +import static com.google.common.collect.ImmutableMapEntry.createEntryArray;, +++ b/guava/src/com/google/common/collect/ImmutableMapEntry.java, +  /**, +   * Creates an {@code ImmutableMapEntry} array to hold parameterized entries. The, +   * result must never be upcast back to ImmutableMapEntry[] (or Object[], etc.), or, +   * allowed to escape the class., +   */, +  @SuppressWarnings("unchecked") // Safe as long as the javadocs are followed, +  static <K, V> ImmutableMapEntry<K, V>[] createEntryArray(int size) {, +    return new ImmutableMapEntry[size];, +  }, +  , +++ b/guava/src/com/google/common/collect/RegularImmutableBiMap.java, +import static com.google.common.collect.ImmutableMapEntry.createEntryArray;, +++ b/guava/src/com/google/common/collect/RegularImmutableMap.java, +import static com.google.common.collect.ImmutableMapEntry.createEntryArray;, +  // TODO(user): consider sharing this code with RegularImmutableBiMap, +  private static void checkNoConflictInBucket(, +      Object key, Entry<?, ?> entry, @Nullable ImmutableMapEntry<?, ?> bucketHead) {, +    // TODO(user): consider sharing this code with RegularImmutableBiMap, +  /*, +   * TODO(user): consider sharing this with RegularImmutableBiMap, though, +   * that entry set knows its hash code in advance., +   */, +]