[+++ b/guava/src/com/google/common/collect/Multiset.java, + * <p>If your values may be zero, negative, or outside the range of an int, you, + * may wish to use {@link com.google.common.util.concurrent.AtomicLongMap}, + * instead. Note, however, that unlike {@code Multiset}, {@code AtomicLongMap}, + * does not automatically remove zeros., + *, +++ b/guava/src/com/google/common/collect/Multiset.java, + * <p>If your values may be zero, negative, or outside the range of an int, you, + * may wish to use {@link com.google.common.util.concurrent.AtomicLongMap}, + * instead. Note, however, that unlike {@code Multiset}, {@code AtomicLongMap}, + * does not automatically remove zeros., + *, +++ b/guava/src/com/google/common/util/concurrent/AtomicLongMap.java, + * <p><b>Note:</b> If your values are always positive and less than 2^31, you may wish to use a, + * {@link com.google.common.collect.Multiset} such as, + * {@link com.google.common.collect.ConcurrentHashMultiset} instead., + *, + * <b>Warning:</b> Unlike {@code Multiset}, entries whose values are zero are not automatically, + * removed from the map. Instead they must be removed manually with {@link #removeAllZeros}.]