[+++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Ints.java, +import javax.annotation.CheckForNull;, +, +, +  /**, +   * Parses the specified string as a signed decimal integer value. The ASCII, +   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the, +   * minus sign., +   *, +   * <p>Unlike {@link Integer#parseInt(String)}, this method returns, +   * {@code null} instead of throwing an exception if parsing fails., +   * Additionally, this method only accepts ASCII digits, and returns, +   * {@code null} if non-ASCII digits are present in the string., +   *, +   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even, +   * under JDK 7, despite the change to {@link Integer#parseInt(String)} for, +   * that version., +   *, +   * @param string the string representation of an integer value, +   * @return the integer value represented by {@code string}, or {@code null} if, +   *     {@code string} has a length of zero or cannot be parsed as an integer, +   *     value, +   * @since 11.0, +   */, +  @Beta, +  @CheckForNull, +  public static Integer tryParse(String string) {, +    return tryParse(string, 10);, +  }, +, +  /**, +   * Parses the specified string as a signed integer value using the specified, +   * radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is, +   * recognized as the minus sign., +   *, +   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns, +   * {@code null} instead of throwing an exception if parsing fails., +   * Additionally, this method only accepts ASCII digits, and returns, +   * {@code null} if non-ASCII digits are present in the string., +   *, +   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even, +   * under JDK 7, despite the change to {@link Integer#parseInt(String, int)}, +   * for that version., +   *, +   * @param string the string representation of an integer value, +   * @param radix the radix to use when parsing, +   * @return the integer value represented by {@code string} using, +   *     {@code radix}, or {@code null} if {@code string} has a length of zero, +   *     or cannot be parsed as an integer value, +   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or, +   *     {@code radix > Character.MAX_RADIX}, +   */, +  @CheckForNull static Integer tryParse(, +      String string, int radix) {, +    if (checkNotNull(string).isEmpty()) {, +      return null;, +    }, +    if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {, +      throw new IllegalArgumentException(, +          "radix must be between MIN_RADIX and MAX_RADIX but was " + radix);, +    }, +    boolean negative = string.charAt(0) == '-';, +    int index = negative ? 1 : 0;, +    if (index == string.length()) {, +      return null;, +    }, +    int digit = digit(string.charAt(index++));, +    if (digit < 0 || digit >= radix) {, +      return null;, +    }, +    int accum = -digit;, +, +    int cap = Integer.MIN_VALUE / radix;, +, +    while (index < string.length()) {, +      digit = digit(string.charAt(index++));, +      if (digit < 0 || digit >= radix || accum < cap) {, +        return null;, +      }, +      accum *= radix;, +      if (accum < Integer.MIN_VALUE + digit) {, +        return null;, +      }, +      accum -= digit;, +    }, +, +    if (negative) {, +      return accum;, +    } else if (accum == Integer.MIN_VALUE) {, +      return null;, +    } else {, +      return -accum;, +    }, +  }, +++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Ints.java, +import javax.annotation.CheckForNull;, +, +, +  /**, +   * Parses the specified string as a signed decimal integer value. The ASCII]