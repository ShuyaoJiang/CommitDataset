[+++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +import com.google.common.collect.MapMaker.RemovalCause;, +  static final class ComputingSegment<K, V> extends Segment<K, V> {, +  private static final class ComputationExceptionReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputedReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputingValueReference<K, V> implements ValueReference<K, V> {, +  static final class ComputingSerializationProxy<K, V> extends AbstractSerializationProxy<K, V> {, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +import com.google.common.collect.MapMaker.RemovalCause;, +  static final class ComputingSegment<K, V> extends Segment<K, V> {, +  private static final class ComputationExceptionReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputedReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputingValueReference<K, V> implements ValueReference<K, V> {, +  static final class ComputingSerializationProxy<K, V> extends AbstractSerializationProxy<K, V> {, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +import com.google.common.collect.MapMaker.RemovalCause;, +import com.google.common.collect.MapMaker.RemovalNotification;, +  final RemovalListener<K, V> removalListener;, +  private static final class QueueHolder {, +  private static final class StrongExpirableEntry<K, V> extends StrongEntry<K, V>, +  private static final class StrongEvictableEntry<K, V>, +  private static final class StrongExpirableEvictableEntry<K, V>, +  private static final class SoftExpirableEntry<K, V>, +  private static final class SoftEvictableEntry<K, V>, +  private static final class SoftExpirableEvictableEntry<K, V>, +  private static final class WeakExpirableEntry<K, V>, +  private static final class WeakEvictableEntry<K, V>, +  private static final class WeakExpirableEvictableEntry<K, V>, +  private static final class WeakValueReference<K, V>, +  private static final class SoftValueReference<K, V>, +  private static final class StrongValueReference<K, V> implements ValueReference<K, V> {, +      removalListener.onRemoval(notification);, +          ? new EvictionQueue<K, V>(), +          ? new ExpirationQueue<K, V>(), +    static final class EvictionQueue<K, V> extends AbstractQueue<ReferenceEntry<K, V>> {, +    static final class ExpirationQueue<K, V> extends AbstractQueue<ReferenceEntry<K, V>> {, +  private static final class SerializationProxy<K, V> extends AbstractSerializationProxy<K, V> {, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +import com.google.common.collect.MapMaker.RemovalCause;, +  static final class ComputingSegment<K, V> extends Segment<K, V> {, +  private static final class ComputationExceptionReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputedReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputingValueReference<K, V> implements ValueReference<K, V> {, +  static final class ComputingSerializationProxy<K, V> extends AbstractSerializationProxy<K, V> {, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +import com.google.common.collect.MapMaker.RemovalCause;, +import com.google.common.collect.MapMaker.RemovalNotification;, +  final RemovalListener<K, V> removalListener;, +  private static final class QueueHolder {, +  private static final class StrongExpirableEntry<K, V> extends StrongEntry<K, V>, +  private static final class StrongEvictableEntry<K, V>, +  private static final class StrongExpirableEvictableEntry<K, V>, +  private static final class SoftExpirableEntry<K, V>, +  private static final class SoftEvictableEntry<K, V>, +  private static final class SoftExpirableEvictableEntry<K, V>, +  private static final class WeakExpirableEntry<K, V>, +  private static final class WeakEvictableEntry<K, V>, +  private static final class WeakExpirableEvictableEntry<K, V>, +  private static final class WeakValueReference<K, V>, +  private static final class SoftValueReference<K, V>, +  private static final class StrongValueReference<K, V> implements ValueReference<K, V> {, +      removalListener.onRemoval(notification);, +          ? new EvictionQueue<K, V>(), +          ? new ExpirationQueue<K, V>(), +    static final class EvictionQueue<K, V> extends AbstractQueue<ReferenceEntry<K, V>> {, +    static final class ExpirationQueue<K, V> extends AbstractQueue<ReferenceEntry<K, V>> {, +  private static final class SerializationProxy<K, V> extends AbstractSerializationProxy<K, V> {, +++ b/guava/src/com/google/common/collect/GenericMapMaker.java, +import com.google.common.collect.MapMaker.RemovalNotification;, +    public void onRemoval(RemovalNotification<Object, Object> notification) {}, +  @SuppressWarnings("unchecked") // safe covariant cast, +  <K extends K0, V extends V0> RemovalListener<K, V> getRemovalListener() {, +    return (RemovalListener<K, V>) Objects.firstNonNull(removalListener, NullListener.INSTANCE);, +++ b/guava/src/com/google/common/collect/ComputingConcurrentHashMap.java, +import com.google.common.collect.MapMaker.RemovalCause;, +  static final class ComputingSegment<K, V> extends Segment<K, V> {, +  private static final class ComputationExceptionReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputedReference<K, V> implements ValueReference<K, V> {, +  private static final class ComputingValueReference<K, V> implements ValueReference<K, V> {, +  static final class ComputingSerializationProxy<K, V> extends AbstractSerializationProxy<K, V> {, +++ b/guava/src/com/google/common/collect/CustomConcurrentHashMap.java, +import com.google.common.collect.MapMaker.RemovalCause;, +import com.google.common.collect.MapMaker.RemovalNotification;, +  final RemovalListener<K, V> removalListener;, +  private static final class QueueHolder {, +  private static final class StrongExpirableEntry<K, V> extends StrongEntry<K, V>, +  private static final class StrongEvictableEntry<K, V>, +  private static final class StrongExpirableEvictableEntry<K, V>, +  private static final class SoftExpirableEntry<K, V>, +  private static final class SoftEvictableEntry<K, V>, +  private static final class SoftExpirableEvictableEntry<K, V>, +  private static final class WeakExpirableEntry<K, V>, +  private static final class WeakEvictableEntry<K, V>, +  private static final class WeakExpirableEvictableEntry<K, V>, +  private static final class WeakValueReference<K, V>, +  private static final class SoftValueReference<K, V>, +  private static final class StrongValueReference<K, V> implements ValueReference<K, V> {, +      removalListener.onRemoval(notification);, +          ? new EvictionQueue<K, V>(), +          ? new ExpirationQueue<K, V>()]