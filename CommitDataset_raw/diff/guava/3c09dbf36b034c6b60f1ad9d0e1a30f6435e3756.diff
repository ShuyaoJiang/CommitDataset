[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  public void testNoOpServiceStartAsyncAndAwaitStopAsyncAndAwait() throws Exception {, +    NoOpService service = new NoOpService();, +, +    service.startAsync().awaitRunning();, +    assertEquals(State.RUNNING, service.state());, +, +    service.stopAsync().awaitTerminated();, +    assertEquals(State.TERMINATED, service.state());, +  }, +, +      service.startAsync().awaitRunning();, +      service.stopAsync().awaitTerminated();, +  public void testAwaitTerminated() throws Exception {, +    final NoOpService service = new NoOpService();, +    Thread waiter = new Thread() {, +      @Override public void run() {, +        service.awaitTerminated();, +      }, +    };, +    waiter.start();, +    service.startAsync().awaitRunning();, +    assertEquals(State.RUNNING, service.state());, +    service.stopAsync();, +    waiter.join(100);  // ensure that the await in the other thread is triggered, +    assertFalse(waiter.isAlive());, +  }, +, +  public void testAwaitTerminated_FailedService() throws Exception {, +    final ManualSwitchedService service = new ManualSwitchedService();, +    final AtomicReference<Throwable> exception = Atomics.newReference();, +    Thread waiter = new Thread() {, +      @Override public void run() {, +        try {, +          service.awaitTerminated();, +          fail("Expected an IllegalStateException");, +        } catch (Throwable t) {, +          exception.set(t);, +        }, +      }, +    };, +    waiter.start();, +    service.start();, +    service.notifyStarted();, +    assertEquals(State.RUNNING, service.state());, +    service.notifyFailed(EXCEPTION);, +    assertEquals(State.FAILED, service.state());, +    waiter.join(100);, +    assertFalse(waiter.isAlive());, +    assertTrue(exception.get() instanceof IllegalStateException);, +    assertEquals(EXCEPTION, exception.get().getCause());, +  }, +, +    service.stopAsync().awaitTerminated();, +    service.startAsync();, +    assertEquals("1", service.failureCause().getMessage());, +      service.awaitRunning();, +    } catch (IllegalStateException e) {, +      service.startAsync().awaitRunning();, +    } catch (IllegalStateException e) {, +      assertEquals(EXCEPTION, service.failureCause());, +    service.startAsync().awaitRunning();, +      service.stopAsync().awaitTerminated();, +    } catch (IllegalStateException e) {, +      assertEquals(EXCEPTION, service.failureCause());, +  public void testFailingServiceStopAndWait_runFailing() throws Exception {, +    service.startAsync();, +      service.awaitRunning();, +    } catch (IllegalStateException e) {, +      assertEquals(EXCEPTION, service.failureCause());, +      assertEquals(EXCEPTION, e.getCause());, +      service.startAsync().awaitRunning();, +    } catch (IllegalStateException e) {, +      assertEquals(service.exception, service.failureCause());, +    service.startAsync().awaitRunning();, +      service.stopAsync().awaitTerminated();, +    } catch (IllegalStateException e) {, +      assertEquals(service.exception, service.failureCause());, +    service.startAsync();, +      service.awaitTerminated();, +    } catch (IllegalStateException e) {, +      assertEquals(service.exception, service.failureCause());, +      assertEquals(service.exception, e.getCause());, +    service.startAsync().awaitRunning();, +      service.stopAsync().awaitTerminated();, +    } catch (IllegalStateException e) {, +    service.startAsync().awaitRunning();, +        service.stopAsync().awaitTerminated();, +      service.startAsync().awaitRunning();, +      assertEquals(failure, service.failureCause());, +    service.startAsync().awaitRunning();, +    service.stopAsync().awaitTerminated();, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +import java.util.concurrent.atomic.AtomicReference;, +  public void testNoOpServiceStartAsyncAndAwaitStopAsyncAndAwait() throws Exception {, +    NoOpService service = new NoOpService();, +, +    service.startAsync().awaitRunning();, +    assertEquals(State.RUNNING, service.state());]