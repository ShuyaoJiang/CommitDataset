[+++ b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java, +import java.util.regex.Pattern;, +    assertThat(input), +        .matches(, +            Pattern.compile(, +                Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));, +      assertThat(badInput), +          .doesNotMatch(, +              Pattern.compile(, +                  Doubles.FLOATING_POINT_PATTERN.pattern(),, +                  Doubles.FLOATING_POINT_PATTERN.flags()));, +++ b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java, +import java.util.regex.Pattern;, +    assertThat(input), +        .matches(, +            Pattern.compile(, +                Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));, +      assertThat(badInput), +          .doesNotMatch(, +              Pattern.compile(, +                  Doubles.FLOATING_POINT_PATTERN.pattern(),, +                  Doubles.FLOATING_POINT_PATTERN.flags()));, +++ b/android/guava/src/com/google/common/base/CommonMatcher.java, +  public abstract boolean matches();, +  public abstract boolean find();, +  public abstract boolean find(int index);, +  public abstract String replaceAll(String replacement);, +  public abstract int end();, +  public abstract int start();, +++ b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java, +import java.util.regex.Pattern;, +    assertThat(input), +        .matches(, +            Pattern.compile(, +                Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));, +      assertThat(badInput), +          .doesNotMatch(, +              Pattern.compile(, +                  Doubles.FLOATING_POINT_PATTERN.pattern(),, +                  Doubles.FLOATING_POINT_PATTERN.flags()));, +++ b/android/guava/src/com/google/common/base/CommonMatcher.java, +  public abstract boolean matches();, +  public abstract boolean find();, +  public abstract boolean find(int index);, +  public abstract String replaceAll(String replacement);, +  public abstract int end();, +  public abstract int start();, +++ b/android/guava/src/com/google/common/base/CommonPattern.java, +  public abstract CommonMatcher matcher(CharSequence t);, +  public abstract String pattern();, +  public abstract int flags();, +  // Re-declare this as abstract to force subclasses to override., +  static CommonPattern compile(String pattern) {, +    return Platform.compilePattern(pattern);, +  }, +++ b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java, +import java.util.regex.Pattern;, +    assertThat(input), +        .matches(, +            Pattern.compile(, +                Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));, +      assertThat(badInput), +          .doesNotMatch(, +              Pattern.compile(, +                  Doubles.FLOATING_POINT_PATTERN.pattern(),, +                  Doubles.FLOATING_POINT_PATTERN.flags()));, +++ b/android/guava/src/com/google/common/base/CommonMatcher.java, +  public abstract boolean matches();, +  public abstract boolean find();, +  public abstract boolean find(int index);, +  public abstract String replaceAll(String replacement);, +  public abstract int end();, +  public abstract int start();, +++ b/android/guava/src/com/google/common/base/CommonPattern.java, +  public abstract CommonMatcher matcher(CharSequence t);, +  public abstract String pattern();, +  public abstract int flags();, +  // Re-declare this as abstract to force subclasses to override., +  static CommonPattern compile(String pattern) {, +    return Platform.compilePattern(pattern);, +  }, +++ b/android/guava/src/com/google/common/base/JdkPattern.java, +  public CommonMatcher matcher(CharSequence t) {, +  public String pattern() {, +  public int flags() {, +    public boolean matches() {, +    public boolean find() {, +    public boolean find(int index) {, +    public String replaceAll(String replacement) {, +    public int end() {, +    public int start() {, +++ b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java, +import java.util.regex.Pattern;, +    assertThat(input), +        .matches(, +            Pattern.compile(, +                Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));, +      assertThat(badInput), +          .doesNotMatch(, +              Pattern.compile(]