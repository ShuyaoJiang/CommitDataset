[+++ b/guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/CheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/CheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/ForwardingCheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +   * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, +   *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, +   *     rethrow exceptions from one thread in another thread, producing misleading stack traces., +   *     Additionally, it has a surprising policy about which exceptions to map and which to leave, +   *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, +   *     use, possibly specializing them to the particular exception type they use. We recommend, +   *     that most people use {@code ListenableFuture} and perform any exception wrapping, +   *     themselves. This class is scheduled for removal from Guava in Feburary 2018., +  @Deprecated, +++ b/guava/src/com/google/common/util/concurrent/AbstractCheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/CheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +++ b/guava/src/com/google/common/util/concurrent/ForwardingCheckedFuture.java, + * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the, + *     primary goal of {@link ListenableFuture}. {@code CheckedFuture} also encourages users to, + *     rethrow exceptions from one thread in another thread, producing misleading stack traces., + *     Additionally, it has a surprising policy about which exceptions to map and which to leave, + *     untouched. Guava users who want a {@code CheckedFuture} can fork the classes for their own, + *     use, possibly specializing them to the particular exception type they use. We recommend that, + *     most people use {@code ListenableFuture} and perform any exception wrapping themselves. This, + *     class is scheduled for removal from Guava in Feburary 2018., +@Deprecated, +   * @deprecated {@link CheckedFuture} cannot properly support the chained operations that are the]