[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, +/*, + * Copyright (C) 2006 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.base.Preconditions;, +, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Executor;, +, +/**, + * Static utility methods pertaining to the {@link Future} interface., + *, + * <p>Many of these methods use the {@link ListenableFuture} API; consult the, + * Guava User Guide article on <a href=, + * "http://code.google.com/p/guava-libraries/wiki/ListenableFutureExplained">, + * {@code ListenableFuture}</a>., + *, + * @author Kevin Bourrillion, + * @author Nishant Thakkar, + * @author Sven Mawson, + * @since 1.0, + */, +@Beta, +@GwtCompatible(emulated = true), +public final class Futures {, +  private Futures() {}, +, +  /**, +   * Registers separate success and failure callbacks to be run when the {@code, +   * Future}'s computation is {@linkplain java.util.concurrent.Future#isDone(), +   * complete} or, if the computation is already complete, immediately., +   *, +   * <p>The callback is run in {@code executor}., +   * There is no guaranteed ordering of execution of callbacks, but any, +   * callback added through this method is guaranteed to be called once the, +   * computation is complete., +   *, +   * Example: <pre> {@code, +   * ListenableFuture<QueryResult> future = ...;, +   * Executor e = ..., +   * addCallback(future,, +   *     new FutureCallback<QueryResult> {, +   *       public void onSuccess(QueryResult result) {, +   *         storeInCache(result);, +   *       }, +   *       public void onFailure(Throwable t) {, +   *         reportError(t);, +   *       }, +   *     }, e);}</pre>, +   *, +   * <p>When the callback is fast and lightweight, consider {@linkplain, +   * #addCallback(ListenableFuture, FutureCallback) omitting the executor} or, +   * explicitly specifying {@code directExecutor}. However, be aware of the, +   * caveats documented in the link above., +   *, +   * <p>For a more general interface to attach a completion listener to a, +   * {@code Future}, see {@link ListenableFuture#addListener addListener}., +   *, +   * @param future The future attach the callback to., +   * @param callback The callback to invoke when {@code future} is completed., +   * @param executor The executor to run {@code callback} when the future, +   *    completes., +   * @since 10.0, +   */, +  public static <V> void addCallback(final ListenableFuture<V> future,, +      final FutureCallback<? super V> callback, Executor executor) {, +    Preconditions.checkNotNull(callback);, +    Runnable callbackListener = new Runnable() {, +      @Override, +      public void run() {, +        final V value;, +        try {, +          // TODO(user): (Before Guava release), validate that this, +          // is the thing for IE., +          value = getUninterruptibly(future);, +        } catch (ExecutionException e) {, +          callback.onFailure(e.getCause());, +          return;, +        } catch (RuntimeException e) {, +          callback.onFailure(e);, +          return;]