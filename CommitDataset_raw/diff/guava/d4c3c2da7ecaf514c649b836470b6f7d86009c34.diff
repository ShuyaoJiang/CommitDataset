[+++ b/guava/src/com/google/common/collect/Multiset.java, +import com.google.errorprone.annotations.CompatibleWith;, +   * Returns the number of occurrences of an element in this multiset (the <i>count</i> of the, +   * element). Note that for an {@link Object#equals}-based multiset, this gives the same result as, +   * {@link Collections#frequency} (which would presumably perform more poorly)., +   * <p><b>Note:</b> the utility method {@link Iterables#frequency} generalizes this operation; it, +   * correctly delegates to this method when dealing with a multiset, but it can also accept any, +   * other iterable type., +   * @return the number of occurrences of the element in this multiset; possibly zero but never, +   *     negative, +  int count(@Nullable @CompatibleWith("E") Object element);, +   * Removes a number of occurrences of the specified element from this multiset. If the multiset, +   * contains fewer than this number of occurrences to begin with, all occurrences will be removed., +   * Note that if {@code occurrences == 1}, this is functionally equivalent to the call {@code, +   * remove(element)}., +   * @param occurrences the number of occurrences of the element to remove. May be zero, in which, +   *     case no change will be made., +  int remove(@Nullable @CompatibleWith("E") Object element, int occurrences);, +++ b/guava/src/com/google/common/collect/Multiset.java, +import com.google.errorprone.annotations.CompatibleWith;, +   * Returns the number of occurrences of an element in this multiset (the <i>count</i> of the, +   * element). Note that for an {@link Object#equals}-based multiset, this gives the same result as, +   * {@link Collections#frequency} (which would presumably perform more poorly)., +   * <p><b>Note:</b> the utility method {@link Iterables#frequency} generalizes this operation; it, +   * correctly delegates to this method when dealing with a multiset, but it can also accept any, +   * other iterable type., +   * @return the number of occurrences of the element in this multiset; possibly zero but never, +   *     negative, +  int count(@Nullable @CompatibleWith("E") Object element);, +   * Removes a number of occurrences of the specified element from this multiset. If the multiset, +   * contains fewer than this number of occurrences to begin with, all occurrences will be removed., +   * Note that if {@code occurrences == 1}, this is functionally equivalent to the call {@code, +   * remove(element)}., +   * @param occurrences the number of occurrences of the element to remove. May be zero, in which, +   *     case no change will be made., +  int remove(@Nullable @CompatibleWith("E") Object element, int occurrences);, +++ b/guava/src/com/google/common/collect/Table.java, +import com.google.errorprone.annotations.CompatibleWith;, +   * Returns {@code true} if the table contains a mapping with the specified row and column keys., +  boolean contains(, +      @Nullable @CompatibleWith("R") Object rowKey,, +      @Nullable @CompatibleWith("C") Object columnKey);, +   * Returns {@code true} if the table contains a mapping with the specified row key., +  boolean containsRow(@Nullable @CompatibleWith("R") Object rowKey);, +   * Returns {@code true} if the table contains a mapping with the specified column., +  boolean containsColumn(@Nullable @CompatibleWith("C") Object columnKey);, +   * Returns {@code true} if the table contains a mapping with the specified value., +  boolean containsValue(@Nullable @CompatibleWith("V") Object value);, +   * Returns the value corresponding to the given row and column keys, or {@code null} if no such, +   * mapping exists., +  V get(, +      @Nullable @CompatibleWith("R") Object rowKey,, +      @Nullable @CompatibleWith("C") Object columnKey);, +   * @return the value previously associated with the keys, or {@code null} if no such value existed, +  V remove(, +      @Nullable @CompatibleWith("R") Object rowKey,, +      @Nullable @CompatibleWith("C") Object columnKey);]