[+++ b/guava-tests/benchmark/com/google/common/base/JoinerBenchmark.java, +/*, + * Copyright (C) 2012 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import com.google.caliper.Param;, +import com.google.caliper.Runner;, +import com.google.caliper.SimpleBenchmark;, +, +import java.util.Arrays;, +import java.util.Iterator;, +, +/**, + * Benchmarks {@link Joiner} against some common implementations of delimiter-based, + * string joining., + *, + * @author Adomas Paltanavicius, + */, +public class JoinerBenchmark extends SimpleBenchmark {, +, +  private static final String DELIMITER_STRING = ",";, +  private static final char DELIMITER_CHARACTER = ',';, +, +  private static final Joiner JOINER_ON_STRING = Joiner.on(DELIMITER_STRING);, +  private static final Joiner JOINER_ON_CHARACTER = Joiner.on(DELIMITER_CHARACTER);, +, +  @Param({"3", "30", "300"}) int count;, +  @Param({"0", "1", "16", "32", "100"}) int componentLength;, +, +  private Iterable<String> components;, +, +  @Override, +  protected void setUp() {, +    String component = Strings.repeat("a", componentLength);, +    String[] raw = new String[count];, +    Arrays.fill(raw, component);, +    components = Arrays.asList(raw);, +  }, +, +  /**, +   * {@link Joiner} with a string delimiter., +   */, +  public int timeJoinerWithStringDelimiter(int reps) {, +    int dummy = 0;, +    for (int i = 0; i < reps; i++) {, +      dummy ^= JOINER_ON_STRING.join(components).length();, +    }, +    return dummy;, +  }, +, +  /**, +   * {@link Joiner} with a character delimiter., +   */, +  public int timeJoinerWithCharacterDelimiter(int reps) {, +    int dummy = 0;, +    for (int i = 0; i < reps; i++) {, +      dummy ^= JOINER_ON_CHARACTER.join(components).length();, +    }, +    return dummy;, +  }, +, +  /**, +   * Mimics what the {@link Joiner} class does internally when no extra options like, +   * ignoring {@code null} values are used., +   */, +  public int timeJoinerInlined(int reps) {, +    int dummy = 0;, +    for (int i = 0; i < reps; i++) {, +      StringBuilder sb = new StringBuilder();, +      Iterator<String> iterator = components.iterator();, +      if (iterator.hasNext()) {, +        sb.append(iterator.next().toString());, +        while (iterator.hasNext()) {, +          sb.append(DELIMITER_STRING);, +          sb.append(iterator.next());, +        }, +      }, +      dummy ^= sb.toString().length();, +    }, +    return dummy;, +  }, +, +  /**, +   * Only appends delimiter if the accumulated string is non-empty., +   * Note: this isn't a candidate implementation for Joiner since it fails on leading, +   * empty components.]