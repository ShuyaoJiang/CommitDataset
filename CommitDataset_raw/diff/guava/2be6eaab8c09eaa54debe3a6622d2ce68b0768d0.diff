[+++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +  public void testGetCausesExpansion() throws ExecutionException {, +    for (int count = 1; count <= 100; count++) {, +      LocalCache<Object, Object> map =, +          makeLocalCache(createCacheBuilder().concurrencyLevel(1).initialCapacity(1));, +      Segment<Object, Object> segment = map.segments[0];, +      assertEquals(1, segment.table.length());, +, +      for (int i = 0; i < count; i++) {, +        Object key = new Object();, +        final Object value = new Object();, +        segment.get(key, key.hashCode(), new CacheLoader<Object, Object>() {, +          @Override, +          public Object load(Object key) {, +            return value;, +          }, +        });, +      }, +      assertEquals(count, segment.count);, +      assertTrue(count <= segment.threshold);, +      assertTrue(count <= (segment.table.length() * 3 / 4));, +      assertTrue(count > (segment.table.length() * 3 / 8));, +    }, +  }, +, +  public void testPutCausesExpansion() {, +    for (int count = 1; count <= 100; count++) {, +      LocalCache<Object, Object> map =, +          makeLocalCache(createCacheBuilder().concurrencyLevel(1).initialCapacity(1));, +      Segment<Object, Object> segment = map.segments[0];, +      assertEquals(1, segment.table.length());, +, +      for (int i = 0; i < count; i++) {, +        Object key = new Object();, +        Object value = new Object();, +        segment.put(key, key.hashCode(), value, true);, +      }, +      assertEquals(count, segment.count);, +      assertTrue(count <= segment.threshold);, +      assertTrue(count <= (segment.table.length() * 3 / 4));, +      assertTrue(count > (segment.table.length() * 3 / 8));, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +  public void testGetCausesExpansion() throws ExecutionException {, +    for (int count = 1; count <= 100; count++) {, +      LocalCache<Object, Object> map =, +          makeLocalCache(createCacheBuilder().concurrencyLevel(1).initialCapacity(1));, +      Segment<Object, Object> segment = map.segments[0];, +      assertEquals(1, segment.table.length());, +, +      for (int i = 0; i < count; i++) {, +        Object key = new Object();, +        final Object value = new Object();, +        segment.get(key, key.hashCode(), new CacheLoader<Object, Object>() {, +          @Override, +          public Object load(Object key) {, +            return value;, +          }, +        });, +      }, +      assertEquals(count, segment.count);, +      assertTrue(count <= segment.threshold);, +      assertTrue(count <= (segment.table.length() * 3 / 4));, +      assertTrue(count > (segment.table.length() * 3 / 8));, +    }, +  }, +, +  public void testPutCausesExpansion() {, +    for (int count = 1; count <= 100; count++) {, +      LocalCache<Object, Object> map =, +          makeLocalCache(createCacheBuilder().concurrencyLevel(1).initialCapacity(1));, +      Segment<Object, Object> segment = map.segments[0];, +      assertEquals(1, segment.table.length());, +, +      for (int i = 0; i < count; i++) {, +        Object key = new Object();, +        Object value = new Object();, +        segment.put(key, key.hashCode(), value, true);, +      }, +      assertEquals(count, segment.count);, +      assertTrue(count <= segment.threshold);, +      assertTrue(count <= (segment.table.length() * 3 / 4));, +      assertTrue(count > (segment.table.length() * 3 / 8));, +    }, +  }, +, +++ b/guava/src/com/google/common/cache/LocalCache.java, +        if (newCount > this.threshold) { // ensure capacity, +          expand();, +          newCount = this.count + 1;, +        }, +]