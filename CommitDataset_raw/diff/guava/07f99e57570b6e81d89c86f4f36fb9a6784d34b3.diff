[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +import static java.util.concurrent.TimeUnit.MICROSECONDS;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +import com.google.common.util.concurrent.RateLimiter.SleepingStopwatch;, +   * The stopwatch gathers events and presents them as strings., +   * U1.0 means the (U)ser caused the stopwatch to sleep for a second., +  private final FakeStopwatch stopwatch = new FakeStopwatch();, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    RateLimiter limiter = RateLimiter.create(5.0, 5, SECONDS);, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    stopwatch.sleepMillis(200);    // U0.20, we are ready for the next request..., +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    stopwatch.sleepMillis(200);                     // U0.20, we are ready for the next request..., +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    stopwatch.sleepMillis(1000); // max capacity reached, +    stopwatch.sleepMillis(1000); // this makes no difference, +    RateLimiter limiter = RateLimiter.create(stopwatch, 2.0, 4000, MILLISECONDS);, +    stopwatch.sleepMillis(500); // #2: to repay for the last acquire, +    stopwatch.sleepMillis(4000); // #3: becomes cold again, +    stopwatch.sleepMillis(500); // #5: to repay for the last acquire, +    stopwatch.sleepMillis(2000); // #6: didn't get cold! It would take another 2 seconds to go cold, +    RateLimiter limiter = RateLimiter.create(stopwatch, 2.0, 4000, MILLISECONDS);, +    stopwatch.sleepMillis(4500); // #2: back to cold state (warmup period + repay last acquire), +    stopwatch.sleepMillis(4250); // #6, back to cold state (warmup period + repay last acquire), +    RateLimiter limiter = RateLimiter.createWithCapacity(stopwatch, 1.0, 10, SECONDS);, +    stopwatch.sleepMillis(10000); // reach full capacity, +    stopwatch.sleepMillis(3000); // fill up 3 permits, +    RateLimiter rateLimiter = RateLimiter.create(stopwatch, 1.0);, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(0, SECONDS));, +    assertFalse(limiter.tryAcquire(0, SECONDS));, +    assertFalse(limiter.tryAcquire(0, SECONDS));, +    stopwatch.sleepMillis(100);, +    assertFalse(limiter.tryAcquire(0, SECONDS));, +    RateLimiter rateLimiter = RateLimiter.create(stopwatch, 1.0);, +    RateLimiter limiter = RateLimiter.create(stopwatch, Double.POSITIVE_INFINITY);, +        stopwatch, Double.POSITIVE_INFINITY, 10, SECONDS);, +    RateLimiter limiter = RateLimiter.create(stopwatch, 1.0);, +      stopwatch.sleepMillis(rate * 1000);, +            stopwatch, qps, warmupMillis, MILLISECONDS);, +        .setDefault(SleepingStopwatch.class, stopwatch), +        .setDefault(int.class, 1);, +    tester.testInstanceMethods(RateLimiter.create(stopwatch, 5.0), Visibility.PACKAGE);, +    long startTime = stopwatch.instant;, +    return NANOSECONDS.toMillis(stopwatch.instant - startTime);, +    assertEquals(Arrays.toString(events), stopwatch.readEventsAndClear());, +  private static class FakeStopwatch extends SleepingStopwatch {, +    public long readMicros() {, +      return NANOSECONDS.toMicros(instant);, +      sleepMicros("U", MILLISECONDS.toMicros(millis));, +      instant += MICROSECONDS.toNanos(micros);, +++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +import static java.util.concurrent.TimeUnit.MICROSECONDS;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +, +import com.google.common.util.concurrent.RateLimiter.SleepingStopwatch;, +   * The stopwatch gathers events and presents them as strings., +   * U1.0 means the (U)ser caused the stopwatch to sleep for a second., +  private final FakeStopwatch stopwatch = new FakeStopwatch();, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    RateLimiter limiter = RateLimiter.create(5.0, 5, SECONDS);, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    stopwatch.sleepMillis(200);    // U0.20, we are ready for the next request..., +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    stopwatch.sleepMillis(200);                     // U0.20, we are ready for the next request..., +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    stopwatch.sleepMillis(1000); // max capacity reached, +    stopwatch.sleepMillis(1000); // this makes no difference, +    RateLimiter limiter = RateLimiter.create(stopwatch, 2.0, 4000, MILLISECONDS);, +    stopwatch.sleepMillis(500); // #2: to repay for the last acquire, +    stopwatch.sleepMillis(4000); // #3: becomes cold again, +    stopwatch.sleepMillis(500); // #5: to repay for the last acquire, +    stopwatch.sleepMillis(2000); // #6: didn't get cold! It would take another 2 seconds to go cold, +    RateLimiter limiter = RateLimiter.create(stopwatch, 2.0, 4000, MILLISECONDS);, +    stopwatch.sleepMillis(4500); // #2: back to cold state (warmup period + repay last acquire), +    stopwatch.sleepMillis(4250); // #6, back to cold state (warmup period + repay last acquire), +    RateLimiter limiter = RateLimiter.createWithCapacity(stopwatch, 1.0, 10, SECONDS);, +    stopwatch.sleepMillis(10000); // reach full capacity, +    stopwatch.sleepMillis(3000); // fill up 3 permits, +    RateLimiter rateLimiter = RateLimiter.create(stopwatch, 1.0);, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0);, +    assertTrue(limiter.tryAcquire(0, SECONDS));, +    assertFalse(limiter.tryAcquire(0, SECONDS));, +    assertFalse(limiter.tryAcquire(0, SECONDS));, +    stopwatch.sleepMillis(100);, +    assertFalse(limiter.tryAcquire(0, SECONDS));, +    RateLimiter rateLimiter = RateLimiter.create(stopwatch, 1.0);, +    RateLimiter limiter = RateLimiter.create(stopwatch, Double.POSITIVE_INFINITY);, +        stopwatch, Double.POSITIVE_INFINITY, 10, SECONDS);, +    RateLimiter limiter = RateLimiter.create(stopwatch, 1.0);, +      stopwatch.sleepMillis(rate * 1000);, +            stopwatch, qps, warmupMillis, MILLISECONDS);, +        .setDefault(SleepingStopwatch.class, stopwatch), +        .setDefault(int.class, 1);, +    tester.testInstanceMethods(RateLimiter.create(stopwatch, 5.0), Visibility.PACKAGE);]