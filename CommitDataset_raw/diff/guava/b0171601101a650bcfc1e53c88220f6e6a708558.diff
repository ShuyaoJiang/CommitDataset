[+++ b/guava-gwt/test/com/google/common/base/ConverterTest_gwt.java, +public void testFrom() throws Exception {, +  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();, +  testCase.testFrom();, +}, +, +public void testSerialization_from() throws Exception {, +  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();, +  testCase.testSerialization_from();, +}, +, +++ b/guava-gwt/test/com/google/common/base/ConverterTest_gwt.java, +public void testFrom() throws Exception {, +  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();, +  testCase.testFrom();, +}, +, +public void testSerialization_from() throws Exception {, +  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();, +  testCase.testSerialization_from();, +}, +, +++ b/guava-tests/test/com/google/common/base/ConverterTest.java, +import static com.google.common.base.Functions.toStringFunction;, +, +  public void testFrom() {, +    Function<String, Integer> forward = new Function<String, Integer>() {, +      @Override public Integer apply(String input) {, +        return Integer.parseInt(input);, +      }, +    };, +    Function<Object, String> backward = toStringFunction();, +, +    Converter<String, Number> converter = Converter.<String, Number>from(forward, backward);, +, +    assertNull(converter.convert(null));, +    assertNull(converter.reverse().convert(null));, +, +    assertEquals((Integer) 5, converter.convert("5"));, +    assertEquals("5", converter.reverse().convert(5));, +  }, +, +, +  public void testSerialization_from() {, +    Converter<String, String> dumb = Converter.from(toStringFunction(), toStringFunction());, +    SerializableTester.reserializeAndAssert(dumb);, +  }, +++ b/guava-gwt/test/com/google/common/base/ConverterTest_gwt.java, +public void testFrom() throws Exception {, +  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();, +  testCase.testFrom();, +}, +, +public void testSerialization_from() throws Exception {, +  com.google.common.base.ConverterTest testCase = new com.google.common.base.ConverterTest();, +  testCase.testSerialization_from();, +}, +, +++ b/guava-tests/test/com/google/common/base/ConverterTest.java, +import static com.google.common.base.Functions.toStringFunction;, +, +  public void testFrom() {, +    Function<String, Integer> forward = new Function<String, Integer>() {, +      @Override public Integer apply(String input) {, +        return Integer.parseInt(input);, +      }, +    };, +    Function<Object, String> backward = toStringFunction();, +, +    Converter<String, Number> converter = Converter.<String, Number>from(forward, backward);, +, +    assertNull(converter.convert(null));, +    assertNull(converter.reverse().convert(null));, +, +    assertEquals((Integer) 5, converter.convert("5"));, +    assertEquals("5", converter.reverse().convert(5));, +  }, +, +, +  public void testSerialization_from() {, +    Converter<String, String> dumb = Converter.from(toStringFunction(), toStringFunction());, +    SerializableTester.reserializeAndAssert(dumb);, +  }, +++ b/guava/src/com/google/common/base/Converter.java, +   * Returns a converter based on <i>existing</i> forward and backward functions. Note that it is, +   * unnecessary to create <i>new</i> classes implementing {@code Function} just to pass them in, +   * here. Instead, simply subclass {@code Converter} and implement its {@link #doForward} and, +   * {@link #doBackward} methods directly., +   *, +   * <p>These functions will never be passed {@code null} and must not under any circumstances, +   * return {@code null}. If a value cannot be converted, the function should throw an unchecked, +   * exception (typically, but not necessarily, {@link IllegalArgumentException})., +   *, +   * <p>The returned converter is serializable if both provided functions are., +   *, +   * @since 17.0, +   */, +  public static <A, B> Converter<A, B> from(, +      Function<? super A, ? extends B> forwardFunction,, +      Function<? super B, ? extends A> backwardFunction) {]