[+++ b/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java, +  , +  @Benchmark int isPrime(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      int j = i & ARRAY_MASK;, +      if (IntMath.isPrime(positive[j])) {, +        tmp++;, +      }, +    }, +    return tmp;, +  }, +++ b/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java, +  , +  @Benchmark int isPrime(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      int j = i & ARRAY_MASK;, +      if (IntMath.isPrime(positive[j])) {, +        tmp++;, +      }, +    }, +    return tmp;, +  }, +++ b/guava-tests/benchmark/com/google/common/math/LongMathBenchmark.java, +  , +  @Benchmark int isPrime(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      int j = i & ARRAY_MASK;, +      if (LongMath.isPrime(positive[j])) {, +        tmp++;, +      }, +    }, +    return tmp;, +  }, +++ b/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java, +  , +  @Benchmark int isPrime(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      int j = i & ARRAY_MASK;, +      if (IntMath.isPrime(positive[j])) {, +        tmp++;, +      }, +    }, +    return tmp;, +  }, +++ b/guava-tests/benchmark/com/google/common/math/LongMathBenchmark.java, +  , +  @Benchmark int isPrime(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      int j = i & ARRAY_MASK;, +      if (LongMath.isPrime(positive[j])) {, +        tmp++;, +      }, +    }, +    return tmp;, +  }, +++ b/guava-tests/test/com/google/common/math/IntMathTest.java, +import java.util.Random;, +  @GwtIncompatible // isPrime is GWT-incompatible, +  public void testIsPrime() {, +    // Defer correctness tests to Long.isPrime, +, +    // Check the first 100,000 integers, +    for (int i = 0; i < 100000; i++) {, +      assertEquals(LongMath.isPrime(i), IntMath.isPrime(i));, +    }, +, +    // Then check 1000 deterministic pseudo-random int values., +    Random rand = new Random(1);, +    for (int i = 0; i < 1000; i++) {, +      int n = rand.nextInt(Integer.MAX_VALUE);, +      assertEquals(LongMath.isPrime(n), IntMath.isPrime(n));, +    }, +  }, +, +++ b/guava-tests/benchmark/com/google/common/math/IntMathBenchmark.java, +  , +  @Benchmark int isPrime(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      int j = i & ARRAY_MASK;, +      if (IntMath.isPrime(positive[j])) {, +        tmp++;, +      }, +    }, +    return tmp;, +  }, +++ b/guava-tests/benchmark/com/google/common/math/LongMathBenchmark.java, +  , +  @Benchmark int isPrime(int reps) {, +    int tmp = 0;, +    for (int i = 0; i < reps; i++) {, +      int j = i & ARRAY_MASK;, +      if (LongMath.isPrime(positive[j])) {, +        tmp++;, +      }]