[+++ b/guava-tests/test/com/google/common/collect/MultisetsTest.java, +import static com.google.common.testing.SerializableTester.reserializeAndAssert;, +import junit.framework.TestCase;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.collect.testing.DerivedComparable;, +import com.google.common.testing.NullPointerTester;, +, + * @author Louis Wasserman, +  public void testHighestCountFirst() {, +    Multiset<String> multiset = HashMultiset.create(, +        Arrays.asList("a", "a", "a", "b", "c", "c"));, +    ImmutableMultiset<String> sortedMultiset = , +        Multisets.copyHighestCountFirst(multiset);, +, +    ASSERT.that(sortedMultiset.entrySet()).hasContentsInOrder(, +        Multisets.immutableEntry("a", 3), Multisets.immutableEntry("c", 2),, +        Multisets.immutableEntry("b", 1));, +, +    ASSERT.that(sortedMultiset).hasContentsInOrder(, +        "a",, +        "a",, +        "a",, +        "c",, +        "c",, +        "b");, +    , +    ASSERT.that(Multisets.copyHighestCountFirst(ImmutableMultiset.of())).isEmpty();, +  }, +  , +++ b/guava-tests/test/com/google/common/collect/MultisetsTest.java, +import static com.google.common.testing.SerializableTester.reserializeAndAssert;, +import junit.framework.TestCase;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.collect.testing.DerivedComparable;, +import com.google.common.testing.NullPointerTester;, +, + * @author Louis Wasserman, +  public void testHighestCountFirst() {, +    Multiset<String> multiset = HashMultiset.create(, +        Arrays.asList("a", "a", "a", "b", "c", "c"));, +    ImmutableMultiset<String> sortedMultiset = , +        Multisets.copyHighestCountFirst(multiset);, +, +    ASSERT.that(sortedMultiset.entrySet()).hasContentsInOrder(, +        Multisets.immutableEntry("a", 3), Multisets.immutableEntry("c", 2),, +        Multisets.immutableEntry("b", 1));, +, +    ASSERT.that(sortedMultiset).hasContentsInOrder(, +        "a",, +        "a",, +        "a",, +        "c",, +        "c",, +        "b");, +    , +    ASSERT.that(Multisets.copyHighestCountFirst(ImmutableMultiset.of())).isEmpty();, +  }, +  , +++ b/guava/src/com/google/common/collect/ImmutableMultiset.java, +import com.google.common.collect.Multiset.Entry;, +    return copyFromEntries(multiset.entrySet());, +  }, +, +  static <E, E2 extends E> ImmutableMultiset<E> copyFromEntries(, +      Collection<Entry<E2>> entries) {, +    for (Entry<E2> entry : entries) {, +    return new RegularImmutableMultiset<E>(builder.build(), Ints.saturatedCast(size));, +++ b/guava-tests/test/com/google/common/collect/MultisetsTest.java, +import static com.google.common.testing.SerializableTester.reserializeAndAssert;, +import junit.framework.TestCase;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.collect.testing.DerivedComparable;, +import com.google.common.testing.NullPointerTester;, +, + * @author Louis Wasserman, +  public void testHighestCountFirst() {, +    Multiset<String> multiset = HashMultiset.create(, +        Arrays.asList("a", "a", "a", "b", "c", "c"));, +    ImmutableMultiset<String> sortedMultiset = , +        Multisets.copyHighestCountFirst(multiset);, +, +    ASSERT.that(sortedMultiset.entrySet()).hasContentsInOrder(, +        Multisets.immutableEntry("a", 3), Multisets.immutableEntry("c", 2),, +        Multisets.immutableEntry("b", 1));, +, +    ASSERT.that(sortedMultiset).hasContentsInOrder(, +        "a",, +        "a",, +        "a",, +        "c",, +        "c",, +        "b");, +    , +    ASSERT.that(Multisets.copyHighestCountFirst(ImmutableMultiset.of())).isEmpty();]