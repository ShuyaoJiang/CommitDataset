[+++ b/android/guava/src/com/google/common/graph/Traverser.java, +/*, + * Copyright (C) 2017 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import com.google.common.annotations.Beta;, +, +/**, + * Provides methods for traversing a graph., + *, + * @author Jens Nyman, + * @param <N> Node parameter type, + * @since 24.0, + */, +@Beta, +public abstract class Traverser<N> {, +, +  /**, +   * Creates a new traverser for the given general {@code graph}., +   *, +   * <p>If {@code graph} is known to be tree-shaped, consider using {@link, +   * #forTree(SuccessorsFunction)} instead., +   *, +   * <p><b>Performance notes</b>, +   *, +   * <ul>, +   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from, +   *       the start node), assuming that the node objects have <i>O(1)</i> {@code equals()} and, +   *       {@code hashCode()} implementations., +   *   <li>While traversing, the traverser will use <i>O(n)</i> space (where <i>n</i> is the number, +   *       of nodes reachable from the start node)., +   * </ul>, +   *, +   * @param graph {@link SuccessorsFunction} representing a general graph that may have cycles., +   */, +  public static <N> Traverser<N> forGraph(SuccessorsFunction<N> graph) {, +    // TODO(b/27898002): Implement, +    throw new UnsupportedOperationException("Not yet implemented");, +  }, +, +  /**, +   * Creates a new traverser for a directed acyclic graph that has at most one path from the start, +   * node to any node reachable from the start node, such as a tree., +   *, +   * <p>Providing graphs that don't conform to the above description may lead to:, +   *, +   * <ul>, +   *   <li>Traversal not terminating (if the graph has cycles), +   *   <li>Nodes being visited multiple times (if multiple paths exist from the start node to any, +   *       node reachable from it), +   * </ul>, +   *, +   * In these cases, use {@link #forGraph(SuccessorsFunction)} instead., +   *, +   * <p><b>Performance notes</b>, +   *, +   * <ul>, +   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from, +   *       the start node)., +   *   <li>While traversing, the traverser will use <i>O(1)</i> space., +   * </ul>, +   *, +   * <p><b>Examples</b>, +   *, +   * <p>This is a valid input graph (all edges are directed facing downwards):, +   *, +   * <pre>{@code, +   *    a     b      c, +   *   / \   / \     |, +   *  /   \ /   \    |, +   * d     e     f   g, +   *       |, +   *       |, +   *       h, +   * }</pre>, +   *, +   * <p>This is <b>not</b> a valid input graph (all edges are directed facing downwards):, +   *, +   * <pre>{@code, +   *    a     b, +   *   / \   / \, +   *  /   \ /   \, +   * c     d     e, +   *        \   /, +   *         \ /, +   *          f]