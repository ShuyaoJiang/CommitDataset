[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/Utf8Test.java, +/*, + * Copyright (C) 2013 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.base;, +, +import com.google.common.annotations.GwtCompatible;, +, +import junit.framework.TestCase;, +, +/**, + * Unit tests for {@link Utf8}., + *, + * @author Jon Perlow, + * @author Martin Buchholz, + * @author Clément Roux, + */, +@GwtCompatible(emulated = true), +public class Utf8Test extends TestCase {, +  public void testUtf8Length_validStrings() {, +    assertEquals(0, Utf8.utf8Length(""));, +    assertEquals(11, Utf8.utf8Length("Hello world"));, +    assertEquals(8, Utf8.utf8Length("Résumé"));, +    assertEquals(461, Utf8.utf8Length("威廉·莎士比亞（William Shakespeare，", +        + "1564年4月26號—1616年4月23號[1]）係隻英國嗰演員、劇作家同詩人，", +        + "有時間佢簡稱莎翁；中國清末民初哈拕翻譯做舌克斯毕、沙斯皮耳、筛斯比耳、", +        + "莎基斯庇尔、索士比尔、夏克思芘尔、希哀苦皮阿、叶斯壁、沙克皮尔、", +        + "狹斯丕爾。[2]莎士比亞編寫過好多作品，佢嗰劇作響西洋文學好有影響，", +        + "哈都拕人翻譯做好多話。"));, +    // A surrogate pair, +    assertEquals(4, Utf8.utf8Length(, +        newString(Character.MIN_HIGH_SURROGATE, Character.MIN_LOW_SURROGATE)));, +  }, +  , +  public void testUtf8Length_invalidStrings() {, +    testUtf8LengthFails(newString(Character.MIN_HIGH_SURROGATE), 0);, +    testUtf8LengthFails("foobar" + newString(Character.MIN_HIGH_SURROGATE), 6);, +    testUtf8LengthFails(newString(Character.MIN_LOW_SURROGATE), 0);, +    testUtf8LengthFails("foobar" + newString(Character.MIN_LOW_SURROGATE), 6);, +    testUtf8LengthFails(, +        newString(, +            Character.MIN_HIGH_SURROGATE,, +            Character.MIN_HIGH_SURROGATE), 0);, +  }, +  , +  private static void testUtf8LengthFails(String invalidString,, +      int invalidCodePointIndex) {, +    try {, +      Utf8.utf8Length(invalidString);, +      fail();, +    } catch (IllegalArgumentException ex) {, +      // Expected, +      String message = ex.getMessage();, +      String expected = "Unpaired surrogate at " + invalidCodePointIndex +, +          " (" + invalidString + ")";, +      assertEquals(expected, message);, +    }, +  }, +  // 128 - [chars 0x0000 to 0x007f], +  private static final long ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS =, +      0x007f - 0x0000 + 1;, +, +  // 128, +  private static final long EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT =, +      ONE_BYTE_ROUNDTRIPPABLE_CHARACTERS;, +, +  // 1920 [chars 0x0080 to 0x07FF], +  private static final long TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS =, +      0x07FF - 0x0080 + 1;, +, +  // 18,304, +  private static final long EXPECTED_TWO_BYTE_ROUNDTRIPPABLE_COUNT =, +      // Both bytes are one byte characters, +      (long) Math.pow(EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT, 2) +, +      // The possible number of two byte characters, +      TWO_BYTE_ROUNDTRIPPABLE_CHARACTERS;, +, +  // 2048, +  private static final long THREE_BYTE_SURROGATES = 2 * 1024;, +, +  // 61,440 [chars 0x0800 to 0xFFFF, minus surrogates], +  private static final long THREE_BYTE_ROUNDTRIPPABLE_CHARACTERS =, +      0xFFFF - 0x0800 + 1 - THREE_BYTE_SURROGATES;, +, +  // 2,650,112, +  private static final long EXPECTED_THREE_BYTE_ROUNDTRIPPABLE_COUNT =, +      // All one byte characters]