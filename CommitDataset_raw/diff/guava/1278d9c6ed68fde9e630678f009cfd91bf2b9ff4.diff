[+++ b/guava-tests/test/com/google/common/util/concurrent/AtomicLongMapTest.java, +// Copyright 2011 Google Inc. All Rights Reserved., +, +package com.google.common.util.concurrent;, +, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.Sets;, +import com.google.common.testing.NullPointerTester;, +import com.google.testing.util.TestUtil;, +, +import junit.framework.TestCase;, +, +import java.util.Map;, +import java.util.Random;, +import java.util.Set;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicLong;, +, +/**, + * Tests for {@link AtomicLongMap}., + *, + * @author schmoe@google.com (mike nonemacher), + */, +public class AtomicLongMapTest extends TestCase {, +  private static final int ITERATIONS = 100;, +  private static final int MAX_ADDEND = 100;, +, +  Random random;, +, +  @Override, +  protected void setUp() {, +    random = new Random(TestUtil.getRandomSeed());, +  }, +, +  public void testNulls() throws Exception {, +    NullPointerTester tester = new NullPointerTester();, +    tester.testAllPublicConstructors(AtomicLongMap.class);, +    tester.testAllPublicStaticMethods(AtomicLongMap.class);, +    AtomicLongMap<Object> map = AtomicLongMap.create();, +    tester.testAllPublicInstanceMethods(map);, +  }, +, +  public void testCreate_map() {, +    Map<String, Long> in = ImmutableMap.of("1", 1L, "2", 2L, "3", 3L);, +    AtomicLongMap<String> map = AtomicLongMap.create(in);, +    assertFalse(map.isEmpty());, +    assertSame(3, map.size());, +    assertTrue(map.containsKey("1"));, +    assertTrue(map.containsKey("2"));, +    assertTrue(map.containsKey("3"));, +    assertEquals(1L, map.get("1"));, +    assertEquals(2L, map.get("2"));, +    assertEquals(3L, map.get("3"));, +  }, +, +  public void testIncrementAndGet() {, +    AtomicLongMap<String> map = AtomicLongMap.create();, +    String key = "key";, +    for (int i = 0; i < ITERATIONS; i++) {, +      long before = map.get(key);, +      long result = map.incrementAndGet(key);, +      long after = map.get(key);, +      assertEquals(before + 1, after);, +      assertEquals(after, result);, +    }, +    assertEquals(1, map.size());, +    assertTrue(!map.isEmpty());, +    assertTrue(map.containsKey(key));, +    assertEquals(ITERATIONS, (int) map.get(key));, +  }, +, +  public void testIncrementAndGet_zero() {, +    AtomicLongMap<String> map = AtomicLongMap.create();, +    String key = "key";, +    assertEquals(0L, map.get(key));, +    assertFalse(map.containsKey(key));, +, +    assertEquals(1L, map.incrementAndGet(key));, +    assertEquals(1L, map.get(key));, +, +    assertEquals(0L, map.decrementAndGet(key));, +    assertEquals(0L, map.get(key));, +    assertTrue(map.containsKey(key));, +, +    assertEquals(1L, map.incrementAndGet(key));, +    assertEquals(1L, map.get(key));, +  }, +, +  public void testGetAndIncrement() {, +    AtomicLongMap<String> map = AtomicLongMap.create();, +    String key = "key";, +    for (int i = 0; i < ITERATIONS; i++) {, +      long before = map.get(key);, +      long result = map.getAndIncrement(key);, +      long after = map.get(key);, +      assertEquals(before + 1, after);, +      assertEquals(before, result);, +    }]