[+++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +import java.util.Collections;, +import java.util.Set;, +, +  public void testAsSet_present() {, +    Set<String> expected = Collections.singleton("a");, +    assertEquals(expected, Optional.of("a").asSet());, +  }, +  , +  public void testAsSet_absent() {, +    assertTrue("Returned set should be empty", Optional.absent().asSet().isEmpty());, +  }, +  , +  public void testAsSet_presentIsImmutable() {, +    Set<String> presentAsSet = Optional.of("a").asSet();, +    try {, +      presentAsSet.add("b");, +      fail();, +    } catch (UnsupportedOperationException expected) {, +    }, +  }, +, +  public void testAsSet_absentIsImmutable() {, +    Set<Object> absentAsSet = Optional.absent().asSet();, +    try {, +      absentAsSet.add("foo");, +      fail();, +    } catch (UnsupportedOperationException expected) {, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +import java.util.Collections;, +import java.util.Set;, +, +  public void testAsSet_present() {, +    Set<String> expected = Collections.singleton("a");, +    assertEquals(expected, Optional.of("a").asSet());, +  }, +  , +  public void testAsSet_absent() {, +    assertTrue("Returned set should be empty", Optional.absent().asSet().isEmpty());, +  }, +  , +  public void testAsSet_presentIsImmutable() {, +    Set<String> presentAsSet = Optional.of("a").asSet();, +    try {, +      presentAsSet.add("b");, +      fail();, +    } catch (UnsupportedOperationException expected) {, +    }, +  }, +, +  public void testAsSet_absentIsImmutable() {, +    Set<Object> absentAsSet = Optional.absent().asSet();, +    try {, +      absentAsSet.add("foo");, +      fail();, +    } catch (UnsupportedOperationException expected) {, +    }, +  }, +, +++ b/guava/src/com/google/common/base/Optional.java, +import java.util.Collections;, +import java.util.Set;, +   * Returns an immutable singleton {@link Set} whose only element is the, +   * contained instance if it is present; an empty immutable {@link Set}, +   * otherwise., +   */, +  public abstract Set<T> asSet(); , +, +  /**, +    @Override public Set<T> asSet() {, +      return Collections.singleton(reference);, +    }, +, +    @Override public Set<Object> asSet() {, +      return Collections.emptySet();, +    }, +]