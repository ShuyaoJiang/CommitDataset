[+++ b/guava-gwt/test/com/google/common/primitives/ImmutableIntArrayTest_gwt.java, +public void testEquals() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testEquals();, +}, +, +++ b/guava-gwt/test/com/google/common/primitives/ImmutableIntArrayTest_gwt.java, +public void testEquals() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testEquals();, +}, +, +++ b/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java, +import static com.google.common.testing.SerializableTester.reserialize;, +import com.google.common.testing.EqualsTester;, +  public void testEquals() {, +    new EqualsTester(), +        .addEqualityGroup(ImmutableIntArray.of()), +        .addEqualityGroup(, +            ImmutableIntArray.of(1, 2),, +            reserialize(ImmutableIntArray.of(1, 2)),, +            ImmutableIntArray.of(0, 1, 2, 3).subArray(1, 3)), +        .testEquals();, +  }, +, +  @GwtIncompatible // SerializableTester, +  public void testSerialization() {, +    assertThat(reserialize(ImmutableIntArray.of())).isSameAs(ImmutableIntArray.of());, +    assertThat(reserialize(ImmutableIntArray.of(0, 1).subArray(1, 1))), +        .isSameAs(ImmutableIntArray.of());, +, +    ImmutableIntArray iia = ImmutableIntArray.of(0, 1, 3, 6).subArray(1, 3);, +    ImmutableIntArray iia2 = reserialize(iia);, +    assertThat(iia2).isEqualTo(iia);, +    assertDoesntActuallyTrim(iia2);, +  }, +, +++ b/guava-gwt/test/com/google/common/primitives/ImmutableIntArrayTest_gwt.java, +public void testEquals() throws Exception {, +  com.google.common.primitives.ImmutableIntArrayTest testCase = new com.google.common.primitives.ImmutableIntArrayTest();, +  testCase.testEquals();, +}, +, +++ b/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java, +import static com.google.common.testing.SerializableTester.reserialize;, +import com.google.common.testing.EqualsTester;, +  public void testEquals() {, +    new EqualsTester(), +        .addEqualityGroup(ImmutableIntArray.of()), +        .addEqualityGroup(, +            ImmutableIntArray.of(1, 2),, +            reserialize(ImmutableIntArray.of(1, 2)),, +            ImmutableIntArray.of(0, 1, 2, 3).subArray(1, 3)), +        .testEquals();, +  }, +, +  @GwtIncompatible // SerializableTester, +  public void testSerialization() {, +    assertThat(reserialize(ImmutableIntArray.of())).isSameAs(ImmutableIntArray.of());, +    assertThat(reserialize(ImmutableIntArray.of(0, 1).subArray(1, 1))), +        .isSameAs(ImmutableIntArray.of());, +, +    ImmutableIntArray iia = ImmutableIntArray.of(0, 1, 3, 6).subArray(1, 3);, +    ImmutableIntArray iia2 = reserialize(iia);, +    assertThat(iia2).isEqualTo(iia);, +    assertDoesntActuallyTrim(iia2);, +  }, +, +++ b/guava/src/com/google/common/primitives/ImmutableIntArray.java, +import java.io.Serializable;, +public final class ImmutableIntArray implements Serializable {, +  /** Returns an immutable array containing the given values, in order. */, +  public static ImmutableIntArray of(int e0, int e1, int e2, int e3) {, +    return new ImmutableIntArray(new int[] {e0, e1, e2, e3});, +  }, +, +  /** Returns an immutable array containing the given values, in order. */, +  public static ImmutableIntArray of(int e0, int e1, int e2, int e3, int e4) {, +    return new ImmutableIntArray(new int[] {e0, e1, e2, e3, e4});, +  }, +, +  /** Returns an immutable array containing the given values, in order. */, +  public static ImmutableIntArray of(int e0, int e1, int e2, int e3, int e4, int e5) {, +    return new ImmutableIntArray(new int[] {e0, e1, e2, e3, e4, e5});, +  }, +, +  // TODO(kevinb): go up to 11?, +  private final transient int start; // it happens that we only serialize instances where this is 0, +, +  Object writeReplace() {, +    return trimmed();, +  }, +, +  Object readResolve() {, +    return isEmpty() ? EMPTY : this;, +  }]