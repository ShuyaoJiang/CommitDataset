[+++ b/guava/src/com/google/common/collect/ArrayTable.java, +import java.util.List;, +    rowKeyToIndex = index(rowList);, +    columnKeyToIndex = index(columnList);, +  private static <E> ImmutableMap<E, Integer> index(List<E> list) {, +    ImmutableMap.Builder<E, Integer> columnBuilder = ImmutableMap.builder();, +    for (int i = 0; i < list.size(); i++) {, +      columnBuilder.put(list.get(i), i);, +    }, +    return columnBuilder.build();, +  }, +, +  private abstract static class ArrayMap<K, V> extends Maps.ImprovedAbstractMap<K, V> {, +    private final ImmutableMap<K, Integer> keyIndex;, +, +    private ArrayMap(ImmutableMap<K, Integer> keyIndex) {, +      this.keyIndex = keyIndex;, +    }, +, +    @Override, +    public Set<K> keySet() {, +      return keyIndex.keySet();, +    }, +, +    K getKey(int index) {, +      return keyIndex.keySet().asList().get(index);, +    }, +, +    abstract String getKeyRole();, +, +    @Nullable abstract V getValue(int index);, +, +    @Nullable abstract V setValue(int index, V newValue);, +, +    @Override, +    public int size() {, +      return keyIndex.size();, +    }, +, +    @Override, +    public boolean isEmpty() {, +      return keyIndex.isEmpty();, +    }, +, +    @Override, +    protected Set<Entry<K, V>> createEntrySet() {, +      return new Maps.EntrySet<K, V>() {, +        @Override, +        Map<K, V> map() {, +          return ArrayMap.this;, +        }, +, +        @Override, +        public Iterator<Entry<K, V>> iterator() {, +          return new AbstractIndexedListIterator<Entry<K, V>>(size()) {, +            @Override, +            protected Entry<K, V> get(final int index) {, +              return new AbstractMapEntry<K, V>(){, +                @Override, +                public K getKey() {, +                  return ArrayMap.this.getKey(index);, +                }, +, +                @Override, +                public V getValue() {, +                  return ArrayMap.this.getValue(index);, +                }, +, +                @Override, +                public V setValue(V value) {, +                  return ArrayMap.this.setValue(index, value);, +                }, +              };, +            }, +          };, +        }, +      };, +    }, +, +    @Override, +    public boolean containsKey(@Nullable Object key) {, +      return keyIndex.containsKey(key);, +    }, +, +    @Override, +    public V get(@Nullable Object key) {, +      Integer index = keyIndex.get(key);, +      if (index == null) {, +        return null;, +      } else {, +        return getValue(index);, +      }, +    }, +, +    @Override, +    public V put(K key, V value) {, +      Integer index = keyIndex.get(key);, +      if (index == null) {, +        throw new IllegalArgumentException(, +            getKeyRole() + " " + key + " not in " + keyIndex.keySet());]