[+++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.testing.MapTestSuiteBuilder;, +import com.google.common.collect.testing.TestStringMapGenerator;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +import com.google.common.collect.testing.features.MapFeature;, +import junit.framework.Test;, +import junit.framework.TestSuite;, +import java.util.Map.Entry;, +import java.util.Set;, +  public static Test suite() {, +    TestSuite suite = new TestSuite();, +    suite.addTestSuite(LocalCacheTest.class);, +    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {, +          @Override public Map<String, String> create(, +              Entry<String, String>[] entries) {, +            LocalCache<String, String> map = makeLocalCache(createCacheBuilder());, +            for (Entry<String, String> entry : entries) {, +              map.put(entry.getKey(), entry.getValue());, +            }, +            return map;, +          }, +, +        }).named("LocalCache with defaults"), +        .withFeatures(CollectionSize.ANY, MapFeature.GENERAL_PURPOSE,, +            CollectionFeature.SUPPORTS_ITERATOR_REMOVE), +        .createTestSuite());, +    return suite;, +  }, +, +  private static <K, V> LocalCache<K, V> makeLocalCache(, +      CacheBuilder<? super K, ? super V> builder) {, +  public void testValues() {, +    LocalCache<Object, Object> map = makeLocalCache(createCacheBuilder());, +    map.put("foo", "bar");, +    map.put("baz", "bar");, +    map.put("quux", "quux");, +    assertFalse(map.values() instanceof Set);, +    assertTrue(map.values().removeAll(ImmutableSet.of("bar")));, +    assertEquals(1, map.size());, +  }, +, +++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.testing.MapTestSuiteBuilder;, +import com.google.common.collect.testing.TestStringMapGenerator;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +import com.google.common.collect.testing.features.MapFeature;, +import junit.framework.Test;, +import junit.framework.TestSuite;, +import java.util.Map.Entry;, +import java.util.Set;, +  public static Test suite() {, +    TestSuite suite = new TestSuite();, +    suite.addTestSuite(LocalCacheTest.class);, +    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {, +          @Override public Map<String, String> create(, +              Entry<String, String>[] entries) {, +            LocalCache<String, String> map = makeLocalCache(createCacheBuilder());, +            for (Entry<String, String> entry : entries) {, +              map.put(entry.getKey(), entry.getValue());, +            }, +            return map;, +          }, +, +        }).named("LocalCache with defaults"), +        .withFeatures(CollectionSize.ANY, MapFeature.GENERAL_PURPOSE,, +            CollectionFeature.SUPPORTS_ITERATOR_REMOVE), +        .createTestSuite());, +    return suite;, +  }, +, +  private static <K, V> LocalCache<K, V> makeLocalCache(, +      CacheBuilder<? super K, ? super V> builder) {, +  public void testValues() {, +    LocalCache<Object, Object> map = makeLocalCache(createCacheBuilder());, +    map.put("foo", "bar");, +    map.put("baz", "bar");, +    map.put("quux", "quux");, +    assertFalse(map.values() instanceof Set);, +    assertTrue(map.values().removeAll(ImmutableSet.of("bar")));, +    assertEquals(1, map.size());, +  }, +, +++ b/guava/src/com/google/common/cache/LocalCache.java, +import java.util.AbstractCollection;, +import java.util.Map.Entry;, +  final class Values extends AbstractCollection<V> {, +    private final ConcurrentMap<?, ?> map;, +      this.map = map;, +    }, +, +    @Override public int size() {, +      return map.size();, +    }, +, +    @Override public boolean isEmpty() {, +      return map.isEmpty();]