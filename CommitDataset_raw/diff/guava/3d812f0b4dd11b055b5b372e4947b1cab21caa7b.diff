[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Iterables;, +import com.google.common.collect.Lists;, +import com.google.common.util.concurrent.Service.Listener;, +import com.google.common.util.concurrent.Service.State;, +, +import java.util.Arrays;, +import java.util.List;, +import javax.annotation.concurrent.GuardedBy;, +, +    RecordingListener listener = new RecordingListener();, +    service.addListener(listener, MoreExecutors.sameThreadExecutor());, +    assertEquals(State.NEW, service.state());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.RUNNING,, +            State.STOPPING,, +            State.TERMINATED),, +        listener.getStateHistory());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    RecordingListener listener = new RecordingListener();, +    service.addListener(listener, MoreExecutors.sameThreadExecutor());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.RUNNING,, +            State.STOPPING,, +            State.TERMINATED),, +        listener.getStateHistory());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +      assertEquals(State.RUNNING, service.state());, +      assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.STARTING, service.state());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.STOPPING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.STARTING, service.state());, +    assertEquals(State.STOPPING, service.state());, +    assertEquals(State.STOPPING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    RecordingListener listener = new RecordingListener();, +    service.addListener(listener, MoreExecutors.sameThreadExecutor());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.RUNNING,, +            State.STOPPING,, +            State.TERMINATED),, +            listener.getStateHistory());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.RUNNING, service.state());, +    assertEquals(State.TERMINATED, service.state());, +    RecordingListener listener = new RecordingListener();, +    service.addListener(listener, MoreExecutors.sameThreadExecutor());, +    Future<State> stopResult = service.stop();, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.TERMINATED, stopResult.get());, +, +    Future<State> startResult = service.start();, +    assertEquals(State.TERMINATED, service.state());, +    assertEquals(State.TERMINATED, startResult.get());, +    assertEquals(State.TERMINATED, Iterables.getOnlyElement(listener.getStateHistory()));, +    RecordingListener listener = new RecordingListener();, +    service.addListener(listener, MoreExecutors.sameThreadExecutor());, +      assertEquals(EXCEPTION, service.failureCause());, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.FAILED),, +        listener.getStateHistory());, +    RecordingListener listener = new RecordingListener();, +    service.addListener(listener, MoreExecutors.sameThreadExecutor());, +      assertEquals(EXCEPTION, service.failureCause());, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.RUNNING,, +            State.STOPPING,, +            State.FAILED),, +        listener.getStateHistory());, +    RecordingListener listener = new RecordingListener();, +    service.addListener(listener, MoreExecutors.sameThreadExecutor());, +      assertEquals(EXCEPTION, service.failureCause());]