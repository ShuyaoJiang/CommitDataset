[+++ b/guava-gwt/test/com/google/common/collect/MapConstraintsTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/MapConstraintsTest_gwt.java, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +++ b/guava-gwt/test/com/google/common/collect/MapConstraintsTest_gwt.java, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +++ b/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +++ b/guava-gwt/test/com/google/common/collect/MapConstraintsTest_gwt.java, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +++ b/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +++ b/guava-tests/test/com/google/common/collect/MapConstraintsTest.java, +@GwtCompatible, +++ b/guava-gwt/test/com/google/common/collect/MapConstraintsTest_gwt.java, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +++ b/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +++ b/guava-tests/test/com/google/common/collect/MapConstraintsTest.java, +@GwtCompatible, +++ b/guava/src/com/google/common/collect/MapConstraint.java, + * A constraint on the keys and values that may be added to a {@code Map} or {@code Multimap}. For, + * example, to prevent a map from including any null keys or values, you could implement a {@link, + * MapConstraint} like this:, + * <pre>{@code, + * }, + * }</pre>, + * <p>In order to be effective, constraints should be deterministic; that is, they should not depend, + * on state that can change (such as external state, random variables, and time) and should only, + * depend on the value of the passed-in key and value. A non-deterministic constraint cannot, + * reliably enforce that all the collection's elements meet the constraint, since the constraint is, + * only enforced when elements are added., + * @deprecated Use {@link Preconditions} for basic checks. In place of constrained maps, we, + *     encourage you to check your preconditions explicitly instead of leaving that work to the map, + *     implementation. For the specific case of rejecting null, consider {@link ImmutableMap}. This, + *     class is scheduled for removal in Guava 20.0., +++ b/guava-gwt/test/com/google/common/collect/MapConstraintsTest_gwt.java, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +++ b/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +++ b/guava-tests/test/com/google/common/collect/MapConstraintsTest.java, +@GwtCompatible, +++ b/guava/src/com/google/common/collect/MapConstraint.java, + * A constraint on the keys and values that may be added to a {@code Map} or {@code Multimap}. For, + * example, to prevent a map from including any null keys or values, you could implement a {@link, + * MapConstraint} like this:, + * <pre>{@code, + * }, + * }</pre>, + * <p>In order to be effective, constraints should be deterministic; that is, they should not depend, + * on state that can change (such as external state, random variables, and time) and should only, + * depend on the value of the passed-in key and value. A non-deterministic constraint cannot, + * reliably enforce that all the collection's elements meet the constraint, since the constraint is, + * only enforced when elements are added., + * @deprecated Use {@link Preconditions} for basic checks. In place of constrained maps, we, + *     encourage you to check your preconditions explicitly instead of leaving that work to the map, + *     implementation. For the specific case of rejecting null, consider {@link ImmutableMap}. This, + *     class is scheduled for removal in Guava 20.0., +++ b/guava/src/com/google/common/collect/MapConstraints.java]