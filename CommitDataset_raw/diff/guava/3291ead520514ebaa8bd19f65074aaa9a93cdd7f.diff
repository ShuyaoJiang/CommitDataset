[+++ b/src/com/google/common/base/Objects.java, +    return new ToStringHelper(simpleName(self.getClass()));, +  }, +, +  /**, +   * Creates an instance of {@link ToStringHelper} in the same manner as, +   * {@link Objects#toStringHelper(Object)}, but using the name of {@code clazz}, +   * instead of using an instance's {@link Object#getClass()}., +   *, +   * @param clazz the {@link Class} of the instance, +   * @since 7 (source compatible since 2), +   */, +  public static ToStringHelper toStringHelper(Class<?> clazz) {, +    return new ToStringHelper(simpleName(clazz));, +  }, +, +  /**, +   * Creates an instance of {@link ToStringHelper} in the same manner as, +   * {@link Objects#toStringHelper(Object)}, but using {@code className} instead, +   * of using an instance's {@link Object#getClass()}., +   *, +   * @param className the name of the instance type, +   * @since 7 (source compatible since 2), +   */, +  public static ToStringHelper toStringHelper(String className) {, +    return new ToStringHelper(className);, +  }, +, +  /**, +   * {@link Class#getSimpleName()} is not GWT compatible yet, so we, +   * provide our own implementation., +   */, +  private static String simpleName(Class<?> clazz) {, +    String name = clazz.getName();, +, +    // we want the name of the inner class all by its lonesome, +    int start = name.lastIndexOf('$');, +, +    // if this isn't an inner class, just find the start of the, +    // top level class name., +    if (start == -1) {, +      start = name.lastIndexOf('.');, +    }, +    return name.substring(start + 1);, +    private final String className;, +    private ToStringHelper(String className) {, +      this.className = Preconditions.checkNotNull(className);, +          .append(className), +++ b/src/com/google/common/base/Objects.java, +    return new ToStringHelper(simpleName(self.getClass()));, +  }, +, +  /**, +   * Creates an instance of {@link ToStringHelper} in the same manner as, +   * {@link Objects#toStringHelper(Object)}, but using the name of {@code clazz}, +   * instead of using an instance's {@link Object#getClass()}., +   *, +   * @param clazz the {@link Class} of the instance, +   * @since 7 (source compatible since 2), +   */, +  public static ToStringHelper toStringHelper(Class<?> clazz) {, +    return new ToStringHelper(simpleName(clazz));, +  }, +, +  /**, +   * Creates an instance of {@link ToStringHelper} in the same manner as, +   * {@link Objects#toStringHelper(Object)}, but using {@code className} instead, +   * of using an instance's {@link Object#getClass()}., +   *, +   * @param className the name of the instance type, +   * @since 7 (source compatible since 2), +   */, +  public static ToStringHelper toStringHelper(String className) {, +    return new ToStringHelper(className);, +  }, +, +  /**, +   * {@link Class#getSimpleName()} is not GWT compatible yet, so we, +   * provide our own implementation., +   */, +  private static String simpleName(Class<?> clazz) {, +    String name = clazz.getName();, +, +    // we want the name of the inner class all by its lonesome, +    int start = name.lastIndexOf('$');, +, +    // if this isn't an inner class, just find the start of the, +    // top level class name., +    if (start == -1) {, +      start = name.lastIndexOf('.');, +    }, +    return name.substring(start + 1);, +    private final String className;, +    private ToStringHelper(String className) {, +      this.className = Preconditions.checkNotNull(className);, +          .append(className), +++ b/src/com/google/common/collect/ImmutableList.java, +  /**, +   * Returns a view of this immutable list in reverse order. For example, {@code, +   * ImmutableList.of(1, 2, 3).reverse()} is equivalent to {@code]