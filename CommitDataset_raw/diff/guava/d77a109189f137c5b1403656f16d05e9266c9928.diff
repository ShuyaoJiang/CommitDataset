[+++ b/guava-testlib/src/com/google/common/util/concurrent/testing/MockFutureListener.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +, +    future.addListener(this, directExecutor());, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/MockFutureListener.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +, +    future.addListener(this, directExecutor());, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java, +import static com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService;, +, +  private final ListeningExecutorService delegate = newDirectExecutorService();, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/MockFutureListener.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +, +    future.addListener(this, directExecutor());, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java, +import static com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService;, +, +  private final ListeningExecutorService delegate = newDirectExecutorService();, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/ExecutionListBenchmark.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +, +      list.add(listener, directExecutor());, +        list.add(listener, directExecutor());, +        list.add(listener, directExecutor());, +          list.add(listener, directExecutor());, +          list.add(listener, directExecutor());, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/MockFutureListener.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +, +    future.addListener(this, directExecutor());, +++ b/guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java, +import static com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService;, +, +  private final ListeningExecutorService delegate = newDirectExecutorService();, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/ExecutionListBenchmark.java, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +, +      list.add(listener, directExecutor());, +        list.add(listener, directExecutor());, +        list.add(listener, directExecutor());, +          list.add(listener, directExecutor());, +          list.add(listener, directExecutor());, +++ b/guava-tests/benchmark/com/google/common/util/concurrent/MoreExecutorsDirectExecutorBenchmark.java, +/*, + * Copyright (C) 2014 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent;, +, +import static com.google.common.util.concurrent.MoreExecutors.directExecutor;, +import static com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService;, +, +import com.google.caliper.AfterExperiment;, +import com.google.caliper.BeforeExperiment;, +import com.google.caliper.Benchmark;, +import com.google.caliper.Param;, +import com.google.caliper.api.Footprint;, +import com.google.caliper.api.VmOptions;, +, +import java.util.HashSet;, +import java.util.Set;, +import java.util.concurrent.Executor;, +import java.util.concurrent.atomic.AtomicInteger;, +, +/**, + * A benchmark comparing the {@link MoreExecutors#newDirectExecutorService()} to, + * {@link MoreExecutors#directExecutor}., + */, +@VmOptions({"-Xms12g", "-Xmx12g", "-d64"}), +public class MoreExecutorsDirectExecutorBenchmark {, +  enum Impl {, +    EXECUTOR_SERVICE {, +      @Override Executor executor() {, +        return newDirectExecutorService();, +      }, +    },, +    EXECUTOR {, +      @Override Executor executor() {, +        return directExecutor();, +      }, +    };, +    abstract Executor executor();, +  }, +, +  @Param Impl impl;, +  Executor executor;]