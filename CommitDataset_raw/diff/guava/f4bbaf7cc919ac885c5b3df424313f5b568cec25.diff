[+++ b/guava-tests/test/com/google/common/math/PairedStatsAccumulatorTest.java, +import static com.google.common.math.StatsTesting.OTHER_MANY_VALUES_COUNT;, +import static com.google.common.math.StatsTesting.createPartitionedFilledPairedStatsAccumulator;, +import java.util.Collections;, +, +  private PairedStatsAccumulator emptyAccumulatorByAddAllEmptyPairedStats;, +  private PairedStatsAccumulator oneValueAccumulatorByAddAllEmptyPairedStats;, +  private PairedStatsAccumulator twoValuesAccumulatorByAddAllPartitionedPairedStats;, +  private PairedStatsAccumulator manyValuesAccumulatorByAddAllPartitionedPairedStats;, +  private PairedStatsAccumulator horizontalValuesAccumulatorByAddAllPartitionedPairedStats;, +  private PairedStatsAccumulator verticalValuesAccumulatorByAddAllPartitionedPairedStats;, +  private PairedStatsAccumulator constantValuesAccumulatorByAddAllPartitionedPairedStats;, +    emptyAccumulatorByAddAllEmptyPairedStats = new PairedStatsAccumulator();, +    emptyAccumulatorByAddAllEmptyPairedStats.addAll(emptyAccumulator.snapshot());, +, +    oneValueAccumulatorByAddAllEmptyPairedStats = new PairedStatsAccumulator();, +    oneValueAccumulatorByAddAllEmptyPairedStats.add(ONE_VALUE, OTHER_ONE_VALUE);, +    oneValueAccumulatorByAddAllEmptyPairedStats.addAll(emptyAccumulator.snapshot());, +, +    twoValuesAccumulatorByAddAllPartitionedPairedStats =, +        createPartitionedFilledPairedStatsAccumulator(TWO_VALUES, OTHER_TWO_VALUES, 1);, +    manyValuesAccumulatorByAddAllPartitionedPairedStats =, +        createPartitionedFilledPairedStatsAccumulator(MANY_VALUES, OTHER_MANY_VALUES, 2);, +    horizontalValuesAccumulator =, +        createFilledPairedStatsAccumulator(, +            MANY_VALUES, Collections.nCopies(MANY_VALUES_COUNT, OTHER_ONE_VALUE));, +    horizontalValuesAccumulatorByAddAllPartitionedPairedStats =, +        createPartitionedFilledPairedStatsAccumulator(, +            MANY_VALUES, Collections.nCopies(MANY_VALUES_COUNT, OTHER_ONE_VALUE), 2);, +    verticalValuesAccumulator =, +        createFilledPairedStatsAccumulator(, +            Collections.nCopies(OTHER_MANY_VALUES_COUNT, ONE_VALUE), OTHER_MANY_VALUES);, +    verticalValuesAccumulatorByAddAllPartitionedPairedStats =, +        createPartitionedFilledPairedStatsAccumulator(, +            Collections.nCopies(OTHER_MANY_VALUES_COUNT, ONE_VALUE), OTHER_MANY_VALUES, 2);, +    constantValuesAccumulator =, +        createFilledPairedStatsAccumulator(, +            Collections.nCopies(MANY_VALUES_COUNT, ONE_VALUE),, +            Collections.nCopies(MANY_VALUES_COUNT, OTHER_ONE_VALUE));, +    constantValuesAccumulatorByAddAllPartitionedPairedStats =, +        createPartitionedFilledPairedStatsAccumulator(, +            Collections.nCopies(MANY_VALUES_COUNT, ONE_VALUE),, +            Collections.nCopies(MANY_VALUES_COUNT, OTHER_ONE_VALUE),, +            2);, +    assertThat(emptyAccumulatorByAddAllEmptyPairedStats.count()).isEqualTo(0);, +    assertThat(oneValueAccumulatorByAddAllEmptyPairedStats.count()).isEqualTo(1);, +    assertThat(twoValuesAccumulatorByAddAllPartitionedPairedStats.count()).isEqualTo(2);, +    assertThat(manyValuesAccumulatorByAddAllPartitionedPairedStats.count()), +        .isEqualTo(MANY_VALUES_COUNT);, +  }, +, +  public void testCountOverflow_doesNotThrow() {, +    PairedStatsAccumulator accumulator = new PairedStatsAccumulator();, +    accumulator.add(ONE_VALUE, OTHER_ONE_VALUE);, +    for (int power = 1; power < Long.SIZE - 1; power++) {, +      accumulator.addAll(accumulator.snapshot());, +    }, +    // Should overflow without throwing., +    accumulator.addAll(accumulator.snapshot());, +    assertThat(accumulator.count()).isLessThan(0L);, +    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, emptyAccumulatorByAddAllEmptyPairedStats.xStats());, +    assertStatsApproxEqual(ONE_VALUE_STATS, oneValueAccumulatorByAddAllEmptyPairedStats.xStats());, +    assertStatsApproxEqual(, +        TWO_VALUES_STATS, twoValuesAccumulatorByAddAllPartitionedPairedStats.xStats());, +    assertStatsApproxEqual(, +        MANY_VALUES_STATS_ITERABLE, manyValuesAccumulatorByAddAllPartitionedPairedStats.xStats());, +    assertStatsApproxEqual(EMPTY_STATS_ITERABLE, emptyAccumulatorByAddAllEmptyPairedStats.yStats());, +    assertStatsApproxEqual(, +        OTHER_ONE_VALUE_STATS, oneValueAccumulatorByAddAllEmptyPairedStats.yStats());, +    assertStatsApproxEqual(, +        OTHER_TWO_VALUES_STATS, twoValuesAccumulatorByAddAllPartitionedPairedStats.yStats());, +    assertStatsApproxEqual(, +        OTHER_MANY_VALUES_STATS, manyValuesAccumulatorByAddAllPartitionedPairedStats.yStats());, +    try {, +      emptyAccumulatorByAddAllEmptyPairedStats.populationCovariance();, +      fail("Expected IllegalStateException");, +    } catch (IllegalStateException expected) {, +    }, +    assertThat(oneValueAccumulatorByAddAllEmptyPairedStats.populationCovariance()), +        .isWithin(0.0), +        .of(0.0);, +    assertThat(twoValuesAccumulatorByAddAllPartitionedPairedStats.populationCovariance()), +        .isWithin(ALLOWED_ERROR), +        .of(TWO_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / 2);, +    assertThat(manyValuesAccumulator.populationCovariance()), +        .isWithin(ALLOWED_ERROR), +        .of(MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT);, +    assertThat(manyValuesAccumulatorByAddAllPartitionedPairedStats.populationCovariance()), +        .isWithin(ALLOWED_ERROR), +        .of(MANY_VALUES_SUM_OF_PRODUCTS_OF_DELTAS / MANY_VALUES_COUNT);, +      PairedStatsAccumulator accumulatorByAddAllPartitionedPairedStats =, +          createPartitionedFilledPairedStatsAccumulator(values.asIterable(), OTHER_MANY_VALUES, 2);, +      double populationCovarianceByAddAllPartitionedPairedStats =, +          accumulatorByAddAllPartitionedPairedStats.populationCovariance();, +        assertThat(populationCovarianceByAddAllPartitionedPairedStats), +            .named("population covariance by addAll(PairedStats) of " + values), +            .isNaN();, +        assertThat(populationCovarianceByAddAllPartitionedPairedStats), +            .named("population covariance by addAll(PairedStats) of " + values), +            .isWithin(ALLOWED_ERROR)]