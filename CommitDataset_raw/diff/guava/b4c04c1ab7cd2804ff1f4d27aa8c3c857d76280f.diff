[+++ b/guava-testlib/src/com/google/common/util/concurrent/testing/SameThreadScheduledExecutorService.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.util.concurrent.testing;, +, +import com.google.common.base.Preconditions;, +import com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture;, +import com.google.common.util.concurrent.ListenableFuture;, +import com.google.common.util.concurrent.ListenableScheduledFuture;, +import com.google.common.util.concurrent.ListeningExecutorService;, +import com.google.common.util.concurrent.ListeningScheduledExecutorService;, +import com.google.common.util.concurrent.MoreExecutors;, +, +import java.util.Collection;, +import java.util.List;, +import java.util.concurrent.AbstractExecutorService;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Delayed;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +, +/**, + * A ScheduledExecutorService that executes all scheduled actions immediately, + * in the calling thread., + *, + * See {@link TestingExecutors#sameThreadScheduledExecutor()} for a full list of, + * constraints., + *, + * @author John Sirois, + * @author Zach van Schouwen, + */, +class SameThreadScheduledExecutorService extends AbstractExecutorService, +    implements ListeningScheduledExecutorService {, +, +  private final ListeningExecutorService delegate =, +      MoreExecutors.sameThreadExecutor();, +, +  @Override, +  public void shutdown() {, +    delegate.shutdown();, +  }, +, +  @Override, +  public List<Runnable> shutdownNow() {, +    return delegate.shutdownNow();, +  }, +, +  @Override, +  public boolean isShutdown() {, +    return delegate.isShutdown();, +  }, +, +  @Override, +  public boolean isTerminated() {, +    return delegate.isTerminated();, +  }, +, +  @Override, +  public boolean awaitTermination(long timeout, TimeUnit unit), +      throws InterruptedException {, +    Preconditions.checkNotNull(unit, "unit must not be null!");, +    return delegate.awaitTermination(timeout, unit);, +  }, +, +  @Override, +  public <T> ListenableFuture<T> submit(Callable<T> task) {, +    Preconditions.checkNotNull(task, "task must not be null!");, +    return delegate.submit(task);, +  }, +, +  @Override, +  public <T> ListenableFuture<T> submit(Runnable task, T result) {, +    Preconditions.checkNotNull(task, "task must not be null!");, +    Preconditions.checkNotNull(result, "result must not be null!");, +    return delegate.submit(task, result);, +  }, +, +  @Override, +  public ListenableFuture<?> submit(Runnable task) {, +    Preconditions.checkNotNull(task, "task must not be null!");, +    return delegate.submit(task);, +  }, +, +  @Override]