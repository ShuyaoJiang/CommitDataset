[+++ b/guava-testlib/src/com/google/common/testing/EqualsTester.java, +import com.google.common.base.Objects;, +import com.google.common.testing.RelationshipTester.RelationshipAssertion;, + * <p>When a test fails, the error message labels the objects involved in, + * the failed comparison as follows:, + * <ul>, + *       {@link #addEqualObject(Object...)}, numbered starting from 1., + *   <li>"{@code [unequal object }<i>i</i>{@code ]}" refers to the, + *       <i>i</i><sup>th</sup> object passed to the method, + *       {@link #addNotEqualObject(Object...)}, numbered starting from 1., + *   <li>"{@code [group }<i>i</i>{@code , item }<i>j</i>{@code ]}" refers to the, + *       <i>j</i><sup>th</sup> item in the <i>i</i><sup>th</sup> equality group,, + *       where both equality groups and the items within equality groups are, + *       numbered starting from 1.  When either a constructor argument or an, + *       equal object is provided, that becomes group 1., + * </ul>, + *, +  private static final int REPETITIONS = 3;, +, +  public EqualsTester() {}, +    defaultEqualObjects.add(checkNotNull(reference, "Reference object cannot be null"));, +    defaultEqualObjects.addAll(ImmutableList.copyOf(equalObjects));, +    defaultNotEqualObjects.addAll(ImmutableList.copyOf(notEqualObjects));, +    RelationshipTester<Object> delegate = new RelationshipTester<Object>(, +        new RelationshipAssertion<Object>() {, +          @Override public void assertRelated(Object item, Object related) {, +            assertEquals("$ITEM must be equal to $RELATED", item, related);, +            int itemHash = item.hashCode();, +            int relatedHash = related.hashCode();, +            assertEquals("the hash (" + itemHash + ") of $ITEM must be equal to the hash (", +                + relatedHash +") of $RELATED", itemHash, relatedHash);, +          }, +, +          @Override public void assertUnrelated(Object item, Object unrelated) {, +            // TODO(cpovirk): should this implementation (and, +            // RelationshipAssertions in general) accept null inputs?, +            assertTrue("$ITEM must be unequal to $UNRELATED", !Objects.equal(item, unrelated));, +          }, +        });, +    if (!defaultEqualObjects.isEmpty()) {, +      delegate.addRelatedGroup(defaultEqualObjects);, +    }, +    for (List<Object> group : equalityGroups) {, +      delegate.addRelatedGroup(group);, +    }, +    for (int run = 0; run < REPETITIONS; run++) {, +      testItems();, +      delegate.test();, +      testLegacyDefaultNotEqualsObjects();, +    }, +  /**, +   * This method exists just to test the not equals objects with the inconsistent legacy behavior., +   * When {@link #addNotEqualObject(Object...)} is gone, this can go away too., +   */, +  private void testLegacyDefaultNotEqualsObjects() {, +    for (int i = 0; i < defaultEqualObjects.size(); i++) {, +      Object reference = defaultEqualObjects.get(i);, +      for (int notEqualsItemNumber = 0; notEqualsItemNumber < defaultNotEqualObjects.size();, +          notEqualsItemNumber++) {, +        Object notEqualObject = defaultNotEqualObjects.get(notEqualsItemNumber);, +        String message = reference + " [group 1, item " + (i + 1) + "] must be unequal to ", +            + notEqualObject + " [unequal object " + (notEqualsItemNumber + 1) + "]";, +        assertTrue(message, !reference.equals(notEqualObject));, +    for (int groupNumber = 0; groupNumber < equalityGroups.size(); groupNumber++) {, +      List<Object> equalityGroup = equalityGroups.get(groupNumber);, +      for (int itemNumber = 0; itemNumber < equalityGroup.size(); itemNumber++) {, +        Object reference = equalityGroup.get(itemNumber);, +        for (int notEqualsItemNumber = 0; notEqualsItemNumber < defaultNotEqualObjects.size();, +            notEqualsItemNumber++) {, +          Object notEqualObject = defaultNotEqualObjects.get(notEqualsItemNumber);, +          String message = reference + " [group " + (groupNumber + 1) + ", item " + (itemNumber + 1), +              + "] must be unequal to " + notEqualObject + " [unequal object ", +              + (notEqualsItemNumber + 1) + "]";, +          assertTrue(message, !reference.equals(notEqualObject));, +        }, +  private void testItems() {, +    for (Object item : Iterables.concat(defaultEqualObjects, Iterables.concat(equalityGroups))) {, +      assertTrue(item + " must be unequal to null", !item.equals(null));, +      assertTrue(item + " must be unequal to an arbitrary object of another class",, +          !item.equals(NotAnInstance.EQUAL_TO_NOTHING));, +      assertEquals(item + " must be equal to itself", item, item);, +      assertEquals("the hash of " + item + " must be consistent", item.hashCode(), item.hashCode());, +  private enum NotAnInstance {, +    EQUAL_TO_NOTHING;, +++ b/guava-testlib/src/com/google/common/testing/EqualsTester.java, +import com.google.common.base.Objects;, +import com.google.common.testing.RelationshipTester.RelationshipAssertion;, + * <p>When a test fails, the error message labels the objects involved in, + * the failed comparison as follows:, + * <ul>, + *       {@link #addEqualObject(Object...)}, numbered starting from 1., + *   <li>"{@code [unequal object }<i>i</i>{@code ]}" refers to the, + *       <i>i</i><sup>th</sup> object passed to the method, + *       {@link #addNotEqualObject(Object...)}, numbered starting from 1., + *   <li>"{@code [group }<i>i</i>{@code , item }<i>j</i>{@code ]}" refers to the, + *       <i>j</i><sup>th</sup> item in the <i>i</i><sup>th</sup> equality group,, + *       where both equality groups and the items within equality groups are, + *       numbered starting from 1.  When either a constructor argument or an, + *       equal object is provided, that becomes group 1., + * </ul>]