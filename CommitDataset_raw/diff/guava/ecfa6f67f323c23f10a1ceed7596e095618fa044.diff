[+++ b/guava-tests/test/com/google/common/collect/RangeTest.java, +import java.util.Arrays;, +import java.util.List;, +import java.util.NoSuchElementException;, +    Range<Integer> range = Range.open(4, 8);, +      Range.open(4, 3);, +      Range.open(3, 3);, +    Range<Integer> range = Range.closed(5, 7);, +      Range.closed(4, 3);, +    Range<Integer> range = Range.openClosed(4, 7);, +    Range<Integer> range = Range.closedOpen(5, 8);, +    assertTrue(Range.closed(3, 5).isConnected(Range.open(5, 6)));, +    assertTrue(Range.closed(3, 5).isConnected(Range.openClosed(5, 5)));, +    assertTrue(Range.open(3, 5).isConnected(Range.closed(5, 6)));, +    assertTrue(Range.closed(3, 7).isConnected(Range.open(6, 8)));, +    assertTrue(Range.open(3, 7).isConnected(Range.closed(5, 6)));, +    assertFalse(Range.closed(3, 5).isConnected(Range.closed(7, 8)));, +    assertFalse(Range.closed(3, 5).isConnected(Range.closedOpen(7, 7)));, +    Range<Integer> range = Range.closed(4, 4);, +    Range<Integer> range = Range.closedOpen(4, 4);, +    Range<Integer> range = Range.openClosed(4, 4);, +    Range<Integer> range = Range.lessThan(5);, +    Range<Integer> range = Range.greaterThan(5);, +    Range<Integer> range = Range.atLeast(6);, +    Range<Integer> range = Range.atMost(4);, +    Range<Integer> range = Range.all();, +    Cut<Integer> a = Range.lessThan(0).lowerBound;, +    Cut<Integer> b = Range.atLeast(0).lowerBound;, +    Cut<Integer> c = Range.greaterThan(0).lowerBound;, +    Cut<Integer> d = Range.atLeast(1).lowerBound;, +    Cut<Integer> e = Range.greaterThan(1).lowerBound;, +    Cut<Integer> f = Range.greaterThan(1).upperBound;, +    Range<Integer> range = Range.closed(3, 5);, +    assertTrue(Range.openClosed(3, 3).containsAll(, +    Range<Integer> range = Range.open(2, 5);, +    assertTrue(range.encloses(Range.open(2, 4)));, +    assertTrue(range.encloses(Range.open(3, 5)));, +    assertTrue(range.encloses(Range.closed(3, 4)));, +    assertFalse(range.encloses(Range.openClosed(2, 5)));, +    assertFalse(range.encloses(Range.closedOpen(2, 5)));, +    assertFalse(range.encloses(Range.closed(1, 4)));, +    assertFalse(range.encloses(Range.closed(3, 6)));, +    assertFalse(range.encloses(Range.greaterThan(3)));, +    assertFalse(range.encloses(Range.lessThan(3)));, +    assertFalse(range.encloses(Range.atLeast(3)));, +    assertFalse(range.encloses(Range.atMost(3)));, +    assertFalse(range.encloses(Range.<Integer>all()));, +    Range<Integer> range = Range.closed(2, 5);, +    assertTrue(range.encloses(Range.open(2, 5)));, +    assertTrue(range.encloses(Range.openClosed(2, 5)));, +    assertTrue(range.encloses(Range.closedOpen(2, 5)));, +    assertTrue(range.encloses(Range.closed(3, 5)));, +    assertTrue(range.encloses(Range.closed(2, 4)));, +    assertFalse(range.encloses(Range.open(1, 6)));, +    assertFalse(range.encloses(Range.greaterThan(3)));, +    assertFalse(range.encloses(Range.lessThan(3)));, +    assertFalse(range.encloses(Range.atLeast(3)));, +    assertFalse(range.encloses(Range.atMost(3)));, +    assertFalse(range.encloses(Range.<Integer>all()));, +    Range<Integer> range = Range.closedOpen(3, 3);, +      range.intersection(Range.open(3, 5));, +      range.intersection(Range.closed(0, 2));, +    Range<Integer> range = Range.open(3, 4);, +    assertEquals(Range.openClosed(3, 3),, +        range.intersection(Range.atMost(3)));, +    assertEquals(Range.closedOpen(4, 4),, +        range.intersection(Range.atLeast(4)));, +      range.intersection(Range.lessThan(3));, +      range.intersection(Range.greaterThan(4));, +    range = Range.closed(3, 4);, +    assertEquals(Range.openClosed(4, 4),, +        range.intersection(Range.greaterThan(4)));, +    Range<Integer> range = Range.closed(3, 3);, +    assertEquals(range, range.intersection(Range.atMost(4)));, +    assertEquals(range, range.intersection(Range.atMost(3)));, +    assertEquals(range, range.intersection(Range.atLeast(3)));, +    assertEquals(range, range.intersection(Range.atLeast(2)));, +    assertEquals(Range.closedOpen(3, 3),, +        range.intersection(Range.lessThan(3)));, +    assertEquals(Range.openClosed(3, 3),, +        range.intersection(Range.greaterThan(3)));, +      range.intersection(Range.atLeast(4));, +      range.intersection(Range.atMost(2));, +    Range<Integer> range = Range.closed(4, 8);, +      range.intersection(Range.closed(0, 2));, +    assertEquals(Range.closedOpen(4, 4),, +        range.intersection(Range.closedOpen(2, 4)));, +    assertEquals(Range.closed(4, 6), range.intersection(Range.closed(2, 6)));, +    assertEquals(Range.closed(4, 6), range.intersection(Range.closed(4, 6)));, +    assertEquals(Range.closed(5, 7), range.intersection(Range.closed(5, 7)));, +    assertEquals(Range.closed(6, 8), range.intersection(Range.closed(6, 8)));, +    assertEquals(range, range.intersection(Range.closed(4, 10)));, +    assertEquals(range, range.intersection(Range.closed(2, 8)));, +    assertEquals(range, range.intersection(Range.closed(2, 10)));, +    assertEquals(Range.closed(6, 8), range.intersection(Range.closed(6, 10)));, +    assertEquals(Range.openClosed(8, 8),, +        range.intersection(Range.openClosed(8, 10)));, +      range.intersection(Range.closed(10, 12));, +    Range<Integer> range = Range.closed(4, 8);, +    assertEquals(Range.closed(0, 8), range.span(Range.closed(0, 2)));]