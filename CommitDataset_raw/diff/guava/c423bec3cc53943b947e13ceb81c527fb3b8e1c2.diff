[+++ b/guava/src/com/google/common/collect/EmptyImmutableList.java, +++ b/guava/src/com/google/common/collect/EmptyImmutableList.java, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +    return asImmutableList(e1, e2);, +    return asImmutableList(e1, e2, e3);, +    return asImmutableList(e1, e2, e3, e4);, +    return asImmutableList(e1, e2, e3, e4, e5);, +    return asImmutableList(e1, e2, e3, e4, e5, e6);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);, +    return new Builder<E>(12 + others.length), +        .add(e1), +        .add(e2), +        .add(e3), +        .add(e4), +        .add(e5), +        .add(e6), +        .add(e7), +        .add(e8), +        .add(e9), +        .add(e10), +        .add(e11), +        .add(e12), +        .add(others), +        .build();, +    return asImmutableList(elements.clone());, +  static <E> ImmutableList<E> asImmutableList(Object... elements) {, +        for (int i = 0; i < elements.length; i++) {, +          ObjectArrays.checkElementNotNull(elements[i], i);, +        }, +        return new RegularImmutableList<E>(elements);, +  @Override public boolean equals(@Nullable Object obj) {, +++ b/guava/src/com/google/common/collect/EmptyImmutableList.java, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +    return asImmutableList(e1, e2);, +    return asImmutableList(e1, e2, e3);, +    return asImmutableList(e1, e2, e3, e4);, +    return asImmutableList(e1, e2, e3, e4, e5);, +    return asImmutableList(e1, e2, e3, e4, e5, e6);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);, +    return new Builder<E>(12 + others.length), +        .add(e1), +        .add(e2), +        .add(e3), +        .add(e4), +        .add(e5), +        .add(e6), +        .add(e7), +        .add(e8), +        .add(e9), +        .add(e10), +        .add(e11), +        .add(e12), +        .add(others), +        .build();, +    return asImmutableList(elements.clone());, +  static <E> ImmutableList<E> asImmutableList(Object... elements) {, +        for (int i = 0; i < elements.length; i++) {, +          ObjectArrays.checkElementNotNull(elements[i], i);, +        }, +        return new RegularImmutableList<E>(elements);, +  @Override public boolean equals(@Nullable Object obj) {, +++ b/guava/src/com/google/common/collect/RegularImmutableList.java, +++ b/guava/src/com/google/common/collect/EmptyImmutableList.java, +++ b/guava/src/com/google/common/collect/ImmutableList.java, +    return asImmutableList(e1, e2);, +    return asImmutableList(e1, e2, e3);, +    return asImmutableList(e1, e2, e3, e4);, +    return asImmutableList(e1, e2, e3, e4, e5);, +    return asImmutableList(e1, e2, e3, e4, e5, e6);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);, +    return asImmutableList(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);, +    return new Builder<E>(12 + others.length), +        .add(e1), +        .add(e2), +        .add(e3), +        .add(e4), +        .add(e5), +        .add(e6), +        .add(e7), +        .add(e8), +        .add(e9), +        .add(e10), +        .add(e11), +        .add(e12), +        .add(others), +        .build();, +    return asImmutableList(elements.clone());, +  static <E> ImmutableList<E> asImmutableList(Object... elements) {, +        for (int i = 0; i < elements.length; i++) {]