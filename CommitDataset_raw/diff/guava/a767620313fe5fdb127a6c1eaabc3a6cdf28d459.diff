[+++ b/guava-tests/test/com/google/common/cache/NullCacheTest.java, +import static com.google.common.cache.TestingRemovalListeners.queuingRemovalListener;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import com.google.common.cache.TestingRemovalListeners.QueuingRemovalListener;, +  QueuingRemovalListener<Object, Object> listener;, +    listener = queuingRemovalListener();, +    Object key = new Object();, +    assertSame(computed, cache.getUnchecked(key));, +    RemovalNotification<Object, Object> notification = listener.remove();, +    assertSame(key, notification.getKey());, +    assertSame(computed, notification.getValue());, +    assertSame(RemovalCause.SIZE, notification.getCause());, +    assertTrue(listener.isEmpty());, +    checkEmpty(cache);, +  }, +, +  public void testGet_expireAfterWrite() {, +    Object computed = new Object();, +    Cache<Object, Object> cache = CacheBuilder.newBuilder(), +        .expireAfterWrite(0, SECONDS), +        .removalListener(listener), +        .build(constantLoader(computed));, +, +    Object key = new Object();, +    assertSame(computed, cache.getUnchecked(key));, +    RemovalNotification<Object, Object> notification = listener.remove();, +    assertSame(key, notification.getKey());, +    assertSame(computed, notification.getValue());, +    assertSame(RemovalCause.SIZE, notification.getCause());, +    assertTrue(listener.isEmpty());, +    checkEmpty(cache);, +  }, +, +  public void testGet_expireAfterAccess() {, +    Object computed = new Object();, +    Cache<Object, Object> cache = CacheBuilder.newBuilder(), +        .expireAfterAccess(0, SECONDS), +        .removalListener(listener), +        .build(constantLoader(computed));, +, +    Object key = new Object();, +    assertSame(computed, cache.getUnchecked(key));, +    RemovalNotification<Object, Object> notification = listener.remove();, +    assertSame(key, notification.getKey());, +    assertSame(computed, notification.getValue());, +    assertSame(RemovalCause.SIZE, notification.getCause());, +    assertTrue(listener.isEmpty());, +    assertTrue(listener.isEmpty());, +    assertTrue(listener.isEmpty());, +++ b/guava-tests/test/com/google/common/cache/NullCacheTest.java, +import static com.google.common.cache.TestingRemovalListeners.queuingRemovalListener;, +import static java.util.concurrent.TimeUnit.SECONDS;, +import com.google.common.cache.TestingRemovalListeners.QueuingRemovalListener;, +  QueuingRemovalListener<Object, Object> listener;, +    listener = queuingRemovalListener();, +    Object key = new Object();, +    assertSame(computed, cache.getUnchecked(key));, +    RemovalNotification<Object, Object> notification = listener.remove();, +    assertSame(key, notification.getKey());, +    assertSame(computed, notification.getValue());, +    assertSame(RemovalCause.SIZE, notification.getCause());, +    assertTrue(listener.isEmpty());, +    checkEmpty(cache);, +  }, +, +  public void testGet_expireAfterWrite() {, +    Object computed = new Object();, +    Cache<Object, Object> cache = CacheBuilder.newBuilder(), +        .expireAfterWrite(0, SECONDS), +        .removalListener(listener), +        .build(constantLoader(computed));, +, +    Object key = new Object();, +    assertSame(computed, cache.getUnchecked(key));, +    RemovalNotification<Object, Object> notification = listener.remove();, +    assertSame(key, notification.getKey());, +    assertSame(computed, notification.getValue());, +    assertSame(RemovalCause.SIZE, notification.getCause());, +    assertTrue(listener.isEmpty());, +    checkEmpty(cache);, +  }, +, +  public void testGet_expireAfterAccess() {, +    Object computed = new Object();, +    Cache<Object, Object> cache = CacheBuilder.newBuilder(), +        .expireAfterAccess(0, SECONDS), +        .removalListener(listener), +        .build(constantLoader(computed));, +, +    Object key = new Object();, +    assertSame(computed, cache.getUnchecked(key));, +    RemovalNotification<Object, Object> notification = listener.remove();, +    assertSame(key, notification.getKey());, +    assertSame(computed, notification.getValue());, +    assertSame(RemovalCause.SIZE, notification.getCause());, +    assertTrue(listener.isEmpty());, +    assertTrue(listener.isEmpty());, +    assertTrue(listener.isEmpty());, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * cache. This can be useful in testing, or to disable caching temporarily without a code change.]