[+++ b/guava/src/com/google/common/base/Function.java, +   * <i>May</i> return {@code true} if {@code object} is a {@code Function} that behaves identically, +   * to this function., +++ b/guava/src/com/google/common/base/Function.java, +   * <i>May</i> return {@code true} if {@code object} is a {@code Function} that behaves identically, +   * to this function., +++ b/guava/src/com/google/common/math/PairedStats.java, +   *, +   *   <li>Both {@code xStats} and {@code yStats} must have the same {@code count}., +++ b/guava/src/com/google/common/base/Function.java, +   * <i>May</i> return {@code true} if {@code object} is a {@code Function} that behaves identically, +   * to this function., +++ b/guava/src/com/google/common/math/PairedStats.java, +   *, +   *   <li>Both {@code xStats} and {@code yStats} must have the same {@code count}., +++ b/guava/src/com/google/common/math/Quantiles.java, +   * {@code to}] for all {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. The, +   * value returned by this method is the {@code i} in that range such that {@code allRequired[i]}, +   * is as close as possible to the center of the range [{@code from}, {@code to}]. Choosing the, +   * value closest to the center of the range first is the most efficient strategy because it, +   * minimizes the size of the subranges from which the remaining selections must be done., +++ b/guava/src/com/google/common/base/Function.java, +   * <i>May</i> return {@code true} if {@code object} is a {@code Function} that behaves identically, +   * to this function., +++ b/guava/src/com/google/common/math/PairedStats.java, +   *, +   *   <li>Both {@code xStats} and {@code yStats} must have the same {@code count}., +++ b/guava/src/com/google/common/math/Quantiles.java, +   * {@code to}] for all {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. The, +   * value returned by this method is the {@code i} in that range such that {@code allRequired[i]}, +   * is as close as possible to the center of the range [{@code from}, {@code to}]. Choosing the, +   * value closest to the center of the range first is the most efficient strategy because it, +   * minimizes the size of the subranges from which the remaining selections must be done., +++ b/guava/src/com/google/common/net/InternetDomainName.java, +   * Validation method used by {@code from} to ensure that the domain name is syntactically valid]