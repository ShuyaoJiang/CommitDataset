[+++ b/android/guava-tests/test/com/google/common/base/StringsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  @GwtIncompatible // GWT reflection includes less data, +  public void testLenientFormat_badArgumentToString() {, +    assertThat(Strings.lenientFormat("boiler %s plate", new ThrowsOnToString())), +        .matches(, +            "boiler <com\\.google\\.common\\.base\\.StringsTest\\$ThrowsOnToString@[0-9a-f]+ ", +                + "threw java\\.lang\\.UnsupportedOperationException> plate");, +  }, +, +  public void testLenientFormat_badArgumentToString_gwtFriendly() {, +    assertThat(Strings.lenientFormat("boiler %s plate", new ThrowsOnToString())), +        .matches(, +            "boiler <.*> plate");, +  }, +, +  private static class ThrowsOnToString {, +    @Override, +    public String toString() {, +      throw new UnsupportedOperationException();, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/base/StringsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  @GwtIncompatible // GWT reflection includes less data, +  public void testLenientFormat_badArgumentToString() {, +    assertThat(Strings.lenientFormat("boiler %s plate", new ThrowsOnToString())), +        .matches(, +            "boiler <com\\.google\\.common\\.base\\.StringsTest\\$ThrowsOnToString@[0-9a-f]+ ", +                + "threw java\\.lang\\.UnsupportedOperationException> plate");, +  }, +, +  public void testLenientFormat_badArgumentToString_gwtFriendly() {, +    assertThat(Strings.lenientFormat("boiler %s plate", new ThrowsOnToString())), +        .matches(, +            "boiler <.*> plate");, +  }, +, +  private static class ThrowsOnToString {, +    @Override, +    public String toString() {, +      throw new UnsupportedOperationException();, +    }, +  }, +, +++ b/android/guava/src/com/google/common/base/Strings.java, +import static java.util.logging.Level.WARNING;, +import java.util.logging.Logger;, +   * do not match, returns a best-effort form of that string. Will not throw an exception under, +   * normal conditions., +    if (args == null) {, +      args = new Object[] {"(Object[])null"};, +    } else {, +      for (int i = 0; i < args.length; i++) {, +        args[i] = lenientToString(args[i]);, +      }, +    }, +  private static String lenientToString(@NullableDecl Object o) {, +    try {, +      return String.valueOf(o);, +    } catch (Exception e) {, +      // Default toString() behavior - see Object.toString(), +      String objectToString =, +          o.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(o));, +      // Logger is created inline with fixed name to avoid forcing Proguard to create another class., +      Logger.getLogger("com.google.common.base.Strings"), +          .log(WARNING, "Exception during lenientFormat for " + objectToString, e);, +      return "<" + objectToString + " threw " + e.getClass().getName() + ">";, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/base/StringsTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  @GwtIncompatible // GWT reflection includes less data, +  public void testLenientFormat_badArgumentToString() {, +    assertThat(Strings.lenientFormat("boiler %s plate", new ThrowsOnToString())), +        .matches(, +            "boiler <com\\.google\\.common\\.base\\.StringsTest\\$ThrowsOnToString@[0-9a-f]+ ", +                + "threw java\\.lang\\.UnsupportedOperationException> plate");, +  }, +, +  public void testLenientFormat_badArgumentToString_gwtFriendly() {, +    assertThat(Strings.lenientFormat("boiler %s plate", new ThrowsOnToString())), +        .matches(, +            "boiler <.*> plate");, +  }, +, +  private static class ThrowsOnToString {, +    @Override, +    public String toString() {, +      throw new UnsupportedOperationException();, +    }, +  }, +, +++ b/android/guava/src/com/google/common/base/Strings.java, +import static java.util.logging.Level.WARNING;]