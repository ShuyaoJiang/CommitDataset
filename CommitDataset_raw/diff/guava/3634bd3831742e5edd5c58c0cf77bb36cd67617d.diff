[+++ b/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java, +    assertTrue(UnsignedLongs.compare(0, 0xffffffffffffffffL) < 0);, +    assertTrue(UnsignedLongs.compare(0xffffffffffffffffL, 0) > 0);, +    assertTrue(UnsignedLongs.compare(0xff1a618b7f65ea12L, 0xffffffffffffffffL) < 0);, +    assertTrue(UnsignedLongs.compare(0xffffffffffffffffL, 0xff1a618b7f65ea12L) > 0);, +    assertTrue(UnsignedLongs.compare(0x5a4316b8c153ac4dL, 0xff1a618b7f65ea12L) < 0);, +    assertTrue(UnsignedLongs.compare(0xff1a618b7f65ea12L, 0x5a4316b8c153ac4dL) > 0);, +    assertTrue(UnsignedLongs.compare(0x5a4316b8c153ac4dL, 0x6cf78a4b139a4e2aL) < 0);, +    assertTrue(UnsignedLongs.compare(0x6cf78a4b139a4e2aL, 0x5a4316b8c153ac4dL) > 0);, +    assertTrue(UnsignedLongs.compare(0xff1a618b7f65ea12L, 0xff1a618b7f65ea12L) == 0);, +      assertEquals(0,, +          dividend - (divisor * UnsignedLongs.divide(dividend, divisor), +          + UnsignedLongs.remainder(dividend, divisor)));, +      fail();, +    } catch (NumberFormatException expected) {, +    } catch (NumberFormatException expected) {, +  public void testParseLongWithRadix() {, +      } catch (NumberFormatException expected) {, +    } catch (NumberFormatException expected) {, +    // Valid radix values are Character.MIN_RADIX to Character.MAX_RADIX, inclusive., +    } catch (NumberFormatException expected) {, +    } catch (NumberFormatException expected) {, +    } catch (NumberFormatException expected) {, +        "6cf78a4b139a4e2a", +    };, +    assertEquals("", UnsignedLongs.join(","));, +    assertEquals("1", UnsignedLongs.join(",", 1));, +    assertEquals("1,2", UnsignedLongs.join(",", 1, 2));, +    assertEquals("18446744073709551615,9223372036854775808",, +        UnsignedLongs.join(",", -1, Long.MIN_VALUE));, +    assertEquals("184467440737095516159223372036854775808",, +        UnsignedLongs.join("", -1, Long.MIN_VALUE));]