[+++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +import java.lang.reflect.Field;, +import java.util.Arrays;, + * <p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},, + * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code, + * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code, + * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type, + * exposes at least one public static final constant of the same type, one of the constants will be, + * used; or if the class exposes a public parameter-less constructor then it will be "new"d and, + * returned., +  private static final Ordering<Field> BY_FIELD_NAME = new Ordering<Field>() {, +    @Override public int compare(Field left, Field right) {, +      return left.getName().compareTo(right.getName());, +    }, +  };, +, +   * Returns an arbitrary instance for {@code type}, or {@code null} if no arbitrary instance can, +   * be determined., +      return arbitraryConstantInstanceOrNull(type);, +      return arbitraryConstantInstanceOrNull(type);, +      return arbitraryConstantInstanceOrNull(type);, +  @Nullable private static <T> T arbitraryConstantInstanceOrNull(Class<T> type) {, +    Field[] fields = type.getDeclaredFields();, +    Arrays.sort(fields, BY_FIELD_NAME);, +    for (Field field : fields) {, +      if (Modifier.isPublic(field.getModifiers()), +          && Modifier.isStatic(field.getModifiers()), +          && Modifier.isFinal(field.getModifiers())) {, +        if (field.getGenericType() == field.getType(), +            && type.isAssignableFrom(field.getType())) {, +          field.setAccessible(true);, +          try {, +            T constant = type.cast(field.get(null));, +            if (constant != null) {, +              return constant;, +            }, +          } catch (IllegalAccessException impossible) {, +            throw new AssertionError(impossible);, +          }, +        }, +      }, +    }, +    return null;, +  }, +, +    return arrayType.cast(Array.newInstance(arrayType.getComponentType(), 0));, +++ b/guava-testlib/src/com/google/common/testing/ArbitraryInstances.java, +import java.lang.reflect.Field;, +import java.util.Arrays;, + * <p>Covers arrays, enums and common types defined in {@code java.lang}, {@code java.lang.reflect},, + * {@code java.io}, {@code java.nio}, {@code java.math}, {@code java.util}, {@code, + * java.util.concurrent}, {@code java.util.regex}, {@code com.google.common.base}, {@code, + * com.google.common.collect} and {@code com.google.common.primitives}. In addition, if the type, + * exposes at least one public static final constant of the same type, one of the constants will be, + * used; or if the class exposes a public parameter-less constructor then it will be "new"d and, + * returned., +  private static final Ordering<Field> BY_FIELD_NAME = new Ordering<Field>() {, +    @Override public int compare(Field left, Field right) {, +      return left.getName().compareTo(right.getName());, +    }, +  };, +, +   * Returns an arbitrary instance for {@code type}, or {@code null} if no arbitrary instance can, +   * be determined., +      return arbitraryConstantInstanceOrNull(type);, +      return arbitraryConstantInstanceOrNull(type);, +      return arbitraryConstantInstanceOrNull(type);, +  @Nullable private static <T> T arbitraryConstantInstanceOrNull(Class<T> type) {, +    Field[] fields = type.getDeclaredFields();, +    Arrays.sort(fields, BY_FIELD_NAME);, +    for (Field field : fields) {, +      if (Modifier.isPublic(field.getModifiers()), +          && Modifier.isStatic(field.getModifiers()), +          && Modifier.isFinal(field.getModifiers())) {, +        if (field.getGenericType() == field.getType(), +            && type.isAssignableFrom(field.getType())) {, +          field.setAccessible(true);, +          try {, +            T constant = type.cast(field.get(null));, +            if (constant != null) {, +              return constant;, +            }, +          } catch (IllegalAccessException impossible) {, +            throw new AssertionError(impossible);, +          }, +        }, +      }, +    }, +    return null;, +  }, +, +    return arrayType.cast(Array.newInstance(arrayType.getComponentType(), 0));, +++ b/guava-testlib/test/com/google/common/testing/ArbitraryInstancesTest.java, +    assertSame(SomeAbstractClass.INSTANCE, ArbitraryInstances.get(SomeAbstractClass.class));, +    assertSame(WithPrivateConstructor.INSTANCE,, +        ArbitraryInstances.get(WithPrivateConstructor.class));, +    assertSame(WithExceptionalConstructor.INSTANCE,, +        ArbitraryInstances.get(WithExceptionalConstructor.class));, +    assertEquals(Pattern.compile("").pattern(),, +        ArbitraryInstances.get(Pattern.class).pattern());]