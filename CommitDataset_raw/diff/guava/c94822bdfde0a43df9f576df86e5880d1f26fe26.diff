[+++ b/android/guava/src/com/google/common/graph/Traverser.java, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then, +   * depth 1, then 2, and so on., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a depth-first pre-order traversal. "Pre-order" implies that nodes appear in the, +   * {@code Iterable} in the order in which they are first visited., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a depth-first post-order traversal. "Post-order" implies that nodes appear in the, +   * {@code Iterable} in the order in which they are visited for the last time., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +++ b/android/guava/src/com/google/common/graph/Traverser.java, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then, +   * depth 1, then 2, and so on., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a depth-first pre-order traversal. "Pre-order" implies that nodes appear in the, +   * {@code Iterable} in the order in which they are first visited., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a depth-first post-order traversal. "Post-order" implies that nodes appear in the, +   * {@code Iterable} in the order in which they are visited for the last time., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +++ b/guava/src/com/google/common/graph/Traverser.java, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then, +   * depth 1, then 2, and so on., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a depth-first pre-order traversal. "Pre-order" implies that nodes appear in the, +   * {@code Iterable} in the order in which they are first visited., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:, +   * Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in, +   * the order of a depth-first post-order traversal. "Post-order" implies that nodes appear in the, +   * {@code Iterable} in the order in which they are visited for the last time., +   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will, +   * compute its next element on the fly. It is thus possible to limit the traversal to a certain, +   * number of nodes as follows:]