[+++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, +   * Exception indicating invalid base-encoded input encountered while decoding., +   *, +   * @author Louis Wasserman, +   */, +  public static final class DecodingException extends IOException {, +    DecodingException(String message) {, +      super(message);, +    }, +, +    DecodingException(Throwable cause) {, +      super(cause);, +    }, +  }, +, +  /**, +    try {, +      return decodeChecked(chars);, +    } catch (DecodingException badInput) {, +      throw new IllegalArgumentException(badInput);, +    }, +  }, +, +  /**, +   * Decodes the specified character sequence, and returns the resulting {@code byte[]}., +   * This is the inverse operation to {@link #encode(byte[])}., +   *, +   * @throws DecodingException if the input is not a valid encoded string according to this, +   *         encoding., +   */, +  final byte[] decodeChecked(CharSequence chars) throws DecodingException {, +    } catch (DecodingException badInput) {, +      throw badInput;, +    } catch (IOException impossible) {, +      throw new AssertionError(impossible);, +        throw new DecodingException("Unrecognized character: " + ch);, +                throw new DecodingException("Invalid input length " + readChars);, +                throw new DecodingException("Padding cannot start at index " + readChars);, +              throw new DecodingException(, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, +   * Exception indicating invalid base-encoded input encountered while decoding., +   *, +   * @author Louis Wasserman, +   */, +  public static final class DecodingException extends IOException {, +    DecodingException(String message) {, +      super(message);, +    }, +, +    DecodingException(Throwable cause) {, +      super(cause);, +    }, +  }, +, +  /**, +    try {, +      return decodeChecked(chars);, +    } catch (DecodingException badInput) {, +      throw new IllegalArgumentException(badInput);, +    }, +  }, +, +  /**, +   * Decodes the specified character sequence, and returns the resulting {@code byte[]}., +   * This is the inverse operation to {@link #encode(byte[])}., +   *, +   * @throws DecodingException if the input is not a valid encoded string according to this, +   *         encoding., +   */, +  final byte[] decodeChecked(CharSequence chars) throws DecodingException {, +    } catch (DecodingException badInput) {, +      throw badInput;, +    } catch (IOException impossible) {, +      throw new AssertionError(impossible);, +        throw new DecodingException("Unrecognized character: " + ch);, +                throw new DecodingException("Invalid input length " + readChars);, +                throw new DecodingException("Padding cannot start at index " + readChars);, +              throw new DecodingException(, +++ b/guava-tests/test/com/google/common/io/BaseEncodingTest.java, +import com.google.common.io.BaseEncoding.DecodingException;, +    try {, +      encoding.decodeChecked(cannotDecode);, +      fail("Expected DecodingException");, +    } catch (DecodingException expected) {, +      // success, +    }, +++ b/guava-gwt/src-super/com/google/common/io/super/com/google/common/io/BaseEncoding.java, +   * Exception indicating invalid base-encoded input encountered while decoding., +   *, +   * @author Louis Wasserman, +   */, +  public static final class DecodingException extends IOException {, +    DecodingException(String message) {, +      super(message);, +    }, +, +    DecodingException(Throwable cause) {, +      super(cause);, +    }, +  }]