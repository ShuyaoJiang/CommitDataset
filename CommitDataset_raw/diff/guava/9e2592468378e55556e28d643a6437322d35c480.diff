[+++ b/guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java, +import com.google.common.collect.ConcurrentHashMultiset;, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.ImmutableMultiset;, +import com.google.common.collect.Multiset;, +import java.util.Map;, +  private static final ListenerCallQueue.Event<Object> THROWING_EVENT =, +      new ListenerCallQueue.Event<Object>() {, +        @Override, +        public void call(Object object) {, +, +        @Override, +        public String toString() {, +          return "throwing()";, +        }, +  public void testEnqueueAndDispatch() {, +    Object listener = new Object();, +    ListenerCallQueue<Object> queue = new ListenerCallQueue<>();, +    queue.addListener(listener, directExecutor());, +    Multiset<Object> counters = ConcurrentHashMultiset.create();, +    queue.enqueue(incrementingEvent(counters, listener, 1));, +    queue.enqueue(incrementingEvent(counters, listener, 2));, +    queue.enqueue(incrementingEvent(counters, listener, 3));, +    queue.enqueue(incrementingEvent(counters, listener, 4));, +    assertEquals(0, counters.size());, +    queue.dispatch();, +    assertEquals(multiset(listener, 4), counters);, +  public void testEnqueueAndDispatch_multipleListeners() {, +    Object listener1 = new Object();, +    ListenerCallQueue<Object> queue = new ListenerCallQueue<>();, +    queue.addListener(listener1, directExecutor());, +    Multiset<Object> counters = ConcurrentHashMultiset.create();, +    queue.enqueue(incrementingEvent(counters, listener1, 1));, +    queue.enqueue(incrementingEvent(counters, listener1, 2));, +, +    Object listener2 = new Object();, +    queue.addListener(listener2, directExecutor());, +    queue.enqueue(incrementingEvent(counters, multiset(listener1, 3, listener2, 1)));, +    queue.enqueue(incrementingEvent(counters, multiset(listener1, 4, listener2, 2)));, +    assertEquals(0, counters.size());, +    queue.dispatch();, +    assertEquals(multiset(listener1, 4, listener2, 2), counters);, +  public void testEnqueueAndDispatch_withExceptions() {, +    Object listener = new Object();, +    ListenerCallQueue<Object> queue = new ListenerCallQueue<>();, +    queue.addListener(listener, directExecutor());, +, +    Multiset<Object> counters = ConcurrentHashMultiset.create();, +    queue.enqueue(incrementingEvent(counters, listener, 1));, +    queue.enqueue(THROWING_EVENT);, +    queue.enqueue(incrementingEvent(counters, listener, 2));, +    queue.enqueue(THROWING_EVENT);, +    queue.enqueue(incrementingEvent(counters, listener, 3));, +    queue.enqueue(THROWING_EVENT);, +    queue.enqueue(incrementingEvent(counters, listener, 4));, +    queue.enqueue(THROWING_EVENT);, +    assertEquals(0, counters.size());, +    queue.dispatch();, +    assertEquals(multiset(listener, 4), counters);, +  }, +, +  public void testEnqueueAndDispatch_multithreaded() throws InterruptedException {, +    Object listener = new Object();, +    ListenerCallQueue<Object> queue = new ListenerCallQueue<>();, +      queue.addListener(listener, service);, +      Multiset<Object> counters = ConcurrentHashMultiset.create();, +      queue.enqueue(incrementingEvent(counters, listener, 1));, +      queue.enqueue(incrementingEvent(counters, listener, 2));, +      queue.enqueue(incrementingEvent(counters, listener, 3));, +      queue.enqueue(incrementingEvent(counters, listener, 4));, +      queue.enqueue(countDownEvent(latch));, +      assertEquals(0, counters.size());, +      queue.dispatch();, +      assertEquals(multiset(listener, 4), counters);, +  public void testEnqueueAndDispatch_multithreaded_withThrowingRunnable(), +      throws InterruptedException {, +    Object listener = new Object();, +    ListenerCallQueue<Object> queue = new ListenerCallQueue<>();, +      queue.addListener(listener, service);, +      Multiset<Object> counters = ConcurrentHashMultiset.create();, +      queue.enqueue(incrementingEvent(counters, listener, 1));, +      queue.enqueue(THROWING_EVENT);, +      queue.enqueue(incrementingEvent(counters, listener, 2));, +      queue.enqueue(THROWING_EVENT);, +      queue.enqueue(incrementingEvent(counters, listener, 3));, +      queue.enqueue(THROWING_EVENT);, +      queue.enqueue(incrementingEvent(counters, listener, 4));, +      queue.enqueue(THROWING_EVENT);, +      queue.enqueue(countDownEvent(latch));, +      assertEquals(0, counters.size());, +      queue.dispatch();, +      assertEquals(multiset(listener, 4), counters);, +  private ListenerCallQueue.Event<Object> incrementingEvent(, +      Multiset<Object> counters, Object expectedListener, int expectedCount) {, +    return incrementingEvent(counters, multiset(expectedListener, expectedCount));, +  }, +, +  private static <T> ImmutableMultiset<T> multiset(T value, int count) {, +    return multiset(ImmutableMap.of(value, count));, +  }]