[+++ b/guava/src/com/google/common/util/concurrent/Futures.java, +   *     });, +   * }</pre>, +   * @deprecated Use {@linkplain #catching(ListenableFuture, Class, Function, Executor) the overload, +   *     that requires an executor}. For identical behavior, pass {@link, +   *     MoreExecutors#directExecutor}, but consider whether another executor would be safer, as, +   *     discussed in the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   *     documentation. This method is scheduled to be removed in April 2018., +  @Deprecated, +   *     });, +   * }</pre>, +   *     });, +   * }</pre>, +   * @deprecated Use {@linkplain #catchingAsync(ListenableFuture, Class, AsyncFunction, Executor), +   *     the overload that requires an executor}. For identical behavior, pass {@link, +   *     MoreExecutors#directExecutor}, but consider whether another executor would be safer, as, +   *     discussed in the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   *     documentation. This method is scheduled to be removed in April 2018., +  @Deprecated, +   *     transformAsync(rowKeyFuture, queryFunction);, +   * }</pre>, +   * @deprecated Use {@linkplain #transformAsync(ListenableFuture, AsyncFunction, Executor) the, +   *     overload that requires an executor}. For identical behavior, pass {@link, +   *     MoreExecutors#directExecutor}, but consider whether another executor would be safer, as, +   *     discussed in the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   *     documentation. This method is scheduled to be removed in April 2018., +  @Deprecated, +   *     transform(queryFuture, rowsFunction);, +   * }</pre>, +   * @deprecated Use {@linkplain #transform(ListenableFuture, Function, Executor) the overload that, +   *     requires an executor}. For identical behavior, pass {@link MoreExecutors#directExecutor},, +   *     but consider whether another executor would be safer, as discussed in the {@link, +   *     ListenableFuture#addListener ListenableFuture.addListener} documentation. This method is, +   *     scheduled to be removed in April 2018., +  @Deprecated, +     *, +     * @deprecated Use {@linkplain #callAsync(AsyncCallable, Executor) the overload that requires an, +     *     executor}. For identical behavior, pass {@link MoreExecutors#directExecutor}, but, +     *     consider whether another executor would be safer, as discussed in the {@link, +     *     ListenableFuture#addListener ListenableFuture.addListener} documentation. This method is, +     *     scheduled to be removed in April 2018., +    @Deprecated, +     *, +     * @deprecated Use {@linkplain #call(Callable, Executor) the overload that requires an, +     *     executor}. For identical behavior, pass {@link MoreExecutors#directExecutor}, but, +     *     consider whether another executor would be safer, as discussed in the {@link, +     *     ListenableFuture#addListener ListenableFuture.addListener} documentation. This method is, +     *     scheduled to be removed in April 2018., +    @Deprecated, +   * <p>Example:, +   *, +   * <pre>{@code, +   *     });, +   * }</pre>, +   * @deprecated Use {@linkplain #addCallback(ListenableFuture, FutureCallback, Executor) the, +   *     overload that requires an executor}. For identical behavior, pass {@link, +   *     MoreExecutors#directExecutor}, but consider whether another executor would be safer, as, +   *     discussed in the {@link ListenableFuture#addListener ListenableFuture.addListener}, +   *     documentation. This method is scheduled to be removed in April 2018., +  @Deprecated]