[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultimap.java, +import java.util.Map.Entry;, +  private abstract class Itr<T> implements Iterator<T> {, +    final Iterator<Map.Entry<K, Collection<V>>> keyIterator;, +    K key;, +    Collection<V> collection;, +    Iterator<V> valueIterator;, +, +    Itr() {, +      keyIterator = map.entrySet().iterator();, +      key = null;, +      collection = null;, +      valueIterator = Iterators.emptyModifiableIterator();, +    }, +, +    abstract T output(K key, V value);, +, +    @Override, +    public boolean hasNext() {, +      return keyIterator.hasNext() || valueIterator.hasNext();, +    }, +, +    @Override, +    public T next() {, +      if (!valueIterator.hasNext()) {, +        Map.Entry<K, Collection<V>> mapEntry = keyIterator.next();, +        key = mapEntry.getKey();, +        collection = mapEntry.getValue();, +        valueIterator = collection.iterator();, +      }, +      return output(key, valueIterator.next());, +    }, +, +    @Override, +    public void remove() {, +      valueIterator.remove();, +      if (collection.isEmpty()) {, +        keyIterator.remove();, +      }, +      totalSize--;, +    }, +  }, +, +  @Override, +  Iterator<V> valueIterator() {, +    return new Itr<V>() {, +      @Override, +      V output(K key, V value) {, +        return value;, +      }, +    };, +  }, +, +    return new Itr<Map.Entry<K, V>>() {, +      Entry<K, V> output(K key, V value) {, +        return Maps.immutableEntry(key, value);, +    };, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultimap.java, +import java.util.Map.Entry;, +  private abstract class Itr<T> implements Iterator<T> {, +    final Iterator<Map.Entry<K, Collection<V>>> keyIterator;, +    K key;, +    Collection<V> collection;, +    Iterator<V> valueIterator;, +, +    Itr() {, +      keyIterator = map.entrySet().iterator();, +      key = null;, +      collection = null;, +      valueIterator = Iterators.emptyModifiableIterator();, +    }, +, +    abstract T output(K key, V value);, +, +    @Override, +    public boolean hasNext() {, +      return keyIterator.hasNext() || valueIterator.hasNext();, +    }, +, +    @Override, +    public T next() {, +      if (!valueIterator.hasNext()) {, +        Map.Entry<K, Collection<V>> mapEntry = keyIterator.next();, +        key = mapEntry.getKey();, +        collection = mapEntry.getValue();, +        valueIterator = collection.iterator();, +      }, +      return output(key, valueIterator.next());, +    }, +, +    @Override, +    public void remove() {, +      valueIterator.remove();, +      if (collection.isEmpty()) {, +        keyIterator.remove();, +      }, +      totalSize--;, +    }, +  }, +]