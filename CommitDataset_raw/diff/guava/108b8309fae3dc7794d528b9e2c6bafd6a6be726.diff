[+++ b/android/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import com.google.common.collect.ImmutableSortedMultiset.Builder;, +  public void testReuseBuilder() {, +    Builder<String> builder = ImmutableSortedMultiset.<String>naturalOrder().add("a").add("b").add("a").add("c");, +    ImmutableSortedMultiset<String> multiset1 =, +        builder.build();, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset1);, +    ImmutableSortedMultiset<String> multiset2 = builder.add("c").build();, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset1);, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c", "c")), multiset2);, +    assertTrue(, +        ((RegularImmutableList<String>), +                    ((RegularImmutableSortedMultiset<String>) multiset1).elementSet.elements), +                .array, +            != builder.elements);, +  }, +, +  public void testBuilderSetCountZero() {, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.<String>naturalOrder().add("a").setCount("a", 2).setCount("b", 3), +        .setCount("a", 0), +            .build();, +    assertEquals(HashMultiset.create(asList("b", "b", "b")), multiset);, +  }, +, +  public void testBuilderSetCountThenAdd() {, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.<String>naturalOrder(), +            .add("a"), +            .setCount("a", 2), +            .setCount("b", 3), +            .setCount("a", 1), +            .add("a"), +            .build();, +    assertEquals(HashMultiset.create(asList("a", "a", "b", "b", "b")), multiset);, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import com.google.common.collect.ImmutableSortedMultiset.Builder;, +  public void testReuseBuilder() {, +    Builder<String> builder = ImmutableSortedMultiset.<String>naturalOrder().add("a").add("b").add("a").add("c");, +    ImmutableSortedMultiset<String> multiset1 =, +        builder.build();, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset1);, +    ImmutableSortedMultiset<String> multiset2 = builder.add("c").build();, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset1);, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c", "c")), multiset2);, +    assertTrue(, +        ((RegularImmutableList<String>), +                    ((RegularImmutableSortedMultiset<String>) multiset1).elementSet.elements), +                .array, +            != builder.elements);, +  }, +, +  public void testBuilderSetCountZero() {, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.<String>naturalOrder().add("a").setCount("a", 2).setCount("b", 3), +        .setCount("a", 0), +            .build();, +    assertEquals(HashMultiset.create(asList("b", "b", "b")), multiset);, +  }, +, +  public void testBuilderSetCountThenAdd() {, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.<String>naturalOrder(), +            .add("a"), +            .setCount("a", 2), +            .setCount("b", 3), +            .setCount("a", 1), +            .add("a"), +            .build();, +    assertEquals(HashMultiset.create(asList("a", "a", "b", "b", "b")), multiset);, +  }, +, +++ b/android/guava/src/com/google/common/collect/ImmutableMultiset.java, +    , +    Builder(boolean forSubtype) {, +      // for ImmutableSortedMultiset not to allocate data structures not used there, +      this.contents = null;, +    }, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java, +import com.google.common.collect.ImmutableSortedMultiset.Builder;, +  public void testReuseBuilder() {, +    Builder<String> builder = ImmutableSortedMultiset.<String>naturalOrder().add("a").add("b").add("a").add("c");, +    ImmutableSortedMultiset<String> multiset1 =, +        builder.build();, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset1);, +    ImmutableSortedMultiset<String> multiset2 = builder.add("c").build();, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c")), multiset1);, +    assertEquals(HashMultiset.create(asList("a", "b", "a", "c", "c")), multiset2);, +    assertTrue(, +        ((RegularImmutableList<String>), +                    ((RegularImmutableSortedMultiset<String>) multiset1).elementSet.elements), +                .array, +            != builder.elements);, +  }, +, +  public void testBuilderSetCountZero() {, +    ImmutableSortedMultiset<String> multiset =, +        ImmutableSortedMultiset.<String>naturalOrder().add("a").setCount("a", 2).setCount("b", 3)]