[+++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ImmutableTableTest.java, +  , +  public void testOverflowCondition() {, +    // See https://code.google.com/p/guava-libraries/issues/detail?id=1322 for details., +    ImmutableTable.Builder<Integer, Integer, String> builder = ImmutableTable.builder();, +    for (int i = 1; i < 0x10000; i++) {, +      builder.put(i, 0, "foo");, +      builder.put(0, i, "bar");, +    }, +    assertTrue(builder.build() instanceof SparseImmutableTable);, +  }, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ImmutableTableTest.java, +  , +  public void testOverflowCondition() {, +    // See https://code.google.com/p/guava-libraries/issues/detail?id=1322 for details., +    ImmutableTable.Builder<Integer, Integer, String> builder = ImmutableTable.builder();, +    for (int i = 1; i < 0x10000; i++) {, +      builder.put(i, 0, "foo");, +      builder.put(0, i, "bar");, +    }, +    assertTrue(builder.build() instanceof SparseImmutableTable);, +  }, +++ b/guava-gwt/test/com/google/common/collect/ImmutableTableTest_gwt.java, +public void testOverflowCondition() throws Exception {, +  com.google.common.collect.ImmutableTableTest testCase = new com.google.common.collect.ImmutableTableTest();, +  testCase.setUp();, +  testCase.testOverflowCondition();, +}, +, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ImmutableTableTest.java, +  , +  public void testOverflowCondition() {, +    // See https://code.google.com/p/guava-libraries/issues/detail?id=1322 for details., +    ImmutableTable.Builder<Integer, Integer, String> builder = ImmutableTable.builder();, +    for (int i = 1; i < 0x10000; i++) {, +      builder.put(i, 0, "foo");, +      builder.put(0, i, "bar");, +    }, +    assertTrue(builder.build() instanceof SparseImmutableTable);, +  }, +++ b/guava-gwt/test/com/google/common/collect/ImmutableTableTest_gwt.java, +public void testOverflowCondition() throws Exception {, +  com.google.common.collect.ImmutableTableTest testCase = new com.google.common.collect.ImmutableTableTest();, +  testCase.setUp();, +  testCase.testOverflowCondition();, +}, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableTableTest.java, +, +  public void testOverflowCondition() {, +    // See https://code.google.com/p/guava-libraries/issues/detail?id=1322 for details., +    ImmutableTable.Builder<Integer, Integer, String> builder = ImmutableTable.builder();, +    for (int i = 1; i < 0x10000; i++) {, +      builder.put(i, 0, "foo");, +      builder.put(0, i, "bar");, +    }, +    assertTrue(builder.build() instanceof SparseImmutableTable);, +  }, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/ImmutableTableTest.java, +  , +  public void testOverflowCondition() {, +    // See https://code.google.com/p/guava-libraries/issues/detail?id=1322 for details., +    ImmutableTable.Builder<Integer, Integer, String> builder = ImmutableTable.builder();, +    for (int i = 1; i < 0x10000; i++) {, +      builder.put(i, 0, "foo");, +      builder.put(0, i, "bar");, +    }, +    assertTrue(builder.build() instanceof SparseImmutableTable);, +  }, +++ b/guava-gwt/test/com/google/common/collect/ImmutableTableTest_gwt.java, +public void testOverflowCondition() throws Exception {, +  com.google.common.collect.ImmutableTableTest testCase = new com.google.common.collect.ImmutableTableTest();, +  testCase.setUp();, +  testCase.testOverflowCondition();, +}, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableTableTest.java, +, +  public void testOverflowCondition() {, +    // See https://code.google.com/p/guava-libraries/issues/detail?id=1322 for details., +    ImmutableTable.Builder<Integer, Integer, String> builder = ImmutableTable.builder();, +    for (int i = 1; i < 0x10000; i++) {, +      builder.put(i, 0, "foo");, +      builder.put(0, i, "bar");, +    }, +    assertTrue(builder.build() instanceof SparseImmutableTable);, +  }, +++ b/guava/src/com/google/common/collect/RegularImmutableTable.java, +    return (cellList.size() > (((long) rowSpace.size() * columnSpace.size()) / 2)) ?]