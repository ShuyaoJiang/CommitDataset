[+++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java, +  public void testEviction_invalidateAll() {, +    // test that .invalidateAll() resets total weight state correctly, +    IdentityLoader<Integer> loader = identityLoader();, +    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder(), +        .concurrencyLevel(1), +        .maximumSize(10), +        .build(loader);, +, +    Set<Integer> keySet = cache.asMap().keySet();, +    ASSERT.that(keySet).isEmpty();, +, +    // add 0, 1, 2, 3, 4, +    getAll(cache, asList(0, 1, 2, 3, 4));, +    CacheTesting.drainRecencyQueues(cache);, +    ASSERT.that(keySet).hasContentsAnyOrder(0, 1, 2, 3, 4);, +, +    // invalidate all, +    cache.invalidateAll();, +    CacheTesting.drainRecencyQueues(cache);, +    ASSERT.that(keySet).isEmpty();, +, +    // add 5, 6, 7, 8, 9, 10, 11, 12, +    getAll(cache, asList(5, 6, 7, 8, 9, 10, 11, 12));, +    CacheTesting.drainRecencyQueues(cache);, +    ASSERT.that(keySet).hasContentsAnyOrder(5, 6, 7, 8, 9, 10, 11, 12);, +  }, +, +++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java, +  public void testEviction_invalidateAll() {, +    // test that .invalidateAll() resets total weight state correctly, +    IdentityLoader<Integer> loader = identityLoader();, +    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder(), +        .concurrencyLevel(1), +        .maximumSize(10), +        .build(loader);, +, +    Set<Integer> keySet = cache.asMap().keySet();, +    ASSERT.that(keySet).isEmpty();, +, +    // add 0, 1, 2, 3, 4, +    getAll(cache, asList(0, 1, 2, 3, 4));, +    CacheTesting.drainRecencyQueues(cache);, +    ASSERT.that(keySet).hasContentsAnyOrder(0, 1, 2, 3, 4);, +, +    // invalidate all, +    cache.invalidateAll();, +    CacheTesting.drainRecencyQueues(cache);, +    ASSERT.that(keySet).isEmpty();, +, +    // add 5, 6, 7, 8, 9, 10, 11, 12, +    getAll(cache, asList(5, 6, 7, 8, 9, 10, 11, 12));, +    CacheTesting.drainRecencyQueues(cache);, +    ASSERT.that(keySet).hasContentsAnyOrder(5, 6, 7, 8, 9, 10, 11, 12);, +  }, +, +++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +    segment.totalWeight = 1;, +    assertEquals(0, segment.totalWeight);, +  }, +, +  public void testClear_notification() {, +    QueuingRemovalListener<Object, Object> listener = queuingRemovalListener();, +    LocalCache<Object, Object> map = makeLocalCache(createCacheBuilder(), +        .concurrencyLevel(1), +        .initialCapacity(1), +        .maximumSize(SMALL_MAX_SIZE), +        .expireAfterWrite(99999, SECONDS), +        .removalListener(listener));, +    Segment<Object, Object> segment = map.segments[0];, +    AtomicReferenceArray<ReferenceEntry<Object, Object>> table = segment.table;, +    assertEquals(1, table.length());, +, +    Object key = new Object();, +    Object value = new Object();, +    int hash = map.hash(key);, +    DummyEntry<Object, Object> entry = createDummyEntry(key, hash, value, null);, +    segment.recordWrite(entry, 1, map.ticker.read());, +    segment.table.set(0, entry);, +    segment.readCount.incrementAndGet();, +    segment.count = 1;, +    segment.totalWeight = 1;, +, +    assertSame(entry, table.get(0));, +    assertSame(entry, segment.accessQueue.peek());, +    assertSame(entry, segment.writeQueue.peek());, +, +    segment.clear();, +    assertNull(table.get(0));, +    assertTrue(segment.accessQueue.isEmpty());, +    assertTrue(segment.writeQueue.isEmpty());, +    assertEquals(0, segment.readCount.get());, +    assertEquals(0, segment.count);, +    assertEquals(0, segment.totalWeight);, +    assertNotified(listener, key, value, RemovalCause.EXPLICIT);, +++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java, +  public void testEviction_invalidateAll() {, +    // test that .invalidateAll() resets total weight state correctly, +    IdentityLoader<Integer> loader = identityLoader();, +    LoadingCache<Integer, Integer> cache = CacheBuilder.newBuilder()]