[+++ /dev/null, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  static final ImmutableList<Object> EMPTY = , +      new RegularImmutableList<Object>(Collections.emptyList());, +  , +    return (ImmutableList<E>) EMPTY;, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  static final ImmutableList<Object> EMPTY = , +      new RegularImmutableList<Object>(Collections.emptyList());, +  , +    return (ImmutableList<E>) EMPTY;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    Preconditions.checkPositionIndex(index, length);, +    if (length == 0) {, +      return emptyListIterator();, +    }, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  static final ImmutableList<Object> EMPTY = , +      new RegularImmutableList<Object>(Collections.emptyList());, +  , +    return (ImmutableList<E>) EMPTY;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    Preconditions.checkPositionIndex(index, length);, +    if (length == 0) {, +      return emptyListIterator();, +    }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    // TODO(user): worth optimizing for RandomAccess?, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  static final ImmutableList<Object> EMPTY = , +      new RegularImmutableList<Object>(Collections.emptyList());, +  , +    return (ImmutableList<E>) EMPTY;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    Preconditions.checkPositionIndex(index, length);, +    if (length == 0) {, +      return emptyListIterator();, +    }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    // TODO(user): worth optimizing for RandomAccess?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +    if (length == 0) {, +      return EMPTY_ARRAY;, +    }, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  static final ImmutableList<Object> EMPTY = , +      new RegularImmutableList<Object>(Collections.emptyList());, +  , +    return (ImmutableList<E>) EMPTY;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    Preconditions.checkPositionIndex(index, length);, +    if (length == 0) {, +      return emptyListIterator();, +    }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    // TODO(user): worth optimizing for RandomAccess?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +    if (length == 0) {, +      return EMPTY_ARRAY;, +    }, +++ /dev/null, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +  static final ImmutableList<Object> EMPTY = , +      new RegularImmutableList<Object>(Collections.emptyList());, +  , +    return (ImmutableList<E>) EMPTY;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +    Preconditions.checkPositionIndex(index, length);, +    if (length == 0) {, +      return emptyListIterator();, +    }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Lists.java, +    // TODO(user): worth optimizing for RandomAccess?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +    if (length == 0) {, +      return EMPTY_ARRAY;, +    }, +++ /dev/null, +++ b/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +import java.util.Random;, +, +  public enum ListSizeDistribution {, +    UNIFORM_0_TO_2(0, 2), UNIFORM_0_TO_9(0, 9), ALWAYS_0(0, 0), ALWAYS_10(10, 10);, +, +    final int min;, +    final int max;, +, +    private ListSizeDistribution(int min, int max) {, +      this.min = min;, +      this.max = max;, +    }, +, +    public int chooseSize(Random random) {, +      return random.nextInt(max - min + 1) + min;]