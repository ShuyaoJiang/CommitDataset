[+++ b/guava/src/com/google/common/base/FinalizablePhantomReference.java, +public, +abstract class FinalizablePhantomReference<T> extends PhantomReference<T>, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizablePhantomReference.java, +public, +abstract class FinalizablePhantomReference<T> extends PhantomReference<T>, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizableReference.java, +public, +interface FinalizableReference {, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizablePhantomReference.java, +public, +abstract class FinalizablePhantomReference<T> extends PhantomReference<T>, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizableReference.java, +public, +interface FinalizableReference {, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizableReferenceQueue.java, +public, +class FinalizableReferenceQueue {, +   *, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +  @SuppressWarnings("deprecation"), +++ b/guava/src/com/google/common/base/FinalizablePhantomReference.java, +public, +abstract class FinalizablePhantomReference<T> extends PhantomReference<T>, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizableReference.java, +public, +interface FinalizableReference {, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizableReferenceQueue.java, +public, +class FinalizableReferenceQueue {, +   *, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +  @SuppressWarnings("deprecation"), +++ b/guava/src/com/google/common/base/FinalizableSoftReference.java, +public, +abstract class FinalizableSoftReference<T> extends SoftReference<T>, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizablePhantomReference.java, +public, +abstract class FinalizablePhantomReference<T> extends PhantomReference<T>, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated, +++ b/guava/src/com/google/common/base/FinalizableReference.java, +public, +interface FinalizableReference {, +   * @deprecated FinalizableReferenceQueue is an unsound mechanism for cleaning up references,, +   *     because (1) it's single thread can be easily overloaded, and (2) it's insistance on running, +   *     a background thread is problematic in certain environments. <b>This class is scheduled for, +   *     deletion in December 2012.</b>, +  @Deprecated]