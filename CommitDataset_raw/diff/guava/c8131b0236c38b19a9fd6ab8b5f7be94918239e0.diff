[+++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +   * Returns 1 if {@code x < y} as unsigned integers, and 0 otherwise. Assumes that x - y fits into, +   * a signed int. The implementation is branch-free, and benchmarks suggest it is measurably (if, +   * narrowly) faster than the straightforward ternary expression., +   */, +  @VisibleForTesting, +  static int lessThanBranchFree(int x, int y) {, +    // The double negation is optimized away by normal Java, but is necessary for GWT, +    // to make sure bit twiddling works as expected., +    return ~~(x - y) >>> (Integer.SIZE - 1);, +  }, +, +  /**, +        return logFloor + lessThanBranchFree(cmp, x);, +     * y is the higher of the two possible values of floor(log10(x)). If x < 10^y, then we want the, +     * lower of the two possible values, or y - 1, otherwise, we want y., +    return y - lessThanBranchFree(x, powersOf10[y]);, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +   * Returns 1 if {@code x < y} as unsigned integers, and 0 otherwise. Assumes that x - y fits into, +   * a signed int. The implementation is branch-free, and benchmarks suggest it is measurably (if, +   * narrowly) faster than the straightforward ternary expression., +   */, +  @VisibleForTesting, +  static int lessThanBranchFree(int x, int y) {, +    // The double negation is optimized away by normal Java, but is necessary for GWT, +    // to make sure bit twiddling works as expected., +    return ~~(x - y) >>> (Integer.SIZE - 1);, +  }, +, +  /**, +        return logFloor + lessThanBranchFree(cmp, x);, +     * y is the higher of the two possible values of floor(log10(x)). If x < 10^y, then we want the, +     * lower of the two possible values, or y - 1, otherwise, we want y., +    return y - lessThanBranchFree(x, powersOf10[y]);, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +   * Returns 1 if {@code x < y} as unsigned longs, and 0 otherwise.  Assumes that x - y fits into a, +   * signed long.  The implementation is branch-free, and benchmarks suggest it is measurably, +   * faster than the straightforward ternary expression., +   */, +  @VisibleForTesting, +  static int lessThanBranchFree(long x, long y) {, +    // Returns the sign bit of x - y., +    return (int) (~~(x - y) >>> (Long.SIZE - 1));, +  }, +, +  /**, +        return logFloor + lessThanBranchFree(cmp, x);, +  static boolean fitsInInt(long x) {, +    return (int) x == x;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/IntMath.java, +   * Returns 1 if {@code x < y} as unsigned integers, and 0 otherwise. Assumes that x - y fits into, +   * a signed int. The implementation is branch-free, and benchmarks suggest it is measurably (if, +   * narrowly) faster than the straightforward ternary expression., +   */, +  @VisibleForTesting, +  static int lessThanBranchFree(int x, int y) {, +    // The double negation is optimized away by normal Java, but is necessary for GWT, +    // to make sure bit twiddling works as expected., +    return ~~(x - y) >>> (Integer.SIZE - 1);, +  }, +, +  /**, +        return logFloor + lessThanBranchFree(cmp, x);, +     * y is the higher of the two possible values of floor(log10(x)). If x < 10^y, then we want the, +     * lower of the two possible values, or y - 1, otherwise, we want y., +    return y - lessThanBranchFree(x, powersOf10[y]);, +++ b/guava-gwt/src-super/com/google/common/math/super/com/google/common/math/LongMath.java, +   * Returns 1 if {@code x < y} as unsigned longs, and 0 otherwise.  Assumes that x - y fits into a, +   * signed long.  The implementation is branch-free, and benchmarks suggest it is measurably, +   * faster than the straightforward ternary expression., +   */, +  @VisibleForTesting, +  static int lessThanBranchFree(long x, long y) {, +    // Returns the sign bit of x - y., +    return (int) (~~(x - y) >>> (Long.SIZE - 1));, +  }, +, +  /**, +        return logFloor + lessThanBranchFree(cmp, x);, +  static boolean fitsInInt(long x) {, +    return (int) x == x;, +  }, +, +++ b/guava-tests/benchmark/com/google/common/math/LessThanBenchmark.java, +/*, + * Copyright (C) 2013 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]