[+++ b/guava/src/com/google/common/collect/ConcurrentHashMultiset.java, + * A multiset that supports concurrent modifications and that provides atomic versions of most, + * {@code Multiset} operations (exceptions where noted). Null elements are not supported., +  // This constant allows the deserialization code to set a final field. This holder class, +  // makes sure it is not initialized unless an instance is deserialized., +   * Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using, +   * the default initial capacity, load factor, and concurrency settings., +   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}., +   * Creates an instance using {@code countMap} to store elements and their counts., +   * <p>If the data in the multiset is modified by any other threads during this method,, +   * it is undefined which (if any) of these modifications will be reflected in the result., +   * @return the previous count of the element before the operation; possibly zero, +   * Removes a number of occurrences of the specified element from this multiset. If the multiset, +   * contains fewer than this number of occurrences to begin with, all occurrences will be removed., +   * Removes exactly the specified number of occurrences of {@code element}, or makes no, +   * change if this is not possible., +   * <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the, +   * element count is smaller than {@code occurrences}., +   * @return {@code true} if the removal was possible (including if {@code occurrences} is zero), +   * Adds or removes occurrences of {@code element} such that the {@link #count} of the, +   * element becomes {@code count}., +   * Sets the number of occurrences of {@code element} to {@code newCount}, but only if, +   * the count is currently {@code expectedOldCount}. If {@code element} does not appear, +   * in the multiset exactly {@code expectedOldCount} times, no changes will be made.]