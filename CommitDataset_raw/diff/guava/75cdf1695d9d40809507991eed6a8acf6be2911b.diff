[+++ b/guava-tests/test/com/google/common/cache/CustomConcurrentHashMapTest.java, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +import static org.easymock.EasyMock.createMock;, +import com.google.common.testing.SerializableTester;, +import java.io.Serializable;, +      CacheBuilder<K, V> builder, CacheLoader<? super K, V> loader) {, +  public void testNullParameters() throws Exception {, +    NullPointerTester tester = new NullPointerTester();, +    tester.testAllPublicInstanceMethods(makeMap(createCacheBuilder()));, +    CacheLoader<Object, Object> loader = identityLoader();, +    tester.testAllPublicInstanceMethods(makeComputingMap(createCacheBuilder(), loader));, +  }, +, +  @SuppressWarnings("unchecked") // createMock, +  public void testSerializationProxy() {, +    CacheLoader<Object, Object> loader = new SerializableCacheLoader();, +    RemovalListener<Object, Object> listener = new SerializableRemovalListener<Object, Object>();, +    Ticker ticker = new SerializableTicker();, +    ComputingCache<Object, Object> one = (ComputingCache) CacheBuilder.newBuilder(), +        .weakKeys(), +        .softValues(), +        .expireAfterAccess(123, NANOSECONDS), +        .maximumSize(789), +        .concurrencyLevel(12), +        .removalListener(listener), +        .ticker(ticker), +        .build(loader);, +    // add a non-serializable entry, +    one.getUnchecked(new Object());, +    assertEquals(1, one.size());, +    assertFalse(one.asMap().isEmpty());, +    ComputingCache<Object, Object> two = SerializableTester.reserialize(one);, +    assertEquals(0, two.size());, +    assertTrue(two.asMap().isEmpty());, +, +    CustomConcurrentHashMap<Object, Object> mapOne = one.map;, +    CustomConcurrentHashMap<Object, Object> mapTwo = two.map;, +, +    assertEquals(mapOne.loader, mapTwo.loader);, +    assertEquals(mapOne.keyStrength, mapTwo.keyStrength);, +    assertEquals(mapOne.keyStrength, mapTwo.keyStrength);, +    assertEquals(mapOne.valueEquivalence, mapTwo.valueEquivalence);, +    assertEquals(mapOne.valueEquivalence, mapTwo.valueEquivalence);, +    assertEquals(mapOne.maximumSize, mapTwo.maximumSize);, +    assertEquals(mapOne.expireAfterAccessNanos, mapTwo.expireAfterAccessNanos);, +    assertEquals(mapOne.expireAfterWriteNanos, mapTwo.expireAfterWriteNanos);, +    assertEquals(mapOne.removalListener, mapTwo.removalListener);, +    assertEquals(mapOne.ticker, mapTwo.ticker);, +  }, +, +  private static class SerializableCacheLoader, +      extends CacheLoader<Object, Object> implements Serializable {, +    public Object load(Object key) {, +      return new Object();, +    }, +, +    public int hashCode() {, +      return 42;, +    }, +, +    public boolean equals(Object o) {, +      return (o instanceof SerializableCacheLoader);, +    }, +  }, +, +  private static class SerializableRemovalListener<K, V>, +      implements RemovalListener<K, V>, Serializable {, +    public void onRemoval(RemovalNotification<K, V> notification) {}, +, +    public int hashCode() {, +      return 42;, +    }, +, +    public boolean equals(Object o) {, +      return (o instanceof SerializableRemovalListener);, +    }, +  }, +, +  private static class SerializableTicker extends Ticker implements Serializable {, +    public long read() {, +      return 42;, +    }, +, +    public int hashCode() {, +      return 42;, +    }, +, +    public boolean equals(Object o) {, +      return (o instanceof SerializableTicker);, +    }, +++ b/guava-tests/test/com/google/common/cache/CustomConcurrentHashMapTest.java, +import static java.util.concurrent.TimeUnit.NANOSECONDS;, +import static org.easymock.EasyMock.createMock;, +import com.google.common.testing.SerializableTester;, +import java.io.Serializable;, +      CacheBuilder<K, V> builder, CacheLoader<? super K, V> loader) {, +  public void testNullParameters() throws Exception {, +    NullPointerTester tester = new NullPointerTester();, +    tester.testAllPublicInstanceMethods(makeMap(createCacheBuilder()));, +    CacheLoader<Object, Object> loader = identityLoader();]