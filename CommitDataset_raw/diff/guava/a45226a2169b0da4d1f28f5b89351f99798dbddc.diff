[+++ b/guava/src/com/google/common/util/concurrent/RateLimiter.java, +  // Can't be initialized in the constructor because mocks don't call the constructor., +  private volatile Object mutexDoNotUseDirectly;, +, +  private Object mutex() {, +    Object mutex = mutexDoNotUseDirectly;, +    if (mutex == null) {, +      synchronized (this) {, +        mutex = mutexDoNotUseDirectly;, +        if (mutex == null) {, +          mutexDoNotUseDirectly = mutex = new Object();, +        }, +      }, +    }, +    return mutex;, +  }, +    synchronized (mutex()) {, +  public final double getRate() {, +    synchronized (mutex()) {, +      return doGetRate();, +    }, +  }, +, +  abstract double doGetRate();, +    synchronized (mutex()) {, +    synchronized (mutex()) {, +      if (!canAcquire(nowMicros, timeoutMicros)) {, +  private final boolean canAcquire(long nowMicros, long timeoutMicros) {, +    return earliestAvailable(nowMicros) <= nowMicros + timeoutMicros;, +  }, +, +  abstract long earliestAvailable(long nowMicros);, +    double stableIntervalMicros;, +    final double doGetRate() {, +    final long earliestAvailable(long nowMicros) {, +      return nextFreeTicketMicros;, +        void sleepMicrosUninterruptibly(long micros) {]