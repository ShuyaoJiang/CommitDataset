[+++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        switch (edgesConnecting.size()) {, +            case 0:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)).isNull();, +              break;, +            case 1:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)), +                  .isEqualTo(edgesConnecting.iterator().next());, +              break;, +            default:, +              try {, +                network.edgeConnectingOrNull(node, otherNode);, +                fail();, +              } catch (IllegalArgumentException expected) {}, +        }, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        switch (edgesConnecting.size()) {, +            case 0:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)).isNull();, +              break;, +            case 1:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)), +                  .isEqualTo(edgesConnecting.iterator().next());, +              break;, +            default:, +              try {, +                network.edgeConnectingOrNull(node, otherNode);, +                fail();, +              } catch (IllegalArgumentException expected) {}, +        }, +++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, +    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();, +, +    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);, +, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        switch (edgesConnecting.size()) {, +            case 0:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)).isNull();, +              break;, +            case 1:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)), +                  .isEqualTo(edgesConnecting.iterator().next());, +              break;, +            default:, +              try {, +                network.edgeConnectingOrNull(node, otherNode);, +                fail();, +              } catch (IllegalArgumentException expected) {}, +        }, +++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, +    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();, +, +    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);, +, +++ b/android/guava/src/com/google/common/graph/AbstractNetwork.java, +import static com.google.common.graph.GraphConstants.MULTIPLE_EDGES_CONNECTING;, +  @Nullable, +  public E edgeConnectingOrNull(N nodeU, N nodeV) {, +    Set<E> edgesConnecting = edgesConnecting(nodeU, nodeV);, +    switch (edgesConnecting.size()) {, +      case 0:, +        return null;, +      case 1:, +        return edgesConnecting.iterator().next();, +      default:, +        throw new IllegalArgumentException(String.format(MULTIPLE_EDGES_CONNECTING, nodeU, nodeV));, +    }, +  }, +, +  @Override, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        switch (edgesConnecting.size()) {, +            case 0:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)).isNull();, +              break;, +            case 1:, +              assertThat(network.edgeConnectingOrNull(node, otherNode)), +                  .isEqualTo(edgesConnecting.iterator().next());, +              break;, +            default:, +              try {, +                network.edgeConnectingOrNull(node, otherNode);, +                fail();, +              } catch (IllegalArgumentException expected) {}, +        }, +++ b/android/guava-tests/test/com/google/common/graph/GraphsTest.java, +    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isNull();, +, +    assertThat(transpose.edgeConnectingOrNull(N1, N2)).isEqualTo(E21);, +, +++ b/android/guava/src/com/google/common/graph/AbstractNetwork.java, +import static com.google.common.graph.GraphConstants.MULTIPLE_EDGES_CONNECTING;, +  @Nullable, +  public E edgeConnectingOrNull(N nodeU, N nodeV) {, +    Set<E> edgesConnecting = edgesConnecting(nodeU, nodeV);, +    switch (edgesConnecting.size()) {, +      case 0:, +        return null;, +      case 1:]