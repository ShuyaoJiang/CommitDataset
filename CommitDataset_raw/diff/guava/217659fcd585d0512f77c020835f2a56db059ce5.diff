[+++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    @Override, +  @Override, +  final ImmutableSet<V> createValues() {, +    throw new AssertionError("should never be called");, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    @Override, +  @Override, +  final ImmutableSet<V> createValues() {, +    throw new AssertionError("should never be called");, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +, +    @Override, +    ImmutableCollection<V> createValues() {, +      return new ImmutableMapValues<K, V>(this);, +    }, +  /*, +   * This could have a good default implementation of {@code return new , +   * ImmutableMapValues<K, V>(this)}, but ProGuard can't figure out how to eliminate that default, +   * when RegularImmutableMap overrides it., +   */, +  abstract ImmutableCollection<V> createValues();, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +    @Override, +  @Override, +  final ImmutableSet<V> createValues() {, +    throw new AssertionError("should never be called");, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +, +    @Override, +    ImmutableCollection<V> createValues() {, +      return new ImmutableMapValues<K, V>(this);, +    }, +  /*, +   * This could have a good default implementation of {@code return new , +   * ImmutableMapValues<K, V>(this)}, but ProGuard can't figure out how to eliminate that default, +   * when RegularImmutableMap overrides it., +   */, +  abstract ImmutableCollection<V> createValues();, +++ b/guava/src/com/google/common/collect/ImmutableSortedMap.java, +  @Override, +  ImmutableCollection<V> createValues() {, +    throw new AssertionError("should never be called");, +  }, +]