[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +  static final ImmutableMap<Object, Object> EMPTY = new RegularImmutableMap<Object, Object>();, +, +    return (ImmutableMap<K, V>) EMPTY;, +    return new RegularImmutableMap<K, V>(entryOf(k1, v1));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +  static final ImmutableMap<Object, Object> EMPTY = new RegularImmutableMap<Object, Object>();, +, +    return (ImmutableMap<K, V>) EMPTY;, +    return new RegularImmutableMap<K, V>(entryOf(k1, v1));, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetMultimapTest.java, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +  static final ImmutableMap<Object, Object> EMPTY = new RegularImmutableMap<Object, Object>();, +, +    return (ImmutableMap<K, V>) EMPTY;, +    return new RegularImmutableMap<K, V>(entryOf(k1, v1));, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetMultimapTest.java, +, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +  @SuppressWarnings("unchecked"), +    return (ImmutableMap<K, V>) RegularImmutableMap.EMPTY;, +    return RegularImmutableMap.fromEntries(entryOf(k1, v1));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +  static final ImmutableMap<Object, Object> EMPTY = new RegularImmutableMap<Object, Object>();, +, +    return (ImmutableMap<K, V>) EMPTY;, +    return new RegularImmutableMap<K, V>(entryOf(k1, v1));, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetMultimapTest.java, +, +++ b/guava/src/com/google/common/collect/ImmutableMap.java, +  @SuppressWarnings("unchecked"), +    return (ImmutableMap<K, V>) RegularImmutableMap.EMPTY;, +    return RegularImmutableMap.fromEntries(entryOf(k1, v1));, +++ b/guava/src/com/google/common/collect/RegularImmutableMap.java, +  @SuppressWarnings("unchecked"), +  static final ImmutableMap<Object, Object> EMPTY =, +      new RegularImmutableMap<Object, Object>(, +          (Entry<Object, Object>[]) ImmutableMap.EMPTY_ENTRY_ARRAY, null, 0);, +    if (n == 0) {, +      return (RegularImmutableMap<K, V>) EMPTY;, +    }, +  static <V> V get(@Nullable Object key, @Nullable ImmutableMapEntry<?, V>[] keyTable, int mask) {, +    if (key == null || keyTable == null) {]