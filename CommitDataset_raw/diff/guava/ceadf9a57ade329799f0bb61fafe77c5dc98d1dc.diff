[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +, +    runGetIdempotencyTest(Futures.transform(errorInput, newOneTimeErrorThrower()), MyError.class);, +    final Error error = new Error("deliberate");, +    FutureFallback<Integer> fallback = new FutureFallback<Integer>() {, +      @Override public ListenableFuture<Integer> create(Throwable t) throws Exception {, +        throw error;, +    };, +    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());, +    try {, +      Futures.withFallback(failingFuture, fallback).get();, +      fail("An Exception should have been thrown!");, +    } catch (ExecutionException expected) {, +      assertSame(error, expected.getCause());, +    }, +  public void testTransform_asyncFunction_error() throws InterruptedException {, +    ListenableFuture<Integer> outputFuture = Futures.transform(inputFuture, function);, +    try {, +      outputFuture.get();, +    } catch (ExecutionException e) {, +      assertSame(error, e.getCause());, +    }, +      fail("Expected error not set in compound future.");, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +, +    runGetIdempotencyTest(Futures.transform(errorInput, newOneTimeErrorThrower()), MyError.class);, +    final Error error = new Error("deliberate");, +    FutureFallback<Integer> fallback = new FutureFallback<Integer>() {, +      @Override public ListenableFuture<Integer> create(Throwable t) throws Exception {, +        throw error;, +    };, +    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());, +    try {, +      Futures.withFallback(failingFuture, fallback).get();, +      fail("An Exception should have been thrown!");, +    } catch (ExecutionException expected) {, +      assertSame(error, expected.getCause());, +    }, +  public void testTransform_asyncFunction_error() throws InterruptedException {, +    ListenableFuture<Integer> outputFuture = Futures.transform(inputFuture, function);, +    try {, +      outputFuture.get();, +    } catch (ExecutionException e) {, +      assertSame(error, e.getCause());, +    }, +      fail("Expected error not set in compound future.");, +++ b/guava/src/com/google/common/cache/LocalCache.java, +      return futureValue.setException(t);, +      return Futures.immediateFailedFuture(t);, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +, +    runGetIdempotencyTest(Futures.transform(errorInput, newOneTimeErrorThrower()), MyError.class);, +    final Error error = new Error("deliberate");, +    FutureFallback<Integer> fallback = new FutureFallback<Integer>() {, +      @Override public ListenableFuture<Integer> create(Throwable t) throws Exception {, +        throw error;, +    };, +    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());, +    try {, +      Futures.withFallback(failingFuture, fallback).get();, +      fail("An Exception should have been thrown!");, +    } catch (ExecutionException expected) {, +      assertSame(error, expected.getCause());, +    }, +  public void testTransform_asyncFunction_error() throws InterruptedException {, +    ListenableFuture<Integer> outputFuture = Futures.transform(inputFuture, function);, +    try {, +      outputFuture.get();, +    } catch (ExecutionException e) {, +      assertSame(error, e.getCause());, +    }, +      fail("Expected error not set in compound future.");, +++ b/guava/src/com/google/common/cache/LocalCache.java, +      return futureValue.setException(t);, +      return Futures.immediateFailedFuture(t);, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractChainedListenableFutureTest.java, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +, +    runGetIdempotencyTest(Futures.transform(errorInput, newOneTimeErrorThrower()), MyError.class);, +    final Error error = new Error("deliberate");, +    FutureFallback<Integer> fallback = new FutureFallback<Integer>() {, +      @Override public ListenableFuture<Integer> create(Throwable t) throws Exception {, +        throw error;, +    };, +    ListenableFuture<Integer> failingFuture = Futures.immediateFailedFuture(new RuntimeException());, +    try {, +      Futures.withFallback(failingFuture, fallback).get();, +      fail("An Exception should have been thrown!");, +    } catch (ExecutionException expected) {, +      assertSame(error, expected.getCause());, +    }, +  public void testTransform_asyncFunction_error() throws InterruptedException {, +    ListenableFuture<Integer> outputFuture = Futures.transform(inputFuture, function);, +    try {, +      outputFuture.get();]