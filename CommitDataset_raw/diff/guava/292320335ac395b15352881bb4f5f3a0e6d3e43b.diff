[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +import static com.google.common.base.Objects.firstNonNull;, +      ImmutableSet<V> set = valueSet(valueComparator, values);, +  /**, +   * Returned by get() when a missing key is provided. Also holds the, +   * comparator, if any, used for values., +   */, +  private final transient ImmutableSet<V> emptySet;, +    this.emptySet = emptySet(valueComparator);, +    return firstNonNull(set, emptySet);, +, +  private static <V> ImmutableSet<V> valueSet(, +      @Nullable Comparator<? super V> valueComparator,, +      Collection<? extends V> values) {, +    return (valueComparator == null), +        ? ImmutableSet.copyOf(values), +        : ImmutableSortedSet.copyOf(valueComparator, values);, +  }, +, +  private static <V> ImmutableSet<V> emptySet(, +      @Nullable Comparator<? super V> valueComparator) {, +    return (valueComparator == null), +        ? ImmutableSet.<V>of(), +        : ImmutableSortedSet.<V>emptySet(valueComparator);, +  }, +, +  @Nullable Comparator<? super V> valueComparator() {, +    return emptySet instanceof ImmutableSortedSet, +        ? ((ImmutableSortedSet<V>) emptySet).comparator(), +        : null;, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +import static com.google.common.base.Objects.firstNonNull;, +      ImmutableSet<V> set = valueSet(valueComparator, values);, +  /**, +   * Returned by get() when a missing key is provided. Also holds the, +   * comparator, if any, used for values., +   */, +  private final transient ImmutableSet<V> emptySet;, +    this.emptySet = emptySet(valueComparator);, +    return firstNonNull(set, emptySet);, +, +  private static <V> ImmutableSet<V> valueSet(, +      @Nullable Comparator<? super V> valueComparator,, +      Collection<? extends V> values) {, +    return (valueComparator == null), +        ? ImmutableSet.copyOf(values), +        : ImmutableSortedSet.copyOf(valueComparator, values);, +  }, +, +  private static <V> ImmutableSet<V> emptySet(, +      @Nullable Comparator<? super V> valueComparator) {, +    return (valueComparator == null), +        ? ImmutableSet.<V>of(), +        : ImmutableSortedSet.<V>emptySet(valueComparator);, +  }, +, +  @Nullable Comparator<? super V> valueComparator() {, +    return emptySet instanceof ImmutableSortedSet, +        ? ((ImmutableSortedSet<V>) emptySet).comparator(), +        : null;, +  }, +++ b/guava-gwt/src/com/google/common/collect/ImmutableSetMultimap_CustomFieldSerializer.java, +import java.util.Comparator;, +, +  // Serialization type safety is at the caller's mercy., +  @SuppressWarnings("unchecked"), +    Comparator<Object> valueComparator = (Comparator<Object>) reader.readObject();, +    ImmutableSetMultimap.Builder<Object, Object> builder = ImmutableSetMultimap.builder();, +    if (valueComparator != null) {, +      builder.orderValuesBy(valueComparator);, +    }, +        Multimap_CustomFieldSerializerBase.instantiate(reader, builder);, +    writer.writeObject(instance.valueComparator());, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +import static com.google.common.base.Objects.firstNonNull;, +      ImmutableSet<V> set = valueSet(valueComparator, values);, +  /**, +   * Returned by get() when a missing key is provided. Also holds the, +   * comparator, if any, used for values., +   */, +  private final transient ImmutableSet<V> emptySet;, +    this.emptySet = emptySet(valueComparator);, +    return firstNonNull(set, emptySet);, +, +  private static <V> ImmutableSet<V> valueSet(, +      @Nullable Comparator<? super V> valueComparator,, +      Collection<? extends V> values) {, +    return (valueComparator == null), +        ? ImmutableSet.copyOf(values), +        : ImmutableSortedSet.copyOf(valueComparator, values);, +  }, +, +  private static <V> ImmutableSet<V> emptySet(, +      @Nullable Comparator<? super V> valueComparator) {, +    return (valueComparator == null), +        ? ImmutableSet.<V>of(), +        : ImmutableSortedSet.<V>emptySet(valueComparator);, +  }, +]