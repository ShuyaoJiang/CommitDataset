[+++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  final void maybePropagateCancellationTo(@Nullable Future<?> related) {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  final void maybePropagateCancellationTo(@Nullable Future<?> related) {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  final void maybePropagateCancellationTo(@Nullable Future<?> related) {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/Futures.java, +  private static void maybePropagateCancellation(, +      @Nullable ListenableFuture<?> from, @Nullable Future<?> to) {, +    // AbstractFuture can propagate the mayInterruptIfRunning bit., +    if (from instanceof AbstractFuture) {, +      ((AbstractFuture<?>) from).maybePropagateCancellationTo(to);, +    } else if (from != null && from.isCancelled() && to != null) {, +      to.cancel(false);, +    }, +  }, +, +  private static final class CancellationPropagater implements Runnable {, +    ListenableFuture<?> from;, +    Future<?> to;, +, +    CancellationPropagater(ListenableFuture<?> from, Future<?> to) {, +      this.from = from;, +      this.to = to;, +    }, +, +    @Override, +    public void run() {, +      maybePropagateCancellation(from, to);, +      from = null;, +      to = null;, +    }, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  final void maybePropagateCancellationTo(@Nullable Future<?> related) {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/Futures.java, +  private static void maybePropagateCancellation(, +      @Nullable ListenableFuture<?> from, @Nullable Future<?> to) {, +    // AbstractFuture can propagate the mayInterruptIfRunning bit., +    if (from instanceof AbstractFuture) {, +      ((AbstractFuture<?>) from).maybePropagateCancellationTo(to);, +    } else if (from != null && from.isCancelled() && to != null) {, +      to.cancel(false);, +    }, +  }, +, +  private static final class CancellationPropagater implements Runnable {, +    ListenableFuture<?> from;, +    Future<?> to;, +, +    CancellationPropagater(ListenableFuture<?> from, Future<?> to) {, +      this.from = from;, +      this.to = to;, +    }, +, +    @Override, +    public void run() {, +      maybePropagateCancellation(from, to);, +      from = null;, +      to = null;, +    }, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/TimeoutFuture.java, +    maybePropagateCancellationTo(delegateRef);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +  final void maybePropagateCancellationTo(@Nullable Future<?> related) {, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +    maybePropagateCancellationTo(inputFuture);, +++ b/android/guava/src/com/google/common/util/concurrent/Futures.java, +  private static void maybePropagateCancellation(, +      @Nullable ListenableFuture<?> from, @Nullable Future<?> to) {, +    // AbstractFuture can propagate the mayInterruptIfRunning bit., +    if (from instanceof AbstractFuture) {, +      ((AbstractFuture<?>) from).maybePropagateCancellationTo(to);, +    } else if (from != null && from.isCancelled() && to != null) {, +      to.cancel(false);, +    }, +  }, +, +  private static final class CancellationPropagater implements Runnable {]