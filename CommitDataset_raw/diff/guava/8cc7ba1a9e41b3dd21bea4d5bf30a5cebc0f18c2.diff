[+++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapConstraintsTest.java, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapConstraintsTest.java, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/TreeTraverserTest.java, +    assertThat(iterationOrder(ADAPTER.preOrderTraversal(h))).isEqualTo("hdabcegf");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");, +    assertThat(iterationOrder(ADAPTER.postOrderTraversal(h))).isEqualTo("abcdefgh");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");, +    assertThat(iterationOrder(ADAPTER.breadthFirstTraversal(h))).isEqualTo("hdegabcf");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.inOrderTraversal(bd))).isEqualTo("abcdegf");, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapConstraintsTest.java, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/TreeTraverserTest.java, +    assertThat(iterationOrder(ADAPTER.preOrderTraversal(h))).isEqualTo("hdabcegf");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");, +    assertThat(iterationOrder(ADAPTER.postOrderTraversal(h))).isEqualTo("abcdefgh");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");, +    assertThat(iterationOrder(ADAPTER.breadthFirstTraversal(h))).isEqualTo("hdegabcf");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.inOrderTraversal(bd))).isEqualTo("abcdegf");, +++ b/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java, +    assertThat(multimap().get(key).size()).isEqualTo((long) values.size());, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapConstraintsTest.java, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/TreeTraverserTest.java, +    assertThat(iterationOrder(ADAPTER.preOrderTraversal(h))).isEqualTo("hdabcegf");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.preOrderTraversal(bd))).isEqualTo("dbacefg");, +    assertThat(iterationOrder(ADAPTER.postOrderTraversal(h))).isEqualTo("abcdefgh");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.postOrderTraversal(bd))).isEqualTo("acbgfed");, +    assertThat(iterationOrder(ADAPTER.breadthFirstTraversal(h))).isEqualTo("hdegabcf");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.breadthFirstTraversal(bd))).isEqualTo("dbeacfg");, +    assertThat(binaryIterationOrder(BIN_ADAPTER.inOrderTraversal(bd))).isEqualTo("abcdegf");, +++ b/guava-testlib/src/com/google/common/collect/testing/google/AbstractMultimapTester.java, +    assertThat(multimap().get(key).size()).isEqualTo((long) values.size());, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +++ b/guava-gwt/test-super/com/google/common/base/super/com/google/common/base/SplitterTest.java, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +    assertThat(asList(m.entrySet())).isEqualTo(asList(expected.entrySet()));, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/MapConstraintsTest.java, +    assertThat(ImmutableList.copyOf(multimap.entries())).isEqualTo(, +        ImmutableList.copyOf(constrained.entries()));]