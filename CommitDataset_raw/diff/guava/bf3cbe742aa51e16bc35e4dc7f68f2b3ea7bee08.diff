[+++ b/guava/src/com/google/common/cache/AbstractCache.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.cache;, +, +import com.google.common.annotations.Beta;, +import com.google.common.collect.ImmutableList;, +import com.google.common.util.concurrent.UncheckedExecutionException;, +, +import java.util.Map;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.atomic.AtomicLong;, +, +import javax.annotation.Nullable;, +, +/**, + * This class provides a skeletal implementation of the {@code Cache} interface to minimize the, + * effort required to implement this interface., + *, + * <p>To implement a cache, the programmer needs only to extend this class and provide an, + * implementation for the {@code get} method., + *, + * @author Charles Fry, + * @since Guava release 10, + */, +@Beta, +public abstract class AbstractCache<K, V> implements Cache<K, V> {, +, +  /** Constructor for use by subclasses. */, +  protected AbstractCache() {}, +, +  @Override, +  @Nullable, +  public V getUnchecked(K key) {, +    try {, +      return get(key);, +    } catch (ExecutionException e) {, +      throw new UncheckedExecutionException(e.getCause());, +    }, +  }, +, +  @Override, +  @Nullable, +  public final V apply(K key) {, +    return getUnchecked(key);, +  }, +, +  @Override, +  public int size() {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public void invalidate(@Nullable Object key) {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public void invalidateAll() {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public CacheStats stats() {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public ImmutableList<Map.Entry<K, V>> activeEntries(int limit) {, +    throw new UnsupportedOperationException();, +  }, +, +  @Override, +  public ConcurrentMap<K, V> asMap() {, +    throw new UnsupportedOperationException();, +  }, +, +  /**, +   * Accumulates statistics during the operation of a {@link Cache} for presentation by {@link, +   * Cache#stats}. This is solely intended for consumption by {@code Cache} implementors., +   *, +   * @since Guava release 10, +   */, +  @Beta, +  public interface StatsCounter {]