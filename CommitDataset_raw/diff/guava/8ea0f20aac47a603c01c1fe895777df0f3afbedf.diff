[+++ b/guava/src/com/google/common/collect/ComparisonChain.java, + * A utility for performing a chained comparison statement. For example:, + * <p>Performance note: Even though the {@code ComparisonChain} caller always, + * invokes its {@code compare} methods unconditionally, the {@code, + * ComparisonChain} implementation stops calling its inputs' {@link, + * Comparable#compareTo compareTo} and {@link Comparator#compare compare}, + * methods as soon as one of them returns a nonzero result. This optimization is, + * typically important only in the presence of expensive {@code compareTo} and, + * {@code compare} implementations., +++ b/guava/src/com/google/common/collect/ComparisonChain.java, + * A utility for performing a chained comparison statement. For example:, + * <p>Performance note: Even though the {@code ComparisonChain} caller always, + * invokes its {@code compare} methods unconditionally, the {@code, + * ComparisonChain} implementation stops calling its inputs' {@link, + * Comparable#compareTo compareTo} and {@link Comparator#compare compare}, + * methods as soon as one of them returns a nonzero result. This optimization is, + * typically important only in the presence of expensive {@code compareTo} and, + * {@code compare} implementations., +++ b/guava/src/com/google/common/util/concurrent/ListenableFuture.java, +   * <li>If this {@code Future} is done at the time {@code addListener} is, +   * <li>If this {@code Future} is not yet done, {@code addListener} will, +   * schedule the listener to be run by the thread that completes this {@code, +   * Future}, which may be an internal system thread such as an RPC network, +   * thread., +++ b/guava/src/com/google/common/collect/ComparisonChain.java, + * A utility for performing a chained comparison statement. For example:, + * <p>Performance note: Even though the {@code ComparisonChain} caller always, + * invokes its {@code compare} methods unconditionally, the {@code, + * ComparisonChain} implementation stops calling its inputs' {@link, + * Comparable#compareTo compareTo} and {@link Comparator#compare compare}, + * methods as soon as one of them returns a nonzero result. This optimization is, + * typically important only in the presence of expensive {@code compareTo} and, + * {@code compare} implementations., +++ b/guava/src/com/google/common/util/concurrent/ListenableFuture.java, +   * <li>If this {@code Future} is done at the time {@code addListener} is, +   * <li>If this {@code Future} is not yet done, {@code addListener} will, +   * schedule the listener to be run by the thread that completes this {@code, +   * Future}, which may be an internal system thread such as an RPC network, +   * thread., +++ b/guava/src/com/google/common/util/concurrent/UncaughtExceptionHandlers.java, +   *, +   * <p>The returned handler logs any exception at severity {@code SEVERE} and then shuts down the, +   * process with an exit status of 1, indicating abnormal termination.]