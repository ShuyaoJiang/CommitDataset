[+++ b/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java, +import static com.google.common.collect.Maps.immutableEntry;, +, +import java.io.Serializable;, +    suite.addTest(, +        MapTestSuiteBuilder.using(, +                new TestClassToInstanceMapGenerator() {, +                  public Map<Class, Impl> create(Object... elements) {, +                    ImmutableClassToInstanceMap.Builder<Impl> builder =, +                        ImmutableClassToInstanceMap.builder();, +                      Entry<Class, Impl> entry = (Entry<Class, Impl>) object;, +  abstract static class TestClassToInstanceMapGenerator implements TestMapGenerator<Class, Impl> {, +    public Impl[] createValueArray(int length) {, +      return new Impl[length];, +    public SampleElements<Entry<Class, Impl>> samples() {, +      return new SampleElements<Entry<Class, Impl>>(, +          immutableEntry((Class) One.class, new Impl(1)),, +          immutableEntry((Class) Two.class, new Impl(2)),, +          immutableEntry((Class) Three.class, new Impl(3)),, +          immutableEntry((Class) Four.class, new Impl(4)),, +          immutableEntry((Class) Five.class, new Impl(5)));, +    public Entry<Class, Impl>[] createArray(int length) {, +    public Iterable<Entry<Class, Impl>> order(List<Entry<Class, Impl>> insertionOrder) {, +, +  private interface One {}, +, +  private interface Two {}, +, +  private interface Three {}, +, +  private interface Four {}, +, +  private interface Five {}, +, +  static final class Impl implements One, Two, Three, Four, Five, Serializable {, +    final int value;, +, +    Impl(int value) {, +      this.value = value;, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +      return obj instanceof Impl && value == ((Impl) obj).value;, +    }, +, +    @Override, +    public int hashCode() {, +      return value;, +    }, +, +    @Override, +    public String toString() {, +      return Integer.toString(value);, +    }, +  }, +++ b/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java, +import static com.google.common.collect.Maps.immutableEntry;, +, +import java.io.Serializable;, +    suite.addTest(, +        MapTestSuiteBuilder.using(, +                new TestClassToInstanceMapGenerator() {, +                  public Map<Class, Impl> create(Object... elements) {, +                    ImmutableClassToInstanceMap.Builder<Impl> builder =, +                        ImmutableClassToInstanceMap.builder();, +                      Entry<Class, Impl> entry = (Entry<Class, Impl>) object;, +  abstract static class TestClassToInstanceMapGenerator implements TestMapGenerator<Class, Impl> {, +    public Impl[] createValueArray(int length) {, +      return new Impl[length];, +    public SampleElements<Entry<Class, Impl>> samples() {, +      return new SampleElements<Entry<Class, Impl>>(, +          immutableEntry((Class) One.class, new Impl(1)),, +          immutableEntry((Class) Two.class, new Impl(2)),, +          immutableEntry((Class) Three.class, new Impl(3)),, +          immutableEntry((Class) Four.class, new Impl(4)),, +          immutableEntry((Class) Five.class, new Impl(5)));, +    public Entry<Class, Impl>[] createArray(int length) {, +    public Iterable<Entry<Class, Impl>> order(List<Entry<Class, Impl>> insertionOrder) {, +, +  private interface One {}, +, +  private interface Two {}, +, +  private interface Three {}, +, +  private interface Four {}, +, +  private interface Five {}, +, +  static final class Impl implements One, Two, Three, Four, Five, Serializable {, +    final int value;, +, +    Impl(int value) {, +      this.value = value;, +    }, +, +    @Override, +    public boolean equals(Object obj) {, +      return obj instanceof Impl && value == ((Impl) obj).value;]