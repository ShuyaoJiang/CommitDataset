[+++ b/android/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, +  final Comparator<? super T>[] comparators;, +    this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, +    this.comparators = Iterables.toArray(comparators, new Comparator[0]);, +    for (int i = 0; i < comparators.length; i++) {, +      int result = comparators[i].compare(left, right);, +      return Arrays.equals(this.comparators, that.comparators);, +    return Arrays.hashCode(comparators);, +    return "Ordering.compound(" + Arrays.toString(comparators) + ")";, +++ b/android/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, +  final Comparator<? super T>[] comparators;, +    this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, +    this.comparators = Iterables.toArray(comparators, new Comparator[0]);, +    for (int i = 0; i < comparators.length; i++) {, +      int result = comparators[i].compare(left, right);, +      return Arrays.equals(this.comparators, that.comparators);, +    return Arrays.hashCode(comparators);, +    return "Ordering.compound(" + Arrays.toString(comparators) + ")";, +++ b/android/guava/src/com/google/common/collect/Ordering.java, +      return Collections.emptyList();, +++ b/android/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, +  final Comparator<? super T>[] comparators;, +    this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, +    this.comparators = Iterables.toArray(comparators, new Comparator[0]);, +    for (int i = 0; i < comparators.length; i++) {, +      int result = comparators[i].compare(left, right);, +      return Arrays.equals(this.comparators, that.comparators);, +    return Arrays.hashCode(comparators);, +    return "Ordering.compound(" + Arrays.toString(comparators) + ")";, +++ b/android/guava/src/com/google/common/collect/Ordering.java, +      return Collections.emptyList();, +++ b/guava-gwt/src/com/google/common/collect/CompoundOrdering_CustomFieldSerializer.java, +import java.util.ArrayList;, +import java.util.List;, +    int n = reader.readInt();, +    List<Comparator<Object>> comparators = new ArrayList<>(n);, +    for (int i = 0; i < n; i++) {, +      comparators.add((Comparator<Object>) reader.readObject());, +    }, +    return new CompoundOrdering<Object>(comparators);, +    writer.writeInt(instance.comparators.length);, +    for (Comparator<?> comparator : instance.comparators) {, +      writer.writeObject(comparator);, +    }, +++ b/android/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, +  final Comparator<? super T>[] comparators;, +    this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, +    this.comparators = Iterables.toArray(comparators, new Comparator[0]);, +    for (int i = 0; i < comparators.length; i++) {, +      int result = comparators[i].compare(left, right);, +      return Arrays.equals(this.comparators, that.comparators);, +    return Arrays.hashCode(comparators);, +    return "Ordering.compound(" + Arrays.toString(comparators) + ")";, +++ b/android/guava/src/com/google/common/collect/Ordering.java, +      return Collections.emptyList();, +++ b/guava-gwt/src/com/google/common/collect/CompoundOrdering_CustomFieldSerializer.java, +import java.util.ArrayList;, +import java.util.List;, +    int n = reader.readInt();, +    List<Comparator<Object>> comparators = new ArrayList<>(n);, +    for (int i = 0; i < n; i++) {, +      comparators.add((Comparator<Object>) reader.readObject());, +    }, +    return new CompoundOrdering<Object>(comparators);, +    writer.writeInt(instance.comparators.length);, +    for (Comparator<?> comparator : instance.comparators) {, +      writer.writeObject(comparator);, +    }, +++ b/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, +  final Comparator<? super T>[] comparators;, +    this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, +    this.comparators = Iterables.toArray(comparators, new Comparator[0]);, +    for (int i = 0; i < comparators.length; i++) {, +      int result = comparators[i].compare(left, right);, +      return Arrays.equals(this.comparators, that.comparators);, +    return Arrays.hashCode(comparators);, +    return "Ordering.compound(" + Arrays.toString(comparators) + ")";, +++ b/android/guava/src/com/google/common/collect/CompoundOrdering.java, +import java.util.Arrays;, +  final Comparator<? super T>[] comparators;, +    this.comparators = (Comparator<? super T>[]) new Comparator[] {primary, secondary};, +    this.comparators = Iterables.toArray(comparators, new Comparator[0]);, +    for (int i = 0; i < comparators.length; i++) {, +      int result = comparators[i].compare(left, right);, +      return Arrays.equals(this.comparators, that.comparators);, +    return Arrays.hashCode(comparators);, +    return "Ordering.compound(" + Arrays.toString(comparators) + ")";, +++ b/android/guava/src/com/google/common/collect/Ordering.java, +      return Collections.emptyList();, +++ b/guava-gwt/src/com/google/common/collect/CompoundOrdering_CustomFieldSerializer.java, +import java.util.ArrayList;, +import java.util.List;, +    int n = reader.readInt();, +    List<Comparator<Object>> comparators = new ArrayList<>(n);, +    for (int i = 0; i < n; i++) {]