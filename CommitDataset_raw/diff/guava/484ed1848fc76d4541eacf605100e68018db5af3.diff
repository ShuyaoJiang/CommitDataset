[+++ b/guava/src/com/google/common/primitives/UnsignedInteger.java, +  /**, +   * Returns an {@code UnsignedInteger} that, when treated as signed, is, +   * equal to {@code value}., +   */, +  /**, +   * Returns an {@code UnsignedInteger} that is equal to {@code value},, +   * if possible.  The inverse operation of {@link #longValue()}., +   */, +   * <p>Note that if this {@code UnsignedInteger} holds a value {@code >= 2^31}, the returned value, +  /**, +   * Compares this unsigned integer to another unsigned integer., +   * Returns {@code 0} if they are equal, a negative number if {@code this < other},, +   * and a positive number if {@code this > other}., +   */, +++ b/guava/src/com/google/common/primitives/UnsignedInteger.java, +  /**, +   * Returns an {@code UnsignedInteger} that, when treated as signed, is, +   * equal to {@code value}., +   */, +  /**, +   * Returns an {@code UnsignedInteger} that is equal to {@code value},, +   * if possible.  The inverse operation of {@link #longValue()}., +   */, +   * <p>Note that if this {@code UnsignedInteger} holds a value {@code >= 2^31}, the returned value, +  /**, +   * Compares this unsigned integer to another unsigned integer., +   * Returns {@code 0} if they are equal, a negative number if {@code this < other},, +   * and a positive number if {@code this > other}., +   */, +++ b/guava/src/com/google/common/primitives/UnsignedInts.java, +   * Returns the least value present in {@code array}, treating values as unsigned., +   * Returns the greatest value present in {@code array}, treating values as unsigned., +   * Returns a comparator that compares two arrays of unsigned {@code int} values lexicographically., +   * That is, it compares, using {@link #compare(int, int)}), the first pair of values that follow, +   * any common prefix, or when one array is a prefix of the other, treats the shorter array as the, +   * lesser. For example, {@code [] < [1] < [1, 2] < [2] < [1 << 31]}., +   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays, +++ b/guava/src/com/google/common/primitives/UnsignedInteger.java, +  /**, +   * Returns an {@code UnsignedInteger} that, when treated as signed, is, +   * equal to {@code value}., +   */, +  /**, +   * Returns an {@code UnsignedInteger} that is equal to {@code value},, +   * if possible.  The inverse operation of {@link #longValue()}., +   */, +   * <p>Note that if this {@code UnsignedInteger} holds a value {@code >= 2^31}, the returned value, +  /**, +   * Compares this unsigned integer to another unsigned integer., +   * Returns {@code 0} if they are equal, a negative number if {@code this < other},, +   * and a positive number if {@code this > other}., +   */, +++ b/guava/src/com/google/common/primitives/UnsignedInts.java, +   * Returns the least value present in {@code array}, treating values as unsigned., +   * Returns the greatest value present in {@code array}, treating values as unsigned., +   * Returns a comparator that compares two arrays of unsigned {@code int} values lexicographically., +   * That is, it compares, using {@link #compare(int, int)}), the first pair of values that follow, +   * any common prefix, or when one array is a prefix of the other, treats the shorter array as the, +   * lesser. For example, {@code [] < [1] < [1, 2] < [2] < [1 << 31]}., +   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays, +++ b/guava/src/com/google/common/primitives/UnsignedLongs.java, +   * Returns the least value present in {@code array}, treating values as unsigned., +   * Returns the greatest value present in {@code array}, treating values as unsigned., +   * Returns a comparator that compares two arrays of unsigned {@code long} values, +   * lexicographically. That is, it compares, using {@link #compare(long, long)}), the first pair of, +   * values that follow any common prefix, or when one array is a prefix of the other, treats the, +   * shorter array as the lesser. For example, {@code [] < [1L] < [1L, 2L] < [2L] < [1L << 63]}., +   * <p>The returned comparator is inconsistent with {@link Object#equals(Object)} (since arrays]