[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   *   Multimap<K, V> multimap = Multimaps.synchronizedMultimap(, +   *   Collection<V> values = multimap.get(key);  // Needn't be in synchronized block, +   *   synchronized (multimap) {  // Synchronizing on multimap, not values!, +   *     Iterator<V> i = values.iterator(); // Must be in synchronized block, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   *   Multimap<K, V> multimap = Multimaps.synchronizedMultimap(, +   *   Collection<V> values = multimap.get(key);  // Needn't be in synchronized block, +   *   synchronized (multimap) {  // Synchronizing on multimap, not values!, +   *     Iterator<V> i = values.iterator(); // Must be in synchronized block, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +, +  public <K, V> void testSynchronizedMultimapSampleCodeCompilation() {, +    K key = null;, +, +    Multimap<K, V> multimap = Multimaps.synchronizedMultimap(, +        HashMultimap.<K, V>create());, +    Collection<V> values = multimap.get(key);  // Needn't be in synchronized block, +    synchronized (multimap) {  // Synchronizing on multimap, not values!, +      Iterator<V> i = values.iterator(); // Must be in synchronized block, +      while (i.hasNext()) {, +        foo(i.next());, +      }, +    }, +  }, +, +  private static void foo(Object o) {}, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   *   Multimap<K, V> multimap = Multimaps.synchronizedMultimap(, +   *   Collection<V> values = multimap.get(key);  // Needn't be in synchronized block, +   *   synchronized (multimap) {  // Synchronizing on multimap, not values!, +   *     Iterator<V> i = values.iterator(); // Must be in synchronized block, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +, +  public <K, V> void testSynchronizedMultimapSampleCodeCompilation() {, +    K key = null;, +, +    Multimap<K, V> multimap = Multimaps.synchronizedMultimap(, +        HashMultimap.<K, V>create());, +    Collection<V> values = multimap.get(key);  // Needn't be in synchronized block, +    synchronized (multimap) {  // Synchronizing on multimap, not values!, +      Iterator<V> i = values.iterator(); // Must be in synchronized block, +      while (i.hasNext()) {, +        foo(i.next());, +      }, +    }, +  }, +, +  private static void foo(Object o) {}, +, +++ b/guava/src/com/google/common/collect/Multimaps.java, +   *   Multimap<K, V> multimap = Multimaps.synchronizedMultimap(, +   *   Collection<V> values = multimap.get(key);  // Needn't be in synchronized block, +   *   synchronized (multimap) {  // Synchronizing on multimap, not values!, +   *     Iterator<V> i = values.iterator(); // Must be in synchronized block]