[+++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static java.util.Arrays.asList;, +  // This isn't specified by contract, but it'll still be nice to know if this behavior changes., +  public void testConcatenating_equals() {, +    new EqualsTester(), +        .addEqualityGroup(Hashing.concatenating(asList(Hashing.md5()))), +        .addEqualityGroup(Hashing.concatenating(asList(Hashing.murmur3_32()))), +        .addEqualityGroup(, +            Hashing.concatenating(Hashing.md5(), Hashing.md5()),, +            Hashing.concatenating(asList(Hashing.md5(), Hashing.md5()))), +        .addEqualityGroup(, +            Hashing.concatenating(Hashing.murmur3_32(), Hashing.md5()),, +            Hashing.concatenating(asList(Hashing.murmur3_32(), Hashing.md5()))), +        .addEqualityGroup(, +            Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()),, +            Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32()))), +        .testEquals();, +  public void testConcatenatingIterable_bits() {, +    assertEquals(, +        Hashing.md5().bits() + Hashing.md5().bits(),, +        Hashing.concatenating(asList(Hashing.md5(), Hashing.md5())).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits(),, +        Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32())).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),, +        Hashing.concatenating(, +            asList(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128())).bits());, +  public void testConcatenatingVarArgs_bits() {, +    assertEquals(, +        Hashing.md5().bits() + Hashing.md5().bits(),, +        Hashing.concatenating(Hashing.md5(), Hashing.md5()).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits(),, +        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),, +        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()).bits());, +  }, +, +  public void testConcatenatingHashFunction_makeHash() {, +    HashCode expected = HashCode.fromBytes(combined);, +    assertEquals(expected,, +        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));, +    assertEquals(expected,, +        Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32())).hashLong(42L));, +    HashFunction hashFunction1a = Hashing.goodFastHash(1);, +    HashFunction hashFunction1b = Hashing.goodFastHash(32);, +    HashFunction hashFunction2a = Hashing.goodFastHash(33);, +    HashFunction hashFunction2b = Hashing.goodFastHash(128);, +    HashFunction hashFunction3a = Hashing.goodFastHash(129);, +    HashFunction hashFunction3b = Hashing.goodFastHash(256);, +    HashFunction hashFunction4a = Hashing.goodFastHash(257);, +    HashFunction hashFunction4b = Hashing.goodFastHash(384);, +          && !method.getName().equals("concatenating") // don't test Hashing.concatenating(), +++ b/guava-tests/test/com/google/common/hash/HashingTest.java, +import static java.util.Arrays.asList;, +  // This isn't specified by contract, but it'll still be nice to know if this behavior changes., +  public void testConcatenating_equals() {, +    new EqualsTester(), +        .addEqualityGroup(Hashing.concatenating(asList(Hashing.md5()))), +        .addEqualityGroup(Hashing.concatenating(asList(Hashing.murmur3_32()))), +        .addEqualityGroup(, +            Hashing.concatenating(Hashing.md5(), Hashing.md5()),, +            Hashing.concatenating(asList(Hashing.md5(), Hashing.md5()))), +        .addEqualityGroup(, +            Hashing.concatenating(Hashing.murmur3_32(), Hashing.md5()),, +            Hashing.concatenating(asList(Hashing.murmur3_32(), Hashing.md5()))), +        .addEqualityGroup(, +            Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()),, +            Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32()))), +        .testEquals();, +  public void testConcatenatingIterable_bits() {, +    assertEquals(, +        Hashing.md5().bits() + Hashing.md5().bits(),, +        Hashing.concatenating(asList(Hashing.md5(), Hashing.md5())).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits(),, +        Hashing.concatenating(asList(Hashing.md5(), Hashing.murmur3_32())).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),, +        Hashing.concatenating(, +            asList(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128())).bits());, +  public void testConcatenatingVarArgs_bits() {, +    assertEquals(, +        Hashing.md5().bits() + Hashing.md5().bits(),, +        Hashing.concatenating(Hashing.md5(), Hashing.md5()).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits(),, +        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()).bits());, +    assertEquals(, +        Hashing.md5().bits() + Hashing.murmur3_32().bits() + Hashing.murmur3_128().bits(),, +        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32(), Hashing.murmur3_128()).bits());, +  }, +, +  public void testConcatenatingHashFunction_makeHash() {, +    HashCode expected = HashCode.fromBytes(combined);, +    assertEquals(expected,, +        Hashing.concatenating(Hashing.md5(), Hashing.murmur3_32()).hashLong(42L));, +    assertEquals(expected,]