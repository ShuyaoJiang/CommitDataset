[+++ b/src/com/google/common/base/Predicates.java, +import com.google.common.annotations.Beta;, +   * Returns a predicate that evaluates to {@code true} if the class being, +   * tested is assignable from the given class.  The returned predicate, +   * does not allow null inputs., +   * , +   * @since Guava release 10, +   */, +  @GwtIncompatible("Class.isAssignableFrom"), +  @Beta, +  public static Predicate<Class<?>> assignableFrom(Class<?> clazz) {, +    return new AssignableFromPredicate(clazz);, +  }, +, +  /**, +  /** @see Predicates#assignableFrom(Class) */, +  @GwtIncompatible("Class.isAssignableFrom"), +  private static class AssignableFromPredicate, +      implements Predicate<Class<?>>, Serializable {, +    private final Class<?> clazz;, +, +    private AssignableFromPredicate(Class<?> clazz) {, +      this.clazz = checkNotNull(clazz);, +    }, +    @Override, +    public boolean apply(Class<?> input) {, +      return clazz.isAssignableFrom(input);, +    }, +    @Override public int hashCode() {, +      return clazz.hashCode();, +    }, +    @Override public boolean equals(@Nullable Object obj) {, +      if (obj instanceof AssignableFromPredicate) {, +        AssignableFromPredicate that = (AssignableFromPredicate) obj;, +        return clazz == that.clazz;, +      }, +      return false;, +    }, +    @Override public String toString() {, +      return "IsAssignableFrom(" + clazz.getName() + ")";, +    }, +    private static final long serialVersionUID = 0;, +  }, +, +++ b/src/com/google/common/base/Predicates.java, +import com.google.common.annotations.Beta;, +   * Returns a predicate that evaluates to {@code true} if the class being, +   * tested is assignable from the given class.  The returned predicate, +   * does not allow null inputs., +   * , +   * @since Guava release 10, +   */, +  @GwtIncompatible("Class.isAssignableFrom"), +  @Beta, +  public static Predicate<Class<?>> assignableFrom(Class<?> clazz) {, +    return new AssignableFromPredicate(clazz);, +  }, +, +  /**, +  /** @see Predicates#assignableFrom(Class) */, +  @GwtIncompatible("Class.isAssignableFrom"), +  private static class AssignableFromPredicate, +      implements Predicate<Class<?>>, Serializable {, +    private final Class<?> clazz;, +, +    private AssignableFromPredicate(Class<?> clazz) {, +      this.clazz = checkNotNull(clazz);, +    }, +    @Override, +    public boolean apply(Class<?> input) {, +      return clazz.isAssignableFrom(input);, +    }, +    @Override public int hashCode() {, +      return clazz.hashCode();, +    }, +    @Override public boolean equals(@Nullable Object obj) {, +      if (obj instanceof AssignableFromPredicate) {, +        AssignableFromPredicate that = (AssignableFromPredicate) obj;, +        return clazz == that.clazz;, +      }, +      return false;, +    }, +    @Override public String toString() {, +      return "IsAssignableFrom(" + clazz.getName() + ")";, +    }, +    private static final long serialVersionUID = 0;, +  }, +, +++ b/test/com/google/common/base/PredicatesTest.java, +  @GwtIncompatible("Predicates.assignableFrom"), +  public void testIsAssignableFrom_apply() {, +    Predicate<Class<?>> isInteger = Predicates.assignableFrom(Integer.class);, +, +    assertTrue(isInteger.apply(Integer.class));, +    assertFalse(isInteger.apply(Float.class));, +    , +    try {      , +      isInteger.apply(null);, +      fail();, +    } catch(NullPointerException expected) {}]