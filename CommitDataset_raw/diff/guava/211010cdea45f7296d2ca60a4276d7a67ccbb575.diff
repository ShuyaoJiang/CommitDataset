[+++ b/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java, +, +import java.math.BigInteger;, +, +import junit.framework.TestCase;, +  public void testDivide() {, +    assertEquals(2, UnsignedLongs.divide(14, 5));, +    assertEquals(0, UnsignedLongs.divide(0, 50));, +    assertEquals(1, UnsignedLongs.divide(0xfffffffffffffffeL, 0xfffffffffffffffdL));, +    assertEquals(0, UnsignedLongs.divide(0xfffffffffffffffdL, 0xfffffffffffffffeL));, +    assertEquals(281479271743488L, UnsignedLongs.divide(0xfffffffffffffffeL, 65535));, +    assertEquals(0x7fffffffffffffffL, UnsignedLongs.divide(0xfffffffffffffffeL, 2));, +    assertEquals(3689348814741910322L, UnsignedLongs.divide(0xfffffffffffffffeL, 5));, +  }, +, +  public void testRemainder() {, +    assertEquals(4, UnsignedLongs.remainder(14, 5));, +    assertEquals(0, UnsignedLongs.remainder(0, 50));, +    assertEquals(1, UnsignedLongs.remainder(0xfffffffffffffffeL, 0xfffffffffffffffdL));, +    assertEquals(0xfffffffffffffffdL,, +        UnsignedLongs.remainder(0xfffffffffffffffdL, 0xfffffffffffffffeL));, +    assertEquals(65534L, UnsignedLongs.remainder(0xfffffffffffffffeL, 65535));, +    assertEquals(0, UnsignedLongs.remainder(0xfffffffffffffffeL, 2));, +    assertEquals(4, UnsignedLongs.remainder(0xfffffffffffffffeL, 5));, +  }, +, +++ b/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java, +, +import java.math.BigInteger;, +, +import junit.framework.TestCase;, +  public void testDivide() {, +    assertEquals(2, UnsignedLongs.divide(14, 5));, +    assertEquals(0, UnsignedLongs.divide(0, 50));, +    assertEquals(1, UnsignedLongs.divide(0xfffffffffffffffeL, 0xfffffffffffffffdL));, +    assertEquals(0, UnsignedLongs.divide(0xfffffffffffffffdL, 0xfffffffffffffffeL));, +    assertEquals(281479271743488L, UnsignedLongs.divide(0xfffffffffffffffeL, 65535));, +    assertEquals(0x7fffffffffffffffL, UnsignedLongs.divide(0xfffffffffffffffeL, 2));, +    assertEquals(3689348814741910322L, UnsignedLongs.divide(0xfffffffffffffffeL, 5));, +  }, +, +  public void testRemainder() {, +    assertEquals(4, UnsignedLongs.remainder(14, 5));, +    assertEquals(0, UnsignedLongs.remainder(0, 50));, +    assertEquals(1, UnsignedLongs.remainder(0xfffffffffffffffeL, 0xfffffffffffffffdL));, +    assertEquals(0xfffffffffffffffdL,, +        UnsignedLongs.remainder(0xfffffffffffffffdL, 0xfffffffffffffffeL));, +    assertEquals(65534L, UnsignedLongs.remainder(0xfffffffffffffffeL, 65535));, +    assertEquals(0, UnsignedLongs.remainder(0xfffffffffffffffeL, 2));, +    assertEquals(4, UnsignedLongs.remainder(0xfffffffffffffffeL, 5));, +  }, +, +++ b/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java, +, +import java.math.BigInteger;, +, +import junit.framework.TestCase;, +  public void testDivide() {, +    assertEquals(2, UnsignedLongs.divide(14, 5));, +    assertEquals(0, UnsignedLongs.divide(0, 50));, +    assertEquals(1, UnsignedLongs.divide(0xfffffffffffffffeL, 0xfffffffffffffffdL));, +    assertEquals(0, UnsignedLongs.divide(0xfffffffffffffffdL, 0xfffffffffffffffeL));, +    assertEquals(281479271743488L, UnsignedLongs.divide(0xfffffffffffffffeL, 65535));, +    assertEquals(0x7fffffffffffffffL, UnsignedLongs.divide(0xfffffffffffffffeL, 2));, +    assertEquals(3689348814741910322L, UnsignedLongs.divide(0xfffffffffffffffeL, 5));, +  }, +, +  public void testRemainder() {, +    assertEquals(4, UnsignedLongs.remainder(14, 5));, +    assertEquals(0, UnsignedLongs.remainder(0, 50));, +    assertEquals(1, UnsignedLongs.remainder(0xfffffffffffffffeL, 0xfffffffffffffffdL));, +    assertEquals(0xfffffffffffffffdL,, +        UnsignedLongs.remainder(0xfffffffffffffffdL, 0xfffffffffffffffeL));, +    assertEquals(65534L, UnsignedLongs.remainder(0xfffffffffffffffeL, 65535));, +    assertEquals(0, UnsignedLongs.remainder(0xfffffffffffffffeL, 2));, +    assertEquals(4, UnsignedLongs.remainder(0xfffffffffffffffeL, 5));, +  }, +, +++ b/guava/src/com/google/common/primitives/UnsignedLongs.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +, + * {@code 2^64 + x}). The methods for which signedness is not an issue are in {@link Longs}, as, + * well as signed versions of methods for which signedness is an issue., + * {@code String} and a {@code String} to a {@code long} that treat the {@code long} as an unsigned, + * number., + * {@code long} values. When possible, it is recommended that the {@link UnsignedLong} wrapper , + * class be used, at a small efficiency penalty, to enforce the distinction in the type system., +   * A (self-inverse) bijection which converts the ordering on unsigned longs to the ordering on, +   * longs, that is, {@code a <= b} as unsigned longs if and only if {@code rotate(a) <= rotate(b)}, +   * as signed longs., +   * Compares the two specified {@code long} values, treating them as unsigned values between, +   * {@code 0} and {@code 2^64 - 1} inclusive., +   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is, +   *         greater than {@code b}; or zero if they are equal]