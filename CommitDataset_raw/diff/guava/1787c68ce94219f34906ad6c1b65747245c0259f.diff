[+++ b/guava-testlib/src/com/google/common/collect/testing/Helpers.java, +import static java.util.Collections.sort;, +, +  static <E> List<E> castOrCopyToList(Iterable<E> iterable) {, +    if (iterable instanceof List) {, +      return (List<E>) iterable;, +    }, +    List<E> list = new ArrayList<E>();, +    for (E e : iterable) {, +      list.add(e);, +    }, +    return list;, +  }, +, +  private static final Comparator<Comparable> NATURAL_ORDER = new Comparator<Comparable>() {, +    @SuppressWarnings("unchecked") // assume any Comparable is Comparable<Self>, +    @Override public int compare(Comparable left, Comparable right) {, +      return left.compareTo(right);, +    }, +  };, +, +  public static <K extends Comparable, V> Iterable<Entry<K, V>> orderEntriesByKey(, +      List<Entry<K, V>> insertionOrder) {, +    sort(insertionOrder, Helpers.<K, V>entryComparator(NATURAL_ORDER));, +    return insertionOrder;, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/Helpers.java, +import static java.util.Collections.sort;, +, +  static <E> List<E> castOrCopyToList(Iterable<E> iterable) {, +    if (iterable instanceof List) {, +      return (List<E>) iterable;, +    }, +    List<E> list = new ArrayList<E>();, +    for (E e : iterable) {, +      list.add(e);, +    }, +    return list;, +  }, +, +  private static final Comparator<Comparable> NATURAL_ORDER = new Comparator<Comparable>() {, +    @SuppressWarnings("unchecked") // assume any Comparable is Comparable<Self>, +    @Override public int compare(Comparable left, Comparable right) {, +      return left.compareTo(right);, +    }, +  };, +, +  public static <K extends Comparable, V> Iterable<Entry<K, V>> orderEntriesByKey(, +      List<Entry<K, V>> insertionOrder) {, +    sort(insertionOrder, Helpers.<K, V>entryComparator(NATURAL_ORDER));, +    return insertionOrder;, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java, +import static com.google.common.collect.testing.Helpers.castOrCopyToList;, +import static com.google.common.collect.testing.Helpers.equal;, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import static java.util.Collections.sort;, +, +import java.util.Comparator;, +    if (mapFeatures.contains(CollectionFeature.KNOWN_ORDER)) {, +      derivedFeatures.add(CollectionFeature.KNOWN_ORDER);, +    }, +      List<Entry<K, V>> entries = new ArrayList<Entry<K, V>>();, +      for (K element : insertionOrder) {, +        entries.add(mapEntry(element, (V) null));, +      }, +, +      List<K> keys = new ArrayList<K>();, +      for (Entry<K, V> entry : mapGenerator.order(entries)) {, +        keys.add(entry.getKey());, +      }, +      return keys;, +      final List<Entry<K, V>> orderedEntries =, +          castOrCopyToList(mapGenerator.order(castOrCopyToList(mapGenerator.getSampleElements(5))));, +      sort(insertionOrder, new Comparator<V>() {, +        @Override public int compare(V left, V right) {, +          // The indexes are small enough for the subtraction trick to be safe., +          return indexOfEntryWithValue(left) - indexOfEntryWithValue(right);, +        }, +, +        int indexOfEntryWithValue(V value) {, +          for (int i = 0; i < orderedEntries.size(); i++) {, +            if (equal(orderedEntries.get(i).getValue(), value)) {, +              return i;, +            }, +          }, +          throw new IllegalArgumentException("Map.values generator can order only sample values");, +        }, +      });, +++ b/guava-testlib/src/com/google/common/collect/testing/Helpers.java, +import static java.util.Collections.sort;, +, +  static <E> List<E> castOrCopyToList(Iterable<E> iterable) {, +    if (iterable instanceof List) {, +      return (List<E>) iterable;, +    }, +    List<E> list = new ArrayList<E>();, +    for (E e : iterable) {, +      list.add(e);, +    }]