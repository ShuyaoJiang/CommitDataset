[+++ b/guava/src/com/google/common/io/ByteStreams.java, +import com.google.common.hash.HashCode;, +import com.google.common.hash.HashFunction;, +import com.google.common.hash.Hasher;, +   * @deprecated Use {@link #hash}, for example, +   *     {@code ByteStreams.hash(supplier, Hashing.sha1())}., +  @Deprecated  // To be removed Sept 2013., +   * Computes the hash code of the data supplied by {@code supplier} using {@code, +   * hashFunction}., +   *, +   * @param supplier the input stream factory, +   * @param hashFunction the hash function to use to hash the data, +   * @return the {@link HashCode} of all of the bytes in the input stream, +   * @throws IOException if an I/O error occurs, +   * @since 12.0, +   */, +  public static HashCode hash(, +      InputSupplier<? extends InputStream> supplier, HashFunction hashFunction), +      throws IOException {, +    final Hasher hasher = hashFunction.newHasher();, +    return readBytes(supplier, new ByteProcessor<HashCode>() {, +      @Override, +      public boolean processBytes(byte[] buf, int off, int len) {, +        hasher.putBytes(buf, off, len);, +        return true;, +      }, +, +      @Override, +      public HashCode getResult() {, +        return hasher.hash();, +      }, +    });, +  }, +, +  /**, +++ b/guava/src/com/google/common/io/ByteStreams.java, +import com.google.common.hash.HashCode;, +import com.google.common.hash.HashFunction;, +import com.google.common.hash.Hasher;, +   * @deprecated Use {@link #hash}, for example, +   *     {@code ByteStreams.hash(supplier, Hashing.sha1())}., +  @Deprecated  // To be removed Sept 2013., +   * Computes the hash code of the data supplied by {@code supplier} using {@code, +   * hashFunction}., +   *, +   * @param supplier the input stream factory, +   * @param hashFunction the hash function to use to hash the data, +   * @return the {@link HashCode} of all of the bytes in the input stream, +   * @throws IOException if an I/O error occurs, +   * @since 12.0, +   */, +  public static HashCode hash(, +      InputSupplier<? extends InputStream> supplier, HashFunction hashFunction), +      throws IOException {, +    final Hasher hasher = hashFunction.newHasher();, +    return readBytes(supplier, new ByteProcessor<HashCode>() {, +      @Override, +      public boolean processBytes(byte[] buf, int off, int len) {, +        hasher.putBytes(buf, off, len);, +        return true;, +      }, +, +      @Override, +      public HashCode getResult() {, +        return hasher.hash();, +      }, +    });, +  }, +, +  /**, +++ b/guava/src/com/google/common/io/Files.java, +import com.google.common.hash.HashCode;, +import com.google.common.hash.HashFunction;, +   * @deprecated Use {@link #hash}, for example, +   *     {@code Files.hash(file, Hashing.sha1())}., +  @Deprecated  // To be removed Sept 2013., +   * Computes the hash code of the {@code file} using {@code hashFunction}., +   *, +   * @param file the file to read, +   * @param hashFunction the hash function to use to hash the data, +   * @return the {@link HashCode} of all of the bytes in the file, +   * @throws IOException if an I/O error occurs, +   * @since 12.0, +   */, +  public static HashCode hash(File file, HashFunction hashFunction), +      throws IOException {, +    return ByteStreams.hash(newInputStreamSupplier(file), hashFunction);, +  }, +, +  /**]