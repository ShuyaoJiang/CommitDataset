[+++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.CollectionSerializationTester;, +        CollectionSerializationTester.class,, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.CollectionSerializationTester;, +        CollectionSerializationTester.class,, +++ b/guava-testlib/src/com/google/common/collect/testing/CollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.Feature;, +import com.google.common.testing.SerializableTester;, +, +import junit.framework.TestSuite;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, + * @author Louis Wasserman, +, +  @Override, +  protected, +      List<TestSuite>, +      createDerivedSuites(, +          FeatureSpecificTestSuiteBuilder<, +              ?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>> parentBuilder) {, +    List<TestSuite> derivedSuites = new ArrayList<TestSuite>(, +        super.createDerivedSuites(parentBuilder));, +, +    if (parentBuilder.getFeatures().contains(CollectionFeature.SERIALIZABLE)) {, +      derivedSuites.add(CollectionTestSuiteBuilder, +          .using(new ReserializedCollectionGenerator<E>(parentBuilder.getSubjectGenerator())), +          .named(getName() + " reserialized"), +          .withFeatures(computeReserializedCollectionFeatures(parentBuilder.getFeatures())), +          .createTestSuite());, +    }, +    return derivedSuites;, +  }, +, +  static class ReserializedCollectionGenerator<E> implements TestCollectionGenerator<E> {, +    final OneSizeTestContainerGenerator<Collection<E>, E> gen;, +, +    private ReserializedCollectionGenerator(OneSizeTestContainerGenerator<Collection<E>, E> gen) {, +      this.gen = gen;, +    }, +, +    @Override, +    public SampleElements<E> samples() {, +      return gen.samples();, +    }, +, +    @Override, +    public Collection<E> create(Object... elements) {, +      return SerializableTester.reserialize(gen.create(elements));, +    }, +, +    @Override, +    public E[] createArray(int length) {, +      return gen.createArray(length);, +    }, +, +    @Override, +    public Iterable<E> order(List<E> insertionOrder) {, +      return gen.order(insertionOrder);, +    }, +  }, +, +  private static Set<Feature<?>> computeReserializedCollectionFeatures(Set<Feature<?>> features) {, +    Set<Feature<?>> derivedFeatures = new HashSet<Feature<?>>();, +    derivedFeatures.addAll(features);, +    derivedFeatures.remove(CollectionFeature.SERIALIZABLE);, +    derivedFeatures.remove(CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS);, +    return derivedFeatures;, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractCollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.CollectionSerializationTester;, +        CollectionSerializationTester.class,, +++ b/guava-testlib/src/com/google/common/collect/testing/CollectionTestSuiteBuilder.java, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.Feature;, +import com.google.common.testing.SerializableTester;, +, +import junit.framework.TestSuite;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, + * @author Louis Wasserman, +, +  @Override, +  protected, +      List<TestSuite>, +      createDerivedSuites(, +          FeatureSpecificTestSuiteBuilder<, +              ?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>> parentBuilder) {, +    List<TestSuite> derivedSuites = new ArrayList<TestSuite>(]