[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +    assertFalse(rangeSet.intersects(Range.singleton(0)));, +    assertTrue(rangeSet.intersects(Range.singleton(0)));, +    assertTrue(rangeSet.intersects(Range.<Integer>all()));, +    assertTrue(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(0, 2)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(3, 7)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(2)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(7)));, +, +    assertTrue(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(1, 5)));, +    assertFalse(rangeSet.intersects(Range.lessThan(1)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(1)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(3)));, +, +    assertTrue(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(1, 5)));, +    assertFalse(rangeSet.intersects(Range.closedOpen(4, 5)));, +    assertTrue(rangeSet.intersects(Range.lessThan(1)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(1)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(3)));, +, +    assertTrue(rangeSet.intersects(Range.closed(1, 2)));, +    assertTrue(rangeSet.intersects(Range.open(5, 8)));, +    assertFalse(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(5)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(8)));, +, +    assertTrue(rangeSet.intersects(Range.closed(1, 2)));, +    assertTrue(rangeSet.intersects(Range.open(6, 8)));, +    assertFalse(rangeSet.intersects(Range.closed(3, 6)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(5)));, +    assertFalse(rangeSet.intersects(Range.lessThan(1)));, +, +    assertTrue(rangeSet.intersects(Range.closed(2, 4)));, +    assertTrue(rangeSet.intersects(Range.open(-5, -2)));, +    assertTrue(rangeSet.intersects(Range.closed(1, 8)));, +    assertFalse(rangeSet.intersects(Range.singleton(1)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(5)));, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +    assertFalse(rangeSet.intersects(Range.singleton(0)));, +    assertTrue(rangeSet.intersects(Range.singleton(0)));, +    assertTrue(rangeSet.intersects(Range.<Integer>all()));, +    assertTrue(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(0, 2)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(3, 7)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(2)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(7)));, +, +    assertTrue(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(1, 5)));, +    assertFalse(rangeSet.intersects(Range.lessThan(1)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(1)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(3)));, +, +    assertTrue(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.closedOpen(1, 5)));, +    assertFalse(rangeSet.intersects(Range.closedOpen(4, 5)));, +    assertTrue(rangeSet.intersects(Range.lessThan(1)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(1)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(3)));, +, +    assertTrue(rangeSet.intersects(Range.closed(1, 2)));, +    assertTrue(rangeSet.intersects(Range.open(5, 8)));, +    assertFalse(rangeSet.intersects(Range.closed(3, 4)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(5)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(8)));, +, +    assertTrue(rangeSet.intersects(Range.closed(1, 2)));, +    assertTrue(rangeSet.intersects(Range.open(6, 8)));, +    assertFalse(rangeSet.intersects(Range.closed(3, 6)));, +    assertTrue(rangeSet.intersects(Range.greaterThan(5)));, +    assertFalse(rangeSet.intersects(Range.lessThan(1)));, +, +    assertTrue(rangeSet.intersects(Range.closed(2, 4)));, +    assertTrue(rangeSet.intersects(Range.open(-5, -2)));, +    assertTrue(rangeSet.intersects(Range.closed(1, 8)));, +    assertFalse(rangeSet.intersects(Range.singleton(1)));, +    assertFalse(rangeSet.intersects(Range.greaterThan(5)));, +, +++ b/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java, +  public void testIntersects(RangeSet<Integer> rangeSet) {, +    for (Range<Integer> query : QUERY_RANGES) {, +      boolean expectIntersect = false;, +      for (Range<Integer> expectedRange : rangeSet.asRanges()) {, +        if (expectedRange.isConnected(query) && !expectedRange.intersection(query).isEmpty()) {, +          expectIntersect = true;, +          break;, +        }, +      }, +      assertEquals(rangeSet + " was incorrect on intersects(" + query + ")", expectIntersect,, +          rangeSet.intersects(query));, +    }, +  }, +, +  public void testEmptyIntersecting() {, +    testIntersects(TreeRangeSet.<Integer>create());, +    testIntersects(TreeRangeSet.<Integer>create().complement());]