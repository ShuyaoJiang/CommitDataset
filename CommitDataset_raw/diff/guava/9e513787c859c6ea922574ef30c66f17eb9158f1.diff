[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * themselves occupy only a small constant amount of memory., +    return new PowerSet<E>(set);, +  }, +, +  private static final class SubSet<E> extends AbstractSet<E> {, +    private final ImmutableMap<E, Integer> inputSet;, +    private final int mask;, +, +    SubSet(ImmutableMap<E, Integer> inputSet, int mask) {, +      this.inputSet = inputSet;, +      this.mask = mask;, +    }, +, +    @Override, +    public Iterator<E> iterator() {, +      return new UnmodifiableIterator<E>() {, +        final ImmutableList<E> elements = inputSet.keySet().asList();, +        int remainingSetBits = mask;, +, +        @Override, +        public boolean hasNext() {, +          return remainingSetBits != 0;, +        }, +, +        @Override, +        public E next() {, +          int index = Integer.numberOfTrailingZeros(remainingSetBits);, +          if (index == 32) {, +            throw new NoSuchElementException();, +          }, +          remainingSetBits &= ~(1 << index);, +          return elements.get(index);, +        }, +      };, +    }, +, +    @Override, +    public int size() {, +      return Integer.bitCount(mask);, +    }, +, +    @Override, +    public boolean contains(@Nullable Object o) {, +      Integer index = inputSet.get(o);, +      return index != null && (mask & (1 << index)) != 0;, +    }, +    final ImmutableMap<E, Integer> inputSet;, +    PowerSet(Set<E> input) {, +      ImmutableMap.Builder<E, Integer> builder = ImmutableMap.builder();, +      int i = 0;, +      for (E e : checkNotNull(input)) {, +        builder.put(e, i++);, +      }, +      this.inputSet = builder.build();, +      checkArgument(inputSet.size() <= 30,, +          "Too many elements to create power set: %s > 30", inputSet.size());, +      return 1 << inputSet.size();, +      return new AbstractIndexedListIterator<Set<E>>(size()) {, +          return new SubSet<E>(inputSet, setBits);, +        return inputSet.keySet().containsAll(set);, +      return inputSet.keySet().hashCode() << (inputSet.size() - 1);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +   * themselves occupy only a small constant amount of memory., +    return new PowerSet<E>(set);, +  }, +, +  private static final class SubSet<E> extends AbstractSet<E> {, +    private final ImmutableMap<E, Integer> inputSet;, +    private final int mask;, +, +    SubSet(ImmutableMap<E, Integer> inputSet, int mask) {, +      this.inputSet = inputSet;, +      this.mask = mask;, +    }, +, +    @Override, +    public Iterator<E> iterator() {, +      return new UnmodifiableIterator<E>() {, +        final ImmutableList<E> elements = inputSet.keySet().asList();, +        int remainingSetBits = mask;, +, +        @Override, +        public boolean hasNext() {, +          return remainingSetBits != 0;, +        }, +, +        @Override, +        public E next() {, +          int index = Integer.numberOfTrailingZeros(remainingSetBits);, +          if (index == 32) {, +            throw new NoSuchElementException();, +          }, +          remainingSetBits &= ~(1 << index);, +          return elements.get(index);, +        }, +      };, +    }, +, +    @Override]