[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableMap.java, +  final transient Map<K, V> delegate;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableMap.java, +  final transient Map<K, V> delegate;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import java.util.Map;, +, +/**, + * GWt emulation of {@link ImmutableEnumMap}., + *, + * @author Hayward Chan, + */, +final class ImmutableEnumMap<K extends Enum<K>, V> extends ForwardingImmutableMap<K, V> {, +, +  ImmutableEnumMap(Map<? extends K, ? extends V> delegate) {, +    super(WellBehavedMap.wrap(delegate));, +  }, +}, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableMap.java, +  final transient Map<K, V> delegate;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import java.util.Map;, +, +/**, + * GWt emulation of {@link ImmutableEnumMap}., + *, + * @author Hayward Chan, + */, +final class ImmutableEnumMap<K extends Enum<K>, V> extends ForwardingImmutableMap<K, V> {, +, +  ImmutableEnumMap(Map<? extends K, ? extends V> delegate) {, +    super(WellBehavedMap.wrap(delegate));, +  }, +}, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * Returns an immutable map instance containing the given entries., +   * Internally, the returned set will be backed by an {@link EnumMap}., +   *, +   * <p>The iteration order of the returned map follows the enum's iteration, +   * order, not the order in which the elements appear in the given map., +   *, +   * @param map the map to make an immutable copy of, +   * @return an immutable map containing those entries, +   * @since 14.0, +   */, +  @GwtCompatible(serializable = true), +  @Beta, +  public static <K extends Enum<K>, V> ImmutableMap<K, V> immutableEnumMap(, +      Map<K, V> map) {, +    if (map.isEmpty()) {, +      return ImmutableMap.of();, +    } else if (map instanceof ImmutableEnumMap) {, +      return (ImmutableEnumMap<K, V>) map;, +    }, +    for (Map.Entry<K, V> entry : map.entrySet()) {, +      checkNotNull(entry.getKey());, +      checkNotNull(entry.getValue());, +    }, +    EnumMap<K, V> enumMap = new EnumMap<K, V>(map);, +    return new ImmutableEnumMap<K, V>(enumMap);, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableMap.java]