[+++ b/guava/src/com/google/common/graph/ConfigurableGraph.java, +            builder.expectedNodeCount.or(DEFAULT_NODE_COUNT)));, +      Map<N, GraphConnections<N, V>> nodeConnections) {, +++ b/guava/src/com/google/common/graph/ConfigurableGraph.java, +            builder.expectedNodeCount.or(DEFAULT_NODE_COUNT)));, +      Map<N, GraphConnections<N, V>> nodeConnections) {, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +  private long edgeCount = 0L; // must be updated when edges are added or removed, +  protected long edgeCount() {, +    return edgeCount;, +  }, +, +  @Override, +++ b/guava/src/com/google/common/graph/ConfigurableGraph.java, +            builder.expectedNodeCount.or(DEFAULT_NODE_COUNT)));, +      Map<N, GraphConnections<N, V>> nodeConnections) {, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +  private long edgeCount = 0L; // must be updated when edges are added or removed, +  protected long edgeCount() {, +    return edgeCount;, +  }, +, +  @Override, +++ b/guava/src/com/google/common/graph/ImmutableBasicGraph.java, +import com.google.common.collect.ImmutableCollection;, + * <p>This class generally provides all of the same guarantees as {@link ImmutableCollection}, + * (despite not extending {@link ImmutableCollection} itself), including guaranteed thread-safety., + *, +  /** To ensure the immutability contract is maintained, there must be no public constructors. */, +  /** Returns an immutable copy of {@code graph}. */, +++ b/guava/src/com/google/common/graph/ConfigurableGraph.java, +            builder.expectedNodeCount.or(DEFAULT_NODE_COUNT)));, +      Map<N, GraphConnections<N, V>> nodeConnections) {, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +  private long edgeCount = 0L; // must be updated when edges are added or removed, +  protected long edgeCount() {, +    return edgeCount;, +  }, +, +  @Override, +++ b/guava/src/com/google/common/graph/ImmutableBasicGraph.java, +import com.google.common.collect.ImmutableCollection;, + * <p>This class generally provides all of the same guarantees as {@link ImmutableCollection}, + * (despite not extending {@link ImmutableCollection} itself), including guaranteed thread-safety., + *, +  /** To ensure the immutability contract is maintained, there must be no public constructors. */, +  /** Returns an immutable copy of {@code graph}. */, +++ b/guava/src/com/google/common/graph/ImmutableGraph.java, +import static com.google.common.graph.Graphs.checkNonNegative;, +import com.google.common.collect.ImmutableCollection;, + * A {@link Graph} whose elements and structural relationships will never change. Instances of this, + * class may be obtained with {@link #copyOf(Graph)}., + *, + * <p>This class generally provides all of the same guarantees as {@link ImmutableCollection}, + * (despite not extending {@link ImmutableCollection} itself), including guaranteed thread-safety., +  private final long edgeCount;, +  /** To ensure the immutability contract is maintained, there must be no public constructors. */, +    super(GraphBuilder.from(graph), getNodeConnections(graph));, +    this.edgeCount = checkNonNegative(graph.edges().size());, +  /** Returns an immutable copy of {@code graph}. */, +  private static <N, V> GraphConnections<N, V> connectionsOf(, +      final Graph<N, V> graph, final N node) {, +    Function<N, V> successorNodeToValueFn =, +        new Function<N, V>() {, +            graph.predecessors(node), Maps.asMap(graph.successors(node), successorNodeToValueFn)), +, +  @Override, +  protected long edgeCount() {, +    return edgeCount;, +  }, +++ b/guava/src/com/google/common/graph/ConfigurableGraph.java, +            builder.expectedNodeCount.or(DEFAULT_NODE_COUNT)));, +      Map<N, GraphConnections<N, V>> nodeConnections) {, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +  private long edgeCount = 0L; // must be updated when edges are added or removed, +  protected long edgeCount() {, +    return edgeCount;, +  }, +, +  @Override, +++ b/guava/src/com/google/common/graph/ImmutableBasicGraph.java, +import com.google.common.collect.ImmutableCollection;, + * <p>This class generally provides all of the same guarantees as {@link ImmutableCollection}, + * (despite not extending {@link ImmutableCollection} itself), including guaranteed thread-safety., + *, +  /** To ensure the immutability contract is maintained, there must be no public constructors. */, +  /** Returns an immutable copy of {@code graph}. */, +++ b/guava/src/com/google/common/graph/ImmutableGraph.java, +import static com.google.common.graph.Graphs.checkNonNegative;, +import com.google.common.collect.ImmutableCollection;, + * A {@link Graph} whose elements and structural relationships will never change. Instances of this, + * class may be obtained with {@link #copyOf(Graph)}., + *, + * <p>This class generally provides all of the same guarantees as {@link ImmutableCollection}, + * (despite not extending {@link ImmutableCollection} itself), including guaranteed thread-safety., +  private final long edgeCount;, +  /** To ensure the immutability contract is maintained, there must be no public constructors. */, +    super(GraphBuilder.from(graph), getNodeConnections(graph));, +    this.edgeCount = checkNonNegative(graph.edges().size());, +  /** Returns an immutable copy of {@code graph}. */]