[+++ b/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java, +import com.google.common.collect.MapMakerInternalMap.InternalEntry;, +import com.google.common.collect.MapMakerInternalMap.WeakValueEntry;, +import com.google.common.collect.MapMakerInternalMap.WeakValueReference;, +  private static <K, V>, +      MapMakerInternalMap<K, V, ? extends InternalEntry<K, V, ?>, ? extends Segment<K, V, ?, ?>>, +          makeMap(MapMaker maker) {, +    return MapMakerInternalMap.create(maker);, +    MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(createMapMaker());, +    assertSame(Strength.STRONG, map.keyStrength());, +    assertSame(Strength.STRONG, map.valueStrength());, +    assertSame(map.keyStrength().defaultEquivalence(), map.keyEquivalence);, +    assertSame(map.valueStrength().defaultEquivalence(), map.valueEquivalence());, +    assertThat(map.entryHelper), +        .isInstanceOf(MapMakerInternalMap.StrongKeyStrongValueEntry.Helper.class);, +    MapMakerInternalMap<Object, Object, ?, ?> map =, +    assertSame(map.valueStrength().defaultEquivalence(), map.valueEquivalence());, +    MapMakerInternalMap<Object, Object, ?, ?> map =, +    MapMakerInternalMap<Object, Object, ?, ?> map =, +        makeMap(, +    MapMakerInternalMap<Object, Object, ?, ?> map =, +    MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(createMapMaker().weakKeys());, +    assertThat(map.entryHelper), +        .isInstanceOf(MapMakerInternalMap.WeakKeyStrongValueEntry.Helper.class);, +    MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(createMapMaker().weakValues());, +    assertThat(map.entryHelper), +        .isInstanceOf(MapMakerInternalMap.StrongKeyWeakValueEntry.Helper.class);, +      MapMakerInternalMap<Object, Object, ?, ?> map, Strength keyStrength, Strength valueStrength) {, +    assertSame(keyStrength, map.keyStrength());, +    assertSame(valueStrength, map.valueStrength());, +    assertSame(valueStrength.defaultEquivalence(), map.valueEquivalence());, +    for (MapMaker maker : allWeakValueStrengthMakers()) {, +      MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(maker);, +      Segment<Object, Object, ?, ?> segment = map.segments[0];, +      InternalEntry<Object, Object, ?> entryOne = segment.newEntryForTesting(keyOne, hashOne, null);, +      WeakValueReference<Object, Object, ?> valueRefOne =, +          segment.newWeakValueReferenceForTesting(entryOne, valueOne);, +      segment.setWeakValueReferenceForTesting(entryOne, valueRefOne);, +      assertSame(valueRefOne, segment.getWeakValueReferenceForTesting(entryOne));, +, +      InternalEntry<Object, Object, ?> entryTwo =, +          segment.newEntryForTesting(keyTwo, hashTwo, entryOne);, +      WeakValueReference<Object, Object, ?> valueRefTwo =, +          segment.newWeakValueReferenceForTesting(entryTwo, valueTwo);, +      segment.setWeakValueReferenceForTesting(entryTwo, valueRefTwo);, +      assertSame(valueRefTwo, segment.getWeakValueReferenceForTesting(entryTwo));, +    for (MapMaker maker : allWeakValueStrengthMakers()) {, +      MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(maker);, +      Segment<Object, Object, ?, ?> segment = map.segments[0];, +      InternalEntry<Object, Object, ?> entryOne = segment.newEntryForTesting(keyOne, hashOne, null);, +      segment.setValueForTesting(entryOne, valueOne);, +      InternalEntry<Object, Object, ?> entryTwo = segment.newEntryForTesting(keyTwo, hashTwo, null);, +      segment.setValueForTesting(entryTwo, valueTwo);, +      InternalEntry<Object, Object, ?> copyOne = segment.copyForTesting(entryOne, null);, +      assertSame(valueOne, copyOne.getValue());, +      InternalEntry<Object, Object, ?> copyTwo = segment.copyForTesting(entryTwo, copyOne);, +      assertSame(valueTwo, copyTwo.getValue());, +    MapMakerInternalMap<Object, Object, ?, ?> map =, +        makeMap(createMapMaker().concurrencyLevel(1).weakValues());, +    Segment<Object, Object, ?, ?> segment = map.segments[0];, +    AtomicReferenceArray<? extends InternalEntry<Object, Object, ?>> table = segment.table;, +    InternalEntry<Object, Object, ?> entry = segment.newEntryForTesting(key, hash, null);, +    segment.setValueForTesting(entry, value);, +    segment.setTableEntryForTesting(index, entry);, +    InternalEntry<Object, Object, ?> nullEntry = segment.newEntryForTesting(null, hash, entry);, +    WeakValueReference<Object, Object, ?> nullValueRef =, +        segment.newWeakValueReferenceForTesting(nullEntry, nullValue);, +    segment.setWeakValueReferenceForTesting(nullEntry, nullValueRef);, +    segment.setTableEntryForTesting(index, nullEntry);, +    InternalEntry<Object, Object, ?> dummyEntry =, +        segment.newEntryForTesting(new Object(), hash, entry);, +    WeakValueReference<Object, Object, ?> dummyValueRef =, +        segment.newWeakValueReferenceForTesting(dummyEntry, dummyValue);, +    segment.setWeakValueReferenceForTesting(dummyEntry, dummyValueRef);, +    segment.setTableEntryForTesting(index, dummyEntry);, +    dummyEntry = segment.newEntryForTesting(key, hash, entry);, +    dummyValueRef = segment.newWeakValueReferenceForTesting(dummyEntry, dummyValue);, +    segment.setWeakValueReferenceForTesting(dummyEntry, dummyValueRef);, +    segment.setTableEntryForTesting(index, dummyEntry);, +    MapMakerInternalMap<Object, Object, ?, ?> map =, +        makeMap(createMapMaker().concurrencyLevel(1).weakValues());, +    Segment<Object, Object, ?, ?> segment = map.segments[0];, +    AtomicReferenceArray<? extends InternalEntry<Object, Object, ?>> table = segment.table;, +    InternalEntry<Object, Object, ?> entry = segment.newEntryForTesting(key, hash, null);, +    WeakValueReference<Object, Object, ?> oldValueRef =, +        segment.newWeakValueReferenceForTesting(entry, oldValue);, +    segment.setWeakValueReferenceForTesting(entry, oldValueRef);, +    segment.setTableEntryForTesting(index, entry);, +    segment.setWeakValueReferenceForTesting(entry, oldValueRef);, +    oldValueRef.clear();, +    MapMakerInternalMap<Object, Object, ?, ?> map =, +        makeMap(createMapMaker().concurrencyLevel(1).weakValues());, +    Segment<Object, Object, ?, ?> segment = map.segments[0];, +    AtomicReferenceArray<? extends InternalEntry<Object, Object, ?>> table = segment.table;, +    InternalEntry<Object, Object, ?> entry = segment.newEntryForTesting(key, hash, null);, +    WeakValueReference<Object, Object, ?> oldValueRef =, +        segment.newWeakValueReferenceForTesting(entry, oldValue);, +    segment.setWeakValueReferenceForTesting(entry, oldValueRef);, +    segment.setTableEntryForTesting(index, entry);, +    segment.setWeakValueReferenceForTesting(entry, oldValueRef);]