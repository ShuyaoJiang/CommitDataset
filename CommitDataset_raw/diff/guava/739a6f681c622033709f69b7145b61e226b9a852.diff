[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +, +  @Test, +  public void removeEdge_antiparallelEdges() {, +    addEdge(N1, N2);, +    addEdge(N2, N1);, +, +    assertTrue(graph.removeEdge(N1, N2));, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N1)).containsExactly(N2);, +    assertThat(graph.edges()).hasSize(1);, +, +    assertTrue(graph.removeEdge(N2, N1));, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N1)).isEmpty();, +    assertThat(graph.edges()).isEmpty();, +  }, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +, +  @Test, +  public void removeEdge_antiparallelEdges() {, +    addEdge(N1, N2);, +    addEdge(N2, N1);, +, +    assertTrue(graph.removeEdge(N1, N2));, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N1)).containsExactly(N2);, +    assertThat(graph.edges()).hasSize(1);, +, +    assertTrue(graph.removeEdge(N2, N1));, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N1)).isEmpty();, +    assertThat(graph.edges()).isEmpty();, +  }, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.HashSet;, +    Set<Endpoints<Integer>> allEndpoints = new HashSet<Endpoints<Integer>>();, +, +        Endpoints<Integer> endpoints = Endpoints.of(graph, node, successor);, +        allEndpoints.add(endpoints);, +        assertThat(graph.edges()).contains(endpoints);, +, +    assertThat(graph.edges()).isEqualTo(allEndpoints);, +  public void removeNode_antiparallelEdges() {, +    addEdge(N1, N2);, +    addEdge(N2, N1);, +, +    assertThat(graph.removeNode(N1)).isTrue();, +    assertThat(graph.nodes()).containsExactly(N2);, +    assertThat(graph.edges()).isEmpty();, +, +    assertThat(graph.removeNode(N2)).isTrue();, +    assertThat(graph.nodes()).isEmpty();, +    assertThat(graph.edges()).isEmpty();, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +, +  @Test, +  public void removeEdge_antiparallelEdges() {, +    addEdge(N1, N2);, +    addEdge(N2, N1);, +, +    assertTrue(graph.removeEdge(N1, N2));, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N1)).containsExactly(N2);, +    assertThat(graph.edges()).hasSize(1);, +, +    assertTrue(graph.removeEdge(N2, N1));, +    assertThat(graph.successors(N1)).isEmpty();, +    assertThat(graph.predecessors(N1)).isEmpty();, +    assertThat(graph.edges()).isEmpty();, +  }, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.HashSet;, +    Set<Endpoints<Integer>> allEndpoints = new HashSet<Endpoints<Integer>>();, +, +        Endpoints<Integer> endpoints = Endpoints.of(graph, node, successor);, +        allEndpoints.add(endpoints);, +        assertThat(graph.edges()).contains(endpoints);, +, +    assertThat(graph.edges()).isEqualTo(allEndpoints);, +  public void removeNode_antiparallelEdges() {, +    addEdge(N1, N2);, +    addEdge(N2, N1);, +, +    assertThat(graph.removeNode(N1)).isTrue();, +    assertThat(graph.nodes()).containsExactly(N2);, +    assertThat(graph.edges()).isEmpty();, +, +    assertThat(graph.removeNode(N2)).isTrue();, +    assertThat(graph.nodes()).isEmpty();, +    assertThat(graph.edges()).isEmpty();, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    assertThat(network.edges().size()).isAtLeast(asGraph.edges().size());, +      assertThat(asGraph.edges()).contains(Endpoints.of(network, nodeA, nodeB));]