[+++ b/guava/src/com/google/common/graph/Graphs.java, +   * Returns true iff {@code graph} has at least one cycle. A cycle is defined as a non-empty subset, +   * of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting, +   * and ending with the same node., +    if (!network.isDirected(), +        && network.allowsParallelEdges(), +   * <p>Thus, two graphs A and B are equivalent if both are null or <b>all</b> of the following are, +   * true:, +   * <p>Thus, two value graphs A and B are equivalent if both are null or <b>all</b> of the, +   * following are true:, +   * <li>Each edge in A has a {@link ValueGraph#edgeValue(Object, Object) value} equal to the {@link, +   *     ValueGraph#edgeValue(Object, Object) value} of the corresponding edge in B., +   * <p>Thus, two networks A and B are equivalent if both are null or <b>all</b> of the following, +   * are true:, +   * Returns an induced subgraph of {@code graph}. This subgraph is a new graph that contains all of, +   * the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} from {@code graph} for, +   * which both nodes are contained by {@code nodes}., +  public static <N> MutableGraph<N> inducedSubgraph(Graph<N> graph, Iterable<? extends N> nodes) {, +   * Returns an induced subgraph of {@code graph}. This subgraph is a new graph that contains all of, +   * the nodes in {@code nodes}, and all of the {@link Graph#edges() edges} (and associated edge, +   * values) from {@code graph} for which both nodes are contained by {@code nodes}., +  public static <N, V> MutableValueGraph<N, V> inducedSubgraph(, +      ValueGraph<N, V> graph, Iterable<? extends N> nodes) {, +   * Returns an induced subgraph of {@code graph}. This subgraph is a new graph that contains all of, +   * the nodes in {@code nodes}, and all of the {@link Network#edges() edges} from {@code graph} for, +   * which the {@link Network#incidentNodes(Object)} are both contained by {@code nodes}., +  public static <N, E> MutableNetwork<N, E> inducedSubgraph(, +      Network<N, E> graph, Iterable<? extends N> nodes) {, +  /** Creates a mutable copy of {@code graph} with the same nodes and edges. */, +    MutableGraph<N> copy = GraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();, +  /** Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values. */, +    MutableValueGraph<N, V> copy =, +        ValueGraphBuilder.from(graph).expectedNodeCount(graph.nodes().size()).build();, +  /** Creates a mutable copy of {@code graph} with the same nodes and edges. */, +    MutableNetwork<N, E> copy =, +        NetworkBuilder.from(graph), +   * An enum representing the state of a node during DFS. {@code PENDING} means that the node is on, +   * the stack of the DFS, while {@code COMPLETE} means that the node and all its successors have, +   * been already explored. Any node that has not been explored will not have a state at all.]