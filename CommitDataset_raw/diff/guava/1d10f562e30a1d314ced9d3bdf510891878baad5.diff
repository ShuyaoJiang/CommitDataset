[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +  static final class ValueFunction<K, V1, V2> implements Function<V1, V2> {, +    private final K key;, +    private final EntryTransformer<? super K, ? super V1, V2> transformer;, +    , +    ValueFunction(K key, EntryTransformer<? super K, ? super V1, V2> transformer) {, +      this.key = key;, +      this.transformer = transformer;, +    }, +    , +    @Override, +    public V2 apply(@Nullable V1 value) {, +      return transformer.transformEntry(key, value);, +    }, +  }, +, +      extends AbstractMultimap<K, V2> {, +    Collection<V2> transform(K key, Collection<V1> values) {, +      Function<V1, V2> function = new ValueFunction<K, V1, V2>(key, transformer);, +      if (values instanceof List) {, +        return Lists.transform((List<V1>) values, function);, +      } else {, +        return Collections2.transform(values, function);, +    @Override, +    Map<K, Collection<V2>> createAsMap() {, +      return Maps.transformEntries(fromMultimap.asMap(),, +    @Override, +    Iterator<Entry<K, V2>> entryIterator() {, +      return Iterators.transform(, +          fromMultimap.entries().iterator(), new Function<Entry<K, V1>, Entry<K, V2>>() {, +            @Override, +            public Entry<K, V2> apply(final Entry<K, V1> entry) {, +                @Override, +                public K getKey() {, +                @Override, +                public V2 getValue() {, +                  return transformer.transformEntry(entry.getKey(), entry.getValue());, +    @Override, +    Collection<V2> createValues() {, +      return Collections2.transform(, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +  static final class ValueFunction<K, V1, V2> implements Function<V1, V2> {, +    private final K key;, +    private final EntryTransformer<? super K, ? super V1, V2> transformer;, +    , +    ValueFunction(K key, EntryTransformer<? super K, ? super V1, V2> transformer) {, +      this.key = key;, +      this.transformer = transformer;, +    }, +    , +    @Override, +    public V2 apply(@Nullable V1 value) {, +      return transformer.transformEntry(key, value);, +    }, +  }, +, +      extends AbstractMultimap<K, V2> {, +    Collection<V2> transform(K key, Collection<V1> values) {, +      Function<V1, V2> function = new ValueFunction<K, V1, V2>(key, transformer);, +      if (values instanceof List) {, +        return Lists.transform((List<V1>) values, function);, +      } else {, +        return Collections2.transform(values, function);, +    @Override, +    Map<K, Collection<V2>> createAsMap() {, +      return Maps.transformEntries(fromMultimap.asMap(),, +    @Override, +    Iterator<Entry<K, V2>> entryIterator() {, +      return Iterators.transform(, +          fromMultimap.entries().iterator(), new Function<Entry<K, V1>, Entry<K, V2>>() {, +            @Override, +            public Entry<K, V2> apply(final Entry<K, V1> entry) {, +                @Override, +                public K getKey() {, +                @Override, +                public V2 getValue() {, +                  return transformer.transformEntry(entry.getKey(), entry.getValue());, +    @Override, +    Collection<V2> createValues() {, +      return Collections2.transform(, +++ b/guava-tests/test/com/google/common/collect/MultimapsCollectionTest.java, +import static com.google.common.collect.testing.Helpers.mapEntry;, +import com.google.common.base.Ascii;, +import com.google.common.base.Function;, +import com.google.common.collect.Maps.EntryTransformer;, +import com.google.common.collect.testing.google.MultimapTestSuiteBuilder;, +import com.google.common.collect.testing.google.TestListMultimapGenerator;, +import com.google.common.collect.testing.google.TestMultimapGenerator;, +    suite.addTest(transformSuite());, +    // TODO: use collection testers on Multimaps.forMap.entries, +    return suite;, +  static abstract class TransformedMultimapGenerator<M extends Multimap<String, String>>, +      implements TestMultimapGenerator<String, String, M> {, +, +    @Override, +    public String[] createKeyArray(int length) {, +      return new String[length];, +    }, +, +    @Override]