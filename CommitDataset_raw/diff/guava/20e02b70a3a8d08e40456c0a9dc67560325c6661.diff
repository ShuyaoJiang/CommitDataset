[+++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.common.base.Function;, +  public <F extends Enum<F> & Function<String, Integer> & Iterable<Long>>, +  void testResolveType_fromTypeVariable() throws Exception {, +    TypeToken<?> f = TypeToken.of(new TypeCapture<F>() {}.capture());, +    assertEquals(String.class,, +        f.resolveType(Function.class.getTypeParameters()[0]).getType());, +    assertEquals(Integer.class,, +        f.resolveType(Function.class.getTypeParameters()[1]).getType());, +    assertEquals(Long.class,, +        f.resolveType(Iterable.class.getTypeParameters()[0]).getType());, +  }, +  , +  public <E extends Comparable<Iterable<String>> & Iterable<Integer>>, +  void testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed() throws Exception {, +    TypeToken<?> e = TypeToken.of(new TypeCapture<E>() {}.capture());, +    assertEquals(Integer.class,, +        e.resolveType(Iterable.class.getTypeParameters()[0]).getType());, +  }, +  , +  public void testResolveType_fromWildcard() throws Exception {, +    ParameterizedType withWildcardType = (ParameterizedType), +        new TypeCapture<Comparable<? extends Iterable<String>>>() {}.capture();, +    TypeToken<?> wildcardType = TypeToken.of(withWildcardType.getActualTypeArguments()[0]);, +    assertEquals(String.class,, +        wildcardType.resolveType(Iterable.class.getTypeParameters()[0]).getType());, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import com.google.common.base.Function;, +  public <F extends Enum<F> & Function<String, Integer> & Iterable<Long>>, +  void testResolveType_fromTypeVariable() throws Exception {, +    TypeToken<?> f = TypeToken.of(new TypeCapture<F>() {}.capture());, +    assertEquals(String.class,, +        f.resolveType(Function.class.getTypeParameters()[0]).getType());, +    assertEquals(Integer.class,, +        f.resolveType(Function.class.getTypeParameters()[1]).getType());, +    assertEquals(Long.class,, +        f.resolveType(Iterable.class.getTypeParameters()[0]).getType());, +  }, +  , +  public <E extends Comparable<Iterable<String>> & Iterable<Integer>>, +  void testResolveType_fromTypeVariable_onlyDirectBoundsAreUsed() throws Exception {, +    TypeToken<?> e = TypeToken.of(new TypeCapture<E>() {}.capture());, +    assertEquals(Integer.class,, +        e.resolveType(Iterable.class.getTypeParameters()[0]).getType());, +  }, +  , +  public void testResolveType_fromWildcard() throws Exception {, +    ParameterizedType withWildcardType = (ParameterizedType), +        new TypeCapture<Comparable<? extends Iterable<String>>>() {}.capture();, +    TypeToken<?> wildcardType = TypeToken.of(withWildcardType.getActualTypeArguments()[0]);, +    assertEquals(String.class,, +        wildcardType.resolveType(Iterable.class.getTypeParameters()[0]).getType());, +  }, +, +++ b/guava/src/com/google/common/reflect/TypeResolver.java, +    return new TypeResolver().where(TypeMappingIntrospector.getTypeMappings(type));, +      } else if (type instanceof TypeVariable) {, +        for (Type bound : ((TypeVariable<?>) type).getBounds()) {, +          introspect(bound);, +        }, +      } else if (type instanceof WildcardType) {, +        for (Type bound : ((WildcardType) type).getUpperBounds()) {, +          introspect(bound);, +        }]