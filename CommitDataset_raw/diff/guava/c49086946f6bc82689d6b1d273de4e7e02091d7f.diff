[+++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +  public void testLeastOfIterable_empty_0() {, +  public void testLeastOfIterator_empty_0() {, +    List<Integer> result = numberOrdering.leastOf(, +        Iterators.<Integer>emptyIterator(), 0);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.<Integer>of(), result);, +  }, +, +  public void testLeastOfIterable_empty_1() {, +  public void testLeastOfIterator_empty_1() {, +    List<Integer> result = numberOrdering.leastOf(, +        Iterators.<Integer>emptyIterator(), 1);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.<Integer>of(), result);, +  }, +, +  public void testLeastOfIterable_simple_negativeOne() {, +  public void testLeastOfIterator_simple_negativeOne() {, +    try {, +      numberOrdering.leastOf(Iterators.forArray(3, 4, 5, -1), -1);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  public void testLeastOfIterable_singleton_0() {, +  public void testLeastOfIterator_singleton_0() {, +    List<Integer> result = numberOrdering.leastOf(, +        Iterators.singletonIterator(3), 0);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.<Integer>of(), result);, +  }, +, +  public void testLeastOfIterable_simple_0() {, +  public void testLeastOfIterator_simple_0() {, +    List<Integer> result = numberOrdering.leastOf(, +        Iterators.forArray(3, 4, 5, -1), 0);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.<Integer>of(), result);, +  }, +, +  public void testLeastOfIterable_simple_1() {, +  public void testLeastOfIterator_simple_1() {, +    List<Integer> result = numberOrdering.leastOf(, +        Iterators.forArray(3, 4, 5, -1), 1);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.of(-1), result);, +  }, +, +  public void testLeastOfIterable_simple_nMinusOne_withNullElement() {, +  public void testLeastOfIterator_simple_nMinusOne_withNullElement() {, +    Iterator<Integer> itr = Iterators.forArray(3, null, 5, -1);, +    List<Integer> result = Ordering.natural().nullsLast().leastOf(itr, 3);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.of(-1, 3, 5), result);, +  }, +, +  public void testLeastOfIterable_simple_nMinusOne() {, +  public void testLeastOfIterator_simple_nMinusOne() {, +    List<Integer> list = Arrays.asList(3, 4, 5, -1);, +    List<Integer> result = numberOrdering.leastOf(list.iterator(), list.size() - 1);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.of(-1, 3, 4), result);, +  }, +, +  public void testLeastOfIterable_simple_n() {, +  public void testLeastOfIterator_simple_n() {, +    List<Integer> list = Arrays.asList(3, 4, 5, -1);, +    List<Integer> result = numberOrdering.leastOf(list.iterator(), list.size());, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.of(-1, 3, 4, 5), result);, +  }, +, +  public void testLeastOfIterable_simple_n_withNullElement() {, +  public void testLeastOfIterator_simple_n_withNullElement() {, +    List<Integer> list = Arrays.asList(3, 4, 5, null, -1);, +    List<Integer> result = Ordering.natural().nullsLast().leastOf(, +        list.iterator(), list.size());, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(Arrays.asList(-1, 3, 4, 5, null), result);, +  }, +, +  public void testLeastOfIterable_simple_nPlusOne() {, +  public void testLeastOfIterator_simple_nPlusOne() {, +    List<Integer> list = Arrays.asList(3, 4, 5, -1);, +    List<Integer> result = numberOrdering.leastOf(list.iterator(), list.size() + 1);, +    assertTrue(result instanceof RandomAccess);, +    assertListImmutable(result);, +    assertEquals(ImmutableList.of(-1, 3, 4, 5), result);, +  }]