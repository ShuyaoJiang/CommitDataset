[+++ b/guava/src/com/google/common/cache/AbstractCache.java, +import com.google.common.util.concurrent.ExecutionError;, +      wrapAndThrowUnchecked(e.getCause());, +      throw new AssertionError();, +, +  // This code also appears in common.util.concurrent., +  static void wrapAndThrowUnchecked(Throwable cause) {, +    if (cause instanceof Error) {, +      throw new ExecutionError((Error) cause);, +    }, +    if (cause instanceof Exception) {, +      throw new UncheckedExecutionException((Exception) cause);, +    }, +    /*, +     * It's a non-Error, non-Exception Throwable. From my survey of such, +     * classes, I believe that most users intended to extend Exception, so we'll, +     * treat it like an Exception., +     */, +    throw new UncheckedExecutionExceptionForThrowable(cause);, +  }, +, +  private static final class UncheckedExecutionExceptionForThrowable, +      extends UncheckedExecutionException {, +    UncheckedExecutionExceptionForThrowable(Throwable cause) {, +      super(cause.toString());, +      initCause(cause);, +    }, +  }, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +import com.google.common.util.concurrent.ExecutionError;, +      wrapAndThrowUnchecked(e.getCause());, +      throw new AssertionError();, +, +  // This code also appears in common.util.concurrent., +  static void wrapAndThrowUnchecked(Throwable cause) {, +    if (cause instanceof Error) {, +      throw new ExecutionError((Error) cause);, +    }, +    if (cause instanceof Exception) {, +      throw new UncheckedExecutionException((Exception) cause);, +    }, +    /*, +     * It's a non-Error, non-Exception Throwable. From my survey of such, +     * classes, I believe that most users intended to extend Exception, so we'll, +     * treat it like an Exception., +     */, +    throw new UncheckedExecutionExceptionForThrowable(cause);, +  }, +, +  private static final class UncheckedExecutionExceptionForThrowable, +      extends UncheckedExecutionException {, +    UncheckedExecutionExceptionForThrowable(Throwable cause) {, +      super(cause.toString());, +      initCause(cause);, +    }, +  }, +++ b/guava/src/com/google/common/cache/Cache.java, +import com.google.common.util.concurrent.ExecutionError;, +   * @throws ExecutionException if an exception was thrown while loading the response, +   */, +  /*, +   * TODO(cpovirk): throw ExecutionError instead for an Error (and maybe UncheckedExecutionException, +   * for RuntimeException?), +   * @throws UncheckedExecutionException if an exception was thrown while loading the response, +   * @throws ExecutionError if an error was thrown while loading the response, +   * @throws UncheckedExecutionException if an exception was thrown while loading the response, +   * @throws ExecutionError if an error was thrown while loading the response, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +import com.google.common.util.concurrent.ExecutionError;, +      wrapAndThrowUnchecked(e.getCause());, +      throw new AssertionError();, +, +  // This code also appears in common.util.concurrent., +  static void wrapAndThrowUnchecked(Throwable cause) {, +    if (cause instanceof Error) {, +      throw new ExecutionError((Error) cause);, +    }, +    if (cause instanceof Exception) {, +      throw new UncheckedExecutionException((Exception) cause);, +    }, +    /*, +     * It's a non-Error, non-Exception Throwable. From my survey of such, +     * classes, I believe that most users intended to extend Exception, so we'll, +     * treat it like an Exception., +     */, +    throw new UncheckedExecutionExceptionForThrowable(cause);, +  }, +, +  private static final class UncheckedExecutionExceptionForThrowable, +      extends UncheckedExecutionException {, +    UncheckedExecutionExceptionForThrowable(Throwable cause) {, +      super(cause.toString());, +      initCause(cause);, +    }, +  }, +++ b/guava/src/com/google/common/cache/Cache.java, +import com.google.common.util.concurrent.ExecutionError;, +   * @throws ExecutionException if an exception was thrown while loading the response, +   */, +  /*]