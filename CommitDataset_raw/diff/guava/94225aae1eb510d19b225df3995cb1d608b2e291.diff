[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +++ b/guava/src/com/google/common/cache/CacheLoader.java, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +   * @throws Exception if unable to reload the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +++ b/guava/src/com/google/common/cache/CacheLoader.java, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +   * @throws Exception if unable to reload the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +   * @throws Exception if unable to load the result, +   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is, +   *     treated like any other {@code Exception} in all respects except that, when it is caught,, +   *     the thread's interrupt status is set, +++ b/guava/src/com/google/common/cache/LocalCache.java, +import com.google.common.util.concurrent.Uninterruptibles;, +          return Uninterruptibles.getUninterruptibly(result);, +        if (t instanceof InterruptedException) {, +          Thread.currentThread().interrupt();, +        }, +    } catch (InterruptedException e) {, +      Thread.currentThread().interrupt();, +      throw new ExecutionException(e);]