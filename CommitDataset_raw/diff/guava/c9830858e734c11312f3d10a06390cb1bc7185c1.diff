[+++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    PrimitiveSink bytePrimitiveSink = EasyMock.createMock(PrimitiveSink.class);, +    EasyMock.expect(bytePrimitiveSink.putBytes(EasyMock.aryEq(new byte[] { 4, 3, 2, 1}))), +        .andReturn(bytePrimitiveSink).once();, +    EasyMock.replay(bytePrimitiveSink);, +    Funnels.byteArrayFunnel().funnel(new byte[]{4, 3, 2, 1}, bytePrimitiveSink);, +    EasyMock.verify(bytePrimitiveSink);, +    PrimitiveSink bytePrimitiveSink = EasyMock.createMock(PrimitiveSink.class);, +    EasyMock.expect(bytePrimitiveSink.putString("test")).andReturn(bytePrimitiveSink).once();, +    EasyMock.replay(bytePrimitiveSink);, +    Funnels.stringFunnel().funnel("test", bytePrimitiveSink);, +    EasyMock.verify(bytePrimitiveSink);, +    PrimitiveSink bytePrimitiveSink = new AbstractStreamingHasher(4, 4) {, +      funnel.funnel(null, bytePrimitiveSink);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    PrimitiveSink bytePrimitiveSink = EasyMock.createMock(PrimitiveSink.class);, +    EasyMock.expect(bytePrimitiveSink.putBytes(EasyMock.aryEq(new byte[] { 4, 3, 2, 1}))), +        .andReturn(bytePrimitiveSink).once();, +    EasyMock.replay(bytePrimitiveSink);, +    Funnels.byteArrayFunnel().funnel(new byte[]{4, 3, 2, 1}, bytePrimitiveSink);, +    EasyMock.verify(bytePrimitiveSink);, +    PrimitiveSink bytePrimitiveSink = EasyMock.createMock(PrimitiveSink.class);, +    EasyMock.expect(bytePrimitiveSink.putString("test")).andReturn(bytePrimitiveSink).once();, +    EasyMock.replay(bytePrimitiveSink);, +    Funnels.stringFunnel().funnel("test", bytePrimitiveSink);, +    EasyMock.verify(bytePrimitiveSink);, +    PrimitiveSink bytePrimitiveSink = new AbstractStreamingHasher(4, 4) {, +      funnel.funnel(null, bytePrimitiveSink);, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    @Override public void funnel(Object object, PrimitiveSink bytePrimitiveSink) {, +      bytePrimitiveSink.putInt(object.hashCode());, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +    abstract void performAction(Random random, Iterable<? extends PrimitiveSink> sinks);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    PrimitiveSink bytePrimitiveSink = EasyMock.createMock(PrimitiveSink.class);, +    EasyMock.expect(bytePrimitiveSink.putBytes(EasyMock.aryEq(new byte[] { 4, 3, 2, 1}))), +        .andReturn(bytePrimitiveSink).once();, +    EasyMock.replay(bytePrimitiveSink);, +    Funnels.byteArrayFunnel().funnel(new byte[]{4, 3, 2, 1}, bytePrimitiveSink);, +    EasyMock.verify(bytePrimitiveSink);, +    PrimitiveSink bytePrimitiveSink = EasyMock.createMock(PrimitiveSink.class);, +    EasyMock.expect(bytePrimitiveSink.putString("test")).andReturn(bytePrimitiveSink).once();, +    EasyMock.replay(bytePrimitiveSink);, +    Funnels.stringFunnel().funnel("test", bytePrimitiveSink);, +    EasyMock.verify(bytePrimitiveSink);, +    PrimitiveSink bytePrimitiveSink = new AbstractStreamingHasher(4, 4) {, +      funnel.funnel(null, bytePrimitiveSink);, +++ b/guava-tests/test/com/google/common/hash/HashTestUtils.java, +    @Override public void funnel(Object object, PrimitiveSink bytePrimitiveSink) {, +      bytePrimitiveSink.putInt(object.hashCode());, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +      @Override void performAction(Random random, Iterable<? extends PrimitiveSink> sinks) {, +        for (PrimitiveSink sink : sinks) {, +    abstract void performAction(Random random, Iterable<? extends PrimitiveSink> sinks);, +++ b/guava/src/com/google/common/hash/Funnel.java, + * An object which can send data from an object of type {@code T} into a {@code PrimitiveSink}., +   *, +   * @since 12.0 (in 11.0 version, {@code PrimitiveSink} was still called {@code Sink}), +  void funnel(T from, PrimitiveSink into);, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +    PrimitiveSink bytePrimitiveSink = EasyMock.createMock(PrimitiveSink.class);, +    EasyMock.expect(bytePrimitiveSink.putBytes(EasyMock.aryEq(new byte[] { 4, 3, 2, 1}))), +        .andReturn(bytePrimitiveSink).once();, +    EasyMock.replay(bytePrimitiveSink);]