[+++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +   * SoftValueReference (and not a LoadingValueReference), and throws an IllegalStateException, +    if (cache instanceof LocalCache) {, +      return ((LocalCache<K, V>) cache).map;, +    return (cache instanceof LocalCache);, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +   * SoftValueReference (and not a LoadingValueReference), and throws an IllegalStateException, +    if (cache instanceof LocalCache) {, +      return ((LocalCache<K, V>) cache).map;, +    return (cache instanceof LocalCache);, +++ /dev/null, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +   * SoftValueReference (and not a LoadingValueReference), and throws an IllegalStateException, +    if (cache instanceof LocalCache) {, +      return ((LocalCache<K, V>) cache).map;, +    return (cache instanceof LocalCache);, +++ /dev/null, +++ b/guava-tests/test/com/google/common/cache/CustomConcurrentHashMapTest.java, +import com.google.common.cache.CustomConcurrentHashMap.LoadingValueReference;, +    Object value = map.getOrLoad(key);, +    assertEquals(value, map.getOrLoad(key));, +        map.getOrLoad(key);, +          map.getOrLoad(entry.getKey());, +    assertEquals(value, map.getOrLoad(key));, +    assertSame(value, map.getOrLoad(key));, +    assertNotSame(value, map.getOrLoad(key));, +    assertSame(value, map.getOrLoad(key));, +    assertNotSame(value, map.getOrLoad(key));, +    Object one = map.getOrLoad(key);, +    Object two = map.getOrLoad(key);, +          map.getOrLoad(one);, +          map.getOrLoad(one);, +    LoadingValueReference<Object, Object> valueReference =, +        (LoadingValueReference) newEntry.getValueReference();, +    assertNull(valueReference.loadedValue);, +          map.getOrLoad(one);, +    LocalCache<Object, Object> one = (LocalCache) CacheBuilder.newBuilder(), +    LocalCache<Object, Object> two = SerializableTester.reserialize(one);, +    public boolean isLoading() {, +++ b/guava-tests/test/com/google/common/cache/CacheTesting.java, +   * SoftValueReference (and not a LoadingValueReference), and throws an IllegalStateException, +    if (cache instanceof LocalCache) {, +      return ((LocalCache<K, V>) cache).map;, +    return (cache instanceof LocalCache);, +++ /dev/null, +++ b/guava-tests/test/com/google/common/cache/CustomConcurrentHashMapTest.java, +import com.google.common.cache.CustomConcurrentHashMap.LoadingValueReference;, +    Object value = map.getOrLoad(key);, +    assertEquals(value, map.getOrLoad(key));, +        map.getOrLoad(key);, +          map.getOrLoad(entry.getKey());, +    assertEquals(value, map.getOrLoad(key));, +    assertSame(value, map.getOrLoad(key));, +    assertNotSame(value, map.getOrLoad(key));, +    assertSame(value, map.getOrLoad(key));, +    assertNotSame(value, map.getOrLoad(key));, +    Object one = map.getOrLoad(key);, +    Object two = map.getOrLoad(key);, +          map.getOrLoad(one);, +          map.getOrLoad(one);, +    LoadingValueReference<Object, Object> valueReference =, +        (LoadingValueReference) newEntry.getValueReference();, +    assertNull(valueReference.loadedValue);, +          map.getOrLoad(one);, +    LocalCache<Object, Object> one = (LocalCache) CacheBuilder.newBuilder(), +    LocalCache<Object, Object> two = SerializableTester.reserialize(one);, +    public boolean isLoading() {, +++ b/guava-tests/test/com/google/common/cache/LocalCacheTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.cache;, +, +import static com.google.common.cache.CacheBuilder.EMPTY_STATS;, +import static com.google.common.cache.CustomConcurrentHashMapTest.SMALL_MAX_SIZE;, +import static com.google.common.cache.TestingCacheLoaders.identityLoader;, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.cache.CacheBuilder.NullCache;, +import com.google.common.cache.CustomConcurrentHashMap.Segment;, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Maps;, +import com.google.common.testing.NullPointerTester;, +, +import junit.framework.TestCase;, +]