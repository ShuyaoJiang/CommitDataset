[+++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import java.util.concurrent.Executors;, +  @GwtIncompatible // Threads, +, +  public void testTransformAsync_toString() throws Exception {, +    final CountDownLatch functionCalled = new CountDownLatch(1);, +    final CountDownLatch functionBlocking = new CountDownLatch(1);, +    AsyncFunction<Object, Object> function =, +        new AsyncFunction<Object, Object>() {, +          @Override, +          public ListenableFuture<Object> apply(Object input) throws Exception {, +            functionCalled.countDown();, +            functionBlocking.await();, +            return immediateFuture(null);, +          }, +, +          @Override, +          public String toString() {, +            return "Called my toString";, +          }, +        };, +, +    ExecutorService executor = Executors.newSingleThreadExecutor();, +    try {, +      ListenableFuture<?> output =, +          Futures.transformAsync(immediateFuture(null), function, executor);, +      functionCalled.await();, +      assertThat(output.toString()).contains("Called my toString");, +    } finally {, +      functionBlocking.countDown();, +      executor.shutdown();, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import java.util.concurrent.Executors;, +  @GwtIncompatible // Threads, +, +  public void testTransformAsync_toString() throws Exception {, +    final CountDownLatch functionCalled = new CountDownLatch(1);, +    final CountDownLatch functionBlocking = new CountDownLatch(1);, +    AsyncFunction<Object, Object> function =, +        new AsyncFunction<Object, Object>() {, +          @Override, +          public ListenableFuture<Object> apply(Object input) throws Exception {, +            functionCalled.countDown();, +            functionBlocking.await();, +            return immediateFuture(null);, +          }, +, +          @Override, +          public String toString() {, +            return "Called my toString";, +          }, +        };, +, +    ExecutorService executor = Executors.newSingleThreadExecutor();, +    try {, +      ListenableFuture<?> output =, +          Futures.transformAsync(immediateFuture(null), function, executor);, +      functionCalled.await();, +      assertThat(output.toString()).contains("Called my toString");, +    } finally {, +      functionBlocking.countDown();, +      executor.shutdown();, +    }, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java, +    } finally {, +      function = null;, +    } else if (localFunction != null) {, +      return "function=[" + localFunction + "]";, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import java.util.concurrent.Executors;, +  @GwtIncompatible // Threads, +, +  public void testTransformAsync_toString() throws Exception {, +    final CountDownLatch functionCalled = new CountDownLatch(1);, +    final CountDownLatch functionBlocking = new CountDownLatch(1);, +    AsyncFunction<Object, Object> function =, +        new AsyncFunction<Object, Object>() {, +          @Override, +          public ListenableFuture<Object> apply(Object input) throws Exception {, +            functionCalled.countDown();, +            functionBlocking.await();, +            return immediateFuture(null);, +          }, +, +          @Override, +          public String toString() {, +            return "Called my toString";, +          }, +        };, +, +    ExecutorService executor = Executors.newSingleThreadExecutor();, +    try {, +      ListenableFuture<?> output =, +          Futures.transformAsync(immediateFuture(null), function, executor);, +      functionCalled.await();]