[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +import com.google.common.base.Function;, +import java.util.Map;, +    Comparator<? super K> keyComparator;, +      this.keyComparator = checkNotNull(keyComparator);, +      if (keyComparator != null) {, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +        List<Map.Entry<K, Collection<V>>> entries = Lists.newArrayList(, +            builderMultimap.asMap().entrySet());, +        Collections.sort(, +            entries,, +            Ordering.from(keyComparator).onResultOf(new Function<Entry<K, Collection<V>>, K>() {, +              @Override, +              public K apply(Entry<K, Collection<V>> entry) {, +                return entry.getKey();, +              }, +            }));, +        for (Map.Entry<K, Collection<V>> entry : entries) {, +          sortedCopy.putAll(entry.getKey(), entry.getValue());, +        }, +        builderMultimap = sortedCopy;, +      }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +import com.google.common.base.Function;, +import java.util.Map;, +    Comparator<? super K> keyComparator;, +      this.keyComparator = checkNotNull(keyComparator);, +      if (keyComparator != null) {, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +        List<Map.Entry<K, Collection<V>>> entries = Lists.newArrayList(, +            builderMultimap.asMap().entrySet());, +        Collections.sort(, +            entries,, +            Ordering.from(keyComparator).onResultOf(new Function<Entry<K, Collection<V>>, K>() {, +              @Override, +              public K apply(Entry<K, Collection<V>> entry) {, +                return entry.getKey();, +              }, +            }));, +        for (Map.Entry<K, Collection<V>> entry : entries) {, +          sortedCopy.putAll(entry.getKey(), entry.getValue());, +        }, +        builderMultimap = sortedCopy;, +      }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +import com.google.common.base.Function;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +      this.keyComparator = checkNotNull(keyComparator);, +      if (keyComparator != null) {, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +        List<Map.Entry<K, Collection<V>>> entries = Lists.newArrayList(, +            builderMultimap.asMap().entrySet());, +        Collections.sort(, +            entries,, +            Ordering.from(keyComparator).onResultOf(new Function<Entry<K, Collection<V>>, K>() {, +              @Override, +              public K apply(Entry<K, Collection<V>> entry) {, +                return entry.getKey();, +              }, +            }));, +        for (Map.Entry<K, Collection<V>> entry : entries) {, +          sortedCopy.putAll(entry.getKey(), entry.getValue());, +        }, +        builderMultimap = sortedCopy;, +      }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, +import com.google.common.base.Function;, +import java.util.Map;, +    Comparator<? super K> keyComparator;, +      this.keyComparator = checkNotNull(keyComparator);, +      if (keyComparator != null) {, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +        List<Map.Entry<K, Collection<V>>> entries = Lists.newArrayList(, +            builderMultimap.asMap().entrySet());, +        Collections.sort(, +            entries,, +            Ordering.from(keyComparator).onResultOf(new Function<Entry<K, Collection<V>>, K>() {, +              @Override, +              public K apply(Entry<K, Collection<V>> entry) {, +                return entry.getKey();, +              }, +            }));, +        for (Map.Entry<K, Collection<V>> entry : entries) {, +          sortedCopy.putAll(entry.getKey(), entry.getValue());, +        }, +        builderMultimap = sortedCopy;, +      }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSetMultimap.java, +import com.google.common.base.Function;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +      this.keyComparator = checkNotNull(keyComparator);, +      if (keyComparator != null) {, +        Multimap<K, V> sortedCopy = new BuilderMultimap<K, V>();, +        List<Map.Entry<K, Collection<V>>> entries = Lists.newArrayList(, +            builderMultimap.asMap().entrySet());, +        Collections.sort(]