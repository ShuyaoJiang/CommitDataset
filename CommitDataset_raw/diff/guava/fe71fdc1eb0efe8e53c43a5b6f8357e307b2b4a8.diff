[+++ b/android/guava-tests/test/com/google/common/primitives/CharsTest.java, +  public void testSortDescending() {, +    testSortDescending(new char[] {}, new char[] {});, +    testSortDescending(new char[] {'1'}, new char[] {'1'});, +    testSortDescending(new char[] {'1', '2'}, new char[] {'2', '1'});, +    testSortDescending(new char[] {'1', '3', '1'}, new char[] {'3', '1', '1'});, +    testSortDescending(new char[] {'A', '1', 'B', '2'}, new char[] {'B', 'A', '2', '1'});, +  }, +, +  public void testSortDescendingIndexed() {, +    testSortDescending(new char[] {}, 0, 0, new char[] {});, +    testSortDescending(new char[] {'1'}, 0, 1, new char[] {'1'});, +    testSortDescending(new char[] {'1', '2'}, 0, 2, new char[] {'2', '1'});, +    testSortDescending(new char[] {'1', '3', '1'}, 0, 2, new char[] {'3', '1', '1'});, +    testSortDescending(new char[] {'1', '3', '1'}, 0, 1, new char[] {'1', '3', '1'});, +    testSortDescending(new char[] {'A', '1', 'B', '2'}, 1, 3, new char[] {'A', 'B', '1', '2'});, +  }, +, +  private static void testSortDescending(char[] input, char[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Chars.sortDescending(input);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +  private static void testSortDescending(, +      char[] input, int fromIndex, int toIndex, char[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Chars.sortDescending(input, fromIndex, toIndex);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +++ b/android/guava-tests/test/com/google/common/primitives/CharsTest.java, +  public void testSortDescending() {, +    testSortDescending(new char[] {}, new char[] {});, +    testSortDescending(new char[] {'1'}, new char[] {'1'});, +    testSortDescending(new char[] {'1', '2'}, new char[] {'2', '1'});, +    testSortDescending(new char[] {'1', '3', '1'}, new char[] {'3', '1', '1'});, +    testSortDescending(new char[] {'A', '1', 'B', '2'}, new char[] {'B', 'A', '2', '1'});, +  }, +, +  public void testSortDescendingIndexed() {, +    testSortDescending(new char[] {}, 0, 0, new char[] {});, +    testSortDescending(new char[] {'1'}, 0, 1, new char[] {'1'});, +    testSortDescending(new char[] {'1', '2'}, 0, 2, new char[] {'2', '1'});, +    testSortDescending(new char[] {'1', '3', '1'}, 0, 2, new char[] {'3', '1', '1'});, +    testSortDescending(new char[] {'1', '3', '1'}, 0, 1, new char[] {'1', '3', '1'});, +    testSortDescending(new char[] {'A', '1', 'B', '2'}, 1, 3, new char[] {'A', 'B', '1', '2'});, +  }, +, +  private static void testSortDescending(char[] input, char[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Chars.sortDescending(input);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +  private static void testSortDescending(, +      char[] input, int fromIndex, int toIndex, char[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Chars.sortDescending(input, fromIndex, toIndex);, +    assertTrue(Arrays.equals(expectedOutput, input));, +  }, +, +++ b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java, +  public void testSortDescending() {, +    testSortDescending(new double[] {}, new double[] {});, +    testSortDescending(new double[] {1}, new double[] {1});, +    testSortDescending(new double[] {1, 2}, new double[] {2, 1});, +    testSortDescending(new double[] {1, 3, 1}, new double[] {3, 1, 1});, +    testSortDescending(new double[] {-1, 1, -2, 2}, new double[] {2, 1, -1, -2});, +    testSortDescending(, +        new double[] {-1, 1, Double.NaN, -2, -0, 0, 2},, +        new double[] {Double.NaN, 2, 1, 0, -0, -1, -2});, +  }, +, +  public void testSortDescendingIndexed() {, +    testSortDescending(new double[] {}, 0, 0, new double[] {});, +    testSortDescending(new double[] {1}, 0, 1, new double[] {1});, +    testSortDescending(new double[] {1, 2}, 0, 2, new double[] {2, 1});, +    testSortDescending(new double[] {1, 3, 1}, 0, 2, new double[] {3, 1, 1});, +    testSortDescending(new double[] {1, 3, 1}, 0, 1, new double[] {1, 3, 1});, +    testSortDescending(new double[] {-1, -2, 1, 2}, 1, 3, new double[] {-1, 1, -2, 2});, +    testSortDescending(, +        new double[] {-1, 1, Double.NaN, -2, 2}, 1, 4, new double[] {-1, Double.NaN, 1, -2, 2});, +  }, +, +  private static void testSortDescending(double[] input, double[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Doubles.sortDescending(input);, +    // GWT's Arrays.equals doesn't appear to handle NaN correctly, so test each element individually, +    for (int i = 0; i < input.length; i++) {, +      assertEquals(0, Double.compare(expectedOutput[i], input[i]));, +    }, +  }, +, +  private static void testSortDescending(, +      double[] input, int fromIndex, int toIndex, double[] expectedOutput) {, +    input = Arrays.copyOf(input, input.length);, +    Doubles.sortDescending(input, fromIndex, toIndex);, +    // GWT's Arrays.equals doesn't appear to handle NaN correctly, so test each element individually, +    for (int i = 0; i < input.length; i++) {]