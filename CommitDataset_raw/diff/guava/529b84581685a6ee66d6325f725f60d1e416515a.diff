[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    Set<String> simpleNames = Sets.newHashSet();, +    for (ClassInfo classInfo, +        : classpath.getTopLevelClasses(ClassPathTest.class.getPackage().getName())) {, +      simpleNames.add(classInfo.getSimpleName());, +    ASSERT.that(simpleNames).containsAllOf("ClassPath", "ClassPathTest");, +  public void testGetSimpleName() {, +    assertEquals("Foo",, +        new ClassPath.ClassInfo("Foo", getClass().getClassLoader()).getSimpleName());, +    assertEquals("Foo",, +        new ClassPath.ClassInfo("a.b.Foo", getClass().getClassLoader()).getSimpleName());, +  }, +, +  public void testGetPackageName() {, +    assertEquals("",, +        new ClassPath.ClassInfo("Foo", getClass().getClassLoader()).getPackageName());, +    assertEquals("a.b",, +        new ClassPath.ClassInfo("a.b.Foo", getClass().getClassLoader()).getPackageName());, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    Set<String> simpleNames = Sets.newHashSet();, +    for (ClassInfo classInfo, +        : classpath.getTopLevelClasses(ClassPathTest.class.getPackage().getName())) {, +      simpleNames.add(classInfo.getSimpleName());, +    ASSERT.that(simpleNames).containsAllOf("ClassPath", "ClassPathTest");, +  public void testGetSimpleName() {, +    assertEquals("Foo",, +        new ClassPath.ClassInfo("Foo", getClass().getClassLoader()).getSimpleName());, +    assertEquals("Foo",, +        new ClassPath.ClassInfo("a.b.Foo", getClass().getClassLoader()).getSimpleName());, +  }, +, +  public void testGetPackageName() {, +    assertEquals("",, +        new ClassPath.ClassInfo("Foo", getClass().getClassLoader()).getPackageName());, +    assertEquals("a.b",, +        new ClassPath.ClassInfo("a.b.Foo", getClass().getClassLoader()).getPackageName());, +  }, +, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +    /** Returns the simple name of the underlying class as given in the source code. */, +    public String getSimpleName() {, +      String packageName = getPackageName();, +      if (packageName.isEmpty()) {, +        return className;, +      }, +      // Since this is a top level class, its simple name is always the part after package name., +      return className.substring(packageName.length() + 1);, +    }, +]