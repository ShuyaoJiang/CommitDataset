[+++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +  public <T> void testListeningExecutorServiceInvokeAllJavadocCodeCompiles(), +      throws Exception {, +    ListeningExecutorService executor = MoreExecutors.sameThreadExecutor();, +    List<Callable<T>> tasks = ImmutableList.of();, +    @SuppressWarnings("unchecked") // guaranteed by invokeAll contract, +    List<ListenableFuture<T>> futures = (List) executor.invokeAll(tasks);, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java, +  public <T> void testListeningExecutorServiceInvokeAllJavadocCodeCompiles(), +      throws Exception {, +    ListeningExecutorService executor = MoreExecutors.sameThreadExecutor();, +    List<Callable<T>> tasks = ImmutableList.of();, +    @SuppressWarnings("unchecked") // guaranteed by invokeAll contract, +    List<ListenableFuture<T>> futures = (List) executor.invokeAll(tasks);, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/ListeningExecutorService.java, +   * <p>All elements in the returned list must be {@link ListenableFuture} instances. The easiest, +   * way to obtain a {@code List<ListenableFuture<T>>} from this method is an unchecked (but safe), +   * cast:<pre>, +   *   {@code @SuppressWarnings("unchecked") // guaranteed by invokeAll contract}, +   *   {@code List<ListenableFuture<T>> futures = (List) executor.invokeAll(tasks);}, +   * </pre>, +   * <p>All elements in the returned list must be {@link ListenableFuture} instances. The easiest, +   * way to obtain a {@code List<ListenableFuture<T>>} from this method is an unchecked (but safe), +   * cast:<pre>, +   *   {@code @SuppressWarnings("unchecked") // guaranteed by invokeAll contract}, +   *   {@code List<ListenableFuture<T>> futures = (List) executor.invokeAll(tasks, timeout, unit);}, +   * </pre>]