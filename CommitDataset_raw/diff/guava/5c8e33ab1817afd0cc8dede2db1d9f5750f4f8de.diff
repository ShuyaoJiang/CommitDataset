[+++ b/guava/test/com/google/common/testing/SloppyTearDown.java, + * an exception but should not fail a test when it does. (The behavior of a, + * {@code TearDown} that throws an exception varies; see its documentation for, + * details.) Use it just like a {@code TearDown}, except override {@link, + * #sloppyTearDown()} instead., +++ b/guava/test/com/google/common/testing/SloppyTearDown.java, + * an exception but should not fail a test when it does. (The behavior of a, + * {@code TearDown} that throws an exception varies; see its documentation for, + * details.) Use it just like a {@code TearDown}, except override {@link, + * #sloppyTearDown()} instead., +++ b/guava/test/com/google/common/testing/TearDown.java, +   * Performs a <b>single</b> tear-down operation. See test-libraries-for-java's, +   * {@code com.google.common.testing.junit3.TearDownTestCase} and, +   * {@code com.google.common.testing.junit4.TearDownTestCase} for example., +   * <p>A failing {@link TearDown} may or may not fail a tl4j test, depending on, +   * the version of JUnit test case you are running under. To avoid failing in, +   * the face of an exception regardless of JUnit version, implement a {@link, +   * SloppyTearDown} instead., +   * <p>tl4j details: For backwards compatibility, {@code, +   * junit3.TearDownTestCase} currently does not fail a test when an exception, +   * is thrown from one of its {@link TearDown}s, but this is subject to, +   * change. Also, {@code junit4.TearDownTestCase} will.]