[+++ b/src/com/google/common/collect/ImmutableList.java, +    return construct(e1, e2);, +    return construct(e1, e2, e3);, +    return construct(e1, e2, e3, e4);, +    return construct(e1, e2, e3, e4, e5);, +    return construct(e1, e2, e3, e4, e5, e6);, +    return construct(e1, e2, e3, e4, e5, e6, e7);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8, e9);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10);, +    return construct(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11);, +    Object[] array = new Object[12 + others.length];, +    array[0] = e1;, +    array[1] = e2;, +    array[2] = e3;, +    array[3] = e4;, +    array[4] = e5;, +    array[5] = e6;, +    array[6] = e7;, +    array[7] = e8;, +    array[8] = e9;, +    array[9] = e10;, +    array[10] = e11;, +    array[11] = e12;, +    System.arraycopy(others, 0, array, 12, others.length);, +    return construct(array);, +    return copyOf(elements);, +        return construct(elements.clone());, +        // safe to use the array without copying it, +        // as specified by Collection.toArray()., +        return construct(elements);, +  /** {@code elements} has to be internally created array. */, +  private static <E> ImmutableList<E> construct(Object... elements) {, +    for (int i = 0; i < elements.length; i++) {, +      checkElementNotNull(elements[i], i);, +    }, +    return new RegularImmutableList<E>(elements);, +  }, +, +  // We do this instead of Preconditions.checkNotNull to save boxing and array, +  // creation cost., +  private static Object checkElementNotNull(Object element, int index) {, +    if (element == null) {, +      throw new NullPointerException("at index " + index);, +    }, +    return element;, +  }, +]