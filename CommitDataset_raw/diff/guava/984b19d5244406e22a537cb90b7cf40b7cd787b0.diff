[+++ b/guava-gwt/src-super/java/util/super/java/util/concurrent/Future.java, + * considered illegal because it would lead to a deadlock. Future implementations must throw {@link, + * IllegalStateException} to avoid a deadlock., + *, + * @param <V> value type returned by the future., +  // Even though the 'get' methods below are blocking, they are the only built-in APIs to get the, +  // result of the {@code Future}, hence they are not removed. The implementation must throw {@link, +  // IllegalStateException} if the {@code Future} is not done yet (see the class javadoc)., +, +++ b/guava-gwt/src-super/java/util/super/java/util/concurrent/Future.java, + * considered illegal because it would lead to a deadlock. Future implementations must throw {@link, + * IllegalStateException} to avoid a deadlock., + *, + * @param <V> value type returned by the future., +  // Even though the 'get' methods below are blocking, they are the only built-in APIs to get the, +  // result of the {@code Future}, hence they are not removed. The implementation must throw {@link, +  // IllegalStateException} if the {@code Future} is not done yet (see the class javadoc)., +, +++ b/guava-gwt/src-super/java/util/super/java/util/concurrent/TimeUnit.java, +  private static final long C0 = 1L;, +  private static final long C1 = C0 * 1000L;, +  private static final long C2 = C1 * 1000L;, +  private static final long C3 = C2 * 1000L;, +  private static final long C4 = C3 * 60L;, +  private static final long C5 = C4 * 60L;, +  private static final long C6 = C5 * 24L;, +  private static final long MAX = Long.MAX_VALUE;, +  private static final long C6_C0 = C6 / C0;, +  private static final long C6_C1 = C6 / C1;, +  private static final long C6_C2 = C6 / C2;, +  private static final long C6_C3 = C6 / C3;, +  private static final long C6_C4 = C6 / C4;, +  private static final long C6_C5 = C6 / C5;, +  private static final long C5_C0 = C5 / C0;, +  private static final long C5_C1 = C5 / C1;, +  private static final long C5_C2 = C5 / C2;, +  private static final long C5_C3 = C5 / C3;, +  private static final long C5_C4 = C5 / C4;, +  private static final long C4_C0 = C4 / C0;, +  private static final long C4_C1 = C4 / C1;, +  private static final long C4_C2 = C4 / C2;, +  private static final long C4_C3 = C4 / C3;, +  private static final long C3_C0 = C3 / C0;, +  private static final long C3_C1 = C3 / C1;, +  private static final long C3_C2 = C3 / C2;, +  private static final long C2_C0 = C2 / C0;, +  private static final long C2_C1 = C2 / C1;, +  private static final long C1_C0 = C1 / C0;, +  private static final long MAX_C6_C0 = MAX / C6_C0;, +  private static final long MAX_C6_C1 = MAX / C6_C1;, +  private static final long MAX_C6_C2 = MAX / C6_C2;, +  private static final long MAX_C6_C3 = MAX / C6_C3;, +  private static final long MAX_C6_C4 = MAX / C6_C4;, +  private static final long MAX_C6_C5 = MAX / C6_C5;, +  private static final long MAX_C5_C0 = MAX / C5_C0;, +  private static final long MAX_C5_C1 = MAX / C5_C1;, +  private static final long MAX_C5_C2 = MAX / C5_C2;, +  private static final long MAX_C5_C3 = MAX / C5_C3;, +  private static final long MAX_C5_C4 = MAX / C5_C4;, +  private static final long MAX_C4_C0 = MAX / C4_C0;, +  private static final long MAX_C4_C1 = MAX / C4_C1;, +  private static final long MAX_C4_C2 = MAX / C4_C2;, +  private static final long MAX_C4_C3 = MAX / C4_C3;, +  private static final long MAX_C3_C0 = MAX / C3_C0;, +  private static final long MAX_C3_C1 = MAX / C3_C1;, +  private static final long MAX_C3_C2 = MAX / C3_C2;, +  private static final long MAX_C2_C0 = MAX / C2_C0;, +  private static final long MAX_C2_C1 = MAX / C2_C1;, +  private static final long MAX_C1_C0 = MAX / C1_C0;, +  public abstract long convert(long sourceDuration, TimeUnit sourceUnit);, +  public abstract long toNanos(long duration);, +  public abstract long toMicros(long duration);, +  public abstract long toMillis(long duration);, +  public abstract long toSeconds(long duration);, +  public abstract long toMinutes(long duration);, +  public abstract long toHours(long duration);, +  public abstract long toDays(long duration);]