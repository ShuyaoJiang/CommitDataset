[+++ b/guava/src/com/google/common/net/MediaType.java, +    MediaType mediaType =, +        addKnownType(new MediaType(type, subtype, ImmutableListMultimap.<String, String>of()));, +    mediaType.parsedCharset = Optional.absent();, +    return mediaType;, +    MediaType mediaType = addKnownType(new MediaType(type, subtype, UTF_8_CONSTANT_PARAMETERS));, +    mediaType.parsedCharset = Optional.of(UTF_8);, +    return mediaType;, +  @LazyInit private Optional<Charset> parsedCharset;, +, +    // racy single-check idiom, this is safe because Optional is immutable., +    Optional<Charset> local = parsedCharset;, +    if (local == null) {, +      String value = null;, +      local = Optional.absent();, +      for (String currentValue : parameters.get(CHARSET_ATTRIBUTE)) {, +        if (value == null) {, +          value = currentValue;, +          local = Optional.of(Charset.forName(value));, +        } else if (!value.equals(currentValue)) {, +          throw new IllegalStateException(, +              "Multiple charset values defined: " + value + ", " + currentValue);, +      parsedCharset = local;, +    }, +    return local;, +  }, +    // if the attribute isn't charset, we can just inherit the current parsedCharset, +    if (!normalizedAttribute.equals(CHARSET_ATTRIBUTE)) {, +      mediaType.parsedCharset = this.parsedCharset;, +    }, +    MediaType withCharset = withParameter(CHARSET_ATTRIBUTE, charset.name());, +    // precache the charset so we don't need to parse it, +    withCharset.parsedCharset = Optional.of(charset);, +    return withCharset;, +    MediaType mediaType = create(type, subtype, ImmutableListMultimap.<String, String>of());, +    mediaType.parsedCharset = Optional.absent();, +    return mediaType;]