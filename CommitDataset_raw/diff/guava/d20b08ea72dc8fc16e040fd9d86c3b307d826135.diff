[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.base.StandardSystemProperty;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.io.Files;, +  public void testGetPathUris() throws Exception {, +    File tempDir = Files.createTempDir();, +    File jarFile = new File(tempDir, "a.jar");, +    // make an empty jar file, +    new JarOutputStream(new FileOutputStream(jarFile)).close();, +    File directory = new File(tempDir, "b");, +    directory.mkdir();, +    URLClassLoader classloader = new URLClassLoader(, +        new URL[] {jarFile.toURI().toURL(), directory.toURI().toURL()}, null);, +    assertEquals(, +        ImmutableSet.of(jarFile.toURI(), directory.toURI()),, +        ClassPath.from(classloader).getPathUris());, +    directory.delete();, +    jarFile.delete();, +    tempDir.delete();, +  }, +, +  public void testAsClassPathString() throws Exception {, +    File tempDir = Files.createTempDir();, +    File jarFile = new File(tempDir, "a.jar");, +    // make an empty jar file, +    new JarOutputStream(new FileOutputStream(jarFile)).close();, +    File directory = new File(tempDir, "b");, +    directory.mkdir();, +    URLClassLoader classloader = new URLClassLoader(, +        new URL[] {jarFile.toURI().toURL(), directory.toURI().toURL()}, null);, +    assertEquals(, +        jarFile.getPath(), +            + StandardSystemProperty.PATH_SEPARATOR.value(), +            + directory.getPath(),, +        ClassPath.from(classloader).asClassPathString());, +    directory.delete();, +    jarFile.delete();, +    tempDir.delete();, +  }, +, +  public void testAsClassPathString_failOnNonFile() throws Exception {, +    File tempDir = Files.createTempDir();, +    File jarFile = new File(tempDir, "a.jar");, +    // make an empty jar file, +    new JarOutputStream(new FileOutputStream(jarFile)).close();, +    File directory = new File(tempDir, "b");, +    directory.mkdir();, +    URLClassLoader classloader = new URLClassLoader(, +        new URL[] {jarFile.toURI().toURL(), directory.toURI().toURL(),, +            new URL("http://www.ihostmyjarfiles.com/")}, null);, +    ClassPath classPath = ClassPath.from(classloader);, +    try {, +      classPath.asClassPathString();, +      fail();, +    } catch (IllegalStateException expected) {}, +    directory.delete();, +    jarFile.delete();, +    tempDir.delete();, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import com.google.common.base.StandardSystemProperty;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.io.Files;, +  public void testGetPathUris() throws Exception {, +    File tempDir = Files.createTempDir();, +    File jarFile = new File(tempDir, "a.jar");, +    // make an empty jar file, +    new JarOutputStream(new FileOutputStream(jarFile)).close();, +    File directory = new File(tempDir, "b");, +    directory.mkdir();, +    URLClassLoader classloader = new URLClassLoader(, +        new URL[] {jarFile.toURI().toURL(), directory.toURI().toURL()}, null);, +    assertEquals(, +        ImmutableSet.of(jarFile.toURI(), directory.toURI()),, +        ClassPath.from(classloader).getPathUris());, +    directory.delete();, +    jarFile.delete();, +    tempDir.delete();, +  }, +, +  public void testAsClassPathString() throws Exception {, +    File tempDir = Files.createTempDir();, +    File jarFile = new File(tempDir, "a.jar");, +    // make an empty jar file, +    new JarOutputStream(new FileOutputStream(jarFile)).close();, +    File directory = new File(tempDir, "b");, +    directory.mkdir();, +    URLClassLoader classloader = new URLClassLoader(, +        new URL[] {jarFile.toURI().toURL(), directory.toURI().toURL()}, null);, +    assertEquals(, +        jarFile.getPath(), +            + StandardSystemProperty.PATH_SEPARATOR.value(), +            + directory.getPath(),, +        ClassPath.from(classloader).asClassPathString());, +    directory.delete();, +    jarFile.delete();, +    tempDir.delete();, +  }, +]