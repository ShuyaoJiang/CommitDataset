[+++ /dev/null, +++ /dev/null, +++ b/guava/src/com/google/common/base/Optional.java, +public abstract class Optional<T> implements Serializable {, +   * Returns {@code true} if this holder contains a (non-null) instance., +   */, +  public abstract boolean isPresent();, +, +  // TODO(kevinb): isAbsent too?, +, +  /**, +   * Returns the contained instance, which must be present. If the instance might be, +   * absent, use {@link #or(Object)} or {@link #orNull} instead., +   *, +   * @throws IllegalStateException if the instance is absent ({@link #isPresent} returns, +   *     {@code false}), +   */, +  public abstract T get();, +, +  /**, +   * Returns the contained instance if it is present; {@code defaultValue} otherwise. If, +   * no default value should be required because the instance is known to be present, use, +   * {@link #get()} instead. For a default value of {@code null}, use {@link #orNull}., +   */, +  public abstract T or(T defaultValue);, +, +  /**, +   * Returns the contained instance if it is present; {@code null} otherwise. If the, +   * instance is known to be present, use {@link #get()} instead., +   */, +  @Nullable public abstract T orNull();, +, +  /**]