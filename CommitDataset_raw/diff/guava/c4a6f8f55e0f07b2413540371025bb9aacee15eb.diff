[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +  , +  boolean isRecordingStats() {, +    return statsCounterSupplier == CACHE_STATS_COUNTER;, +  }, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +  , +  boolean isRecordingStats() {, +    return statsCounterSupplier == CACHE_STATS_COUNTER;, +  }, +++ b/guava-tests/test/com/google/common/cache/CacheBuilderSpecTest.java, +  public void testParse_recordStatsTrue() {, +    CacheBuilderSpec spec = parse("recordStats=true");, +    assertTrue(spec.recordStats);, +    spec = parse("recordStats=TRUE");, +    assertTrue(spec.recordStats);, +    spec = parse("recordStats=TrUe");, +    assertTrue(spec.recordStats);, +    assertCacheBuilderEquivalence(CacheBuilder.newBuilder().recordStats(), CacheBuilder.from(spec));, +  }, +, +  public void testParse_recordStatsFalse() {, +    CacheBuilderSpec spec = parse("recordStats=false");, +    assertFalse(spec.recordStats);, +    spec = parse("recordStats=FaLsE");, +    assertFalse(spec.recordStats);, +    spec = parse("recordStats=FALSE");, +    assertFalse(spec.recordStats);, +    assertCacheBuilderEquivalence(CacheBuilder.newBuilder(), CacheBuilder.from(spec));, +  }, +, +  public void testParse_recordStatsValueUnspecified() {, +    try {, +      parse("recordStats=");, +      fail("Expected exception");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +  }, +, +  public void testParse_recordStatsInvalidValueUnspecified() {, +    try {, +      parse("recordStats=Fals");, +      fail("Expected exception");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +  }, +, +  public void testParse_recordStatsRepeated() {, +    try {, +      parse("recordStats,recordStats=false");, +      fail("Expected exception");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +  }, +, +        .addEqualityGroup(parse("recordStats=true"), parse("recordStats=True")), +        .addEqualityGroup(parse("recordStats=false"), parse("recordStats=False")), +    assertEquals("recordStats", a.isRecordingStats(), b.isRecordingStats());, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +  , +  boolean isRecordingStats() {, +    return statsCounterSupplier == CACHE_STATS_COUNTER;, +  }, +++ b/guava-tests/test/com/google/common/cache/CacheBuilderSpecTest.java, +  public void testParse_recordStatsTrue() {, +    CacheBuilderSpec spec = parse("recordStats=true");, +    assertTrue(spec.recordStats);, +    spec = parse("recordStats=TRUE");, +    assertTrue(spec.recordStats);, +    spec = parse("recordStats=TrUe");, +    assertTrue(spec.recordStats);, +    assertCacheBuilderEquivalence(CacheBuilder.newBuilder().recordStats(), CacheBuilder.from(spec));, +  }, +, +  public void testParse_recordStatsFalse() {, +    CacheBuilderSpec spec = parse("recordStats=false");, +    assertFalse(spec.recordStats);, +    spec = parse("recordStats=FaLsE");, +    assertFalse(spec.recordStats);, +    spec = parse("recordStats=FALSE");, +    assertFalse(spec.recordStats);, +    assertCacheBuilderEquivalence(CacheBuilder.newBuilder(), CacheBuilder.from(spec));, +  }, +, +  public void testParse_recordStatsValueUnspecified() {, +    try {, +      parse("recordStats=");, +      fail("Expected exception");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +  }, +, +  public void testParse_recordStatsInvalidValueUnspecified() {, +    try {, +      parse("recordStats=Fals");, +      fail("Expected exception");]