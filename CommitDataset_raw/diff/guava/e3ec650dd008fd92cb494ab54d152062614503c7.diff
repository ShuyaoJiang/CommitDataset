[+++ b/guava-tests/test/com/google/common/primitives/BooleansTest.java, +  private static final boolean[] ARRAY_TRUE = {true};, +    assertEquals(-1, Booleans.indexOf(EMPTY, ARRAY_FALSE));, +    assertEquals(-1, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE_TRUE));, +    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_FALSE, ARRAY_FALSE));, +    assertEquals(0, Booleans.indexOf(ARRAY_FALSE, ARRAY_FALSE));, +    assertEquals(0, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_FALSE));, +    assertEquals(1, Booleans.indexOf(ARRAY_FALSE_TRUE, ARRAY_TRUE));, +  }, +  , +  public void testIndexOf_arrays() {, +  public void testAsListIsEmpty() {, +    assertTrue(Booleans.asList(EMPTY).isEmpty()); , +    assertFalse(Booleans.asList(ARRAY_FALSE).isEmpty()); , +  }, +  , +  public void testAsListSize() {, +    assertEquals(0, Booleans.asList(EMPTY).size()); , +    assertEquals(1, Booleans.asList(ARRAY_FALSE).size()); , +    assertEquals(2, Booleans.asList(ARRAY_FALSE_TRUE).size()); , +  }, +  , +  public void testAsListIndexOf() {, +    assertEquals(-1, Booleans.asList(EMPTY).indexOf("wrong type")); , +    assertEquals(-1, Booleans.asList(EMPTY).indexOf(true)); , +    assertEquals(-1, Booleans.asList(ARRAY_FALSE).indexOf(true)); , +    assertEquals(0, Booleans.asList(ARRAY_FALSE).indexOf(false)); , +    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).indexOf(true)); , +  }, +  , +  public void testAsListLastIndexOf() {, +    assertEquals(-1, Booleans.asList(EMPTY).indexOf("wrong type")); , +    assertEquals(-1, Booleans.asList(EMPTY).indexOf(true)); , +    assertEquals(-1, Booleans.asList(ARRAY_FALSE).lastIndexOf(true)); , +    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).lastIndexOf(true)); , +    assertEquals(1, Booleans.asList(ARRAY_FALSE_FALSE).lastIndexOf(false)); , +  }, +  , +  public void testAsListContains() {, +    assertFalse(Booleans.asList(EMPTY).contains("wrong type")); , +    assertFalse(Booleans.asList(EMPTY).contains(true)); , +    assertFalse(Booleans.asList(ARRAY_FALSE).contains(true)); , +    assertTrue(Booleans.asList(ARRAY_TRUE).contains(true));  , +    assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(false)); , +    assertTrue(Booleans.asList(ARRAY_FALSE_TRUE).contains(true)); , +  }, +  , +  public void testAsListEquals() {, +    assertEquals(Booleans.asList(EMPTY), Collections.emptyList()); , +    assertEquals(Booleans.asList(ARRAY_FALSE), Booleans.asList(ARRAY_FALSE)); , +    assertFalse(Booleans.asList(ARRAY_FALSE).equals(ARRAY_FALSE)); , +    assertFalse(Booleans.asList(ARRAY_FALSE).equals(null)); , +    assertFalse(Booleans.asList(ARRAY_FALSE).equals(Booleans.asList(ARRAY_FALSE_TRUE))); , +    assertFalse(Booleans.asList(ARRAY_FALSE_FALSE).equals(Booleans.asList(ARRAY_FALSE_TRUE))); , +    assertEquals(1, Booleans.asList(ARRAY_FALSE_TRUE).lastIndexOf(true)); , +    List<Boolean> reference = Booleans.asList(ARRAY_FALSE); , +    assertEquals(Booleans.asList(ARRAY_FALSE), reference); , +  }, +  , +  public void testAsListHashcode() {, +    assertEquals(1, Booleans.asList(EMPTY).hashCode()); , +    assertEquals(Booleans.asList(ARRAY_FALSE).hashCode(), Booleans.asList(ARRAY_FALSE).hashCode()); , +    List<Boolean> reference = Booleans.asList(ARRAY_FALSE); , +    assertEquals(Booleans.asList(ARRAY_FALSE).hashCode(), reference.hashCode()); , +  }, +  , +  public void testAsListToString() {, +    assertEquals("[false]", Booleans.asList(ARRAY_FALSE).toString()); , +    assertEquals("[false, true]", Booleans.asList(ARRAY_FALSE_TRUE).toString()); , +  }, +  , +  public void testAsListSet() {, +    List<Boolean> list = Booleans.asList(ARRAY_FALSE);, +    assertFalse(list.set(0, true)); , +    assertTrue(list.set(0, false)); , +    try {, +      list.set(0, null);, +      fail();, +    } catch (NullPointerException expected) {, +    }, +    try {, +      list.set(1, true);, +      fail();, +    } catch (IndexOutOfBoundsException expected) {, +    }]