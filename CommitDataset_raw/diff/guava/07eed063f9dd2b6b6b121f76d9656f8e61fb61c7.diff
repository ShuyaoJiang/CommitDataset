[+++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  private static class SingleCallListener implements Runnable {, +    private final AtomicBoolean called = new AtomicBoolean();, +      called.set(true);, +      return called.get();, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  private static class SingleCallListener implements Runnable {, +    private final AtomicBoolean called = new AtomicBoolean();, +      called.set(true);, +      return called.get();, +++ b/android/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java, +  private static class SingleCallListener implements Runnable {, +, +    private boolean expectCall = false;, +    private final CountDownLatch calledCountDown = new CountDownLatch(1);, +, +    @Override, +    public void run() {, +      assertTrue("Listener called before it was expected", expectCall);, +      assertFalse("Listener called more than once", wasCalled());, +      calledCountDown.countDown();, +    }, +, +    public void expectCall() {, +      assertFalse("expectCall is already true", expectCall);, +      expectCall = true;, +    }, +, +    public boolean wasCalled() {, +      return calledCountDown.getCount() == 0;, +    }, +, +    public void waitForCall() throws InterruptedException {, +      assertTrue("expectCall is false", expectCall);, +      calledCountDown.await();, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  private static class SingleCallListener implements Runnable {, +    private final AtomicBoolean called = new AtomicBoolean();, +      called.set(true);, +      return called.get();, +++ b/android/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java, +  private static class SingleCallListener implements Runnable {, +, +    private boolean expectCall = false;, +    private final CountDownLatch calledCountDown = new CountDownLatch(1);, +, +    @Override, +    public void run() {, +      assertTrue("Listener called before it was expected", expectCall);, +      assertFalse("Listener called more than once", wasCalled());, +      calledCountDown.countDown();, +    }, +, +    public void expectCall() {, +      assertFalse("expectCall is already true", expectCall);, +      expectCall = true;, +    }, +, +    public boolean wasCalled() {, +      return calledCountDown.getCount() == 0;, +    }, +, +    public void waitForCall() throws InterruptedException {, +      assertTrue("expectCall is false", expectCall);, +      calledCountDown.await();, +    }, +  }, +, +++ /dev/null, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  private static class SingleCallListener implements Runnable {, +    private final AtomicBoolean called = new AtomicBoolean();, +      called.set(true);, +      return called.get();, +++ b/android/guava-tests/test/com/google/common/util/concurrent/JdkFutureAdaptersTest.java, +  private static class SingleCallListener implements Runnable {, +, +    private boolean expectCall = false;, +    private final CountDownLatch calledCountDown = new CountDownLatch(1);, +, +    @Override, +    public void run() {, +      assertTrue("Listener called before it was expected", expectCall);, +      assertFalse("Listener called more than once", wasCalled());, +      calledCountDown.countDown();, +    }, +, +    public void expectCall() {, +      assertFalse("expectCall is already true", expectCall);, +      expectCall = true;, +    }, +, +    public boolean wasCalled() {, +      return calledCountDown.getCount() == 0;, +    }, +, +    public void waitForCall() throws InterruptedException {]