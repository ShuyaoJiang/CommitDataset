[+++ b/guava/src/com/google/common/util/concurrent/Futures.java, +            setFuture(fallback.create(t));, +        ListenableFuture<? extends I> localInputFuture = inputFuture;, +        if (localInputFuture != null) {, +          inputFuture.cancel(mayInterruptIfRunning);, +        }, +        ListenableFuture<? extends O> outputFuture =, +        setFuture(outputFuture);, +    final ConcurrentLinkedQueue<SettableFuture<T>> delegates =, +      SettableFuture<T> delegate = SettableFuture.create();, +++ b/guava/src/com/google/common/util/concurrent/Futures.java, +            setFuture(fallback.create(t));, +        ListenableFuture<? extends I> localInputFuture = inputFuture;, +        if (localInputFuture != null) {, +          inputFuture.cancel(mayInterruptIfRunning);, +        }, +        ListenableFuture<? extends O> outputFuture =, +        setFuture(outputFuture);, +    final ConcurrentLinkedQueue<SettableFuture<T>> delegates =, +      SettableFuture<T> delegate = SettableFuture.create();, +++ b/guava/src/com/google/common/util/concurrent/SettableFuture.java, +import com.google.common.annotations.Beta;, +, + * A {@link ListenableFuture} whose result may be set by a {@link #set(Object)},, + * {@link #setException(Throwable)} or {@link #setFuture(ListenableFuture)} call. , + * It may also be cancelled., +  @Override public boolean set(@Nullable V value) {, +  @Override public boolean setException(Throwable throwable) {, +, +  @Beta, +  @Override, +  public boolean setFuture(ListenableFuture<? extends V> future) {, +    return super.setFuture(future);, +  }]