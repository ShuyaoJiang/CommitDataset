[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +  public void removeNode_nodeNotPresent() {, +    addNode(N1);, +  @Test, +  public void removeEdge_nodeNotPresent() {, +    addEdge(N1, N2);, +    assertFalse(graph.removeEdge(N1, NODE_NOT_IN_GRAPH));, +    assertThat(graph.successors(N1)).contains(N2);, +  }, +, +  @Test, +  public void removeEdge_edgeNotPresent() {, +    addEdge(N1, N2);, +    addNode(N3);, +    assertFalse(graph.removeEdge(N1, N3));, +    assertThat(graph.successors(N1)).contains(N2);, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +  public void removeNode_nodeNotPresent() {, +    addNode(N1);, +  @Test, +  public void removeEdge_nodeNotPresent() {, +    addEdge(N1, N2);, +    assertFalse(graph.removeEdge(N1, NODE_NOT_IN_GRAPH));, +    assertThat(graph.successors(N1)).contains(N2);, +  }, +, +  @Test, +  public void removeEdge_edgeNotPresent() {, +    addEdge(N1, N2);, +    addNode(N3);, +    assertFalse(graph.removeEdge(N1, N3));, +    assertThat(graph.successors(N1)).contains(N2);, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +  public void removeNode_nodeNotPresent() {, +    addNode(N1);, +  public void removeEdge_edgeNotPresent() {, +    addEdge(E12, N1, N2);]