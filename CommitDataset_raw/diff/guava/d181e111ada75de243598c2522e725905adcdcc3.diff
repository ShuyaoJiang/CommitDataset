[+++ b/android/guava/src/com/google/common/collect/ImmutableListMultimap.java, +import java.util.Map;, +    return fromMapEntries(multimap.asMap().entrySet(), null);, +  }, +, +  /** Creates an ImmutableListMultimap from an asMap.entrySet. */, +  static <K, V> ImmutableListMultimap<K, V> fromMapEntries(, +      Collection<? extends Map.Entry<? extends K, ? extends Collection<? extends V>>> mapEntries,, +      @NullableDecl Comparator<? super V> valueComparator) {, +    if (mapEntries.isEmpty()) {, +      return of();, +    }, +        new ImmutableMap.Builder<>(mapEntries.size());, +    for (Entry<? extends K, ? extends Collection<? extends V>> entry : mapEntries) {, +      K key = entry.getKey();, +      Collection<? extends V> values = entry.getValue();, +      ImmutableList<V> list =, +          (valueComparator == null), +              ? ImmutableList.copyOf(values), +              : ImmutableList.sortedCopyOf(valueComparator, values);, +        builder.put(key, list);, +++ b/android/guava/src/com/google/common/collect/ImmutableListMultimap.java, +import java.util.Map;, +    return fromMapEntries(multimap.asMap().entrySet(), null);, +  }, +, +  /** Creates an ImmutableListMultimap from an asMap.entrySet. */, +  static <K, V> ImmutableListMultimap<K, V> fromMapEntries(, +      Collection<? extends Map.Entry<? extends K, ? extends Collection<? extends V>>> mapEntries,, +      @NullableDecl Comparator<? super V> valueComparator) {, +    if (mapEntries.isEmpty()) {, +      return of();, +    }, +        new ImmutableMap.Builder<>(mapEntries.size());, +    for (Entry<? extends K, ? extends Collection<? extends V>> entry : mapEntries) {, +      K key = entry.getKey();, +      Collection<? extends V> values = entry.getValue();, +      ImmutableList<V> list =, +          (valueComparator == null), +              ? ImmutableList.copyOf(values), +              : ImmutableList.sortedCopyOf(valueComparator, values);, +        builder.put(key, list);, +++ b/android/guava/src/com/google/common/collect/ImmutableMultimap.java, +import java.util.ArrayList;, +import java.util.LinkedHashMap;, +    Map<K, Collection<V>> builderMap;, +      this.builderMap = new LinkedHashMap<K, Collection<V>>();, +    Collection<V> newMutableValueCollection() {, +      return new ArrayList<>();, +      Collection<V> valueCollection = builderMap.get(key);, +      if (valueCollection == null) {, +        builderMap.put(key, valueCollection = newMutableValueCollection());, +      }, +      valueCollection.add(value);, +      Collection<V> valueCollection = builderMap.get(key);, +      if (valueCollection != null) {, +          valueCollection.add(value);, +      Iterator<? extends V> valuesItr = values.iterator();, +      if (!valuesItr.hasNext()) {, +        return this;, +      }, +      valueCollection = newMutableValueCollection();, +      while (valuesItr.hasNext()) {, +        V value = valuesItr.next();, +        checkEntryNotNull(key, value);, +        valueCollection.add(value);, +      }, +      builderMap.put(key, valueCollection);, +      return this;, +    }, +    @CanIgnoreReturnValue, +    Builder<K, V> combine(Builder<K, V> other) {, +      for (Map.Entry<K, Collection<V>> entry : other.builderMap.entrySet()) {, +        putAll(entry.getKey(), entry.getValue());, +      }, +      return this;, +    }, +, +      Collection<Map.Entry<K, Collection<V>>> mapEntries = builderMap.entrySet();, +        mapEntries = Ordering.from(keyComparator).<K>onKeys().immutableSortedCopy(mapEntries);, +      return ImmutableListMultimap.fromMapEntries(mapEntries, valueComparator);, +++ b/android/guava/src/com/google/common/collect/ImmutableListMultimap.java, +import java.util.Map;, +    return fromMapEntries(multimap.asMap().entrySet(), null);, +  }, +, +  /** Creates an ImmutableListMultimap from an asMap.entrySet. */, +  static <K, V> ImmutableListMultimap<K, V> fromMapEntries(, +      Collection<? extends Map.Entry<? extends K, ? extends Collection<? extends V>>> mapEntries,, +      @NullableDecl Comparator<? super V> valueComparator) {, +    if (mapEntries.isEmpty()) {, +      return of();, +    }, +        new ImmutableMap.Builder<>(mapEntries.size());, +    for (Entry<? extends K, ? extends Collection<? extends V>> entry : mapEntries) {, +      K key = entry.getKey();, +      Collection<? extends V> values = entry.getValue();, +      ImmutableList<V> list =, +          (valueComparator == null), +              ? ImmutableList.copyOf(values)]