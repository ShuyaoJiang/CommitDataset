[+++ b/guava/src/com/google/common/io/ByteStreams.java, +    return ByteStreams.asInputSupplier(asByteSource(b));, +    return ByteStreams.asInputSupplier(asByteSource(b).slice(off, len));, +    asByteSink(to).write(from);, +    return asByteSource(from).copyTo(asByteSink(to));, +    return asByteSource(from).copyTo(to);, +    return asByteSink(to).writeFrom(from);, +    return asByteSource(supplier).read();, +    return asByteSource(supplier).size();, +    return asByteSource(supplier1).contentEquals(asByteSource(supplier2));, +    checkNotNull(processor);, +, +      int read;, +        read = in.read(buf);, +      } while (read != -1 && processor.processBytes(buf, 0, read));, +   * @deprecated Use {@code hash} with the {@code Hashing.crc32()} or, +   *     {@code Hashing.adler32()} hash functions instead. This method is, +   *     scheduled to be removed in Guava 15.0., +  @Deprecated, +    checkNotNull(checksum);, +    return asByteSource(supplier).hash(hashFunction);, +    return asInputSupplier(asByteSource(supplier).slice(offset, length));, +, +  // TODO(user): Remove these once Input/OutputSupplier methods are removed, +, +  static <S extends InputStream> InputSupplier<S> asInputSupplier(, +      final ByteSource source) {, +    checkNotNull(source);, +    return new InputSupplier<S>() {, +      @SuppressWarnings("unchecked") // used internally where known to be safe, +      @Override, +      public S getInput() throws IOException {, +        return (S) source.openStream();, +      }, +    };, +  }, +, +  static <S extends OutputStream> OutputSupplier<S> asOutputSupplier(, +      final ByteSink sink) {, +    checkNotNull(sink);, +    return new OutputSupplier<S>() {, +      @SuppressWarnings("unchecked") // used internally where known to be safe, +      @Override, +      public S getOutput() throws IOException {, +        return (S) sink.openStream();, +      }, +    };, +  }, +, +  static ByteSource asByteSource(, +      final InputSupplier<? extends InputStream> supplier) {, +    checkNotNull(supplier);, +    return new ByteSource() {, +      @Override, +      public InputStream openStream() throws IOException {, +        return supplier.getInput();, +      }, +    };, +  }, +, +  static ByteSink asByteSink(, +      final OutputSupplier<? extends OutputStream> supplier) {, +    checkNotNull(supplier);, +    return new ByteSink() {, +      @Override, +      public OutputStream openStream() throws IOException {, +        return supplier.getOutput();, +      }, +    };, +  }, +++ b/guava/src/com/google/common/io/ByteStreams.java, +    return ByteStreams.asInputSupplier(asByteSource(b));, +    return ByteStreams.asInputSupplier(asByteSource(b).slice(off, len));, +    asByteSink(to).write(from);, +    return asByteSource(from).copyTo(asByteSink(to));, +    return asByteSource(from).copyTo(to);, +    return asByteSink(to).writeFrom(from);, +    return asByteSource(supplier).read();, +    return asByteSource(supplier).size();, +    return asByteSource(supplier1).contentEquals(asByteSource(supplier2));, +    checkNotNull(processor);, +, +      int read;, +        read = in.read(buf);, +      } while (read != -1 && processor.processBytes(buf, 0, read));, +   * @deprecated Use {@code hash} with the {@code Hashing.crc32()} or, +   *     {@code Hashing.adler32()} hash functions instead. This method is, +   *     scheduled to be removed in Guava 15.0., +  @Deprecated, +    checkNotNull(checksum);, +    return asByteSource(supplier).hash(hashFunction);, +    return asInputSupplier(asByteSource(supplier).slice(offset, length));, +, +  // TODO(user): Remove these once Input/OutputSupplier methods are removed, +, +  static <S extends InputStream> InputSupplier<S> asInputSupplier(, +      final ByteSource source) {, +    checkNotNull(source);, +    return new InputSupplier<S>() {, +      @SuppressWarnings("unchecked") // used internally where known to be safe]