[+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import static org.junit.Assert.assertFalse;, +import java.nio.ByteOrder;, +  static void assertHashByteBufferInvariants(HashFunction hashFunction) {, +    assertHashByteBufferMatchesBytes(hashFunction);, +    assertHashByteBufferExhaustsBuffer(hashFunction);, +    assertHashByteBufferPreservesByteOrder(hashFunction);, +    assertHasherByteBufferPreservesByteOrder(hashFunction);, +  }, +, +  static void assertHashByteBufferMatchesBytes(HashFunction hashFunction) {, +    Random rng = new Random(0L);, +    byte[] bytes = new byte[rng.nextInt(256) + 1];, +    rng.nextBytes(bytes);, +    assertEquals(hashFunction.hashBytes(bytes), hashFunction.hashBytes(ByteBuffer.wrap(bytes)));, +  }, +, +  static void assertHashByteBufferExhaustsBuffer(HashFunction hashFunction) {, +    Random rng = new Random(0L);, +    byte[] bytes = new byte[rng.nextInt(256) + 1];, +    rng.nextBytes(bytes);, +    ByteBuffer buffer = ByteBuffer.wrap(bytes);, +    HashCode unused = hashFunction.hashBytes(buffer);, +    assertFalse(buffer.hasRemaining());, +  }, +, +  static void assertHashByteBufferPreservesByteOrder(HashFunction hashFunction) {, +    Random rng = new Random(0L);, +    byte[] bytes = new byte[rng.nextInt(256) + 1];, +    rng.nextBytes(bytes);, +    ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);, +    ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);, +    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));, +    assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());, +    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());, +  }, +, +  static void assertHasherByteBufferPreservesByteOrder(HashFunction hashFunction) {, +    Random rng = new Random(0L);, +    byte[] bytes = new byte[rng.nextInt(256) + 1];, +    rng.nextBytes(bytes);, +    ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);, +    ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);, +    assertEquals(, +        hashFunction.newHasher().putBytes(littleEndian).hash(),, +        hashFunction.newHasher().putBytes(littleEndian).hash());, +    assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());, +    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());, +  }, +, +      assertHashByteBufferEquivalence(hashFunction, random);, +  private static void assertHashByteBufferEquivalence(HashFunction hashFunction, Random random) {, +    int size = random.nextInt(2048);, +    byte[] bytes = new byte[size];, +    random.nextBytes(bytes);, +    assertEquals(, +        hashFunction.hashBytes(ByteBuffer.wrap(bytes)),, +        hashFunction.newHasher(size).putBytes(ByteBuffer.wrap(bytes)).hash());, +    int off = random.nextInt(size);, +    int len = random.nextInt(size - off);, +    assertEquals(, +        hashFunction.hashBytes(ByteBuffer.wrap(bytes, off, len)),, +        hashFunction.newHasher(size).putBytes(ByteBuffer.wrap(bytes, off, len)).hash());, +  }, +, +++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java, +import static org.junit.Assert.assertFalse;, +import java.nio.ByteOrder;, +  static void assertHashByteBufferInvariants(HashFunction hashFunction) {, +    assertHashByteBufferMatchesBytes(hashFunction);, +    assertHashByteBufferExhaustsBuffer(hashFunction);, +    assertHashByteBufferPreservesByteOrder(hashFunction);, +    assertHasherByteBufferPreservesByteOrder(hashFunction);, +  }, +, +  static void assertHashByteBufferMatchesBytes(HashFunction hashFunction) {, +    Random rng = new Random(0L);, +    byte[] bytes = new byte[rng.nextInt(256) + 1];, +    rng.nextBytes(bytes);, +    assertEquals(hashFunction.hashBytes(bytes), hashFunction.hashBytes(ByteBuffer.wrap(bytes)));, +  }, +, +  static void assertHashByteBufferExhaustsBuffer(HashFunction hashFunction) {, +    Random rng = new Random(0L);, +    byte[] bytes = new byte[rng.nextInt(256) + 1];, +    rng.nextBytes(bytes);, +    ByteBuffer buffer = ByteBuffer.wrap(bytes);, +    HashCode unused = hashFunction.hashBytes(buffer);, +    assertFalse(buffer.hasRemaining());, +  }, +, +  static void assertHashByteBufferPreservesByteOrder(HashFunction hashFunction) {, +    Random rng = new Random(0L);, +    byte[] bytes = new byte[rng.nextInt(256) + 1];, +    rng.nextBytes(bytes);, +    ByteBuffer littleEndian = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);, +    ByteBuffer bigEndian = ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);, +    assertEquals(hashFunction.hashBytes(littleEndian), hashFunction.hashBytes(littleEndian));, +    assertEquals(ByteOrder.LITTLE_ENDIAN, littleEndian.order());, +    assertEquals(ByteOrder.BIG_ENDIAN, littleEndian.order());]