[+++ b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java, +import junit.framework.TestCase;, +public class ExecutionSequencerTest extends TestCase {, +  @Override, +  @Override, +  public void testSecondTaskWaitsForFirstEvenIfCancelled() throws Exception {, +  public void testToString() {, +    Future<?> first = serializer.submitAsync(firstCallable, directExecutor());, +    TestCallable secondCallable = new TestCallable(SettableFuture.<Void>create());, +    Future<?> second = serializer.submitAsync(secondCallable, directExecutor());, +    assertThat(secondCallable.called).isFalse();, +    assertThat(second.toString()).contains(secondCallable.toString());, +    firstFuture.set(null);, +    assertThat(second.toString()).contains(secondCallable.future.toString());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java, +import junit.framework.TestCase;, +public class ExecutionSequencerTest extends TestCase {, +  @Override, +  @Override, +  public void testSecondTaskWaitsForFirstEvenIfCancelled() throws Exception {, +  public void testToString() {, +    Future<?> first = serializer.submitAsync(firstCallable, directExecutor());, +    TestCallable secondCallable = new TestCallable(SettableFuture.<Void>create());, +    Future<?> second = serializer.submitAsync(secondCallable, directExecutor());, +    assertThat(secondCallable.called).isFalse();, +    assertThat(second.toString()).contains(secondCallable.toString());, +    firstFuture.set(null);, +    assertThat(second.toString()).contains(secondCallable.future.toString());, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java, +, +          @Override, +          public String toString() {, +            return callable.toString();, +          }, +, +          @Override, +          public String toString() {, +            return callable.toString();, +          }, +++ b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java, +import junit.framework.TestCase;, +public class ExecutionSequencerTest extends TestCase {, +  @Override, +  @Override, +  public void testSecondTaskWaitsForFirstEvenIfCancelled() throws Exception {, +  public void testToString() {, +    Future<?> first = serializer.submitAsync(firstCallable, directExecutor());, +    TestCallable secondCallable = new TestCallable(SettableFuture.<Void>create());, +    Future<?> second = serializer.submitAsync(secondCallable, directExecutor());, +    assertThat(secondCallable.called).isFalse();, +    assertThat(second.toString()).contains(secondCallable.toString());, +    firstFuture.set(null);, +    assertThat(second.toString()).contains(secondCallable.future.toString());, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java, +, +          @Override, +          public String toString() {, +            return callable.toString();, +          }, +, +          @Override, +          public String toString() {, +            return callable.toString();, +          }, +++ b/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java, +import junit.framework.TestCase;, +public class ExecutionSequencerTest extends TestCase {, +  @Override, +  @Override, +  public void testSecondTaskWaitsForFirstEvenIfCancelled() throws Exception {, +  public void testToString() {, +    Future<?> first = serializer.submitAsync(firstCallable, directExecutor());, +    TestCallable secondCallable = new TestCallable(SettableFuture.<Void>create());, +    Future<?> second = serializer.submitAsync(secondCallable, directExecutor());, +    assertThat(secondCallable.called).isFalse();, +    assertThat(second.toString()).contains(secondCallable.toString());, +    firstFuture.set(null);, +    assertThat(second.toString()).contains(secondCallable.future.toString());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java, +import junit.framework.TestCase;, +public class ExecutionSequencerTest extends TestCase {, +  @Override, +  @Override, +  public void testSecondTaskWaitsForFirstEvenIfCancelled() throws Exception {, +  public void testToString() {, +    Future<?> first = serializer.submitAsync(firstCallable, directExecutor());, +    TestCallable secondCallable = new TestCallable(SettableFuture.<Void>create());, +    Future<?> second = serializer.submitAsync(secondCallable, directExecutor());, +    assertThat(secondCallable.called).isFalse();, +    assertThat(second.toString()).contains(secondCallable.toString());, +    firstFuture.set(null);, +    assertThat(second.toString()).contains(secondCallable.future.toString());]