[+++ b/guava-tests/test/com/google/common/xml/XmlEscapersTest.java, +    assertBasicXmlEscaper(xmlEscaper, true, false);, +    assertBasicXmlEscaper(xmlContentEscaper, false, false);, +  public void testXmlAttributeEscaper() throws Exception {, +    CharEscaper xmlAttributeEscaper = (CharEscaper) XmlEscapers.xmlAttributeEscaper();, +    assertBasicXmlEscaper(xmlAttributeEscaper, true, true);, +    // Test quotes are escaped., +    assertEquals("&quot;test&quot;", xmlAttributeEscaper.escape("\"test\""));, +    assertEquals("&apos;test&apos;", xmlAttributeEscaper.escape("\'test'"));, +    // Test all escapes, +    assertEquals("a&quot;b&lt;c&gt;d&amp;e&quot;f&apos;",, +        xmlAttributeEscaper.escape("a\"b<c>d&e\"f'"));, +    // Test '\t', '\n' and '\r' are escaped., +    assertEquals("a&#x9;b&#xA;c&#xD;d", xmlAttributeEscaper.escape("a\tb\nc\rd"));, +  }, +, +      boolean shouldEscapeQuotes, boolean shouldEscapeWhitespaceChars) {, +        if (shouldEscapeWhitespaceChars) {, +          assertEscaping(xmlEscaper, "&#x" + Integer.toHexString(ch).toUpperCase() + ";", ch);, +        } else {, +        }, +++ b/guava-tests/test/com/google/common/xml/XmlEscapersTest.java, +    assertBasicXmlEscaper(xmlEscaper, true, false);, +    assertBasicXmlEscaper(xmlContentEscaper, false, false);, +  public void testXmlAttributeEscaper() throws Exception {, +    CharEscaper xmlAttributeEscaper = (CharEscaper) XmlEscapers.xmlAttributeEscaper();, +    assertBasicXmlEscaper(xmlAttributeEscaper, true, true);, +    // Test quotes are escaped., +    assertEquals("&quot;test&quot;", xmlAttributeEscaper.escape("\"test\""));, +    assertEquals("&apos;test&apos;", xmlAttributeEscaper.escape("\'test'"));, +    // Test all escapes, +    assertEquals("a&quot;b&lt;c&gt;d&amp;e&quot;f&apos;",, +        xmlAttributeEscaper.escape("a\"b<c>d&e\"f'"));, +    // Test '\t', '\n' and '\r' are escaped., +    assertEquals("a&#x9;b&#xA;c&#xD;d", xmlAttributeEscaper.escape("a\tb\nc\rd"));, +  }, +, +      boolean shouldEscapeQuotes, boolean shouldEscapeWhitespaceChars) {, +        if (shouldEscapeWhitespaceChars) {, +          assertEscaping(xmlEscaper, "&#x" + Integer.toHexString(ch).toUpperCase() + ";", ch);, +        } else {, +        }, +++ b/guava/src/com/google/common/xml/XmlEscapers.java, +import com.google.common.escape.Escaper;, +   * {@link #xmlEscaper} if the output can appear in element content or, +   * {@link #xmlAttributeEscaper} in attribute values., +  /**, +   * Returns an {@link Escaper} instance that escapes special characters in a, +   * string so it can safely be included in an XML document as attribute values., +   * See section, +   * <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize">3.3.3</a>, +   * of the XML specification., +   *, +   * <p>This escaper does not escape non-ASCII characters to their numeric, +   * character references (NCR), however horizontal tab {@code '\t'}, line feed, +   * {@code '\n'} and carriage return {@code '\r'} are escaped to a, +   * corresponding NCR {@code "&#x9;"}, {@code "&#xA;"}, and {@code "&#xD;"}, +   * respectively. Any other non-ASCII characters appearing in the input will, +   * be preserved in the output., +   *, +   * <p>This escaper does not treat surrogate pairs specially and does not, +   * perform Unicode validation on its input., +   */, +  public static Escaper xmlAttributeEscaper() {, +    return XML_ATTRIBUTE_ESCAPER;, +  }, +, +  private static final Escaper XML_ATTRIBUTE_ESCAPER;, +    builder.addEscape('\t', "&#x9;");, +    builder.addEscape('\n', "&#xA;");, +    builder.addEscape('\r', "&#xD;");, +    XML_ATTRIBUTE_ESCAPER = builder.build();]