[+++ b/guava/src/com/google/common/base/Equivalence.java, + * <h3>For Java 8+ users</h3>, + *, + * <p>A future version of this class will implement {@code BiPredicate<T, T>}. In the meantime, to, + * use an equivalence (say, named {@code equivalence}) as a bi-predicate, use the method reference, + * {@code equivalence::equivalent}., + * , +++ b/guava/src/com/google/common/base/Equivalence.java, + * <h3>For Java 8+ users</h3>, + *, + * <p>A future version of this class will implement {@code BiPredicate<T, T>}. In the meantime, to, + * use an equivalence (say, named {@code equivalence}) as a bi-predicate, use the method reference, + * {@code equivalence::equivalent}., + * , +++ b/guava/src/com/google/common/base/Function.java, + * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions, + * or method references instead of classes, leaving your code easier to migrate in the future., + * type</i> of function is expected, use the method reference {@code function::apply}. A future, + * version of {@code com.google.common.base.Function} will be made to <i>extend</i> {@code, + * java.util.function.Function}, making conversion code necessary only in one direction. At that, + * time, this interface will be officially discouraged., +++ b/guava/src/com/google/common/base/Equivalence.java, + * <h3>For Java 8+ users</h3>, + *, + * <p>A future version of this class will implement {@code BiPredicate<T, T>}. In the meantime, to, + * use an equivalence (say, named {@code equivalence}) as a bi-predicate, use the method reference, + * {@code equivalence::equivalent}., + * , +++ b/guava/src/com/google/common/base/Function.java, + * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions, + * or method references instead of classes, leaving your code easier to migrate in the future., + * type</i> of function is expected, use the method reference {@code function::apply}. A future, + * version of {@code com.google.common.base.Function} will be made to <i>extend</i> {@code, + * java.util.function.Function}, making conversion code necessary only in one direction. At that, + * time, this interface will be officially discouraged., +++ b/guava/src/com/google/common/base/Predicate.java, + * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions, + * or method references instead of classes, leaving your code easier to migrate in the future., + * <p>To use a reference of this type (say, named {@code guavaPredicate}) in a context where {@code, + * java.util.function.Predicate} is expected, use the method reference {@code, + * guavaPredicate::apply}. For the other direction, use {@code javaUtilPredicate::test}. A future, + * version of this interface will be made to <i>extend</i> {@code java.util.function.Predicate}, so, + * that conversion will be necessary in only one direction. At that time, this interface will be, + * officially discouraged., +++ b/guava/src/com/google/common/base/Equivalence.java, + * <h3>For Java 8+ users</h3>, + *, + * <p>A future version of this class will implement {@code BiPredicate<T, T>}. In the meantime, to, + * use an equivalence (say, named {@code equivalence}) as a bi-predicate, use the method reference, + * {@code equivalence::equivalent}., + * , +++ b/guava/src/com/google/common/base/Function.java, + * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions, + * or method references instead of classes, leaving your code easier to migrate in the future., + * type</i> of function is expected, use the method reference {@code function::apply}. A future, + * version of {@code com.google.common.base.Function} will be made to <i>extend</i> {@code, + * java.util.function.Function}, making conversion code necessary only in one direction. At that, + * time, this interface will be officially discouraged., +++ b/guava/src/com/google/common/base/Predicate.java, + * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions, + * or method references instead of classes, leaving your code easier to migrate in the future., + * <p>To use a reference of this type (say, named {@code guavaPredicate}) in a context where {@code, + * java.util.function.Predicate} is expected, use the method reference {@code, + * guavaPredicate::apply}. For the other direction, use {@code javaUtilPredicate::test}. A future, + * version of this interface will be made to <i>extend</i> {@code java.util.function.Predicate}, so, + * that conversion will be necessary in only one direction. At that time, this interface will be, + * officially discouraged., +++ b/guava/src/com/google/common/base/Supplier.java, + * A class that can supply objects of a single type; a pre-Java-8 version of {@code, + * java.util.function.Supplier}. Semantically, this could be a factory, generator, builder,, + * closure, or something else entirely. No guarantees are implied by this interface., + *, + * <p>The {@link Suppliers} class provides common suppliers and related utilities., + *, + * <p>See the Guava User Guide article on <a href=, + * "https://github.com/google/guava/wiki/FunctionalExplained">the use of functional types</a>., + *, + * <h3>For Java 8+ users</h3>, + *, + * <p>This interface is now a legacy type. Use {@code java.util.function.Supplier} (or the, + * appropriate primitive specialization such as {@code IntSupplier}) instead whenever possible., + * Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions, + * or method references instead of classes, leaving your code easier to migrate in the future., + *, + * <p>To use an existing supplier instance (say, named {@code supplier}) in a context where the, + * <i>other type</i> of supplier is expected, use the method reference {@code supplier::get}. A, + * future version of {@code com.google.common.base.Supplier} will be made to <i>extend</i> {@code, + * java.util.function.Supplier}, making conversion code necessary only in one direction. At that, + * time, this interface will be officially discouraged.]