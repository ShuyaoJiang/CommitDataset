[+++ b/android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java, +, +  public void testAllocArraysDefault() {, +    CompactHashMap<Integer, String> map = CompactHashMap.create();, +    assertThat(map.needsAllocArrays()).isTrue();, +    assertThat(map.entries).isNull();, +    assertThat(map.keys).isNull();, +    assertThat(map.values).isNull();, +, +    map.put(1, "1");, +    assertThat(map.needsAllocArrays()).isFalse();, +    assertThat(map.entries).hasLength(CompactHashMap.DEFAULT_SIZE);, +    assertThat(map.keys).hasLength(CompactHashMap.DEFAULT_SIZE);, +    assertThat(map.values).hasLength(CompactHashMap.DEFAULT_SIZE);, +  }, +, +  public void testAllocArraysExpectedSize() {, +    for (int i = 0; i <= CompactHashMap.DEFAULT_SIZE; i++) {, +      CompactHashMap<Integer, String> map = CompactHashMap.createWithExpectedSize(i);, +      assertThat(map.needsAllocArrays()).isTrue();, +      assertThat(map.entries).isNull();, +      assertThat(map.keys).isNull();, +      assertThat(map.values).isNull();, +, +      map.put(1, "1");, +      assertThat(map.needsAllocArrays()).isFalse();, +      int expectedSize = Math.max(1, i);, +      assertThat(map.entries).hasLength(expectedSize);, +      assertThat(map.keys).hasLength(expectedSize);, +      assertThat(map.values).hasLength(expectedSize);, +    }, +  }, +++ b/android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java, +, +  public void testAllocArraysDefault() {, +    CompactHashMap<Integer, String> map = CompactHashMap.create();, +    assertThat(map.needsAllocArrays()).isTrue();, +    assertThat(map.entries).isNull();, +    assertThat(map.keys).isNull();, +    assertThat(map.values).isNull();, +, +    map.put(1, "1");, +    assertThat(map.needsAllocArrays()).isFalse();, +    assertThat(map.entries).hasLength(CompactHashMap.DEFAULT_SIZE);, +    assertThat(map.keys).hasLength(CompactHashMap.DEFAULT_SIZE);, +    assertThat(map.values).hasLength(CompactHashMap.DEFAULT_SIZE);, +  }, +, +  public void testAllocArraysExpectedSize() {, +    for (int i = 0; i <= CompactHashMap.DEFAULT_SIZE; i++) {, +      CompactHashMap<Integer, String> map = CompactHashMap.createWithExpectedSize(i);, +      assertThat(map.needsAllocArrays()).isTrue();, +      assertThat(map.entries).isNull();, +      assertThat(map.keys).isNull();, +      assertThat(map.values).isNull();, +, +      map.put(1, "1");, +      assertThat(map.needsAllocArrays()).isFalse();, +      int expectedSize = Math.max(1, i);, +      assertThat(map.entries).hasLength(expectedSize);, +      assertThat(map.keys).hasLength(expectedSize);, +      assertThat(map.values).hasLength(expectedSize);, +    }, +  }, +++ b/android/guava-tests/test/com/google/common/collect/CompactHashSetTest.java, +import static com.google.common.truth.Truth.assertThat;, +, +  public void testAllocArraysDefault() {, +    CompactHashSet<Integer> set = CompactHashSet.create();, +    assertThat(set.needsAllocArrays()).isTrue();, +    assertThat(set.elements).isNull();, +, +    set.add(1);, +    assertThat(set.needsAllocArrays()).isFalse();, +    assertThat(set.elements).hasLength(CompactHashSet.DEFAULT_SIZE);, +  }, +, +  public void testAllocArraysExpectedSize() {, +    for (int i = 0; i <= CompactHashSet.DEFAULT_SIZE; i++) {, +      CompactHashSet<Integer> set = CompactHashSet.createWithExpectedSize(i);, +      assertThat(set.needsAllocArrays()).isTrue();, +      assertThat(set.elements).isNull();, +, +      set.add(1);, +      assertThat(set.needsAllocArrays()).isFalse();, +      int expectedSize = Math.max(1, i);, +      assertThat(set.elements).hasLength(expectedSize);, +    }, +++ b/android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java, +, +  public void testAllocArraysDefault() {, +    CompactHashMap<Integer, String> map = CompactHashMap.create();, +    assertThat(map.needsAllocArrays()).isTrue();, +    assertThat(map.entries).isNull();, +    assertThat(map.keys).isNull();, +    assertThat(map.values).isNull();, +, +    map.put(1, "1");, +    assertThat(map.needsAllocArrays()).isFalse();, +    assertThat(map.entries).hasLength(CompactHashMap.DEFAULT_SIZE);]