[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +      for (int j = i + 1; j <= MAX_BOUND; j++) {, +  public void testBuilderRejectsEmptyRanges() {, +    for (int i = MIN_BOUND; i <= MAX_BOUND; i++) {, +      ImmutableRangeMap.Builder<Integer, Integer> builder = ImmutableRangeMap.builder();, +      try {, +        builder.put(Range.closedOpen(i, i), 1);, +        fail("Expected IllegalArgumentException");, +      } catch (IllegalArgumentException expected) {, +        // success, +      }, +      try {, +        builder.put(Range.openClosed(i, i), 1);, +        fail("Expected IllegalArgumentException");, +      } catch (IllegalArgumentException expected) {, +        // success, +      }, +    }, +  }, +, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +      for (int j = i + 1; j <= MAX_BOUND; j++) {, +  public void testBuilderRejectsEmptyRanges() {, +    for (int i = MIN_BOUND; i <= MAX_BOUND; i++) {, +      ImmutableRangeMap.Builder<Integer, Integer> builder = ImmutableRangeMap.builder();, +      try {, +        builder.put(Range.closedOpen(i, i), 1);, +        fail("Expected IllegalArgumentException");, +      } catch (IllegalArgumentException expected) {, +        // success, +      }, +      try {, +        builder.put(Range.openClosed(i, i), 1);, +        fail("Expected IllegalArgumentException");, +      } catch (IllegalArgumentException expected) {, +        // success, +      }, +    }, +  }, +, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +        if (!range1.isConnected(range2) || range1.intersection(range2).isEmpty()) {, +++ b/guava/src/com/google/common/collect/ImmutableRangeMap.java, +import static com.google.common.base.Preconditions.checkArgument;, +     *         into this builder, or if {@code range} is empty, +      checkArgument(!range.isEmpty(), "Range must not be empty, but was %s", range);]