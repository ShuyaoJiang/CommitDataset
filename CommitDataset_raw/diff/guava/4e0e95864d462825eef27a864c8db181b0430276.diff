[+++ b/guava-tests/test/com/google/common/xml/XmlEscapersTest.java, +        // and everything else is replaced with FFFD., +        assertEscaping(xmlEscaper, "\uFFFD", ch);, +    // Test that 0xFFFE and 0xFFFF are replaced with 0xFFFD, +    assertEscaping(xmlEscaper, "\uFFFD", '\uFFFE');, +    assertEscaping(xmlEscaper, "\uFFFD", '\uFFFF');, +    assertEquals("0xFFFE is forbidden and should be replaced during escaping",, +        "[\uFFFD]", xmlEscaper.escape("[\ufffe]"));, +    assertEquals("0xFFFF is forbidden and should be replaced during escaping",, +        "[\uFFFD]", xmlEscaper.escape("[\uffff]"));, +++ b/guava-tests/test/com/google/common/xml/XmlEscapersTest.java, +        // and everything else is replaced with FFFD., +        assertEscaping(xmlEscaper, "\uFFFD", ch);, +    // Test that 0xFFFE and 0xFFFF are replaced with 0xFFFD, +    assertEscaping(xmlEscaper, "\uFFFD", '\uFFFE');, +    assertEscaping(xmlEscaper, "\uFFFD", '\uFFFF');, +    assertEquals("0xFFFE is forbidden and should be replaced during escaping",, +        "[\uFFFD]", xmlEscaper.escape("[\ufffe]"));, +    assertEquals("0xFFFF is forbidden and should be replaced during escaping",, +        "[\uFFFD]", xmlEscaper.escape("[\uffff]"));, +++ b/guava/src/com/google/common/xml/XmlEscapers.java, +   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control, +   * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which, +   * are not permitted in XML. For more detail see section <a, +   * href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets">2.2</a> of the, +   * XML specification., +   *, +   * <p>This escaper substitutes {@code 0xFFFD} for non-whitespace control, +   * characters and the character values {@code 0xFFFE} and {@code 0xFFFF} which, +   * are not permitted in XML. For more detail see section <a, +   * href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets">2.2</a> of the, +   * XML specification., +   *, +    builder.setSafeRange(Character.MIN_VALUE, '\uFFFD');, +    // Unsafe characters are replaced with the Unicode replacement character., +    builder.setUnsafeReplacement("\uFFFD");, +    /*, +     * Except for \n, \t, and \r, all ASCII control characters are replaced with, +     * the Unicode replacement character., +     *, +     * Implementation note: An alternative to the following would be to make a, +     * map that simply replaces the allowed ASCII whitespace characters with, +     * themselves and to set the minimum safe character to 0x20. However this, +     * would slow down the escaping of simple strings that contain \t, \n, or, +     * \r., +     */, +        builder.addEscape(c, "\uFFFD");]