[+++ b/guava/src/com/google/common/base/Throwables.java, + * <p>See the Guava User Guide entry on <a, + * href="https://github.com/google/guava/wiki/ThrowablesExplained">Throwables</a>., +   * @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code, +   *     null}. This method is scheduled to be removed in July 2018., +   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link, +   * RuntimeException} or {@link Error}. Example usage:, +   * @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code, +   *     null}. This method is scheduled to be removed in July 2018., +   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link, +   * RuntimeException}, {@link Error}, or {@code declaredType}. Example usage:, +   * Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link, +   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. In the, +   * unlikely case that you have three or more declared checked exception types, you can handle them, +   * all by invoking these methods repeatedly. See usage example in {@link, +   * #propagateIfPossible(Throwable, Class)}., +   * Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link, +   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates., +   * <p>Prefer this method instead of manually casting an exception's cause, for example This is, +   * preferable to manually casting (e.g. {@code (IOException) e.getCause()}) because if a {@link, +   * ClassCastException} results {@code throwable} will be preserved as that exception's cause., +   *, +   * @throws ClassCastException if the cause cannot be cast to the expected type. The {@code, +  public static <X extends Throwable> X getCauseAs(, +      Throwable throwable, Class<X> expectedCauseType) {, +   *   <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time, +   *       to retrieve each element of the returned list (probably slightly more than {@code, +   *       1/stackSize}).]