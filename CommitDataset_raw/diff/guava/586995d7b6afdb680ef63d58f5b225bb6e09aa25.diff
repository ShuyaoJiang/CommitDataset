[+++ b/guava/src/com/google/common/collect/Ordering.java, +   * <p><b>Java 8 users:</b> Use {@code Collections.min(Arrays.asList(a, b), thisComparator)}, +   * instead (but note that it does not guarantee which tied maximum element is returned)., +   * <p><b>Java 8 users:</b> Use {@code Collections.min(Arrays.asList(a, b, c...), thisComparator)}, +   * instead (but note that it does not guarantee which tied maximum element is returned)., +   * Returns the greater of the two values according to this ordering. If the values compare as 0,, +   * the first is returned., +   * <p><b>Implementation note:</b> this method is invoked by the default implementations of the, +   * other {@code max} overloads, so overriding it will affect their behavior., +   * <p><b>Java 8 users:</b> Use {@code Collections.max(Arrays.asList(a, b), thisComparator)}, +   * instead (but note that it does not guarantee which tied maximum element is returned)., +   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this, +   *     ordering., +   * Returns the greatest of the specified values according to this ordering. If there are multiple, +   * greatest values, the first of those is returned., +   * <p><b>Java 8 users:</b> Use {@code Collections.max(Arrays.asList(a, b, c...), thisComparator)}, +   * instead (but note that it does not guarantee which tied maximum element is returned)., +   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this, +   *     ordering.]