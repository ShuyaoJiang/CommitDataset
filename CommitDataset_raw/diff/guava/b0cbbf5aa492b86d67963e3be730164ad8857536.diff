[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  private static final class KeyPredicate<K, V> implements Predicate<Entry<K, V>> {, +    private final Predicate<? super K> keyPredicate;, +, +    KeyPredicate(Predicate<? super K> keyPredicate) {, +      this.keyPredicate = checkNotNull(keyPredicate);, +    }, +, +    @Override, +    public boolean apply(Entry<K, V> input) {, +      return keyPredicate.apply(input.getKey());, +    }, +  }, +, +  private static final class ValuePredicate<K, V> implements Predicate<Entry<K, V>> {, +    private final Predicate<? super V> valuePredicate;, +, +    ValuePredicate(Predicate<? super V> valuePredicate) {, +      this.valuePredicate = checkNotNull(valuePredicate);, +    }, +, +    @Override, +    public boolean apply(Entry<K, V> input) {, +      return valuePredicate.apply(input.getValue());, +    }, +  }, +, +    } else if (unfiltered instanceof BiMap) {, +      return filterKeys((BiMap<K, V>) unfiltered, keyPredicate);, +    Predicate<Entry<K, V>> entryPredicate = new KeyPredicate<K, V>(keyPredicate);, +    return filterEntries(unfiltered, new KeyPredicate<K, V>(keyPredicate));, +, +  /**, +   * Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate., +   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other., +   *, +   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have, +   * iterators that don't support {@code remove()}, but all other methods are supported by the, +   * bimap and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code, +   * put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link, +   * IllegalArgumentException}., +   *, +   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered, +   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying, +   * bimap., +   *, +   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is., +   *, +   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in, +   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>, +   * needed, it may be faster to copy the filtered bimap and use the copy., +   *, +   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as, +   * documented at {@link Predicate#apply}., +   *, +   * @since 14.0, +   */, +  @Beta, +  public static <K, V> BiMap<K, V> filterKeys(, +      BiMap<K, V> unfiltered, final Predicate<? super K> keyPredicate) {, +    checkNotNull(keyPredicate);, +    return filterEntries(unfiltered, new KeyPredicate<K, V>(keyPredicate));, +    } else if (unfiltered instanceof BiMap) {, +      return filterValues((BiMap<K, V>) unfiltered, valuePredicate);, +    return filterEntries(unfiltered, new ValuePredicate<K, V>(valuePredicate));, +    return filterEntries(unfiltered, new ValuePredicate<K, V>(valuePredicate));, +, +  /**, +   * Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a, +   * predicate. The returned bimap is a live view of {@code unfiltered}; changes to one affect the, +   * other., +   *, +   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have, +   * iterators that don't support {@code remove()}, but all other methods are supported by the, +   * bimap and its views. When given a value that doesn't satisfy the predicate, the bimap's, +   * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link, +   * IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method, +   * that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the, +   * predicate., +   *, +   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered, +   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying, +   * bimap., +   *, +   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is., +   *, +   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in, +   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>, +   * needed, it may be faster to copy the filtered bimap and use the copy., +   *, +   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as, +   * documented at {@link Predicate#apply}., +   *, +   * @since 14.0, +   */, +  @Beta, +  public static <K, V> BiMap<K, V> filterValues(, +      BiMap<K, V> unfiltered, final Predicate<? super V> valuePredicate) {, +    return filterEntries(unfiltered, new ValuePredicate<K, V>(valuePredicate));, +    } else if (unfiltered instanceof BiMap) {]