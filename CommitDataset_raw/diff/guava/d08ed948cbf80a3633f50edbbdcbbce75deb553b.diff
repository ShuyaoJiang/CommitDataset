[+++ b/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +    CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader());, +    CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader());, +    // well, it didn't blow up., +++ b/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +    CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader());, +    CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader());, +    // well, it didn't blow up., +++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +++ b/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +    CacheBuilder.newBuilder().expireAfterAccess(1, NANOSECONDS).build(identityLoader());, +    CacheBuilder.newBuilder().expireAfterWrite(1, NANOSECONDS).build(identityLoader());, +    // well, it didn't blow up., +++ b/guava-tests/test/com/google/common/cache/CacheEvictionTest.java, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +    CacheTesting.drainRecencyQueues(cache);, +++ b/guava-tests/test/com/google/common/cache/CacheExpirationTest.java, +import static com.google.common.cache.TestingCacheLoaders.identityLoader;, +import static java.util.Arrays.asList;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static org.junit.contrib.truth.Truth.ASSERT;, +import com.google.common.cache.TestingCacheLoaders.IdentityLoader;, +import com.google.common.util.concurrent.Callables;, +import java.util.List;, +import java.util.Set;, +import java.util.concurrent.ExecutionException;, +        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS), +        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS), +        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS), +        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS), +    ticker.advance(EXPIRING_TIME * 10, MILLISECONDS);, +        .expireAfterWrite(10, MILLISECONDS), +      ticker.advance(1, MILLISECONDS);, +        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS), +        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS), +  public void testRemovalScheduler_expireAfterBoth() {, +    FakeTicker ticker = new FakeTicker();, +    CountingRemovalListener<String, Integer> removalListener = countingRemovalListener();, +    WatchedCreatorLoader loader = new WatchedCreatorLoader();, +    Cache<String, Integer> cache = CacheBuilder.newBuilder(), +        .expireAfterAccess(EXPIRING_TIME, MILLISECONDS), +        .expireAfterWrite(EXPIRING_TIME, MILLISECONDS), +        .removalListener(removalListener), +        .ticker(ticker), +        .build(loader);, +    runRemovalScheduler(cache, removalListener, loader, ticker, KEY_PREFIX, EXPIRING_TIME);, +  }, +, +  public void testExpirationOrder_access() {, +    // test lru within a single segment, +    FakeTicker ticker = new FakeTicker();, +    IdentityLoader<Integer> loader = identityLoader();, +    Cache<Integer, Integer> cache = CacheBuilder.newBuilder(), +        .concurrencyLevel(1), +        .expireAfterAccess(10, MILLISECONDS), +        .ticker(ticker), +        .build(loader);, +    for (int i = 0; i < 10; i++) {, +      cache.getUnchecked(i);, +      ticker.advance(1, MILLISECONDS);, +    }, +    Set<Integer> keySet = cache.asMap().keySet();, +    ASSERT.that(keySet).hasContentsAnyOrder(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);, +, +    // 0 expires, +    ticker.advance(1, MILLISECONDS);, +    ASSERT.that(keySet).hasContentsAnyOrder(1, 2, 3, 4, 5, 6, 7, 8, 9);, +, +    // reorder, +    getAll(cache, asList(0, 1, 2));, +    CacheTesting.drainRecencyQueues(cache);, +    ticker.advance(2, MILLISECONDS);, +    ASSERT.that(keySet).hasContentsAnyOrder(3, 4, 5, 6, 7, 8, 9, 0, 1, 2);, +, +    // 3 expires, +    ticker.advance(1, MILLISECONDS);, +    ASSERT.that(keySet).hasContentsAnyOrder(4, 5, 6, 7, 8, 9, 0, 1, 2);, +]