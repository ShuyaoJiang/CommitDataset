[+++ b/guava-tests/test/com/google/common/cache/AutoLocalCacheTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.cache;, +, +import static com.google.common.cache.CacheBuilder.EMPTY_STATS;, +import static com.google.common.cache.LocalCacheTest.SMALL_MAX_SIZE;, +import static com.google.common.cache.TestingCacheLoaders.identityLoader;, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.cache.LocalCache.AutoLocalCache;, +import com.google.common.cache.LocalCache.Segment;, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Maps;, +import com.google.common.testing.NullPointerTester;, +import com.google.common.util.concurrent.Callables;, +, +import junit.framework.TestCase;, +, +import java.lang.Thread.UncaughtExceptionHandler;, +import java.util.Collection;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.Callable;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicReference;, +, +/**, + * @author Charles Fry, + */, +public class AutoLocalCacheTest extends TestCase {, +, +  private static <K, V> AutoLocalCache<K, V> makeCache(, +      CacheBuilder<K, V> builder, CacheLoader<? super K, V> loader) {, +    return new AutoLocalCache<K, V>(builder, CacheBuilder.CACHE_STATS_COUNTER, loader);, +  }, +, +  private CacheBuilder<Object, Object> createCacheBuilder() {, +    return new CacheBuilder<Object, Object>();, +  }, +, +  // constructor tests, +, +  public void testComputingFunction() {, +    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {, +      @Override, +      public Object load(Object from) {, +        return new Object();, +      }, +    };, +    AutoLocalCache<Object, Object> cache = makeCache(createCacheBuilder(), loader);, +    assertSame(loader, cache.map.defaultLoader);, +  }, +, +  // null parameters test, +, +  public void testNullParameters() throws Exception {, +    NullPointerTester tester = new NullPointerTester();, +    tester.setDefault(Callable.class, Callables.returning(null));, +    CacheLoader<Object, Object> loader = identityLoader();, +    tester.testAllPublicInstanceMethods(makeCache(createCacheBuilder(), loader));, +  }, +, +  // stats tests, +, +  public void testStats() {, +    CacheBuilder<Object, Object> builder = createCacheBuilder(), +        .concurrencyLevel(1), +        .maximumSize(2);, +    AutoLocalCache<Object, Object> cache = makeCache(builder, identityLoader());, +    assertEquals(EMPTY_STATS, cache.stats());, +, +    Object one = new Object();, +    cache.getUnchecked(one);, +    CacheStats stats = cache.stats();, +    assertEquals(1, stats.requestCount());, +    assertEquals(0, stats.hitCount());, +    assertEquals(0.0, stats.hitRate());, +    assertEquals(1, stats.missCount());, +    assertEquals(1.0, stats.missRate());, +    assertEquals(1, stats.loadCount());, +    long totalLoadTime = stats.totalLoadTime();, +    assertTrue(totalLoadTime > 0);]