[+++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultisetTest.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultisetTest.java, +++ b/guava-gwt/test-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/MultisetRemoveTester.java, +import static org.truth0.Truth.ASSERT;, +import com.google.common.collect.testing.Helpers;, +import java.util.Collections;, +import java.util.List;, +, + * Tests for {@code Multiset#remove}, {@code Multiset.removeAll}, and {@code Multiset.retainAll}, + * not already covered by the corresponding Collection testers., +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveNegative() {, +    try {, +      getMultiset().remove(samples.e0, -1);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {}, +    expectUnchanged();, +  }, +  , +  @CollectionFeature.Require(absent = SUPPORTS_REMOVE), +  public void testRemoveUnsupported() {, +    try {, +      getMultiset().remove(samples.e0, 2);, +      fail("Expected UnsupportedOperationException");, +    } catch (UnsupportedOperationException expected) {}, +  }, +  , +  @CollectionSize.Require(SEVERAL), +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveAllIgnoresCount() {, +    initThreeCopies();, +    assertTrue(getMultiset().removeAll(Collections.singleton(samples.e0)));, +    ASSERT.that(getMultiset()).isEmpty();, +  }, +  , +  @CollectionSize.Require(SEVERAL), +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRetainAllIgnoresCount() {, +    initThreeCopies();, +    List<E> contents = Helpers.copyToList(getMultiset());, +    assertFalse(getMultiset().retainAll(Collections.singleton(samples.e0)));, +    expectContents(contents);, +  }, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultisetTest.java, +++ b/guava-gwt/test-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/MultisetRemoveTester.java, +import static org.truth0.Truth.ASSERT;, +import com.google.common.collect.testing.Helpers;, +import java.util.Collections;, +import java.util.List;, +, + * Tests for {@code Multiset#remove}, {@code Multiset.removeAll}, and {@code Multiset.retainAll}, + * not already covered by the corresponding Collection testers., +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveNegative() {, +    try {, +      getMultiset().remove(samples.e0, -1);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {}, +    expectUnchanged();, +  }, +  , +  @CollectionFeature.Require(absent = SUPPORTS_REMOVE), +  public void testRemoveUnsupported() {, +    try {, +      getMultiset().remove(samples.e0, 2);, +      fail("Expected UnsupportedOperationException");, +    } catch (UnsupportedOperationException expected) {}, +  }, +  , +  @CollectionSize.Require(SEVERAL), +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveAllIgnoresCount() {, +    initThreeCopies();, +    assertTrue(getMultiset().removeAll(Collections.singleton(samples.e0)));, +    ASSERT.that(getMultiset()).isEmpty();, +  }, +  , +  @CollectionSize.Require(SEVERAL), +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRetainAllIgnoresCount() {, +    initThreeCopies();, +    List<E> contents = Helpers.copyToList(getMultiset());, +    assertFalse(getMultiset().retainAll(Collections.singleton(samples.e0)));, +    expectContents(contents);, +  }, +++ b/guava-gwt/test/com/google/common/collect/HashMultisetTest_gwt.java, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/AbstractMultisetTest.java, +++ b/guava-gwt/test-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/MultisetRemoveTester.java, +import static org.truth0.Truth.ASSERT;, +import com.google.common.collect.testing.Helpers;, +import java.util.Collections;, +import java.util.List;, +, + * Tests for {@code Multiset#remove}, {@code Multiset.removeAll}, and {@code Multiset.retainAll}, + * not already covered by the corresponding Collection testers., +  @CollectionFeature.Require(SUPPORTS_REMOVE), +  public void testRemoveNegative() {, +    try {, +      getMultiset().remove(samples.e0, -1);, +      fail("Expected IllegalArgumentException");]