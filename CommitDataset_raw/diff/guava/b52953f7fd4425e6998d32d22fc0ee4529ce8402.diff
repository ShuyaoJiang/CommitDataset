[+++ b/android/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +    UNIFORM_0_TO_2(0, 2),, +    UNIFORM_0_TO_9(0, 9),, +    ALWAYS_0(0, 0),, +    ALWAYS_10(10, 10);, +++ b/android/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +    UNIFORM_0_TO_2(0, 2),, +    UNIFORM_0_TO_9(0, 9),, +    ALWAYS_0(0, 0),, +    ALWAYS_10(10, 10);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +    return new SingletonImmutableList<E>(checkNotNull(element));, +    switch (elements.length) {, +      case 0:, +        return of();, +      case 1:, +        return of((E) elements[0]);, +      default:, +        return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(elements));, +    }, +    switch (list.size()) {, +      case 0:, +      case 1:, +        return of(list.get(0));, +      default:, +  }, +++ b/android/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +    UNIFORM_0_TO_2(0, 2),, +    UNIFORM_0_TO_9(0, 9),, +    ALWAYS_0(0, 0),, +    ALWAYS_10(10, 10);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +    return new SingletonImmutableList<E>(checkNotNull(element));, +    switch (elements.length) {, +      case 0:, +        return of();, +      case 1:, +        return of((E) elements[0]);, +      default:, +        return new RegularImmutableList<E>(ImmutableList.<E>nullCheckedList(elements));, +    }, +    switch (list.size()) {, +      case 0:, +      case 1:, +        return of(list.get(0));, +      default:, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/SingletonImmutableList.java, +/*, + * Copyright (C) 2009 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkNotNull;, +import static java.util.Collections.singletonList;, +, +import java.util.List;, +, +/**, + * GWT emulated version of {@link SingletonImmutableList}., + *, + * @author Hayward Chan, + */, +final class SingletonImmutableList<E> extends ForwardingImmutableList<E> {, +, +  final transient List<E> delegate;, +  // This reference is used both by the custom field serializer, and by the, +  // GWT compiler to infer the elements of the lists that needs to be, +  // serialized., +  E element;, +, +  SingletonImmutableList(E element) {, +    this.delegate = singletonList(checkNotNull(element));, +    this.element = element;, +  }, +, +  @Override List<E> delegateList() {, +    return delegate;, +  }, +}, +++ b/android/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +    UNIFORM_0_TO_2(0, 2),, +    UNIFORM_0_TO_9(0, 9),, +    ALWAYS_0(0, 0),, +    ALWAYS_10(10, 10);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java, +    return new SingletonImmutableList<E>(checkNotNull(element));]