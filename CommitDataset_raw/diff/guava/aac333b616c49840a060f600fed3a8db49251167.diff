[+++ b/guava-tests/test/com/google/common/cache/AutoLocalCacheTest.java, +    assertSame(loader, cache.loader);, +    ConcurrentMap<Object, Object> map = cache.localCache; // modifiable map view, +    Segment<Object, Object> segment = cache.localCache.segments[0];, +++ b/guava-tests/test/com/google/common/cache/AutoLocalCacheTest.java, +    assertSame(loader, cache.loader);, +    ConcurrentMap<Object, Object> map = cache.localCache; // modifiable map view, +    Segment<Object, Object> segment = cache.localCache.segments[0];, +++ b/guava-tests/test/com/google/common/cache/CacheLoadingTest.java, +, +    // duplicate keys are ignored, and don't impact stats, +    assertEquals(ImmutableMap.of(4, 4, 5, 5), cache.getAll(asList(4, 5)));, +    stats = cache.stats();, +    assertEquals(5, stats.missCount());, +    assertEquals(5, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(4, stats.hitCount());, +, +    // duplicate keys are ignored, and don't impact stats, +    assertEquals(ImmutableMap.of(4, 4, 5, 5), cache.getAll(asList(4, 5)));, +    stats = cache.stats();, +    assertEquals(5, stats.missCount());, +    assertEquals(3, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(4, stats.hitCount());, +++ b/guava-tests/test/com/google/common/cache/AutoLocalCacheTest.java, +    assertSame(loader, cache.loader);, +    ConcurrentMap<Object, Object> map = cache.localCache; // modifiable map view, +    Segment<Object, Object> segment = cache.localCache.segments[0];, +++ b/guava-tests/test/com/google/common/cache/CacheLoadingTest.java, +, +    // duplicate keys are ignored, and don't impact stats, +    assertEquals(ImmutableMap.of(4, 4, 5, 5), cache.getAll(asList(4, 5)));, +    stats = cache.stats();, +    assertEquals(5, stats.missCount());, +    assertEquals(5, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(4, stats.hitCount());, +, +    // duplicate keys are ignored, and don't impact stats, +    assertEquals(ImmutableMap.of(4, 4, 5, 5), cache.getAll(asList(4, 5)));, +    stats = cache.stats();, +    assertEquals(5, stats.missCount());, +    assertEquals(3, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(4, stats.hitCount());, +++ b/guava-tests/test/com/google/common/cache/CacheManualTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.cache;, +, +import static java.util.Arrays.asList;, +, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableMap;, +, +import junit.framework.TestCase;, +, +import java.util.concurrent.ExecutionException;, +, +/**, + * @author Charles Fry, + */, +public class CacheManualTest extends TestCase {, +, +  public void testLoadingMethods() throws ExecutionException {, +    Cache<Object, Object> cache = CacheBuilder.newBuilder().build();, +, +    try {, +      cache.get(new Object());, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +, +    try {, +      cache.getUnchecked(new Object());, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +, +    try {, +      Object[] lookupKeys = new Object[] { new Object(), new Object(), new Object() };, +      cache.getAll(asList(lookupKeys));, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +, +    try {, +      cache.refresh(new Object());, +      fail();, +    } catch (UnsupportedOperationException expected) {}]