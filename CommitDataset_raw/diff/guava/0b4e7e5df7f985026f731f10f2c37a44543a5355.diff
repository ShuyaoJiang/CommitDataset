[+++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +    RateLimiter limiter = RateLimiter.create(stopwatch, 2.0, 4000, MILLISECONDS, 3.0);, +  public void testWarmUpWithColdFactor() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0, 4000, MILLISECONDS, 10.0);, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // #1, +    }, +    stopwatch.sleepMillis(200); // #2: to repay for the last acquire, +    stopwatch.sleepMillis(4000); // #3: becomes cold again, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // // #4, +    }, +    stopwatch.sleepMillis(200); // #5: to repay for the last acquire, +    stopwatch.sleepMillis(1000); // #6: still warm! It would take another 3 seconds to go cold, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // #7, +    }, +    assertEvents(, +        "R0.00, R1.75, R1.26, R0.76, R0.30, R0.20, R0.20, R0.20", // #1, +        "U0.20", // #2, +        "U4.00", // #3, +        "R0.00, R1.75, R1.26, R0.76, R0.30, R0.20, R0.20, R0.20", // #4, +        "U0.20", // #5, +        "U1.00", // #6, +        "R0.00, R0.20, R0.20, R0.20, R0.20, R0.20, R0.20, R0.20"); // #7, +  }, +, +  public void testWarmUpWithColdFactor1() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0, 4000, MILLISECONDS, 1.0);, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // #1, +    }, +    stopwatch.sleepMillis(340); // #2, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // #3, +    }, +    assertEvents(, +        "R0.00, R0.20, R0.20, R0.20, R0.20, R0.20, R0.20, R0.20", // #1, +        "U0.34", // #2, +        "R0.00, R0.20, R0.20, R0.20, R0.20, R0.20, R0.20, R0.20"); // #3, +  }, +, +    RateLimiter limiter = RateLimiter.create(stopwatch, 2.0, 4000, MILLISECONDS, 3.0);, +  public void testWarmUpAndUpdateWithColdFactor() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0, 4000, MILLISECONDS, 10.0);, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // #1, +    }, +    stopwatch.sleepMillis(4200); // #2: back to cold state (warmup period + repay last acquire), +    for (int i = 0; i < 3; i++) { // only three steps, we're somewhere in the warmup period, +      limiter.acquire(); // #3, +    }, +, +    limiter.setRate(10.0); // double the rate!, +    limiter.acquire(); // #4, we repay the debt of the last acquire (imposed by the old rate), +    for (int i = 0; i < 4; i++) {, +      limiter.acquire(); // #5, +    }, +    stopwatch.sleepMillis(4100); // #6, back to cold state (warmup period + repay last acquire), +    for (int i = 0; i < 11; i++) {, +      limiter.acquire(); // #7, showing off the warmup starting from totally cold, +    }, +, +    // make sure the areas (times) remain the same, while permits are different, +    assertEvents(, +        "R0.00, R1.75, R1.26, R0.76, R0.30, R0.20, R0.20, R0.20", // #1, +        "U4.20", // #2, +        "R0.00, R1.75, R1.26", // #3, after that the rate changes, +        "R0.76", // #4, this is what the throttling would be with the old rate, +        "R0.20, R0.10, R0.10, R0.10", // #5, +        "U4.10", // #6, +        "R0.00, R0.94, R0.81, R0.69, R0.57, R0.44, R0.32", // #7, +        "R0.20, R0.10, R0.10, R0.10"); // #7 (cont.), note, this matches #5, +  }, +, +        stopwatch, Double.POSITIVE_INFINITY, 10, SECONDS, 3.0);, +    RateLimiter limiter = RateLimiter.create(stopwatch, Double.POSITIVE_INFINITY, 10, SECONDS, 3.0);, +    int warmupPermits = 10;, +    double[] coldFactorsToTest = { 2.0, 3.0, 10.0 };, +      for (double coldFactor : coldFactorsToTest) {, +          // If warmupPermits = maxPermits - thresholdPermits then, +          // warmupPeriod = (1 + coldFactor) * warmupPermits * stableInterval / 2, +          long warmupMillis = (long) ((1 + coldFactor) * warmupPermits / (2.0 * qps) * 1000.0);, +              stopwatch, qps, warmupMillis, MILLISECONDS, coldFactor);, +          assertEquals(warmupMillis, measureTotalTimeMillis(rateLimiter, warmupPermits, random));, +        }, +        .setDefault(int.class, 1), +        .setDefault(double.class, 1.0d);, +++ b/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java, +    RateLimiter limiter = RateLimiter.create(stopwatch, 2.0, 4000, MILLISECONDS, 3.0);, +  public void testWarmUpWithColdFactor() {, +    RateLimiter limiter = RateLimiter.create(stopwatch, 5.0, 4000, MILLISECONDS, 10.0);, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // #1, +    }, +    stopwatch.sleepMillis(200); // #2: to repay for the last acquire, +    stopwatch.sleepMillis(4000); // #3: becomes cold again, +    for (int i = 0; i < 8; i++) {, +      limiter.acquire(); // // #4, +    }]