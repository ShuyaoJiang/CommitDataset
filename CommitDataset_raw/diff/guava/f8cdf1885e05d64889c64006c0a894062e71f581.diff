[+++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.collect.ImmutableList;, +import java.util.List;, +  public void testPresentInstances_allPresent() {, +    List<Optional<String>> optionals =, +        ImmutableList.of(Optional.of("a"), Optional.of("b"), Optional.of("c"));, +    ASSERT.that(Optional.presentInstances(optionals)).hasContentsInOrder("a", "b", "c");, +  }, +  , +  public void testPresentInstances_allAbsent() {, +    List<Optional<Object>> optionals =, +        ImmutableList.of(Optional.absent(), Optional.absent());, +    ASSERT.that(Optional.presentInstances(optionals)).isEmpty();, +  }, +  , +  public void testPresentInstances_somePresent() {, +    List<Optional<String>> optionals =, +        ImmutableList.of(Optional.of("a"), Optional.<String>absent(), Optional.of("c"));, +    ASSERT.that(Optional.presentInstances(optionals)).hasContentsInOrder("a", "c");, +  }, +, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +import static org.junit.contrib.truth.Truth.ASSERT;, +, +import com.google.common.collect.ImmutableList;, +import java.util.List;, +  public void testPresentInstances_allPresent() {, +    List<Optional<String>> optionals =, +        ImmutableList.of(Optional.of("a"), Optional.of("b"), Optional.of("c"));, +    ASSERT.that(Optional.presentInstances(optionals)).hasContentsInOrder("a", "b", "c");, +  }, +  , +  public void testPresentInstances_allAbsent() {, +    List<Optional<Object>> optionals =, +        ImmutableList.of(Optional.absent(), Optional.absent());, +    ASSERT.that(Optional.presentInstances(optionals)).isEmpty();, +  }, +  , +  public void testPresentInstances_somePresent() {, +    List<Optional<String>> optionals =, +        ImmutableList.of(Optional.of("a"), Optional.<String>absent(), Optional.of("c"));, +    ASSERT.that(Optional.presentInstances(optionals)).hasContentsInOrder("a", "c");, +  }, +, +++ b/guava/src/com/google/common/base/Optional.java, +import java.util.Iterator;, +  /**, +   * Returns the value of each present instance from the supplied {@code optionals}, in order,, +   * skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are, +   * evaluated lazily., +   */, +  public static <T> Iterable<T> presentInstances(Iterable<Optional<T>> optionals) {, +    checkNotNull(optionals);, +    final Iterator<Optional<T>> iterator = checkNotNull(optionals.iterator());, +    return new Iterable<T>() {, +      @Override public Iterator<T> iterator() {, +        return new AbstractIterator<T>() {, +          @Override protected T computeNext() {, +            while (iterator.hasNext()) {, +              Optional<T> optional = iterator.next();, +              if (optional.isPresent()) {, +                return optional.get();, +              }, +            }, +            return endOfData();, +          }, +        };, +      };, +    };, +  }, +]