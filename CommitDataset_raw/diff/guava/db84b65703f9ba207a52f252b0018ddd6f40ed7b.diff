[+++ b/guava/src/com/google/common/eventbus/EventBus.java, +import com.google.common.base.Throwables;, +import com.google.common.cache.Cache;, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.CacheLoader;, +, +import java.util.concurrent.ExecutionException;, +   * A thread-safe cache for flattenHierarch(). The Class class is immutable., +   */, +  private Cache<Class<?>, Set<Class<?>>> flattenHierarchyCache =, +      CacheBuilder.newBuilder(), +          .weakKeys(), +          .build(new CacheLoader<Class<?>, Set<Class<?>>>() {, +            @Override, +            public Set<Class<?>> load(Class<?> concreteClass) throws Exception {, +              List<Class<?>> parents = Lists.newLinkedList();, +              Set<Class<?>> classes = Sets.newHashSet();, +, +              parents.add(concreteClass);, +, +              while (!parents.isEmpty()) {, +                Class<?> clazz = parents.remove(0);, +                classes.add(clazz);, +, +                Class<?> parent = clazz.getSuperclass();, +                if (parent != null) {, +                  parents.add(parent);, +                }, +, +                for (Class<?> iface : clazz.getInterfaces()) {, +                  parents.add(iface);, +                }, +              }, +, +              return classes;, +            }, +          });, +, +  /**, +    try {, +      return flattenHierarchyCache.get(concreteClass);, +    } catch (ExecutionException e) {, +      throw Throwables.propagate(e.getCause());]