[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +    checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +    checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   * @return this {@code Stopwatch} instance, +   * @return this {@code Stopwatch} instance, +   *, +   * @return this {@code Stopwatch} instance, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +    checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   * @return this {@code Stopwatch} instance, +   * @return this {@code Stopwatch} instance, +   *, +   * @return this {@code Stopwatch} instance, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * ImmutableSet#of()}., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +    checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   * @return this {@code Stopwatch} instance, +   * @return this {@code Stopwatch} instance, +   *, +   * @return this {@code Stopwatch} instance, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * ImmutableSet#of()}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * updated, they should be empty when provided, and they should not use soft,, +   * weak, or phantom references., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +    checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   * @return this {@code Stopwatch} instance, +   * @return this {@code Stopwatch} instance, +   *, +   * @return this {@code Stopwatch} instance, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * ImmutableSet#of()}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * updated, they should be empty when provided, and they should not use soft,, +   * weak, or phantom references., +++ b/guava-tests/test/com/google/common/collect/AbstractLinkedIteratorTest.java, +  public void testSampleCode() {, +    Iterable<Integer> actual = new Iterable<Integer>() {, +      @Override, +      public Iterator<Integer> iterator() {, +        Iterator<Integer> powersOfTwo = new AbstractLinkedIterator<Integer>(1) {, +          protected Integer computeNext(Integer previous) {, +            return (previous == 1 << 30) ? null : previous * 2;, +          }, +        };, +        return powersOfTwo;, +      }, +    };, +    ASSERT.that(actual).hasContentsInOrder(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096,, +        8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,, +        16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +    checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   * @return this {@code Stopwatch} instance, +   * @return this {@code Stopwatch} instance, +   *, +   * @return this {@code Stopwatch} instance, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +   * ImmutableSet#of()}., +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +   * updated, they should be empty when provided, and they should not use soft,, +   * weak, or phantom references., +++ b/guava-tests/test/com/google/common/collect/AbstractLinkedIteratorTest.java, +  public void testSampleCode() {, +    Iterable<Integer> actual = new Iterable<Integer>() {, +      @Override, +      public Iterator<Integer> iterator() {, +        Iterator<Integer> powersOfTwo = new AbstractLinkedIterator<Integer>(1) {, +          protected Integer computeNext(Integer previous) {, +            return (previous == 1 << 30) ? null : previous * 2;, +          }, +        };, +        return powersOfTwo;, +      }, +    };, +    ASSERT.that(actual).hasContentsInOrder(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096,, +        8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,, +        16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824);, +  }, +, +++ b/guava/src/com/google/common/base/CharMatcher.java, + * <p>Example usages: <pre>, + *   String trimmed = {@link #WHITESPACE WHITESPACE}.{@link #trimFrom trimFrom}(userInput);, + *   if ({@link #ASCII ASCII}.{@link #matchesAllOf matchesAllOf}(s)) { ... }</pre>, + *, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Splitter.java, +    checkArgument(limit > 0, "must be greater than zero: %s", limit);, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +   * @return this {@code Stopwatch} instance, +   * @return this {@code Stopwatch} instance]