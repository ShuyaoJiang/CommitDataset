[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java, +import java.util.concurrent.TimeUnit;, +  public void testNoOpServiceStartStop() throws Exception {, +    RecordingListener listener = RecordingListener.record(service);, +, +    RecordingListener listener = RecordingListener.record(service);, +  public void testManualServiceStartStop() throws Exception {, +    RecordingListener listener = RecordingListener.record(service);, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.RUNNING,, +            State.STOPPING,, +            State.TERMINATED),, +            listener.getStateHistory());, +, +  public void testManualServiceNotifyStoppedWhileRunning() throws Exception {, +    RecordingListener listener = RecordingListener.record(service);, +, +    service.start();, +    service.notifyStarted();, +    service.notifyStopped();, +    assertEquals(State.TERMINATED, service.state());, +    assertFalse(service.isRunning());, +    assertFalse(service.doStopCalled);, +, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.RUNNING,, +            State.TERMINATED),, +            listener.getStateHistory());, +  }, +, +  public void testManualServiceStopWhileStarting() throws Exception {, +    ManualSwitchedService service = new ManualSwitchedService();, +    RecordingListener listener = RecordingListener.record(service);, +    assertEquals(, +        Arrays.asList(, +            State.STARTING,, +            State.STOPPING,, +            State.TERMINATED),, +            listener.getStateHistory());, +  }, +, +  public void testManualServiceStopWhileNew() throws Exception {, +    ManualSwitchedService service = new ManualSwitchedService();, +    RecordingListener listener = RecordingListener.record(service);, +, +    service.stop();, +    assertEquals(State.TERMINATED, service.state());, +    assertFalse(service.isRunning());, +    assertFalse(service.doStartCalled);, +    assertFalse(service.doStopCalled);, +    assertEquals(Arrays.asList(State.TERMINATED), listener.getStateHistory());, +  }, +, +  public void testManualServiceFailWhileStarting() throws Exception {, +    ManualSwitchedService service = new ManualSwitchedService();, +    RecordingListener listener = RecordingListener.record(service);, +    service.start();, +    service.notifyFailed(EXCEPTION);, +    assertEquals(Arrays.asList(State.STARTING, State.FAILED), listener.getStateHistory());, +  }, +, +  public void testManualServiceFailWhileRunning() throws Exception {, +    ManualSwitchedService service = new ManualSwitchedService();, +    RecordingListener listener = RecordingListener.record(service);, +    service.start();, +    service.notifyStarted();, +    service.notifyFailed(EXCEPTION);, +    assertEquals(Arrays.asList(State.STARTING, State.RUNNING, State.FAILED),, +        listener.getStateHistory());, +  }, +, +  public void testManualServiceFailWhileStopping() throws Exception {, +    ManualSwitchedService service = new ManualSwitchedService();, +    RecordingListener listener = RecordingListener.record(service);, +    service.start();, +    service.notifyStarted();, +    service.stop();, +    service.notifyFailed(EXCEPTION);, +    assertEquals(Arrays.asList(State.STARTING, State.RUNNING, State.STOPPING, State.FAILED),, +        listener.getStateHistory());, +    RecordingListener listener = RecordingListener.record(service);, +  public void testManualServiceFailureIdempotence() {, +    ManualSwitchedService service = new ManualSwitchedService();, +    RecordingListener listener = RecordingListener.record(service);, +    service.start();, +    service.notifyFailed(new Exception("1"));, +    service.notifyFailed(new Exception("2"));, +    try {, +      service.startAndWait();, +    } catch (UncheckedExecutionException e) {, +      assertEquals("1", e.getCause().getMessage());, +    }, +  }, +, +    RecordingListener listener = RecordingListener.record(service);, +  public void testThrowingServiceStartAndWait() throws Exception {]