[+++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +import static com.google.common.collect.Iterables.getOnlyElement;, +  public void testAllAsList_logging_seenExceptionUpdateCancelRace() throws Exception {, +    final MyException subsequentFailure = new MyException();, +    SettableFuture<Object> firstFuture = SettableFuture.create();, +    final SettableFuture<Object> secondFuture = SettableFuture.create();, +    ListenableFuture<List<Object>> bulkFuture = allAsList(firstFuture, secondFuture);, +, +    bulkFuture.addListener(new Runnable() {, +      @Override, +      public void run() {, +        /*, +         * This is similar to the above test, but this time we're making sure that we recognize that, +         * the output Future is done early not because of an exception but because of a, +         * cancellation., +         */, +        secondFuture.setException(subsequentFailure);, +      }, +    }, directExecutor());, +    firstFuture.cancel(false);, +, +    try {, +      bulkFuture.get();, +      fail();, +    } catch (CancellationException expected) {, +      assertThat(getOnlyElement(aggregateFutureLogHandler.getStoredLogRecords()).getThrown()), +          .isSameAs(subsequentFailure);, +    }, +  }, +, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +import static com.google.common.collect.Iterables.getOnlyElement;, +  public void testAllAsList_logging_seenExceptionUpdateCancelRace() throws Exception {, +    final MyException subsequentFailure = new MyException();, +    SettableFuture<Object> firstFuture = SettableFuture.create();, +    final SettableFuture<Object> secondFuture = SettableFuture.create();, +    ListenableFuture<List<Object>> bulkFuture = allAsList(firstFuture, secondFuture);, +, +    bulkFuture.addListener(new Runnable() {, +      @Override, +      public void run() {, +        /*, +         * This is similar to the above test, but this time we're making sure that we recognize that, +         * the output Future is done early not because of an exception but because of a, +         * cancellation., +         */, +        secondFuture.setException(subsequentFailure);, +      }, +    }, directExecutor());, +    firstFuture.cancel(false);, +, +    try {, +      bulkFuture.get();, +      fail();, +    } catch (CancellationException expected) {, +      assertThat(getOnlyElement(aggregateFutureLogHandler.getStoredLogRecords()).getThrown()), +          .isSameAs(subsequentFailure);, +    }, +  }, +, +++ b/guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java, +public void testAllAsList_logging_seenExceptionUpdateCancelRace() throws Exception {, +  com.google.common.util.concurrent.FuturesTest testCase = new com.google.common.util.concurrent.FuturesTest();, +  testCase.setUp();, +  Throwable failure = null;, +  try {, +    testCase.testAllAsList_logging_seenExceptionUpdateCancelRace();, +  } catch (Throwable t) {, +    failure = t;, +  }, +  try {, +    testCase.tearDown();, +  } catch (Throwable t) {, +    if (failure == null) {, +      failure = t;, +    }, +  }, +  if (failure instanceof Exception) {, +    throw (Exception) failure;, +  }, +  if (failure instanceof Error) {, +    throw (Error) failure;, +  }, +  if (failure != null) {, +    throw new RuntimeException(failure);, +  }, +}, +, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +import static com.google.common.collect.Iterables.getOnlyElement;, +  public void testAllAsList_logging_seenExceptionUpdateCancelRace() throws Exception {, +    final MyException subsequentFailure = new MyException();, +    SettableFuture<Object> firstFuture = SettableFuture.create();, +    final SettableFuture<Object> secondFuture = SettableFuture.create();, +    ListenableFuture<List<Object>> bulkFuture = allAsList(firstFuture, secondFuture);, +, +    bulkFuture.addListener(new Runnable() {, +      @Override, +      public void run() {, +        /*]