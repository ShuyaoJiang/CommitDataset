[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  static <K, V1, V2> EntryTransformer<K, V1, V2>, +  static <K, V1, V2> Iterator<Map.Entry<K, V2>> transformedEntryIterator(, +      Iterator<Map.Entry<K, V1>> entryIterator,, +      final EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return new TransformedIterator<Map.Entry<K, V1>, Map.Entry<K, V2>>(entryIterator) {, +      @Override, +      Entry<K, V2> transform(final Entry<K, V1> entry) {, +        return new AbstractMapEntry<K, V2>() {, +          @Override, +          public K getKey() {, +            return entry.getKey();, +          }, +, +          @Override, +          public V2 getValue() {, +            return transformer.transformEntry(entry.getKey(), entry.getValue());, +          }, +        };, +      }, +    };, +  }, +, +            return transformedEntryIterator(fromMap.entrySet().iterator(), transformer);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  static <K, V1, V2> EntryTransformer<K, V1, V2>, +  static <K, V1, V2> Iterator<Map.Entry<K, V2>> transformedEntryIterator(, +      Iterator<Map.Entry<K, V1>> entryIterator,, +      final EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return new TransformedIterator<Map.Entry<K, V1>, Map.Entry<K, V2>>(entryIterator) {, +      @Override, +      Entry<K, V2> transform(final Entry<K, V1> entry) {, +        return new AbstractMapEntry<K, V2>() {, +          @Override, +          public K getKey() {, +            return entry.getKey();, +          }, +, +          @Override, +          public V2 getValue() {, +            return transformer.transformEntry(entry.getKey(), entry.getValue());, +          }, +        };, +      }, +    };, +  }, +, +            return transformedEntryIterator(fromMap.entrySet().iterator(), transformer);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +    EntryTransformer<K, V1, V2> transformer = Maps.asEntryTransformer(function);, +      return Maps.transformedEntryIterator(fromMultimap.entries().iterator(), transformer);, +    EntryTransformer<K, V1, V2> transformer = Maps.asEntryTransformer(function);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +  static <K, V1, V2> EntryTransformer<K, V1, V2>, +  static <K, V1, V2> Iterator<Map.Entry<K, V2>> transformedEntryIterator(, +      Iterator<Map.Entry<K, V1>> entryIterator,, +      final EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return new TransformedIterator<Map.Entry<K, V1>, Map.Entry<K, V2>>(entryIterator) {, +      @Override, +      Entry<K, V2> transform(final Entry<K, V1> entry) {, +        return new AbstractMapEntry<K, V2>() {, +          @Override, +          public K getKey() {, +            return entry.getKey();, +          }, +, +          @Override, +          public V2 getValue() {, +            return transformer.transformEntry(entry.getKey(), entry.getValue());, +          }, +        };, +      }, +    };, +  }, +, +            return transformedEntryIterator(fromMap.entrySet().iterator(), transformer);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +    EntryTransformer<K, V1, V2> transformer = Maps.asEntryTransformer(function);, +      return Maps.transformedEntryIterator(fromMultimap.entries().iterator(), transformer);, +    EntryTransformer<K, V1, V2> transformer = Maps.asEntryTransformer(function);, +++ b/guava/src/com/google/common/collect/Maps.java, +  static <K, V1, V2> EntryTransformer<K, V1, V2>, +  static <K, V1, V2> Iterator<Map.Entry<K, V2>> transformedEntryIterator(, +      Iterator<Map.Entry<K, V1>> entryIterator,, +      final EntryTransformer<? super K, ? super V1, V2> transformer) {, +    return new TransformedIterator<Map.Entry<K, V1>, Map.Entry<K, V2>>(entryIterator) {, +      @Override, +      Entry<K, V2> transform(final Entry<K, V1> entry) {, +        return new AbstractMapEntry<K, V2>() {, +          @Override, +          public K getKey() {, +            return entry.getKey();, +          }, +, +          @Override, +          public V2 getValue() {, +            return transformer.transformEntry(entry.getKey(), entry.getValue());, +          }, +        };, +      }]