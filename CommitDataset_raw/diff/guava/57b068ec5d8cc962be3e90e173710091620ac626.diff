[+++ b/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return new HashSet<E>(contents);, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return new LinkedHashSet<E>(contents);, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return new TreeSet<E>(contents);, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return Collections.unmodifiableSet(new HashSet<E>(contents));, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return Collections.synchronizedSet(new HashSet<E>(contents));, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +    abstract <E extends Comparable<E>> Set<E> create(Collection<E> contents);, +  }, +, +  public enum ListMultimapImpl {, +    ArrayList {, +      @Override, +      <K, V> ListMultimap<K, V> create(Multimap<K, V> contents) {, +        return ArrayListMultimap.create(contents);, +      }, +    },, +    LinkedList {, +      @Override, +      <K, V> ListMultimap<K, V> create(Multimap<K, V> contents) {, +        return LinkedListMultimap.create(contents);, +      }, +    },, +    ImmutableList {, +      @Override, +      <K, V> ListMultimap<K, V> create(Multimap<K, V> contents) {, +        return ImmutableListMultimap.copyOf(contents);, +      }, +    };, +, +    abstract <K, V> ListMultimap<K, V> create(Multimap<K, V> contents);, +  }, +, +  public enum SetMultimapImpl {, +    Hash {, +      @Override, +      <K extends Comparable<K>, V extends Comparable<V>> SetMultimap<K, V> create(, +          Multimap<K, V> contents) {, +        return HashMultimap.create(contents);, +      }, +    },, +    LinkedHash {, +      @Override, +      <K extends Comparable<K>, V extends Comparable<V>> SetMultimap<K, V> create(, +          Multimap<K, V> contents) {, +        return LinkedHashMultimap.create(contents);, +      }, +    },, +    Tree {, +      @Override, +      <K extends Comparable<K>, V extends Comparable<V>> SetMultimap<K, V> create(, +          Multimap<K, V> contents) {, +        return TreeMultimap.create(contents);, +      }, +    },, +    ImmutableSet {, +      @Override, +      <K extends Comparable<K>, V extends Comparable<V>> SetMultimap<K, V> create(, +          Multimap<K, V> contents) {, +        return ImmutableSetMultimap.copyOf(contents);, +      }, +    };, +, +    abstract <K extends Comparable<K>, V extends Comparable<V>> SetMultimap<K, V> create(, +        Multimap<K, V> contents);, +  }, +, +  public enum Value {, +    INSTANCE;, +++ b/guava-tests/test/com/google/common/collect/BenchmarkHelpers.java, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return new HashSet<E>(contents);, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return new LinkedHashSet<E>(contents);, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return new TreeSet<E>(contents);, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return Collections.unmodifiableSet(new HashSet<E>(contents));, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +        return Collections.synchronizedSet(new HashSet<E>(contents));, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +      @Override <E extends Comparable<E>> Set<E> create(Collection<E> contents) {, +    abstract <E extends Comparable<E>> Set<E> create(Collection<E> contents);, +  }, +, +  public enum ListMultimapImpl {, +    ArrayList {, +      @Override, +      <K, V> ListMultimap<K, V> create(Multimap<K, V> contents) {, +        return ArrayListMultimap.create(contents);, +      }, +    },, +    LinkedList {, +      @Override]