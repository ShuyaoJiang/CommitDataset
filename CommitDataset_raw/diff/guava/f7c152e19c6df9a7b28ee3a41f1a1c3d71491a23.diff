[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +    Iterator<String> iterator = Iterators.forArray(array, 1, 2, 0);, +      Iterators.forArray(array, 2, 3, 0);, +    assertFalse(Iterators.forArray(array, 0, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 1, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 2, 0, 0).hasNext());, +      Iterators.forArray(array, -1, 0, 0);, +      Iterators.forArray(array, 3, 0, 0);, +        return Iterators.forArray(new Integer[] { 0, 1, 2, 3, 4 }, 1, 3, 0);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +    Iterator<String> iterator = Iterators.forArray(array, 1, 2, 0);, +      Iterators.forArray(array, 2, 3, 0);, +    assertFalse(Iterators.forArray(array, 0, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 1, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 2, 0, 0).hasNext());, +      Iterators.forArray(array, -1, 0, 0);, +      Iterators.forArray(array, 3, 0, 0);, +        return Iterators.forArray(new Integer[] { 0, 1, 2, 3, 4 }, 1, 3, 0);, +++ b/guava-tests/test/com/google/common/collect/SortedIterablesTest.java, +, +  public void testComparator() {, +    assertEquals(Ordering.natural(), SortedIterables.comparator(Sets.newTreeSet()));, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +    Iterator<String> iterator = Iterators.forArray(array, 1, 2, 0);, +      Iterators.forArray(array, 2, 3, 0);, +    assertFalse(Iterators.forArray(array, 0, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 1, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 2, 0, 0).hasNext());, +      Iterators.forArray(array, -1, 0, 0);, +      Iterators.forArray(array, 3, 0, 0);, +        return Iterators.forArray(new Integer[] { 0, 1, 2, 3, 4 }, 1, 3, 0);, +++ b/guava-tests/test/com/google/common/collect/SortedIterablesTest.java, +, +  public void testComparator() {, +    assertEquals(Ordering.natural(), SortedIterables.comparator(Sets.newTreeSet()));, +  }, +++ /dev/null, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +    Iterator<String> iterator = Iterators.forArray(array, 1, 2, 0);, +      Iterators.forArray(array, 2, 3, 0);, +    assertFalse(Iterators.forArray(array, 0, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 1, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 2, 0, 0).hasNext());, +      Iterators.forArray(array, -1, 0, 0);, +      Iterators.forArray(array, 3, 0, 0);, +        return Iterators.forArray(new Integer[] { 0, 1, 2, 3, 4 }, 1, 3, 0);, +++ b/guava-tests/test/com/google/common/collect/SortedIterablesTest.java, +, +  public void testComparator() {, +    assertEquals(Ordering.natural(), SortedIterables.comparator(Sets.newTreeSet()));, +  }, +++ /dev/null, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return copyOfSortedEntries(sortedMultiset.comparator(),, +        Lists.newArrayList(sortedMultiset.entrySet()));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +    Iterator<String> iterator = Iterators.forArray(array, 1, 2, 0);, +      Iterators.forArray(array, 2, 3, 0);, +    assertFalse(Iterators.forArray(array, 0, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 1, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 2, 0, 0).hasNext());, +      Iterators.forArray(array, -1, 0, 0);, +      Iterators.forArray(array, 3, 0, 0);, +        return Iterators.forArray(new Integer[] { 0, 1, 2, 3, 4 }, 1, 3, 0);, +++ b/guava-tests/test/com/google/common/collect/SortedIterablesTest.java, +, +  public void testComparator() {, +    assertEquals(Ordering.natural(), SortedIterables.comparator(Sets.newTreeSet()));, +  }, +++ /dev/null, +++ b/guava/src/com/google/common/collect/ImmutableSortedMultiset.java, +    return copyOfSortedEntries(sortedMultiset.comparator(),, +        Lists.newArrayList(sortedMultiset.entrySet()));, +++ b/guava/src/com/google/common/collect/ImmutableSortedSet.java, +    Comparator<? super E> comparator = SortedIterables.comparator(sortedSet);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +++ b/guava-tests/test/com/google/common/collect/IteratorsTest.java, +    Iterator<String> iterator = Iterators.forArray(array, 1, 2, 0);, +      Iterators.forArray(array, 2, 3, 0);, +    assertFalse(Iterators.forArray(array, 0, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 1, 0, 0).hasNext());, +    assertFalse(Iterators.forArray(array, 2, 0, 0).hasNext());, +      Iterators.forArray(array, -1, 0, 0);, +      Iterators.forArray(array, 3, 0, 0);, +        return Iterators.forArray(new Integer[] { 0, 1, 2, 3, 4 }, 1, 3, 0);]