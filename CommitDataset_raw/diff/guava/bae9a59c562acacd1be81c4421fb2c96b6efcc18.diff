[+++ b/android/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order, +   * they were inserted into the builder.  For example, in the above example,, +   * {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order, +   * {@code "one"=1, "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect the same, +   * order. If you want a different order, consider using, +   * {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort, +   * entries by value., +   *, +     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is, +     * the order in which entries were inserted into the builder, unless, +     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value., +   * <p>The returned {@code BiMap} iterates over entries in the same order as the, +   * {@code entrySet} of the original map., +   *, +   * @throws IllegalArgumentException if two keys have the same value or two values have the same, +   *     key, +   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over, +   * entries in the same order as the original iterable., +   * Returns an immutable set of the values in this map, in the same order they appear in {@link, +   * #entrySet}., +++ b/android/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order, +   * they were inserted into the builder.  For example, in the above example,, +   * {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order, +   * {@code "one"=1, "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect the same, +   * order. If you want a different order, consider using, +   * {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort, +   * entries by value., +   *, +     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is, +     * the order in which entries were inserted into the builder, unless, +     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value., +   * <p>The returned {@code BiMap} iterates over entries in the same order as the, +   * {@code entrySet} of the original map., +   *, +   * @throws IllegalArgumentException if two keys have the same value or two values have the same, +   *     key, +   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over, +   * entries in the same order as the original iterable., +   * Returns an immutable set of the values in this map, in the same order they appear in {@link, +   * #entrySet}., +++ b/android/guava/src/com/google/common/collect/ImmutableCollection.java, + *     the collection was created. Typically this is insertion order unless an explicit ordering is, + *     otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}).  See the appropriate, + *     factory method for details. View collections such as {@link ImmutableMultiset#elementSet}, + *     iterate in the same order as the parent, except as noted., +++ b/android/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order, +   * they were inserted into the builder.  For example, in the above example,, +   * {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order, +   * {@code "one"=1, "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect the same, +   * order. If you want a different order, consider using, +   * {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort, +   * entries by value., +   *, +     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is, +     * the order in which entries were inserted into the builder, unless, +     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value., +   * <p>The returned {@code BiMap} iterates over entries in the same order as the, +   * {@code entrySet} of the original map., +   *, +   * @throws IllegalArgumentException if two keys have the same value or two values have the same, +   *     key, +   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over, +   * entries in the same order as the original iterable., +   * Returns an immutable set of the values in this map, in the same order they appear in {@link, +   * #entrySet}., +++ b/android/guava/src/com/google/common/collect/ImmutableCollection.java, + *     the collection was created. Typically this is insertion order unless an explicit ordering is, + *     otherwise specified (e.g. {@link ImmutableSortedSet#naturalOrder}).  See the appropriate, + *     factory method for details. View collections such as {@link ImmutableMultiset#elementSet}, + *     iterate in the same order as the parent, except as noted., +++ b/android/guava/src/com/google/common/collect/ImmutableList.java, +   * <p>Elements appear in the resulting list in the same order they were added, +   * to the builder., +   *, +++ b/android/guava/src/com/google/common/collect/ImmutableBiMap.java, +   * <p>By default, a {@code Builder} will generate bimaps that iterate over entries in the order, +   * they were inserted into the builder.  For example, in the above example,, +   * {@code WORD_TO_INT.entrySet()} is guaranteed to iterate over the entries in the order, +   * {@code "one"=1, "two"=2, "three"=3}, and {@code keySet()} and {@code values()} respect the same, +   * order. If you want a different order, consider using, +   * {@link #orderEntriesByValue(Comparator)}, which changes this builder to sort, +   * entries by value., +   *, +     * Returns a newly-created immutable bimap.  The iteration order of the returned bimap is, +     * the order in which entries were inserted into the builder, unless, +     * {@link #orderEntriesByValue} was called, in which case entries are sorted by value., +   * <p>The returned {@code BiMap} iterates over entries in the same order as the, +   * {@code entrySet} of the original map., +   *, +   * @throws IllegalArgumentException if two keys have the same value or two values have the same, +   *     key, +   * Returns an immutable bimap containing the given entries.  The returned bimap iterates over, +   * entries in the same order as the original iterable., +   * Returns an immutable set of the values in this map, in the same order they appear in {@link, +   * #entrySet}., +++ b/android/guava/src/com/google/common/collect/ImmutableCollection.java, + *     the collection was created. Typically this is insertion order unless an explicit ordering is]