[+++ b/android/guava-tests/test/com/google/common/io/CloserTest.java, +import static com.google.common.collect.Iterables.getOnlyElement;, +import static java.lang.Integer.parseInt;, +    int versionNumber = parseInt(javaVersion());, +  @AndroidIncompatible // TODO(cpovirk): Look up Build.VERSION.SDK_INT reflectively., +  private static String javaVersion() {, +    String javaVersion = System.getProperty("java.version");, +    List<String> parts = Splitter.on('.').splitToList(javaVersion);, +    // Format varies by version: http://openjdk.java.net/jeps/223, +    if (parts.size() == 1) {, +      // Java 9 style: majorversion-foo, +      String major = getOnlyElement(parts);, +      return major.replaceFirst("-.*", "");, +    } else {, +      // pre-Java 8 style: 1.majorversion, +      return parts.get(1);, +    }, +  }, +, +++ b/android/guava-tests/test/com/google/common/io/CloserTest.java, +import static com.google.common.collect.Iterables.getOnlyElement;, +import static java.lang.Integer.parseInt;, +    int versionNumber = parseInt(javaVersion());, +  @AndroidIncompatible // TODO(cpovirk): Look up Build.VERSION.SDK_INT reflectively., +  private static String javaVersion() {, +    String javaVersion = System.getProperty("java.version");, +    List<String> parts = Splitter.on('.').splitToList(javaVersion);, +    // Format varies by version: http://openjdk.java.net/jeps/223, +    if (parts.size() == 1) {, +      // Java 9 style: majorversion-foo, +      String major = getOnlyElement(parts);, +      return major.replaceFirst("-.*", "");, +    } else {, +      // pre-Java 8 style: 1.majorversion, +      return parts.get(1);, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/io/CloserTest.java, +import static com.google.common.collect.Iterables.getOnlyElement;, +import static java.lang.Integer.parseInt;, +    int versionNumber = parseInt(javaVersion());, +  @AndroidIncompatible // TODO(cpovirk): Look up Build.VERSION.SDK_INT reflectively., +  private static String javaVersion() {, +    String javaVersion = System.getProperty("java.version");, +    List<String> parts = Splitter.on('.').splitToList(javaVersion);, +    // Format varies by version: http://openjdk.java.net/jeps/223, +    if (parts.size() == 1) {, +      // Java 9 style: majorversion-foo, +      String major = getOnlyElement(parts);, +      return major.replaceFirst("-.*", "");, +    } else {, +      // pre-Java 8 style: 1.majorversion, +      return parts.get(1);, +    }, +  }, +]