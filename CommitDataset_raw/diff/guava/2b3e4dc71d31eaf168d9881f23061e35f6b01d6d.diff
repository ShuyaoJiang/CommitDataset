[+++ b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java, +  , +  @SuppressWarnings("unchecked"), +  public void testLexicographicalComparatorLongInputs() {, +    for (Comparator<byte[]> comparator : Arrays.asList(, +        UnsignedBytes.lexicographicalComparator(),, +        UnsignedBytes.lexicographicalComparatorJavaImpl())) {, +      for (int i = 0; i < 32; i++) {, +        byte[] left = new byte[32];, +        byte[] right = new byte[32];, +, +        assertTrue(comparator.compare(left, right) == 0);, +        left[i] = 1;, +        assertTrue(comparator.compare(left, right) > 0);, +        assertTrue(comparator.compare(right, left) < 0);, +      }, +    }, +  }, +++ b/guava-tests/test/com/google/common/primitives/UnsignedBytesTest.java, +  , +  @SuppressWarnings("unchecked"), +  public void testLexicographicalComparatorLongInputs() {, +    for (Comparator<byte[]> comparator : Arrays.asList(, +        UnsignedBytes.lexicographicalComparator(),, +        UnsignedBytes.lexicographicalComparatorJavaImpl())) {, +      for (int i = 0; i < 32; i++) {, +        byte[] left = new byte[32];, +        byte[] right = new byte[32];, +, +        assertTrue(comparator.compare(left, right) == 0);, +        left[i] = 1;, +        assertTrue(comparator.compare(left, right) > 0);, +        assertTrue(comparator.compare(right, left) < 0);, +      }, +    }, +  }, +++ b/guava/src/com/google/common/primitives/UnsignedBytes.java, +      static final boolean BIG_ENDIAN =, +          ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN);, +          if (lw != rw) {, +            if (BIG_ENDIAN) {, +            /*, +             * We want to compare only the first index where left[index] != right[index]., +             * This corresponds to the least significant nonzero byte in lw ^ rw, since lw, +             * and rw are little-endian.  Long.numberOfTrailingZeros(diff) tells us the least , +             * significant nonzero bit, and zeroing out the first three bits of L.nTZ gives us the , +             * shift to get that least significant nonzero byte., +             */, +            int n = Long.numberOfTrailingZeros(lw ^ rw) & ~0x7;]