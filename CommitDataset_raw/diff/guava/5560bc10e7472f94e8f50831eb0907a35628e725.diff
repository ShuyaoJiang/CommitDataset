[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +    extends ImmutableSet<E> implements SortedSet<E>, SortedIterable<E> {, +  @Override // needed to unify SortedIterable and Collection iterator() methods, +  public UnmodifiableIterator<E> iterator() {, +    return super.iterator();, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +    extends ImmutableSet<E> implements SortedSet<E>, SortedIterable<E> {, +  @Override // needed to unify SortedIterable and Collection iterator() methods, +  public UnmodifiableIterator<E> iterator() {, +    return super.iterator();, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +    for (Set<? extends B> set : sets) {, +      if (set.isEmpty()) {, +        return ImmutableSet.of();, +      }, +    }, +    return cartesianSet;, +        checkArgument(dividend <= Integer.MAX_VALUE,, +            "cartesian product is too big");, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +    extends ImmutableSet<E> implements SortedSet<E>, SortedIterable<E> {, +  @Override // needed to unify SortedIterable and Collection iterator() methods, +  public UnmodifiableIterator<E> iterator() {, +    return super.iterator();, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +    for (Set<? extends B> set : sets) {, +      if (set.isEmpty()) {, +        return ImmutableSet.of();, +      }, +    }, +    return cartesianSet;, +        checkArgument(dividend <= Integer.MAX_VALUE,, +            "cartesian product is too big");, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +public final class TreeMultiset<E> extends AbstractMapBasedMultiset<E>, +    implements SortedIterable<E> {, +, +    return (comparator == null) , +           ? new TreeMultiset<E>(), +           : new TreeMultiset<E>(comparator);, +  private final Comparator<? super E> comparator;, +  , +  @SuppressWarnings("unchecked"), +    this((Comparator) Ordering.natural());, +    super(new TreeMap<E, AtomicInteger>(checkNotNull(comparator)));, +    this.comparator = comparator;, +  }, +, +  @Override, +  public Comparator<? super E> comparator() {, +    return comparator;, +  @Override, +  public int add(E element, int occurrences) {, +    if (element == null) {, +      comparator.compare(element, element);, +    }, +    return super.add(element, occurrences);, +  }, +, +      implements SortedSet<E>, SortedIterable<E> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java, +    extends ImmutableSet<E> implements SortedSet<E>, SortedIterable<E> {, +  @Override // needed to unify SortedIterable and Collection iterator() methods, +  public UnmodifiableIterator<E> iterator() {, +    return super.iterator();, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Sets.java, +    for (Set<? extends B> set : sets) {, +      if (set.isEmpty()) {, +        return ImmutableSet.of();, +      }, +    }, +    return cartesianSet;, +        checkArgument(dividend <= Integer.MAX_VALUE,, +            "cartesian product is too big");, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/TreeMultiset.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +public final class TreeMultiset<E> extends AbstractMapBasedMultiset<E>, +    implements SortedIterable<E> {, +, +    return (comparator == null) , +           ? new TreeMultiset<E>(), +           : new TreeMultiset<E>(comparator);, +  private final Comparator<? super E> comparator;, +  , +  @SuppressWarnings("unchecked"), +    this((Comparator) Ordering.natural());, +    super(new TreeMap<E, AtomicInteger>(checkNotNull(comparator)));, +    this.comparator = comparator;, +  }]