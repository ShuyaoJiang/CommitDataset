[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Set;, +, +  public void removeNode_queryAfterRemoval() {, +    addNode(N1);, +    Set<Integer> unused = graph.adjacentNodes(N1); // ensure cache (if any) is populated, +    assertTrue(graph.removeNode(N1));, +    try {, +      graph.adjacentNodes(N1);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Set;, +, +  public void removeNode_queryAfterRemoval() {, +    addNode(N1);, +    Set<Integer> unused = graph.adjacentNodes(N1); // ensure cache (if any) is populated, +    assertTrue(graph.removeNode(N1));, +    try {, +      graph.adjacentNodes(N1);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import java.util.Set;, +, +  public void removeNode_queryAfterRemoval() {, +    addNode(N1);, +    Set<Integer> unused = graph.adjacentNodes(N1); // ensure cache (if any) is populated, +    assertTrue(graph.removeNode(N1));, +    try {, +      graph.adjacentNodes(N1);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +  @Test, +  public void removeEdge_queryAfterRemoval() {, +    addEdge(E12, N1, N2);, +    Endpoints<Integer> unused = graph.incidentNodes(E12); // ensure cache (if any) is populated, +    assertTrue(graph.removeEdge(E12));, +    try {, +      graph.incidentNodes(E12);, +      fail(ERROR_EDGE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertEdgeNotInGraphErrorMessage(e);, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Set;, +, +  public void removeNode_queryAfterRemoval() {, +    addNode(N1);, +    Set<Integer> unused = graph.adjacentNodes(N1); // ensure cache (if any) is populated, +    assertTrue(graph.removeNode(N1));, +    try {, +      graph.adjacentNodes(N1);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +import java.util.Set;, +, +  public void removeNode_queryAfterRemoval() {, +    addNode(N1);, +    Set<Integer> unused = graph.adjacentNodes(N1); // ensure cache (if any) is populated, +    assertTrue(graph.removeNode(N1));, +    try {, +      graph.adjacentNodes(N1);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +  @Test, +  public void removeEdge_queryAfterRemoval() {, +    addEdge(E12, N1, N2);, +    Endpoints<Integer> unused = graph.incidentNodes(E12); // ensure cache (if any) is populated, +    assertTrue(graph.removeEdge(E12));, +    try {, +      graph.incidentNodes(E12);]