[+++ b/guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java, + * instances from its {@code ExecutorService} methods.  Futures returned by the, + * {@code schedule*} methods, by contrast, need not implement {@code, + * ListenableFuture}.  (To create an instance from an existing {@link, + * ScheduledExecutorService}, call {@link, + * MoreExecutors#listeningDecorator(ScheduledExecutorService)}., + *, + * <p>TODO(cpovirk): make at least the one-time schedule() methods return a, + * ListenableFuture, too? But then we'll need ListenableScheduledFuture..., +++ b/guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java, + * instances from its {@code ExecutorService} methods.  Futures returned by the, + * {@code schedule*} methods, by contrast, need not implement {@code, + * ListenableFuture}.  (To create an instance from an existing {@link, + * ScheduledExecutorService}, call {@link, + * MoreExecutors#listeningDecorator(ScheduledExecutorService)}., + *, + * <p>TODO(cpovirk): make at least the one-time schedule() methods return a, + * ListenableFuture, too? But then we'll need ListenableScheduledFuture..., +++ b/guava/src/com/google/common/util/concurrent/MoreExecutors.java, +import java.util.concurrent.ScheduledFuture;, +    final ExecutorService delegate;, +    public ScheduledFuture<?> schedule(, +      return delegate.schedule(command, delay, unit);, +    public <V> ScheduledFuture<V> schedule(, +      return delegate.schedule(callable, delay, unit);, +    public ScheduledFuture<?> scheduleAtFixedRate(, +      return delegate.scheduleAtFixedRate(command, initialDelay, period, unit);, +    public ScheduledFuture<?> scheduleWithFixedDelay(, +      return delegate.scheduleWithFixedDelay(, +          command, initialDelay, delay, unit);]