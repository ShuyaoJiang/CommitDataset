[+++ b/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +    testInvariantsInternal(rangeSet.complement());, +, +    Iterator<Range<C>> itr = rangeSet.asRanges().iterator();, +    Range<C> expectedSpan = null;, +    if (itr.hasNext()) {, +      expectedSpan = itr.next();, +      while (itr.hasNext()) {, +        expectedSpan = expectedSpan.span(itr.next());, +      }, +    }, +, +    try {, +      Range<C> span = rangeSet.span();, +      assertEquals(expectedSpan, span);, +    } catch (NoSuchElementException e) {, +      assertNull(expectedSpan);, +    }, +++ b/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +    testInvariantsInternal(rangeSet.complement());, +, +    Iterator<Range<C>> itr = rangeSet.asRanges().iterator();, +    Range<C> expectedSpan = null;, +    if (itr.hasNext()) {, +      expectedSpan = itr.next();, +      while (itr.hasNext()) {, +        expectedSpan = expectedSpan.span(itr.next());, +      }, +    }, +, +    try {, +      Range<C> span = rangeSet.span();, +      assertEquals(expectedSpan, span);, +    } catch (NoSuchElementException e) {, +      assertNull(expectedSpan);, +    }, +++ b/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java, +  public void testInvariantsEmpty() {, +    testInvariants(TreeRangeSet.create());, +  }, +, +++ b/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +    testInvariantsInternal(rangeSet.complement());, +, +    Iterator<Range<C>> itr = rangeSet.asRanges().iterator();, +    Range<C> expectedSpan = null;, +    if (itr.hasNext()) {, +      expectedSpan = itr.next();, +      while (itr.hasNext()) {, +        expectedSpan = expectedSpan.span(itr.next());, +      }, +    }, +, +    try {, +      Range<C> span = rangeSet.span();, +      assertEquals(expectedSpan, span);, +    } catch (NoSuchElementException e) {, +      assertNull(expectedSpan);, +    }, +++ b/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java, +  public void testInvariantsEmpty() {, +    testInvariants(TreeRangeSet.create());, +  }, +, +++ b/guava/src/com/google/common/collect/ImmutableRangeSet.java, +import java.util.NoSuchElementException;, +  public Range<C> span() {, +    if (ranges.isEmpty()) {, +      throw new NoSuchElementException();, +    }, +    return Range.create(, +        ranges.get(0).lowerBound,, +        ranges.get(ranges.size() - 1).upperBound);, +  }, +, +  @Override, +++ b/guava-tests/test/com/google/common/collect/AbstractRangeSetTest.java, +import java.util.Iterator;, +import java.util.NoSuchElementException;, +    testInvariantsInternal(rangeSet.complement());, +, +    Iterator<Range<C>> itr = rangeSet.asRanges().iterator();, +    Range<C> expectedSpan = null;, +    if (itr.hasNext()) {, +      expectedSpan = itr.next();, +      while (itr.hasNext()) {, +        expectedSpan = expectedSpan.span(itr.next());, +      }, +    }, +, +    try {, +      Range<C> span = rangeSet.span();, +      assertEquals(expectedSpan, span);, +    } catch (NoSuchElementException e) {]