[+++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import static com.google.common.base.Preconditions.checkArgument;, +    Class<?> declaringClass = ctor.getDeclaringClass();, +    checkArgument(Modifier.isStatic(declaringClass.getModifiers()), +        || declaringClass.getEnclosingClass() == null,, +        "Cannot test constructor of non-static inner class: %s", declaringClass.getName());, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import static com.google.common.base.Preconditions.checkArgument;, +    Class<?> declaringClass = ctor.getDeclaringClass();, +    checkArgument(Modifier.isStatic(declaringClass.getModifiers()), +        || declaringClass.getEnclosingClass() == null,, +        "Cannot test constructor of non-static inner class: %s", declaringClass.getName());, +++ b/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java, +import static org.junit.contrib.truth.Truth.ASSERT;, +  private class Inner {, +    public Inner(String s) {, +      checkNotNull(s);, +    }, +  }, +, +  public void testNonStaticInnerClass() {, +    try {, +      new NullPointerTester().testAllPublicConstructors(Inner.class);, +      fail();, +    } catch (IllegalArgumentException expected) {, +      ASSERT.that(expected.getMessage()).contains("inner class");, +    }, +  }, +, +++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java, +import static com.google.common.base.Preconditions.checkArgument;, +    Class<?> declaringClass = ctor.getDeclaringClass();, +    checkArgument(Modifier.isStatic(declaringClass.getModifiers()), +        || declaringClass.getEnclosingClass() == null,, +        "Cannot test constructor of non-static inner class: %s", declaringClass.getName());, +++ b/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java, +import static org.junit.contrib.truth.Truth.ASSERT;, +  private class Inner {, +    public Inner(String s) {, +      checkNotNull(s);, +    }, +  }, +, +  public void testNonStaticInnerClass() {, +    try {, +      new NullPointerTester().testAllPublicConstructors(Inner.class);, +      fail();, +    } catch (IllegalArgumentException expected) {, +      ASSERT.that(expected.getMessage()).contains("inner class");, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/InvokableTest.java, +import javax.annotation.Nullable;, +, +, +  private class InnerWithDefaultConstructor {, +    class NestedInner {}, +  }, +, +  public void testInnerClassDefaultConstructor() throws Exception {, +    Constructor<?> constructor =, +        InnerWithDefaultConstructor.class.getDeclaredConstructors() [0];, +    assertEquals(0, Invokable.from(constructor).getParameters().size());, +  }, +, +  public void testNestedInnerClassDefaultConstructor() throws Exception {, +    Constructor<?> constructor =, +        InnerWithDefaultConstructor.NestedInner.class.getDeclaredConstructors() [0];, +    assertEquals(0, Invokable.from(constructor).getParameters().size());, +  }, +, +  private class InnerWithOneParameterConstructor {, +    @SuppressWarnings("unused") // called by reflection, +    public InnerWithOneParameterConstructor(String s) {}, +  }, +, +  public void testInnerClassWithOneParameterConstructor() throws Exception {, +    Constructor<?> constructor =, +        InnerWithOneParameterConstructor.class.getDeclaredConstructors()[0];, +    Invokable<?, ?> invokable = Invokable.from(constructor);, +    assertEquals(1, invokable.getParameters().size());, +    assertEquals(TypeToken.of(String.class), invokable.getParameters().get(0).getType());, +  }, +, +  private class InnerWithAnnotatedConstructorParameter {, +    @SuppressWarnings("unused") // called by reflection, +    InnerWithAnnotatedConstructorParameter(@Nullable String s) {}, +  }, +, +  public void testInnerClassWithAnnotatedConstructorParameter() throws Exception {, +    Constructor<?> constructor =, +        InnerWithAnnotatedConstructorParameter.class.getDeclaredConstructors() [0];, +    Invokable<?, ?> invokable = Invokable.from(constructor);, +    assertEquals(1, invokable.getParameters().size());, +    assertEquals(TypeToken.of(String.class), invokable.getParameters().get(0).getType());, +  }, +, +  private class InnerWithGenericConstructorParameter {, +    @SuppressWarnings("unused") // called by reflection]