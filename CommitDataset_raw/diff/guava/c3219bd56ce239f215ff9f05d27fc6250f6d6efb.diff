[+++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own size to approximately, +   * {@code maximumSize / concurrencyLevel}., +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately, +   * {@code maximumWeight / concurrencyLevel}., +++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own size to approximately, +   * {@code maximumSize / concurrencyLevel}., +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately, +   * {@code maximumWeight / concurrencyLevel}., +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +   * @deprecated Use {@link #from(Object[])} instead (but note the differences in mutability). This, +++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own size to approximately, +   * {@code maximumSize / concurrencyLevel}., +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately, +   * {@code maximumWeight / concurrencyLevel}., +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +   * @deprecated Use {@link #from(Object[])} instead (but note the differences in mutability). This, +++ b/android/guava/src/com/google/common/collect/Multiset.java, +   * use {@link #add(Object, int) add}{@code (element, 1)} instead., +   * use {@link #remove(Object, int) remove}{@code (element, 1)} instead., +++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own size to approximately, +   * {@code maximumSize / concurrencyLevel}., +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately, +   * {@code maximumWeight / concurrencyLevel}., +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +   * @deprecated Use {@link #from(Object[])} instead (but note the differences in mutability). This, +++ b/android/guava/src/com/google/common/collect/Multiset.java, +   * use {@link #add(Object, int) add}{@code (element, 1)} instead., +   * use {@link #remove(Object, int) remove}{@code (element, 1)} instead., +++ b/android/guava/src/com/google/common/collect/Range.java, + * <caption>Range Types</caption>, +++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own size to approximately, +   * {@code maximumSize / concurrencyLevel}., +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately, +   * {@code maximumWeight / concurrencyLevel}., +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +   * @deprecated Use {@link #from(Object[])} instead (but note the differences in mutability). This, +++ b/android/guava/src/com/google/common/collect/Multiset.java, +   * use {@link #add(Object, int) add}{@code (element, 1)} instead., +   * use {@link #remove(Object, int) remove}{@code (element, 1)} instead., +++ b/android/guava/src/com/google/common/collect/Range.java, + * <caption>Range Types</caption>, +++ b/android/guava/src/com/google/common/hash/BloomFilter.java, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a, +++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java, +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own size to approximately, +   * {@code maximumSize / concurrencyLevel}., +   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each, +   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately, +   * {@code maximumWeight / concurrencyLevel}., +++ b/android/guava/src/com/google/common/collect/FluentIterable.java, +   * @deprecated Use {@link #from(Object[])} instead (but note the differences in mutability). This, +++ b/android/guava/src/com/google/common/collect/Multiset.java, +   * use {@link #add(Object, int) add}{@code (element, 1)} instead., +   * use {@link #remove(Object, int) remove}{@code (element, 1)} instead., +++ b/android/guava/src/com/google/common/collect/Range.java, + * <caption>Range Types</caption>, +++ b/android/guava/src/com/google/common/hash/BloomFilter.java, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a, +   * Creates a {@link BloomFilter}{@code <T>} with the expected number of insertions and a, +++ b/android/guava/src/com/google/common/hash/HashFunction.java, + * T} provided that you implement a {@link Funnel}{@code <T>} to specify how to "feed" data from, + * that object into the function. (See {@linkplain Hasher#putObject an example} of this.), +++ b/android/guava/src/com/google/common/base/Throwables.java, +import java.io.IOException;, +++ b/android/guava/src/com/google/common/cache/CacheBuilder.java]