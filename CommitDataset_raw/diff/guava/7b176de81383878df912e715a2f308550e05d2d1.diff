[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return Platform.mapsAsMapSortedSet(set, function);, +  }, +, +  static <K, V> SortedMap<K, V> asMapSortedIgnoreNavigable(SortedSet<K> set,, +      Function<? super K, V> function) {, +      return removeOnlySet(backingSet());, +      return backingSet().size();, +      return backingSet().contains(key);, +      if (backingSet().contains(key)) {, +      if (backingSet().remove(key)) {, +      backingSet().clear();, +    }, +, +    protected Entry<K, V> entry(K key) {, +      return immutableEntry(key, function.apply(key));, +          final Iterator<K> backingIterator = backingSet().iterator();, +              return entry(backingIterator.next());, +  private static class SortedAsMapView<K, V> extends AsMapView<K, V>, +    SortedSet<K> backingSet() {, +      return (SortedSet<K>) super.backingSet();, +    }, +, +    @Override, +    public Set<K> keySet() {, +      return removeOnlySortedSet(backingSet());, +    }, +, +    @Override, +  }, +, +  private static <E> Set<E> removeOnlySet(final Set<E> set) {, +    return new ForwardingSet<E>() {, +      @Override, +      protected Set<E> delegate() {, +        return set;, +      }, +      public boolean add(E element) {, +        throw new UnsupportedOperationException();, +, +      @Override, +      public boolean addAll(Collection<? extends E> es) {, +        throw new UnsupportedOperationException();, +      }, +    };, +  }, +, +  private static <E> SortedSet<E> removeOnlySortedSet(final SortedSet<E> set) {, +    return new ForwardingSortedSet<E>() {, +      @Override, +      protected SortedSet<E> delegate() {, +        return set;, +      }, +, +      @Override, +      public boolean add(E element) {, +        throw new UnsupportedOperationException();, +      }, +, +      @Override, +      public boolean addAll(Collection<? extends E> es) {, +        throw new UnsupportedOperationException();, +      }, +, +      @Override, +      public SortedSet<E> headSet(E toElement) {, +        return removeOnlySortedSet(super.headSet(toElement));, +      }, +, +      @Override, +      public SortedSet<E> subSet(E fromElement, E toElement) {, +        return removeOnlySortedSet(super.subSet(fromElement, toElement));, +      }, +, +      @Override, +      public SortedSet<E> tailSet(E fromElement) {, +        return removeOnlySortedSet(super.tailSet(fromElement));, +      }, +    };, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    return Platform.mapsAsMapSortedSet(set, function);, +  }, +, +  static <K, V> SortedMap<K, V> asMapSortedIgnoreNavigable(SortedSet<K> set,, +      Function<? super K, V> function) {, +      return removeOnlySet(backingSet());, +      return backingSet().size();, +      return backingSet().contains(key);, +      if (backingSet().contains(key)) {, +      if (backingSet().remove(key)) {, +      backingSet().clear();, +    }, +, +    protected Entry<K, V> entry(K key) {, +      return immutableEntry(key, function.apply(key));, +          final Iterator<K> backingIterator = backingSet().iterator();, +              return entry(backingIterator.next());, +  private static class SortedAsMapView<K, V> extends AsMapView<K, V>, +    SortedSet<K> backingSet() {, +      return (SortedSet<K>) super.backingSet();]