[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +    assertEquals(2, in.skipBytes(2));, +    assertEquals(0, in.skipBytes(1));, +, +  public void testNewDataInput_BAIS() {, +    ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {0x12, 0x34, 0x56, 0x78});, +    ByteArrayDataInput in = ByteStreams.newDataInput(bais);, +    assertEquals(0x12345678, in.readInt());, +  public void testNewDataOutput_BAOS() {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    ByteArrayDataOutput out = ByteStreams.newDataOutput(baos);, +    out.writeInt(0x12345678);, +    assertEquals(4, baos.size());, +    assertEquals(new byte[] {0x12, 0x34, 0x56, 0x78}, baos.toByteArray());, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +      fail("expected exception");, +    assertEquals(2, in.skipBytes(2));, +    assertEquals(0, in.skipBytes(1));, +, +  public void testNewDataInput_BAIS() {, +    ByteArrayInputStream bais = new ByteArrayInputStream(new byte[] {0x12, 0x34, 0x56, 0x78});, +    ByteArrayDataInput in = ByteStreams.newDataInput(bais);, +    assertEquals(0x12345678, in.readInt());, +  public void testNewDataOutput_BAOS() {, +    ByteArrayOutputStream baos = new ByteArrayOutputStream();, +    ByteArrayDataOutput out = ByteStreams.newDataOutput(baos);, +    out.writeInt(0x12345678);, +    assertEquals(4, baos.size());, +    assertEquals(new byte[] {0x12, 0x34, 0x56, 0x78}, baos.toByteArray());, +  }, +, +++ b/guava/src/com/google/common/io/ByteStreams.java, +    return newDataInput(new ByteArrayInputStream(bytes));, +    return newDataInput(, +        new ByteArrayInputStream(bytes, start, bytes.length - start));, +  }, +, +  /**, +   * Returns a new {@link ByteArrayDataInput} instance to read from the given, +   * {@code ByteArrayInputStream}. The given input stream is not reset before, +   * being read from by the returned {@code ByteArrayDataInput}., +   *, +   * @since 17.0, +   */, +  public static ByteArrayDataInput newDataInput(, +      ByteArrayInputStream byteArrayInputStream) {, +    return new ByteArrayDataInputStream(checkNotNull(byteArrayInputStream));, +    ByteArrayDataInputStream(ByteArrayInputStream byteArrayInputStream) {, +      this.input = new DataInputStream(byteArrayInputStream);, +    return newDataOutput(new ByteArrayOutputStream());, +    return newDataOutput(new ByteArrayOutputStream(size));, +  }, +, +  /**, +   * Returns a new {@link ByteArrayDataOutput} instance which writes to the, +   * given {@code ByteArrayOutputStream}. The given output stream is not reset, +   * before being written to by the returned {@code ByteArrayDataOutput} and, +   * new data will be appended to any existing content., +   *, +   * <p>Note that if the given output stream was not empty or is modified after, +   * the {@code ByteArrayDataOutput} is created, the contract for, +   * {@link ByteArrayDataOutput#toByteArray} will not be honored (the bytes, +   * returned in the byte array may not be exactly what was written via calls to, +   * {@code ByteArrayDataOutput})., +   *, +   * @since 17.0, +   */, +  public static ByteArrayDataOutput newDataOutput(, +      ByteArrayOutputStream byteArrayOutputSteam) {, +    return new ByteArrayDataOutputStream(checkNotNull(byteArrayOutputSteam));]