[+++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public HashCode hashInt(int input) {, +++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public HashCode hashInt(int input) {, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public HashCode hashInt(int input) {, +++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public HashCode hashInt(int input) {, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public HashCode hashInt(int input) {, +++ b/guava/src/com/google/common/hash/AbstractStreamingHashFunction.java, +  @Override public HashCode hashInt(int input) {, +    return newHasher().putInt(input).hash();, +  }, +, +++ b/guava-tests/test/com/google/common/hash/AbstractNonStreamingHashFunctionTest.java, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public HashCode hashInt(int input) {, +++ b/guava-tests/test/com/google/common/hash/AbstractStreamingHasherTest.java, +      throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public HashCode hashInt(int input) {, +++ b/guava/src/com/google/common/hash/AbstractStreamingHashFunction.java, +  @Override public HashCode hashInt(int input) {, +    return newHasher().putInt(input).hash();, +  }, +, +++ b/guava/src/com/google/common/hash/HashFunction.java, +   * Shortcut for {@code newHasher().putInt(input).hash()}; returns the hash code for the given, +   * {@code int} value, interpreted in little-endian byte order. The implementation <i>might</i>, +   * perform better than its longhand equivalent, but should not perform worse., +   *, +   * @since 12.0, +   */, +  HashCode hashInt(int input);, +, +  /**]