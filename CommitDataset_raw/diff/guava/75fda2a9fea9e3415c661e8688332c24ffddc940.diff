[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java, +  // TODO(user): Deprecate in favor of Enums.stringConverter(), +, +  /**, +   * Returns a converter that converts between strings and {@code enum} values, +   * of type {@code enumClass} using {@link Enum#valueOf(Class, String)} and, +   * {@link Enum#name()}., +   * The converter will throw an {@code IllegalArgumentException} if the, +   * argument is not the name of any enum constant in the specified enum., +   *, +   * @since 16.0, +   */, +  // TODO(user): Make this serializable., +  public static <T extends Enum<T>> Converter<String, T> stringConverter(, +      final Class<T> enumClass) {, +    checkNotNull(enumClass);, +    return new Converter<String, T>() {, +      @Override, +      protected T doForward(String value) {, +        // TODO(kevinb): remove null boilerplate (convert() will do it automatically), +        return value == null ? null : Enum.valueOf(enumClass, value);, +      }, +, +      @Override, +      protected String doBackward(T enumValue) {, +        // TODO(kevinb): remove null boilerplate (convert() will do it automatically), +        return enumValue == null ? null : enumValue.name();, +      }, +      @Override public String toString() {, +        return "Enums.stringConverter(" + enumClass + ")";, +      }, +    };, +  }, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java, +  // TODO(user): Deprecate in favor of Enums.stringConverter(), +, +  /**, +   * Returns a converter that converts between strings and {@code enum} values, +   * of type {@code enumClass} using {@link Enum#valueOf(Class, String)} and, +   * {@link Enum#name()}., +   * The converter will throw an {@code IllegalArgumentException} if the, +   * argument is not the name of any enum constant in the specified enum., +   *, +   * @since 16.0, +   */, +  // TODO(user): Make this serializable., +  public static <T extends Enum<T>> Converter<String, T> stringConverter(, +      final Class<T> enumClass) {, +    checkNotNull(enumClass);, +    return new Converter<String, T>() {, +      @Override, +      protected T doForward(String value) {, +        // TODO(kevinb): remove null boilerplate (convert() will do it automatically), +        return value == null ? null : Enum.valueOf(enumClass, value);, +      }, +, +      @Override, +      protected String doBackward(T enumValue) {, +        // TODO(kevinb): remove null boilerplate (convert() will do it automatically), +        return enumValue == null ? null : enumValue.name();, +      }, +      @Override public String toString() {, +        return "Enums.stringConverter(" + enumClass + ")";, +      }, +    };, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import com.google.common.base.Converter;, +   * Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()},, +   * and whose inverse view converts values using, +   * {@link BiMap#inverse bimap.inverse()}{@code .get()}, +   *, +   * @param bimap the bimap to view as a converter, +   * @return a converter that is a view of the specified bimap, +   * @since 16.0, +   */, +  @Beta, +  public static <A, B> Converter<A, B> asConverter(final BiMap<A, B> bimap) {, +    checkNotNull(bimap);, +    return new Converter<A, B>() {, +      @Override, +      protected B doForward(A a) {, +        return convert(bimap, a);, +      }, +      @Override, +      protected A doBackward(B b) {, +        return convert(bimap.inverse(), b);, +      }, +, +      private /*static*/ <X, Y> Y convert(BiMap<X, Y> bimap, X input) {, +        // TODO(kevinb): remove null boilerplate (convert() will do it automatically), +        if (input == null) {, +          return null;, +        }, +        Y output = bimap.get(input);, +        checkArgument(output != null, "No non-null mapping present for input: %s", input);, +        return output;, +      }, +    };, +  }]