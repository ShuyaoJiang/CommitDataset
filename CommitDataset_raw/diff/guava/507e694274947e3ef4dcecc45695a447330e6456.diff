[+++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +import java.util.concurrent.CancellationException;, +  public void testCancel_notDoneNoInterrupt() throws Exception {, +    try {, +      future.get();, +      fail("Expected CancellationException");, +    } catch (CancellationException e) {, +      assertNotNull(e.getCause());, +    }, +  public void testCancel_notDoneInterrupt() throws Exception {, +    try {, +      future.get();, +      fail("Expected CancellationException");, +    } catch (CancellationException e) {, +      assertNotNull(e.getCause());, +    }, +  public void testCancel_done() throws Exception {, +      assertFalse(interruptTaskWasCalled);, +++ b/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java, +import java.util.concurrent.CancellationException;, +  public void testCancel_notDoneNoInterrupt() throws Exception {, +    try {, +      future.get();, +      fail("Expected CancellationException");, +    } catch (CancellationException e) {, +      assertNotNull(e.getCause());, +    }, +  public void testCancel_notDoneInterrupt() throws Exception {, +    try {, +      future.get();, +      fail("Expected CancellationException");, +    } catch (CancellationException e) {, +      assertNotNull(e.getCause());, +    }, +  public void testCancel_done() throws Exception {, +      assertFalse(interruptTaskWasCalled);, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +        this.exception = ((finalState & (CANCELLED | INTERRUPTED)) != 0)]