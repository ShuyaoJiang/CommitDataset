[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +  private transient ImmutableListMultimap<V, K> inverse;, +, +  /**, +   * {@inheritDoc}, +   *, +   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and, +   * value, this method returns an {@code ImmutableListMultimap} rather than the, +   * {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class., +   *, +   * @since 11, +   */, +  @Beta, +  public ImmutableListMultimap<V, K> inverse() {, +    ImmutableListMultimap<V, K> result = inverse;, +    return (result == null) ? (inverse = invert()) : result;, +  }, +, +  private ImmutableListMultimap<V, K> invert() {, +    Builder<V, K> builder = builder();, +    for (Entry<K, V> entry : entries()) {, +      builder.put(entry.getValue(), entry.getKey());, +    }, +    ImmutableListMultimap<V, K> invertedMultimap = builder.build();, +    invertedMultimap.inverse = this;, +    return invertedMultimap;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +  private transient ImmutableListMultimap<V, K> inverse;, +, +  /**, +   * {@inheritDoc}, +   *, +   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and, +   * value, this method returns an {@code ImmutableListMultimap} rather than the, +   * {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class., +   *, +   * @since 11, +   */, +  @Beta, +  public ImmutableListMultimap<V, K> inverse() {, +    ImmutableListMultimap<V, K> result = inverse;, +    return (result == null) ? (inverse = invert()) : result;, +  }, +, +  private ImmutableListMultimap<V, K> invert() {, +    Builder<V, K> builder = builder();, +    for (Entry<K, V> entry : entries()) {, +      builder.put(entry.getValue(), entry.getKey());, +    }, +    ImmutableListMultimap<V, K> invertedMultimap = builder.build();, +    invertedMultimap.inverse = this;, +    return invertedMultimap;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java, + * <p>In addition to methods defined by {@link Multimap}, an {@link #inverse}, + * method is also supported., + *, +// TODO(user): If BiMultimap graduates from labs, this class should implement it., +   * Returns an immutable multimap which is the inverse of this one. For every, +   * key-value mapping in the original, the result will have a mapping with, +   * key and value reversed., +   *, +   * @since 11, +   */, +  @Beta, +  public abstract ImmutableMultimap<V, K> inverse();, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableListMultimap.java, +  private transient ImmutableListMultimap<V, K> inverse;, +, +  /**, +   * {@inheritDoc}, +   *, +   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and, +   * value, this method returns an {@code ImmutableListMultimap} rather than the, +   * {@code ImmutableMultimap} specified in the {@code ImmutableMultimap} class., +   *, +   * @since 11, +   */, +  @Beta, +  public ImmutableListMultimap<V, K> inverse() {, +    ImmutableListMultimap<V, K> result = inverse;, +    return (result == null) ? (inverse = invert()) : result;, +  }, +, +  private ImmutableListMultimap<V, K> invert() {, +    Builder<V, K> builder = builder();, +    for (Entry<K, V> entry : entries()) {, +      builder.put(entry.getValue(), entry.getKey());, +    }, +    ImmutableListMultimap<V, K> invertedMultimap = builder.build();, +    invertedMultimap.inverse = this;, +    return invertedMultimap;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMultimap.java]