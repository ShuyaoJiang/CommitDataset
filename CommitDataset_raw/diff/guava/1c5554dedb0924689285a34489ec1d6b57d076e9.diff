[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java, +import com.google.common.collect.Maps.IteratorBasedAbstractMap;, +import java.util.Map.Entry;, +  private abstract static class ArrayMap<K, V> extends IteratorBasedAbstractMap<K, V> {, +    Iterator<Entry<K, V>> entryIterator() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java, +import com.google.common.collect.Maps.IteratorBasedAbstractMap;, +import java.util.Map.Entry;, +  private abstract static class ArrayMap<K, V> extends IteratorBasedAbstractMap<K, V> {, +    Iterator<Entry<K, V>> entryIterator() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      extends IteratorBasedAbstractMap<K, V2> {, +    @Override Iterator<Entry<K, V2>> entryIterator() {, +, +    @Override public Collection<V2> values() {, +      return new Values<K, V2>(this);, +  abstract static class IteratorBasedAbstractMap<K, V> extends AbstractMap<K, V> {, +    @Override public abstract int size();, +, +    abstract Iterator<Entry<K, V>> entryIterator();, +, +    @Override public Set<Entry<K, V>> entrySet() {, +      return new EntrySet<K, V>() {, +        @Override, +        Map<K, V> map() {, +          return IteratorBasedAbstractMap.this;, +        }, +, +        @Override, +        public Iterator<Entry<K, V>> iterator() {, +          return entryIterator();, +        }, +      };, +    }, +, +    @Override public void clear() {, +      Iterators.clear(entryIterator());, +    }, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java, +import com.google.common.collect.Maps.IteratorBasedAbstractMap;, +import java.util.Map.Entry;, +  private abstract static class ArrayMap<K, V> extends IteratorBasedAbstractMap<K, V> {, +    Iterator<Entry<K, V>> entryIterator() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      extends IteratorBasedAbstractMap<K, V2> {, +    @Override Iterator<Entry<K, V2>> entryIterator() {, +, +    @Override public Collection<V2> values() {, +      return new Values<K, V2>(this);, +  abstract static class IteratorBasedAbstractMap<K, V> extends AbstractMap<K, V> {, +    @Override public abstract int size();, +, +    abstract Iterator<Entry<K, V>> entryIterator();, +, +    @Override public Set<Entry<K, V>> entrySet() {, +      return new EntrySet<K, V>() {, +        @Override, +        Map<K, V> map() {, +          return IteratorBasedAbstractMap.this;, +        }, +, +        @Override, +        public Iterator<Entry<K, V>> iterator() {, +          return entryIterator();, +        }, +      };, +    }, +, +    @Override public void clear() {, +      Iterators.clear(entryIterator());, +    }, +  }, +, +++ b/guava/src/com/google/common/collect/AbstractNavigableMap.java, +import com.google.common.collect.Maps.IteratorBasedAbstractMap;, +, +abstract class AbstractNavigableMap<K, V> extends IteratorBasedAbstractMap<K, V> , +    implements NavigableMap<K, V> {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java, +import com.google.common.collect.Maps.IteratorBasedAbstractMap;, +import java.util.Map.Entry;, +  private abstract static class ArrayMap<K, V> extends IteratorBasedAbstractMap<K, V> {, +    Iterator<Entry<K, V>> entryIterator() {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      extends IteratorBasedAbstractMap<K, V2> {, +    @Override Iterator<Entry<K, V2>> entryIterator() {, +, +    @Override public Collection<V2> values() {, +      return new Values<K, V2>(this);, +  abstract static class IteratorBasedAbstractMap<K, V> extends AbstractMap<K, V> {, +    @Override public abstract int size();, +, +    abstract Iterator<Entry<K, V>> entryIterator();, +, +    @Override public Set<Entry<K, V>> entrySet() {, +      return new EntrySet<K, V>() {, +        @Override, +        Map<K, V> map() {]