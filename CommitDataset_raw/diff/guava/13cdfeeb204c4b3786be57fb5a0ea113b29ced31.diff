[+++ b/guava/src/com/google/common/graph/MutableGraph.java, +   * Adds {@code node} if it is not already present., +   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present., +   * <p>Behavior if {@code nodeA} and {@code nodeB} are not already present in this graph is, +   * implementation-dependent. Suggested behaviors include (a) silently {@link #addNode(Object), +   * adding} {@code nodeA} and {@code nodeB} to the graph (this is the behavior of the default, +   * implementations) or (b) throwing {@code IllegalArgumentException}., +   * Removes {@code node} if it is present; all edges incident to {@code node} will also be removed., +   * Removes the edge connecting {@code nodeA} to {@code nodeB}, if it is present., +++ b/guava/src/com/google/common/graph/MutableGraph.java, +   * Adds {@code node} if it is not already present., +   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present., +   * <p>Behavior if {@code nodeA} and {@code nodeB} are not already present in this graph is, +   * implementation-dependent. Suggested behaviors include (a) silently {@link #addNode(Object), +   * adding} {@code nodeA} and {@code nodeB} to the graph (this is the behavior of the default, +   * implementations) or (b) throwing {@code IllegalArgumentException}., +   * Removes {@code node} if it is present; all edges incident to {@code node} will also be removed., +   * Removes the edge connecting {@code nodeA} to {@code nodeB}, if it is present., +++ b/guava/src/com/google/common/graph/MutableNetwork.java, +   * Adds {@code node} if it is not already present., +   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * Adds {@code edge} connecting {@code nodeA} to {@code nodeB}., +   * <p><b>Edges must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * <p>Behavior if {@code nodeA} and {@code nodeB} are not already present in this graph is, +   * implementation-dependent. Suggested behaviors include (a) silently {@link #addNode(Object), +   * adding} {@code nodeA} and {@code nodeB} to the graph (this is the behavior of the default, +   * implementations) or (b) throwing {@code IllegalArgumentException}., +   * <p>If {@code edge} already connects {@code nodeA} to {@code nodeB} (in the specified order if, +   * this graph {@link #isDirected()}, else in any order), then this method will have no effect., +   * Removes {@code node} if it is present; all edges incident to {@code node} will also be removed., +++ b/guava/src/com/google/common/graph/MutableGraph.java, +   * Adds {@code node} if it is not already present., +   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present., +   * <p>Behavior if {@code nodeA} and {@code nodeB} are not already present in this graph is, +   * implementation-dependent. Suggested behaviors include (a) silently {@link #addNode(Object), +   * adding} {@code nodeA} and {@code nodeB} to the graph (this is the behavior of the default, +   * implementations) or (b) throwing {@code IllegalArgumentException}., +   * Removes {@code node} if it is present; all edges incident to {@code node} will also be removed., +   * Removes the edge connecting {@code nodeA} to {@code nodeB}, if it is present., +++ b/guava/src/com/google/common/graph/MutableNetwork.java, +   * Adds {@code node} if it is not already present., +   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * Adds {@code edge} connecting {@code nodeA} to {@code nodeB}., +   * <p><b>Edges must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * <p>Behavior if {@code nodeA} and {@code nodeB} are not already present in this graph is, +   * implementation-dependent. Suggested behaviors include (a) silently {@link #addNode(Object), +   * adding} {@code nodeA} and {@code nodeB} to the graph (this is the behavior of the default, +   * implementations) or (b) throwing {@code IllegalArgumentException}., +   * <p>If {@code edge} already connects {@code nodeA} to {@code nodeB} (in the specified order if, +   * this graph {@link #isDirected()}, else in any order), then this method will have no effect., +   * Removes {@code node} if it is present; all edges incident to {@code node} will also be removed., +++ b/guava/src/com/google/common/graph/MutableValueGraph.java, +   * Adds {@code node} if it is not already present., +   * <p><b>Nodes must be unique</b>, just as {@code Map} keys must be. They must also be non-null., +   * <p>Values do not have to be unique. However, values must be non-null., +   * <p>Behavior if {@code nodeA} and {@code nodeB} are not already present in this graph is, +   * implementation-dependent. Suggested behaviors include (a) silently {@link #addNode(Object), +   * adding} {@code nodeA} and {@code nodeB} to the graph (this is the behavior of the default, +   * implementations) or (b) throwing {@code IllegalArgumentException}., +   *, +   * @return the value previously associated with the edge connecting {@code nodeA} to, +   * @throws IllegalArgumentException if the introduction of the edge would violate, +   *     {@link #allowsSelfLoops()}, +   * Removes {@code node} if it is present; all edges incident to {@code node} will also be removed., +   * @return the value previously associated with the edge connecting {@code nodeA} to]