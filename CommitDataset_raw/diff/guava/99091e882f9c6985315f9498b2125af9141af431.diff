[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * attempts to modify the returned map, whether direct or via its collection, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * attempts to modify the returned map, whether direct or via its collection, +++ b/guava-tests/test/com/google/common/collect/TableCollectionTest.java, +import java.util.SortedMap;, + * @author Louis Wasserman, +  private static final Feature<?>[] COLLECTION_FEATURES = {, +    CollectionSize.ANY,, +    CollectionFeature.ALLOWS_NULL_QUERIES, +  };, +, +  private static final Feature<?>[] COLLECTION_FEATURES_ORDER = {, +    CollectionSize.ANY,, +    CollectionFeature.KNOWN_ORDER,, +    CollectionFeature.ALLOWS_NULL_QUERIES, +  };, +, +    suite.addTestSuite(UnmodifiableHashRowTests.class);, +    suite.addTestSuite(UnmodifiableTreeRowTests.class);, +    suite.addTestSuite(UnmodifiableHashColumnTests.class);, +    suite.addTestSuite(UnmodifiableTreeColumnTests.class);, +    suite.addTestSuite(UnmodifiableHashRowMapTests.class);, +    suite.addTestSuite(UnmodifiableTreeRowMapTests.class);, +    suite.addTestSuite(UnmodifiableHashColumnMapTests.class);, +    suite.addTestSuite(UnmodifiableTreeColumnMapTests.class);, +            Table<String, Integer, Character> table = HashBasedTable.create();, +            populateForRowKeySet(table, elements);, +            return Tables.unmodifiableTable(table).rowKeySet();, +          }, +        }), +        .named("unmodifiableTable[HashBasedTable].rowKeySet"), +        .withFeatures(COLLECTION_FEATURES), +        .createTestSuite());, +, +    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +            RowSortedTable<String, Integer, Character> table = TreeBasedTable.create();, +            populateForRowKeySet(table, elements);, +            return Tables.unmodifiableRowSortedTable(table).rowKeySet();, +          }, +, +          @Override public List<String> order(List<String> insertionOrder) {, +            Collections.sort(insertionOrder);, +            return insertionOrder;, +          }, +        }), +        .named("unmodifiableRowSortedTable[TreeBasedTable].rowKeySet"), +        .withFeatures(COLLECTION_FEATURES_ORDER), +        .createTestSuite());, +, +    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +            Table<Integer, String, Character> table = HashBasedTable.create();, +            populateForColumnKeySet(table, elements);, +            return Tables.unmodifiableTable(table).columnKeySet();, +          }, +        }), +        .named("unmodifiableTable[HashBasedTable].columnKeySet"), +        .withFeatures(COLLECTION_FEATURES), +        .suppressing(getIteratorUnknownOrderRemoveSupportedMethod()), +        .createTestSuite());, +, +    suite.addTest(SetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +            RowSortedTable<Integer, String, Character> table = TreeBasedTable.create();, +            populateForColumnKeySet(table, elements);, +            return Tables.unmodifiableRowSortedTable(table).columnKeySet();, +          }, +, +          @Override public List<String> order(List<String> insertionOrder) {, +            Collections.sort(insertionOrder);, +            return insertionOrder;, +          }, +        }), +        .named("unmodifiableRowSortedTable[TreeBasedTable].columnKeySet"), +        .withFeatures(COLLECTION_FEATURES_ORDER), +        .suppressing(getIteratorKnownOrderRemoveSupportedMethod()), +        .createTestSuite());, +, +    suite.addTest(CollectionTestSuiteBuilder.using(, +        new TestStringCollectionGenerator() {, +          @Override protected Collection<String> create(String[] elements) {, +            Table<Integer, Character, String> table = HashBasedTable.create();, +            table.put(1, 'a', "foo");, +            table.clear();, +            populateForValues(table, elements);, +            return Tables.unmodifiableTable(table).values();, +          }, +        }), +        .named("unmodifiableTable[HashBasedTable].values"), +        .withFeatures(COLLECTION_FEATURES), +        .createTestSuite());, +, +    suite.addTest(CollectionTestSuiteBuilder.using(, +        new TestStringCollectionGenerator() {, +          @Override protected Collection<String> create(String[] elements) {, +            RowSortedTable<Integer, Character, String> table = TreeBasedTable.create();]