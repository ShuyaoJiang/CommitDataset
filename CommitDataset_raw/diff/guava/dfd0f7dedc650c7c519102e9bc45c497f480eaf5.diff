[+++ b/guava-tests/test/com/google/common/collect/ComparisonChainTest.java, +        .compareFalseFirst(true, true), +, +  public void testCompareFalseFirst() {, +    assertTrue(ComparisonChain.start().compareFalseFirst(true, true).result() == 0);, +    assertTrue(ComparisonChain.start().compareFalseFirst(true, false).result() > 0);, +    assertTrue(ComparisonChain.start().compareFalseFirst(false, true).result() < 0);, +    assertTrue(ComparisonChain.start().compareFalseFirst(false, false).result() == 0);, +  }, +, +  public void testCompareTrueFirst() {, +    assertTrue(ComparisonChain.start().compareTrueFirst(true, true).result() == 0);, +    assertTrue(ComparisonChain.start().compareTrueFirst(true, false).result() < 0);, +    assertTrue(ComparisonChain.start().compareTrueFirst(false, true).result() > 0);, +    assertTrue(ComparisonChain.start().compareTrueFirst(false, false).result() == 0);, +  }, +, +  @SuppressWarnings("deprecated") // test of a deprecated method, +  public void testCompareBooleans() {, +    assertTrue(ComparisonChain.start().compare(true, true).result() == 0);, +    assertTrue(ComparisonChain.start().compare(true, false).result() > 0);, +    assertTrue(ComparisonChain.start().compare(false, true).result() < 0);, +    assertTrue(ComparisonChain.start().compare(false, false).result() == 0);, +  }, +++ b/guava-tests/test/com/google/common/collect/ComparisonChainTest.java, +        .compareFalseFirst(true, true), +, +  public void testCompareFalseFirst() {, +    assertTrue(ComparisonChain.start().compareFalseFirst(true, true).result() == 0);, +    assertTrue(ComparisonChain.start().compareFalseFirst(true, false).result() > 0);, +    assertTrue(ComparisonChain.start().compareFalseFirst(false, true).result() < 0);, +    assertTrue(ComparisonChain.start().compareFalseFirst(false, false).result() == 0);, +  }, +, +  public void testCompareTrueFirst() {, +    assertTrue(ComparisonChain.start().compareTrueFirst(true, true).result() == 0);, +    assertTrue(ComparisonChain.start().compareTrueFirst(true, false).result() < 0);, +    assertTrue(ComparisonChain.start().compareTrueFirst(false, true).result() > 0);, +    assertTrue(ComparisonChain.start().compareTrueFirst(false, false).result() == 0);, +  }, +, +  @SuppressWarnings("deprecated") // test of a deprecated method, +  public void testCompareBooleans() {, +    assertTrue(ComparisonChain.start().compare(true, true).result() == 0);, +    assertTrue(ComparisonChain.start().compare(true, false).result() > 0);, +    assertTrue(ComparisonChain.start().compare(false, true).result() < 0);, +    assertTrue(ComparisonChain.start().compare(false, false).result() == 0);, +  }, +++ b/guava/src/com/google/common/collect/ComparisonChain.java, +    @Override public ComparisonChain compareTrueFirst(boolean left, boolean right) {, +      return classify(Booleans.compare(right, left)); // reversed, +    }, +    @Override public ComparisonChain compareFalseFirst(boolean left, boolean right) {, +    @Override public ComparisonChain compareTrueFirst(boolean left, boolean right) {, +      return this;, +    }, +    @Override public ComparisonChain compareFalseFirst(boolean left, boolean right) {, +   * Compares two {@code boolean} values, considering {@code true} to be less, +   * than {@code false}, <i>if</i> the result of this comparison chain has not, +   *, +   * @since 12.0, +  public abstract ComparisonChain compareTrueFirst(boolean left, boolean right);, +, +  /**, +   * Compares two {@code boolean} values, considering {@code false} to be less, +   * than {@code true}, <i>if</i> the result of this comparison chain has not, +   * already been determined., +   *, +   * @since 12.0 (present as {@code compare} since 2.0), +   */, +  public abstract ComparisonChain compareFalseFirst(boolean left, boolean right);, +, +  /**, +   * Old name of {@link #compareFalseFirst}., +   *, +   * @deprecated Use {@link #compareFalseFirst}; or, if the parameters passed, +   *     are being either negated or reversed, undo the negation or reversal and, +   *     use {@link #compareTrueFirst}. <b>This method is scheduled for deletion, +   *     in September 2013.</b>, +   */, +  @Deprecated, +  public final ComparisonChain compare(boolean left, boolean right) {, +    return compareFalseFirst(left, right);, +  }]