[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.base.Preconditions.checkState;, +  final Throwable trustedGetException() {, +    checkState(state == State.FAILURE);, +    return throwable;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.base.Preconditions.checkState;, +  final Throwable trustedGetException() {, +    checkState(state == State.FAILURE);, +    return throwable;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java, +import static com.google.common.collect.Sets.newHashSet;, +  final Set<Throwable> getOrInitSeenExceptions() {, +      seenExceptions = newHashSet();, +      addInitialException(seenExceptions);, +  abstract void addInitialException(Set<Throwable> seen);, +, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.base.Preconditions.checkState;, +  final Throwable trustedGetException() {, +    checkState(state == State.FAILURE);, +    return throwable;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java, +import static com.google.common.collect.Sets.newHashSet;, +  final Set<Throwable> getOrInitSeenExceptions() {, +      seenExceptions = newHashSet();, +      addInitialException(seenExceptions);, +  abstract void addInitialException(Set<Throwable> seen);, +, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +   * All as list will log extra exceptions that have already occurred., +  public void testAllAsList_logging_multipleExceptions_alreadyDone() throws Exception {, +   * All as list will log extra exceptions that occur later., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_multipleExceptions_doneLater() throws Exception {, +    SettableFuture<Object> future1 = SettableFuture.create();, +    SettableFuture<Object> future2 = SettableFuture.create();, +    SettableFuture<Object> future3 = SettableFuture.create();, +    ListenableFuture<List<Object>> all = Futures.allAsList(future1, future2, future3);, +, +    future1.setException(new MyException());, +    future2.setException(new MyException());, +    future3.setException(new MyException());, +, +    try {, +      all.get();, +    } catch (ExecutionException e) {, +      List<LogRecord> logged = aggregateFutureLogHandler.getStoredLogRecords();, +      assertEquals(2, logged.size());  // failures are the first are logged, +      assertTrue(logged.get(0).getThrown() instanceof MyException);, +      assertTrue(logged.get(1).getThrown() instanceof MyException);, +    }, +  }, +, +  /**, +  public void testAllAsList_logging_seenExceptionUpdateRace() throws Exception {, +         * we want for AggregateFuture to still detect that it's been previously seen., +      assertThat(aggregateFutureLogHandler.getStoredLogRecords()).isEmpty();, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java, +import static com.google.common.base.Preconditions.checkState;, +  final Throwable trustedGetException() {, +    checkState(state == State.FAILURE);, +    return throwable;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java, +import static com.google.common.collect.Sets.newHashSet;, +  final Set<Throwable> getOrInitSeenExceptions() {, +      seenExceptions = newHashSet();, +      addInitialException(seenExceptions);, +  abstract void addInitialException(Set<Throwable> seen);, +, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +   * All as list will log extra exceptions that have already occurred., +  public void testAllAsList_logging_multipleExceptions_alreadyDone() throws Exception {, +   * All as list will log extra exceptions that occur later., +   */, +  @SuppressWarnings("unchecked"), +  public void testAllAsList_logging_multipleExceptions_doneLater() throws Exception {, +    SettableFuture<Object> future1 = SettableFuture.create();, +    SettableFuture<Object> future2 = SettableFuture.create();, +    SettableFuture<Object> future3 = SettableFuture.create();, +    ListenableFuture<List<Object>> all = Futures.allAsList(future1, future2, future3);, +, +    future1.setException(new MyException());, +    future2.setException(new MyException());, +    future3.setException(new MyException());, +, +    try {, +      all.get();, +    } catch (ExecutionException e) {, +      List<LogRecord> logged = aggregateFutureLogHandler.getStoredLogRecords();, +      assertEquals(2, logged.size());  // failures are the first are logged]