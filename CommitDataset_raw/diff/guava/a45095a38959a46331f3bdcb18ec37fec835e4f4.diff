[+++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java, +  , +  /**, +   * Returns the {@link Method} instance for the test that assumes the multiset iterator supports , +   * {@code remove()} so that the test for {@code Multisets.filter} can suppress it., +   */, +  @GwtIncompatible("reflection"), +  public static Method getIteratorKnownOrderRemoveSupportedMethod() {, +    return Helpers.getMethod(MultisetIteratorTester.class, "testRemovingIteratorKnownOrder");, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java, +  , +  /**, +   * Returns the {@link Method} instance for the test that assumes the multiset iterator supports , +   * {@code remove()} so that the test for {@code Multisets.filter} can suppress it., +   */, +  @GwtIncompatible("reflection"), +  public static Method getIteratorKnownOrderRemoveSupportedMethod() {, +    return Helpers.getMethod(MultisetIteratorTester.class, "testRemovingIteratorKnownOrder");, +  }, +++ b/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java, +import com.google.common.base.Predicate;, +import com.google.common.base.Predicates;, +import com.google.common.collect.testing.google.MultisetIteratorTester;, +import com.google.common.collect.testing.google.MultisetWritesTester;, +import com.google.common.collect.testing.testers.CollectionIteratorTester;, +import java.util.Arrays;, +    suite.addTest(MultisetTestSuiteBuilder.using(filteredGenerator()), +        .withFeatures(CollectionSize.ANY,, +            CollectionFeature.ALLOWS_NULL_VALUES,, +            CollectionFeature.KNOWN_ORDER,, +            CollectionFeature.GENERAL_PURPOSE), +        .named("Multiset.filter[Multiset, Predicate]"), +        .suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod(),, +            MultisetIteratorTester.getIteratorKnownOrderRemoveSupportedMethod(),, +            MultisetWritesTester.getEntrySetIteratorMethod()), +        .createTestSuite());, +, +, +  private static final Multiset<String> ELEMENTS_TO_FILTER_OUT = ImmutableMultiset.of(, +      "foobar", "bazfoo", "foobar", "foobar");, +, +  private static final Predicate<String> PREDICATE =, +      Predicates.not(Predicates.in(ELEMENTS_TO_FILTER_OUT));, +, +  private static TestStringMultisetGenerator filteredGenerator() {, +    return new TestStringMultisetGenerator() {, +      @Override, +      protected Multiset<String> create(String[] elements) {, +        Multiset<String> multiset = LinkedHashMultiset.create();, +        multiset.addAll(Arrays.asList(elements));, +        multiset.addAll(ELEMENTS_TO_FILTER_OUT);, +        return Multisets.filter(multiset, PREDICATE);, +      }, +, +      @Override, +      public List<String> order(List<String> insertionOrder) {, +        return Lists.newArrayList(LinkedHashMultiset.create(insertionOrder));, +      }, +    };, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MultisetIteratorTester.java, +  , +  /**, +   * Returns the {@link Method} instance for the test that assumes the multiset iterator supports , +   * {@code remove()} so that the test for {@code Multisets.filter} can suppress it., +   */, +  @GwtIncompatible("reflection"), +  public static Method getIteratorKnownOrderRemoveSupportedMethod() {, +    return Helpers.getMethod(MultisetIteratorTester.class, "testRemovingIteratorKnownOrder");, +  }, +++ b/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java, +import com.google.common.base.Predicate;, +import com.google.common.base.Predicates;, +import com.google.common.collect.testing.google.MultisetIteratorTester;, +import com.google.common.collect.testing.google.MultisetWritesTester;, +import com.google.common.collect.testing.testers.CollectionIteratorTester;, +import java.util.Arrays;, +    suite.addTest(MultisetTestSuiteBuilder.using(filteredGenerator()), +        .withFeatures(CollectionSize.ANY,, +            CollectionFeature.ALLOWS_NULL_VALUES,, +            CollectionFeature.KNOWN_ORDER,, +            CollectionFeature.GENERAL_PURPOSE), +        .named("Multiset.filter[Multiset, Predicate]"), +        .suppressing(CollectionIteratorTester.getIteratorKnownOrderRemoveSupportedMethod(),, +            MultisetIteratorTester.getIteratorKnownOrderRemoveSupportedMethod(),, +            MultisetWritesTester.getEntrySetIteratorMethod()), +        .createTestSuite());, +, +, +  private static final Multiset<String> ELEMENTS_TO_FILTER_OUT = ImmutableMultiset.of(, +      "foobar", "bazfoo", "foobar", "foobar");, +, +  private static final Predicate<String> PREDICATE =, +      Predicates.not(Predicates.in(ELEMENTS_TO_FILTER_OUT));, +, +  private static TestStringMultisetGenerator filteredGenerator() {, +    return new TestStringMultisetGenerator() {, +      @Override, +      protected Multiset<String> create(String[] elements) {]