[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.base.Preconditions.checkNotNull;, +  /**, +   * Returns a {@link Predicate} that returns {@code true} if the input edge is a self-loop in, +   * {@code graph}. A self-loop is defined as an edge whose set of incident nodes has exactly one, +   * element. The predicate's {@code apply} method will throw an {@link IllegalArgumentException} if, +   * {@code graph} does not contain {@code edge}., +   */, +  private static <E> Predicate<E> selfLoopPredicate(final Network<?, E> graph) {, +    checkNotNull(graph, "graph");, +    return new Predicate<E>() {, +      @Override, +      public boolean apply(E edge) {, +        return (graph.incidentNodes(edge).size() == 1);, +      }, +    };, +  }, +, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.base.Preconditions.checkNotNull;, +  /**, +   * Returns a {@link Predicate} that returns {@code true} if the input edge is a self-loop in, +   * {@code graph}. A self-loop is defined as an edge whose set of incident nodes has exactly one, +   * element. The predicate's {@code apply} method will throw an {@link IllegalArgumentException} if, +   * {@code graph} does not contain {@code edge}., +   */, +  private static <E> Predicate<E> selfLoopPredicate(final Network<?, E> graph) {, +    checkNotNull(graph, "graph");, +    return new Predicate<E>() {, +      @Override, +      public boolean apply(E edge) {, +        return (graph.incidentNodes(edge).size() == 1);, +      }, +    };, +  }, +, +++ b/guava/src/com/google/common/graph/Graphs.java]