[+++ b/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java, +    Method[] methods = getMostConcreteMethods(interfaceType);, +      // The interface could be package-private or private., +      // filter out equals/hashCode/toString, +      if (method.getName().equals("equals"), +          && method.getParameterTypes().length == 1, +          && method.getParameterTypes()[0] == Object.class) {, +        continue;, +      }, +      if (method.getName().equals("hashCode"), +          && method.getParameterTypes().length == 0) {, +        continue;, +      }, +      if (method.getName().equals("toString"), +          && method.getParameterTypes().length == 0) {, +        continue;, +      }, +  /** Returns the most concrete public methods from {@code type}. */, +  private static Method[] getMostConcreteMethods(Class<?> type) {, +    Method[] methods = type.getMethods();, +    for (int i = 0; i < methods.length; i++) {, +      try {, +        methods[i] = type.getMethod(methods[i].getName(), methods[i].getParameterTypes());, +      } catch (Exception e) {, +        throw Throwables.propagate(e);, +      }, +    }, +    return methods;, +  }, +, +++ b/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java, +    Method[] methods = getMostConcreteMethods(interfaceType);, +      // The interface could be package-private or private., +      // filter out equals/hashCode/toString, +      if (method.getName().equals("equals"), +          && method.getParameterTypes().length == 1, +          && method.getParameterTypes()[0] == Object.class) {, +        continue;, +      }, +      if (method.getName().equals("hashCode"), +          && method.getParameterTypes().length == 0) {, +        continue;, +      }, +      if (method.getName().equals("toString"), +          && method.getParameterTypes().length == 0) {, +        continue;, +      }, +  /** Returns the most concrete public methods from {@code type}. */, +  private static Method[] getMostConcreteMethods(Class<?> type) {, +    Method[] methods = type.getMethods();, +    for (int i = 0; i < methods.length; i++) {, +      try {, +        methods[i] = type.getMethod(methods[i].getName(), methods[i].getParameterTypes());, +      } catch (Exception e) {, +        throw Throwables.propagate(e);, +      }, +    }, +    return methods;, +  }, +, +++ b/guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java, +    }, "minus");, +, +  public void testCovariantReturn() {, +    new ForwardingWrapperTester().testForwarding(Sub.class, new Function<Sub, Sub>() {, +      @Override public Sub apply(Sub sub) {, +        return new ForwardingSub(sub);, +      }, +    });, +  }, +, +  interface Base {, +    CharSequence getId();, +  }, +, +  interface Sub extends Base {, +    @Override String getId();, +  }, +, +  private static class ForwardingSub implements Sub {, +    private final Sub delegate;, +, +    ForwardingSub(Sub delegate) {, +      this.delegate = delegate;, +    }, +, +    @Override public String getId() {, +      return delegate.getId();, +    }, +, +    @Override public String toString() {, +      return delegate.toString();, +    }, +  }, +, +  private interface Equals {, +    @Override boolean equals(Object obj);, +    @Override int hashCode();, +    @Override String toString();, +  }]