[+++ b/guava/src/com/google/common/collect/BstCountBasedBalancePolicies.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/guava/src/com/google/common/collect/BstCountBasedBalancePolicies.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/guava/src/com/google/common/collect/BstRangeOps.java, +      total -= totalBeyondRangeToSide(aggregate, range, LEFT, root);, +      total -= totalBeyondRangeToSide(aggregate, range, RIGHT, root);, +  // Returns total value strictly to the specified side of the specified range., +  private static <K, N extends BstNode<K, N>> int totalBeyondRangeToSide(, +      BstAggregate<? super N> aggregate, GeneralRange<K> range, BstSide side, @Nullable N root) {, +      if (beyond(range, root.getKey(), side)) {, +        accum += aggregate.treeValue(root.childOrNull(side));, +        root = root.childOrNull(side.other());, +        root = root.childOrNull(side);, +    N higher = range.hasUpperBound(), +        ? subTreeBeyondRangeToSide(range, balancePolicy, nodeFactory, RIGHT, root), +        : null;, +    N lower = range.hasLowerBound(), +        ? subTreeBeyondRangeToSide(range, balancePolicy, nodeFactory, LEFT, root), +        : null;, +   * Returns a balanced tree containing all nodes in the specified tree that are strictly to the, +   * specified side of the specified range., +  private static <K, N extends BstNode<K, N>> N subTreeBeyondRangeToSide(GeneralRange<K> range,, +      BstBalancePolicy<N> balancePolicy, BstNodeFactory<N> nodeFactory, BstSide side,, +      @Nullable N root) {, +    if (beyond(range, root.getKey(), side)) {, +      N left = root.childOrNull(LEFT);, +      N right = root.childOrNull(RIGHT);, +      switch (side) {, +        case LEFT:, +          right = subTreeBeyondRangeToSide(range, balancePolicy, nodeFactory, LEFT, right);, +          break;, +        case RIGHT:, +          left = subTreeBeyondRangeToSide(range, balancePolicy, nodeFactory, RIGHT, left);, +          break;, +        default:, +          throw new AssertionError();, +      }, +      return balancePolicy.balance(nodeFactory, root, left, right);, +      return subTreeBeyondRangeToSide(, +          range, balancePolicy, nodeFactory, side, root.childOrNull(side));, +++ b/guava/src/com/google/common/collect/BstCountBasedBalancePolicies.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +++ b/guava/src/com/google/common/collect/BstRangeOps.java, +      total -= totalBeyondRangeToSide(aggregate, range, LEFT, root);, +      total -= totalBeyondRangeToSide(aggregate, range, RIGHT, root);, +  // Returns total value strictly to the specified side of the specified range., +  private static <K, N extends BstNode<K, N>> int totalBeyondRangeToSide(, +      BstAggregate<? super N> aggregate, GeneralRange<K> range, BstSide side, @Nullable N root) {, +      if (beyond(range, root.getKey(), side)) {, +        accum += aggregate.treeValue(root.childOrNull(side));, +        root = root.childOrNull(side.other());, +        root = root.childOrNull(side);, +    N higher = range.hasUpperBound(), +        ? subTreeBeyondRangeToSide(range, balancePolicy, nodeFactory, RIGHT, root), +        : null;, +    N lower = range.hasLowerBound(), +        ? subTreeBeyondRangeToSide(range, balancePolicy, nodeFactory, LEFT, root), +        : null;, +   * Returns a balanced tree containing all nodes in the specified tree that are strictly to the, +   * specified side of the specified range., +  private static <K, N extends BstNode<K, N>> N subTreeBeyondRangeToSide(GeneralRange<K> range,, +      BstBalancePolicy<N> balancePolicy, BstNodeFactory<N> nodeFactory, BstSide side,, +      @Nullable N root) {]