[+++ b/guava-tests/test/com/google/common/collect/SetsTest.java, +import com.google.common.collect.testing.NavigableSetTestSuiteBuilder;, +import com.google.common.collect.testing.SafeTreeSet;, +import junit.framework.Test;, +import junit.framework.TestCase;, +import junit.framework.TestSuite;, +, +    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +            SafeTreeSet<String> set = new SafeTreeSet<String>(Arrays.asList(elements));, +            return Sets.unmodifiableNavigableSet(set);, +          }, +, +          @Override, +          public List<String> order(List<String> insertionOrder) {, +            return Ordering.natural().sortedCopy(insertionOrder);, +          }, +        }), +        .named("Sets.unmodifiableNavigableSet[TreeSet]"), +        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER), +        .createTestSuite());, +, +    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +            SafeTreeSet<String> set = new SafeTreeSet<String>(Arrays.asList(elements));, +            return SerializableTester.reserialize(Sets.unmodifiableNavigableSet(set));, +          }, +, +          @Override, +          public List<String> order(List<String> insertionOrder) {, +            return Ordering.natural().sortedCopy(insertionOrder);, +          }, +        }), +        .named("Sets.unmodifiableNavigableSet[TreeSet], reserialized"), +        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER), +        .createTestSuite());, +, +++ b/guava-tests/test/com/google/common/collect/SetsTest.java, +import com.google.common.collect.testing.NavigableSetTestSuiteBuilder;, +import com.google.common.collect.testing.SafeTreeSet;, +import junit.framework.Test;, +import junit.framework.TestCase;, +import junit.framework.TestSuite;, +, +    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +            SafeTreeSet<String> set = new SafeTreeSet<String>(Arrays.asList(elements));, +            return Sets.unmodifiableNavigableSet(set);, +          }, +, +          @Override, +          public List<String> order(List<String> insertionOrder) {, +            return Ordering.natural().sortedCopy(insertionOrder);, +          }, +        }), +        .named("Sets.unmodifiableNavigableSet[TreeSet]"), +        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER), +        .createTestSuite());, +, +    suite.addTest(NavigableSetTestSuiteBuilder.using(new TestStringSetGenerator() {, +          @Override protected Set<String> create(String[] elements) {, +            SafeTreeSet<String> set = new SafeTreeSet<String>(Arrays.asList(elements));, +            return SerializableTester.reserialize(Sets.unmodifiableNavigableSet(set));, +          }, +, +          @Override, +          public List<String> order(List<String> insertionOrder) {, +            return Ordering.natural().sortedCopy(insertionOrder);, +          }, +        }), +        .named("Sets.unmodifiableNavigableSet[TreeSet], reserialized"), +        .withFeatures(CollectionSize.ANY, CollectionFeature.KNOWN_ORDER), +        .createTestSuite());, +, +++ b/guava/src/com/google/common/collect/Sets.java, +import java.util.NavigableSet;, +   * Returns an unmodifiable view of the specified navigable set. This method, +   * allows modules to provide users with "read-only" access to internal, +   * navigable sets. Query operations on the returned set "read through" to the, +   * specified set, and attempts to modify the returned set, whether direct or, +   * via its collection views, result in an, +   * {@code UnsupportedOperationException}., +   *, +   * <p>The returned navigable set will be serializable if the specified, +   * navigable set is serializable., +   *, +   * @param set the navigable set for which an unmodifiable view is to be, +   *        returned, +   * @return an unmodifiable view of the specified navigable set, +   * @since 12.0, +   */, +  @GwtIncompatible("NavigableSet"), +  public static <E> NavigableSet<E> unmodifiableNavigableSet(, +      NavigableSet<E> set) {, +    if (set instanceof ImmutableSortedSet, +        || set instanceof UnmodifiableNavigableSet) {, +      return set;, +    }, +    return new UnmodifiableNavigableSet<E>(set);, +  }]