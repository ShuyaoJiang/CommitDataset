[+++ b/guava/src/com/google/common/hash/AbstractByteHasher.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +++ b/guava/src/com/google/common/hash/AbstractByteHasher.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +++ b/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * has consumed the entire input and they are ready to output a {@code HashCode}. The order of the, +   * hashers are the same order as the functions given to the constructor., +++ b/guava/src/com/google/common/hash/AbstractByteHasher.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +++ b/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * has consumed the entire input and they are ready to output a {@code HashCode}. The order of the, +   * hashers are the same order as the functions given to the constructor., +++ b/guava/src/com/google/common/hash/AbstractNonStreamingHashFunction.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * Skeleton implementation of {@link HashFunction}, appropriate for non-streaming algorithms. All, + * the hash computation done using {@linkplain #newHasher()} are delegated to the, + * {@linkplain #hashBytes(byte[], int, int)} method., +++ b/guava/src/com/google/common/hash/AbstractByteHasher.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +++ b/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * has consumed the entire input and they are ready to output a {@code HashCode}. The order of the, +   * hashers are the same order as the functions given to the constructor., +++ b/guava/src/com/google/common/hash/AbstractNonStreamingHashFunction.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * Skeleton implementation of {@link HashFunction}, appropriate for non-streaming algorithms. All, + * the hash computation done using {@linkplain #newHasher()} are delegated to the, + * {@linkplain #hashBytes(byte[], int, int)} method., +++ b/guava/src/com/google/common/hash/AbstractStreamingHashFunction.java, + * Skeleton implementation of {@link HashFunction}. Provides default implementations which invokes, + * the appropriate method on {@link #newHasher()}, then return the result of {@link Hasher#hash}., +   * A convenience base class for implementors of {@code Hasher}; handles accumulating data until an, +   * entire "chunk" (of implementation-dependent length) is ready to be hashed., +     * This is invoked for the last bytes of the input, which are not enough to fill a whole chunk., +     * The passed {@code ByteBuffer} is guaranteed to be non-empty., +     * <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}., +     * While intuitively, using CharsetEncoder to encode the CharSequence directly to the buffer (or, +     * even to an intermediate buffer) should be considerably more efficient than potentially, +++ b/guava/src/com/google/common/hash/AbstractByteHasher.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +++ b/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * has consumed the entire input and they are ready to output a {@code HashCode}. The order of the]