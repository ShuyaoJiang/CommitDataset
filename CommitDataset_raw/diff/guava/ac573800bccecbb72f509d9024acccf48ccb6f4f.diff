[+++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +    assertEquals("[]", COMMA_SPLITTER.split("").toString());, +    assertEquals("[a, b, c]", COMMA_SPLITTER.split("a,b,c").toString());, +  public void testCharacterSplitWithMultitpleLetters() {, +    Iterable<String> letters = Splitter.on(",").split(simple);, +    Iterable<String> letters = Splitter.on(".").split(simple);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(trailing);, +    Iterable<String> letters = Splitter.on(",").split(leading);, +    Iterable<String> testStringingMotto = Splitter.on("-").split(, +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> letters = Splitter.on(".").trimResults(), +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> notMuch = Splitter.on(".").split("");, +    assertThat(Splitter.on(".").omitEmptyStrings().split("")).isEmpty();, +    Iterable<String> blankblank = Splitter.on(".").split(".");, +    Iterable<String> empty = Splitter.on(".").omitEmptyStrings().split("...");, +    Iterable<String> family = Splitter.on(","), +    assertIteratorIsUnmodifiable(Splitter.on(",").split("a,b").iterator());, +    assertSplitterIterableIsLazy(Splitter.on(","));, +    tester.testAllPublicInstanceMethods(COMMA_SPLITTER);, +    tester.testAllPublicInstanceMethods(COMMA_SPLITTER.trimResults());, +    Map<String, String> m = COMMA_SPLITTER, +    m = COMMA_SPLITTER, +      COMMA_SPLITTER.withKeyValueSeparator(":").split("a:1,b:2,a:3");, +++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +    assertEquals("[]", COMMA_SPLITTER.split("").toString());, +    assertEquals("[a, b, c]", COMMA_SPLITTER.split("a,b,c").toString());, +  public void testCharacterSplitWithMultitpleLetters() {, +    Iterable<String> letters = Splitter.on(",").split(simple);, +    Iterable<String> letters = Splitter.on(".").split(simple);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(trailing);, +    Iterable<String> letters = Splitter.on(",").split(leading);, +    Iterable<String> testStringingMotto = Splitter.on("-").split(, +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> letters = Splitter.on(".").trimResults(), +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> notMuch = Splitter.on(".").split("");, +    assertThat(Splitter.on(".").omitEmptyStrings().split("")).isEmpty();, +    Iterable<String> blankblank = Splitter.on(".").split(".");, +    Iterable<String> empty = Splitter.on(".").omitEmptyStrings().split("...");, +    Iterable<String> family = Splitter.on(","), +    assertIteratorIsUnmodifiable(Splitter.on(",").split("a,b").iterator());, +    assertSplitterIterableIsLazy(Splitter.on(","));, +    tester.testAllPublicInstanceMethods(COMMA_SPLITTER);, +    tester.testAllPublicInstanceMethods(COMMA_SPLITTER.trimResults());, +    Map<String, String> m = COMMA_SPLITTER, +    m = COMMA_SPLITTER, +      COMMA_SPLITTER.withKeyValueSeparator(":").split("a:1,b:2,a:3");, +++ b/guava-gwt/test/com/google/common/base/SplitterTest_gwt.java, +public void testCharacterSplitWithMultitpleLetters() throws Exception {, +  testCase.testCharacterSplitWithMultitpleLetters();, +++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java, +    assertEquals("[]", COMMA_SPLITTER.split("").toString());, +    assertEquals("[a, b, c]", COMMA_SPLITTER.split("a,b,c").toString());, +  public void testCharacterSplitWithMultitpleLetters() {, +    Iterable<String> letters = Splitter.on(",").split(simple);, +    Iterable<String> letters = Splitter.on(".").split(simple);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(trailing);, +    Iterable<String> letters = Splitter.on(",").split(leading);, +    Iterable<String> testStringingMotto = Splitter.on("-").split(, +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> letters = Splitter.on(".").trimResults(), +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> notMuch = Splitter.on(".").split("");, +    assertThat(Splitter.on(".").omitEmptyStrings().split("")).isEmpty();, +    Iterable<String> blankblank = Splitter.on(".").split(".");, +    Iterable<String> empty = Splitter.on(".").omitEmptyStrings().split("...");, +    Iterable<String> family = Splitter.on(","), +    assertIteratorIsUnmodifiable(Splitter.on(",").split("a,b").iterator());, +    assertSplitterIterableIsLazy(Splitter.on(","));, +    tester.testAllPublicInstanceMethods(COMMA_SPLITTER);, +    tester.testAllPublicInstanceMethods(COMMA_SPLITTER.trimResults());, +    Map<String, String> m = COMMA_SPLITTER, +    m = COMMA_SPLITTER, +      COMMA_SPLITTER.withKeyValueSeparator(":").split("a:1,b:2,a:3");, +++ b/guava-gwt/test/com/google/common/base/SplitterTest_gwt.java, +public void testCharacterSplitWithMultitpleLetters() throws Exception {, +  testCase.testCharacterSplitWithMultitpleLetters();, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +    assertEquals("[]", COMMA_SPLITTER.split("").toString());, +    assertEquals("[a, b, c]", COMMA_SPLITTER.split("a,b,c").toString());, +  public void testCharacterSplitWithMultitpleLetters() {, +    Iterable<String> letters = Splitter.on(",").split(simple);, +    Iterable<String> letters = Splitter.on(".").split(simple);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(doubled);, +    Iterable<String> letters = Splitter.on(",").split(trailing);, +    Iterable<String> letters = Splitter.on(",").split(leading);, +    Iterable<String> testStringingMotto = Splitter.on("-").split(, +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> letters = Splitter.on(".").trimResults(), +    Iterable<String> letters = Splitter.on("."), +    Iterable<String> notMuch = Splitter.on(".").split("");, +    assertThat(Splitter.on(".").omitEmptyStrings().split("")).isEmpty();]