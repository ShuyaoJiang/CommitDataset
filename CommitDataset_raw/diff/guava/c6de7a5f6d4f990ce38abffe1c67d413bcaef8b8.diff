[+++ b/guava-tests/test/com/google/common/collect/QueuesTest.java, +/*, + * Copyright (C) 2011 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.collect;, +, +import com.google.common.annotations.Beta;, +import com.google.common.util.concurrent.Uninterruptibles;, +, +import junit.framework.TestCase;, +, +import java.util.Collection;, +import java.util.List;, +import java.util.concurrent.ArrayBlockingQueue;, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.LinkedBlockingDeque;, +import java.util.concurrent.LinkedBlockingQueue;, +import java.util.concurrent.PriorityBlockingQueue;, +import java.util.concurrent.SynchronousQueue;, +import java.util.concurrent.TimeUnit;, +, +/**, + * Tests for {@link Queues}., + *, + * @author Dimitris Andreou, + * @since 11.0, + */, +@Beta, +, +public class QueuesTest extends TestCase {, +  /*, +   * All the following tests relate to BlockingQueue methods in Queues., +   */, +, +  public static List<BlockingQueue<Object>> blockingQueues() {, +    return ImmutableList.<BlockingQueue<Object>>of(, +        new LinkedBlockingQueue<Object>(),, +        new LinkedBlockingQueue<Object>(10),, +        new SynchronousQueue<Object>(),, +        new ArrayBlockingQueue<Object>(10),, +        new LinkedBlockingDeque<Object>(),, +        new LinkedBlockingDeque<Object>(10),, +        new PriorityBlockingQueue<Object>(10, Ordering.arbitrary()));, +  }, +, +  private ExecutorService threadPool;, +, +  @Override, +  public void setUp() {, +    threadPool = Executors.newCachedThreadPool();, +  }, +, +  @Override, +  public void tearDown() throws InterruptedException {, +    // notice that if a Producer is interrupted (a bug), the Producer will go into an infinite, +    // loop, which will be noticed here, +    threadPool.shutdown();, +    assertTrue("Some worker didn't finish in time",, +        threadPool.awaitTermination(1, TimeUnit.SECONDS));, +  }, +, +  private static <T> int drain(BlockingQueue<T> q, Collection<? super T> buffer, int maxElements,, +      long timeout, TimeUnit unit, boolean interruptibly) throws InterruptedException {, +    return interruptibly, +        ? Queues.drain(q, buffer, maxElements, timeout, unit), +        : Queues.drainUninterruptibly(q, buffer, maxElements, timeout, unit);, +  }, +, +  public void testMultipleProducers() throws Exception {, +    for (BlockingQueue<Object> q : blockingQueues()) {, +      testMultipleProducers(q);, +    }, +  }, +, +  private void testMultipleProducers(BlockingQueue<Object> q), +      throws InterruptedException {, +    for (boolean interruptibly : new boolean[] { true, false }) {, +      threadPool.submit(new Producer(q, 20));, +      threadPool.submit(new Producer(q, 20));, +      threadPool.submit(new Producer(q, 20));, +      threadPool.submit(new Producer(q, 20));, +      threadPool.submit(new Producer(q, 20));, +, +      List<Object> buf = Lists.newArrayList();]