[+++ b/guava-testlib/src/com/google/common/collect/testing/SpliteratorTester.java, +        long size = spliterator.getExactSizeIfKnown();, +        long[] counter = {0};, +        spliterator.forEachRemaining(e -> {, +          consumer.accept(e);, +          counter[0]++;, +        });, +        if (size >= 0) {, +          assertEquals(size, counter[0]);, +        }, +++ b/guava-testlib/src/com/google/common/collect/testing/SpliteratorTester.java, +        long size = spliterator.getExactSizeIfKnown();, +        long[] counter = {0};, +        spliterator.forEachRemaining(e -> {, +          consumer.accept(e);, +          counter[0]++;, +        });, +        if (size >= 0) {, +          assertEquals(size, counter[0]);, +        }, +++ b/guava-tests/test/com/google/common/collect/StreamsTest.java, +    SpliteratorTester.of(, +            () ->, +                Streams.concat(Stream.of("a"), Stream.of("b"), Stream.empty(), Stream.of("c", "d")), +                    .spliterator()), +        .expect("a", "b", "c", "d");, +  }, +, +  public void testConcat_refStream_parallel() {, +    Truth.assertThat(, +            Streams.concat(Stream.of("a"), Stream.of("b"), Stream.empty(), Stream.of("c", "d")), +                .parallel(), +                .toArray()), +        .asList(), +        .containsExactly("a", "b", "c", "d"), +        .inOrder();, +++ b/guava-testlib/src/com/google/common/collect/testing/SpliteratorTester.java, +        long size = spliterator.getExactSizeIfKnown();, +        long[] counter = {0};, +        spliterator.forEachRemaining(e -> {, +          consumer.accept(e);, +          counter[0]++;, +        });, +        if (size >= 0) {, +          assertEquals(size, counter[0]);, +        }, +++ b/guava-tests/test/com/google/common/collect/StreamsTest.java, +    SpliteratorTester.of(, +            () ->, +                Streams.concat(Stream.of("a"), Stream.of("b"), Stream.empty(), Stream.of("c", "d")), +                    .spliterator()), +        .expect("a", "b", "c", "d");, +  }, +, +  public void testConcat_refStream_parallel() {, +    Truth.assertThat(, +            Streams.concat(Stream.of("a"), Stream.of("b"), Stream.empty(), Stream.of("c", "d")), +                .parallel(), +                .toArray()), +        .asList(), +        .containsExactly("a", "b", "c", "d"), +        .inOrder();, +++ b/guava/src/com/google/common/collect/CollectSpliterators.java, +      int characteristics;, +            this.characteristics = splitCharacteristics;]