[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +  static <N> void validateGraph(Graph<N, ?> graph) {, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +  static <N> void validateGraph(Graph<N, ?> graph) {, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    Graph<Integer, Set<String>> asGraph = network.asGraph();, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +  static <N> void validateGraph(Graph<N, ?> graph) {, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    Graph<Integer, Set<String>> asGraph = network.asGraph();, +++ b/guava-tests/test/com/google/common/graph/GraphPropertiesTest.java, + * Tests for {@link Graphs#hasCycle(Graph)} and {@link Graphs#hasCycle(Network)}., +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +  static <N> void validateGraph(Graph<N, ?> graph) {, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +    Graph<Integer, Set<String>> asGraph = network.asGraph();, +++ b/guava-tests/test/com/google/common/graph/GraphPropertiesTest.java, + * Tests for {@link Graphs#hasCycle(Graph)} and {@link Graphs#hasCycle(Network)}., +++ b/guava-tests/test/com/google/common/graph/GraphTest.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import static com.google.common.truth.Truth.assertThat;, +import static org.junit.Assert.fail;, +, +import com.google.common.testing.EqualsTester;, +import org.junit.After;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +/**, + * Tests for {@link ConfigurableMutableGraph} and related functionality., + */, +// TODO(user): Expand coverage and move to proper test suite., +@RunWith(JUnit4.class), +public final class GraphTest {, +  MutableGraph<Integer, String> graph;, +, +  @After, +  public void validateGraphState() {, +    new EqualsTester().addEqualityGroup(, +        graph,, +        Graphs.copyOf(graph),, +        ImmutableGraph.copyOf(graph)).testEquals();, +, +    for (Endpoints<Integer> edge : graph.edges()) {, +      assertThat(graph.edgeValue(edge.nodeA(), edge.nodeB())).isNotNull();, +    }, +, +    AbstractGraphTest.validateGraph(graph);, +  }, +, +  @Test, +  public void directedGraph() {, +    graph = GraphBuilder.directed().allowsSelfLoops(true).build();, +    graph.putEdgeValue(1, 2, "valueA");, +    graph.putEdgeValue(2, 1, "valueB");, +    graph.putEdgeValue(2, 3, "valueC");, +    graph.putEdgeValue(4, 4, "valueD");, +, +    assertThat(graph.edgeValue(1, 2)).isEqualTo("valueA");, +    assertThat(graph.edgeValue(2, 1)).isEqualTo("valueB");, +    assertThat(graph.edgeValue(2, 3)).isEqualTo("valueC");, +    assertThat(graph.edgeValue(4, 4)).isEqualTo("valueD");, +, +    String toString = graph.toString();, +    assertThat(toString).contains("valueA");, +    assertThat(toString).contains("valueB");, +    assertThat(toString).contains("valueC");, +    assertThat(toString).contains("valueD");, +  }, +, +  @Test, +  public void undirectedGraph() {, +    graph = GraphBuilder.undirected().allowsSelfLoops(true).build();, +    graph.putEdgeValue(1, 2, "valueA");, +    graph.putEdgeValue(2, 1, "valueB"); // overwrites valueA in undirected case, +    graph.putEdgeValue(2, 3, "valueC");, +    graph.putEdgeValue(4, 4, "valueD");, +, +    assertThat(graph.edgeValue(1, 2)).isEqualTo("valueB");, +    assertThat(graph.edgeValue(2, 1)).isEqualTo("valueB");, +    assertThat(graph.edgeValue(2, 3)).isEqualTo("valueC");, +    assertThat(graph.edgeValue(4, 4)).isEqualTo("valueD");]