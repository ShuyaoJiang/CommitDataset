[+++ b/guava-tests/pom.xml, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <version>1.8.5</version>, +++ b/guava-tests/pom.xml, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <version>1.8.5</version>, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +, +import java.io.OutputStream;, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    verify(bytePrimitiveSink).putBytes(new byte[] { 4, 3, 2, 1 });, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    verify(bytePrimitiveSink).putString("test");, +  public void testForInts() {, +    Integer value = 1234;, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    Funnels.integerFunnel().funnel(value, bytePrimitiveSink);, +    verify(bytePrimitiveSink).putInt(1234);, +  }, +, +  public void testForInts_null() {, +    assertNullsThrowException(Funnels.integerFunnel());, +  }, +, +  public void testForLongs() {, +    Long value = 1234L;, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    Funnels.longFunnel().funnel(value, bytePrimitiveSink);, +    verify(bytePrimitiveSink).putLong(1234);, +  }, +, +  public void testForLongs_null() {, +    assertNullsThrowException(Funnels.longFunnel());, +  }, +, +  , + public void testAsOutputStream() throws Exception {, +   PrimitiveSink sink = mock(PrimitiveSink.class);, +   OutputStream out = Funnels.asOutputStream(sink);, +   byte[] bytes = { 1, 2, 3, 4 };, +   out.write(255);, +   out.write(bytes);, +   out.write(bytes, 1, 2);, +   verify(sink).putByte((byte) 255);, +   verify(sink).putBytes(bytes);, +   verify(sink).putBytes(bytes, 1, 2);, + }, +++ b/guava-tests/pom.xml, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <version>1.8.5</version>, +++ b/guava-tests/test/com/google/common/hash/FunnelsTest.java, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +, +import java.io.OutputStream;, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    verify(bytePrimitiveSink).putBytes(new byte[] { 4, 3, 2, 1 });, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    verify(bytePrimitiveSink).putString("test");, +  public void testForInts() {, +    Integer value = 1234;, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    Funnels.integerFunnel().funnel(value, bytePrimitiveSink);, +    verify(bytePrimitiveSink).putInt(1234);, +  }, +, +  public void testForInts_null() {, +    assertNullsThrowException(Funnels.integerFunnel());, +  }, +, +  public void testForLongs() {, +    Long value = 1234L;, +    PrimitiveSink bytePrimitiveSink = mock(PrimitiveSink.class);, +    Funnels.longFunnel().funnel(value, bytePrimitiveSink);, +    verify(bytePrimitiveSink).putLong(1234);, +  }, +, +  public void testForLongs_null() {, +    assertNullsThrowException(Funnels.longFunnel());, +  }, +, +  , + public void testAsOutputStream() throws Exception {, +   PrimitiveSink sink = mock(PrimitiveSink.class);, +   OutputStream out = Funnels.asOutputStream(sink);, +   byte[] bytes = { 1, 2, 3, 4 };]