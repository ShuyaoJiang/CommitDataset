[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +++ b/guava-tests/test/com/google/common/graph/ImmutableGraphTest.java, +    ImmutableGraph<String> immutableGraph = ImmutableGraph.copyOf(mutableGraph);, +    assertThat(immutableGraph).isNotInstanceOf(MutableValueGraph.class);, +    MutableValueGraph<String, Integer> mutableValueGraph = ValueGraphBuilder.directed().build();, +    mutableValueGraph.addNode("A");, +    ImmutableValueGraph<String, Integer> immutableValueGraph =, +        ImmutableValueGraph.copyOf(mutableValueGraph);, +    assertThat(immutableValueGraph.asGraph()).isInstanceOf(ImmutableGraph.class);, +    assertThat(immutableValueGraph).isNotInstanceOf(MutableValueGraph.class);, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isTrue();, +    mutableValueGraph.addNode("B");, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isFalse();, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +++ b/guava-tests/test/com/google/common/graph/ImmutableGraphTest.java, +    ImmutableGraph<String> immutableGraph = ImmutableGraph.copyOf(mutableGraph);, +    assertThat(immutableGraph).isNotInstanceOf(MutableValueGraph.class);, +    MutableValueGraph<String, Integer> mutableValueGraph = ValueGraphBuilder.directed().build();, +    mutableValueGraph.addNode("A");, +    ImmutableValueGraph<String, Integer> immutableValueGraph =, +        ImmutableValueGraph.copyOf(mutableValueGraph);, +    assertThat(immutableValueGraph.asGraph()).isInstanceOf(ImmutableGraph.class);, +    assertThat(immutableValueGraph).isNotInstanceOf(MutableValueGraph.class);, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isTrue();, +    mutableValueGraph.addNode("B");, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isFalse();, +++ b/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java, +    ImmutableNetwork<String, Integer> immutableNetwork = ImmutableNetwork.copyOf(mutableNetwork);, +    assertThat(immutableNetwork).isNotInstanceOf(MutableNetwork.class);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +++ b/guava-tests/test/com/google/common/graph/ImmutableGraphTest.java, +    ImmutableGraph<String> immutableGraph = ImmutableGraph.copyOf(mutableGraph);, +    assertThat(immutableGraph).isNotInstanceOf(MutableValueGraph.class);, +    MutableValueGraph<String, Integer> mutableValueGraph = ValueGraphBuilder.directed().build();, +    mutableValueGraph.addNode("A");, +    ImmutableValueGraph<String, Integer> immutableValueGraph =, +        ImmutableValueGraph.copyOf(mutableValueGraph);, +    assertThat(immutableValueGraph.asGraph()).isInstanceOf(ImmutableGraph.class);, +    assertThat(immutableValueGraph).isNotInstanceOf(MutableValueGraph.class);, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isTrue();, +    mutableValueGraph.addNode("B");, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isFalse();, +++ b/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java, +    ImmutableNetwork<String, Integer> immutableNetwork = ImmutableNetwork.copyOf(mutableNetwork);, +    assertThat(immutableNetwork).isNotInstanceOf(MutableNetwork.class);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +    AbstractGraphTest.validateGraph(graph.asGraph());, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +++ b/guava-tests/test/com/google/common/graph/ImmutableGraphTest.java, +    ImmutableGraph<String> immutableGraph = ImmutableGraph.copyOf(mutableGraph);, +    assertThat(immutableGraph).isNotInstanceOf(MutableValueGraph.class);, +    MutableValueGraph<String, Integer> mutableValueGraph = ValueGraphBuilder.directed().build();, +    mutableValueGraph.addNode("A");, +    ImmutableValueGraph<String, Integer> immutableValueGraph =, +        ImmutableValueGraph.copyOf(mutableValueGraph);, +    assertThat(immutableValueGraph.asGraph()).isInstanceOf(ImmutableGraph.class);, +    assertThat(immutableValueGraph).isNotInstanceOf(MutableValueGraph.class);, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isTrue();, +    mutableValueGraph.addNode("B");, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isFalse();, +++ b/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java, +    ImmutableNetwork<String, Integer> immutableNetwork = ImmutableNetwork.copyOf(mutableNetwork);, +    assertThat(immutableNetwork).isNotInstanceOf(MutableNetwork.class);, +++ b/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +    AbstractGraphTest.validateGraph(graph.asGraph());, +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +   * Returns the number of edges in this graph; used to calculate the size of {@link #edges()}. This, +   * implementation requires O(|N|) time. Classes extending this one may manually keep track of the, +   * number of edges as the graph is updated, and override this method for better performance., +   * An implementation of {@link Graph#edges()} defined in terms of {@link #nodes()} and {@link, +   * #successors(Object)}., +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +    AbstractGraphTest.validateGraph(transpose.asGraph());, +++ b/guava-tests/test/com/google/common/graph/ImmutableGraphTest.java, +    ImmutableGraph<String> immutableGraph = ImmutableGraph.copyOf(mutableGraph);, +    assertThat(immutableGraph).isNotInstanceOf(MutableValueGraph.class);, +    MutableValueGraph<String, Integer> mutableValueGraph = ValueGraphBuilder.directed().build();, +    mutableValueGraph.addNode("A");, +    ImmutableValueGraph<String, Integer> immutableValueGraph =, +        ImmutableValueGraph.copyOf(mutableValueGraph);, +    assertThat(immutableValueGraph.asGraph()).isInstanceOf(ImmutableGraph.class);, +    assertThat(immutableValueGraph).isNotInstanceOf(MutableValueGraph.class);, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isTrue();, +    mutableValueGraph.addNode("B");, +    assertThat(Graphs.equivalent(immutableValueGraph, mutableValueGraph)).isFalse();, +++ b/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java, +    ImmutableNetwork<String, Integer> immutableNetwork = ImmutableNetwork.copyOf(mutableNetwork);, +    assertThat(immutableNetwork).isNotInstanceOf(MutableNetwork.class);]