[+++ b/android/guava-tests/test/com/google/common/graph/TraverserTest.java, +/*, +, +* Copyright (C) 2017 The Guava Authors, +*, +* Licensed under the Apache License, Version 2.0 (the "License");, +* you may not use this file except in compliance with the License., +* You may obtain a copy of the License at, +*, +* http://www.apache.org/licenses/LICENSE-2.0, +*, +* Unless required by applicable law or agreed to in writing, software, +* distributed under the License is distributed on an "AS IS" BASIS,, +* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., +* See the License for the specific language governing permissions and, +* limitations under the License., +*/, +, +package com.google.common.graph;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.truth.Truth.assertThat;, +, +import com.google.common.collect.HashMultiset;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableMultimap;, +import com.google.common.collect.Iterables;, +import com.google.common.collect.Multiset;, +import com.google.common.collect.Ordering;, +import com.google.common.primitives.Chars;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +@RunWith(JUnit4.class), +public class TraverserTest {, +, +  /**, +   * The undirected graph in the {@link Traverser#breadthFirst(Object)} javadoc:, +   *, +   * <pre>{@code, +   * b ---- a ---- d, +   * |      |, +   * |      |, +   * e ---- c ---- f, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> JAVADOC_GRAPH =, +      createUndirectedGraph("ba", "ad", "be", "ac", "ec", "cf");, +, +  /**, +   * A diamond shaped directed graph (arrows going down):, +   *, +   * <pre>{@code, +   *   a, +   *  / \, +   * b   c, +   *  \ /, +   *   d, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> DIAMOND_GRAPH =, +      createDirectedGraph("ab", "ac", "bd", "cd");, +, +  /**, +   * Same as {@link #DIAMOND_GRAPH}, but with an extra c->a edge and some self edges:, +   *, +   * <pre>{@code, +   *   a<>, +   *  / \\, +   * b   c, +   *  \ /, +   *   d<>, +   * }</pre>, +   *, +   * {@code <>} indicates a self-loop, +   */, +  private static final SuccessorsFunction<Character> MULTI_GRAPH =, +      createDirectedGraph("aa", "dd", "ab", "ac", "ca", "cd", "bd");, +, +  /** A directed graph with a single cycle: a -> b -> c -> d -> a. */, +  private static final SuccessorsFunction<Character> CYCLE_GRAPH =, +      createDirectedGraph("ab", "bc", "cd", "da");, +, +  /**, +   * Same as {@link #CYCLE_GRAPH}, but with an extra a->c edge., +   *, +   * <pre>{@code, +   * |--------------|, +   * v              |, +   * a -> b -> c -> d, +   * |         ^, +   * |---------|, +   * }</pre>, +   */, +  private static final SuccessorsFunction<Character> TWO_CYCLES_GRAPH =, +      createDirectedGraph("ab", "ac", "bc", "cd", "da");, +, +  @Test, +  public void forGraph_breadthFirst_javadocExample_iterableCanBeIteratedMultipleTimes() {]