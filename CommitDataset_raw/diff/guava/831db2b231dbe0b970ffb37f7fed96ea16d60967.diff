[+++ b/android/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java, +  public void testCopyOf_hashMultiset() {, +    Multiset<String> iterable = HashMultiset.create(asList("a", "b", "a"));, +    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);, +    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);, +  }, +, +  public void testCopyOf_treeMultiset() {, +    Multiset<String> iterable = TreeMultiset.create(asList("a", "b", "a"));, +    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);, +    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);, +  }, +, +  public void testBuilderAddAllHashMultiset() {, +  public void testBuilderAddAllImmutableMultiset() {, +    Multiset<String> a = ImmutableMultiset.of("a", "b", "b");, +    Multiset<String> b = ImmutableMultiset.of("c", "b");, +    ImmutableMultiset<String> multiset =, +        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();, +    assertEquals(HashMultiset.create(asList("a", "b", "b", "b", "c")), multiset);, +  }, +, +  public void testBuilderAddAllTreeMultiset() {, +    Multiset<String> a = TreeMultiset.create(asList("a", "b", "b"));, +    Multiset<String> b = TreeMultiset.create(asList("c", "b"));, +    ImmutableMultiset<String> multiset =, +        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();, +    assertEquals(HashMultiset.create(asList("a", "b", "b", "b", "c")), multiset);, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java, +  public void testCopyOf_hashMultiset() {, +    Multiset<String> iterable = HashMultiset.create(asList("a", "b", "a"));, +    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);, +    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);, +  }, +, +  public void testCopyOf_treeMultiset() {, +    Multiset<String> iterable = TreeMultiset.create(asList("a", "b", "a"));, +    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);, +    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);, +  }, +, +  public void testBuilderAddAllHashMultiset() {, +  public void testBuilderAddAllImmutableMultiset() {, +    Multiset<String> a = ImmutableMultiset.of("a", "b", "b");, +    Multiset<String> b = ImmutableMultiset.of("c", "b");, +    ImmutableMultiset<String> multiset =, +        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();, +    assertEquals(HashMultiset.create(asList("a", "b", "b", "b", "c")), multiset);, +  }, +, +  public void testBuilderAddAllTreeMultiset() {, +    Multiset<String> a = TreeMultiset.create(asList("a", "b", "b"));, +    Multiset<String> b = TreeMultiset.create(asList("c", "b"));, +    ImmutableMultiset<String> multiset =, +        new ImmutableMultiset.Builder<String>().addAll(a).addAll(b).build();, +    assertEquals(HashMultiset.create(asList("a", "b", "b", "b", "c")), multiset);, +  }, +, +++ b/android/guava/src/com/google/common/collect/ImmutableMultiset.java, +import java.util.Set;, +        ObjectCountHashMap<? extends E> backingMap = tryGetMap(multiset);, +        if (backingMap != null) {, +          contents.ensureCapacity(Math.max(contents.size(), backingMap.size()));, +          for (int i = backingMap.firstIndex(); i >= 0; i = backingMap.nextIndex(i)) {, +            addCopies(backingMap.getKey(i), backingMap.getValue(i));, +          }, +        } else {, +          Set<? extends Entry<? extends E>> entries = multiset.entrySet();, +          contents.ensureCapacity(Math.max(contents.size(), entries.size())); // might overlap, +        }, +     * If the specified collection is backed by an ObjectCountHashMap, it will be much more, +     * efficient to iterate over it by index rather than an entry iterator, which will need to, +     * allocate an object for each entry, so we check for that., +     */, +    @NullableDecl, +    static <T> ObjectCountHashMap<T> tryGetMap(Iterable<T> multiset) {, +      if (multiset instanceof RegularImmutableMultiset) {, +        return ((RegularImmutableMultiset<T>) multiset).contents;, +      } else if (multiset instanceof AbstractMapBasedMultiset) {, +        return ((AbstractMapBasedMultiset<T>) multiset).backingMap;, +      } else {, +        return null;, +      }, +    }, +, +    /**, +++ b/android/guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java, +  public void testCopyOf_hashMultiset() {, +    Multiset<String> iterable = HashMultiset.create(asList("a", "b", "a"));, +    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);, +    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);, +  }, +, +  public void testCopyOf_treeMultiset() {, +    Multiset<String> iterable = TreeMultiset.create(asList("a", "b", "a"));, +    Multiset<String> multiset = ImmutableMultiset.copyOf(iterable);, +    assertEquals(HashMultiset.create(asList("a", "b", "a")), multiset);, +  }]