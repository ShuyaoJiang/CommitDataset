[+++ /dev/null, +++ /dev/null, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/HashMultisetTest.java, +import junit.framework.TestCase;, +, +public class HashMultisetTest extends TestCase {, +++ /dev/null, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/HashMultisetTest.java, +import junit.framework.TestCase;, +, +public class HashMultisetTest extends TestCase {, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultisetTest.java, +import junit.framework.TestCase;, +, +public class LinkedHashMultisetTest extends TestCase {, +++ /dev/null, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/HashMultisetTest.java, +import junit.framework.TestCase;, +, +public class HashMultisetTest extends TestCase {, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/LinkedHashMultisetTest.java, +import junit.framework.TestCase;, +, +public class LinkedHashMultisetTest extends TestCase {, +++ b/guava-gwt/test-super/com/google/common/collect/super/com/google/common/collect/SimpleAbstractMultisetTest.java, +/*, + * Copyright (C) 2007 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.collect;, +, +import static com.google.common.base.Preconditions.checkArgument;, +, +import com.google.common.annotations.GwtCompatible;, +, +import junit.framework.TestCase;, +, +import java.io.Serializable;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import javax.annotation.Nullable;, +, +/**, + * Unit test for {@link AbstractMultiset}., + *, + * @author Kevin Bourrillion, + * @author Louis Wasserman, + */, +@SuppressWarnings("serial") // No serialization is used in this test, +@GwtCompatible(emulated = true), +public class SimpleAbstractMultisetTest extends TestCase {, +, +  public void testFastAddAllMultiset() {, +    final AtomicInteger addCalls = new AtomicInteger();, +    Multiset<String> multiset = new NoRemoveMultiset<String>() {, +      @Override, +      public int add(String element, int occurrences) {, +        addCalls.incrementAndGet();, +        return super.add(element, occurrences);, +      }, +    };, +    ImmutableMultiset<String> adds =, +        new ImmutableMultiset.Builder<String>().addCopies("x", 10).build();, +    multiset.addAll(adds);, +    assertEquals(addCalls.get(), 1);, +  }, +, +  public void testRemoveUnsupported() {, +    Multiset<String> multiset = new NoRemoveMultiset<String>();, +    multiset.add("a");, +    try {, +      multiset.remove("a");, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +    assertTrue(multiset.contains("a"));, +  }, +, +  private static class NoRemoveMultiset<E> extends AbstractMultiset<E>, +      implements Serializable {, +    final Map<E, Integer> backingMap = Maps.newHashMap();, +, +    @Override public int add(@Nullable E element, int occurrences) {, +      checkArgument(occurrences >= 0);, +      Integer frequency = backingMap.get(element);, +      if (frequency == null) {, +        frequency = 0;, +      }, +      if (occurrences == 0) {]