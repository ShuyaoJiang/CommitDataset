[+++ b/guava/src/com/google/common/graph/EndpointPair.java, + * An immutable pair representing the two endpoints of an edge in a graph. The {@link EndpointPair}, + * of a directed edge is an ordered pair of nodes ({@link #source()} and {@link #target()}). The, + * {@link EndpointPair} of an undirected edge is an unordered pair of nodes ({@link #nodeU()} and, + * {@link #nodeV()})., + *, + * <p>The edge is a self-loop if, and only if, the two endpoints are equal., +   * Returns {@code true} if this {@link EndpointPair} is an ordered pair (i.e. represents the, +++ b/guava/src/com/google/common/graph/EndpointPair.java, + * An immutable pair representing the two endpoints of an edge in a graph. The {@link EndpointPair}, + * of a directed edge is an ordered pair of nodes ({@link #source()} and {@link #target()}). The, + * {@link EndpointPair} of an undirected edge is an unordered pair of nodes ({@link #nodeU()} and, + * {@link #nodeV()})., + *, + * <p>The edge is a self-loop if, and only if, the two endpoints are equal., +   * Returns {@code true} if this {@link EndpointPair} is an ordered pair (i.e. represents the, +++ b/guava/src/com/google/common/graph/Graph.java, + * An interface for <a, + * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,, + * whose edges are anonymous entities with no identity or information of their own., + *, + * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes., + * prefer the simplest interface that satisfies your use case. See the <a, + * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">, + * "Choosing the right graph type"</a> section of the Guava User Guide for more details., + * <h3>Capabilities</h3>, + * <p>{@code Graph} supports the following use cases (<a, + * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of, + * terms</a>):, + * <ul>, + *   <li>directed graphs, + *   <li>undirected graphs, + *   <li>graphs that do/don't allow self-loops, + *   <li>graphs whose nodes/edges are insertion-ordered, sorted, or unordered, + * </ul>, + * <p>{@code Graph} explicitly does not support parallel edges, and forbids implementations or, + * extensions with parallel edges. If you need parallel edges, use {@link Network}., + * <h3>Building a {@code Graph}</h3>, + * <p>The implementation classes that `common.graph` provides are not public, by design. To create, + * an instance of one of the built-in implementations of {@code Graph}, use the {@link GraphBuilder}, + * class:, + *   MutableGraph<Integer> graph = GraphBuilder.undirected().build();, + * <p>{@link GraphBuilder#build()} returns an instance of {@link MutableGraph}, which is a subtype, + * of {@code Graph} that provides methods for adding and removing nodes and edges. If you do not, + * need to mutate a graph (e.g. if you write a method than runs a read-only algorithm on the graph),, + * you should use the non-mutating {@link Graph} interface, or an {@link ImmutableGraph}., + *, + * <p>You can create an immutable copy of an existing {@code Graph} using {@link, + * ImmutableGraph#copyOf(Graph)}:, + *, + * <pre><code>, + *   ImmutableGraph<Integer> immutableGraph = ImmutableGraph.copyOf(graph);, + * </code></pre>, + *, + * <p>Instances of {@link ImmutableGraph} do not implement {@link MutableGraph} (obviously!) and are, + * contractually guaranteed to be unmodifiable and thread-safe., + *, + * <p>The Guava User Guide has <a, + * href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances">more, + * information on (and examples of) building graphs</a>., + *, + * <h3>Additional documentation</h3>, + *, + * <p>See the Guava User Guide for the {@code common.graph} package (<a, + * href="https://github.com/google/guava/wiki/GraphsExplained">"Graphs Explained"</a>) for, + * additional documentation, including:, + *, + * <ul>, + *   <li><a, + *       href="https://github.com/google/guava/wiki/GraphsExplained#equals-hashcode-and-graph-equivalence">, + *       {@code equals()}, {@code hashCode()}, and graph equivalence</a>, + *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#synchronization">, + *       Synchronization policy</a>, + *   <li><a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">Notes, + *       for implementors</a>, + * </ul>, + *, +   * For the default {@link Graph} implementations, returns true if {@code this == object}, +++ b/guava/src/com/google/common/graph/EndpointPair.java, + * An immutable pair representing the two endpoints of an edge in a graph. The {@link EndpointPair}, + * of a directed edge is an ordered pair of nodes ({@link #source()} and {@link #target()}). The, + * {@link EndpointPair} of an undirected edge is an unordered pair of nodes ({@link #nodeU()} and, + * {@link #nodeV()})., + *, + * <p>The edge is a self-loop if, and only if, the two endpoints are equal., +   * Returns {@code true} if this {@link EndpointPair} is an ordered pair (i.e. represents the, +++ b/guava/src/com/google/common/graph/Graph.java, + * An interface for <a, + * href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>-structured data,, + * whose edges are anonymous entities with no identity or information of their own., + *, + * <p>A graph is composed of a set of nodes and a set of edges connecting pairs of nodes., + * prefer the simplest interface that satisfies your use case. See the <a, + * href="https://github.com/google/guava/wiki/GraphsExplained#choosing-the-right-graph-type">, + * "Choosing the right graph type"</a> section of the Guava User Guide for more details., + * <h3>Capabilities</h3>, + * <p>{@code Graph} supports the following use cases (<a, + * href="https://github.com/google/guava/wiki/GraphsExplained#definitions">definitions of, + * terms</a>):, + * <ul>]