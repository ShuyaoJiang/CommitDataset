[+++ b/guava/src/com/google/common/collect/StandardRowSortedTable.java, +    return (SortedSet<R>) rowMap().keySet();, +    return (SortedMap<R, Map<C, V>>) super.rowMap();, +  }, +, +  @Override, +  SortedMap<R, Map<C, V>> createRowMap() {, +    return new RowSortedMap();, +      return (SortedSet<R>) super.keySet();, +    }, +, +    @Override, +    SortedSet<R> createKeySet() {, +      return new Maps.SortedKeySet<R, Map<C, V>>(this);, +++ b/guava/src/com/google/common/collect/StandardRowSortedTable.java, +    return (SortedSet<R>) rowMap().keySet();, +    return (SortedMap<R, Map<C, V>>) super.rowMap();, +  }, +, +  @Override, +  SortedMap<R, Map<C, V>> createRowMap() {, +    return new RowSortedMap();, +      return (SortedSet<R>) super.keySet();, +    }, +, +    @Override, +    SortedSet<R> createKeySet() {, +      return new Maps.SortedKeySet<R, Map<C, V>>(this);, +++ b/guava/src/com/google/common/collect/StandardTable.java, +import com.google.common.base.Function;, +    @Override Set<Entry<R, V>> createEntrySet() {, +    private class KeySet extends Maps.KeySet<R, V> {, +      KeySet() {, +        super(Column.this);, +    private class Values extends Maps.Values<R, V> {, +      Values() {, +        super(Column.this);, +    return rowMap().keySet();, +  private transient Map<R, Map<C, V>> rowMap;, +    Map<R, Map<C, V>> result = rowMap;, +    return (result == null) ? rowMap = createRowMap() : result;, +  }, +, +  Map<R, Map<C, V>> createRowMap() {, +    return new RowMap();, +        return Maps.asMapEntryIterator(backingMap.keySet(), new Function<R, Map<C, V>>() {, +          public Map<C, V> apply(R rowKey) {, +            return row(rowKey);, +        });, +    @Override Collection<Map<R, V>> createValues() {, +      return new ColumnMapValues();, +        return Maps.asMapEntryIterator(columnKeySet(), new Function<C, Map<R, V>>(){, +          public Map<R, V> apply(C columnKey) {, +            return column(columnKey);, +        });, +    private class ColumnMapValues extends Maps.Values<C, Map<R, V>> {, +      ColumnMapValues() {, +        super(ColumnMap.this);]