[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +    public V getIfPresent(Object key) {, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +    public V getIfPresent(Object key) {, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      public Integer getIfPresent(Object key) {, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +    public V getIfPresent(Object key) {, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      public Integer getIfPresent(Object key) {, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +   * This implementation of {@code getAllPresent} lacks any insight into the internal cache data, +   * structure, and is thus forced to return the query keys instead of the cached keys. This is only, +   * possible with an unsafe cast which requires {@code keys} to actually be of type {@code K}., +   *, +   * {@inheritDoc}, +   *, +  public ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {, +    for (Object key : keys) {, +        @SuppressWarnings("unchecked"), +        K castKey = (K) key;, +        result.put(castKey, getIfPresent(key));, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +    public V getIfPresent(Object key) {, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      public Integer getIfPresent(Object key) {, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +   * This implementation of {@code getAllPresent} lacks any insight into the internal cache data, +   * structure, and is thus forced to return the query keys instead of the cached keys. This is only, +   * possible with an unsafe cast which requires {@code keys} to actually be of type {@code K}., +   *, +   * {@inheritDoc}, +   *, +  public ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {, +    for (Object key : keys) {, +        @SuppressWarnings("unchecked"), +        K castKey = (K) key;, +        result.put(castKey, getIfPresent(key));, +++ b/guava/src/com/google/common/cache/Cache.java, +  V getIfPresent(Object key);, +  ImmutableMap<K, V> getAllPresent(Iterable<?> keys);, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +    public V getIfPresent(Object key) {, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      public Integer getIfPresent(Object key) {, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +   * This implementation of {@code getAllPresent} lacks any insight into the internal cache data, +   * structure, and is thus forced to return the query keys instead of the cached keys. This is only, +   * possible with an unsafe cast which requires {@code keys} to actually be of type {@code K}., +   *, +   * {@inheritDoc}, +   *, +  public ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {, +    for (Object key : keys) {, +        @SuppressWarnings("unchecked"), +        K castKey = (K) key;, +        result.put(castKey, getIfPresent(key));, +++ b/guava/src/com/google/common/cache/Cache.java, +  V getIfPresent(Object key);, +  ImmutableMap<K, V> getAllPresent(Iterable<?> keys);, +++ b/guava/src/com/google/common/cache/ForwardingCache.java, +  public V getIfPresent(Object key) {, +  public ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheBuilder.java, +    public V getIfPresent(Object key) {, +++ b/guava-tests/test/com/google/common/cache/AbstractCacheTest.java, +      public Integer getIfPresent(Object key) {, +++ b/guava/src/com/google/common/cache/AbstractCache.java, +   * This implementation of {@code getAllPresent} lacks any insight into the internal cache data, +   * structure, and is thus forced to return the query keys instead of the cached keys. This is only, +   * possible with an unsafe cast which requires {@code keys} to actually be of type {@code K}., +   *, +   * {@inheritDoc}, +   *, +  public ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {, +    for (Object key : keys) {, +        @SuppressWarnings("unchecked"), +        K castKey = (K) key;, +        result.put(castKey, getIfPresent(key));, +++ b/guava/src/com/google/common/cache/Cache.java, +  V getIfPresent(Object key);, +  ImmutableMap<K, V> getAllPresent(Iterable<?> keys);, +++ b/guava/src/com/google/common/cache/ForwardingCache.java, +  public V getIfPresent(Object key) {, +  public ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {, +++ b/guava/src/com/google/common/cache/LocalCache.java, +  ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {, +    for (Object key : keys) {, +        // TODO(fry): store entry key instead of query key, +        @SuppressWarnings("unchecked"), +        K castKey = (K) key;, +        result.put(castKey, value);, +  ImmutableMap<K, V> getAll(Iterable<? extends K> keys) throws ExecutionException {, +    public V getIfPresent(Object key) {, +    public ImmutableMap<K, V> getAllPresent(Iterable<?> keys) {]