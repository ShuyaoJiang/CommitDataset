[+++ b/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java, +    static final PermittedMetaException UOE_OR_ISE =, +        new PermittedMetaException(, +            Arrays.asList(UnsupportedOperationException.class, IllegalStateException.class));, +    static final PermittedMetaException UOE =, +        new PermittedMetaException(UnsupportedOperationException.class);, +    static final PermittedMetaException ISE =, +        new PermittedMetaException(IllegalStateException.class);, +    static final PermittedMetaException NSEE =, +        new PermittedMetaException(NoSuchElementException.class);, +    final Collection<? extends Class<? extends RuntimeException>> exceptionClasses;, +, +    private PermittedMetaException(, +        Collection<? extends Class<? extends RuntimeException>> exceptionClasses) {, +    private PermittedMetaException(Class<? extends RuntimeException> exceptionClass) {, +        throw PermittedMetaException.UOE;, +        throw PermittedMetaException.NSEE;, +          throw PermittedMetaException.UOE_OR_ISE;, +        } else {, +          throw PermittedMetaException.UOE;, +      } else if (stackWithLastReturnedElementAtTop == null) {, +        throw PermittedMetaException.ISE;, +    int removes = Collections.frequency(Arrays.asList(stimuli), remove);, +    if ((!features.contains(IteratorFeature.SUPPORTS_REMOVE) && removes > 1), +        || (stimuli.length >= 5 && removes > 2)) {, +      // removes are the most expensive thing to test, since they often throw exceptions with stack, +      // traces, so we test them a bit less aggressively, +      return;, +    }, +    ]