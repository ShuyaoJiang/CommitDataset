[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(numberToSkip)} (same)., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.limit(maxSize)} (same)., +   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableList.copyOf(stream.iterator())}., +   * {@code ImmutableList.copyOf(stream.sorted(comparator).iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableSet.copyOf(stream.iterator())}., +   * {@code ImmutableSortedSet.copyOf(comparator, stream.iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableMultiset.copyOf(stream.iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code, +   * ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))} (but note that, +   * this may not preserve the order of entries)., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}, +   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve, +   * the order of entries)., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code, +   * ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v)))} (but note that this, +   * may not preserve the order of entries)., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.forEachOrdered(collection::add)} or, +   * {@code stream.forEach(collection::add)}., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not, +   * using any optional {@code Joiner} features,, +   * {@code stream.collect(Collectors.joining(delimiter)}., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note, +   * that this throws different exception types, and throws an exception if {@code null} would be, +   * returned)., +   *, +  // TODO(kevinb): add @Nullable?, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(numberToSkip)} (same)., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.limit(maxSize)} (same)., +   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableList.copyOf(stream.iterator())}., +   * {@code ImmutableList.copyOf(stream.sorted(comparator).iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableSet.copyOf(stream.iterator())}., +   * {@code ImmutableSortedSet.copyOf(comparator, stream.iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableMultiset.copyOf(stream.iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code, +   * ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))} (but note that, +   * this may not preserve the order of entries)., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}, +   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve, +   * the order of entries)., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code, +   * ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v)))} (but note that this, +   * may not preserve the order of entries)., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.forEachOrdered(collection::add)} or, +   * {@code stream.forEach(collection::add)}., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not, +   * using any optional {@code Joiner} features,, +   * {@code stream.collect(Collectors.joining(delimiter)}., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note, +   * that this throws different exception types, and throws an exception if {@code null} would be, +   * returned)., +   *, +  // TODO(kevinb): add @Nullable?, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(numberToSkip)} (same)., +   * <p><b>{@code Stream} equivalent:</b> {@code stream.limit(maxSize)} (same)., +   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableList.copyOf(stream.iterator())}., +   * {@code ImmutableList.copyOf(stream.sorted(comparator).iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableSet.copyOf(stream.iterator())}., +   * {@code ImmutableSortedSet.copyOf(comparator, stream.iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code ImmutableMultiset.copyOf(stream.iterator())}., +   * <p><b>{@code Stream} equivalent:</b> {@code, +   * ImmutableMap.copyOf(stream.collect(Collectors.toMap(k -> k, valueFunction)))} (but note that, +   * this may not preserve the order of entries)., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}, +   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve, +   * the order of entries)., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code, +   * ImmutableMap.copyOf(stream.collect(Collectors.toMap(keyFunction, v -> v)))} (but note that this, +   * may not preserve the order of entries)., +   * <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use, +   * {@code stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use, +   * {@code stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray(, +   * len -> (E[]) Array.newInstance(type, len))}., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code stream.forEachOrdered(collection::add)} or, +   * {@code stream.forEach(collection::add)}., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not, +   * using any optional {@code Joiner} features,]