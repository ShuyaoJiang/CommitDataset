[+++ b/guava-gwt/test-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/MultisetRemoveTester.java, +import static com.google.common.collect.testing.Helpers.assertEmpty;, +    assertEmpty(getMultiset());, +++ b/guava-gwt/test-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/MultisetRemoveTester.java, +import static com.google.common.collect.testing.Helpers.assertEmpty;, +    assertEmpty(getMultiset());, +++ b/guava-gwt/test-super/com/google/common/collect/testing/super/com/google/common/collect/testing/Helpers.java, +  private static boolean isEmpty(Iterable<?> iterable) {, +    return iterable instanceof Collection, +        ? ((Collection<?>) iterable).isEmpty(), +        : iterable.iterator().hasNext();, +  }, +, +  public static void assertEmpty(Iterable<?> iterable) {, +    if (!isEmpty(iterable)) {, +      Assert.fail("Not true that " + iterable + " is empty");, +    }, +  }, +, +  public static void assertEmpty(Map<?, ?> map) {, +    if (!map.isEmpty()) {, +      Assert.fail("Not true that " + map + " is empty");, +    }, +  }, +, +  public static void assertEqualInOrder(, +      Iterable<?> expected, Iterable<?> actual) {, +    Iterator<?> expectedIter = expected.iterator();, +    Iterator<?> actualIter = actual.iterator();, +, +    while (expectedIter.hasNext() && actualIter.hasNext()) {, +      if (!equal(expectedIter.next(), actualIter.next())) {, +        Assert.fail(, +            "contents were not equal and in the same order: ", +                + "expected = " + expected + ", actual = " + actual);, +      }, +    }, +, +    if (expectedIter.hasNext() || actualIter.hasNext()) {, +      // actual either had too few or too many elements, +      Assert.fail(, +          "contents were not equal and in the same order: ", +              + "expected = " + expected + ", actual = " + actual);, +    }, +  }, +, +  public static void assertContentsInOrder(Iterable<?> actual, Object... expected) {, +    assertEqualInOrder(Arrays.asList(expected), actual);, +  }, +, +  public static void assertContains(Iterable<?> actual, Object expected) {, +    boolean contained = false;, +    if (actual instanceof Collection) {, +      contained = ((Collection<?>) actual).contains(expected);, +    } else {, +      for (Object o : actual) {, +        if (equal(o, expected)) {, +          contained = true;, +          break;, +        }, +      }, +    }, +, +    if (!contained) {, +      Assert.fail("Not true that " + actual + " contains " + expected);, +    }, +  }, +, +  public static void assertContainsAllOf(, +      Iterable<?> actual, Object... expected) {, +    List<Object> expectedList = new ArrayList<Object>();, +    expectedList.addAll(Arrays.asList(expected));, +, +    for (Object o : actual) {, +      expectedList.remove(o);, +    }, +, +    if (!expectedList.isEmpty()) {, +      Assert.fail(, +          "Not true that " + actual + " contains all of " + Arrays.asList(expected));, +    }, +  }, +, +++ b/guava-gwt/test-super/com/google/common/collect/testing/google/super/com/google/common/collect/testing/google/MultisetRemoveTester.java, +import static com.google.common.collect.testing.Helpers.assertEmpty;, +    assertEmpty(getMultiset());, +++ b/guava-gwt/test-super/com/google/common/collect/testing/super/com/google/common/collect/testing/Helpers.java, +  private static boolean isEmpty(Iterable<?> iterable) {, +    return iterable instanceof Collection, +        ? ((Collection<?>) iterable).isEmpty(), +        : iterable.iterator().hasNext();, +  }, +, +  public static void assertEmpty(Iterable<?> iterable) {, +    if (!isEmpty(iterable)) {, +      Assert.fail("Not true that " + iterable + " is empty");, +    }, +  }, +, +  public static void assertEmpty(Map<?, ?> map) {]