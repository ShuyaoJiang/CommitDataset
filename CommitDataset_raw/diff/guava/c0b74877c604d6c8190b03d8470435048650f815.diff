[+++ b/guava/src/com/google/common/cache/CacheBuilder.java, +   * Specifies the maximum number of entries the cache may contain., +   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in, +   * the current implementation, when {@concurrencyLevel} is greater than {@code 1}, each resulting, +   * segment inside the cache <i>independently</i> limits its own size to approximately {@code, +   * maximumSize / concurrencyLevel}., +   *, +   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again., +   * For example, the cache may evict an entry because it hasn't been used recently or very often., +   *, +   * <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into, +   * cache. This can be useful in testing, or to disable caching temporarily., +   * @param maximumSize the maximum size of the cache, +   * @throws IllegalArgumentException if {@code maximumSize} is negative, +  public CacheBuilder<K, V> maximumSize(long maximumSize) {, +    checkArgument(maximumSize >= 0, "maximum size must not be negative");, +    this.maximumSize = maximumSize;, +   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in, +   * the current implementation, when {@concurrencyLevel} is greater than {@code 1}, each resulting, +   * segment inside the cache <i>independently</i> limits its own weight to approximately {@code, +   * maximumWeight / concurrencyLevel}., +   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again., +   * For example, the cache may evict an entry because it hasn't been used recently or very often., +   *, +   * <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded, +   * into cache. This can be useful in testing, or to disable caching temporarily., +   * @param maximumWeight the maximum total weight of entries the cache may contain, +   * @throws IllegalArgumentException if {@code maximumWeight} is negative, +  public CacheBuilder<K, V> maximumWeight(long maximumWeight) {, +    this.maximumWeight = maximumWeight;, +    checkArgument(maximumWeight >= 0, "maximum weight must not be negative");]