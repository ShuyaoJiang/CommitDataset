[+++ b/android/guava/src/com/google/common/collect/ImmutableCollection.java, + * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought, + * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a, + * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the, + * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were, + * largely defined by its supertype., + * <p>Expressing the immutability guarantee directly in the type that user code references is a, + * powerful advantage. Although Java 9 offers certain immutable collection factory methods, like, + * <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,, + * we recommend continuing to use these immutable collection classes for this reason., + *, +++ b/android/guava/src/com/google/common/collect/ImmutableCollection.java, + * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought, + * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a, + * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the, + * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were, + * largely defined by its supertype., + * <p>Expressing the immutability guarantee directly in the type that user code references is a, + * powerful advantage. Although Java 9 offers certain immutable collection factory methods, like, + * <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,, + * we recommend continuing to use these immutable collection classes for this reason., + *, +++ b/guava/src/com/google/common/collect/ImmutableCollection.java, + * <p>These are classes instead of interfaces to prevent external subtyping, but should be thought, + * of as interfaces in every important sense. Each public class such as {@link ImmutableSet} is a, + * <i>type</i> offering meaningful behavioral guarantees. This is substantially different from the, + * case of (say) {@link HashSet}, which is an <i>implementation</i>, with semantics that were, + * largely defined by its supertype., + * <p>Expressing the immutability guarantee directly in the type that user code references is a, + * powerful advantage. Although Java 9 offers certain immutable collection factory methods, like, + * <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html#immutable">{@code Set.of}</a>,, + * we recommend continuing to use these immutable collection classes for this reason., + *]