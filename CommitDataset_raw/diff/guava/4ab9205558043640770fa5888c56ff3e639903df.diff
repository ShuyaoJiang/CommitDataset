[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable A a) {, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Predicates.java, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable T t) {, +    public boolean apply(@Nullable A a) {, +++ b/guava-testlib/src/com/google/common/testing/AbstractPackageSanityTests.java, + * Automatically runs sanity checks against the public classes in the same package of the class that, + * extends {@code AbstractPackageSanityTests}. Currently sanity checks include {@link, + * NullPointerTester}, {@link EqualsTester} and {@link SerializableTester}. For example: <pre>, + * <p>Note that only the simplest type of classes are covered. That is, a public top-level class, + * with either a public constructor or a public static factory method to construct instances of the, + * class. For example: <pre>, + * public class Address {, + *   private final String city;, + *   private final String state;, + *   private final String zipcode;, + *   public Address(String city, String state, String zipcode) {...}, + *, + *   {@literal @Override} public boolean equals(Object obj) {...}, + *   {@literal @Override} public int hashCode() {...}, + *   ..., + * }, + * </pre>, + * No cascading checks are performed against the return values of methods unless the method is a, + * static factory method. Neither are semantics of mutation methods such as {@code, + * someList.add(obj)} checked. For more detailed discussion of supported and unsupported cases, see, + * {@link #testEquals}, {@link #testNulls} and {@link #testSerializable}., + *, + * <p>This class incurs IO because it scans the classpath and reads classpath resources., +  private static final ImmutableList<String> SERIALIZABLE_TEST_METHOD_NAMES = ImmutableList.of(, +      "testSerializable", "testSerialization",, +      "testEqualsAndSerializable", "testEqualsAndSerialization");, +, +  /* The names of the expected method that tests equals. */, +  private static final ImmutableList<String> EQUALS_TEST_METHOD_NAMES = ImmutableList.of(, +      "testEquals", "testEqualsAndHashCode",, +      "testEqualsAndSerializable", "testEqualsAndSerialization");, +  private final ClassSanityTester tester = new ClassSanityTester();, +  /**, +   * Tests all top-level public {@link Serializable} classes in the package. For a serializable, +   * Class {@code C}:, +   * <ul>, +   * <li>If {@code C} explicitly implements {@link Object#equals}, the deserialized instance will be, +   *     checked to be equal to the instance before serialization., +   * <li>If {@code C} doesn't explicitly implement {@code equals} but instead inherits it from a, +   *     superclass, no equality check is done on the deserialized instance because it's not clear, +   *     whether the author intended for the class to be a value type., +   * <li>If a constructor or factory method takes a parameter whose type is interface, a dynamic, +   *     proxy will be passed to the method. It's possible that the method body expects an instance, +   *     method of the passed-in proxy to be of a certain value yet the proxy isn't aware of the, +   *     assumption, in which case the equality check before and after serialization will fail., +   * <li>If the constructor or factory method takes a parameter that {@link, +   *     AbstractPackageSanityTests} doesn't know how to construct, the test will fail., +   * <li>If there is no public constructor or public static factory method declared by {@code C},, +   *     {@code C} is skipped for serialization test, even if it implements {@link Serializable}., +   * <li>Serialization test is not performed on method return values unless the method is a public, +   *     static factory method whose return type is {@code C} or {@code C}'s subtype., +   * </ul>, +   *, +   * In all cases, if {@code C} needs custom logic for testing serialization, you can add an, +   * explicit {@code testSerializable()} test in the corresponding {@code CTest} class, and {@code, +   * C} will be excluded from automated serialization test performed by this method., +   */, +        : findClassesToTest(loadClassesInPackage(), SERIALIZABLE_TEST_METHOD_NAMES)) {, +        try {, +          Object instance = tester.instantiate(classToTest);, +            if (isEqualsDefined(classToTest)) {, +        } catch (Throwable e) {, +          throw sanityError(classToTest, SERIALIZABLE_TEST_METHOD_NAMES, "serializable test", e);, +        }, +      }, +    }, +  }, +, +  /**, +   * Performs {@link NullPointerTester} checks for all top-level public classes in the package. For, +   * a class {@code C}, +   * <ul>, +   * <li>All public static methods are checked such that passing null for any parameter that's not, +   *     annotated with {@link javax.annotation.Nullable} should throw {@link NullPointerException}., +   * <li>If there is any public constructor or public static factory method declared by the class,, +   *     all public instance methods will be checked too using the instance created by invoking the, +   *     constructor or static factory method., +   * <li>If the constructor or factory method used to construct instance takes a parameter that, +   *     {@link AbstractPackageSanityTests} doesn't know how to construct, the test will fail., +   * <li>If there is no public constructor or public static factory method declared by {@code C},, +   *     instance methods are skipped for nulls test., +   * <li>Nulls test is not performed on method return values unless the method is a public static, +   *     factory method whose return type is {@code C} or {@code C}'s subtype., +   * </ul>, +   *, +   * In all cases, if {@code C} needs custom logic for testing nulls, you can add an explicit {@code, +   * testNulls()} test in the corresponding {@code CTest} class, and {@code C} will be excluded from]