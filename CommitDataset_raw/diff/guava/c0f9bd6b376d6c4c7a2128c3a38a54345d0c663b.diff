[+++ b/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +        assertTrue(expected.getMessage().contains("one"));, +        assertTrue(expected.getMessage().contains("one"));, +        assertTrue(expected.getMessage().contains("1"));, +++ b/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +        assertTrue(expected.getMessage().contains("one"));, +        assertTrue(expected.getMessage().contains("one"));, +        assertTrue(expected.getMessage().contains("1"));, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +import java.util.Collection;, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .build();, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .put(k3, v3), +        .build();, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .put(k3, v3), +        .put(k4, v4), +        .build();, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .put(k3, v3), +        .put(k4, v4), +        .put(k5, v5), +        .build();, +      return fromEntries(entries);, +    return fromEntries(ImmutableList.copyOf(map.entrySet()));, +  }, +, +  static <K, V> ImmutableBiMap<K, V> fromEntries(, +      Collection<? extends Entry<? extends K, ? extends V>> entries) {, +    switch (entries.size()) {, +      case 0:, +        return of();, +      case 1: {, +        Entry<? extends K, ? extends V> entry = Iterables.getOnlyElement(entries);, +        return new SingletonImmutableBiMap<K, V>(entry.getKey(), entry.getValue());, +      }, +      default:, +        return new RegularImmutableBiMap<K, V>(entries);, +++ b/guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java, +        assertTrue(expected.getMessage().contains("one"));, +        assertTrue(expected.getMessage().contains("one"));, +        assertTrue(expected.getMessage().contains("1"));, +++ b/guava/src/com/google/common/collect/ImmutableBiMap.java, +import java.util.Collection;, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .build();, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .put(k3, v3), +        .build();, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .put(k3, v3), +        .put(k4, v4), +        .build();, +    return new Builder<K, V>(), +        .put(k1, v1), +        .put(k2, v2), +        .put(k3, v3), +        .put(k4, v4), +        .put(k5, v5), +        .build();, +      return fromEntries(entries);, +    return fromEntries(ImmutableList.copyOf(map.entrySet()));, +  }, +, +  static <K, V> ImmutableBiMap<K, V> fromEntries(, +      Collection<? extends Entry<? extends K, ? extends V>> entries) {, +    switch (entries.size()) {, +      case 0:, +        return of();, +      case 1: {, +        Entry<? extends K, ? extends V> entry = Iterables.getOnlyElement(entries);, +        return new SingletonImmutableBiMap<K, V>(entry.getKey(), entry.getValue());, +      }, +      default:, +        return new RegularImmutableBiMap<K, V>(entries);, +++ b/guava/src/com/google/common/collect/RegularImmutableBiMap.java, +import static com.google.common.base.Preconditions.checkNotNull;, +import java.io.Serializable;, +import java.util.Collection;, +, + * @author Louis Wasserman, +  private static class BiMapEntry<K, V> extends ImmutableEntry<K, V> {, +    BiMapEntry(K key, V value) {, +      super(key, value);, +    @Nullable]