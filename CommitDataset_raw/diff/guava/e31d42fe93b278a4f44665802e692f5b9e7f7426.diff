[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  static <K, V> ImmutableMap<K, V> asImmutable(Map<K, V> map) {, +    for (Map.Entry<K, V> entry : checkNotNull(map).entrySet()) {, +      checkNotNull(entry.getKey());, +      checkNotNull(entry.getValue());, +    }, +    return new ImmutableEnumMap<K, V>(map);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  static <K, V> ImmutableMap<K, V> asImmutable(Map<K, V> map) {, +    for (Map.Entry<K, V> entry : checkNotNull(map).entrySet()) {, +      checkNotNull(entry.getKey());, +      checkNotNull(entry.getValue());, +    }, +    return new ImmutableEnumMap<K, V>(map);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +import java.util.EnumMap;, +    } else if (map instanceof EnumMap) {, +      EnumMap<?, ?> enumMap = (EnumMap<?, ?>) map;, +      for (Map.Entry<?, ?> entry : enumMap.entrySet()) {, +        checkNotNull(entry.getKey());, +        checkNotNull(entry.getValue());, +      }, +      @SuppressWarnings("unchecked"), +      // immutable collections are safe for covariant casts, +      ImmutableMap<K, V> result = ImmutableEnumMap.asImmutable(new EnumMap(enumMap));, +      return result;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  static <K, V> ImmutableMap<K, V> asImmutable(Map<K, V> map) {, +    for (Map.Entry<K, V> entry : checkNotNull(map).entrySet()) {, +      checkNotNull(entry.getKey());, +      checkNotNull(entry.getValue());, +    }, +    return new ImmutableEnumMap<K, V>(map);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +import java.util.EnumMap;, +    } else if (map instanceof EnumMap) {, +      EnumMap<?, ?> enumMap = (EnumMap<?, ?>) map;, +      for (Map.Entry<?, ?> entry : enumMap.entrySet()) {, +        checkNotNull(entry.getKey());, +        checkNotNull(entry.getValue());, +      }, +      @SuppressWarnings("unchecked"), +      // immutable collections are safe for covariant casts, +      ImmutableMap<K, V> result = ImmutableEnumMap.asImmutable(new EnumMap(enumMap));, +      return result;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    if (map instanceof ImmutableEnumMap) {, +    } else if (map.isEmpty()) {, +      return ImmutableMap.of();, +    } else {, +      return ImmutableEnumMap.asImmutable(new EnumMap<K, V>(map));, +    }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableEnumMap.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  static <K, V> ImmutableMap<K, V> asImmutable(Map<K, V> map) {, +    for (Map.Entry<K, V> entry : checkNotNull(map).entrySet()) {, +      checkNotNull(entry.getKey());, +      checkNotNull(entry.getValue());, +    }, +    return new ImmutableEnumMap<K, V>(map);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +import java.util.EnumMap;, +    } else if (map instanceof EnumMap) {, +      EnumMap<?, ?> enumMap = (EnumMap<?, ?>) map;, +      for (Map.Entry<?, ?> entry : enumMap.entrySet()) {, +        checkNotNull(entry.getKey());, +        checkNotNull(entry.getValue());, +      }, +      @SuppressWarnings("unchecked"), +      // immutable collections are safe for covariant casts, +      ImmutableMap<K, V> result = ImmutableEnumMap.asImmutable(new EnumMap(enumMap));, +      return result;, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    if (map instanceof ImmutableEnumMap) {, +    } else if (map.isEmpty()) {, +      return ImmutableMap.of();, +    } else {, +      return ImmutableEnumMap.asImmutable(new EnumMap<K, V>(map));, +    }, +++ b/guava-testlib/src/com/google/common/collect/testing/google/MapGenerators.java, +import com.google.common.collect.Ordering;, +import java.util.EnumMap;, +  public static class ImmutableMapCopyOfEnumMapGenerator extends TestEnumMapGenerator {, +    @Override, +    protected Map<AnEnum, String> create(Entry<AnEnum, String>[] entries) {, +      EnumMap<AnEnum, String> map = new EnumMap<AnEnum, String>(AnEnum.class);, +      for (Entry<AnEnum, String> entry : entries) {, +        map.put(entry.getKey(), entry.getValue());, +      }]