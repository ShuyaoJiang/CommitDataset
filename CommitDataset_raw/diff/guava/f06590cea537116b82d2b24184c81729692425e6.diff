[+++ b/guava/src/com/google/common/net/HostAndPort.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + *, + * <p>Note that this is not an exhaustive list, because these methods are only concerned with, + * brackets, colons, and port numbers. Full validation of the host field (if desired) is the, + * caller's responsibility., +   * Returns the portion of this {@code HostAndPort} instance that should represent the hostname or, +   * IPv4/IPv6 literal., +   * <p>A successful parse does not imply any degree of sanity in this field. For additional, +   * validation, see the {@link HostSpecifier} class., +   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}, +   *     to prevent this from occurring., +   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to, +   * prohibit these., +   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out, +   *     of range., +   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to, +   * prohibit these., +   * Note that the host-only formats will leave the port field undefined. You can use, +   * {@link #withDefaultPort(int)} to patch in a default value., +    checkArgument(, +        hostPortString.charAt(0) == '[',, +        "Bracketed host-port string must start with a bracket: %s",, +        hostPortString);, +    checkArgument(, +        colonIndex > -1 && closeBracketIndex > colonIndex,, +        "Invalid bracketed host/port: %s",, +        hostPortString);, +      checkArgument(, +          hostPortString.charAt(closeBracketIndex + 1) == ':',, +          "Only a colon may follow a close bracket: %s",, +          hostPortString);, +        checkArgument(, +            Character.isDigit(hostPortString.charAt(i)),, +            "Port must be numeric: %s",, +            hostPortString);, +   * You can chain this after {@link #fromString(String)} to include a port in case the port was, +   * omitted from the input string. If a port was already provided, then this method is a no-op., +   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like "[2001:db8::1]"., +   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and, +   * disallow IPv6 literals that don't contain these brackets., +   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To, +   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}, +   * method., +++ b/guava/src/com/google/common/net/HostAndPort.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + *, + * <p>Note that this is not an exhaustive list, because these methods are only concerned with, + * brackets, colons, and port numbers. Full validation of the host field (if desired) is the, + * caller's responsibility., +   * Returns the portion of this {@code HostAndPort} instance that should represent the hostname or, +   * IPv4/IPv6 literal., +   * <p>A successful parse does not imply any degree of sanity in this field. For additional, +   * validation, see the {@link HostSpecifier} class., +   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}, +   *     to prevent this from occurring., +   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to, +   * prohibit these., +   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out, +   *     of range., +   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to, +   * prohibit these., +   * Note that the host-only formats will leave the port field undefined. You can use, +   * {@link #withDefaultPort(int)} to patch in a default value., +    checkArgument(, +        hostPortString.charAt(0) == '[',, +        "Bracketed host-port string must start with a bracket: %s",, +        hostPortString);, +    checkArgument(, +        colonIndex > -1 && closeBracketIndex > colonIndex,, +        "Invalid bracketed host/port: %s",, +        hostPortString);, +      checkArgument(, +          hostPortString.charAt(closeBracketIndex + 1) == ':',, +          "Only a colon may follow a close bracket: %s",, +          hostPortString);, +        checkArgument(, +            Character.isDigit(hostPortString.charAt(i)),, +            "Port must be numeric: %s",, +            hostPortString);, +   * You can chain this after {@link #fromString(String)} to include a port in case the port was, +   * omitted from the input string. If a port was already provided, then this method is a no-op., +   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like "[2001:db8::1]"., +   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and, +   * disallow IPv6 literals that don't contain these brackets., +   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To, +   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}, +   * method., +++ b/guava/src/com/google/common/net/HostSpecifier.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except]