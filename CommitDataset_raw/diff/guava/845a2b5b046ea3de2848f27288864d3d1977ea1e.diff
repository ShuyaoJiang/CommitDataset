[+++ b/guava/src/com/google/common/base/Ascii.java, +++ b/guava/src/com/google/common/base/Ascii.java, +++ b/guava/src/com/google/common/base/CaseFormat.java, +++ b/guava/src/com/google/common/base/Ascii.java, +++ b/guava/src/com/google/common/base/CaseFormat.java, +++ b/guava/src/com/google/common/base/CharMatcher.java, + * "any {@code char} value {@code c} for which {@code this.matches(c)} returns {@code true}"., + * <p><b>Warning:</b> This class deals only with {@code char} values; it does not understand, + * <p>Example usages:, + *, + * <pre>, + * <p>See the Guava User Guide article on <a, + * href="https://github.com/google/guava/wiki/StringsExplained#charmatcher">{@code CharMatcher}, +++ b/guava/src/com/google/common/base/Ascii.java, +++ b/guava/src/com/google/common/base/CaseFormat.java, +++ b/guava/src/com/google/common/base/CharMatcher.java, + * "any {@code char} value {@code c} for which {@code this.matches(c)} returns {@code true}"., + * <p><b>Warning:</b> This class deals only with {@code char} values; it does not understand, + * <p>Example usages:, + *, + * <pre>, + * <p>See the Guava User Guide article on <a, + * href="https://github.com/google/guava/wiki/StringsExplained#charmatcher">{@code CharMatcher}, +++ b/guava/src/com/google/common/base/Converter.java, + * <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link, + *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain, + *     #reverse reverse} views of these., + * <li>Convert between specific preset values using {@link, + *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create, + *     a "fake" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i> the, + *     {@code Converter} type using a mocking framework., + * <li><b>Java 8 users:</b> you may prefer to pass two lambda expressions or method references to, + *     the {@link #from from} factory method., + * <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link, + *     java.util.function.Function} is accepted (for example {@link Stream#map})., + * <p>An alternative using Java 8:, + *, + * <pre>{@code, + *     s -> parseUnsignedInt(s, 16));, + * }</pre>, +++ b/guava/src/com/google/common/base/Ascii.java, +++ b/guava/src/com/google/common/base/CaseFormat.java, +++ b/guava/src/com/google/common/base/CharMatcher.java, + * "any {@code char} value {@code c} for which {@code this.matches(c)} returns {@code true}"., + * <p><b>Warning:</b> This class deals only with {@code char} values; it does not understand, + * <p>Example usages:, + *, + * <pre>, + * <p>See the Guava User Guide article on <a, + * href="https://github.com/google/guava/wiki/StringsExplained#charmatcher">{@code CharMatcher}, +++ b/guava/src/com/google/common/base/Converter.java, + * <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link, + *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain, + *     #reverse reverse} views of these., + * <li>Convert between specific preset values using {@link, + *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create, + *     a "fake" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i> the, + *     {@code Converter} type using a mocking framework., + * <li><b>Java 8 users:</b> you may prefer to pass two lambda expressions or method references to, + *     the {@link #from from} factory method., + * <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link, + *     java.util.function.Function} is accepted (for example {@link Stream#map})., + * <p>An alternative using Java 8:, + *, + * <pre>{@code, + *     s -> parseUnsignedInt(s, 16));, + * }</pre>, +++ b/guava/src/com/google/common/base/Enums.java, +++ b/guava/src/com/google/common/base/Ascii.java, +++ b/guava/src/com/google/common/base/CaseFormat.java, +++ b/guava/src/com/google/common/base/CharMatcher.java, + * "any {@code char} value {@code c} for which {@code this.matches(c)} returns {@code true}"., + * <p><b>Warning:</b> This class deals only with {@code char} values; it does not understand, + * <p>Example usages:, + *, + * <pre>, + * <p>See the Guava User Guide article on <a, + * href="https://github.com/google/guava/wiki/StringsExplained#charmatcher">{@code CharMatcher}, +++ b/guava/src/com/google/common/base/Converter.java, + * <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link, + *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain, + *     #reverse reverse} views of these., + * <li>Convert between specific preset values using {@link, + *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create, + *     a "fake" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i> the, + *     {@code Converter} type using a mocking framework., + * <li><b>Java 8 users:</b> you may prefer to pass two lambda expressions or method references to, + *     the {@link #from from} factory method., + * <li>Use {@code converter} or {@code converter.reverse()} anywhere a {@link, + *     java.util.function.Function} is accepted (for example {@link Stream#map})., + * <p>An alternative using Java 8:, + *, + * <pre>{@code, + *     s -> parseUnsignedInt(s, 16));, + * }</pre>, +++ b/guava/src/com/google/common/base/Enums.java, +++ b/guava/src/com/google/common/base/Equivalence.java, +   * Returns a predicate that evaluates to true if and only if the input is equivalent to {@code, +   * target} according to this equivalence relation., +++ b/guava/src/com/google/common/base/Ascii.java]