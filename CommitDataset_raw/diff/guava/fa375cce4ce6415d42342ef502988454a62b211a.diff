[+++ b/guava-tests/test/com/google/common/collect/QueuesTest.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.CountDownLatch;, +  /*, +   * We need to perform operations in a thread pool, even for simple cases, because the queue might, +   * be a SynchronousQueue., +   */, +      Producer producer = new Producer(q, 1);, +      Future<?> producerThread = threadPool.submit(producer);, +      producerThread.cancel(true);, +      producer.doneProducing.await();, +        q.poll(); // not necessarily there if producer was interrupted, +    // Free the producer thread, and give subsequent tests a clean slate., +    q.take();, +    threadPool.submit(new Callable<Void>() {, +      public Void call() throws InterruptedException {, +        new Producer(q, 50).call();, +        new Producer(q, 50).call();, +        return null;, +  private static class Producer implements Callable<Void> {, +    final CountDownLatch doneProducing = new CountDownLatch(1);, +    @Override public Void call() throws InterruptedException {, +        return null;, +      } finally {, +        doneProducing.countDown();]