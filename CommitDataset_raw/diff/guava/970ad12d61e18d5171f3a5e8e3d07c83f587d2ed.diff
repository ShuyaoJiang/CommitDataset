[+++ b/src/com/google/common/base/CaseFormat.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, +  CaseFormat(CharMatcher wordBoundary, String wordSeparator) {, +   * Converts the specified {@code String s} from this format to the specified {@code format}. A, +   * "best effort" approach is taken; if {@code s} does not conform to the assumed format, then the, +   * behavior of this method is undefined but we make a reasonable effort at converting anyway., +    // otherwise, deal with camel conversion, +        // include some extra space for separators, +      case LOWER_CAMEL:, +        return toLowerCaseAscii(word);, +      default:, +        return normalizeWord(word);, +      case LOWER_HYPHEN:, +        return toLowerCaseAscii(word);, +      case LOWER_UNDERSCORE:, +        return toLowerCaseAscii(word);, +      case LOWER_CAMEL:, +        return firstCharOnlyToUpper(word);, +      case UPPER_CAMEL:, +        return firstCharOnlyToUpper(word);, +      case UPPER_UNDERSCORE:, +        return toUpperCaseAscii(word);, +    if (length == 0) {, +      return word;, +    }, +    return new StringBuilder(length), +++ b/src/com/google/common/base/CaseFormat.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, +  CaseFormat(CharMatcher wordBoundary, String wordSeparator) {, +   * Converts the specified {@code String s} from this format to the specified {@code format}. A, +   * "best effort" approach is taken; if {@code s} does not conform to the assumed format, then the, +   * behavior of this method is undefined but we make a reasonable effort at converting anyway., +    // otherwise, deal with camel conversion, +        // include some extra space for separators, +      case LOWER_CAMEL:, +        return toLowerCaseAscii(word);, +      default:, +        return normalizeWord(word);, +      case LOWER_HYPHEN:, +        return toLowerCaseAscii(word);, +      case LOWER_UNDERSCORE:, +        return toLowerCaseAscii(word);, +      case LOWER_CAMEL:, +        return firstCharOnlyToUpper(word);, +      case UPPER_CAMEL:, +        return firstCharOnlyToUpper(word);, +      case UPPER_UNDERSCORE:, +        return toUpperCaseAscii(word);, +    if (length == 0) {, +      return word;, +    }, +    return new StringBuilder(length), +++ b/src/com/google/common/base/CharMatcher.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * Determines a true or false value for any Java {@code char} value, just as {@link Predicate} does, + * for any {@link Object}. Also offers basic text processing methods based on this function., + * Implementations are strongly encouraged to be side-effect-free and immutable., + * <p>Throughout the documentation of this class, the phrase "matching character" is used to mean, + * "any character {@code c} for which {@code this.matches(c)} returns {@code true}"., + * <p><b>Note:</b> This class deals only with {@code char} values; it does not understand, + * supplementary Unicode code points in the range {@code 0x10000} to {@code 0x10FFFF}. Such logical, + * characters are encoded into a {@code String} using surrogate pairs, and a {@code CharMatcher}, + * treats these just as two separate characters., +   * Determines whether a character is whitespace according to the latest Unicode standard, as, +   * illustrated, +   * This is not the same definition used by other Java APIs. (See a, +   * <a href="http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ">comparison of several, +   * definitions of "whitespace"</a>.), +   * <p><b>Note:</b> as the Unicode definition evolves, we will modify this constant to keep it up, +   * to date., +   * Determines whether a character is a breaking whitespace (that is, a whitespace which can be, +   * interpreted as a break between words for formatting purposes). See {@link #WHITESPACE} for a, +   * discussion of that term., +   * Determines whether a character is ASCII, meaning that its code point is less than 128., +   * Determines whether a character is whitespace according to {@link Character#isWhitespace(char), +   * Java's definition}; it is usually preferable to use {@link #WHITESPACE}. (See a, +   * <a href="http://spreadsheets.google.com/pub?key=pd8dAQyHbdewRsnE5x5GzKQ">comparison of several, +   * definitions of "whitespace"</a>.), +  public static final CharMatcher JAVA_WHITESPACE =, +      inRange('\u0009', (char) 13)  // \\u000d doesn't work as a char literal, +   * Determines whether a character is a digit according to {@link Character#isDigit(char) Java's, +   * definition}. If you only care to match ASCII digits, you can use {@code inRange('0', '9')}., +   * Determines whether a character is a letter according to {@link Character#isLetter(char) Java's, +   * definition}. If you only care to match letters of the Latin alphabet, you can use {@code, +   * Determines whether a character is upper case according to {@link Character#isUpperCase(char), +   * Java's definition}., +   * Determines whether a character is lower case according to {@link Character#isLowerCase(char), +   * Java's definition}.]