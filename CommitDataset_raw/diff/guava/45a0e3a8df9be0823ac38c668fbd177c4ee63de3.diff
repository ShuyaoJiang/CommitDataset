[+++ b/guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java, +import com.google.common.testing.TestLogHandler;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +  static final class MyListener {, +    @Override, +    public String toString() {, +      return "MyListener";, +    }, +  }, +, +  public void testEnqueueAndDispatch_withLabeledExceptions() {, +    Object listener = new MyListener();, +    ListenerCallQueue<Object> queue = new ListenerCallQueue<>();, +    queue.addListener(listener, directExecutor());, +    queue.enqueue(THROWING_EVENT, "custom-label");, +, +    Logger logger = Logger.getLogger(ListenerCallQueue.class.getName());, +    logger.setLevel(Level.SEVERE);, +    TestLogHandler logHandler = new TestLogHandler();, +    logger.addHandler(logHandler);, +    try {, +      queue.dispatch();, +    } finally {, +      logger.removeHandler(logHandler);, +    }, +, +    assertEquals(1, logHandler.getStoredLogRecords().size());, +    assertEquals(, +        "Exception while executing callback: MyListener custom-label",, +        logHandler.getStoredLogRecords().get(0).getMessage());, +  }, +, +++ b/guava-tests/test/com/google/common/util/concurrent/ListenerCallQueueTest.java, +import com.google.common.testing.TestLogHandler;, +import java.util.logging.Level;, +import java.util.logging.Logger;, +  static final class MyListener {, +    @Override, +    public String toString() {, +      return "MyListener";, +    }, +  }, +, +  public void testEnqueueAndDispatch_withLabeledExceptions() {, +    Object listener = new MyListener();, +    ListenerCallQueue<Object> queue = new ListenerCallQueue<>();, +    queue.addListener(listener, directExecutor());, +    queue.enqueue(THROWING_EVENT, "custom-label");, +, +    Logger logger = Logger.getLogger(ListenerCallQueue.class.getName());, +    logger.setLevel(Level.SEVERE);, +    TestLogHandler logHandler = new TestLogHandler();, +    logger.addHandler(logHandler);, +    try {, +      queue.dispatch();, +    } finally {, +      logger.removeHandler(logHandler);, +    }, +, +    assertEquals(1, logHandler.getStoredLogRecords().size());, +    assertEquals(, +        "Exception while executing callback: MyListener custom-label",, +        logHandler.getStoredLogRecords().get(0).getMessage());, +  }, +, +++ b/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java, +   * Enqueues an event to be run on currently known listeners., +   *, +   * <p>The {@code toString} method of the Event itself will be used to describe the event in the, +   * case of an error., +   *, +   * @param event the callback to execute on {@link #dispatch}, +    enqueueHelper(event, event);, +  }, +, +  /**, +   * Enqueues an event to be run on currently known listeners, with a label., +   *, +   * @param event the callback to execute on {@link #dispatch}, +   * @param label a description of the event to use in the case of an error, +   */, +  public void enqueue(Event<L> event, String label) {, +    enqueueHelper(event, label);, +  }, +, +  private void enqueueHelper(Event<L> event, Object label) {, +    checkNotNull(event, "event");, +    checkNotNull(label, "label");, +        queue.add(event, label);, +    final Queue<Object> labelQueue = Queues.newArrayDeque();, +, +    @GuardedBy("this"), +    synchronized void add(ListenerCallQueue.Event<L> event, Object label) {, +      labelQueue.add(label);, +          Object nextLabel;, +            nextLabel = labelQueue.poll();, +                "Exception while executing callback: " + listener + " " + nextLabel,]