[+++ b/android/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  public void incidentEdges_oneEdge() {, +    putEdge(N1, N2);, +    EndpointPair<Integer> expectedEndpoints = EndpointPair.ordered(N1, N2);, +    assertThat(graph.incidentEdges(N1)).containsExactly(expectedEndpoints);, +    assertThat(graph.incidentEdges(N2)).containsExactly(expectedEndpoints);, +  }, +, +  @Test, +++ b/android/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  public void incidentEdges_oneEdge() {, +    putEdge(N1, N2);, +    EndpointPair<Integer> expectedEndpoints = EndpointPair.ordered(N1, N2);, +    assertThat(graph.incidentEdges(N1)).containsExactly(expectedEndpoints);, +    assertThat(graph.incidentEdges(N2)).containsExactly(expectedEndpoints);, +  }, +, +  @Test, +++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.incidentEdges(node)).contains(EndpointPair.of(graph, predecessor, node));, +        assertThat(graph.incidentEdges(node)).contains(EndpointPair.of(graph, node, successor));, +      }, +, +      for (EndpointPair<N> endpoints : sanityCheckSet(graph.incidentEdges(node))) {, +        if (graph.isDirected()) {, +          assertThat(graph.hasEdgeConnecting(endpoints.source(), endpoints.target())).isTrue();, +        } else {, +          assertThat(graph.hasEdgeConnecting(endpoints.nodeU(), endpoints.nodeV())).isTrue();, +        }, +  /**, +   * Verifies that the {@code Set} returned by {@code incidentEdges} has the expected mutability, +   * property (see the {@code Graph} documentation for more information)., +   */, +  @Test, +  public abstract void incidentEdges_checkReturnedSetMutability();, +, +  public void incidentEdges_noIncidentEdges() {, +    addNode(N1);, +    assertThat(graph.incidentEdges(N1)).isEmpty();, +  }, +, +  @Test, +  public void incidentEdges_nodeNotInGraph() {, +    try {, +      graph.incidentEdges(NODE_NOT_IN_GRAPH);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +++ b/android/guava-tests/test/com/google/common/graph/AbstractDirectedGraphTest.java, +  public void incidentEdges_oneEdge() {, +    putEdge(N1, N2);, +    EndpointPair<Integer> expectedEndpoints = EndpointPair.ordered(N1, N2);, +    assertThat(graph.incidentEdges(N1)).containsExactly(expectedEndpoints);, +    assertThat(graph.incidentEdges(N2)).containsExactly(expectedEndpoints);, +  }, +, +  @Test, +++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.incidentEdges(node)).contains(EndpointPair.of(graph, predecessor, node));, +        assertThat(graph.incidentEdges(node)).contains(EndpointPair.of(graph, node, successor));, +      }, +, +      for (EndpointPair<N> endpoints : sanityCheckSet(graph.incidentEdges(node))) {, +        if (graph.isDirected()) {, +          assertThat(graph.hasEdgeConnecting(endpoints.source(), endpoints.target())).isTrue();, +        } else {, +          assertThat(graph.hasEdgeConnecting(endpoints.nodeU(), endpoints.nodeV())).isTrue();, +        }, +  /**, +   * Verifies that the {@code Set} returned by {@code incidentEdges} has the expected mutability, +   * property (see the {@code Graph} documentation for more information)., +   */, +  @Test, +  public abstract void incidentEdges_checkReturnedSetMutability();, +, +  public void incidentEdges_noIncidentEdges() {, +    addNode(N1);, +    assertThat(graph.incidentEdges(N1)).isEmpty();, +  }, +, +  @Test, +  public void incidentEdges_nodeNotInGraph() {, +    try {, +      graph.incidentEdges(NODE_NOT_IN_GRAPH);, +      fail(ERROR_NODE_NOT_IN_GRAPH);, +    } catch (IllegalArgumentException e) {, +      assertNodeNotInGraphErrorMessage(e);, +    }, +  }, +, +  @Test, +++ b/android/guava-tests/test/com/google/common/graph/AbstractUndirectedGraphTest.java, +  public void incidentEdges_oneEdge() {, +    putEdge(N1, N2);, +    EndpointPair<Integer> expectedEndpoints = EndpointPair.unordered(N1, N2);, +    assertThat(graph.incidentEdges(N1)).containsExactly(expectedEndpoints);]