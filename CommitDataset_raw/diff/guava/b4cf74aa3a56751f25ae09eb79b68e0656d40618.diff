[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +    // This implementation avoids unnecessary allocation., +    int len = sequence.length();, +    for (int i = 0; i < len; i++) {, +        if (c == replacement, +            && (i == len - 1 || !matches(sequence.charAt(i + 1)))) {, +          // a no-op replacement, +          i++;, +          StringBuilder builder = new StringBuilder(len), +              .append(sequence.subSequence(0, i)), +              .append(replacement);, +          return finishCollapseFrom(sequence, i + 1, len, replacement, builder, true);, +    }, +    // no replacement needed, +    return sequence.toString();, +    // This implementation avoids unnecessary allocation., +    int len = sequence.length();, +    int first;, +    int last;, +, +    for (first = 0; first < len && matches(sequence.charAt(first)); first++) {}, +    for (last = len - 1; last > first && matches(sequence.charAt(last)); last--) {}, +, +    return (first == 0 && last == len - 1), +        ? collapseFrom(sequence, replacement), +        : finishCollapseFrom(, +              sequence, first, last + 1, replacement,, +              new StringBuilder(last + 1 - first),, +              false);, +, +  private String finishCollapseFrom(, +      CharSequence sequence, int start, int end, char replacement,, +      StringBuilder builder, boolean inMatchingGroup) {, +    for (int i = start; i < end; i++) {, +        if (!inMatchingGroup) {, +          inMatchingGroup = true;, +      } else {, +        inMatchingGroup = false;, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/CharMatcher.java, +    // This implementation avoids unnecessary allocation., +    int len = sequence.length();, +    for (int i = 0; i < len; i++) {, +        if (c == replacement, +            && (i == len - 1 || !matches(sequence.charAt(i + 1)))) {, +          // a no-op replacement, +          i++;, +          StringBuilder builder = new StringBuilder(len), +              .append(sequence.subSequence(0, i)), +              .append(replacement);, +          return finishCollapseFrom(sequence, i + 1, len, replacement, builder, true);, +    }, +    // no replacement needed, +    return sequence.toString();, +    // This implementation avoids unnecessary allocation., +    int len = sequence.length();, +    int first;, +    int last;, +, +    for (first = 0; first < len && matches(sequence.charAt(first)); first++) {}, +    for (last = len - 1; last > first && matches(sequence.charAt(last)); last--) {}, +, +    return (first == 0 && last == len - 1), +        ? collapseFrom(sequence, replacement), +        : finishCollapseFrom(, +              sequence, first, last + 1, replacement,, +              new StringBuilder(last + 1 - first),, +              false);, +, +  private String finishCollapseFrom(, +      CharSequence sequence, int start, int end, char replacement,, +      StringBuilder builder, boolean inMatchingGroup) {, +    for (int i = start; i < end; i++) {, +        if (!inMatchingGroup) {, +          inMatchingGroup = true;, +      } else {, +        inMatchingGroup = false;, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +    assertSame(s, matcher.removeFrom(s));, +    assertSame(s, matcher.replaceFrom(s, 'z'));, +    assertSame(s, matcher.replaceFrom(s, "ZZ"));, +    assertSame(s, matcher.trimFrom(s));, +    assertSame(0, matcher.countIn(s));, +  /**, +   * Checks that expected is equals to out, and further, if in is, +   * equals to expected, then out is successfully optimized to be, +   * identical to in, i.e. that "in" is simply returned., +   */, +  private void assertEqualsSame(String expected, String in, String out) {, +    if (expected.equals(in)) {, +      assertSame(in, out);, +    } else {, +      assertEquals(expected, out);, +    }, +  }, +, +    // collapsing groups of '-' into '_' or '-', +    // Try replacement chars that both do and do not change the value., +    for (char replacement : new char[] { '_', '-' }) {, +      String expected = out.replace('_', replacement);, +      assertEqualsSame(expected, in, is('-').collapseFrom(in, replacement));]