[+++ b/guava-tests/test/com/google/common/graph/ElementOrderTest.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.graph;, +, +import static com.google.common.graph.ElementOrder.insertion;, +import static com.google.common.graph.ElementOrder.unordered;, +import static com.google.common.truth.Truth.assertThat;, +, +import com.google.common.collect.Ordering;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +/**, + * Tests for ordering the elements of graphs., + */, +@RunWith(JUnit4.class), +public final class ElementOrderTest {, +  // Node order tests, +, +  @Test, +  public void orderNodes_none() throws Exception {, +    MutableGraph<Integer> graph = GraphBuilder, +        .directed(), +        .orderNodes(unordered()), +        .build();, +, +    assertThat(graph.nodeOrder()).isEqualTo(unordered());, +  }, +, +  @Test, +  public void orderNodes_insertion() throws Exception {, +    MutableGraph<Integer> graph = GraphBuilder, +        .directed(), +        .orderNodes(insertion()), +        .build();, +, +    addNodes(graph);, +, +    assertThat(graph.nodeOrder()).isEqualTo(insertion());, +    assertThat(graph.nodes()).containsExactly(3, 1, 4).inOrder();, +  }, +, +  // The default ordering is INSERTION unless otherwise specified., +  @Test, +  public void orderNodes_default() throws Exception {, +    MutableGraph<Integer> graph = GraphBuilder, +        .directed(), +        .build();, +, +    addNodes(graph);, +, +    assertThat(graph.nodeOrder()).isEqualTo(insertion());, +    assertThat(graph.nodes()).containsExactly(3, 1, 4).inOrder();, +  }, +, +  @Test, +  public void orderNodes_natural() throws Exception {, +    MutableGraph<Integer> graph = GraphBuilder, +        .directed(), +        .orderNodes(ElementOrder.<Integer>natural()), +        .build();, +, +    addNodes(graph);, +, +    assertThat(graph.nodeOrder()).isEqualTo(ElementOrder.sorted(Ordering.<Integer>natural()));, +    assertThat(graph.nodes()).containsExactly(1, 3, 4).inOrder();, +  }, +, +  @Test, +  public void orderNodes_sorted() throws Exception {, +    MutableGraph<Integer> graph = GraphBuilder, +        .directed(), +        .orderNodes(ElementOrder.sorted(Ordering.<Integer>natural().reverse())), +        .build();, +, +    addNodes(graph);, +, +    assertThat(graph.nodeOrder()).isEqualTo(, +        ElementOrder.sorted(Ordering.<Integer>natural().reverse()));, +    assertThat(graph.nodes()).containsExactly(4, 3, 1).inOrder();, +  }, +, +  // Edge order tests]