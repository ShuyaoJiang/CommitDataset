[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    // TODO(user): Return a subclass of Maps.FilteredKeyMap for slightly better, +    return Platform.mapsFilterSortedMap(unfiltered, entryPredicate);, +  }, +, +  static <K, V> SortedMap<K, V> filterSortedIgnoreNavigable(, +      SortedMap<K, V> unfiltered,, +      Predicate<? super Entry<K, V>> entryPredicate) {, +, +      return (result == null) ? keySet = createKeySet() : result;, +    }, +, +    Set<K> createKeySet() {, +      return new KeySet();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    // TODO(user): Return a subclass of Maps.FilteredKeyMap for slightly better, +    return Platform.mapsFilterSortedMap(unfiltered, entryPredicate);, +  }, +, +  static <K, V> SortedMap<K, V> filterSortedIgnoreNavigable(, +      SortedMap<K, V> unfiltered,, +      Predicate<? super Entry<K, V>> entryPredicate) {, +, +      return (result == null) ? keySet = createKeySet() : result;, +    }, +, +    Set<K> createKeySet() {, +      return new KeySet();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import java.util.Map;, +  , +  static <K, V> SortedMap<K, V> mapsFilterSortedMap(, +      SortedMap<K, V> unfiltered, Predicate<? super Map.Entry<K, V>> predicate) {, +    return Maps.filterSortedIgnoreNavigable(unfiltered, predicate);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    // TODO(user): Return a subclass of Maps.FilteredKeyMap for slightly better, +    return Platform.mapsFilterSortedMap(unfiltered, entryPredicate);, +  }, +, +  static <K, V> SortedMap<K, V> filterSortedIgnoreNavigable(, +      SortedMap<K, V> unfiltered,, +      Predicate<? super Entry<K, V>> entryPredicate) {, +, +      return (result == null) ? keySet = createKeySet() : result;, +    }, +, +    Set<K> createKeySet() {, +      return new KeySet();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java, +import java.util.Map;, +  , +  static <K, V> SortedMap<K, V> mapsFilterSortedMap(, +      SortedMap<K, V> unfiltered, Predicate<? super Map.Entry<K, V>> predicate) {, +    return Maps.filterSortedIgnoreNavigable(unfiltered, predicate);, +  }, +++ b/guava-tests/test/com/google/common/collect/MapsCollectionTest.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.testing.Helpers;, +import com.google.common.collect.testing.TestStringMapGenerator;, +import com.google.common.collect.testing.google.BiMapRemoveTester;, +import com.google.common.collect.testing.testers.CollectionIteratorTester;, +import javax.annotation.Nullable;, +, +            putEntries(map, entries);, +            putEntries(map, entries);, +    suite.addTest(filterSuite());, +  static TestSuite filterSuite() {, +    TestSuite suite = new TestSuite("Filter");, +    suite.addTest(filterMapSuite());, +    suite.addTest(filterBiMapSuite());, +    suite.addTest(filterSortedMapSuite());, +    suite.addTest(filterNavigableMapSuite());, +    return suite;, +  }, +  , +  static TestSuite filterMapSuite() {, +    TestSuite suite = new TestSuite("FilterMap");, +    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {, +        @Override, +        protected Map<String, String> create(Entry<String, String>[] entries) {, +          Map<String, String> map = Maps.newHashMap();, +          putEntries(map, entries);, +          map.putAll(ENTRIES_TO_FILTER);, +          return Maps.filterKeys(map, FILTER_KEYS);, +        }, +      }), +      .named("Maps.filterKeys[Map, Predicate]"), +      .withFeatures(, +          MapFeature.ALLOWS_NULL_KEYS,, +          MapFeature.ALLOWS_NULL_VALUES,, +          MapFeature.GENERAL_PURPOSE,, +          CollectionSize.ANY), +      .suppressing(CollectionIteratorTester.getIteratorUnknownOrderRemoveSupportedMethod()), +      .createTestSuite());, +    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {, +        @Override, +        protected Map<String, String> create(Entry<String, String>[] entries) {, +          Map<String, String> map = Maps.newHashMap();, +          putEntries(map, entries);]