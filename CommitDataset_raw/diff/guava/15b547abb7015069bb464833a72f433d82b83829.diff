[+++ b/guava-gwt/test/com/google/common/base/OptionalTest_gwt.java, +public void testToJavaUtil_instance() throws Exception {, +  testCase.testToJavaUtil_instance();, +}, +, +public void testToJavaUtil_static() throws Exception {, +  com.google.common.base.OptionalTest testCase = new com.google.common.base.OptionalTest();, +  testCase.testToJavaUtil_static();, +++ b/guava-gwt/test/com/google/common/base/OptionalTest_gwt.java, +public void testToJavaUtil_instance() throws Exception {, +  testCase.testToJavaUtil_instance();, +}, +, +public void testToJavaUtil_static() throws Exception {, +  com.google.common.base.OptionalTest testCase = new com.google.common.base.OptionalTest();, +  testCase.testToJavaUtil_static();, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +  public void testToJavaUtil_static() {, +  public void testToJavaUtil_instance() {, +    assertEquals(java.util.Optional.empty(), Optional.absent().toJavaUtil());, +    assertEquals(java.util.Optional.of("abc"), Optional.of("abc").toJavaUtil());, +  }, +, +++ b/guava-gwt/test/com/google/common/base/OptionalTest_gwt.java, +public void testToJavaUtil_instance() throws Exception {, +  testCase.testToJavaUtil_instance();, +}, +, +public void testToJavaUtil_static() throws Exception {, +  com.google.common.base.OptionalTest testCase = new com.google.common.base.OptionalTest();, +  testCase.testToJavaUtil_static();, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +  public void testToJavaUtil_static() {, +  public void testToJavaUtil_instance() {, +    assertEquals(java.util.Optional.empty(), Optional.absent().toJavaUtil());, +    assertEquals(java.util.Optional.of("abc"), Optional.of("abc").toJavaUtil());, +  }, +, +++ b/guava/src/com/google/common/base/Optional.java, +   *, +   * @since 21.0, +   *, +   * <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}, +   * instead., +   *, +   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it, +   * could refer to either the static or instance version of this method. Write out the lambda, +   * expression {@code o -> Optional.toJavaUtil(o)} instead., +   *, +   * @since 21.0, +    return googleOptional == null ? null : googleOptional.toJavaUtil();, +   * Returns the equivalent {@code java.util.Optional} value to this optional., +   *, +   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it, +   * could refer to either the static or instance version of this method. Write out the lambda, +   * expression {@code o -> o.toJavaUtil()} instead., +   *, +   * @since 21.0, +   */, +  public java.util.Optional<T> toJavaUtil() {, +    return java.util.Optional.ofNullable(orNull());, +  }, +, +  /**]