[+++ b/android/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +            .expireAfterWrite(100, MILLISECONDS), +    threadPool.awaitTermination(300, SECONDS);, +++ b/android/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +            .expireAfterWrite(100, MILLISECONDS), +    threadPool.awaitTermination(300, SECONDS);, +++ b/guava-tests/test/com/google/common/cache/CacheBuilderTest.java, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +  @GwtIncompatible // java.time.Duration, +  public void testLargeDurations() {, +    java.time.Duration threeHundredYears = java.time.Duration.ofDays(365 * 300);, +    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();, +    try {, +      builder.expireAfterWrite(threeHundredYears);, +      fail();, +    } catch (ArithmeticException expected) {, +    }, +    try {, +      builder.expireAfterAccess(threeHundredYears);, +      fail();, +    } catch (ArithmeticException expected) {, +    }, +    try {, +      builder.refreshAfterWrite(threeHundredYears);, +      fail();, +    } catch (ArithmeticException expected) {, +    }, +  }, +, +  @GwtIncompatible // java.time.Duration, +  public void testTimeToLive_negative_duration() {, +    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();, +    try {, +      builder.expireAfterWrite(java.time.Duration.ofSeconds(-1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @GwtIncompatible // java.time.Duration, +  public void testTimeToLive_setTwice_duration() {, +    CacheBuilder<Object, Object> builder =, +        CacheBuilder.newBuilder().expireAfterWrite(java.time.Duration.ofSeconds(3600));, +    try {, +      // even to the same value is not allowed, +      builder.expireAfterWrite(java.time.Duration.ofSeconds(3600));, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @GwtIncompatible // java.time.Duration, +  public void testTimeToIdle_negative_duration() {, +    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();, +    try {, +      builder.expireAfterAccess(java.time.Duration.ofSeconds(-1));, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @GwtIncompatible // java.time.Duration, +  public void testTimeToIdle_setTwice_duration() {, +    CacheBuilder<Object, Object> builder =, +        CacheBuilder.newBuilder().expireAfterAccess(java.time.Duration.ofSeconds(3600));, +    try {, +      // even to the same value is not allowed, +      builder.expireAfterAccess(java.time.Duration.ofSeconds(3600));, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +  @GwtIncompatible // java.time.Duration, +  public void testRefresh_zero_duration() {, +    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();, +    try {, +      builder.refreshAfterWrite(java.time.Duration.ZERO);, +      fail();, +    } catch (IllegalArgumentException expected) {, +    }, +  }, +, +  @GwtIncompatible // java.time.Duration, +  public void testRefresh_setTwice_duration() {, +    CacheBuilder<Object, Object> builder =, +        CacheBuilder.newBuilder().refreshAfterWrite(java.time.Duration.ofSeconds(3600));, +    try {, +      // even to the same value is not allowed, +      builder.refreshAfterWrite(java.time.Duration.ofSeconds(3600));, +      fail();, +    } catch (IllegalStateException expected) {, +    }, +  }, +, +            .expireAfterWrite(100, MILLISECONDS), +    threadPool.awaitTermination(300, SECONDS);, +++ b/android/guava-tests/test/com/google/common/cache/CacheBuilderTest.java]