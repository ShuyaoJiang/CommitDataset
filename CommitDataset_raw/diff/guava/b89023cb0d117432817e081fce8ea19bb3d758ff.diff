[+++ b/guava-tests/test/com/google/common/cache/CacheLoadingTest.java, +import com.google.common.util.concurrent.Futures;, +import com.google.common.util.concurrent.ListenableFuture;, +      public ListenableFuture<Object> reload(Object key, Object oldValue) {, +        return Futures.immediateFuture(two);, +      public ListenableFuture<Object> reload(Object key, Object oldValue) {, +        return Futures.immediateFuture(two);, +      public ListenableFuture<Object> reload(Object key, Object oldValue) {, +  public void testReloadNullFuture() throws ExecutionException {, +    final Object one = new Object();, +    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {, +      @Override, +      public Object load(Object key) {, +        return one;, +      }, +, +      @Override, +      public ListenableFuture<Object> reload(Object key, Object oldValue) {, +        return Futures.immediateFuture(null);, +      }, +    };, +, +    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder().build(loader);, +    Object key = new Object();, +    CacheStats stats = cache.stats();, +    assertEquals(0, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    assertSame(one, cache.getUnchecked(key));, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    cache.refresh(key);, +    checkLoggedInvalidLoad();, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadSuccessCount());, +    assertEquals(1, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    assertSame(one, cache.getUnchecked(key));, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadSuccessCount());, +    assertEquals(1, stats.loadExceptionCount());, +    assertEquals(1, stats.hitCount());, +  }, +, +      public ListenableFuture<Object> reload(Object key, Object oldValue) {, +        return Futures.immediateFuture(null);, +      public ListenableFuture<Object> reload(Object key, Object oldValue) {, +  public void testReloadFutureError() throws ExecutionException {, +    final Object one = new Object();, +    final Error e = new Error();, +    CacheLoader<Object, Object> loader = new CacheLoader<Object, Object>() {, +      @Override, +      public Object load(Object key) {, +        return one;, +      }, +, +      @Override, +      public ListenableFuture<Object> reload(Object key, Object oldValue) {, +        return Futures.immediateFailedFuture(e);, +      }, +    };, +, +    LoadingCache<Object, Object> cache = CacheBuilder.newBuilder().build(loader);, +    Object key = new Object();, +    CacheStats stats = cache.stats();, +    assertEquals(0, stats.missCount());, +    assertEquals(0, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    assertSame(one, cache.getUnchecked(key));, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadSuccessCount());, +    assertEquals(0, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    cache.refresh(key);, +    checkLoggedCause(e);, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadSuccessCount());, +    assertEquals(1, stats.loadExceptionCount());, +    assertEquals(0, stats.hitCount());, +, +    assertSame(one, cache.getUnchecked(key));, +    stats = cache.stats();, +    assertEquals(1, stats.missCount());, +    assertEquals(1, stats.loadSuccessCount());, +    assertEquals(1, stats.loadExceptionCount());, +    assertEquals(1, stats.hitCount());]