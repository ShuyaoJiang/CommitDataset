[+++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Callables.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * Creates a {@code Callable} which immediately returns a preset value each time it is called., +  public static <T> Callable<T> returning(@Nullable final T value) {, +      @Override, +      public T call() {, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Callables.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * Creates a {@code Callable} which immediately returns a preset value each time it is called., +  public static <T> Callable<T> returning(@Nullable final T value) {, +      @Override, +      public T call() {, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/CollectionFuture.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +      this.values =, +          futures.isEmpty(), +              ? ImmutableList.<Optional<V>>of(), +        // Some other future failed or has been cancelled, causing this one to also be cancelled or, +        // have an exception set. This should only happen if allMustSucceed is true or if the output, +        // itself has been cancelled., +        checkState(, +            allMustSucceed || isCancelled(), "Future was done before all dependencies completed");, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Callables.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * Creates a {@code Callable} which immediately returns a preset value each time it is called., +  public static <T> Callable<T> returning(@Nullable final T value) {, +      @Override, +      public T call() {, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/CollectionFuture.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +      this.values =, +          futures.isEmpty(), +              ? ImmutableList.<Optional<V>>of(), +        // Some other future failed or has been cancelled, causing this one to also be cancelled or, +        // have an exception set. This should only happen if allMustSucceed is true or if the output, +        // itself has been cancelled., +        checkState(, +            allMustSucceed || isCancelled(), "Future was done before all dependencies completed");, +++ b/guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Futures.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., +   * Creates a {@code ListenableFuture} which has its value set immediately upon construction. The, +   * getters just return the value. This {@code Future} can't be canceled or timed out and its, +   * {@code isDone()} method always returns {@code true}., +   * Returns a {@code ListenableFuture} which has an exception set immediately upon construction., +   * <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always, +   * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code, +   * Throwable} wrapped in an {@code ExecutionException}., +  public static <V> ListenableFuture<V> immediateFailedFuture(Throwable throwable) {, +   * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the, +   * primary input fails, from the {@code Future} provided by the {@code fallback}. {@link, +   * FutureFallback#create} is not invoked until the primary input has failed, so if the primary, +   * input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an, +   * exception is thrown, this exception is used as the result of the output {@code Future}., +   * <p>Below is an example of a fallback that returns a default value if an exception occurs:, +   * <p>The fallback can also choose to propagate the original exception when desired:, +   * <p>This overload, which does not accept an executor, uses {@code directExecutor}, a dangerous, +   * choice in some cases. See the discussion in the {@link ListenableFuture#addListener, +   * ListenableFuture.addListener} documentation. The documentation's warnings about "lightweight, +   * listeners" refer here to the work done during {@code FutureFallback.create}, not to any work, +   * done to complete the returned {@code Future}., +   * @param fallback the {@link FutureFallback} implementation to be called if {@code input} fails, +   * @deprecated Use {@link #catchingAsync(ListenableFuture, Class, AsyncFunction), +   *     catchingAsync(input, Throwable.class, fallbackImplementedAsAnAsyncFunction)}, usually, +   *     replacing {@code Throwable.class} with the specific type you want to handle. This method, +      ListenableFuture<? extends V> input, FutureFallback<? extends V> fallback) {, +   * Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the, +   * primary input fails, from the {@code Future} provided by the {@code fallback}. {@link, +   * FutureFallback#create} is not invoked until the primary input has failed, so if the primary, +   * input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an, +   * exception is thrown, this exception is used as the result of the output {@code Future}.]