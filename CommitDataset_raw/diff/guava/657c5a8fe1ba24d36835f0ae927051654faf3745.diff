[+++ b/guava/src/com/google/common/graph/Graph.java, +  /**, +   * Returns true if the edges in this graph are directed. Directed edges connect a {@link, +   * Endpoints#source() source node} to a {@link Endpoints#source() target node}, while undirected, +   * edges connect a pair of nodes to each other., +   */, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}., +   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}., +   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code, +   * node} has an incident self-loop, 0 otherwise)., +   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeB, nodeA)}., +   *, +   * <p>In an undirected graph, this is equal to {@code edgeValueOrDefault(nodeB, nodeA,, +   * defaultValue)}., +   *, +++ b/guava/src/com/google/common/graph/Graph.java, +  /**, +   * Returns true if the edges in this graph are directed. Directed edges connect a {@link, +   * Endpoints#source() source node} to a {@link Endpoints#source() target node}, while undirected, +   * edges connect a pair of nodes to each other., +   */, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}., +   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}., +   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code, +   * node} has an incident self-loop, 0 otherwise)., +   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeB, nodeA)}., +   *, +   * <p>In an undirected graph, this is equal to {@code edgeValueOrDefault(nodeB, nodeA,, +   * defaultValue)}., +   *, +++ b/guava/src/com/google/common/graph/MutableBasicGraph.java, +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present. In an, +   * undirected graph, the edge will also connect {@code nodeB} to {@code nodeA}., +++ b/guava/src/com/google/common/graph/Graph.java, +  /**, +   * Returns true if the edges in this graph are directed. Directed edges connect a {@link, +   * Endpoints#source() source node} to a {@link Endpoints#source() target node}, while undirected, +   * edges connect a pair of nodes to each other., +   */, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}., +   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}., +   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code, +   * node} has an incident self-loop, 0 otherwise)., +   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeB, nodeA)}., +   *, +   * <p>In an undirected graph, this is equal to {@code edgeValueOrDefault(nodeB, nodeA,, +   * defaultValue)}., +   *, +++ b/guava/src/com/google/common/graph/MutableBasicGraph.java, +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present. In an, +   * undirected graph, the edge will also connect {@code nodeB} to {@code nodeA}., +++ b/guava/src/com/google/common/graph/MutableGraph.java, +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present; associate, +   * that edge with {@code value}. In an undirected graph, the edge will also connect {@code nodeB}, +   * to {@code nodeA}., +++ b/guava/src/com/google/common/graph/Graph.java, +  /**, +   * Returns true if the edges in this graph are directed. Directed edges connect a {@link, +   * Endpoints#source() source node} to a {@link Endpoints#source() target node}, while undirected, +   * edges connect a pair of nodes to each other., +   */, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * <p>In an undirected graph, this is equivalent to {@link #adjacentNodes(Object)}., +   *, +   * edges". For that functionality, see {@link Graphs#reachableNodes(Graph, Object)}., +   * <p>For directed graphs, this is equal to {@code inDegree(node) + outDegree(node)}., +   * <p>For undirected graphs, this is equal to {@code adjacentNodes(node).size()} + (1 if {@code, +   * node} has an incident self-loop, 0 otherwise)., +   * <p>In an undirected graph, this is equal to {@code edgeValue(nodeB, nodeA)}., +   *, +   * <p>In an undirected graph, this is equal to {@code edgeValueOrDefault(nodeB, nodeA,, +   * defaultValue)}., +   *, +++ b/guava/src/com/google/common/graph/MutableBasicGraph.java, +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present. In an, +   * undirected graph, the edge will also connect {@code nodeB} to {@code nodeA}., +++ b/guava/src/com/google/common/graph/MutableGraph.java, +   * Adds an edge connecting {@code nodeA} to {@code nodeB} if one is not already present; associate, +   * that edge with {@code value}. In an undirected graph, the edge will also connect {@code nodeB}, +   * to {@code nodeA}., +++ b/guava/src/com/google/common/graph/MutableNetwork.java, +   * @return {@code true} iff the network was modified as a result of this call, +   * Adds {@code edge} connecting {@code nodeA} to {@code nodeB}. In an undirected network, the edge, +   * will also connect {@code nodeB} to {@code nodeA}., +   * <p>Behavior if {@code nodeA} and {@code nodeB} are not already present in this network is, +   * adding} {@code nodeA} and {@code nodeB} to the network (this is the behavior of the default, +   * this network {@link #isDirected()}, else in any order), then this method will have no effect.]