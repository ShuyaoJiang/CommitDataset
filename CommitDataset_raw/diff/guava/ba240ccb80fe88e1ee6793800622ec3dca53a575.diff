[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * for OpenJDK 1.7. It also can't be guaranteed that the method isn't, +   * @param expectedSize the number of entries you expect to add to the, +   *         expectedSize} entries without resizing, +   * Creates a {@code LinkedHashMap} instance, with a high enough, +   * "initial capacity" that it <i>should</i> hold {@code expectedSize}, +   * elements without growth. This behavior cannot be broadly guaranteed, but, +   * it is observed to be true for OpenJDK 1.7. It also can't be guaranteed, +   * that the method isn't inadvertently <i>oversizing</i> the returned map., +   *, +   * @param expectedSize the number of entries you expect to add to the, +   *        returned map, +   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold, +   *         {@code expectedSize} entries without resizing, +   * @throws IllegalArgumentException if {@code expectedSize} is negative, +   * @since 19.0, +   */, +  public static <K, V> LinkedHashMap<K, V> newLinkedHashMapWithExpectedSize(, +      int expectedSize) {, +    return new LinkedHashMap<K, V>(capacity(expectedSize));, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * for OpenJDK 1.7. It also can't be guaranteed that the method isn't, +   * @param expectedSize the number of entries you expect to add to the, +   *         expectedSize} entries without resizing, +   * Creates a {@code LinkedHashMap} instance, with a high enough, +   * "initial capacity" that it <i>should</i> hold {@code expectedSize}, +   * elements without growth. This behavior cannot be broadly guaranteed, but, +   * it is observed to be true for OpenJDK 1.7. It also can't be guaranteed, +   * that the method isn't inadvertently <i>oversizing</i> the returned map., +   *, +   * @param expectedSize the number of entries you expect to add to the, +   *        returned map, +   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold, +   *         {@code expectedSize} entries without resizing, +   * @throws IllegalArgumentException if {@code expectedSize} is negative, +   * @since 19.0, +   */, +  public static <K, V> LinkedHashMap<K, V> newLinkedHashMapWithExpectedSize(, +      int expectedSize) {, +    return new LinkedHashMap<K, V>(capacity(expectedSize));, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +      assertWontGrow(size,, +          Maps.newHashMapWithExpectedSize(size),, +          Maps.newHashMapWithExpectedSize(size));, +    }, +  }, +  /**, +   * Same test as above but for newLinkedHashMapWithExpectedSize, +   */, +  @GwtIncompatible("reflection"), +  public void testNewLinkedHashMapWithExpectedSize_wontGrow() throws Exception {, +    assertTrue(bucketsOf(Maps.newLinkedHashMapWithExpectedSize(0)) <= 1);, +, +    for (int size = 1; size < 200; size++) {, +      assertWontGrow(size,, +          Maps.newLinkedHashMapWithExpectedSize(size),, +          Maps.newLinkedHashMapWithExpectedSize(size));, +    }, +  }, +, +  @GwtIncompatible("reflection"), +  private static void assertWontGrow(, +      int size, HashMap<Object, Object> map1, HashMap<Object, Object> map2) throws Exception {, +    assertThat(bucketsOf(map1)), +        .named("table size after adding " + size + " elements"), +        .isEqualTo(initialBuckets);, +    assertThat(bucketsOf(map1)), +        .named("table size after adding " + size + " elements"), +        .isEqualTo(initialBuckets);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +   * for OpenJDK 1.7. It also can't be guaranteed that the method isn't, +   * @param expectedSize the number of entries you expect to add to the, +   *         expectedSize} entries without resizing, +   * Creates a {@code LinkedHashMap} instance, with a high enough, +   * "initial capacity" that it <i>should</i> hold {@code expectedSize}, +   * elements without growth. This behavior cannot be broadly guaranteed, but, +   * it is observed to be true for OpenJDK 1.7. It also can't be guaranteed, +   * that the method isn't inadvertently <i>oversizing</i> the returned map., +   *, +   * @param expectedSize the number of entries you expect to add to the, +   *        returned map, +   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold, +   *         {@code expectedSize} entries without resizing, +   * @throws IllegalArgumentException if {@code expectedSize} is negative, +   * @since 19.0, +   */, +  public static <K, V> LinkedHashMap<K, V> newLinkedHashMapWithExpectedSize(, +      int expectedSize) {, +    return new LinkedHashMap<K, V>(capacity(expectedSize));, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/MapsTest.java, +      assertWontGrow(size,]