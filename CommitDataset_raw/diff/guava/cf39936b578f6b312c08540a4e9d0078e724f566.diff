[+++ b/guava-tests/test/com/google/common/base/AbstractIteratorTest.java, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          public Integer computeNext() {, +            Integer unused = endOfData();, +      boolean unused = iter.hasNext();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +, +          @Override, +          public Integer computeNext() {, +              Integer unused = endOfData();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          protected Integer computeNext() {, +            boolean unused = hasNext();, +++ b/guava-tests/test/com/google/common/base/AbstractIteratorTest.java, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          public Integer computeNext() {, +            Integer unused = endOfData();, +      boolean unused = iter.hasNext();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +, +          @Override, +          public Integer computeNext() {, +              Integer unused = endOfData();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          protected Integer computeNext() {, +            boolean unused = hasNext();, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +      int unused = matcher.indexIn("", 1);, +      int unused = matcher.indexIn("", -1);, +      int unused = matcher.indexIn(s, s.length() + 1);, +      int unused = matcher.indexIn(s, -1);, +++ b/guava-tests/test/com/google/common/base/AbstractIteratorTest.java, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          public Integer computeNext() {, +            Integer unused = endOfData();, +      boolean unused = iter.hasNext();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +, +          @Override, +          public Integer computeNext() {, +              Integer unused = endOfData();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          protected Integer computeNext() {, +            boolean unused = hasNext();, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +      int unused = matcher.indexIn("", 1);, +      int unused = matcher.indexIn("", -1);, +      int unused = matcher.indexIn(s, s.length() + 1);, +      int unused = matcher.indexIn(s, -1);, +++ b/guava/src/com/google/common/base/AbstractIterator.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +  @CanIgnoreReturnValue, +++ b/guava-tests/test/com/google/common/base/AbstractIteratorTest.java, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          public Integer computeNext() {, +            Integer unused = endOfData();, +      boolean unused = iter.hasNext();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +, +          @Override, +          public Integer computeNext() {, +              Integer unused = endOfData();, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          protected Integer computeNext() {, +            boolean unused = hasNext();, +++ b/guava-tests/test/com/google/common/base/CharMatcherTest.java, +      int unused = matcher.indexIn("", 1);, +      int unused = matcher.indexIn("", -1);, +      int unused = matcher.indexIn(s, s.length() + 1);, +      int unused = matcher.indexIn(s, -1);, +++ b/guava/src/com/google/common/base/AbstractIterator.java, +import com.google.errorprone.annotations.CanIgnoreReturnValue;, +  @CanIgnoreReturnValue, +++ b/guava/src/com/google/common/base/Ascii.java, +++ b/guava-tests/test/com/google/common/base/AbstractIteratorTest.java, +    Iterator<Integer> iter =, +        new AbstractIterator<Integer>() {, +          @Override, +          public Integer computeNext() {, +            Integer unused = endOfData();]