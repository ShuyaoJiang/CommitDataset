[+++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.hasEdgeConnecting(predecessor, node)).isTrue();, +        assertThat(graph.hasEdgeConnecting(node, successor)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.hasEdgeConnecting(predecessor, node)).isTrue();, +        assertThat(graph.hasEdgeConnecting(node, successor)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isFalse();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.hasEdgeConnecting(predecessor, node)).isTrue();, +        assertThat(graph.hasEdgeConnecting(node, successor)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isFalse();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +      for (Integer otherNode : graph.nodes()) {, +        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);, +        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);, +      }, +++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.hasEdgeConnecting(predecessor, node)).isTrue();, +        assertThat(graph.hasEdgeConnecting(node, successor)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isFalse();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +      for (Integer otherNode : graph.nodes()) {, +        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);, +        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);, +      }, +++ b/android/guava/src/com/google/common/graph/AbstractBaseGraph.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  @Override, +  public boolean hasEdgeConnecting(N nodeU, N nodeV) {, +    checkNotNull(nodeU);, +    checkNotNull(nodeV);, +    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);, +  }, +++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.hasEdgeConnecting(predecessor, node)).isTrue();, +        assertThat(graph.hasEdgeConnecting(node, successor)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isFalse();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +      for (Integer otherNode : graph.nodes()) {, +        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);, +        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);, +      }, +++ b/android/guava/src/com/google/common/graph/AbstractBaseGraph.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  @Override, +  public boolean hasEdgeConnecting(N nodeU, N nodeV) {, +    checkNotNull(nodeU);, +    checkNotNull(nodeV);, +    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);, +  }, +++ b/android/guava/src/com/google/common/graph/AbstractNetwork.java, +  public boolean hasEdgeConnecting(N nodeU, N nodeV) {, +    return !edgesConnecting(nodeU, nodeV).isEmpty();, +  }, +, +  @Override, +++ b/android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +        assertThat(graph.hasEdgeConnecting(predecessor, node)).isTrue();, +        assertThat(graph.hasEdgeConnecting(node, successor)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isFalse();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +              assertThat(network.hasEdgeConnecting(node, otherNode)).isTrue();, +++ b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java, +      for (Integer otherNode : graph.nodes()) {, +        boolean hasEdge = graph.hasEdgeConnecting(node, otherNode);, +        assertThat(hasEdge).isEqualTo(asGraph.hasEdgeConnecting(node, otherNode));, +        assertThat(graph.edgeValueOrDefault(node, otherNode, null) != null).isEqualTo(hasEdge);, +      }, +++ b/android/guava/src/com/google/common/graph/AbstractBaseGraph.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +  @Override, +  public boolean hasEdgeConnecting(N nodeU, N nodeV) {, +    checkNotNull(nodeU);, +    checkNotNull(nodeV);, +    return nodes().contains(nodeU) && successors(nodeU).contains(nodeV);, +  }, +++ b/android/guava/src/com/google/common/graph/AbstractNetwork.java, +  public boolean hasEdgeConnecting(N nodeU, N nodeV) {, +    return !edgesConnecting(nodeU, nodeV).isEmpty();, +  }, +]