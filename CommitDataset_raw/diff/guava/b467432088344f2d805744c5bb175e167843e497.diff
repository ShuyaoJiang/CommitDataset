[+++ b/guava-gwt/test/com/google/common/collect/testing/IteratorTesterTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/testing/IteratorTesterTest_gwt.java, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java, +        stimuli[i].executeAndCompare(reference, target);, +        verify(reference.getElements());, +  private <T extends Iterator<E>> void internalExecuteAndCompare(, +      T reference, T target, IteratorOperation method) {, +      return;, +    abstract void executeAndCompare(ListIterator<E> reference, T target);, +  Stimulus<E, Iterator<E>> hasNext =, +      new Stimulus<E, Iterator<E>>("hasNext") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {, +  Stimulus<E, Iterator<E>> next =, +      new Stimulus<E, Iterator<E>>("next") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {, +          internalExecuteAndCompare(reference, target, NEXT_METHOD);, +  Stimulus<E, Iterator<E>> remove =, +      new Stimulus<E, Iterator<E>>("remove") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {, +          internalExecuteAndCompare(reference, target, REMOVE_METHOD);, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +          internalExecuteAndCompare(reference, target, PREVIOUS_METHOD);, +  Stimulus<E, ListIterator<E>> add =, +      new Stimulus<E, ListIterator<E>>("add") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +          internalExecuteAndCompare(reference, target, newAddMethod());, +  Stimulus<E, ListIterator<E>> set =, +      new Stimulus<E, ListIterator<E>>("set") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +          internalExecuteAndCompare(reference, target, newSetMethod());, +++ b/guava-gwt/test/com/google/common/collect/testing/IteratorTesterTest_gwt.java, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java, +        stimuli[i].executeAndCompare(reference, target);, +        verify(reference.getElements());, +  private <T extends Iterator<E>> void internalExecuteAndCompare(, +      T reference, T target, IteratorOperation method) {, +      return;, +    abstract void executeAndCompare(ListIterator<E> reference, T target);, +  Stimulus<E, Iterator<E>> hasNext =, +      new Stimulus<E, Iterator<E>>("hasNext") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {, +  Stimulus<E, Iterator<E>> next =, +      new Stimulus<E, Iterator<E>>("next") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {, +          internalExecuteAndCompare(reference, target, NEXT_METHOD);, +  Stimulus<E, Iterator<E>> remove =, +      new Stimulus<E, Iterator<E>>("remove") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {, +          internalExecuteAndCompare(reference, target, REMOVE_METHOD);, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +          internalExecuteAndCompare(reference, target, PREVIOUS_METHOD);, +  Stimulus<E, ListIterator<E>> add =, +      new Stimulus<E, ListIterator<E>>("add") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +          internalExecuteAndCompare(reference, target, newAddMethod());, +  Stimulus<E, ListIterator<E>> set =, +      new Stimulus<E, ListIterator<E>>("set") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, ListIterator<E> target) {, +          internalExecuteAndCompare(reference, target, newSetMethod());, +++ b/guava-testlib/src/com/google/common/collect/testing/testers/ListListIteratorTester.java, +++ b/guava-gwt/test/com/google/common/collect/testing/IteratorTesterTest_gwt.java, +++ b/guava-testlib/src/com/google/common/collect/testing/AbstractIteratorTester.java, +        stimuli[i].executeAndCompare(reference, target);, +        verify(reference.getElements());, +  private <T extends Iterator<E>> void internalExecuteAndCompare(, +      T reference, T target, IteratorOperation method) {, +      return;, +    abstract void executeAndCompare(ListIterator<E> reference, T target);, +  Stimulus<E, Iterator<E>> hasNext =, +      new Stimulus<E, Iterator<E>>("hasNext") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {, +  Stimulus<E, Iterator<E>> next =, +      new Stimulus<E, Iterator<E>>("next") {, +        @Override, +        void executeAndCompare(ListIterator<E> reference, Iterator<E> target) {]