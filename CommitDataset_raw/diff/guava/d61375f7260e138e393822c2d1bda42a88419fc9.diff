[+++ b/android/guava-tests/test/com/google/common/util/concurrent/StripedTest.java, +        Striped.custom(100, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +        Striped.custom(256, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +++ b/android/guava-tests/test/com/google/common/util/concurrent/StripedTest.java, +        Striped.custom(100, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +        Striped.custom(256, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +++ b/android/guava/src/com/google/common/util/concurrent/Striped.java, +   * Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock, +   * is obtained from the passed supplier., +   *, +   * @param stripes the minimum number of stripes (locks) required, +   * @param supplier a {@code Supplier<L>} object to obtain locks from, +   * @return a new {@code Striped<L>}, +   */, +  static <L> Striped<L> custom(int stripes, Supplier<L> supplier) {, +    return new CompactStriped<>(stripes, supplier);, +  }, +, +  /**, +    return custom(stripes, new Supplier<Lock>() {, +    return custom(, +    return custom(stripes, READ_WRITE_LOCK_SUPPLIER);, +++ b/android/guava-tests/test/com/google/common/util/concurrent/StripedTest.java, +        Striped.custom(100, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +        Striped.custom(256, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +++ b/android/guava/src/com/google/common/util/concurrent/Striped.java, +   * Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock, +   * is obtained from the passed supplier., +   *, +   * @param stripes the minimum number of stripes (locks) required, +   * @param supplier a {@code Supplier<L>} object to obtain locks from, +   * @return a new {@code Striped<L>}, +   */, +  static <L> Striped<L> custom(int stripes, Supplier<L> supplier) {, +    return new CompactStriped<>(stripes, supplier);, +  }, +, +  /**, +    return custom(stripes, new Supplier<Lock>() {, +    return custom(, +    return custom(stripes, READ_WRITE_LOCK_SUPPLIER);, +++ b/guava-tests/test/com/google/common/util/concurrent/StripedTest.java, +        Striped.custom(100, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +        Striped.custom(256, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +++ b/android/guava-tests/test/com/google/common/util/concurrent/StripedTest.java, +        Striped.custom(100, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +        Striped.custom(256, new Supplier<Lock>() {, +          @Override, +          public Lock get() {, +            return new ReentrantLock(true);, +          }, +        }),, +++ b/android/guava/src/com/google/common/util/concurrent/Striped.java, +   * Creates a {@code Striped<L>} with eagerly initialized, strongly referenced locks. Every lock, +   * is obtained from the passed supplier.]