[+++ b/guava/src/com/google/common/base/CharMatcher.java, +          .withToString("CharMatcher.WHITESPACE"), +          .withToString("CharMatcher.BREAKING_WHITESPACE"), +  public static final CharMatcher ASCII = inRange('\0', '\u007f'), +      .withToString("CharMatcher.ASCII");, +    DIGIT = digit.withToString("CharMatcher.DIGIT").precomputed();, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_DIGIT";, +    }, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_LETTER";, +    }, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_LETTER_OR_DIGIT";, +    }, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_UPPER_CASE";, +    }, +, +    @Override public String toString() {, +      return "CharMatcher.JAVA_LOWER_CASE";, +    }, +      inRange('\u0000', '\u001f').or(inRange('\u007f', '\u009f')), +      .withToString("CharMatcher.JAVA_ISO_CONTROL");, +      .withToString("CharMatcher.INVISIBLE"), +      .withToString("CharMatcher.SINGLE_WIDTH"), +, +        @Override public String toString() {, +          return "CharMatcher.ANY";, +        }, +, +        @Override public String toString() {, +          return "CharMatcher.NONE";, +        }, +, +      @Override public String toString() {, +        return new StringBuilder("CharMatcher.is("), +            .append(Integer.toHexString(match)), +            .append(")"), +            .toString();, +      }, +, +      @Override public String toString() {, +        return new StringBuilder("CharMatcher.isNot("), +            .append(Integer.toHexString(match)), +            .append(")"), +            .toString();, +      }, +, +      @Override public String toString() {, +        return new StringBuilder("CharMatcher.anyOf(\"").append(chars).append("\")").toString();, +      }, +, +      @Override public String toString() {, +        return new StringBuilder("CharMatcher.inRange("), +            .append(Integer.toHexString(startInclusive)), +            .append(", "), +            .append(Integer.toHexString(endInclusive)), +            .append(")"), +            .toString();, +      }, +, +      @Override public String toString() {, +        return new StringBuilder("CharMatcher.forPredicate("), +            .append(predicate), +            .append(')'), +            .toString();, +      }, +, +      @Override public String toString() {, +        return original + ".negate()";, +      }, +, +    @Override public String toString() {, +      StringBuilder builder = new StringBuilder("CharMatcher.and(");, +      Joiner.on(", ").appendTo(builder, components);, +      return builder.append(')').toString();, +    }, +, +    @Override public String toString() {, +      StringBuilder builder = new StringBuilder("CharMatcher.or(");, +      Joiner.on(", ").appendTo(builder, components);, +      return builder.append(')').toString();, +    }, +    final CharMatcher outer = this;, +, +      @Override public String toString() {, +        return outer.toString();, +      }, +    };, +  }, +  , +  CharMatcher withToString(final String toString) {, +    final CharMatcher delegate = this;, +    return new CharMatcher() {, +      @Override]