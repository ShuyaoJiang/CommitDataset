[+++ b/guava-tests/test/com/google/common/collect/ComparatorsTest.java, +import com.google.common.testing.CollectorTester;, +import java.util.Arrays;, +  public void testLeastCollector() {, +    CollectorTester.of(Comparators.<Integer>least(2, Comparator.naturalOrder())), +        .expectCollects(Arrays.asList(1, 2), 1, 2, 3, 4, 5, 6), +        .expectCollects(Arrays.asList(1), 1), +        .expectCollects(Collections.emptyList());, +  }, +, +  public void testGreatestCollector() {, +    CollectorTester.of(Comparators.<Integer>greatest(2, Comparator.naturalOrder())), +        .expectCollects(Arrays.asList(6, 5), 1, 2, 3, 4, 5, 6), +        .expectCollects(Arrays.asList(1), 1), +        .expectCollects(Collections.emptyList());, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ComparatorsTest.java, +import com.google.common.testing.CollectorTester;, +import java.util.Arrays;, +  public void testLeastCollector() {, +    CollectorTester.of(Comparators.<Integer>least(2, Comparator.naturalOrder())), +        .expectCollects(Arrays.asList(1, 2), 1, 2, 3, 4, 5, 6), +        .expectCollects(Arrays.asList(1), 1), +        .expectCollects(Collections.emptyList());, +  }, +, +  public void testGreatestCollector() {, +    CollectorTester.of(Comparators.<Integer>greatest(2, Comparator.naturalOrder())), +        .expectCollects(Arrays.asList(6, 5), 1, 2, 3, 4, 5, 6), +        .expectCollects(Arrays.asList(1), 1), +        .expectCollects(Collections.emptyList());, +  }, +, +++ b/guava/src/com/google/common/collect/Comparators.java, +import static com.google.common.collect.CollectPreconditions.checkNonnegative;, +import java.util.List;, +import java.util.stream.Collector;, +   * Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified, +   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}., +   * Ties are broken arbitrarily., +   *, +   * For example:, +   *  <pre>   {@code, +   *, +   *   Stream.of("foo", "quux", "banana", "elephant"), +   *       .collect(least(2, comparingInt(String::length))), +   *   // returns {"foo", "quux"}}</pre>, +   *, +   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n), +   * (worst-case O(n log k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which, +   * currently takes O(n log n) time and O(n) space., +   *, +   * @throws IllegalArgumentException if {@code k < 0}, +   * @since 22.0, +   */, +  public static <T> Collector<T, ?, List<T>> least(int k, Comparator<? super T> comparator) {, +    checkNonnegative(k, "k");, +    checkNotNull(comparator);, +    return Collector.of(, +        () -> TopKSelector.<T>least(k, comparator),, +        TopKSelector::offer,, +        TopKSelector::combine,, +        TopKSelector::topK,, +        Collector.Characteristics.UNORDERED);, +  }, +, +  /**, +   * Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified, +   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}., +   * Ties are broken arbitrarily., +   *, +   * For example:, +   *  <pre>   {@code, +   *, +   *   Stream.of("foo", "quux", "banana", "elephant"), +   *       .collect(greatest(2, comparingInt(String::length))), +   *   // returns {"elephant", "banana"}}</pre>, +   *, +   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n), +   * (worst-case O(n log k)), as opposed to e.g., +   * {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently takes O(n log n) time, +   * and O(n) space., +   *, +   * @throws IllegalArgumentException if {@code k < 0}, +   * @since 22.0, +   */, +  public static <T> Collector<T, ?, List<T>> greatest(int k, Comparator<? super T> comparator) {, +    return least(k, comparator.reversed());, +  }, +, +  /**]