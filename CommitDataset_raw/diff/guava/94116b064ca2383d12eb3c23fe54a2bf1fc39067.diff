[+++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    Throwable thrownUnsafeFailure = null;, +    Throwable thrownAtomicReferenceFieldUpdaterFailure = null;, +      thrownUnsafeFailure = unsafeFailure;, +        thrownAtomicReferenceFieldUpdaterFailure = atomicReferenceFieldUpdaterFailure;, +, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownAtomicReferenceFieldUpdaterFailure != null) {, +      log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);, +      log.log(, +          Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);, +    }, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    Throwable thrownUnsafeFailure = null;, +    Throwable thrownAtomicReferenceFieldUpdaterFailure = null;, +      thrownUnsafeFailure = unsafeFailure;, +        thrownAtomicReferenceFieldUpdaterFailure = atomicReferenceFieldUpdaterFailure;, +, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownAtomicReferenceFieldUpdaterFailure != null) {, +      log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);, +      log.log(, +          Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);, +    }, +++ b/android/guava/src/com/google/common/util/concurrent/AggregateFutureState.java, +    Throwable thrownReflectionFailure = null;, +      thrownReflectionFailure = reflectionFailure;, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownReflectionFailure != null) {, +      log.log(Level.SEVERE, "SafeAtomicHelper is broken!", thrownReflectionFailure);, +    }, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    Throwable thrownUnsafeFailure = null;, +    Throwable thrownAtomicReferenceFieldUpdaterFailure = null;, +      thrownUnsafeFailure = unsafeFailure;, +        thrownAtomicReferenceFieldUpdaterFailure = atomicReferenceFieldUpdaterFailure;, +, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownAtomicReferenceFieldUpdaterFailure != null) {, +      log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);, +      log.log(, +          Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);, +    }, +++ b/android/guava/src/com/google/common/util/concurrent/AggregateFutureState.java, +    Throwable thrownReflectionFailure = null;, +      thrownReflectionFailure = reflectionFailure;, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownReflectionFailure != null) {, +      log.log(Level.SEVERE, "SafeAtomicHelper is broken!", thrownReflectionFailure);, +    }, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    Throwable thrownUnsafeFailure = null;, +    Throwable thrownAtomicReferenceFieldUpdaterFailure = null;, +      thrownUnsafeFailure = unsafeFailure;, +        thrownAtomicReferenceFieldUpdaterFailure = atomicReferenceFieldUpdaterFailure;, +, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownAtomicReferenceFieldUpdaterFailure != null) {, +      log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);, +      log.log(, +          Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);, +    }, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    Throwable thrownUnsafeFailure = null;, +    Throwable thrownAtomicReferenceFieldUpdaterFailure = null;, +      thrownUnsafeFailure = unsafeFailure;, +        thrownAtomicReferenceFieldUpdaterFailure = atomicReferenceFieldUpdaterFailure;, +, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownAtomicReferenceFieldUpdaterFailure != null) {, +      log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);, +      log.log(, +          Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);, +    }, +++ b/android/guava/src/com/google/common/util/concurrent/AggregateFutureState.java, +    Throwable thrownReflectionFailure = null;, +      thrownReflectionFailure = reflectionFailure;, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownReflectionFailure != null) {, +      log.log(Level.SEVERE, "SafeAtomicHelper is broken!", thrownReflectionFailure);, +    }, +++ b/guava/src/com/google/common/util/concurrent/AbstractFuture.java, +    Throwable thrownUnsafeFailure = null;, +    Throwable thrownAtomicReferenceFieldUpdaterFailure = null;, +      thrownUnsafeFailure = unsafeFailure;, +        thrownAtomicReferenceFieldUpdaterFailure = atomicReferenceFieldUpdaterFailure;, +, +    // Log after all static init is finished; if an installed logger uses any Futures methods, it, +    // shouldn't break in cases where reflection is missing/broken., +    if (thrownAtomicReferenceFieldUpdaterFailure != null) {, +      log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);, +      log.log(]