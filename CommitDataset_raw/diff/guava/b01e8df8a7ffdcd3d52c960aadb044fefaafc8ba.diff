[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Returns a fluent iterable containing {@code elements} in the specified order., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code Stream.of(elements)} or {@code, +   * Arrays.stream(elements)}., +   *, +   * @since 20.0 (since 18.0 as an overload of {@code of}), +   */, +  @Beta, +  @CheckReturnValue, +  public static <E> FluentIterable<E> from(E[] elements) {, +    return from(Arrays.asList(elements));, +  }, +, +  /**, +   * Returns a fluent iterable containing no elements., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}., +   *, +   * @since 20.0, +   */, +  @Beta, +  @CheckReturnValue, +  public static <E> FluentIterable<E> of() {, +    return FluentIterable.from(ImmutableList.<E>of());, +  }, +, +  /**, +  // TODO(kak): @deprecated Use {@link #from(E[])} instead., +   * Returns a fluent iterable containing the specified elements in order., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code Stream.of(...)}., +   *, +   * @since 20.0, +   */, +  @Beta, +  @CheckReturnValue, +  public static <E> FluentIterable<E> of(@Nullable E element, E... elements) {, +    return from(Lists.asList(element, elements));, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +   * Returns a fluent iterable containing {@code elements} in the specified order., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code Stream.of(elements)} or {@code, +   * Arrays.stream(elements)}., +   *, +   * @since 20.0 (since 18.0 as an overload of {@code of}), +   */, +  @Beta, +  @CheckReturnValue, +  public static <E> FluentIterable<E> from(E[] elements) {, +    return from(Arrays.asList(elements));, +  }, +, +  /**, +   * Returns a fluent iterable containing no elements., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code Stream.empty()}., +   *, +   * @since 20.0, +   */, +  @Beta, +  @CheckReturnValue, +  public static <E> FluentIterable<E> of() {, +    return FluentIterable.from(ImmutableList.<E>of());, +  }, +, +  /**, +  // TODO(kak): @deprecated Use {@link #from(E[])} instead., +   * Returns a fluent iterable containing the specified elements in order., +   *, +   * <p><b>{@code Stream} equivalent:</b> {@code Stream.of(...)}., +   *, +   * @since 20.0, +   */, +  @Beta, +  @CheckReturnValue, +  public static <E> FluentIterable<E> of(@Nullable E element, E... elements) {, +    return from(Lists.asList(element, elements));, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  public void testOf() {, +    assertEquals(ImmutableList.of(1, 2, 3, 4),, +        Lists.newArrayList(FluentIterable.of(1, 2, 3, 4)));, +  }, +, +  public void testFromArray() {, +    assertEquals(ImmutableList.of("1", "2", "3", "4"),, +        Lists.newArrayList(FluentIterable.from(new Object[] {"1", "2", "3", "4"})));, +  }, +, +  public void testOf_empty() {, +    assertEquals(ImmutableList.of(), Lists.newArrayList(FluentIterable.of()));, +  }, +, +  public void testSize0() {]