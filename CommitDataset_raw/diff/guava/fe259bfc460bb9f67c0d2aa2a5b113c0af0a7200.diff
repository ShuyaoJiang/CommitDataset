[+++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    NodeConnections<N, E> connectionsA = checkedConnections(nodeA);, +    return connectionsA.edgesConnecting(nodeB);, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    NodeConnections<N, E> connectionsA = checkedConnections(nodeA);, +    return connectionsA.edgesConnecting(nodeB);, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +    boolean containsA = containsNode(nodeA);, +    boolean containsB = containsNode(nodeB);, +    if (containsA && containsB && nodeConnections.get(nodeA).successors().contains(nodeB)) {, +    if (!containsA) {, +    NodeAdjacencies<N> connectionsA = nodeConnections.get(nodeA);, +    connectionsA.addSuccessor(nodeB);, +    if (!containsB) {, +    NodeAdjacencies<N> connectionsB = nodeConnections.get(nodeB);, +    connectionsB.addPredecessor(nodeA);, +    NodeAdjacencies<N> connectionsA = nodeConnections.get(nodeA);, +    if (connectionsA == null || !connectionsA.successors().contains(nodeB)) {, +    NodeAdjacencies<N> connectionsB = nodeConnections.get(nodeB);, +    connectionsA.removeSuccessor(nodeB);, +    connectionsB.removePredecessor(nodeA);, +++ b/guava/src/com/google/common/graph/AbstractConfigurableNetwork.java, +    NodeConnections<N, E> connectionsA = checkedConnections(nodeA);, +    return connectionsA.edgesConnecting(nodeB);, +++ b/guava/src/com/google/common/graph/ConfigurableMutableGraph.java, +    boolean containsA = containsNode(nodeA);, +    boolean containsB = containsNode(nodeB);, +    if (containsA && containsB && nodeConnections.get(nodeA).successors().contains(nodeB)) {, +    if (!containsA) {, +    NodeAdjacencies<N> connectionsA = nodeConnections.get(nodeA);, +    connectionsA.addSuccessor(nodeB);, +    if (!containsB) {, +    NodeAdjacencies<N> connectionsB = nodeConnections.get(nodeB);, +    connectionsB.addPredecessor(nodeA);, +    NodeAdjacencies<N> connectionsA = nodeConnections.get(nodeA);, +    if (connectionsA == null || !connectionsA.successors().contains(nodeB)) {, +    NodeAdjacencies<N> connectionsB = nodeConnections.get(nodeB);, +    connectionsA.removeSuccessor(nodeB);, +    connectionsB.removePredecessor(nodeA);, +++ b/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java, +    boolean containsA = containsNode(nodeA);, +    boolean containsB = containsNode(nodeB);, +      checkArgument(containsA && containsB && edgesConnecting(nodeA, nodeB).contains(edge),, +      checkArgument(!(containsA && containsB && successors(nodeA).contains(nodeB)),, +    if (!containsA) {, +    NodeConnections<N, E> connectionsA = nodeConnections.get(nodeA);, +    connectionsA.addOutEdge(edge, nodeB);, +    if (!containsB) {, +    NodeConnections<N, E> connectionsB = nodeConnections.get(nodeB);, +    connectionsB.addInEdge(edge, nodeA);]