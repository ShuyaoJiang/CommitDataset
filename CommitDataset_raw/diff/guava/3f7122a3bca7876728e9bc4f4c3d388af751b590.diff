[+++ b/guava/src/com/google/common/base/Converter.java, + * <p>Getting a converter:, + * <li>Use a provided converter implementation, such as {@link Enums#stringConverter}, {@link, + *     com.google.common.primitives.Ints#stringConverter Ints.stringConverter} or the {@linkplain, + *     #reverse reverse} views of these., + * <li>Convert between specific preset values using {@link, + *     com.google.common.collect.Maps#asConverter Maps.asConverter}. For example, use this to create, + *     a "fake" converter for a unit test. It is unnecessary (and confusing) to <i>mock</i> the, + *     {@code Converter} type using a mocking framework., + * <li>Otherwise, extend this class and implement its {@link #doForward} and {@link #doBackward}, + *     methods., + * <li>Convert one instance in the "forward" direction using {@code converter.convert(a)}., + * <li>Convert multiple instances "forward" using {@code converter.convertAll(as)}., + *     converter.reverse().convertAll(bs)}., + * <li><b>Do not</b> call {@link #doForward} or {@link #doBackward} directly; these exist only to be, + *     overridden., +    return new ConverterComposition<A, B, C>(this, checkNotNull(secondConverter));]