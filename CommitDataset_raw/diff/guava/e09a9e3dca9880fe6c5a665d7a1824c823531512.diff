[+++ b/guava/src/com/google/common/hash/Murmur3_32HashFunction.java, +import com.google.common.primitives.Ints;, +, +  private static final int C1 = 0xcc9e2d51;, +  private static final int C2 = 0x1b873593;, +, +  @Override public HashCode hashInt(int input) {, +    int k1 = mixK1(input);, +    int h1 = mixH1(seed, k1);, +    return fmix(h1, Ints.BYTES);, +  private static int mixK1(int k1) {, +    return k1;, +  }, +  private static int mixH1(int h1, int k1) {, +    return h1;, +  }, +, +  // Finalization mix - force all bits of a hash block to avalanche, +  private static HashCode fmix(int h1, int length) {, +    h1 ^= length;, +    h1 ^= h1 >>> 16;, +    h1 *= 0x85ebca6b;, +    h1 ^= h1 >>> 13;, +    h1 *= 0xc2b2ae35;, +    h1 ^= h1 >>> 16;, +    return HashCodes.fromInt(h1);, +  }, +, +  private static final class Murmur3_32Hasher extends AbstractStreamingHasher {, +    private static final int CHUNK_SIZE = 4;, +    private int h1;, +    private int length;, +, +    Murmur3_32Hasher(int seed) {, +      super(CHUNK_SIZE);, +      this.h1 = seed;, +      this.length = 0;, +    }, +, +    @Override protected void process(ByteBuffer bb) {, +      int k1 = Murmur3_32HashFunction.mixK1(bb.getInt());, +      h1 = Murmur3_32HashFunction.mixH1(h1, k1);, +      length += CHUNK_SIZE;, +      length += bb.remaining();, +          k1 = Murmur3_32HashFunction.mixK1(k1);, +      return Murmur3_32HashFunction.fmix(h1, length);]