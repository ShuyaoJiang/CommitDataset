[+++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    assertEquals(Types.subtypeOf(String.class), new TypeResolver(), +    assertEquals(Types.supertypeOf(String.class), new TypeResolver(), +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java, +    assertEquals(Types.subtypeOf(String.class), new TypeResolver(), +    assertEquals(Types.supertypeOf(String.class), new TypeResolver(), +++ b/guava-tests/test/com/google/common/reflect/TypeTokenTest.java, +import java.lang.reflect.Field;, +import java.lang.reflect.WildcardType;, +    class TwoTypeArgs<K, V> {}, +    class StringForFirstTypeArg<V> extends TwoTypeArgs<String, V> {}, +    TypeToken<TwoTypeArgs<?, ?>> superType =, +        new TypeToken<TwoTypeArgs<?, ?>>() {};, +    TypeToken<StringForFirstTypeArg<String>> subType =, +        new TypeToken<StringForFirstTypeArg<String>>() {};, +    assertEquals(new TypeToken<StringForFirstTypeArg<?>>() {},, +  private static class TwoTypeArgs<K, V> {, +    class InnerType<K2, V2> {}, +  private static class StringForFirstTypeArg<V> extends TwoTypeArgs<String, V> {, +    class StringInnerType<V2> extends InnerType<String, V2> {}, +  }, +  public void testGetSubtype_innerTypeOfGenericClassTranslatesOwnerTypeVars() {, +    TypeToken<TwoTypeArgs<?, ?>.InnerType<?, ?>> superType =, +        new TypeToken<TwoTypeArgs<?, ?>.InnerType<?, ?>>() {};, +    TypeToken<StringForFirstTypeArg<Integer>.StringInnerType<Long>> subType =, +        new TypeToken<StringForFirstTypeArg<Integer>.StringInnerType<Long>>() {};, +    ParameterizedType actualSubType = (ParameterizedType), +        superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(StringForFirstTypeArg.StringInnerType.class, actualSubType.getRawType());, +    assertThat(actualSubType.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);, +    ParameterizedType actualOwnerType = (ParameterizedType) actualSubType.getOwnerType();, +    assertEquals(StringForFirstTypeArg.class, actualOwnerType.getRawType());, +    class TwoTypeArgs<K, V> {}, +    class StringForFirstTypeArg<V> extends TwoTypeArgs<String, V> {}, +    class OuterTypeVar<V> extends StringForFirstTypeArg<List<V>> {}, +    TypeToken<StringForFirstTypeArg<List<?>>> type =, +        new TypeToken<StringForFirstTypeArg<List<?>>>() {};, +    assertEquals(new TypeToken<OuterTypeVar<?>>() {},, +        type.getSubtype(OuterTypeVar.class));, +    class TwoTypeArgs<K, V> {}, +    class StringForFirstTypeArg<V> extends TwoTypeArgs<String, V> {}, +    TypeToken<TwoTypeArgs<?, ? extends Number>> superType =, +        new TypeToken<TwoTypeArgs<?, ? extends Number>>() {};, +    TypeToken<StringForFirstTypeArg<Integer>> subType =, +        new TypeToken<StringForFirstTypeArg<Integer>>() {};, +    class SingleGenericExtendsBase<T> extends Base {}, +    TypeToken<SingleGenericExtendsBase<String>> subType =, +        new TypeToken<SingleGenericExtendsBase<String>>() {};, +    assertEquals(TypeToken.of(SingleGenericExtendsBase.class),, +    class SingleGenericExtendsBase<T> extends Base {}, +    class DoubleGenericExtendsSingleGeneric<T1, TUnused> extends SingleGenericExtendsBase<T1> {}, +    TypeToken<SingleGenericExtendsBase<?>> superType =, +        new TypeToken<SingleGenericExtendsBase<?>>() {};, +    TypeToken<DoubleGenericExtendsSingleGeneric<String, Integer>> subType =, +        new TypeToken<DoubleGenericExtendsSingleGeneric<String, Integer>>() {};, +    ParameterizedType actualSubType = (ParameterizedType), +        superType.getSubtype(subType.getRawType()).getType();, +    assertEquals(DoubleGenericExtendsSingleGeneric.class, actualSubType.getRawType());, +    assertThat(actualSubType.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);, +    class FourTypeArgs<T1, T2, T3, T4> {}, +    class ThreeTypeArgs<T1, T2, T3> extends FourTypeArgs<T1, T2, T3, String> {}, +    TypeToken<FourTypeArgs<T, Integer, ?, ?>> superType =, +        new TypeToken<FourTypeArgs<T, Integer, ?, ?>>() {};, +    TypeToken<ThreeTypeArgs<T, Integer, String>> subType =, +        new TypeToken<ThreeTypeArgs<T, Integer, String>>() {};, +    assertEquals(new TypeToken<ThreeTypeArgs<T, Integer, ?>>() {},, +    class BaseWithTypeVar<T> {}, +    class Outer<O> {, +      class Sub<X> extends BaseWithTypeVar<List<X>> {}, +      class Sub2<Y extends Sub2<Y>> extends BaseWithTypeVar<List<Y>> {}, +    }, +    ParameterizedType subtype = (ParameterizedType) new TypeToken<BaseWithTypeVar<List<?>>>() {}, +            .getSubtype(Outer.Sub.class), +            .getType();, +    assertEquals(Outer.Sub.class, subtype.getRawType());, +    assertThat(subtype.getActualTypeArguments()[0]).isInstanceOf(WildcardType.class);, +    ParameterizedType owner = (ParameterizedType) subtype.getOwnerType();, +    assertEquals(Outer.class, owner.getRawType());, +    new TypeToken<BaseWithTypeVar<List<?>>>() {}.getSubtype(Outer.Sub2.class);, +  }, +  , +  public void testGetSubtype_subtypeSameAsDeclaringType() throws Exception {, +    class Bar<T> {}, +    class SubBar<T> extends Bar<T> {, +      @SuppressWarnings("unused"), +      Bar<T> delegate;, +      , +      TypeToken<SubBar<T>> fieldTypeAsSubBar() {, +        return new TypeToken<SubBar<T>>() {};, +      }, +    }, +, +    Field delegateField = SubBar.class.getDeclaredField("delegate");, +    // barType is Bar<T>, a ParameterizedType with no generic arguments specified, +    TypeToken<?> barType = TypeToken.of(delegateField.getGenericType());, +    assertThat(barType.getSubtype(SubBar.class)), +        .isEqualTo(new SubBar<Void>().fieldTypeAsSubBar());, +        to.isSupertypeOf(from));, +        to.isSupertypeOf(from));, +++ b/guava-tests/test/com/google/common/reflect/TypeResolverTest.java]