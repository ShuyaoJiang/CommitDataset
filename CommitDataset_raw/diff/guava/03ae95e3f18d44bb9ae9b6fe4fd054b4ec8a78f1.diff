[+++ b/guava/src/com/google/common/io/ByteSource.java, +    return new ConcatenatedByteSource(sources);, +, +  private static final class ConcatenatedByteSource extends ByteSource {, +, +    private final ImmutableList<ByteSource> sources;, +, +    ConcatenatedByteSource(Iterable<? extends ByteSource> sources) {, +      this.sources = ImmutableList.copyOf(sources);, +    }, +, +    @Override, +    public InputStream openStream() throws IOException {, +      return new MultiInputStream(sources.iterator());, +    }, +, +    @Override, +    public long size() throws IOException {, +      long result = 0L;, +      for (ByteSource source : sources) {, +        result += source.size();, +      }, +      return result;, +    }, +, +    @Override, +    public String toString() {, +      return "ByteSource.concat(" + sources + ")";, +    }, +  }, +++ b/guava/src/com/google/common/io/ByteSource.java, +    return new ConcatenatedByteSource(sources);, +, +  private static final class ConcatenatedByteSource extends ByteSource {, +, +    private final ImmutableList<ByteSource> sources;, +, +    ConcatenatedByteSource(Iterable<? extends ByteSource> sources) {, +      this.sources = ImmutableList.copyOf(sources);, +    }, +, +    @Override, +    public InputStream openStream() throws IOException {, +      return new MultiInputStream(sources.iterator());, +    }, +, +    @Override, +    public long size() throws IOException {, +      long result = 0L;, +      for (ByteSource source : sources) {, +        result += source.size();, +      }, +      return result;, +    }, +, +    @Override, +    public String toString() {, +      return "ByteSource.concat(" + sources + ")";, +    }, +  }, +++ b/guava/src/com/google/common/io/ByteStreams.java, +import com.google.common.base.Function;, +import com.google.common.collect.Iterables;, +    Iterable<ByteSource> sources = Iterables.transform(suppliers,, +        new Function<InputSupplier<? extends InputStream>, ByteSource>() {, +          @Override, +          public ByteSource apply(InputSupplier<? extends InputStream> input) {, +            return asByteSource(input);, +        });, +    return asInputSupplier(ByteSource.concat(sources));, +++ b/guava/src/com/google/common/io/ByteSource.java, +    return new ConcatenatedByteSource(sources);, +, +  private static final class ConcatenatedByteSource extends ByteSource {, +, +    private final ImmutableList<ByteSource> sources;, +, +    ConcatenatedByteSource(Iterable<? extends ByteSource> sources) {, +      this.sources = ImmutableList.copyOf(sources);, +    }, +, +    @Override, +    public InputStream openStream() throws IOException {, +      return new MultiInputStream(sources.iterator());, +    }, +, +    @Override, +    public long size() throws IOException {, +      long result = 0L;, +      for (ByteSource source : sources) {, +        result += source.size();, +      }, +      return result;, +    }, +, +    @Override, +    public String toString() {, +      return "ByteSource.concat(" + sources + ")";, +    }, +  }]