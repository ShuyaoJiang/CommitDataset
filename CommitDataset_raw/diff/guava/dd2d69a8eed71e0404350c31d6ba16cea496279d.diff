[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest_gwt.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedMapTest_gwt.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeBasedTableTest_gwt.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeBasedTableTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/testing/Testing.gwt.xml, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeBasedTableTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/testing/Testing.gwt.xml, +++ b/guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.MapEntrySetTester;, +        MapEntrySetTester.class,, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeBasedTableTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/testing/Testing.gwt.xml, +++ b/guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.MapEntrySetTester;, +        MapEntrySetTester.class,, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java, +import java.util.AbstractSet;, +import java.util.Iterator;, +    return new AbstractSet<Entry<K, V>>() {, +      private Set<Entry<K, V>> delegate() {, +      @Override, +      public boolean contains(Object object) {, +        try {, +          return delegate().contains(object);, +        } catch (NullPointerException e) {, +          return false;, +        } catch (ClassCastException e) {, +          return false;, +        }, +      }, +, +      @Override, +      public Iterator<Entry<K, V>> iterator() {, +        return delegate().iterator();, +      }, +, +      @Override, +      public int size() {, +        return delegate().size();, +      }, +, +      @Override, +      public boolean remove(Object o) {, +        return delegate().remove(o);, +      }, +, +      @Override, +      public void clear() {, +        delegate().clear();, +      }, +    };, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +      if (Collections2.safeContains(backingSet(), key)) {, +        V value = Maps.safeGet(map(), key);, +++ b/guava-gwt/test/com/google/common/collect/ForwardingSortedMapImplementsMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/ImmutableSortedMapTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/TreeBasedTableTest_gwt.java, +++ b/guava-gwt/test/com/google/common/collect/testing/Testing.gwt.xml, +++ b/guava-testlib/src/com/google/common/collect/testing/MapTestSuiteBuilder.java, +import com.google.common.collect.testing.testers.MapEntrySetTester;, +        MapEntrySetTester.class,, +++ b/guava-testlib/src/com/google/common/collect/testing/SafeTreeMap.java, +import java.util.AbstractSet;, +import java.util.Iterator;, +    return new AbstractSet<Entry<K, V>>() {, +      private Set<Entry<K, V>> delegate() {, +      @Override, +      public boolean contains(Object object) {]