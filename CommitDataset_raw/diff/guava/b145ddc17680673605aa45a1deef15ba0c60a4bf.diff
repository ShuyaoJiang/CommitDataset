[+++ b/guava/src/com/google/common/cache/CacheBuilder.java, + * These features are all optional; caches can be created using all or none of them. By default, + * cache instances created by {@code CacheBuilder} will not perform any type of eviction., + *, +++ b/guava/src/com/google/common/cache/CacheBuilder.java, + * These features are all optional; caches can be created using all or none of them. By default, + * cache instances created by {@code CacheBuilder} will not perform any type of eviction., + *, +++ b/guava/src/com/google/common/collect/MapMaker.java, +   *     replaced by {@link com.google.common.cache.CacheBuilder#maximumSize}. Note that {@code, +   *     CacheBuilder} is simply an enhanced API for an implementation which was branched from, +   *     {@code MapMaker}., +   *     {@link com.google.common.cache.CacheBuilder#expireAfterWrite}. Note that {@code, +   *     CacheBuilder} is simply an enhanced API for an implementation which was branched from, +   *     {@code MapMaker}., +   *     replaced by {@link com.google.common.cache.CacheBuilder#expireAfterWrite}. Note that {@code, +   *     CacheBuilder} is simply an enhanced API for an implementation which was branched from, +   *     {@code MapMaker}., +   *     replaced by {@link com.google.common.cache.CacheBuilder#expireAfterAccess}. Note that, +   *     {@code CacheBuilder} is simply an enhanced API for an implementation which was branched, +   *     from {@code MapMaker}., +   *     replaced by {@link com.google.common.cache.CacheBuilder#removalListener}. Note that {@code, +   *     CacheBuilder} is simply an enhanced API for an implementation which was branched from, +   *     {@code MapMaker}., +   *     {@link AtomicLongMap}. Note that {@code CacheBuilder} is simply an enhanced API for an, +   *     implementation which was branched from {@code MapMaker}.]