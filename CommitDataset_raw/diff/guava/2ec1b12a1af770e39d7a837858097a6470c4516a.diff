[+++ b/guava/src/com/google/common/reflect/Parameter.java, +import com.google.common.collect.FluentIterable;, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {, +    return getDeclaredAnnotationsByType(annotationType);, +  }, +, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  @Nullable, +  public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationType) {, +    checkNotNull(annotationType);, +    return FluentIterable.from(annotations), +        .filter(annotationType), +        .first(), +        .orNull();, +  }, +, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  public <A extends Annotation> A[], +      getDeclaredAnnotationsByType(Class<A> annotationType) {, +    return FluentIterable.from(annotations), +        .filter(annotationType), +        .toArray(annotationType);, +  }, +, +++ b/guava/src/com/google/common/reflect/Parameter.java, +import com.google.common.collect.FluentIterable;, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {, +    return getDeclaredAnnotationsByType(annotationType);, +  }, +, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  @Nullable, +  public <A extends Annotation> A getDeclaredAnnotation(Class<A> annotationType) {, +    checkNotNull(annotationType);, +    return FluentIterable.from(annotations), +        .filter(annotationType), +        .first(), +        .orNull();, +  }, +, +  /**, +   * @since 17.0, +   */, +  // @Override on JDK8, +  public <A extends Annotation> A[], +      getDeclaredAnnotationsByType(Class<A> annotationType) {, +    return FluentIterable.from(annotations), +        .filter(annotationType), +        .toArray(annotationType);, +  }, +, +++ b/guava/src/com/google/common/reflect/Types.java, +import java.lang.reflect.AnnotatedElement;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +  private static final Function<Type, String> TYPE_NAME =, +          return JavaVersion.CURRENT.typeName(from);, +        builder.append(JavaVersion.CURRENT.typeName(ownerType)).append('.');, +          .append(COMMA_JOINER.join(transform(argumentsList, TYPE_NAME))), +        builder.append(" super ").append(JavaVersion.CURRENT.typeName(lowerBound));, +        builder.append(" extends ").append(JavaVersion.CURRENT.typeName(upperBound));, +  // TODO(benyu): Once we are on Java 8, delete this abstraction, +    },, +    JAVA8 {, +      @Override Type newArrayType(Type componentType) {, +        return JAVA7.newArrayType(componentType);, +      }, +      @Override Type usedInGenericType(Type type) {, +        return JAVA7.usedInGenericType(type);, +      }, +      @Override String typeName(Type type) {, +        try {, +          Method getTypeName = Type.class.getMethod("getTypeName");, +          return (String) getTypeName.invoke(type);, +        } catch (NoSuchMethodException e) {]