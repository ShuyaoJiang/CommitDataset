[+++ b/guava-tests/test/com/google/common/reflect/MutableTypeToInstanceMapTest.java, +  public void testEntrySetMutationThrows() {, +    map.putInstance(String.class, "test");, +    assertEquals(TypeToken.of(String.class), map.entrySet().iterator().next().getKey());, +    assertEquals("test", map.entrySet().iterator().next().getValue());, +    try {, +      map.entrySet().iterator().next().setValue(1);, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +  }, +, +  public void testEntrySetToArrayMutationThrows() {, +    map.putInstance(String.class, "test");, +    @SuppressWarnings("unchecked") // Should get a CCE later if cast is wrong, +    Entry<Object, Object> entry = (Entry<Object, Object>) map.entrySet().toArray()[0];, +    assertEquals(TypeToken.of(String.class), entry.getKey());, +    assertEquals("test", entry.getValue());, +    try {, +      entry.setValue(1);, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +  }, +, +  public void testEntrySetToTypedArrayMutationThrows() {, +    map.putInstance(String.class, "test");, +    @SuppressWarnings("unchecked") // Should get a CCE later if cast is wrong, +    Entry<Object, Object> entry = map.entrySet().toArray(new Entry[0])[0];, +    assertEquals(TypeToken.of(String.class), entry.getKey());, +    assertEquals("test", entry.getValue());, +    try {, +      entry.setValue(1);, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +  }, +, +++ b/guava-tests/test/com/google/common/reflect/MutableTypeToInstanceMapTest.java, +  public void testEntrySetMutationThrows() {, +    map.putInstance(String.class, "test");, +    assertEquals(TypeToken.of(String.class), map.entrySet().iterator().next().getKey());, +    assertEquals("test", map.entrySet().iterator().next().getValue());, +    try {, +      map.entrySet().iterator().next().setValue(1);, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +  }, +, +  public void testEntrySetToArrayMutationThrows() {, +    map.putInstance(String.class, "test");, +    @SuppressWarnings("unchecked") // Should get a CCE later if cast is wrong, +    Entry<Object, Object> entry = (Entry<Object, Object>) map.entrySet().toArray()[0];, +    assertEquals(TypeToken.of(String.class), entry.getKey());, +    assertEquals("test", entry.getValue());, +    try {, +      entry.setValue(1);, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +  }, +, +  public void testEntrySetToTypedArrayMutationThrows() {, +    map.putInstance(String.class, "test");, +    @SuppressWarnings("unchecked") // Should get a CCE later if cast is wrong, +    Entry<Object, Object> entry = map.entrySet().toArray(new Entry[0])[0];, +    assertEquals(TypeToken.of(String.class), entry.getKey());, +    assertEquals("test", entry.getValue());, +    try {, +      entry.setValue(1);, +      fail();, +    } catch (UnsupportedOperationException expected) {}, +  }, +, +++ b/guava/src/com/google/common/reflect/MutableTypeToInstanceMap.java, +import static com.google.common.base.Preconditions.checkNotNull;, +, +import com.google.common.base.Function;, +import com.google.common.collect.ForwardingMapEntry;, +import com.google.common.collect.ForwardingSet;, +import com.google.common.collect.Iterators;, +import java.util.Iterator;, +import java.util.Set;, +  @Override public Set<Entry<TypeToken<? extends B>, B>> entrySet() {, +    return UnmodifiableEntry.transformEntries(super.entrySet());, +  }, +, +, +  private static final class UnmodifiableEntry<K, V> extends ForwardingMapEntry<K, V> {, +, +    private final Entry<K, V> delegate;, +, +    static <K, V> Set<Entry<K, V>> transformEntries(final Set<Entry<K, V>> entries) {, +      return new ForwardingSet<Map.Entry<K, V>>() {, +        @Override protected Set<Entry<K, V>> delegate() {, +          return entries;, +        }, +        @Override public Iterator<Entry<K, V>> iterator() {, +          return UnmodifiableEntry.transformEntries(super.iterator());, +        }, +        @Override public Object[] toArray() {, +          return standardToArray();, +        }, +        @Override public <T> T[] toArray(T[] array) {]