[+++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.reachableNodes;, +import static com.google.common.graph.Graphs.transitiveClosure;, +  public void transitiveClosure_directedGraph() {, +    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(false).build();, +    directedGraph.putEdge(N1, N2);, +    directedGraph.putEdge(N1, N3);, +    directedGraph.putEdge(N2, N3);, +    directedGraph.addNode(N4);, +, +    MutableGraph<Integer> expectedClosure = GraphBuilder.directed().allowsSelfLoops(true).build();, +    expectedClosure.putEdge(N1, N1);, +    expectedClosure.putEdge(N1, N2);, +    expectedClosure.putEdge(N1, N3);, +    expectedClosure.putEdge(N2, N2);, +    expectedClosure.putEdge(N2, N3);, +    expectedClosure.putEdge(N3, N3);, +    expectedClosure.putEdge(N4, N4);, +, +    checkTransitiveClosure(directedGraph, expectedClosure);, +  }, +, +  @Test, +  public void transitiveClosure_undirectedGraph() {, +    MutableGraph<Integer> undirectedGraph =, +        GraphBuilder.undirected().allowsSelfLoops(false).build();, +    undirectedGraph.putEdge(N1, N2);, +    undirectedGraph.putEdge(N1, N3);, +    undirectedGraph.putEdge(N2, N3);, +    undirectedGraph.addNode(N4);, +, +    MutableGraph<Integer> expectedClosure = GraphBuilder.undirected().allowsSelfLoops(true).build();, +    expectedClosure.putEdge(N1, N1);, +    expectedClosure.putEdge(N1, N2);, +    expectedClosure.putEdge(N1, N3);, +    expectedClosure.putEdge(N2, N2);, +    expectedClosure.putEdge(N2, N3);, +    expectedClosure.putEdge(N3, N3);, +    expectedClosure.putEdge(N4, N4);, +, +    checkTransitiveClosure(undirectedGraph, expectedClosure);, +  }, +, +  @Test, +  public void transitiveClosure_directedPathGraph() {, +    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(false).build();, +    directedGraph.putEdge(N1, N2);, +    directedGraph.putEdge(N2, N3);, +    directedGraph.putEdge(N3, N4);, +, +    MutableGraph<Integer> expectedClosure = GraphBuilder.directed().allowsSelfLoops(true).build();, +    expectedClosure.putEdge(N1, N1);, +    expectedClosure.putEdge(N1, N2);, +    expectedClosure.putEdge(N1, N3);, +    expectedClosure.putEdge(N1, N4);, +    expectedClosure.putEdge(N2, N2);, +    expectedClosure.putEdge(N2, N3);, +    expectedClosure.putEdge(N2, N4);, +    expectedClosure.putEdge(N3, N3);, +    expectedClosure.putEdge(N3, N4);, +    expectedClosure.putEdge(N4, N4);, +, +    checkTransitiveClosure(directedGraph, expectedClosure);, +  }, +, +  @Test, +  public void transitiveClosure_undirectedPathGraph() {, +    MutableGraph<Integer> undirectedGraph =, +        GraphBuilder.undirected().allowsSelfLoops(false).build();, +    undirectedGraph.putEdge(N1, N2);, +    undirectedGraph.putEdge(N2, N3);, +    undirectedGraph.putEdge(N3, N4);, +, +    MutableGraph<Integer> expectedClosure = GraphBuilder.undirected().allowsSelfLoops(true).build();, +    expectedClosure.putEdge(N1, N1);, +    expectedClosure.putEdge(N1, N2);, +    expectedClosure.putEdge(N1, N3);, +    expectedClosure.putEdge(N1, N4);, +    expectedClosure.putEdge(N2, N2);, +    expectedClosure.putEdge(N2, N3);, +    expectedClosure.putEdge(N2, N4);, +    expectedClosure.putEdge(N3, N3);, +    expectedClosure.putEdge(N3, N4);, +    expectedClosure.putEdge(N4, N4);, +, +    checkTransitiveClosure(undirectedGraph, expectedClosure);, +  }, +, +  @Test, +  public void transitiveClosure_directedCycleGraph() {, +    MutableGraph<Integer> directedGraph = GraphBuilder.directed().allowsSelfLoops(false).build();, +    directedGraph.putEdge(N1, N2);, +    directedGraph.putEdge(N2, N3);, +    directedGraph.putEdge(N3, N4);, +    directedGraph.putEdge(N4, N1);, +, +    MutableGraph<Integer> expectedClosure = GraphBuilder.directed().allowsSelfLoops(true).build();, +    expectedClosure.putEdge(N1, N1);, +    expectedClosure.putEdge(N1, N2);, +    expectedClosure.putEdge(N1, N3);]