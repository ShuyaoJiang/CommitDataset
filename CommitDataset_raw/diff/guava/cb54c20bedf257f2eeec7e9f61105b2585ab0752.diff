[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultimap.java, +import com.google.common.collect.Maps.ImprovedAbstractMap;, +  private class AsMap extends ImprovedAbstractMap<K, Collection<V>> {, +    @Override, +    protected Set<Entry<K, Collection<V>>> createEntrySet() {, +      return new AsMapEntries();, +    @Override, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultimap.java, +import com.google.common.collect.Maps.ImprovedAbstractMap;, +  private class AsMap extends ImprovedAbstractMap<K, Collection<V>> {, +    @Override, +    protected Set<Entry<K, Collection<V>>> createEntrySet() {, +      return new AsMapEntries();, +    @Override, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java, +    // TODO(user): consider an optimized values() implementation, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractMapBasedMultimap.java, +import com.google.common.collect.Maps.ImprovedAbstractMap;, +  private class AsMap extends ImprovedAbstractMap<K, Collection<V>> {, +    @Override, +    protected Set<Entry<K, Collection<V>>> createEntrySet() {, +      return new AsMapEntries();, +    @Override, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ArrayTable.java, +    // TODO(user): consider an optimized values() implementation, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import static com.google.common.base.Predicates.compose;, +import static com.google.common.base.Predicates.in;, +import static com.google.common.base.Predicates.not;, +  static <K, V> Iterator<K> keyIterator(Iterator<Entry<K, V>> entryIterator) {, +    return Iterators.transform(entryIterator, Maps.<K>keyFunction());, +  }, +, +  static <K, V> Iterator<V> valueIterator(Iterator<Entry<K, V>> entryIterator) {, +    return Iterators.transform(entryIterator, Maps.<V>valueFunction());, +  }, +, +  static <K, V> UnmodifiableIterator<V> valueIterator(, +      final UnmodifiableIterator<Entry<K, V>> entryIterator) {, +    return new UnmodifiableIterator<V>() {, +      @Override, +      public boolean hasNext() {, +        return entryIterator.hasNext();, +      }, +, +      @Override, +      public V next() {, +        return entryIterator.next().getValue();, +      }, +    };, +  }, +, +    public Set<K> createKeySet() {, +    Collection<V> createValues() {, +  /**, +   * Views a function as an entry transformer that ignores the entry key., +   */, +  static <K, V1, V2> EntryTransformer<K, V1, V2>, +      asEntryTransformer(final Function<? super V1, V2> function) {, +    checkNotNull(function);, +    return new EntryTransformer<K, V1, V2>() {, +      public V2 transformEntry(K key, V1 value) {, +        return function.apply(value);, +      }, +    };, +  }, +, +  static <K, V1, V2> Function<V1, V2> asValueToValueFunction(, +      final EntryTransformer<? super K, V1, V2> transformer, final K key) {, +    checkNotNull(transformer);, +    return new Function<V1, V2>() {, +      @Override, +      public V2 apply(@Nullable V1 v1) {, +        return transformer.transformEntry(key, v1);, +      }, +    };, +  }, +, +  /**, +   * Views an entry transformer as a function from {@code Entry} to values., +   */, +  static <K, V1, V2> Function<Entry<K, V1>, V2> asEntryToValueFunction(, +      final EntryTransformer<? super K, ? super V1, V2> transformer) {, +    checkNotNull(transformer);, +    return new Function<Entry<K, V1>, V2>() {, +      @Override, +      public V2 apply(Entry<K, V1> entry) {, +        return transformer.transformEntry(entry.getKey(), entry.getValue());, +      }, +    };, +  }, +, +  /**, +   * Returns a view of an entry transformed by the specified transformer., +   */, +  static <V2, K, V1> Entry<K, V2> transformEntry(, +      final EntryTransformer<? super K, ? super V1, V2> transformer, final Entry<K, V1> entry) {, +    checkNotNull(transformer);]