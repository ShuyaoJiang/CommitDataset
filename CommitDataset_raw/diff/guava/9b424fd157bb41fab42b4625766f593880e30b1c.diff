[+++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertEquals(value, hashCode.padToLong());, +++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertEquals(value, hashCode.padToLong());, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  public void testPadToLong() {, +    assertEquals(0x1111111111111111L, HashCodes.fromLong(0x1111111111111111L).padToLong());, +    assertEquals(0x9999999999999999L, HashCodes.fromLong(0x9999999999999999L).padToLong());, +    assertEquals(0x0000000011111111L, HashCodes.fromInt(0x11111111).padToLong());, +    assertEquals(0x0000000099999999L, HashCodes.fromInt(0x99999999).padToLong());, +, +    byte[] longBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99,, +        (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    byte[] intBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(longBytes).padToLong());, +    assertEquals(0x0000000099999999L, HashCodes.fromBytesNoCopy(intBytes).padToLong());, +  }, +, +++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertEquals(value, hashCode.padToLong());, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  public void testPadToLong() {, +    assertEquals(0x1111111111111111L, HashCodes.fromLong(0x1111111111111111L).padToLong());, +    assertEquals(0x9999999999999999L, HashCodes.fromLong(0x9999999999999999L).padToLong());, +    assertEquals(0x0000000011111111L, HashCodes.fromInt(0x11111111).padToLong());, +    assertEquals(0x0000000099999999L, HashCodes.fromInt(0x99999999).padToLong());, +, +    byte[] longBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99,, +        (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    byte[] intBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(longBytes).padToLong());, +    assertEquals(0x0000000099999999L, HashCodes.fromBytesNoCopy(intBytes).padToLong());, +  }, +, +++ b/guava/src/com/google/common/hash/HashCode.java, +   * If this hashcode has enough bits, returns {@code asLong()}, otherwise returns a {@code long}, +   * value with {@code asInt()} as the least-significant four bytes and {@code 0x00} as, +   * each of the most-significant four bytes., +   *, +   * @since 14.0 (since 11.0 as {@code Hashing.padToLong(HashCode)}), +   */, +  public abstract long padToLong();, +, +  /**, +++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertEquals(value, hashCode.padToLong());, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  public void testPadToLong() {, +    assertEquals(0x1111111111111111L, HashCodes.fromLong(0x1111111111111111L).padToLong());, +    assertEquals(0x9999999999999999L, HashCodes.fromLong(0x9999999999999999L).padToLong());, +    assertEquals(0x0000000011111111L, HashCodes.fromInt(0x11111111).padToLong());, +    assertEquals(0x0000000099999999L, HashCodes.fromInt(0x99999999).padToLong());, +, +    byte[] longBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99,, +        (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    byte[] intBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(longBytes).padToLong());, +    assertEquals(0x0000000099999999L, HashCodes.fromBytesNoCopy(intBytes).padToLong());, +  }, +, +++ b/guava/src/com/google/common/hash/HashCode.java, +   * If this hashcode has enough bits, returns {@code asLong()}, otherwise returns a {@code long}, +   * value with {@code asInt()} as the least-significant four bytes and {@code 0x00} as, +   * each of the most-significant four bytes., +   *, +   * @since 14.0 (since 11.0 as {@code Hashing.padToLong(HashCode)}), +   */, +  public abstract long padToLong();, +, +  /**, +++ b/guava/src/com/google/common/hash/HashCodes.java, +import com.google.common.primitives.UnsignedInts;, +    @Override, +    public long padToLong() {, +      return UnsignedInts.toLong(hash);, +    }, +, +    @Override, +    public long padToLong() {, +      return hash;, +    }, +, +    @Override, +    public long padToLong() {, +      return (bytes.length < 8) ? UnsignedInts.toLong(asInt()) : asLong();, +    }, +, +++ b/guava-tests/test/com/google/common/hash/ChecksumHashFunctionTest.java, +    assertEquals(value, hashCode.padToLong());, +++ b/guava-tests/test/com/google/common/hash/HashCodesTest.java, +  public void testPadToLong() {, +    assertEquals(0x1111111111111111L, HashCodes.fromLong(0x1111111111111111L).padToLong());, +    assertEquals(0x9999999999999999L, HashCodes.fromLong(0x9999999999999999L).padToLong());, +    assertEquals(0x0000000011111111L, HashCodes.fromInt(0x11111111).padToLong());, +    assertEquals(0x0000000099999999L, HashCodes.fromInt(0x99999999).padToLong());, +, +    byte[] longBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99,, +        (byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    byte[] intBytes = {(byte) 0x99, (byte) 0x99, (byte) 0x99, (byte) 0x99};, +    assertEquals(0x9999999999999999L, HashCodes.fromBytesNoCopy(longBytes).padToLong());]