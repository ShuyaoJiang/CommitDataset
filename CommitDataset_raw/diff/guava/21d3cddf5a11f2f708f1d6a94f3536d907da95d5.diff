[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +public abstract class ImmutableMap<K, V> implements Map<K, V>, Serializable {, +  public boolean isEmpty() {, +    return size() == 0;, +  }, +, +  @Override, +    return value != null && Maps.containsValueImpl(this, value);, +    return new ImmutableMapKeySet<K, V>(this);, +  // esnickell is editing here, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +  }, +, +  @Override public boolean equals(@Nullable Object object) {, +    return Maps.equalsImpl(this, object);, +  }, +, +  @Override public int hashCode() {, +    // not caching hash code since it could change if map values are mutable, +    // in a way that modifies their hash codes, +    return entrySet().hashCode();, +  }, +, +  @Override public String toString() {, +    return Maps.toStringImpl(this);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +public abstract class ImmutableMap<K, V> implements Map<K, V>, Serializable {, +  public boolean isEmpty() {, +    return size() == 0;, +  }, +, +  @Override, +    return value != null && Maps.containsValueImpl(this, value);, +    return new ImmutableMapKeySet<K, V>(this);, +  // esnickell is editing here, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +  }, +, +  @Override public boolean equals(@Nullable Object object) {, +    return Maps.equalsImpl(this, object);, +  }, +, +  @Override public int hashCode() {, +    // not caching hash code since it could change if map values are mutable, +    // in a way that modifies their hash codes, +    return entrySet().hashCode();, +  }, +, +  @Override public String toString() {, +    return Maps.toStringImpl(this);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMapEntrySet.java, +  ImmutableMapEntrySet() {}, +  abstract ImmutableMap<K, V> map();, +    return map().size();, +      V value = map().get(entry.getKey());, +    return map().isPartialView();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java, +public abstract class ImmutableMap<K, V> implements Map<K, V>, Serializable {, +  public boolean isEmpty() {, +    return size() == 0;, +  }, +, +  @Override, +    return value != null && Maps.containsValueImpl(this, value);, +    return new ImmutableMapKeySet<K, V>(this);, +  // esnickell is editing here, +, +  ImmutableCollection<V> createValues() {, +    return new ImmutableMapValues<K, V>(this);, +  }, +, +  @Override public boolean equals(@Nullable Object object) {, +    return Maps.equalsImpl(this, object);, +  }, +, +  @Override public int hashCode() {, +    // not caching hash code since it could change if map values are mutable, +    // in a way that modifies their hash codes, +    return entrySet().hashCode();, +  }, +, +  @Override public String toString() {, +    return Maps.toStringImpl(this);, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMapEntrySet.java, +  ImmutableMapEntrySet() {}, +  abstract ImmutableMap<K, V> map();, +    return map().size();, +      V value = map().get(entry.getKey());, +    return map().isPartialView();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import java.util.AbstractMap;, +  abstract static class ImprovedAbstractMap<K, V> extends AbstractMap<K, V> {, +    /**]