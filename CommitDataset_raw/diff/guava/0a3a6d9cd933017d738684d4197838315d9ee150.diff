[+++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +  public void testNewMultimapWithCollectionRejectingNegativeElements() {, +    CountingSupplier<Set<Integer>> factory = new SetSupplier() {, +      @Override, +      public Set<Integer> getImpl() {, +        final Set<Integer> backing = super.getImpl();, +        return new ForwardingSet<Integer>() {, +          @Override, +          protected Set<Integer> delegate() {, +            return backing;, +          }, +, +          @Override, +          public boolean add(Integer element) {, +            checkArgument(element >= 0);, +            return super.add(element);, +          }, +, +          @Override, +          public boolean addAll(Collection<? extends Integer> collection) {, +            return standardAddAll(collection);, +          }, +        };, +      }, +    };, +, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    try {, +      multimap.put(Color.BLUE, -1);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +    multimap.put(Color.RED, 1);, +    multimap.put(Color.BLUE, 2);, +    try {, +      multimap.put(Color.GREEN, -1);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +    ASSERT.that(multimap.entries()).hasContentsAnyOrder(, +        Maps.immutableEntry(Color.RED, 1),, +        Maps.immutableEntry(Color.BLUE, 2));, +  }, +, +  private static class SetSupplier extends CountingSupplier<Set<Integer>> {, +    @Override public Set<Integer> getImpl() {, +    CountingSupplier<Set<Integer>> factory = new SetSupplier();, +    CountingSupplier<Set<Integer>> factory = new SetSupplier();, +++ b/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +  public void testNewMultimapWithCollectionRejectingNegativeElements() {, +    CountingSupplier<Set<Integer>> factory = new SetSupplier() {, +      @Override, +      public Set<Integer> getImpl() {, +        final Set<Integer> backing = super.getImpl();, +        return new ForwardingSet<Integer>() {, +          @Override, +          protected Set<Integer> delegate() {, +            return backing;, +          }, +, +          @Override, +          public boolean add(Integer element) {, +            checkArgument(element >= 0);, +            return super.add(element);, +          }, +, +          @Override, +          public boolean addAll(Collection<? extends Integer> collection) {, +            return standardAddAll(collection);, +          }, +        };, +      }, +    };, +, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    try {, +      multimap.put(Color.BLUE, -1);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +    multimap.put(Color.RED, 1);, +    multimap.put(Color.BLUE, 2);, +    try {, +      multimap.put(Color.GREEN, -1);, +      fail("Expected IllegalArgumentException");, +    } catch (IllegalArgumentException expected) {, +      // expected, +    }, +    ASSERT.that(multimap.entries()).hasContentsAnyOrder(, +        Maps.immutableEntry(Color.RED, 1),, +        Maps.immutableEntry(Color.BLUE, 2));, +  }, +]