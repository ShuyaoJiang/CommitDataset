[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    ClassPath classpath = ClassPath.from(getClass().getClassLoader());, +    for (ClassInfo classInfo : classpath.getClasses(ClassPathTest.class.getPackage())) {, +  public void testNulls() throws IOException {, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +    ClassPath classpath = ClassPath.from(getClass().getClassLoader());, +    for (ClassInfo classInfo : classpath.getClasses(ClassPathTest.class.getPackage())) {, +  public void testNulls() throws IOException {, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +  private final ImmutableSet<ClassInfo> classes;, +  private ClassPath(ImmutableSet<ClassInfo> classes) {, +    this.classes = classes;, +   *, +   * @throws IOException if the attempt to read class path resources (jar files or directories), +   *         failed., +  public static ClassPath from(ClassLoader classloader) throws IOException {, +    return new ClassPath(builder.build());, +  }, +, +  /** Returns all top level classes loadable from the current class path. */, +  public ImmutableSet<ClassInfo> getClasses() {, +    return classes;, +  }, +, +  /** Returns all top level classes in the package identified by {@code packageName}. */, +  public ImmutableSet<ClassInfo> getClasses(String packageName) {, +    checkNotNull(packageName);, +    ImmutableSet.Builder<ClassInfo> builder = ImmutableSet.builder();, +    for (ClassInfo classInfo : classes) {, +      if (classInfo.getPackageName().equals(packageName)) {, +        builder.add(classInfo);, +      }, +    }, +  /** Returns all top level classes in package {@code pkg}. */, +  public ImmutableSet<ClassInfo> getClasses(Package pkg) {, +    return getClasses(pkg.getName());, +  }, +]