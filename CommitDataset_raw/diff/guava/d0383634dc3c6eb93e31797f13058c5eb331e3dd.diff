[+++ b/android/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import java.util.NavigableSet;, +  public void testNewMultimapValueCollectionMatchesNavigableSet() {, +    Supplier<TreeSet<Integer>> factory = new SortedSetSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof NavigableSet);, +  }, +, +  public void testNewMultimapValueCollectionMatchesList() {, +    Supplier<LinkedList<Integer>> factory = new ListSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof List);, +  }, +, +++ b/android/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import java.util.NavigableSet;, +  public void testNewMultimapValueCollectionMatchesNavigableSet() {, +    Supplier<TreeSet<Integer>> factory = new SortedSetSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof NavigableSet);, +  }, +, +  public void testNewMultimapValueCollectionMatchesList() {, +    Supplier<LinkedList<Integer>> factory = new ListSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof List);, +  }, +, +++ b/android/guava/src/com/google/common/collect/AbstractListMultimap.java, +import java.util.Collections;, +    return Collections.emptyList();, +  }, +, +  @Override, +  <E> Collection<E> unmodifiableCollectionSubclass(Collection<E> collection) {, +    return Collections.unmodifiableList((List<E>) collection);, +  }, +, +  @Override, +  Collection<V> wrapCollection(K key, Collection<V> collection) {, +    return wrapList(key, (List<V>) collection, null);, +++ b/android/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import java.util.NavigableSet;, +  public void testNewMultimapValueCollectionMatchesNavigableSet() {, +    Supplier<TreeSet<Integer>> factory = new SortedSetSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof NavigableSet);, +  }, +, +  public void testNewMultimapValueCollectionMatchesList() {, +    Supplier<LinkedList<Integer>> factory = new ListSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof List);, +  }, +, +++ b/android/guava/src/com/google/common/collect/AbstractListMultimap.java, +import java.util.Collections;, +    return Collections.emptyList();, +  }, +, +  @Override, +  <E> Collection<E> unmodifiableCollectionSubclass(Collection<E> collection) {, +    return Collections.unmodifiableList((List<E>) collection);, +  }, +, +  @Override, +  Collection<V> wrapCollection(K key, Collection<V> collection) {, +    return wrapList(key, (List<V>) collection, null);, +++ b/android/guava/src/com/google/common/collect/AbstractMapBasedMultimap.java, +  <E> Collection<E> unmodifiableCollectionSubclass(Collection<E> collection) {, +  final List<V> wrapList(, +  class WrappedCollection extends AbstractCollection<V> {, +  class WrappedSet extends WrappedCollection implements Set<V> {, +  class WrappedSortedSet extends WrappedCollection implements SortedSet<V> {, +  class WrappedList extends WrappedCollection implements List<V> {, +++ b/android/guava-tests/test/com/google/common/collect/MultimapsTest.java, +import java.util.NavigableSet;, +  public void testNewMultimapValueCollectionMatchesNavigableSet() {, +    Supplier<TreeSet<Integer>> factory = new SortedSetSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof NavigableSet);, +  }, +, +  public void testNewMultimapValueCollectionMatchesList() {, +    Supplier<LinkedList<Integer>> factory = new ListSupplier();, +    Map<Color, Collection<Integer>> map = Maps.newEnumMap(Color.class);, +    Multimap<Color, Integer> multimap = Multimaps.newMultimap(map, factory);, +    assertTrue(multimap.get(Color.BLUE) instanceof List);, +  }, +, +++ b/android/guava/src/com/google/common/collect/AbstractListMultimap.java, +import java.util.Collections;, +    return Collections.emptyList();]