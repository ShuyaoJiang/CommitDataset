[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      return new Multimaps.Keys<K, V>(this);, +  static class Keys<K, V> extends AbstractMultiset<K> {, +    final Multimap<K, V> multimap;, +    , +    Keys(Multimap<K, V> multimap) {, +      this.multimap = multimap;, +    }, +          multimap.asMap().entrySet().iterator()) {, +      return multimap.asMap().size();, +        return multimap.isEmpty();, +          Collection<V> collection = multimap.asMap().get(entry.getElement());, +          Collection<V> collection = multimap.asMap().get(entry.getElement());, +      return multimap.containsKey(element);, +      return Maps.keyIterator(multimap.entries().iterator());, +        Collection<V> values = multimap.asMap().get(element);, +        values = multimap.asMap().get(element);, +      multimap.clear();, +      return multimap.keySet();, +  static class Values<K, V> extends AbstractCollection<V> {, +    final Multimap<K, V> multimap;, +    , +    Values(Multimap<K, V> multimap) {, +      this.multimap = multimap;, +    }, +      return Maps.valueIterator(multimap.entries().iterator());, +      return multimap.size();, +      return multimap.containsValue(o);, +      multimap.clear();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      return new Multimaps.Keys<K, V>(this);, +  static class Keys<K, V> extends AbstractMultiset<K> {, +    final Multimap<K, V> multimap;, +    , +    Keys(Multimap<K, V> multimap) {, +      this.multimap = multimap;, +    }, +          multimap.asMap().entrySet().iterator()) {, +      return multimap.asMap().size();, +        return multimap.isEmpty();, +          Collection<V> collection = multimap.asMap().get(entry.getElement());, +          Collection<V> collection = multimap.asMap().get(entry.getElement());, +      return multimap.containsKey(element);, +      return Maps.keyIterator(multimap.entries().iterator());, +        Collection<V> values = multimap.asMap().get(element);, +        values = multimap.asMap().get(element);, +      multimap.clear();, +      return multimap.keySet();, +  static class Values<K, V> extends AbstractCollection<V> {, +    final Multimap<K, V> multimap;, +    , +    Values(Multimap<K, V> multimap) {, +      this.multimap = multimap;, +    }, +      return Maps.valueIterator(multimap.entries().iterator());, +      return multimap.size();, +      return multimap.containsValue(o);, +      multimap.clear();, +++ b/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      return new Multimaps.Keys<K, V>(this);, +  static class Keys<K, V> extends AbstractMultiset<K> {, +    final Multimap<K, V> multimap;, +    , +    Keys(Multimap<K, V> multimap) {, +      this.multimap = multimap;, +    }, +          multimap.asMap().entrySet().iterator()) {, +      return multimap.asMap().size();, +        return multimap.isEmpty();, +          Collection<V> collection = multimap.asMap().get(entry.getElement());, +          Collection<V> collection = multimap.asMap().get(entry.getElement());, +      return multimap.containsKey(element);, +      return Maps.keyIterator(multimap.entries().iterator());, +        Collection<V> values = multimap.asMap().get(element);, +        values = multimap.asMap().get(element);, +      multimap.clear();, +      return multimap.keySet();, +  static class Values<K, V> extends AbstractCollection<V> {, +    final Multimap<K, V> multimap;, +    , +    Values(Multimap<K, V> multimap) {, +      this.multimap = multimap;, +    }, +      return Maps.valueIterator(multimap.entries().iterator());, +      return multimap.size();, +      return multimap.containsValue(o);, +      multimap.clear();, +++ b/guava-tests/test/com/google/common/collect/MultisetsCollectionTest.java, +++ b/guava-tests/test/com/google/common/collect/MultisetsTest.java, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Multimaps.java, +      return new Multimaps.Keys<K, V>(this);, +  static class Keys<K, V> extends AbstractMultiset<K> {, +    final Multimap<K, V> multimap;, +    , +    Keys(Multimap<K, V> multimap) {, +      this.multimap = multimap;, +    }, +          multimap.asMap().entrySet().iterator()) {, +      return multimap.asMap().size();]