[+++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +  <inherits name="com.google.common.io.Io"/>, +++ b/guava-gwt/test/com/google/common/collect/testModule.gwt.xml, +  <inherits name="com.google.common.io.Io"/>, +++ b/guava-tests/test/com/google/common/collect/MapsCollectionTest.java, +import com.google.common.base.Charsets;, +import com.google.common.collect.Maps.EntryTransformer;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.io.BaseEncoding;, +    suite.addTest(transformSuite());, +  , +  private static String encode(String str) {, +    return BaseEncoding.base64().encode(str.getBytes(Charsets.UTF_8));, +  }, +  , +  private static final Function<String, String> DECODE_FUNCTION = new Function<String, String>() {, +    @Override, +    public String apply(String input) {, +      return new String(BaseEncoding.base64().decode(input), Charsets.UTF_8);, +    }    , +  };, +  , +  private static final EntryTransformer<String, String, String> DECODE_ENTRY_TRANSFORMER = , +      new EntryTransformer<String, String, String>() {, +    @Override, +    public String transformEntry(String key, String value) {, +      return DECODE_FUNCTION.apply(value);, +    }, +  };, +, +  static TestSuite transformSuite() {, +    TestSuite suite = new TestSuite("Maps.transform");, +    suite.addTest(transformMapSuite());, +    suite.addTest(transformSortedMapSuite());, +    suite.addTest(transformNavigableMapSuite());, +    return suite;, +  }, +  , +  static TestSuite transformMapSuite() {, +    TestSuite suite = new TestSuite("TransformMap");, +    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {, +        @Override, +        protected Map<String, String> create(Entry<String, String>[] entries) {, +          Map<String, String> map = Maps.newLinkedHashMap();, +          for (Entry<String, String> entry : entries) {, +            map.put(entry.getKey(), encode(entry.getValue()));, +          }, +          return Maps.transformValues(map, DECODE_FUNCTION);, +        }, +      }), +      .named("Maps.transformValues[Map, Function]"), +      .withFeatures(, +          CollectionSize.ANY,, +          CollectionFeature.KNOWN_ORDER,, +          MapFeature.ALLOWS_NULL_KEYS,, +          MapFeature.SUPPORTS_REMOVE), +      .createTestSuite());, +    suite.addTest(MapTestSuiteBuilder.using(new TestStringMapGenerator() {, +        @Override, +        protected Map<String, String> create(Entry<String, String>[] entries) {, +          Map<String, String> map = Maps.newLinkedHashMap();, +          for (Entry<String, String> entry : entries) {, +            map.put(entry.getKey(), encode(entry.getValue()));, +          }, +          return Maps.transformEntries(map, DECODE_ENTRY_TRANSFORMER);, +        }, +      }), +      .named("Maps.transformEntries[Map, EntryTransformer]"), +      .withFeatures(, +          CollectionSize.ANY,, +          CollectionFeature.KNOWN_ORDER,, +          MapFeature.ALLOWS_NULL_KEYS,, +          MapFeature.SUPPORTS_REMOVE), +      .createTestSuite());, +    return suite;, +  }, +  , +  static TestSuite transformSortedMapSuite() {, +    TestSuite suite = new TestSuite("TransformSortedMap");, +    suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator() {, +        @Override, +        protected SortedMap<String, String> create(Entry<String, String>[] entries) {, +          SortedMap<String, String> map = new NonNavigableSortedMap();, +          for (Entry<String, String> entry : entries) {, +            map.put(entry.getKey(), encode(entry.getValue()));, +          }, +          return Maps.transformValues(map, DECODE_FUNCTION);, +        }, +      }), +      .named("Maps.transformValues[SortedMap, Function]"), +      .withFeatures(, +          CollectionSize.ANY,, +          CollectionFeature.KNOWN_ORDER,, +          MapFeature.SUPPORTS_REMOVE), +      .createTestSuite());, +    suite.addTest(SortedMapTestSuiteBuilder.using(new TestStringSortedMapGenerator() {, +        @Override, +        protected SortedMap<String, String> create(Entry<String, String>[] entries) {, +          SortedMap<String, String> map = new NonNavigableSortedMap();, +          for (Entry<String, String> entry : entries) {]