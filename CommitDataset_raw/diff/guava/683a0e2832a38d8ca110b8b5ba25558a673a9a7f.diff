[+++ b/guava-testlib/src/com/google/common/collect/testing/NavigableMapTestSuiteBuilder.java, +  public static final class NavigableMapSubmapTestMapGenerator<K, V>, +      extends SortedMapSubmapTestMapGenerator<K, V> {, +    public NavigableMapSubmapTestMapGenerator(, +        TestMapGenerator<K, V> delegate, Bound to, Bound from) {, +      super(delegate, to, from);, +    }, +, +    @Override NavigableMap<K, V> createSubMap(SortedMap<K, V> sortedMap, K firstExclusive,, +        K lastExclusive) {, +        return (NavigableMap<K, V>) super.createSubMap(map, firstExclusive, lastExclusive);, +      }, +  @Override, +  public NavigableMapTestSuiteBuilder<K, V> newBuilderUsing(, +      TestMapGenerator<K, V> delegate, Bound to, Bound from) {, +    return using(new NavigableMapSubmapTestMapGenerator<K, V>(delegate, to, from));, +++ b/guava-testlib/src/com/google/common/collect/testing/NavigableMapTestSuiteBuilder.java, +  public static final class NavigableMapSubmapTestMapGenerator<K, V>, +      extends SortedMapSubmapTestMapGenerator<K, V> {, +    public NavigableMapSubmapTestMapGenerator(, +        TestMapGenerator<K, V> delegate, Bound to, Bound from) {, +      super(delegate, to, from);, +    }, +, +    @Override NavigableMap<K, V> createSubMap(SortedMap<K, V> sortedMap, K firstExclusive,, +        K lastExclusive) {, +        return (NavigableMap<K, V>) super.createSubMap(map, firstExclusive, lastExclusive);, +      }, +  @Override, +  public NavigableMapTestSuiteBuilder<K, V> newBuilderUsing(, +      TestMapGenerator<K, V> delegate, Bound to, Bound from) {, +    return using(new NavigableMapSubmapTestMapGenerator<K, V>(delegate, to, from));, +++ b/guava-testlib/src/com/google/common/collect/testing/SortedMapTestSuiteBuilder.java, +  public enum Bound {, +    return newBuilderUsing(delegate, to, from), +        .named(parentBuilder.getName() + " subMap " + from + "-" + to), +        .withFeatures(features), +        .suppressing(parentBuilder.getSuppressedTests()), +        .createTestSuite();, +  }, +, +  /*, +   * TODO(cpovirk): surely we can find a less ugly solution than a class that accepts 3 parameters,, +   * exposes as many getters, does work in the constructor, and has both a superclass and a subclass, +   */, +  public static class SortedMapSubmapTestMapGenerator<K, V>, +      extends ForwardingTestMapGenerator<K, V> {, +    final Bound to;, +    final Bound from;, +    final K firstInclusive;, +    final K lastInclusive;, +    private final Comparator<Entry<K, V>> entryComparator;, +, +    public SortedMapSubmapTestMapGenerator(TestMapGenerator<K, V> delegate, Bound to, Bound from) {, +      super(delegate);, +      this.to = to;, +      this.from = from;, +, +      this.entryComparator = Helpers.entryComparator(emptyMap.comparator());, +      this.firstInclusive = samplesList.get(0).getKey();, +      this.lastInclusive = samplesList.get(samplesList.size() - 1).getKey();, +    }, +      return createSubMap(map, firstExclusive, lastExclusive);, +     * overridden in NavigableMapTestSuiteBuilder., +    Map<K, V> createSubMap(SortedMap<K, V> map, K firstExclusive, K lastExclusive) {, +    public final Bound getTo() {, +      return to;, +    }, +, +    public final Bound getFrom() {, +      return from;, +    }, +, +    public final TestMapGenerator<K, V> getInnerGenerator() {, +      return delegate;, +    }, +  }, +, +  SortedMapTestSuiteBuilder<K, V> newBuilderUsing(, +      TestMapGenerator<K, V> delegate, Bound to, Bound from) {, +    return using(new SortedMapSubmapTestMapGenerator<K, V>(delegate, to, from));, +  private static List<Entry<String, String>> getExtremeValues() {, +  // TODO(cpovirk): could something like this be used elsewhere, e.g., ReserializedListGenerator?, +    TestMapGenerator<K, V> delegate;]