[+++ b/guava/src/com/google/common/graph/Graph.java, + *   <li>If you would otherwise have duplicate edges (e.g. weighted edges represented by a Double),, + *       you can instead wrap the edges in a custom class that defers to {@link Object} for its, + *       {@code equals()} and {@code hashCode()} implementations., + * <li>Users that are not interested in edges as first-class objects have a couple of options:, + *   <ul>, + *   <li>pass in arbitrary Objects as edges: {@code addEdge(new Object(), n1, n2)}, + *   <li>create an implementation of (or subinterface of, or class delegating to) Graph, + *       that only exposes node-related methods., + *   </ul>, + * <li>Accessors which return collections may return views of the Graph. Modifications to the graph, + *     which affect a view (e.g. calling {@code addNode(n)} or {@code removeNode(n)} while iterating, + *     through {@code nodes()}) are not supported and may result in ConcurrentModificationException., + * <p>Notes for implementors:, + * <ul>, + * <li>For accessors that return a {@code Set}, there are several options for the set behavior,, + *     <li>Set is an immutable copy (e.g. {@code ImmutableSet}): attempts to modify the set in any, + *         way will throw an exception, and modifications to the graph will <b>not</b> be reflected, + *         in the set., + *     <li>Set is an unmodifiable view (e.g. {@code Collections.unmodifiableSet()}): attempts to, + *         modify the set in any way will throw an exception, and modifications to the graph will be, + *     <li>Set is a mutable copy: it may be modified, but modifications to the graph will <b>not</b>, + *         be reflected in the set, and vice versa., + *         reflected in the set (but modifications to the set will <b>not</b> be reflected in the, + *         graph)., + * <li>{@code Multimap}s are not sufficient internal data structures for Graph implementations, + *     that support isolated nodes (nodes that have no incident edges), due to their restriction, + *     that a key either maps to at least one value, or is not present in the {@code Multimap}., + * </ul>, + * <p>Examples of use:, + *   <li>{@code graph.nodes().contains(node)}, + *   // Visit nodes reachable from {@code node}., + *   void depthFirstTraverse(N node) {, + *     for (N neighbor : graph.adjacentNodes(node)) {, + *   // Update the shortest-path distances of the successors to {@code node}, + *   // in a directed graph (inner loop of Dijkstra's algorithm):, + *   void updateDistances(N node) {, + *     nodeDistance = distances.get(node);, + *     for (E outEdge : graph.outEdges(node)) {, + *       N target = graph.target(outEdge);, + *       double targetDistance = nodeDistance + outEdge.getWeight();, + *       if (targetDistance < distances.get(target)) {, + *         distances.put(target, targetDistance);]