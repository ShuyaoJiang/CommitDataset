[+++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatchingAsync_inputCancelledWithoutFallback() throws Exception {, +    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catchingAsync(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatching_inputCancelledWithoutFallback() throws Exception {, +    Function<IOException, Integer> fallback = unexpectedFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catching(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatchingAsync_inputCancelledWithoutFallback() throws Exception {, +    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catchingAsync(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatching_inputCancelledWithoutFallback() throws Exception {, +    Function<IOException, Integer> fallback = unexpectedFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catching(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +      setFuture(localInputFuture);, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatchingAsync_inputCancelledWithoutFallback() throws Exception {, +    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catchingAsync(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatching_inputCancelledWithoutFallback() throws Exception {, +    Function<IOException, Integer> fallback = unexpectedFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catching(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java, +      setFuture(localInputFuture);, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatchingAsync_inputCancelledWithoutFallback() throws Exception {, +    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catchingAsync(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatching_inputCancelledWithoutFallback() throws Exception {, +    Function<IOException, Integer> fallback = unexpectedFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catching(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatchingAsync_inputCancelledWithoutFallback() throws Exception {, +    AsyncFunction<Throwable, Integer> fallback = unexpectedAsyncFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catchingAsync(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +  @GwtIncompatible // non-Throwable exceptionType, +  public void testCatching_inputCancelledWithoutFallback() throws Exception {, +    Function<IOException, Integer> fallback = unexpectedFunction();, +    ListenableFuture<Integer> originalFuture = immediateCancelledFuture();, +    ListenableFuture<Integer> faultTolerantFuture =, +        catching(originalFuture, IOException.class, fallback, directExecutor());, +    assertTrue(faultTolerantFuture.isCancelled());, +  }, +, +++ b/android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java]