[+++ b/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java, +import java.math.BigInteger;, +, +  private static final ImmutableSet<Long> TEST_LONGS;, +    ImmutableSet.Builder<Long> testLongsBuilder = ImmutableSet.builder();, +      testIntsBuilder, +        .add(i), +        .add(force32(Integer.MIN_VALUE + i)), +      testLongsBuilder, +        .add((long) i), +        .add((long) Integer.MIN_VALUE + i), +        .add((long) Integer.MAX_VALUE + i), +        .add((1L << 32) + i);, +    TEST_LONGS = testLongsBuilder.build();, +  public void testValueOfLong() {, +    long min = 0;, +    long max = (1L << 32) - 1;, +    for (long value : TEST_LONGS) {, +      boolean expectSuccess = value >= min && value <= max;, +      try {, +        assertEquals(value, UnsignedInteger.valueOf(value).longValue());, +        assertTrue(expectSuccess);, +      } catch (IllegalArgumentException e) {, +        assertFalse(expectSuccess);, +      }, +    }, +  }, +  , +  public void testValueOfBigInteger() {, +    long min = 0;, +    long max = (1L << 32) - 1;, +    for (long value : TEST_LONGS) {, +      boolean expectSuccess = value >= min && value <= max;, +      try {, +        assertEquals(value, UnsignedInteger.valueOf(BigInteger.valueOf(value)), +            .longValue());, +        assertTrue(expectSuccess);, +      } catch (IllegalArgumentException e) {, +        assertFalse(expectSuccess);, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java, +import java.math.BigInteger;, +, +  private static final ImmutableSet<Long> TEST_LONGS;, +    ImmutableSet.Builder<Long> testLongsBuilder = ImmutableSet.builder();, +      testIntsBuilder, +        .add(i), +        .add(force32(Integer.MIN_VALUE + i)), +      testLongsBuilder, +        .add((long) i), +        .add((long) Integer.MIN_VALUE + i), +        .add((long) Integer.MAX_VALUE + i), +        .add((1L << 32) + i);, +    TEST_LONGS = testLongsBuilder.build();, +  public void testValueOfLong() {, +    long min = 0;, +    long max = (1L << 32) - 1;, +    for (long value : TEST_LONGS) {, +      boolean expectSuccess = value >= min && value <= max;, +      try {, +        assertEquals(value, UnsignedInteger.valueOf(value).longValue());, +        assertTrue(expectSuccess);, +      } catch (IllegalArgumentException e) {, +        assertFalse(expectSuccess);, +      }, +    }, +  }, +  , +  public void testValueOfBigInteger() {, +    long min = 0;, +    long max = (1L << 32) - 1;, +    for (long value : TEST_LONGS) {, +      boolean expectSuccess = value >= min && value <= max;, +      try {, +        assertEquals(value, UnsignedInteger.valueOf(BigInteger.valueOf(value)), +            .longValue());, +        assertTrue(expectSuccess);, +      } catch (IllegalArgumentException e) {, +        assertFalse(expectSuccess);, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/primitives/UnsignedLongTest.java, +  private static final ImmutableSet<BigInteger> TEST_BIG_INTEGERS;, +    ImmutableSet.Builder<BigInteger> testBigIntegersBuilder = ImmutableSet.builder();, +      BigInteger bigI = BigInteger.valueOf(i);, +      testBigIntegersBuilder, +          .add(bigI), +          .add(BigInteger.valueOf(Long.MAX_VALUE).add(bigI)), +          .add(BigInteger.valueOf(Long.MIN_VALUE).add(bigI)), +          .add(BigInteger.valueOf(Integer.MAX_VALUE).add(bigI)), +          .add(BigInteger.valueOf(Integer.MIN_VALUE).add(bigI)), +          .add(BigInteger.ONE.shiftLeft(63).add(bigI)), +          .add(BigInteger.ONE.shiftLeft(64).add(bigI));, +    TEST_BIG_INTEGERS = testBigIntegersBuilder.build();, +  public void testValueOfLong() {]