[+++ b/guava-gwt/test/com/google/common/collect/IterablesTest_gwt.java, +public void testRemoveIf_randomAccess_notPermittingDuplicates() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testRemoveIf_randomAccess_notPermittingDuplicates();, +}, +, +++ b/guava-gwt/test/com/google/common/collect/IterablesTest_gwt.java, +public void testRemoveIf_randomAccess_notPermittingDuplicates() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testRemoveIf_randomAccess_notPermittingDuplicates();, +}, +, +++ b/guava-tests/test/com/google/common/collect/IterablesTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +  public void testRemoveIf_randomAccess_notPermittingDuplicates() {, +    // https://github.com/google/guava/issues/1596, +    final List<String> delegate = newArrayList("a", "b", "c", "d", "e");, +    List<String> uniqueList = Constraints.constrainedList(delegate,, +        new Constraint<String>() {, +          @Override, +          public String checkElement(String element) {, +            checkArgument(, +                !delegate.contains(element), "this list does not permit duplicate elements");, +            return element;, +          }, +        });, +, +    assertTrue(uniqueList instanceof RandomAccess);, +    assertTrue(Iterables.removeIf(uniqueList,, +        new Predicate<String>() {, +          @Override, +          public boolean apply(String s) {, +            return s.equals("b") || s.equals("d") || s.equals("f");, +          }, +        }));, +    assertEquals(newArrayList("a", "c", "e"), uniqueList);, +    assertFalse(Iterables.removeIf(uniqueList,, +        new Predicate<String>() {, +          @Override, +          public boolean apply(String s) {, +            return s.equals("x") || s.equals("y") || s.equals("z");, +          }, +        }));, +    assertEquals(newArrayList("a", "c", "e"), uniqueList);, +  }, +, +++ b/guava-gwt/test/com/google/common/collect/IterablesTest_gwt.java, +public void testRemoveIf_randomAccess_notPermittingDuplicates() throws Exception {, +  com.google.common.collect.IterablesTest testCase = new com.google.common.collect.IterablesTest();, +  testCase.testRemoveIf_randomAccess_notPermittingDuplicates();, +}, +, +++ b/guava-tests/test/com/google/common/collect/IterablesTest.java, +import static com.google.common.base.Preconditions.checkArgument;, +  public void testRemoveIf_randomAccess_notPermittingDuplicates() {, +    // https://github.com/google/guava/issues/1596, +    final List<String> delegate = newArrayList("a", "b", "c", "d", "e");, +    List<String> uniqueList = Constraints.constrainedList(delegate,, +        new Constraint<String>() {, +          @Override, +          public String checkElement(String element) {, +            checkArgument(, +                !delegate.contains(element), "this list does not permit duplicate elements");, +            return element;, +          }, +        });, +, +    assertTrue(uniqueList instanceof RandomAccess);, +    assertTrue(Iterables.removeIf(uniqueList,, +        new Predicate<String>() {, +          @Override, +          public boolean apply(String s) {, +            return s.equals("b") || s.equals("d") || s.equals("f");, +          }, +        }));, +    assertEquals(newArrayList("a", "c", "e"), uniqueList);, +    assertFalse(Iterables.removeIf(uniqueList,, +        new Predicate<String>() {, +          @Override, +          public boolean apply(String s) {, +            return s.equals("x") || s.equals("y") || s.equals("z");, +          }, +        }));, +    assertEquals(newArrayList("a", "c", "e"), uniqueList);, +  }, +, +++ b/guava/src/com/google/common/collect/Iterables.java, +    // Note: Not all random access lists support set(). Additionally, it's possible, +    // for a list to reject setting an element, such as when the list does not permit, +    // duplicate elements. For both of those cases,  we need to fall back to a slower, +    // implementation., +          } catch (IllegalArgumentException e) {, +            slowRemoveIfForRemainingElements(list, predicate, to, from);, +            return true;]