[+++ b/android/guava-tests/test/com/google/common/util/concurrent/UncheckedThrowingFuture.java, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, +final class UncheckedThrowingFuture<V> extends AbstractFuture<V> {, +    UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();, +    future.complete(checkNotNull(error));, +    return future;, +    UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();, +    future.complete(checkNotNull(e));, +    return future;, +  public static <V> UncheckedThrowingFuture<V> incomplete() {, +    return new UncheckedThrowingFuture<V>();, +  public void complete(RuntimeException e) {, +    if (!super.setException(new WrapperException(checkNotNull(e)))) {, +      throw new IllegalStateException("Future was already complete: " + this);, +    }, +  }, +, +  public void complete(Error e) {, +    if (!super.setException(new WrapperException(checkNotNull(e)))) {, +      throw new IllegalStateException("Future was already complete: " + this);, +    }, +  }, +, +  private static final class WrapperException extends Exception {, +    WrapperException(Throwable t) {, +      super(t);, +    }, +  }, +, +  private static void rethrow(ExecutionException e) throws ExecutionException {, +    Throwable wrapper = e.getCause();, +    if (wrapper instanceof WrapperException) {, +      Throwable cause = wrapper.getCause();, +      if (cause instanceof RuntimeException) {, +        throw (RuntimeException) cause;, +      } else if (cause instanceof Error) {, +        throw (Error) cause;, +      }, +    }, +    throw e;, +  public V get() throws ExecutionException, InterruptedException {, +    try {, +      super.get();, +    } catch (ExecutionException e) {, +      rethrow(e);, +  public V get(long timeout, TimeUnit unit), +      throws InterruptedException, ExecutionException, TimeoutException {, +    try {, +      super.get(timeout, unit);, +    } catch (ExecutionException e) {, +      rethrow(e);, +    throw new AssertionError("Unreachable");, +++ b/android/guava-tests/test/com/google/common/util/concurrent/UncheckedThrowingFuture.java, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.TimeoutException;, +final class UncheckedThrowingFuture<V> extends AbstractFuture<V> {, +    UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();, +    future.complete(checkNotNull(error));, +    return future;, +    UncheckedThrowingFuture<V> future = new UncheckedThrowingFuture<V>();, +    future.complete(checkNotNull(e));, +    return future;, +  public static <V> UncheckedThrowingFuture<V> incomplete() {, +    return new UncheckedThrowingFuture<V>();, +  public void complete(RuntimeException e) {, +    if (!super.setException(new WrapperException(checkNotNull(e)))) {, +      throw new IllegalStateException("Future was already complete: " + this);, +    }, +  }, +, +  public void complete(Error e) {, +    if (!super.setException(new WrapperException(checkNotNull(e)))) {, +      throw new IllegalStateException("Future was already complete: " + this);, +    }, +  }, +, +  private static final class WrapperException extends Exception {, +    WrapperException(Throwable t) {, +      super(t);, +    }, +  }, +, +  private static void rethrow(ExecutionException e) throws ExecutionException {, +    Throwable wrapper = e.getCause();, +    if (wrapper instanceof WrapperException) {, +      Throwable cause = wrapper.getCause();, +      if (cause instanceof RuntimeException) {, +        throw (RuntimeException) cause;, +      } else if (cause instanceof Error) {, +        throw (Error) cause;, +      }, +    }, +    throw e;, +  public V get() throws ExecutionException, InterruptedException {, +    try {, +      super.get();, +    } catch (ExecutionException e) {, +      rethrow(e);, +  public V get(long timeout, TimeUnit unit)]