[+++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +      Endpoints<Integer> endpoints = network.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();, +      for (Integer incidentNode : ImmutableSet.of(, +          network.incidentNodes(edge).nodeA(), network.incidentNodes(edge).nodeB())) {, +        assertTrue(network.incidentNodes(incidentEdge).nodeA().equals(node), +            || network.incidentNodes(incidentEdge).nodeB().equals(node));, +    Endpoints<Integer> incidentNodes = network.incidentNodes(E12);, +    assertThat(ImmutableSet.of(incidentNodes.nodeA(), incidentNodes.nodeB())), +        .containsExactly(N1, N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +      Endpoints<Integer> endpoints = network.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();, +      for (Integer incidentNode : ImmutableSet.of(, +          network.incidentNodes(edge).nodeA(), network.incidentNodes(edge).nodeB())) {, +        assertTrue(network.incidentNodes(incidentEdge).nodeA().equals(node), +            || network.incidentNodes(incidentEdge).nodeB().equals(node));, +    Endpoints<Integer> incidentNodes = network.incidentNodes(E12);, +    assertThat(ImmutableSet.of(incidentNodes.nodeA(), incidentNodes.nodeB())), +        .containsExactly(N1, N2);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +      Endpoints<Integer> endpoints = network.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();, +      for (Integer incidentNode : ImmutableSet.of(, +          network.incidentNodes(edge).nodeA(), network.incidentNodes(edge).nodeB())) {, +        assertTrue(network.incidentNodes(incidentEdge).nodeA().equals(node), +            || network.incidentNodes(incidentEdge).nodeB().equals(node));, +    Endpoints<Integer> incidentNodes = network.incidentNodes(E12);, +    assertThat(ImmutableSet.of(incidentNodes.nodeA(), incidentNodes.nodeB())), +        .containsExactly(N1, N2);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +      Endpoints<Integer> endpoints = network.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();, +      for (Integer incidentNode : ImmutableSet.of(, +          network.incidentNodes(edge).nodeA(), network.incidentNodes(edge).nodeB())) {, +        assertTrue(network.incidentNodes(incidentEdge).nodeA().equals(node), +            || network.incidentNodes(incidentEdge).nodeB().equals(node));, +    Endpoints<Integer> incidentNodes = network.incidentNodes(E12);, +    assertThat(ImmutableSet.of(incidentNodes.nodeA(), incidentNodes.nodeB())), +        .containsExactly(N1, N2);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +      Endpoints<Integer> endpoints = network.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();, +      for (Integer incidentNode : ImmutableSet.of(, +          network.incidentNodes(edge).nodeA(), network.incidentNodes(edge).nodeB())) {, +        assertTrue(network.incidentNodes(incidentEdge).nodeA().equals(node), +            || network.incidentNodes(incidentEdge).nodeB().equals(node));, +    Endpoints<Integer> incidentNodes = network.incidentNodes(E12);, +    assertThat(ImmutableSet.of(incidentNodes.nodeA(), incidentNodes.nodeB())), +        .containsExactly(N1, N2);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E11).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E11).target()).isEqualTo(N1);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedNetworkTest.java, +++ b/guava-tests/test/com/google/common/graph/ConfigurableUndirectedNetworkTest.java, +    assertThat(network.incidentNodes(E11).nodeA()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E11).nodeB()).isEqualTo(N1);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +    assertThat(network.incidentNodes(E12).source()).isEqualTo(N1);, +    assertThat(network.incidentNodes(E12).target()).isEqualTo(N2);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +      Endpoints<Integer> endpoints = network.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();]