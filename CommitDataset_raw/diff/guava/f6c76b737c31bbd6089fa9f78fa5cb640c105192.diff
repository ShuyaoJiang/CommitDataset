[+++ b/guava/src/com/google/common/collect/AbstractCache.java, +import java.util.concurrent.ExecutionException;, + * implementation for the {@code getChecked} method., +  @Override, +  public V getUnchecked(K key) {, +    try {, +      return getChecked(key);, +    } catch (ExecutionException e) {, +      throw new ComputationException(e.getCause());, +    }, +  }, +, +    return getUnchecked(key);, +++ b/guava/src/com/google/common/collect/AbstractCache.java, +import java.util.concurrent.ExecutionException;, + * implementation for the {@code getChecked} method., +  @Override, +  public V getUnchecked(K key) {, +    try {, +      return getChecked(key);, +    } catch (ExecutionException e) {, +      throw new ComputationException(e.getCause());, +    }, +  }, +, +    return getUnchecked(key);, +++ b/guava/src/com/google/common/collect/AsynchronousComputationException.java, + * @deprecated this class is unused by com.google.common.collect. <b>This class is scheduled for, + *     deletion in November 2012.</b>, +@Deprecated, +public, +class AsynchronousComputationException extends ComputationException {, +++ b/guava/src/com/google/common/collect/AbstractCache.java, +import java.util.concurrent.ExecutionException;, + * implementation for the {@code getChecked} method., +  @Override, +  public V getUnchecked(K key) {, +    try {, +      return getChecked(key);, +    } catch (ExecutionException e) {, +      throw new ComputationException(e.getCause());, +    }, +  }, +, +    return getUnchecked(key);, +++ b/guava/src/com/google/common/collect/AsynchronousComputationException.java, + * @deprecated this class is unused by com.google.common.collect. <b>This class is scheduled for, + *     deletion in November 2012.</b>, +@Deprecated, +public, +class AsynchronousComputationException extends ComputationException {, +++ b/guava/src/com/google/common/collect/Cache.java, + * <p>All methods other than {@link #getChecked} and {@link #getUnchecked} are optional., + * <p>When evaluated as a {@link Function}, a cache yields the same result as invoking {@link, + * #getUnchecked}., +   * <p>This method is identical to {@link #getUnchecked} except that it throws a checked exception, +   * when an error occurs during cache loading., +   * Returns the value associated with the given key, creating or retrieving that value if, +   * necessary. No state associated with this cache is modified until computation completes., +   * <p>The implementation may support {@code null} as a valid cached value, or may return {@code, +   * null} without caching it, or may not permit null results at all., +   *, +   * <p>This method is identical to {@link #getChecked} except that it throws an unchecked exception, +   * when an error occurs during cache loading., +   *, +   * @throws NullPointerException if the specified key is null and this cache does not permit null, +   *     keys (optional), +   * @throws ComputationException wraps errors which occur while loading the response, +   */, +  @Nullable V getUnchecked(@Nullable K key);, +, +  /**, +   * Provided to satisfy the {@code Function} interface; use {@link #getChecked} or, +   * {@link #getUnchecked} instead., +   *, +   * @deprecated Use {@link #getChecked} or {@link #getUnchecked} instead., +   * <p>Operations on the returned map will never trigger a computation. So, unlike, +   * {@link #getChecked} and {@link #getUnchecked}, this map's {@link Map#get get} method, +   * will just return {@code null} immediately for a key that is not already cached., +++ b/guava/src/com/google/common/collect/AbstractCache.java, +import java.util.concurrent.ExecutionException;, + * implementation for the {@code getChecked} method., +  @Override, +  public V getUnchecked(K key) {, +    try {, +      return getChecked(key);, +    } catch (ExecutionException e) {, +      throw new ComputationException(e.getCause());, +    }, +  }, +, +    return getUnchecked(key);, +++ b/guava/src/com/google/common/collect/AsynchronousComputationException.java, + * @deprecated this class is unused by com.google.common.collect. <b>This class is scheduled for, + *     deletion in November 2012.</b>, +@Deprecated, +public, +class AsynchronousComputationException extends ComputationException {, +++ b/guava/src/com/google/common/collect/Cache.java, + * <p>All methods other than {@link #getChecked} and {@link #getUnchecked} are optional.]