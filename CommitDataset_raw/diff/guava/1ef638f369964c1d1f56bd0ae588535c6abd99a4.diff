[+++ b/guava-tests/test/com/google/common/base/PreconditionsTest.java, +import static com.google.common.base.Preconditions.checkState;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableSet;, +import com.google.common.collect.Lists;, +import com.google.common.testing.ArbitraryInstances;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +, +  @GwtIncompatible("Reflection"), +  public void testAllOverloads_checkArgument() throws Exception {, +    for (ImmutableList<Class<?>> sig : allSignatures(boolean.class)) {, +      Method checkArgumentMethod =, +          Preconditions.class.getMethod("checkArgument", sig.toArray(new Class<?>[] {}));, +      checkArgumentMethod.invoke(null /* static method */, getParametersForSignature(true, sig));, +, +      Object[] failingParams = getParametersForSignature(false, sig);, +      try {, +        checkArgumentMethod.invoke(null /* static method */, failingParams);, +        fail();, +      } catch (InvocationTargetException ite) {, +        assertFailureCause(ite.getCause(), IllegalArgumentException.class, failingParams);, +      }, +    }, +  }, +, +  @GwtIncompatible("Reflection"), +  public void testAllOverloads_checkState() throws Exception {, +    for (ImmutableList<Class<?>> sig : allSignatures(boolean.class)) {, +      Method checkArgumentMethod =, +          Preconditions.class.getMethod("checkState", sig.toArray(new Class<?>[] {}));, +      checkArgumentMethod.invoke(null /* static method */, getParametersForSignature(true, sig));, +, +      Object[] failingParams = getParametersForSignature(false, sig);, +      try {, +        checkArgumentMethod.invoke(null /* static method */, failingParams);, +        fail();, +      } catch (InvocationTargetException ite) {, +        assertFailureCause(ite.getCause(), IllegalStateException.class, failingParams);, +      }, +    }, +  }, +, +  @GwtIncompatible("Reflection"), +  public void testAllOverloads_checkNotNull() throws Exception {, +    for (ImmutableList<Class<?>> sig : allSignatures(Object.class)) {, +      Method checkArgumentMethod =, +          Preconditions.class.getMethod("checkNotNull", sig.toArray(new Class<?>[] {}));, +      checkArgumentMethod.invoke(, +          null /* static method */, getParametersForSignature(new Object(), sig));, +, +      Object[] failingParams = getParametersForSignature(null, sig);, +      try {, +        checkArgumentMethod.invoke(null /* static method */, failingParams);, +        fail();, +      } catch (InvocationTargetException ite) {, +        assertFailureCause(ite.getCause(), NullPointerException.class, failingParams);, +      }, +    }, +  }, +, +  /**, +   * Asserts that the given throwable has the given class and then asserts on the message as using, +   * the full set of method parameters., +   */, +  private void assertFailureCause(, +      Throwable throwable, Class<? extends Throwable> clazz, Object[] params) {, +    assertThat(throwable).isInstanceOf(clazz);, +    if (params.length == 1) {, +      assertThat(throwable).hasMessage(null);, +    } else if (params.length == 2) {, +      assertThat(throwable).hasMessage("");, +    } else {, +      assertThat(throwable), +          .hasMessage(Preconditions.format("", Arrays.copyOfRange(params, 2, params.length)));, +    }, +  }, +, +  /**, +   * Returns an array containing parameters for invoking a checkArgument, checkNotNull or checkState, +   * method reflectively, +   *, +   * @param firstParam The first parameter, +   * @param sig The method signature, +   */, +  @GwtIncompatible("ArbitraryInstances"), +  private Object[] getParametersForSignature(Object firstParam, ImmutableList<Class<?>> sig) {, +    Object[] params = new Object[sig.size()];, +    params[0] = firstParam;, +    if (params.length > 1) {, +      params[1] = "";, +      if (params.length > 2) {, +        // fill in the rest of the array with arbitrary instances, +        for (int i = 2; i < params.length; i++) {, +          params[i] = ArbitraryInstances.get(sig.get(i));, +        }, +      }]