[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +  static <T> T[] arraysCopyOf(T[] original, int newLength) {, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +  static <T> T[] arraysCopyOf(T[] original, int newLength) {, +++ b/guava-gwt/src/com/google/common/cache/Cache.gwt.xml, +<?xml version="1.0" encoding="utf-8"?>, +<module>, +   , +  <source path=""/>, +   , +  <inherits name="com.google.common.annotations.Annotations"/>, +   , +  <inherits name="com.google.common.base.Base"/>, +   , +  <inherits name="com.google.common.collect.Collect"/>, +   , +  <inherits name="com.google.common.primitives.Primitives"/>, +    , +  <inherits name="java.util.Util"/>, +   , +</module>, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +  static <T> T[] arraysCopyOf(T[] original, int newLength) {, +++ b/guava-gwt/src/com/google/common/cache/Cache.gwt.xml, +<?xml version="1.0" encoding="utf-8"?>, +<module>, +   , +  <source path=""/>, +   , +  <inherits name="com.google.common.annotations.Annotations"/>, +   , +  <inherits name="com.google.common.base.Base"/>, +   , +  <inherits name="com.google.common.collect.Collect"/>, +   , +  <inherits name="com.google.common.primitives.Primitives"/>, +    , +  <inherits name="java.util.Util"/>, +   , +</module>, +++ b/guava-testlib/src/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilder.java, +import static java.util.Collections.disjoint;, +import static java.util.logging.Level.FINER;, +, +    if (!features.containsAll(requirements.getPresentFeatures())) {, +      if (logger.isLoggable(FINER)) {, +        logger.finer(Platform.format(, +            "%s: skipping because these features are absent: %s",, +           method, missingFeatures));, +      }, +    if (intersect(features, requirements.getAbsentFeatures())) {, +      if (logger.isLoggable(FINER)) {, +        logger.finer(Platform.format(, +            "%s: skipping because these features are present: %s",, +            method, unwantedFeatures));, +      }, +  private static boolean intersect(Set<?> a, Set<?> b) {, +    return !disjoint(a, b);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ObjectArrays.java, +  static <T> T[] arraysCopyOf(T[] original, int newLength) {, +++ b/guava-gwt/src/com/google/common/cache/Cache.gwt.xml, +<?xml version="1.0" encoding="utf-8"?>, +<module>, +   , +  <source path=""/>, +   , +  <inherits name="com.google.common.annotations.Annotations"/>, +   , +  <inherits name="com.google.common.base.Base"/>, +   , +  <inherits name="com.google.common.collect.Collect"/>, +   , +  <inherits name="com.google.common.primitives.Primitives"/>, +    , +  <inherits name="java.util.Util"/>, +   , +</module>, +++ b/guava-testlib/src/com/google/common/collect/testing/FeatureSpecificTestSuiteBuilder.java, +import static java.util.Collections.disjoint;, +import static java.util.logging.Level.FINER;, +, +    if (!features.containsAll(requirements.getPresentFeatures())) {, +      if (logger.isLoggable(FINER)) {, +        logger.finer(Platform.format(, +            "%s: skipping because these features are absent: %s",, +           method, missingFeatures));, +      }, +    if (intersect(features, requirements.getAbsentFeatures())) {, +      if (logger.isLoggable(FINER)) {, +        logger.finer(Platform.format(, +            "%s: skipping because these features are present: %s",, +            method, unwantedFeatures));, +      }, +  private static boolean intersect(Set<?> a, Set<?> b) {, +    return !disjoint(a, b);, +  }, +, +++ b/guava-testlib/src/com/google/common/collect/testing/features/FeatureUtil.java]