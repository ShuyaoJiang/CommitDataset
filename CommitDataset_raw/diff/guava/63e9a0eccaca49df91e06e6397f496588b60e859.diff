[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Synchronized.java, +    @Override, +    public Iterator<Map.Entry<K, Collection<V>>> iterator() {, +      return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(, +          super.iterator()) {, +        @Override, +        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {, +      return new TransformedIterator<Collection<V>, Collection<V>>(super.iterator()) {, +        @Override Collection<V> transform(Collection<V> from) {, +          return typePreservingCollection(from, mutex);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Synchronized.java, +    @Override, +    public Iterator<Map.Entry<K, Collection<V>>> iterator() {, +      return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(, +          super.iterator()) {, +        @Override, +        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {, +      return new TransformedIterator<Collection<V>, Collection<V>>(super.iterator()) {, +        @Override Collection<V> transform(Collection<V> from) {, +          return typePreservingCollection(from, mutex);, +++ b/guava/src/com/google/common/collect/MapConstraints.java, +      return new TransformedIterator<Entry<K, V>, Entry<K, V>>(entries.iterator()) {, +        @Override Entry<K, V> transform(Entry<K, V> from) {, +          return constrainedEntry(from, constraint);, +      return new TransformedIterator<Entry<K, Collection<V>>, Entry<K, Collection<V>>>(, +          entries.iterator()) {, +        @Override Entry<K, Collection<V>> transform(Entry<K, Collection<V>> from) {, +          return constrainedAsMapEntry(from, constraint);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Synchronized.java, +    @Override, +    public Iterator<Map.Entry<K, Collection<V>>> iterator() {, +      return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(, +          super.iterator()) {, +        @Override, +        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {, +      return new TransformedIterator<Collection<V>, Collection<V>>(super.iterator()) {, +        @Override Collection<V> transform(Collection<V> from) {, +          return typePreservingCollection(from, mutex);, +++ b/guava/src/com/google/common/collect/MapConstraints.java, +      return new TransformedIterator<Entry<K, V>, Entry<K, V>>(entries.iterator()) {, +        @Override Entry<K, V> transform(Entry<K, V> from) {, +          return constrainedEntry(from, constraint);, +      return new TransformedIterator<Entry<K, Collection<V>>, Entry<K, Collection<V>>>(, +          entries.iterator()) {, +        @Override Entry<K, Collection<V>> transform(Entry<K, Collection<V>> from) {, +          return constrainedAsMapEntry(from, constraint);, +++ b/guava/src/com/google/common/collect/Synchronized.java, +    @Override, +    public Iterator<Map.Entry<K, Collection<V>>> iterator() {, +      return new TransformedIterator<Map.Entry<K, Collection<V>>, Map.Entry<K, Collection<V>>>(, +          super.iterator()) {, +        @Override, +        Map.Entry<K, Collection<V>> transform(final Map.Entry<K, Collection<V>> entry) {, +      return new TransformedIterator<Collection<V>, Collection<V>>(super.iterator()) {, +        @Override Collection<V> transform(Collection<V> from) {, +          return typePreservingCollection(from, mutex);]