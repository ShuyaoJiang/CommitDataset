[+++ b/guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java, +    @Override public <V> Optional<V> transform(Function<? super T, V> function) {, +      throw new AssertionError();, +    }, +, +++ b/guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java, +    @Override public <V> Optional<V> transform(Function<? super T, V> function) {, +      throw new AssertionError();, +    }, +, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +  public void testOr_supplier_present() {, +  public void testOr_supplier_absent() {, +  public void testOr_nullSupplier_absent() {, +  public void testOr_nullSupplier_present() {, +    Supplier<String> nullSupplier = Suppliers.ofInstance(null);, +    assertEquals("a", Optional.of("a").or(nullSupplier));, +  }, +, +  public void testTransform_absent() {, +    assertEquals(Optional.absent(), Optional.absent().transform(Functions.identity()));, +    assertEquals(Optional.absent(), Optional.absent().transform(Functions.toStringFunction()));, +  }, +, +  public void testTransform_presentIdentity() {, +    assertEquals(Optional.of("a"), Optional.of("a").transform(Functions.identity()));, +  }, +, +  public void testTransform_presentToString() {, +    assertEquals(Optional.of("42"), Optional.of(42).transform(Functions.toStringFunction()));, +  }, +, +  public void testTransform_present_functionReturnsNull() {, +    try {, +      Optional.of("a").transform(, +          new Function<String, String>() {, +            @Override public String apply(String input) {, +              return null;, +            }, +          });, +      fail("Should throw if Function returns null.");, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  public void testTransform_abssent_functionReturnsNull() {, +    assertEquals(Optional.absent(),, +        Optional.absent().transform(, +          new Function<Object, Object>() {, +            @Override public Object apply(Object input) {, +              return null;, +            }, +          }));, +  }, +, +++ b/guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java, +    @Override public <V> Optional<V> transform(Function<? super T, V> function) {, +      throw new AssertionError();, +    }, +, +++ b/guava-tests/test/com/google/common/base/OptionalTest.java, +  public void testOr_supplier_present() {, +  public void testOr_supplier_absent() {, +  public void testOr_nullSupplier_absent() {, +  public void testOr_nullSupplier_present() {, +    Supplier<String> nullSupplier = Suppliers.ofInstance(null);, +    assertEquals("a", Optional.of("a").or(nullSupplier));, +  }, +, +  public void testTransform_absent() {, +    assertEquals(Optional.absent(), Optional.absent().transform(Functions.identity()));, +    assertEquals(Optional.absent(), Optional.absent().transform(Functions.toStringFunction()));, +  }, +, +  public void testTransform_presentIdentity() {, +    assertEquals(Optional.of("a"), Optional.of("a").transform(Functions.identity()));, +  }, +, +  public void testTransform_presentToString() {, +    assertEquals(Optional.of("42"), Optional.of(42).transform(Functions.toStringFunction()));, +  }, +, +  public void testTransform_present_functionReturnsNull() {, +    try {, +      Optional.of("a").transform(, +          new Function<String, String>() {, +            @Override public String apply(String input) {, +              return null;, +            }, +          });, +      fail("Should throw if Function returns null.");, +    } catch (NullPointerException expected) {, +    }, +  }, +, +  public void testTransform_abssent_functionReturnsNull() {, +    assertEquals(Optional.absent(),, +        Optional.absent().transform(, +          new Function<Object, Object>() {, +            @Override public Object apply(Object input) {]