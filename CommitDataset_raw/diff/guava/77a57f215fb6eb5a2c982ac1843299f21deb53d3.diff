[+++ b/guava-tests/test/com/google/common/collect/ForwardingCollectionTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +public class ForwardingCollectionTest extends TestCase {, +  @SuppressWarnings({"rawtypes", "unchecked"}), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(Collection.class, new Function<Collection, Collection>() {, +          @Override public Collection apply(Collection delegate) {, +            return wrap(delegate);, +          }, +        });, +  }, +, +  private static <T> Collection<T> wrap(final Collection<T> delegate) {, +    return new ForwardingCollection<T>() {, +      @Override protected Collection<T> delegate() {, +        return delegate;, +++ b/guava-tests/test/com/google/common/collect/ForwardingCollectionTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +public class ForwardingCollectionTest extends TestCase {, +  @SuppressWarnings({"rawtypes", "unchecked"}), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(Collection.class, new Function<Collection, Collection>() {, +          @Override public Collection apply(Collection delegate) {, +            return wrap(delegate);, +          }, +        });, +  }, +, +  private static <T> Collection<T> wrap(final Collection<T> delegate) {, +    return new ForwardingCollection<T>() {, +      @Override protected Collection<T> delegate() {, +        return delegate;, +++ b/guava-tests/test/com/google/common/collect/ForwardingListTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +public class ForwardingListTest extends TestCase {, +  @SuppressWarnings({"rawtypes", "unchecked"}), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(List.class, new Function<List, List>() {, +          @Override public List apply(List delegate) {, +            return wrap(delegate);, +          }, +        });, +  }, +, +  public void testEquals() {, +    List<String> list1 = ImmutableList.of("one");, +    List<String> list2 = ImmutableList.of("two");, +    new EqualsTester(), +        .addEqualityGroup(list1, wrap(list1), wrap(list1)), +        .addEqualityGroup(list2, wrap(list2)), +        .testEquals();, +  }, +, +  private static <T> List<T> wrap(final List<T> delegate) {, +    return new ForwardingList<T>() {, +      @Override protected List<T> delegate() {, +        return delegate;, +++ b/guava-tests/test/com/google/common/collect/ForwardingCollectionTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +public class ForwardingCollectionTest extends TestCase {, +  @SuppressWarnings({"rawtypes", "unchecked"}), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(Collection.class, new Function<Collection, Collection>() {, +          @Override public Collection apply(Collection delegate) {, +            return wrap(delegate);, +          }, +        });, +  }, +, +  private static <T> Collection<T> wrap(final Collection<T> delegate) {, +    return new ForwardingCollection<T>() {, +      @Override protected Collection<T> delegate() {, +        return delegate;, +++ b/guava-tests/test/com/google/common/collect/ForwardingListTest.java, +import com.google.common.base.Function;, +import com.google.common.testing.EqualsTester;, +import com.google.common.testing.ForwardingWrapperTester;, +import junit.framework.TestCase;, +public class ForwardingListTest extends TestCase {, +  @SuppressWarnings({"rawtypes", "unchecked"}), +  public void testForwarding() {, +    new ForwardingWrapperTester(), +        .testForwarding(List.class, new Function<List, List>() {, +          @Override public List apply(List delegate) {, +            return wrap(delegate);, +          }, +        });]