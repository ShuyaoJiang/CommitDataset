[+++ b/guava/src/com/google/common/graph/AbstractGraph.java, +    for (N node : nodes()) {, +    Function<N, Set<N>> nodeToSuccessors = new Function<N, Set<N>>() {, +    };, +    return Maps.asMap(nodes(), nodeToSuccessors).hashCode();, +   * Returns a string representation of this graph., +    String propertiesString = String.format(, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +    String endpointsString = String.format(, +        "{%s}", Joiner.on(", ").join(Graphs.endpointsInternal(this)));, +    return String.format(GRAPH_STRING_FORMAT,, +        propertiesString,, +        nodes(),, +        endpointsString);, +++ b/guava/src/com/google/common/graph/AbstractGraph.java, +    for (N node : nodes()) {, +    Function<N, Set<N>> nodeToSuccessors = new Function<N, Set<N>>() {, +    };, +    return Maps.asMap(nodes(), nodeToSuccessors).hashCode();, +   * Returns a string representation of this graph., +    String propertiesString = String.format(, +        "isDirected: %s, allowsSelfLoops: %s", isDirected(), allowsSelfLoops());, +    String endpointsString = String.format(, +        "{%s}", Joiner.on(", ").join(Graphs.endpointsInternal(this)));, +    return String.format(GRAPH_STRING_FORMAT,, +        propertiesString,, +        nodes(),, +        endpointsString);, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +    for (E edge : edges()) {, +    Function<N, Set<E>> nodeToOutEdges = new Function<N, Set<E>>() {, +    };, +    return Maps.asMap(nodes(), nodeToOutEdges).hashCode();, +   * Returns a string representation of this graph., +    String propertiesString = String.format(, +        "isDirected: %s, allowsParallelEdges: %s, allowsSelfLoops: %s",, +    Function<Object, String> edgeToEndpointsString = new Function<Object, String>() {, +    return String.format(GRAPH_STRING_FORMAT,, +        propertiesString,, +        nodes(),, +        Maps.asMap(edges(), edgeToEndpointsString));]