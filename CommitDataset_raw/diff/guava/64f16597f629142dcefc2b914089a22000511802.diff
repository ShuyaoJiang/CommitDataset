[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +import com.google.common.annotations.Beta;, +import java.util.Comparator;, +, +  /**, +   * Returns an iterable over the merged contents of all given, +   * {@code iterables}. Equivalent entries will not be de-duplicated., +   *, +   * <p>Callers must ensure that the source {@code iterables} are in, +   * non-descending order as this method does not sort its input., +   *, +   * <p>For any equivalent elements across all {@code iterables}, it is, +   * undefined which element is returned first., +   *, +   * @since 11.0, +   */, +  @Beta, +  public static <T> UnmodifiableIterable<T> mergeSorted(, +      final Iterable<? extends Iterable<? extends T>> iterables,, +      final Comparator<? super T> comparator) {, +    checkNotNull(iterables, "iterables");, +    checkNotNull(comparator, "comparator");, +    Iterable<T> iterable = new Iterable<T>() {, +      @Override, +      public Iterator<T> iterator() {, +        return Iterators.mergeSorted(, +            Iterables.transform(iterables, Iterables.<T>toIterator()),, +            comparator);, +      }, +    };, +    return new UnmodifiableIterable<T>(iterable);, +  }, +, +  // TODO(user): Is this the best place for this? Move to fluent functions?, +  // Useful as a public method?, +  private static <T> Function<Iterable<? extends T>, Iterator<? extends T>>, +      toIterator() {, +    return new Function<Iterable<? extends T>, Iterator<? extends T>>() {, +      @Override, +      public Iterator<? extends T> apply(Iterable<? extends T> iterable) {, +        return iterable.iterator();, +      }, +    };, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +import com.google.common.annotations.Beta;, +import java.util.Comparator;, +, +  /**, +   * Returns an iterable over the merged contents of all given, +   * {@code iterables}. Equivalent entries will not be de-duplicated., +   *, +   * <p>Callers must ensure that the source {@code iterables} are in, +   * non-descending order as this method does not sort its input., +   *, +   * <p>For any equivalent elements across all {@code iterables}, it is, +   * undefined which element is returned first., +   *, +   * @since 11.0, +   */, +  @Beta, +  public static <T> UnmodifiableIterable<T> mergeSorted(, +      final Iterable<? extends Iterable<? extends T>> iterables,, +      final Comparator<? super T> comparator) {, +    checkNotNull(iterables, "iterables");, +    checkNotNull(comparator, "comparator");, +    Iterable<T> iterable = new Iterable<T>() {, +      @Override, +      public Iterator<T> iterator() {, +        return Iterators.mergeSorted(, +            Iterables.transform(iterables, Iterables.<T>toIterator()),, +            comparator);, +      }, +    };, +    return new UnmodifiableIterable<T>(iterable);, +  }, +, +  // TODO(user): Is this the best place for this? Move to fluent functions?, +  // Useful as a public method?, +  private static <T> Function<Iterable<? extends T>, Iterator<? extends T>>, +      toIterator() {, +    return new Function<Iterable<? extends T>, Iterator<? extends T>>() {, +      @Override, +      public Iterator<? extends T> apply(Iterable<? extends T> iterable) {, +        return iterable.iterator();, +      }, +    };, +  }, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java, +import java.util.Comparator;, +import java.util.PriorityQueue;, +import java.util.Queue;, +, +  /**, +   * Returns an iterator over the merged contents of all given, +   * {@code iterators}, traversing every element of the input iterators., +   * Equivalent entries will not be de-duplicated., +   *, +   * <p>Callers must ensure that the source {@code iterators} are in, +   * non-descending order as this method does not sort its input.]