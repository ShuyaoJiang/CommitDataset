[+++ b/android/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;, +import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;, +import com.google.common.base.Joiner;, +import java.security.PermissionCollection;, +  public void testGetClassPathUrls() throws Exception {, +    String oldPathSeparator = PATH_SEPARATOR.value();, +    String oldClassPath = JAVA_CLASS_PATH.value();, +    System.setProperty(PATH_SEPARATOR.key(), ":");, +    System.setProperty(, +        JAVA_CLASS_PATH.key(),, +        Joiner.on(":"), +            .join(, +                "relative/path/to/some.jar",, +                "/absolute/path/to/some.jar",, +                "relative/path/to/class/root",, +                "/absolute/path/to/class/root"));, +    try {, +      ImmutableList<URL> urls = ClassPath.Scanner.parseJavaClassPath();, +, +      assertThat(urls.get(0).getProtocol()).isEqualTo("file");, +      assertThat(urls.get(0).getAuthority()).isNull();, +      assertThat(urls.get(0).getPath()).endsWith("/relative/path/to/some.jar");, +, +      assertThat(urls.get(1)).isEqualTo(new URL("file:///absolute/path/to/some.jar"));, +, +      assertThat(urls.get(2).getProtocol()).isEqualTo("file");, +      assertThat(urls.get(2).getAuthority()).isNull();, +      assertThat(urls.get(2).getPath()).endsWith("/relative/path/to/class/root");, +, +      assertThat(urls.get(3)).isEqualTo(new URL("file:///absolute/path/to/class/root"));, +, +      assertThat(urls).hasSize(4);, +    } finally {, +      System.setProperty(PATH_SEPARATOR.key(), oldPathSeparator);, +      System.setProperty(JAVA_CLASS_PATH.key(), oldClassPath);, +    }, +  }, +, +    File file = null;, +    // In Java 9, Logger may read the TZ database. Only disallow reading the class path URLs., +    final PermissionCollection readClassPathFiles =, +        new FilePermission("", "read").newPermissionCollection();, +    for (URL url : ClassPath.Scanner.parseJavaClassPath()) {, +        file = new File(url.toURI());, +        readClassPathFiles.add(new FilePermission(file.getAbsolutePath(), "read"));, +    assertThat(file).isNotNull();, +    SecurityManager disallowFilesSecurityManager =, +        new SecurityManager() {, +            if (readClassPathFiles.implies(p)) {, +      file.exists();, +    ClassPath classPath = ClassPath.from(getClass().getClassLoader());, +    // ClassPath may contain resources from the boot class loader; just not from the class path., +    for (ResourceInfo resource : classPath.getResources()) {, +      assertThat(resource.getResourceName()).doesNotContain("com/google/common/reflect/");, +    }, +++ b/android/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;, +import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;, +import com.google.common.base.Joiner;, +import java.security.PermissionCollection;, +  public void testGetClassPathUrls() throws Exception {, +    String oldPathSeparator = PATH_SEPARATOR.value();, +    String oldClassPath = JAVA_CLASS_PATH.value();, +    System.setProperty(PATH_SEPARATOR.key(), ":");, +    System.setProperty(, +        JAVA_CLASS_PATH.key(),, +        Joiner.on(":"), +            .join(, +                "relative/path/to/some.jar",, +                "/absolute/path/to/some.jar",, +                "relative/path/to/class/root",, +                "/absolute/path/to/class/root"));, +    try {, +      ImmutableList<URL> urls = ClassPath.Scanner.parseJavaClassPath();, +, +      assertThat(urls.get(0).getProtocol()).isEqualTo("file");, +      assertThat(urls.get(0).getAuthority()).isNull();, +      assertThat(urls.get(0).getPath()).endsWith("/relative/path/to/some.jar");, +, +      assertThat(urls.get(1)).isEqualTo(new URL("file:///absolute/path/to/some.jar"));, +, +      assertThat(urls.get(2).getProtocol()).isEqualTo("file");, +      assertThat(urls.get(2).getAuthority()).isNull();, +      assertThat(urls.get(2).getPath()).endsWith("/relative/path/to/class/root");, +, +      assertThat(urls.get(3)).isEqualTo(new URL("file:///absolute/path/to/class/root"));, +, +      assertThat(urls).hasSize(4);, +    } finally {, +      System.setProperty(PATH_SEPARATOR.key(), oldPathSeparator);, +      System.setProperty(JAVA_CLASS_PATH.key(), oldClassPath);, +    }, +  }, +, +    File file = null;, +    // In Java 9, Logger may read the TZ database. Only disallow reading the class path URLs., +    final PermissionCollection readClassPathFiles =, +        new FilePermission("", "read").newPermissionCollection();, +    for (URL url : ClassPath.Scanner.parseJavaClassPath()) {]