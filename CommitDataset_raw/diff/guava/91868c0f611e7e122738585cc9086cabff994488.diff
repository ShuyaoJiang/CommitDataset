[+++ /dev/null, +++ /dev/null, +++ b/guava/src/com/google/common/base/Equivalence.java, +   * Returns {@code true} if the given objects are considered equivalent.ß, +   *     equivalent(x, x)} returns {@code true}., +   *     true}, then {@code equivalent(x, z)} returns {@code true}., +  public final boolean equivalent(@Nullable T a, @Nullable T b) {, +    if (a == b) {, +      return true;, +    }, +    if (a == null || b == null) {, +      return false;, +    }, +    return doEquivalent(a, b);, +  }, +   * Returns {@code true} if {@code a} and {@code b} are considered equivalent., +   * <p>Called by {@link #equivalent}. {@code a} and {@code b} are not the same, +   * object and are not nulls., +   */, +  protected abstract boolean doEquivalent(T a, T b);, +, +  /**, +   * Returns a hash code for {@code t}., +   *, +   * <p>The {@code hash} has the following properties:, +  public final int hash(@Nullable T t) {, +    if (t == null) {, +      return 0;, +    }, +    return doHash(t);, +  }, +, +  /**, +   * Returns a hash code for non-null object {@code t}., +   *, +   * <p>Called by {@link #hash}., +   */, +  protected abstract int doHash(T t);, +++ /dev/null, +++ b/guava/src/com/google/common/base/Equivalence.java, +   * Returns {@code true} if the given objects are considered equivalent.ß, +   *     equivalent(x, x)} returns {@code true}., +   *     true}, then {@code equivalent(x, z)} returns {@code true}., +  public final boolean equivalent(@Nullable T a, @Nullable T b) {, +    if (a == b) {, +      return true;, +    }, +    if (a == null || b == null) {, +      return false;, +    }, +    return doEquivalent(a, b);, +  }, +   * Returns {@code true} if {@code a} and {@code b} are considered equivalent., +   * <p>Called by {@link #equivalent}. {@code a} and {@code b} are not the same, +   * object and are not nulls., +   */, +  protected abstract boolean doEquivalent(T a, T b);, +, +  /**, +   * Returns a hash code for {@code t}., +   *, +   * <p>The {@code hash} has the following properties:, +  public final int hash(@Nullable T t) {, +    if (t == null) {, +      return 0;, +    }, +    return doHash(t);, +  }, +, +  /**, +   * Returns a hash code for non-null object {@code t}., +   *, +   * <p>Called by {@link #hash}., +   */, +  protected abstract int doHash(T t);, +++ b/guava/src/com/google/common/base/Equivalences.java, +  private static final class Equals extends Equivalence<Object>, +    @Override protected boolean doEquivalent(Object a, Object b) {, +    @Override public int doHash(Object o) {, +  private static final class Identity extends Equivalence<Object>, +    @Override protected boolean doEquivalent(Object a, Object b) {, +    @Override protected int doHash(Object o) {, +++ /dev/null, +++ b/guava/src/com/google/common/base/Equivalence.java, +   * Returns {@code true} if the given objects are considered equivalent.ß, +   *     equivalent(x, x)} returns {@code true}., +   *     true}, then {@code equivalent(x, z)} returns {@code true}., +  public final boolean equivalent(@Nullable T a, @Nullable T b) {, +    if (a == b) {, +      return true;, +    }, +    if (a == null || b == null) {, +      return false;, +    }, +    return doEquivalent(a, b);, +  }, +   * Returns {@code true} if {@code a} and {@code b} are considered equivalent., +   * <p>Called by {@link #equivalent}. {@code a} and {@code b} are not the same, +   * object and are not nulls., +   */]