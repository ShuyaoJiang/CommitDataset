[+++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +import java.util.NoSuchElementException;, +, +    EvictingQueue<String> queue = EvictingQueue.create(0);, +    assertEquals(0, queue.size());, +, +    assertTrue(queue.add("hi"));, +    assertEquals(0, queue.size());, +, +    assertTrue(queue.offer("hi"));, +    assertEquals(0, queue.size());, +, +    assertFalse(queue.remove("hi"));, +    assertEquals(0, queue.size());, +, +      queue.element();, +    } catch (NoSuchElementException expected) {}, +, +    assertNull(queue.peek());, +    assertNull(queue.poll());, +    try {, +      queue.remove();, +      fail();, +    } catch (NoSuchElementException expected) {}, +++ b/guava-tests/test/com/google/common/collect/EvictingQueueTest.java, +import java.util.NoSuchElementException;, +, +    EvictingQueue<String> queue = EvictingQueue.create(0);, +    assertEquals(0, queue.size());, +, +    assertTrue(queue.add("hi"));, +    assertEquals(0, queue.size());, +, +    assertTrue(queue.offer("hi"));, +    assertEquals(0, queue.size());, +, +    assertFalse(queue.remove("hi"));, +    assertEquals(0, queue.size());, +, +      queue.element();, +    } catch (NoSuchElementException expected) {}, +, +    assertNull(queue.peek());, +    assertNull(queue.poll());, +    try {, +      queue.remove();, +      fail();, +    } catch (NoSuchElementException expected) {}, +++ b/guava/src/com/google/common/collect/EvictingQueue.java, +    checkArgument(maxSize >= 0, "maxSize (%s) must >= 0", maxSize);, +   *, +   * <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the, +   * queue., +    if (maxSize == 0) {, +      return true;, +    }]