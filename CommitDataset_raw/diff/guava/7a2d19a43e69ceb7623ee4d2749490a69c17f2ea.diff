[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +import java.util.Comparator;, +   * Returns an {@code ImmutableSortedSet} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}, with duplicates, +   * (determined by {@code comaprator.compare(x, y) == 0}) removed. To produce an, +   * {@code ImmutableSortedSet} sorted by its natural ordering, use, +   * {@code toImmutableSortedSet(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort set elements, +   * @throws NullPointerException if any element is null, +   */, +  public final ImmutableSortedSet<E> toImmutableSortedSet(Comparator<? super E> comparator) {, +    return ImmutableSortedSet.copyOf(comparator, iterable);, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +import java.util.Comparator;, +   * Returns an {@code ImmutableSortedSet} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}, with duplicates, +   * (determined by {@code comaprator.compare(x, y) == 0}) removed. To produce an, +   * {@code ImmutableSortedSet} sorted by its natural ordering, use, +   * {@code toImmutableSortedSet(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort set elements, +   * @throws NullPointerException if any element is null, +   */, +  public final ImmutableSortedSet<E> toImmutableSortedSet(Comparator<? super E> comparator) {, +    return ImmutableSortedSet.copyOf(comparator, iterable);, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  public void testToImmutableSortedSet() {, +    ASSERT.that(fluent(1, 4, 2, 3).toImmutableSortedSet(Ordering.<Integer>natural().reverse())), +        .hasContentsInOrder(4, 3, 2, 1);, +  }, +, +  public void testToImmutableSortedSet_removeDuplicates() {, +    ASSERT.that(fluent(1, 4, 1, 3).toImmutableSortedSet(Ordering.<Integer>natural().reverse())), +        .hasContentsInOrder(4, 3, 1);, +  }, +, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/FluentIterable.java, +import java.util.Comparator;, +   * Returns an {@code ImmutableSortedSet} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}, with duplicates, +   * (determined by {@code comaprator.compare(x, y) == 0}) removed. To produce an, +   * {@code ImmutableSortedSet} sorted by its natural ordering, use, +   * {@code toImmutableSortedSet(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort set elements, +   * @throws NullPointerException if any element is null, +   */, +  public final ImmutableSortedSet<E> toImmutableSortedSet(Comparator<? super E> comparator) {, +    return ImmutableSortedSet.copyOf(comparator, iterable);, +  }, +, +  /**, +++ b/guava-tests/test/com/google/common/collect/FluentIterableTest.java, +  public void testToImmutableSortedSet() {, +    ASSERT.that(fluent(1, 4, 2, 3).toImmutableSortedSet(Ordering.<Integer>natural().reverse())), +        .hasContentsInOrder(4, 3, 2, 1);, +  }, +, +  public void testToImmutableSortedSet_removeDuplicates() {, +    ASSERT.that(fluent(1, 4, 1, 3).toImmutableSortedSet(Ordering.<Integer>natural().reverse())), +        .hasContentsInOrder(4, 3, 1);, +  }, +, +++ b/guava/src/com/google/common/collect/FluentIterable.java, +import java.util.Comparator;, +   * Returns an {@code ImmutableSortedSet} containing all of the elements from this, +   * {@code FluentIterable} in the order specified by {@code comparator}, with duplicates, +   * (determined by {@code comaprator.compare(x, y) == 0}) removed. To produce an, +   * {@code ImmutableSortedSet} sorted by its natural ordering, use, +   * {@code toImmutableSortedSet(Ordering.natural())}., +   *, +   * @param comparator the function by which to sort set elements, +   * @throws NullPointerException if any element is null, +   */, +  public final ImmutableSortedSet<E> toImmutableSortedSet(Comparator<? super E> comparator) {, +    return ImmutableSortedSet.copyOf(comparator, iterable);, +  }, +, +  /**]