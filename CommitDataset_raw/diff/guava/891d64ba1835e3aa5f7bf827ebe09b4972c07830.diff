[+++ b/guava/src/com/google/common/base/Equivalence.java, + * A strategy for determining whether two instances are considered equivalent, and for computing, + * hash codes in a manner consistent with that equivalence. Two examples of equivalences are the, + * {@linkplain #identity() identity equivalence} and the {@linkplain #equals "equals" equivalence}., +   * <p>This method describes an <i>equivalence relation</i> on object references, meaning that for, +   * all references {@code x}, {@code y}, and {@code z} (any of which may be null):, +   * <li>{@code equivalent(x, x)} is true (<i>reflexive</i> property), +   * <li>{@code equivalent(x, y)} and {@code equivalent(y, x)} each return the same result, +   *     (<i>symmetric</i> property), +   * <li>If {@code equivalent(x, y)} and {@code equivalent(y, z)} are both true, then, +   *     {@code equivalent(x, z)} is also true (<i>transitive</i> property), +   *, +   * <p>Note that all calls to {@code equivalent(x, y)} are expected to return the same result as, +   * long as neither {@code x} nor {@code y} is modified., +   * Implemented by the user to determine whether {@code a} and {@code b} are considered, +   * equivalent, subject to the requirements specified in {@link #equivalent}., +   * <p>This method should not be called except by {@link #equivalent}. When {@link #equivalent}, +   * calls this method, {@code a} and {@code b} are guaranteed to be distinct, non-null instances., +   * Implemented by the user to return a hash code for {@code t}, subject to the requirements, +   * specified in {@link #hash}., +   * <p>This method should not be called except by {@link #hash}. When {@link #hash} calls this, +   * method, {@code t} is guaranteed to be non-null.]