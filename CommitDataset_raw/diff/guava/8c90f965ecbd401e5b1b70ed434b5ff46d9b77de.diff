[+++ b/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java, +import static java.util.Arrays.asList;, +, +import com.google.common.collect.testing.testers.MapEntrySetTester;, +    return asList(MapEntrySetTester.getSetValueMethod());, +++ b/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java, +import static java.util.Arrays.asList;, +, +import com.google.common.collect.testing.testers.MapEntrySetTester;, +    return asList(MapEntrySetTester.getSetValueMethod());, +++ b/guava-testlib/src/com/google/common/collect/testing/testers/MapEntrySetTester.java, +import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;, +  @MapFeature.Require(SUPPORTS_PUT), +  @CollectionSize.Require(absent = ZERO), +  public void testSetValue() {, +    for (Entry<K, V> entry : getMap().entrySet()) {, +      if (entry.getKey().equals(k0())) {, +        assertEquals("entry.setValue() should return the old value", v0(), entry.setValue(v3()));, +        break;, +      }, +    }, +    expectReplacement(entry(k0(), v3()));, +  }, +  , +  , +  @GwtIncompatible // reflection, +  public static Method getSetValueMethod() {, +    return Helpers.getMethod(MapEntrySetTester.class, "testSetValue");, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java, +import static java.util.Arrays.asList;, +, +import com.google.common.collect.testing.testers.MapEntrySetTester;, +    return asList(MapEntrySetTester.getSetValueMethod());, +++ b/guava-testlib/src/com/google/common/collect/testing/testers/MapEntrySetTester.java, +import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;, +  @MapFeature.Require(SUPPORTS_PUT), +  @CollectionSize.Require(absent = ZERO), +  public void testSetValue() {, +    for (Entry<K, V> entry : getMap().entrySet()) {, +      if (entry.getKey().equals(k0())) {, +        assertEquals("entry.setValue() should return the old value", v0(), entry.setValue(v3()));, +        break;, +      }, +    }, +    expectReplacement(entry(k0(), v3()));, +  }, +  , +  , +  @GwtIncompatible // reflection, +  public static Method getSetValueMethod() {, +    return Helpers.getMethod(MapEntrySetTester.class, "testSetValue");, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/testers/MapPutTester.java, +  @CollectionSize.Require(absent = ZERO), +  public void testPut_supportedPresent() {, +    assertEquals("put(present, value) should return the old value", v0(), getMap().put(k0(), v3()));, +    expectReplacement(entry(k0(), v3()));, +  }, +, +  @MapFeature.Require(SUPPORTS_PUT), +++ b/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java, +import static java.util.Arrays.asList;, +, +import com.google.common.collect.testing.testers.MapEntrySetTester;, +    return asList(MapEntrySetTester.getSetValueMethod());, +++ b/guava-testlib/src/com/google/common/collect/testing/testers/MapEntrySetTester.java, +import static com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;, +  @MapFeature.Require(SUPPORTS_PUT), +  @CollectionSize.Require(absent = ZERO), +  public void testSetValue() {, +    for (Entry<K, V> entry : getMap().entrySet()) {, +      if (entry.getKey().equals(k0())) {, +        assertEquals("entry.setValue() should return the old value", v0(), entry.setValue(v3()));, +        break;, +      }, +    }, +    expectReplacement(entry(k0(), v3()));, +  }, +  , +  , +  @GwtIncompatible // reflection, +  public static Method getSetValueMethod() {, +    return Helpers.getMethod(MapEntrySetTester.class, "testSetValue");, +  }, +++ b/guava-testlib/src/com/google/common/collect/testing/testers/MapPutTester.java, +  @CollectionSize.Require(absent = ZERO), +  public void testPut_supportedPresent() {, +    assertEquals("put(present, value) should return the old value", v0(), getMap().put(k0(), v3()));, +    expectReplacement(entry(k0(), v3()));, +  }, +, +  @MapFeature.Require(SUPPORTS_PUT), +++ b/guava-testlib/test/com/google/common/collect/testing/OpenJdk6MapTests.java, +import static com.google.common.collect.Lists.newArrayList;, +import java.util.List;, +    List<Method> methods = newArrayList();, +    methods.addAll(super.suppressForConcurrentSkipListMap());, +    methods.add(getContainsEntryWithIncomparableKeyMethod());, +    methods.add(getContainsEntryWithIncomparableValueMethod());]