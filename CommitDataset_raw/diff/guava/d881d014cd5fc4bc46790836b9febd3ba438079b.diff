[+++ b/guava-tests/test/com/google/common/io/CharSinkTest.java, +  public void testWriteLines_stream() throws IOException {, +    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream());, +    String separator = System.getProperty("line.separator");, +    assertEquals("foo" + separator + "bar" + separator + "baz" + separator, sink.getString());, +  }, +, +  public void testWriteLines_stream_separator() throws IOException {, +    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream(), "!");, +    assertEquals("foo!bar!baz!", sink.getString());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSinkTest.java, +  public void testWriteLines_stream() throws IOException {, +    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream());, +    String separator = System.getProperty("line.separator");, +    assertEquals("foo" + separator + "bar" + separator + "baz" + separator, sink.getString());, +  }, +, +  public void testWriteLines_stream_separator() throws IOException {, +    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream(), "!");, +    assertEquals("foo!bar!baz!", sink.getString());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSinkTester.java, +import com.google.common.io.SourceSinkFactory.CharSinkFactory;, +  public void testWriteLinesStream_systemDefaultSeparator() throws IOException {, +    String separator = System.getProperty("line.separator");, +    sink.writeLines(lines.stream());, +, +    assertContainsExpectedLines(separator);, +  }, +, +  public void testWriteLinesStream_specificSeparator() throws IOException {, +    String separator = "\r\n";, +    sink.writeLines(lines.stream(), separator);, +, +    assertContainsExpectedLines(separator);, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSinkTest.java, +  public void testWriteLines_stream() throws IOException {, +    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream());, +    String separator = System.getProperty("line.separator");, +    assertEquals("foo" + separator + "bar" + separator + "baz" + separator, sink.getString());, +  }, +, +  public void testWriteLines_stream_separator() throws IOException {, +    sink.writeLines(ImmutableList.of("foo", "bar", "baz").stream(), "!");, +    assertEquals("foo!bar!baz!", sink.getString());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharSinkTester.java, +import com.google.common.io.SourceSinkFactory.CharSinkFactory;, +  public void testWriteLinesStream_systemDefaultSeparator() throws IOException {, +    String separator = System.getProperty("line.separator");, +    sink.writeLines(lines.stream());, +, +    assertContainsExpectedLines(separator);, +  }, +, +  public void testWriteLinesStream_specificSeparator() throws IOException {, +    String separator = "\r\n";, +    sink.writeLines(lines.stream(), separator);, +, +    assertContainsExpectedLines(separator);, +  }, +, +++ b/guava/src/com/google/common/io/CharSink.java, +import com.google.common.annotations.Beta;, +import java.util.Iterator;, +import java.util.stream.Stream;, +    writeLines(lines.iterator(), lineSeparator);, +  }, +, +  /**, +   * Writes the given lines of text to this sink with each line (including the last) terminated with, +   * the operating system's default line separator. This method is equivalent to {@code, +   * writeLines(lines, System.getProperty("line.separator"))}., +   *, +   * @throws IOException if an I/O error occurs while writing to this sink, +   * @since 22.0, +   */, +  @Beta, +  public void writeLines(Stream<? extends CharSequence> lines) throws IOException {, +    writeLines(lines, System.getProperty("line.separator"));, +  }, +, +  /**, +   * Writes the given lines of text to this sink with each line (including the last) terminated with, +   * the given line separator., +   *, +   * @throws IOException if an I/O error occurs while writing to this sink, +   * @since 22.0, +   */, +  @Beta, +  public void writeLines(Stream<? extends CharSequence> lines, String lineSeparator), +      throws IOException {, +    writeLines(lines.iterator(), lineSeparator);, +  }]