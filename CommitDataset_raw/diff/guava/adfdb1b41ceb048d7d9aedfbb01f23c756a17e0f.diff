[+++ b/gwt-src/com/google/common/collect/ExplicitOrderedImmutableSortedSet_CustomFieldSerializer.java, +  @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/gwt-src/com/google/common/collect/ExplicitOrderedImmutableSortedSet_CustomFieldSerializer.java, +  @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +     * @param entry the entry being removed from the table, +++ b/gwt-src/com/google/common/collect/ExplicitOrderedImmutableSortedSet_CustomFieldSerializer.java, +  @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +     * @param entry the entry being removed from the table, +++ b/src/com/google/common/collect/ExplicitOrderedImmutableSortedSet.java, +    @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/gwt-src/com/google/common/collect/ExplicitOrderedImmutableSortedSet_CustomFieldSerializer.java, +  @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +     * @param entry the entry being removed from the table, +++ b/src/com/google/common/collect/ExplicitOrderedImmutableSortedSet.java, +    @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/ImmutableSortedSet.java, +  /*, +   * TODO(cpovirk): find a way to remove this @SuppressWarnings even for, +   * eclipse?, +   */, +  private static final Comparator<Comparable> NATURAL_ORDER =, +      Ordering.natural();, +   *     {@link #copyOf(Iterable)} will produce a set with the same elements in, +   *     the same order.  If the elements are arranged according to another, +   *     {@code Comparator}, use {@link #orderedBy(Comparator)}.  Otherwise, use, +   *     {@link ImmutableSet}, which maintains insertion order for inputs that, +   *     are ordered but not sorted. This method is scheduled for deletion in, +   *     Guava release 10., +   *     {@link #of()} will produce a set with the same elements in the same, +   *     order.  If the elements are arranged according to another {@code, +   *     Comparator}, use {@link #orderedBy(Comparator)}.  Otherwise, use {@link, +   *     ImmutableSet}, which maintains insertion order for inputs that are, +   *     ordered but not sorted. This method is scheduled for deletion in Guava, +   *     release 10., +++ b/gwt-src/com/google/common/collect/ExplicitOrderedImmutableSortedSet_CustomFieldSerializer.java, +  @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +     * @param entry the entry being removed from the table, +++ b/src/com/google/common/collect/ExplicitOrderedImmutableSortedSet.java, +    @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/ImmutableSortedSet.java, +  /*, +   * TODO(cpovirk): find a way to remove this @SuppressWarnings even for, +   * eclipse?, +   */, +  private static final Comparator<Comparable> NATURAL_ORDER =, +      Ordering.natural();, +   *     {@link #copyOf(Iterable)} will produce a set with the same elements in, +   *     the same order.  If the elements are arranged according to another, +   *     {@code Comparator}, use {@link #orderedBy(Comparator)}.  Otherwise, use, +   *     {@link ImmutableSet}, which maintains insertion order for inputs that, +   *     are ordered but not sorted. This method is scheduled for deletion in, +   *     Guava release 10., +   *     {@link #of()} will produce a set with the same elements in the same, +   *     order.  If the elements are arranged according to another {@code, +   *     Comparator}, use {@link #orderedBy(Comparator)}.  Otherwise, use {@link, +   *     ImmutableSet}, which maintains insertion order for inputs that are, +   *     ordered but not sorted. This method is scheduled for deletion in Guava, +   *     release 10., +++ b/src/com/google/common/collect/RegularImmutableMap.java, +  /** {@code LinkedEntry} implementation that has a next value. */, +   * {@code LinkedEntry} implementation that serves as the last entry in the, +++ b/gwt-src/com/google/common/collect/ExplicitOrderedImmutableSortedSet_CustomFieldSerializer.java, +  @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +     * @param entry the entry being removed from the table, +++ b/src/com/google/common/collect/ExplicitOrderedImmutableSortedSet.java, +    @SuppressWarnings("deprecation") // serialization for deprecated method, +++ b/src/com/google/common/collect/ImmutableSortedSet.java, +  /*, +   * TODO(cpovirk): find a way to remove this @SuppressWarnings even for, +   * eclipse?, +   */, +  private static final Comparator<Comparable> NATURAL_ORDER =, +      Ordering.natural();, +   *     {@link #copyOf(Iterable)} will produce a set with the same elements in, +   *     the same order.  If the elements are arranged according to another, +   *     {@code Comparator}, use {@link #orderedBy(Comparator)}.  Otherwise, use, +   *     {@link ImmutableSet}, which maintains insertion order for inputs that, +   *     are ordered but not sorted. This method is scheduled for deletion in, +   *     Guava release 10., +   *     {@link #of()} will produce a set with the same elements in the same, +   *     order.  If the elements are arranged according to another {@code, +   *     Comparator}, use {@link #orderedBy(Comparator)}.  Otherwise, use {@link, +   *     ImmutableSet}, which maintains insertion order for inputs that are, +   *     ordered but not sorted. This method is scheduled for deletion in Guava, +   *     release 10., +++ b/src/com/google/common/collect/RegularImmutableMap.java, +  /** {@code LinkedEntry} implementation that has a next value. */, +   * {@code LinkedEntry} implementation that serves as the last entry in the, +++ b/src/com/google/common/util/concurrent/Service.java, +   *     it has already finished stopping, {@link ListenableFuture#get} returns]