[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Iterator;, +      if (!(graph instanceof Hypergraph)) {, +        Iterator<Integer> incidentNodesIterator = graph.incidentNodes(edge).iterator();, +        Integer node1 = incidentNodesIterator.next();, +        Integer node2 = incidentNodesIterator.hasNext() ? incidentNodesIterator.next() : node1;, +        assertFalse(incidentNodesIterator.hasNext());, +      }, +      for (Integer incidentNode : graph.incidentNodes(edge)) {, +        if (!(graph instanceof Hypergraph)) {, +      }, +        if (!(graph instanceof Hypergraph)) {, +      }, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +import java.util.Iterator;, +      if (!(graph instanceof Hypergraph)) {, +        Iterator<Integer> incidentNodesIterator = graph.incidentNodes(edge).iterator();, +        Integer node1 = incidentNodesIterator.next();, +        Integer node2 = incidentNodesIterator.hasNext() ? incidentNodesIterator.next() : node1;, +        assertFalse(incidentNodesIterator.hasNext());, +      }, +      for (Integer incidentNode : graph.incidentNodes(edge)) {, +        if (!(graph instanceof Hypergraph)) {, +      }, +        if (!(graph instanceof Hypergraph)) {, +      }, +++ b/guava/src/com/google/common/graph/Graph.java, +   * <p>For non-hypergraphs, the returned set will always contain either one, +   * (if {@code edge} is a self-loop) or two nodes.]