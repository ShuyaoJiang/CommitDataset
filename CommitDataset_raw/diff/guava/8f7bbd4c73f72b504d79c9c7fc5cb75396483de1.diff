[+++ b/android/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java, +/*, + * Copyright (C) 2017 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.primitives;, +, +import static com.google.common.testing.SerializableTester.reserialize;, +import static com.google.common.truth.Truth.assertThat;, +, +import com.google.common.annotations.GwtCompatible;, +import com.google.common.annotations.GwtIncompatible;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ObjectArrays;, +import com.google.common.collect.testing.ListTestSuiteBuilder;, +import com.google.common.collect.testing.SampleElements;, +import com.google.common.collect.testing.TestListGenerator;, +import com.google.common.collect.testing.features.CollectionFeature;, +import com.google.common.collect.testing.features.CollectionSize;, +import com.google.common.testing.EqualsTester;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicInteger;, +import junit.framework.Test;, +import junit.framework.TestCase;, +import junit.framework.TestSuite;, +, +/** @author Kevin Bourrillion */, +@GwtCompatible(emulated = true), +public class ImmutableDoubleArrayTest extends TestCase {, +  // Test all creation paths very lazily: by assuming asList() works, +, +  public void testOf0() {, +    assertThat(ImmutableDoubleArray.of().asList()).isEmpty();, +  }, +, +  public void testOf1() {, +    assertThat(ImmutableDoubleArray.of(0).asList()).containsExactly(0.0);, +  }, +, +  public void testOf2() {, +    assertThat(ImmutableDoubleArray.of(0, 1).asList()).containsExactly(0.0, 1.0).inOrder();, +  }, +, +  public void testOf3() {, +    assertThat(ImmutableDoubleArray.of(0, 1, 3).asList()).containsExactly(0.0, 1.0, 3.0).inOrder();, +  }, +, +  public void testOf4() {, +    assertThat(ImmutableDoubleArray.of(0, 1, 3, 6).asList()), +        .containsExactly(0.0, 1.0, 3.0, 6.0), +        .inOrder();, +  }, +, +  public void testOf5() {, +    assertThat(ImmutableDoubleArray.of(0, 1, 3, 6, 10).asList()), +        .containsExactly(0.0, 1.0, 3.0, 6.0, 10.0), +        .inOrder();, +  }, +, +  public void testOf6() {, +    assertThat(ImmutableDoubleArray.of(0, 1, 3, 6, 10, 15).asList()), +        .containsExactly(0.0, 1.0, 3.0, 6.0, 10.0, 15.0), +        .inOrder();, +  }, +, +  public void testOf7() {, +    assertThat(ImmutableDoubleArray.of(0, 1, 3, 6, 10, 15, 21).asList()), +        .containsExactly(0.0, 1.0, 3.0, 6.0, 10.0, 15.0, 21.0), +        .inOrder();, +  }, +, +  public void testCopyOf_array_empty() {, +    /*, +     * We don't guarantee the same-as property, so we aren't obligated to test it. However, it's, +     * useful in testing - when two things are the same then one can't have bugs the other doesn't., +     */, +    assertThat(ImmutableDoubleArray.copyOf(new double[0])).isSameAs(ImmutableDoubleArray.of());, +  }, +, +  public void testCopyOf_array_nonempty() {, +    double[] array = new double[] {0, 1, 3};, +    ImmutableDoubleArray iia = ImmutableDoubleArray.copyOf(array);, +    array[2] = 2;, +    assertThat(iia.asList()).containsExactly(0.0, 1.0, 3.0).inOrder();]