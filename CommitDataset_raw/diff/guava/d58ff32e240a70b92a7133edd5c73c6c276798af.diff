[+++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +    assertEquals(8, ImmutableSet.chooseTableSize(4));, +    assertEquals(1 << 29, ImmutableSet.chooseTableSize(1 << 28));, +    assertEquals(1 << 29, ImmutableSet.chooseTableSize(1 << 29 - 1));, +    verifyTableSize(100, 2, 4);, +    verifyTableSize(100, 5, 8);, +    verifyTableSize(100, 33, 64);, +    verifyTableSize(17, 17, 32);, +    verifyTableSize(17, 16, 32);, +    verifyTableSize(17, 15, 32);, +++ b/guava-tests/test/com/google/common/collect/ImmutableSetTest.java, +    assertEquals(8, ImmutableSet.chooseTableSize(4));, +    assertEquals(1 << 29, ImmutableSet.chooseTableSize(1 << 28));, +    assertEquals(1 << 29, ImmutableSet.chooseTableSize(1 << 29 - 1));, +    verifyTableSize(100, 2, 4);, +    verifyTableSize(100, 5, 8);, +    verifyTableSize(100, 33, 64);, +    verifyTableSize(17, 17, 32);, +    verifyTableSize(17, 16, 32);, +    verifyTableSize(17, 15, 32);, +++ b/guava/src/com/google/common/collect/ImmutableSet.java, +import com.google.common.annotations.VisibleForTesting;, +    } else if (tableSize != chooseTableSize(uniqueElements.length)) {, +  // Represents how tightly we can pack things, as a maximum., +  private static final double DESIRED_LOAD_FACTOR = 0.7;, +, +  private static final int CUTOFF = (int) Math.floor(MAX_TABLE_SIZE * DESIRED_LOAD_FACTOR);, +   * uses open addressing with linear probing in its implementation.  The, +   * returned size is the smallest power of two that can hold setSize elements, +   * with the desired load factor., +   *, +   * <p>Do not call this method with setSize < 2., +  @VisibleForTesting static int chooseTableSize(int setSize) {, +    // Correct the size for open addressing to match desired load factor., +      // Round up to the next highest power of 2., +      int tableSize = Integer.highestOneBit(setSize - 1) << 1;, +      while (tableSize * DESIRED_LOAD_FACTOR < setSize) {, +        tableSize <<= 1;, +      }, +      return tableSize;]