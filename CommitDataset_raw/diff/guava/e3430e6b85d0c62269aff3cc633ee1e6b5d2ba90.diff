[+++ b/src/com/google/common/util/concurrent/ListenableFuture.java, + * A {@link Future} that accepts completion listeners.  Each listener has an, + * associated executor, and is invoked using this executor once the future's, + * computation is {@linkplain Future#isDone() complete}.  If the computation has, + * already completed when the listener is added, the listener will execute, + * immediately., + *, + * <p>Common {@code ListenableFuture} implementations include {@link, + * ValueFuture} and the futures returned by a {@link ListeningExecutorService}, + * (typically {@link ListenableFutureTask} instances)., + *   }, executor);}</pre>, +   * Registers a listener to be {@linkplain Executor#execute(Runnable) run} on, +   * the given executor.  The listener will run when the {@code Future}'s, +   * computation is {@linkplain Future#isDone() complete} or, if the computation, +   * is already complete, immediately., +   * <p>There is no guaranteed ordering of execution of listeners, but any, +   * listener added through this method is guaranteed to be called once the, +   * computation is complete., +   * <p>Listeners cannot throw checked exceptions and should not throw {@code, +   * RuntimeException} unless their executors are prepared to handle it., +   * Listeners that will execute in {@link MoreExecutors#sameThreadExecutor}, +   * should take special care, since they may run during the call to {@code, +   * addListener} or during the call that sets the future's value., +   *, +   * @param listener the listener to run when the computation is complete, +   * @param executor the executor to run the listener in, +   * @throws NullPointerException if the executor or listener was null, +  void addListener(Runnable listener, Executor executor);]