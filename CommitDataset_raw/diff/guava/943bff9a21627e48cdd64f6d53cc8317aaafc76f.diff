[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +  static CommonPattern compilePattern(String pattern) {, +    throw new UnsupportedOperationException();, +  }, +, +  static boolean usingJdkPatternCompiler() {, +    return false;, +  }, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +  static CommonPattern compilePattern(String pattern) {, +    throw new UnsupportedOperationException();, +  }, +, +  static boolean usingJdkPatternCompiler() {, +    return false;, +  }, +, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +    if (!Platform.usingJdkPatternCompiler()) {, +      return;, +    }, +    if (!Platform.usingJdkPatternCompiler()) {, +      return;, +    }, +   * This test really pushes the boundaries of what we support. In general the splitter's behaviour, +   * is not well defined if the char sequence it's splitting is mutated during iteration., +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +  static CommonPattern compilePattern(String pattern) {, +    throw new UnsupportedOperationException();, +  }, +, +  static boolean usingJdkPatternCompiler() {, +    return false;, +  }, +, +++ b/guava-tests/test/com/google/common/base/SplitterTest.java, +    if (!Platform.usingJdkPatternCompiler()) {, +      return;, +    }, +    if (!Platform.usingJdkPatternCompiler()) {, +      return;, +    }, +   * This test really pushes the boundaries of what we support. In general the splitter's behaviour, +   * is not well defined if the char sequence it's splitting is mutated during iteration., +++ b/guava/src/com/google/common/base/CommonMatcher.java, +/*, + * Copyright (C) 2016 The Guava Authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + */, +, +package com.google.common.base;, +, +import com.google.common.annotations.GwtCompatible;, +, +/**, + * The subset of the {@link java.util.regex.Matcher} API which is used by this package, and also, + * shared with the {@code re2j} library. For internal use only. Please refer to the {@code Matcher}, + * javadoc for details., + */, +@GwtCompatible, +abstract class CommonMatcher {, +  abstract boolean matches();, +, +  abstract boolean find();, +, +  abstract boolean find(int index);, +, +  abstract String replaceAll(String replacement);, +, +  abstract int end();, +, +  abstract int start();, +}, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java, +import java.util.concurrent.TimeUnit;, +import javax.annotation.Nullable;, +  static CommonPattern compilePattern(String pattern) {, +    throw new UnsupportedOperationException();, +  }, +, +  static boolean usingJdkPatternCompiler() {, +    return false;, +  }, +]