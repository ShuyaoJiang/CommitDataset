[+++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java, +   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our, +   * preferred strategy {@code UnsafeAtomicHelper}., +   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},, +   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy., +    // Run the corresponding AbstractFutureTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> disallowedClassNames) {, +        if (disallowedClassNames.contains(name)) {, +++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java, +   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our, +   * preferred strategy {@code UnsafeAtomicHelper}., +   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},, +   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy., +    // Run the corresponding AbstractFutureTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> disallowedClassNames) {, +        if (disallowedClassNames.contains(name)) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java, +   * This classloader disallows AtomicReferenceFieldUpdater and AtomicIntegerFieldUpdate which will, +    // Run the corresponding FuturesTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> blocklist) {, +        if (blocklist.contains(name)) {, +++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java, +   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our, +   * preferred strategy {@code UnsafeAtomicHelper}., +   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},, +   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy., +    // Run the corresponding AbstractFutureTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> disallowedClassNames) {, +        if (disallowedClassNames.contains(name)) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java, +   * This classloader disallows AtomicReferenceFieldUpdater and AtomicIntegerFieldUpdate which will, +    // Run the corresponding FuturesTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> blocklist) {, +        if (blocklist.contains(name)) {, +++ b/android/guava/src/com/google/common/base/Throwables.java, +   * Returns the JavaLangAccess class that is present in all Sun JDKs. It is not allowed in, +       * This is not one of AppEngine's allowed classes, so even in Sun JDKs, this can fail with, +++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java, +   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our, +   * preferred strategy {@code UnsafeAtomicHelper}., +   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},, +   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy., +    // Run the corresponding AbstractFutureTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> disallowedClassNames) {, +        if (disallowedClassNames.contains(name)) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java, +   * This classloader disallows AtomicReferenceFieldUpdater and AtomicIntegerFieldUpdate which will, +    // Run the corresponding FuturesTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> blocklist) {, +        if (blocklist.contains(name)) {, +++ b/android/guava/src/com/google/common/base/Throwables.java, +   * Returns the JavaLangAccess class that is present in all Sun JDKs. It is not allowed in, +       * This is not one of AppEngine's allowed classes, so even in Sun JDKs, this can fail with, +++ b/cycle_whitelist.txt, +# Allow our dependencies for now., +++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java, +   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our, +   * preferred strategy {@code UnsafeAtomicHelper}., +   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},, +   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy., +    // Run the corresponding AbstractFutureTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> disallowedClassNames) {, +        if (disallowedClassNames.contains(name)) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java, +   * This classloader disallows AtomicReferenceFieldUpdater and AtomicIntegerFieldUpdate which will, +    // Run the corresponding FuturesTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> blocklist) {, +        if (blocklist.contains(name)) {, +++ b/android/guava/src/com/google/common/base/Throwables.java, +   * Returns the JavaLangAccess class that is present in all Sun JDKs. It is not allowed in, +       * This is not one of AppEngine's allowed classes, so even in Sun JDKs, this can fail with, +++ b/cycle_whitelist.txt, +# Allow our dependencies for now., +++ b/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java, + *       probably require adding the dep to various ACLs, license files, and Proguard, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java, +   * This classloader disallows {@link sun.misc.Unsafe}, which will prevent us from selecting our, +   * preferred strategy {@code UnsafeAtomicHelper}., +   * This classloader disallows {@link sun.misc.Unsafe} and {@link AtomicReferenceFieldUpdater},, +   * which will prevent us from selecting our {@code SafeAtomicHelper} strategy., +    // Run the corresponding AbstractFutureTest test method in a new classloader that disallows, +  private static ClassLoader getClassLoader(final Set<String> disallowedClassNames) {, +        if (disallowedClassNames.contains(name)) {, +++ b/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java, +   * This classloader disallows AtomicReferenceFieldUpdater and AtomicIntegerFieldUpdate which will, +    // Run the corresponding FuturesTest test method in a new classloader that disallows]