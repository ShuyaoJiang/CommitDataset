[+++ b/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java, +      boolean isPossibleChainingCall = interfaceType.isAssignableFrom(method.getReturnType());, +        Object actualReturnValue = method.invoke(wrapper, passedArgs);, +        // If we think this might be a 'chaining' call then we allow the return value to either, +        // be the wrapper or the returnValue., +        if (!isPossibleChainingCall || wrapper != actualReturnValue) {, +              actualReturnValue);, +        }, +++ b/guava-testlib/src/com/google/common/testing/ForwardingWrapperTester.java, +      boolean isPossibleChainingCall = interfaceType.isAssignableFrom(method.getReturnType());, +        Object actualReturnValue = method.invoke(wrapper, passedArgs);, +        // If we think this might be a 'chaining' call then we allow the return value to either, +        // be the wrapper or the returnValue., +        if (!isPossibleChainingCall || wrapper != actualReturnValue) {, +              actualReturnValue);, +        }, +++ b/guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java, +, +  /**, +   * An interface for the 2 ways that a chaining call might be defined., +   */, +  private interface ChainingCalls {, +    // A method that is defined to 'return this', +    ChainingCalls chainingCall();, +    // A method that just happens to return a ChainingCalls object, +    ChainingCalls nonChainingCall();, +  }, +, +  private static class ForwardingChainingCalls implements ChainingCalls {, +    final ChainingCalls delegate;, +, +    ForwardingChainingCalls(ChainingCalls delegate) {, +      this.delegate = delegate;, +    }, +, +    @Override public ForwardingChainingCalls chainingCall() {, +      delegate.chainingCall();, +      return this;, +    }, +, +    @Override public ChainingCalls nonChainingCall() {, +      return delegate.nonChainingCall();, +    }, +, +    @Override public String toString() {, +      return delegate.toString();, +    }, +  }, +, +  public void testChainingCalls() {, +    tester.testForwarding(ChainingCalls.class,, +        new Function<ChainingCalls, ChainingCalls>() {, +          @Override public ChainingCalls apply(ChainingCalls delegate) {, +            return new ForwardingChainingCalls(delegate);, +          }, +        });, +  }]