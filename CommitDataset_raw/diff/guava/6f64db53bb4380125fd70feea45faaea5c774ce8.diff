[+++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +      assertEquals(1, scanner.getResources().size());, +    assertThat(scanner.getResources()).isEmpty();, +    assertThat(scanner.getResources()).isEmpty();, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$1Local.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getPackageName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());, +    return ResourceInfo.of(cls.getName().replace('.', '/') + ".class", cls.getClassLoader());, +    return new ClassInfo(cls.getName().replace('.', '/') + ".class", classLoader);, +++ b/guava-tests/test/com/google/common/reflect/ClassPathTest.java, +      assertEquals(1, scanner.getResources().size());, +    assertThat(scanner.getResources()).isEmpty();, +    assertThat(scanner.getResources()).isEmpty();, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$Foo.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$1.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("a/b/Bar$1Local.class", getClass().getClassLoader()).getSimpleName());, +        new ClassInfo("Foo.class", getClass().getClassLoader()).getPackageName());, +        new ClassInfo("a/b/Foo.class", getClass().getClassLoader()).getPackageName());, +    return ResourceInfo.of(cls.getName().replace('.', '/') + ".class", cls.getClassLoader());, +    return new ClassInfo(cls.getName().replace('.', '/') + ".class", classLoader);, +++ b/guava/src/com/google/common/reflect/ClassPath.java, +    return new ClassPath(scanner.getResources());, +    static ResourceInfo of(String resourceName, ClassLoader loader) {, +      if (resourceName.endsWith(CLASS_FILE_NAME_EXTENSION)) {, +        return new ClassInfo(resourceName, loader);, +      } else {, +        return new ResourceInfo(resourceName, loader);, +      }, +    }, +  , +    ClassInfo(String resourceName, ClassLoader loader) {, +      this.className = getClassName(resourceName);, +, +    private final ImmutableSortedSet.Builder<ResourceInfo> resources =, +        new ImmutableSortedSet.Builder<ResourceInfo>(Ordering.usingToString());, +    ImmutableSortedSet<ResourceInfo> getResources() {, +      return resources.build();, +            resources.add(ResourceInfo.of(resourceName, classloader));, +    private void scanJar(File file, ClassLoader classloader) throws IOException {, +      JarFile jarFile;, +          if (entry.isDirectory() || entry.getName().equals(JarFile.MANIFEST_NAME)) {, +          resources.add(ResourceInfo.of(entry.getName(), classloader));]