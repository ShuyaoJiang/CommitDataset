[+++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.edgesConnecting(node1, node2)).contains(edge);, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.edgesConnecting(node1, node2)).contains(edge);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.edgesConnecting(node1, node2)).contains(edge);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +++ b/guava-tests/test/com/google/common/graph/IncidenceSetDirectedMultigraphTest.java, +    addEdge(E12, N1, N2);, +    assertTrue(directedGraph.removeEdge(E11_A));, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertTrue(directedGraph.removeEdge(E11));, +    assertThat(directedGraph.edgesConnecting(N1, N1)).isEmpty();, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.edgesConnecting(node1, node2)).contains(edge);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +++ b/guava-tests/test/com/google/common/graph/IncidenceSetDirectedMultigraphTest.java, +    addEdge(E12, N1, N2);, +    assertTrue(directedGraph.removeEdge(E11_A));, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertTrue(directedGraph.removeEdge(E11));, +    assertThat(directedGraph.edgesConnecting(N1, N1)).isEmpty();, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +++ b/guava-tests/test/com/google/common/graph/IncidenceSetUndirectedMultigraphTest.java, +    addEdge(E12, N1, N2);, +    assertTrue(undirectedGraph.removeEdge(E11_A));, +    assertThat(undirectedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertTrue(undirectedGraph.removeEdge(E11));, +    assertThat(undirectedGraph.edgesConnecting(N1, N1)).isEmpty();, +    assertThat(undirectedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.edgesConnecting(node1, node2)).contains(edge);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +++ b/guava-tests/test/com/google/common/graph/IncidenceSetDirectedMultigraphTest.java, +    addEdge(E12, N1, N2);, +    assertTrue(directedGraph.removeEdge(E11_A));, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertTrue(directedGraph.removeEdge(E11));, +    assertThat(directedGraph.edgesConnecting(N1, N1)).isEmpty();, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +++ b/guava-tests/test/com/google/common/graph/IncidenceSetUndirectedMultigraphTest.java, +    addEdge(E12, N1, N2);, +    assertTrue(undirectedGraph.removeEdge(E11_A));, +    assertThat(undirectedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +    assertTrue(undirectedGraph.removeEdge(E11));, +    assertThat(undirectedGraph.edgesConnecting(N1, N1)).isEmpty();, +    assertThat(undirectedGraph.edgesConnecting(N1, N2)).containsExactly(E12);, +++ b/guava-tests/test/com/google/common/graph/PackageSanityTests.java, +import static com.google.common.truth.Truth.assertThat;, +, +import junit.framework.AssertionFailedError;, +, +, +  @Override, +  public void testNulls() throws Exception {, +    try {, +      super.testNulls();, +    } catch (AssertionFailedError e) {, +      assertThat(e.getCause().getMessage()).contains(AbstractGraphTest.ERROR_ELEMENT_NOT_IN_GRAPH);, +    }, +  }, +++ b/guava-tests/test/com/google/common/graph/AbstractGraphTest.java, +      assertThat(graph.edgesConnecting(node1, node2)).contains(edge);, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +import static com.google.common.graph.Graphs.selfLoopPredicate;, +import com.google.common.base.Predicates;, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(directedGraph));, +    Predicate<String> edgePredicate = Predicates.not(selfLoopPredicate(undirectedGraph));, +++ b/guava-tests/test/com/google/common/graph/IncidenceSetDirectedMultigraphTest.java, +    addEdge(E12, N1, N2);, +    assertTrue(directedGraph.removeEdge(E11_A));, +    assertThat(directedGraph.edgesConnecting(N1, N2)).containsExactly(E12);]