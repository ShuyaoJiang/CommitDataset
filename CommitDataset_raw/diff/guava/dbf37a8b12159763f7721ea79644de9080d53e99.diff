[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      assertEquals(TreeRangeSet.create(subset), ImmutableRangeSet.unionOf(subset));, +, +      boolean anyOverlaps = false;, +            anyOverlaps = true;, +            break;, +      if (anyOverlaps) {, +        try {, +          RangeSet<Integer> copy = ImmutableRangeSet.copyOf(subset);, +          fail();, +        } catch (IllegalArgumentException expected) {, +        }, +      } else {, +        RangeSet<Integer> copy = ImmutableRangeSet.copyOf(subset);, +        assertEquals(mutable, copy);, +      }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      assertEquals(TreeRangeSet.create(subset), ImmutableRangeSet.unionOf(subset));, +, +      boolean anyOverlaps = false;, +            anyOverlaps = true;, +            break;, +      if (anyOverlaps) {, +        try {, +          RangeSet<Integer> copy = ImmutableRangeSet.copyOf(subset);, +          fail();, +        } catch (IllegalArgumentException expected) {, +        }, +      } else {, +        RangeSet<Integer> copy = ImmutableRangeSet.copyOf(subset);, +        assertEquals(mutable, copy);, +      }, +, +++ b/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java, +import java.util.Arrays;, +    assertTrue(rangeSet.enclosesAll(ImmutableList.<Range<Integer>>of()));, +      assertEquals(, +          rangeSet + " was incorrect on enclosesAll([" + query + "])",, +          expectEnclose,, +          rangeSet.enclosesAll(ImmutableList.of(query)));, +  public void testAddAll() {, +    RangeSet<Integer> rangeSet = TreeRangeSet.create();, +    rangeSet.add(Range.closed(3, 10));, +    rangeSet.addAll(Arrays.asList(Range.open(1, 3), Range.closed(5, 8), Range.closed(9, 11)));, +    assertThat(rangeSet.asRanges()), +        .containsExactly(Range.openClosed(1, 11)), +        .inOrder();, +  }, +, +  public void testRemoveAll() {, +    RangeSet<Integer> rangeSet = TreeRangeSet.create();, +    rangeSet.add(Range.closed(3, 10));, +    rangeSet.removeAll(Arrays.asList(Range.open(1, 3), Range.closed(5, 8), Range.closed(9, 11)));, +    assertThat(rangeSet.asRanges()), +        .containsExactly(Range.closedOpen(3, 5), Range.open(8, 9)), +        .inOrder();, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeSetTest.java, +      assertEquals(TreeRangeSet.create(subset), ImmutableRangeSet.unionOf(subset));, +, +      boolean anyOverlaps = false;, +            anyOverlaps = true;, +            break;, +      if (anyOverlaps) {, +        try {, +          RangeSet<Integer> copy = ImmutableRangeSet.copyOf(subset);, +          fail();, +        } catch (IllegalArgumentException expected) {, +        }, +      } else {, +        RangeSet<Integer> copy = ImmutableRangeSet.copyOf(subset);, +        assertEquals(mutable, copy);, +      }, +, +++ b/guava-tests/test/com/google/common/collect/TreeRangeSetTest.java, +import java.util.Arrays;, +    assertTrue(rangeSet.enclosesAll(ImmutableList.<Range<Integer>>of()));, +      assertEquals(, +          rangeSet + " was incorrect on enclosesAll([" + query + "])",, +          expectEnclose,, +          rangeSet.enclosesAll(ImmutableList.of(query)));, +  public void testAddAll() {, +    RangeSet<Integer> rangeSet = TreeRangeSet.create();, +    rangeSet.add(Range.closed(3, 10));, +    rangeSet.addAll(Arrays.asList(Range.open(1, 3), Range.closed(5, 8), Range.closed(9, 11)));, +    assertThat(rangeSet.asRanges()), +        .containsExactly(Range.openClosed(1, 11)), +        .inOrder();, +  }, +, +  public void testRemoveAll() {, +    RangeSet<Integer> rangeSet = TreeRangeSet.create();, +    rangeSet.add(Range.closed(3, 10));, +    rangeSet.removeAll(Arrays.asList(Range.open(1, 3), Range.closed(5, 8), Range.closed(9, 11)));, +    assertThat(rangeSet.asRanges()), +        .containsExactly(Range.closedOpen(3, 5), Range.open(8, 9)), +        .inOrder();, +  }]