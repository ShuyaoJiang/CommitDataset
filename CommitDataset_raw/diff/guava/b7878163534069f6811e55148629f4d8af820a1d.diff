[+++ b/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java, +  public void testFromIntBitsAndIntValueAreInverses() {, +      assertEquals(UnsignedInts.toString(value), value, UnsignedInteger.fromIntBits(value), +  public void testFromIntBitsLongValue() {, +      assertEquals(UnsignedInts.toString(value), expected, UnsignedInteger.fromIntBits(value), +      UnsignedInteger unsignedValue = UnsignedInteger.fromIntBits(value);, +        UnsignedInteger value = UnsignedInteger.fromIntBits(l);, +        UnsignedInteger value = UnsignedInteger.fromIntBits(l);, +      UnsignedInteger unsignedValue = UnsignedInteger.fromIntBits(value);, +      UnsignedInteger unsignedValue = UnsignedInteger.fromIntBits(value);, +  public void testPlus() {, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +        UnsignedInteger unsignedSum = aUnsigned.plus(bUnsigned);, +  public void testMinus() {, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +        UnsignedInteger unsignedSub = aUnsigned.minus(bUnsigned);, +  public void testTimes() {, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +        UnsignedInteger unsignedMul = aUnsigned.times(bUnsigned);, +  public void testDividedBy() {, +          UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +          UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +          UnsignedInteger unsignedDiv = aUnsigned.dividedBy(bUnsigned);, +        UnsignedInteger.fromIntBits(a).divide(UnsignedInteger.ZERO);, +  public void testMod() {, +          UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +          UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +              aUnsigned.bigIntegerValue().mod(bUnsigned.bigIntegerValue()).intValue();, +          UnsignedInteger unsignedRem = aUnsigned.mod(bUnsigned);, +  public void testModByZero() {, +        UnsignedInteger.fromIntBits(a).mod(UnsignedInteger.ZERO);, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +      equalsTester.addEqualityGroup(UnsignedInteger.fromIntBits(a), UnsignedInteger.valueOf(value),, +      UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +      SerializableTester.reserializeAndAssert(UnsignedInteger.fromIntBits(a));, +++ b/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java, +  public void testFromIntBitsAndIntValueAreInverses() {, +      assertEquals(UnsignedInts.toString(value), value, UnsignedInteger.fromIntBits(value), +  public void testFromIntBitsLongValue() {, +      assertEquals(UnsignedInts.toString(value), expected, UnsignedInteger.fromIntBits(value), +      UnsignedInteger unsignedValue = UnsignedInteger.fromIntBits(value);, +        UnsignedInteger value = UnsignedInteger.fromIntBits(l);, +        UnsignedInteger value = UnsignedInteger.fromIntBits(l);, +      UnsignedInteger unsignedValue = UnsignedInteger.fromIntBits(value);, +      UnsignedInteger unsignedValue = UnsignedInteger.fromIntBits(value);, +  public void testPlus() {, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +        UnsignedInteger unsignedSum = aUnsigned.plus(bUnsigned);, +  public void testMinus() {, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +        UnsignedInteger unsignedSub = aUnsigned.minus(bUnsigned);, +  public void testTimes() {, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +        UnsignedInteger unsignedMul = aUnsigned.times(bUnsigned);, +  public void testDividedBy() {, +          UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +          UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +          UnsignedInteger unsignedDiv = aUnsigned.dividedBy(bUnsigned);, +        UnsignedInteger.fromIntBits(a).divide(UnsignedInteger.ZERO);, +  public void testMod() {, +          UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +          UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +              aUnsigned.bigIntegerValue().mod(bUnsigned.bigIntegerValue()).intValue();, +          UnsignedInteger unsignedRem = aUnsigned.mod(bUnsigned);, +  public void testModByZero() {, +        UnsignedInteger.fromIntBits(a).mod(UnsignedInteger.ZERO);, +        UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +        UnsignedInteger bUnsigned = UnsignedInteger.fromIntBits(b);, +      equalsTester.addEqualityGroup(UnsignedInteger.fromIntBits(a), UnsignedInteger.valueOf(value),, +      UnsignedInteger aUnsigned = UnsignedInteger.fromIntBits(a);, +      SerializableTester.reserializeAndAssert(UnsignedInteger.fromIntBits(a));, +++ b/guava/src/com/google/common/primitives/UnsignedInteger.java, +    // TODO(user): deprecate this, +    return fromIntBits(value);, +  }, +, +  /**, +   * Returns an {@code UnsignedInteger} corresponding to a given bit representation., +   * The argument is interpreted as an unsigned 32-bit value., +   *, +   * @since 14.0, +   */, +  public static UnsignedInteger fromIntBits(int bits) {, +    return new UnsignedInteger(bits);, +    return fromIntBits((int) value);, +    return fromIntBits(value.intValue());, +    return fromIntBits(UnsignedInts.parseUnsignedInt(string, radix));, +    // TODO(user): deprecate this, +    return plus(val);, +  }, +, +  /**, +   * Returns the result of adding this and {@code val}. If the result would have more than 32 bits,]