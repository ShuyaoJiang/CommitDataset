[+++ b/guava-tests/test/com/google/common/base/PredicatesTest.java, +  @GwtIncompatible // Predicates.subtypeOf, +  public void testSubtypeOf_apply() {, +    Predicate<Class<?>> isInteger = Predicates.subtypeOf(Integer.class);, +  @GwtIncompatible // Predicates.subtypeOf, +  public void testSubtypeOf_subclass() {, +    Predicate<Class<?>> isNumber = Predicates.subtypeOf(Number.class);, +  @GwtIncompatible // Predicates.subtypeOf, +  public void testSubtypeOf_interface() {, +        Predicates.subtypeOf(Comparable.class);, +  @GwtIncompatible // Predicates.subtypeOf, +  @SuppressWarnings("deprecation"), +  public void testSubtypeOf_equality() {, +            Predicates.subtypeOf(Integer.class),, +            Predicates.subtypeOf(Integer.class),, +        .addEqualityGroup(Predicates.subtypeOf(Number.class)), +        .addEqualityGroup(Predicates.subtypeOf(Float.class)), +  @GwtIncompatible // Predicates.subtypeOf, SerializableTester, +  public void testSubtypeOf_serialization() {, +        Predicates.subtypeOf(Integer.class);, +++ b/guava-tests/test/com/google/common/base/PredicatesTest.java, +  @GwtIncompatible // Predicates.subtypeOf, +  public void testSubtypeOf_apply() {, +    Predicate<Class<?>> isInteger = Predicates.subtypeOf(Integer.class);, +  @GwtIncompatible // Predicates.subtypeOf, +  public void testSubtypeOf_subclass() {, +    Predicate<Class<?>> isNumber = Predicates.subtypeOf(Number.class);, +  @GwtIncompatible // Predicates.subtypeOf, +  public void testSubtypeOf_interface() {, +        Predicates.subtypeOf(Comparable.class);, +  @GwtIncompatible // Predicates.subtypeOf, +  @SuppressWarnings("deprecation"), +  public void testSubtypeOf_equality() {, +            Predicates.subtypeOf(Integer.class),, +            Predicates.subtypeOf(Integer.class),, +        .addEqualityGroup(Predicates.subtypeOf(Number.class)), +        .addEqualityGroup(Predicates.subtypeOf(Float.class)), +  @GwtIncompatible // Predicates.subtypeOf, SerializableTester, +  public void testSubtypeOf_serialization() {, +        Predicates.subtypeOf(Integer.class);, +++ b/guava/src/com/google/common/base/Predicates.java, +   * Returns a predicate that evaluates to {@code true} if the class being tested is assignable, +   * <b>TO</b> {@code clazz}, that is, if it is a <b>subtype</b> of {@code clazz}. Yes, this method, +   * is named very incorrectly! Example: <pre>   {@code, +   *   List<Class<?>> classes = Arrays.asList(, +   *       Object.class, String.class, Number.class, Long.class);, +   *   return Iterables.filter(classes, assignableFrom(Number.class));}</pre>, +   *, +   * The code above returns {@code Number.class} and {@code Long.class}, <b>not</b> {@code, +   * Number.class} and {@code Object.class} as the name implies!, +   *, +   * <p>The returned predicate does not allow null inputs., +   *, +   * @deprecated Use the correctly-named method {@link #subtypeOf} instead., +  @Deprecated, +    return subtypeOf(clazz);, +  }, +, +  /**, +   * Returns a predicate that evaluates to {@code true} if the class being tested is assignable, +   * to (is a subtype of) {@code clazz}. Example: <pre>   {@code, +   *, +   *   List<Class<?>> classes = Arrays.asList(, +   *       Object.class, String.class, Number.class, Long.class);, +   *   return Iterables.filter(classes, subtypeOf(Number.class));}</pre>, +   *, +   * The code above returns an iterable containing {@code Number.class} and {@code Long.class}., +   *, +   * @since 20.0 (since 10.0 under the incorrect name {@code assignableFrom}), +   */, +  @GwtIncompatible // Class.isAssignableFrom, +  @Beta, +  public static Predicate<Class<?>> subtypeOf(Class<?> clazz) {, +    return new SubtypeOfPredicate(clazz);, +  /** @see Predicates#subtypeOf(Class) */, +  private static class SubtypeOfPredicate implements Predicate<Class<?>>, Serializable {, +    private SubtypeOfPredicate(Class<?> clazz) {, +      if (obj instanceof SubtypeOfPredicate) {, +        SubtypeOfPredicate that = (SubtypeOfPredicate) obj;, +      return "Predicates.subtypeOf(" + clazz.getName() + ")";]