[+++ b/guava-tests/test/com/google/common/io/FilesSimplifyPathTest.java, +  public void testSimplifyRootedDotDots() {, +    assertEquals("/", simplifyPath("/../../.."));, +    assertEquals("/", simplifyPath("/../../../"));, +  }, +  , +  // http://code.google.com/p/guava-libraries/issues/detail?id=722, +  public void testInitialSlashDotDot() {, +    assertEquals("/c", simplifyPath("/../c"));, +  }, +    , +  // http://code.google.com/p/guava-libraries/issues/detail?id=722, +  public void testInitialSlashDot() {  , +    assertEquals("/a", simplifyPath("/./a"));, +    assertEquals("/.a", simplifyPath("/.a/a/.."));, +  }, +, +  // http://code.google.com/p/guava-libraries/issues/detail?id=722, +  public void testConsecutiveParentsAfterPresent() {, +    assertEquals("../..", simplifyPath("./../../"));, +    assertEquals("../..", simplifyPath("./.././../"));, +  }, +, +, +++ b/guava-tests/test/com/google/common/io/FilesSimplifyPathTest.java, +  public void testSimplifyRootedDotDots() {, +    assertEquals("/", simplifyPath("/../../.."));, +    assertEquals("/", simplifyPath("/../../../"));, +  }, +  , +  // http://code.google.com/p/guava-libraries/issues/detail?id=722, +  public void testInitialSlashDotDot() {, +    assertEquals("/c", simplifyPath("/../c"));, +  }, +    , +  // http://code.google.com/p/guava-libraries/issues/detail?id=722, +  public void testInitialSlashDot() {  , +    assertEquals("/a", simplifyPath("/./a"));, +    assertEquals("/.a", simplifyPath("/.a/a/.."));, +  }, +, +  // http://code.google.com/p/guava-libraries/issues/detail?id=722, +  public void testConsecutiveParentsAfterPresent() {, +    assertEquals("../..", simplifyPath("./../../"));, +    assertEquals("../..", simplifyPath("./.././../"));, +  }, +, +, +++ b/guava/src/com/google/common/io/Files.java, +import com.google.common.base.Joiner;, +import com.google.common.base.Splitter;, +import java.util.ArrayList;, +   * <li>. becomes ????, +   * <li>fold out ./, +    // split the path apart, +    Iterable<String> components = Splitter.on('/').omitEmptyStrings().split(pathname);, +    List<String> path = new ArrayList<String>();, +    // resolve ., .., and //, +    for (String component : components) {, +      if (component.equals(".")) {, +        continue;, +      } else if (component.equals("..")) {, +        if (path.size() > 0 && !path.get(path.size() - 1).equals("..")) {, +          path.remove(path.size() - 1);, +        } else {, +          path.add("..");, +        path.add(component);, +    // put it back together, +    String result = Joiner.on('/').join(path);, +    if (pathname.charAt(0) == '/') {, +      result = "/" + result;, +    }, +, +    while (result.startsWith("/../")) {, +      result = result.substring(3);, +    }, +    if (result.equals("/..")) {, +      result = "/";, +    }, +, +    return result;]