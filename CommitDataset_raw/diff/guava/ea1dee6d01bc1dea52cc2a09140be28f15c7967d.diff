[+++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +  public void testLeastOfIterableLargeK() {, +    List<Integer> list = Arrays.asList(4, 2, 3, 5, 1);, +    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural(), +        .leastOf(list, Integer.MAX_VALUE));, +  }, +, +  public void testLeastOfIteratorLargeK() {, +    List<Integer> list = Arrays.asList(4, 2, 3, 5, 1);, +    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural(), +        .leastOf(list.iterator(), Integer.MAX_VALUE));, +  }, +, +++ b/guava-tests/test/com/google/common/collect/OrderingTest.java, +  public void testLeastOfIterableLargeK() {, +    List<Integer> list = Arrays.asList(4, 2, 3, 5, 1);, +    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural(), +        .leastOf(list, Integer.MAX_VALUE));, +  }, +, +  public void testLeastOfIteratorLargeK() {, +    List<Integer> list = Arrays.asList(4, 2, 3, 5, 1);, +    assertEquals(Arrays.asList(1, 2, 3, 4, 5), Ordering.natural(), +        .leastOf(list.iterator(), Integer.MAX_VALUE));, +  }, +, +++ b/guava/src/com/google/common/collect/Ordering.java, +import java.util.ArrayList;, +import java.util.Collection;, +    if (iterable instanceof Collection) {, +      Collection<E> collection = (Collection<E>) iterable;, +      if (collection.size() <= 2L * k) {, +        // In this case, just dumping the collection to an array and sorting is, +        // faster than using the implementation for Iterator, which is, +        // specialized for k much smaller than n., +, +        @SuppressWarnings("unchecked") // c only contains E's and doesn't escape, +        E[] array = (E[]) collection.toArray();, +        Arrays.sort(array, this);, +        if (array.length > k) {, +          array = ObjectArrays.arraysCopyOf(array, k);, +        }, +        return Collections.unmodifiableList(Arrays.asList(array));, +      }, +    }, +    } else if (k >= Integer.MAX_VALUE / 2) {, +      // k is really large; just do a straightforward sorted-copy-and-sublist, +      ArrayList<E> list = Lists.newArrayList(elements);, +      Collections.sort(list, this);, +      if (list.size() > k) {, +        list.subList(k, list.size()).clear();, +      }, +      list.trimToSize();, +      return Collections.unmodifiableList(list);]