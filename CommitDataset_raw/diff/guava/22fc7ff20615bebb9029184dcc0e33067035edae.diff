[+++ b/guava-tests/test/com/google/common/base/EnumsTest.java, +  public void testValueOfFunction_nullWhenNoMatchingConstant() {, +  public void testGetIfPresent() {, +    assertEquals(Optional.of(TestEnum.CHEETO), Enums.getIfPresent(TestEnum.class, "CHEETO"));, +    assertEquals(Optional.of(TestEnum.HONDA), Enums.getIfPresent(TestEnum.class, "HONDA"));, +    assertEquals(Optional.of(TestEnum.POODLE), Enums.getIfPresent(TestEnum.class, "POODLE"));, +, +    assertTrue(Enums.getIfPresent(TestEnum.class, "CHEETO").isPresent());, +    assertTrue(Enums.getIfPresent(TestEnum.class, "HONDA").isPresent());, +    assertTrue(Enums.getIfPresent(TestEnum.class, "POODLE").isPresent());, +, +    assertEquals(TestEnum.CHEETO, Enums.getIfPresent(TestEnum.class, "CHEETO").get());, +    assertEquals(TestEnum.HONDA, Enums.getIfPresent(TestEnum.class, "HONDA").get());, +    assertEquals(TestEnum.POODLE, Enums.getIfPresent(TestEnum.class, "POODLE").get());, +  }, +, +  public void testGetIfPresent_caseSensitive() {, +    assertFalse(Enums.getIfPresent(TestEnum.class, "cHEETO").isPresent());, +    assertFalse(Enums.getIfPresent(TestEnum.class, "Honda").isPresent());, +    assertFalse(Enums.getIfPresent(TestEnum.class, "poodlE").isPresent());, +  }, +, +  public void testGetIfPresent_whenNoMatchingConstant() {, +    assertEquals(Optional.absent(), Enums.getIfPresent(TestEnum.class, "WOMBAT"));, +  }, +, +++ b/guava-tests/test/com/google/common/base/EnumsTest.java, +  public void testValueOfFunction_nullWhenNoMatchingConstant() {, +  public void testGetIfPresent() {, +    assertEquals(Optional.of(TestEnum.CHEETO), Enums.getIfPresent(TestEnum.class, "CHEETO"));, +    assertEquals(Optional.of(TestEnum.HONDA), Enums.getIfPresent(TestEnum.class, "HONDA"));, +    assertEquals(Optional.of(TestEnum.POODLE), Enums.getIfPresent(TestEnum.class, "POODLE"));, +, +    assertTrue(Enums.getIfPresent(TestEnum.class, "CHEETO").isPresent());, +    assertTrue(Enums.getIfPresent(TestEnum.class, "HONDA").isPresent());, +    assertTrue(Enums.getIfPresent(TestEnum.class, "POODLE").isPresent());, +, +    assertEquals(TestEnum.CHEETO, Enums.getIfPresent(TestEnum.class, "CHEETO").get());, +    assertEquals(TestEnum.HONDA, Enums.getIfPresent(TestEnum.class, "HONDA").get());, +    assertEquals(TestEnum.POODLE, Enums.getIfPresent(TestEnum.class, "POODLE").get());, +  }, +, +  public void testGetIfPresent_caseSensitive() {, +    assertFalse(Enums.getIfPresent(TestEnum.class, "cHEETO").isPresent());, +    assertFalse(Enums.getIfPresent(TestEnum.class, "Honda").isPresent());, +    assertFalse(Enums.getIfPresent(TestEnum.class, "poodlE").isPresent());, +  }, +, +  public void testGetIfPresent_whenNoMatchingConstant() {, +    assertEquals(Optional.absent(), Enums.getIfPresent(TestEnum.class, "WOMBAT"));, +  }, +, +++ b/guava/src/com/google/common/base/Enums.java, +   * A {@link Function} that maps an {@link Enum} name to the associated, +  private static final class ValueOfFunction<T extends Enum<T>>, +      implements Function<String, T>, Serializable {, +, +  /**, +   * Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the, +   * constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing, +   * user input or falling back to a default enum constant. For example,, +   * {@code Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);}, +   *, +   * @since 12.0, +   */, +  public static <T extends Enum<T>> Optional<T> getIfPresent(Class<T> enumClass, String value) {, +    checkNotNull(enumClass);, +    checkNotNull(value);, +    try {, +      return Optional.of(Enum.valueOf(enumClass, value));, +    } catch (IllegalArgumentException iae) {, +      return Optional.absent();, +    }, +  }]