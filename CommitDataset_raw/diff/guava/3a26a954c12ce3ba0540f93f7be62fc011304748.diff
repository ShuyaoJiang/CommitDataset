[+++ b/guava-tests/test/com/google/common/graph/GraphPropertiesTest.java, +import com.google.common.collect.ImmutableList;, +import org.junit.Before;, +  ImmutableList<MutableGraph<Integer>> graphsToTest;, +  Graph<Integer> directedGraph;, +  Graph<Integer> undirectedGraph;, +, +  ImmutableList<MutableNetwork<Integer, String>> networksToTest;, +  Network<Integer, String> directedNetwork;, +  Network<Integer, String> undirectedNetwork;, +, +  @Before, +  public void init() {, +    graphsToTest = ImmutableList.of(, +        GraphBuilder.directed().<Integer>build(),, +        GraphBuilder.undirected().<Integer>build());, +    directedGraph = graphsToTest.get(0);, +    undirectedGraph = graphsToTest.get(1);, +, +    networksToTest = ImmutableList.of(, +        NetworkBuilder.directed().allowsParallelEdges(true).<Integer, String>build(),, +        NetworkBuilder.undirected().allowsParallelEdges(true).<Integer, String>build());, +    directedNetwork = networksToTest.get(0);, +    undirectedNetwork = networksToTest.get(1);, +  }, +    assertThat(isCyclic(undirectedGraph)).isFalse();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.addNode(1);, +      graph.addNode(2);, +    }, +    assertThat(isCyclic(undirectedGraph)).isFalse();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 2);, +    }, +    assertThat(isCyclic(undirectedGraph)).isFalse();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 1);, +    }, +    assertThat(isCyclic(undirectedGraph)).isTrue();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 2);, +      graph.putEdge(1, 3);, +    }, +    assertThat(isCyclic(undirectedGraph)).isFalse();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 2);, +      graph.putEdge(2, 1); // no-op in undirected case, +    }, +    assertThat(isCyclic(undirectedGraph)).isFalse();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 2);, +      graph.putEdge(2, 3);, +      graph.putEdge(1, 3);, +    }, +    assertThat(isCyclic(undirectedGraph)).isTrue(); // cyclic in undirected case, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 2);, +      graph.putEdge(2, 3);, +      graph.putEdge(3, 1);, +    }, +    assertThat(isCyclic(undirectedGraph)).isTrue();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 2);, +      graph.putEdge(2, 1); // no-op in undirected case, +      graph.addNode(3);, +    }, +    assertThat(isCyclic(undirectedGraph)).isFalse();, +    for (MutableGraph<Integer> graph : graphsToTest) {, +      graph.putEdge(1, 2);, +      graph.putEdge(2, 1);, +      graph.putEdge(2, 3);, +      graph.putEdge(3, 1);, +    }, +    assertThat(isCyclic(undirectedGraph)).isTrue();, +  }, +, +  @Test, +  public void isCyclic_twoParallelEdges() {, +    for (MutableNetwork<Integer, String> network : networksToTest) {, +      network.addEdge(1, 2, "1-2a");, +      network.addEdge(1, 2, "1-2b");, +    }, +    assertThat(isCyclic(directedNetwork)).isFalse();, +    assertThat(isCyclic(undirectedNetwork)).isTrue(); // cyclic in undirected case, +  }, +, +  @Test, +  public void isCyclic_cyclicMultigraph() {, +    for (MutableNetwork<Integer, String> network : networksToTest) {, +      network.addEdge(1, 2, "1-2a");, +      network.addEdge(1, 2, "1-2b");, +      network.addEdge(2, 3, "2-3");, +      network.addEdge(3, 1, "3-1");, +    }, +    assertThat(isCyclic(directedNetwork)).isTrue();, +    assertThat(isCyclic(undirectedNetwork)).isTrue();, +++ b/guava-tests/test/com/google/common/graph/GraphPropertiesTest.java, +import com.google.common.collect.ImmutableList;, +import org.junit.Before;, +  ImmutableList<MutableGraph<Integer>> graphsToTest;]