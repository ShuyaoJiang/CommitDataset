[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Removes and returns the first matching element, or returns {@code null} if there is none., +   */, +  @Nullable, +  static <T> T removeFirstMatching(Iterable<T> removeFrom, Predicate<? super T> predicate) {, +    checkNotNull(predicate);, +    Iterator<T> iterator = removeFrom.iterator();, +    while (iterator.hasNext()) {, +      T next = iterator.next();, +      if (predicate.apply(next)) {, +        iterator.remove();, +        return next;, +      }, +    }, +    return null;, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Removes and returns the first matching element, or returns {@code null} if there is none., +   */, +  @Nullable, +  static <T> T removeFirstMatching(Iterable<T> removeFrom, Predicate<? super T> predicate) {, +    checkNotNull(predicate);, +    Iterator<T> iterator = removeFrom.iterator();, +    while (iterator.hasNext()) {, +      T next = iterator.next();, +      if (predicate.apply(next)) {, +        iterator.remove();, +        return next;, +      }, +    }, +    return null;, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import static com.google.common.base.Predicates.equalTo;, +      return new FilteredMapValues<K, V>(this, unfiltered, predicate);, +    }, +  private static final class FilteredMapValues<K, V> extends Maps.Values<K, V> {, +    Map<K, V> unfiltered;, +    Predicate<? super Entry<K, V>> predicate;, +, +    FilteredMapValues(Map<K, V> filteredMap, Map<K, V> unfiltered,, +        Predicate<? super Entry<K, V>> predicate) {, +      super(filteredMap);, +      this.unfiltered = unfiltered;, +      this.predicate = predicate;, +      return Iterables.removeFirstMatching(unfiltered.entrySet(),, +          Predicates.<Entry<K, V>>and(predicate, Maps.<V>valuePredicateOnEntries(equalTo(o)))), +          != null;, +    abstract Set<Entry<K, V>> createEntrySet();, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Removes and returns the first matching element, or returns {@code null} if there is none., +   */, +  @Nullable, +  static <T> T removeFirstMatching(Iterable<T> removeFrom, Predicate<? super T> predicate) {, +    checkNotNull(predicate);, +    Iterator<T> iterator = removeFrom.iterator();, +    while (iterator.hasNext()) {, +      T next = iterator.next();, +      if (predicate.apply(next)) {, +        iterator.remove();, +        return next;, +      }, +    }, +    return null;, +  }, +, +  /**, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +import static com.google.common.base.Predicates.equalTo;, +      return new FilteredMapValues<K, V>(this, unfiltered, predicate);, +    }, +  private static final class FilteredMapValues<K, V> extends Maps.Values<K, V> {, +    Map<K, V> unfiltered;, +    Predicate<? super Entry<K, V>> predicate;, +, +    FilteredMapValues(Map<K, V> filteredMap, Map<K, V> unfiltered,, +        Predicate<? super Entry<K, V>> predicate) {, +      super(filteredMap);, +      this.unfiltered = unfiltered;, +      this.predicate = predicate;, +      return Iterables.removeFirstMatching(unfiltered.entrySet(),, +          Predicates.<Entry<K, V>>and(predicate, Maps.<V>valuePredicateOnEntries(equalTo(o)))), +          != null;, +    abstract Set<Entry<K, V>> createEntrySet();, +++ b/guava/src/com/google/common/collect/Collections2.java, +    public boolean contains(@Nullable Object element) {, +      if (safeContains(unfiltered, element)) {, +        @SuppressWarnings("unchecked") // element is in unfiltered, so it must be an E, +        return predicate.apply(e);, +      return false;, +      return contains(element) && unfiltered.remove(element);, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterables.java, +   * Removes and returns the first matching element, or returns {@code null} if there is none., +   */, +  @Nullable, +  static <T> T removeFirstMatching(Iterable<T> removeFrom, Predicate<? super T> predicate) {]