[+++ b/guava/src/com/google/common/util/concurrent/RateLimiter.java, +  public final double getRate() {, +    synchronized (mutex) {, +      return doGetRate();, +    }, +  }, +, +  abstract double doGetRate();, +      if (!canAcquire(nowMicros, timeoutMicros)) {, +  private final boolean canAcquire(long nowMicros, long timeoutMicros) {, +    return earliestAvailable(nowMicros) <= nowMicros + timeoutMicros;, +  }, +, +  abstract long earliestAvailable(long nowMicros);, +    double stableIntervalMicros;, +    final double doGetRate() {, +    final long earliestAvailable(long nowMicros) {, +      return nextFreeTicketMicros;, +        void sleepMicrosUninterruptibly(long micros) {]