[+++ b/guava-tests/test/com/google/common/io/CharStreamsTest.java, +  public void testNullWriter() throws Exception {, +    // create a null writer, +    Writer nullWriter = CharStreams.nullWriter();, +    // write to the writer, +    nullWriter.write('n');, +    String test = "Test string for NullWriter";, +    nullWriter.write(test);, +    nullWriter.write(test, 2, 10);, +    // nothing really to assert?, +    assertSame(CharStreams.nullWriter(), CharStreams.nullWriter());, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharStreamsTest.java, +  public void testNullWriter() throws Exception {, +    // create a null writer, +    Writer nullWriter = CharStreams.nullWriter();, +    // write to the writer, +    nullWriter.write('n');, +    String test = "Test string for NullWriter";, +    nullWriter.write(test);, +    nullWriter.write(test, 2, 10);, +    // nothing really to assert?, +    assertSame(CharStreams.nullWriter(), CharStreams.nullWriter());, +  }, +, +++ b/guava/src/com/google/common/io/CharStreams.java, +import static com.google.common.base.Preconditions.checkPositionIndexes;, +   * Returns a {@link Writer} that simply discards written chars., +   *, +   * @since 15.0, +   */, +  public static Writer nullWriter() {, +    return NullWriter.INSTANCE;, +  }, +, +  private static final class NullWriter extends Writer {, +, +    private static final NullWriter INSTANCE = new NullWriter();, +, +    @Override, +    public void write(int c) {, +    }, +, +    @Override, +    public void write(char[] cbuf) {, +      checkNotNull(cbuf);, +    }, +, +    @Override, +    public void write(char[] cbuf, int off, int len) {, +      checkPositionIndexes(off, off + len, cbuf.length);, +    }, +, +    @Override, +    public void write(String str) {, +      checkNotNull(str);, +    }, +, +    @Override, +    public void write(String str, int off, int len) {, +      checkPositionIndexes(off, off + len, str.length());, +    }, +, +    @Override, +    public Writer append(CharSequence csq) {, +      checkNotNull(csq);, +      return this;, +    }, +, +    @Override, +    public Writer append(CharSequence csq, int start, int end) {, +      checkPositionIndexes(start, end, csq.length());, +      return this;, +    }, +, +    @Override, +    public Writer append(char c) {, +      return this;, +    }, +, +    @Override, +    public void flush() {, +    }, +, +    @Override, +    public void close() {, +    }, +, +    @Override, +    public String toString() {, +      return "CharStreams.nullWriter()";, +    }, +  }, +, +  /**]