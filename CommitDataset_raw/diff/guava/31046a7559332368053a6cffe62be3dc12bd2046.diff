[+++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, +   * Returns a cache loader based on an <i>existing</i> function instance. Note that there's no need, +   * to create a <i>new</i> function just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param function the function to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by passing each key to {@code function}, +   * Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need, +   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param supplier the supplier to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the, +   *     key, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, +   * Returns a cache loader based on an <i>existing</i> function instance. Note that there's no need, +   * to create a <i>new</i> function just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param function the function to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by passing each key to {@code function}, +   * Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need, +   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param supplier the supplier to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the, +   *     key, +++ b/guava/src/com/google/common/cache/CacheLoader.java, +   * Returns a cache loader based on an <i>existing</i> function instance. Note that there's no need, +   * to create a <i>new</i> function just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param function the function to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by passing each key to {@code function}, +   * Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need, +   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param supplier the supplier to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the, +   *     key, +++ b/guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/CacheLoader.java, +   * Returns a cache loader based on an <i>existing</i> function instance. Note that there's no need, +   * to create a <i>new</i> function just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param function the function to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by passing each key to {@code function}, +   * Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need, +   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param supplier the supplier to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the, +   *     key, +++ b/guava/src/com/google/common/cache/CacheLoader.java, +   * Returns a cache loader based on an <i>existing</i> function instance. Note that there's no need, +   * to create a <i>new</i> function just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param function the function to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by passing each key to {@code function}, +   * Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need, +   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and, +   * implement {@link #load load} instead., +   *, +   * @param supplier the supplier to be used for loading values; must never return {@code null}, +   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the, +   *     key, +++ b/guava/src/com/google/common/collect/Ordering.java, +   * Returns an ordering based on an <i>existing</i> comparator instance. Note, +   * that there's no need to create a <i>new</i> comparator just to pass it in, +   * here; simply subclass {@code Ordering} and implement its {@code compareTo}, +   * method directly instead., +   * @return comparator itself if it is already an {@code Ordering}; otherwise, +   *     an ordering that wraps that comparator]