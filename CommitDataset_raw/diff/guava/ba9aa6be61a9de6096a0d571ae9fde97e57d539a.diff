[+++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import java.util.Map.Entry;, +, +  public void testGetEntry() {, +    for (Range<Integer> range1 : RANGES) {, +      for (Range<Integer> range2 : RANGES) {, +        if (!range1.isEmpty() && !range2.isEmpty(), +            && (!range1.isConnected(range2) || range1.intersection(range2).isEmpty())) {, +          ImmutableRangeMap<Integer, Integer> rangeMap =, +              ImmutableRangeMap.<Integer, Integer>builder().put(range1, 1).put(range2, 2).build();, +, +          for (int i = MIN_BOUND; i <= MAX_BOUND; i++) {, +            Entry<Range<Integer>, Integer> expectedEntry = null;, +            if (range1.contains(i)) {, +              expectedEntry = Maps.immutableEntry(range1, 1);, +            } else if (range2.contains(i)) {, +              expectedEntry = Maps.immutableEntry(range2, 2);, +            }, +, +            assertEquals(expectedEntry, rangeMap.getEntry(i));, +          }, +        }, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import java.util.Map.Entry;, +, +  public void testGetEntry() {, +    for (Range<Integer> range1 : RANGES) {, +      for (Range<Integer> range2 : RANGES) {, +        if (!range1.isEmpty() && !range2.isEmpty(), +            && (!range1.isConnected(range2) || range1.intersection(range2).isEmpty())) {, +          ImmutableRangeMap<Integer, Integer> rangeMap =, +              ImmutableRangeMap.<Integer, Integer>builder().put(range1, 1).put(range2, 2).build();, +, +          for (int i = MIN_BOUND; i <= MAX_BOUND; i++) {, +            Entry<Range<Integer>, Integer> expectedEntry = null;, +            if (range1.contains(i)) {, +              expectedEntry = Maps.immutableEntry(range1, 1);, +            } else if (range2.contains(i)) {, +              expectedEntry = Maps.immutableEntry(range2, 2);, +            }, +, +            assertEquals(expectedEntry, rangeMap.getEntry(i));, +          }, +        }, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java, +, +      Map.Entry<Range<Integer>, Integer> entry = test.getEntry(i);, +      assertEquals(model.containsKey(i), entry != null);, +      if (entry != null) {, +        assertTrue(test.asMapOfRanges().entrySet().contains(entry));, +      }, +++ b/guava-tests/test/com/google/common/collect/ImmutableRangeMapTest.java, +import java.util.Map.Entry;, +, +  public void testGetEntry() {, +    for (Range<Integer> range1 : RANGES) {, +      for (Range<Integer> range2 : RANGES) {, +        if (!range1.isEmpty() && !range2.isEmpty(), +            && (!range1.isConnected(range2) || range1.intersection(range2).isEmpty())) {, +          ImmutableRangeMap<Integer, Integer> rangeMap =, +              ImmutableRangeMap.<Integer, Integer>builder().put(range1, 1).put(range2, 2).build();, +, +          for (int i = MIN_BOUND; i <= MAX_BOUND; i++) {, +            Entry<Range<Integer>, Integer> expectedEntry = null;, +            if (range1.contains(i)) {, +              expectedEntry = Maps.immutableEntry(range1, 1);, +            } else if (range2.contains(i)) {, +              expectedEntry = Maps.immutableEntry(range2, 2);, +            }, +, +            assertEquals(expectedEntry, rangeMap.getEntry(i));, +          }, +        }, +      }, +    }, +  }, +, +++ b/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java, +, +      Map.Entry<Range<Integer>, Integer> entry = test.getEntry(i);, +      assertEquals(model.containsKey(i), entry != null);, +      if (entry != null) {, +        assertTrue(test.asMapOfRanges().entrySet().contains(entry));, +      }, +++ b/guava/src/com/google/common/collect/ImmutableRangeMap.java, +import com.google.common.annotations.Beta;, + * An immutable implementation of {@code RangeMap}, supporting all query operations efficiently., + * <p>Like all {@code RangeMap} implementations, this supports neither null keys nor null values., + * @since 14.0, +@Beta, +, +    int index = SortedLists.binarySearch(ranges, Range.<K>lowerBoundFn(),]