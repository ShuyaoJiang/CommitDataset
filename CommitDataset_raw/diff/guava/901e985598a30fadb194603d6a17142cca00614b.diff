[+++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +import com.google.errorprone.annotations.Immutable;, +/** A {@code RegularImmutableTable} optimized for dense data. */, +@Immutable(containerOf = {"R", "C", "V"}), +  private final ImmutableMap<R, ImmutableMap<C, V>> rowMap;, +  private final ImmutableMap<C, ImmutableMap<R, V>> columnMap;, +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +  private final class RowMap extends ImmutableArrayMap<R, ImmutableMap<C, V>> {, +    ImmutableMap<C, V> getValue(int keyIndex) {, +  private final class ColumnMap extends ImmutableArrayMap<C, ImmutableMap<R, V>> {, +    ImmutableMap<R, V> getValue(int keyIndex) {, +    // Casts without copying., +    ImmutableMap<C, ImmutableMap<R, V>> columnMap = this.columnMap;, +    return ImmutableMap.<C, Map<R, V>>copyOf(columnMap);, +    // Casts without copying., +    ImmutableMap<R, ImmutableMap<C, V>> rowMap = this.rowMap;, +    return ImmutableMap.<R, Map<C, V>>copyOf(rowMap);, +++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +import com.google.errorprone.annotations.Immutable;, +/** A {@code RegularImmutableTable} optimized for dense data. */, +@Immutable(containerOf = {"R", "C", "V"}), +  private final ImmutableMap<R, ImmutableMap<C, V>> rowMap;, +  private final ImmutableMap<C, ImmutableMap<R, V>> columnMap;, +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +  private final class RowMap extends ImmutableArrayMap<R, ImmutableMap<C, V>> {, +    ImmutableMap<C, V> getValue(int keyIndex) {, +  private final class ColumnMap extends ImmutableArrayMap<C, ImmutableMap<R, V>> {, +    ImmutableMap<R, V> getValue(int keyIndex) {, +    // Casts without copying., +    ImmutableMap<C, ImmutableMap<R, V>> columnMap = this.columnMap;, +    return ImmutableMap.<C, Map<R, V>>copyOf(columnMap);, +    // Casts without copying., +    ImmutableMap<R, ImmutableMap<C, V>> rowMap = this.rowMap;, +    return ImmutableMap.<R, Map<C, V>>copyOf(rowMap);, +++ b/android/guava/src/com/google/common/collect/SparseImmutableTable.java, +import com.google.errorprone.annotations.Immutable;, +/** A {@code RegularImmutableTable} optimized for sparse data. */, +@Immutable(containerOf = {"R", "C", "V"}), +  private final ImmutableMap<R, ImmutableMap<C, V>> rowMap;, +  private final ImmutableMap<C, ImmutableMap<R, V>> columnMap;, +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +    ImmutableMap.Builder<R, ImmutableMap<C, V>> rowBuilder =, +        new ImmutableMap.Builder<>(rows.size());, +    ImmutableMap.Builder<C, ImmutableMap<R, V>> columnBuilder =, +        new ImmutableMap.Builder<>(columns.size());, +    // Casts without copying., +    ImmutableMap<C, ImmutableMap<R, V>> columnMap = this.columnMap;, +    return ImmutableMap.<C, Map<R, V>>copyOf(columnMap);, +    // Casts without copying., +    ImmutableMap<R, ImmutableMap<C, V>> rowMap = this.rowMap;, +    return ImmutableMap.<R, Map<C, V>>copyOf(rowMap);, +    Entry<R, ImmutableMap<C, V>> rowEntry = rowMap.entrySet().asList().get(rowIndex);, +    ImmutableMap<C, V> row = rowEntry.getValue();, +    ImmutableMap<C, V> row = rowMap.values().asList().get(rowIndex);, +++ b/android/guava/src/com/google/common/collect/DenseImmutableTable.java, +import com.google.errorprone.annotations.Immutable;, +/** A {@code RegularImmutableTable} optimized for dense data. */, +@Immutable(containerOf = {"R", "C", "V"}), +  private final ImmutableMap<R, ImmutableMap<C, V>> rowMap;, +  private final ImmutableMap<C, ImmutableMap<R, V>> columnMap;, +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +, +  @SuppressWarnings("Immutable") // We don't modify this after construction., +  private final class RowMap extends ImmutableArrayMap<R, ImmutableMap<C, V>> {, +    ImmutableMap<C, V> getValue(int keyIndex) {, +  private final class ColumnMap extends ImmutableArrayMap<C, ImmutableMap<R, V>> {, +    ImmutableMap<R, V> getValue(int keyIndex) {, +    // Casts without copying., +    ImmutableMap<C, ImmutableMap<R, V>> columnMap = this.columnMap;, +    return ImmutableMap.<C, Map<R, V>>copyOf(columnMap);, +    // Casts without copying., +    ImmutableMap<R, ImmutableMap<C, V>> rowMap = this.rowMap;]