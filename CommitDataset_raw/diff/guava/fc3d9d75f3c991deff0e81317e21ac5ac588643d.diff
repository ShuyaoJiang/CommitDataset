[+++ b/android/guava/src/com/google/common/util/concurrent/CombinedFuture.java, +, +    @Override, +    public String toString() {, +      return callable.toString();, +    }, +      CombinedFuture.this.set(callable.call());, +    }, +, +    @Override, +    public String toString() {, +      return callable.toString();, +++ b/android/guava/src/com/google/common/util/concurrent/CombinedFuture.java, +, +    @Override, +    public String toString() {, +      return callable.toString();, +    }, +      CombinedFuture.this.set(callable.call());, +    }, +, +    @Override, +    public String toString() {, +      return callable.toString();, +++ b/android/guava/src/com/google/common/util/concurrent/InterruptibleTask.java, +import java.util.concurrent.atomic.AtomicReference;, +// Since this class only needs CAS on one field, we can avoid this bug by extending AtomicReference, +// instead of using an AtomicReferenceFieldUpdater., +abstract class InterruptibleTask extends AtomicReference<Thread> implements Runnable {, +  // The thread executing the task publishes itself to the superclass' reference and the thread, +  // interrupting sets 'doneInterrupting' when it has finished interrupting., +  private volatile boolean doneInterrupting;, +    if (!compareAndSet(null, Thread.currentThread())) {, +    Thread currentRunner = get();, +  public abstract String toString();, +++ b/android/guava/src/com/google/common/util/concurrent/CombinedFuture.java, +, +    @Override, +    public String toString() {, +      return callable.toString();, +    }, +      CombinedFuture.this.set(callable.call());, +    }, +, +    @Override, +    public String toString() {, +      return callable.toString();, +++ b/android/guava/src/com/google/common/util/concurrent/InterruptibleTask.java, +import java.util.concurrent.atomic.AtomicReference;, +// Since this class only needs CAS on one field, we can avoid this bug by extending AtomicReference, +// instead of using an AtomicReferenceFieldUpdater., +abstract class InterruptibleTask extends AtomicReference<Thread> implements Runnable {, +  // The thread executing the task publishes itself to the superclass' reference and the thread, +  // interrupting sets 'doneInterrupting' when it has finished interrupting., +  private volatile boolean doneInterrupting;, +    if (!compareAndSet(null, Thread.currentThread())) {, +    Thread currentRunner = get();, +  public abstract String toString();, +++ b/android/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java, +          TrustedListenableFutureTask.this.set(callable.call());, +++ b/android/guava/src/com/google/common/util/concurrent/CombinedFuture.java, +, +    @Override, +    public String toString() {, +      return callable.toString();, +    }, +      CombinedFuture.this.set(callable.call());, +    }, +, +    @Override, +    public String toString() {, +      return callable.toString();, +++ b/android/guava/src/com/google/common/util/concurrent/InterruptibleTask.java, +import java.util.concurrent.atomic.AtomicReference;, +// Since this class only needs CAS on one field, we can avoid this bug by extending AtomicReference, +// instead of using an AtomicReferenceFieldUpdater., +abstract class InterruptibleTask extends AtomicReference<Thread> implements Runnable {, +  // The thread executing the task publishes itself to the superclass' reference and the thread, +  // interrupting sets 'doneInterrupting' when it has finished interrupting., +  private volatile boolean doneInterrupting;, +    if (!compareAndSet(null, Thread.currentThread())) {, +    Thread currentRunner = get();, +  public abstract String toString();, +++ b/android/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java, +          TrustedListenableFutureTask.this.set(callable.call());, +++ b/guava/src/com/google/common/util/concurrent/CombinedFuture.java, +, +    @Override, +    public String toString() {, +      return callable.toString();, +    }, +      CombinedFuture.this.set(callable.call());, +    }, +, +    @Override, +    public String toString() {, +      return callable.toString();, +++ b/android/guava/src/com/google/common/util/concurrent/CombinedFuture.java, +, +    @Override]