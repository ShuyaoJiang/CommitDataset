[+++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        if (edgesConnecting.size() <= 1) {, +          assertThat(network.edgeConnecting(node, otherNode).asSet()).isEqualTo(edgesConnecting);, +        } else {, +          try {, +            network.edgeConnecting(node, otherNode);, +            fail();, +          } catch (IllegalArgumentException expected) {}, +        }, +, +, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        if (edgesConnecting.size() <= 1) {, +          assertThat(network.edgeConnecting(node, otherNode).asSet()).isEqualTo(edgesConnecting);, +        } else {, +          try {, +            network.edgeConnecting(node, otherNode);, +            fail();, +          } catch (IllegalArgumentException expected) {}, +        }, +, +, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();, +    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        if (edgesConnecting.size() <= 1) {, +          assertThat(network.edgeConnecting(node, otherNode).asSet()).isEqualTo(edgesConnecting);, +        } else {, +          try {, +            network.edgeConnecting(node, otherNode);, +            fail();, +          } catch (IllegalArgumentException expected) {}, +        }, +, +, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();, +    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +import static com.google.common.graph.GraphConstants.MULTIPLE_EDGES_CONNECTING;, +import com.google.common.base.Optional;, +  public Optional<E> edgeConnecting(Object nodeU, Object nodeV) {, +    Set<E> edgesConnecting = edgesConnecting(nodeU, nodeV);, +    switch (edgesConnecting.size()) {, +      case 0:, +        return Optional.absent();, +      case 1:, +        return Optional.of(edgesConnecting.iterator().next());, +      default:, +        throw new IllegalArgumentException(String.format(MULTIPLE_EDGES_CONNECTING, nodeU, nodeV));, +    }, +  }, +, +  @Override, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        if (edgesConnecting.size() <= 1) {, +          assertThat(network.edgeConnecting(node, otherNode).asSet()).isEqualTo(edgesConnecting);, +        } else {, +          try {, +            network.edgeConnecting(node, otherNode);, +            fail();, +          } catch (IllegalArgumentException expected) {}, +        }, +, +, +++ b/guava-tests/test/com/google/common/graph/GraphsTest.java, +    assertThat(transpose.edgeConnecting(N1, N2)).isAbsent();, +    assertThat(transpose.edgeConnecting(N1, N2)).hasValue(E21);, +++ b/guava/src/com/google/common/graph/AbstractNetwork.java, +import static com.google.common.graph.GraphConstants.MULTIPLE_EDGES_CONNECTING;, +import com.google.common.base.Optional;, +  public Optional<E> edgeConnecting(Object nodeU, Object nodeV) {, +    Set<E> edgesConnecting = edgesConnecting(nodeU, nodeV);, +    switch (edgesConnecting.size()) {, +      case 0:, +        return Optional.absent();, +      case 1:, +        return Optional.of(edgesConnecting.iterator().next());, +      default:, +        throw new IllegalArgumentException(String.format(MULTIPLE_EDGES_CONNECTING, nodeU, nodeV));, +    }, +  }, +, +  @Override, +++ b/guava/src/com/google/common/graph/GraphConstants.java, +  static final String MULTIPLE_EDGES_CONNECTING =, +      "Cannot call edgeConnecting() when parallel edges exist between %s and %s. Consider calling ", +          + "edgesConnecting() instead.";, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +        if (edgesConnecting.size() <= 1) {, +          assertThat(network.edgeConnecting(node, otherNode).asSet()).isEqualTo(edgesConnecting);, +        } else {, +          try {, +            network.edgeConnecting(node, otherNode);, +            fail();, +          } catch (IllegalArgumentException expected) {}, +        }, +, +]