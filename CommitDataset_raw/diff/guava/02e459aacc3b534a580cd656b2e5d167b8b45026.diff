[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java, +++ b/guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/UnsignedInteger.java, +/*, + * Copyright (C) 2011 The Guava Authors, + * , + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * , + * http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software distributed under the, + * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either, + * express or implied. See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package com.google.common.primitives;, +, +import static com.google.common.base.Preconditions.checkArgument;, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.primitives.UnsignedInts.INT_MASK;, +import static com.google.common.primitives.UnsignedInts.compare;, +import static com.google.common.primitives.UnsignedInts.toLong;, +, +import com.google.common.annotations.Beta;, +import com.google.common.annotations.GwtCompatible;, +, +import java.math.BigInteger;, +, +import javax.annotation.CheckReturnValue;, +import javax.annotation.Nullable;, +, +/**, + * A wrapper class for unsigned {@code int} values, supporting arithmetic operations., + * , + * <p>In some cases, when speed is more important than code readability, it may be faster simply to, + * treat primitive {@code int} values as unsigned, using the methods from {@link UnsignedInts}., + * , + * <p>See the Guava User Guide article on <a href=, + * "http://code.google.com/p/guava-libraries/wiki/PrimitivesExplained#Unsigned_support">, + * unsigned primitive utilities</a>., + * , + * @author Louis Wasserman, + * @since 11.0, + */, +@GwtCompatible(emulated = true), +public final class UnsignedInteger extends Number implements Comparable<UnsignedInteger> {, +  public static final UnsignedInteger ZERO = asUnsigned(0);, +  public static final UnsignedInteger ONE = asUnsigned(1);, +  public static final UnsignedInteger MAX_VALUE = asUnsigned(-1);, +, +  private final int value;, +, +  private UnsignedInteger(int value) {, +    // GWT doesn't consistently overflow values to make them 32-bit, so we need to force it., +    this.value = value & 0xffffffff;, +  }, +, +  /**, +   * Returns an {@code UnsignedInteger} that, when treated as signed, is, +   * equal to {@code value}., +   * , +   * @deprecated Use {@link #fromIntBits(int)}. This method is scheduled to be removed in Guava, +   *             release 15.0., +   */, +  @Deprecated, +  @Beta, +  public static UnsignedInteger asUnsigned(int value) {, +    return fromIntBits(value);, +  }, +, +  /**, +   * Returns an {@code UnsignedInteger} corresponding to a given bit representation., +   * The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit, +   * of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual., +   *, +   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},, +   * otherwise, the result will be equal to {@code 2^32 + bits}., +   *, +   * <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead., +   * , +   * @since 14.0, +   */, +  public static UnsignedInteger fromIntBits(int bits) {, +    return new UnsignedInteger(bits);, +  }, +, +  /**, +   * Returns an {@code UnsignedInteger} that is equal to {@code value},, +   * if possible.  The inverse operation of {@link #longValue()}., +   */, +  public static UnsignedInteger valueOf(long value) {, +    checkArgument((value & INT_MASK) == value,, +        "value (%s) is outside the range for an unsigned integer value", value);, +    return fromIntBits((int) value);, +  }, +, +  /**, +   * Returns a {@code UnsignedInteger} representing the same value as the specified]