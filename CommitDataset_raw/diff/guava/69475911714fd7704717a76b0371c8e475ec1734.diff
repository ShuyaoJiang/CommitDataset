[+++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +  static AssertionFailedError failureWithCause(Throwable cause, String message) {, +    return failure;, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +  static AssertionFailedError failureWithCause(Throwable cause, String message) {, +    return failure;, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;, +        throw failureWithCause(cause, smartToString(inputs));, +  static <V> V pseudoTimedGetUninterruptibly(, +      throws ExecutionException, TimeoutException {, +      return getUninterruptibly(waiter, timeout, unit);, +      throw failureWithCause(e, "Unexpected exception");, +      // TODO(cpovirk: assertTrue(awaitTerminationUninterruptibly(executor, 10, SECONDS));, +            List<String> result = conditionalPseudoTimedGetUninterruptibly(, +  private static List<String> conditionalPseudoTimedGetUninterruptibly(, +      throws ExecutionException, TimeoutException {, +        ? pseudoTimedGetUninterruptibly(future, timeout, unit), +        : pseudoTimedGetUninterruptibly(future, 2500, MILLISECONDS);, +  static AssertionFailedError failureWithCause(Throwable cause, String message) {, +    return failure;, +++ b/guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/FuturesTest.java, +  static AssertionFailedError failureWithCause(Throwable cause, String message) {, +    return failure;, +++ b/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java, +import static com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly;, +        throw failureWithCause(cause, smartToString(inputs));, +  static <V> V pseudoTimedGetUninterruptibly(, +      throws ExecutionException, TimeoutException {, +      return getUninterruptibly(waiter, timeout, unit);, +      throw failureWithCause(e, "Unexpected exception");, +      // TODO(cpovirk: assertTrue(awaitTerminationUninterruptibly(executor, 10, SECONDS));, +            List<String> result = conditionalPseudoTimedGetUninterruptibly(, +  private static List<String> conditionalPseudoTimedGetUninterruptibly(, +      throws ExecutionException, TimeoutException {, +        ? pseudoTimedGetUninterruptibly(future, timeout, unit), +        : pseudoTimedGetUninterruptibly(future, 2500, MILLISECONDS);, +  static AssertionFailedError failureWithCause(Throwable cause, String message) {, +    return failure;, +++ b/guava-tests/test/com/google/common/util/concurrent/TestPlatform.java, +import static com.google.common.base.Preconditions.checkNotNull;, +import static com.google.common.util.concurrent.FuturesTest.failureWithCause;, +import static com.google.common.util.concurrent.FuturesTest.pseudoTimedGetUninterruptibly;, +import static java.util.concurrent.TimeUnit.MILLISECONDS;, +import static java.util.concurrent.TimeUnit.SECONDS;, +    checkNotNull(future);, +    try {, +      pseudoTimedGetUninterruptibly(future, 10, MILLISECONDS);, +      fail();, +    } catch (TimeoutException expected) {, +    } catch (ExecutionException e) {, +      throw failureWithCause(e, "");, +    }, +      getUninterruptibly(future, 0, SECONDS);, +      throw failureWithCause(e, "");]