[+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java, +   * Returns a {@link Function} that maps an {@link Enum} name to the associated {@code Enum}, +   * constant. The {@code Function} will return {@code null} if the {@code Enum} constant, +   * does not exist., +   * @param enumClass the {@link Class} of the {@code Enum} declaring the constant values, +   * @deprecated Use {@link Enums#stringConverter} instead. Note that the string converter has, +   *     slightly different behavior: it throws {@link IllegalArgumentException} if the enum, +   *     constant does not exist rather than returning {@code null}. It also converts {@code null}, +   *     to {@code null} rather than throwing {@link NullPointerException}. This method is, +   *     scheduled for removal in Guava 18.0., +  @Deprecated, +   * A {@link Function} that maps an {@link Enum} name to the associated constant, or {@code null}, +   * if the constant does not exist., +      return obj instanceof ValueOfFunction && enumClass.equals(((ValueOfFunction) obj).enumClass);, +   * Returns a converter that converts between strings and {@code enum} values of type, +   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The, +   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of, +   * any enum constant in the specified enum., +  public static <T extends Enum<T>> Converter<String, T> stringConverter(final Class<T> enumClass) {, +    return new StringConverter<T>(enumClass);, +  }, +, +  private static final class StringConverter<T extends Enum<T>>, +      extends Converter<String, T> implements Serializable {, +, +    private final Class<T> enumClass;, +, +    StringConverter(Class<T> enumClass) {, +      this.enumClass = checkNotNull(enumClass);, +    }, +, +      // TODO(kevinb): remove null boilerplate once convert() does it automatically, +, +    @Override, +    public boolean equals(@Nullable Object object) {, +      if (object instanceof StringConverter) {, +        StringConverter<?> that = (StringConverter<?>) object;, +        return this.enumClass.equals(that.enumClass);, +      return false;, +    }, +, +    @Override, +    public int hashCode() {, +      return enumClass.hashCode();, +    }, +, +    @Override, +    public String toString() {, +      return "Enums.stringConverter(" + enumClass.getName() + ".class)";, +    }, +, +    private static final long serialVersionUID = 0L;, +, +++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Enums.java, +   * Returns a {@link Function} that maps an {@link Enum} name to the associated {@code Enum}, +   * constant. The {@code Function} will return {@code null} if the {@code Enum} constant, +   * does not exist., +   * @param enumClass the {@link Class} of the {@code Enum} declaring the constant values, +   * @deprecated Use {@link Enums#stringConverter} instead. Note that the string converter has, +   *     slightly different behavior: it throws {@link IllegalArgumentException} if the enum, +   *     constant does not exist rather than returning {@code null}. It also converts {@code null}, +   *     to {@code null} rather than throwing {@link NullPointerException}. This method is, +   *     scheduled for removal in Guava 18.0., +  @Deprecated, +   * A {@link Function} that maps an {@link Enum} name to the associated constant, or {@code null}, +   * if the constant does not exist., +      return obj instanceof ValueOfFunction && enumClass.equals(((ValueOfFunction) obj).enumClass);, +   * Returns a converter that converts between strings and {@code enum} values of type, +   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The, +   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of, +   * any enum constant in the specified enum., +  public static <T extends Enum<T>> Converter<String, T> stringConverter(final Class<T> enumClass) {, +    return new StringConverter<T>(enumClass);, +  }, +, +  private static final class StringConverter<T extends Enum<T>>, +      extends Converter<String, T> implements Serializable {, +, +    private final Class<T> enumClass;, +, +    StringConverter(Class<T> enumClass) {, +      this.enumClass = checkNotNull(enumClass);, +    }, +, +      // TODO(kevinb): remove null boilerplate once convert() does it automatically, +, +    @Override, +    public boolean equals(@Nullable Object object) {, +      if (object instanceof StringConverter) {, +        StringConverter<?> that = (StringConverter<?>) object;, +        return this.enumClass.equals(that.enumClass);, +      return false;, +    }, +, +    @Override, +    public int hashCode() {, +      return enumClass.hashCode();, +    }, +, +    @Override]