[+++ b/guava/src/com/google/common/io/AppendableWriter.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * Writer that places all output on an {@link Appendable} target. If the target is {@link Flushable}, + * or {@link Closeable}, flush()es and close()s will also be delegated to the target., +  @Override, +  public void write(char cbuf[], int off, int len) throws IOException {, +  @Override, +  public void flush() throws IOException {, +  @Override, +  public void close() throws IOException {, +   * Override a few functions for performance reasons to avoid creating unnecessary strings., +  @Override, +  public void write(int c) throws IOException {, +  @Override, +  public void write(@Nullable String str) throws IOException {, +  @Override, +  public void write(@Nullable String str, int off, int len) throws IOException {, +  @Override, +  public Writer append(char c) throws IOException {, +  @Override, +  public Writer append(@Nullable CharSequence charSeq) throws IOException {, +  @Override, +  public Writer append(@Nullable CharSequence charSeq, int start, int end) throws IOException {, +++ b/guava/src/com/google/common/io/AppendableWriter.java, + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except, + * in compliance with the License. You may obtain a copy of the License at, + * Unless required by applicable law or agreed to in writing, software distributed under the License, + * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express, + * or implied. See the License for the specific language governing permissions and limitations under, + * the License., + * Writer that places all output on an {@link Appendable} target. If the target is {@link Flushable}, + * or {@link Closeable}, flush()es and close()s will also be delegated to the target., +  @Override, +  public void write(char cbuf[], int off, int len) throws IOException {, +  @Override, +  public void flush() throws IOException {, +  @Override, +  public void close() throws IOException {, +   * Override a few functions for performance reasons to avoid creating unnecessary strings., +  @Override, +  public void write(int c) throws IOException {, +  @Override, +  public void write(@Nullable String str) throws IOException {, +  @Override, +  public void write(@Nullable String str, int off, int len) throws IOException {, +  @Override, +  public Writer append(char c) throws IOException {, +  @Override, +  public Writer append(@Nullable CharSequence charSeq) throws IOException {, +  @Override, +  public Writer append(@Nullable CharSequence charSeq, int start, int end) throws IOException {, +++ b/guava/src/com/google/common/io/BaseEncoding.java, + * strings. This class includes several constants for encoding schemes specified by, + * <a href="http://tools.ietf.org/html/rfc4648">RFC 4648</a>. For example, the expression:, + * <p>By default, {@code BaseEncoding}'s behavior is relatively strict and in accordance with RFC, + * 4648. Decoding rejects characters in the wrong case, though padding is optional. To modify, + * encoding and decoding behavior, use configuration methods to obtain a new encoding with modified, + * behavior:, + * <p>All instances of this class are immutable, so they may be stored safely as static constants., +   * Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the, +   * inverse operation to {@link #encode(byte[])}., +   * Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the, +   * inverse operation to {@link #encode(byte[])}., +  private static final BaseEncoding BASE64 =, +      new Base64Encoding(, +   * The "base64" base encoding specified by, +   * <a href="http://tools.ietf.org/html/rfc4648#section-4">RFC 4648 section 4</a>, Base 64, +   * Encoding. (This is the same as the base 64 encoding from, +   * <a href="http://tools.ietf.org/html/rfc3548#section-3">RFC 3548</a>.), +   * <p>No line feeds are added by default, as per, +   * <a href="http://tools.ietf.org/html/rfc4648#section-3.1">RFC 4648 section 3.1</a>, Line Feeds, +   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}., +  private static final BaseEncoding BASE64_URL =, +      new Base64Encoding(, +   * The "base64url" encoding specified by, +   * <a href="http://tools.ietf.org/html/rfc4648#section-5">RFC 4648 section 5</a>, Base 64 Encoding, +   * with URL and Filename Safe Alphabet, also sometimes referred to as the "web safe Base64." (This, +   * is the same as the base 64 encoding with URL and filename safe alphabet from, +   * <a href="http://tools.ietf.org/html/rfc3548#section-4">RFC 3548</a>.), +   * <p>No line feeds are added by default, as per, +   * <a href="http://tools.ietf.org/html/rfc4648#section-3.1">RFC 4648 section 3.1</a>, Line Feeds, +   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}., +   * The "base32" encoding specified by <a href="http://tools.ietf.org/html/rfc4648#section-6">RFC, +   * 4648 section 6</a>, Base 32 Encoding. (This is the same as the base 32 encoding from, +   * <a href="http://tools.ietf.org/html/rfc3548#section-5">RFC 3548</a>.), +   * <p>No line feeds are added by default, as per, +   * <a href="http://tools.ietf.org/html/rfc4648#section-3.1">RFC 4648 section 3.1</a>, Line Feeds, +   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}., +   * The "base32hex" encoding specified by, +   * <a href="http://tools.ietf.org/html/rfc4648#section-7">RFC 4648 section 7</a>, Base 32 Encoding, +   * <p>No line feeds are added by default, as per, +   * <a href="http://tools.ietf.org/html/rfc4648#section-3.1">RFC 4648 section 3.1</a>, Line Feeds, +   * in Encoded Data. Line feeds may be added using {@link #withSeparator(String, int)}., +   * The "base16" encoding specified by <a href="http://tools.ietf.org/html/rfc4648#section-8">RFC, +   * 4648 section 8</a>, Base 16 Encoding. (This is the same as the base 16 encoding from]