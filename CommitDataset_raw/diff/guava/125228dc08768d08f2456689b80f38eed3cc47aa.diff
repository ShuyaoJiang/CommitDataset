[+++ b/src/com/google/common/base/Joiner.java, +    return new MapJoiner(this, keyValueSeparator);, +  public final static class MapJoiner {, +      this.joiner = joiner; // only "this" is ever passed, so don't checkNotNull, +      this.keyValueSeparator = checkNotNull(keyValueSeparator);, +++ b/src/com/google/common/base/Joiner.java, +    return new MapJoiner(this, keyValueSeparator);, +  public final static class MapJoiner {, +      this.joiner = joiner; // only "this" is ever passed, so don't checkNotNull, +      this.keyValueSeparator = checkNotNull(keyValueSeparator);, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +      // entry was removed from map, so can't be reused, +      pendingEvictionNotifications.offer(entry);, +            if (absent) {, +              // value was garbage collected; copy entry for notification, +              ReferenceEntry<K, V> notifyEntry = entryFactory.newEntry(, +                  CustomConcurrentHashMap.this, key, hash, null);, +              pendingEvictionNotifications.offer(notifyEntry);, +            }, +++ b/src/com/google/common/base/Joiner.java, +    return new MapJoiner(this, keyValueSeparator);, +  public final static class MapJoiner {, +      this.joiner = joiner; // only "this" is ever passed, so don't checkNotNull, +      this.keyValueSeparator = checkNotNull(keyValueSeparator);, +++ b/src/com/google/common/collect/CustomConcurrentHashMap.java, +      // entry was removed from map, so can't be reused, +      pendingEvictionNotifications.offer(entry);, +            if (absent) {, +              // value was garbage collected; copy entry for notification, +              ReferenceEntry<K, V> notifyEntry = entryFactory.newEntry(, +                  CustomConcurrentHashMap.this, key, hash, null);, +              pendingEvictionNotifications.offer(notifyEntry);, +            }, +++ b/src/com/google/common/collect/SingletonImmutableList.java, +    String elementToString = element.toString();, +    return new StringBuilder(elementToString.length() + 2), +        .append('['), +        .append(elementToString), +        .append(']'), +        .toString();]