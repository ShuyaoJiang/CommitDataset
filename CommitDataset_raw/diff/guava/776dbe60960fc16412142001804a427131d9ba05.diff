[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +    assertEquals(range,, +        ByteStreams.toByteArray(ByteStreams.newInputStreamSupplier(range)));, +  private static void equalHelper(boolean expect, int size1, int size2), +  private static void equalHelper(boolean expect, byte[] a, byte[] b), +    assertEquals(range, ByteStreams.toByteArray(okRead));, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, out.toByteArray());, +    assertEquals(expected, out.toByteArray());, +    assertEquals(new byte[10], b);, +    assertEquals(newPreFilledByteArray(10), b);, +    assertEquals(new byte[]{0, 1, 2, 3, 4, 0, 0, 0, 0, 0}, b);, +  private static void skipHelper(long n, int expect, InputStream in), +  private static final byte[] bytes =, +      new byte[] { 0x12, 0x34, 0x56, 0x78, 0x76, 0x54, 0x32, 0x10 };, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);, +    byte[] actual = new byte[bytes.length];, +    assertEquals(bytes, actual);, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);, +    byte[] actual = new byte[bytes.length * 2];, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);, +    assertEquals(bytes[0], actual[2]);, +    assertEquals(bytes[1], actual[3]);, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);, +    for (int i = 0; i < bytes.length; i++) {, +      assertEquals(bytes[i], in.readByte());, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes);, +    for (int i = 0; i < bytes.length; i++) {, +      assertEquals(bytes[i], in.readUnsignedByte());, +    ByteArrayDataInput in = ByteStreams.newDataInput(bytes, 2);, +    assertEquals(bytes, out.toByteArray());, +    assertEquals(bytes, out.toByteArray());, +    assertEquals(bytes, out.toByteArray());, +    out.write(bytes);, +    assertEquals(bytes, out.toByteArray());, +    assertEquals(new byte[] {0x12, 0x34}, out.toByteArray());, +    out.write(bytes, 4, 2);, +    byte[] expected = {bytes[4], bytes[5]};, +    assertEquals(new byte[] {0, 97}, out.toByteArray());, +    assertEquals(new byte[] {0x12, 0x34}, out.toByteArray());, +    assertEquals(bytes, out.toByteArray());, +    assertEquals(bytes, out.toByteArray());, +  private static void lengthHelper(final long skipLimit) throws IOException {, +    assertEquals(, +        ByteStreams.toByteArray(ByteStreams.slice(supplier, offset, length)));, +                assertEquals(, +                    newPreFilledByteArray(4096));, +  public void testLimit() throws Exception {, +    byte[] big = newPreFilledByteArray(5);, +    InputStream bin = new ByteArrayInputStream(big);, +    InputStream lin = ByteStreams.limit(bin, 2);, +, +    // also test available, +    lin.mark(2);, +    assertEquals(2, lin.available());, +    int read = lin.read();, +    assertEquals(big[0], read);, +    assertEquals(1, lin.available());, +    read = lin.read();, +    assertEquals(big[1], read);, +    assertEquals(0, lin.available());, +    read = lin.read();, +    assertEquals(-1, read);, +, +    lin.reset();, +    byte[] small = new byte[5];, +    read = lin.read(small);, +    assertEquals(2, read);, +    assertEquals(big[0], small[0]);, +    assertEquals(big[1], small[1]);, +, +    lin.reset();, +    read = lin.read(small, 2, 3);, +    assertEquals(2, read);, +    assertEquals(big[0], small[2]);, +    assertEquals(big[1], small[3]);, +  }, +, +  public void testMark() throws Exception {, +    byte[] big = newPreFilledByteArray(5);, +    InputStream bin = new ByteArrayInputStream(big);, +    InputStream lin = ByteStreams.limit(bin, 2);, +, +    int read = lin.read();, +    assertEquals(big[0], read);, +    lin.mark(2);, +, +    read = lin.read();, +    assertEquals(big[1], read);, +    read = lin.read();, +    assertEquals(-1, read);, +, +    lin.reset();, +    read = lin.read();, +    assertEquals(big[1], read);, +    read = lin.read();, +    assertEquals(-1, read);, +  }]