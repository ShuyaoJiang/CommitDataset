[+++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    @Override, +    public boolean removeAll(Collection<?> c) {, +      // TODO(user): find out why this is necessary to make GWT tests pass.  I mean, really., +      return super.removeAll(checkNotNull(c));, +    }, +, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    @Override, +    public boolean removeAll(Collection<?> c) {, +      // TODO(user): find out why this is necessary to make GWT tests pass.  I mean, really., +      return super.removeAll(checkNotNull(c));, +    }, +, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +++ b/guava/src/com/google/common/collect/Maps.java, +    @Override, +    public boolean removeAll(Collection<?> c) {, +      // TODO(user): find out why this is necessary to make GWT tests pass.  I mean, really., +      return super.removeAll(checkNotNull(c));, +    }, +, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +++ b/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Maps.java, +    @Override, +    public boolean removeAll(Collection<?> c) {, +      // TODO(user): find out why this is necessary to make GWT tests pass.  I mean, really., +      return super.removeAll(checkNotNull(c));, +    }, +, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +++ b/guava/src/com/google/common/collect/Maps.java, +    @Override, +    public boolean removeAll(Collection<?> c) {, +      // TODO(user): find out why this is necessary to make GWT tests pass.  I mean, really., +      return super.removeAll(checkNotNull(c));, +    }, +, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +        return super.removeAll(checkNotNull(c));, +        return super.retainAll(checkNotNull(c));, +++ b/guava/src/com/google/common/collect/StandardTable.java, +import java.util.AbstractMap;, +  class Row extends AbstractMap<C, V> {, +    Map<C, V> backingRowMap;, +, +    Map<C, V> backingRowMap() {, +      return (backingRowMap == null || (backingRowMap.isEmpty() && backingMap.containsKey(rowKey))), +          ? backingRowMap = computeBackingRowMap(), +          : backingRowMap;, +    Map<C, V> computeBackingRowMap() {, +      return backingMap.get(rowKey);, +    // Call this every time we perform a removal., +    void maintainEmptyInvariant() {, +      if (backingRowMap() != null && backingRowMap.isEmpty()) {, +        backingMap.remove(rowKey);, +        backingRowMap = null;, +      }, +    @Override, +    public boolean containsKey(Object key) {, +      Map<C, V> backingRowMap = backingRowMap();, +      return (key == null || backingRowMap == null) ? false : Maps.safeContainsKey(backingRowMap,, +          key);, +    }, +, +    @Override, +    public V get(Object key) {, +      Map<C, V> backingRowMap = backingRowMap();, +      return (key == null || backingRowMap == null) ? null : Maps.safeGet(backingRowMap, key);, +    }, +, +    @Override, +    public V put(C key, V value) {, +      checkNotNull(key);, +      checkNotNull(value);, +      if (backingRowMap != null && !backingRowMap.isEmpty()) {, +        return backingRowMap.put(key, value);, +      }, +    @Override, +    public V remove(Object key) {, +      try {, +        Map<C, V> backingRowMap = backingRowMap();, +        if (backingRowMap == null) {, +          return null;, +        }, +        V result = backingRowMap.remove(key);]