[+++ b/android/guava/src/com/google/common/io/BaseEncoding.java, +    chars = trimTrailingPadding(chars);, +  CharSequence trimTrailingPadding(CharSequence chars) {, +    return checkNotNull(chars);, +  }, +  private static final class Alphabet {, +        checkArgument(c < decodabet.length, "Non-ASCII character: %s", c);, +      if (ch > Ascii.MAX) {, +        throw new DecodingException("Unrecognized character: 0x" + Integer.toHexString(ch));, +      int result = decodabet[ch];, +      if (result == -1) {, +        if (ch <= 0x20 || ch == Ascii.MAX) {, +          throw new DecodingException("Unrecognized character: 0x" + Integer.toHexString(ch));, +        } else {, +          throw new DecodingException("Unrecognized character: " + ch);, +        }, +      }, +      return result;, +      return c < decodabet.length && decodabet[c] != -1;, +    CharSequence trimTrailingPadding(CharSequence chars) {, +      checkNotNull(chars);, +      if (paddingChar == null) {, +        return chars;, +      }, +      char padChar = paddingChar.charValue();, +      int l;, +      for (l = chars.length() - 1; l >= 0; l--) {, +        if (chars.charAt(l) != padChar) {, +          break;, +        }, +      }, +      return chars.subSequence(0, l + 1);, +    }, +, +    @Override, +      checkNotNull(chars);, +      chars = trimTrailingPadding(chars);, +      chars = trimTrailingPadding(chars);, +    @GwtIncompatible // Reader,InputStream, +            if (paddingChar != null && paddingChar.charValue() == ch) {, +      for (int i = 0; i < separator.length(); i++) {, +            !alphabet.matches(separator.charAt(i)),, +            "Separator (%s) cannot contain alphabet characters",, +      }, +      if (paddingChar != null) {, +        checkArgument(, +            separator.indexOf(paddingChar.charValue()) < 0,, +            "Separator (%s) cannot contain padding character",, +            separator);, +      }, +      chars = trimTrailingPadding(chars);, +  @GwtIncompatible, +  static Reader ignoringReader(final Reader delegate, final String toIgnore) {, +        } while (readChar != -1 && toIgnore.indexOf((char) readChar) >= 0);, +    CharSequence trimTrailingPadding(CharSequence chars) {, +      return delegate.trimTrailingPadding(chars);, +      StringBuilder builder = new StringBuilder();, +      for (int i = 0; i < chars.length(); i++) {, +        char c = chars.charAt(i);, +        if (separator.indexOf(c) < 0) {, +          builder.append(c);, +        }, +      }, +      return delegate.canDecode(builder);, +      StringBuilder stripped = new StringBuilder(chars.length());, +      for (int i = 0; i < chars.length(); i++) {, +        char c = chars.charAt(i);, +        if (separator.indexOf(c) < 0) {, +          stripped.append(c);, +        }, +      }, +      return delegate.decodeTo(target, stripped);, +    @GwtIncompatible // Reader,InputStream, +      return delegate.decodingStream(ignoringReader(reader, separator));, +++ b/android/guava/src/com/google/common/io/BaseEncoding.java, +    chars = trimTrailingPadding(chars);, +  CharSequence trimTrailingPadding(CharSequence chars) {, +    return checkNotNull(chars);, +  }, +  private static final class Alphabet {, +        checkArgument(c < decodabet.length, "Non-ASCII character: %s", c);, +      if (ch > Ascii.MAX) {, +        throw new DecodingException("Unrecognized character: 0x" + Integer.toHexString(ch));, +      int result = decodabet[ch];, +      if (result == -1) {, +        if (ch <= 0x20 || ch == Ascii.MAX) {, +          throw new DecodingException("Unrecognized character: 0x" + Integer.toHexString(ch));, +        } else {, +          throw new DecodingException("Unrecognized character: " + ch);, +        }, +      }, +      return result;, +      return c < decodabet.length && decodabet[c] != -1;, +    CharSequence trimTrailingPadding(CharSequence chars) {, +      checkNotNull(chars);, +      if (paddingChar == null) {, +        return chars;, +      }, +      char padChar = paddingChar.charValue();, +      int l;]