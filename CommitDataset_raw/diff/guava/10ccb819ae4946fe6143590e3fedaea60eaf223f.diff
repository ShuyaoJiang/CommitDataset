[+++ b/android/guava-testlib/test/com/google/common/testing/AbstractPackageSanityTestsTest.java, +  /*, +   * This is a public type so that the Android test runner can create an instance directly as it, +   * insists upon doing. It then runs the test, which behaves exactly like this package's existing, +   * PackageSanityTests. (The test would run on the JVM, too, if not for the suppression below, and, +   * that would be a problem because it violates small-test rules. Note that we strip the, +   * suppression externally, but it's OK because we don't enforce test-size rules there.), +   *, +   * We'd just use PackageSanityTests directly, saving us from needing this separate type, but we're, +   * currently skipping MediumTests on Android, and we skip them by not making them present at, +   * runtime at all. I could just make _this_ test a MediumTest, but then it wouldn't run on, +   * Android.... The right long-term fix is probably to get MediumTests running under Android by, +   * default and then suppress them strategically as needed., +   */, +  public static final class ConcretePackageSanityTests extends AbstractPackageSanityTests {}, +  private final AbstractPackageSanityTests sanityTests = new ConcretePackageSanityTests();, +++ b/android/guava-testlib/test/com/google/common/testing/AbstractPackageSanityTestsTest.java, +  /*, +   * This is a public type so that the Android test runner can create an instance directly as it, +   * insists upon doing. It then runs the test, which behaves exactly like this package's existing, +   * PackageSanityTests. (The test would run on the JVM, too, if not for the suppression below, and, +   * that would be a problem because it violates small-test rules. Note that we strip the, +   * suppression externally, but it's OK because we don't enforce test-size rules there.), +   *, +   * We'd just use PackageSanityTests directly, saving us from needing this separate type, but we're, +   * currently skipping MediumTests on Android, and we skip them by not making them present at, +   * runtime at all. I could just make _this_ test a MediumTest, but then it wouldn't run on, +   * Android.... The right long-term fix is probably to get MediumTests running under Android by, +   * default and then suppress them strategically as needed., +   */, +  public static final class ConcretePackageSanityTests extends AbstractPackageSanityTests {}, +  private final AbstractPackageSanityTests sanityTests = new ConcretePackageSanityTests();, +++ b/guava-testlib/test/com/google/common/testing/AbstractPackageSanityTestsTest.java, +  /*, +   * This is a public type so that the Android test runner can create an instance directly as it, +   * insists upon doing. It then runs the test, which behaves exactly like this package's existing, +   * PackageSanityTests. (The test would run on the JVM, too, if not for the suppression below, and, +   * that would be a problem because it violates small-test rules. Note that we strip the, +   * suppression externally, but it's OK because we don't enforce test-size rules there.), +   *, +   * We'd just use PackageSanityTests directly, saving us from needing this separate type, but we're, +   * currently skipping MediumTests on Android, and we skip them by not making them present at, +   * runtime at all. I could just make _this_ test a MediumTest, but then it wouldn't run on, +   * Android.... The right long-term fix is probably to get MediumTests running under Android by, +   * default and then suppress them strategically as needed., +   */, +  public static final class ConcretePackageSanityTests extends AbstractPackageSanityTests {}, +  private final AbstractPackageSanityTests sanityTests = new ConcretePackageSanityTests();]