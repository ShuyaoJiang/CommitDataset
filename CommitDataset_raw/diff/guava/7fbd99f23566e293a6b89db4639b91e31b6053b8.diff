[+++ b/guava-testlib/src/com/google/common/graph/testing/TestGraphBuilder.java, +  public TestGraphBuilder<N> addEdge(N nodeA, N nodeB) {, +    graph.addEdge(nodeA, nodeB);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestGraphBuilder.java, +  public TestGraphBuilder<N> addEdge(N nodeA, N nodeB) {, +    graph.addEdge(nodeA, nodeB);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestNetworkBuilder.java, +  public TestNetworkBuilder<N, E> addEdge(E edge, N nodeA, N nodeB) {, +    graph.addEdge(edge, nodeA, nodeB);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestGraphBuilder.java, +  public TestGraphBuilder<N> addEdge(N nodeA, N nodeB) {, +    graph.addEdge(nodeA, nodeB);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestNetworkBuilder.java, +  public TestNetworkBuilder<N, E> addEdge(E edge, N nodeA, N nodeB) {, +    graph.addEdge(edge, nodeA, nodeB);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        Endpoints<Integer> endpoints = graph.incidentNodes(inEdge);, +        assertThat(endpoints.source()).isEqualTo(oppositeNode);, +        assertThat(endpoints.target()).isEqualTo(node);, +        Endpoints<Integer> endpoints = graph.incidentNodes(outEdge);, +        assertThat(endpoints.source()).isEqualTo(node);, +        assertThat(endpoints.target()).isEqualTo(oppositeNode);, +    assertEquals(N1, graph.incidentNodes(E12).source());, +      graph.incidentNodes(EDGE_NOT_IN_GRAPH).source();, +    assertEquals(N2, graph.incidentNodes(E12).target());, +      graph.incidentNodes(EDGE_NOT_IN_GRAPH).target();, +++ b/guava-testlib/src/com/google/common/graph/testing/TestGraphBuilder.java, +  public TestGraphBuilder<N> addEdge(N nodeA, N nodeB) {, +    graph.addEdge(nodeA, nodeB);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestNetworkBuilder.java, +  public TestNetworkBuilder<N, E> addEdge(E edge, N nodeA, N nodeB) {, +    graph.addEdge(edge, nodeA, nodeB);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        Endpoints<Integer> endpoints = graph.incidentNodes(inEdge);, +        assertThat(endpoints.source()).isEqualTo(oppositeNode);, +        assertThat(endpoints.target()).isEqualTo(node);, +        Endpoints<Integer> endpoints = graph.incidentNodes(outEdge);, +        assertThat(endpoints.source()).isEqualTo(node);, +        assertThat(endpoints.target()).isEqualTo(oppositeNode);, +    assertEquals(N1, graph.incidentNodes(E12).source());, +      graph.incidentNodes(EDGE_NOT_IN_GRAPH).source();, +    assertEquals(N2, graph.incidentNodes(E12).target());, +      graph.incidentNodes(EDGE_NOT_IN_GRAPH).target();, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +  static final String ERROR_MODIFIABLE_COLLECTION =, +      "Collection returned is unexpectedly modifiable";, +      Endpoints<Integer> endpoints = graph.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();, +      assertThat(graph.edgesConnecting(nodeA, nodeB)).contains(edge);, +      assertThat(graph.successors(nodeA)).contains(nodeB);, +      assertThat(graph.adjacentNodes(nodeA)).contains(nodeB);, +      assertThat(graph.outEdges(nodeA)).contains(edge);, +      assertThat(graph.incidentEdges(nodeA)).contains(edge);, +      assertThat(graph.predecessors(nodeB)).contains(nodeA);, +      assertThat(graph.adjacentNodes(nodeB)).contains(nodeA);, +      assertThat(graph.inEdges(nodeB)).contains(edge);, +      assertThat(graph.incidentEdges(nodeB)).contains(edge);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestGraphBuilder.java, +  public TestGraphBuilder<N> addEdge(N nodeA, N nodeB) {, +    graph.addEdge(nodeA, nodeB);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestNetworkBuilder.java, +  public TestNetworkBuilder<N, E> addEdge(E edge, N nodeA, N nodeB) {, +    graph.addEdge(edge, nodeA, nodeB);, +++ b/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java, +        Endpoints<Integer> endpoints = graph.incidentNodes(inEdge);, +        assertThat(endpoints.source()).isEqualTo(oppositeNode);, +        assertThat(endpoints.target()).isEqualTo(node);, +        Endpoints<Integer> endpoints = graph.incidentNodes(outEdge);, +        assertThat(endpoints.source()).isEqualTo(node);, +        assertThat(endpoints.target()).isEqualTo(oppositeNode);, +    assertEquals(N1, graph.incidentNodes(E12).source());, +      graph.incidentNodes(EDGE_NOT_IN_GRAPH).source();, +    assertEquals(N2, graph.incidentNodes(E12).target());, +      graph.incidentNodes(EDGE_NOT_IN_GRAPH).target();, +++ b/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java, +  static final String ERROR_MODIFIABLE_COLLECTION =, +      "Collection returned is unexpectedly modifiable";, +      Endpoints<Integer> endpoints = graph.incidentNodes(edge);, +      Integer nodeA = endpoints.nodeA();, +      Integer nodeB = endpoints.nodeB();, +      assertThat(graph.edgesConnecting(nodeA, nodeB)).contains(edge);, +      assertThat(graph.successors(nodeA)).contains(nodeB);, +      assertThat(graph.adjacentNodes(nodeA)).contains(nodeB);, +      assertThat(graph.outEdges(nodeA)).contains(edge);, +      assertThat(graph.incidentEdges(nodeA)).contains(edge);, +      assertThat(graph.predecessors(nodeB)).contains(nodeA);, +      assertThat(graph.adjacentNodes(nodeB)).contains(nodeA);, +      assertThat(graph.inEdges(nodeB)).contains(edge);, +      assertThat(graph.incidentEdges(nodeB)).contains(edge);, +++ b/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java, +    assertThat(graph.incidentNodes(E11)).containsExactly(N1, N1);, +    assertEquals(N1, graph.incidentNodes(E11).source());, +    assertEquals(N1, graph.incidentNodes(E11).target());, +++ b/guava-testlib/src/com/google/common/graph/testing/TestGraphBuilder.java, +  public TestGraphBuilder<N> addEdge(N nodeA, N nodeB) {, +    graph.addEdge(nodeA, nodeB);, +++ b/guava-testlib/src/com/google/common/graph/testing/TestNetworkBuilder.java, +  public TestNetworkBuilder<N, E> addEdge(E edge, N nodeA, N nodeB) {, +    graph.addEdge(edge, nodeA, nodeB);]