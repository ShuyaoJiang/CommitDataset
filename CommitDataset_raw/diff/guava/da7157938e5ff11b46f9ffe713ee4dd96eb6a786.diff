[+++ b/guava/src/com/google/common/hash/HashCode.java, +    @Override, +    public int bits() {, +    @Override, +    public byte[] asBytes() {, +    @Override, +    public int asInt() {, +    @Override, +    public long asLong() {, +    @Override, +    public int bits() {, +    @Override, +    public byte[] asBytes() {, +    @Override, +    public int asInt() {, +    @Override, +    public long asLong() {, +    @Override, +    public int bits() {, +    @Override, +    public byte[] asBytes() {, +    @Override, +    public int asInt() {, +    @Override, +    public long asLong() {, +  /**, +   * Copies bytes from this hash code into {@code dest}., +   *, +   * @param dest the byte array into which the hash code will be written, +   * @param offset the start offset in the data, +   * @param maxLength the maximum number of bytes to write, +   * @return the number of bytes written to {@code dest}, +   * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}, +   */, +  public final int writeBytesTo(byte[] dest, int offset, int maxLength) {, +    maxLength = Ints.min(maxLength, bits() * 8);, +    Preconditions.checkPositionIndexes(offset, offset + maxLength, dest.length);, +    // TODO(user): Consider avoiding the array creation in asBytes() by stepping through, +    // the bytes individually., +    byte[] hash = asBytes();, +    System.arraycopy(hash, 0, dest, offset, maxLength);, +    return maxLength;, +  }, +, +  @Override, +  public final boolean equals(@Nullable Object object) {, +  @Override, +  public final int hashCode() {, +    // If we have at least 4 bytes (32 bits), just take the first 4 bytes. Since this is, +    // already a (presumably) high-quality hash code, any four bytes of it will do., +    if (bits() >= 32) {, +    // If we have less than 4 bytes, use them all., +    byte[] bytes = asBytes();, +    int val = (bytes[0] & 0xFF);, +    for (int i = 1; i < bytes.length; i++) {, +      val |= ((bytes[i] & 0xFF) << (i * 8));, +    }, +    return val;, +  }, +   *, +   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}., +  @Override, +  public final String toString() {]