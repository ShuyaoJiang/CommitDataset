[+++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +    if (!Closer.SuppressingSuppressor.isAvailable()) {, +      // test that exceptions are logged, +, +    } else {, +      // test that exceptions are suppressed, +, +      for (InputSupplier<InputStream> in : BROKEN_INPUTS) {, +        int suppressed = runSuppressionFailureTest(in, newByteArrayOutputStreamSupplier());, +        assertEquals(0, suppressed);, +, +        suppressed = runSuppressionFailureTest(in, BROKEN_CLOSE_OUTPUT);, +        assertEquals((in == BROKEN_GET_INPUT) ? 0 : 1, suppressed);, +      }, +, +      for (OutputSupplier<OutputStream> out : BROKEN_OUTPUTS) {, +        int suppressed = runSuppressionFailureTest(newInputStreamSupplier(new byte[10]), out);, +        assertEquals(0, suppressed);, +, +        suppressed = runSuppressionFailureTest(BROKEN_CLOSE_INPUT, out);, +        assertEquals(1, suppressed);, +      }, +, +      for (InputSupplier<InputStream> in : BROKEN_INPUTS) {, +        for (OutputSupplier<OutputStream> out : BROKEN_OUTPUTS) {, +          int suppressed = runSuppressionFailureTest(in, out);, +          assertTrue(suppressed <= 1);, +        }, +      }, +    }, +  /**, +   * @return the number of exceptions that were suppressed on the expected thrown exception, +   */, +  private static int runSuppressionFailureTest(, +      InputSupplier<? extends InputStream> in, OutputSupplier<OutputStream> out) {, +    try {, +      copy(in, out);, +      fail();, +    } catch (IOException expected) {, +      return CloserTest.getSuppressed(expected).length;, +    }, +    throw new AssertionError(); // can't happen, +  }, +, +++ b/guava-tests/test/com/google/common/io/ByteStreamsTest.java, +    if (!Closer.SuppressingSuppressor.isAvailable()) {, +      // test that exceptions are logged, +, +    } else {, +      // test that exceptions are suppressed, +, +      for (InputSupplier<InputStream> in : BROKEN_INPUTS) {, +        int suppressed = runSuppressionFailureTest(in, newByteArrayOutputStreamSupplier());, +        assertEquals(0, suppressed);, +, +        suppressed = runSuppressionFailureTest(in, BROKEN_CLOSE_OUTPUT);, +        assertEquals((in == BROKEN_GET_INPUT) ? 0 : 1, suppressed);, +      }, +, +      for (OutputSupplier<OutputStream> out : BROKEN_OUTPUTS) {, +        int suppressed = runSuppressionFailureTest(newInputStreamSupplier(new byte[10]), out);, +        assertEquals(0, suppressed);, +, +        suppressed = runSuppressionFailureTest(BROKEN_CLOSE_INPUT, out);, +        assertEquals(1, suppressed);, +      }, +, +      for (InputSupplier<InputStream> in : BROKEN_INPUTS) {, +        for (OutputSupplier<OutputStream> out : BROKEN_OUTPUTS) {, +          int suppressed = runSuppressionFailureTest(in, out);, +          assertTrue(suppressed <= 1);, +        }, +      }, +    }, +  /**, +   * @return the number of exceptions that were suppressed on the expected thrown exception, +   */, +  private static int runSuppressionFailureTest(, +      InputSupplier<? extends InputStream> in, OutputSupplier<OutputStream> out) {, +    try {, +      copy(in, out);, +      fail();, +    } catch (IOException expected) {, +      return CloserTest.getSuppressed(expected).length;, +    }, +    throw new AssertionError(); // can't happen, +  }, +, +++ b/guava-tests/test/com/google/common/io/CharStreamsTest.java, +    if (!Closer.SuppressingSuppressor.isAvailable()) {, +      // test that exceptions are logged, +, +    } else {, +      // test that exceptions are suppressed, +, +      for (InputSupplier<? extends Reader> in : BROKEN_INPUTS) {, +        int suppressed = runSuppressionFailureTest(in, newStringWriterSupplier());, +        assertEquals(0, suppressed);, +, +        suppressed = runSuppressionFailureTest(in, BROKEN_CLOSE_OUTPUT);]