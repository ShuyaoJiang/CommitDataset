[+++ b/guava-tests/test/com/google/common/graph/ElementOrderTest.java, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    assertThat(network.edgeOrder()).isEqualTo(unordered());, +    assertThat(network.nodeOrder()).isEqualTo(insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.insertion());, +    assertThat(network.edges()).containsExactly("i", "e", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.insertion());, +    assertThat(network.edges()).containsExactly("i", "e", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.sorted(Ordering.<String>natural()));, +    assertThat(network.edges()).containsExactly("e", "i", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(, +    assertThat(network.edges()).containsExactly("p", "i", "e").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(, +    assertThat(network.edges()).containsExactly("p", "i", "e").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(unordered());, +    assertThat(network.nodes()).containsExactly(4, 1, 3);, +  private static void addEdges(MutableNetwork<Integer, String> network) {, +    network.addEdge(3, 1, "i");, +    network.addEdge(1, 4, "e");, +    network.addEdge(4, 3, "p");, +++ b/guava-tests/test/com/google/common/graph/ElementOrderTest.java, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    assertThat(network.edgeOrder()).isEqualTo(unordered());, +    assertThat(network.nodeOrder()).isEqualTo(insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.insertion());, +    assertThat(network.edges()).containsExactly("i", "e", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.insertion());, +    assertThat(network.edges()).containsExactly("i", "e", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.sorted(Ordering.<String>natural()));, +    assertThat(network.edges()).containsExactly("e", "i", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(, +    assertThat(network.edges()).containsExactly("p", "i", "e").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(, +    assertThat(network.edges()).containsExactly("p", "i", "e").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(unordered());, +    assertThat(network.nodes()).containsExactly(4, 1, 3);, +  private static void addEdges(MutableNetwork<Integer, String> network) {, +    network.addEdge(3, 1, "i");, +    network.addEdge(1, 4, "e");, +    network.addEdge(4, 3, "p");, +++ b/guava-tests/test/com/google/common/graph/EndpointPairTest.java, +    ImmutableList<MutableNetwork<Integer, String>> testNetworks = ImmutableList.of(, +    for (MutableNetwork<Integer, String> network : testNetworks) {, +      network.addEdge(1, 2, "1-2");, +      EndpointPair<Integer> endpointPair = network.incidentNodes("1-2");, +++ b/guava-tests/test/com/google/common/graph/ElementOrderTest.java, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    assertThat(network.edgeOrder()).isEqualTo(unordered());, +    assertThat(network.nodeOrder()).isEqualTo(insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.insertion());, +    assertThat(network.edges()).containsExactly("i", "e", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.insertion());, +    assertThat(network.edges()).containsExactly("i", "e", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(ElementOrder.sorted(Ordering.<String>natural()));, +    assertThat(network.edges()).containsExactly("e", "i", "p").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(, +    assertThat(network.edges()).containsExactly("p", "i", "e").inOrder();, +    assertThat(network.nodeOrder()).isEqualTo(ElementOrder.insertion()); // default, +    MutableNetwork<Integer, String> network = NetworkBuilder, +    addEdges(network);, +    assertThat(network.edgeOrder()).isEqualTo(]