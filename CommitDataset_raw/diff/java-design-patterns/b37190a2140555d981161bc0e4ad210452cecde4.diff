[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, +    LOGGER.info("# CachingPolicy.ASIDE");, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, +    LOGGER.info("# CachingPolicy.ASIDE");, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, +        LOGGER.error("{} was not found. Defaulting to non-interactive mode.", PROP_FILE_NAME, e);, +      LOGGER.info("Async Event [{}] has been created.", aEventId);, +      LOGGER.info("Async Event [{}] has been started.", aEventId);, +      LOGGER.info("Sync Event [{}] has been created.", sEventId);, +      LOGGER.info("Sync Event [{}] has been started.", sEventId);, +      LOGGER.info("Async Event [{}] has been stopped.", aEventId);, +      LOGGER.info("Sync Event [{}] has been stopped.", sEventId);, +      LOGGER.error(e.getMessage());, +      LOGGER.info("Hello. Would you like to boil some eggs?");, +      LOGGER.info("(1) BOIL AN EGG \n(2) STOP BOILING THIS EGG \n(3) HOW ARE MY EGGS? \n(4) EXIT");, +      LOGGER.info("Choose [1,2,3,4]: ");, +        LOGGER.info("Boil multiple eggs at once (A) or boil them one-by-one (S)?: ");, +        LOGGER.info("How long should this egg be boiled for (in seconds)?: ");, +            LOGGER.info("Egg [{}] is being boiled.", eventId);, +            LOGGER.error(e.getMessage());, +            LOGGER.info("Egg [{}] is being boiled.", eventId);, +            LOGGER.error(e.getMessage());, +          LOGGER.info("Unknown event type.");, +        LOGGER.info("Which egg?: ");, +          LOGGER.info("Egg [{}] is removed from boiler.", eventId);, +          LOGGER.error(e.getMessage());, +        LOGGER.info("Just one egg (O) OR all of them (A) ?: ");, +          LOGGER.info("Which egg?: ");, +            LOGGER.error(e.getMessage());, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, +    LOGGER.info("# CachingPolicy.ASIDE");, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, +        LOGGER.error("{} was not found. Defaulting to non-interactive mode.", PROP_FILE_NAME, e);, +      LOGGER.info("Async Event [{}] has been created.", aEventId);, +      LOGGER.info("Async Event [{}] has been started.", aEventId);, +      LOGGER.info("Sync Event [{}] has been created.", sEventId);, +      LOGGER.info("Sync Event [{}] has been started.", sEventId);, +      LOGGER.info("Async Event [{}] has been stopped.", aEventId);, +      LOGGER.info("Sync Event [{}] has been stopped.", sEventId);, +      LOGGER.error(e.getMessage());, +      LOGGER.info("Hello. Would you like to boil some eggs?");, +      LOGGER.info("(1) BOIL AN EGG \n(2) STOP BOILING THIS EGG \n(3) HOW ARE MY EGGS? \n(4) EXIT");, +      LOGGER.info("Choose [1,2,3,4]: ");, +        LOGGER.info("Boil multiple eggs at once (A) or boil them one-by-one (S)?: ");, +        LOGGER.info("How long should this egg be boiled for (in seconds)?: ");, +            LOGGER.info("Egg [{}] is being boiled.", eventId);, +            LOGGER.error(e.getMessage());, +            LOGGER.info("Egg [{}] is being boiled.", eventId);, +            LOGGER.error(e.getMessage());, +          LOGGER.info("Unknown event type.");, +        LOGGER.info("Which egg?: ");, +          LOGGER.info("Egg [{}] is removed from boiler.", eventId);, +          LOGGER.error(e.getMessage());, +        LOGGER.info("Just one egg (O) OR all of them (A) ?: ");, +          LOGGER.info("Which egg?: ");, +            LOGGER.error(e.getMessage());, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(Event.class);, +, +      LOGGER.info("[{}] is not done.", eventId);, +      LOGGER.info("[{}] is done.", eventId);, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, +    LOGGER.info("# CachingPolicy.ASIDE");, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +    LOGGER.info(AppManager.printCacheContent());, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(App.class);, +, +        LOGGER.error("{} was not found. Defaulting to non-interactive mode.", PROP_FILE_NAME, e);, +      LOGGER.info("Async Event [{}] has been created.", aEventId);]