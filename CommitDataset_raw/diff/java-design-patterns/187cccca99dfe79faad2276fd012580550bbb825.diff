[+++ b/servant/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <groupId>com.iluwatar</groupId>, +  <artifactId>servant</artifactId>, +  <version>1.0-SNAPSHOT</version>, +  <name>servant</name>, +  <url>http://maven.apache.org</url>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>3.8.1</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/servant/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <groupId>com.iluwatar</groupId>, +  <artifactId>servant</artifactId>, +  <version>1.0-SNAPSHOT</version>, +  <name>servant</name>, +  <url>http://maven.apache.org</url>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>3.8.1</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/servant/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +import java.util.ArrayList;, +, +, +/**, + * Servant offers some functionality to a group of classes without defining that functionality in each of them. , + * A Servant is a class whose instance provides methods that take care of a desired service,, + * while objects for which the servant does something, are taken as parameters., + *, + */, +public class App {, +	static Servant jenkins = new Servant("Jenkins");, +	static Servant travis = new Servant("Travis");, +	, +	public static void main( String[] args ){, +		scenario(jenkins, 1);, +		scenario(travis, 0);, +	}, +	, +	, +	public static void scenario(Servant servant, int compliment){, +		King k = new King();, +		Queen q = new Queen();, +		, +		ArrayList<Royalty> guests = new ArrayList<>();, +		guests.add(k);, +		guests.add(q);, +		, +		//feed, +		servant.feed(k);, +		servant.feed(q);, +		//serve drinks, +		servant.giveWine(k);, +		servant.giveWine(q);, +		//compliment, +		servant.GiveCompliments( guests.get(compliment) );, +		, +		//outcome of the night, +		for(Royalty r : guests), +			r.changeMood();, +		, +		//check your luck, +		if( servant.checkIfYouWillBeHanged(guests) ), +			System.out.println(servant.name + " will live another day");, +		else, +			System.out.println("Poor " + servant.name + ". His days are numbered");, +	}, +	, +	, +}]