[+++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of multiple readers and writers., +    ExecutorService executeService = Executors.newFixedThreadPool(10);, +    // Start 5 readers, +    IntStream.range(0, 5), +    // Start 5 writers, +    IntStream.range(0, 5), +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of multiple readers and writers., +    ExecutorService executeService = Executors.newFixedThreadPool(10);, +    // Start 5 readers, +    IntStream.range(0, 5), +    // Start 5 writers, +    IntStream.range(0, 5), +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Reader.java, +    Thread.sleep(250);, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of multiple readers and writers., +    ExecutorService executeService = Executors.newFixedThreadPool(10);, +    // Start 5 readers, +    IntStream.range(0, 5), +    // Start 5 writers, +    IntStream.range(0, 5), +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Reader.java, +    Thread.sleep(250);, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Writer.java, +    Thread.sleep(250);, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of multiple readers and writers., +    ExecutorService executeService = Executors.newFixedThreadPool(10);, +    // Start 5 readers, +    IntStream.range(0, 5), +    // Start 5 writers, +    IntStream.range(0, 5), +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Reader.java, +    Thread.sleep(250);, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Writer.java, +    Thread.sleep(250);, +++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java, +import static org.mockito.Mockito.inOrder;, +import org.mockito.InOrder;, +public class ReaderAndWriterTest extends StdOutTest {, +    Reader reader1 = new Reader("Reader 1", lock.readLock());, +    Writer writer1 = new Writer("Writer 1", lock.writeLock());, +    // Let reader1 execute first, +    Thread.sleep(150);, +    executeService.submit(writer1);, +, +    final InOrder inOrder = inOrder(getStdOutMock());, +    inOrder.verify(getStdOutMock()).println("Reader 1 begin");, +    inOrder.verify(getStdOutMock()).println("Reader 1 finish");, +    inOrder.verify(getStdOutMock()).println("Writer 1 begin");, +    inOrder.verify(getStdOutMock()).println("Writer 1 finish");, +  }, +, +  /**, +   * Verify reader and writer can only get the lock to read and write orderly, +   */, +  @Test, +  public void testWriteAndRead() throws Exception {, +, +    ExecutorService executeService = Executors.newFixedThreadPool(2);, +    ReaderWriterLock lock = new ReaderWriterLock();, +, +    Reader reader1 = new Reader("Reader 1", lock.readLock());, +    Writer writer1 = new Writer("Writer 1", lock.writeLock());, +, +    executeService.submit(writer1);, +    // Let writer1 execute first, +    Thread.sleep(150);, +    executeService.submit(reader1);, +, +    executeService.shutdown();, +    try {, +      executeService.awaitTermination(10, TimeUnit.SECONDS);, +    } catch (InterruptedException e) {, +      System.out.println("Error waiting for ExecutorService shutdown");, +    }, +, +    final InOrder inOrder = inOrder(getStdOutMock());, +    inOrder.verify(getStdOutMock()).println("Writer 1 begin");, +    inOrder.verify(getStdOutMock()).println("Writer 1 finish");, +    inOrder.verify(getStdOutMock()).println("Reader 1 begin");, +    inOrder.verify(getStdOutMock()).println("Reader 1 finish");, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, + * This example use two mutex to demonstrate the concurrent access of multiple readers and writers., +    ExecutorService executeService = Executors.newFixedThreadPool(10);, +    // Start 5 readers, +    IntStream.range(0, 5), +    // Start 5 writers, +    IntStream.range(0, 5), +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Reader.java, +    Thread.sleep(250);, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Writer.java, +    Thread.sleep(250);, +++ b/reader-writer-lock/src/test/java/com/iluwatar/reader/writer/lock/ReaderAndWriterTest.java, +import static org.mockito.Mockito.inOrder;, +import org.mockito.InOrder;, +public class ReaderAndWriterTest extends StdOutTest {, +    Reader reader1 = new Reader("Reader 1", lock.readLock());]