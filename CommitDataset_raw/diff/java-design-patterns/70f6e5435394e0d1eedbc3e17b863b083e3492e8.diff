[+++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +  public void testName() throws Exception {, +    assertNull(simpleObject.getName());, +    assertEquals(name, simpleObject.getName());, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +  public void testName() throws Exception {, +    assertNull(simpleObject.getName());, +    assertEquals(name, simpleObject.getName());, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectsTest.java, +, +import static org.junit.Assert.assertEquals;, +, +  public void testCreate() throws Exception {, +    String objectName = "Foobar";, +    final SimpleObject obj = simpleObjects.create(objectName);, +    assertEquals(simpleObject, obj);, +    assertEquals(objectName, obj.getName());, +  public void testListAll() throws Exception {, +    assertEquals(all, list);, +, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +  public void testName() throws Exception {, +    assertNull(simpleObject.getName());, +    assertEquals(name, simpleObject.getName());, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectsTest.java, +, +import static org.junit.Assert.assertEquals;, +, +  public void testCreate() throws Exception {, +    String objectName = "Foobar";, +    final SimpleObject obj = simpleObjects.create(objectName);, +    assertEquals(simpleObject, obj);, +    assertEquals(objectName, obj.getName());, +  public void testListAll() throws Exception {, +    assertEquals(all, list);, +, +++ b/naked-objects/integtests/src/test/java/domainapp/integtests/tests/modules/simple/SimpleObjectIntegTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +import domainapp.dom.modules.simple.SimpleObject;, +import domainapp.fixture.scenarios.RecreateSimpleObjects;, +import domainapp.integtests.tests.SimpleAppIntegTest;, +, +  @Inject, +  DomainObjectContainer container;, +  private static final String NEW_NAME = "new name";, +, +    assertNotNull(simpleObjectPojo);, +  public void testNameAccessible() throws Exception {, +    assertEquals(fs.names.get(0), name);, +  public void testNameCannotBeUpdatedDirectly() throws Exception {, +    simpleObjectWrapped.setName(NEW_NAME);, +  public void testUpdateName() throws Exception {, +    simpleObjectWrapped.updateName(NEW_NAME);, +    assertEquals(NEW_NAME, simpleObjectWrapped.getName());, +  public void testUpdateNameFailsValidation() throws Exception {, +    simpleObjectWrapped.updateName(NEW_NAME + "!");, +  public void testInterpolatesName() throws Exception {, +    assertEquals("Object: " + name, title);, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +  public void testName() throws Exception {, +    assertNull(simpleObject.getName());, +    assertEquals(name, simpleObject.getName());, +++ b/naked-objects/dom/src/test/java/domainapp/dom/modules/simple/SimpleObjectsTest.java, +, +import static org.junit.Assert.assertEquals;, +, +  public void testCreate() throws Exception {, +    String objectName = "Foobar";, +    final SimpleObject obj = simpleObjects.create(objectName);, +    assertEquals(simpleObject, obj);, +    assertEquals(objectName, obj.getName());, +  public void testListAll() throws Exception {, +    assertEquals(all, list);, +, +++ b/naked-objects/integtests/src/test/java/domainapp/integtests/tests/modules/simple/SimpleObjectIntegTest.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +import domainapp.dom.modules.simple.SimpleObject;, +import domainapp.fixture.scenarios.RecreateSimpleObjects;, +import domainapp.integtests.tests.SimpleAppIntegTest;, +, +  @Inject, +  DomainObjectContainer container;, +  private static final String NEW_NAME = "new name";, +, +    assertNotNull(simpleObjectPojo);, +  public void testNameAccessible() throws Exception {, +    assertEquals(fs.names.get(0), name);, +  public void testNameCannotBeUpdatedDirectly() throws Exception {]