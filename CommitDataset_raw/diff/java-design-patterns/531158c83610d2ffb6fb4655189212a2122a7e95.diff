[+++ b/monostate/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/monostate/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, +    loadBalancer1.serverRequest(new Request("Hello"));, +    loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, +    loadBalancer1.serverRequest(new Request("Hello"));, +    loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, +  public void serverRequest(Request request) {, +++ b/monostate/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, +    loadBalancer1.serverRequest(new Request("Hello"));, +    loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, +  public void serverRequest(Request request) {, +++ b/monostate/src/main/java/com/iluwatar/monostate/Server.java, +  public void serve(Request request) {, +++ b/monostate/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, +    loadBalancer1.serverRequest(new Request("Hello"));, +    loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, +  public void serverRequest(Request request) {, +++ b/monostate/src/main/java/com/iluwatar/monostate/Server.java, +  public void serve(Request request) {, +++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java, +++ b/monostate/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/monostate/src/main/java/com/iluwatar/monostate/App.java, +    loadBalancer1.serverRequest(new Request("Hello"));, +    loadBalancer2.serverRequest(new Request("Hello World"));, +++ b/monostate/src/main/java/com/iluwatar/monostate/LoadBalancer.java, +  public void serverRequest(Request request) {, +++ b/monostate/src/main/java/com/iluwatar/monostate/Server.java, +  public void serve(Request request) {, +++ b/monostate/src/test/java/com/iluwatar/monostate/AppTest.java, +++ b/monostate/src/test/java/com/iluwatar/monostate/LoadBalancerTest.java, +package com.iluwatar.monostate;, +, +import org.junit.Assert;, +import org.junit.Test;, +, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.verifyZeroInteractions;, +, +/**, + * Date: 12/21/15 - 12:26 PM, + *, + * @author Jeroen Meulemeester, + */, +public class LoadBalancerTest {, +, +  @Test, +  public void testSameStateAmongstAllInstances() {, +    final LoadBalancer firstBalancer = new LoadBalancer();, +    final LoadBalancer secondBalancer = new LoadBalancer();, +    firstBalancer.addServer(new Server("localhost", 8085, 6));, +    // Both should have the same number of servers., +    Assert.assertTrue(firstBalancer.getNoOfServers() == secondBalancer.getNoOfServers());, +    // Both Should have the same LastServedId, +    Assert.assertTrue(firstBalancer.getLastServedId() == secondBalancer.getLastServedId());, +  }, +, +  @Test, +  public void testServe() {, +    final Server server = mock(Server.class);]