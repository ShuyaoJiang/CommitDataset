[+++ b/bridge/README.md, +Decouple an abstraction from its implementation so that the two can vary independently., +## Explanation, +, +Real world example, +, +> Consider you have a weapon with different enchantments and you are supposed to allow mixing different weapons with different enchantments. What would you do? Create multiple copies of each of the weapons for each of the enchantments or would you just create separate enchantment and set it for the weapon as needed? Bridge pattern allows you to do the second., +, +In Plain Words, +, +> Bridge pattern is about preferring composition over inheritance. Implementation details are pushed from a hierarchy to another object with a separate hierarchy., +, +Wikipedia says, +, +> The bridge pattern is a design pattern used in software engineering that is meant to "decouple an abstraction from its implementation so that the two can vary independently", +, +**Programmatic Example**, +, +Translating our weapon example from above. Here we have the `Weapon` hierarchy, +, +```, +public interface Weapon {, +  void wield();, +  void swing();, +  void unwield();, +  Enchantment getEnchantment();, +}, +, +public class Sword implements Weapon {, +, +  private final Enchantment enchantment;, +, +  public Sword(Enchantment enchantment) {, +    this.enchantment = enchantment;, +  }, +, +  @Override, +  public void wield() {, +    LOGGER.info("The sword is wielded.");, +    enchantment.onActivate();, +  }, +, +  @Override, +  public void swing() {, +    LOGGER.info("The sword is swinged.");, +    enchantment.apply();, +  }, +, +  @Override, +  public void unwield() {, +    LOGGER.info("The sword is unwielded.");, +    enchantment.onDeactivate();, +  }, +, +  @Override, +  public Enchantment getEnchantment() {, +    return enchantment;, +  }, +}, +, +public class Hammer implements Weapon {, +, +  private final Enchantment enchantment;, +, +  public Hammer(Enchantment enchantment) {, +    this.enchantment = enchantment;, +  }, +, +  @Override, +  public void wield() {, +    LOGGER.info("The hammer is wielded.");, +    enchantment.onActivate();, +  }, +, +  @Override, +  public void swing() {, +    LOGGER.info("The hammer is swinged.");, +    enchantment.apply();, +  }, +, +  @Override, +  public void unwield() {, +    LOGGER.info("The hammer is unwielded.");, +    enchantment.onDeactivate();, +  }, +, +  @Override, +  public Enchantment getEnchantment() {, +    return enchantment;, +  }, +}, +```, +, +And the separate enchantment hierarchy, +, +```, +public interface Enchantment {, +  void onActivate();, +  void apply();, +  void onDeactivate();]