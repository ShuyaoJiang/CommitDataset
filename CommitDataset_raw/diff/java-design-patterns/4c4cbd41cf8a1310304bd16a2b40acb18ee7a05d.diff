[+++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java, +/**, + * <p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>, + * on the returned Trampoline as long as the concrete instance returned is {@link #more(Trampoline)},, + * stopping once the returned instance is {@link #done(Object)}.</p>, + * <p>Essential we convert looping via recursion into iteration,, + * the key enabling mechanism is the fact that {@link #more(Trampoline)} is a lazy operation.</p>, + *, + * @param <T> is  type for returning result., +++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java, +/**, + * <p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>, + * on the returned Trampoline as long as the concrete instance returned is {@link #more(Trampoline)},, + * stopping once the returned instance is {@link #done(Object)}.</p>, + * <p>Essential we convert looping via recursion into iteration,, + * the key enabling mechanism is the fact that {@link #more(Trampoline)} is a lazy operation.</p>, + *, + * @param <T> is  type for returning result., +++ b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java, +, +  /**, +   * Main program for showing pattern. It does loop with factorial function., +   * */, +   */, +    if (times == 0) {, +    } else {, +  }, +++ b/trampoline/src/main/java/com/iluwatar/trampoline/Trampoline.java, +/**, + * <p>Trampoline pattern allows to define recursive algorithms by iterative loop </p>, + * on the returned Trampoline as long as the concrete instance returned is {@link #more(Trampoline)},, + * stopping once the returned instance is {@link #done(Object)}.</p>, + * <p>Essential we convert looping via recursion into iteration,, + * the key enabling mechanism is the fact that {@link #more(Trampoline)} is a lazy operation.</p>, + *, + * @param <T> is  type for returning result., +++ b/trampoline/src/main/java/com/iluwatar/trampoline/TrampolineApp.java, +, +  /**, +   * Main program for showing pattern. It does loop with factorial function., +   * */, +   */, +    if (times == 0) {, +    } else {, +  }, +++ b/trampoline/src/test/java/com/iluwatar/trampoline/TrampolineAppTest.java, +, +/**, + * Test for trampoline pattern., + * */]