[+++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + * object. This example uses the object adapter approach., + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, + * {@link GoblinGlider}) into a suitable one expected by the client ({@link GnomeEngineeringManager}, + * )., +   * , +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + * object. This example uses the object adapter approach., + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, + * {@link GoblinGlider}) into a suitable one expected by the client ({@link GnomeEngineeringManager}, + * )., +   * , +++ b/adapter/src/main/java/com/iluwatar/adapter/Engineer.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + * object. This example uses the object adapter approach., + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, + * {@link GoblinGlider}) into a suitable one expected by the client ({@link GnomeEngineeringManager}, + * )., +   * , +++ b/adapter/src/main/java/com/iluwatar/adapter/Engineer.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java, + * Adapter class. Adapts the interface of the device ({@link GoblinGlider}) into {@link Engineer}, + * interface expected by the client ({@link GnomeEngineeringManager})., +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + * object. This example uses the object adapter approach., + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, + * {@link GoblinGlider}) into a suitable one expected by the client ({@link GnomeEngineeringManager}, + * )., +   * , +++ b/adapter/src/main/java/com/iluwatar/adapter/Engineer.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java, + * Adapter class. Adapts the interface of the device ({@link GoblinGlider}) into {@link Engineer}, + * interface expected by the client ({@link GnomeEngineeringManager})., +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + * object. This example uses the object adapter approach., + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, + * {@link GoblinGlider}) into a suitable one expected by the client ({@link GnomeEngineeringManager}, + * )., +   * , +++ b/adapter/src/main/java/com/iluwatar/adapter/Engineer.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java, + * Adapter class. Adapts the interface of the device ({@link GoblinGlider}) into {@link Engineer}, + * interface expected by the client ({@link GnomeEngineeringManager})., +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/GoblinGlider.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + * object. This example uses the object adapter approach., + * The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, + * {@link GoblinGlider}) into a suitable one expected by the client ({@link GnomeEngineeringManager}, + * )., +   * , +++ b/adapter/src/main/java/com/iluwatar/adapter/Engineer.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineer.java, + * Adapter class. Adapts the interface of the device ({@link GoblinGlider}) into {@link Engineer}, + * interface expected by the client ({@link GnomeEngineeringManager})., +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java, +++ b/adapter/src/main/java/com/iluwatar/adapter/GoblinGlider.java, +++ b/adapter/src/test/java/com/iluwatar/adapter/AppTest.java]