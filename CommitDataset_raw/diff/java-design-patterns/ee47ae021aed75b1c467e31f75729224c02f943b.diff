[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + * a given iterator. Does not support consecutive hasNext() calls., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + * a given iterator. Does not support consecutive hasNext() calls., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, +                public int stopIndex;, +                public int totalElementsCount;, +                private List<TYPE> list;, +                private int currentIndex = 0;, +                    initialize();, +, +                private void initialize() {, +                    if(list == null) {, +                       list = new ArrayList<>();, +                        Iterator<TYPE> newIterator = iterable.iterator();, +                        while(newIterator.hasNext()) {, +                            list.add(newIterator.next());, +                        }, +, +                        totalElementsCount = list.size();, +                        stopIndex = totalElementsCount - count;, +                    }, +                }, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, + * a given iterator. Does not support consecutive hasNext() calls., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, +                public int stopIndex;, +                public int totalElementsCount;, +                private List<TYPE> list;, +                private int currentIndex = 0;, +                    initialize();, +, +                private void initialize() {, +                    if(list == null) {, +                       list = new ArrayList<>();, +                        Iterator<TYPE> newIterator = iterable.iterator();, +                        while(newIterator.hasNext()) {, +                            list.add(newIterator.next());, +                        }, +, +                        totalElementsCount = list.size();, +                        stopIndex = totalElementsCount - count;, +                    }, +                }, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/simple/SimpleFluentIterable.java, + * This implementation would be costly to be utilized in real applications.]