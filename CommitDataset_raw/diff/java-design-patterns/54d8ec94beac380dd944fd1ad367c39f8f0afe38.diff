[+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters inside the, + * {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being displayed in the, + * {@link Target}., +public class Client extends JFrame { // NOSONAR, +  private transient FilterManager filterManager;, +    clearButton.addActionListener(e -> {, +    processButton.addActionListener(e -> {, +      Order order = new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(), jtFields[2].getText(),, +          jtAreas[1].getText());, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters inside the, + * {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being displayed in the, + * {@link Target}., +public class Client extends JFrame { // NOSONAR, +  private transient FilterManager filterManager;, +    clearButton.addActionListener(e -> {, +    processButton.addActionListener(e -> {, +      Order order = new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(), jtFields[2].getText(),, +          jtAreas[1].getText());, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters inside the, + * {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being displayed in the, + * {@link Target}., +public class Client extends JFrame { // NOSONAR, +  private transient FilterManager filterManager;, +    clearButton.addActionListener(e -> {, +    processButton.addActionListener(e -> {, +      Order order = new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(), jtFields[2].getText(),, +          jtAreas[1].getText());, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java, +  private String orderItem;, +    this.orderItem = order;, +  public String getOrderItem() {, +    return orderItem;, +  public void setOrderItem(String order) {, +    this.orderItem = order;, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters inside the, + * {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being displayed in the, + * {@link Target}., +public class Client extends JFrame { // NOSONAR, +  private transient FilterManager filterManager;, +    clearButton.addActionListener(e -> {, +    processButton.addActionListener(e -> {, +      Order order = new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(), jtFields[2].getText(),, +          jtAreas[1].getText());, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java, +  private String orderItem;, +    this.orderItem = order;, +  public String getOrderItem() {, +    return orderItem;, +  public void setOrderItem(String order) {, +    this.orderItem = order;, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/OrderFilter.java, +    if (order.getOrderItem() == null || order.getOrderItem().isEmpty()) {, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters inside the, + * {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being displayed in the, + * {@link Target}., +public class Client extends JFrame { // NOSONAR, +  private transient FilterManager filterManager;, +    clearButton.addActionListener(e -> {, +    processButton.addActionListener(e -> {, +      Order order = new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(), jtFields[2].getText(),, +          jtAreas[1].getText());, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java, +  private String orderItem;, +    this.orderItem = order;, +  public String getOrderItem() {, +    return orderItem;, +  public void setOrderItem(String order) {, +    this.orderItem = order;, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/OrderFilter.java, +    if (order.getOrderItem() == null || order.getOrderItem().isEmpty()) {, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Target.java, +public class Target extends JFrame { //NOSONAR, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, + * The Client class is responsible for handling the input and running them through filters inside the, + * {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being displayed in the, + * {@link Target}., +public class Client extends JFrame { // NOSONAR, +  private transient FilterManager filterManager;, +    clearButton.addActionListener(e -> {, +    processButton.addActionListener(e -> {, +      Order order = new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(), jtFields[2].getText(),, +          jtAreas[1].getText());, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java, +  private String orderItem;]