[+++ /dev/null, +++ /dev/null, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +, +    washingMachineState = WashingMachineState.ENABLED;, +    try {, +      Thread.sleep(50);, +    } catch (InterruptedException ie) {, +      ie.printStackTrace();, +    }, +    endOfWashing();, +++ /dev/null, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +, +    washingMachineState = WashingMachineState.ENABLED;, +    try {, +      Thread.sleep(50);, +    } catch (InterruptedException ie) {, +      ie.printStackTrace();, +    }, +    endOfWashing();, +++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java, +import org.junit.jupiter.api.Disabled;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +  private volatile WashingMachineState machineStateGlobal;, +  @Disabled, +  public void wash() throws Exception {, +    WashingMachine washingMachine = new WashingMachine();, +    ExecutorService executorService = Executors.newFixedThreadPool(2);, +    executorService.execute(washingMachine::wash);, +    executorService.execute(() -> {, +      machineStateGlobal = washingMachine.getWashingMachineState();, +    });, +    executorService.shutdown();, +    try {, +      executorService.awaitTermination(10, TimeUnit.SECONDS);, +    } catch (InterruptedException ie) {, +      ie.printStackTrace();, +    }, +  public void endOfWashing() throws Exception {, +++ /dev/null, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +, +    washingMachineState = WashingMachineState.ENABLED;, +    try {, +      Thread.sleep(50);, +    } catch (InterruptedException ie) {, +      ie.printStackTrace();, +    }, +    endOfWashing();, +++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java, +import org.junit.jupiter.api.Disabled;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +  private volatile WashingMachineState machineStateGlobal;, +  @Disabled, +  public void wash() throws Exception {, +    WashingMachine washingMachine = new WashingMachine();, +    ExecutorService executorService = Executors.newFixedThreadPool(2);, +    executorService.execute(washingMachine::wash);, +    executorService.execute(() -> {, +      machineStateGlobal = washingMachine.getWashingMachineState();, +    });, +    executorService.shutdown();, +    try {, +      executorService.awaitTermination(10, TimeUnit.SECONDS);, +    } catch (InterruptedException ie) {, +      ie.printStackTrace();, +    }, +  public void endOfWashing() throws Exception {, +++ b/decorator/README.md, +Troll clubbedTroll = new ClubbedTroll(troll);, +clubbedTroll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbedTroll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ /dev/null, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +, +    washingMachineState = WashingMachineState.ENABLED;, +    try {, +      Thread.sleep(50);, +    } catch (InterruptedException ie) {, +      ie.printStackTrace();, +    }, +    endOfWashing();, +++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java, +import org.junit.jupiter.api.Disabled;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +  private volatile WashingMachineState machineStateGlobal;, +  @Disabled, +  public void wash() throws Exception {, +    WashingMachine washingMachine = new WashingMachine();, +    ExecutorService executorService = Executors.newFixedThreadPool(2);, +    executorService.execute(washingMachine::wash);, +    executorService.execute(() -> {, +      machineStateGlobal = washingMachine.getWashingMachineState();, +    });, +    executorService.shutdown();, +    try {]