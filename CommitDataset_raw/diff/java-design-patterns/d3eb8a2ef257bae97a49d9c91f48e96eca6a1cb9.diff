[+++ b/value-object/index.md, +* [java.util.Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), +* [java.time.LocalDate](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html), +++ b/value-object/index.md, +* [java.util.Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), +* [java.time.LocalDate](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html), +++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, + * App Class., +  /**, +   * main method., +   */, +    HeroStat statA = HeroStat.valueOf(10, 5, 0);, +    HeroStat statB = HeroStat.valueOf(5, 1, 8);, +, +    System.out.println(statA.toString());, +    // When using Value Objects do not use ==, only compare using equals()., +    System.out.println("is statA and statB equal : " + statA.equals(statB));, +++ b/value-object/index.md, +* [java.util.Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), +* [java.time.LocalDate](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html), +++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, + * App Class., +  /**, +   * main method., +   */, +    HeroStat statA = HeroStat.valueOf(10, 5, 0);, +    HeroStat statB = HeroStat.valueOf(5, 1, 8);, +, +    System.out.println(statA.toString());, +    // When using Value Objects do not use ==, only compare using equals()., +    System.out.println("is statA and statB equal : " + statA.equals(statB));, +++ b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java, + * HeroStat is a Value Object. following rules are from Stephen Colebourne's term VALJO(not the, + * entire rule set) from : http://blog.joda.org/2014/03/valjos-value-java-objects.html<br>, + * Value Objects must override equals(), hashCode() to check the equality with values. <br>, + * Value Objects should be immutable so declare members final. Obtain instances by static factory, + * methods. <br>, + * The elements of the state must be other values, including primitive types.<br>, + * Provide methods, typically simple getters, to get the elements of the state.<br>, + * {@link http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html}, +  // Stats for a hero, +  // Static factory method to create new instances., +   * Recommended to provide a static factory method capable of creating an instance from the formal, +  // The clone() method should not be public, +++ b/value-object/index.md, +* [java.util.Optional](https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html), +* [java.time.LocalDate](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html), +++ b/value-object/src/main/java/com/iluwatar/value/object/App.java, + * App Class., +  /**, +   * main method., +   */, +    HeroStat statA = HeroStat.valueOf(10, 5, 0);, +    HeroStat statB = HeroStat.valueOf(5, 1, 8);, +, +    System.out.println(statA.toString());, +    // When using Value Objects do not use ==, only compare using equals()., +    System.out.println("is statA and statB equal : " + statA.equals(statB));, +++ b/value-object/src/main/java/com/iluwatar/value/object/HeroStat.java, + * HeroStat is a Value Object. following rules are from Stephen Colebourne's term VALJO(not the, + * entire rule set) from : http://blog.joda.org/2014/03/valjos-value-java-objects.html<br>, + * Value Objects must override equals(), hashCode() to check the equality with values. <br>, + * Value Objects should be immutable so declare members final. Obtain instances by static factory, + * methods. <br>, + * The elements of the state must be other values, including primitive types.<br>, + * Provide methods, typically simple getters, to get the elements of the state.<br>, + * {@link http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html}, +  // Stats for a hero, +  // Static factory method to create new instances., +   * Recommended to provide a static factory method capable of creating an instance from the formal, +  // The clone() method should not be public, +++ b/value-object/src/test/java/com/iluwatar/value/object/HeroStatTest.java, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.CoreMatchers.not;, +, +import static org.junit.Assert.assertThat;, +, +   * , +  /**, +   * The toString() for two equal values must be the same. For two non-equal values it must be, +   * different., +   */, +  @Test, +  public void testToString() {, +, +    HeroStat heroStatA = HeroStat.valueOf(3, 9, 2);, +    HeroStat heroStatB = HeroStat.valueOf(3, 9, 2);, +    HeroStat heroStatC = HeroStat.valueOf(3, 9, 8);, +, +    assertThat(heroStatA.toString(), is(heroStatB.toString()));, +    assertThat(heroStatA.toString(), is(not(heroStatC.toString())));, +, +, +  }, +]