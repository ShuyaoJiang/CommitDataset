[+++ b/double-checked-locking/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/double-checked-locking/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java, +import java.util.Collections;, +, +  /**, +   * Get all the items in the inventory, +   *, +   * @return All the items of the inventory, as an unmodifiable list, +   */, +  public final List<Item> getItems() {, +    return Collections.unmodifiableList(items);, +  }, +, +++ b/double-checked-locking/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/double-checked-locking/src/main/java/com/iluwatar/doublechecked/locking/Inventory.java, +import java.util.Collections;, +, +  /**, +   * Get all the items in the inventory, +   *, +   * @return All the items of the inventory, as an unmodifiable list, +   */, +  public final List<Item> getItems() {, +    return Collections.unmodifiableList(items);, +  }, +, +++ b/double-checked-locking/src/test/java/com/iluwatar/doublechecked/locking/InventoryTest.java, +package com.iluwatar.doublechecked.locking;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.ArgumentCaptor;, +, +import java.io.PrintStream;, +import java.util.List;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +, +import static junit.framework.Assert.assertTrue;, +import static junit.framework.TestCase.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +, +/**, + * Date: 12/10/15 - 9:34 PM, + *, + * @author Jeroen Meulemeester, + */, +public class InventoryTest {, +, +  /**, +   * The mocked standard out {@link PrintStream}, used to verify a steady increasing size of the, +   * {@link Inventory} while adding items from multiple threads concurrently, +   */, +  private final PrintStream stdOutMock = mock(PrintStream.class);, +, +  /**, +   * Keep the original std-out so it can be restored after the test, +   */, +  private final PrintStream stdOutOrig = System.out;, +, +  /**, +   * Inject the mocked std-out {@link PrintStream} into the {@link System} class before each test, +   */, +  @Before, +  public void setUp() {, +    System.setOut(this.stdOutMock);, +  }, +, +  /**, +   * Removed the mocked std-out {@link PrintStream} again from the {@link System} class, +   */, +  @After, +  public void tearDown() {, +    System.setOut(this.stdOutOrig);, +  }, +, +  /**, +   * The number of threads used to stress test the locking of the {@link Inventory#addItem(Item)}]