[+++ b/service-layer/src/main/java/com/iluwatar/app/App.java, +import java.util.List;, +, + * Service layer defines an application's boundary with a layer of services that establishes , + * a set of available operations and coordinates the application's response in each operation., + * Enterprise applications typically require different kinds of interfaces to the data , + * they store and the logic they implement: data loaders, user interfaces, integration gateways, , + * and others. Despite their different purposes, these interfaces often need common interactions , + * with the application to access and manipulate its data and invoke its business logic. The , + * interactions may be complex, involving transactions across multiple resources and the , + * coordination of several responses to an action. Encoding the logic of the interactions , + * separately in each interface causes a lot of duplication., + * The example application demonstrates interactions between a client (App) and a service , + * (MagicService). The service is implemented with 3-layer architecture (entity, dao, service)., + * For persistence the example uses in-memory H2 database which is populated on each application, + * startup., +    	// populate the in-memory database, +    	// query the data using the service, +    	// spells, +    	// spellbooks, +    	// wizards, +    	System.out.println("Find wizards with spellbook 'Book of Idores'");, +    	List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");, +    	for (Wizard w: wizardsWithSpellbook) {, +    		System.out.println(String.format("%s has 'Book of Idores'", w.getName()));, +    	}, +    	System.out.println("Find wizards with spell 'Fireball'");, +    	List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");, +    	for (Wizard w: wizardsWithSpell) {, +    		System.out.println(String.format("%s has 'Fireball'", w.getName()));, +    	}, +++ b/service-layer/src/main/java/com/iluwatar/app/App.java, +import java.util.List;, +, + * Service layer defines an application's boundary with a layer of services that establishes , + * a set of available operations and coordinates the application's response in each operation., + * Enterprise applications typically require different kinds of interfaces to the data , + * they store and the logic they implement: data loaders, user interfaces, integration gateways, , + * and others. Despite their different purposes, these interfaces often need common interactions , + * with the application to access and manipulate its data and invoke its business logic. The , + * interactions may be complex, involving transactions across multiple resources and the , + * coordination of several responses to an action. Encoding the logic of the interactions , + * separately in each interface causes a lot of duplication., + * The example application demonstrates interactions between a client (App) and a service , + * (MagicService). The service is implemented with 3-layer architecture (entity, dao, service)., + * For persistence the example uses in-memory H2 database which is populated on each application, + * startup., +    	// populate the in-memory database, +    	// query the data using the service, +    	// spells, +    	// spellbooks, +    	// wizards, +    	System.out.println("Find wizards with spellbook 'Book of Idores'");, +    	List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");, +    	for (Wizard w: wizardsWithSpellbook) {, +    		System.out.println(String.format("%s has 'Book of Idores'", w.getName()));, +    	}, +    	System.out.println("Find wizards with spell 'Fireball'");, +    	List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");, +    	for (Wizard w: wizardsWithSpell) {, +    		System.out.println(String.format("%s has 'Fireball'", w.getName()));, +    	}, +++ b/service-layer/src/main/java/com/iluwatar/common/BaseEntity.java, +/**, + * , + * Base class for entities., + *, + */, +++ b/service-layer/src/main/java/com/iluwatar/app/App.java, +import java.util.List;, +, + * Service layer defines an application's boundary with a layer of services that establishes , + * a set of available operations and coordinates the application's response in each operation., + * Enterprise applications typically require different kinds of interfaces to the data , + * they store and the logic they implement: data loaders, user interfaces, integration gateways, , + * and others. Despite their different purposes, these interfaces often need common interactions , + * with the application to access and manipulate its data and invoke its business logic. The , + * interactions may be complex, involving transactions across multiple resources and the , + * coordination of several responses to an action. Encoding the logic of the interactions , + * separately in each interface causes a lot of duplication., + * The example application demonstrates interactions between a client (App) and a service , + * (MagicService). The service is implemented with 3-layer architecture (entity, dao, service)., + * For persistence the example uses in-memory H2 database which is populated on each application, + * startup., +    	// populate the in-memory database, +    	// query the data using the service, +    	// spells, +    	// spellbooks, +    	// wizards, +    	System.out.println("Find wizards with spellbook 'Book of Idores'");, +    	List<Wizard> wizardsWithSpellbook = service.findWizardsWithSpellbook("Book of Idores");, +    	for (Wizard w: wizardsWithSpellbook) {, +    		System.out.println(String.format("%s has 'Book of Idores'", w.getName()));, +    	}, +    	System.out.println("Find wizards with spell 'Fireball'");, +    	List<Wizard> wizardsWithSpell = service.findWizardsWithSpell("Fireball");, +    	for (Wizard w: wizardsWithSpell) {, +    		System.out.println(String.format("%s has 'Fireball'", w.getName()));, +    	}, +++ b/service-layer/src/main/java/com/iluwatar/common/BaseEntity.java]