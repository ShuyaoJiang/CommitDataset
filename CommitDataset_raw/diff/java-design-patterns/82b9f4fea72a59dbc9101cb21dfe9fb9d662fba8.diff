[+++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, +    if (available.isEmpty()) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, +    if (available.isEmpty()) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, +      while (!Thread.currentThread().isInterrupted()) {, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, +    if (available.isEmpty()) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, +      while (!Thread.currentThread().isInterrupted()) {, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java, +import org.hibernate.SessionFactory;, +  /*, +   * Making this getSessionFactory() instead of getSession() so that it is the responsibility, +   * of the caller to open as well as close the session (prevents potential resource leak)., +   */, +  protected SessionFactory getSessionFactory() {, +    return HibernateUtil.getSessionFactory();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, +    if (available.isEmpty()) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, +      while (!Thread.currentThread().isInterrupted()) {, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java, +import org.hibernate.SessionFactory;, +  /*, +   * Making this getSessionFactory() instead of getSession() so that it is the responsibility, +   * of the caller to open as well as close the session (prevents potential resource leak)., +   */, +  protected SessionFactory getSessionFactory() {, +    return HibernateUtil.getSessionFactory();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/spell/SpellDaoImpl.java, +    Session session = getSessionFactory().openSession();, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, +    if (available.isEmpty()) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, +      while (!Thread.currentThread().isInterrupted()) {, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java, +import org.hibernate.SessionFactory;, +  /*, +   * Making this getSessionFactory() instead of getSession() so that it is the responsibility, +   * of the caller to open as well as close the session (prevents potential resource leak)., +   */, +  protected SessionFactory getSessionFactory() {, +    return HibernateUtil.getSessionFactory();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/spell/SpellDaoImpl.java, +    Session session = getSessionFactory().openSession();, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/spellbook/SpellbookDaoImpl.java, +    Session session = getSessionFactory().openSession();, +++ b/model-view-presenter/src/main/java/com/iluwatar/model/view/presenter/FileLoader.java, +    try (BufferedReader br = new BufferedReader(new FileReader(new File(this.fileName)))) {, +++ b/object-pool/src/main/java/com/iluwatar/object/pool/ObjectPool.java, +    if (available.isEmpty()) {, +++ b/queue-load-leveling/src/main/java/com/iluwatar/queue/load/leveling/ServiceExecutor.java, +      while (!Thread.currentThread().isInterrupted()) {, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/DaoBaseImpl.java, +import org.hibernate.SessionFactory;, +  /*, +   * Making this getSessionFactory() instead of getSession() so that it is the responsibility, +   * of the caller to open as well as close the session (prevents potential resource leak)., +   */, +  protected SessionFactory getSessionFactory() {, +    return HibernateUtil.getSessionFactory();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +    Session session = getSessionFactory().openSession();, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/spell/SpellDaoImpl.java, +    Session session = getSessionFactory().openSession();, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/spellbook/SpellbookDaoImpl.java, +    Session session = getSessionFactory().openSession();, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/wizard/WizardDaoImpl.java, +    Session session = getSessionFactory().openSession();]