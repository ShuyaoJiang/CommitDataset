[+++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +import com.iluwatar.ambassador.util.RandomProvider;, +  static final int THRESHOLD = 200;, +  private final RandomProvider randomProvider;, +  private RemoteService() {, +    this(Math::random);, +  }, +   * This constuctor is used for testing purposes only., +   */, +  RemoteService(RandomProvider randomProvider) {, +    this.randomProvider = randomProvider;, +  }, +  /**, +   * @return if waitTime is less than {@link RemoteService#THRESHOLD}, it returns value * 10,, +   *     otherwise {@link RemoteServiceInterface#FAILURE}., +    long waitTime = (long) Math.floor(randomProvider.random() * 1000);, +    return waitTime <= THRESHOLD ? value * 10 : FAILURE;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +import com.iluwatar.ambassador.util.RandomProvider;, +  static final int THRESHOLD = 200;, +  private final RandomProvider randomProvider;, +  private RemoteService() {, +    this(Math::random);, +  }, +   * This constuctor is used for testing purposes only., +   */, +  RemoteService(RandomProvider randomProvider) {, +    this.randomProvider = randomProvider;, +  }, +  /**, +   * @return if waitTime is less than {@link RemoteService#THRESHOLD}, it returns value * 10,, +   *     otherwise {@link RemoteServiceInterface#FAILURE}., +    long waitTime = (long) Math.floor(randomProvider.random() * 1000);, +    return waitTime <= THRESHOLD ? value * 10 : FAILURE;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java, +  int FAILURE = -1;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +import com.iluwatar.ambassador.util.RandomProvider;, +  static final int THRESHOLD = 200;, +  private final RandomProvider randomProvider;, +  private RemoteService() {, +    this(Math::random);, +  }, +   * This constuctor is used for testing purposes only., +   */, +  RemoteService(RandomProvider randomProvider) {, +    this.randomProvider = randomProvider;, +  }, +  /**, +   * @return if waitTime is less than {@link RemoteService#THRESHOLD}, it returns value * 10,, +   *     otherwise {@link RemoteServiceInterface#FAILURE}., +    long waitTime = (long) Math.floor(randomProvider.random() * 1000);, +    return waitTime <= THRESHOLD ? value * 10 : FAILURE;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java, +  int FAILURE = -1;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java, +    long result = FAILURE;, +        return FAILURE;, +      if ((result = checkLatency(value)) == FAILURE) {, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +import com.iluwatar.ambassador.util.RandomProvider;, +  static final int THRESHOLD = 200;, +  private final RandomProvider randomProvider;, +  private RemoteService() {, +    this(Math::random);, +  }, +   * This constuctor is used for testing purposes only., +   */, +  RemoteService(RandomProvider randomProvider) {, +    this.randomProvider = randomProvider;, +  }, +  /**, +   * @return if waitTime is less than {@link RemoteService#THRESHOLD}, it returns value * 10,, +   *     otherwise {@link RemoteServiceInterface#FAILURE}., +    long waitTime = (long) Math.floor(randomProvider.random() * 1000);, +    return waitTime <= THRESHOLD ? value * 10 : FAILURE;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteServiceInterface.java, +  int FAILURE = -1;, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/ServiceAmbassador.java, +    long result = FAILURE;, +        return FAILURE;, +      if ((result = checkLatency(value)) == FAILURE) {, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/util/RandomProvider.java, +package com.iluwatar.ambassador.util;, +, +/**, + * An interface for randomness. Useful for testing purposes., + */, +public interface RandomProvider {, +  double random();, +}, +++ b/ambassador/src/main/java/com/iluwatar/ambassador/RemoteService.java, +import com.iluwatar.ambassador.util.RandomProvider;, +  static final int THRESHOLD = 200;, +  private final RandomProvider randomProvider;, +  private RemoteService() {, +    this(Math::random);, +  }, +   * This constuctor is used for testing purposes only., +   */]