[+++ b/monitor-object/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.20.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>monitor-object</artifactId>, +  <name>monitor-object</name>, +  <dependencies>, +    <dependency>, +      <groupId>org.junit.jupiter</groupId>, +      <artifactId>junit-jupiter-api</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.junit.jupiter</groupId>, +      <artifactId>junit-jupiter-engine</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/monitor-object/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.20.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>monitor-object</artifactId>, +  <name>monitor-object</name>, +  <dependencies>, +    <dependency>, +      <groupId>org.junit.jupiter</groupId>, +      <artifactId>junit-jupiter-api</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +      <groupId>org.junit.jupiter</groupId>, +      <artifactId>junit-jupiter-engine</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/monitor-object/src/main/java/com/iluwatar/monitor/AbstractMonitor.java, +package com.iluwatar.monitor;, +, +import java.util.ArrayList;, +, +/**, + * A class for Monitors. Monitors provide coordination of concurrent threads., + * Each Monitor protects some resource, usually data. At each point in time a, + * monitor object is occupied by at most one thread., + */, +public abstract class AbstractMonitor {, +  final Semaphore entrance = new Semaphore(1);, +  volatile Thread occupant = null;, +  private final ArrayList<MonitorListener> listOfListeners = new ArrayList<>();, +  private final String name;, +, +  public String getName() {, +    return name;, +  }, +, +  protected AbstractMonitor() {, +    this(null);, +  }, +, +  protected AbstractMonitor(String name) {, +    this.name = name;, +  }, +, +  /**, +   * The invariant. The default implementation always returns true. This method, +   * should be overridden if at all possible with the strongest economically, +   * evaluable invariant., +   */, +  protected boolean invariant() {, +    return true;, +  }, +, +  /**, +   * Enter the monitor. Any thread calling this method is delayed until the, +   * monitor is unoccupied. Upon returning from this method, the monitor is, +   * considered occupied. A thread must not attempt to enter a Monitor it is, +   * already in., +   */, +  protected void enter() {, +    notifyCallEnter();, +    entrance.acquire();, +    // The following assertion should never trip!, +    Assertion.check(occupant == null, "2 threads in one monitor");, +    occupant = Thread.currentThread();, +    notifyReturnFromEnter();]