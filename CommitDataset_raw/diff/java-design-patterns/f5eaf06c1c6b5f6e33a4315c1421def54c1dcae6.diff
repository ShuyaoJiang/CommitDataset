[+++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java, +package com.iluwatar.balking;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * An interface to simulate delay while executing some work., + */, +public interface DelayProvider {, +  void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);, +}, +++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java, +package com.iluwatar.balking;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * An interface to simulate delay while executing some work., + */, +public interface DelayProvider {, +  void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);, +}, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +import java.util.concurrent.TimeUnit;, +, +  private final DelayProvider delayProvider;, +  /**, +   * Creates a new instance of WashingMachine, +   */, +    this((interval, timeUnit, task) -> {, +      try {, +        Thread.sleep(timeUnit.toMillis(interval));, +      } catch (InterruptedException ie) {, +        ie.printStackTrace();, +      }, +      task.run();, +    });, +  }, +, +  /**, +   * Creates a new instance of WashingMachine using provided delayProvider. This constructor is used only for, +   * unit testing purposes., +   */, +  public WashingMachine(DelayProvider delayProvider) {, +    this.delayProvider = delayProvider;, +    this.washingMachineState = WashingMachineState.ENABLED;, +, +    this.delayProvider.executeAfterDelay(50, TimeUnit.MILLISECONDS, this::endOfWashing);, +++ b/balking/src/main/java/com/iluwatar/balking/DelayProvider.java, +package com.iluwatar.balking;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + * An interface to simulate delay while executing some work., + */, +public interface DelayProvider {, +  void executeAfterDelay(long interval, TimeUnit timeUnit, Runnable task);, +}, +++ b/balking/src/main/java/com/iluwatar/balking/WashingMachine.java, +import java.util.concurrent.TimeUnit;, +, +  private final DelayProvider delayProvider;, +  /**, +   * Creates a new instance of WashingMachine, +   */, +    this((interval, timeUnit, task) -> {, +      try {, +        Thread.sleep(timeUnit.toMillis(interval));, +      } catch (InterruptedException ie) {, +        ie.printStackTrace();, +      }, +      task.run();, +    });, +  }, +, +  /**, +   * Creates a new instance of WashingMachine using provided delayProvider. This constructor is used only for, +   * unit testing purposes., +   */, +  public WashingMachine(DelayProvider delayProvider) {, +    this.delayProvider = delayProvider;, +    this.washingMachineState = WashingMachineState.ENABLED;, +, +    this.delayProvider.executeAfterDelay(50, TimeUnit.MILLISECONDS, this::endOfWashing);, +++ b/balking/src/test/java/com/iluwatar/balking/WashingMachineTest.java, +  private FakeDelayProvider fakeDelayProvider = new FakeDelayProvider();, +  public void wash() {, +    WashingMachine washingMachine = new WashingMachine(fakeDelayProvider);, +, +    washingMachine.wash();, +, +    WashingMachineState machineStateGlobal = washingMachine.getWashingMachineState();, +, +    fakeDelayProvider.task.run();, +, +    // washing machine remains in washing state, +, +    // washing machine goes back to enabled state, +    assertEquals(WashingMachineState.ENABLED, washingMachine.getWashingMachineState());]