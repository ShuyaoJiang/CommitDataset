[+++ b/flyweight/README.md, +## Explanation, +Real world example, +, +> Alchemist's shop has shelves full of magic potions. Many of the potions are the same so there is no need to create new object for each of them. Instead one object instance can represent multiple shelf items so memory footprint remains small., +, +In plain words, +, +> It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects., +, +Wikipedia says, +, +> In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory., +, +**Programmatic example**, +, +Translating our alchemist shop example from above. First of all we have different potion types, +, +```, +public interface Potion {, +  void drink();, +}, +, +public class HealingPotion implements Potion {, +  private static final Logger LOGGER = LoggerFactory.getLogger(HealingPotion.class);, +  @Override, +  public void drink() {, +    LOGGER.info("You feel healed. (Potion={})", System.identityHashCode(this));, +  }, +}, +, +public class HolyWaterPotion implements Potion {, +  private static final Logger LOGGER = LoggerFactory.getLogger(HolyWaterPotion.class);, +  @Override, +  public void drink() {, +    LOGGER.info("You feel blessed. (Potion={})", System.identityHashCode(this));, +  }, +}, +, +public class InvisibilityPotion implements Potion {, +  private static final Logger LOGGER = LoggerFactory.getLogger(InvisibilityPotion.class);, +  @Override, +  public void drink() {, +    LOGGER.info("You become invisible. (Potion={})", System.identityHashCode(this));, +  }, +}, +```, +, +Then the actual Flyweight object which is the factory for creating potions, +, +```, +public class PotionFactory {, +, +  private final Map<PotionType, Potion> potions;, +, +  public PotionFactory() {, +    potions = new EnumMap<>(PotionType.class);, +  }, +, +  Potion createPotion(PotionType type) {, +    Potion potion = potions.get(type);, +    if (potion == null) {, +      switch (type) {, +        case HEALING:, +          potion = new HealingPotion();, +          potions.put(type, potion);, +          break;, +        case HOLY_WATER:, +          potion = new HolyWaterPotion();, +          potions.put(type, potion);, +          break;, +        case INVISIBILITY:, +          potion = new InvisibilityPotion();, +          potions.put(type, potion);, +          break;, +        default:, +          break;, +      }, +    }, +    return potion;, +  }, +}, +```, +, +And it can be used as below, +, +```, +PotionFactory factory = new PotionFactory();, +factory.createPotion(PotionType.INVISIBILITY).drink(); // You become invisible. (Potion=6566818), +factory.createPotion(PotionType.HEALING).drink(); // You feel healed. (Potion=648129364), +factory.createPotion(PotionType.INVISIBILITY).drink(); // You become invisible. (Potion=6566818), +factory.createPotion(PotionType.HOLY_WATER).drink(); // You feel blessed. (Potion=1104106489), +factory.createPotion(PotionType.HOLY_WATER).drink(); // You feel blessed. (Potion=1104106489), +factory.createPotion(PotionType.HEALING).drink(); // You feel healed. (Potion=648129364), +```, +++ b/flyweight/README.md, +## Explanation, +Real world example, +, +> Alchemist's shop has shelves full of magic potions. Many of the potions are the same so there is no need to create new object for each of them. Instead one object instance can represent multiple shelf items so memory footprint remains small.]