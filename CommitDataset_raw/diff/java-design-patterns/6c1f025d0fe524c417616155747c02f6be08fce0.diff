[+++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +   * Test used to verify the happy path of, +   * {@link ThreadAsyncExecutor#startProcess(Callable, AsyncCallback)}, +    final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor, +        .forClass((Class) Optional.class);, +   * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable)} when a, +   * task takes a while to execute, +      fail(, +          "Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task");, +   * Test used to verify the happy path of, +   * {@link ThreadAsyncExecutor#startProcess(Callable, AsyncCallback)} when a task takes a while to, +   * execute, +      fail(, +          "Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task");, +    final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor, +        .forClass((Class) Optional.class);, +   * Test used to verify the happy path of {@link ThreadAsyncExecutor#startProcess(Callable)} when a, +   * task takes a while to execute, while waiting on the result using, +   * {@link ThreadAsyncExecutor#endProcess(AsyncResult)}, +      fail(, +          "Expected IllegalStateException when calling AsyncResult#getValue on a non-completed task");, +   * Test used to verify the behaviour of {@link ThreadAsyncExecutor#startProcess(Callable)} when, +   * the callable is 'null', +    assertNotNull("The AsyncResult should not be 'null', even though the task was 'null'.",, +        asyncResult);, +   * Test used to verify the behaviour of, +   * {@link ThreadAsyncExecutor#startProcess(Callable, AsyncCallback)} when the callable is 'null',, +   * but the asynchronous callback is provided, +    assertNotNull("The AsyncResult should not be 'null', even though the task was 'null'.",, +        asyncResult);, +    final ArgumentCaptor<Optional<Exception>> optionalCaptor = ArgumentCaptor, +        .forClass((Class) Optional.class);, +   * Test used to verify the behaviour of, +   * {@link ThreadAsyncExecutor#startProcess(Callable, AsyncCallback)} when both the callable and, +   * the asynchronous callback are 'null', +    assertNotNull(, +        "The AsyncResult should not be 'null', even though the task and callback were 'null'.",, +        asyncResult);]