[+++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();, +++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java, +		System.out.println("Perform some important activity and after call the callback method.");, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();, +++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java, +		System.out.println("Perform some important activity and after call the callback method.");, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import static org.junit.Assert.assertEquals;, + * Add a field as a counter. Every time the callback method is called increment this, + * field. Unit test checks that the field is being incremented., + * Could be done with mock objects as well where the call method call is verified., +    private Integer callingCount = 0;, +, +        Callback callback = new Callback() {, +            @Override, +            public void call() {, +                callingCount++;, +            }, +        };, +, +        Task task = new SimpleTask();, +, +        assertEquals("Initial calling count of 0", new Integer(0), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called once", new Integer(1), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called twice", new Integer(2), callingCount);, +, +++ b/README.md, +All designs should be as simple as possible. You should start with KISS, YAGNI,, +and Do The Simplest Thing That Could Possibly Work principles. Complexity and, +patterns should only be introduced when they are needed for practical, +extensibility., +, +Once you are familiar with these concepts you can start drilling down into, +patterns by any of the following approaches, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();, +++ b/callback/src/main/java/com/iluwatar/callback/SimpleTask.java, +		System.out.println("Perform some important activity and after call the callback method.");, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import static org.junit.Assert.assertEquals;, + * Add a field as a counter. Every time the callback method is called increment this, + * field. Unit test checks that the field is being incremented., + * Could be done with mock objects as well where the call method call is verified., +    private Integer callingCount = 0;, +, +        Callback callback = new Callback() {, +            @Override, +            public void call() {, +                callingCount++;, +            }, +        };, +, +        Task task = new SimpleTask();, +, +        assertEquals("Initial calling count of 0", new Integer(0), callingCount);, +, +        task.executeWith(callback);, +]