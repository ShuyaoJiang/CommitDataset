[+++ b/twin/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/twin/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, +    Thread.sleep(750);, +++ b/twin/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, +    Thread.sleep(750);, +++ b/twin/src/main/java/com/iluwatar/twin/BallThread.java, +      if (!isSuspended) {, +      }, +        Thread.sleep(250);, +++ b/twin/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/twin/src/main/java/com/iluwatar/twin/App.java, +    Thread.sleep(750);, +++ b/twin/src/main/java/com/iluwatar/twin/BallThread.java, +      if (!isSuspended) {, +      }, +        Thread.sleep(250);, +++ b/twin/src/test/java/com/iluwatar/twin/BallItemTest.java, +package com.iluwatar.twin;, +, +import org.junit.Test;, +import org.mockito.InOrder;, +, +import static org.mockito.Mockito.inOrder;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +, +/**, + * Date: 12/30/15 - 18:44 PM, + *, + * @author Jeroen Meulemeester, + */, +public class BallItemTest extends StdOutTest {, +, +  @Test, +  public void testClick() {, +    final BallThread ballThread = mock(BallThread.class);, +    final BallItem ballItem = new BallItem();, +    ballItem.setTwin(ballThread);, +, +    final InOrder inOrder = inOrder(ballThread);, +, +    for (int i = 0; i < 10; i++) {, +      ballItem.click();, +      inOrder.verify(ballThread).suspendMe();, +, +      ballItem.click();, +      inOrder.verify(ballThread).resumeMe();, +    }, +, +    inOrder.verifyNoMoreInteractions();, +  }, +, +  @Test, +  public void testDoDraw() {, +    final BallItem ballItem = new BallItem();, +    final BallThread ballThread = mock(BallThread.class);, +    ballItem.setTwin(ballThread);, +, +    ballItem.draw();, +    verify(getStdOutMock()).println("draw");, +    verify(getStdOutMock()).println("doDraw");, +, +    verifyNoMoreInteractions(ballThread, getStdOutMock());, +  }, +, +  @Test, +  public void testMove() {, +    final BallItem ballItem = new BallItem();, +    final BallThread ballThread = mock(BallThread.class);, +    ballItem.setTwin(ballThread);, +, +    ballItem.move();, +    verify(getStdOutMock()).println("move");, +, +    verifyNoMoreInteractions(ballThread, getStdOutMock());, +  }, +]