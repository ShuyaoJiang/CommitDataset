[+++ b/caching/src/main/java/com/iluwatar/caching/App.java, +    userAccount1 = AppManager.find("001");, +    userAccount1 = AppManager.find("001");, +    userAccount2 = AppManager.find("002");, +    userAccount2 = AppManager.find("002");, +    userAccount2 = AppManager.find("002");, +    userAccount3 = AppManager.find("003");, +    userAccount4 = AppManager.find("004");, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, +    userAccount1 = AppManager.find("001");, +    userAccount1 = AppManager.find("001");, +    userAccount2 = AppManager.find("002");, +    userAccount2 = AppManager.find("002");, +    userAccount2 = AppManager.find("002");, +    userAccount3 = AppManager.find("003");, +    userAccount4 = AppManager.find("004");, +++ b/event-aggregator/pom.xml, +		<dependency>, +			<groupId>org.mockito</groupId>, +			<artifactId>mockito-core</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/caching/src/main/java/com/iluwatar/caching/App.java, +    userAccount1 = AppManager.find("001");, +    userAccount1 = AppManager.find("001");, +    userAccount2 = AppManager.find("002");, +    userAccount2 = AppManager.find("002");, +    userAccount2 = AppManager.find("002");, +    userAccount3 = AppManager.find("003");, +    userAccount4 = AppManager.find("004");, +++ b/event-aggregator/pom.xml, +		<dependency>, +			<groupId>org.mockito</groupId>, +			<artifactId>mockito-core</artifactId>, +			<scope>test</scope>, +		</dependency>, +++ b/event-aggregator/src/test/java/com/iluwatar/event/aggregator/EventEmitterTest.java, +package com.iluwatar.event.aggregator;, +, +import org.junit.Test;, +, +import java.util.Objects;, +import java.util.function.Function;, +import java.util.function.Supplier;, +, +import static org.mockito.Matchers.eq;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.verifyZeroInteractions;, +, +/**, + * Date: 12/12/15 - 10:58 PM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class EventEmitterTest<E extends EventEmitter> {, +, +  /**, +   * Factory used to create a new instance of the test object with a default observer, +   */, +  private final Function<EventObserver, E> factoryWithDefaultObserver;, +, +  /**, +   * Factory used to create a new instance of the test object without passing a default observer, +   */, +  private final Supplier<E> factoryWithoutDefaultObserver;, +, +  /**, +   * The day of the week an event is expected, +   */, +  private final Weekday specialDay;, +, +  /**, +   * The expected event, emitted on the special day, +   */, +  private final Event event;, +, +  /**, +   * Create a new event emitter test, using the given test object factories, special day and event, +   */, +  EventEmitterTest(final Weekday specialDay, final Event event,, +                   final Function<EventObserver, E> factoryWithDefaultObserver,, +                   final Supplier<E> factoryWithoutDefaultObserver) {, +, +    this.specialDay = specialDay;, +    this.event = event;, +    this.factoryWithDefaultObserver = Objects.requireNonNull(factoryWithDefaultObserver);, +    this.factoryWithoutDefaultObserver = Objects.requireNonNull(factoryWithoutDefaultObserver);, +  }, +, +  /**, +   * Go over every day of the month, and check if the event is emitted on the given day. This test, +   * is executed twice, once without a default emitter and once with, +   */, +  @Test, +  public void testAllDays() {, +    testAllDaysWithoutDefaultObserver(specialDay, event);, +    testAllDaysWithDefaultObserver(specialDay, event);]