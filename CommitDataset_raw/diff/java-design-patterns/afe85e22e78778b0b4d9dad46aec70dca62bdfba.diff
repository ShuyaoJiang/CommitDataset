[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class , + * degenerate, + * In this example the visitor base class is {@link ModemVisitor}. The base class of the , + * visited hierarchy is {@link Modem} and has two children {@link Hayes} and {@link Zoom} , + * each one having its own visitor interface {@link Hayes} and {@link ZoomVisitor} , + * respectively. {@link ConfigureForUnixVisitor} and {@link ConfigureForDosVisitor} , + * implement each derivative's visit method only if it is required , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class , + * degenerate, + * In this example the visitor base class is {@link ModemVisitor}. The base class of the , + * visited hierarchy is {@link Modem} and has two children {@link Hayes} and {@link Zoom} , + * each one having its own visitor interface {@link Hayes} and {@link ZoomVisitor} , + * respectively. {@link ConfigureForUnixVisitor} and {@link ConfigureForDosVisitor} , + * implement each derivative's visit method only if it is required , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * CongigureForDosVisitor class implements both zoom's and  hayes' visit method , + * for Dos manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class , + * degenerate, + * In this example the visitor base class is {@link ModemVisitor}. The base class of the , + * visited hierarchy is {@link Modem} and has two children {@link Hayes} and {@link Zoom} , + * each one having its own visitor interface {@link Hayes} and {@link ZoomVisitor} , + * respectively. {@link ConfigureForUnixVisitor} and {@link ConfigureForDosVisitor} , + * implement each derivative's visit method only if it is required , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * CongigureForDosVisitor class implements both zoom's and  hayes' visit method , + * for Dos manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * CongigureForDosVisitor class implements both zoom's visit method for Unix , + * manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class , + * degenerate, + * In this example the visitor base class is {@link ModemVisitor}. The base class of the , + * visited hierarchy is {@link Modem} and has two children {@link Hayes} and {@link Zoom} , + * each one having its own visitor interface {@link Hayes} and {@link ZoomVisitor} , + * respectively. {@link ConfigureForUnixVisitor} and {@link ConfigureForDosVisitor} , + * implement each derivative's visit method only if it is required , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * CongigureForDosVisitor class implements both zoom's and  hayes' visit method , + * for Dos manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * CongigureForDosVisitor class implements both zoom's visit method for Unix , + * manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, + * Hayes class implements its accept method, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class , + * degenerate, + * In this example the visitor base class is {@link ModemVisitor}. The base class of the , + * visited hierarchy is {@link Modem} and has two children {@link Hayes} and {@link Zoom} , + * each one having its own visitor interface {@link Hayes} and {@link ZoomVisitor} , + * respectively. {@link ConfigureForUnixVisitor} and {@link ConfigureForDosVisitor} , + * implement each derivative's visit method only if it is required , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * CongigureForDosVisitor class implements both zoom's and  hayes' visit method , + * for Dos manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * CongigureForDosVisitor class implements both zoom's visit method for Unix , + * manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, + * Hayes class implements its accept method, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Modem.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class , + * degenerate, + * In this example the visitor base class is {@link ModemVisitor}. The base class of the , + * visited hierarchy is {@link Modem} and has two children {@link Hayes} and {@link Zoom} , + * each one having its own visitor interface {@link Hayes} and {@link ZoomVisitor} , + * respectively. {@link ConfigureForUnixVisitor} and {@link ConfigureForDosVisitor} , + * implement each derivative's visit method only if it is required , +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForDosVisitor.java, + * CongigureForDosVisitor class implements both zoom's and  hayes' visit method , + * for Dos manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * CongigureForDosVisitor class implements both zoom's visit method for Unix , + * manufacturer, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, + * Hayes class implements its accept method, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Modem.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ModemVisitor.java, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/App.java, + * The Acyclic Visitor pattern allows new functions to be added to existing class , + * hierarchies without affecting those hierarchies, and without creating the dependency , + * cycles that are inherent to the GoF Visitor pattern, by making the Visitor base class ]