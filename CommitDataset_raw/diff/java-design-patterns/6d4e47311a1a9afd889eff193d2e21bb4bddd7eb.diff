[+++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/intercepting-filter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <parent>, +  </parent>, +  <artifactId>intercepting-filter</artifactId>, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/intercepting-filter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <parent>, +  </parent>, +  <artifactId>intercepting-filter</artifactId>, +++ b/intercepting-filter/src/main/AddressFilter.java, +, +/**, + * Concrete implementation of filter, + * , + * @author joshzambales, + *, + */, +public class AddressFilter implements Filter{, +	public String execute(String[] request){, +		if(request[2].equals("")){, +			return null;, +		}else return request[2];, +	}, +}, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/intercepting-filter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <parent>, +  </parent>, +  <artifactId>intercepting-filter</artifactId>, +++ b/intercepting-filter/src/main/AddressFilter.java, +, +/**, + * Concrete implementation of filter, + * , + * @author joshzambales, + *, + */, +public class AddressFilter implements Filter{, +	public String execute(String[] request){, +		if(request[2].equals("")){, +			return null;, +		}else return request[2];, +	}, +}, +++ b/intercepting-filter/src/main/App.java, +/**, + *, + * This is an app that checks whether the order request is valid through pre-processing done via Filters, + * Each field has its own corresponding Filter, + * @author joshzambales, + *, + */, +++ b/README.md, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/intercepting-filter/etc/Intercepting-filter.png "Intercepting Filter"), +++ b/intercepting-filter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <parent>, +  </parent>, +  <artifactId>intercepting-filter</artifactId>, +++ b/intercepting-filter/src/main/AddressFilter.java, +, +/**, + * Concrete implementation of filter, + * , + * @author joshzambales, + *, + */, +public class AddressFilter implements Filter{, +	public String execute(String[] request){, +		if(request[2].equals("")){, +			return null;, +		}else return request[2];, +	}, +}, +++ b/intercepting-filter/src/main/App.java, +/**, + *, + * This is an app that checks whether the order request is valid through pre-processing done via Filters, + * Each field has its own corresponding Filter, + * @author joshzambales, + *, + */, +++ b/intercepting-filter/src/main/Client.java]