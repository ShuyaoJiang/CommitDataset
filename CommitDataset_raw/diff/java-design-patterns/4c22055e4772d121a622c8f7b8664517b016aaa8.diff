[+++ b/half-sync-half-async/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.5.0</version>, +  </parent>, +  <artifactId>half-sync-half-async</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +    	<groupId>org.mockito</groupId>, +    	<artifactId>mockito-all</artifactId>, +    	<scope>test</scope>, +    </dependency>, +  </dependencies>, +  <dependencyManagement>, +  	<dependencies>, +  		<dependency>, +  			<groupId>org.mockito</groupId>, +  			<artifactId>mockito-all</artifactId>, +  			<version>1.9.5</version>, +  		</dependency>, +  	</dependencies>, +  </dependencyManagement>, +</project>, +++ b/half-sync-half-async/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.5.0</version>, +  </parent>, +  <artifactId>half-sync-half-async</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +    	<groupId>org.mockito</groupId>, +    	<artifactId>mockito-all</artifactId>, +    	<scope>test</scope>, +    </dependency>, +  </dependencies>, +  <dependencyManagement>, +  	<dependencies>, +  		<dependency>, +  			<groupId>org.mockito</groupId>, +  			<artifactId>mockito-all</artifactId>, +  			<version>1.9.5</version>, +  		</dependency>, +  	</dependencies>, +  </dependencyManagement>, +</project>, +++ b/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java, +package com.iluwatar.halfsynchalfasync;, +, +import java.util.concurrent.BlockingQueue;, +import java.util.concurrent.Callable;, +import java.util.concurrent.Future;, +import java.util.concurrent.ThreadPoolExecutor;, +, +/**, + * This is the asynchronous layer which does not block when a new request arrives. It just passes, + * the request to the synchronous layer which consists of a queue i.e. a {@link BlockingQueue} and, + * a pool of threads i.e. {@link ThreadPoolExecutor}. Out of this pool of threads one of the thread, + * picks up the task and executes it in background and the result is posted back to the caller via , + * {@link Future}., + */, +public abstract class AsynchronousService<I, O> {, +	, +	/*, +	 * This is the synchronous layer to which request to do work is submitted., +	 */, +	private SynchronousLayer syncLayer = new SynchronousLayer();, +	, +	/**, +	 * Computes arithmetic sum for n, +	 * , +	 * @return future representing arithmetic sum of n, +	 */, +	public Future<O> execute(final I input) {, +		/*, +		 * This is the key part of this pattern where the caller thread does not block until, +		 * the result of work is computed but is delegated to the synchronous layer which, +		 * computes the task in background. This is useful if caller thread is an UI thread, , +		 * which MUST remain responsive to user inputs., +		 */]