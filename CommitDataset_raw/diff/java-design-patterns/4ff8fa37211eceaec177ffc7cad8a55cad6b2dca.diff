[+++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (asyncResult.isCompleted()) {, +    } else {, +      asyncResult.await();, +      return asyncResult.getValue();, +    }, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (asyncResult.isCompleted()) {, +    } else {, +      asyncResult.await();, +      return asyncResult.getValue();, +    }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (asyncResult.isCompleted()) {, +    } else {, +      asyncResult.await();, +      return asyncResult.getValue();, +    }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses composition to "decorate" calls to the, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (asyncResult.isCompleted()) {, +    } else {, +      asyncResult.await();, +      return asyncResult.getValue();, +    }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses composition to "decorate" calls to the, +++ b/hexagonal/README.md, +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report, +++ b/README.md, +[![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (asyncResult.isCompleted()) {, +    } else {, +      asyncResult.await();, +      return asyncResult.getValue();, +    }, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +import static org.mockito.Matchers.eq;, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses composition to "decorate" calls to the, +++ b/hexagonal/README.md, +++ b/module/README.md, +---, +layout: pattern, +title: Module, +folder: module, +permalink: /patterns/module/, +pumlid: JShB3OGm303HLg20nFVjnYGM1CN6ycTfVtFSsnjfzY5jPgUqkLqHwXy0mxUU8wuyqidQ8q4IjJqCO-QBWGOtVh5qyd5AKOmW4mT6Nu2-ZiAekapH_hkcSTNa-GC0, +categories: Creational Pattern, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +Module pattern is used to implement the concept of software modules, defined by modular programming, in a programming language with incomplete direct support for the concept., +, +![alt text](./etc/module.png "Module"), +, +## Applicability, +The Module pattern can be considered a creational pattern and a structural pattern. It manages the creation and organization of other elements, and groups them as the structural pattern does., +, +An object that applies this pattern can provide the equivalent of a namespace, providing the initialization and finalization process of a static class or a class with static members with cleaner, more concise syntax and semantics., +, +## Credits, +, +* [Module](https://en.wikipedia.org/wiki/Module_pattern), +++ b/.travis.yml, +- mvn clean test jacoco:report coveralls:report]