[+++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., +   * , +    BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, +    FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, +    SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., +   * , +    BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, +    FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, +    SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., +   * , +    BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, +    FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, +    SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeaponImpl.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., +   * , +    BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, +    FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, +    SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeaponImpl.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/Excalibur.java, +    System.out.println("bright light streams from Excalibur blinding the enemy");, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., +   * , +    BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, +    FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, +    SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeaponImpl.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/Excalibur.java, +    System.out.println("bright light streams from Excalibur blinding the enemy");, +++ b/bridge/src/main/java/com/iluwatar/bridge/FlyingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., +   * , +    BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, +    FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, +    SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeaponImpl.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/Excalibur.java, +    System.out.println("bright light streams from Excalibur blinding the enemy");, +++ b/bridge/src/main/java/com/iluwatar/bridge/FlyingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/FlyingMagicWeaponImpl.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations, + * can be changed without affecting the clients., +   * , +    BlindingMagicWeapon blindingMagicWeapon = new BlindingMagicWeapon(new Excalibur());, +    FlyingMagicWeapon flyingMagicWeapon = new FlyingMagicWeapon(new Mjollnir());, +    SoulEatingMagicWeapon soulEatingMagicWeapon = new SoulEatingMagicWeapon(new Stormbringer());, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/BlindingMagicWeaponImpl.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/Excalibur.java, +    System.out.println("bright light streams from Excalibur blinding the enemy");, +++ b/bridge/src/main/java/com/iluwatar/bridge/FlyingMagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/FlyingMagicWeaponImpl.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/MagicWeapon.java, +++ b/bridge/src/main/java/com/iluwatar/bridge/App.java, + * The Bridge pattern can also be thought of as two layers of abstraction. With Bridge, you can, + * decouple an abstraction from its implementation so that the two can vary independently., + * In Bridge pattern both abstraction ({@link MagicWeapon}) and implementation (, + * {@link MagicWeaponImpl}) have their own class hierarchies. The interface of the implementations]