[+++ b/README.md, +* [Repository](#repository), +## <a name="repository">Repository</a> [&#8593;](#list-of-design-patterns), +**Intent:** Repository layer is added between the domain and data mapping layers to isolate domain objects from details of the database access code and to minimize scattering and duplication of query code. The Repository pattern is especially useful in systems where number of domain classes is large or heavy querying is utilized., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/repository/etc/repository.png "Repository"), +, +**Applicability:** Use the Repository pattern when, +* the number of domain objects is large, +* you want to avoid duplication of query code, +* you want to keep the database querying code in single place, +* you have multiple data sources, +, +**Real world examples:** , +* [Spring Data](http://projects.spring.io/spring-data/), +, +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +++ b/README.md, +* [Repository](#repository), +## <a name="repository">Repository</a> [&#8593;](#list-of-design-patterns), +**Intent:** Repository layer is added between the domain and data mapping layers to isolate domain objects from details of the database access code and to minimize scattering and duplication of query code. The Repository pattern is especially useful in systems where number of domain classes is large or heavy querying is utilized., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/repository/etc/repository.png "Repository"), +, +**Applicability:** Use the Repository pattern when, +* the number of domain objects is large, +* you want to avoid duplication of query code, +* you want to keep the database querying code in single place, +* you have multiple data sources, +, +**Real world examples:** , +* [Spring Data](http://projects.spring.io/spring-data/), +, +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +++ b/abstract-factory/pom.xml, +    <version>1.4.0</version>, +++ b/README.md, +* [Repository](#repository), +## <a name="repository">Repository</a> [&#8593;](#list-of-design-patterns), +**Intent:** Repository layer is added between the domain and data mapping layers to isolate domain objects from details of the database access code and to minimize scattering and duplication of query code. The Repository pattern is especially useful in systems where number of domain classes is large or heavy querying is utilized., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/repository/etc/repository.png "Repository"), +, +**Applicability:** Use the Repository pattern when, +* the number of domain objects is large, +* you want to avoid duplication of query code, +* you want to keep the database querying code in single place, +* you have multiple data sources, +, +**Real world examples:** , +* [Spring Data](http://projects.spring.io/spring-data/), +, +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +++ b/abstract-factory/pom.xml, +    <version>1.4.0</version>, +++ b/adapter/pom.xml, +    <version>1.4.0</version>, +++ b/README.md, +* [Repository](#repository), +## <a name="repository">Repository</a> [&#8593;](#list-of-design-patterns), +**Intent:** Repository layer is added between the domain and data mapping layers to isolate domain objects from details of the database access code and to minimize scattering and duplication of query code. The Repository pattern is especially useful in systems where number of domain classes is large or heavy querying is utilized., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/repository/etc/repository.png "Repository"), +, +**Applicability:** Use the Repository pattern when, +* the number of domain objects is large, +* you want to avoid duplication of query code, +* you want to keep the database querying code in single place, +* you have multiple data sources, +, +**Real world examples:** , +* [Spring Data](http://projects.spring.io/spring-data/), +, +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +++ b/abstract-factory/pom.xml, +    <version>1.4.0</version>, +++ b/adapter/pom.xml, +    <version>1.4.0</version>, +++ /dev/null, +++ b/README.md, +* [Repository](#repository), +## <a name="repository">Repository</a> [&#8593;](#list-of-design-patterns), +**Intent:** Repository layer is added between the domain and data mapping layers to isolate domain objects from details of the database access code and to minimize scattering and duplication of query code. The Repository pattern is especially useful in systems where number of domain classes is large or heavy querying is utilized., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/repository/etc/repository.png "Repository"), +, +**Applicability:** Use the Repository pattern when, +* the number of domain objects is large, +* you want to avoid duplication of query code, +* you want to keep the database querying code in single place, +* you have multiple data sources, +, +**Real world examples:** , +* [Spring Data](http://projects.spring.io/spring-data/), +, +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +++ b/abstract-factory/pom.xml, +    <version>1.4.0</version>, +++ b/adapter/pom.xml, +    <version>1.4.0</version>]