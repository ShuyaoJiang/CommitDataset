[+++ b/reactor/src/main/java/com/iluwatar/reactor/App.java, +	private NioReactor reactor;, +, +			new App().start();, +		} catch (IOException e) {, +			e.printStackTrace();, +		}, +	}, +	, +	public void start() throws IOException {, +		reactor = new NioReactor(new ThreadPoolDispatcher(2));, +		, +		, +	, +	public void stop() {, +		reactor.stop();, +, +++ b/reactor/src/main/java/com/iluwatar/reactor/App.java, +	private NioReactor reactor;, +, +			new App().start();, +		} catch (IOException e) {, +			e.printStackTrace();, +		}, +	}, +	, +	public void start() throws IOException {, +		reactor = new NioReactor(new ThreadPoolDispatcher(2));, +		, +		, +	, +	public void stop() {, +		reactor.stop();, +, +++ b/reactor/src/main/java/com/iluwatar/reactor/AppClient.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +	private ExecutorService service = Executors.newFixedThreadPool(3);, +		new AppClient().start();, +	public void start() {, +		service.execute(new LoggingClient("Client 1", 6666));, +		service.execute(new LoggingClient("Client 2", 6667));, +		service.execute(new UDPLoggingClient(6668));, +	}, +	, +	public void stop() {, +		service.shutdown();, +		if (!service.isTerminated()) {, +			service.shutdownNow();, +			try {, +				service.awaitTermination(1000, TimeUnit.SECONDS);, +			} catch (InterruptedException e) {, +				e.printStackTrace();, +			}, +		}, +	}, +			for (int i = 0; i < 4; i++) {, +				for (int i = 0; i < 4; i++) {, +++ b/reactor/src/main/java/com/iluwatar/reactor/App.java, +	private NioReactor reactor;, +, +			new App().start();, +		} catch (IOException e) {, +			e.printStackTrace();, +		}, +	}, +	, +	public void start() throws IOException {, +		reactor = new NioReactor(new ThreadPoolDispatcher(2));, +		, +		, +	, +	public void stop() {, +		reactor.stop();, +, +++ b/reactor/src/main/java/com/iluwatar/reactor/AppClient.java, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +	private ExecutorService service = Executors.newFixedThreadPool(3);, +		new AppClient().start();, +	public void start() {, +		service.execute(new LoggingClient("Client 1", 6666));, +		service.execute(new LoggingClient("Client 2", 6667));, +		service.execute(new UDPLoggingClient(6668));, +	}, +	, +	public void stop() {, +		service.shutdown();, +		if (!service.isTerminated()) {, +			service.shutdownNow();, +			try {, +				service.awaitTermination(1000, TimeUnit.SECONDS);, +			} catch (InterruptedException e) {, +				e.printStackTrace();, +			}, +		}, +	}, +			for (int i = 0; i < 4; i++) {]