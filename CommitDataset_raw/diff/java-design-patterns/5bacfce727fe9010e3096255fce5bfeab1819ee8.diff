[+++ b/pom.xml, +		<module>reactor</module>, +++ b/pom.xml, +		<module>reactor</module>, +++ b/reactor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.6.0</version>, +  </parent>, +  <artifactId>reactor</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/pom.xml, +		<module>reactor</module>, +++ b/reactor/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.6.0</version>, +  </parent>, +  <artifactId>reactor</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/reactor/src/main/java/com/iluwatar/reactor/app/App.java, +package com.iluwatar.reactor.app;, +, +import java.io.IOException;, +, +import com.iluwatar.reactor.framework.AbstractNioChannel;, +import com.iluwatar.reactor.framework.ChannelHandler;, +import com.iluwatar.reactor.framework.NioDatagramChannel;, +import com.iluwatar.reactor.framework.NioReactor;, +import com.iluwatar.reactor.framework.NioServerSocketChannel;, +import com.iluwatar.reactor.framework.ThreadPoolDispatcher;, +, +/**, + * This application demonstrates Reactor pattern. The example demonstrated is a Distributed Logging, + * Service where it listens on multiple TCP or UDP sockets for incoming log requests., + * , + * <p>, + * <i>INTENT</i> <br/>, + * The Reactor design pattern handles service requests that are delivered concurrently to an, + * application by one or more clients. The application can register specific handlers for processing, + * which are called by reactor on specific events., + * , + * <p>, + * <i>PROBLEM</i> <br/>, + * Server applications in a distributed system must handle multiple clients that send them service, + * requests. Following forces need to be resolved:, + * <ul>, + * <li>Availability</li>, + * <li>Efficiency</li>, + * <li>Programming Simplicity</li>, + * <li>Adaptability</li>, + * </ul>, + * , + * <p>, + * <i>PARTICIPANTS</i> <br/>, + * <ul>, + * <li>Synchronous Event De-multiplexer</li> {@link NioReactor} plays the role of synchronous event, + * de-multiplexer. It waits for events on multiple channels registered to it in an event loop., + * , + * <p>, + * <li>Initiation Dispatcher</li> {@link NioReactor} plays this role as the application specific, + * {@link ChannelHandler}s are registered to the reactor., + * , + * <p>, + * <li>Handle</li> {@link AbstractNioChannel} acts as a handle that is registered to the reactor., + * When any events occur on a handle, reactor calls the appropriate handler., + * , + * <p>, + * <li>Event Handler</li> {@link ChannelHandler} acts as an event handler, which is bound to a, + * channel and is called back when any event occurs on any of its associated handles. Application, + * logic resides in event handlers., + * </ul>, + * , + * <p>, + * The application utilizes single thread to listen for requests on all ports. It does not create a, + * separate thread for each client, which provides better scalability under load (number of clients]