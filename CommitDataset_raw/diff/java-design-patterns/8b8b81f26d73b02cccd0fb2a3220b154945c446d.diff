[+++ b/thread-pool/src/main/java/com/iluwatar/App.java, +/**, + * , + *  Thread Pool pattern is where a number of threads are created to perform a number of tasks, , + *  which are usually organized in a queue. The results from the tasks being executed might , + *  also be placed in a queue, or the tasks might return no result. Typically, there are many , + *  more tasks than threads. As soon as a thread completes its task, it will request the next , + *  task from the queue until all tasks have been completed. The thread can then terminate, or , + *  sleep until there are new tasks available., + *  , + *  In this example we create a list of tasks presenting work to be done. Each task is then , + *  wrapped into a Worker object that implements Runnable. We create an ExecutorService with, + *  fixed number of threads (Thread Pool) and use them to execute the Workers., + *, + */, +    	// Create a list of tasks to be executed, +    	// Creates a thread pool that reuses a fixed number of threads operating off a shared , +    	// unbounded queue. At any point, at most nThreads threads will be active processing , +    	// tasks. If additional tasks are submitted when all threads are active, they will wait , +    	// in the queue until a thread is available., +    	, +    	// Allocate new worker for each task, +    	// The worker is executed when a thread becomes, +    	// available in the thread pool, +    	// All tasks were executed, now shutdown, +++ b/thread-pool/src/main/java/com/iluwatar/App.java, +/**, + * , + *  Thread Pool pattern is where a number of threads are created to perform a number of tasks, , + *  which are usually organized in a queue. The results from the tasks being executed might , + *  also be placed in a queue, or the tasks might return no result. Typically, there are many , + *  more tasks than threads. As soon as a thread completes its task, it will request the next , + *  task from the queue until all tasks have been completed. The thread can then terminate, or , + *  sleep until there are new tasks available., + *  , + *  In this example we create a list of tasks presenting work to be done. Each task is then , + *  wrapped into a Worker object that implements Runnable. We create an ExecutorService with, + *  fixed number of threads (Thread Pool) and use them to execute the Workers., + *, + */, +    	// Create a list of tasks to be executed, +    	// Creates a thread pool that reuses a fixed number of threads operating off a shared , +    	// unbounded queue. At any point, at most nThreads threads will be active processing , +    	// tasks. If additional tasks are submitted when all threads are active, they will wait , +    	// in the queue until a thread is available., +    	, +    	// Allocate new worker for each task, +    	// The worker is executed when a thread becomes, +    	// available in the thread pool, +    	// All tasks were executed, now shutdown, +++ b/thread-pool/src/main/java/com/iluwatar/CoffeeMakingTask.java, +/**, + * , + * CoffeeMakingTask is a concrete task, + * , + */, +++ b/thread-pool/src/main/java/com/iluwatar/App.java, +/**, + * , + *  Thread Pool pattern is where a number of threads are created to perform a number of tasks, , + *  which are usually organized in a queue. The results from the tasks being executed might , + *  also be placed in a queue, or the tasks might return no result. Typically, there are many , + *  more tasks than threads. As soon as a thread completes its task, it will request the next , + *  task from the queue until all tasks have been completed. The thread can then terminate, or , + *  sleep until there are new tasks available., + *  , + *  In this example we create a list of tasks presenting work to be done. Each task is then , + *  wrapped into a Worker object that implements Runnable. We create an ExecutorService with, + *  fixed number of threads (Thread Pool) and use them to execute the Workers., + *, + */, +    	// Create a list of tasks to be executed, +    	// Creates a thread pool that reuses a fixed number of threads operating off a shared , +    	// unbounded queue. At any point, at most nThreads threads will be active processing , +    	// tasks. If additional tasks are submitted when all threads are active, they will wait , +    	// in the queue until a thread is available., +    	, +    	// Allocate new worker for each task, +    	// The worker is executed when a thread becomes, +    	// available in the thread pool, +    	// All tasks were executed, now shutdown, +++ b/thread-pool/src/main/java/com/iluwatar/CoffeeMakingTask.java, +/**, + * , + * CoffeeMakingTask is a concrete task, + * , + */, +++ b/thread-pool/src/main/java/com/iluwatar/PotatoPeelingTask.java, +/**, + * , + * PotatoPeelingTask is a concrete task, + *, + */, +++ b/thread-pool/src/main/java/com/iluwatar/App.java, +/**, + * , + *  Thread Pool pattern is where a number of threads are created to perform a number of tasks, , + *  which are usually organized in a queue. The results from the tasks being executed might , + *  also be placed in a queue, or the tasks might return no result. Typically, there are many , + *  more tasks than threads. As soon as a thread completes its task, it will request the next ]