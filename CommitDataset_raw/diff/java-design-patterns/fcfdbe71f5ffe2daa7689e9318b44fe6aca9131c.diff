[+++ b/service-layer/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/service-layer/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/BaseEntity.java, +public abstract class BaseEntity {, +, +  /**, +   * Indicates the unique id of this entity, +   *, +   * @return The id of the entity, or 'null' when not persisted, +   */, +  public abstract Long getId();, +, +  /**, +   * Set the id of this entity, +   *, +   * @param id The new id, +   */, +  public abstract void setId(Long id);, +, +  /**, +   * Get the name of this entity, +   *, +   * @return The name of the entity, +   */, +  public abstract String getName();, +, +  /**, +   * Set the name of this entity, +   *, +   * @param name The new name, +   */, +  public abstract void setName(final String name);, +, +++ b/service-layer/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/common/BaseEntity.java, +public abstract class BaseEntity {, +, +  /**, +   * Indicates the unique id of this entity, +   *, +   * @return The id of the entity, or 'null' when not persisted, +   */, +  public abstract Long getId();, +, +  /**, +   * Set the id of this entity, +   *, +   * @param id The new id, +   */, +  public abstract void setId(Long id);, +, +  /**, +   * Get the name of this entity, +   *, +   * @return The name of the entity, +   */, +  public abstract String getName();, +, +  /**, +   * Set the name of this entity, +   *, +   * @param name The new name, +   */, +  public abstract void setName(final String name);, +, +++ b/service-layer/src/main/java/com/iluwatar/servicelayer/hibernate/HibernateUtil.java, +import org.hibernate.SessionFactory;, +import org.hibernate.cfg.Configuration;, +, +  /**, +   * The cached session factory, +   */, +  private static volatile SessionFactory sessionFactory;, +  private HibernateUtil() {, +  }, +, +  /**, +   * Create the current session factory instance, create a new one when there is none yet., +   *, +   * @return The session factory, +   */, +  public static synchronized SessionFactory getSessionFactory() {, +    if (sessionFactory == null) {, +        sessionFactory =, +    return sessionFactory;]