[+++ b/event-driven-architecture/pom.xml, +, +++ b/event-driven-architecture/pom.xml, +, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +import com.iluwatar.eda.model.User;, + * example below uses an {@link EventDispatcher} to link/register {@link Event} objects to their, + * respective handlers once an {@link Event} is dispatched, it's respective handler is invoked and, + * the {@link Event} is handled accordingly., + *, +  /**, +   * Once the {@link EventDispatcher} is initialised, channels related to specific events have to be, +   * made known to the dispatcher by registering them. In this case the {@link UserCreatedEvent} is, +   * bound to the UserCreatedEventHandler, whilst the {@link UserUpdatedEvent} is bound to the, +   * {@link UserUpdatedEventHandler}. The dispatcher can now be called to dispatch specific events., +   * When a user is saved, the {@link UserCreatedEvent} can be dispatched., +   * On the other hand, when a user is updated, {@link UserUpdatedEvent} can be dispatched., +   *, +   */, +, +, +    User user = new User("iluwatar");, +    dispatcher.dispatch(new UserCreatedEvent(user));, +    dispatcher.dispatch(new UserUpdatedEvent(user));, +++ b/event-driven-architecture/pom.xml, +, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +import com.iluwatar.eda.model.User;, + * example below uses an {@link EventDispatcher} to link/register {@link Event} objects to their, + * respective handlers once an {@link Event} is dispatched, it's respective handler is invoked and, + * the {@link Event} is handled accordingly., + *, +  /**, +   * Once the {@link EventDispatcher} is initialised, channels related to specific events have to be, +   * made known to the dispatcher by registering them. In this case the {@link UserCreatedEvent} is, +   * bound to the UserCreatedEventHandler, whilst the {@link UserUpdatedEvent} is bound to the, +   * {@link UserUpdatedEventHandler}. The dispatcher can now be called to dispatch specific events., +   * When a user is saved, the {@link UserCreatedEvent} can be dispatched., +   * On the other hand, when a user is updated, {@link UserUpdatedEvent} can be dispatched., +   *, +   */, +, +, +    User user = new User("iluwatar");, +    dispatcher.dispatch(new UserCreatedEvent(user));, +    dispatcher.dispatch(new UserUpdatedEvent(user));, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java, + * Handles the routing of {@link Event} messages to associated channels., +  private Map<Class<? extends Event>, Channel<?>> handlers;, +   * Links an {@link Event} to a specific {@link Channel}., +++ b/event-driven-architecture/pom.xml, +, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +import com.iluwatar.eda.model.User;, + * example below uses an {@link EventDispatcher} to link/register {@link Event} objects to their, + * respective handlers once an {@link Event} is dispatched, it's respective handler is invoked and, + * the {@link Event} is handled accordingly., + *, +  /**, +   * Once the {@link EventDispatcher} is initialised, channels related to specific events have to be, +   * made known to the dispatcher by registering them. In this case the {@link UserCreatedEvent} is, +   * bound to the UserCreatedEventHandler, whilst the {@link UserUpdatedEvent} is bound to the, +   * {@link UserUpdatedEventHandler}. The dispatcher can now be called to dispatch specific events., +   * When a user is saved, the {@link UserCreatedEvent} can be dispatched., +   * On the other hand, when a user is updated, {@link UserUpdatedEvent} can be dispatched., +   *, +   */, +, +, +    User user = new User("iluwatar");, +    dispatcher.dispatch(new UserCreatedEvent(user));, +    dispatcher.dispatch(new UserUpdatedEvent(user));, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java, + * Handles the routing of {@link Event} messages to associated channels., +  private Map<Class<? extends Event>, Channel<?>> handlers;, +   * Links an {@link Event} to a specific {@link Channel}., +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/event/UserCreatedEvent.java, +import com.iluwatar.eda.model.User;, +, + * This class can be extended to contain details about the user has been created. In this example,, + * the entire {@link User} object is passed on as data with the event., +, +  private User user;, +, +  public UserCreatedEvent(User user) {, +    this.user = user;, +  }, +, +, +  public User getUser() {, +    return user;, +  }, +++ b/event-driven-architecture/pom.xml, +, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +import com.iluwatar.eda.model.User;, + * example below uses an {@link EventDispatcher} to link/register {@link Event} objects to their, + * respective handlers once an {@link Event} is dispatched, it's respective handler is invoked and, + * the {@link Event} is handled accordingly., + *]