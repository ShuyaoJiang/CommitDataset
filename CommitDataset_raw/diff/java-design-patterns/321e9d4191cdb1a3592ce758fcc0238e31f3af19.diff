[+++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +* A Loan Application has been accepted/rejected (Commercial Business)., +* [Event-driven architecture definition](http://searchsoa.techtarget.com/definition/event-driven-architecture), +*, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +* A Loan Application has been accepted/rejected (Commercial Business)., +* [Event-driven architecture definition](http://searchsoa.techtarget.com/definition/event-driven-architecture), +*, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +package com.iluwatar.eda;, +, +import com.iluwatar.eda.event.Event;, +import com.iluwatar.eda.event.UserCreatedEvent;, +import com.iluwatar.eda.event.UserUpdatedEvent;, +import com.iluwatar.eda.handler.UserCreatedEventHandler;, +import com.iluwatar.eda.handler.UserUpdatedEventHandler;, +, +/**, + * An event-driven architecture (EDA) is a framework that orchestrates behavior around the production,, + * detection and consumption of events as well as the responses they evoke., + * An event is any identifiable occurrence that has significance for system hardware or software., + * <p/>, + * The example below we uses an {@link EventDispatcher} to link/register  {@link Event} objects to, + * their respective handlers Once an {@link Event} is dispatched,, + * it's respective handler is invoked and the {@link Event} is handled accordingly, + */, +public class App {, +, +    public static void main(String[] args) {, +        EventDispatcher dispatcher = new EventDispatcher();, +        dispatcher.registerChannel(UserCreatedEvent.class, new UserCreatedEventHandler());, +        dispatcher.registerChannel(UserUpdatedEvent.class, new UserUpdatedEventHandler());, +        dispatcher.dispatch(new UserCreatedEvent());, +        dispatcher.dispatch(new UserUpdatedEvent());, +    }, +, +}, +++ b/event-driven-architecture/etc/class_diagram.png, +++ b/event-driven-architecture/index.md, +* A Loan Application has been accepted/rejected (Commercial Business)., +* [Event-driven architecture definition](http://searchsoa.techtarget.com/definition/event-driven-architecture), +*, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/App.java, +package com.iluwatar.eda;, +, +import com.iluwatar.eda.event.Event;, +import com.iluwatar.eda.event.UserCreatedEvent;, +import com.iluwatar.eda.event.UserUpdatedEvent;, +import com.iluwatar.eda.handler.UserCreatedEventHandler;, +import com.iluwatar.eda.handler.UserUpdatedEventHandler;, +, +/**, + * An event-driven architecture (EDA) is a framework that orchestrates behavior around the production,, + * detection and consumption of events as well as the responses they evoke., + * An event is any identifiable occurrence that has significance for system hardware or software., + * <p/>, + * The example below we uses an {@link EventDispatcher} to link/register  {@link Event} objects to, + * their respective handlers Once an {@link Event} is dispatched,, + * it's respective handler is invoked and the {@link Event} is handled accordingly, + */, +public class App {, +, +    public static void main(String[] args) {, +        EventDispatcher dispatcher = new EventDispatcher();, +        dispatcher.registerChannel(UserCreatedEvent.class, new UserCreatedEventHandler());, +        dispatcher.registerChannel(UserUpdatedEvent.class, new UserUpdatedEventHandler());, +        dispatcher.dispatch(new UserCreatedEvent());, +        dispatcher.dispatch(new UserUpdatedEvent());, +    }, +, +}, +++ b/event-driven-architecture/src/main/java/com/iluwatar/eda/EventDispatcher.java, +package com.iluwatar.eda;, +, +import com.iluwatar.eda.event.Event;, +import com.iluwatar.eda.framework.Channel;, +import com.iluwatar.eda.framework.DynamicRouter;, +, +import java.util.HashMap;, +import java.util.Map;, +, +/**, + * The {@link Event Dispatcher} handles routing of {@link Event} messages to associated channels., + * A {@link HashMap} is used to store the association between events and their respective handlers., + */, +public class EventDispatcher implements DynamicRouter<Event> {, +, +    private Map<Class<? extends Event>, Channel> handlers;, +, +    public EventDispatcher() {, +        handlers = new HashMap<Class<? extends Event>, Channel>();, +    }, +, +    /**, +     * Links an {@link Event} to a specific {@link Channel}, +     * @param contentType The {@link Event} to be registered, +     * @param channel The {@link Channel} that will be handling the {@link Event}]