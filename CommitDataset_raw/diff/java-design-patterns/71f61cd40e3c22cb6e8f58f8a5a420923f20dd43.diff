[+++ b/component-object/README.md, +---, +layout: pattern, +title: Component Object, +folder: component-object, +permalink: /patterns/component-object/, +categories: Testing, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Web development is shifting more and more towards reusable components. Frameworks like React, Polymer, Angular etc. provide various component friendly abstractions to make front-end code-bases more maintainable. So our web applications are now full of “widgets” that have same behavior. We can use component various times on single web page or re-use it on various web pages. Therefore it is logical to create abstraction which covers functionality of single component and reuse it across end-to-end tests., +, +![alt text](./etc/component-object.png "Component Object Pattern"), +, +## Applicability, +Use the Component Object Pattern in the following situations:, +, +* When you have various same components on single web page and you need to test the web page, +* When you have multiple web pages using same component abstractions and you need to test the web pages, +, +## Credits, +, +* [Component Object](https://lkrnac.net/blog/2016/10/component-object-pattern-example/), +++ b/component-object/README.md, +---, +layout: pattern, +title: Component Object, +folder: component-object, +permalink: /patterns/component-object/, +categories: Testing, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Web development is shifting more and more towards reusable components. Frameworks like React, Polymer, Angular etc. provide various component friendly abstractions to make front-end code-bases more maintainable. So our web applications are now full of “widgets” that have same behavior. We can use component various times on single web page or re-use it on various web pages. Therefore it is logical to create abstraction which covers functionality of single component and reuse it across end-to-end tests., +, +![alt text](./etc/component-object.png "Component Object Pattern"), +, +## Applicability, +Use the Component Object Pattern in the following situations:, +, +* When you have various same components on single web page and you need to test the web page, +* When you have multiple web pages using same component abstractions and you need to test the web pages, +, +## Credits, +, +* [Component Object](https://lkrnac.net/blog/2016/10/component-object-pattern-example/), +++ b/component-object/etc/component-object.png, +++ b/component-object/README.md, +---, +layout: pattern, +title: Component Object, +folder: component-object, +permalink: /patterns/component-object/, +categories: Testing, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Web development is shifting more and more towards reusable components. Frameworks like React, Polymer, Angular etc. provide various component friendly abstractions to make front-end code-bases more maintainable. So our web applications are now full of “widgets” that have same behavior. We can use component various times on single web page or re-use it on various web pages. Therefore it is logical to create abstraction which covers functionality of single component and reuse it across end-to-end tests., +, +![alt text](./etc/component-object.png "Component Object Pattern"), +, +## Applicability, +Use the Component Object Pattern in the following situations:, +, +* When you have various same components on single web page and you need to test the web page, +* When you have multiple web pages using same component abstractions and you need to test the web pages, +, +## Credits, +, +* [Component Object](https://lkrnac.net/blog/2016/10/component-object-pattern-example/), +++ b/component-object/etc/component-object.png, +++ b/component-object/etc/component-object.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , +  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  , +  <class id="1" language="java" name="com.iluwatar.component.AddItemComponent" project="component-object" , +    file="/component-object/src/test/java/com/iluwatar/component/AddItemComponent.java" binary="false" , +    corner="BOTTOM_RIGHT">    , +    <position height="-1" width="-1" x="162" y="206"/>    , +    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +      sort-features="false" accessors="true" visibility="true">      , +      <attributes public="true" package="true" protected="true" private="true" static="true"/>      , +      <operations public="true" package="true" protected="true" private="true" static="true"/>    , +    </display>  , +  </class>  , +  <class id="2" language="java" name="com.iluwatar.component.ItemsListComponent" project="component-object" , +    file="/component-object/src/test/java/com/iluwatar/component/ItemsListComponent.java" binary="false" , +    corner="BOTTOM_RIGHT">    , +    <position height="-1" width="-1" x="995" y="195"/>    , +    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +      sort-features="false" accessors="true" visibility="true">      ]