[+++ b/adapter/README.md, +## General usage of Adapter Pattern: , ++ Wrappers used to adopt 3rd parties libraries and frameworks - most of the applications using third party libraries use adapters as a middle layer between the application and the 3rd party library to decouple the application from the library. If another library has to be used only an adapter for the new library is required without having to change the application code., +, +## Consequences:, +Class and object adapters have different trade-offs. A class adapter, +, +*	adapts Adaptee to Target by committing to a concrete Adaptee class. As a consequence, a class adapter won’t work when we want to adapt a class and all its subclasses., +*	let’s Adapter override some of Adaptee’s behavior, since Adapter is a subclass of Adaptee., +*	introduces only one object, and no additional pointer indirection is needed to get to the adaptee., +, +An object adapter	, +, +*	let’s a single Adapter work with many Adaptees—that is, the Adaptee itself and all of its subclasses (if any). The Adapter can also add functionality to all Adaptees at once., +*	makes it harder to override Adaptee behavior. It will require subclassing Adaptee and making Adapter refer to the subclass rather than the Adaptee itself., +, +, +++ b/adapter/README.md, +## General usage of Adapter Pattern: , ++ Wrappers used to adopt 3rd parties libraries and frameworks - most of the applications using third party libraries use adapters as a middle layer between the application and the 3rd party library to decouple the application from the library. If another library has to be used only an adapter for the new library is required without having to change the application code., +, +## Consequences:, +Class and object adapters have different trade-offs. A class adapter, +, +*	adapts Adaptee to Target by committing to a concrete Adaptee class. As a consequence, a class adapter won’t work when we want to adapt a class and all its subclasses., +*	let’s Adapter override some of Adaptee’s behavior, since Adapter is a subclass of Adaptee., +*	introduces only one object, and no additional pointer indirection is needed to get to the adaptee., +, +An object adapter	, +, +*	let’s a single Adapter work with many Adaptees—that is, the Adaptee itself and all of its subclasses (if any). The Adapter can also add functionality to all Adaptees at once., +*	makes it harder to override Adaptee behavior. It will require subclassing Adaptee and making Adapter refer to the subclass rather than the Adaptee itself., +, +, +++ b/extension-objects/README.md, +---, +layout: pattern, +title: Extension objects, +folder: extension-objects, +permalink: /patterns/extension-objects/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Anticipate that an object’s interface needs to be extended in the future. Additional, +interfaces are defined by extension objects., +, +![Extension_objects](./etc/extension_obj.png "Extension objects"), +, +## Applicability, +Use the Extension Objects pattern when:, +, +* you need to support the addition of new or unforeseen interfaces to existing classes and you don't want to impact clients that don't need this new interface. Extension Objects lets you keep related operations together by defining them in a separate class, +* a class representing a key abstraction plays different roles for different clients. The number of roles the class can play should be open-ended. There is a need to preserve the key abstraction itself. For example, a customer object is still a customer object even if different subsystems view it differently., +* a class should be extensible with new behavior without subclassing from it., +, +## Real world examples, +, +* [OpenDoc](https://en.wikipedia.org/wiki/OpenDoc), +* [Object Linking and Embedding](https://en.wikipedia.org/wiki/Object_Linking_and_Embedding), +++ b/adapter/README.md, +## General usage of Adapter Pattern: , ++ Wrappers used to adopt 3rd parties libraries and frameworks - most of the applications using third party libraries use adapters as a middle layer between the application and the 3rd party library to decouple the application from the library. If another library has to be used only an adapter for the new library is required without having to change the application code., +, +## Consequences:, +Class and object adapters have different trade-offs. A class adapter, +, +*	adapts Adaptee to Target by committing to a concrete Adaptee class. As a consequence, a class adapter won’t work when we want to adapt a class and all its subclasses., +*	let’s Adapter override some of Adaptee’s behavior, since Adapter is a subclass of Adaptee., +*	introduces only one object, and no additional pointer indirection is needed to get to the adaptee., +, +An object adapter	, +, +*	let’s a single Adapter work with many Adaptees—that is, the Adaptee itself and all of its subclasses (if any). The Adapter can also add functionality to all Adaptees at once., +*	makes it harder to override Adaptee behavior. It will require subclassing Adaptee and making Adapter refer to the subclass rather than the Adaptee itself., +, +, +++ b/extension-objects/README.md, +---, +layout: pattern, +title: Extension objects, +folder: extension-objects, +permalink: /patterns/extension-objects/, +categories: Behavioral, +tags:, + - Java, + - Difficulty-Intermediate, +---, +, +## Intent, +Anticipate that an object’s interface needs to be extended in the future. Additional, +interfaces are defined by extension objects., +, +![Extension_objects](./etc/extension_obj.png "Extension objects"), +, +## Applicability, +Use the Extension Objects pattern when:]