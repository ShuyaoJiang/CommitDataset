[+++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, +    assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, +    assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, +  private final Prototype testedPrototype;, +  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, +    assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, +  private final Prototype testedPrototype;, +  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, +    long count = CallsCount.getCount(tenantName);, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, +    assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, +  private final Prototype testedPrototype;, +  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, +    long count = CallsCount.getCount(tenantName);, +++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import java.util.concurrent.atomic.AtomicLong;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(CallsCount.class);, +  private static Map<String, AtomicLong> tenantCallsCount = new ConcurrentHashMap<>();, +    tenantCallsCount.putIfAbsent(tenantName, new AtomicLong(0));, +    tenantCallsCount.get(tenantName).incrementAndGet();, +  public static long getCount(String tenantName) {, +    return tenantCallsCount.get(tenantName).get();, +    LOGGER.debug("Resetting the map.");, +    for (Entry<String, AtomicLong> e : tenantCallsCount.entrySet()) {, +      tenantCallsCount.put(e.getKey(), new AtomicLong(0));, +++ b/factory-method/src/test/java/com/iluwatar/factory/method/FactoryMethodTest.java, +    assertEquals("Weapon must be of weaponType: " + clazz.getName(), expectedWeaponType,, +++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java, +  private final Prototype testedPrototype;, +  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, +    long count = CallsCount.getCount(tenantName);, +++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import java.util.concurrent.atomic.AtomicLong;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(CallsCount.class);, +  private static Map<String, AtomicLong> tenantCallsCount = new ConcurrentHashMap<>();, +    tenantCallsCount.putIfAbsent(tenantName, new AtomicLong(0));, +    tenantCallsCount.get(tenantName).incrementAndGet();, +  public static long getCount(String tenantName) {, +    return tenantCallsCount.get(tenantName).get();, +    LOGGER.debug("Resetting the map.");, +    for (Entry<String, AtomicLong> e : tenantCallsCount.entrySet()) {, +      tenantCallsCount.put(e.getKey(), new AtomicLong(0));, +++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java, +    Throttler timer = new ThrottleTimerImpl(100);, +    long counter = CallsCount.getCount(tenant.getName());]