[+++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *  <p>, + *  In this example we show you three different wizards. The first one ({@link SimpleWizard}) is a naive , + *  <p>, + *  The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete implementation , + *  but abstraction. It utilizes Dependency Injection pattern allowing its {@link Tobacco} dependency to be, + *  <p>, + *  {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then used to create, + *  {@link GuiceWizard} object with correct dependencies., +	/**, +	 * Program entry point, +	 * @param args command line args, +	 */, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *  <p>, + *  In this example we show you three different wizards. The first one ({@link SimpleWizard}) is a naive , + *  <p>, + *  The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete implementation , + *  but abstraction. It utilizes Dependency Injection pattern allowing its {@link Tobacco} dependency to be, + *  <p>, + *  {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then used to create, + *  {@link GuiceWizard} object with correct dependencies., +	/**, +	 * Program entry point, +	 * @param args command line args, +	 */, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/OldTobyTobacco.java, + * OldTobyTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *  <p>, + *  In this example we show you three different wizards. The first one ({@link SimpleWizard}) is a naive , + *  <p>, + *  The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete implementation , + *  but abstraction. It utilizes Dependency Injection pattern allowing its {@link Tobacco} dependency to be, + *  <p>, + *  {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then used to create, + *  {@link GuiceWizard} object with correct dependencies., +	/**, +	 * Program entry point, +	 * @param args command line args, +	 */, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/OldTobyTobacco.java, + * OldTobyTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/RivendellTobacco.java, + * RivendellTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *  <p>, + *  In this example we show you three different wizards. The first one ({@link SimpleWizard}) is a naive , + *  <p>, + *  The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete implementation , + *  but abstraction. It utilizes Dependency Injection pattern allowing its {@link Tobacco} dependency to be, + *  <p>, + *  {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then used to create, + *  {@link GuiceWizard} object with correct dependencies., +	/**, +	 * Program entry point, +	 * @param args command line args, +	 */, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/OldTobyTobacco.java, + * OldTobyTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/RivendellTobacco.java, + * RivendellTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/SecondBreakfastTobacco.java, + * SecondBreakfastTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *  <p>, + *  In this example we show you three different wizards. The first one ({@link SimpleWizard}) is a naive , + *  <p>, + *  The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete implementation , + *  but abstraction. It utilizes Dependency Injection pattern allowing its {@link Tobacco} dependency to be, + *  <p>, + *  {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then used to create, + *  {@link GuiceWizard} object with correct dependencies., +	/**, +	 * Program entry point, +	 * @param args command line args, +	 */, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/OldTobyTobacco.java, + * OldTobyTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/RivendellTobacco.java, + * RivendellTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/SecondBreakfastTobacco.java, + * SecondBreakfastTobacco concrete {@link Tobacco} implementation, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/TobaccoModule.java, + * Guice module for binding certain concrete {@link Tobacco} implementation., +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *  <p>, + *  In this example we show you three different wizards. The first one ({@link SimpleWizard}) is a naive , + *  <p>, + *  The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete implementation , + *  but abstraction. It utilizes Dependency Injection pattern allowing its {@link Tobacco} dependency to be, + *  <p>, + *  {@link TobaccoModule} binds a concrete implementation to abstraction. Injector is then used to create, + *  {@link GuiceWizard} object with correct dependencies., +	/**, +	 * Program entry point, +	 * @param args command line args, +	 */, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/OldTobyTobacco.java, + * OldTobyTobacco concrete {@link Tobacco} implementation]