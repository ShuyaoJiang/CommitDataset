[+++ /dev/null, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    Troll clubbed = new ClubbedTroll(troll);, +    clubbed.attack();, +    clubbed.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", clubbed.getAttackPower());, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +++ b/decorator/README.md, +Troll clubbed = new ClubbedTroll(troll);, +clubbed.attack(); // The troll tries to grab you! The troll swings at you with a club!, +clubbed.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    Troll clubbed = new ClubbedTroll(troll);, +    clubbed.attack();, +    clubbed.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", clubbed.getAttackPower());, +++ b/partial-response/README.md, +---, +layout: pattern, +title: Partial Response, +folder: partial-response, +permalink: /patterns/partial-response/, +categories: Architectural, +tags:, + - Java, + - KISS, + - YAGNI, + - Difficulty-Beginner, +---, +, +## Intent, +Send partial response from server to client on need basis. Client will specify the the fields, +that it need to server, instead of serving all details for resource. , +, +![alt text](./etc/partial-response.urm.png "partial-response"), +, +## Applicability, +Use the Partial Response pattern when, +, +* Client need only subset of data from resource., +* To avoid too much data transfer over wire, +, +## Credits, +, +* [Common Design Patterns](https://cloud.google.com/apis/design/design_patterns), +* [Partial Response in RESTful API Design](http://yaoganglian.com/2013/07/01/partial-response/), +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);]