[+++ b/facade/README.md, +## Explanation, +, +Real world example, +, +> How does a goldmine work? "Well, the miners go down there and dig gold!" you say. That is what you believe because you are using a simple interface that goldmine provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade., +, +In plain words, +, +> Facade pattern provides a simplified interface to a complex subsystem., +, +Wikipedia says, +, +> A facade is an object that provides a simplified interface to a larger body of code, such as a class library., +, +**Programmatic Example**, +, +Taking our goldmine example from above. Here we have the dwarven mine worker hierarchy, +, +```, +public abstract class DwarvenMineWorker {, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(DwarvenMineWorker.class);, +, +  public void goToSleep() {, +    LOGGER.info("{} goes to sleep.", name());, +  }, +, +  public void wakeUp() {, +    LOGGER.info("{} wakes up.", name());, +  }, +, +  public void goHome() {, +    LOGGER.info("{} goes home.", name());, +  }, +, +  public void goToMine() {, +    LOGGER.info("{} goes to the mine.", name());, +  }, +, +  private void action(Action action) {, +    switch (action) {, +      case GO_TO_SLEEP:, +        goToSleep();, +        break;, +      case WAKE_UP:, +        wakeUp();, +        break;, +      case GO_HOME:, +        goHome();, +        break;, +      case GO_TO_MINE:, +        goToMine();, +        break;, +      case WORK:, +        work();, +        break;, +      default:, +        LOGGER.info("Undefined action");, +        break;, +    }, +  }, +, +  public void action(Action... actions) {, +    for (Action action : actions) {, +      action(action);, +    }, +  }, +, +  public abstract void work();, +, +  public abstract String name();, +, +  static enum Action {, +    GO_TO_SLEEP, WAKE_UP, GO_HOME, GO_TO_MINE, WORK, +  }, +}, +, +public class DwarvenTunnelDigger extends DwarvenMineWorker {, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(DwarvenTunnelDigger.class);, +, +  @Override, +  public void work() {, +    LOGGER.info("{} creates another promising tunnel.", name());, +  }, +, +  @Override, +  public String name() {, +    return "Dwarven tunnel digger";, +  }, +}, +, +public class DwarvenGoldDigger extends DwarvenMineWorker {, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(DwarvenGoldDigger.class);, +, +  @Override, +  public void work() {, +    LOGGER.info("{} digs for gold.", name());]