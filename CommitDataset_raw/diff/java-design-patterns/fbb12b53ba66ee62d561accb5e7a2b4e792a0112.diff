[+++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +categories:, + - pattern_cat, + - creational, +tags: pattern_tag, +---, +, +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family of related product objects is designed to be used together, and you need to enforce this constraint, +* you want to provide a class library of products, and you want to reveal just their interfaces, not their implementations, +, +**Real world examples:**, +, +* [javax.xml.parsers.DocumentBuilderFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html), +++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +categories:, + - pattern_cat, + - creational, +tags: pattern_tag, +---, +, +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family of related product objects is designed to be used together, and you need to enforce this constraint, +* you want to provide a class library of products, and you want to reveal just their interfaces, not their implementations, +, +**Real world examples:**, +, +* [javax.xml.parsers.DocumentBuilderFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html), +++ b/adapter/index.md, +---, +layout: pattern, +title: Adapter, +folder: adapter, +categories: pattern_cat, +tags: pattern_tag, +---, +, +**Intent:** Convert the interface of a class into another interface the clients, +expect. Adapter lets classes work together that couldn't otherwise because of, +incompatible interfaces., +, +![alt text](./etc/adapter_1.png "Adapter"), +, +**Applicability:** Use the Adapter pattern when, +, +* you want to use an existing class, and its interface does not match the one you need, +* you want to create a reusable class that cooperates with unrelated or unforeseen classes, that is, classes that don't necessarily have compatible interfaces, +* you need to use several existing subclasses, but it's impractical to adapt their interface by subclassing every one. An object adapter can adapt the interface of its parent class., +, +**Real world examples:**, +, +* [java.util.Arrays#asList()](http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList%28T...%29), +++ b/README.md, +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +categories:, + - pattern_cat, + - creational, +tags: pattern_tag, +---, +, +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +]