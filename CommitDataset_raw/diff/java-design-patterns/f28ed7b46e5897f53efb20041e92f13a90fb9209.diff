[+++ b/composite/README.md, +## Explanation, +, +Real world example, +, +> Every sentence is composed of words which are in turn composed of characters. Each of these objects is printable and they can have something printed before or after them like sentence always ends with full stop and word always has space before it, +, +In plain words, +, +> Composite pattern lets clients treat the individual objects in a uniform manner., +, +Wikipedia says, +, +> In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite is to "compose" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly., +, +**Programmatic Example**, +, +Taking our sentence example from above. Here we have the base class and different printable types, +, +```, +public abstract class LetterComposite {, +  private List<LetterComposite> children = new ArrayList<>();, +  public void add(LetterComposite letter) {, +    children.add(letter);, +  }, +  public int count() {, +    return children.size();, +  }, +  protected void printThisBefore() {}, +  protected void printThisAfter() {}, +  public void print() {, +    printThisBefore();, +    for (LetterComposite letter : children) {, +      letter.print();, +    }, +    printThisAfter();, +  }, +}, +, +public class Letter extends LetterComposite {, +  private char c;, +  public Letter(char c) {, +    this.c = c;, +  }, +  @Override, +  protected void printThisBefore() {, +    System.out.print(c);, +  }, +}, +, +public class Word extends LetterComposite {, +  public Word(List<Letter> letters) {, +    for (Letter l : letters) {, +      this.add(l);, +    }, +  }, +  @Override, +  protected void printThisBefore() {, +    System.out.print(" ");, +  }, +}, +, +public class Sentence extends LetterComposite {, +  public Sentence(List<Word> words) {, +    for (Word w : words) {, +      this.add(w);, +    }, +  }, +  @Override, +  protected void printThisAfter() {, +    System.out.print(".");, +  }, +}, +```, +, +Then we have a messenger to carry messages, +, +```, +public class Messenger {, +  LetterComposite messageFromOrcs() {, +    List<Word> words = new ArrayList<>();, +    words.add(new Word(Arrays.asList(new Letter('W'), new Letter('h'), new Letter('e'), new Letter('r'), new Letter('e'))));, +    words.add(new Word(Arrays.asList(new Letter('t'), new Letter('h'), new Letter('e'), new Letter('r'), new Letter('e'))));, +    words.add(new Word(Arrays.asList(new Letter('i'), new Letter('s'))));, +    words.add(new Word(Arrays.asList(new Letter('a'))));, +    words.add(new Word(Arrays.asList(new Letter('w'), new Letter('h'), new Letter('i'), new Letter('p'))));, +    words.add(new Word(Arrays.asList(new Letter('t'), new Letter('h'), new Letter('e'), new Letter('r'), new Letter('e'))));, +    words.add(new Word(Arrays.asList(new Letter('i'), new Letter('s'))));, +    words.add(new Word(Arrays.asList(new Letter('a'))));, +    words.add(new Word(Arrays.asList(new Letter('w'), new Letter('a'), new Letter('y'))));, +    return new Sentence(words);, +  }, +, +  LetterComposite messageFromElves() {, +    List<Word> words = new ArrayList<>();, +    words.add(new Word(Arrays.asList(new Letter('M'), new Letter('u'), new Letter('c'), new Letter('h'))));, +    words.add(new Word(Arrays.asList(new Letter('w'), new Letter('i'), new Letter('n'), new Letter('d'))));, +    words.add(new Word(Arrays.asList(new Letter('p'), new Letter('o'), new Letter('u'), new Letter('r'), new Letter('s'))));, +    words.add(new Word(Arrays.asList(new Letter('f'), new Letter('r'), new Letter('o'), new Letter('m'))));, +    words.add(new Word(Arrays.asList(new Letter('y'), new Letter('o'), new Letter('u'), new Letter('r'))));]