[+++ b/.gitignore, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ /dev/null, +++ b/.gitignore, +++ b/.travis.yml, +sudo: false, +++ b/LICENSE.md, +Copyright (c) 2014 Ilkka Seppälä, +++ b/README.md, +# Credits, +, +* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683), +* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/), +* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf), +* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1), +* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns), +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420), +* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1), +* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2), +, +++ /dev/null, +++ b/abstract-factory/index.md, +---, +layout: pattern, +title: Abstract Factory, +folder: abstract-factory, +permalink: /patterns/abstract-factory/, +categories: Creational, +tags: , + - Java, + - Gang Of Four, + - Difficulty-Intermediate, +---, +, +## Also known as, +Kit, +, +## Intent, +Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./etc/abstract-factory_1.png "Abstract Factory"), +, +## Applicability, +Use the Abstract Factory pattern when, +, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family of related product objects is designed to be used together, and you need to enforce this constraint, +* you want to provide a class library of products, and you want to reveal just their interfaces, not their implementations, +, +## Real world examples, +, +* [javax.xml.parsers.DocumentBuilderFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html), +, +## Credits]