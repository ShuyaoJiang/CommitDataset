[+++ b/event-queue/etc/model.png, +++ b/event-queue/etc/model.png, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/App.java, +  public static void main(String[] args) throws UnsupportedAudioFileException, IOException, InterruptedException {, +    Audio audio = Audio.getInstance();, +    audio.playSound(audio.getAudioStream("./etc/Bass-Drum-1.wav"), -10.0f);, +    audio.playSound(audio.getAudioStream("./etc/Closed-Hi-Hat-1.wav"), -8.0f);, +    try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {, +    }, +    audio.stopService();, +++ b/event-queue/etc/model.png, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/App.java, +  public static void main(String[] args) throws UnsupportedAudioFileException, IOException, InterruptedException {, +    Audio audio = Audio.getInstance();, +    audio.playSound(audio.getAudioStream("./etc/Bass-Drum-1.wav"), -10.0f);, +    audio.playSound(audio.getAudioStream("./etc/Closed-Hi-Hat-1.wav"), -8.0f);, +    try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {, +    }, +    audio.stopService();, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(Audio.class);, +  private static final Audio INSTANCE = new Audio();, +  private int headIndex;, +  private int tailIndex;, +  private volatile Thread updateThread = null;, +  private PlayMessage[] pendingAudio = new PlayMessage[MAX_PENDING];, +, +  // Visible only for testing purposes, +  Audio() {, +, +  }, +, +  public static Audio getInstance() {, +    return INSTANCE;, +  }, +   * This method stops the Update Method's thread and waits till service stops., +  public synchronized void stopService() throws InterruptedException {, +    updateThread.join();, +    updateThread = null;, +  public synchronized boolean isServiceRunning() {, +    return updateThread != null && updateThread.isAlive();, +  public void init() {, +      updateThread = new Thread(() -> {, +          update();, +  private synchronized void startThread() {, +  public void playSound(AudioInputStream stream, float volume) {, +  private void update() {, +      LOGGER.trace("Error occoured while loading the audio: The line is unavailable", e);, +      LOGGER.trace("Input/Output error while loading the audio", e);, +      LOGGER.trace("The system doesn't support the sound: " + e.getMessage(), e);, +  public AudioInputStream getAudioStream(String filePath), +  public PlayMessage[] getPendingAudio() {, +++ b/event-queue/etc/model.png, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/App.java, +  public static void main(String[] args) throws UnsupportedAudioFileException, IOException, InterruptedException {, +    Audio audio = Audio.getInstance();, +    audio.playSound(audio.getAudioStream("./etc/Bass-Drum-1.wav"), -10.0f);, +    audio.playSound(audio.getAudioStream("./etc/Closed-Hi-Hat-1.wav"), -8.0f);, +    try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {, +    }, +    audio.stopService();, +++ b/event-queue/src/main/java/com/iluwatar/event/queue/Audio.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(Audio.class);, +  private static final Audio INSTANCE = new Audio();, +  private int headIndex;, +  private int tailIndex;, +  private volatile Thread updateThread = null;, +  private PlayMessage[] pendingAudio = new PlayMessage[MAX_PENDING];, +, +  // Visible only for testing purposes, +  Audio() {, +, +  }, +, +  public static Audio getInstance() {, +    return INSTANCE;, +  }, +   * This method stops the Update Method's thread and waits till service stops., +  public synchronized void stopService() throws InterruptedException {, +    updateThread.join();, +    updateThread = null;, +  public synchronized boolean isServiceRunning() {, +    return updateThread != null && updateThread.isAlive();, +  public void init() {, +      updateThread = new Thread(() -> {, +          update();, +  private synchronized void startThread() {, +  public void playSound(AudioInputStream stream, float volume) {, +  private void update() {, +      LOGGER.trace("Error occoured while loading the audio: The line is unavailable", e);, +      LOGGER.trace("Input/Output error while loading the audio", e);, +      LOGGER.trace("The system doesn't support the sound: " + e.getMessage(), e);, +  public AudioInputStream getAudioStream(String filePath), +  public PlayMessage[] getPendingAudio() {]