[+++ b/fluentinterface/pom.xml, +        <dependency>, +            <groupId>org.mockito</groupId>, +            <artifactId>mockito-core</artifactId>, +            <scope>test</scope>, +        </dependency>, +++ b/fluentinterface/pom.xml, +        <dependency>, +            <groupId>org.mockito</groupId>, +            <artifactId>mockito-core</artifactId>, +            <scope>test</scope>, +        </dependency>, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, +        return fromIterator.hasNext() ? fromIterator.next() : null;, +++ b/fluentinterface/pom.xml, +        <dependency>, +            <groupId>org.mockito</groupId>, +            <artifactId>mockito-core</artifactId>, +            <scope>test</scope>, +        </dependency>, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, +        return fromIterator.hasNext() ? fromIterator.next() : null;, +++ b/fluentinterface/src/test/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterableTest.java, +package com.iluwatar.fluentinterface.fluentiterable;, +, +import org.junit.Test;, +, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.Optional;, +import java.util.Spliterator;, +import java.util.function.Consumer;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +, +/**, + * Date: 12/12/15 - 7:00 PM, + *, + * @author Jeroen Meulemeester, + */, +public abstract class FluentIterableTest {, +, +  /**, +   * Create a new {@link FluentIterable<Integer>} from the given integers, +   *, +   * @param integers The integers, +   * @return The new iterable, use for testing, +   */, +  protected abstract FluentIterable<Integer> createFluentIterable(final Iterable<Integer> integers);, +, +  @Test, +  public void testFirst() throws Exception {, +    final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);, +    final Optional<Integer> first = createFluentIterable(integers).first();, +    assertNotNull(first);, +    assertTrue(first.isPresent());, +    assertEquals(integers.get(0), first.get());, +  }, +, +  @Test, +  public void testFirstEmptyCollection() throws Exception {, +    final List<Integer> integers = Collections.<Integer>emptyList();, +    final Optional<Integer> first = createFluentIterable(integers).first();, +    assertNotNull(first);, +    assertFalse(first.isPresent());, +  }, +, +  @Test, +  public void testFirstCount() throws Exception {, +    final List<Integer> integers = Arrays.asList(1, 2, 3, 10, 9, 8);, +    final List<Integer> first4 = createFluentIterable(integers), +            .first(4), +            .asList();, +, +    assertNotNull(first4);, +    assertEquals(4, first4.size());, +, +    assertEquals(integers.get(0), first4.get(0));, +    assertEquals(integers.get(1), first4.get(1));, +    assertEquals(integers.get(2), first4.get(2));, +    assertEquals(integers.get(3), first4.get(3));, +  }, +, +  @Test, +  public void testFirstCountLessItems() throws Exception {, +    final List<Integer> integers = Arrays.asList(1, 2, 3);, +    final List<Integer> first4 = createFluentIterable(integers), +            .first(4), +            .asList();, +, +    assertNotNull(first4);, +    assertEquals(3, first4.size());]