[+++ b/dao/src/main/java/com/iluwatar/dao/App.java, +    final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +    final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <TYPE> void prettyPrint(String prefix, Iterable<TYPE> iterable) {, +  private static <TYPE> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<TYPE> iterable) {, +    Iterator<TYPE> iterator = iterable.iterator();, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +    final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <TYPE> void prettyPrint(String prefix, Iterable<TYPE> iterable) {, +  private static <TYPE> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<TYPE> iterable) {, +    Iterator<TYPE> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <TYPE> is the class of objects the iterable contains, +public interface FluentIterable<TYPE> extends Iterable<TYPE> {, +  FluentIterable<TYPE> filter(Predicate<? super TYPE> predicate);, +  Optional<TYPE> first();, +  FluentIterable<TYPE> first(int count);, +  Optional<TYPE> last();, +  FluentIterable<TYPE> last(int count);, +   * Transforms this FluentIterable into a new one containing objects of the type NEW_TYPE., +   * @param function a function that transforms an instance of TYPE into an instance of NEW_TYPE, +   * @param <NEW_TYPE> the target type of the transformation, +  <NEW_TYPE> FluentIterable<NEW_TYPE> map(Function<? super TYPE, NEW_TYPE> function);, +  List<TYPE> asList();, +   * @param <TYPE> the type of the objects to iterate, +  static <TYPE> List<TYPE> copyToList(Iterable<TYPE> iterable) {, +    ArrayList<TYPE> copy = new ArrayList<>();, +    Iterator<TYPE> iterator = iterable.iterator();, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +    final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <TYPE> void prettyPrint(String prefix, Iterable<TYPE> iterable) {, +  private static <TYPE> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<TYPE> iterable) {, +    Iterator<TYPE> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <TYPE> is the class of objects the iterable contains, +public interface FluentIterable<TYPE> extends Iterable<TYPE> {, +  FluentIterable<TYPE> filter(Predicate<? super TYPE> predicate);, +  Optional<TYPE> first();, +  FluentIterable<TYPE> first(int count);, +  Optional<TYPE> last();, +  FluentIterable<TYPE> last(int count);, +   * Transforms this FluentIterable into a new one containing objects of the type NEW_TYPE., +   * @param function a function that transforms an instance of TYPE into an instance of NEW_TYPE, +   * @param <NEW_TYPE> the target type of the transformation, +  <NEW_TYPE> FluentIterable<NEW_TYPE> map(Function<? super TYPE, NEW_TYPE> function);, +  List<TYPE> asList();, +   * @param <TYPE> the type of the objects to iterate, +  static <TYPE> List<TYPE> copyToList(Iterable<TYPE> iterable) {, +    ArrayList<TYPE> copy = new ArrayList<>();, +    Iterator<TYPE> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, +public abstract class DecoratingIterator<TYPE> implements Iterator<TYPE> {, +  protected final Iterator<TYPE> fromIterator;, +  private TYPE next;, +  public DecoratingIterator(Iterator<TYPE> fromIterator) {, +  public final TYPE next() {, +      final TYPE result = next;, +  public abstract TYPE computeNext();, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +    final CustomerDao customerDao = new CustomerDaoImpl(generateSampleCustomers());, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <TYPE> void prettyPrint(String prefix, Iterable<TYPE> iterable) {, +  private static <TYPE> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<TYPE> iterable) {, +    Iterator<TYPE> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <TYPE> is the class of objects the iterable contains, +public interface FluentIterable<TYPE> extends Iterable<TYPE> {, +  FluentIterable<TYPE> filter(Predicate<? super TYPE> predicate);, +  Optional<TYPE> first();, +  FluentIterable<TYPE> first(int count);, +  Optional<TYPE> last();, +  FluentIterable<TYPE> last(int count);, +   * Transforms this FluentIterable into a new one containing objects of the type NEW_TYPE., +   * @param function a function that transforms an instance of TYPE into an instance of NEW_TYPE, +   * @param <NEW_TYPE> the target type of the transformation, +  <NEW_TYPE> FluentIterable<NEW_TYPE> map(Function<? super TYPE, NEW_TYPE> function);, +  List<TYPE> asList();, +   * @param <TYPE> the type of the objects to iterate, +  static <TYPE> List<TYPE> copyToList(Iterable<TYPE> iterable) {, +    ArrayList<TYPE> copy = new ArrayList<>();, +    Iterator<TYPE> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, +public abstract class DecoratingIterator<TYPE> implements Iterator<TYPE> {, +  protected final Iterator<TYPE> fromIterator;, +  private TYPE next;, +  public DecoratingIterator(Iterator<TYPE> fromIterator) {, +  public final TYPE next() {, +      final TYPE result = next;, +  public abstract TYPE computeNext();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + * @param <TYPE> the type of the objects the iteration is about, +public class LazyFluentIterable<TYPE> implements FluentIterable<TYPE> {]