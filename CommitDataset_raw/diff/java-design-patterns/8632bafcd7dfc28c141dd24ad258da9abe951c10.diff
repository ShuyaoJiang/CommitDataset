[+++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter, +permalink: /patterns/converter/, +categories:, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +The purpose of the Converter Pattern is to provide a generic, common way of bidirectional, +conversion between corresponding types, allowing a clean implementation in which the types do not, +need to be aware of each other. Moreover, the Converter Pattern introduces bidirectional collection, +mapping, reducing a boilerplate code to minimum., +, +![alt text](./etc/converter.png "Converter Pattern"), +, +## Applicability, +Use the Converter Pattern in the following situations:, +, +* When you have types that logically correspond which other and you need to convert entities between them, +* When you want to provide different ways of types conversions depending on a context, +* Whenever you introduce a DTO (Data transfer object), you will probably need to convert it into the domain equivalence, +, +## Credits, +, +* [Converter](http://www.xsolve.pl/blog/converter-pattern-in-java-8/), +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter, +permalink: /patterns/converter/, +categories:, +tags:, + - Java, + - Difficulty-Beginner, +---, +, +## Intent, +The purpose of the Converter Pattern is to provide a generic, common way of bidirectional, +conversion between corresponding types, allowing a clean implementation in which the types do not, +need to be aware of each other. Moreover, the Converter Pattern introduces bidirectional collection, +mapping, reducing a boilerplate code to minimum., +, +![alt text](./etc/converter.png "Converter Pattern"), +, +## Applicability, +Use the Converter Pattern in the following situations:, +, +* When you have types that logically correspond which other and you need to convert entities between them, +* When you want to provide different ways of types conversions depending on a context, +* Whenever you introduce a DTO (Data transfer object), you will probably need to convert it into the domain equivalence, +, +## Credits, +, +* [Converter](http://www.xsolve.pl/blog/converter-pattern-in-java-8/), +++ b/converter/pom.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<project xmlns="http://maven.apache.org/POM/4.0.0", +         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +    <parent>, +        <artifactId>java-design-patterns</artifactId>, +        <groupId>com.iluwatar</groupId>, +        <version>1.15.0-SNAPSHOT</version>, +    </parent>, +    <modelVersion>4.0.0</modelVersion>, +    <dependencies>, +        <dependency>, +            <groupId>junit</groupId>, +            <artifactId>junit</artifactId>, +            <scope>test</scope>, +        </dependency>, +        <dependency>, +            <groupId>com.google.guava</groupId>, +            <artifactId>guava</artifactId>, +        </dependency>, +    </dependencies>, +    <artifactId>converter</artifactId>, +, +, +</project>, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/ImageClientImpl.java, +++ b/api-gateway/api-gateway-service/src/main/java/com/iluwatar/api/gateway/PriceClientImpl.java, +++ b/converter/README.md, +---, +layout: pattern, +title: Converter, +folder: converter]