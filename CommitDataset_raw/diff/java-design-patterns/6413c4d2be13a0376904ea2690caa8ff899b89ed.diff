[+++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, + * Singleton pattern ensures that the class can have only one existing instance per Java classloader instance , + * and provides global access to it., + * One of the risks of this pattern is that bugs resulting from setting a singleton up in, + * There are many ways to implement the Singleton. The first one is the eagerly initialized instance in, + * {@link IvoryTower}. Eager initialization implies that the implementation is thread safe. If you can, + * afford giving up control of the instantiation moment, then this implementation will suit you fine., + * <p/>, + * The other option to implement eagerly initialized Singleton is enum based Singleton. The example is, + * found in {@link EnumIvoryTower}. At first glance the code looks short and simple. However, you should, + * be aware of the downsides including committing to implementation strategy, extending the enum class,, + * serializability and restrictions to coding. These are extensively discussed in Stack Overflow:, + * http://programmers.stackexchange.com/questions/179386/what-are-the-downsides-of-implementing-a-singleton-with-javas-enum, + * <p/>, + * {@link ThreadSafeLazyLoadedIvoryTower} is a Singleton implementation that is initialized on demand., + * The downside is that it is very slow to access since the whole access method is synchronized., + * <p/>, + * Another Singleton implementation that is initialized on demand is found in {@link ThreadSafeDoubleCheckLocking}. It, + * is somewhat faster than {@link ThreadSafeLazyLoadedIvoryTower} since it doesn't synchronize the whole access method, + * but only the method internals on specific conditions., + * <p/>, + * Yet another way to implement thread safe lazily initialized Singleton can be found in {@link InitializingOnDemandHolderIdiom}. , + * However, this implementation requires at least Java 8 API level to work., +    // double checked locking, +    ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();, +    System.out.println(dcl1);, +    ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();, +    System.out.println(dcl2);, +    , +    // initialize on demand holder idiom, +++ b/singleton/src/main/java/com/iluwatar/singleton/App.java, + * Singleton pattern ensures that the class can have only one existing instance per Java classloader instance , + * and provides global access to it., + * One of the risks of this pattern is that bugs resulting from setting a singleton up in, + * There are many ways to implement the Singleton. The first one is the eagerly initialized instance in, + * {@link IvoryTower}. Eager initialization implies that the implementation is thread safe. If you can, + * afford giving up control of the instantiation moment, then this implementation will suit you fine., + * <p/>, + * The other option to implement eagerly initialized Singleton is enum based Singleton. The example is, + * found in {@link EnumIvoryTower}. At first glance the code looks short and simple. However, you should, + * be aware of the downsides including committing to implementation strategy, extending the enum class,, + * serializability and restrictions to coding. These are extensively discussed in Stack Overflow:, + * http://programmers.stackexchange.com/questions/179386/what-are-the-downsides-of-implementing-a-singleton-with-javas-enum, + * <p/>, + * {@link ThreadSafeLazyLoadedIvoryTower} is a Singleton implementation that is initialized on demand., + * The downside is that it is very slow to access since the whole access method is synchronized., + * <p/>, + * Another Singleton implementation that is initialized on demand is found in {@link ThreadSafeDoubleCheckLocking}. It, + * is somewhat faster than {@link ThreadSafeLazyLoadedIvoryTower} since it doesn't synchronize the whole access method, + * but only the method internals on specific conditions., + * <p/>, + * Yet another way to implement thread safe lazily initialized Singleton can be found in {@link InitializingOnDemandHolderIdiom}. , + * However, this implementation requires at least Java 8 API level to work., +    // double checked locking, +    ThreadSafeDoubleCheckLocking dcl1 = ThreadSafeDoubleCheckLocking.getInstance();, +    System.out.println(dcl1);, +    ThreadSafeDoubleCheckLocking dcl2 = ThreadSafeDoubleCheckLocking.getInstance();, +    System.out.println(dcl2);, +    , +    // initialize on demand holder idiom, +++ b/singleton/src/main/java/com/iluwatar/singleton/IvoryTower.java, +  private static final IvoryTower instance = new IvoryTower();]