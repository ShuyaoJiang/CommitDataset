[+++ b/README.md, +## <a name="list-of-design-patterns">List of Design Patterns</a>, +* Creational Patterns, +	* [Abstract Factory](#abstract-factory), +	* [Builder](#builder), +	* [Factory Method](#factory-method), +	* [Prototype](#prototype), +	* [Singleton](#singleton), +* Structural Patterns, +	* [Adapter](#adapter), +	* [Bridge](#bridge), +	* [Composite](#composite), +	* [Decorator](#decorator), +	* [Facade](#facade), +	* [Flyweight](#flyweight), +	* [Proxy](#proxy), +* Behavioral Patterns, +	* [Chain of responsibility](#chain-of-responsibility), +	* [Command](#command), +	* [Interpreter](#interpreter), +	* [Iterator](#iterator), +	* [Mediator](#mediator), +	* [Memento](#memento), +	* [Observer](#observer), +	* [State](#state), +	* [Strategy](#strategy), +	* [Template method](#template-method), +	* [Visitor](#visitor), +* [Model-View-Presenter](#model-view-presenter), +* [Double Checked Locking](#double-checked-locking), +* [Servant](#servant), +, +## <a name="abstract-factory">Abstract Factory</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/abstract-factory/etc/abstract-factory_1.png "Abstract Factory"), +## <a name="builder">Builder</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/builder/etc/builder_1.png "Builder"), +## <a name="factory-method">Factory Method</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/factory-method/etc/factory-method_1.png "Factory Method"), +## <a name="prototype">Prototype</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/prototype/etc/prototype_1.png "Prototype"), +## <a name="singleton">Singleton</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/singleton/etc/singleton_1.png "Singleton"), +* there must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +**Typical Use Case:**, +* the logging class, +* managing a connection to a database, +* file manager, +, +## <a name="adapter">Adapter</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/adapter/etc/adapter_1.png "Adapter"), +## <a name="bridge">Bridge</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/bridge/etc/bridge_1.png "Bridge"), +## <a name="composite">Composite</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/composite/etc/composite_1.png "Composite"), +## <a name="decorator">Decorator</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/decorator/etc/decorator_1.png "Decorator"), +## <a name="facade">Facade</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/facade/etc/facade_1.png "Facade"), +## <a name="flyweight">Flyweight</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/flyweight/etc/flyweight_1.png "Flyweight"), +## <a name="proxy">Proxy</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/proxy/etc/proxy_1.png "Proxy"), +, +**Typical Use Case:**, +, +* Control access to another object, +* Lazy initialization, +* implement logging, +* facilitate network connection, +* to count references to an object, +, +, +## <a name="chain-of-responsibility">Chain of responsibility</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/chain/etc/chain_1.png "Chain of Responsibility"), +## <a name="command">Command</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command_1.png "Command"), +, +**Typical Use Case:**, +, +* to keep a history of requests, +* implement callback functionality, +* implement the undo functionality, +, +## <a name="interpreter">Interpreter</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/interpreter/etc/interpreter_1.png "Interpreter"), +## <a name="iterator">Iterator</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/iterator/etc/iterator_1.png "Iterator"), +## <a name="mediator">Mediator</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/mediator/etc/mediator_1.png "Mediator"), +## <a name="memento">Memento</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento_1.png "Memento"), +## <a name="observer">Observer</a> [&#8593;](#list-of-design-patterns), +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/observer/etc/observer_1.png "Observer"), +, +**Typical Use Case:**, +, +* changing in one object leads to a change in other objects, +, +, +## <a name="state">State</a> [&#8593;](#list-of-design-patterns)]