[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +    if (modemVisitor instanceof HayesVisitor) {, +    } else {, +      LOGGER.info("Only HayesVisitor is allowed to visit Hayes modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +    if (modemVisitor instanceof HayesVisitor) {, +    } else {, +      LOGGER.info("Only HayesVisitor is allowed to visit Hayes modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java, +    if (modemVisitor instanceof  ZoomVisitor) {, +    } else {, +      LOGGER.info("Only ZoomVisitor is allowed to visit Zoom modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +    if (modemVisitor instanceof HayesVisitor) {, +    } else {, +      LOGGER.info("Only HayesVisitor is allowed to visit Hayes modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java, +    if (modemVisitor instanceof  ZoomVisitor) {, +    } else {, +      LOGGER.info("Only ZoomVisitor is allowed to visit Zoom modem");, +++ /dev/null, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +    if (modemVisitor instanceof HayesVisitor) {, +    } else {, +      LOGGER.info("Only HayesVisitor is allowed to visit Hayes modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java, +    if (modemVisitor instanceof  ZoomVisitor) {, +    } else {, +      LOGGER.info("Only ZoomVisitor is allowed to visit Zoom modem");, +++ /dev/null, +++ b/module/error.txt, +====, +    The MIT License, +    Copyright (c) 2014 Ilkka Seppälä, +, +    Permission is hereby granted, free of charge, to any person obtaining a copy, +    of this software and associated documentation files (the "Software"), to deal, +    in the Software without restriction, including without limitation the rights, +    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, +    copies of the Software, and to permit persons to whom the Software is, +    furnished to do so, subject to the following conditions:, +, +    The above copyright notice and this permission notice shall be included in, +    all copies or substantial portions of the Software., +, +    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR, +    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,, +    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE, +    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER, +    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,, +    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN, +    THE SOFTWARE., +====, +, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface]