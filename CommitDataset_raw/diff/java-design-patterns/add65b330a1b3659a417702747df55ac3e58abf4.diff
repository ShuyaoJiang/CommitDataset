[+++ b/.travis.yml, +  , +sudo: false, +++ b/.travis.yml, +  , +sudo: false, +++ b/README.md, +Behavioral patterns are concerned with algorithms and the assignment of responsibilites between objects., +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of sublasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by making use of caching techniques ie. for the very first time a particular service is requested, the service Locator looks up in JNDI, fetched the relavant service and then finally caches this service object. Now, further lookups of the same service via Service Locator is done in its cache which improves the performance of application to great extent., +* make web server configution portable, you only need to register the handler web server specific way, +* you want loose couping between presentation and business tiers, +++ b/.travis.yml, +  , +sudo: false, +++ b/README.md, +Behavioral patterns are concerned with algorithms and the assignment of responsibilites between objects., +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of sublasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by making use of caching techniques ie. for the very first time a particular service is requested, the service Locator looks up in JNDI, fetched the relavant service and then finally caches this service object. Now, further lookups of the same service via Service Locator is done in its cache which improves the performance of application to great extent., +* make web server configution portable, you only need to register the handler web server specific way, +* you want loose couping between presentation and business tiers, +++ b/naked-objects/dom/pom.xml, +				<datanucleus-maven-plugin.version>4.0.0-release</datanucleus-maven-plugin.version>, +++ b/.travis.yml, +  , +sudo: false, +++ b/README.md, +Behavioral patterns are concerned with algorithms and the assignment of responsibilites between objects., +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of sublasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by making use of caching techniques ie. for the very first time a particular service is requested, the service Locator looks up in JNDI, fetched the relavant service and then finally caches this service object. Now, further lookups of the same service via Service Locator is done in its cache which improves the performance of application to great extent., +* make web server configution portable, you only need to register the handler web server specific way, +* you want loose couping between presentation and business tiers, +++ b/naked-objects/dom/pom.xml, +				<datanucleus-maven-plugin.version>4.0.0-release</datanucleus-maven-plugin.version>, +++ b/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java, +                new QueryDefault<SimpleObject>(, +++ b/.travis.yml, +  , +sudo: false, +++ b/README.md, +Behavioral patterns are concerned with algorithms and the assignment of responsibilites between objects., +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of sublasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by making use of caching techniques ie. for the very first time a particular service is requested, the service Locator looks up in JNDI, fetched the relavant service and then finally caches this service object. Now, further lookups of the same service via Service Locator is done in its cache which improves the performance of application to great extent., +* make web server configution portable, you only need to register the handler web server specific way, +* you want loose couping between presentation and business tiers, +++ b/naked-objects/dom/pom.xml, +				<datanucleus-maven-plugin.version>4.0.0-release</datanucleus-maven-plugin.version>, +++ b/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java, +                new QueryDefault<SimpleObject>(, +++ /dev/null, +++ b/.travis.yml, +  , +sudo: false, +++ b/README.md, +Behavioral patterns are concerned with algorithms and the assignment of responsibilites between objects., +* when extension by subclassing is impractical. Sometimes a large number of independent extensions are possible and would produce an explosion of sublasses to support every combination. Or a class definition may be hidden or otherwise unavailable for subclassing, +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by making use of caching techniques ie. for the very first time a particular service is requested, the service Locator looks up in JNDI, fetched the relavant service and then finally caches this service object. Now, further lookups of the same service via Service Locator is done in its cache which improves the performance of application to great extent., +* make web server configution portable, you only need to register the handler web server specific way, +* you want loose couping between presentation and business tiers, +++ b/naked-objects/dom/pom.xml, +				<datanucleus-maven-plugin.version>4.0.0-release</datanucleus-maven-plugin.version>, +++ b/naked-objects/dom/src/main/java/domainapp/dom/modules/simple/SimpleObjects.java, +                new QueryDefault<SimpleObject>(, +++ /dev/null, +++ b/naked-objects/fixture/src/main/java/domainapp/fixture/DomainAppFixturesService.java, +/*, + *  Licensed to the Apache Software Foundation (ASF) under one, + *  or more contributor license agreements.  See the NOTICE file, + *  distributed with this work for additional information, + *  regarding copyright ownership.  The ASF licenses this file, + *  to you under the Apache License, Version 2.0 (the, + *  "License"); you may not use this file except in compliance, + *  with the License.  You may obtain a copy of the License at, + *, + *        http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing,, + *  software distributed under the License is distributed on an, + *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + *  KIND, either express or implied.  See the License for the, + *  specific language governing permissions and limitations, + *  under the License., + */, +package domainapp.fixture;, +, +import java.util.List;, +, +import org.apache.isis.applib.annotation.Action;, +import org.apache.isis.applib.annotation.ActionLayout;, +import org.apache.isis.applib.annotation.DomainService;, +import org.apache.isis.applib.annotation.DomainServiceLayout;, +import org.apache.isis.applib.annotation.MemberOrder;, +import org.apache.isis.applib.annotation.RestrictTo;, +import org.apache.isis.applib.fixturescripts.FixtureResult;, +import org.apache.isis.applib.fixturescripts.FixtureScript;, +import org.apache.isis.applib.fixturescripts.FixtureScripts;, +, +import domainapp.fixture.scenarios.RecreateSimpleObjects;, +, +/**]