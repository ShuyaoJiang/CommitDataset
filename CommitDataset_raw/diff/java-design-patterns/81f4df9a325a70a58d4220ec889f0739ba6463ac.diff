[+++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, +import java.util.concurrent.ThreadLocalRandom;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +    // Start writers, +        .forEach(i -> executeService.submit(new Writer("Writer " + i, lock.writeLock(), , +            ThreadLocalRandom.current().nextLong(5000))));, +    LOGGER.info("Writers added...");, +    // Start readers, +        .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , +            ThreadLocalRandom.current().nextLong(10))));, +    LOGGER.info("Readers added...");, +    , +    try {, +      Thread.sleep(5000L);, +    } catch (InterruptedException e) {, +      LOGGER.error("Error sleeping before adding more readers", e);, +      Thread.currentThread().interrupt();, +    }, +, +    // Start readers, +    IntStream.range(6, 10), +        .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , +            ThreadLocalRandom.current().nextLong(10))));, +    LOGGER.info("More readers added...");, +    , +    , +, +      LOGGER.error("Error waiting for ExecutorService shutdown", e);, +      Thread.currentThread().interrupt();, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, +import java.util.concurrent.ThreadLocalRandom;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +    // Start writers, +        .forEach(i -> executeService.submit(new Writer("Writer " + i, lock.writeLock(), , +            ThreadLocalRandom.current().nextLong(5000))));, +    LOGGER.info("Writers added...");, +    // Start readers, +        .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , +            ThreadLocalRandom.current().nextLong(10))));, +    LOGGER.info("Readers added...");, +    , +    try {, +      Thread.sleep(5000L);, +    } catch (InterruptedException e) {, +      LOGGER.error("Error sleeping before adding more readers", e);, +      Thread.currentThread().interrupt();, +    }, +, +    // Start readers, +    IntStream.range(6, 10), +        .forEach(i -> executeService.submit(new Reader("Reader " + i, lock.readLock(), , +            ThreadLocalRandom.current().nextLong(10))));, +    LOGGER.info("More readers added...");, +    , +    , +, +      LOGGER.error("Error waiting for ExecutorService shutdown", e);, +      Thread.currentThread().interrupt();, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/Reader.java, +import java.util.concurrent.locks.Lock;, +, +  private long readingTime;, +, +  /**, +   * Create new Reader, +   * , +   * @param name - Name of the thread owning the reader, +   * @param readLock - Lock for this reader, +   * @param readingTime - amount of time (in milliseconds) for this reader to engage reading, +   */, +  public Reader(String name, Lock readLock, long readingTime) {, +    this.readingTime = readingTime;, +  }, +  , +  /**, +   * Create new Reader who reads for 250ms, +   * , +   * @param name - Name of the thread owning the reader, +   * @param readLock - Lock for this reader, +   */, +  public Reader(String name, Lock readLock) {, +    this(name, readLock, 250L);, +      LOGGER.info("InterruptedException when reading", e);, +      Thread.currentThread().interrupt();, +    Thread.sleep(readingTime);, +    LOGGER.info("{} finish after reading {}ms", name, readingTime);, +++ b/reader-writer-lock/src/main/java/com/iluwatar/reader/writer/lock/App.java, +import java.util.concurrent.ThreadLocalRandom;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +    // Start writers, +        .forEach(i -> executeService.submit(new Writer("Writer " + i, lock.writeLock(), , +            ThreadLocalRandom.current().nextLong(5000))));, +    LOGGER.info("Writers added...");, +    // Start readers]