[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, +     * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., +     * Returns an Optional containing the first element of this iterable if present,, +     * else returns Optional.empty()., +, +    /**, +     * Returns the contents of this Iterable as a List., +     * @return a List representation of this Iterable, +     */, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, +     * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., +     * Returns an Optional containing the first element of this iterable if present,, +     * else returns Optional.empty()., +, +    /**, +     * Returns the contents of this Iterable as a List., +     * @return a List representation of this Iterable, +     */, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, +     * Precomputes and saves the next element of the Iterable. null is considered as end of data., +     * Returns the next element of the Iterable., +     * @return the next element of the Iterable, or null if not present., +        if (next == null) {, +            return fromIterator.next();, +        } else {, +            final TYPE result = next;, +    }, +     * Computes the next object of the Iterable. Can be implemented to, +     * realize custom behaviour for an iteration process. null is considered as end of data., +     * @return the next element of the Iterable., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, +     * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., +     * Returns an Optional containing the first element of this iterable if present,, +     * else returns Optional.empty()., +, +    /**, +     * Returns the contents of this Iterable as a List., +     * @return a List representation of this Iterable, +     */, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, +     * Precomputes and saves the next element of the Iterable. null is considered as end of data., +     * Returns the next element of the Iterable., +     * @return the next element of the Iterable, or null if not present., +        if (next == null) {, +            return fromIterator.next();, +        } else {, +            final TYPE result = next;, +    }, +     * Computes the next object of the Iterable. Can be implemented to, +     * realize custom behaviour for an iteration process. null is considered as end of data., +     * @return the next element of the Iterable., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, +     * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., +                        while(fromIterator.hasNext()) {, +     * @return an Optional containing the first object of this Iterable, +        Iterator<TYPE> resultIterator = first(1).iterator();, +        return resultIterator.hasNext() ? Optional.of(resultIterator.next()) : Optional.empty();, +     * Can be used to collect objects from the iteration., +     * @return an Optional containing the last object of this Iterable, +        Iterator<TYPE> resultIterator = last(1).iterator();, +        return resultIterator.hasNext() ? Optional.of(resultIterator.next()) : Optional.empty();, +     * Can be used to collect objects from the Iterable. Is a terminating operation., +     * This operation is memory intensive, because the contents of this Iterable, +     * are collected into a List, when the next object is requested., +                        while(oldTypeIterator.hasNext()) {, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, +     * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., +     * Returns an Optional containing the first element of this iterable if present,, +     * else returns Optional.empty()., +, +    /**, +     * Returns the contents of this Iterable as a List., +     * @return a List representation of this Iterable, +     */, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, +     * Precomputes and saves the next element of the Iterable. null is considered as end of data., +     * Returns the next element of the Iterable., +     * @return the next element of the Iterable, or null if not present., +        if (next == null) {, +            return fromIterator.next();, +        } else {, +            final TYPE result = next;, +    }, +     * Computes the next object of the Iterable. Can be implemented to, +     * realize custom behaviour for an iteration process. null is considered as end of data., +     * @return the next element of the Iterable., +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, +     * Filters the contents of Iterable using the given predicate, leaving only the ones which satisfy the predicate., +                        while(fromIterator.hasNext()) {, +     * @return an Optional containing the first object of this Iterable, +        Iterator<TYPE> resultIterator = first(1).iterator();, +        return resultIterator.hasNext() ? Optional.of(resultIterator.next()) : Optional.empty();, +     * Can be used to collect objects from the iteration., +     * @return an Optional containing the last object of this Iterable, +        Iterator<TYPE> resultIterator = last(1).iterator();, +        return resultIterator.hasNext() ? Optional.of(resultIterator.next()) : Optional.empty();, +     * Can be used to collect objects from the Iterable. Is a terminating operation., +     * This operation is memory intensive, because the contents of this Iterable, +     * are collected into a List, when the next object is requested., +                        while(oldTypeIterator.hasNext()) {]