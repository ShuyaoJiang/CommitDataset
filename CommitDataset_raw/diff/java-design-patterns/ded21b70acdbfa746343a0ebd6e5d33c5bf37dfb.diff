[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java, +import com.iluwatar.fluentinterface.fluentiterable.lazy.LazyFluentIterable;, +import com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable;, +import java.util.*;, +import static java.lang.String.valueOf;, +, +        List<Integer> firstFiveNegatives = SimpleFluentIterable.from(integerList), +        List<Integer> lastTwoPositives = SimpleFluentIterable.from(integerList), +        SimpleFluentIterable.from(integerList), +        List<String> transformedList = SimpleFluentIterable.from(integerList), +, +        List<String> lastTwoOfFirstFourStringMapped = LazyFluentIterable.from(integerList), +                .filter(positives()), +                .first(4), +                .last(2), +                .map(number -> "String[" + String.valueOf(number) + "]"), +                .asList();, +        prettyPrint("The lazy list contains the last two of the first four positive numbers mapped to Strings: ", lastTwoOfFirstFourStringMapped);, +, +        LazyFluentIterable.from(integerList), +                .filter(negatives()), +                .first(2), +                .last(), +                .ifPresent(lastOfFirstTwo -> System.out.println(String.format("The last of the first two negatives is: %d", lastOfFirstTwo)));, +        return integer -> "String[" + valueOf(integer) + "]";, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java, +import com.iluwatar.fluentinterface.fluentiterable.lazy.LazyFluentIterable;, +import com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable;, +import java.util.*;, +import static java.lang.String.valueOf;, +, +        List<Integer> firstFiveNegatives = SimpleFluentIterable.from(integerList), +        List<Integer> lastTwoPositives = SimpleFluentIterable.from(integerList), +        SimpleFluentIterable.from(integerList), +        List<String> transformedList = SimpleFluentIterable.from(integerList), +, +        List<String> lastTwoOfFirstFourStringMapped = LazyFluentIterable.from(integerList), +                .filter(positives()), +                .first(4), +                .last(2), +                .map(number -> "String[" + String.valueOf(number) + "]"), +                .asList();, +        prettyPrint("The lazy list contains the last two of the first four positive numbers mapped to Strings: ", lastTwoOfFirstFourStringMapped);, +, +        LazyFluentIterable.from(integerList), +                .filter(negatives()), +                .first(2), +                .last(), +                .ifPresent(lastOfFirstTwo -> System.out.println(String.format("The last of the first two negatives is: %d", lastOfFirstTwo)));, +        return integer -> "String[" + valueOf(integer) + "]";, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Optional;, + * This interface defines common operations, but, +public interface FluentIterable<TYPE> extends Iterable<TYPE> {, +     * Filters the iteration with the given predicate., +     * @return a filtered FluentIterable, +    FluentIterable<TYPE> filter(Predicate<? super TYPE> predicate);, +     * for each object of the iterator. This is a terminating operation., +    void forEachDo(Consumer<? super TYPE> action);, +     * Evaluates the iteration and returns the first element. This is a terminating operation., +     * @return the first element after the iteration is evaluated, +    Optional<TYPE> first();, +     * Evaluates the iteration and leaves only the count first elements., +     * @return the first count elements as an Iterable, +    FluentIterable<TYPE> first(int count);, +     * Evaluates the iteration and returns the last element. This is a terminating operation., +     * @return the last element after the iteration is evaluated, +    Optional<TYPE> last();, +     * Evaluates the iteration and leaves only the count last elements., +     * @return the last counts elements as an Iterable, +    FluentIterable<TYPE> last(int count);, +    <NEW_TYPE> FluentIterable<NEW_TYPE> map(Function<? super TYPE, NEW_TYPE> function);, +    List<TYPE> asList();, +     * Utility method that iterates over iterable and adds the contents to a list., +     * @param iterable the iterable to collect, +     * @param <TYPE> the type of the objects to iterate, +     * @return a list with all objects of the given iterator, +    static <TYPE> List<TYPE> copyToList(Iterable<TYPE> iterable) {, +        ArrayList<TYPE> copy = new ArrayList<>();, +        Iterator<TYPE> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/App.java, +import com.iluwatar.fluentinterface.fluentiterable.lazy.LazyFluentIterable;, +import com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable;, +import java.util.*;, +import static java.lang.String.valueOf;, +, +        List<Integer> firstFiveNegatives = SimpleFluentIterable.from(integerList), +        List<Integer> lastTwoPositives = SimpleFluentIterable.from(integerList), +        SimpleFluentIterable.from(integerList), +        List<String> transformedList = SimpleFluentIterable.from(integerList), +, +        List<String> lastTwoOfFirstFourStringMapped = LazyFluentIterable.from(integerList), +                .filter(positives()), +                .first(4), +                .last(2), +                .map(number -> "String[" + String.valueOf(number) + "]"), +                .asList();]