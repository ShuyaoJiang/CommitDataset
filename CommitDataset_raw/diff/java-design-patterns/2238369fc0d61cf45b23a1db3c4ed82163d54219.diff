[+++ b/README.md, +* control access to another object, +* lazy initialization, +* when network hits are expensive and time consuming, +* when we want some objects to perform a common action and don't want to define this action as a method in every class., +* you want to avoid explicit null checks and keep the algorithm elegant and easy to read., +* Event Aggregator is a good choice when you have lots of objects that are, +  potential event sources. Rather than have the observer deal with registering, +  with them all, you can centralize the registration logic to the Event, +  Aggregator. As well as simplifying registration, a Event Aggregator also, +  simplifies the memory management issues in using observers., +* when some arbitrary synchronous or asynchronous action must be performed after execution of some defined activity., +* you use an API that requires methods to be called in pairs such as open/close or allocate/deallocate., +* you need to select a subset of objects based on some criteria, and to refresh the selection at various times, +* you need to check that only suitable objects are used for a certain role (validation), +* the communication schema can evolve and change and yet the receiving side should not break, +* you want to focus on creating explicit and understandable update paths for your application's data, which makes tracing changes during development simpler and makes bugs easier to track down and fix., +* the dynamic behavior is not defined only based on receiving object's type but also on the receiving method's parameter type., +* you have a large number of short-lived tasks to be executed in parallel, +* you have multiple independent tasks that can run in parallel, +* you need to improve the performance of a group of sequential tasks, +* you have limited amount of processing capacity or long running tasks and the, +  caller should not wait the tasks to be ready, +* you want to prevent write access to class data members, +* the objects are expensive to create (allocation cost), +* you need a large number of short-lived objects (memory fragmentation), +* when you need to remove knowledge of concrete implementation from object, +* to enable unit testing of classes in isolation using mock objects or stubs, +* you are prototyping and need fast development cycle, +* an autogenerated user interface is good enough, +* you want to automatically publish the domain as REST services, +* a system possesses following characteristics:, +  * the system must perform tasks in response to external events that occur asynchronously, like hardware interrupts in OS, +  * it is inefficient to dedicate separate thread of control to perform synchronous I/O for each external source of event, +  * the higher level tasks in the system can be simplified significantly if I/O is performed synchronously., +* one or more tasks in a system must run in a single thread of control, while other tasks may benefit from multi-threading., +1. If there is no issue for the new pattern yet, raise new issue. Comment on, +   the issue that you are working on it so that others don't start work on the, +   same thing., +3. Implement the code changes in your fork. Remember to add sufficient comments, +   documenting the implementation. Reference the issue id e.g. #52 in your, +   commit messages., +4. Implement the code changes in your fork. Remember to add sufficient comments, +   documenting the implementation. Reference the issue id e.g. #52 in your, +   commit messages.]