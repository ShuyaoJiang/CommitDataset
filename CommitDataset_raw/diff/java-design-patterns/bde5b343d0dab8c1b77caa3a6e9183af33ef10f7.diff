[+++ b/abstract-factory/src/main/java/com/iluwatar/App.java, + * The essence of the Abstract Factory pattern is a factory interface, + * (KingdomFactory) and its implementations (ElfKingdomFactory,, + * OrcKingdomFactory)., + * The example uses both concrete implementations to create a king, a castle and, + * an army., +public class App {, +, +    public static void main(String[] args) {, +++ b/abstract-factory/src/main/java/com/iluwatar/App.java, + * The essence of the Abstract Factory pattern is a factory interface, + * (KingdomFactory) and its implementations (ElfKingdomFactory,, + * OrcKingdomFactory)., + * The example uses both concrete implementations to create a king, a castle and, + * an army., +public class App {, +, +    public static void main(String[] args) {, +++ b/adapter/src/main/java/com/iluwatar/App.java, + * There are two variations of the Adapter pattern: The class adapter implements, + * the adaptee's interface whereas the object adapter uses composition to, + * contain the adaptee in the adapter object. This example uses the object, + * adapter approach., + * The Adapter (GnomeEngineer) converts the interface of the target class, + * (GoblinGlider) into a suitable one expected by the client, + * (GnomeEngineeringManager)., +public class App {, +, +    public static void main(String[] args) {, +++ b/abstract-factory/src/main/java/com/iluwatar/App.java, + * The essence of the Abstract Factory pattern is a factory interface, + * (KingdomFactory) and its implementations (ElfKingdomFactory,, + * OrcKingdomFactory)., + * The example uses both concrete implementations to create a king, a castle and, + * an army., +public class App {, +, +    public static void main(String[] args) {, +++ b/adapter/src/main/java/com/iluwatar/App.java, + * There are two variations of the Adapter pattern: The class adapter implements, + * the adaptee's interface whereas the object adapter uses composition to, + * contain the adaptee in the adapter object. This example uses the object, + * adapter approach., + * The Adapter (GnomeEngineer) converts the interface of the target class, + * (GoblinGlider) into a suitable one expected by the client, + * (GnomeEngineeringManager)., +public class App {, +, +    public static void main(String[] args) {, +++ b/bridge/src/main/java/com/iluwatar/App.java, + * In Bridge pattern both abstraction (MagicWeapon) and implementation, + * (MagicWeaponImp) have their own class hierarchies. The interface of the, + * implementations can be changed without affecting the clients., +public class App {, +, +    public static void main(String[] args) {, +++ b/abstract-factory/src/main/java/com/iluwatar/App.java, + * The essence of the Abstract Factory pattern is a factory interface, + * (KingdomFactory) and its implementations (ElfKingdomFactory,, + * OrcKingdomFactory)., + * The example uses both concrete implementations to create a king, a castle and, + * an army., +public class App {, +, +    public static void main(String[] args) {, +++ b/adapter/src/main/java/com/iluwatar/App.java, + * There are two variations of the Adapter pattern: The class adapter implements, + * the adaptee's interface whereas the object adapter uses composition to, + * contain the adaptee in the adapter object. This example uses the object, + * adapter approach., + * The Adapter (GnomeEngineer) converts the interface of the target class, + * (GoblinGlider) into a suitable one expected by the client, + * (GnomeEngineeringManager)., +public class App {, +, +    public static void main(String[] args) {, +++ b/bridge/src/main/java/com/iluwatar/App.java, + * In Bridge pattern both abstraction (MagicWeapon) and implementation, + * (MagicWeaponImp) have their own class hierarchies. The interface of the, + * implementations can be changed without affecting the clients., +public class App {, +, +    public static void main(String[] args) {, +++ b/builder/src/main/java/com/iluwatar/App.java, + * This is the Builder pattern variation as described by Joshua Bloch in, + * Effective Java 2nd Edition., + * We want to build Hero objects, but its construction is complex because of the, + * many parameters needed. To aid the user we introduce HeroBuilder class., + * HeroBuilder takes the minimum parameters to build Hero object in its, + * constructor. After that additional configuration for the Hero object can be, + * done using the fluent HeroBuilder interface. When configuration is ready the, + * build method is called to receive the final Hero object., +public class App {, +, +    public static void main(String[] args) {, +++ b/abstract-factory/src/main/java/com/iluwatar/App.java, + * The essence of the Abstract Factory pattern is a factory interface, + * (KingdomFactory) and its implementations (ElfKingdomFactory,, + * OrcKingdomFactory)., + * The example uses both concrete implementations to create a king, a castle and]