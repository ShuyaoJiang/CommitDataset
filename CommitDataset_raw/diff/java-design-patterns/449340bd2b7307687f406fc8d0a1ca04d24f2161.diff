[+++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling, retrying etc., + * In this example the client ({@link Client}) utilizes a business delegate (, + * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate, + * service and makes the service call., +   * , +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling, retrying etc., + * In this example the client ({@link Client}) utilizes a business delegate (, + * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate, + * service and makes the service call., +   * , +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessDelegate.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling, retrying etc., + * In this example the client ({@link Client}) utilizes a business delegate (, + * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate, + * service and makes the service call., +   * , +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessDelegate.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessLookup.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling, retrying etc., + * In this example the client ({@link Client}) utilizes a business delegate (, + * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate, + * service and makes the service call., +   * , +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessDelegate.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessLookup.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessService.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling, retrying etc., + * In this example the client ({@link Client}) utilizes a business delegate (, + * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate, + * service and makes the service call., +   * , +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessDelegate.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessLookup.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessService.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/Client.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling, retrying etc., + * In this example the client ({@link Client}) utilizes a business delegate (, + * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate, + * service and makes the service call., +   * , +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessDelegate.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessLookup.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessService.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/Client.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/EjbService.java, +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/App.java, + * The Business Delegate pattern adds an abstraction layer between the presentation and business, + * tiers. By using the pattern we gain loose coupling between the tiers. The Business Delegate, + * encapsulates knowledge about how to locate, connect to, and interact with the business objects, + * that make up the application., + * Some of the services the Business Delegate uses are instantiated directly, and some can be, + * retrieved through service lookups. The Business Delegate itself may contain business logic too, + * potentially tying together multiple service calls, exception handling, retrying etc., + * In this example the client ({@link Client}) utilizes a business delegate (, + * {@link BusinessDelegate}) to execute a task. The Business Delegate then selects the appropriate, + * service and makes the service call., +   * , +++ b/business-delegate/src/main/java/com/iluwatar/business/delegate/BusinessDelegate.java]