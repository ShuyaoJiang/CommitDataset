[+++ b/.travis.yml, +, +# Migration to container-based infrastructure  , +sudo: false, +++ b/.travis.yml, +, +# Migration to container-based infrastructure  , +sudo: false, +++ b/README.md, +Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system., +Design patterns can speed up the development process by providing tested, proven development paradigms., +Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns., +Creational design patterns abstract the instantiation process. They help make a system independent of how its objects are created, composed, and represented., +Structural patterns are concerned with how classes and objects are composed to form larger structures., +Behavioral patterns are concerned with algorithms and the assignment of responsibilities between objects., +Concurrency patterns are those types of design patterns that deal with the multi-threaded programming paradigm., +Presentation Tier patterns are the top-most level of the application, this is concerned with translating tasks and results to something the user can understand., +An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context., +Integration patterns are concerned with how software applications communicate and exchange data., +A programming idiom is a means of expressing a recurring construct in one or more programming languages. Generally speaking, a programming idiom is an expression of a simple task, algorithm, or data structure that is not a built-in feature in the programming language being used, or, conversely, the use of an unusual or notable feature that is built into a programming language. What distinguishes idioms from patterns is generally the size, the idioms tend to be something small while the patterns are larger., +**Intent:** Provide an interface for creating families of related or dependent objects without specifying their concrete classes., +**Intent:** Separate the construction of a complex object from its representation so that the same construction process can create different representations., +**Intent:** Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses., +**Intent:** Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype., +**Intent:** Ensure a class only has one instance, and provide a global point of access to it., +**Intent:** Convert the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces., +**Intent:** Decouple an abstraction from its implementation so that the two can vary independently., +**Intent:** Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly., +**Intent:** Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality., +**Intent:** Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use., +**Intent:** Use sharing to support large numbers of fine-grained objects efficiently., +**Applicability:** The Flyweight pattern's effectiveness depends heavily on how and where it's used. Apply the Flyweight pattern when all of the following are true, +**Intent:** Provide a surrogate or placeholder for another object to control access to it., +**Applicability:** Proxy is applicable whenever there is a need for a more versatile or sophisticated reference to an object than a simple pointer. Here are several common situations in which the Proxy pattern is applicable, +**Intent:** Encapsulate the processes involved in obtaining a service with a strong abstraction layer., +**Applicability:** The service locator pattern is applicable whenever we want to locate/fetch various services using JNDI which, typically, is a redundant and expensive lookup. The service Locator pattern addresses this expensive lookup by making use of caching techniques ie. for the very first time a particular service is requested, the service Locator looks up in JNDI, fetched the relevant service and then finally caches this service object. Now, further lookups of the same service via Service Locator is done in its cache which improves the performance of application to great extent., +**Intent:** Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it., +**Intent:** Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations., +**Intent:** Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language., +**Applicability:** Use the Interpreter pattern when there is a language to interpret, and you can represent statements in the language as abstract syntax trees. The Interpreter pattern works best when, +**Intent:** Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation., +**Intent:** Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently., +**Intent:** Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later., +**Intent:** Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically., +**Intent:** Allow an object to alter its behavior when its internal state changes. The object will appear to change its class., +**Intent:** Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it., +**Intent:** Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure., +**Intent:** Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates., +**Intent:** Apply a "Separation of Concerns" principle in a way that allows developers to build and test user interfaces., +**Applicability:** Use the Model-View-Presenter in any of the following situations, +**Intent:** Object provides an abstract interface to some type of database or other persistence mechanism., +**Intent:** Reduce the overhead of acquiring a lock by first testing the locking criterion (the "lock hint") without actually acquiring the lock. Only if the locking criterion check indicates that locking is required does the actual locking logic proceed., +**Intent:** Servant is used for providing some behavior to a group of classes. Instead of defining that behavior in each class - or when we cannot factor out this behavior in the common parent class - it is defined once in the Servant., +**Intent:** In most object-oriented languages, such as Java or C#, references may be null. These references need to be checked to ensure they are not null before invoking any methods, because methods typically cannot be invoked on null references. Instead of using a null reference to convey absence of an object (for instance, a non-existent customer), one uses an object which implements the expected interface, but whose method body is empty. The advantage of this approach over a working default implementation is that a Null Object is very predictable and has no side effects: it does nothing., +**Intent:** A system with lots of objects can lead to complexities when a client wants to subscribe to events. The client has to find and register for each object individually, if each object has multiple events then each event requires a separate subscription. An Event Aggregator acts as a single source of events for many objects. It registers for all the events of the many objects allowing clients to register with just the aggregator., +**Intent:** Callback is a piece of executable code that is passed as an argument to other code, which is expected to call back (execute) the argument at some convenient time., +**Intent:** Provide pluggable filters to conduct necessary pre-processing and post-processing to requests from a client to a target, +**Intent:** Execute Around idiom frees the user from certain actions that should always be executed before and after the business method. A good example of this is resource allocation and deallocation leaving the user to specify only what to do with the resource., +**Intent:** Create hierarchy of objects and new objects using already existing objects as parents., +**Intent:** Poison Pill is known predefined data item that allows to provide graceful shutdown for separate distributed consumption process., +**Intent:** Lazy loading is a design pattern commonly used to defer initialization of an object until the point at which it is needed. It can contribute to efficiency in the program's operation if properly and appropriately used., +**Intent:** Service Layer is an abstraction over domain logic. Typically applications require multiple kinds of interfaces to the data, +they store and logic they implement: data loaders, user interfaces, integration gateways, and others. Despite their different purposes, these interfaces often need common interactions with the application to access and manipulate its data and invoke its business logic. The Service Layer fulfills this role., +**Intent:** Specification pattern separates the statement of how to match a candidate, from the, +candidate object that it is matched against. As well as its usefulness in selection, it is also valuable for, +validation and for building to order, +**Intent:** Tolerant Reader is an integration pattern that helps creating robust communication systems. The idea is to be as tolerant as possible when reading data from another service. This way, when the communication schema changes, the readers must not break., +**Intent:** Separate the user interface into three interconnected components: the model, the view and the controller. Let the model manage the data, the view display the data and the controller mediate updating the data and redrawing the display., +**Intent:** Flux eschews MVC in favor of a unidirectional data flow. When a user interacts with a view, the view propagates an action through a central dispatcher, to the various stores that hold the application's data and business logic, which updates all of the views that are affected., +**Intent:** Double Dispatch pattern is a way to create maintainable dynamic behavior based on receiver and parameter types., +**Intent:** Ensure a class only has limited number of instances, and provide a global point of access to them., +* You have resources that must be closed in every condition, +**Intent:** It is often the case that tasks to be executed are short-lived and the number of tasks is large. Creating a new thread for each task would make the system spend more time creating and destroying the threads than executing the actual tasks. Thread Pool solves this problem by reusing existing threads and eliminating the latency of creating new threads., +**Intent:** Asynchronous method invocation is pattern where the calling thread is not blocked while waiting results of tasks. The pattern provides parallel processing of multiple independent tasks and retrieving the results via callbacks or waiting until everything is done. , +**Intent:** Private Class Data design pattern seeks to reduce exposure of attributes by limiting their visibility. It reduces the number of class attributes by encapsulating them in single Data object., +**Intent:** When objects are expensive to create and they are needed only for short periods of time it is advantageous to utilize the Object Pool pattern. The Object Pool provides a cache for instantiated objects tracking which ones are in use and which are available., +**Intent:** Dependency Injection is a software design pattern in which one or more dependencies (or services) are injected, or passed by reference, into a dependent object (or client) and are made part of the client's state. The pattern separates the creation of a client's dependencies from its own behavior, which allows program designs to be loosely coupled and to follow the inversion of control and single responsibility principles., +**Intent:** The Naked Objects architectural pattern is well suited for rapid prototyping. Using the pattern, you only need to write the domain objects, everything else is autogenerated by the framework., +**Intent:** Introduce a common handler for all requests for a web site. This way we can encapsulate common functionality such as security, internationalization, routing and logging in a single place., +**Intent:** Repository layer is added between the domain and data mapping layers to isolate domain objects from details of the database access code and to minimize scattering and duplication of query code. The Repository pattern is especially useful in systems where number of domain classes is large or heavy querying is utilized., +**Intent:** The Business Delegate pattern adds an abstraction layer between presentation and business tiers. By using the pattern we gain loose coupling between the tiers and encapsulate knowledge about how to locate, connect to, and interact with the business objects that make up the application., +**Intent:** The Half-Sync/Half-Async pattern decouples synchronous I/O from asynchronous I/O in a system to simplify concurrent programming effort without degrading execution efficiency., +While the implementation is similar they solve different problems. The State pattern deals with what state an object is in - it encapsulates state-dependent behavior. The Strategy pattern deals with how an object performs a certain task - it encapsulates an algorithm., +In Template Method the algorithm is chosen at compile time via inheritance. With Strategy pattern the algorithm is chosen at runtime via composition., +The difference is the intent of the patterns. While Proxy controls access to the object Decorator is used to add responsibilities to the object., +While the implementations look similar there are differences. The Chain of Responsibility forms a chain of request processors and the processors are then executed one by one until the correct processor is found. In Intercepting Filter the chain is constructed from filters and the whole chain is always executed., +The Visitor pattern is a means of adding a new operation to existing classes. Double dispatch is a means of dispatching function calls with respect to two polymorphic types, rather than a single polymorphic type, which is what languages like C++ and Java _do not_ support directly., +Pooled objects can simultaneously be used by a single "client" only. For that, a pooled object must be checked out from the pool, then it can be used by a client, and then the client must return the object back to the pool. Multiple instances of identical objects may exist, up to the maximal capacity of the pool., +In contrast, a Flyweight object is singleton, and it can be used simultaneously by multiple clients., +As for concurrent access, pooled objects can be mutable and they usually don't need to be thread safe, as typically, only one thread is going to use a specific instance at the same time. Flyweight must either be immutable (the best option), or implement thread safety., +As for performance and scalability, pools can become bottlenecks, if all the pooled objects are in use and more clients need them, threads will become blocked waiting for available object from the pool. This is not the case with Flyweight., +**Links to patterns applied in real world applications** are welcome. The links should be added to the corresponding section of the `README.md`., +, +Java-design-patterns project uses [semantic versioning](http://semver.org/) scheme. However, version numbers in this project do not signify binary releases (since we don't make any) but rather milestones achieved on the roadmap. In other words, version numbers are used only for project planning sake., +, +]