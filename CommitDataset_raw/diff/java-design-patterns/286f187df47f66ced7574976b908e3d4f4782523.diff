[+++ /dev/null, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, +  private static final String DEFAULT_URL = "https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/promise/README.md";, +++ /dev/null, +++ b/dao/src/main/java/com/iluwatar/dao/DbCustomerDao.java, +            throw new RuntimeException(e);, +      throw new Exception(e.getMessage(), e);, +      e.printStackTrace();, +      ResultSet resultSet = statement.executeQuery();, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +      throw new Exception(ex.getMessage(), ex);, +++ b/promise/src/main/java/com/iluwatar/promise/App.java, +  private static final String DEFAULT_URL = "https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/promise/README.md";, +++ b/promise/src/main/java/com/iluwatar/promise/PromiseSupport.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(PromiseSupport.class);, +, +      while (state == RUNNING) {, +      }, +    }, +    } , +      throws  ExecutionException, TimeoutException {, +      while (state == RUNNING) {, +        try {, +        } catch (InterruptedException e) {, +          LOGGER.warn("Interrupted!", e);, +          Thread.currentThread().interrupt();, +        }, +      }, +    }, +    , +    } ]