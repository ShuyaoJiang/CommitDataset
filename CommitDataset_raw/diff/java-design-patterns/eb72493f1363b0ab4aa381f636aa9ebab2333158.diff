[+++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is inserted");, +    }, +, +      log.debug("App.main(), student : " + studentToBeFound + ", is searched");, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is updated");, +    }, +, +, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is deleted");, +    }, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is inserted");, +    }, +, +      log.debug("App.main(), student : " + studentToBeFound + ", is searched");, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is updated");, +    }, +, +, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is deleted");, +    }, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/StudentMySQLDataMapper.java, +import java.util.ArrayList;, +  private List<Student> students = new ArrayList<>();, +    for (final Student student : this.getStudents()) {, +    if (this.getStudents().contains(studentToBeUpdated)) {, +      final int index = this.getStudents().indexOf(studentToBeUpdated);, +      this.getStudents().set(index, studentToBeUpdated);, +    if (!this.getStudents().contains(studentToBeInserted)) {, +      this.getStudents().add(studentToBeInserted);, +    if (this.getStudents().contains(studentToBeDeleted)) {, +      this.getStudents().remove(studentToBeDeleted);, +, +  public List<Student> getStudents() {, +    return this.students;, +  }, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is inserted");, +    }, +, +      log.debug("App.main(), student : " + studentToBeFound + ", is searched");, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is updated");, +    }, +, +, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is deleted");, +    }, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/StudentMySQLDataMapper.java, +import java.util.ArrayList;, +  private List<Student> students = new ArrayList<>();, +    for (final Student student : this.getStudents()) {, +    if (this.getStudents().contains(studentToBeUpdated)) {, +      final int index = this.getStudents().indexOf(studentToBeUpdated);, +      this.getStudents().set(index, studentToBeUpdated);, +    if (!this.getStudents().contains(studentToBeInserted)) {, +      this.getStudents().add(studentToBeInserted);, +    if (this.getStudents().contains(studentToBeDeleted)) {, +      this.getStudents().remove(studentToBeDeleted);, +, +  public List<Student> getStudents() {, +    return this.students;, +  }, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/StudentOracleDataMapper.java, +import java.util.ArrayList;, +  private List<Student> students = new ArrayList<>();, +    for (final Student student : this.getStudents()) {, +    if (this.getStudents().contains(studentToBeUpdated)) {, +      final int index = this.getStudents().indexOf(studentToBeUpdated);, +      this.getStudents().set(index, studentToBeUpdated);, +    if (!this.getStudents().contains(studentToBeInserted)) {, +      this.getStudents().add(studentToBeInserted);, +    if (this.getStudents().contains(studentToBeDeleted)) {, +      this.getStudents().remove(studentToBeDeleted);, +, +  public List<Student> getStudents() {, +    return this.students;, +  }, +++ b/data-mapper/src/main/java/com/iluwatar/datamapper/App.java, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is inserted");, +    }, +, +      log.debug("App.main(), student : " + studentToBeFound + ", is searched");, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is updated");, +    }, +, +, +    if (log.isDebugEnabled()) {, +      log.debug("App.main(), student : " + student + ", is deleted");]