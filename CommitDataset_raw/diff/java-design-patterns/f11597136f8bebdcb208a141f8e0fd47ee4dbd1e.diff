[+++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, +  /**, +   * Program entry point., +   *, +   * @param args command line args, +   */, +        System.out.println(propFileName + " was not found. Defaulting to non-interactive mode.");, +  /**, +   * Run program in either interactive mode or not., +   */, +  /**, +   * Run program in non-interactive mode., +   */, +      int aEventId = eventManager.createAsyncEvent(60);, +      System.out.println("Event [" + aEventId + "] has been created.");, +      eventManager.startEvent(aEventId);, +      System.out.println("Event [" + aEventId + "] has been started.");, +      int sEventId = eventManager.createSyncEvent(60);, +      System.out.println("Event [" + sEventId + "] has been created.");, +      eventManager.startEvent(sEventId);, +      System.out.println("Event [" + sEventId + "] has been started.");, +      eventManager.getStatus(aEventId);, +      eventManager.getStatus(sEventId);, +      eventManager.stopEvent(aEventId);, +      System.out.println("Event [" + aEventId + "] has been stopped.");, +      eventManager.stopEvent(sEventId);, +      System.out.println("Event [" + sEventId + "] has been stopped.");, +  /**, +   * Run program in interactive mode., +   */, +            int eventId = eventManager.createAsyncEvent(eventTime);, +            System.out.println("Event [" + eventId + "] has been created.");, +            eventManager.startEvent(eventId);, +            System.out.println("Event [" + eventId + "] has been started.");, +            int eventId = eventManager.createSyncEvent(eventTime);, +            System.out.println("Event [" + eventId + "] has been created.");, +            eventManager.startEvent(eventId);, +            System.out.println("Event [" + eventId + "] has been started.");, +        int eventId = s.nextInt();, +          eventManager.stopEvent(eventId);, +          System.out.println("Event [" + eventId + "] has been stopped.");, +        int eventId = s.nextInt();, +          eventManager.getStatus(eventId);, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, +  /**, +   * Program entry point., +   *, +   * @param args command line args, +   */, +        System.out.println(propFileName + " was not found. Defaulting to non-interactive mode.");, +  /**, +   * Run program in either interactive mode or not., +   */, +  /**, +   * Run program in non-interactive mode., +   */, +      int aEventId = eventManager.createAsyncEvent(60);, +      System.out.println("Event [" + aEventId + "] has been created.");, +      eventManager.startEvent(aEventId);, +      System.out.println("Event [" + aEventId + "] has been started.");, +      int sEventId = eventManager.createSyncEvent(60);, +      System.out.println("Event [" + sEventId + "] has been created.");, +      eventManager.startEvent(sEventId);, +      System.out.println("Event [" + sEventId + "] has been started.");, +      eventManager.getStatus(aEventId);, +      eventManager.getStatus(sEventId);, +      eventManager.stopEvent(aEventId);, +      System.out.println("Event [" + aEventId + "] has been stopped.");, +      eventManager.stopEvent(sEventId);, +      System.out.println("Event [" + sEventId + "] has been stopped.");, +  /**, +   * Run program in interactive mode., +   */, +            int eventId = eventManager.createAsyncEvent(eventTime);, +            System.out.println("Event [" + eventId + "] has been created.");, +            eventManager.startEvent(eventId);, +            System.out.println("Event [" + eventId + "] has been started.");, +            int eventId = eventManager.createSyncEvent(eventTime);, +            System.out.println("Event [" + eventId + "] has been created.");, +            eventManager.startEvent(eventId);, +            System.out.println("Event [" + eventId + "] has been started.");, +        int eventId = s.nextInt();, +          eventManager.stopEvent(eventId);, +          System.out.println("Event [" + eventId + "] has been stopped.");, +        int eventId = s.nextInt();, +          eventManager.getStatus(eventId);, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/Event.java, +  private int eventId;, +  public Event(int eventId, int eventTime) {, +    this.eventId = eventId;, +      System.out.println("[" + eventId + "] I am at not done. [" + counter + "%]");, +      System.out.println("[" + eventId + "] I am done.");, +      eventListener.notifyOfThreadComplete(eventId);, +++ b/event-asynchronous/src/main/java/com/iluwatar/event/asynchronous/App.java, +  /**, +   * Program entry point., +   *, +   * @param args command line args, +   */, +        System.out.println(propFileName + " was not found. Defaulting to non-interactive mode.");]