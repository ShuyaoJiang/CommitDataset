[+++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    troll = new ClubbedTroll(troll);, +    troll.attack();, +    troll.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    troll = new ClubbedTroll(troll);, +    troll.attack();, +    troll.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ /dev/null, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    troll = new ClubbedTroll(troll);, +    troll.attack();, +    troll.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ /dev/null, +++ /dev/null, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    troll = new ClubbedTroll(troll);, +    troll.attack();, +    troll.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    troll = new ClubbedTroll(troll);, +    troll.attack();, +    troll.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    troll = new ClubbedTroll(troll);, +    troll.attack();, +    troll.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ b/decorator/README.md, +troll = new ClubbedTroll(troll);, +troll.attack(); // The troll tries to grab you! The troll swings at you with a club!, +troll.fleeBattle(); // The troll shrieks in horror and runs away!, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, +    troll = new ClubbedTroll(troll);, +    troll.attack();, +    troll.fleeBattle();, +    LOGGER.info("Clubbed troll power {}.\n", troll.getAttackPower());, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/pom.xml, +++ b/proxy/README.md, +## Explanation, +Real world example, +, +> Imagine a tower where the local wizards go to study their spells. The ivory tower can only be accessed through a proxy which ensures that only the first three wizards can enter. Here the proxy represents the functionality of the tower and adds access control to it., +, +In plain words, +, +> Using the proxy pattern, a class represents the functionality of another class., +, +Wikipedia says, +, +> A proxy, in its most general form, is a class functioning as an interface to something else. A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.]