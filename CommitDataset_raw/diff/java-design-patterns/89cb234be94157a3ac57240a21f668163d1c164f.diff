[+++ b/README.md, +## <a name="abstract-factory">Abstract Factory</a> [&#8593;](#list-of-design-patterns), +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +, +![alt text](./abstract-factory/etc/abstract-factory_1.png "Abstract Factory"), +, +**Applicability:** Use the Abstract Factory pattern when, +* a system should be independent of how its products are created, composed and represented, +* a system should be configured with one of multiple families of products, +* a family of related product objects is designed to be used together, and you need to enforce this constraint, +* you want to provide a class library of products, and you want to reveal just their interfaces, not their implementations, +, +**Real world examples:**, +* [javax.xml.parsers.DocumentBuilderFactory](http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html), +, +## <a name="builder">Builder</a> [&#8593;](#list-of-design-patterns), +**Intent:** Separate the construction of a complex object from its, +representation so that the same construction process can create different, +representations., +, +![alt text](./builder/etc/builder_1.png "Builder"), +, +**Applicability:** Use the Builder pattern when, +* the algorithm for creating a complex object should be independent of the parts that make up the object and how they're assembled, +* the construction process must allow different representations for the object that's constructed, +, +**Real world examples:**, +* [java.lang.StringBuilder](http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html), +* [Apache Camel builders](https://github.com/apache/camel/tree/0e195428ee04531be27a0b659005e3aa8d159d23/camel-core/src/main/java/org/apache/camel/builder), +, +## <a name="factory-method">Factory Method</a> [&#8593;](#list-of-design-patterns), +**Intent:** Define an interface for creating an object, but let subclasses, +decide which class to instantiate. Factory Method lets a class defer, +instantiation to subclasses., +, +![alt text](./factory-method/etc/factory-method_1.png "Factory Method"), +, +**Applicability:** Use the Factory Method pattern when, +* a class can't anticipate the class of objects it must create, +* a class wants its subclasses to specify the objects it creates, +* classes delegate responsibility to one of several helper subclasses, and you want to localize the knowledge of which helper subclass is the delegate, +, +## <a name="prototype">Prototype</a> [&#8593;](#list-of-design-patterns), +**Intent:** Specify the kinds of objects to create using a prototypical, +instance, and create new objects by copying this prototype., +, +![alt text](./prototype/etc/prototype_1.png "Prototype"), +, +**Applicability:** Use the Prototype pattern when a system should be independent of how its products are created, composed and represented; and, +* when the classes to instantiate are specified at run-time, for example, by dynamic loading; or, +* to avoid building a class hierarchy of factories that parallels the class hierarchy of products; or, +* when instances of a class can have one of only a few different combinations of state. It may be more convenient to install a corresponding number of prototypes and clone them rather than instantiating the class manually, each time with the appropriate state, +, +**Real world examples:**, +* [java.lang.Object#clone()](http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone%28%29), +, +## <a name="singleton">Singleton</a> [&#8593;](#list-of-design-patterns), +**Intent:** Ensure a class only has one instance, and provide a global point of, +access to it., +, +![alt text](./singleton/etc/singleton_1.png "Singleton"), +, +**Applicability:** Use the Singleton pattern when, +* there must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +* when the sole instance should be extensible by subclassing, and clients should be able to use an extended instance without modifying their code, +, +**Typical Use Case:**, +* the logging class, +* managing a connection to a database, +* file manager, +, +**Real world examples:**, +* [java.lang.Runtime#getRuntime()](http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime%28%29), +, +## <a name="step-builder">Step Builder</a> [&#8593;](#list-of-design-patterns), +**Intent:** An extension of the Builder pattern that fully guides the user through the creation of the object with no chances of confusion., +The user experience will be much more improved by the fact that he will only see the next step methods available, NO build method until is the right time to build the object., +, +![alt text](./step-builder/etc/step-builder.png "Step Builder"), +, +**Applicability:** Use the Step Builder pattern when the algorithm for creating a complex object should be independent of the parts that make up the object and how they're assembled the construction process must allow different representations for the object that's constructed when in the process of constructing the order is important., +, +## <a name="adapter">Adapter</a> [&#8593;](#list-of-design-patterns), +**Intent:** Convert the interface of a class into another interface the clients, +expect. Adapter lets classes work together that couldn't otherwise because of, +incompatible interfaces., +, +![alt text](./adapter/etc/adapter_1.png "Adapter"), +, +**Applicability:** Use the Adapter pattern when, +* you want to use an existing class, and its interface does not match the one you need, +* you want to create a reusable class that cooperates with unrelated or unforeseen classes, that is, classes that don't necessarily have compatible interfaces, +* you need to use several existing subclasses, but it's impractical to adapt their interface by subclassing every one. An object adapter can adapt the interface of its parent class., +, +**Real world examples:**, +* [java.util.Arrays#asList()](http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList%28T...%29), +, +## <a name="bridge">Bridge</a> [&#8593;](#list-of-design-patterns), +**Intent:** Decouple an abstraction from its implementation so that the two can]