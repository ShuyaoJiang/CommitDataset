[+++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, + * This class is an implementation of {@link ICommandService} interface. It uses Hibernate as an api for persistence., +    Author author = null;, +    try (Session session = sessionFactory.openSession()) {, +      author = (Author) query.uniqueResult();, +    }, +    Book book = null;, +    try (Session session = sessionFactory.openSession()) {, +      book = (Book) query.uniqueResult();, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/commandes/CommandServiceImpl.java, + * This class is an implementation of {@link ICommandService} interface. It uses Hibernate as an api for persistence., +    Author author = null;, +    try (Session session = sessionFactory.openSession()) {, +      author = (Author) query.uniqueResult();, +    }, +    Book book = null;, +    try (Session session = sessionFactory.openSession()) {, +      book = (Book) query.uniqueResult();, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +    try (Session session = sessionFactory.openSession()) {, +    }, +++ b/cqrs/src/main/java/com/iluwatar/cqrs/queries/QueryServiceImpl.java, +    Author authorDTo = null;, +    try (Session session = sessionFactory.openSession()) {, +      authorDTo = (Author) sqlQuery.setResultTransformer(Transformers.aliasToBean(Author.class)).uniqueResult();, +    }, +    Book bookDTo = null;, +    try (Session session = sessionFactory.openSession()) {, +      bookDTo = (Book) sqlQuery.setResultTransformer(Transformers.aliasToBean(Book.class)).uniqueResult();, +    }, +    List<Book> bookDTos = null;, +    try (Session session = sessionFactory.openSession()) {, +      bookDTos = sqlQuery.setResultTransformer(Transformers.aliasToBean(Book.class)).list();, +    }, +    BigInteger bookcount = null;, +    try (Session session = sessionFactory.openSession()) {, +      bookcount = (BigInteger) sqlQuery.uniqueResult();, +    }, +    BigInteger authorcount = null;, +    try (Session session = sessionFactory.openSession()) {, +      authorcount = (BigInteger) sqlQuery.uniqueResult();, +    }]