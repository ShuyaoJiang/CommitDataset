[+++ b/README.md, +++ b/README.md, +++ b/interpreter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <groupId>com.iluwatar</groupId>, +  <artifactId>interpreter</artifactId>, +  <version>1.0-SNAPSHOT</version>, +  <name>interpreter</name>, +  <url>http://maven.apache.org</url>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>3.8.1</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/README.md, +++ b/interpreter/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <groupId>com.iluwatar</groupId>, +  <artifactId>interpreter</artifactId>, +  <version>1.0-SNAPSHOT</version>, +  <name>interpreter</name>, +  <url>http://maven.apache.org</url>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <version>3.8.1</version>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/interpreter/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +import java.util.Stack;, +, +public class App , +{, +	, +	/**, +	 * , +	 * Expressions can be evaluated using prefix, infix or postfix notations, +	 * This sample uses postfix, where operator comes after the operands, +	 * , +	 */, +    public static void main( String[] args ), +    {, +    	String tokenString = "4 3 2 - 1 + *";, +		Stack<Expression> stack = new Stack<>();, +, +		String[] tokenList = tokenString.split(" ");, +		for (String s : tokenList) {, +			if (isOperator(s)) {, +				Expression rightExpression = stack.pop();, +				Expression leftExpression = stack.pop();, +				System.out.println(String.format("popped from stack left: %d right: %d", , +						leftExpression.interpret(), rightExpression.interpret()));, +				Expression operator = getOperatorInstance(s, leftExpression,, +						rightExpression);, +				System.out.println(String.format("operator: %s", operator));, +				int result = operator.interpret();, +				NumberExpression resultExpression = new NumberExpression(result);, +				stack.push(resultExpression);, +				System.out.println(String.format("push result to stack: %d", resultExpression.interpret()));, +			} else {, +				Expression i = new NumberExpression(s);, +				stack.push(i);, +				System.out.println(String.format("push to stack: %d", i.interpret()));, +			}, +		}, +		System.out.println(String.format("result: %d", stack.pop().interpret()));    	, +    }, +    , +    public static boolean isOperator(String s) {, +		if (s.equals("+") || s.equals("-") || s.equals("*")), +			return true;, +		else, +			return false;, +	}, +]