[+++ b/converter/src/main/java/com/iluwatar/converter/App.java, +        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive()),, +        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive()));, +    User user = userConverter.convertFromDto(dtoUser);, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, +        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive()),, +        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive()));, +    User user = userConverter.convertFromDto(dtoUser);, +++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * @param <T> DTO representation's type, + * @param <U> Domain representation's type, +, +  private final Function<T, U> fromDto;, +   * @param fromDto Function that converts given dto entity into the domain entity., +   * @param fromEntity Function that converts given domain entity into the dto entity., +  public Converter(final Function<T, U> fromDto, final Function<U, T> fromEntity) {, +    this.fromDto = fromDto;, +   * @param arg DTO entity, +   * @return The domain representation - the result of the converting function application on dto entity., +  public U convertFromDto(final T arg) {, +    return fromDto.apply(arg);, +   * @param arg domain entity, +   * @return The DTO representation - the result of the converting function application on domain entity., +   * @param arg collection of DTO entities, +   * @return List of domain representation of provided entities retrieved by, +   *        mapping each of them with the convertion function, +  public List<U> createFromDtos(final Collection<T> arg) {, +    return arg.stream().map(this::convertFromDto).collect(Collectors.toList());, +   * @param arg collection of domain entities, +   * @return List of domain representation of provided entities retrieved by, +   *        mapping each of them with the convertion function, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, +        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive()),, +        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive()));, +    User user = userConverter.convertFromDto(dtoUser);, +++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * @param <T> DTO representation's type, + * @param <U> Domain representation's type, +, +  private final Function<T, U> fromDto;, +   * @param fromDto Function that converts given dto entity into the domain entity., +   * @param fromEntity Function that converts given domain entity into the dto entity., +  public Converter(final Function<T, U> fromDto, final Function<U, T> fromEntity) {, +    this.fromDto = fromDto;, +   * @param arg DTO entity, +   * @return The domain representation - the result of the converting function application on dto entity., +  public U convertFromDto(final T arg) {, +    return fromDto.apply(arg);, +   * @param arg domain entity, +   * @return The DTO representation - the result of the converting function application on domain entity., +   * @param arg collection of DTO entities, +   * @return List of domain representation of provided entities retrieved by, +   *        mapping each of them with the convertion function, +  public List<U> createFromDtos(final Collection<T> arg) {, +    return arg.stream().map(this::convertFromDto).collect(Collectors.toList());, +   * @param arg collection of domain entities, +   * @return List of domain representation of provided entities retrieved by, +   *        mapping each of them with the convertion function, +++ b/converter/src/main/java/com/iluwatar/converter/User.java, +  private String firstName;, +  private String lastName;, +   * @param firstName user's first name, +   * @param lastName user's last name, +   * @param isActive flag indicating whether the user is active, +  public User(String firstName, String lastName, boolean isActive) {, +    this.firstName = firstName;, +    this.lastName = lastName;, +  public String getFirstName() {, +    return firstName;, +  public void setFirstName(String firstName) {, +    this.firstName = firstName;, +  public String getLastName() {, +    return lastName;, +  public void setLastName(String lastName) {, +    this.lastName = lastName;, +++ b/converter/src/main/java/com/iluwatar/converter/App.java, +        userDto -> new User(userDto.getFirstName(), userDto.getLastName(), userDto.isActive()),, +        user -> new UserDto(user.getFirstName(), user.getLastName(), user.isActive()));, +    User user = userConverter.convertFromDto(dtoUser);, +++ b/converter/src/main/java/com/iluwatar/converter/Converter.java, + * @param <T> DTO representation's type, + * @param <U> Domain representation's type, +, +  private final Function<T, U> fromDto;, +   * @param fromDto Function that converts given dto entity into the domain entity., +   * @param fromEntity Function that converts given domain entity into the dto entity., +  public Converter(final Function<T, U> fromDto, final Function<U, T> fromEntity) {, +    this.fromDto = fromDto;, +   * @param arg DTO entity, +   * @return The domain representation - the result of the converting function application on dto entity., +  public U convertFromDto(final T arg) {, +    return fromDto.apply(arg);, +   * @param arg domain entity, +   * @return The DTO representation - the result of the converting function application on domain entity., +   * @param arg collection of DTO entities, +   * @return List of domain representation of provided entities retrieved by, +   *        mapping each of them with the convertion function, +  public List<U> createFromDtos(final Collection<T> arg) {, +    return arg.stream().map(this::convertFromDto).collect(Collectors.toList());, +   * @param arg collection of domain entities]