[+++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, +    verify(enchantment, times(1)).apply();, +    verify(enchantment, times(1)).onActivate();, +    verify(enchantment, times(1)).onDeactivate();, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, +    verify(enchantment, times(1)).apply();, +    verify(enchantment, times(1)).onActivate();, +    verify(enchantment, times(1)).onDeactivate();, +++ b/command/src/main/java/com/iluwatar/command/Size.java, +  SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, +    verify(enchantment, times(1)).apply();, +    verify(enchantment, times(1)).onActivate();, +    verify(enchantment, times(1)).onDeactivate();, +++ b/command/src/main/java/com/iluwatar/command/Size.java, +  SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Visibility.java, +  VISIBLE("visible"), INVISIBLE("invisible"), UNDEFINED("");, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, +    verify(enchantment, times(1)).apply();, +    verify(enchantment, times(1)).onActivate();, +    verify(enchantment, times(1)).onDeactivate();, +++ b/command/src/main/java/com/iluwatar/command/Size.java, +  SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Visibility.java, +  VISIBLE("visible"), INVISIBLE("invisible"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Wizard.java, +  public Wizard() {}, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, +    verify(enchantment, times(1)).apply();, +    verify(enchantment, times(1)).onActivate();, +    verify(enchantment, times(1)).onDeactivate();, +++ b/command/src/main/java/com/iluwatar/command/Size.java, +  SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Visibility.java, +  VISIBLE("visible"), INVISIBLE("invisible"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Wizard.java, +  public Wizard() {}, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, +    long count = CallsCount.getCount(tenantName);, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, +    verify(enchantment, times(1)).apply();, +    verify(enchantment, times(1)).onActivate();, +    verify(enchantment, times(1)).onDeactivate();, +++ b/command/src/main/java/com/iluwatar/command/Size.java, +  SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Visibility.java, +  VISIBLE("visible"), INVISIBLE("invisible"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Wizard.java, +  public Wizard() {}, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, +    long count = CallsCount.getCount(tenantName);, +++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import java.util.concurrent.atomic.AtomicLong;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(CallsCount.class);, +  private static Map<String, AtomicLong> tenantCallsCount = new ConcurrentHashMap<>();, +    tenantCallsCount.putIfAbsent(tenantName, new AtomicLong(0));, +    tenantCallsCount.get(tenantName).incrementAndGet();, +  public static long getCount(String tenantName) {, +    return tenantCallsCount.get(tenantName).get();, +    LOGGER.debug("Resetting the map.");, +    for (Entry<String, AtomicLong> e : tenantCallsCount.entrySet()) {, +      tenantCallsCount.put(e.getKey(), new AtomicLong(0));, +++ b/bridge/src/test/java/com/iluwatar/bridge/WeaponTest.java, +    verify(enchantment, times(1)).apply();, +    verify(enchantment, times(1)).onActivate();, +    verify(enchantment, times(1)).onDeactivate();, +++ b/command/src/main/java/com/iluwatar/command/Size.java, +  SMALL("small"), NORMAL("normal"), LARGE("large"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Visibility.java, +  VISIBLE("visible"), INVISIBLE("invisible"), UNDEFINED("");, +++ b/command/src/main/java/com/iluwatar/command/Wizard.java, +  public Wizard() {}, +++ b/throttling/src/main/java/com/iluwatar/throttling/B2BService.java, +    long count = CallsCount.getCount(tenantName);, +++ b/throttling/src/main/java/com/iluwatar/throttling/CallsCount.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import java.util.concurrent.atomic.AtomicLong;, +, +  private static final Logger LOGGER = LoggerFactory.getLogger(CallsCount.class);, +  private static Map<String, AtomicLong> tenantCallsCount = new ConcurrentHashMap<>();, +    tenantCallsCount.putIfAbsent(tenantName, new AtomicLong(0));, +    tenantCallsCount.get(tenantName).incrementAndGet();, +  public static long getCount(String tenantName) {, +    return tenantCallsCount.get(tenantName).get();, +    LOGGER.debug("Resetting the map.");, +    for (Entry<String, AtomicLong> e : tenantCallsCount.entrySet()) {, +      tenantCallsCount.put(e.getKey(), new AtomicLong(0));, +++ b/throttling/src/test/java/com/iluwatar/throttling/B2BServiceTest.java, +    Throttler timer = new ThrottleTimerImpl(100);, +    long counter = CallsCount.getCount(tenant.getName());]