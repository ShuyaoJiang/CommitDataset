[+++ b/double-checked-locking/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>double-checked-locking</artifactId>, +</project>, +++ b/double-checked-locking/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>double-checked-locking</artifactId>, +</project>, +++ b/double-checked-locking/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +, +/**, + * , + * In Inventory we store the items with a given size. However,, + * we do not store more items than the inventory size. To address, + * concurrent access problems we use double checked locking to add, + * item to inventory. In this method, the thread which gets the lock, + * first adds the item. , + */, +, +public class App , +{, +    public static void main( String[] args ), +    {, +    	final Inventory inventory = new Inventory(1000);, +    	ExecutorService executorService = Executors.newFixedThreadPool(3);, +    	for (int i = 0; i < 3; i++) {, +    		executorService.execute(new Runnable() {, +    			@Override, +    			public void run() {, +    				while(inventory.addItem(new Item()));, +    			}, +    		});, +		}, +    }, +}, +++ b/double-checked-locking/pom.xml, +<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>double-checked-locking</artifactId>, +</project>, +++ b/double-checked-locking/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +, +/**, + * , + * In Inventory we store the items with a given size. However,, + * we do not store more items than the inventory size. To address, + * concurrent access problems we use double checked locking to add, + * item to inventory. In this method, the thread which gets the lock, + * first adds the item. , + */, +, +public class App , +{, +    public static void main( String[] args ), +    {, +    	final Inventory inventory = new Inventory(1000);, +    	ExecutorService executorService = Executors.newFixedThreadPool(3);, +    	for (int i = 0; i < 3; i++) {, +    		executorService.execute(new Runnable() {, +    			@Override, +    			public void run() {, +    				while(inventory.addItem(new Item()));, +    			}, +    		});, +		}, +    }, +}, +++ b/double-checked-locking/src/main/java/com/iluwatar/Inventory.java, +package com.iluwatar;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +]