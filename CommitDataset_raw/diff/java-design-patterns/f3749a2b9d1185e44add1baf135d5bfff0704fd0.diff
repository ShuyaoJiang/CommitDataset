[+++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +    if (modemVisitor instanceof HayesVisitor) {, +    } else {, +        LOGGER.info("Only HayesVisitor is allowed to visit Hayes modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +    if (modemVisitor instanceof HayesVisitor) {, +    } else {, +        LOGGER.info("Only HayesVisitor is allowed to visit Hayes modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java, +    if (modemVisitor instanceof  ZoomVisitor) {, +    } else {, +      LOGGER.info("Only ZoomVisitor is allowed to visit Zoom modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/AllModemVisitor.java, + * All ModemVisitor interface extends all visitor interfaces. This interface, + * provides ease of use when a visitor needs to visit all modem types., +public interface AllModemVisitor extends ZoomVisitor, HayesVisitor{, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/ConfigureForUnixVisitor.java, + * manufacturer, unlike traditional visitor pattern, this class may selectively implement, + * visit for other modems., +public class ConfigureForUnixVisitor implements ZoomVisitor {, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Hayes.java, +    if (modemVisitor instanceof HayesVisitor) {, +    } else {, +        LOGGER.info("Only HayesVisitor is allowed to visit Hayes modem");, +++ b/acyclic-visitor/src/main/java/com/iluwatar/acyclicvisitor/Zoom.java, +    if (modemVisitor instanceof  ZoomVisitor) {, +    } else {, +      LOGGER.info("Only ZoomVisitor is allowed to visit Zoom modem");, +++ b/hexagonal/src/main/java/com/iluwatar/hexagonal/domain/LotteryNumbers.java, +import java.util.ArrayList;, +import java.util.List;, +    List<Integer> list = new ArrayList<>();, +    list.addAll(numbers);, +      builder.append(list.get(i));]