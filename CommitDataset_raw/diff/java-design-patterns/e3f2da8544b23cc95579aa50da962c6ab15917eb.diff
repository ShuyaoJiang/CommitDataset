[+++ b/README.md, +Design patterns are formalized best practices that the programmer can use to, +solve common problems when designing an application or system., +Design patterns can speed up the development process by providing tested, proven, +development paradigms., +Reusing design patterns helps to prevent subtle issues that can cause major, +problems, and it also improves code readability for coders and architects who, +are familiar with the patterns., +Creational design patterns abstract the instantiation process. They help make a, +system independent of how its objects are created, composed, and represented., +Structural patterns are concerned with how classes and objects are composed to, +form larger structures., +Behavioral patterns are concerned with algorithms and the assignment of, +responsibilities between objects., +Concurrency patterns are those types of design patterns that deal with the, +multi-threaded programming paradigm., +Presentation Tier patterns are the top-most level of the application, this is, +concerned with translating tasks and results to something the user can, +understand., +An architectural pattern is a general, reusable solution to a commonly occurring, +problem in software architecture within a given context., +Integration patterns are concerned with how software applications communicate, +and exchange data., +A programming idiom is a means of expressing a recurring construct in one or, +more programming languages. Generally speaking, a programming idiom is an, +expression of a simple task, algorithm, or data structure that is not a built-in, +feature in the programming language being used, or, conversely, the use of an, +unusual or notable feature that is built into a programming language. What, +distinguishes idioms from patterns is generally the size, the idioms tend to be, +something small while the patterns are larger., +**Intent:** Provide an interface for creating families of related or dependent, +objects without specifying their concrete classes., +**Intent:** Separate the construction of a complex object from its, +representation so that the same construction process can create different, +representations., +**Intent:** Define an interface for creating an object, but let subclasses, +decide which class to instantiate. Factory Method lets a class defer, +instantiation to subclasses., +**Intent:** Specify the kinds of objects to create using a prototypical, +instance, and create new objects by copying this prototype., +**Intent:** Ensure a class only has one instance, and provide a global point of, +access to it., +**Intent:** Convert the interface of a class into another interface the clients, +expect. Adapter lets classes work together that couldn't otherwise because of, +incompatible interfaces., +**Intent:** Decouple an abstraction from its implementation so that the two can, +vary independently., +**Intent:** Compose objects into tree structures to represent part-whole, +hierarchies. Composite lets clients treat individual objects and compositions, +of objects uniformly., +**Intent:** Attach additional responsibilities to an object dynamically., +Decorators provide a flexible alternative to subclassing for extending, +functionality., +**Intent:** Provide a unified interface to a set of interfaces in a subsystem., +Facade defines a higher-level interface that makes the subsystem easier to use., +**Intent:** Use sharing to support large numbers of fine-grained objects, +efficiently., +**Applicability:** The Flyweight pattern's effectiveness depends heavily on how, +and where it's used. Apply the Flyweight pattern when all of the following are, +true, +**Intent:** Provide a surrogate or placeholder for another object to control, +access to it., +**Applicability:** Proxy is applicable whenever there is a need for a more, +versatile or sophisticated reference to an object than a simple pointer. Here, +are several common situations in which the Proxy pattern is applicable, +**Intent:** Encapsulate the processes involved in obtaining a service with a, +strong abstraction layer., +**Applicability:** The service locator pattern is applicable whenever we want, +to locate/fetch various services using JNDI which, typically, is a redundant, +and expensive lookup. The service Locator pattern addresses this expensive, +lookup by making use of caching techniques ie. for the very first time a, +particular service is requested, the service Locator looks up in JNDI, fetched, +the relevant service and then finally caches this service object. Now, further, +lookups of the same service via Service Locator is done in its cache which, +improves the performance of application to great extent., +**Intent:** Avoid coupling the sender of a request to its receiver by giving, +more than one object a chance to handle the request. Chain the receiving, +objects and pass the request along the chain until an object handles it., +**Intent:** Encapsulate a request as an object, thereby letting you, +parameterize clients with different requests, queue or log requests, and, +support undoable operations., +**Intent:** Given a language, define a representation for its grammar along, +with an interpreter that uses the representation to interpret sentences in the, +language., +**Applicability:** Use the Interpreter pattern when there is a language to, +interpret, and you can represent statements in the language as abstract syntax, +trees. The Interpreter pattern works best when, +**Intent:** Provide a way to access the elements of an aggregate object, +sequentially without exposing its underlying representation., +**Intent:** Define an object that encapsulates how a set of objects interact., +Mediator promotes loose coupling by keeping objects from referring to each, +other explicitly, and it lets you vary their interaction independently., +**Intent:** Without violating encapsulation, capture and externalize an, +object's internal state so that the object can be restored to this state later., +**Intent:** Define a one-to-many dependency between objects so that when one, +object changes state, all its dependents are notified and updated, +automatically., +**Intent:** Allow an object to alter its behavior when its internal state, +changes. The object will appear to change its class., +**Intent:** Define a family of algorithms, encapsulate each one, and make them]