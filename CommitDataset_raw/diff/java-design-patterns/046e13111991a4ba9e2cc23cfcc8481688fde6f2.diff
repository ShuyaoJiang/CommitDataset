[+++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +  private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +  private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, +  HashMap<String, Node> cache = new HashMap<>();, +  public ArrayList<UserAccount> getCacheDataInListForm() {, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +  private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, +  HashMap<String, Node> cache = new HashMap<>();, +  public ArrayList<UserAccount> getCacheDataInListForm() {, +++ b/factory-kit/etc/factory-kit.png, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +  private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, +  HashMap<String, Node> cache = new HashMap<>();, +  public ArrayList<UserAccount> getCacheDataInListForm() {, +++ b/factory-kit/etc/factory-kit.png, +++ b/factory-kit/etc/factory-kit.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , +  realizations="true" associations="true" dependencies="false" nesting-relationships="true">  , +  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +    sort-features="false" accessors="true" visibility="true">    , +    <attributes public="true" package="true" protected="true" private="true" static="true"/>    , +    <operations public="true" package="true" protected="true" private="true" static="true"/>  , +  </classifier-display>  , +  <association-display labels="true" multiplicity="true"/>, +</class-diagram>, +++ b/caching/src/main/java/com/iluwatar/caching/CacheStore.java, +import java.util.ArrayList;, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +    ArrayList<UserAccount> listOfUserAccounts = cache.getCacheDataInListForm();, +++ b/caching/src/main/java/com/iluwatar/caching/DbManager.java, +  private static HashMap<String, UserAccount> virtualDB;, +++ b/caching/src/main/java/com/iluwatar/caching/LruCache.java, +  HashMap<String, Node> cache = new HashMap<>();, +  public ArrayList<UserAccount> getCacheDataInListForm() {, +++ b/factory-kit/etc/factory-kit.png, +++ b/factory-kit/etc/factory-kit.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.9" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , +  realizations="true" associations="true" dependencies="false" nesting-relationships="true">  , +  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +    sort-features="false" accessors="true" visibility="true">    , +    <attributes public="true" package="true" protected="true" private="true" static="true"/>    , +    <operations public="true" package="true" protected="true" private="true" static="true"/>  , +  </classifier-display>  , +  <association-display labels="true" multiplicity="true"/>, +</class-diagram>, +++ b/factory-kit/index.md, +---, +layout: pattern, +title: Factory Kit, +folder: factory-kit, +permalink: /patterns/factory-kit/, +categories: Creational, +tags:, + - Java, + - Difficulty-Beginner, + - Functional, +---, +, +## Intent, +Define a factory of immutable content with separated builder and factory interfaces., +, +![alt text](./etc/factory-kit.png "Factory Kit"), +, +## Applicability, +Use the Factory Kit pattern when, +, +* a class can't anticipate the class of objects it must create, +* you just want a new instance of a custom builder instead of the global one, +* you explicitly want to define types of objects, that factory can build, +* you want a separated builder and creator interface, +, +## Credits, +, +* [Design Pattern Reloaded by Remi Forax: ](https://www.youtube.com/watch?v=-k2X7guaArU)]