[+++ b/README.md, +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/execute-around/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>execute-around</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/execute-around/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>execute-around</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/execute-around/src/main/java/com/iluwatar/App.java, +package com.iluwatar;, +, +import java.io.FileWriter;, +import java.io.IOException;, +, +/**, + * The Execute Around idiom specifies some code to be executed before and after, + * a method. Typically the idiom is used when the API has methods to be executed in, + * pairs, such as resource allocation/deallocation or lock acquisition/release., + *, + * In this example, we have SimpleFileWriter class that opens and closes the file, + * for the user. The user specifies only what to do with the file by providing the, + * FileWriterAction implementation., + *, + */, +public class App {, +	, +    public static void main( String[] args ) throws IOException {, +, +    	new SimpleFileWriter("testfile.txt", new FileWriterAction() {, +, +    		@Override, +			public void writeFile(FileWriter writer) throws IOException {, +    			writer.write("Hello");, +    			writer.append(" ");, +    			writer.append("there!");, +			}, +    	});, +    }, +}, +++ b/README.md, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for dynamic languages where function are first-class citizen., +++ b/execute-around/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.0-SNAPSHOT</version>, +  </parent>, +  <artifactId>execute-around</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>]