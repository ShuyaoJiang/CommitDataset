[+++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();;, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();;, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import static org.junit.Assert.assertEquals;, + * Add a field as a counter. Every time the callback method is called increment this, + * field. Unit test checks that the field is being incremented., + * Could be done with mock objects as well where the call method call is verified., +    private Integer callingCount = 0;, +, +        Callback callback = new Callback() {, +            @Override, +            public void call() {, +                callingCount++;, +            }, +        };, +, +        Task task = new SimpleTask();, +, +        assertEquals("Initial calling count of 0", new Integer(0), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called once", new Integer(1), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called twice", new Integer(2), callingCount);, +, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();;, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import static org.junit.Assert.assertEquals;, + * Add a field as a counter. Every time the callback method is called increment this, + * field. Unit test checks that the field is being incremented., + * Could be done with mock objects as well where the call method call is verified., +    private Integer callingCount = 0;, +, +        Callback callback = new Callback() {, +            @Override, +            public void call() {, +                callingCount++;, +            }, +        };, +, +        Task task = new SimpleTask();, +, +        assertEquals("Initial calling count of 0", new Integer(0), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called once", new Integer(1), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called twice", new Integer(2), callingCount);, +, +++ b/dao/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +++ b/abstract-factory/src/test/java/com/iluwatar/abstractfactory/AppTest.java, +	private App app = new App();;, +++ b/callback/src/test/java/com/iluwatar/callback/AppTest.java, +import static org.junit.Assert.assertEquals;, + * Add a field as a counter. Every time the callback method is called increment this, + * field. Unit test checks that the field is being incremented., + * Could be done with mock objects as well where the call method call is verified., +    private Integer callingCount = 0;, +, +        Callback callback = new Callback() {, +            @Override, +            public void call() {, +                callingCount++;, +            }, +        };, +, +        Task task = new SimpleTask();, +, +        assertEquals("Initial calling count of 0", new Integer(0), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called once", new Integer(1), callingCount);, +, +        task.executeWith(callback);, +, +        assertEquals("Callback called twice", new Integer(2), callingCount);, +, +++ b/dao/pom.xml, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +++ b/dao/src/main/java/com/iluwatar/dao/App.java, +	 * Program entry point, +	 * @param args command line args, +	public static void main(String[] args) {, +, +		CustomerDaoImpl customerDao = new CustomerDaoImpl(generateSampleCustomers());, +, +		System.out.println("customerDao.getAllCustomers(): " + customerDao.getAllCustomers());]