[+++ b/layers/src/main/java/com/iluwatar/layers/App.java, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, +						new CakeLayerInfo("strawberry", 0)));, +		service.getAllCakes().stream().forEach((cake) -> System.out.println(cake));, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, +						new CakeLayerInfo("strawberry", 0)));, +		service.getAllCakes().stream().forEach((cake) -> System.out.println(cake));, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +import java.util.HashSet;, +import java.util.Set;, +import javax.persistence.FetchType;, +	@OneToOne(cascade=CascadeType.REMOVE), +	@OneToMany(cascade=CascadeType.REMOVE, fetch=FetchType.EAGER), +	private Set<CakeLayer> layers;, +		setLayers(new HashSet<>());, +	public Set<CakeLayer> getLayers() {, +	public void setLayers(Set<CakeLayer> layers) {, +	, +	@Override, +	public String toString() {, +		return String.format("id=%s topping=%s layers=%s", id, topping, layers.toString());, +	}	, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, +						new CakeLayerInfo("strawberry", 0)));, +		service.getAllCakes().stream().forEach((cake) -> System.out.println(cake));, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +import java.util.HashSet;, +import java.util.Set;, +import javax.persistence.FetchType;, +	@OneToOne(cascade=CascadeType.REMOVE), +	@OneToMany(cascade=CascadeType.REMOVE, fetch=FetchType.EAGER), +	private Set<CakeLayer> layers;, +		setLayers(new HashSet<>());, +	public Set<CakeLayer> getLayers() {, +	public void setLayers(Set<CakeLayer> layers) {, +	, +	@Override, +	public String toString() {, +		return String.format("id=%s topping=%s layers=%s", id, topping, layers.toString());, +	}	, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java, +	, +	List<CakeInfo> getAllCakes();, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, +						new CakeLayerInfo("strawberry", 0)));, +		service.getAllCakes().stream().forEach((cake) -> System.out.println(cake));, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +import java.util.HashSet;, +import java.util.Set;, +import javax.persistence.FetchType;, +	@OneToOne(cascade=CascadeType.REMOVE), +	@OneToMany(cascade=CascadeType.REMOVE, fetch=FetchType.EAGER), +	private Set<CakeLayer> layers;, +		setLayers(new HashSet<>());, +	public Set<CakeLayer> getLayers() {, +	public void setLayers(Set<CakeLayer> layers) {, +	, +	@Override, +	public String toString() {, +		return String.format("id=%s topping=%s layers=%s", id, topping, layers.toString());, +	}	, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingService.java, +	, +	List<CakeInfo> getAllCakes();, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, +import java.util.HashSet;, +import java.util.Set;, +		Set<CakeLayer> foundLayers = new HashSet<>();, +		cakeBean.save(cake);, +		topping.setCake(cake);, +		toppingBean.save(topping);, +		CakeLayerDao layerBean = context.getBean(CakeLayerDao.class);, +			layerBean.save(layer);, +, +	@Override, +	public List<CakeInfo> getAllCakes() {, +		CakeDao cakeBean = context.getBean(CakeDao.class);, +		List<CakeInfo> result = new ArrayList<>();, +		Iterator<Cake> iterator = cakeBean.findAll().iterator();, +		while (iterator.hasNext()) {, +			Cake cake = iterator.next();, +			CakeToppingInfo cakeToppingInfo = new CakeToppingInfo(cake.getTopping().getId(),, +					cake.getTopping().getName(), cake.getTopping().getCalories());, +			ArrayList<CakeLayerInfo> cakeLayerInfos = new ArrayList<CakeLayerInfo>();, +			for (CakeLayer layer: cake.getLayers()) {, +				cakeLayerInfos.add(new CakeLayerInfo(layer.getId(), layer.getName(), layer.getCalories()));, +			}, +			CakeInfo cakeInfo = new CakeInfo(cake.getId(), cakeToppingInfo, cakeLayerInfos);, +			result.add(cakeInfo);, +		}, +		return result;, +	}, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("banana", 0),, +						new CakeLayerInfo("strawberry", 0)));, +		service.getAllCakes().stream().forEach((cake) -> System.out.println(cake));, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java]