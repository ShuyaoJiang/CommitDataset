[+++ b/tolerant-reader/src/main/java/com/iluwatar/App.java, + * Tolerant Reader is an integration pattern that helps creating robust communication, + * systems. The idea is to be as tolerant as possible when reading data from another, + * service. This way, when the communication schema changes, the readers must not break., + * In this example we use Java serialization to write representations of RainbowFish, + * objects to file. RainbowFish is the initial version which we can easily read and, + * write using RainbowFishSerializer methods. RainbowFish then evolves to RainbowFishV2, + * and we again write it to file with a method designed to do just that. However, the reader, + * client does not know about the new format and still reads with the method designed for, + * V1 schema. Fortunately the reading method has been designed with the Tolerant Reader, + * pattern and does not break even though RainbowFishV2 has new fields that are serialized., +++ b/tolerant-reader/src/main/java/com/iluwatar/App.java, + * Tolerant Reader is an integration pattern that helps creating robust communication, + * systems. The idea is to be as tolerant as possible when reading data from another, + * service. This way, when the communication schema changes, the readers must not break., + * In this example we use Java serialization to write representations of RainbowFish, + * objects to file. RainbowFish is the initial version which we can easily read and, + * write using RainbowFishSerializer methods. RainbowFish then evolves to RainbowFishV2, + * and we again write it to file with a method designed to do just that. However, the reader, + * client does not know about the new format and still reads with the method designed for, + * V1 schema. Fortunately the reading method has been designed with the Tolerant Reader, + * pattern and does not break even though RainbowFishV2 has new fields that are serialized., +++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java, +/**, + * , + * RainbowFish is the initial schema, + *, + */, +++ b/tolerant-reader/src/main/java/com/iluwatar/App.java, + * Tolerant Reader is an integration pattern that helps creating robust communication, + * systems. The idea is to be as tolerant as possible when reading data from another, + * service. This way, when the communication schema changes, the readers must not break., + * In this example we use Java serialization to write representations of RainbowFish, + * objects to file. RainbowFish is the initial version which we can easily read and, + * write using RainbowFishSerializer methods. RainbowFish then evolves to RainbowFishV2, + * and we again write it to file with a method designed to do just that. However, the reader, + * client does not know about the new format and still reads with the method designed for, + * V1 schema. Fortunately the reading method has been designed with the Tolerant Reader, + * pattern and does not break even though RainbowFishV2 has new fields that are serialized., +++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java, +/**, + * , + * RainbowFish is the initial schema, + *, + */, +++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java, +/**, + * , + * RainbowFishSerializer provides methods for reading and writing RainbowFish objects to file., + * Tolerant Reader pattern is implemented here by serializing maps instead of RainbowFish objects., + * This way the reader does not break even though new properties are added to the schema., + *, + */, +	/**, +	 * Write V1 RainbowFish to file, +	 * @param rainbowFish, +	 * @param filename, +	 * @throws IOException, +	 */, +	/**, +	 * Write V2 RainbowFish to file, +	 * @param rainbowFish, +	 * @param filename, +	 * @throws IOException, +	 */, +	/**, +	 * Read V1 RainbowFish from file, +	 * @param filename, +	 * @return, +	 * @throws IOException, +	 * @throws ClassNotFoundException, +	 */, +++ b/tolerant-reader/src/main/java/com/iluwatar/App.java, + * Tolerant Reader is an integration pattern that helps creating robust communication, + * systems. The idea is to be as tolerant as possible when reading data from another, + * service. This way, when the communication schema changes, the readers must not break., + * In this example we use Java serialization to write representations of RainbowFish, + * objects to file. RainbowFish is the initial version which we can easily read and, + * write using RainbowFishSerializer methods. RainbowFish then evolves to RainbowFishV2, + * and we again write it to file with a method designed to do just that. However, the reader, + * client does not know about the new format and still reads with the method designed for, + * V1 schema. Fortunately the reading method has been designed with the Tolerant Reader, + * pattern and does not break even though RainbowFishV2 has new fields that are serialized., +++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFish.java, +/**, + * , + * RainbowFish is the initial schema, + *, + */, +++ b/tolerant-reader/src/main/java/com/iluwatar/RainbowFishSerializer.java, +/**, + * , + * RainbowFishSerializer provides methods for reading and writing RainbowFish objects to file., + * Tolerant Reader pattern is implemented here by serializing maps instead of RainbowFish objects., + * This way the reader does not break even though new properties are added to the schema., + *, + */, +	/**, +	 * Write V1 RainbowFish to file, +	 * @param rainbowFish]