[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +## Tutorials, +* [Build Maintainable Systems With Hexagonal Architecture](http://java-design-patterns.com/blog/build-maintainable-systems-with-hexagonal-architecture/), +, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +## Tutorials, +* [Build Maintainable Systems With Hexagonal Architecture](http://java-design-patterns.com/blog/build-maintainable-systems-with-hexagonal-architecture/), +, +++ /dev/null, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +## Tutorials, +* [Build Maintainable Systems With Hexagonal Architecture](http://java-design-patterns.com/blog/build-maintainable-systems-with-hexagonal-architecture/), +, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +## Tutorials, +* [Build Maintainable Systems With Hexagonal Architecture](http://java-design-patterns.com/blog/build-maintainable-systems-with-hexagonal-architecture/), +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +++ b/README.md, +[![Quality Gate](https://sonarqube.com/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarqube.com/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutor.java, +    if (!asyncResult.isCompleted()) {, +    return asyncResult.getValue();, +++ b/async-method-invocation/src/test/java/com/iluwatar/async/method/invocation/ThreadAsyncExecutorTest.java, +++ b/decorator/src/main/java/com/iluwatar/decorator/App.java, + * implements the same interface as the target and uses aggregation to "decorate" calls to the, +++ b/hexagonal/README.md, +## Tutorials, +* [Build Maintainable Systems With Hexagonal Architecture](http://java-design-patterns.com/blog/build-maintainable-systems-with-hexagonal-architecture/), +, +++ /dev/null, +++ /dev/null, +++ /dev/null]