[+++ b/.travis.yml, +++ b/.travis.yml, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, +  <img alt="Coverity Scan Build Status", +       src="https://scan.coverity.com/projects/5634/badge.svg"/>, +</a>, +, +, +<a name="top"/>, +, +# <a name="toc">Table of Contents</a>, + - <a href="#introduction">Introduction</a>, + - <a href="#contribute">How to contribute</a>, + - <a href="#faq">Frequently Asked Questions</a>, + - <a href="#credits">Credits</a>, + - <a href="#license">License</a>, +, +, +# <a name="introduction">Introduction</a> [&#8593;](#top), +# <a name="contribute">How to contribute</a> [&#8593;](#top), +, +# <a name="faq">Frequently asked questions</a> [&#8593;](#top), +, +**<a id="Q1">Q: What is the difference between State and Strategy patterns?</a>**, +, +While the implementation is similar they solve different problems. The State, +pattern deals with what state an object is in - it encapsulates state-dependent, +behavior., +The Strategy pattern deals with how an object performs a certain task - it, +encapsulates an algorithm., +, +**<a id="Q2">Q: What is the difference between Strategy and Template Method patterns?</a>**, +, +In Template Method the algorithm is chosen at compile time via inheritance., +With Strategy pattern the algorithm is chosen at runtime via composition., +, +**<a id="Q3">Q: What is the difference between Proxy and Decorator patterns?</a>**, +, +The difference is the intent of the patterns. While Proxy controls access to, +the object Decorator is used to add responsibilities to the object., +, +**<a id="Q4">Q: What is the difference between Chain of Responsibility and Intercepting Filter patterns?</a>**, +, +While the implementations look similar there are differences. The Chain of, +Responsibility forms a chain of request processors and the processors are then, +executed one by one until the correct processor is found. In Intercepting, +Filter the chain is constructed from filters and the whole chain is always, +executed., +, +**<a id="Q5">Q: What is the difference between Visitor and Double Dispatch patterns?</a>**, +, +The Visitor pattern is a means of adding a new operation to existing classes., +Double dispatch is a means of dispatching function calls with respect to two, +polymorphic types, rather than a single polymorphic type, which is what, +languages like C++ and Java _do not_ support directly., +, +**<a id="Q6">Q: What are the differences between Flyweight and Object Pool patterns?</a>**, +, +They differ in the way they are used., +, +Pooled objects can simultaneously be used by a single "client" only. For that,, +a pooled object must be checked out from the pool, then it can be used by a, +client, and then the client must return the object back to the pool. Multiple, +instances of identical objects may exist, up to the maximal capacity of the, +pool., +, +In contrast, a Flyweight object is singleton, and it can be used simultaneously, +by multiple clients., +, +As for concurrent access, pooled objects can be mutable and they usually don't, +need to be thread safe, as typically, only one thread is going to use a, +specific instance at the same time. Flyweight must either be immutable (the, +best option), or implement thread safety., +, +As for performance and scalability, pools can become bottlenecks, if all the, +pooled objects are in use and more clients need them, threads will become, +blocked waiting for available object from the pool. This is not the case with, +Flyweight., +, +, +# <a name="credits">Credits</a> [&#8593;](#top), +, +# <a name="license">License</a> [&#8593;](#top), +++ b/.travis.yml, +++ b/README.md, +[![Build status](https://travis-ci.org/iluwatar/java-design-patterns.svg?branch=master)](https://travis-ci.org/iluwatar/java-design-patterns) [![Coverage Status](https://coveralls.io/repos/iluwatar/java-design-patterns/badge.svg?branch=master)](https://coveralls.io/r/iluwatar/java-design-patterns?branch=master) <a href="https://scan.coverity.com/projects/5634">, +  <img alt="Coverity Scan Build Status", +       src="https://scan.coverity.com/projects/5634/badge.svg"/>, +</a>, +, +, +<a name="top"/>, +, +# <a name="toc">Table of Contents</a>, + - <a href="#introduction">Introduction</a>, + - <a href="#contribute">How to contribute</a>, + - <a href="#faq">Frequently Asked Questions</a>, + - <a href="#credits">Credits</a>, + - <a href="#license">License</a>]