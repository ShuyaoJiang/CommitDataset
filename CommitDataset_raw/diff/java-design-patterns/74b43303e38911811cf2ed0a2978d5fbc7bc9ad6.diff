[+++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java, + * AlchemistShop holds potions on its shelves., + * It uses PotionFactory to provide the potions., +++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java, + * AlchemistShop holds potions on its shelves., + * It uses PotionFactory to provide the potions., +++ b/flyweight/src/main/java/com/iluwatar/App.java, + * Flyweight pattern is useful when the program needs a huge amount of objects., + * It provides means to decrease resource usage by sharing object instances., + * , + * In this example AlchemistShop has great amount of potions on its shelves., + * To fill the shelves AlchemistShop uses PotionFactory (which represents, + * the Flyweight in this example). Internally PotionFactory holds a map, + * of the potions and lazily creates new ones when requested., +++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java, + * AlchemistShop holds potions on its shelves., + * It uses PotionFactory to provide the potions., +++ b/flyweight/src/main/java/com/iluwatar/App.java, + * Flyweight pattern is useful when the program needs a huge amount of objects., + * It provides means to decrease resource usage by sharing object instances., + * , + * In this example AlchemistShop has great amount of potions on its shelves., + * To fill the shelves AlchemistShop uses PotionFactory (which represents, + * the Flyweight in this example). Internally PotionFactory holds a map, + * of the potions and lazily creates new ones when requested., +++ b/flyweight/src/main/java/com/iluwatar/Potion.java, + * Interface for Potions., +++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java, + * AlchemistShop holds potions on its shelves., + * It uses PotionFactory to provide the potions., +++ b/flyweight/src/main/java/com/iluwatar/App.java, + * Flyweight pattern is useful when the program needs a huge amount of objects., + * It provides means to decrease resource usage by sharing object instances., + * , + * In this example AlchemistShop has great amount of potions on its shelves., + * To fill the shelves AlchemistShop uses PotionFactory (which represents, + * the Flyweight in this example). Internally PotionFactory holds a map, + * of the potions and lazily creates new ones when requested., +++ b/flyweight/src/main/java/com/iluwatar/Potion.java, + * Interface for Potions., +++ b/flyweight/src/main/java/com/iluwatar/PotionFactory.java, + * PotionFactory is the Flyweight in this example., + * It minimizes memory use by sharing object instances., + * It holds a map of potion instances and new potions, + * are created only when none of the type already exists., +++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java, + * AlchemistShop holds potions on its shelves., + * It uses PotionFactory to provide the potions., +++ b/flyweight/src/main/java/com/iluwatar/App.java, + * Flyweight pattern is useful when the program needs a huge amount of objects., + * It provides means to decrease resource usage by sharing object instances., + * , + * In this example AlchemistShop has great amount of potions on its shelves., + * To fill the shelves AlchemistShop uses PotionFactory (which represents, + * the Flyweight in this example). Internally PotionFactory holds a map, + * of the potions and lazily creates new ones when requested., +++ b/flyweight/src/main/java/com/iluwatar/Potion.java, + * Interface for Potions., +++ b/flyweight/src/main/java/com/iluwatar/PotionFactory.java, + * PotionFactory is the Flyweight in this example., + * It minimizes memory use by sharing object instances., + * It holds a map of potion instances and new potions, + * are created only when none of the type already exists., +++ b/flyweight/src/main/java/com/iluwatar/PotionType.java, +/**, + * , + * Enumeration for potion types., + *, + */, +++ b/flyweight/src/main/java/com/iluwatar/AlchemistShop.java, + * AlchemistShop holds potions on its shelves., + * It uses PotionFactory to provide the potions., +++ b/flyweight/src/main/java/com/iluwatar/App.java, + * Flyweight pattern is useful when the program needs a huge amount of objects., + * It provides means to decrease resource usage by sharing object instances., + * , + * In this example AlchemistShop has great amount of potions on its shelves., + * To fill the shelves AlchemistShop uses PotionFactory (which represents, + * the Flyweight in this example). Internally PotionFactory holds a map, + * of the potions and lazily creates new ones when requested., +++ b/flyweight/src/main/java/com/iluwatar/Potion.java, + * Interface for Potions., +++ b/flyweight/src/main/java/com/iluwatar/PotionFactory.java, + * PotionFactory is the Flyweight in this example., + * It minimizes memory use by sharing object instances., + * It holds a map of potion instances and new potions, + * are created only when none of the type already exists., +++ b/flyweight/src/main/java/com/iluwatar/PotionType.java, +/**, + * , + * Enumeration for potion types., + *, + */, +++ b/flyweight/src/main/java/com/iluwatar/StrengthPotion.java]