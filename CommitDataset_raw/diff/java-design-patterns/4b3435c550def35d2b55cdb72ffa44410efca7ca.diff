[+++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/event-sourcing/README.md, +---, +layout: pattern, +title: Event Sourcing, +folder: event-sourcing, +permalink: /patterns/event-sourcing/, +categories: Concurrency, +tags:, + - Java, + - Difficulty Intermediate, + - Performance, +---, +, +## Intent, +, +## Applicability, +Use the Event Sourcing pattern when, +, +* You have a limited accesibility resource and the asynchronous process is acceptable to reach that, +, +## Credits, +, +++ b/.travis.yml, +sudo: false # route the build to the container-based infrastructure for a faster build, +++ b/event-sourcing/README.md, +---, +layout: pattern, +title: Event Sourcing, +folder: event-sourcing, +permalink: /patterns/event-sourcing/, +categories: Concurrency, +tags:, + - Java, + - Difficulty Intermediate, + - Performance, +---, +, +## Intent, +, +## Applicability, +Use the Event Sourcing pattern when, +, +* You have a limited accesibility resource and the asynchronous process is acceptable to reach that, +, +## Credits, +, +++ b/event-sourcing/etc/event-sourcing.urm.puml, +@startuml, +package com.iluwatar.event.sourcing.journal {, +  class JsonFileJournal {, +    - aFile : File, +    - events : List<String>, +    - index : int, +    + JsonFileJournal(), +    + readNext() : DomainEvent, +    + reset(), +    + write(domainEvent : DomainEvent), +  }, +}, +package com.iluwatar.event.sourcing.processor {, +  class DomainEventProcessor {, +    - precessorJournal : ProcessorJournal, +    + DomainEventProcessor(), +    + process(domainEvent : DomainEvent), +    + recover(), +    + setPrecessorJournal(precessorJournal : ProcessorJournal), +  }, +}, +package com.iluwatar.event.sourcing.service {, +  class AccountService {, +    - eventProcessor : EventProcessor, +    + AccountService(eventProcessor : EventProcessor), +    + createAccount(accountNo : int, owner : String), +  }, +  class MoneyTransactionService {, +    - eventProcessor : EventProcessor, +    + MoneyTransactionService(eventProcessor : EventProcessor), +    + depositMoney(accountNo : int, money : BigDecimal), +    + transferMoney(accountNoFrom : int, accountNoTo : int, money : BigDecimal), +    + withdrawalMoney(accountNo : int, money : BigDecimal), +  }, +  class SequenceIdGenerator {, +    - sequenceId : long {static}, +    + SequenceIdGenerator(), +    + nextSequenceId() : long {static}, +  }, +}, +package com.iluwatar.event.sourcing.event {, +  class AccountCreateEvent {, +    - accountNo : int, +    - owner : String, +    + AccountCreateEvent(sequenceId : long, createdTime : long, accountNo : int, owner : String), +    + getAccountNo() : int, +    + getOwner() : String, +    + process(), +  }]