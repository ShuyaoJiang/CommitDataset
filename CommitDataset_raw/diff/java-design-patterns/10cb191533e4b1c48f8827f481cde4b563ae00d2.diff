[+++ b/retry/src/main/java/com/iluwatar/retry/App.java, +    errorWithRetryExponentialBackoff();, +  , +  private static void errorWithRetryExponentialBackoff() throws Exception {, +    final RetryExponentialBackoff<String> retry = new RetryExponentialBackoff<>(, +        new FindCustomer("123", new CustomerNotFoundException("not found")),, +        6,  //6 attempts, +        30000, //30 s max delay between attempts, +        e -> CustomerNotFoundException.class.isAssignableFrom(e.getClass()), +        );, +    op = retry;, +    final String customerId = op.perform();, +    LOG.info(String.format(, +                "However, retrying the operation while ignoring a recoverable error will eventually yield ", +                        + "the result %s after a number of attempts %s", customerId, retry.attempts(), +        ));, +  }, +++ b/retry/src/main/java/com/iluwatar/retry/App.java, +    errorWithRetryExponentialBackoff();, +  , +  private static void errorWithRetryExponentialBackoff() throws Exception {, +    final RetryExponentialBackoff<String> retry = new RetryExponentialBackoff<>(, +        new FindCustomer("123", new CustomerNotFoundException("not found")),, +        6,  //6 attempts, +        30000, //30 s max delay between attempts, +        e -> CustomerNotFoundException.class.isAssignableFrom(e.getClass()), +        );, +    op = retry;, +    final String customerId = op.perform();, +    LOG.info(String.format(, +                "However, retrying the operation while ignoring a recoverable error will eventually yield ", +                        + "the result %s after a number of attempts %s", customerId, retry.attempts(), +        ));, +  }, +++ b/retry/src/main/java/com/iluwatar/retry/RetryExponentialBackoff.java, +/*, + * The MIT License (MIT), + *, + * Copyright (c) 2014-2016 Ilkka SeppÃ¤lÃ¤, + *, + * Permission is hereby granted, free of charge, to any person obtaining a copy, + * of this software and associated documentation files (the "Software"), to deal, + * in the Software without restriction, including without limitation the rights, + * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell, + * copies of the Software, and to permit persons to whom the Software is, + * furnished to do so, subject to the following conditions:, + *, + * The above copyright notice and this permission notice shall be included in all, + * copies or substantial portions of the Software., + *, + * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR, + * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,, + * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE, + * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER, + * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,, + * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE, + * SOFTWARE., + */, +, +package com.iluwatar.retry;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.Random;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.function.Predicate;, +, +/**, + * Decorates {@link BusinessOperation business operation} with "retry" capabilities., + *, + * @author George Aristy (george.aristy@gmail.com), + * @param <T> the remote op's return type, + */, +public final class RetryExponentialBackoff<T> implements BusinessOperation<T> {, +  private final BusinessOperation<T> op;, +  private final int maxAttempts;, +  private final long maxDelay;, +  private final AtomicInteger attempts;, +  private final Predicate<Exception> test;, +  private final List<Exception> errors;, +, +    /**, +     * Ctor., +     *, +     * @param op the {@link BusinessOperation} to retry, +     * @param maxAttempts number of times to retry, +     * @param ignoreTests tests to check whether the remote exception can be ignored. No exceptions, +     *     will be ignored if no tests are given, +     */, +  @SafeVarargs, +  public RetryExponentialBackoff(, +            BusinessOperation<T> op,, +            int maxAttempts,, +            long maxDelay,, +            Predicate<Exception>... ignoreTests, +  ) {, +    this.op = op;, +    this.maxAttempts = maxAttempts;]