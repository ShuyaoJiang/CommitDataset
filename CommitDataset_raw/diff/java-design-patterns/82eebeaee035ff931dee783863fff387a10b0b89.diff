[+++ b/dao/src/main/java/com/iluwatar/App.java, +public class App {, +    	WizardDao dao = new WizardDao();, +    	persistData(dao);, +    	queryData(dao);, +    }, +    public static void persistData(WizardDao dao) {, +    	Spell spell = new Spell("Fireball");, +    	Spellbook spellbook = new Spellbook("Book of fire");, +    	Wizard wizard = new Wizard("Jugga");, +    	dao.persist(wizard);, +    }, +    , +    public static void queryData(WizardDao dao) {, +    	List<Wizard> wizards = dao.findAll();, +    	for (Wizard w: wizards) {, +    		System.out.println(w);, +    	}, +++ b/dao/src/main/java/com/iluwatar/App.java, +public class App {, +    	WizardDao dao = new WizardDao();, +    	persistData(dao);, +    	queryData(dao);, +    }, +    public static void persistData(WizardDao dao) {, +    	Spell spell = new Spell("Fireball");, +    	Spellbook spellbook = new Spellbook("Book of fire");, +    	Wizard wizard = new Wizard("Jugga");, +    	dao.persist(wizard);, +    }, +    , +    public static void queryData(WizardDao dao) {, +    	List<Wizard> wizards = dao.findAll();, +    	for (Wizard w: wizards) {, +    		System.out.println(w);, +    	}, +++ b/dao/src/main/java/com/iluwatar/DaoBase.java, +import java.lang.reflect.ParameterizedType;, +import java.util.List;, +, +import org.hibernate.Criteria;, +import org.hibernate.Session;, +import org.hibernate.SessionFactory;, +import org.hibernate.Transaction;, +import org.hibernate.cfg.Configuration;, +import org.hibernate.criterion.Restrictions;, +, +	@SuppressWarnings("unchecked"), +	protected Class<E> persistentClass = (Class<E>) ((ParameterizedType) getClass(), +            .getGenericSuperclass()).getActualTypeArguments()[0];, +, +	protected final SessionFactory sessionFactory = createSessionFactory();, +	, +	private SessionFactory createSessionFactory() {, +    	SessionFactory sessionFactory = new Configuration(), +  	  		.addAnnotatedClass(Wizard.class), +  	  		.addAnnotatedClass(Spellbook.class), +  	  		.addAnnotatedClass(Spell.class), +  	  		.setProperty("hibernate.dialect", "org.hibernate.dialect.H2Dialect"), +  	  		.setProperty("hibernate.connection.url", "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"), +  	  		.setProperty("hibernate.current_session_context_class", "thread"), +  	  		.setProperty("hibernate.show_sql", "true"), +  	  		.setProperty("hibernate.hbm2ddl.auto", "create"), +  	  		.buildSessionFactory();, +    	return sessionFactory;, +	}, +	, +	private Session getSession() {, +		return sessionFactory.openSession();, +	}, +	, +		Session session = getSession();, +		Transaction tx = null;, +		E result = null;, +		try {, +			tx = session.beginTransaction();, +			Criteria criteria = sessionFactory.getCurrentSession().createCriteria(persistentClass);, +			criteria.add(Restrictions.idEq(id));, +			result = (E) criteria.uniqueResult();, +			tx.commit();, +		}, +		catch (Exception e) {, +			if (tx!=null) tx.rollback();, +			throw e;, +		}, +		finally {, +			session.close();, +		}		, +		return result;, +	void persist(E entity) {, +		Session session = getSession();, +		Transaction tx = null;, +		try {, +			tx = session.beginTransaction();, +			session.persist(entity);, +			tx.commit();, +		}, +		catch (Exception e) {, +			if (tx!=null) tx.rollback();, +			throw e;]