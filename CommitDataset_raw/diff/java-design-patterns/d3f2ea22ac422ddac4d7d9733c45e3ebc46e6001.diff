[+++ b/reactor/src/main/java/com/iluwatar/reactor/App.java, +import java.net.InetSocketAddress;, +import java.nio.channels.DatagramChannel;, +import java.nio.channels.SelectableChannel;, +import java.nio.channels.ServerSocketChannel;, +			NioReactor reactor = new NioReactor();, +, +			reactor, +				.registerChannel(tcpChannel(6666)), +				.registerChannel(tcpChannel(6667)), +			.start();, +, +			reactor.registerHandler(new LoggingServer());, +	private static SelectableChannel udpChannel(int port) throws IOException {, +		DatagramChannel channel = DatagramChannel.open();, +		channel.socket().bind(new InetSocketAddress(port));, +		channel.configureBlocking(false);, +		System.out.println("Bound UDP socket at port: " + port);, +		return channel;, +	}, +, +	private static SelectableChannel tcpChannel(int port) throws IOException {, +		ServerSocketChannel channel = ServerSocketChannel.open();, +		channel.socket().bind(new InetSocketAddress(port));, +		channel.configureBlocking(false);, +		System.out.println("Bound TCP socket at port: " + port);, +		return channel;, +	}, +, +++ b/reactor/src/main/java/com/iluwatar/reactor/App.java, +import java.net.InetSocketAddress;, +import java.nio.channels.DatagramChannel;, +import java.nio.channels.SelectableChannel;, +import java.nio.channels.ServerSocketChannel;, +			NioReactor reactor = new NioReactor();, +, +			reactor, +				.registerChannel(tcpChannel(6666)), +				.registerChannel(tcpChannel(6667)), +			.start();, +, +			reactor.registerHandler(new LoggingServer());, +	private static SelectableChannel udpChannel(int port) throws IOException {, +		DatagramChannel channel = DatagramChannel.open();, +		channel.socket().bind(new InetSocketAddress(port));, +		channel.configureBlocking(false);, +		System.out.println("Bound UDP socket at port: " + port);, +		return channel;, +	}, +, +	private static SelectableChannel tcpChannel(int port) throws IOException {, +		ServerSocketChannel channel = ServerSocketChannel.open();, +		channel.socket().bind(new InetSocketAddress(port));, +		channel.configureBlocking(false);, +		System.out.println("Bound TCP socket at port: " + port);, +		return channel;, +	}, +, +++ b/reactor/src/main/java/com/iluwatar/reactor/AppClient.java, +		new Thread(new LoggingClient("Client 1", 6666)).start();, +		new Thread(new LoggingClient("Client 2", 6667)).start();, +	static class LoggingClient implements Runnable {, +		public void run() {, +					Thread.sleep(100);, +++ b/reactor/src/main/java/com/iluwatar/reactor/App.java, +import java.net.InetSocketAddress;, +import java.nio.channels.DatagramChannel;, +import java.nio.channels.SelectableChannel;, +import java.nio.channels.ServerSocketChannel;, +			NioReactor reactor = new NioReactor();, +, +			reactor, +				.registerChannel(tcpChannel(6666)), +				.registerChannel(tcpChannel(6667)), +			.start();, +, +			reactor.registerHandler(new LoggingServer());, +	private static SelectableChannel udpChannel(int port) throws IOException {, +		DatagramChannel channel = DatagramChannel.open();, +		channel.socket().bind(new InetSocketAddress(port));, +		channel.configureBlocking(false);, +		System.out.println("Bound UDP socket at port: " + port);, +		return channel;, +	}, +, +	private static SelectableChannel tcpChannel(int port) throws IOException {, +		ServerSocketChannel channel = ServerSocketChannel.open();, +		channel.socket().bind(new InetSocketAddress(port));, +		channel.configureBlocking(false);, +		System.out.println("Bound TCP socket at port: " + port);, +		return channel;, +	}, +, +++ b/reactor/src/main/java/com/iluwatar/reactor/AppClient.java, +		new Thread(new LoggingClient("Client 1", 6666)).start();, +		new Thread(new LoggingClient("Client 2", 6667)).start();, +	static class LoggingClient implements Runnable {, +		public void run() {, +					Thread.sleep(100);, +++ b/reactor/src/main/java/com/iluwatar/reactor/NioReactor.java]