[+++ b/README.md, +##Abstract Factory, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/abstract-factory/etc/abstract-factory.jpg "Abstract Factory"), +##Builder, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/builder/etc/builder.jpg "Builder"), +##Factory Method, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/factory-method/etc/factory-method.jpg "Factory Method"), +##Prototype, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/prototype/etc/prototype.jpg "Prototype"), +##Singleton, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/singleton/etc/singleton.jpg "Singleton"), +* the must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +##Adapter, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/adapter/etc/adapter.jpg "Adapter"), +##Bridge, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/bridge/etc/bridge.jpg "Bridge"), +##Composite, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/composite/etc/composite.jpg "Composite"), +##Decorator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/decorator/etc/decorator.jpg "Decorator"), +##Facade, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/facade/etc/facade.jpg "Facade"), +##Flyweight, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/flyweight/etc/flyweight.jpg "Flyweight"), +##Proxy, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/proxy/etc/proxy.jpg "Proxy"), +##Chain of responsibility, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/chain/etc/chain.jpg "Chain of Responsibility"), +##Command, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command.jpg "Command"), +##Interpreter, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/interpreter/etc/interpreter.jpg "Interpreter"), +##Iterator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/iterator/etc/iterator.jpg "Iterator"), +##Mediator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/mediator/etc/mediator.jpg "Mediator"), +##Memento, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento.jpg "Memento"), +##Model-View-Presenter, +**Intent:** Apply a "Separation of Concerns" principle in a way that allows developers to build and test user interfaces., +![alt text](https://github.com/pitsios-s/java-design-patterns/blob/master/model-view-presenter/etc/model-view-presenter.jpg "Model-View-Presenter"), +, +**Applicability:** Use the Model-View-Presenter in any of the following situations, +* when you want to improve the "Separation of Concerns" principle in presentation logic, +* when a user interface development and testing is necessary., +, +##Observer, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/observer/etc/observer.jpg "Observer"), +##State, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/state/etc/state.jpg "State"), +##Strategy, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/strategy/etc/strategy.jpg "Strategy"), +##Template method, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/template-method/etc/template-method.jpg "Template Method"), +##Visitor, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/visitor/etc/visitor.jpg "Visitor"), +##Double Checked Locking, +![alt text](https://github.com/yusufaytas/java-design-patterns/blob/master/double-checked-locking/etc/double_checked_locking.jpeg "Double Checked Locking"), +For a new pattern to be added you need to do the following steps:, +3. Create a simple class diagram from your example code. I've used [GenMyModel](https://www.genmymodel.com/) and its "Export as JPEG" feature., +++ b/README.md, +##Abstract Factory, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/abstract-factory/etc/abstract-factory.jpg "Abstract Factory"), +##Builder, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/builder/etc/builder.jpg "Builder"), +##Factory Method, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/factory-method/etc/factory-method.jpg "Factory Method"), +##Prototype, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/prototype/etc/prototype.jpg "Prototype"), +##Singleton, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/singleton/etc/singleton.jpg "Singleton"), +* the must be exactly one instance of a class, and it must be accessible to clients from a well-known access point, +##Adapter, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/adapter/etc/adapter.jpg "Adapter"), +##Bridge, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/bridge/etc/bridge.jpg "Bridge"), +##Composite, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/composite/etc/composite.jpg "Composite"), +##Decorator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/decorator/etc/decorator.jpg "Decorator"), +##Facade, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/facade/etc/facade.jpg "Facade"), +##Flyweight, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/flyweight/etc/flyweight.jpg "Flyweight"), +##Proxy, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/proxy/etc/proxy.jpg "Proxy"), +##Chain of responsibility, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/chain/etc/chain.jpg "Chain of Responsibility"), +##Command, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/command/etc/command.jpg "Command"), +##Interpreter, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/interpreter/etc/interpreter.jpg "Interpreter"), +##Iterator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/iterator/etc/iterator.jpg "Iterator"), +##Mediator, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/mediator/etc/mediator.jpg "Mediator"), +##Memento, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/memento/etc/memento.jpg "Memento"), +##Model-View-Presenter, +**Intent:** Apply a "Separation of Concerns" principle in a way that allows developers to build and test user interfaces.]