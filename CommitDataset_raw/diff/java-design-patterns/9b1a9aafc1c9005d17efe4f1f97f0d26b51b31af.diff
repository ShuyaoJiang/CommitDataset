[+++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, +import java.awt.event.ActionEvent;, +import java.awt.event.ActionListener;, + * The Client class is responsible for handling the input and running them through filters inside, + * the {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being, + * displayed in the {@link Target}., +public class Client extends JFrame {, +  private FilterManager filterManager;, +    clearButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +      }, +    processButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +        Order order =, +            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),, +                jtFields[2].getText(), jtAreas[1].getText());, +      }, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, +import java.awt.event.ActionEvent;, +import java.awt.event.ActionListener;, + * The Client class is responsible for handling the input and running them through filters inside, + * the {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being, + * displayed in the {@link Target}., +public class Client extends JFrame {, +  private FilterManager filterManager;, +    clearButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +      }, +    processButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +        Order order =, +            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),, +                jtFields[2].getText(), jtAreas[1].getText());, +      }, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java, +  /**, +   * Constructor, +   */, +  public FilterChain() {, +  }, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, +import java.awt.event.ActionEvent;, +import java.awt.event.ActionListener;, + * The Client class is responsible for handling the input and running them through filters inside, + * the {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being, + * displayed in the {@link Target}., +public class Client extends JFrame {, +  private FilterManager filterManager;, +    clearButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +      }, +    processButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +        Order order =, +            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),, +                jtFields[2].getText(), jtAreas[1].getText());, +      }, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java, +  /**, +   * Constructor, +   */, +  public FilterChain() {, +  }, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Order.java, +  private String order;, +    this.order = order;, +  public String getOrder() {, +    return order;, +  public void setOrder(String order) {, +    this.order = order;, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/Client.java, +import java.awt.event.ActionEvent;, +import java.awt.event.ActionListener;, + * The Client class is responsible for handling the input and running them through filters inside, + * the {@link FilterManager}., + * This is where {@link Filter}s come to play as the client pre-processes the request before being, + * displayed in the {@link Target}., +public class Client extends JFrame {, +  private FilterManager filterManager;, +    clearButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +      }, +    processButton.addActionListener(new ActionListener() {, +      @Override, +      public void actionPerformed(ActionEvent e) {, +        Order order =, +            new Order(jtFields[0].getText(), jtFields[1].getText(), jtAreas[0].getText(),, +                jtFields[2].getText(), jtAreas[1].getText());, +      }, +++ b/intercepting-filter/src/main/java/com/iluwatar/intercepting/filter/FilterChain.java]