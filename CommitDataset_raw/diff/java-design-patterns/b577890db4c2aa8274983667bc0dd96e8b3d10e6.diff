[+++ b/adapter/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/adapter/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * , + * <p>There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * , + * <p>The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, +   * Program entry point., +    Engineer manager = new GnomeEngineeringManager(new GnomeEngineer());, +++ b/adapter/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * , + * <p>There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * , + * <p>The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, +   * Program entry point., +    Engineer manager = new GnomeEngineeringManager(new GnomeEngineer());, +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java, +, +  }, +, +  public GnomeEngineeringManager(Engineer engineer) {, +    this.engineer = engineer;, +, +  public void setEngineer(Engineer engineer) {, +    this.engineer = engineer;, +  }, +++ b/adapter/pom.xml, +    <dependency>, +      <groupId>org.mockito</groupId>, +      <artifactId>mockito-core</artifactId>, +      <scope>test</scope>, +    </dependency>, +++ b/adapter/src/main/java/com/iluwatar/adapter/App.java, + * , + * <p>There are two variations of the Adapter pattern: The class adapter implements the adaptee's, + * , + * <p>The Adapter ({@link GnomeEngineer}) converts the interface of the target class (, +   * Program entry point., +    Engineer manager = new GnomeEngineeringManager(new GnomeEngineer());, +++ b/adapter/src/main/java/com/iluwatar/adapter/GnomeEngineeringManager.java, +, +  }, +, +  public GnomeEngineeringManager(Engineer engineer) {, +    this.engineer = engineer;, +, +  public void setEngineer(Engineer engineer) {, +    this.engineer = engineer;, +  }, +++ b/adapter/src/test/java/com/iluwatar/adapter/AdapterPatternTest.java, +package com.iluwatar.adapter;, +, +import static org.mockito.Mockito.spy;, +import static org.mockito.Mockito.verify;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import org.junit.Before;, +import org.junit.Test;, +, +/**, + * An adapter helps two incompatible interfaces to work together. This is the real world definition, + * for an adapter. Interfaces may be incompatible but the inner functionality should suit the need., + * The Adapter design pattern allows otherwise incompatible classes to work together by converting, + * the interface of one class into an interface expected by the clients., + * , + * <p>There are two variations of the Adapter pattern: , + * The class adapter implements the adaptee's, + * interface whereas the object adapter uses composition to contain the adaptee in the adapter, + * object. This example uses the object adapter approach., + * , + * <p>The Adapter ({@link GnomeEngineer}) converts the interface , + * of the target class ({@link GoblinGlider}) into a suitable one expected by , + * the client ({@link GnomeEngineeringManager}, + * )., + */, +public class AdapterPatternTest {, +, +  private Map<String, Object> beans;, +, +  private static final String ENGINEER_BEAN = "engineer";, +, +  private static final String MANAGER_BEAN = "manager";]