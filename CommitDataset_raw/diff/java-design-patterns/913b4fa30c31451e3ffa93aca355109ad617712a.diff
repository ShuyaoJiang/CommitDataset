[+++ b/layers/pom.xml, +++ b/layers/pom.xml, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +import java.util.Arrays;, +, +		service.saveNewLayer(new CakeLayerInfo("chocolate", 1200));, +		service.saveNewLayer(new CakeLayerInfo("banana", 900));, +		service.saveNewLayer(new CakeLayerInfo("strawberry", 950));, +		service.saveNewTopping(new CakeToppingInfo("candies", 350));, +		CakeInfo cakeInfo = new CakeInfo(new CakeToppingInfo("candies", 0),, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("chocolate", 0),, +						new CakeLayerInfo("chocolate", 0)));, +		try {, +			service.bakeNewCake(cakeInfo);, +		} catch (CakeBakingException e) {, +			e.printStackTrace();, +		}, +++ b/layers/pom.xml, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +import java.util.Arrays;, +, +		service.saveNewLayer(new CakeLayerInfo("chocolate", 1200));, +		service.saveNewLayer(new CakeLayerInfo("banana", 900));, +		service.saveNewLayer(new CakeLayerInfo("strawberry", 950));, +		service.saveNewTopping(new CakeToppingInfo("candies", 350));, +		CakeInfo cakeInfo = new CakeInfo(new CakeToppingInfo("candies", 0),, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("chocolate", 0),, +						new CakeLayerInfo("chocolate", 0)));, +		try {, +			service.bakeNewCake(cakeInfo);, +		} catch (CakeBakingException e) {, +			e.printStackTrace();, +		}, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +import javax.persistence.CascadeType;, +	@OneToOne(cascade = CascadeType.ALL), +	@OneToMany(cascade = CascadeType.ALL), +	, +	public void addLayer(CakeLayer layer) {, +		this.layers.add(layer);, +	}, +++ b/layers/pom.xml, +++ b/layers/src/main/java/com/iluwatar/layers/App.java, +import java.util.Arrays;, +, +		service.saveNewLayer(new CakeLayerInfo("chocolate", 1200));, +		service.saveNewLayer(new CakeLayerInfo("banana", 900));, +		service.saveNewLayer(new CakeLayerInfo("strawberry", 950));, +		service.saveNewTopping(new CakeToppingInfo("candies", 350));, +		CakeInfo cakeInfo = new CakeInfo(new CakeToppingInfo("candies", 0),, +				Arrays.asList(new CakeLayerInfo("chocolate", 0), new CakeLayerInfo("chocolate", 0),, +						new CakeLayerInfo("chocolate", 0)));, +		try {, +			service.bakeNewCake(cakeInfo);, +		} catch (CakeBakingException e) {, +			e.printStackTrace();, +		}, +++ b/layers/src/main/java/com/iluwatar/layers/Cake.java, +import javax.persistence.CascadeType;, +	@OneToOne(cascade = CascadeType.ALL), +	@OneToMany(cascade = CascadeType.ALL), +	, +	public void addLayer(CakeLayer layer) {, +		this.layers.add(layer);, +	}, +++ b/layers/src/main/java/com/iluwatar/layers/CakeBakingServiceImpl.java, +import org.springframework.stereotype.Service;, +import org.springframework.transaction.annotation.Transactional;, +@Service, +@Transactional, +		if (matchingToppings.isEmpty()) {, +		List<CakeLayer> allLayers = getAllLayerEntities();, +		List<CakeLayer> foundLayers = new ArrayList<>();, +			Optional<CakeLayer> found = allLayers.stream().filter((layer) -> layer.getName().equals(info.name)).findFirst();, +			if (!found.isPresent()) {, +			} else {, +				foundLayers.add(found.get());, +		CakeToppingDao toppingBean = context.getBean(CakeToppingDao.class);, +		CakeTopping topping = toppingBean.findOne(matchingToppings.iterator().next().id.get());, +		Cake cake = new Cake();, +		cake = cakeBean.save(cake);, +		cake.setTopping(topping);, +		topping.setCake(cake);, +		cake.setLayers(foundLayers);, +		for (CakeLayer layer: foundLayers) {, +			layer.setCake(cake);, +		}, +		cakeBean.save(cake);, +	private List<CakeTopping> getAllToppingEntities() {, +		CakeToppingDao bean = context.getBean(CakeToppingDao.class);, +		List<CakeTopping> result = new ArrayList<>();, +		Iterator<CakeTopping> iterator = bean.findAll().iterator();, +		while (iterator.hasNext()) {, +			result.add(iterator.next());, +		}, +		return result;, +	}, +	, +	private List<CakeLayer> getAllLayerEntities() {, +		CakeLayerDao bean = context.getBean(CakeLayerDao.class);]