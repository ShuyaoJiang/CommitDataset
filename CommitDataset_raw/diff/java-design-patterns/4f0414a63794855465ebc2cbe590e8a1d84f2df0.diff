[+++ b/README.md, +* [Async Method Invocation](#async-method-invocation), +## <a name="async-method-invocation">Async Method Invocation</a> [&#8593;](#list-of-design-patterns), +**Intent:** Asynchronous method invocation is pattern where the calling thread is not blocked while waiting results of tasks. The pattern provides parallel processing of multiple independent tasks and retrieving the results via callbacks or waiting until everything is done. , +, +**Applicability:** Use async method invocation pattern when, +* You have multiple independent tasks that can run in parallel, +* You need to improve performance of running a group of sequential tasks, +* You have limited number of processing capacity or long running tasks and the caller cannot wait the tasks to be ready, +, +**Real world examples:**, +* [FutureTask](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html), [CompletableFuture](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html) and [ExecutorService](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html) (Java), +* [Task-based Asynchronous Pattern](https://msdn.microsoft.com/en-us/library/hh873175.aspx) (.NET), +, +++ b/README.md, +* [Async Method Invocation](#async-method-invocation), +## <a name="async-method-invocation">Async Method Invocation</a> [&#8593;](#list-of-design-patterns), +**Intent:** Asynchronous method invocation is pattern where the calling thread is not blocked while waiting results of tasks. The pattern provides parallel processing of multiple independent tasks and retrieving the results via callbacks or waiting until everything is done. , +, +**Applicability:** Use async method invocation pattern when, +* You have multiple independent tasks that can run in parallel, +* You need to improve performance of running a group of sequential tasks, +* You have limited number of processing capacity or long running tasks and the caller cannot wait the tasks to be ready, +, +**Real world examples:**, +* [FutureTask](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html), [CompletableFuture](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html) and [ExecutorService](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html) (Java), +* [Task-based Asynchronous Pattern](https://msdn.microsoft.com/en-us/library/hh873175.aspx) (.NET), +, +++ b/async-method-invocation/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.4.0</version>, +  </parent>, +  <artifactId>async-method-invocation</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/README.md, +* [Async Method Invocation](#async-method-invocation), +## <a name="async-method-invocation">Async Method Invocation</a> [&#8593;](#list-of-design-patterns), +**Intent:** Asynchronous method invocation is pattern where the calling thread is not blocked while waiting results of tasks. The pattern provides parallel processing of multiple independent tasks and retrieving the results via callbacks or waiting until everything is done. , +, +**Applicability:** Use async method invocation pattern when, +* You have multiple independent tasks that can run in parallel, +* You need to improve performance of running a group of sequential tasks, +* You have limited number of processing capacity or long running tasks and the caller cannot wait the tasks to be ready, +, +**Real world examples:**, +* [FutureTask](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html), [CompletableFuture](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html) and [ExecutorService](http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html) (Java), +* [Task-based Asynchronous Pattern](https://msdn.microsoft.com/en-us/library/hh873175.aspx) (.NET), +, +++ b/async-method-invocation/pom.xml, +<?xml version="1.0"?>, +<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0", +         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">, +  <modelVersion>4.0.0</modelVersion>, +  <parent>, +    <groupId>com.iluwatar</groupId>, +    <artifactId>java-design-patterns</artifactId>, +    <version>1.4.0</version>, +  </parent>, +  <artifactId>async-method-invocation</artifactId>, +  <dependencies>, +    <dependency>, +      <groupId>junit</groupId>, +      <artifactId>junit</artifactId>, +      <scope>test</scope>, +    </dependency>, +  </dependencies>, +</project>, +++ b/async-method-invocation/src/main/java/com/iluwatar/async/method/invocation/App.java, +package com.iluwatar.async.method.invocation;, +, +import java.util.concurrent.Callable;, +, +/**, + * <p>, + * This application demonstrates the async method invocation pattern. Key parts of the pattern are, + * <code>AsyncResult</code> which is an intermediate container for an asynchronously evaluated value,, + * <code>AsyncCallback</code> which can be provided to be executed on task completion and, + * <code>AsyncExecutor</code> that manages the execution of the async tasks., + * </p>, + * <p>, + * The main method shows example flow of async invocations. The main thread starts multiple tasks with, + * variable durations and then continues its own work. When the main thread has done it's job it collects, + * the results of the async tasks. Two of the tasks are handled with callbacks, meaning the callbacks are, + * executed immediately when the tasks complete., + * </p>, + * <p>, + * Noteworthy difference of thread usage between the async results and callbacks is that the async results]