[+++ b/dao/pom.xml, +    <dependency>, +        <groupId>com.h2database</groupId>, +        <artifactId>h2</artifactId>, +      </dependency>, +    <dependency>, +      <groupId>de.bechte.junit</groupId>, +      <artifactId>junit-hierarchicalcontextrunner</artifactId>, +    </dependency>, +++ b/dao/pom.xml, +    <dependency>, +        <groupId>com.h2database</groupId>, +        <artifactId>h2</artifactId>, +      </dependency>, +    <dependency>, +      <groupId>de.bechte.junit</groupId>, +      <artifactId>junit-hierarchicalcontextrunner</artifactId>, +    </dependency>, +++ b/dao/src/main/java/com/iluwatar/dao/DBCustomerDao.java, +import java.sql.Connection;, +import java.sql.DriverManager;, +import java.sql.PreparedStatement;, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.util.Spliterator;, +import java.util.Spliterators;, +import java.util.function.Consumer;, +import java.util.stream.StreamSupport;, +  private String dbUrl;, +, +  public DBCustomerDao(String dbUrl) {, +    this.dbUrl = dbUrl;, +  }, +, +    , +    Connection connection;, +    try {, +      connection = getConnection();, +      PreparedStatement statement = connection.prepareStatement("SELECT * FROM CUSTOMERS");, +      ResultSet resultSet = statement.executeQuery();, +      return StreamSupport.stream(new Spliterators.AbstractSpliterator<Customer>(Long.MAX_VALUE, Spliterator.ORDERED) {, +        , +        @Override, +        public boolean tryAdvance(Consumer<? super Customer> action) {, +          try {, +            if (!resultSet.next()) {, +              return false;, +            }, +            action.accept(createCustomer(resultSet));, +            return true;, +          } catch (SQLException e) {, +            e.printStackTrace();, +            return false;, +          }, +          , +        }}, false).onClose(() -> mutedClose(connection));, +    } catch (SQLException e) {, +      e.printStackTrace();, +  }, +  , +  private void mutedClose(Connection connection) {, +    try {, +      connection.close();, +    } catch (SQLException e) {, +      e.printStackTrace();, +    }, +  }, +, +  private Customer createCustomer(ResultSet resultSet) throws SQLException {, +    return new Customer(resultSet.getInt("ID"), , +        resultSet.getString("FNAME"), , +        resultSet.getString("LNAME"));, +  }, +    try (Connection connection = getConnection();, +        PreparedStatement statement = connection.prepareStatement("SELECT * FROM CUSTOMERS WHERE ID = ?")) {, +        statement.setInt(1, id);, +        ResultSet resultSet = statement.executeQuery();, +        if (resultSet.next()) {, +          return createCustomer(resultSet);, +        }, +    } catch (SQLException ex) {, +      ex.printStackTrace();, +    }, +    if (getById(customer.getId()) != null) {, +    try (Connection connection = getConnection();, +        PreparedStatement statement = connection.prepareStatement("INSERT INTO CUSTOMERS VALUES (?,?,?)")) {, +      statement.setInt(1, customer.getId());, +      statement.setString(2, customer.getFirstName());, +      statement.setString(3, customer.getLastName());, +      statement.execute();, +      return true;, +    } catch (SQLException ex) {, +      ex.printStackTrace();, +      return false;, +    }, +  }, +, +    try (Connection connection = getConnection();, +        PreparedStatement statement = connection.prepareStatement("UPDATE CUSTOMERS SET FNAME = ?, LNAME = ? WHERE ID = ?")) {, +      statement.setString(1, customer.getFirstName());]