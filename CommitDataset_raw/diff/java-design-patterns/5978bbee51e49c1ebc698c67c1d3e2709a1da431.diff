[+++ b/README.md, +* [Half-Sync/Half-Async](#half-sync-half-async), +## <a name="half-sync-half-async">Half-Sync/Half-Async</a> [&#8593;](#list-of-design-patterns), +**Intent:** The Half-Sync/Half-Async pattern decouples synchronous I/O from asynchronous I/O in a system to simplify concurrent programming effort without degrading execution efficiency., +![Half-Sync/Half-Async class diagram](./half-sync-half-async/etc/half-sync-half-async.png), +, +**Applicability:** Use Half-Sync/Half-Async pattern when, +* A system possesses following characteristics:, +  * System must perform tasks in response to external events that occur asynchronously, like hardware interrupts in OS, +  * It is inefficient to dedicate separate thread of control to perform synchronous I/O for each external source of event, +  * The higher level tasks in the system can be simplified significantly if I/O is performed synchronously., +* One or more tasks in a system must run in a single thread of control, while other tasks may benefit from multi-threading., +, +**Real world examples:**, +* [BSD Unix networking subsystem](http://www.cs.wustl.edu/~schmidt/PDF/PLoP-95.pdf), +* [Real Time CORBA](http://www.omg.org/news/meetings/workshops/presentations/realtime2001/4-3_Pyarali_thread-pool.pdf), +* [Android AsyncTask framework](http://developer.android.com/reference/android/os/AsyncTask.html), +The Visitor pattern is a means of adding a new operation to existing classes. Double dispatch is a means of dispatching function calls with respect to two polymorphic types, rather than a single polymorphic type, which is what languages like C++ and Java support directly., +++ b/README.md, +* [Half-Sync/Half-Async](#half-sync-half-async), +## <a name="half-sync-half-async">Half-Sync/Half-Async</a> [&#8593;](#list-of-design-patterns), +**Intent:** The Half-Sync/Half-Async pattern decouples synchronous I/O from asynchronous I/O in a system to simplify concurrent programming effort without degrading execution efficiency., +![Half-Sync/Half-Async class diagram](./half-sync-half-async/etc/half-sync-half-async.png), +, +**Applicability:** Use Half-Sync/Half-Async pattern when, +* A system possesses following characteristics:, +  * System must perform tasks in response to external events that occur asynchronously, like hardware interrupts in OS, +  * It is inefficient to dedicate separate thread of control to perform synchronous I/O for each external source of event, +  * The higher level tasks in the system can be simplified significantly if I/O is performed synchronously., +* One or more tasks in a system must run in a single thread of control, while other tasks may benefit from multi-threading., +, +**Real world examples:**, +* [BSD Unix networking subsystem](http://www.cs.wustl.edu/~schmidt/PDF/PLoP-95.pdf), +* [Real Time CORBA](http://www.omg.org/news/meetings/workshops/presentations/realtime2001/4-3_Pyarali_thread-pool.pdf), +* [Android AsyncTask framework](http://developer.android.com/reference/android/os/AsyncTask.html), +The Visitor pattern is a means of adding a new operation to existing classes. Double dispatch is a means of dispatching function calls with respect to two polymorphic types, rather than a single polymorphic type, which is what languages like C++ and Java support directly., +++ b/half-sync-half-async/etc/half-sync-half-async.png, +++ b/README.md, +* [Half-Sync/Half-Async](#half-sync-half-async), +## <a name="half-sync-half-async">Half-Sync/Half-Async</a> [&#8593;](#list-of-design-patterns), +**Intent:** The Half-Sync/Half-Async pattern decouples synchronous I/O from asynchronous I/O in a system to simplify concurrent programming effort without degrading execution efficiency., +![Half-Sync/Half-Async class diagram](./half-sync-half-async/etc/half-sync-half-async.png), +, +**Applicability:** Use Half-Sync/Half-Async pattern when, +* A system possesses following characteristics:, +  * System must perform tasks in response to external events that occur asynchronously, like hardware interrupts in OS, +  * It is inefficient to dedicate separate thread of control to perform synchronous I/O for each external source of event, +  * The higher level tasks in the system can be simplified significantly if I/O is performed synchronously., +* One or more tasks in a system must run in a single thread of control, while other tasks may benefit from multi-threading., +, +**Real world examples:**, +* [BSD Unix networking subsystem](http://www.cs.wustl.edu/~schmidt/PDF/PLoP-95.pdf), +* [Real Time CORBA](http://www.omg.org/news/meetings/workshops/presentations/realtime2001/4-3_Pyarali_thread-pool.pdf), +* [Android AsyncTask framework](http://developer.android.com/reference/android/os/AsyncTask.html), +The Visitor pattern is a means of adding a new operation to existing classes. Double dispatch is a means of dispatching function calls with respect to two polymorphic types, rather than a single polymorphic type, which is what languages like C++ and Java support directly., +++ b/half-sync-half-async/etc/half-sync-half-async.png, +++ b/half-sync-half-async/etc/half-sync-half-async.ucls, +<?xml version="1.0" encoding="UTF-8"?>, +<class-diagram version="1.1.8" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" , +  realizations="true" associations="true" dependencies="false" nesting-relationships="true">  , +  <class id="1" language="java" name="com.iluwatar.halfsynchalfasync.AsynchronousService" project="half-sync-half-async" , +    file="/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsynchronousService.java" binary="false" , +    corner="BOTTOM_RIGHT">    , +    <position height="115" width="265" x="41" y="37"/>    , +    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +      sort-features="false" accessors="true" visibility="true">      , +      <attributes public="true" package="true" protected="true" private="true" static="true"/>      , +      <operations public="true" package="true" protected="true" private="true" static="true"/>    , +    </display>  , +  </class>  , +  <interface id="2" language="java" name="com.iluwatar.halfsynchalfasync.AsyncTask" project="half-sync-half-async" , +    file="/half-sync-half-async/src/main/java/com/iluwatar/halfsynchalfasync/AsyncTask.java" binary="false" , +    corner="BOTTOM_RIGHT">    , +    <position height="-1" width="-1" x="776" y="223"/>    , +    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +      sort-features="false" accessors="true" visibility="true">      , +      <attributes public="true" package="true" protected="true" private="true" static="true"/>      , +      <operations public="true" package="true" protected="true" private="true" static="true"/>    , +    </display>  , +  </interface>  , +  <interface id="3" language="java" name="java.util.concurrent.BlockingQueue" project="async-method-invocation" , +    file="/opt/Softwares/Eclipses/MARS/eclipse/jre/lib/rt.jar" binary="true" corner="BOTTOM_RIGHT">    , +    <position height="-1" width="-1" x="494" y="310"/>    , +    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +      sort-features="false" accessors="true" visibility="true">      , +      <attributes public="false" package="false" protected="false" private="false" static="true"/>      , +      <operations public="false" package="false" protected="false" private="false" static="true"/>    , +    </display>  , +  </interface>  , +  <class id="4" language="java" name="java.util.concurrent.ThreadPoolExecutor" project="async-method-invocation" , +    file="/opt/Softwares/Eclipses/MARS/eclipse/jre/lib/rt.jar" binary="true" corner="BOTTOM_RIGHT">    , +    <position height="-1" width="-1" x="174" y="343"/>    , +    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" , +      sort-features="false" accessors="true" visibility="true">      , +      <attributes public="true" package="true" protected="true" private="false" static="true"/>      , +      <operations public="false" package="false" protected="false" private="false" static="false"/>    , +    </display>  , +  </class>  , +  <interface id="5" language="java" name="java.util.concurrent.Callable" project="async-method-invocation" , +    file="/opt/Softwares/Eclipses/MARS/eclipse/jre/lib/rt.jar" binary="true" corner="BOTTOM_RIGHT">    ]