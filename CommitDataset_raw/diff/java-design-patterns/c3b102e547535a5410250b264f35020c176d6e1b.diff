[+++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +        <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, +        <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, +        <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, +        <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, +        <jackson.version>2.8.5</jackson.version>, +        <module>serverless</module>, +++ b/README.md, +[![Quality Gate](https://sonarcloud.io/api/badges/gate?key=com.iluwatar%3Ajava-design-patterns)](https://sonarcloud.io/dashboard/index/com.iluwatar%3Ajava-design-patterns), +++ b/pom.xml, +        <aws-lambda-core.version>1.1.0</aws-lambda-core.version>, +        <aws-java-sdk-dynamodb.version>1.11.289</aws-java-sdk-dynamodb.version>, +        <aws-lambda-log4j.version>1.0.0</aws-lambda-log4j.version>, +        <aws-lambda-java-events.version>2.0.1</aws-lambda-java-events.version>, +        <jackson.version>2.8.5</jackson.version>, +        <module>serverless</module>, +++ b/serverless/README.md, +---, +layout: pattern, +title: serverless, +folder: serverless, +permalink: /patterns/serverless/, +categories: Architectural, +tags:, + - Java, + - Difficulty-Intermittent, +---, +, +## Serverless, +, +Serverless eliminates the need to plan for infrastructure and let's you focus on your , +application. , +, +Following are optimization katas you should be aware of while building a serverless , +applications, +, +* The Lean function, +    * Concise logic - Use functions to transform, not transport (utilize some of the , +    integration available from the provider to transport), and make sure you read only, +     what you need, +    * Efficient/single purpose code - avoid conditional/routing logic and break down , +    into individual functions, avoid "fat"/monolithic functions and control the , +    dependencies in the function deployment package to reduce the load time for your , +    function, +    * ephemeral environment - Utilize container start for expensive initializations, +* Eventful Invocations, +    * Succinct payloads - Scrutinize the event as much as possible, and watch for , +    payload constraints (async - 128K), +    * resilient routing - Understand retry policies and leverage dead letter queues , +    (SQS or SNS for replays) and remember retries count as invocations, +    * concurrent execution - lambda thinks of it's scale in terms of concurrency and , +    its not request based/duration based. Lambda will spin up the number of instances , +    based on the request. , +* Coordinated calls, +    * Decoupled via APIs - best practice to setup your application is to have API's as, +     contracts that ensures separation of concerns, +    * scale-matched downstream - make sure when Lambda is calling downstream , +    components, you are matching scale configuration to it (by specifying max , +    concurrency based on downstream services), +    * secured - Always ask a question, do I need a VPC?, +* Serviceful operations, +    * Automated - use automated tools to manage and maintain the stack , +    * monitored applications - use monitoring services to get holistic view of your , +    serverless applications, +, +## Intent, +, +Whether to reduce your infrastructure costs, shrink the time you spend on ops tasks, , +simplify your deployment processes, reach infinite scalability, serverless cuts time , +to market in half., + , +## Explanation, +, +Serverless computing is a cloud computing execution model in which the cloud provider , +dynamically manages the allocation of machine resources. Pricing is based on the , +actual amount of resources consumed by an application, rather than on pre-purchased , +units of capacity. , +, +## Serverless framework, +, +[Serverless](https://serverless.com/) is a toolkit for deploying and operating serverless architectures. , +, +## (Function as a Service or "FaaS"), +, +The term ‘Serverless’ is confusing since with such applications there are both server , +hardware and server processes running somewhere, but the difference to normal , +approaches is that the organization building and supporting a ‘Serverless’ application, + is not looking after the hardware or the processes - they are outsourcing this to a vendor., +, +Some of the Serverless Cloud Providers are , +, +![https://serverless.com/framework/docs/providers/aws/](./etc/aws-black.png "aws"), +![https://serverless.com/framework/docs/providers/azure/](./etc/azure-black.png "azure"), +![https://serverless.com/framework/docs/providers/openwhisk/](./etc/openwhisk-black.png "openwhisk"), +![https://serverless.com/framework/docs/providers/google/](./etc/gcf-black.png "google"), +![https://serverless.com/framework/docs/providers/kubeless/](./etc/kubeless-logos-black.png "kubeless")]