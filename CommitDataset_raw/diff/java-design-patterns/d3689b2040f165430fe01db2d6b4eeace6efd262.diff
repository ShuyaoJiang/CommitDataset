[+++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, +  private static <E> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<E> iterable) {, +    Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, +  private static <E> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<E> iterable) {, +    Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <E> is the class of objects the iterable contains, +public interface FluentIterable<E> extends Iterable<E> {, +  FluentIterable<E> filter(Predicate<? super E> predicate);, +  Optional<E> first();, +  FluentIterable<E> first(int count);, +  Optional<E> last();, +  FluentIterable<E> last(int count);, +   * Transforms this FluentIterable into a new one containing objects of the type T., +   * @param function a function that transforms an instance of E into an instance of T, +   * @param <T> the target type of the transformation, +  <T> FluentIterable<T> map(Function<? super E, T> function);, +  List<E> asList();, +   * @param <E> the type of the objects to iterate, +  static <E> List<E> copyToList(Iterable<E> iterable) {, +    ArrayList<E> copy = new ArrayList<>();, +    Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, +  private static <E> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<E> iterable) {, +    Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <E> is the class of objects the iterable contains, +public interface FluentIterable<E> extends Iterable<E> {, +  FluentIterable<E> filter(Predicate<? super E> predicate);, +  Optional<E> first();, +  FluentIterable<E> first(int count);, +  Optional<E> last();, +  FluentIterable<E> last(int count);, +   * Transforms this FluentIterable into a new one containing objects of the type T., +   * @param function a function that transforms an instance of E into an instance of T, +   * @param <T> the target type of the transformation, +  <T> FluentIterable<T> map(Function<? super E, T> function);, +  List<E> asList();, +   * @param <E> the type of the objects to iterate, +  static <E> List<E> copyToList(Iterable<E> iterable) {, +    ArrayList<E> copy = new ArrayList<>();, +    Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, +public abstract class DecoratingIterator<E> implements Iterator<E> {, +  protected final Iterator<E> fromIterator;, +  private E next;, +  public DecoratingIterator(Iterator<E> fromIterator) {, +  public final E next() {, +      final E result = next;, +  public abstract E computeNext();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/app/App.java, +  private static <E> void prettyPrint(String prefix, Iterable<E> iterable) {, +  private static <E> void prettyPrint(String delimiter, String prefix,, +                                         Iterable<E> iterable) {, +    Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/FluentIterable.java, + * @param <E> is the class of objects the iterable contains, +public interface FluentIterable<E> extends Iterable<E> {, +  FluentIterable<E> filter(Predicate<? super E> predicate);, +  Optional<E> first();, +  FluentIterable<E> first(int count);, +  Optional<E> last();, +  FluentIterable<E> last(int count);, +   * Transforms this FluentIterable into a new one containing objects of the type T., +   * @param function a function that transforms an instance of E into an instance of T, +   * @param <T> the target type of the transformation, +  <T> FluentIterable<T> map(Function<? super E, T> function);, +  List<E> asList();, +   * @param <E> the type of the objects to iterate, +  static <E> List<E> copyToList(Iterable<E> iterable) {, +    ArrayList<E> copy = new ArrayList<>();, +    Iterator<E> iterator = iterable.iterator();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/DecoratingIterator.java, +public abstract class DecoratingIterator<E> implements Iterator<E> {, +  protected final Iterator<E> fromIterator;, +  private E next;, +  public DecoratingIterator(Iterator<E> fromIterator) {, +  public final E next() {, +      final E result = next;, +  public abstract E computeNext();, +++ b/fluentinterface/src/main/java/com/iluwatar/fluentinterface/fluentiterable/lazy/LazyFluentIterable.java, + * @param <E> the type of the objects the iteration is about, +public class LazyFluentIterable<E> implements FluentIterable<E> {, +  private final Iterable<E> iterable;, +  protected LazyFluentIterable(Iterable<E> iterable) {, +  public FluentIterable<E> filter(Predicate<? super E> predicate) {, +    return new LazyFluentIterable<E>() {, +      public Iterator<E> iterator() {, +        return new DecoratingIterator<E>(iterable.iterator()) {, +          public E computeNext() {, +              E candidate = fromIterator.next();, +  public Optional<E> first() {, +    Iterator<E> resultIterator = first(1).iterator();]