[+++ /dev/null, +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *, + * The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete, + * implementation but abstraction. It utilizes Dependency Injection pattern allowing its, + * {@link Tobacco} dependency to be injected through its constructor. This way, handling the, + * dependency is no longer the wizard's responsibility. It is resolved outside the wizard class., + * The third example takes the pattern a step further. It uses Guice framework for Dependency, +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *, + * The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete, + * implementation but abstraction. It utilizes Dependency Injection pattern allowing its, + * {@link Tobacco} dependency to be injected through its constructor. This way, handling the, + * dependency is no longer the wizard's responsibility. It is resolved outside the wizard class., + * The third example takes the pattern a step further. It uses Guice framework for Dependency, +++ /dev/null, +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *, + * The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete, + * implementation but abstraction. It utilizes Dependency Injection pattern allowing its, + * {@link Tobacco} dependency to be injected through its constructor. This way, handling the, + * dependency is no longer the wizard's responsibility. It is resolved outside the wizard class., + * The third example takes the pattern a step further. It uses Guice framework for Dependency, +++ /dev/null, +++ b/event-queue/README.md, +---, +layout: pattern, +title: Event Queue, +folder: event-queue, +permalink: /patterns/event-queue/, +categories: Concurrency, +tags:, + - Java, + - Difficulty Intermediate, + - Queue, +---, +, +## Intent, +Event Queue is a good pattern if You have a limited accesibility resource (for example: , +Audio or Database), but You need to handle all the requests that want to use that., +It puts all the requests in a queue and process them asynchronously., +Gives the resource for the event when it is the next in the queue and in same time, +removes it from the queue., +, +![alt text](./etc/model.png "Event Queue"), +, +## Applicability, +Use the Event Queue pattern when, +, +* You have a limited accesibility resource and the asynchronous process is acceptable to reach that, +, +## Credits, +, +* [Mihï¿½ly Kuprivecz - Event Queue], +++ /dev/null, +++ b/dependency-injection/src/main/java/com/iluwatar/dependency/injection/App.java, + *, + *, + *, + * The second wizard ({@link AdvancedWizard}) is more flexible. It does not depend on any concrete, + * implementation but abstraction. It utilizes Dependency Injection pattern allowing its, + * {@link Tobacco} dependency to be injected through its constructor. This way, handling the, + * dependency is no longer the wizard's responsibility. It is resolved outside the wizard class., + * The third example takes the pattern a step further. It uses Guice framework for Dependency, +++ /dev/null, +++ b/event-queue/README.md, +---, +layout: pattern, +title: Event Queue, +folder: event-queue, +permalink: /patterns/event-queue/, +categories: Concurrency, +tags:, + - Java, + - Difficulty Intermediate, + - Queue, +---, +, +## Intent, +Event Queue is a good pattern if You have a limited accesibility resource (for example: , +Audio or Database), but You need to handle all the requests that want to use that., +It puts all the requests in a queue and process them asynchronously., +Gives the resource for the event when it is the next in the queue and in same time, +removes it from the queue., +, +![alt text](./etc/model.png "Event Queue"), +, +## Applicability, +Use the Event Queue pattern when, +, +* You have a limited accesibility resource and the asynchronous process is acceptable to reach that]