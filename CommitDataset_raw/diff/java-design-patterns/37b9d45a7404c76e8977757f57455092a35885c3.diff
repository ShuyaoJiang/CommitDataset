[+++ b/abstract-factory/README.md, +## Explanation, +Real world example, +, +> To create a kingdom we need objects with common theme. Elven kingdom needs an Elven king, Elven castle and Elven army whereas Orcish kingdom needs an Orcish king, Orcish castle and Orcish army. There is a dependency between the objects in the kingdom., +, +In plain words, +, +> A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes., +, +Wikipedia says, +, +> The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes, +, +**Programmatic Example**, +, +Translating the kingdom example above. First of all we have some interfaces and implementation for the objects in the kingdom, +, +```, +public interface Castle {, +  String getDescription();, +}, +public interface King {, +  String getDescription();, +}, +public interface Army {, +  String getDescription();, +}, +, +// Elven implementations ->, +public class ElfCastle implements Castle {, +  static final String DESCRIPTION = "This is the Elven castle!";, +  @Override, +  public String getDescription() {, +    return DESCRIPTION;, +  }, +}, +public class ElfKing implements King {, +  static final String DESCRIPTION = "This is the Elven king!";, +  @Override, +  public String getDescription() {, +    return DESCRIPTION;, +  }, +}, +public class ElfArmy implements Army {, +  static final String DESCRIPTION = "This is the Elven Army!";, +  @Override, +  public String getDescription() {, +    return DESCRIPTION;, +  }, +}, +, +// Orcish implementations similarly..., +, +```, +, +Then we have the abstraction and implementations for the kingdom factory, +, +```, +public interface KingdomFactory {, +  Castle createCastle();, +  King createKing();, +  Army createArmy();, +}, +, +public class ElfKingdomFactory implements KingdomFactory {, +  public Castle createCastle() {, +    return new ElfCastle();, +  }, +  public King createKing() {, +    return new ElfKing();, +  }, +  public Army createArmy() {, +    return new ElfArmy();, +  }, +}, +, +public class OrcKingdomFactory implements KingdomFactory {, +  public Castle createCastle() {, +    return new OrcCastle();, +  }, +  public King createKing() {, +    return new OrcKing();, +  }, +  public Army createArmy() {, +    return new OrcArmy();, +  }, +}, +```, +, +Now we have our abstract factory that lets us make family of related objects i.e. Elven kingdom factory creates Elven castle, king and army etc., +, +```, +KingdomFactory factory = new ElfKingdomFactory();, +Castle castle = factory.createCastle();, +King king = factory.createKing();, +Army army = factory.createArmy();, +, +castle.getDescription();  // Output: This is the Elven castle!, +king.getDescription(); // Output: This is the Elven king!]