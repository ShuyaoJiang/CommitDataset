[+++ b/caching/etc/caching.png, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +    <position height="-1" width="-1" x="1140" y="405"/>    , +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +    <position height="-1" width="-1" x="1140" y="405"/>    , +++ b/caching/pom.xml, +    to SKIP the running of the JUnit tests for this pattern. To ACTIVATE the running of the tests, change the, +    skipTests (below) flag to 'false' and vice-versa., +          <skipTests>false</skipTests>, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +    <position height="-1" width="-1" x="1140" y="405"/>    , +++ b/caching/pom.xml, +    to SKIP the running of the JUnit tests for this pattern. To ACTIVATE the running of the tests, change the, +    skipTests (below) flag to 'false' and vice-versa., +          <skipTests>false</skipTests>, +++ b/caching/src/main/java/com/wssia/caching/AppManager.java, +  /**, +   *, +   * Developer/Tester is able to choose whether the application should use MongoDB as its underlying, +   * data storage or a simple Java data structure to (temporarily) store the data/objects during, +   * runtime., +   */, +  public static void initDB(boolean useMongoDB) {, +    if (useMongoDB) {, +    } else {, +      DBManager.createVirtualDB();, +    }, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +    <position height="-1" width="-1" x="1140" y="405"/>    , +++ b/caching/pom.xml, +    to SKIP the running of the JUnit tests for this pattern. To ACTIVATE the running of the tests, change the, +    skipTests (below) flag to 'false' and vice-versa., +          <skipTests>false</skipTests>, +++ b/caching/src/main/java/com/wssia/caching/AppManager.java, +  /**, +   *, +   * Developer/Tester is able to choose whether the application should use MongoDB as its underlying, +   * data storage or a simple Java data structure to (temporarily) store the data/objects during, +   * runtime., +   */, +  public static void initDB(boolean useMongoDB) {, +    if (useMongoDB) {, +    } else {, +      DBManager.createVirtualDB();, +    }, +++ b/caching/src/main/java/com/wssia/caching/CacheStore.java, +++ b/caching/etc/caching.png, +++ b/caching/etc/caching.ucls, +    <position height="-1" width="-1" x="1140" y="405"/>    , +++ b/caching/pom.xml, +    to SKIP the running of the JUnit tests for this pattern. To ACTIVATE the running of the tests, change the, +    skipTests (below) flag to 'false' and vice-versa., +          <skipTests>false</skipTests>, +++ b/caching/src/main/java/com/wssia/caching/AppManager.java, +  /**, +   *, +   * Developer/Tester is able to choose whether the application should use MongoDB as its underlying, +   * data storage or a simple Java data structure to (temporarily) store the data/objects during, +   * runtime., +   */, +  public static void initDB(boolean useMongoDB) {, +    if (useMongoDB) {, +    } else {, +      DBManager.createVirtualDB();, +    }, +++ b/caching/src/main/java/com/wssia/caching/CacheStore.java, +++ b/caching/src/main/java/com/wssia/caching/DBManager.java, +import java.util.HashMap;, + * Developer/Tester is able to choose whether the application should use MongoDB as its underlying, + * data storage (connect()) or a simple Java data structure to (temporarily) store the data/objects, + * during runtime (createVirtualDB())., +  private static boolean useMongoDB;, +, +  private static HashMap<String, UserAccount> virtualDB;, +, +  public static void createVirtualDB() {, +    useMongoDB = false;, +    virtualDB = new HashMap<String, UserAccount>();, +  }, +    useMongoDB = true;, +    if (!useMongoDB) {, +      if (virtualDB.containsKey(userID)), +        return virtualDB.get(userID);, +      return null;, +    }, +    if (!useMongoDB) {, +      virtualDB.put(userAccount.getUserID(), userAccount);, +      return;, +    }, +    if (!useMongoDB) {, +      virtualDB.put(userAccount.getUserID(), userAccount);, +      return;, +    }, +    if (!useMongoDB) {, +      virtualDB.put(userAccount.getUserID(), userAccount);, +      return;]