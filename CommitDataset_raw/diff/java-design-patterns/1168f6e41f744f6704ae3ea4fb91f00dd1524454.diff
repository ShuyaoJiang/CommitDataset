[+++ b/decorator/etc/decorator.jpg, +++ b/decorator/etc/decorator.jpg, +++ b/decorator/src/main/java/com/iluwatar/App.java, +/**, + * , + * Decorator pattern is more flexible alternative to, + * subclassing. The decorator class implements the same, + * interface as the target and uses composition to, + * "decorate" calls to the target., + *, + */, +    	Hostile troll = new Troll();, +    	Hostile smart = new SmartTroll(new Troll());, +++ b/decorator/etc/decorator.jpg, +++ b/decorator/src/main/java/com/iluwatar/App.java, +/**, + * , + * Decorator pattern is more flexible alternative to, + * subclassing. The decorator class implements the same, + * interface as the target and uses composition to, + * "decorate" calls to the target., + *, + */, +    	Hostile troll = new Troll();, +    	Hostile smart = new SmartTroll(new Troll());, +++ b/decorator/src/main/java/com/iluwatar/Hostile.java, +package com.iluwatar;, +, +public interface Hostile {, +, +	void attack();, +	void fleeBattle();, +	, +}, +++ b/decorator/etc/decorator.jpg, +++ b/decorator/src/main/java/com/iluwatar/App.java, +/**, + * , + * Decorator pattern is more flexible alternative to, + * subclassing. The decorator class implements the same, + * interface as the target and uses composition to, + * "decorate" calls to the target., + *, + */, +    	Hostile troll = new Troll();, +    	Hostile smart = new SmartTroll(new Troll());, +++ b/decorator/src/main/java/com/iluwatar/Hostile.java, +package com.iluwatar;, +, +public interface Hostile {, +, +	void attack();, +	void fleeBattle();, +	, +}, +++ b/decorator/src/main/java/com/iluwatar/SmartTroll.java, +public class SmartTroll implements Hostile {, +	private Hostile decorated;, +	public SmartTroll(Hostile decorated) {, +++ b/decorator/etc/decorator.jpg, +++ b/decorator/src/main/java/com/iluwatar/App.java, +/**, + * , + * Decorator pattern is more flexible alternative to, + * subclassing. The decorator class implements the same, + * interface as the target and uses composition to, + * "decorate" calls to the target., + *, + */, +    	Hostile troll = new Troll();, +    	Hostile smart = new SmartTroll(new Troll());, +++ b/decorator/src/main/java/com/iluwatar/Hostile.java, +package com.iluwatar;, +, +public interface Hostile {, +, +	void attack();, +	void fleeBattle();, +	, +}, +++ b/decorator/src/main/java/com/iluwatar/SmartTroll.java, +public class SmartTroll implements Hostile {, +	private Hostile decorated;, +	public SmartTroll(Hostile decorated) {, +++ b/decorator/src/main/java/com/iluwatar/Troll.java, +public class Troll implements Hostile {]