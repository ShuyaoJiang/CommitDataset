[+++ b/module/etc/module.urm.puml, +@startuml, +package com.iluwatar.module {, +  class App {, +    + consoleLoggerModule : ConsoleLoggerModule {static}, +    + fileLoggerModule : FileLoggerModule {static}, +    - App(), +    + execute(args : String[]) {static}, +    + main(args : String[]) {static}, +    + prepare() {static}, +    + unprepare() {static}, +  }, +  class ConsoleLoggerModule {, +    - LOGGER : Logger {static}, +    + error : PrintStream, +    + output : PrintStream, +    - singleton : ConsoleLoggerModule {static}, +    - ConsoleLoggerModule(), +    + getSingleton() : ConsoleLoggerModule {static}, +    + prepare(), +    + printErrorString(value : String), +    + printString(value : String), +    + unprepare(), +  }, +  class FileLoggerModule {, +    - ERROR_FILE : String {static}, +    - LOGGER : Logger {static}, +    - OUTPUT_FILE : String {static}, +    + error : PrintStream, +    + output : PrintStream, +    - singleton : FileLoggerModule {static}, +    - FileLoggerModule(), +    + getSingleton() : FileLoggerModule {static}, +    + prepare(), +    + printErrorString(value : String), +    + printString(value : String), +    + unprepare(), +  }, +}, +FileLoggerModule -->  "-singleton" FileLoggerModule, +App -->  "-consoleLoggerModule" ConsoleLoggerModule, +ConsoleLoggerModule -->  "-singleton" ConsoleLoggerModule, +App -->  "-fileLoggerModule" FileLoggerModule, +@enduml, +++ b/module/etc/module.urm.puml, +@startuml, +package com.iluwatar.module {, +  class App {, +    + consoleLoggerModule : ConsoleLoggerModule {static}, +    + fileLoggerModule : FileLoggerModule {static}, +    - App(), +    + execute(args : String[]) {static}, +    + main(args : String[]) {static}, +    + prepare() {static}, +    + unprepare() {static}, +  }, +  class ConsoleLoggerModule {, +    - LOGGER : Logger {static}, +    + error : PrintStream, +    + output : PrintStream, +    - singleton : ConsoleLoggerModule {static}, +    - ConsoleLoggerModule(), +    + getSingleton() : ConsoleLoggerModule {static}, +    + prepare(), +    + printErrorString(value : String), +    + printString(value : String), +    + unprepare(), +  }, +  class FileLoggerModule {, +    - ERROR_FILE : String {static}, +    - LOGGER : Logger {static}, +    - OUTPUT_FILE : String {static}, +    + error : PrintStream, +    + output : PrintStream, +    - singleton : FileLoggerModule {static}, +    - FileLoggerModule(), +    + getSingleton() : FileLoggerModule {static}, +    + prepare(), +    + printErrorString(value : String), +    + printString(value : String), +    + unprepare(), +  }, +}, +FileLoggerModule -->  "-singleton" FileLoggerModule, +App -->  "-consoleLoggerModule" ConsoleLoggerModule, +ConsoleLoggerModule -->  "-singleton" ConsoleLoggerModule, +App -->  "-fileLoggerModule" FileLoggerModule, +@enduml, +++ b/module/src/main/java/com/iluwatar/module/App.java, + * The Module pattern can be considered a Creational pattern and a Structural pattern. It manages, + * the creation and organization of other elements, and groups them as the structural pattern does., + * An object that applies this pattern can provide the equivalent of a namespace, providing the, + * initialization and finalization process of a static class or a class with static members with, + * cleaner, more concise syntax and semantics., + * The below example demonstrates a use case for testing two different modules: File Logger and, + * Console Logger, +  /**, +   * Following method performs the initialization, +   * , +   * @throws FileNotFoundException if program is not able to find log files (output.txt and]