[+++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, + * In this example the delegates are {@link EpsonPrinter}, {@link HpPrinter} and {@link CanonPrinter} they all implement, + * {@link Printer}. The {@link AbstractPrinterController} and through inheritance {@link PrinterController} also, + * implement {@link Printer}. However neither provide the functionality of {@link Printer} by printing to the screen,, + * they actually call upon the instance of {@link Printer} that they were instantiated with. Therefore delegating the, + * behaviour to another class., +    AbstractPrinterController hpPrinterController = new PrinterController(new HpPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, + * In this example the delegates are {@link EpsonPrinter}, {@link HpPrinter} and {@link CanonPrinter} they all implement, + * {@link Printer}. The {@link AbstractPrinterController} and through inheritance {@link PrinterController} also, + * implement {@link Printer}. However neither provide the functionality of {@link Printer} by printing to the screen,, + * they actually call upon the instance of {@link Printer} that they were instantiated with. Therefore delegating the, + * behaviour to another class., +    AbstractPrinterController hpPrinterController = new PrinterController(new HpPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, +, + * @see HpPrinter, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, + * In this example the delegates are {@link EpsonPrinter}, {@link HpPrinter} and {@link CanonPrinter} they all implement, + * {@link Printer}. The {@link AbstractPrinterController} and through inheritance {@link PrinterController} also, + * implement {@link Printer}. However neither provide the functionality of {@link Printer} by printing to the screen,, + * they actually call upon the instance of {@link Printer} that they were instantiated with. Therefore delegating the, + * behaviour to another class., +    AbstractPrinterController hpPrinterController = new PrinterController(new HpPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, +, + * @see HpPrinter, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, + * In this example the delegates are {@link EpsonPrinter}, {@link HpPrinter} and {@link CanonPrinter} they all implement, + * {@link Printer}. The {@link AbstractPrinterController} and through inheritance {@link PrinterController} also, + * implement {@link Printer}. However neither provide the functionality of {@link Printer} by printing to the screen,, + * they actually call upon the instance of {@link Printer} that they were instantiated with. Therefore delegating the, + * behaviour to another class., +    AbstractPrinterController hpPrinterController = new PrinterController(new HpPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, +, + * @see HpPrinter, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/CanonPrinter.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, + * In this example the delegates are {@link EpsonPrinter}, {@link HpPrinter} and {@link CanonPrinter} they all implement, + * {@link Printer}. The {@link AbstractPrinterController} and through inheritance {@link PrinterController} also, + * implement {@link Printer}. However neither provide the functionality of {@link Printer} by printing to the screen,, + * they actually call upon the instance of {@link Printer} that they were instantiated with. Therefore delegating the, + * behaviour to another class., +    AbstractPrinterController hpPrinterController = new PrinterController(new HpPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, +, + * @see HpPrinter, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/CanonPrinter.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/EpsonPrinter.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/AbstractPrinterController.java, + * be as clean as possible. This just provides the default constructor and a simple getter method. The generic of, + * T allows any implementation of {@link Printer}, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/App.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, + * In this example the delegates are {@link EpsonPrinter}, {@link HpPrinter} and {@link CanonPrinter} they all implement, + * {@link Printer}. The {@link AbstractPrinterController} and through inheritance {@link PrinterController} also, + * implement {@link Printer}. However neither provide the functionality of {@link Printer} by printing to the screen,, + * they actually call upon the instance of {@link Printer} that they were instantiated with. Therefore delegating the, + * behaviour to another class., +    AbstractPrinterController hpPrinterController = new PrinterController(new HpPrinter());, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/Printer.java, +import com.iluwatar.delegation.simple.printers.HpPrinter;, +, + * @see HpPrinter, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/PrinterController.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/CanonPrinter.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/EpsonPrinter.java, +++ b/delegation/src/main/java/com/iluwatar/delegation/simple/printers/HPPrinter.java, +public class HpPrinter implements Printer {]