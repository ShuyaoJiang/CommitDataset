[+++ b/README.md, +## Introduction, +, +Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system., +, +Design patterns can speed up the development process by providing tested, proven development paradigms., +, +Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns., +, +* [Property](#property), +* [Execute Around](#execute-around), +<<<<<<< HEAD, +=======, +**Real world examples:**, +* [CyclicBarrier] (http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CyclicBarrier.html#CyclicBarrier%28int,%20java.lang.Runnable%29) constructor can accept callback that will be triggered every time when barrier is tripped., +, +## <a name="execute-around">Execute Around</a> [&#8593;](#list-of-design-patterns), +**Intent:** Execute Around idiom frees the user from certain actions that should always be executed before and after the business method. A good example of this is resource allocation and deallocation leaving the user to specify only what to do with the resource., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/execute-around/execute-around.png "Execute Around"), +, +**Applicability:** Use the Execute Around idiom when, +* You use an API that requires methods to be called in pairs such as open/close or allocate/deallocate., +, +## <a name="property">Property</a> [&#8593;](#list-of-design-patterns), +**Intent:** Create hierarchy of objects and new objects using already existing objects as parents., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/property/etc/property.jpg "Property"), +, +**Applicability:** Use the Property pattern when, +* when you like to have objects with dynamic set of fields and prototype inheritance, +, +**Real world examples:**, +* [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) prototype inheritance, +>>>>>>> origin/master, +<<<<<<< HEAD, +=======, +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +, +, +>>>>>>> origin/master, +++ b/README.md, +## Introduction, +, +Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system., +, +Design patterns can speed up the development process by providing tested, proven development paradigms., +, +Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns., +, +* [Property](#property), +* [Execute Around](#execute-around), +<<<<<<< HEAD, +=======, +**Real world examples:**, +* [CyclicBarrier] (http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CyclicBarrier.html#CyclicBarrier%28int,%20java.lang.Runnable%29) constructor can accept callback that will be triggered every time when barrier is tripped., +, +## <a name="execute-around">Execute Around</a> [&#8593;](#list-of-design-patterns), +**Intent:** Execute Around idiom frees the user from certain actions that should always be executed before and after the business method. A good example of this is resource allocation and deallocation leaving the user to specify only what to do with the resource., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/execute-around/execute-around.png "Execute Around"), +, +**Applicability:** Use the Execute Around idiom when, +* You use an API that requires methods to be called in pairs such as open/close or allocate/deallocate., +, +## <a name="property">Property</a> [&#8593;](#list-of-design-patterns), +**Intent:** Create hierarchy of objects and new objects using already existing objects as parents., +, +![alt text](https://github.com/iluwatar/java-design-patterns/blob/master/property/etc/property.jpg "Property"), +, +**Applicability:** Use the Property pattern when, +* when you like to have objects with dynamic set of fields and prototype inheritance, +, +**Real world examples:**, +* [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) prototype inheritance, +>>>>>>> origin/master, +<<<<<<< HEAD, +=======, +* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1), +, +, +>>>>>>> origin/master, +++ b/callback/src/main/java/com/iluwatar/App.java, + * Callback pattern is more native for functional languages where function is treated as first-class citizen., +++ b/README.md, +## Introduction, +, +Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system., +, +Design patterns can speed up the development process by providing tested, proven development paradigms., +, +Reusing design patterns helps to prevent subtle issues that can cause major problems, and it also improves code readability for coders and architects who are familiar with the patterns., +, +* [Property](#property), +* [Execute Around](#execute-around), +<<<<<<< HEAD, +=======, +**Real world examples:**, +* [CyclicBarrier] (http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CyclicBarrier.html#CyclicBarrier%28int,%20java.lang.Runnable%29) constructor can accept callback that will be triggered every time when barrier is tripped., +]