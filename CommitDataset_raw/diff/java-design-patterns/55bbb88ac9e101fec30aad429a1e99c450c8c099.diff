[+++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), +   * Create a new set of test entries with the expected result, +   *, +   * @return The list of parameters used during this test, +   */, +  public abstract Stream<Arguments> expressionProvider();, +, +  /**, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), +   * Create a new set of test entries with the expected result, +   *, +   * @return The list of parameters used during this test, +   */, +  public abstract Stream<Arguments> expressionProvider();, +, +  /**, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/MinusExpressionTest.java, +  @Override, +  public Stream<Arguments> expressionProvider() {, +++ b/abstract-factory/README.md, +, +## Tutorial, +* [Abstract Factory Pattern Tutorial](https://www.journaldev.com/1418/abstract-factory-design-pattern-in-java) , +, +, +++ b/bridge/README.md, +## Tutorial, +* [Bridge Pattern Tutorial](https://www.journaldev.com/1491/bridge-design-pattern-java), +, +++ b/decorator/README.md, +## Tutorial, +* [Decorator Pattern Tutorial](https://www.journaldev.com/1540/decorator-design-pattern-in-java-example), +, +++ b/interpreter/src/test/java/com/iluwatar/interpreter/ExpressionTest.java, +import org.junit.jupiter.api.TestInstance;, +@TestInstance(TestInstance.Lifecycle.PER_CLASS), +   * Create a new set of test entries with the expected result, +   *]