[+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    Set<String> erasedTargetNames = new LinkedHashSet<String>();, +        parseInjectView(element, targetClassMap, erasedTargetNames);, +      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);, +      Map<TypeElement, ViewInjector> targetClassMap, Set<String> erasedTargetNames), +    erasedTargetNames.add(enclosingElement.toString());, +  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {, +      if (parents.contains(typeElement.toString())) {, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    Set<String> erasedTargetNames = new LinkedHashSet<String>();, +        parseInjectView(element, targetClassMap, erasedTargetNames);, +      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);, +      Map<TypeElement, ViewInjector> targetClassMap, Set<String> erasedTargetNames), +    erasedTargetNames.add(enclosingElement.toString());, +  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {, +      if (parents.contains(typeElement.toString())) {, +++ b/butterknife/src/main/java/butterknife/internal/Listener.java, +    String ownerType = stripTypeParameters(ownerTypeMirror.toString());, +  // When built with Eclipse, the generated listener code contains an errant type parameter., +  private static String stripTypeParameters(String type) {, +    int typeParamStart = type.indexOf('<');, +    if (typeParamStart != -1) {, +      return type.substring(0, typeParamStart);, +    } else {, +      return type;, +    }, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    Set<String> erasedTargetNames = new LinkedHashSet<String>();, +        parseInjectView(element, targetClassMap, erasedTargetNames);, +      findAndParseListener(env, listener, targetClassMap, erasedTargetNames);, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetNames);, +      Map<TypeElement, ViewInjector> targetClassMap, Set<String> erasedTargetNames), +    erasedTargetNames.add(enclosingElement.toString());, +  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {, +      if (parents.contains(typeElement.toString())) {, +++ b/butterknife/src/main/java/butterknife/internal/Listener.java, +    String ownerType = stripTypeParameters(ownerTypeMirror.toString());, +  // When built with Eclipse, the generated listener code contains an errant type parameter., +  private static String stripTypeParameters(String type) {, +    int typeParamStart = type.indexOf('<');, +    if (typeParamStart != -1) {, +      return type.substring(0, typeParamStart);, +    } else {, +      return type;, +    }, +  }, +, +++ b/website/index.html, +            <h4>Gradle</h4>, +            <pre class="prettyprint">compile 'com.jakewharton:butterknife:<span class="version"><em>(insert latest version)</em></span>'</pre>, +            <p>Be sure to supress this lint warning in your <code>build.gradle</code>.</p>, +            <pre class="prettyprint">lintOptions {, +  disable 'InvalidPackage', +}</pre>, +            <p>Some configurations may also require additional exclusions.</p>, +            <pre class="prettyprint">packagingOptions {, +  exclude 'META-INF/services/javax.annotation.processing.Processor', +}</pre>, +]