[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import javax.lang.model.element.PackageElement;, +    return new QualifiedId(elementUtils.getPackageOf(element), id);, +          scanner.setCurrentPackage(elementUtils.getPackageOf(element));, +    for (Map.Entry<PackageElement, Set<Symbol.ClassSymbol>> packageNameToRClassSet, +          : scanner.getRClasses().entrySet()) {, +      PackageElement respectivePackageName = packageNameToRClassSet.getKey();, +      for (Symbol.ClassSymbol rClass : packageNameToRClassSet.getValue()) {, +        parseRClass(respectivePackageName, rClass, scanner.getReferenced());, +  private void parseRClass(PackageElement respectivePackageName, Symbol.ClassSymbol rClass,, +      Set<String> referenced) {, +    TypeElement element;, +      element = rClass;, +      element = (TypeElement) typeUtils.asElement(mte.getTypeMirror());, +      IdScanner idScanner =, +          new IdScanner(symbols, elementUtils.getPackageOf(element), respectivePackageName,, +              referenced);, +      parseCompiledR(respectivePackageName, element, referenced);, +  private void parseCompiledR(PackageElement respectivePackageName, TypeElement rClass,, +      Set<String> referenced) {, +            String fqName = element.toString() + "." + enclosedElement.toString();, +            if (referenced.contains(fqName)) {, +  }, +    // Maps the currently evaluated rPackageName to R Classes, +    private final Map<PackageElement, Set<Symbol.ClassSymbol>> rClasses = new LinkedHashMap<>();, +    private PackageElement currentPackage;, +    private Set<String> referenced = new HashSet<>();, +        Set<Symbol.ClassSymbol> rClassSet = rClasses.get(currentPackage);, +          rClasses.put(currentPackage, rClassSet);, +        referenced.add(symbol.packge().getQualifiedName().toString(), +            + ".R.", +            + symbol.enclClass().name.toString(), +            + ".", +            + symbol.name.toString());, +        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass());, +    Map<PackageElement, Set<Symbol.ClassSymbol>> getRClasses() {, +    Set<String> getReferenced() {, +      return referenced;, +    }, +, +    void setCurrentPackage(PackageElement packageElement) {, +      this.currentPackage = packageElement;, +    private final PackageElement rPackageName;, +    private final PackageElement respectivePackageName;, +    private final Set<String> referenced;, +    IdScanner(Map<QualifiedId, Id> ids, PackageElement rPackageName,, +        PackageElement respectivePackageName, Set<String> referenced) {, +      this.referenced = referenced;, +            ClassName rClassName = ClassName.get(rPackageName.getQualifiedName().toString(), "R",, +                    className);, +            VarScanner scanner = new VarScanner(ids, rClassName, respectivePackageName, referenced);, +    private final PackageElement respectivePackageName;, +    private final Set<String> referenced;, +        PackageElement respectivePackageName, Set<String> referenced) {, +      this.referenced = referenced;, +        String fqName = className.toString() + "." + resourceName;, +        if (referenced.contains(fqName)) {, +          int id = Integer.valueOf(jcVariableDecl.getInitializer().toString());, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import javax.lang.model.element.PackageElement;, +    return new QualifiedId(elementUtils.getPackageOf(element), id);, +          scanner.setCurrentPackage(elementUtils.getPackageOf(element));, +    for (Map.Entry<PackageElement, Set<Symbol.ClassSymbol>> packageNameToRClassSet, +          : scanner.getRClasses().entrySet()) {, +      PackageElement respectivePackageName = packageNameToRClassSet.getKey();, +      for (Symbol.ClassSymbol rClass : packageNameToRClassSet.getValue()) {, +        parseRClass(respectivePackageName, rClass, scanner.getReferenced());, +  private void parseRClass(PackageElement respectivePackageName, Symbol.ClassSymbol rClass,, +      Set<String> referenced) {, +    TypeElement element;, +      element = rClass;, +      element = (TypeElement) typeUtils.asElement(mte.getTypeMirror());, +      IdScanner idScanner =, +          new IdScanner(symbols, elementUtils.getPackageOf(element), respectivePackageName,, +              referenced);, +      parseCompiledR(respectivePackageName, element, referenced);, +  private void parseCompiledR(PackageElement respectivePackageName, TypeElement rClass,, +      Set<String> referenced) {, +            String fqName = element.toString() + "." + enclosedElement.toString();, +            if (referenced.contains(fqName)) {, +  }, +    // Maps the currently evaluated rPackageName to R Classes, +    private final Map<PackageElement, Set<Symbol.ClassSymbol>> rClasses = new LinkedHashMap<>();, +    private PackageElement currentPackage;, +    private Set<String> referenced = new HashSet<>();, +        Set<Symbol.ClassSymbol> rClassSet = rClasses.get(currentPackage);, +          rClasses.put(currentPackage, rClassSet);, +        referenced.add(symbol.packge().getQualifiedName().toString(), +            + ".R.", +            + symbol.enclClass().name.toString(), +            + ".", +            + symbol.name.toString());, +        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass());, +    Map<PackageElement, Set<Symbol.ClassSymbol>> getRClasses() {, +    Set<String> getReferenced() {, +      return referenced;, +    }, +, +    void setCurrentPackage(PackageElement packageElement) {]