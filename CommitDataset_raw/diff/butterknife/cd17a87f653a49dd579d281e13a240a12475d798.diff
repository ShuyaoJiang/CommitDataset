[+++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import static java.util.Collections.singletonList;, +, +      for (Method method : targetClass.getDeclaredMethods()) {, +        Unbinder unbinder = parseOnClick(target, method, source);, +        if (unbinder == null) unbinder = parseOnLongClick(target, method, source);, +, +        if (unbinder != null) {, +          unbinders.add(unbinder);, +        }, +      }, +  private static @Nullable Unbinder parseOnClick(final Object target, final Method method,, +      View source) {, +    OnClick onClick = method.getAnnotation(OnClick.class);, +    if (onClick == null) {, +      return null;, +    }, +    // TODO check is instance method, +    // TODO check visibility, +    boolean isRequired = true; // TODO actually figure out, +    final Class<?>[] parameterTypes = method.getParameterTypes();, +    // TODO validate parameter count (and types?), +, +    List<View> views = findViews(source, onClick.value(), isRequired, method.getName());, +, +    ViewCollections.set(views, ON_CLICK, new View.OnClickListener() {, +      @Override public void onClick(View v) {, +        if (parameterTypes.length == 0) {, +          uncheckedInvoke(method, target);, +        } else {, +          uncheckedInvoke(method, target, v);, +        }, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_CLICK);, +  }, +, +  private static @Nullable Unbinder parseOnLongClick(final Object target, final Method method,, +      View source) {, +    OnLongClick onLongClick = method.getAnnotation(OnLongClick.class);, +    if (onLongClick == null) {, +      return null;, +    }, +    // TODO check is instance method, +    // TODO check visibility, +    boolean isRequired = true; // TODO actually figure out, +    final Class<?>[] parameterTypes = method.getParameterTypes();, +    // TODO validate parameter count (and types?), +    final Class<?> returnType = method.getReturnType();, +    // TODO validate return type, +, +    List<View> views = findViews(source, onLongClick.value(), isRequired, method.getName());, +, +    ViewCollections.set(views, ON_LONG_CLICK, new View.OnLongClickListener() {, +      @Override public boolean onLongClick(View v) {, +        Object returnValue;, +        if (parameterTypes.length == 0) {, +          returnValue = uncheckedInvoke(method, target);, +        } else {, +          returnValue = uncheckedInvoke(method, target, v);, +        }, +        if (returnType != void.class) {, +          return (boolean) returnValue;, +        }, +        return false;, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_LONG_CLICK);, +  }, +, +  private static List<View> findViews(View source, int[] ids, boolean isRequired, String name) {, +    if (ids.length == 1 && ids[0] == View.NO_ID) {, +      return singletonList(source);, +    }, +, +    String who = "method '" + name + "'";, +    List<View> views = new ArrayList<>(ids.length);, +    for (int id : ids) {]