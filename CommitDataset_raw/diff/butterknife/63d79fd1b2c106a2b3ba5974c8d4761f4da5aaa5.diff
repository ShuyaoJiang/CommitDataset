[+++ /dev/null, +++ /dev/null, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +package butterknife.compiler;, +, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.ImmutableMap;, +import com.squareup.javapoet.AnnotationSpec;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.WildcardTypeName;, +import java.lang.reflect.Field;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.TypeElement;, +, +import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;, +import static com.google.auto.common.MoreElements.getPackage;, +import static java.util.Collections.singletonList;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PRIVATE;, +import static javax.lang.model.element.Modifier.PUBLIC;, +, +/** A set of all the bindings requested by a single type. */, +final class BindingSet {, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  private static final ClassName VIEW = ClassName.get("android.view", "View");, +  private static final ClassName CONTEXT = ClassName.get("android.content", "Context");, +  private static final ClassName RESOURCES = ClassName.get("android.content.res", "Resources");, +  private static final ClassName UI_THREAD =, +      ClassName.get("android.support.annotation", "UiThread");, +  private static final ClassName CALL_SUPER =, +      ClassName.get("android.support.annotation", "CallSuper");, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "Unbinder");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +, +  private final TypeName targetTypeName;, +  private final ClassName bindingClassName;, +  private final boolean isFinal;, +  private final List<ViewBindings> viewBindings;, +  private final Map<FieldCollectionViewBinding, List<Id>> collectionBindings;, +  private final List<FieldDrawableBinding> drawableBindings;, +  private final List<FieldResourceBinding> resourceBindings;, +  private final BindingSet parentBinding;, +, +  BindingSet(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,, +      Collection<ViewBindings> viewBindings,, +      Map<FieldCollectionViewBinding, List<Id>> collectionBindings,, +      Collection<FieldDrawableBinding> drawableBindings,, +      Collection<FieldResourceBinding> resourceBindings, BindingSet parentBinding) {, +    this.isFinal = isFinal;, +    this.targetTypeName = targetTypeName;, +    this.bindingClassName = bindingClassName;, +    this.viewBindings = ImmutableList.copyOf(viewBindings);, +    this.collectionBindings = ImmutableMap.copyOf(collectionBindings);, +    this.drawableBindings = ImmutableList.copyOf(drawableBindings);, +    this.resourceBindings = ImmutableList.copyOf(resourceBindings);, +    this.parentBinding = parentBinding;, +  }, +, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createType()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +        .build();, +  }, +, +  private TypeSpec createType() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName()), +        .addModifiers(PUBLIC);, +    if (isFinal) {, +      result.addModifiers(FINAL);, +    }, +, +    if (hasParentBinding()) {, +      result.superclass(getParentBinding());, +    } else {, +      result.addSuperinterface(UNBINDER);, +    }, +, +    if (needsTargetField()) {, +      result.addField(targetTypeName, "target", PRIVATE);, +    }, +, +    if (!needsView()) {]