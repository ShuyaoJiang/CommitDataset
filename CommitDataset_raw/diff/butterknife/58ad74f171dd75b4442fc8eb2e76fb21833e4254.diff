[+++ b/butterknife/src/main/java/butterknife/Views.java, +  /**, +   * Reset fields annotated with {@link InjectView} to {@code null}., +   * <p>, +   * This should only be used in the {@code onDestroyView} method of a fragment in practice., +   *, +   * @param target Target class for field reset., +   * @throws UnableToResetException if views could not be reset., +   */, +  public static void reset(Object target) {, +    Class<?> targetClass = target.getClass();, +    try {, +      Method reset = findResettersForClass(targetClass);, +      if (reset != null) {, +        reset.invoke(null, target);, +      }, +    } catch (RuntimeException e) {, +      throw e;, +    } catch (Exception e) {, +      throw new UnableToResetException("Unable to reset views for " + target, e);, +    }, +  }, +, +        StringBuilder injectBuilder = new StringBuilder();, +          injectBuilder.append(String.format(PARENT_INJECT, parentClassFqcn, SUFFIX)).append('\n');, +          injectBuilder.append(String.format(FINDER, viewIdInjections.getKey())).append('\n');, +            injectBuilder.append(injectionPoint).append('\n');, +        String injections = injectBuilder.toString();, +          writer.write(, +              String.format(INJECTOR, classPackage, className, targetType, injections, targetType,, +                  resetters));, +        return String.format(INJECT, variableName, type);, +    private static final String INJECT = "    target.%s = (%s) view;";, +    private static final String PARENT_INJECT = "    %s%s.inject(finder, target, source);";, +++ b/butterknife/src/main/java/butterknife/Views.java, +  /**, +   * Reset fields annotated with {@link InjectView} to {@code null}., +   * <p>, +   * This should only be used in the {@code onDestroyView} method of a fragment in practice., +   *, +   * @param target Target class for field reset., +   * @throws UnableToResetException if views could not be reset., +   */, +  public static void reset(Object target) {, +    Class<?> targetClass = target.getClass();, +    try {, +      Method reset = findResettersForClass(targetClass);, +      if (reset != null) {, +        reset.invoke(null, target);, +      }, +    } catch (RuntimeException e) {, +      throw e;, +    } catch (Exception e) {, +      throw new UnableToResetException("Unable to reset views for " + target, e);, +    }, +  }, +, +        StringBuilder injectBuilder = new StringBuilder();, +          injectBuilder.append(String.format(PARENT_INJECT, parentClassFqcn, SUFFIX)).append('\n');, +          injectBuilder.append(String.format(FINDER, viewIdInjections.getKey())).append('\n');, +            injectBuilder.append(injectionPoint).append('\n');, +        String injections = injectBuilder.toString();, +          writer.write(, +              String.format(INJECTOR, classPackage, className, targetType, injections, targetType,, +                  resetters));, +        return String.format(INJECT, variableName, type);, +    private static final String INJECT = "    target.%s = (%s) view;";, +    private static final String PARENT_INJECT = "    %s%s.inject(finder, target, source);";, +++ b/butterknife/src/test/java/butterknife/ViewsTest.java, +import org.junit.After;, +  @Before @After // Clear out Views cache of injectors and resetters before and after each test., +  public void resetViewsCache() {, +    Views.RESETTERS.clear();, +  @Test public void zeroInjectionsInjectDoesNotThrowException() {, +  @Test public void zeroInjectionsResetDoesNotThrowException() {, +    class Example {, +    }, +, +    Example example = new Example();, +    Views.reset(example);, +    assertThat(Views.RESETTERS).contains(entry(Example.class, Views.NO_OP));, +  }, +, +    Views.reset(new Activity());, +    assertThat(Views.RESETTERS).isEmpty();]