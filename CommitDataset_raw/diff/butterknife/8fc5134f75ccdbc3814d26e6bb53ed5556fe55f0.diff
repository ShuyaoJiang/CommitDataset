[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +    public static <T> T[] arrayOf(T... views) {, +    public static <T> List<T> listOf(T... views) {, +      return new ImmutableList<T>(views);, +    public <T> T findRequiredView(Object source, int id, String who) {, +      T view = findOptionalView(source, id, who);, +    public <T> T findOptionalView(Object source, int id, String who) {, +      View view = findView(source, id);, +      return castView(view, id, who);, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castView(View view, int id, String who) {, +      try {, +        return (T) view;, +      } catch (ClassCastException e) {, +        if (who == null) {, +          throw new AssertionError();, +        }, +        String name = view.getResources().getResourceEntryName(id);, +        throw new IllegalStateException("View '", +            + name, +            + "' with ID ", +            + id, +            + " for ", +            + who, +            + " was of the wrong type. See cause for more info.", e);, +      }, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {, +      try {, +        return (T) value;, +      } catch (ClassCastException e) {, +        throw new IllegalStateException("Parameter #", +            + (fromPosition + 1), +            + " of method '", +            + from, +            + "' was of the wrong type for parameter #", +            + (toPosition + 1), +            + " of method '", +            + to, +            + "'. See cause for more info.", e);, +      }, +    }, +, +    protected abstract View findView(Object source, int id);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +      @Override protected View findView(Object source, int id) {, +    public static <T> T[] arrayOf(T... views) {, +    public static <T> List<T> listOf(T... views) {, +      return new ImmutableList<T>(views);, +    public <T> T findRequiredView(Object source, int id, String who) {, +      T view = findOptionalView(source, id, who);, +    public <T> T findOptionalView(Object source, int id, String who) {, +      View view = findView(source, id);, +      return castView(view, id, who);, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castView(View view, int id, String who) {, +      try {, +        return (T) view;, +      } catch (ClassCastException e) {, +        if (who == null) {, +          throw new AssertionError();, +        }, +        String name = view.getResources().getResourceEntryName(id);, +        throw new IllegalStateException("View '", +            + name, +            + "' with ID ", +            + id, +            + " for ", +            + who, +            + " was of the wrong type. See cause for more info.", e);, +      }, +    }, +, +    @SuppressWarnings("unchecked") // That's the point., +    public <T> T castParam(Object value, String from, int fromPosition, String to, int toPosition) {, +      try {, +        return (T) value;, +      } catch (ClassCastException e) {, +        throw new IllegalStateException("Parameter #", +            + (fromPosition + 1), +            + " of method '", +            + from, +            + "' was of the wrong type for parameter #", +            + (toPosition + 1), +            + " of method '", +            + to, +            + "'. See cause for more info.", e);, +      }, +    }]