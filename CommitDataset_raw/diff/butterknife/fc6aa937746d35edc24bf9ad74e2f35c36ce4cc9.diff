[+++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindColor.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindDimen.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(FIELD), +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.content.Context;, +import android.content.res.ColorStateList;, +import android.content.res.Resources;, +import android.graphics.drawable.Drawable;, +import android.support.v4.content.ContextCompat;, +import butterknife.internal.Constants;, +        if (unbinder == null) unbinder = parseBindColor(target, field, source);, +        if (unbinder == null) unbinder = parseBindDimen(target, field, source);, +        if (unbinder == null) unbinder = parseBindDrawable(target, field, source);, +  private static @Nullable Unbinder parseBindColor(Object target, Field field, View source) {, +    BindColor bindColor = field.getAnnotation(BindColor.class);, +    if (bindColor == null) {, +      return null;, +    }, +    validateMember(field);, +, +    int id = bindColor.value();, +    Context context = source.getContext();, +, +    Object value;, +    Class<?> fieldType = field.getType();, +    if (fieldType == int.class) {, +      value = ContextCompat.getColor(context, id);, +    } else if (fieldType == ColorStateList.class) {, +      value = ContextCompat.getColorStateList(context, id);, +    } else {, +      throw new IllegalStateException(); // TODO, +    }, +    uncheckedSet(field, target, value);, +, +    return Unbinder.EMPTY;, +  }, +, +  private static @Nullable Unbinder parseBindDimen(Object target, Field field, View source) {, +    BindDimen bindDimen = field.getAnnotation(BindDimen.class);, +    if (bindDimen == null) {, +      return null;, +    }, +    validateMember(field);, +, +    int id = bindDimen.value();, +    Resources resources = source.getContext().getResources();, +, +    Class<?> fieldType = field.getType();, +    Object value;, +    if (fieldType == int.class) {, +      value = resources.getDimensionPixelSize(id);, +    } else if (fieldType == float.class) {, +      value = resources.getDimension(id);, +    } else {, +      throw new IllegalStateException(); // TODO, +    }, +    uncheckedSet(field, target, value);, +, +    return Unbinder.EMPTY;, +  }, +, +  private static @Nullable Unbinder parseBindDrawable(Object target, Field field, View source) {, +    BindDrawable bindDrawable = field.getAnnotation(BindDrawable.class);, +    if (bindDrawable == null) {, +      return null;, +    }, +    validateMember(field);]