[+++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +  @IdRes int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +  @IdRes int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}BindViews({ R.id.title, R.id.subtitle }), + * List&lt;TextView&gt; titles;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindViews {, +  /** View IDs to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindView.java, +  @IdRes int value();, +++ b/butterknife-annotations/src/main/java/butterknife/BindViews.java, +package butterknife;, +, +import android.support.annotation.IdRes;, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the view for the specified ID. The view will automatically be cast to the field, + * type., + * <pre><code>, + * {@literal @}BindViews({ R.id.title, R.id.subtitle }), + * List&lt;TextView&gt; titles;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindViews {, +  /** View IDs to which the field will be bound. */, +  @IdRes int[] value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.BindArray;, +import butterknife.BindBitmap;, +import butterknife.BindBool;, +import butterknife.BindColor;, +import butterknife.BindDimen;, +import butterknife.BindDrawable;, +import butterknife.BindInt;, +import butterknife.BindString;, +import butterknife.BindViews;, +import butterknife.OnCheckedChanged;, +import butterknife.OnClick;, +import butterknife.OnEditorAction;, +import butterknife.OnFocusChange;, +import butterknife.OnItemClick;, +import butterknife.OnItemLongClick;, +import butterknife.OnItemSelected;, +import butterknife.OnLongClick;, +import butterknife.OnPageChange;, +import butterknife.OnTextChanged;, +import butterknife.OnTouch;, +import butterknife.Optional;, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +    types.add(BindView.class.getCanonicalName());, +    types.add(BindViews.class.getCanonicalName());, +, +    for (Class<? extends Annotation> listener : LISTENERS) {, +      types.add(listener.getCanonicalName());, +    }, +    // Process each @BindView element., +    for (Element element : env.getElementsAnnotatedWith(BindView.class)) {, +      if (!SuperficialValidation.validateElement(element)) continue;, +      try {, +        parseBindView(element, targetClassMap, erasedTargetNames);, +      } catch (Exception e) {, +        logParsingError(element, BindView.class, e);, +      }, +    }, +, +    // Process each @BindViews element., +    for (Element element : env.getElementsAnnotatedWith(BindViews.class)) {, +      if (!SuperficialValidation.validateElement(element)) continue;, +      try {, +        parseBindViews(element, targetClassMap, erasedTargetNames);, +      } catch (Exception e) {, +        logParsingError(element, BindViews.class, e);, +      }]