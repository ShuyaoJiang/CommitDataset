[+++ b/build.gradle, +      'androidx': [, +          'annotations': "androidx.annotation:annotation:1.0.0-rc02",, +      ],, +++ b/build.gradle, +      'androidx': [, +          'annotations': "androidx.annotation:annotation:1.0.0-rc02",, +      ],, +++ b/butterknife-gradle-plugin/build.gradle, +  testImplementation deps.androidx.annotations, +++ b/build.gradle, +      'androidx': [, +          'annotations': "androidx.annotation:annotation:1.0.0-rc02",, +      ],, +++ b/butterknife-gradle-plugin/build.gradle, +  testImplementation deps.androidx.annotations, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +      val useAndroidX = (project.findProperty("android.useAndroidX") as String?)?.toBoolean() ?: false, +      task.inputs.property("useAndroidX", useAndroidX), +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", useAndroidX), +++ b/build.gradle, +      'androidx': [, +          'annotations': "androidx.annotation:annotation:1.0.0-rc02",, +      ],, +++ b/butterknife-gradle-plugin/build.gradle, +  testImplementation deps.androidx.annotations, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +      val useAndroidX = (project.findProperty("android.useAndroidX") as String?)?.toBoolean() ?: false, +      task.inputs.property("useAndroidX", useAndroidX), +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", useAndroidX), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +  private static final String ANDROIDX_ANNOTATION_PACKAGE = "androidx.annotation";, +  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useAndroidX), +        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useAndroidX);, +      ClassOrInterfaceDeclaration node, boolean useAndroidX) {, +                  getSupportAnnotationClass(type, useAndroidX));, +  private static ClassName getSupportAnnotationClass(String type, boolean useAndroidX) {, +    String supportPackage = useAndroidX ? ANDROIDX_ANNOTATION_PACKAGE : SUPPORT_ANNOTATION_PACKAGE;, +    return ClassName.get(supportPackage, capitalize(type) + "Res");, +++ b/build.gradle, +      'androidx': [, +          'annotations': "androidx.annotation:annotation:1.0.0-rc02",, +      ],, +++ b/butterknife-gradle-plugin/build.gradle, +  testImplementation deps.androidx.annotations, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +      val useAndroidX = (project.findProperty("android.useAndroidX") as String?)?.toBoolean() ?: false, +      task.inputs.property("useAndroidX", useAndroidX), +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2", useAndroidX), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +  private static final String ANDROIDX_ANNOTATION_PACKAGE = "androidx.annotation";, +  public static void brewJava(File rFile, File outputDir, String packageName, String className, boolean useAndroidX), +        addResourceType(Arrays.asList(SUPPORTED_TYPES), result, (ClassOrInterfaceDeclaration) node, useAndroidX);, +      ClassOrInterfaceDeclaration node, boolean useAndroidX) {, +                  getSupportAnnotationClass(type, useAndroidX));, +  private static ClassName getSupportAnnotationClass(String type, boolean useAndroidX) {, +    String supportPackage = useAndroidX ? ANDROIDX_ANNOTATION_PACKAGE : SUPPORT_ANNOTATION_PACKAGE;, +    return ClassName.get(supportPackage, capitalize(type) + "Res");, +++ b/butterknife-gradle-plugin/src/test/java/butterknife/plugin/FinalRClassBuilderTest.kt, +class FinalRClassBuilderTest(val rFile: String, val r2File: String, val useAndroidX: Boolean) {, +    FinalRClassBuilder.brewJava(rFile, outputDir, packageName, "R2", useAndroidX), +    var expected = javaClass.getResource("/fixtures/$r2File.java").readText(), +    if (useAndroidX) {, +      expected = expected.replace("import android.support.", "import androidx."), +    }, +        arrayOf<Any>("R", "R2", false),, +        arrayOf<Any>("RFinal", "R2", false),, +        arrayOf<Any>("R", "R2", true),, +        arrayOf<Any>("RFinal", "R2", true)]