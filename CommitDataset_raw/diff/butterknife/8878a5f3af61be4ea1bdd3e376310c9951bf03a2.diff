[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +, +          // Verify target type is valid for a binding without an id., +          String targetType = listener.targetType();, +          if (!isSubtypeOfType(enclosingElement.asType(), targetType), +              && !isInterface(enclosingElement.asType())) {, +            error(element, "@%s annotation without an ID may only be used with an object of type ", +                    + "\"%s\" or an interface. (%s.%s)",, +                annotationClass.getSimpleName(), targetType,, +                enclosingElement.getQualifiedName(), element.getSimpleName());, +            hasError = true;, +          }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +, +          // Verify target type is valid for a binding without an id., +          String targetType = listener.targetType();, +          if (!isSubtypeOfType(enclosingElement.asType(), targetType), +              && !isInterface(enclosingElement.asType())) {, +            error(element, "@%s annotation without an ID may only be used with an object of type ", +                    + "\"%s\" or an interface. (%s.%s)",, +                annotationClass.getSimpleName(), targetType,, +                enclosingElement.getQualifiedName(), element.getSimpleName());, +            hasError = true;, +          }, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +  @Test public void failsRootViewBindingWithBadTarget() throws Exception {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.content.Context;\n", +        + "import android.view.View;\n", +        + "import butterknife.OnItemClick;\n", +        + "public class Test extends View {\n", +        + "  @OnItemClick void doStuff() {}\n", +        + "  public Test(Context context) {\n", +        + "    super(context);\n", +        + "  }\n", +        + "}", +    );, +, +    assertAbout(javaSource()), +        .that(source), +        .processedWith(new ButterKnifeProcessor()), +        .failsToCompile(), +        .withErrorContaining(, +            "@OnItemClick annotation without an ID may only be used with an object of type ", +                + "\"android.widget.AdapterView<?>\" or an interface. (test.Test.doStuff)"), +        .in(source), +        .onLine(6);, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    String fieldName = "target";, +    if (!bindings.isBoundToRoot()) {, +      fieldName = "view" + bindings.getId().value;, +    }, +    if (!bindings.isBoundToRoot()) {, +    }, +    String fieldName = "target";, +    String bindName = "target";, +, +      result.addStatement("$L = view", fieldName);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +, +          // Verify target type is valid for a binding without an id., +          String targetType = listener.targetType();, +          if (!isSubtypeOfType(enclosingElement.asType(), targetType), +              && !isInterface(enclosingElement.asType())) {]