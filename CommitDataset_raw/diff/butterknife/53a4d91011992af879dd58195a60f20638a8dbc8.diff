[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (bindNeedsView()) {, +      constructor.addParameter(VIEW, "source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +        .returns(UNBINDER);, +    result.addParameter(VIEW, "source");, +    boolean needsView = bindNeedsView();, +        result.addStatement("$T context = source.getContext()", CONTEXT);, +        result.addStatement("$T res = source.getContext().getResources()", RESOURCES);, +      if (needsView) invoke.add(", source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +      builder.add("\n");, +, +      boolean requiresCast = requiresCast(binding.getType());, +      if (!requiresCast && !binding.isRequired()) {, +        builder.add("source.findViewById($L)", ids.get(i).code);, +      } else {, +        builder.add("$T.find", UTILS);, +        if (requiresCast) {, +        if (binding.isRequired() || requiresCast) {, +        if (requiresCast) {, +    }, +      CodeBlock.Builder builder = CodeBlock.builder(), +          .add("target.$L = ", fieldBinding.getName());, +, +      boolean requiresCast = requiresCast(fieldBinding.getType());, +      if (!requiresCast && !fieldBinding.isRequired()) {, +        builder.add("source.findViewById($L)", bindings.getId().code);, +      } else {, +        builder.add("$T.find", UTILS);, +        builder.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast) {, +          builder.add("AsType");, +        builder.add("(source, $L", bindings.getId().code);, +        if (fieldBinding.isRequired() || requiresCast) {, +          builder.add(", $S", asHumanDescription(singletonList(fieldBinding)));, +        if (requiresCast) {, +          builder.add(", $T.class", fieldBinding.getRawType());, +        builder.add(")");, +      }, +      result.addStatement("$L", builder.build());, +      result.addStatement("view = source.findViewById($L)", bindings.getId().code);, +      result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,, +          bindings.getId().code, asHumanDescription(requiredViewBindings));, +        result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",, +            fieldBinding.getName(), UTILS, bindings.getId().code,, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +  private boolean bindNeedsView() {, +        || hasParentBinding() && parentBinding.bindNeedsView();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (bindNeedsView()) {, +      constructor.addParameter(VIEW, "source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +        .returns(UNBINDER);, +    result.addParameter(VIEW, "source");, +    boolean needsView = bindNeedsView();, +        result.addStatement("$T context = source.getContext()", CONTEXT);, +        result.addStatement("$T res = source.getContext().getResources()", RESOURCES);, +      if (needsView) invoke.add(", source");, +      if (parentBinding.bindNeedsView()) invoke.add(", source");, +      builder.add("\n");, +, +      boolean requiresCast = requiresCast(binding.getType());, +      if (!requiresCast && !binding.isRequired()) {, +        builder.add("source.findViewById($L)", ids.get(i).code);, +      } else {, +        builder.add("$T.find", UTILS);, +        if (requiresCast) {, +        if (binding.isRequired() || requiresCast) {, +        if (requiresCast) {, +    }, +      CodeBlock.Builder builder = CodeBlock.builder(), +          .add("target.$L = ", fieldBinding.getName());, +, +      boolean requiresCast = requiresCast(fieldBinding.getType());, +      if (!requiresCast && !fieldBinding.isRequired()) {, +        builder.add("source.findViewById($L)", bindings.getId().code);, +      } else {, +        builder.add("$T.find", UTILS);, +        builder.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast) {, +          builder.add("AsType");, +        builder.add("(source, $L", bindings.getId().code);, +        if (fieldBinding.isRequired() || requiresCast) {, +          builder.add(", $S", asHumanDescription(singletonList(fieldBinding)));, +        if (requiresCast) {, +          builder.add(", $T.class", fieldBinding.getRawType());, +        builder.add(")");, +      }, +      result.addStatement("$L", builder.build());, +      result.addStatement("view = source.findViewById($L)", bindings.getId().code);, +      result.addStatement("view = $T.findRequiredView(source, $L, $S)", UTILS,, +          bindings.getId().code, asHumanDescription(requiredViewBindings));, +        result.addStatement("target.$L = $T.castView(view, $L, $S, $T.class)",, +            fieldBinding.getName(), UTILS, bindings.getId().code,, +                builder.add("$T.<$T>castParam(p$L, $S, $L, $S, $L)", UTILS, parameter.getType(),, +  private boolean bindNeedsView() {, +        || hasParentBinding() && parentBinding.bindNeedsView();, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +        + "import android.view.View;\n"]