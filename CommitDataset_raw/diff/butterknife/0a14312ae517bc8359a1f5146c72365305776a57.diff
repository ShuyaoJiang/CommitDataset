[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PROTECTED;, +  private static final ClassName UNBINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewUnbinder");, +  private String parentUnbinder;, +  void setParentUnbinder(String parentUnbinder) {, +    this.parentUnbinder = parentUnbinder;, +  }, +, +  String getParentUnbinder() {, +    return parentUnbinder;, +  }, +, +    if (hasUnbinder()) {, +      // Create unbinding class., +      result.addType(createUnbinderClass());, +      // Now we need to provide child classes to access and override unbinder implementations., +      createUnbinderInternalAccessMethods(result);, +    }, +, +    TypeName generic = TypeVariableName.get("T");, +        .addModifiers(PUBLIC, STATIC), +        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, +    if (parentUnbinder != null) {, +      result.superclass(ParameterizedTypeName.get(, +          ClassName.bestGuess(parentViewBinder + '.' + UnbinderBinding.UNBINDER_SIMPLE_NAME),, +          generic));, +    } else {, +      result.addSuperinterface(ParameterizedTypeName.get(UNBINDER, generic));, +      result.addField(generic, "target", PRIVATE);, +    }, +, +    result.addMethod(createUnbinderConstructor(generic));, +    if (parentUnbinder == null) {, +      result.addMethod(createUnbindInterfaceMethod());, +    }, +    result.addMethod(createUnbindMethod(result, generic));, +, +    return result.build();, +  }, +, +  private MethodSpec createUnbinderConstructor(TypeName targetType) {, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +    if (parentUnbinder != null) {, +      constructor.addStatement("super(target)");, +    } else {, +      constructor.addStatement("this.$1N = $1N", "target");, +    }, +    return constructor.build();, +  }, +, +  private MethodSpec createUnbindInterfaceMethod() {, +    return MethodSpec.methodBuilder("unbind"), +        .addModifiers(PUBLIC, FINAL), +        .addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +            "Bindings already cleared."), +        .addStatement("unbind(target)"), +        .addStatement("target = null"), +        .build();, +  }, +  private MethodSpec createUnbindMethod(TypeSpec.Builder unbinderClass, TypeName targetType) {, +    MethodSpec.Builder result = MethodSpec.methodBuilder("unbind"), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +, +    if (parentUnbinder != null) {, +      result.addAnnotation(Override.class);, +      result.addStatement("super.unbind(target)");, +    }, +      addFieldAndUnbindStatement(unbinderClass, result, bindings);, +        result.addStatement("target.$L = null", fieldBinding.getName());, +      result.addStatement("target.$L = null", fieldCollectionBinding.getName());, +    if (unbinderBinding.getUnbinderFieldName() != null) {, +      result.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());, +    }, +  private void createUnbinderInternalAccessMethods(TypeSpec.Builder viewBindingClass) {, +    // Create type variable <U extends Unbinder<T>>., +    ClassName unbinderClassName;, +    if (parentUnbinder != null) {, +      unbinderClassName = ClassName.bestGuess(parentUnbinder);, +    } else {, +      unbinderClassName = unbinderBinding.getUnbinderClassName();, +    }, +    TypeVariableName returnType = TypeVariableName.get("U", ParameterizedTypeName.get(, +        unbinderClassName, TypeVariableName.get("T")));, +, +    // We are casting inside the access methods., +    AnnotationSpec suppressWarnign = AnnotationSpec.builder(SuppressWarnings.class), +        .addMember("value", "\"unchecked\""), +        .build();, +, +    MethodSpec.Builder createUnbinder = MethodSpec.methodBuilder("createUnbinder"), +        .addAnnotation(suppressWarnign), +        .addModifiers(PROTECTED), +        .addTypeVariable(returnType), +        .returns(returnType), +        .addParameter(TypeVariableName.get("T"), "target"), +        .addStatement("return ($T) new $T($L)", returnType, unbinderBinding.getUnbinderClassName(),]