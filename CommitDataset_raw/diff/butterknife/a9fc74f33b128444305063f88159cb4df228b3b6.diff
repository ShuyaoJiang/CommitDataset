[+++ b/build.gradle, +++ b/build.gradle, +++ b/butterknife-compiler/build.gradle, +++ b/build.gradle, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName unbinderClassName;, +    if (isGeneratingUnbinder()) {, +    if (hasInheritedUnbinder()) {, +      result.superclass(ParameterizedTypeName.get(getInheritedUnbinder(), targetType));, +    if (hasInheritedUnbinder()) {, +    boolean rootUnbinderWithFields = !hasInheritedUnbinder() && hasFieldBindings();, +    if (!hasInheritedUnbinder()) {, +    if (!hasInheritedUnbinder()) {, +      result.addStatement("$1T unbinder = new $1T(target)", getHierarchyUnbinder());, +    } else if (hasHierarchyUnbinder()) {, +      result.addStatement("return new $T(target)", getHierarchyUnbinder());, +      result.addParameter(getHierarchyUnbinder(), "unbinder");, +    if (isGeneratingUnbinder()) {, +      boolean requiresRemoval = isGeneratingUnbinder() && listener.remover().length() != 0;, +  /** True when this type has a parent view binder type. */, +  private boolean hasParentBinding() {, +  /** True when this type contains an unbinder subclass. */, +  private boolean isGeneratingUnbinder() {, +    return hasViewBindings();, +  /** True when any of this type's parents contain an unbinder subclass. */, +  private boolean hasInheritedUnbinder() {, +    return hasParentBinding() && parentBinding.hasHierarchyUnbinder();, +  }, +, +  /** Return the nearest unbinder subclass from this type's parents. */, +  private ClassName getInheritedUnbinder() {, +    return parentBinding.getHierarchyUnbinder();, +  }, +, +  /** True when this type or any of its parents contain an unbinder subclass. */, +  private boolean hasHierarchyUnbinder() {, +    return isGeneratingUnbinder() || hasInheritedUnbinder();, +  }, +, +  /** Return this type's unbinder subclass or the nearest one from its parents. */, +  private ClassName getHierarchyUnbinder() {, +    if (isGeneratingUnbinder()) {, +      return unbinderClassName;, +    }, +    return parentBinding.getHierarchyUnbinder();, +  }, +, +  /** True when this type's bindings require a view hierarchy. */, +  private boolean hasViewBindings() {, +    return !viewIdMap.isEmpty() || !collectionBindings.isEmpty();, +  }, +, +  /** True when this type's bindings require Android's {@code Resources}. */, +  /** True when this type's resource bindings require Android's {@code Theme}. */, +  private boolean bindNeedsFinder() {, +    return hasViewBindings() //, +        || hasParentBinding() && parentBinding.bindNeedsFinder();, +  }, +, +  private boolean bindNeedsResources() {, +    return hasResourceBindings() //, +        || hasParentBinding() && parentBinding.bindNeedsResources();, +  }, +, +  private boolean bindNeedsTheme() {, +    return hasResourceBindings() && hasResourceBindingsNeedingTheme() //, +        || hasParentBinding() && parentBinding.bindNeedsTheme();, +  }, +, +  private boolean bindNeedsUnbinder() {, +    return isGeneratingUnbinder() && hasMethodBindings() //, +        || hasParentBinding() && parentBinding.bindNeedsUnbinder();, +  }, +, +++ b/build.gradle, +++ b/butterknife-compiler/build.gradle, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName unbinderClassName;, +    if (isGeneratingUnbinder()) {, +    if (hasInheritedUnbinder()) {, +      result.superclass(ParameterizedTypeName.get(getInheritedUnbinder(), targetType));, +    if (hasInheritedUnbinder()) {, +    boolean rootUnbinderWithFields = !hasInheritedUnbinder() && hasFieldBindings();, +    if (!hasInheritedUnbinder()) {, +    if (!hasInheritedUnbinder()) {, +      result.addStatement("$1T unbinder = new $1T(target)", getHierarchyUnbinder());, +    } else if (hasHierarchyUnbinder()) {, +      result.addStatement("return new $T(target)", getHierarchyUnbinder());, +      result.addParameter(getHierarchyUnbinder(), "unbinder");, +    if (isGeneratingUnbinder()) {, +      boolean requiresRemoval = isGeneratingUnbinder() && listener.remover().length() != 0;, +  /** True when this type has a parent view binder type. */, +  private boolean hasParentBinding() {, +  /** True when this type contains an unbinder subclass. */, +  private boolean isGeneratingUnbinder() {, +    return hasViewBindings();, +  /** True when any of this type's parents contain an unbinder subclass. */, +  private boolean hasInheritedUnbinder() {, +    return hasParentBinding() && parentBinding.hasHierarchyUnbinder();]