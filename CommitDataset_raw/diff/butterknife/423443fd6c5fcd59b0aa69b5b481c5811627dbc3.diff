[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +    }, +            .addModifiers(PROTECTED, STATIC);, +      result.addField(targetType, "target", PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +      constructor.addStatement("super(target)");, +  private void addFieldAndUnbindStatement(, +      TypeSpec.Builder result,, +      MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName);, +      boolean requiresRemoval = !listenerClass.remover().isEmpty();, +        result.addField(listenerClassName, listenerField);, +    boolean needsUnbinder = bindNeedsUnbinder();, +    if (needsUnbinder) {, +      result.addStatement("$1T unbinder = new $1T(target)", getHierarchyUnbinder());, +    }, +, +    if (isFinal) {, +      if (needsResources || needsUnbinder) {, +      CodeBlock.Builder invoke = CodeBlock.builder().add("$N(target", BIND_TO_TARGET);, +      if (needsUnbinder) invoke.add(", unbinder");, +    }, +    if (needsUnbinder) {, +      result.addStatement("return unbinder");, +    } else if (hasHierarchyUnbinder()) {, +      result.addStatement("return new $T(target)", getHierarchyUnbinder());, +    } else {, +    if (bindNeedsUnbinder()) {, +      result.addParameter(getHierarchyUnbinder(), "unbinder");, +    }, +    if (hasParentBinding()) {, +      if (parentBinding.bindNeedsUnbinder()) invoke.add(", unbinder");, +      result.addStatement("unbinder.$L = view", fieldName);, +        result.addStatement("unbinder.$L = $L", listenerField, callback.build());, +            listener.setter(), requiresRemoval ? "unbinder." + listenerField : callback.build());, +            requiresRemoval ? "unbinder." + listenerField : callback.build());, +    return hasViewBindings();, +    return hasParentBinding() && parentBinding.hasHierarchyUnbinder();, +    return parentBinding.getHierarchyUnbinder();, +  }, +, +  /** True when this type or any of its parents contain an unbinder subclass. */, +  private boolean hasHierarchyUnbinder() {, +    return isGeneratingUnbinder() || hasInheritedUnbinder();, +  }, +, +  /** Return this type's unbinder subclass or the nearest one from its parents. */, +  private ClassName getHierarchyUnbinder() {, +    if (isGeneratingUnbinder()) {, +      return unbinderClassName;, +    }, +    return parentBinding.getHierarchyUnbinder();, +  private boolean bindNeedsUnbinder() {, +    return isGeneratingUnbinder() && hasMethodBindings() //, +        || hasParentBinding() && parentBinding.bindNeedsUnbinder();, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +    }, +            .addModifiers(PROTECTED, STATIC);, +      result.addField(targetType, "target", PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PROTECTED), +        .addParameter(targetType, "target");, +      constructor.addStatement("super(target)");, +  private void addFieldAndUnbindStatement(, +      TypeSpec.Builder result,, +      MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName);, +      boolean requiresRemoval = !listenerClass.remover().isEmpty();, +        result.addField(listenerClassName, listenerField);, +    boolean needsUnbinder = bindNeedsUnbinder();, +    if (needsUnbinder) {, +      result.addStatement("$1T unbinder = new $1T(target)", getHierarchyUnbinder());, +    }, +, +    if (isFinal) {, +      if (needsResources || needsUnbinder) {, +      CodeBlock.Builder invoke = CodeBlock.builder().add("$N(target", BIND_TO_TARGET);, +      if (needsUnbinder) invoke.add(", unbinder");, +    }, +    if (needsUnbinder) {, +      result.addStatement("return unbinder");, +    } else if (hasHierarchyUnbinder()) {, +      result.addStatement("return new $T(target)", getHierarchyUnbinder());, +    } else {, +    if (bindNeedsUnbinder()) {, +      result.addParameter(getHierarchyUnbinder(), "unbinder");, +    }, +    if (hasParentBinding()) {, +      if (parentBinding.bindNeedsUnbinder()) invoke.add(", unbinder");, +      result.addStatement("unbinder.$L = view", fieldName);, +        result.addStatement("unbinder.$L = $L", listenerField, callback.build());, +            listener.setter(), requiresRemoval ? "unbinder." + listenerField : callback.build());]