[+++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/Optional.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Target(METHOD), +@Retention(RUNTIME), +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.AccessibleObject;, +import java.lang.reflect.Member;, +import static java.lang.reflect.Modifier.PRIVATE;, +import static java.lang.reflect.Modifier.PUBLIC;, +import static java.lang.reflect.Modifier.STATIC;, +    if ((targetClass.getModifiers() & PRIVATE) != 0) {, +      throw new IllegalArgumentException(targetClass.getName() + " must not be private.");, +    }, +, +    validateMember(field);, +    boolean isRequired = isRequired(field);, +    validateMember(field);, +    boolean isRequired = isRequired(field);, +    validateMember(field);, +    validateMember(method);, +    List<View> views = findViews(source, onClick.value(), isRequired(method), method.getName());, +    validateMember(method);, +    List<View> views = findViews(source, onLongClick.value(), isRequired(method), method.getName());, +  private static <T extends AccessibleObject & Member> void validateMember(T object) {, +    int modifiers = object.getModifiers();, +    if ((modifiers & (PRIVATE | STATIC)) != 0) {, +      throw new IllegalStateException(object.getDeclaringClass().getName(), +          + ".", +          + object.getName(), +          + " must not be private or static");, +    }, +    if ((modifiers & PUBLIC) == 0) {, +      object.setAccessible(true);, +    }, +  }, +  private static boolean isRequired(Field field) {, +    for (Annotation annotation : field.getAnnotations()) {, +      if (annotation.getClass().getSimpleName().equals("Nullable")) {, +        return false;, +      }, +    }, +    return true;, +  }, +, +  private static boolean isRequired(Method method) {, +    return method.getAnnotation(Optional.class) == null;, +  }, +, +  static void uncheckedSet(Field field, Object target, @Nullable Object value) {]