[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PRIVATE;, +    } else if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +            .addModifiers(isFinal ? PRIVATE : PROTECTED, STATIC);, +      result.addField(targetType, "target", isFinal ? PRIVATE : PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder();, +    if (!isFinal) {, +      constructor.addModifiers(PROTECTED);, +    }, +    if (hasMethodBindings()) {, +      constructor.addParameter(targetType, "target", FINAL);, +    } else {, +      constructor.addParameter(targetType, "target");, +    }, +, +    if (bindNeedsFinder()) {, +      constructor.addParameter(FINDER, "finder");, +      constructor.addParameter(Object.class, "source");, +    }, +    if (bindNeedsResources()) {, +      constructor.addParameter(RESOURCES, "res");, +    }, +    if (bindNeedsTheme()) {, +      constructor.addParameter(THEME, "theme");, +    }, +, +      CodeBlock.Builder invoke = CodeBlock.builder();, +      invoke.add("super(target");, +      if (parentBinding.bindNeedsFinder()) invoke.add(", finder, source");, +      if (parentBinding.bindNeedsResources()) invoke.add(", res");, +      if (parentBinding.bindNeedsTheme()) invoke.add(", theme");, +      constructor.addStatement("$L", invoke.add(")").build());, +    constructor.addCode("\n");, +, +    generateBindViewBody(constructor);, +, +  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName, PRIVATE);, +      boolean requiresRemoval = !"".equals(listenerClass.remover());, +        result.addField(listenerClassName, listenerField, PRIVATE);, +    if (isFinal && !isGeneratingUnbinder()) {, +      if (needsResources) {, +    }, +, +    CodeBlock.Builder invoke = CodeBlock.builder();, +    if (isGeneratingUnbinder()) {, +      invoke.add("return new $T", unbinderClassName);, +      invoke.add("$N", BIND_TO_TARGET);, +    }, +    invoke.add("(target");, +    if (!isGeneratingUnbinder()) {, +    if (!hasInheritedUnbinder() && hasParentBinding()) {, +      result.addStatement("$L = view", fieldName);, +        result.addStatement("this.$L = $L", listenerField, callback.build());, +            listener.setter(), requiresRemoval ? listenerField : callback.build());, +            requiresRemoval ? listenerField : callback.build());, +    return hasViewBindings() || hasInheritedUnbinder();, +    return hasParentBinding() && parentBinding.isGeneratingUnbinder();, +    return parentBinding.unbinderClassName;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import static javax.lang.model.element.Modifier.PRIVATE;, +    } else if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +            .addModifiers(isFinal ? PRIVATE : PROTECTED, STATIC);, +      result.addField(targetType, "target", isFinal ? PRIVATE : PROTECTED);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder();, +    if (!isFinal) {, +      constructor.addModifiers(PROTECTED);, +    }, +    if (hasMethodBindings()) {, +      constructor.addParameter(targetType, "target", FINAL);, +    } else {, +      constructor.addParameter(targetType, "target");, +    }, +, +    if (bindNeedsFinder()) {, +      constructor.addParameter(FINDER, "finder");, +      constructor.addParameter(Object.class, "source");, +    }, +    if (bindNeedsResources()) {, +      constructor.addParameter(RESOURCES, "res");, +    }, +    if (bindNeedsTheme()) {, +      constructor.addParameter(THEME, "theme");, +    }, +, +      CodeBlock.Builder invoke = CodeBlock.builder();, +      invoke.add("super(target");, +      if (parentBinding.bindNeedsFinder()) invoke.add(", finder, source");, +      if (parentBinding.bindNeedsResources()) invoke.add(", res");, +      if (parentBinding.bindNeedsTheme()) invoke.add(", theme");, +      constructor.addStatement("$L", invoke.add(")").build());, +    constructor.addCode("\n");, +, +    generateBindViewBody(constructor);, +, +  private void addFieldAndUnbindStatement(TypeSpec.Builder result, MethodSpec.Builder unbindMethod,, +    result.addField(VIEW, fieldName, PRIVATE);, +      boolean requiresRemoval = !"".equals(listenerClass.remover());]