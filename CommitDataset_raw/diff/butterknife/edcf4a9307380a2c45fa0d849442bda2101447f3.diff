[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (bindNeedsViewLocal()) {, +      }, +    if (!bindings.requiresLocal()) {, +      // Optimize the common case where there's a single binding directly to a field., +      Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();, +      for (FieldViewBinding fieldBinding : fieldBindings) {, +        CodeBlock.Builder invoke = CodeBlock.builder(), +            .add("target.$L = finder.find", fieldBinding.getName());, +        invoke.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add("AsType");, +        }, +        invoke.add("(source, $L", bindings.getId());, +        if (fieldBinding.isRequired() || requiresCast(fieldBinding.getType())) {, +          invoke.add(", $S", asHumanDescription(fieldBindings));, +        }, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add(", $T.class", fieldBinding.getRawType());, +        }, +        result.addStatement("$L)", invoke.build());, +      }, +      return;, +    }, +, +  private boolean bindNeedsViewLocal() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      if (viewBindings.requiresLocal()) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (bindNeedsViewLocal()) {, +      }, +    if (!bindings.requiresLocal()) {, +      // Optimize the common case where there's a single binding directly to a field., +      Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();, +      for (FieldViewBinding fieldBinding : fieldBindings) {, +        CodeBlock.Builder invoke = CodeBlock.builder(), +            .add("target.$L = finder.find", fieldBinding.getName());, +        invoke.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add("AsType");, +        }, +        invoke.add("(source, $L", bindings.getId());, +        if (fieldBinding.isRequired() || requiresCast(fieldBinding.getType())) {, +          invoke.add(", $S", asHumanDescription(fieldBindings));, +        }, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add(", $T.class", fieldBinding.getRawType());, +        }, +        result.addStatement("$L)", invoke.build());, +      }, +      return;, +    }, +, +  private boolean bindNeedsViewLocal() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      if (viewBindings.requiresLocal()) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldViewBinding.java, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.ParameterizedTypeName;, +  public ClassName getRawType() {, +    if (type instanceof ParameterizedTypeName) {, +      return ((ParameterizedTypeName) type).rawType;, +    }, +    return (ClassName) type;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      if (bindNeedsViewLocal()) {, +      }, +    if (!bindings.requiresLocal()) {, +      // Optimize the common case where there's a single binding directly to a field., +      Collection<FieldViewBinding> fieldBindings = bindings.getFieldBindings();, +      for (FieldViewBinding fieldBinding : fieldBindings) {, +        CodeBlock.Builder invoke = CodeBlock.builder(), +            .add("target.$L = finder.find", fieldBinding.getName());, +        invoke.add(fieldBinding.isRequired() ? "RequiredView" : "OptionalView");, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add("AsType");, +        }, +        invoke.add("(source, $L", bindings.getId());, +        if (fieldBinding.isRequired() || requiresCast(fieldBinding.getType())) {, +          invoke.add(", $S", asHumanDescription(fieldBindings));, +        }, +        if (requiresCast(fieldBinding.getType())) {, +          invoke.add(", $T.class", fieldBinding.getRawType());, +        }, +        result.addStatement("$L)", invoke.build());, +      }]