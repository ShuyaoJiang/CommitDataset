[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +  private final RScanner rScanner = new RScanner();, +    Id resourceId = elementToId(element, BindView.class, id);, +      String existingBindingName = builder.findExistingBindingName(resourceId);, +    builder.addField(resourceId, new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind,, +        new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));, +    Id resourceId = elementToId(element, BindAnim.class, id);, +, +    builder.addResource(new FieldAnimationBinding(resourceId, name));, +    Id resourceId = elementToId(element, BindBool.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BOOL));, +    Id resourceId = elementToId(element, BindColor.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindDimen.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindBitmap.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BITMAP));, +    Map<Integer, Id> resourceIds = elementToIds(element, BindDrawable.class, new int[] {id, tint});, +, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint)));, +    Id resourceId = elementToId(element, BindFloat.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.FLOAT));, +    Id resourceId = elementToId(element, BindFont.class, bindFont.value());, +    builder.addResource(new FieldTypefaceBinding(resourceId, name, style));, +    Id resourceId = elementToId(element, BindInt.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.INT));, +    Id resourceId = elementToId(element, BindString.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));, +    Id resourceId = elementToId(element, BindArray.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name, type));, +    Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);, +, +    for (int id : resourceIds.keySet()) {, +      if (!builder.addMethod(resourceIds.get(id), listener, method, binding)) {, +  private Id elementToId(Element element, Class<? extends Annotation> annotation, int value) {, +    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));, +    if (tree != null) { // tree can be null if the references are compiled types and not source, +      tree.accept(rScanner);, +      return new Id(value, rScanner.rSymbol);, +    }, +    return new Id(value);, +  }, +, +  private Map<Integer, Id> elementToIds(Element element, Class<? extends Annotation> annotation,, +      int[] values) {, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +    JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));, +    if (tree != null) { // tree can be null if the references are compiled types and not source, +      for (int value : values) {, +        tree.accept(rScanner);, +        resourceIds.put(value, new Id(value, rScanner.rSymbol));, +      }, +    } else {, +      for (int value : values) {, +        resourceIds.put(value, new Id(value));, +      }, +    }, +    return resourceIds;, +  }, +, +  private static class RScanner extends TreeScanner {, +    Symbol rSymbol;, +        rSymbol = symbol;, +      } else {, +        rSymbol = null;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +  private final RScanner rScanner = new RScanner();, +    Id resourceId = elementToId(element, BindView.class, id);, +      String existingBindingName = builder.findExistingBindingName(resourceId);, +    builder.addField(resourceId, new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind,, +        new ArrayList<>(elementToIds(element, BindViews.class, ids).values()), required));, +    Id resourceId = elementToId(element, BindAnim.class, id);, +, +    builder.addResource(new FieldAnimationBinding(resourceId, name));, +    Id resourceId = elementToId(element, BindBool.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BOOL));, +    Id resourceId = elementToId(element, BindColor.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindDimen.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name,, +    Id resourceId = elementToId(element, BindBitmap.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.BITMAP));, +    Map<Integer, Id> resourceIds = elementToIds(element, BindDrawable.class, new int[] {id, tint});, +, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint)));, +    Id resourceId = elementToId(element, BindFloat.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.FLOAT));, +    Id resourceId = elementToId(element, BindFont.class, bindFont.value());, +    builder.addResource(new FieldTypefaceBinding(resourceId, name, style));, +    Id resourceId = elementToId(element, BindInt.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.INT));, +    Id resourceId = elementToId(element, BindString.class, id);, +        new FieldResourceBinding(resourceId, name, FieldResourceBinding.Type.STRING));, +    Id resourceId = elementToId(element, BindArray.class, id);, +    builder.addResource(new FieldResourceBinding(resourceId, name, type));, +    Map<Integer, Id> resourceIds = elementToIds(element, annotationClass, ids);, +, +    for (int id : resourceIds.keySet()) {]