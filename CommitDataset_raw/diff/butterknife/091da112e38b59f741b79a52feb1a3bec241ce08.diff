[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (hasParentUnbinder()) {, +      result.addField(targetType, "target", PROTECTED);, +    if (hasViewBindings()) {, +      result.addMethod(createUnbindInterfaceMethod(result, targetType));, +    if (hasParentUnbinder()) {, +      constructor.addStatement("this.target = target");, +  private MethodSpec createUnbindInterfaceMethod(TypeSpec.Builder unbinderClass,, +      TypeName targetType) {, +        .addModifiers(PUBLIC), +        .addStatement("$T target = this.target", targetType);, +    if (!hasParentUnbinder()) {, +      result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +      result.addStatement("super.unbind()");, +    if (hasFieldBindings()) {, +      result.addCode("\n");, +    if (hasMethodBindings()) {, +      result.addCode("\n");, +      for (ViewBindings bindings : viewIdMap.values()) {, +        addFieldAndUnbindStatement(unbinderClass, result, bindings);, +      }, +    }, +, +    if (!hasParentUnbinder()) {, +      result.addCode("\n");, +      result.addStatement("this.target = null");, +    }, +, +    return result.build();, +  }, +, +      unbindMethod.beginControlFlow("if ($N != null)", fieldName);, +      boolean requiresRemoval = !listenerClass.remover().isEmpty();, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),, +        unbindMethod.addStatement("$N.$N($N)", fieldName,, +        unbindMethod.addStatement("$N = null", listenerField);, +    unbindMethod.addStatement("$N = null", fieldName);, +, +  private boolean hasParentUnbinder() {, +    return hasParentBinding() && parentBinding.hasUnbinder();, +  }, +, +  private boolean hasFieldBindings() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      if (!viewBindings.getFieldBindings().isEmpty()) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +    if (hasParentUnbinder()) {, +      result.addField(targetType, "target", PROTECTED);, +    if (hasViewBindings()) {, +      result.addMethod(createUnbindInterfaceMethod(result, targetType));, +    if (hasParentUnbinder()) {, +      constructor.addStatement("this.target = target");, +  private MethodSpec createUnbindInterfaceMethod(TypeSpec.Builder unbinderClass,, +      TypeName targetType) {, +        .addModifiers(PUBLIC), +        .addStatement("$T target = this.target", targetType);, +    if (!hasParentUnbinder()) {, +      result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +      result.addStatement("super.unbind()");, +    if (hasFieldBindings()) {, +      result.addCode("\n");, +    if (hasMethodBindings()) {, +      result.addCode("\n");, +      for (ViewBindings bindings : viewIdMap.values()) {, +        addFieldAndUnbindStatement(unbinderClass, result, bindings);, +      }, +    }, +, +    if (!hasParentUnbinder()) {, +      result.addCode("\n");, +      result.addStatement("this.target = null");, +    }, +, +    return result.build();, +  }, +, +      unbindMethod.beginControlFlow("if ($N != null)", fieldName);, +      boolean requiresRemoval = !listenerClass.remover().isEmpty();, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),, +        unbindMethod.addStatement("$N.$N($N)", fieldName,, +        unbindMethod.addStatement("$N = null", listenerField);, +    unbindMethod.addStatement("$N = null", fieldName);, +, +  private boolean hasParentUnbinder() {, +    return hasParentBinding() && parentBinding.hasUnbinder();, +  }, +, +  private boolean hasFieldBindings() {, +    for (ViewBindings viewBindings : viewIdMap.values()) {, +      if (!viewBindings.getFieldBindings().isEmpty()) {, +        return true;, +      }, +    }, +    return false;]