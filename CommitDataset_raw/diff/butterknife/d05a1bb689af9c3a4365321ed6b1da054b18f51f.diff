[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.google.common.collect.ImmutableSet;, +  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";, +, +  private boolean debuggable = true;, +    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));, +, +    return ImmutableSet.of(OPTION_SDK_INT, OPTION_DEBUGGABLE);, +      JavaFile javaFile = binding.brewJava(sdk, debuggable);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  JavaFile brewJava(int sdk, boolean debuggable) {, +    return JavaFile.builder(bindingClassName.packageName(), createType(sdk, debuggable)), +  private TypeSpec createType(int sdk, boolean debuggable) {, +    result.addMethod(createBindingConstructor(sdk, debuggable));, +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable) {, +        addViewBinding(constructor, binding, debuggable);, +        constructor.addStatement("$L", binding.render(debuggable));, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +      if (!debuggable || (!requiresCast && !fieldBinding.isRequired())) {, +    if (!debuggable || requiredBindings.isEmpty()) {, +    addFieldBinding(result, binding, debuggable);, +    addMethodBindings(result, binding, debuggable);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +        if (debuggable) {, +          result.addStatement("target.$L = ($T) view", fieldBinding.getName(),, +              fieldBinding.getType());, +        }, +      } else {, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +                if (debuggable) {, +                  builder.add("$T.castParam(p$L, $S, $L, $S, $L, $T.class)", UTILS,, +                      listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i,, +                      parameter.getType());, +                } else {, +                  builder.add("($T) p$L", parameter.getType(), listenerPosition);, +                }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.google.common.collect.ImmutableSet;, +  private static final String OPTION_DEBUGGABLE = "butterknife.debuggable";, +, +  private boolean debuggable = true;, +    debuggable = !"false".equals(env.getOptions().get(OPTION_DEBUGGABLE));, +]