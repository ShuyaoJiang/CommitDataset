[+++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection binding. */, +  /** A description of the binding in human readable form (e.g., "field 'foo'"). */, +  /** False if the {@link butterknife.Optional @Optional} annotation is present on the binding. */, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection binding. */, +  /** A description of the binding in human readable form (e.g., "field 'foo'"). */, +  /** False if the {@link butterknife.Optional @Optional} annotation is present on the binding. */, +++ b/butterknife/src/main/java/butterknife/internal/FieldBinding.java, +final class FieldBinding implements Binding {, +++ b/butterknife/src/main/java/butterknife/OnClick.java, +import android.view.View;, +import butterknife.internal.ListenerClass;, +@ListenerClass(View.OnClickListener.class), +++ b/butterknife/src/main/java/butterknife/OnItemClick.java, +import android.widget.AdapterView;, +import butterknife.internal.ListenerClass;, +@ListenerClass(AdapterView.OnItemClickListener.class), +++ b/butterknife/src/main/java/butterknife/internal/Binding.java, +/** A field or method view injection binding. */, +  /** A description of the binding in human readable form (e.g., "field 'foo'"). */, +  /** False if the {@link butterknife.Optional @Optional} annotation is present on the binding. */, +++ b/butterknife/src/main/java/butterknife/internal/FieldBinding.java, +final class FieldBinding implements Binding {, +++ b/butterknife/src/main/java/butterknife/internal/InjectViewProcessor.java, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.util.Arrays;, +import java.util.BitSet;, +public final class InjectViewProcessor extends AbstractProcessor {, +  private static final Map<Class<?>, Listener> LISTENER_MAP =, +      new LinkedHashMap<Class<?>, Listener>();, +    Map<TypeElement, ViewInjector> targetClassMap = findAndParseTargets(env);, +    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {, +      ViewInjector viewInjector = entry.getValue();, +        JavaFileObject jfo = filer.createSourceFile(viewInjector.getFqcn(), typeElement);, +        writer.write(viewInjector.brewJava());, +  private Map<TypeElement, ViewInjector> findAndParseTargets(RoundEnvironment env) {, +    Map<TypeElement, ViewInjector> targetClassMap = new LinkedHashMap<TypeElement, ViewInjector>();, +    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {, +  private boolean isValidForGeneratedCode(Class<? extends Annotation> annotationClass,, +      String targetThing, Element element) {, +    boolean hasError = false;, +    // Verify method modifiers., +    Set<Modifier> modifiers = element.getModifiers();, +    if (modifiers.contains(PRIVATE) || modifiers.contains(STATIC)) {, +      error(element, "@%s %s must not be private or static. (%s.%s)",, +          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +      error(enclosingElement, "@%s %s may only be contained in classes. (%s.%s)",, +          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +      error(enclosingElement, "@%s %s may not be contained in private classes. (%s.%s)",, +          annotationClass.getSimpleName(), targetThing, enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +    }, +, +    return hasError;, +  }, +, +  private void parseInjectView(Element element, Map<TypeElement, ViewInjector> targetClassMap,, +      Set<TypeMirror> erasedTargetTypes) {, +    boolean hasError = false;, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +, +    // Verify that the target type extends from View., +    if (!isSubtypeOfType(element.asType(), VIEW_TYPE)) {, +      error(element, "@InjectView fields must extend from View (%s.%s).",, +          enclosingElement.getQualifiedName(), element.getSimpleName());]