[+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(activity);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(activity);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(holder);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import butterknife.ButterKnife;, +    ButterKnife.inject(this);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleAdapter.java, +import butterknife.ButterKnife;, +      ButterKnife.inject(this, view);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleApp.java, +import butterknife.ButterKnife;, +    ButterKnife.setDebug(BuildConfig.DEBUG);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(activity);, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +import butterknife.ButterKnife;, +    ButterKnife.reset(holder);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +package butterknife;, +, +import android.app.Activity;, +import android.util.Log;, +import android.view.View;, +import butterknife.internal.InjectViewProcessor;, +import java.lang.reflect.Method;, +import java.util.LinkedHashMap;, +import java.util.Map;, +, +/** View injection utilities. */, +public class ButterKnife {, +  private ButterKnife() {, +    // No instances., +  }, +, +  public enum Finder {, +    VIEW {, +      @Override public View findById(Object source, int id) {, +        return ((View) source).findViewById(id);, +      }, +    },, +    ACTIVITY {, +      @Override public View findById(Object source, int id) {, +        return ((Activity) source).findViewById(id);, +      }, +    };, +, +    public abstract View findById(Object source, int id);, +  }, +, +  private static final String TAG = "ButterKnife";, +  private static boolean debug = false;, +, +  static final Map<Class<?>, Method> INJECTORS = new LinkedHashMap<Class<?>, Method>();, +  static final Map<Class<?>, Method> RESETTERS = new LinkedHashMap<Class<?>, Method>();, +  static final Method NO_OP = null;, +, +  /** Control whether debug logging is enabled. */]