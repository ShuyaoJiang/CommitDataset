[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.annotation.TargetApi;, +import android.os.Build;, + * There are three convenience methods for working with view collections:, + * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>, +  /** A simple setter that can be apply a value to a list of views. */, +  public interface Setter<T extends View, V> {, +    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */, +    void set(T view, V value, int index);, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */, +  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      setter.set(list.get(i), value, i);, +    }, +  }, +, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.annotation.TargetApi;, +import android.os.Build;, + * There are three convenience methods for working with view collections:, + * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>, +  /** A simple setter that can be apply a value to a list of views. */, +  public interface Setter<T extends View, V> {, +    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */, +    void set(T view, V value, int index);, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */, +  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      setter.set(list.get(i), value, i);, +    }, +  }, +, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =, +      new ButterKnife.Setter<View, Boolean>() {, +        @Override public void set(View view, Boolean value, int index) {, +          view.setEnabled(value);, +        }, +      };, +  @Test public void setterAppliedToEveryView() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1).isEnabled();, +    assertThat(view2).isEnabled();, +    assertThat(view3).isEnabled();, +, +    List<View> views = Arrays.asList(view1, view2, view3);, +    ButterKnife.apply(views, SETTER_ENABLED, false);, +, +    assertThat(view1).isDisabled();, +    assertThat(view2).isDisabled();, +    assertThat(view3).isDisabled();, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.annotation.TargetApi;, +import android.os.Build;, + * There are three convenience methods for working with view collections:, + * <li>{@link #apply(List, Setter, Object)} &ndash; Applies a setter value to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a property value to each view.</li>, +  /** A simple setter that can be apply a value to a list of views. */, +  public interface Setter<T extends View, V> {, +    /** Set the {@code value} on the {@code view} which is at {@code index} in the list. */, +    void set(T view, V value, int index);, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code list} of views. */, +  public static <T extends View, V> void apply(List<T> list, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      setter.set(list.get(i), value, i);, +    }, +  }, +, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  private static final ButterKnife.Setter<View, Boolean> SETTER_ENABLED =, +      new ButterKnife.Setter<View, Boolean>() {, +        @Override public void set(View view, Boolean value, int index) {, +          view.setEnabled(value);, +        }, +      };, +  @Test public void setterAppliedToEveryView() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1).isEnabled();, +    assertThat(view2).isEnabled();, +    assertThat(view3).isEnabled();, +, +    List<View> views = Arrays.asList(view1, view2, view3);, +    ButterKnife.apply(views, SETTER_ENABLED, false);]