[+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnItemSelectedTest.java, +package com.example.butterknife.functional;, +, +import android.content.Context;, +import android.view.View;, +import android.view.ViewGroup;, +import android.widget.AbsSpinner;, +import android.widget.AdapterView;, +import android.widget.FrameLayout;, +import androidx.test.InstrumentationRegistry;, +import androidx.test.annotation.UiThreadTest;, +import butterknife.ButterKnife;, +import butterknife.OnItemSelected;, +import butterknife.Optional;, +import butterknife.Unbinder;, +import com.example.butterknife.BuildConfig;, +import com.example.butterknife.library.SimpleAdapter;, +import org.junit.Before;, +import org.junit.Test;, +, +import static butterknife.OnItemSelected.Callback.NOTHING_SELECTED;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assume.assumeFalse;, +, +@SuppressWarnings("unused") // Used by code gen., +public final class OnItemSelectedTest {, +  static class TestSpinner extends AbsSpinner {, +    public TestSpinner(Context context) {, +      super(context);, +      setAdapter(new SimpleAdapter(context));, +    }, +, +    void performSelection(int position) {, +      if (position < 0) {, +        return;, +      }, +, +      AdapterView.OnItemSelectedListener listener = getOnItemSelectedListener();, +      if (listener != null) {, +        listener.onItemSelected(this, null, position, NO_ID);, +      }, +    }, +, +    void clearSelection() {, +      AdapterView.OnItemSelectedListener listener = getOnItemSelectedListener();, +      if (listener != null) {, +        listener.onNothingSelected(this);, +      }, +    }, +  }, +, +  @Before public void ignoreIfReflect() {, +    assumeFalse("Not implemented", BuildConfig.FLAVOR.equals("reflect")); // TODO, +  }, +, +  static final class Simple {, +    int selectedPosition = -1;, +, +    @OnItemSelected(1) void select(int position) {, +      selectedPosition = position;, +    }, +, +    @OnItemSelected(value = 1, callback = NOTHING_SELECTED) void clear() {, +      selectedPosition = -1;, +    }, +  }, +, +  @UiThreadTest, +  @Test public void simple() {, +    View tree = ViewTree.create(TestSpinner.class, 1);, +    TestSpinner spinner = tree.findViewById(1);, +, +    Simple target = new Simple();, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertEquals(-1, target.selectedPosition);, +, +    spinner.performSelection(0);, +    assertEquals(0, target.selectedPosition);, +, +    spinner.clearSelection();, +    assertEquals(-1, target.selectedPosition);, +, +    spinner.performSelection(1);, +    unbinder.unbind();, +    spinner.performSelection(0);, +    assertEquals(1, target.selectedPosition);, +    spinner.clearSelection();, +    assertEquals(1, target.selectedPosition);, +  }, +, +  static final class MultipleBindings {, +    int selectedPosition1 = -1;, +    int selectedPosition2 = -1;, +, +    @OnItemSelected(1) void select1(int position) {, +      selectedPosition1 = position;, +    }, +, +    @OnItemSelected(1) void select2(int position) {]