[+++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, +  private Constants() { }, +, +  public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, +  private Constants() { }, +, +  public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  static final Id NO_ID = new Id(NO_RES_ID);, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name,, +        tint == NO_RES_ID ? NO_ID : resourceIds.get(tint)));, +      rScanner.reset();, +      return rScanner.resourceIds.values().iterator().next();, +      rScanner.reset();, +      if (!rScanner.resourceIds.isEmpty()) {, +        return rScanner.resourceIds;, +      } else {, +        return valuesToResourceIds(values);, +      return valuesToResourceIds(values);, +    }, +  }, +, +  private Map<Integer, Id> valuesToResourceIds(int[] values) {, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +      int value = (Integer) ((Symbol.VarSymbol) symbol).getConstantValue();, +      if (symbol.getEnclosingElement() != null, +        resourceIds.put(value, new Id(value, symbol));, +        resourceIds.put(value, new Id(value));, +, +    @Override public void visitLiteral(JCTree.JCLiteral jcLiteral) {, +      int value = (Integer) jcLiteral.value;, +      resourceIds.put(value, new Id(value));, +    }, +, +    void reset() {, +      resourceIds.clear();, +    }, +++ b/butterknife-annotations/src/main/java/butterknife/BindDrawable.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  @AttrRes int tint() default NO_RES_ID;, +++ b/butterknife-annotations/src/main/java/butterknife/internal/Constants.java, +package butterknife.internal;, +, +public class Constants {, +, +  private Constants() { }, +, +  public static final int NO_RES_ID = -1;, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import static butterknife.internal.Constants.NO_RES_ID;, +, +  static final Id NO_ID = new Id(NO_RES_ID);, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name,, +        tint == NO_RES_ID ? NO_ID : resourceIds.get(tint)));, +      rScanner.reset();, +      return rScanner.resourceIds.values().iterator().next();, +      rScanner.reset();, +      if (!rScanner.resourceIds.isEmpty()) {, +        return rScanner.resourceIds;, +      } else {, +        return valuesToResourceIds(values);, +      return valuesToResourceIds(values);, +    }, +  }, +, +  private Map<Integer, Id> valuesToResourceIds(int[] values) {, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +    Map<Integer, Id> resourceIds = new LinkedHashMap<>();, +      int value = (Integer) ((Symbol.VarSymbol) symbol).getConstantValue();, +      if (symbol.getEnclosingElement() != null, +        resourceIds.put(value, new Id(value, symbol));, +        resourceIds.put(value, new Id(value));]