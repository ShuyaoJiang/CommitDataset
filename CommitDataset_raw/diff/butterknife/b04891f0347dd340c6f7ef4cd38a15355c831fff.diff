[+++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +    remover = "removeTextChangedListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +    remover = "removeTextChangedListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */, +  /**, +   * Name of the method on the {@linkplain #targetType() target type} to remove the listener. If, +   * empty {@link #setter()} will be used by default., +   */, +  String remover() default "";, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +    remover = "removeTextChangedListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */, +  /**, +   * Name of the method on the {@linkplain #targetType() target type} to remove the listener. If, +   * empty {@link #setter()} will be used by default., +   */, +  String remover() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      // We need to keep a reference to the listener, +      // in case we need to unbind it via a remove method., +      boolean requiresRemoval = listenerClass.remover().length() != 0;, +      String listenerField = "null";, +      if (requiresRemoval) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +        listenerField = fieldName + ((ClassName) listenerClassName).simpleName();, +        result.addField(listenerClassName, listenerField);, +      }, +, +        unbindMethod.addStatement("(($T) $L).$L($L)", bestGuess(listenerClass.targetType()),, +            fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);, +        unbindMethod.addStatement("$L.$L($L)", fieldName,, +            removerOrSetter(listenerClass, requiresRemoval), listenerField);, +      }, +, +      if (requiresRemoval) {, +        unbindMethod.addStatement("$L = null", listenerField);, +  private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemoval) {, +    return requiresRemoval, +        ? listenerClass.remover(), +        : listenerClass.setter();, +  }, +, +    String fieldName = "view" + bindings.getUniqueIdSuffix();, +      result.addStatement("unbinder.$L = view", fieldName);, +      boolean requiresRemoval = hasUnbinder() && listener.remover().length() != 0;, +      String listenerField = null;, +      if (requiresRemoval) {, +        TypeName listenerClassName = bestGuess(listener.type());, +        listenerField = fieldName + ((ClassName) listenerClassName).simpleName();, +        result.addStatement("unbinder.$L = $L", listenerField, callback.build());, +      }, +, +            listener.setter(), requiresRemoval ? "unbinder." + listenerField : callback.build());, +        result.addStatement("view.$L($L)", listener.setter(),, +            requiresRemoval ? "unbinder." + listenerField : callback.build());, +++ b/butterknife-annotations/src/main/java/butterknife/OnTextChanged.java, +    remover = "removeTextChangedListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  /** Name of the setter method on the {@linkplain #targetType() target type} for the listener. */, +  /**, +   * Name of the method on the {@linkplain #targetType() target type} to remove the listener. If, +   * empty {@link #setter()} will be used by default., +   */, +  String remover() default "";, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      // We need to keep a reference to the listener, +      // in case we need to unbind it via a remove method., +      boolean requiresRemoval = listenerClass.remover().length() != 0;, +      String listenerField = "null";, +      if (requiresRemoval) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +        listenerField = fieldName + ((ClassName) listenerClassName).simpleName();, +        result.addField(listenerClassName, listenerField);, +      }, +, +        unbindMethod.addStatement("(($T) $L).$L($L)", bestGuess(listenerClass.targetType()),, +            fieldName, removerOrSetter(listenerClass, requiresRemoval), listenerField);, +        unbindMethod.addStatement("$L.$L($L)", fieldName,, +            removerOrSetter(listenerClass, requiresRemoval), listenerField);, +      }, +, +      if (requiresRemoval) {, +        unbindMethod.addStatement("$L = null", listenerField);, +  private String removerOrSetter(ListenerClass listenerClass, boolean requiresRemoval) {, +    return requiresRemoval, +        ? listenerClass.remover(), +        : listenerClass.setter();, +  }, +, +    String fieldName = "view" + bindings.getUniqueIdSuffix();, +      result.addStatement("unbinder.$L = view", fieldName);, +      boolean requiresRemoval = hasUnbinder() && listener.remover().length() != 0;, +      String listenerField = null;, +      if (requiresRemoval) {]