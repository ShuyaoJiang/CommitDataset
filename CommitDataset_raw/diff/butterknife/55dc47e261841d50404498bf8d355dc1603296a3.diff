[+++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +      if (bindNeedsView()) {, +      if (bindNeedsResource()) {, +        constructor.addStatement("$T res = context.getResources()", RESOURCES);, +          constructor.addStatement("target.$L = $T.getTintedDrawable(context, $L, $L)",, +          constructor.addStatement("target.$L = $T.getDrawable(context, $L)", binding.getName(),, +              CONTEXT_COMPAT, binding.getId().code);, +        constructor.addStatement("$L", binding.render());, +    return !(drawableBindings.isEmpty() && resourceBindings.isEmpty());, +      if (!binding.id.qualifed) {, +  /** True when this type's bindings use Resource directly instead of Context. */, +  private boolean hasResourceBindingsNeedingResource() {, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (binding.type.requiresResource) {, +  /** True if this binding requires Resources. Otherwise only Context is needed. */, +  private boolean bindNeedsResource() {, +    return hasResourceBindingsNeedingResource(), +        || hasParentBinding() && parentBinding.bindNeedsResource();, +  }, +, +++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +      if (bindNeedsView()) {, +      if (bindNeedsResource()) {, +        constructor.addStatement("$T res = context.getResources()", RESOURCES);, +          constructor.addStatement("target.$L = $T.getTintedDrawable(context, $L, $L)",, +          constructor.addStatement("target.$L = $T.getDrawable(context, $L)", binding.getName(),, +              CONTEXT_COMPAT, binding.getId().code);, +        constructor.addStatement("$L", binding.render());, +    return !(drawableBindings.isEmpty() && resourceBindings.isEmpty());, +      if (!binding.id.qualifed) {, +  /** True when this type's bindings use Resource directly instead of Context. */, +  private boolean hasResourceBindingsNeedingResource() {, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (binding.type.requiresResource) {, +  /** True if this binding requires Resources. Otherwise only Context is needed. */, +  private boolean bindNeedsResource() {, +    return hasResourceBindingsNeedingResource(), +        || hasParentBinding() && parentBinding.bindNeedsResource();, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL);, +        isColorStateList ? FieldResourceBinding.Type.COLOR_STATE_LIST, +            : FieldResourceBinding.Type.COLOR);, +        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT);, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP);, +    bindingClass.addResource(binding);, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT);, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT);, +    FieldResourceBinding binding =, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING);, +    FieldResourceBinding.Type type = getArrayResourceMethodName(element);, +    if (type == null) {, +    FieldResourceBinding binding = new FieldResourceBinding(getId(id), name, type);, +  private static FieldResourceBinding.Type getArrayResourceMethodName(Element element) {, +      return FieldResourceBinding.Type.TYPED_ARRAY;, +        return FieldResourceBinding.Type.STRING_ARRAY;, +        return FieldResourceBinding.Type.INT_ARRAY;, +        return FieldResourceBinding.Type.TEXT_ARRAY;, +++ b/build.gradle, +    supportCompat: "com.android.support:support-compat:$supportLibraryVersion",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  static final ClassName BITMAP_FACTORY = ClassName.get("android.graphics", "BitmapFactory");, +  static final ClassName CONTEXT_COMPAT =, +      ClassName.get("android.support.v4.content", "ContextCompat");, +      if (bindNeedsView()) {, +      if (bindNeedsResource()) {, +        constructor.addStatement("$T res = context.getResources()", RESOURCES);, +          constructor.addStatement("target.$L = $T.getTintedDrawable(context, $L, $L)",, +          constructor.addStatement("target.$L = $T.getDrawable(context, $L)", binding.getName(),, +              CONTEXT_COMPAT, binding.getId().code);, +        constructor.addStatement("$L", binding.render());, +    return !(drawableBindings.isEmpty() && resourceBindings.isEmpty());, +      if (!binding.id.qualifed) {, +  /** True when this type's bindings use Resource directly instead of Context. */, +  private boolean hasResourceBindingsNeedingResource() {, +    for (FieldResourceBinding binding : resourceBindings) {, +      if (binding.type.requiresResource) {, +  /** True if this binding requires Resources. Otherwise only Context is needed. */, +  private boolean bindNeedsResource() {, +    return hasResourceBindingsNeedingResource(), +        || hasParentBinding() && parentBinding.bindNeedsResource();]