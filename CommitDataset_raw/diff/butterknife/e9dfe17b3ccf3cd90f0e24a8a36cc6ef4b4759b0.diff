[+++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.2.2', +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.2.2', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final ImmutableList<ViewBinding> viewBindings;, +  private final ImmutableList<FieldCollectionViewBinding> collectionBindings;, +  private final ImmutableList<ResourceBinding> resourceBindings;, +      ImmutableList<ViewBinding> viewBindings,, +      ImmutableList<FieldCollectionViewBinding> collectionBindings,, +      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {, +    this.viewBindings = viewBindings;, +    this.collectionBindings = collectionBindings;, +    this.resourceBindings = resourceBindings;, +      for (ViewBinding binding : viewBindings) {, +        addViewBinding(constructor, binding);, +      for (ViewBinding binding : viewBindings) {, +        if (binding.getFieldBinding() != null) {, +          result.addStatement("target.$L = null", binding.getFieldBinding().getName());, +      for (ViewBinding binding : viewBindings) {, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {, +    if (binding.isSingleFieldBinding()) {, +      FieldViewBinding fieldBinding = binding.getFieldBinding();, +        builder.add("source.findViewById($L)", binding.getId().code);, +        builder.add("(source, $L", binding.getId().code);, +    List<MemberViewBinding> requiredBindings = binding.getRequiredBindings();, +    if (requiredBindings.isEmpty()) {, +      result.addStatement("view = source.findViewById($L)", binding.getId().code);, +    } else if (!binding.isBoundToRoot()) {, +          binding.getId().code, asHumanDescription(requiredBindings));, +    addFieldBinding(result, binding);, +    addMethodBindings(result, binding);, +  private void addFieldBinding(MethodSpec.Builder result, ViewBinding binding) {, +    FieldViewBinding fieldBinding = binding.getFieldBinding();, +            fieldBinding.getName(), UTILS, binding.getId().code,, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding) {, +        binding.getMethodBindings();, +    boolean needsNullChecked = binding.getRequiredBindings().isEmpty();, +    if (!binding.isBoundToRoot()) {, +      fieldName = "view" + binding.getId().value;, +          for (MethodViewBinding methodBinding : methodBindings.get(method)) {, +            builder.add("target.$L(", methodBinding.getName());, +            List<Parameter> parameters = methodBinding.getParameters();, +                    listenerPosition, method.name(), listenerPosition, methodBinding.getName(), i);, +  static String asHumanDescription(Collection<? extends MemberViewBinding> bindings) {, +    Iterator<? extends MemberViewBinding> iterator = bindings.iterator();, +    for (ViewBinding bindings : viewBindings) {, +    for (ViewBinding bindings : viewBindings) {, +    for (ViewBinding bindings : viewBindings) {, +    private final Map<Id, ViewBinding.Builder> viewIdMap = new LinkedHashMap<>();, +    private final ImmutableList.Builder<FieldCollectionViewBinding> collectionBindings =, +        ImmutableList.builder();, +    private final ImmutableList.Builder<ResourceBinding> resourceBindings = ImmutableList.builder();, +      ViewBinding.Builder viewBinding = getOrCreateViewBindings(id);, +      if (viewBinding.hasMethodBinding(listener, method) && !"void".equals(method.returnType())) {, +      viewBinding.addMethodBinding(listener, method, binding);, +    String findExistingBindingName(Id id) {, +      ViewBinding.Builder builder = viewIdMap.get(id);, +      if (builder == null) {, +        return null;, +      }, +      FieldViewBinding fieldBinding = builder.fieldBinding;, +      if (fieldBinding == null) {, +        return null;, +      }, +      return fieldBinding.getName();, +    private ViewBinding.Builder getOrCreateViewBindings(Id id) {, +      ViewBinding.Builder viewId = viewIdMap.get(id);, +        viewId = new ViewBinding.Builder(id);, +      ImmutableList.Builder<ViewBinding> viewBindings = ImmutableList.builder();, +      for (ViewBinding.Builder builder : viewIdMap.values()) {, +        viewBindings.add(builder.build());, +      }, +      return new BindingSet(targetTypeName, bindingClassName, isFinal, viewBindings.build(),, +          collectionBindings.build(), resourceBindings.build(), parentBinding);, +++ b/build.gradle, +      classpath 'com.android.tools.build:gradle:2.2.2', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final ImmutableList<ViewBinding> viewBindings;, +  private final ImmutableList<FieldCollectionViewBinding> collectionBindings;, +  private final ImmutableList<ResourceBinding> resourceBindings;, +      ImmutableList<ViewBinding> viewBindings,, +      ImmutableList<FieldCollectionViewBinding> collectionBindings,, +      ImmutableList<ResourceBinding> resourceBindings, BindingSet parentBinding) {, +    this.viewBindings = viewBindings;, +    this.collectionBindings = collectionBindings;, +    this.resourceBindings = resourceBindings;, +      for (ViewBinding binding : viewBindings) {, +        addViewBinding(constructor, binding);, +      for (ViewBinding binding : viewBindings) {, +        if (binding.getFieldBinding() != null) {, +          result.addStatement("target.$L = null", binding.getFieldBinding().getName());, +      for (ViewBinding binding : viewBindings) {, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding) {, +    if (binding.isSingleFieldBinding()) {, +      FieldViewBinding fieldBinding = binding.getFieldBinding();]