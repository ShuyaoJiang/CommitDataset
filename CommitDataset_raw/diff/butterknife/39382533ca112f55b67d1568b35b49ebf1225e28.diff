[+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import java.util.Collection;, +    Set<TypeMirror> erasedTargetTypes = new LinkedHashSet<TypeMirror>();, +        parseInjectView(element, targetClassMap, erasedTargetTypes);, +      findAndParseListener(env, listener, targetClassMap, erasedTargetTypes);, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetTypes);, +      Set<TypeMirror> erasedTargetTypes) {, +    TypeMirror erasedTargetType = typeUtils.erasure(enclosingElement.asType());, +    erasedTargetTypes.add(erasedTargetType);, +      Set<TypeMirror> erasedTargetTypes) {, +        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetTypes);, +      Map<TypeElement, ViewInjector> targetClassMap, Set<TypeMirror> erasedTargetTypes), +    TypeMirror erasedTargetType = typeUtils.erasure(enclosingElement.asType());, +    erasedTargetTypes.add(erasedTargetType);, +  private String findParentFqcn(TypeElement typeElement, Set<TypeMirror> parents) {, +      if (containsTypeMirror(parents, type)) {, +  private boolean containsTypeMirror(Collection<TypeMirror> mirrors, TypeMirror query) {, +    // Ensure we are checking against a type-erased version for normalization purposes., +    query = typeUtils.erasure(query);, +, +    for (TypeMirror mirror : mirrors) {, +      if (typeUtils.isSameType(mirror, query)) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import java.util.Collection;, +    Set<TypeMirror> erasedTargetTypes = new LinkedHashSet<TypeMirror>();, +        parseInjectView(element, targetClassMap, erasedTargetTypes);, +      findAndParseListener(env, listener, targetClassMap, erasedTargetTypes);, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetTypes);, +      Set<TypeMirror> erasedTargetTypes) {, +    TypeMirror erasedTargetType = typeUtils.erasure(enclosingElement.asType());, +    erasedTargetTypes.add(erasedTargetType);, +      Set<TypeMirror> erasedTargetTypes) {, +        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetTypes);, +      Map<TypeElement, ViewInjector> targetClassMap, Set<TypeMirror> erasedTargetTypes), +    TypeMirror erasedTargetType = typeUtils.erasure(enclosingElement.asType());, +    erasedTargetTypes.add(erasedTargetType);, +  private String findParentFqcn(TypeElement typeElement, Set<TypeMirror> parents) {, +      if (containsTypeMirror(parents, type)) {, +  private boolean containsTypeMirror(Collection<TypeMirror> mirrors, TypeMirror query) {, +    // Ensure we are checking against a type-erased version for normalization purposes., +    query = typeUtils.erasure(query);, +, +    for (TypeMirror mirror : mirrors) {, +      if (typeUtils.isSameType(mirror, query)) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/Listener.java, +    String ownerType = ownerTypeMirror.toString();, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import java.util.Collection;, +    Set<TypeMirror> erasedTargetTypes = new LinkedHashSet<TypeMirror>();, +        parseInjectView(element, targetClassMap, erasedTargetTypes);, +      findAndParseListener(env, listener, targetClassMap, erasedTargetTypes);, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetTypes);, +      Set<TypeMirror> erasedTargetTypes) {, +    TypeMirror erasedTargetType = typeUtils.erasure(enclosingElement.asType());, +    erasedTargetTypes.add(erasedTargetType);, +      Set<TypeMirror> erasedTargetTypes) {, +        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetTypes);, +      Map<TypeElement, ViewInjector> targetClassMap, Set<TypeMirror> erasedTargetTypes), +    TypeMirror erasedTargetType = typeUtils.erasure(enclosingElement.asType());, +    erasedTargetTypes.add(erasedTargetType);, +  private String findParentFqcn(TypeElement typeElement, Set<TypeMirror> parents) {, +      if (containsTypeMirror(parents, type)) {, +  private boolean containsTypeMirror(Collection<TypeMirror> mirrors, TypeMirror query) {, +    // Ensure we are checking against a type-erased version for normalization purposes., +    query = typeUtils.erasure(query);, +, +    for (TypeMirror mirror : mirrors) {, +      if (typeUtils.isSameType(mirror, query)) {, +        return true;, +      }, +    }, +    return false;, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/Listener.java, +    String ownerType = ownerTypeMirror.toString();, +++ b/butterknife/src/test/java/butterknife/internal/OnClickTest.java, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import java.util.Collection;, +    Set<TypeMirror> erasedTargetTypes = new LinkedHashSet<TypeMirror>();, +        parseInjectView(element, targetClassMap, erasedTargetTypes);, +      findAndParseListener(env, listener, targetClassMap, erasedTargetTypes);, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetTypes);, +      Set<TypeMirror> erasedTargetTypes) {, +    TypeMirror erasedTargetType = typeUtils.erasure(enclosingElement.asType());, +    erasedTargetTypes.add(erasedTargetType);, +      Set<TypeMirror> erasedTargetTypes) {, +        parseListenerAnnotation(annotationClass, element, targetClassMap, erasedTargetTypes);]