[+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    setter = "setOnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    setter = "setOnPageChangeListener",, +++ /dev/null, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    setter = "setOnPageChangeListener",, +++ /dev/null, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    setter = "setOnPageChangeListener",, +++ /dev/null, +++ b/butterknife-compiler/build.gradle, +  // TODO: Unfortunately we can't use deps.supportv4 here as the Java plugin does not support AAR dependencies, +  testCompile 'com.google.android:support-v4:r7', +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.sun.tools.javac.code.Symbol;, +    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {, +      types.add(annotation.getCanonicalName());, +  private Set<Class<? extends Annotation>> getSupportedAnnotations() {, +    Set<Class<? extends Annotation>> annotations = new LinkedHashSet<>();, +    annotations.add(BindArray.class);, +    annotations.add(BindBitmap.class);, +    annotations.add(BindBool.class);, +    annotations.add(BindColor.class);, +    annotations.add(BindDimen.class);, +    annotations.add(BindDrawable.class);, +    annotations.add(BindInt.class);, +    annotations.add(BindString.class);, +    annotations.add(BindView.class);, +    annotations.add(BindViews.class);, +    annotations.addAll(LISTENERS);, +, +    return annotations;, +  }, +, +  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {, +    scanForRClasses(env);, +, +  private static AnnotationMirror getMirror(Element element,, +      Class<? extends Annotation> annotation) {, +    for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {, +      if (annotationMirror.getAnnotationType().toString().equals(annotation.getCanonicalName())) {, +        return annotationMirror;, +    return null;, +  private void scanForRClasses(RoundEnvironment env) {, +    RClassScanner scanner = new RClassScanner();, +, +    for (Class<? extends Annotation> annotation : getSupportedAnnotations()) {, +      for (Element element : env.getElementsAnnotatedWith(annotation)) {, +        JCTree tree = (JCTree) trees.getTree(element, getMirror(element, annotation));, +        if (tree != null) { // tree can be null if the references are compiled types and not source, +          tree.accept(scanner);, +        }, +      }, +    }, +, +    for (String rClass : scanner.getRClasses()) {, +      parseRClass(rClass);, +    }, +  }, +, +  private void parseRClass(String rClass) {, +    Element element;, +, +    try {, +      element = elementUtils.getTypeElement(rClass);, +    } catch (MirroredTypeException mte) {, +      element = typeUtils.asElement(mte.getTypeMirror());, +    }, +, +    JCTree tree = (JCTree) trees.getTree(element);, +    if (tree != null) {, +      IdScanner idScanner =, +          new IdScanner(symbols, elementUtils.getPackageOf(element).getQualifiedName().toString());, +      tree.accept(idScanner);, +    }, +  }, +, +  private static class RClassScanner extends TreeScanner {, +    private final Set<String> rClasses = new LinkedHashSet<>();, +, +    @Override public void visitSelect(JCTree.JCFieldAccess jcFieldAccess) {, +      Symbol symbol = jcFieldAccess.sym;, +      if (symbol != null, +          && symbol.getEnclosingElement() != null, +          && symbol.getEnclosingElement().getEnclosingElement() != null, +          && symbol.getEnclosingElement().getEnclosingElement().enclClass() != null) {, +        rClasses.add(symbol.getEnclosingElement().getEnclosingElement().enclClass().className());, +      }, +    }, +, +    Set<String> getRClasses() {, +      return rClasses;, +    }, +  }, +, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java]