[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +        .addModifiers(PUBLIC);, +    } else {, +      result.addTypeVariable(TypeVariableName.get("T", targetTypeName));, +    TypeName viewType = isFinal ? targetTypeName : TypeVariableName.get("T");, +          viewType));, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, viewType));, +    result.addMethod(createBindMethod(viewType));, +      result.addType(createUnbinderClass(viewType));, +        createUnbinderCreateUnbinderMethod(result, viewType);, +  private TypeSpec createUnbinderClass(TypeName viewType) {, +    TypeSpec.Builder result = TypeSpec.classBuilder(unbinderClassName.simpleName()), +            .addModifiers(PROTECTED, STATIC);, +    } else {, +      result.addTypeVariable(TypeVariableName.get("T", targetTypeName));, +          parentBinding.getUnbinderClassName(), viewType));, +      result.addField(viewType, "target", PRIVATE);, +    result.addMethod(createUnbinderConstructor(viewType));, +      result.addMethod(createUnbindMethod(result, viewType));, +  private void createUnbinderCreateUnbinderMethod(TypeSpec.Builder viewBindingClass,, +      TypeName viewType) {, +        .returns(, +            isFinal ? unbinderClassName : ParameterizedTypeName.get(unbinderClassName, viewType)), +        .addParameter(viewType, "target"), +  private MethodSpec createBindMethod(TypeName viewType) {, +        .addParameter(viewType, "target", FINAL), +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +        .addModifiers(PUBLIC);, +    } else {, +      result.addTypeVariable(TypeVariableName.get("T", targetTypeName));, +    TypeName viewType = isFinal ? targetTypeName : TypeVariableName.get("T");, +          viewType));, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, viewType));, +    result.addMethod(createBindMethod(viewType));, +      result.addType(createUnbinderClass(viewType));, +        createUnbinderCreateUnbinderMethod(result, viewType);, +  private TypeSpec createUnbinderClass(TypeName viewType) {, +    TypeSpec.Builder result = TypeSpec.classBuilder(unbinderClassName.simpleName()), +            .addModifiers(PROTECTED, STATIC);, +    } else {, +      result.addTypeVariable(TypeVariableName.get("T", targetTypeName));, +          parentBinding.getUnbinderClassName(), viewType));, +      result.addField(viewType, "target", PRIVATE);, +    result.addMethod(createUnbinderConstructor(viewType));, +      result.addMethod(createUnbindMethod(result, viewType));, +  private void createUnbinderCreateUnbinderMethod(TypeSpec.Builder viewBindingClass,, +      TypeName viewType) {, +        .returns(, +            isFinal ? unbinderClassName : ParameterizedTypeName.get(unbinderClassName, viewType)), +        .addParameter(viewType, "target"), +  private MethodSpec createBindMethod(TypeName viewType) {, +        .addParameter(viewType, "target", FINAL), +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +        + "public final class Test$$ViewBinder implements ViewBinder<Test> {\n", +        + "  public Unbinder bind(final Finder finder, final Test target, Object source) {\n", +        + "  protected static final class InnerUnbinder implements Unbinder {\n", +        + "    private Test target;\n", +        + "    protected InnerUnbinder(Test target) {\n", +        + "public final class Test$$ViewBinder extends Base$$ViewBinder<Test> {\n", +        + "  public Unbinder bind(final Finder finder, final Test target, Object source) {\n", +        + "  protected InnerUnbinder createUnbinder(Test target) {\n", +        + "  protected static final class InnerUnbinder extends Base$$ViewBinder.InnerUnbinder<Test> {\n", +        + "    protected InnerUnbinder(Test target) {\n", +        + "    protected void unbind(Test target) {\n"]