[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import javax.tools.Diagnostic.Kind;, +      // we don't SuperficialValidation.validateElement(element), +      // so that an unresolved View type can be generated by later processing rounds, +      // we don't SuperficialValidation.validateElement(element), +      // so that an unresolved View type can be generated by later processing rounds, +      if (elementType.getKind() == TypeKind.ERROR) {, +        note(element, "@%s field with unresolved type (%s) " +, +            "must elsewhere be generated as a View or interface. (%s.%s)",, +            BindView.class.getSimpleName(), elementType, enclosingElement.getQualifiedName(),, +            element.getSimpleName());, +      } else {, +    }, +      if (viewType.getKind() == TypeKind.ERROR) {, +        note(element, "@%s List or array with unresolved type (%s) " +, +            "must elsewhere be generated as a View or interface. (%s.%s)",, +            BindViews.class.getSimpleName(), viewType, enclosingElement.getQualifiedName(),, +            element.getSimpleName());, +      } else {, +    }, +    printMessage(Kind.ERROR, element, message, args);, +  }, +, +  private void note(Element element, String message, Object... args) {, +    printMessage(Kind.NOTE, element, message, args);, +  }, +, +  private void printMessage(Kind kind, Element element, String message, Object[] args) {, +, +    processingEnv.getMessager().printMessage(kind, message, element);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import javax.tools.Diagnostic.Kind;, +      // we don't SuperficialValidation.validateElement(element), +      // so that an unresolved View type can be generated by later processing rounds, +      // we don't SuperficialValidation.validateElement(element), +      // so that an unresolved View type can be generated by later processing rounds, +      if (elementType.getKind() == TypeKind.ERROR) {, +        note(element, "@%s field with unresolved type (%s) " +, +            "must elsewhere be generated as a View or interface. (%s.%s)",, +            BindView.class.getSimpleName(), elementType, enclosingElement.getQualifiedName(),, +            element.getSimpleName());, +      } else {, +    }, +      if (viewType.getKind() == TypeKind.ERROR) {, +        note(element, "@%s List or array with unresolved type (%s) " +, +            "must elsewhere be generated as a View or interface. (%s.%s)",, +            BindViews.class.getSimpleName(), viewType, enclosingElement.getQualifiedName(),, +            element.getSimpleName());, +      } else {, +    }, +    printMessage(Kind.ERROR, element, message, args);, +  }, +, +  private void note(Element element, String message, Object... args) {, +    printMessage(Kind.NOTE, element, message, args);, +  }, +, +  private void printMessage(Kind kind, Element element, String message, Object[] args) {, +, +    processingEnv.getMessager().printMessage(kind, message, element);, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +import com.google.common.collect.ImmutableList;, +import javax.tools.StandardLocation;, +  @Test public void bindingGeneratedView() {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "", +        + "package test;\n", +        + "import android.app.Activity;\n", +        + "import butterknife.BindView;\n", +        + "@PerformGeneration\n", +        + "public class Test extends Activity {\n", +        + "    @BindView(1) GeneratedView thing;\n", +        + "}", +    );, +, +    // w/o the GeneratingProcessor it can't find `class GeneratedView`, +    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION)), +        .processedWith(new ButterKnifeProcessor()), +        .failsToCompile(), +        .withErrorContaining("cannot find symbol");, +, +    // now the GeneratingProcessor should let it compile, +    assertAbout(javaSources()).that(ImmutableList.of(source, TestGeneratingProcessor.ANNOTATION)), +        .processedWith(new ButterKnifeProcessor(), new TestGeneratingProcessor("GeneratedView",, +            "package test;",, +            "import android.content.Context;",, +            "import android.view.View;",, +            "public class GeneratedView extends View {",, +            "  public GeneratedView(Context context) {",, +            "    super(context);",, +            "  }",, +            "}", +        )), +        .compilesWithoutError(), +        .withNoteContaining("@BindView field with unresolved type (GeneratedView)").and(), +        .withNoteContaining("must elsewhere be generated as a View or interface").and(), +        .and(), +        .generatesFileNamed(StandardLocation.CLASS_OUTPUT, "test", "Test_ViewBinder.class");, +  }, +, +]