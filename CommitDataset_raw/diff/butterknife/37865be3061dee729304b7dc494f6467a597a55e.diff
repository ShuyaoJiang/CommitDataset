[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import com.squareup.javapoet.AnnotationSpec;, +    if (hasUnbinder()) {, +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +    if (hasResourceBindings()) {, +      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime., +      result.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class), +          .addMember("value", "$S", "ResourceType"), +          .build());, +    }, +, +    if (hasUnbinder()) {, +    if (hasUnbinder()) {, +    if (hasResourceBindings()) {, +      if (hasResourceBindingsNeedingTheme()) {, +    if (hasUnbinder()) {, +  boolean hasUnbinder() {, +    return unbinderBinding != null;, +  }, +, +  private boolean hasResourceBindings() {, +  private boolean hasResourceBindingsNeedingTheme() {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import com.squareup.javapoet.AnnotationSpec;, +    if (hasUnbinder()) {, +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +    if (hasResourceBindings()) {, +      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime., +      result.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class), +          .addMember("value", "$S", "ResourceType"), +          .build());, +    }, +, +    if (hasUnbinder()) {, +    if (hasUnbinder()) {, +    if (hasResourceBindings()) {, +      if (hasResourceBindingsNeedingTheme()) {, +    if (hasUnbinder()) {, +  boolean hasUnbinder() {, +    return unbinderBinding != null;, +  }, +, +  private boolean hasResourceBindings() {, +  private boolean hasResourceBindingsNeedingTheme() {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (bindingClass.hasUnbinder()) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import com.squareup.javapoet.AnnotationSpec;, +    if (hasUnbinder()) {, +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +    if (hasResourceBindings()) {, +      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime., +      result.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class), +          .addMember("value", "$S", "ResourceType"), +          .build());, +    }, +, +    if (hasUnbinder()) {, +    if (hasUnbinder()) {, +    if (hasResourceBindings()) {, +      if (hasResourceBindingsNeedingTheme()) {, +    if (hasUnbinder()) {, +  boolean hasUnbinder() {, +    return unbinderBinding != null;, +  }, +, +  private boolean hasResourceBindings() {, +  private boolean hasResourceBindingsNeedingTheme() {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      if (bindingClass.hasUnbinder()) {, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +            "import java.lang.SuppressWarnings;",, +            "  @Override",, +            "  @SuppressWarnings(\"ResourceType\")",, +            "  public void bind(final Finder finder, final T target, Object source) {",, +            "import java.lang.SuppressWarnings;",, +            "  @Override",, +            "  @SuppressWarnings(\"ResourceType\")",, +            "  public void bind(final Finder finder, final T target, Object source) {",, +            "import java.lang.SuppressWarnings;",, +            "  @Override",, +            "  @SuppressWarnings(\"ResourceType\")",, +            "  public void bind(final Finder finder, final T target, Object source) {",, +            "import java.lang.SuppressWarnings;",, +            "  @Override",, +            "  @SuppressWarnings(\"ResourceType\")",, +            "  public void bind(final Finder finder, final T target, Object source) {",, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +import com.squareup.javapoet.AnnotationSpec;, +    if (hasUnbinder()) {, +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +    if (hasResourceBindings()) {, +      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime., +      result.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class), +          .addMember("value", "$S", "ResourceType"), +          .build());]