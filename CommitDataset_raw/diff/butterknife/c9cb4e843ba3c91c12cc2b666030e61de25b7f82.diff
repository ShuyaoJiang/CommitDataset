[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code list} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(List<T> list, Action<? super T>... actions) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(list.get(i), i);, +      }, +    }, +  }, +, +  /** Apply {@code actions} to {@code view}. */, +  @SafeVarargs, +  public static <T extends View> void apply(T view, Action<? super T>... actions) {, +    for (Action<? super T> action : actions) {, +      action.apply(view, 0);, +    }, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code list} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(List<T> list, Action<? super T>... actions) {, +    for (int i = 0, count = list.size(); i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(list.get(i), i);, +      }, +    }, +  }, +, +  /** Apply {@code actions} to {@code view}. */, +  @SafeVarargs, +  public static <T extends View> void apply(T view, Action<? super T>... actions) {, +    for (Action<? super T> action : actions) {, +      action.apply(view, 0);, +    }, +  }, +, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +import java.util.Arrays;, +import java.util.List;, +, +import butterknife.shadow.EditModeShadowView;, +, +  private static final ButterKnife.Action<View> ACTION_ZERO_ALPHA = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      view.setAlpha(0f);, +    }, +  };, +  @Test public void actionsAppliedToView() {, +    View view = new View(Robolectric.application);, +    assertThat(view).isEnabled();, +    assertThat(view).hasAlpha(1f);, +, +    ButterKnife.apply(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);, +, +    assertThat(view).isDisabled();, +    assertThat(view).hasAlpha(0f);, +  }, +, +  @Test public void actionsAppliedToEveryView() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1).isEnabled();, +    assertThat(view2).isEnabled();, +    assertThat(view3).isEnabled();, +    assertThat(view1).hasAlpha(1f);, +    assertThat(view2).hasAlpha(1f);, +    assertThat(view3).hasAlpha(1f);, +, +    List<View> views = Arrays.asList(view1, view2, view3);, +    ButterKnife.apply(views, ACTION_DISABLE, ACTION_ZERO_ALPHA);, +, +    assertThat(view1).isDisabled();, +    assertThat(view2).isDisabled();, +    assertThat(view3).isDisabled();, +    assertThat(view1).hasAlpha(0f);, +    assertThat(view2).hasAlpha(0f);, +    assertThat(view3).hasAlpha(0f);, +  }, +]