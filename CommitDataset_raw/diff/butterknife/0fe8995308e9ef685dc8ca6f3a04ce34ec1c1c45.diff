[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<FieldCollectionViewBinding> collectionBindings;, +      Collection<FieldCollectionViewBinding> collectionBindings,, +    this.collectionBindings = ImmutableList.copyOf(collectionBindings);, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        constructor.addStatement("$L", binding.render());, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        result.addStatement("target.$L = null", binding.name);, +  static boolean requiresCast(TypeName type) {, +    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();, +    void addFieldCollection(FieldCollectionViewBinding binding) {, +      collectionBindings.add(binding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<FieldCollectionViewBinding> collectionBindings;, +      Collection<FieldCollectionViewBinding> collectionBindings,, +    this.collectionBindings = ImmutableList.copyOf(collectionBindings);, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        constructor.addStatement("$L", binding.render());, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        result.addStatement("target.$L = null", binding.name);, +  static boolean requiresCast(TypeName type) {, +    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();, +    void addFieldCollection(FieldCollectionViewBinding binding) {, +      collectionBindings.add(binding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    builder.addField(getId(id), new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +            : FieldResourceBinding.Type.COLOR));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP));, +    builder.addResource(new FieldDrawableBinding(getId(id), name, getId(tint)));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING));, +    builder.addResource(new FieldResourceBinding(getId(id), name, type));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private final List<FieldCollectionViewBinding> collectionBindings;, +      Collection<FieldCollectionViewBinding> collectionBindings,, +    this.collectionBindings = ImmutableList.copyOf(collectionBindings);, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        constructor.addStatement("$L", binding.render());, +      for (FieldCollectionViewBinding binding : collectionBindings) {, +        result.addStatement("target.$L = null", binding.name);, +  static boolean requiresCast(TypeName type) {, +    private final List<FieldCollectionViewBinding> collectionBindings = new ArrayList<>();, +    void addFieldCollection(FieldCollectionViewBinding binding) {, +      collectionBindings.add(binding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    builder.addField(getId(id), new FieldViewBinding(name, type, required));, +    builder.addFieldCollection(new FieldCollectionViewBinding(name, type, kind, idVars, required));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BOOL));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +            : FieldResourceBinding.Type.COLOR));, +    builder.addResource(new FieldResourceBinding(getId(id), name,, +        isInt ? FieldResourceBinding.Type.DIMEN_AS_INT : FieldResourceBinding.Type.DIMEN_AS_FLOAT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.BITMAP));, +    builder.addResource(new FieldDrawableBinding(getId(id), name, getId(tint)));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.FLOAT));, +    builder.addResource(new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.INT));, +    builder.addResource(, +        new FieldResourceBinding(getId(id), name, FieldResourceBinding.Type.STRING));, +    builder.addResource(new FieldResourceBinding(getId(id), name, type));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/FieldCollectionViewBinding.java, +import com.squareup.javapoet.CodeBlock;, +import java.util.List;, +import static butterknife.compiler.BindingSet.UTILS;, +import static butterknife.compiler.BindingSet.requiresCast;, +, +final class FieldCollectionViewBinding {, +    ARRAY("arrayOf"),, +    LIST("listOf");, +, +    final String factoryName;, +, +    Kind(String factoryName) {, +      this.factoryName = factoryName;, +    }, +  final String name;, +  private final List<Id> ids;, +  FieldCollectionViewBinding(String name, TypeName type, Kind kind, List<Id> ids,, +      boolean required) {, +    this.ids = ids;, +  CodeBlock render() {, +    CodeBlock.Builder builder = CodeBlock.builder(), +        .add("target.$L = $T.$L(", name, UTILS, kind.factoryName);, +    for (int i = 0; i < ids.size(); i++) {, +      if (i > 0) {, +        builder.add(", ");, +      builder.add("\n");, +      boolean requiresCast = requiresCast(type);, +      if (!requiresCast && !required) {, +        builder.add("source.findViewById($L)", ids.get(i).code);, +      } else {, +        builder.add("$T.find", UTILS);]