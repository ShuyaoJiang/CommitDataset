[+++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import groovy.util.XmlSlurper, +  // Parse the variant's main manifest file in order to get the package id which is used to create, +  // R.java in the right place., +  private fun getPackageName(variant : BaseVariant) : String {, +    val slurper = XmlSlurper(false, false), +    val list = variant.sourceSets.map { it.manifestFile }, +, +    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones., +    // So the first file in the sourceSets list should be main., +    val result = slurper.parse(list[0]), +    return result.getProperty("@package").toString(), +  }, +, +      val rPackage = getPackageName(variant), +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import groovy.util.XmlSlurper, +  // Parse the variant's main manifest file in order to get the package id which is used to create, +  // R.java in the right place., +  private fun getPackageName(variant : BaseVariant) : String {, +    val slurper = XmlSlurper(false, false), +    val list = variant.sourceSets.map { it.manifestFile }, +, +    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones., +    // So the first file in the sourceSets list should be main., +    val result = slurper.parse(list[0]), +    return result.getProperty("@package").toString(), +  }, +, +      val rPackage = getPackageName(variant), +++ b/butterknife-gradle-plugin/src/test/AndroidManifest.xml, +<manifest package="com.example.butterknife"/>, +++ b/butterknife-gradle-plugin/build.gradle, +apply plugin: 'java-gradle-plugin', +configurations {, +  fixtureClasspath, +}, +// Append any extra dependencies to the test fixtures via a custom configuration classpath. This, +// allows us to apply additional plugins in a fixture while still leveraging dependency resolution, +// and de-duplication semantics., +def metadata = tasks.getByName('pluginUnderTestMetadata'), +metadata.setPluginClasspath(metadata.getPluginClasspath() + configurations.fixtureClasspath), +, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import groovy.util.XmlSlurper, +  // Parse the variant's main manifest file in order to get the package id which is used to create, +  // R.java in the right place., +  private fun getPackageName(variant : BaseVariant) : String {, +    val slurper = XmlSlurper(false, false), +    val list = variant.sourceSets.map { it.manifestFile }, +, +    // According to the documentation, the earlier files in the list are meant to be overridden by the later ones., +    // So the first file in the sourceSets list should be main., +    val result = slurper.parse(list[0]), +    return result.getProperty("@package").toString(), +  }, +, +      val rPackage = getPackageName(variant), +++ b/butterknife-gradle-plugin/src/test/AndroidManifest.xml, +<manifest package="com.example.butterknife"/>, +++ b/butterknife-gradle-plugin/src/test/build.gradle, +plugins {, +    id 'com.android.application', +    id 'com.jakewharton.butterknife', +}, +, +repositories {]