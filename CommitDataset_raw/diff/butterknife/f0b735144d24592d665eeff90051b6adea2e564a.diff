[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("androidx.annotation", "UiThread");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("androidx.annotation", "CallSuper");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +      ClassName.get("androidx.core.content", "ContextCompat");, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, +    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration), +  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {, +      result.addMethod(createBindingConstructorForView(useAndroidX));, +      result.addMethod(createBindingConstructorForActivity(useAndroidX));, +      result.addMethod(createBindingConstructorForDialog(useAndroidX));, +      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));, +      result.addMethod(createBindingUnbindMethod(result, useAndroidX));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {, +      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("androidx.annotation", "UiThread");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("androidx.annotation", "CallSuper");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +      ClassName.get("androidx.core.content", "ContextCompat");, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, +    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration), +  private TypeSpec createType(int sdk, boolean debuggable, boolean useAndroidX) {, +      result.addMethod(createBindingConstructorForView(useAndroidX));, +      result.addMethod(createBindingConstructorForActivity(useAndroidX));, +      result.addMethod(createBindingConstructorForDialog(useAndroidX));, +      result.addMethod(createBindingViewDelegateConstructor(useAndroidX));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useAndroidX));, +      result.addMethod(createBindingUnbindMethod(result, useAndroidX));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useAndroidX) {, +        .addAnnotation(useAndroidX ? UI_THREAD_ANDROIDX : UI_THREAD), +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass, boolean useAndroidX) {, +      result.addAnnotation(useAndroidX ? CALL_SUPER_ANDROIDX : CALL_SUPER);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import javax.lang.model.util.Elements;, +  private boolean useAndroidX = false;, +    useAndroidX = hasAndroidX(env.getElementUtils());, +      JavaFile javaFile = binding.brewJava(sdk, debuggable, useAndroidX);, +, +    FieldResourceBinding.Type colorStateList = useAndroidX, +        ? FieldResourceBinding.Type.COLOR_STATE_LIST_ANDROIDX, +        : FieldResourceBinding.Type.COLOR_STATE_LIST;, +    FieldResourceBinding.Type color = useAndroidX, +        ? FieldResourceBinding.Type.COLOR_ANDROIDX, +        : FieldResourceBinding.Type.COLOR;, +    builder.addResource(new FieldResourceBinding(, +        resourceId,, +        name,, +        isColorStateList ? colorStateList : color));, +    builder.addResource(new FieldDrawableBinding(resourceIds.get(id), name, resourceIds.get(tint),, +        useAndroidX));, +    builder.addResource(new FieldTypefaceBinding(resourceId, name, style, useAndroidX));, +  /**, +   * Perform two lookups to see if the androidx annotation and core libraries are on the application, +   * classpath. If both aren't present butterknife will leverage support annotations and, +   * compat libraries instead., +   */, +  private static boolean hasAndroidX(Elements elementUtils) {, +    boolean annotationsPresent, +        = elementUtils.getTypeElement("androidx.annotation.NonNull") != null;, +    boolean corePresent, +        = elementUtils.getTypeElement("androidx.core.content.ContextCompat") != null;, +    return annotationsPresent && corePresent;, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_ANDROIDX =, +      ClassName.get("androidx.annotation", "UiThread");, +  private static final ClassName CALL_SUPER_ANDROIDX =, +      ClassName.get("androidx.annotation", "CallSuper");, +  static final ClassName CONTEXT_COMPAT_ANDROIDX =, +      ClassName.get("androidx.core.content", "ContextCompat");, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useAndroidX) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useAndroidX);, +    return JavaFile.builder(bindingClassName.packageName(), bindingConfiguration)]