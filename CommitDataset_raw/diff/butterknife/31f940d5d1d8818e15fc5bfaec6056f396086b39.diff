[+++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-annotations/src/main/java/butterknife/OnCheckedChanged.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnEditorAction.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnFocusChange.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnItemLongClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.view.KeyEvent;, +import android.widget.CompoundButton;, +import android.widget.TextView;, +        unbinder = parseOnCheckedChanged(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +, +        unbinder = parseOnEditorAction(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +, +        unbinder = parseOnFocusChange(target, method, source);, +, +        unbinder = parseOnItemLongClick(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +, +        unbinder = parseOnLongClick(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +  private static @Nullable Unbinder parseOnCheckedChanged(final Object target, final Method method,, +      View source) {, +    OnCheckedChanged onCheckedChanged = method.getAnnotation(OnCheckedChanged.class);, +    if (onCheckedChanged == null) {, +      return null;, +    }, +    validateMember(method);, +    validateReturnType(method, void.class);, +    final ArgumentTransformer argumentTransformer =, +        createArgumentTransformer(method, ON_CHECKED_CHANGED_TYPES);, +, +    List<CompoundButton> views =, +        findViews(source, onCheckedChanged.value(), isRequired(method), method.getName(),, +            CompoundButton.class);, +, +    ViewCollections.set(views, ON_CHECKED_CHANGE, new CompoundButton.OnCheckedChangeListener() {, +      @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {, +        tryInvoke(method, target, argumentTransformer.transform(buttonView, isChecked));, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_CHECKED_CHANGE);, +  }, +, +  private static @Nullable Unbinder parseOnEditorAction(final Object target, final Method method,]