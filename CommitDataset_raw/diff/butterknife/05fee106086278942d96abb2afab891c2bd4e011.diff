[+++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Support injection on any object using an Activity as the view root., + * Support injection on views for their children., +, +, +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Support injection on any object using an Activity as the view root., + * Support injection on views for their children., +, +, +++ b/README.md, +Other provided injection APIs:, +, + * Inject arbitrary objects using an activity as the view root. If you use a, +   pattern like MVC you can inject the controller using its activity with, +   `Views.inject(this, activity)`., + * Inject a view's children into fields using `Views.inject(this)`. If you use, +   `<merge>` tags in a layout and inflate in a custom view constructor you can, +   call this immediately after. Alternatively, custom view types inflated from, +   XML can use it in the `onLayoutInflated()` callback., +, +Also included are two `findById` methods which simplify code that still has to, +find views on a `View` or `Activity`. It uses generics to infer the return type, +and automatically performs the cast., +++ b/CHANGELOG.md, +Version 1.2.0 *(In Development)*, +--------------------------------, +, + * Support injection on any object using an Activity as the view root., + * Support injection on views for their children., +, +, +++ b/README.md, +Other provided injection APIs:, +, + * Inject arbitrary objects using an activity as the view root. If you use a, +   pattern like MVC you can inject the controller using its activity with, +   `Views.inject(this, activity)`., + * Inject a view's children into fields using `Views.inject(this)`. If you use, +   `<merge>` tags in a layout and inflate in a custom view constructor you can, +   call this immediately after. Alternatively, custom view types inflated from, +   XML can use it in the `onLayoutInflated()` callback., +, +Also included are two `findById` methods which simplify code that still has to, +find views on a `View` or `Activity`. It uses generics to infer the return type, +and automatically performs the cast., +++ b/butterknife/src/main/java/butterknife/Views.java, +import javax.annotation.processing.Filer;, +import javax.lang.model.util.Elements;, +import javax.lang.model.util.Types;, +/** View injection utilities. */, +  public enum Finder {, +    VIEW() {, +      @SuppressWarnings("unchecked") @Override, +      public <T extends View> T findById(Object source, int id) {, +        return (T) ((View) source).findViewById(id);, +      }, +    },, +    ACTIVITY() {, +      @SuppressWarnings("unchecked") @Override, +      public <T extends View> T findById(Object source, int id) {, +        return (T) ((Activity) source).findViewById(id);, +      }, +    };, +, +    public abstract <T extends View> T findById(Object source, int id);, +  }, +, +   * Inject fields annotated with {@link InjectView} in the specified {@link Activity}. The current, +   * content view is used as the view root., +    inject(target, target, Finder.ACTIVITY);, +   * Inject fields annotated with {@link InjectView} in the specified {@link View}. The view and, +   * its children are used as the view root., +   *, +   * @param target Target view for field injection., +   * @throws UnableToInjectException if injection could not be performed., +   */, +  public static void inject(View target) {, +    inject(target, target, Finder.VIEW);, +  }, +, +  /**, +   * Inject fields annotated with {@link InjectView} in the specified {@code source} using the, +   * {@code target} {@link View} as the view root., +   * @param source View root on which IDs will be looked up., +    inject(target, source, Finder.VIEW);, +  /**, +   * Inject fields annotated with {@link InjectView} in the specified {@code source} using the, +   * {@code target} {@link Activity} as the view root., +   *, +   * @param target Target class for field injection., +   * @param source Activity on which IDs will be looked up., +   * @throws UnableToInjectException if injection could not be performed., +   */]