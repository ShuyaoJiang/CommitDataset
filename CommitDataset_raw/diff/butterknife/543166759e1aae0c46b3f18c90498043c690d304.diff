[+++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-annotations/src/main/java/butterknife/OnItemClick.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/FinalRClassBuilder.java, +    String fieldValue = variable.getInitializer().map(Node::toString).orElse(null);, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.widget.AdapterView;, +, +        unbinder = parseOnItemClick(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +    List<View> views =, +        findViews(source, onClick.value(), isRequired(method), method.getName(), View.class);, +    List<View> views =, +        findViews(source, onLongClick.value(), isRequired(method), method.getName(), View.class);, +  private static @Nullable Unbinder parseOnItemClick(final Object target, final Method method,, +      View source) {, +    OnItemClick onItemClick = method.getAnnotation(OnItemClick.class);, +    if (onItemClick == null) {, +      return null;, +    }, +    validateMember(method);, +    final Class<?>[] parameterTypes = method.getParameterTypes();, +    // TODO validate parameter count (and types?), +, +    List<AdapterView<?>> views =, +        findViews(source, onItemClick.value(), isRequired(method), method.getName(),, +            AdapterView.class);, +, +    ViewCollections.set(views, ON_ITEM_CLICK, new AdapterView.OnItemClickListener() {, +      @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) {, +        if (parameterTypes.length == 0) {, +          tryInvoke(method, target);, +        } else if (parameterTypes.length == 1 && parameterTypes[0] == int.class) {, +          // TODO this is a special case for the sample. re-implement matching logic from processor., +          tryInvoke(method, target, position);, +        } else {, +          throw new IllegalStateException(); // TODO, +        }, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_ITEM_CLICK);, +  }, +, +  @SuppressWarnings("unchecked"), +  private static <T extends View> List<T> findViews(View source, int[] ids, boolean isRequired,, +      String name, Class<? extends View> cls) {, +      return singletonList((T) cls.cast(source));, +    List<T> views = new ArrayList<>(ids.length);, +        views.add((T) Utils.findRequiredViewAsType(source, id, who, cls));, +        T view = (T) Utils.findOptionalViewAsType(source, id, who, cls);, +  private static final Setter<AdapterView<?>, AdapterView.OnItemClickListener> ON_ITEM_CLICK =, +      new Setter<AdapterView<?>, AdapterView.OnItemClickListener>() {, +        @Override, +        public void set(@NonNull AdapterView<?> view, AdapterView.OnItemClickListener value,, +            int index) {, +          view.setOnItemClickListener(value);, +        }, +      };]