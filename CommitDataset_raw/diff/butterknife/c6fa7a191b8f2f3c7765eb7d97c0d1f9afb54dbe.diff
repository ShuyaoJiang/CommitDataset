[+++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.Views;, +, +    Views.reset(activity);, +    assertThat(activity.title).isNull();, +    assertThat(activity.subtitle).isNull();, +    assertThat(activity.hello).isNull();, +    assertThat(activity.listOfThings).isNull();, +    assertThat(activity.footer).isNull();, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.Views;, +, +    Views.reset(activity);, +    assertThat(activity.title).isNull();, +    assertThat(activity.subtitle).isNull();, +    assertThat(activity.hello).isNull();, +    assertThat(activity.listOfThings).isNull();, +    assertThat(activity.footer).isNull();, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +import butterknife.Views;, +, +    Views.reset(holder);, +    assertThat(holder.word).isNull();, +    assertThat(holder.length).isNull();, +    assertThat(holder.position).isNull();, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.Views;, +, +    Views.reset(activity);, +    assertThat(activity.title).isNull();, +    assertThat(activity.subtitle).isNull();, +    assertThat(activity.hello).isNull();, +    assertThat(activity.listOfThings).isNull();, +    assertThat(activity.footer).isNull();, +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleAdapterTest.java, +import butterknife.Views;, +, +    Views.reset(holder);, +    assertThat(holder.word).isNull();, +    assertThat(holder.length).isNull();, +    assertThat(holder.position).isNull();, +++ b/butterknife/src/main/java/butterknife/Views.java, +  static final Map<Class<?>, Method> RESETTERS = new LinkedHashMap<Class<?>, Method>();, +  public static void reset(Object target) {, +    Class<?> targetClass = target.getClass();, +    try {, +      Method reset = findResettersForClass(targetClass);, +      if (reset != null) {, +        reset.invoke(null, target);, +      }, +    } catch (RuntimeException e) {, +      throw e;, +    } catch (Exception e) {, +      throw new UnableToResetException("Unable to reset views for " + target, e);, +    }, +  }, +, +  static Method findResettersForClass(Class<?> cls) throws NoSuchMethodException {, +    Method inject = RESETTERS.get(cls);, +    if (inject != null) {, +      return inject;, +    }, +    String clsName = cls.getName();, +    if (clsName.startsWith("android.") || clsName.startsWith("java.")) {, +      return NO_OP;, +    }, +    try {, +      Class<?> injector = Class.forName(clsName + InjectViewProcessor.SUFFIX);, +      inject = injector.getMethod("reset", cls);, +    } catch (ClassNotFoundException e) {, +      inject = findResettersForClass(cls.getSuperclass());, +    }, +    RESETTERS.put(cls, inject);, +    return inject;, +  }, +, +  public static class UnableToResetException extends RuntimeException {, +    UnableToResetException(String message, Throwable cause) {, +      super(message, cause);, +    }, +  }, +, +        StringBuilder resetBuilder = new StringBuilder();, +          resetBuilder.append(String.format(PARENT_RESET, parentClassFqcn, SUFFIX)).append('\n');, +            resetBuilder.append(String.format(RESET, injectionPoint.variableName)).append('\n');, +        String resetters = resetBuilder.toString();, +          writer.write(String.format(INJECTOR, classPackage, className, targetType, injections,, +              targetType, resetters));, +    private static final String RESET = "    target.%s = null;";, +    private static final String PARENT_RESET = "    %s%s.reset(target);";, +        + "  }\n\n", +        + "  public static void reset(%s target) {\n", +        + "%s", +++ b/butterknife-sample/src/test/java/com/example/butterknife/SimpleActivityTest.java, +import butterknife.Views;, +, +    Views.reset(activity);, +    assertThat(activity.title).isNull();, +    assertThat(activity.subtitle).isNull();, +    assertThat(activity.hello).isNull();]