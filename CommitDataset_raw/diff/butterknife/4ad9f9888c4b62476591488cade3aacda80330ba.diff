[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.HashSet;, +import javax.lang.model.element.Name;, +  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();, +    Name qualifiedName = enclosingElement.getQualifiedName();, +    Name simpleName = element.getSimpleName();, +            BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);, +            BindView.class.getSimpleName(), qualifiedName, simpleName);, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));, +    String name = simpleName.toString();, +    builder.addField(getId(qualifiedId), new FieldViewBinding(name, type, required));, +  private QualifiedId elementToQualifiedId(Element element, int id) {, +    return new QualifiedId(elementUtils.getPackageOf(element).getQualifiedName().toString(), id);, +  }, +, +      QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      idVars.add(getId(qualifiedId));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BOOL));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name,, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.BITMAP));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    QualifiedId qualifiedTint = elementToQualifiedId(element, tint);, +    builder.addResource(new FieldDrawableBinding(getId(qualifiedId), name, getId(qualifiedTint)));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.FLOAT));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.INT));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +        new FieldResourceBinding(getId(qualifiedId), name, FieldResourceBinding.Type.STRING));, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +    builder.addResource(new FieldResourceBinding(getId(qualifiedId), name, type));, +      QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      if (!builder.addMethod(getId(qualifiedId), listener, method, binding)) {, +  private Id getId(QualifiedId qualifiedId) {, +    if (symbols.get(qualifiedId) == null) {, +      symbols.put(qualifiedId, new Id(qualifiedId.id));, +    return symbols.get(qualifiedId);, +          String respectivePackageName =, +              elementUtils.getPackageOf(element).getQualifiedName().toString();, +          scanner.setCurrentPackageName(respectivePackageName);, +    for (Map.Entry<String, Set<String>> packageNameToRClassSet : scanner.getRClasses().entrySet()) {, +      String respectivePackageName = packageNameToRClassSet.getKey();, +      for (String rClass : packageNameToRClassSet.getValue()) {, +        parseRClass(respectivePackageName, rClass);, +      }, +  private void parseRClass(String respectivePackageName, String rClass) {, +      IdScanner idScanner = new IdScanner(symbols, elementUtils.getPackageOf(element), +          .getQualifiedName().toString(), respectivePackageName);, +      parseCompiledR(respectivePackageName, (TypeElement) element);, +  private void parseCompiledR(String respectivePackageName, TypeElement rClass) {, +              QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);, +              symbols.put(qualifiedId, new Id(id, rClassName, resourceName));, +    // Maps the currently evaulated rPackageName to R Classes, +    private final Map<String, Set<String>> rClasses = new LinkedHashMap<>();, +    private String currentPackageName;, +        Set<String> rClassSet = rClasses.get(currentPackageName);, +        if (rClassSet == null) {, +          rClassSet = new HashSet<>();, +          rClasses.put(currentPackageName, rClassSet);, +        }, +        rClassSet.add(symbol.getEnclosingElement().getEnclosingElement().enclClass().className());, +    Map<String, Set<String>> getRClasses() {, +, +    void setCurrentPackageName(String respectivePackageName) {, +      this.currentPackageName = respectivePackageName;, +    }, +    private final Map<QualifiedId, Id> ids;, +    private final String rPackageName;, +    private final String respectivePackageName;, +    IdScanner(Map<QualifiedId, Id> ids, String rPackageName, String respectivePackageName) {, +      this.rPackageName = rPackageName;, +      this.respectivePackageName = respectivePackageName;, +            ClassName rClassName = ClassName.get(rPackageName, "R", className);, +            VarScanner scanner = new VarScanner(ids, rClassName, respectivePackageName);, +    private final Map<QualifiedId, Id> ids;, +    private final String respectivePackageName;, +    private VarScanner(Map<QualifiedId, Id> ids, ClassName className,, +        String respectivePackageName) {, +      this.respectivePackageName = respectivePackageName;, +        QualifiedId qualifiedId = new QualifiedId(respectivePackageName, id);, +        ids.put(qualifiedId, new Id(id, className, resourceName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import java.util.HashSet;, +import javax.lang.model.element.Name;, +  private final Map<QualifiedId, Id> symbols = new LinkedHashMap<>();, +    Name qualifiedName = enclosingElement.getQualifiedName();, +    Name simpleName = element.getSimpleName();, +            BindView.class.getSimpleName(), elementType, qualifiedName, simpleName);, +            BindView.class.getSimpleName(), qualifiedName, simpleName);, +    QualifiedId qualifiedId = elementToQualifiedId(element, id);, +      String existingBindingName = builder.findExistingBindingName(getId(qualifiedId));]