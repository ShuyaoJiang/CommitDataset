[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName bindingClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName bindingClassName,, +    this.bindingClassName = bindingClassName;, +    if (isGeneratingBinding()) {, +      files.add(JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +  private TypeSpec createBindingClass() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName()), +    if (hasInheritedBinding()) {, +      result.superclass(ParameterizedTypeName.get(getInheritedBinding(), targetType));, +    result.addMethod(createBindingConstructor(targetType));, +      result.addMethod(createBindingUnbindMethod(result, targetType));, +  private MethodSpec createBindingConstructor(TypeName targetType) {, +    if (hasInheritedBinding()) {, +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,, +    boolean rootBindingWithFields = !hasInheritedBinding() && hasFieldBindings();, +    if (hasFieldBindings() || rootBindingWithFields) {, +    if (!hasInheritedBinding()) {, +      String target = rootBindingWithFields ? "target" : "this.target";, +        addFieldAndUnbindStatement(bindingClass, result, bindings);, +    if (!hasInheritedBinding()) {, +    // Only add fields to the binding if there are method bindings., +    if (isFinal && !isGeneratingBinding()) {, +    if (isGeneratingBinding()) {, +        invoke.add("return new $T", bindingClassName);, +        invoke.add("return new $T<>", bindingClassName);, +    if (isGeneratingBinding() || !isFinal) {, +    if (!isGeneratingBinding()) {, +    if (!hasInheritedBinding() && hasParentBinding()) {, +    // Add the view reference to the binding., +      if (isGeneratingBinding()) {, +      boolean requiresRemoval = isGeneratingBinding() && listener.remover().length() != 0;, +  /** True when this type contains a binding type. */, +  private boolean isGeneratingBinding() {, +    return hasViewBindings() || hasInheritedBinding();, +  /** True when any of this type's parents contain a binder class. */, +  private boolean hasInheritedBinding() {, +    return hasParentBinding() && parentBinding.isGeneratingBinding();, +  /** Return the nearest binding class from this type's parents. */, +  private ClassName getInheritedBinding() {, +    return parentBinding.bindingClassName;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName bindingClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName bindingClassName,, +    this.bindingClassName = bindingClassName;, +    if (isGeneratingBinding()) {, +      files.add(JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +  private TypeSpec createBindingClass() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(bindingClassName.simpleName()), +    if (hasInheritedBinding()) {, +      result.superclass(ParameterizedTypeName.get(getInheritedBinding(), targetType));, +    result.addMethod(createBindingConstructor(targetType));, +      result.addMethod(createBindingUnbindMethod(result, targetType));, +  private MethodSpec createBindingConstructor(TypeName targetType) {, +    if (hasInheritedBinding()) {, +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,, +    boolean rootBindingWithFields = !hasInheritedBinding() && hasFieldBindings();, +    if (hasFieldBindings() || rootBindingWithFields) {, +    if (!hasInheritedBinding()) {, +      String target = rootBindingWithFields ? "target" : "this.target";, +        addFieldAndUnbindStatement(bindingClass, result, bindings);, +    if (!hasInheritedBinding()) {, +    // Only add fields to the binding if there are method bindings., +    if (isFinal && !isGeneratingBinding()) {, +    if (isGeneratingBinding()) {, +        invoke.add("return new $T", bindingClassName);, +        invoke.add("return new $T<>", bindingClassName);, +    if (isGeneratingBinding() || !isFinal) {, +    if (!isGeneratingBinding()) {, +    if (!hasInheritedBinding() && hasParentBinding()) {, +    // Add the view reference to the binding., +      if (isGeneratingBinding()) {, +      boolean requiresRemoval = isGeneratingBinding() && listener.remover().length() != 0;, +  /** True when this type contains a binding type. */, +  private boolean isGeneratingBinding() {, +    return hasViewBindings() || hasInheritedBinding();, +  /** True when any of this type's parents contain a binder class. */, +  private boolean hasInheritedBinding() {, +    return hasParentBinding() && parentBinding.isGeneratingBinding();, +  /** Return the nearest binding class from this type's parents. */, +  private ClassName getInheritedBinding() {, +    return parentBinding.bindingClassName;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      ClassName bindingClassName = ClassName.get(packageName, className + "_ViewBinding");, +      bindingClass = new BindingClass(targetType, binderClassName, bindingClassName, isFinal);]