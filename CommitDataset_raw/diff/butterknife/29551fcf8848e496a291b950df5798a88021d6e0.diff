[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +    if (!bindNeedsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetType));, +    }, +, +  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {, +    return MethodSpec.constructorBuilder(), +        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    ", +                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",, +            bindingClassName, targetType, CONTEXT), +        .addAnnotation(Deprecated.class), +        .addModifiers(PUBLIC), +        .addParameter(targetType, "target"), +        .addParameter(VIEW, "source"), +        .addStatement(("this(target, source.getContext())")), +        .build();, +  }, +, +    return bindingClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +    if (!bindNeedsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetType));, +    }, +, +  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {, +    return MethodSpec.constructorBuilder(), +        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    ", +                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",, +            bindingClassName, targetType, CONTEXT), +        .addAnnotation(Deprecated.class), +        .addModifiers(PUBLIC), +        .addParameter(targetType, "target"), +        .addParameter(VIEW, "source"), +        .addStatement(("this(target, source.getContext())")), +        .build();, +  }, +, +    return bindingClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      JavaFile javaFile = bindingClass.brewJava();, +        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());, +      bindingClass = new BindingClass(targetType, bindingClassName, isFinal);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  BindingClass(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal) {, +  JavaFile brewJava() {, +    return JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +    if (!bindNeedsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetType));, +    }, +, +  private MethodSpec createBindingViewDelegateConstructor(TypeName targetType) {, +    return MethodSpec.constructorBuilder(), +        .addJavadoc("@deprecated Use {@link #$T($T, $T)} for direct creation.\n    ", +                + "Only present for runtime invocation through {@code ButterKnife.bind()}.\n",, +            bindingClassName, targetType, CONTEXT), +        .addAnnotation(Deprecated.class), +        .addModifiers(PUBLIC), +        .addParameter(targetType, "target"), +        .addParameter(VIEW, "source"), +        .addStatement(("this(target, source.getContext())")), +        .build();, +  }, +, +    return bindingClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      JavaFile javaFile = bindingClass.brewJava();, +        error(typeElement, "Unable to write binding for type %s: %s", typeElement, e.getMessage());, +      bindingClass = new BindingClass(targetType, bindingClassName, isFinal);, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +        + "import android.view.View;\n", +        + "import java.lang.Deprecated;\n", +        + "  /**\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n", +        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n", +        + "   */\n", +        + "  @Deprecated\n", +        + "  public Test_ViewBinding(T target, View source) {\n", +        + "    this(target, source.getContext());\n", +        + "  }\n", +        .generatesSources(bindingSource);, +        + "import android.view.View;\n", +        + "import java.lang.Deprecated;\n", +        + "  /**\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(T, Context)} for direct creation.\n", +        + "   *     Only present for runtime invocation through {@code ButterKnife.bind()}.\n", +        + "   */\n", +        + "  @Deprecated\n", +        + "  public Test_ViewBinding(T target, View source) {\n"]