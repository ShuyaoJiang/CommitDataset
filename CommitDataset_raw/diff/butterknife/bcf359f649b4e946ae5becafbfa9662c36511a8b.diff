[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** DO NOT USE: Exposed for generated code. */, +  public interface Injector<T> {, +    void inject(Finder finder, T target, Object source);, +    void reset(T target);, +  }, +, +  static final Map<Class<?>, Injector<Object>> INJECTORS =, +      new LinkedHashMap<Class<?>, Injector<Object>>();, +  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {, +    @Override public void inject(Finder finder, Object target, Object source) { }, +    @Override public void reset(Object target) { }, +  };, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.reset(target);, +      throw new RuntimeException("Unable to reset views for " + target, e);, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.inject(finder, target, source);, +      throw new RuntimeException("Unable to inject views for " + target, e);, +  private static Injector<Object> findInjectorForClass(Class<?> cls), +      throws IllegalAccessException, InstantiationException {, +    Injector<Object> injector = INJECTORS.get(cls);, +    if (injector != null) {, +      return injector;, +      return NOP_INJECTOR;, +      Class<?> injectorClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      //noinspection unchecked, +      injector = (Injector<Object>) injectorClass.newInstance();, +      injector = findInjectorForClass(cls.getSuperclass());, +    INJECTORS.put(cls, injector);, +    return injector;, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** DO NOT USE: Exposed for generated code. */, +  public interface Injector<T> {, +    void inject(Finder finder, T target, Object source);, +    void reset(T target);, +  }, +, +  static final Map<Class<?>, Injector<Object>> INJECTORS =, +      new LinkedHashMap<Class<?>, Injector<Object>>();, +  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {, +    @Override public void inject(Finder finder, Object target, Object source) { }, +    @Override public void reset(Object target) { }, +  };, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.reset(target);, +      throw new RuntimeException("Unable to reset views for " + target, e);, +      Injector<Object> injector = findInjectorForClass(targetClass);, +      if (injector != null) {, +        injector.inject(finder, target, source);, +      throw new RuntimeException("Unable to inject views for " + target, e);, +  private static Injector<Object> findInjectorForClass(Class<?> cls), +      throws IllegalAccessException, InstantiationException {, +    Injector<Object> injector = INJECTORS.get(cls);, +    if (injector != null) {, +      return injector;, +      return NOP_INJECTOR;, +      Class<?> injectorClass = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      //noinspection unchecked, +      injector = (Injector<Object>) injectorClass.newInstance();, +      injector = findInjectorForClass(cls.getSuperclass());, +    INJECTORS.put(cls, injector);, +    return injector;, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java, +, +    builder.append("import butterknife.ButterKnife.Finder;\n");, +    if (parentInjector == null) {, +      builder.append("import butterknife.ButterKnife.Injector;\n");, +    }, +    builder.append('\n');, +, +    builder.append("public class ").append(className);, +    builder.append("<T extends ").append(targetClass).append(">");, +, +    if (parentInjector != null) {, +      builder.append(" extends ").append(parentInjector).append("<T>");, +    } else {, +      builder.append(" implements Injector<T>");, +    }, +    builder.append(" {\n");, +, +, +    builder.append("  @Override "), +        .append("public void inject(Finder finder, final T target, Object source) {\n");, +      builder.append("    super.inject(finder, target, source);\n\n");, +    builder.append("  @Override public void reset(T target) {\n");, +      builder.append("    super.reset(target);\n\n");, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** DO NOT USE: Exposed for generated code. */, +  public interface Injector<T> {, +    void inject(Finder finder, T target, Object source);, +    void reset(T target);, +  }, +, +  static final Map<Class<?>, Injector<Object>> INJECTORS =, +      new LinkedHashMap<Class<?>, Injector<Object>>();, +  static final Injector<Object> NOP_INJECTOR = new Injector<Object>() {]