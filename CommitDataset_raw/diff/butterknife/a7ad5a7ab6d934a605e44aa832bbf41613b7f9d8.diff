[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      result.superclass(getParentBinding());, +    if (needsTargetField()) {, +      result.addField(targetTypeName, "target", PRIVATE);, +, +    if (!needsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetTypeName));, +    }, +    result.addMethod(createBindingConstructor(targetTypeName));, +      result.addMethod(createBindingUnbindMethod(result, targetTypeName));, +    if (needsView()) {, +    if (hasParentBinding()) {, +      if (parentBinding.needsView()) {, +      } else if (needsView()) {, +    }, +    if (needsTargetField()) {, +      constructor.addStatement("this.target = target");, +      constructor.addCode("\n");, +    }, +      if (needsViewLocal()) {, +      if (needsView()) {, +      if (needsResource()) {, +, +    if (needsTargetField()) {, +      if (hasFieldBindings()) {, +      result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +      result.addStatement("$N = null", hasFieldBindings() ? "this.target" : "target");, +    if (hasParentBinding()) {, +      result.addStatement("super.unbind()");, +  private boolean needsResource() {, +        || hasParentBinding() && parentBinding.needsResource();, +  private boolean needsView() {, +        || hasParentBinding() && parentBinding.needsView();, +  private boolean needsTargetField() {, +    return hasFieldBindings() || hasMethodBindings();, +  }, +, +  private boolean needsViewLocal() {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      result.superclass(getParentBinding());, +    if (needsTargetField()) {, +      result.addField(targetTypeName, "target", PRIVATE);, +, +    if (!needsView()) {, +      // Add a delegating constructor with a target type + view signature for reflective use., +      result.addMethod(createBindingViewDelegateConstructor(targetTypeName));, +    }, +    result.addMethod(createBindingConstructor(targetTypeName));, +      result.addMethod(createBindingUnbindMethod(result, targetTypeName));, +    if (needsView()) {, +    if (hasParentBinding()) {, +      if (parentBinding.needsView()) {, +      } else if (needsView()) {, +    }, +    if (needsTargetField()) {, +      constructor.addStatement("this.target = target");, +      constructor.addCode("\n");, +    }, +      if (needsViewLocal()) {, +      if (needsView()) {, +      if (needsResource()) {, +, +    if (needsTargetField()) {, +      if (hasFieldBindings()) {, +      result.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +      result.addStatement("$N = null", hasFieldBindings() ? "this.target" : "target");, +    if (hasParentBinding()) {, +      result.addStatement("super.unbind()");, +  private boolean needsResource() {, +        || hasParentBinding() && parentBinding.needsResource();, +  private boolean needsView() {, +        || hasParentBinding() && parentBinding.needsView();, +  private boolean needsTargetField() {, +    return hasFieldBindings() || hasMethodBindings();, +  }, +, +  private boolean needsViewLocal() {, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +        + "public class Test_ViewBinding implements Unbinder {\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n", +        + "  public Test_ViewBinding(Test target, View source) {\n", +        + "  public Test_ViewBinding(Test target, Context context) {\n", +        + "public class Test_ViewBinding implements Unbinder {\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n", +        + "  public Test_ViewBinding(Test target, View source) {\n", +        + "  public Test_ViewBinding(Test target, Context context) {\n", +        + "public class Test_ViewBinding implements Unbinder {\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n", +        + "  public Test_ViewBinding(Test target, View source) {\n", +        + "  public Test_ViewBinding(Test target, Context context) {\n", +        + "public class Test_ViewBinding implements Unbinder {\n", +        + "   * @deprecated Use {@link #Test_ViewBinding(Test, Context)} for direct creation.\n", +        + "  public Test_ViewBinding(Test target, View source) {\n", +        + "  public Test_ViewBinding(Test target, Context context) {\n", +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +      result.superclass(getParentBinding());, +    if (needsTargetField()) {, +      result.addField(targetTypeName, "target", PRIVATE);, +]