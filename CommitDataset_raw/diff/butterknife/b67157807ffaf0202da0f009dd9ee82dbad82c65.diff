[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    private static <T> T[] filterNull(T[] views) {, +      int newSize = views.length;, +      for (T view : views) {, +        if (view == null) {, +          newSize -= 1;, +        }, +      }, +      if (newSize == views.length) {, +      //noinspection unchecked, +      T[] newViews = (T[]) new Object[newSize];, +      int nextIndex = 0;, +      for (T view : views) {, +        if (view != null) {, +          newViews[nextIndex++] = view;, +        }, +      }, +      return newViews;, +    }, +, +    public static <T> T[] arrayOf(T... views) {, +      return filterNull(views);, +    }, +      return new ImmutableList<T>(filterNull(views));, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +    private static <T> T[] filterNull(T[] views) {, +      int newSize = views.length;, +      for (T view : views) {, +        if (view == null) {, +          newSize -= 1;, +        }, +      }, +      if (newSize == views.length) {, +      //noinspection unchecked, +      T[] newViews = (T[]) new Object[newSize];, +      int nextIndex = 0;, +      for (T view : views) {, +        if (view != null) {, +          newViews[nextIndex++] = view;, +        }, +      }, +      return newViews;, +    }, +, +    public static <T> T[] arrayOf(T... views) {, +      return filterNull(views);, +    }, +      return new ImmutableList<T>(filterNull(views));, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +import static butterknife.ButterKnife.Finder.arrayOf;, +import static butterknife.ButterKnife.Finder.listOf;, +  @Test public void listOfFiltersNull() {, +    assertThat(listOf(null, null, null)).isEmpty();, +    assertThat(listOf("One", null, null)).containsExactly("One");, +    assertThat(listOf(null, "One", null)).containsExactly("One");, +    assertThat(listOf(null, null, "One")).containsExactly("One");, +    assertThat(listOf("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(listOf("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(listOf(null, "One", "Two")).containsExactly("One", "Two");, +  }, +, +  @Test public void arrayOfFiltersNull() {, +    assertThat(arrayOf(null, null, null)).isEmpty();, +    assertThat(arrayOf("One", null, null)).containsExactly("One");, +    assertThat(arrayOf(null, "One", null)).containsExactly("One");, +    assertThat(arrayOf(null, null, "One")).containsExactly("One");, +    assertThat(arrayOf("One", "Two", null)).containsExactly("One", "Two");, +    assertThat(arrayOf("One", null, "Two")).containsExactly("One", "Two");, +    assertThat(arrayOf(null, "One", "Two")).containsExactly("One", "Two");, +  }, +]