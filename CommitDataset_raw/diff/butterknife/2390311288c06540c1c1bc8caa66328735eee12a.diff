[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +import javax.lang.model.type.TypeMirror;, +import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;, +  private final boolean isView;, +  private final boolean isActivity;, +  private final boolean isDialog;, +      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,, +    this.isView = isView;, +    this.isActivity = isActivity;, +    this.isDialog = isDialog;, +    if (isView) {, +      result.addMethod(createBindingConstructorForView());, +    } else if (isActivity) {, +      result.addMethod(createBindingConstructorForActivity());, +    } else if (isDialog) {, +      result.addMethod(createBindingConstructorForDialog());, +    }, +  private MethodSpec createBindingConstructorForView() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC), +        .addParameter(targetTypeName, "target");, +    if (constructorNeedsView()) {, +      builder.addStatement("this(target, target)");, +    } else {, +      builder.addStatement("this(target, target.getContext())");, +    }, +    return builder.build();, +  }, +, +  private MethodSpec createBindingConstructorForActivity() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC), +        .addParameter(targetTypeName, "target");, +    if (constructorNeedsView()) {, +      builder.addStatement("this(target, target.getWindow().getDecorView())");, +    } else {, +      builder.addStatement("this(target, target)");, +    }, +    return builder.build();, +  }, +, +  private MethodSpec createBindingConstructorForDialog() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC), +        .addParameter(targetTypeName, "target");, +    if (constructorNeedsView()) {, +      builder.addStatement("this(target, target.getWindow().getDecorView())");, +    } else {, +      builder.addStatement("this(target, target.getContext())");, +    }, +    return builder.build();, +  }, +, +    TypeMirror typeMirror = enclosingElement.asType();, +, +    boolean isView = isSubtypeOfType(typeMirror, VIEW_TYPE);, +    boolean isActivity = isSubtypeOfType(typeMirror, ACTIVITY_TYPE);, +    boolean isDialog = isSubtypeOfType(typeMirror, DIALOG_TYPE);, +, +    TypeName targetType = TypeName.get(typeMirror);, +    return new Builder(targetType, bindingClassName, isFinal, isView, isActivity, isDialog);, +    private final boolean isView;, +    private final boolean isActivity;, +    private final boolean isDialog;, +    private Builder(TypeName targetTypeName, ClassName bindingClassName, boolean isFinal,, +        boolean isView, boolean isActivity, boolean isDialog) {, +      this.isView = isView;, +      this.isActivity = isActivity;, +      this.isDialog = isDialog;, +      return new BindingSet(targetTypeName, bindingClassName, isFinal, isView, isActivity, isDialog,, +          viewBindings.build(), collectionBindings.build(), resourceBindings.build(),, +          parentBinding);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +import javax.lang.model.type.TypeMirror;, +import static butterknife.compiler.ButterKnifeProcessor.ACTIVITY_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.DIALOG_TYPE;, +import static butterknife.compiler.ButterKnifeProcessor.isSubtypeOfType;, +  private final boolean isView;, +  private final boolean isActivity;, +  private final boolean isDialog;, +      boolean isView, boolean isActivity, boolean isDialog, ImmutableList<ViewBinding> viewBindings,, +    this.isView = isView;, +    this.isActivity = isActivity;, +    this.isDialog = isDialog;, +    if (isView) {, +      result.addMethod(createBindingConstructorForView());, +    } else if (isActivity) {, +      result.addMethod(createBindingConstructorForActivity());, +    } else if (isDialog) {, +      result.addMethod(createBindingConstructorForDialog());, +    }, +  private MethodSpec createBindingConstructorForView() {, +    MethodSpec.Builder builder = MethodSpec.constructorBuilder(), +        .addAnnotation(UI_THREAD), +        .addModifiers(PUBLIC)]