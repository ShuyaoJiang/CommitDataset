[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final String UNBINDER_SIMPLE_NAME = "InnerUnbinder";, +  private static final String BIND_TO_TARGET = "bindToTarget";, +    TypeName targetType = isFinal ? targetTypeName : TypeVariableName.get("T");, +      result.superclass(ParameterizedTypeName.get(parentBinding.generatedClassName, targetType));, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, targetType));, +    result.addMethod(createNewBindMethod(targetType));, +    if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +    }, +      result.addType(createUnbinderClass(targetType));, +  private TypeSpec createUnbinderClass(TypeName targetType) {, +          parentBinding.getUnbinderClassName(), targetType));, +      result.addField(targetType, "target", PRIVATE);, +    result.addMethod(createUnbinderConstructor(targetType));, +      result.addMethod(createUnbindMethod(result, targetType));, +  private MethodSpec createNewBindMethod(TypeName targetType) {, +        .addParameter(FINDER, "finder"), +        .addParameter(targetType, "target"), +    if (bindViewNeedsUnbinder()) {, +      result.addStatement("$1T unbinder = new $1T(target)", unbinderClassName);, +      if (isFinal) {, +        result.addCode("\n");, +        generateBindViewBody(result);, +        result.addCode("\n");, +      } else {, +        result.addStatement("$N(target, finder, source, unbinder)", BIND_TO_TARGET);, +      }, +      result.addStatement("return unbinder");, +    } else if (hasUnbinder()) {, +      if (isFinal) {, +        generateBindViewBody(result);, +        result.addCode("\n");, +      } else {, +        result.addStatement("$N(target, finder, source)", BIND_TO_TARGET);, +      }, +      result.addStatement("return new $T(target)", unbinderClassName);, +    } else {, +      result.addStatement("$N(target, finder, source)", BIND_TO_TARGET);, +      result.addStatement("return $T.EMPTY", UNBINDER);, +    }, +, +    return result.build();, +  }, +, +  private MethodSpec createNewBindToTargetMethod() {, +    MethodSpec.Builder result = MethodSpec.methodBuilder(BIND_TO_TARGET), +        .addModifiers(PROTECTED, STATIC), +        .addParameter(targetTypeName, "target", FINAL), +        .addParameter(FINDER, "finder"), +        .addParameter(Object.class, "source");, +, +    if (bindViewNeedsUnbinder()) {, +      result.addParameter(unbinderClassName, "unbinder");, +    }, +, +    generateBindViewBody(result);, +, +    return result.build();, +  }, +, +  private void generateBindViewBody(MethodSpec.Builder result) {, +      if (parentBinding.bindViewNeedsUnbinder()) {, +        result.addStatement("$T.$N(target, finder, source, unbinder)",, +            parentBinding.generatedClassName, BIND_TO_TARGET);, +        result.addStatement("$T.$N(target, finder, source)",, +            parentBinding.generatedClassName, BIND_TO_TARGET);, +      result.addCode("\n");, +, +      if (hasResourceBindings()) {, +        result.addCode("\n");, +      }, +  private boolean bindViewNeedsUnbinder() {, +    if (hasUnbinder()) {, +      for (ViewBindings viewBindings : viewIdMap.values()) {, +        if (!viewBindings.getMethodBindings().isEmpty()) {, +          return true;, +        }, +      }, +    }, +    return hasParentBinding() && parentBinding.bindViewNeedsUnbinder();, +  }, +, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final String UNBINDER_SIMPLE_NAME = "InnerUnbinder";, +  private static final String BIND_TO_TARGET = "bindToTarget";, +    TypeName targetType = isFinal ? targetTypeName : TypeVariableName.get("T");, +      result.superclass(ParameterizedTypeName.get(parentBinding.generatedClassName, targetType));, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, targetType));, +    result.addMethod(createNewBindMethod(targetType));, +    if (!isFinal) {, +      result.addMethod(createNewBindToTargetMethod());, +    }, +      result.addType(createUnbinderClass(targetType));, +  private TypeSpec createUnbinderClass(TypeName targetType) {, +          parentBinding.getUnbinderClassName(), targetType));, +      result.addField(targetType, "target", PRIVATE);, +    result.addMethod(createUnbinderConstructor(targetType));, +      result.addMethod(createUnbindMethod(result, targetType));, +  private MethodSpec createNewBindMethod(TypeName targetType) {]