[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;, + * {@literal @}ResourceColor(R.color.error_red) int errorRed;, + * </code></pre>, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +    public abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;, + * {@literal @}ResourceColor(R.color.error_red) int errorRed;, + * </code></pre>, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +    public abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ResourceBool.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified boolean resource ID., + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface ResourceBool {, +  /** Boolean resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;, + * {@literal @}ResourceColor(R.color.error_red) int errorRed;, + * </code></pre>, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +      @Override public Context getContext(Object source) {, +    public abstract Context getContext(Object source);, +++ b/butterknife/src/main/java/butterknife/ResourceBool.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified boolean resource ID., + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface ResourceBool {, +  /** Boolean resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/ResourceColor.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified color resource ID. Type can be {@code int} or, + * {@link android.content.res.ColorStateList}., + * <pre><code>, + * {@literal @}ResourceColor(R.color.background_green) int green;, + * {@literal @}ResourceColor(R.color.background_green_selector) ColorStateList greenSelector;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface ResourceColor {, +  /** Color resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, + * Resources can also be bound to fields to simplify programmatically working with views:, + * <pre><code>, + * {@literal @}ResourceBool(R.bool.is_tablet) boolean isTablet;, + * {@literal @}ResourceInt(R.int.columns) int columns;]