[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");, +    result.addMethod(createBindMethod());, +, +    ClassName targetClassName = ClassName.bestGuess(targetClass);, +, +    MethodSpec unbinderConstructor = MethodSpec.constructorBuilder(), +        .addParameter(targetClassName, "target"), +        .addStatement("this.$1N = $1N", "target"), +        .build();, +, +        .addSuperinterface(UNBINDER), +        .addModifiers(PRIVATE, STATIC, FINAL), +        .addField(targetClassName, "target", PRIVATE), +        .addMethod(unbinderConstructor);, +    // Even if there are no bindings we need to implement the interface method., +    MethodSpec.Builder unbindMethod = MethodSpec.methodBuilder("unbind"), +        .addModifiers(PUBLIC);, +    // Throw exception if unbind called twice., +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +      addFieldAndUnbindStatement(result, unbindMethod, bindings);, +        unbindMethod.addStatement("target.$L = null", fieldBinding.getName());, +      unbindMethod.addStatement("target.$L = null", fieldCollectionBinding.getName());, +    unbindMethod.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());, +    unbindMethod.addStatement("target = null");, +    result.addMethod(unbindMethod.build());, +      result.addStatement("$T unbinder = new $T($N)", unbinderBinding.getUnbinderClassName(),, +          unbinderBinding.getUnbinderClassName(), "target");, +    if (hasUnbinder()) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");, +    result.addMethod(createBindMethod());, +, +    ClassName targetClassName = ClassName.bestGuess(targetClass);, +, +    MethodSpec unbinderConstructor = MethodSpec.constructorBuilder(), +        .addParameter(targetClassName, "target"), +        .addStatement("this.$1N = $1N", "target"), +        .build();, +, +        .addSuperinterface(UNBINDER), +        .addModifiers(PRIVATE, STATIC, FINAL), +        .addField(targetClassName, "target", PRIVATE), +        .addMethod(unbinderConstructor);, +    // Even if there are no bindings we need to implement the interface method., +    MethodSpec.Builder unbindMethod = MethodSpec.methodBuilder("unbind"), +        .addModifiers(PUBLIC);, +    // Throw exception if unbind called twice., +    unbindMethod.addStatement("if (target == null) throw new $T($S)", IllegalStateException.class,, +        "Bindings already cleared.");, +      addFieldAndUnbindStatement(result, unbindMethod, bindings);, +        unbindMethod.addStatement("target.$L = null", fieldBinding.getName());, +      unbindMethod.addStatement("target.$L = null", fieldCollectionBinding.getName());, +    unbindMethod.addStatement("target.$L = null", unbinderBinding.getUnbinderFieldName());, +    unbindMethod.addStatement("target = null");, +    result.addMethod(unbindMethod.build());, +      result.addStatement("$T unbinder = new $T($N)", unbinderBinding.getUnbinderClassName(),, +          unbinderBinding.getUnbinderClassName(), "target");, +    if (hasUnbinder()) {, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +    Set<String> erasedTargetNames = new LinkedHashSet<>();, +      String parentClassFqcn = findParentFqcn(entry.getKey(), erasedTargetNames);, +      if (parentClassFqcn != null) {, +        entry.getValue().setParentViewBinder(parentClassFqcn + BINDING_CLASS_SUFFIX);, +      Set<String> erasedTargetNames) {, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +    // Verify that the element type is ButterKnife.Unbinder., +          "@%s filed must be of type ButterKnife.Unbinder. (%s.%s)",, +    erasedTargetNames.add(enclosingElement.toString());, +      Set<String> erasedTargetNames) {, +      Map<TypeElement, BindingClass> targetClassMap, Set<String> erasedTargetNames), +    erasedTargetNames.add(enclosingElement.toString());, +  private String findParentFqcn(TypeElement typeElement, Set<String> parents) {, +      if (parents.contains(typeElement.toString())) {, +    }, +  }, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final ClassName UNBINDER = ClassName.get("butterknife", "ButterKnife", "Unbinder");, +    result.addMethod(createBindMethod());]