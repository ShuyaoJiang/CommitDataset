[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +package butterknife.compiler;, +, +import android.content.res.Resources;, +import android.graphics.BitmapFactory;, +import butterknife.internal.ListenerClass;, +import butterknife.internal.ListenerMethod;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeVariableName;, +import com.squareup.javapoet.WildcardTypeName;, +import java.lang.reflect.Field;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Iterator;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +, +import static butterknife.compiler.ButterKnifeProcessor.VIEW_TYPE;, +import static java.util.Collections.singletonList;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PUBLIC;, +, +final class BindingClass {, +  private static final ClassName FINDER = ClassName.get("butterknife.internal", "Finder");, +  private static final ClassName VIEW_BINDER = ClassName.get("butterknife.internal", "ViewBinder");, +  private static final ClassName UTILS = ClassName.get("butterknife.internal", "Utils");, +  private static final ClassName VIEW = ClassName.get("android.view", "View");, +  private static final ClassName BUTTERKNIFE_TOOLS =, +      ClassName.get("butterknife.internal", "ButterKnifeTools");, +  private static final int NO_ID = -1;, +, +  private final Map<Integer, ViewBindings> viewIdMap = new LinkedHashMap<>();, +  private final Map<FieldCollectionViewBinding, int[]> collectionBindings = new LinkedHashMap<>();, +  private final List<FieldBitmapBinding> bitmapBindings = new ArrayList<>();, +  private final List<FieldDrawableBinding> drawableBindings = new ArrayList<>();, +  private final List<FieldResourceBinding> resourceBindings = new ArrayList<>();, +  private final String classPackage;, +  private final String className;, +  private final String targetClass;, +  private String parentViewBinder;, +, +  BindingClass(String classPackage, String className, String targetClass) {, +    this.classPackage = classPackage;, +    this.className = className;, +    this.targetClass = targetClass;, +  }, +, +  void addBitmap(FieldBitmapBinding binding) {, +    bitmapBindings.add(binding);, +  }, +, +  void addDrawable(FieldDrawableBinding binding) {, +    drawableBindings.add(binding);, +  }, +, +  void addField(int id, FieldViewBinding binding) {, +    getOrCreateViewBindings(id).addFieldBinding(binding);, +  }, +, +  void addFieldCollection(int[] ids, FieldCollectionViewBinding binding) {, +    collectionBindings.put(binding, ids);, +  }, +, +  boolean addMethod(int id, ListenerClass listener, ListenerMethod method,, +      MethodViewBinding binding) {, +    ViewBindings viewBindings = getOrCreateViewBindings(id);, +    if (viewBindings.hasMethodBinding(listener, method), +        && !"void".equals(method.returnType())) {, +      return false;, +    }, +    viewBindings.addMethodBinding(listener, method, binding);, +    return true;, +  }, +, +  void addResource(FieldResourceBinding binding) {, +    resourceBindings.add(binding);, +  }, +, +  void setParentViewBinder(String parentViewBinder) {, +    this.parentViewBinder = parentViewBinder;, +  }, +, +  ViewBindings getViewBinding(int id) {, +    return viewIdMap.get(id);, +  }, +, +  private ViewBindings getOrCreateViewBindings(int id) {, +    ViewBindings viewId = viewIdMap.get(id);, +    if (viewId == null) {, +      viewId = new ViewBindings(id);, +      viewIdMap.put(id, viewId);]