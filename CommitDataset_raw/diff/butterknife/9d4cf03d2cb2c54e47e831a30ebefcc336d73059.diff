[+++ b/butterknife-integration-test/src/androidTest/java/com/example/butterknife/functional/OnTouchTest.java, +package com.example.butterknife.functional;, +, +import android.content.Context;, +import android.view.MotionEvent;, +import android.view.View;, +import android.view.ViewGroup;, +import android.widget.Button;, +import android.widget.FrameLayout;, +import android.widget.TextView;, +import androidx.test.InstrumentationRegistry;, +import androidx.test.annotation.UiThreadTest;, +import butterknife.ButterKnife;, +import butterknife.OnTouch;, +import butterknife.Optional;, +import butterknife.Unbinder;, +import org.junit.Test;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +, +@SuppressWarnings("unused") // Used reflectively / by code gen., +public final class OnTouchTest {, +  static final class Simple {, +    boolean returnValue = true;, +    int touches = 0;, +, +    @OnTouch(1) boolean touch() {, +      touches++;, +      return returnValue;, +    }, +  }, +, +  @UiThreadTest, +  @Test public void simple() {, +    View tree = ViewTree.create(1);, +    View view1 = tree.findViewById(1);, +, +    Simple target = new Simple();, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertEquals(0, target.touches);, +, +    assertTrue(performTouch(view1));, +    assertEquals(1, target.touches);, +, +    target.returnValue = false;, +    assertFalse(performTouch(view1));, +    assertEquals(2, target.touches);, +, +    unbinder.unbind();, +    performTouch(view1);, +    assertEquals(2, target.touches);, +  }, +, +  static final class ReturnVoid {, +    int touches = 0;, +, +    @OnTouch(1) void touch() {, +      touches++;, +    }, +  }, +, +  @UiThreadTest, +  @Test public void returnVoid() {, +    View tree = ViewTree.create(1);, +    View view1 = tree.findViewById(1);, +, +    ReturnVoid target = new ReturnVoid();, +    Unbinder unbinder = ButterKnife.bind(target, tree);, +    assertEquals(0, target.touches);, +, +    assertTrue(performTouch(view1));, +    assertEquals(1, target.touches);, +, +    unbinder.unbind();, +    performTouch(view1);, +    assertEquals(1, target.touches);, +  }, +, +  static final class Visibilities {, +    int touches = 0;, +, +    @OnTouch(1) public boolean publicTouch() {, +      touches++;, +      return true;, +    }, +, +    @OnTouch(2) boolean packageTouch() {, +      touches++;, +      return true;, +    }, +, +    @OnTouch(3) protected boolean protectedTouch() {, +      touches++;, +      return true;, +    }, +  }, +]