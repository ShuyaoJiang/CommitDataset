[+++ b/butterknife-runtime/src/androidTest/java/butterknife/ViewCollectionsTest.java, +package butterknife;, +, +import android.content.Context;, +import android.support.annotation.NonNull;, +import android.support.test.InstrumentationRegistry;, +import android.util.Property;, +import android.view.View;, +import java.util.List;, +import org.junit.Test;, +, +import static com.google.common.truth.Truth.assertThat;, +import static java.util.Arrays.asList;, +, +public class ViewCollectionsTest {, +  private static final Property<View, Boolean> PROPERTY_ENABLED =, +      new Property<View, Boolean>(Boolean.class, "enabled") {, +        @Override public Boolean get(View view) {, +          return view.isEnabled();, +        }, +, +        @Override public void set(View view, Boolean enabled) {, +          view.setEnabled(enabled);, +        }, +      };, +  private static final Setter<View, Boolean> SETTER_ENABLED =, +      new Setter<View, Boolean>() {, +        @Override public void set(@NonNull View view, Boolean value, int index) {, +          view.setEnabled(value);, +        }, +      };, +  private static final Action<View> ACTION_DISABLE = new Action<View>() {, +    @Override public void apply(@NonNull View view, int index) {, +      view.setEnabled(false);, +    }, +  };, +  private static final Action<View> ACTION_ZERO_ALPHA = new Action<View>() {, +    @Override public void apply(@NonNull View view, int index) {, +      view.setAlpha(0f);, +    }, +  };, +, +  private final Context context = InstrumentationRegistry.getContext();, +, +  @Test public void propertyAppliedToView() {, +    View view = new View(context);, +    assertThat(view.isEnabled()).isTrue();, +, +    ViewCollections.set(view, PROPERTY_ENABLED, false);, +    assertThat(view.isEnabled()).isFalse();, +  }, +, +  @Test public void propertyAppliedToEveryViewInList() {, +    View view1 = new View(context);, +    View view2 = new View(context);, +    View view3 = new View(context);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();, +, +    List<View> views = asList(view1, view2, view3);, +    ViewCollections.set(views, PROPERTY_ENABLED, false);, +, +    assertThat(view1.isEnabled()).isFalse();, +    assertThat(view2.isEnabled()).isFalse();, +    assertThat(view3.isEnabled()).isFalse();, +  }, +, +  @Test public void propertyAppliedToEveryViewInArray() {, +    View view1 = new View(context);, +    View view2 = new View(context);, +    View view3 = new View(context);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();, +, +    View[] views = new View[] { view1, view2, view3 };, +    ViewCollections.set(views, PROPERTY_ENABLED, false);, +, +    assertThat(view1.isEnabled()).isFalse();, +    assertThat(view2.isEnabled()).isFalse();, +    assertThat(view3.isEnabled()).isFalse();, +  }, +, +  @Test public void actionAppliedToView() {, +    View view = new View(context);, +    assertThat(view.isEnabled()).isTrue();, +, +    ViewCollections.run(view, ACTION_DISABLE);, +, +    assertThat(view.isEnabled()).isFalse();, +  }, +, +  @Test public void actionsAppliedToView() {, +    View view = new View(context);, +    assertThat(view.isEnabled()).isTrue();, +    assertThat(view.getAlpha()).isEqualTo(1f);, +, +    ViewCollections.run(view, ACTION_DISABLE, ACTION_ZERO_ALPHA);, +    assertThat(view.isEnabled()).isFalse();]