[+++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable);, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +      if (!VIEW_TYPE.equals(listenerClass.targetType())) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +    addMethodBindings(result, binding, debuggable);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +          .superclass(ClassName.bestGuess(listener.type()));, +        TypeName listenerClassName = bestGuess(listener.type());, +      if (!VIEW_TYPE.equals(listener.targetType())) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable);, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +      if (!VIEW_TYPE.equals(listenerClass.targetType())) {, +        unbindMethod.addStatement("(($T) $N).$N($N)", bestGuess(listenerClass.targetType()),, +  private void addViewBinding(MethodSpec.Builder result, ViewBinding binding, boolean debuggable) {, +    addMethodBindings(result, binding, debuggable);, +  private void addMethodBindings(MethodSpec.Builder result, ViewBinding binding,, +      boolean debuggable) {, +          .superclass(ClassName.bestGuess(listener.type()));, +        TypeName listenerClassName = bestGuess(listener.type());, +      if (!VIEW_TYPE.equals(listener.targetType())) {, +        result.addStatement("(($T) $N).$L($L)", bestGuess(listener.targetType()), bindName,, +++ b/butterknife-reflect/src/main/java/butterknife/ButterKnife.java, +import android.view.MotionEvent;, +, +        unbinder = parseOnTouch(target, method, source);, +        if (unbinder != null) unbinders.add(unbinder);, +  private static @Nullable Unbinder parseOnTouch(final Object target, final Method method,, +      View source) {, +    OnTouch onTouch = method.getAnnotation(OnTouch.class);, +    if (onTouch == null) {, +      return null;, +    }, +    validateMember(method);, +    final boolean propagateReturn = validateReturnType(method, boolean.class);, +    final ArgumentTransformer argumentTransformer =, +        createArgumentTransformer(method, ON_TOUCH_TYPES);, +, +    List<View> views =, +        findViews(source, onTouch.value(), isRequired(method), method.getName(), View.class);, +, +    ViewCollections.set(views, ON_TOUCH, new View.OnTouchListener() {, +      @Override public boolean onTouch(View v, MotionEvent event) {, +        Object returnValue = tryInvoke(method, target, argumentTransformer.transform(v));, +        //noinspection SimplifiableConditionalExpression, +        return propagateReturn, +            ? (boolean) returnValue, +            : false;, +      }, +    });, +, +    return new ListenerUnbinder<>(views, ON_TOUCH);, +  }, +, +  private static final Setter<View, View.OnTouchListener> ON_TOUCH =, +      new Setter<View, View.OnTouchListener>() {, +        @Override public void set(@NonNull View view, View.OnTouchListener value, int index) {, +          view.setOnTouchListener(value);, +        }, +      };, +  private static final Class<?>[] ON_TOUCH_TYPES = { View.class, MotionEvent.class };, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +++ b/butterknife-annotations/src/main/java/butterknife/OnTouch.java, +import static java.lang.annotation.RetentionPolicy.RUNTIME;, +@Retention(RUNTIME), +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +        addViewBinding(constructor, binding, debuggable);, +        addFieldAndUnbindStatement(bindingClass, result, binding);, +      ViewBinding bindings) {, +        TypeName listenerClassName = bestGuess(listenerClass.type());, +      if (!VIEW_TYPE.equals(listenerClass.targetType())) {]