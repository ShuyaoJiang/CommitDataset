[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final TypeName targetTypeName;, +  BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, +    this.targetTypeName = targetTypeName;, +        .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +            .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final TypeName targetTypeName;, +  BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, +    this.targetTypeName = targetTypeName;, +        .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +            .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.ParameterizedTypeName;, +      TypeName targetType = TypeName.get(enclosingElement.asType());, +      if (targetType instanceof ParameterizedTypeName) {, +        targetType = ((ParameterizedTypeName) targetType).rawType;, +      }, +      String targetPackage = getPackageName(enclosingElement);, +, +      String className = getClassName(enclosingElement, targetPackage) + BINDING_CLASS_SUFFIX;, +      bindingClass = new BindingClass(targetPackage, className, isFinal, targetType, classFqcn);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final TypeName targetTypeName;, +  BindingClass(String classPackage, String className, boolean isFinal, TypeName targetTypeName,, +    this.targetTypeName = targetTypeName;, +        .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +            .addTypeVariable(TypeVariableName.get("T", targetTypeName));, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.ParameterizedTypeName;, +      TypeName targetType = TypeName.get(enclosingElement.asType());, +      if (targetType instanceof ParameterizedTypeName) {, +        targetType = ((ParameterizedTypeName) targetType).rawType;, +      }, +      String targetPackage = getPackageName(enclosingElement);, +, +      String className = getClassName(enclosingElement, targetPackage) + BINDING_CLASS_SUFFIX;, +      bindingClass = new BindingClass(targetPackage, className, isFinal, targetType, classFqcn);, +++ b/butterknife-compiler/src/test/java/butterknife/BindViewTest.java, +, +  @Test public void bindingViewInnerClass() {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Outer",, +        Joiner.on('\n').join(, +            "package test;",, +            "import android.app.Activity;",, +            "import android.view.View;",, +            "import butterknife.BindView;",, +            "public class Outer {",, +            "  public static class Test extends Activity {",, +            "    @BindView(1) View thing;",, +            "  }",, +            "}", +        ));, +, +    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Outer$Test$$ViewBinder", "", +        + "package test;\n", +        + "import android.view.View;\n", +        + "import butterknife.Unbinder;\n", +        + "import butterknife.internal.Finder;\n", +        + "import butterknife.internal.ViewBinder;\n", +        + "import java.lang.IllegalStateException;\n", +        + "import java.lang.Object;\n", +        + "import java.lang.Override;\n", +        + "public class Outer$Test$$ViewBinder<T extends Outer.Test> implements ViewBinder<T> {\n", +        + "  @Override\n", +        + "  public Unbinder bind(final Finder finder, final T target, Object source) {\n", +        + "    InnerUnbinder unbinder = createUnbinder(target);\n", +        + "    View view;\n", +        + "    view = finder.findRequiredView(source, 1, \"field 'thing'\");\n", +        + "    target.thing = view;\n", +        + "    return unbinder;\n", +        + "  }\n", +        + "  protected InnerUnbinder<T> createUnbinder(T target) {\n", +        + "    return new InnerUnbinder(target);\n", +        + "  }\n", +        + "  protected static class InnerUnbinder<T extends Outer.Test> implements Unbinder {\n", +        + "    private T target;\n", +        + "    protected InnerUnbinder(T target) {\n", +        + "      this.target = target;\n", +        + "    }\n", +        + "    @Override\n", +        + "    public final void unbind() {\n", +        + "      if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n", +        + "      unbind(target);\n", +        + "      target = null;\n", +        + "    }\n", +        + "    protected void unbind(T target) {\n", +        + "      target.thing = null;\n", +        + "    }\n", +        + "  }\n", +        + "}");, +, +    assertAbout(javaSource()).that(source), +        .processedWith(new ButterKnifeProcessor()), +        .compilesWithoutError(), +        .and(), +        .generatesSources(expectedSource);, +  }, +, +  @Test public void bindingViewUppercasePackageName() {]