[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private static final String FILE_COMMENT = "Generated code from Butter Knife. Do not modify!";, +    return Arrays.asList(, +        JavaFile.builder(bindingClassName.packageName(), createBindingClass()), +            .addFileComment(FILE_COMMENT), +            .build(),, +        JavaFile.builder(binderClassName.packageName(), createBinderClass()), +            .addFileComment(FILE_COMMENT), +  private MethodSpec createBinderBindMethod(TypeName targetType) {, +    MethodSpec.Builder result = MethodSpec.methodBuilder("bind"), +        .addAnnotation(Override.class), +        .addModifiers(PUBLIC), +        .returns(UNBINDER), +        .addParameter(targetType, "target"), +        .addParameter(VIEW, "source");, +    CodeBlock.Builder invoke = CodeBlock.builder(), +        .add("return new $T", bindingClassName);, +    if (!isFinal) {, +      invoke.add("<>");, +    }, +    invoke.add("(target, $N)", bindNeedsView() ? "source" : "source.getContext()");, +    result.addStatement("$L", invoke.build());, +, +    return result.build();, +  }, +, +  private TypeSpec createBinderClass() {, +    return TypeSpec.classBuilder(binderClassName), +        .addModifiers(PUBLIC, FINAL), +        .addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, targetTypeName)), +        .addMethod(createBinderBindMethod(targetTypeName)), +        .build();, +    if (hasParentBinding()) {, +      result.superclass(ParameterizedTypeName.get(getParentBinding(), targetType));, +    if (hasViewBindings() || !hasParentBinding()) {, +    if (!hasParentBinding()) {, +    } else if (parentBinding.bindNeedsView()) {, +      constructor.addStatement("super(target, source)");, +    } else if (bindNeedsView()) {, +      constructor.addStatement("super(target, source.getContext())");, +    } else {, +      constructor.addStatement("super(target, context)");, +    if (hasUnqualifiedResourceBindings()) {, +      // Aapt can change IDs out from underneath us, just suppress since all will work at runtime., +      constructor.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class), +          .addMember("value", "$S", "ResourceType"), +          .build());, +    }, +, +    if (hasViewBindings()) {, +      if (bindNeedsViewLocal()) {, +        // Local variable in which all views will be temporarily stored., +        constructor.addStatement("$T view", VIEW);, +      }, +      for (ViewBindings bindings : viewIdMap.values()) {, +        addViewBindings(constructor, bindings);, +      }, +      for (Map.Entry<FieldCollectionViewBinding, List<Id>> entry : collectionBindings.entrySet()) {, +        emitCollectionBinding(constructor, entry.getKey(), entry.getValue());, +      }, +, +      if (hasResourceBindings()) {, +        constructor.addCode("\n");, +      }, +    }, +, +    if (hasResourceBindings()) {, +      boolean hasView = bindNeedsView();, +      boolean needsSourceToContext = bindNeedsTheme() && hasView;, +      if (needsSourceToContext) {, +        constructor.addStatement("$T context = source.getContext()", CONTEXT);, +      }, +      constructor.addStatement("$T res = $N.getResources()", RESOURCES,, +          needsSourceToContext || !hasView ? "context" : "source");, +      if (bindNeedsTheme()) {, +        constructor.addStatement("$T theme = context.getTheme()", THEME);, +      }, +, +      for (FieldBitmapBinding binding : bitmapBindings) {, +        constructor.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),, +            BITMAP_FACTORY, binding.getId().code);, +      }, +, +      for (FieldDrawableBinding binding : drawableBindings) {, +        Id tintAttributeId = binding.getTintAttributeId();, +        if (tintAttributeId.value != 0) {, +          constructor.addStatement("target.$L = $T.getTintedDrawable(res, theme, $L, $L)",, +              binding.getName(), UTILS, binding.getId().code, tintAttributeId.code);, +        } else {, +          constructor.addStatement("target.$L = $T.getDrawable(res, theme, $L)", binding.getName(),, +              UTILS, binding.getId().code);, +        }, +      }, +, +      for (FieldResourceBinding binding : resourceBindings) {, +        if (binding.isThemeable()) {, +          constructor.addStatement("target.$L = $T.$L(res, theme, $L)", binding.getName(),, +              UTILS, binding.getMethod(), binding.getId().code);, +        } else {, +          constructor.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),]