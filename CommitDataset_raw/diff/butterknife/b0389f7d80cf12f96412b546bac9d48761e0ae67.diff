[+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    for (int id : ids) {, +      if (!viewInjector.addListener(id, listener, method, binding)) {, +        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",, +            id, enclosingElement.getQualifiedName(), element.getSimpleName());, +        return;, +      }, +    }, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    for (int id : ids) {, +      if (!viewInjector.addListener(id, listener, method, binding)) {, +        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",, +            id, enclosingElement.getQualifiedName(), element.getSimpleName());, +        return;, +      }, +    }, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjection.java, +  public boolean hasListenerBinding(ListenerClass listener, ListenerMethod method) {, +    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);, +    return methods != null && methods.containsKey(method);, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    for (int id : ids) {, +      if (!viewInjector.addListener(id, listener, method, binding)) {, +        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",, +            id, enclosingElement.getQualifiedName(), element.getSimpleName());, +        return;, +      }, +    }, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjection.java, +  public boolean hasListenerBinding(ListenerClass listener, ListenerMethod method) {, +    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);, +    return methods != null && methods.containsKey(method);, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java, +  boolean addListener(int id, ListenerClass listener, ListenerMethod method,, +    if (viewInjection.hasListenerBinding(listener, method), +        && !"void".equals(method.returnType())) {, +      return false;, +    viewInjection.addListenerBinding(listener, method, binding);, +    return true;, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +    for (int id : ids) {, +      if (!viewInjector.addListener(id, listener, method, binding)) {, +        error(element, "Multiple listener methods with return value specified for ID %d. (%s.%s)",, +            id, enclosingElement.getQualifiedName(), element.getSimpleName());, +        return;, +      }, +    }, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjection.java, +  public boolean hasListenerBinding(ListenerClass listener, ListenerMethod method) {, +    Map<ListenerMethod, Set<ListenerBinding>> methods = listenerBindings.get(listener);, +    return methods != null && methods.containsKey(method);, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java, +  boolean addListener(int id, ListenerClass listener, ListenerMethod method,, +    if (viewInjection.hasListenerBinding(listener, method), +        && !"void".equals(method.returnType())) {, +      return false;, +    viewInjection.addListenerBinding(listener, method, binding);, +    return true;, +++ b/butterknife/src/test/java/butterknife/internal/OnTouchTest.java, +, +  @Test public void failsMultipleListenersWithReturnValue() throws Exception {, +    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", Joiner.on('\n').join(, +        "package test;",, +        "import android.app.Activity;",, +        "import butterknife.OnTouch;",, +        "public class Test extends Activity {",, +        "  @OnTouch(1) boolean doStuff1() {}",, +        "  @OnTouch(1) boolean doStuff2() {}",, +        "}"));, +, +    ASSERT.about(javaSource()).that(source), +        .processedWith(butterknifeProcessors()), +        .failsToCompile(), +        .withErrorContaining(, +            "Multiple listener methods with return value specified for ID 1. (test.Test.doStuff2)"), +        .in(source).onLine(6);, +  }]