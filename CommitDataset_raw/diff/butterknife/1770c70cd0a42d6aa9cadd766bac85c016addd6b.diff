[+++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +, +    ViewInjector injector = targetClassMap.get(enclosingElement);, +    if (injector != null && injector.viewIdMapContains(id)) {, +      error(element, "Attempt to use @InjectView for an already injected ID (%d). (%s.%s)", id,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +      return;, +    }, +, +    String name = element.getSimpleName().toString();, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +    }, +, +  /** Returns the first duplicate element inside an array, null if there are no duplicates. */, +  private static Integer findDuplicate(int[] array) {, +    Set<Integer> seenElements = new LinkedHashSet<Integer>();, +, +    for (int element : array) {, +      if (!seenElements.add(element)) {, +        return element;, +      }, +    }, +, +    return null;, +  }, +, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +, +    ViewInjector injector = targetClassMap.get(enclosingElement);, +    if (injector != null && injector.viewIdMapContains(id)) {, +      error(element, "Attempt to use @InjectView for an already injected ID (%d). (%s.%s)", id,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +      return;, +    }, +, +    String name = element.getSimpleName().toString();, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +    }, +, +  /** Returns the first duplicate element inside an array, null if there are no duplicates. */, +  private static Integer findDuplicate(int[] array) {, +    Set<Integer> seenElements = new LinkedHashSet<Integer>();, +, +    for (int element : array) {, +      if (!seenElements.add(element)) {, +        return element;, +      }, +    }, +, +    return null;, +  }, +, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +          annotationClass.getSimpleName(), duplicateId, enclosingElement.getQualifiedName(),, +++ b/butterknife/src/main/java/butterknife/internal/ViewInjector.java, +  boolean viewIdMapContains(int id) {, +    return viewIdMap.containsKey(id);, +  }, +, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +, +    ViewInjector injector = targetClassMap.get(enclosingElement);, +    if (injector != null && injector.viewIdMapContains(id)) {, +      error(element, "Attempt to use @InjectView for an already injected ID (%d). (%s.%s)", id,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +      return;, +    }, +, +    String name = element.getSimpleName().toString();, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {, +      error(element, "@InjectViews annotation contains duplicate ID %d. (%s.%s)", duplicateId,, +          enclosingElement.getQualifiedName(), element.getSimpleName());, +    }, +, +  /** Returns the first duplicate element inside an array, null if there are no duplicates. */, +  private static Integer findDuplicate(int[] array) {, +    Set<Integer> seenElements = new LinkedHashSet<Integer>();, +, +    for (int element : array) {, +      if (!seenElements.add(element)) {, +        return element;, +      }, +    }, +, +    return null;, +  }, +, +    Integer duplicateId = findDuplicate(ids);, +    if (duplicateId != null) {]