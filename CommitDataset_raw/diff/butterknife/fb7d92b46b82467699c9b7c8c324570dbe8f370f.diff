[+++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified font resource ID., + * <pre><code>, + * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFont {, +  /** Font resource ID to which the field will be bound. */, +  /* TODO support lib 26.0.0: @FontRes */ int value();, +}, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified font resource ID., + * <pre><code>, + * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFont {, +  /** Font resource ID to which the field will be bound. */, +  /* TODO support lib 26.0.0: @FontRes */ int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  static final ClassName RESOURCES_COMPAT =, +      ClassName.get("android.support.v4.content.res", "ResourcesCompat");, +++ b/butterknife-annotations/src/main/java/butterknife/BindFont.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified font resource ID., + * <pre><code>, + * {@literal @}BindFont(R.font.comic_sans) Typeface comicSans;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindFont {, +  /** Font resource ID to which the field will be bound. */, +  /* TODO support lib 26.0.0: @FontRes */ int value();, +}, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  static final ClassName RESOURCES_COMPAT =, +      ClassName.get("android.support.v4.content.res", "ResourcesCompat");, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import butterknife.BindFont;, +  private static final String TYPEFACE_TYPE = "android.graphics.Typeface";, +    annotations.add(BindFont.class);, +    // Process each @BindFont element., +    for (Element element : env.getElementsAnnotatedWith(BindFont.class)) {, +      if (!SuperficialValidation.validateElement(element)) continue;, +      try {, +        parseResourceFont(element, builderMap, erasedTargetNames);, +      } catch (Exception e) {, +        logParsingError(element, BindFont.class, e);, +      }, +    }, +, +  private void parseResourceFont(Element element,, +      Map<TypeElement, BindingSet.Builder> builderMap, Set<TypeElement> erasedTargetNames) {, +    boolean hasError = false;, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +, +    // Verify that the target type is a Typeface., +    if (!TYPEFACE_TYPE.equals(element.asType().toString())) {, +      error(element, "@%s field type must be 'Typeface'. (%s.%s)",, +          BindFont.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +    }, +, +    // Verify common generated code restrictions., +    hasError |= isInaccessibleViaGeneratedCode(BindFont.class, "fields", element);, +    hasError |= isBindingInWrongPackage(BindFont.class, element);, +, +    if (hasError) {, +      return;, +    }]