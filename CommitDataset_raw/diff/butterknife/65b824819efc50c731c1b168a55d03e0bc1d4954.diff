[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import butterknife.internal.ButterKnifeProcessor;, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import butterknife.internal.ButterKnifeProcessor;, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +      Class<?> injector = Class.forName(clsName + ButterKnifeProcessor.SUFFIX);, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +package butterknife.internal;, +, +import butterknife.InjectView;, +import butterknife.OnCheckedChanged;, +import butterknife.OnClick;, +import butterknife.OnEditorAction;, +import butterknife.OnFocusChanged;, +import butterknife.OnItemClick;, +import butterknife.OnItemLongClick;, +import butterknife.OnLongClick;, +import butterknife.Optional;, +import java.io.IOException;, +import java.io.PrintWriter;, +import java.io.StringWriter;, +import java.io.Writer;, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.BitSet;, +import java.util.Collection;, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import javax.annotation.processing.AbstractProcessor;, +import javax.annotation.processing.Filer;, +import javax.annotation.processing.ProcessingEnvironment;, +import javax.annotation.processing.RoundEnvironment;, +import javax.lang.model.SourceVersion;, +import javax.lang.model.element.Element;, +import javax.lang.model.element.ExecutableElement;, +import javax.lang.model.element.Modifier;, +import javax.lang.model.element.TypeElement;, +import javax.lang.model.element.VariableElement;, +import javax.lang.model.type.DeclaredType;, +import javax.lang.model.type.TypeKind;, +import javax.lang.model.type.TypeMirror;, +import javax.lang.model.util.Elements;, +import javax.lang.model.util.Types;, +import javax.tools.JavaFileObject;, +, +import static javax.lang.model.element.ElementKind.CLASS;, +import static javax.lang.model.element.ElementKind.METHOD;, +import static javax.lang.model.element.Modifier.PRIVATE;, +import static javax.lang.model.element.Modifier.STATIC;, +import static javax.tools.Diagnostic.Kind.ERROR;, +, +public final class ButterKnifeProcessor extends AbstractProcessor {, +  public static final String SUFFIX = "$$ViewInjector";, +  static final String VIEW_TYPE = "android.view.View";, +  private static final Map<String, Listener> LISTENER_MAP = new LinkedHashMap<String, Listener>();, +  private static final List<Class<? extends Annotation>> LISTENERS = Arrays.asList(//, +      OnCheckedChanged.class, //, +      OnClick.class, //, +      OnEditorAction.class, //, +      OnFocusChanged.class, //, +      OnItemClick.class, //, +      OnItemLongClick.class, //, +      OnLongClick.class //, +  );, +, +  private Elements elementUtils;, +  private Types typeUtils;, +  private Filer filer;, +, +  @Override public synchronized void init(ProcessingEnvironment env) {, +    super.init(env);, +, +    elementUtils = env.getElementUtils();, +    typeUtils = env.getTypeUtils();, +    filer = env.getFiler();, +  }, +, +  @Override public Set<String> getSupportedAnnotationTypes() {, +    Set<String> supportTypes = new LinkedHashSet<String>();, +    supportTypes.add(InjectView.class.getCanonicalName());, +    for (Class<? extends Annotation> listener : LISTENERS) {, +      supportTypes.add(listener.getCanonicalName());, +    }, +, +    return supportTypes;, +  }, +, +  @Override public boolean process(Set<? extends TypeElement> elements, RoundEnvironment env) {, +    Map<TypeElement, ViewInjector> targetClassMap = findAndParseTargets(env);, +, +    for (Map.Entry<TypeElement, ViewInjector> entry : targetClassMap.entrySet()) {, +      TypeElement typeElement = entry.getKey();, +      ViewInjector viewInjector = entry.getValue();, +]