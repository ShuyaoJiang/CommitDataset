[+++ b/build.gradle, +      'androidTools': '26.0.0-alpha8',, +++ b/build.gradle, +      'androidTools': '26.0.0-alpha8',, +++ b/butterknife-lint/src/main/java/butterknife/lint/InvalidR2UsageDetector.java, +import com.android.tools.lint.client.api.UElementHandler;, +import org.jetbrains.uast.UAnnotation;, +import org.jetbrains.uast.UClass;, +import org.jetbrains.uast.UElement;, +import org.jetbrains.uast.UExpression;, +import org.jetbrains.uast.UFile;, +import org.jetbrains.uast.UQualifiedReferenceExpression;, +import org.jetbrains.uast.USimpleNameReferenceExpression;, +import org.jetbrains.uast.visitor.AbstractUastVisitor;, +public class InvalidR2UsageDetector extends Detector implements Detector.UastScanner {, +  @Override public List<Class<? extends UElement>> getApplicableUastTypes() {, +    return Collections.singletonList(UClass.class);, +  @Override public UElementHandler createUastHandler(final JavaContext context) {, +    return new UElementHandler() {, +      @Override public void visitClass(UClass node) {, +  private static class R2UsageVisitor extends AbstractUastVisitor {, +    @Override public boolean visitAnnotation(UAnnotation annotation) {, +      return true;, +    @Override public boolean visitQualifiedReferenceExpression(UQualifiedReferenceExpression node) {, +      detectR2(context, node);, +      return super.visitQualifiedReferenceExpression(node);, +    @Override, +    public boolean visitSimpleNameReferenceExpression(USimpleNameReferenceExpression node) {, +      detectR2(context, node);, +      return super.visitSimpleNameReferenceExpression(node);, +    }, +, +    private static void detectR2(JavaContext context, UElement node) {, +      UFile sourceFile = context.getUastFile();, +      List<UClass> classes = sourceFile.getClasses();, +      if (!classes.isEmpty() && classes.get(0).getName() != null) {, +        String qualifiedName = classes.get(0).getName();, +        if (qualifiedName.contains("_ViewBinder"), +            || qualifiedName.contains("_ViewBinding"), +    private static boolean isR2Expression(UElement node) {, +      UElement parentNode = node.getUastParent();, +      if (parentNode == null) {, +      String text = node.asSourceString();, +      UElement parent = LintUtils.skipParentheses(parentNode);, +          && parent instanceof UExpression, +          && endsWithAny(parent.asSourceString(), SUPPORTED_TYPES);]