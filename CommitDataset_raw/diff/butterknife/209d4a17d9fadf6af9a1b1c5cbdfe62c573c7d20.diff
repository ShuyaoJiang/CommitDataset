[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName unbinderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +    this.unbinderClassName = unbinderClassName;, +    if (isGeneratingUnbinder()) {, +      files.add(JavaFile.builder(unbinderClassName.packageName(), createUnbinderClass()), +  private TypeSpec createUnbinderClass() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(unbinderClassName.simpleName()), +    if (hasInheritedUnbinder()) {, +      result.superclass(ParameterizedTypeName.get(getInheritedUnbinder(), targetType));, +    result.addMethod(createUnbinderConstructor(targetType));, +      result.addMethod(createUnbindInterfaceMethod(result, targetType));, +  private MethodSpec createUnbinderConstructor(TypeName targetType) {, +    if (hasInheritedUnbinder()) {, +  private MethodSpec createUnbindInterfaceMethod(TypeSpec.Builder unbinderClass,, +    boolean rootUnbinderWithFields = !hasInheritedUnbinder() && hasFieldBindings();, +    if (hasFieldBindings() || rootUnbinderWithFields) {, +    if (!hasInheritedUnbinder()) {, +      String target = rootUnbinderWithFields ? "target" : "this.target";, +        addFieldAndUnbindStatement(unbinderClass, result, bindings);, +    if (!hasInheritedUnbinder()) {, +    // Only add fields to the unbinder if there are method bindings., +    if (isFinal && !isGeneratingUnbinder()) {, +    if (isGeneratingUnbinder()) {, +        invoke.add("return new $T", unbinderClassName);, +        invoke.add("return new $T<>", unbinderClassName);, +    if (isGeneratingUnbinder() || !isFinal) {, +    if (!isGeneratingUnbinder()) {, +    if (!hasInheritedUnbinder() && hasParentBinding()) {, +    // Add the view reference to the unbinder., +      if (isGeneratingUnbinder()) {, +      boolean requiresRemoval = isGeneratingUnbinder() && listener.remover().length() != 0;, +  /** True when this type contains an unbinder subclass. */, +  private boolean isGeneratingUnbinder() {, +    return hasViewBindings() || hasInheritedUnbinder();, +  /** True when any of this type's parents contain an unbinder subclass. */, +  private boolean hasInheritedUnbinder() {, +    return hasParentBinding() && parentBinding.isGeneratingUnbinder();, +  /** Return the nearest unbinder subclass from this type's parents. */, +  private ClassName getInheritedUnbinder() {, +    return parentBinding.unbinderClassName;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName unbinderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +    this.unbinderClassName = unbinderClassName;, +    if (isGeneratingUnbinder()) {, +      files.add(JavaFile.builder(unbinderClassName.packageName(), createUnbinderClass()), +  private TypeSpec createUnbinderClass() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(unbinderClassName.simpleName()), +    if (hasInheritedUnbinder()) {, +      result.superclass(ParameterizedTypeName.get(getInheritedUnbinder(), targetType));, +    result.addMethod(createUnbinderConstructor(targetType));, +      result.addMethod(createUnbindInterfaceMethod(result, targetType));, +  private MethodSpec createUnbinderConstructor(TypeName targetType) {, +    if (hasInheritedUnbinder()) {, +  private MethodSpec createUnbindInterfaceMethod(TypeSpec.Builder unbinderClass,, +    boolean rootUnbinderWithFields = !hasInheritedUnbinder() && hasFieldBindings();, +    if (hasFieldBindings() || rootUnbinderWithFields) {, +    if (!hasInheritedUnbinder()) {, +      String target = rootUnbinderWithFields ? "target" : "this.target";, +        addFieldAndUnbindStatement(unbinderClass, result, bindings);, +    if (!hasInheritedUnbinder()) {, +    // Only add fields to the unbinder if there are method bindings., +    if (isFinal && !isGeneratingUnbinder()) {, +    if (isGeneratingUnbinder()) {, +        invoke.add("return new $T", unbinderClassName);, +        invoke.add("return new $T<>", unbinderClassName);, +    if (isGeneratingUnbinder() || !isFinal) {, +    if (!isGeneratingUnbinder()) {, +    if (!hasInheritedUnbinder() && hasParentBinding()) {, +    // Add the view reference to the unbinder., +      if (isGeneratingUnbinder()) {, +      boolean requiresRemoval = isGeneratingUnbinder() && listener.remover().length() != 0;, +  /** True when this type contains an unbinder subclass. */, +  private boolean isGeneratingUnbinder() {, +    return hasViewBindings() || hasInheritedUnbinder();, +  /** True when any of this type's parents contain an unbinder subclass. */, +  private boolean hasInheritedUnbinder() {, +    return hasParentBinding() && parentBinding.isGeneratingUnbinder();, +  /** Return the nearest unbinder subclass from this type's parents. */, +  private ClassName getInheritedUnbinder() {, +    return parentBinding.unbinderClassName;, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +      ClassName unbinderClassName = ClassName.get(packageName, className + "_ViewBinding");, +      bindingClass = new BindingClass(targetType, binderClassName, unbinderClassName, isFinal);]