[+++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code array} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(array[i], i);, +      }, +    }, +  }, +, +  /** Apply the specified {@code action} across the {@code array} of views. */, +  public static <T extends View> void apply(T[] array, Action<? super T> action) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      action.apply(array[i], i);, +    }, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */, +  public static <T extends View, V> void apply(T[] array, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value, i);, +    }, +  }, +, +  /**, +   * Apply the specified {@code value} across the {@code array} of views using the {@code property}., +   */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T[] array, Property<? super T, V> setter,, +      V value) {, +    //noinspection ForLoopReplaceableByForEach, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value);, +    }, +  }, +, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +  /** Apply the specified {@code actions} across the {@code array} of views. */, +  @SafeVarargs, +  public static <T extends View> void apply(T[] array, Action<? super T>... actions) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      for (Action<? super T> action : actions) {, +        action.apply(array[i], i);, +      }, +    }, +  }, +, +  /** Apply the specified {@code action} across the {@code array} of views. */, +  public static <T extends View> void apply(T[] array, Action<? super T> action) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      action.apply(array[i], i);, +    }, +  }, +, +  /** Set the {@code value} using the specified {@code setter} across the {@code array} of views. */, +  public static <T extends View, V> void apply(T[] array, Setter<? super T, V> setter, V value) {, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value, i);, +    }, +  }, +, +  /**, +   * Apply the specified {@code value} across the {@code array} of views using the {@code property}., +   */, +  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH), +  public static <T extends View, V> void apply(T[] array, Property<? super T, V> setter,, +      V value) {, +    //noinspection ForLoopReplaceableByForEach, +    for (int i = 0, count = array.length; i < count; i++) {, +      setter.set(array[i], value);, +    }, +  }, +, +++ b/butterknife/src/test/java/butterknife/ButterKnifeTest.java, +  @Test public void propertyAppliedToEveryViewInList() {, +  @Test public void propertyAppliedToEveryViewInArray() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();, +, +    View[] views = new View[] { view1, view2, view3 };, +    ButterKnife.apply(views, PROPERTY_ENABLED, false);, +, +    assertThat(view1.isEnabled()).isFalse();, +    assertThat(view2.isEnabled()).isFalse();, +    assertThat(view3.isEnabled()).isFalse();, +  }, +, +  @Test public void actionAppliedToEveryViewInList() {, +  @Test public void actionAppliedToEveryViewInArray() {, +    View view1 = new View(Robolectric.application);, +    View view2 = new View(Robolectric.application);, +    View view3 = new View(Robolectric.application);, +    assertThat(view1.isEnabled()).isTrue();, +    assertThat(view2.isEnabled()).isTrue();, +    assertThat(view3.isEnabled()).isTrue();]