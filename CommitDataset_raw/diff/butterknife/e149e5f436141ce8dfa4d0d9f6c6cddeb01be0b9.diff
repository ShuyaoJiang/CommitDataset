[+++ b/README.md, +, +    // TODO Use views..., +    // TODO Use "injected" views..., +    // TODO Use "injected" views..., +dependency injection frameworks. They may be wrong in nomenclature, but perhaps, +there exists some use for this type of field assignment., +Non-Activity Injection, +----------------------, +, +You can also perform injection on arbitrary objects by supplying your own view, +root., +, +```java, +public class FancyFragment extends Fragment {, +  @InjectView(R.id.button1) Button button1;, +  @InjectView(R.id.button2) Button button2;, +, +  @Override View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {, +    View view = inflater.inflate(R.layout.fancy_fragment, container, false);, +    Views.inject(this, view);, +    // TODO Use "injected" views..., +    return view;, +  }, +}, +```, +, +Another use is simplifying the view holder pattern inside of a list adapter., +, +```java, +public class MyAdapter extends BaseAdapter {, +  @Override public void getView(int position, View view, ViewGroup parent) {, +    ViewHolder holder;, +    if (view != null) {, +      holder = (ViewHolder) view.getTag();, +    } else {, +      view = inflater.inflate(R.layout.whatever, parent, false);, +      holder = new ViewHolder(view);, +      view.setTag(holder);, +    }, +, +    holder.name.setText("John Doe");, +    // etc..., +, +    return convertView;, +  }, +, +  static class ViewHolder {, +    @InjectView(R.id.title) TextView name;, +    @InjectView(R.id.job_title) TextView jobTitle;, +, +    public ViewHolder(View view) {, +      Views.inject(this, view);, +    }, +  }, +}, +```, +, +You can see this implementation in action in the provided sample., +, +]