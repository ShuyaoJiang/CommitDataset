[+++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_LEGACY =, +  private static final ClassName UI_THREAD =, +  private static final ClassName CALL_SUPER_LEGACY =, +  private static final ClassName CALL_SUPER =, +  static final ClassName CONTEXT_COMPAT_LEGACY =, +  static final ClassName CONTEXT_COMPAT =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);, +  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {, +      result.addMethod(createBindingConstructorForView(useLegacyTypes));, +      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));, +      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));, +      result.addMethod(createBindingViewDelegateConstructor(useLegacyTypes));, +    result.addMethod(createBindingConstructor(sdk, debuggable, useLegacyTypes));, +      result.addMethod(createBindingUnbindMethod(result, useLegacyTypes));, +  private MethodSpec createBindingViewDelegateConstructor(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForView(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForActivity(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructorForDialog(boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +  private MethodSpec createBindingConstructor(int sdk, boolean debuggable, boolean useLegacyTypes) {, +        .addAnnotation(useLegacyTypes ? UI_THREAD_LEGACY : UI_THREAD), +        addViewBinding(constructor, binding, debuggable, useLegacyTypes);, +  private MethodSpec createBindingUnbindMethod(TypeSpec.Builder bindingClass,, +      boolean useLegacyTypes) {, +      result.addAnnotation(useLegacyTypes ? CALL_SUPER_LEGACY : CALL_SUPER);, +        addFieldAndUnbindStatement(bindingClass, result, binding, useLegacyTypes);, +      ViewBinding bindings, boolean useLegacyTypes) {, +        TypeName listenerClassName = bestGuess(getType(listenerClass, useLegacyTypes));, +      String targetType = getTargetType(listenerClass, useLegacyTypes);, +  private static String getType(ListenerClass listenerClass, boolean useLegacyTypes) {, +    String legacyType = listenerClass.legacyType();, +    if (useLegacyTypes && !legacyType.isEmpty()) {, +      type = legacyType;, +  private static String getTargetType(ListenerClass listenerClass, boolean useLegacyTypes) {, +    String legacyTargetType = listenerClass.legacyTargetType();, +    if (useLegacyTypes && !legacyTargetType.isEmpty()) {, +      targetType = legacyTargetType;, +      boolean useLegacyTypes) {, +    addMethodBindings(result, binding, debuggable, useLegacyTypes);, +      boolean useLegacyTypes) {, +          .superclass(ClassName.bestGuess(getType(listener, useLegacyTypes)));, +        TypeName listenerClassName = bestGuess(getType(listener, useLegacyTypes));, +      String targetType = getTargetType(listener, useLegacyTypes);, +++ b/build.gradle, +      'androidTools': '26.2.0',, +++ b/butterknife-annotations/src/main/java/butterknife/OnPageChange.java, +    targetType = "androidx.viewpager.widget.ViewPager",, +    legacyTargetType = "android.support.v4.view.ViewPager",, +    type = "androidx.viewpager.widget.ViewPager.OnPageChangeListener",, +    legacyType = "android.support.v4.view.ViewPager.OnPageChangeListener",, +++ b/butterknife-annotations/src/main/java/butterknife/internal/ListenerClass.java, +  String legacyTargetType() default "";, +  String legacyType() default "";, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingSet.java, +  private static final ClassName UI_THREAD_LEGACY =, +  private static final ClassName UI_THREAD =, +  private static final ClassName CALL_SUPER_LEGACY =, +  private static final ClassName CALL_SUPER =, +  static final ClassName CONTEXT_COMPAT_LEGACY =, +  static final ClassName CONTEXT_COMPAT =, +  JavaFile brewJava(int sdk, boolean debuggable, boolean useLegacyTypes) {, +    TypeSpec bindingConfiguration = createType(sdk, debuggable, useLegacyTypes);, +  private TypeSpec createType(int sdk, boolean debuggable, boolean useLegacyTypes) {, +      result.addMethod(createBindingConstructorForView(useLegacyTypes));, +      result.addMethod(createBindingConstructorForActivity(useLegacyTypes));, +      result.addMethod(createBindingConstructorForDialog(useLegacyTypes));]