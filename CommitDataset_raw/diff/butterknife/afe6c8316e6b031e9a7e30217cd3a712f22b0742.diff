[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName generatedClassName;, +  BindingClass(TypeName targetTypeName, ClassName generatedClassName, boolean isFinal) {, +    this.generatedClassName = generatedClassName;, +    this.unbinderClassName = generatedClassName.nestedClass(UNBINDER_SIMPLE_NAME);, +    TypeSpec.Builder result = TypeSpec.classBuilder(generatedClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.generatedClassName, viewType));, +    return JavaFile.builder(generatedClassName.packageName(), result.build()), +  @Override public String toString() {, +    return generatedClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName generatedClassName;, +  BindingClass(TypeName targetTypeName, ClassName generatedClassName, boolean isFinal) {, +    this.generatedClassName = generatedClassName;, +    this.unbinderClassName = generatedClassName.nestedClass(UNBINDER_SIMPLE_NAME);, +    TypeSpec.Builder result = TypeSpec.classBuilder(generatedClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.generatedClassName, viewType));, +    return JavaFile.builder(generatedClassName.packageName(), result.build()), +  @Override public String toString() {, +    return generatedClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.ClassName;, +, +      String packageName = getPackageName(enclosingElement);, +      ClassName classFqcn = ClassName.get(packageName,, +          getClassName(enclosingElement, packageName) + BINDING_CLASS_SUFFIX);, +, +      bindingClass = new BindingClass(targetType, classFqcn, isFinal);]