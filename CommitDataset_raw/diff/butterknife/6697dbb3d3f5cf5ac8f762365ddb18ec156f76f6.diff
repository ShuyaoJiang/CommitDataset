[+++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, +            configureR2Generation(project, featureVariants), +            configureR2Generation(project, libraryVariants), +        is LibraryPlugin -> {, +          project.extensions[LibraryExtension::class].run {, +            configureR2Generation(project, libraryVariants), +          }, +        }, +        is AppPlugin -> {, +          project.extensions[AppExtension::class].run {, +            configureR2Generation(project, applicationVariants), +          }, +        }, +  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {, +      val outputDir = project.buildDir.resolve(, +          "generated/source/r2/${variant.dirName}"), +, +      val task = project.tasks.create("generate${variant.name.capitalize()}R2"), +      task.outputs.dir(outputDir), +      variant.registerJavaGeneratingTask(task, outputDir), +, +      val once = AtomicBoolean(), +        task.dependsOn(processResources), +, +        // Though there might be multiple outputs, their R files are all the same. Thus, we only, +        // need to configure the task once with the R.java input and action., +        if (once.compareAndSet(false, true)) {, +          val rPackage = processResources.packageForR, +          val pathToR = rPackage.replace('.', File.separatorChar), +          task.apply {, +            inputs.file(rFile), +, +            doLast {, +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2"), +            }, +          }, +++ b/butterknife-gradle-plugin/src/main/java/butterknife/plugin/ButterKnifePlugin.kt, +import java.util.concurrent.atomic.AtomicBoolean, +            configureR2Generation(project, featureVariants), +            configureR2Generation(project, libraryVariants), +        is LibraryPlugin -> {, +          project.extensions[LibraryExtension::class].run {, +            configureR2Generation(project, libraryVariants), +          }, +        }, +        is AppPlugin -> {, +          project.extensions[AppExtension::class].run {, +            configureR2Generation(project, applicationVariants), +          }, +        }, +  private fun configureR2Generation(project: Project, variants: DomainObjectSet<out BaseVariant>) {, +      val outputDir = project.buildDir.resolve(, +          "generated/source/r2/${variant.dirName}"), +, +      val task = project.tasks.create("generate${variant.name.capitalize()}R2"), +      task.outputs.dir(outputDir), +      variant.registerJavaGeneratingTask(task, outputDir), +, +      val once = AtomicBoolean(), +        task.dependsOn(processResources), +, +        // Though there might be multiple outputs, their R files are all the same. Thus, we only, +        // need to configure the task once with the R.java input and action., +        if (once.compareAndSet(false, true)) {, +          val rPackage = processResources.packageForR, +          val pathToR = rPackage.replace('.', File.separatorChar), +          task.apply {, +            inputs.file(rFile), +, +            doLast {, +              FinalRClassBuilder.brewJava(rFile, outputDir, rPackage, "R2"), +            }, +          }, +++ b/gradle.properties, +VERSION_NAME=8.7.1-SNAPSHOT]