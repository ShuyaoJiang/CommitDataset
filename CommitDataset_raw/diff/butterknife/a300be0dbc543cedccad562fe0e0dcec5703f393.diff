[+++ b/butterknife-compiler/pom.xml, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>javapoet</artifactId>, +    </dependency>, +++ b/butterknife-compiler/pom.xml, +    <dependency>, +      <groupId>com.squareup</groupId>, +      <artifactId>javapoet</artifactId>, +    </dependency>, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import android.content.res.Resources;, +import android.graphics.BitmapFactory;, +import butterknife.ButterKnife;, +import com.squareup.javapoet.ClassName;, +import com.squareup.javapoet.CodeBlock;, +import com.squareup.javapoet.JavaFile;, +import com.squareup.javapoet.MethodSpec;, +import com.squareup.javapoet.ParameterizedTypeName;, +import com.squareup.javapoet.TypeName;, +import com.squareup.javapoet.TypeSpec;, +import com.squareup.javapoet.TypeVariableName;, +import com.squareup.javapoet.WildcardTypeName;, +import static javax.lang.model.element.Modifier.FINAL;, +import static javax.lang.model.element.Modifier.PUBLIC;, +  JavaFile brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(className), +        .addModifiers(PUBLIC), +        .addTypeVariable(TypeVariableName.get("T", ClassName.bestGuess(targetClass)));, +      result.superclass(ParameterizedTypeName.get(ClassName.bestGuess(parentViewBinder),, +          TypeVariableName.get("T")));, +      result.addSuperinterface(, +          ParameterizedTypeName.get(ClassName.get(ButterKnife.ViewBinder.class),, +              TypeVariableName.get("T")));, +    result.addMethod(createBindMethod());, +    result.addMethod(createUnbindMethod());, +, +    return JavaFile.builder(classPackage, result.build()), +        .addFileComment("Generated code from Butter Knife. Do not modify!"), +        .build();, +  }, +, +  private MethodSpec createBindMethod() {, +    MethodSpec.Builder result = MethodSpec.methodBuilder("bind"), +        .addAnnotation(Override.class), +        .addModifiers(PUBLIC), +        .addParameter(ButterKnife.Finder.class, "finder", FINAL), +        .addParameter(TypeVariableName.get("T"), "target", FINAL), +        .addParameter(Object.class, "source");, +      result.addStatement("super.bind(finder, target, source)");, +      result.addStatement("$T view", View.class);, +        addViewBindings(result, bindings);, +        emitCollectionBinding(result, entry.getKey(), entry.getValue());, +      result.addStatement("$T res = finder.getContext(source).getResources()", Resources.class);, +          result.addStatement("target.$L = $T.decodeResource(res, $L)", binding.getName(),, +              BitmapFactory.class, binding.getId());, +          result.addStatement("target.$L = res.$L($L)", binding.getName(), binding.getMethod(),, +              binding.getId());, +    return result.build();, +  private void emitCollectionBinding(MethodSpec.Builder result, FieldCollectionViewBinding binding,, +    String ofName;, +        ofName = "arrayOf";, +        ofName = "listOf";, +    CodeBlock.Builder builder = CodeBlock.builder();, +        builder.add(", ");, +      String findMethod = binding.isRequired() ? "findRequiredView" : "findOptionalView";, +      builder.add("\nfinder.<$T>$L(source, $L, $S)", ClassName.bestGuess(binding.getType()),, +          findMethod, ids[i], asHumanDescription(Collections.singleton(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), ButterKnife.Finder.class,, +        ofName, builder.build());, +  private void addViewBindings(MethodSpec.Builder result, ViewBindings bindings) {, +      result.addStatement("view = finder.findOptionalView(source, $L, null)", bindings.getId());, +        result.addStatement("view = target", bindings.getId());, +        result.addStatement("view = finder.findRequiredView(source, $L, $S)", bindings.getId(),, +            asHumanDescription(requiredViewBindings));, +    addFieldBindings(result, bindings);, +    addMethodBindings(result, bindings);, +  private void addFieldBindings(MethodSpec.Builder result, ViewBindings bindings) {, +        result.addStatement("target.$L = finder.castView(view, $L, $S)", fieldBinding.getName(),, +            bindings.getId(), asHumanDescription(fieldBindings));, +        result.addStatement("target.$L = view", fieldBinding.getName());, +  private void addMethodBindings(MethodSpec.Builder result, ViewBindings bindings) {, +      result.beginControlFlow("if (view != null)");, +      TypeSpec.Builder callback = TypeSpec.anonymousClassBuilder(""), +          .superclass(ClassName.bestGuess(listener.type()));, +        MethodSpec.Builder callbackMethod = MethodSpec.methodBuilder(method.name()), +            .addAnnotation(Override.class), +            .addModifiers(PUBLIC), +            .returns(bestGuess(method.returnType()));, +          callbackMethod.addParameter(bestGuess(parameterTypes[i]), "p" + i);, +        CodeBlock.Builder builder = CodeBlock.builder();, +          builder.add("return ");, +          for (MethodViewBinding binding : methodBindings.get(method)) {, +            builder.add("target.$L(", binding.getName());, +              if (i > 0) {, +                builder.add(", ");, +              }, +, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n",, +                    bestGuess(parameter.getType()), listenerPosition, method.name(),]