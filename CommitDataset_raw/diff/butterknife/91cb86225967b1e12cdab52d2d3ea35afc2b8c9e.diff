[+++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName binderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +      boolean isFinal) {, +    this.binderClassName = binderClassName;, +    this.unbinderClassName = unbinderClassName;, +  Collection<JavaFile> brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(binderClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.binderClassName, targetType));, +    List<JavaFile> files = new ArrayList<>();, +      TypeSpec unbinder = createUnbinderClass(targetType);, +      files.add(JavaFile.builder(unbinderClassName.packageName(), unbinder), +          .addFileComment("Generated code from Butter Knife. Do not modify!"), +          .build(), +      );, +    files.add(JavaFile.builder(binderClassName.packageName(), result.build()), +        .build());, +, +    return files;, +        .addModifiers(PUBLIC);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PUBLIC);, +, +        .addModifiers(PUBLIC, STATIC);, +          .add("$T.$N(target", parentBinding.binderClassName, BIND_TO_TARGET);, +    return binderClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName binderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +      boolean isFinal) {, +    this.binderClassName = binderClassName;, +    this.unbinderClassName = unbinderClassName;, +  Collection<JavaFile> brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(binderClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.binderClassName, targetType));, +    List<JavaFile> files = new ArrayList<>();, +      TypeSpec unbinder = createUnbinderClass(targetType);, +      files.add(JavaFile.builder(unbinderClassName.packageName(), unbinder), +          .addFileComment("Generated code from Butter Knife. Do not modify!"), +          .build(), +      );, +    files.add(JavaFile.builder(binderClassName.packageName(), result.build()), +        .build());, +, +    return files;, +        .addModifiers(PUBLIC);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PUBLIC);, +, +        .addModifiers(PUBLIC, STATIC);, +          .add("$T.$N(target", parentBinding.binderClassName, BIND_TO_TARGET);, +    return binderClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.JavaFile;, +      for (JavaFile javaFile : bindingClass.brewJava()) {, +          javaFile.writeTo(filer);, +    }, +      String className = getClassName(enclosingElement, packageName);, +      ClassName binderClassName = ClassName.get(packageName, className + "_ViewBinder");, +      ClassName unbinderClassName = ClassName.get(packageName, className + "_ViewBinding");, +      bindingClass = new BindingClass(targetType, binderClassName, unbinderClassName, isFinal);, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/BindingClass.java, +  private final ClassName binderClassName;, +  BindingClass(TypeName targetTypeName, ClassName binderClassName, ClassName unbinderClassName,, +      boolean isFinal) {, +    this.binderClassName = binderClassName;, +    this.unbinderClassName = unbinderClassName;, +  Collection<JavaFile> brewJava() {, +    TypeSpec.Builder result = TypeSpec.classBuilder(binderClassName), +      result.superclass(ParameterizedTypeName.get(parentBinding.binderClassName, targetType));, +    List<JavaFile> files = new ArrayList<>();, +      TypeSpec unbinder = createUnbinderClass(targetType);, +      files.add(JavaFile.builder(unbinderClassName.packageName(), unbinder), +          .addFileComment("Generated code from Butter Knife. Do not modify!"), +          .build(), +      );, +    files.add(JavaFile.builder(binderClassName.packageName(), result.build()), +        .build());, +, +    return files;, +        .addModifiers(PUBLIC);, +    MethodSpec.Builder constructor = MethodSpec.constructorBuilder(), +        .addModifiers(PUBLIC);, +, +        .addModifiers(PUBLIC, STATIC);, +          .add("$T.$N(target", parentBinding.binderClassName, BIND_TO_TARGET);, +    return binderClassName.toString();, +++ b/butterknife-compiler/src/main/java/butterknife/compiler/ButterKnifeProcessor.java, +import com.squareup.javapoet.JavaFile;, +      for (JavaFile javaFile : bindingClass.brewJava()) {, +          javaFile.writeTo(filer);, +    }, +      String className = getClassName(enclosingElement, packageName);, +      ClassName binderClassName = ClassName.get(packageName, className + "_ViewBinder");, +      ClassName unbinderClassName = ClassName.get(packageName, className + "_ViewBinding");, +      bindingClass = new BindingClass(targetType, binderClassName, unbinderClassName, isFinal);, +++ b/butterknife-compiler/src/test/java/butterknife/BindArrayTest.java, +    JavaFileObject expectedSource = JavaFileObjects.forSourceString("test/Test_ViewBinder", "", +        + "public class Test_ViewBinder<T extends Test> implements ViewBinder<T> {\n", +        + "  public static void bindToTarget(Test target, Resources res) {\n"]