[+++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, +  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, +      alphaAnimation.setFillBefore(true);, +      alphaAnimation.setDuration(500);, +      alphaAnimation.setStartOffset(index * 100);, +      view.startAnimation(alphaAnimation);, +    }, +  };, +, +  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), +  List<View> headerViews;, +, +    ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, +  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, +      alphaAnimation.setFillBefore(true);, +      alphaAnimation.setDuration(500);, +      alphaAnimation.setStartOffset(index * 100);, +      view.startAnimation(alphaAnimation);, +    }, +  };, +, +  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), +  List<View> headerViews;, +, +    ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife/pom.xml, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/butterknife-sample/src/main/java/com/example/butterknife/SimpleActivity.java, +import android.view.View;, +import android.view.animation.AlphaAnimation;, +import butterknife.InjectView;, +import butterknife.InjectViews;, +import butterknife.OnClick;, +import java.util.List;, +  private static final ButterKnife.Action<View> ALPHA_FADE = new ButterKnife.Action<View>() {, +    @Override public void apply(View view, int index) {, +      AlphaAnimation alphaAnimation = new AlphaAnimation(0, 1);, +      alphaAnimation.setFillBefore(true);, +      alphaAnimation.setDuration(500);, +      alphaAnimation.setStartOffset(index * 100);, +      view.startAnimation(alphaAnimation);, +    }, +  };, +, +  @InjectViews({ R.id.title, R.id.subtitle, R.id.hello }), +  List<View> headerViews;, +, +    ButterKnife.apply(headerViews, ALPHA_FADE);, +++ b/butterknife/pom.xml, +      <groupId>com.squareup</groupId>, +      <artifactId>fest-android</artifactId>, +      <scope>test</scope>, +    </dependency>, +    <dependency>, +++ b/butterknife/src/main/java/butterknife/ButterKnife.java, +import android.util.Property;, +import java.util.List;, + * Group multiple views together into a {@link List} or array., + * <pre><code>, + * {@literal @}InjectViews({R.id.first_name, R.id.middle_name, R.id.last_name}), + * List<EditText> nameViews;, + * </code></pre>, + * There are two convenience methods for working with view collections:, + * <ul>, + * <li>{@link #apply(List, Action)} &ndash; Applies an action to each view.</li>, + * <li>{@link #apply(List, Property, Object)} &ndash; Applies a value to each view using a, + * property.</li>, + * </ul>, + * <p>, + * @see InjectViews, +    throw new AssertionError("No instances.");, +   * A means of finding a view in either an {@link Activity} or a {@link View}. Exposed for use, +   * only by generated code., +      @Override public View findOptionalView(Object source, int id) {, +      @Override public View findOptionalView(Object source, int id) {, +    public static <T extends View> T[] arrayOf(T... views) {, +      return views;, +    }, +]