[+++ b/butterknife/src/main/java/butterknife/BindStringArray.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified string array resource ID., + * <pre><code>, + * {@literal @}BindStringArray(R.array.countries) String[] countries;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindStringArray {, +  /** String array resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/BindStringArray.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified string array resource ID., + * <pre><code>, + * {@literal @}BindStringArray(R.array.countries) String[] countries;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD), +public @interface BindStringArray {, +  /** String array resource ID to which the field will be bound. */, +  int value();, +}, +++ b/butterknife/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import butterknife.BindStringArray;, +    types.add(BindStringArray.class.getCanonicalName());, +    // Process each @BindStringArray element., +    for (Element element : env.getElementsAnnotatedWith(BindStringArray.class)) {, +      try {, +        parseResourceStringArray(element, targetClassMap, erasedTargetNames);, +      } catch (Exception e) {, +        logParsingError(element, BindStringArray.class, e);, +      }, +    }, +, +  private void parseResourceStringArray(Element element,, +      Map<TypeElement, BindingClass> targetClassMap, Set<String> erasedTargetNames) {, +    boolean hasError = false;, +    TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();, +, +    // Verify that the target type is String[]., +    if (!"java.lang.String[]".equals(element.asType().toString())) {, +      error(element, "@%s field type must be 'String[]'. (%s.%s)",, +          BindStringArray.class.getSimpleName(), enclosingElement.getQualifiedName(),, +          element.getSimpleName());, +      hasError = true;, +    }, +, +    // Verify common generated code restrictions., +    hasError |= isInaccessibleViaGeneratedCode(BindStringArray.class, "fields", element);, +    hasError |= isBindingInWrongPackage(BindStringArray.class, element);, +, +    if (hasError) {, +      return;, +    }, +, +    // Assemble information on the field., +    String name = element.getSimpleName().toString();, +    int id = element.getAnnotation(BindStringArray.class).value();, +, +    BindingClass bindingClass = getOrCreateTargetClass(targetClassMap, enclosingElement);, +    FieldResourceBinding binding = new FieldResourceBinding(id, name, "getStringArray");, +    bindingClass.addResource(binding);, +, +    erasedTargetNames.add(enclosingElement.toString());, +  }, +, +++ b/butterknife/src/main/java/butterknife/BindStringArray.java, +package butterknife;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.Target;, +, +import static java.lang.annotation.ElementType.FIELD;, +import static java.lang.annotation.RetentionPolicy.CLASS;, +, +/**, + * Bind a field to the specified string array resource ID., + * <pre><code>, + * {@literal @}BindStringArray(R.array.countries) String[] countries;, + * </code></pre>, + */, +@Retention(CLASS) @Target(FIELD)]