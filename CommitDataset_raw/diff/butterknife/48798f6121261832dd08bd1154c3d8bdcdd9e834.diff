[+++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import com.squareup.javapoet.TypeName;, +  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";, +    if (qualifiedName.startsWith("android.")) {, +    if (qualifiedName.startsWith("java.")) {, +    TypeName type = TypeName.get(elementType);, +    TypeName type = TypeName.get(viewType);, +            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import com.squareup.javapoet.TypeName;, +  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";, +    if (qualifiedName.startsWith("android.")) {, +    if (qualifiedName.startsWith("java.")) {, +    TypeName type = TypeName.get(elementType);, +    TypeName type = TypeName.get(viewType);, +            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));, +++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java, +import com.squareup.javapoet.TypeName;, +, +  private final TypeName type;, +  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {, +  public TypeName getType() {, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java, +import static java.util.Collections.singletonList;, +  private static final ClassName FINDER = ClassName.get("butterknife", "ButterKnife", "Finder");, +  private static final ClassName VIEW_BINDER =, +      ClassName.get("butterknife", "ButterKnife", "ViewBinder");, +, +      result.addSuperinterface(ParameterizedTypeName.get(VIEW_BINDER, TypeVariableName.get("T")));, +        .addParameter(FINDER, "finder", FINAL), +      builder.add("\nfinder.<$T>$L(source, $L, $S)", binding.getType(), findMethod, ids[i],, +          asHumanDescription(singletonList(binding)));, +    result.addStatement("target.$L = $T.$L($L)", binding.getName(), FINDER, ofName,, +        builder.build());, +                builder.add("finder.<$T>castParam(p$L, $S, $L, $S, $L)\n", parameter.getType(),, +                    listenerPosition, method.name(), listenerPosition, binding.getName(), i);, +++ b/butterknife-compiler/src/main/java/butterknife/internal/ButterKnifeProcessor.java, +import com.squareup.javapoet.TypeName;, +  private static final String BINDING_CLASS_SUFFIX = "$$ViewBinder";, +    if (qualifiedName.startsWith("android.")) {, +    if (qualifiedName.startsWith("java.")) {, +    TypeName type = TypeName.get(elementType);, +    TypeName type = TypeName.get(viewType);, +            parameters[i] = new Parameter(j, TypeName.get(methodParameterType));, +++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldCollectionViewBinding.java, +import com.squareup.javapoet.TypeName;, +, +  private final TypeName type;, +  FieldCollectionViewBinding(String name, TypeName type, Kind kind, boolean required) {, +  public TypeName getType() {, +++ b/butterknife-compiler/src/main/java/butterknife/internal/FieldViewBinding.java, +import com.squareup.javapoet.TypeName;, +, +  private final TypeName type;, +  FieldViewBinding(String name, TypeName type, boolean required) {, +  public TypeName getType() {, +    return !VIEW_TYPE.equals(type.toString());, +++ b/butterknife-compiler/src/main/java/butterknife/internal/BindingClass.java]