[+++ b/jadx-core/src/main/java/jadx/core/utils/android/AndroidResourcesUtils.java, +import java.util.HashMap;, +import org.jetbrains.annotations.NotNull;, +import jadx.core.deobf.NameMapper;, +import jadx.core.dex.info.AccessInfo;, +import jadx.core.dex.info.ConstStorage;, +		Map<Integer, FieldNode> resFieldsMap = fillResFieldsMap(resCls);, +			ClassNode typeCls = innerClsMap.computeIfAbsent(, +					resource.getTypeName(),, +					name -> addClassForResType(resCls, rClsExists, name), +			);, +			String resName = resource.getKeyName();, +			FieldNode rField = typeCls.searchFieldByName(resName);, +				FieldInfo rFieldInfo = FieldInfo.from(typeCls.dex(), typeCls.getClassInfo(), resName, ArgType.INT);, +			FieldNode fieldNode = resFieldsMap.get(resource.getId());, +			if (fieldNode != null, +					&& !fieldNode.getName().equals(resName), +					&& NameMapper.isValidIdentifier(resName)) {, +				fieldNode.getFieldInfo().setAlias(resName);, +, +	@NotNull, +	private static ClassNode addClassForResType(ClassNode resCls, boolean rClsExists, String typeName) {, +		ClassNode newTypeCls = new ClassNode(resCls.dex(), resCls.getFullName() + "$" + typeName,, +				AccessFlags.ACC_PUBLIC | AccessFlags.ACC_STATIC | AccessFlags.ACC_FINAL);, +		resCls.addInnerClass(newTypeCls);, +		if (rClsExists) {, +			newTypeCls.addAttr(AType.COMMENTS, "added by JADX");, +		}, +		return newTypeCls;, +	}, +, +	@NotNull, +	private static Map<Integer, FieldNode> fillResFieldsMap(ClassNode resCls) {, +		Map<Integer, FieldNode> resFieldsMap = new HashMap<>();, +		ConstStorage constStorage = resCls.root().getConstValues();, +		Map<Object, FieldNode> constFields = constStorage.getGlobalConstFields();, +		for (Map.Entry<Object, FieldNode> entry : constFields.entrySet()) {, +			Object key = entry.getKey();, +			FieldNode field = entry.getValue();, +			AccessInfo accessFlags = field.getAccessFlags();, +			if (field.getType().equals(ArgType.INT), +					&& accessFlags.isStatic(), +					&& accessFlags.isFinal(), +					&& key instanceof Integer) {, +				resFieldsMap.put((Integer) key, field);, +			}, +		}, +		return resFieldsMap;, +	}, +}]