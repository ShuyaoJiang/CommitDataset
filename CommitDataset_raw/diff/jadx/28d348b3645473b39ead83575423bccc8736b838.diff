[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/core/clsp/NClass.java, +	private final int id;, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/core/clsp/NClass.java, +	private final int id;, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			if (!aCls.startsWith(Consts.DALVIK_ANNOTATION_PKG)) {, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/core/clsp/NClass.java, +	private final int id;, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			if (!aCls.startsWith(Consts.DALVIK_ANNOTATION_PKG)) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.Consts;, +				ClassInfo superCallCls = getClassForSuperCall(code, callMth);, +				if (superCallCls != null) {, +					useClass(code, superCallCls);, +					code.add('.');, +				}, +	@Nullable, +	private ClassInfo getClassForSuperCall(CodeWriter code, MethodInfo callMth) {, +		ClassNode useCls = mth.getParentClass();, +		ClassInfo insnCls = useCls.getAlias();, +		ClassInfo declClass = callMth.getDeclClass();, +		if (insnCls.equals(declClass)) {, +			return null;, +		}, +		ClassNode topClass = useCls.getTopParentClass();, +		if (topClass.getClassInfo().equals(declClass)) {, +			return declClass;, +		}, +		// search call class, +		ClassNode nextParent = useCls;, +		do {, +			ClassInfo nextClsInfo = nextParent.getClassInfo();, +			if (nextClsInfo.equals(declClass), +					|| ArgType.isInstanceOf(mth.dex(), nextClsInfo.getType(), declClass.getType())) {, +				if (nextParent == useCls) {, +					return null;, +				}, +				return nextClsInfo;, +			}, +			nextParent = nextParent.getParentClass();, +		} while (nextParent != null && nextParent != topClass);, +, +		// search failed, just return parent class, +		return useCls.getParentClass().getClassInfo();, +	}, +, +		if (Consts.DEBUG) {, +			code.add("/* inline method: ").add(callMthNode.toString()).add("*/").startLine();, +		}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/core/clsp/NClass.java, +	private final int id;, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			if (!aCls.startsWith(Consts.DALVIK_ANNOTATION_PKG)) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.Consts;, +				ClassInfo superCallCls = getClassForSuperCall(code, callMth);, +				if (superCallCls != null) {, +					useClass(code, superCallCls);, +					code.add('.');, +				}, +	@Nullable, +	private ClassInfo getClassForSuperCall(CodeWriter code, MethodInfo callMth) {, +		ClassNode useCls = mth.getParentClass();, +		ClassInfo insnCls = useCls.getAlias();, +		ClassInfo declClass = callMth.getDeclClass();, +		if (insnCls.equals(declClass)) {, +			return null;]