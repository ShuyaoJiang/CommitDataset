[+++ b/src/main/java/jadx/codegen/MethodGen.java, +		if (mth.getThisArg() != null) {, +++ b/src/main/java/jadx/codegen/MethodGen.java, +		if (mth.getThisArg() != null) {, +++ b/src/main/java/jadx/dex/instructions/args/ArgType.java, +import java.util.Collections;, +		if (str.isEmpty()) {, +			return Collections.emptyList();, +		}, +++ b/src/main/java/jadx/codegen/MethodGen.java, +		if (mth.getThisArg() != null) {, +++ b/src/main/java/jadx/dex/instructions/args/ArgType.java, +import java.util.Collections;, +		if (str.isEmpty()) {, +			return Collections.emptyList();, +		}, +++ b/src/main/java/jadx/dex/nodes/MethodNode.java, +			if (argsTypes.isEmpty()) {, +				return false;, +			}, +				argsTypes.add(0, mthInfo.getArgumentsTypes().get(0));, +			if (argsTypes.size() != mthInfo.getArgumentsTypes().size()) {, +				return false;, +		}, +, +++ b/src/main/java/jadx/codegen/MethodGen.java, +		if (mth.getThisArg() != null) {, +++ b/src/main/java/jadx/dex/instructions/args/ArgType.java, +import java.util.Collections;, +		if (str.isEmpty()) {, +			return Collections.emptyList();, +		}, +++ b/src/main/java/jadx/dex/nodes/MethodNode.java, +			if (argsTypes.isEmpty()) {, +				return false;, +			}, +				argsTypes.add(0, mthInfo.getArgumentsTypes().get(0));, +			if (argsTypes.size() != mthInfo.getArgumentsTypes().size()) {, +				return false;, +		}, +, +++ b/src/main/java/jadx/utils/Utils.java, +				case '?':, +				case '*':, +++ b/src/main/java/jadx/codegen/MethodGen.java, +		if (mth.getThisArg() != null) {, +++ b/src/main/java/jadx/dex/instructions/args/ArgType.java, +import java.util.Collections;, +		if (str.isEmpty()) {, +			return Collections.emptyList();, +		}, +++ b/src/main/java/jadx/dex/nodes/MethodNode.java, +			if (argsTypes.isEmpty()) {, +				return false;, +			}, +				argsTypes.add(0, mthInfo.getArgumentsTypes().get(0));, +			if (argsTypes.size() != mthInfo.getArgumentsTypes().size()) {, +				return false;, +		}, +, +++ b/src/main/java/jadx/utils/Utils.java, +				case '?':, +				case '*':, +++ b/src/samples/java/jadx/samples/TestGenerics.java, +import java.util.Enumeration;, +	private class TestConstructor implements Enumeration<String> {, +		private final TestGenerics a;, +, +		TestConstructor(TestGenerics a) {, +			this.a = a;, +		}, +, +		@Override, +		public boolean hasMoreElements() {, +			return false;, +		}, +, +		@Override, +		public String nextElement() {, +			return null;, +		}, +	}, +, +	public Enumeration<String> testThis() {, +		return new TestConstructor(this);, +	}, +]