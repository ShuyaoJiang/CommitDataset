[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import static jadx.core.utils.Utils.lockList;, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import static jadx.core.utils.Utils.lockList;, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +import static jadx.core.utils.Utils.lockList;, +, +		exceptionHandlers = Collections.emptyList();, +		loops = Collections.emptyList();, +		blocks = lockList(blocks);, +		exitBlocks = lockList(exitBlocks);, +		loops = lockList(loops);, +		blocks.forEach(BlockNode::lock);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import static jadx.core.utils.Utils.lockList;, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +import static jadx.core.utils.Utils.lockList;, +, +		exceptionHandlers = Collections.emptyList();, +		loops = Collections.emptyList();, +		blocks = lockList(blocks);, +		exitBlocks = lockList(exitBlocks);, +		loops = lockList(loops);, +		blocks.forEach(BlockNode::lock);, +++ b/jadx-core/src/main/java/jadx/core/utils/ImmutableList.java, +package jadx.core.utils;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Comparator;, +import java.util.Iterator;, +import java.util.List;, +import java.util.ListIterator;, +import java.util.Objects;, +import java.util.RandomAccess;, +import java.util.function.Consumer;, +import java.util.function.Predicate;, +import java.util.function.UnaryOperator;, +, +import org.jetbrains.annotations.NotNull;, +, +/**, + * Simple immutable list implementation, + * Warning: some methods not implemented!, + */, +public final class ImmutableList<E> implements List<E>, RandomAccess {, +	private final E[] arr;, +, +	@SuppressWarnings("unchecked"), +	public ImmutableList(Object[] arr) {, +		this.arr = (E[]) Objects.requireNonNull(arr);, +	}, +, +	@Override, +	public int size() {, +		return arr.length;, +	}, +, +	@Override, +	public boolean isEmpty() {, +		return arr.length == 0;, +	}, +, +	@Override, +	public E get(int index) {, +		return arr[index];, +	}, +, +	@Override, +	public int indexOf(Object o) {, +		int len = arr.length;, +		for (int i = 0; i < len; i++) {, +			E e = arr[i];, +			if (Objects.equals(e, o)) {, +				return i;, +			}, +		}, +		return -1;, +	}, +, +	@Override, +	public int lastIndexOf(Object o) {, +		for (int i = arr.length - 1; i > 0; i--) {, +			E e = arr[i];, +			if (Objects.equals(e, o)) {, +				return i;, +			}, +		}, +		return -1;, +	}, +, +	@Override, +	public boolean contains(Object o) {, +		return indexOf(o) != -1;, +	}, +, +	@Override]