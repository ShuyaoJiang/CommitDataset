[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +public class JadxCLIArgs implements IJadxArgs {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +public class JadxCLIArgs implements IJadxArgs {, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +		if (deobfMapFile.exists() && !args.isDeobfuscationForceSave()) {, +		LOG.info("Loading obfuscation map from: {}", deobfMapFile.getAbsoluteFile());, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +public class JadxCLIArgs implements IJadxArgs {, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +		if (deobfMapFile.exists() && !args.isDeobfuscationForceSave()) {, +		LOG.info("Loading obfuscation map from: {}", deobfMapFile.getAbsoluteFile());, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +import jadx.gui.settings.JadxSettings;, +import jadx.gui.settings.JadxSettingsAdapter;, +			final JadxSettings jadxArgs = JadxSettingsAdapter.load();, +			// overwrite loaded settings by command line arguments, +					MainWindow window = new MainWindow(jadxArgs);, +					window.open();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +public class JadxCLIArgs implements IJadxArgs {, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +		if (deobfMapFile.exists() && !args.isDeobfuscationForceSave()) {, +		LOG.info("Loading obfuscation map from: {}", deobfMapFile.getAbsoluteFile());, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +import jadx.gui.settings.JadxSettings;, +import jadx.gui.settings.JadxSettingsAdapter;, +			final JadxSettings jadxArgs = JadxSettingsAdapter.load();, +			// overwrite loaded settings by command line arguments, +					MainWindow window = new MainWindow(jadxArgs);, +					window.open();, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java, +package jadx.gui.settings;, +, +import jadx.cli.JadxCLIArgs;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +public class JadxSettings extends JadxCLIArgs {, +, +	private static final String USER_HOME = System.getProperty("user.home");, +	private static final int RECENT_FILES_COUNT = 15;, +, +	static final Set<String> SKIP_FIELDS = new HashSet<String>(Arrays.asList(, +			"files", "input", "outputDir", "printHelp", +	));, +, +	private String lastOpenFilePath = USER_HOME;, +	private String lastSaveFilePath = USER_HOME;, +	private boolean flattenPackage = false;, +	private boolean checkForUpdates = true;, +	private List<String> recentFiles = new ArrayList<String>();, +, +	public void sync() {, +		JadxSettingsAdapter.store(this);, +	}, +, +	public String getLastOpenFilePath() {, +		return lastOpenFilePath;, +	}, +, +	public void setLastOpenFilePath(String lastOpenFilePath) {, +		this.lastOpenFilePath = lastOpenFilePath;, +		sync();, +	}, +, +	public String getLastSaveFilePath() {, +		return lastSaveFilePath;, +	}, +, +	public void setLastSaveFilePath(String lastSaveFilePath) {, +		this.lastSaveFilePath = lastSaveFilePath;, +		sync();, +	}, +, +	public boolean isFlattenPackage() {, +		return flattenPackage;, +	}, +, +	public void setFlattenPackage(boolean flattenPackage) {, +		this.flattenPackage = flattenPackage;, +		sync();, +	}, +, +	public boolean isCheckForUpdates() {, +		return checkForUpdates;, +	}, +, +	public void setCheckForUpdates(boolean checkForUpdates) {, +		this.checkForUpdates = checkForUpdates;, +		sync();, +	}, +, +	public Iterable<String> getRecentFiles() {, +		return recentFiles;, +	}]