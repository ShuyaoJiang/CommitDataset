[+++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +import java.util.LinkedHashSet;, +		Set<ClassNode> clsParents = new LinkedHashSet<>();, +		collectClassHierarchy(mth.getParentClass(), clsParents);, +, +		Set<MethodInfo> overrideSet = new LinkedHashSet<>();, +		for (ClassNode classNode : clsParents) {, +			MethodInfo methodInfo = getMthOverride(classNode.getMethods(), mthSignature);, +			if (methodInfo != null) {, +				overrideSet.add(methodInfo);, +		if (overrideSet.isEmpty()) {, +			return;, +		}, +		OverridedMethodsNode overrideNode = getOverrideMethodsNode(overrideSet);, +		for (MethodInfo overrideMth : overrideSet) {, +			if (!ovrdMap.containsKey(overrideMth)) {, +				ovrdMap.put(overrideMth, overrideNode);, +				overrideNode.add(overrideMth);, +, +	private OverridedMethodsNode getOverrideMethodsNode(Set<MethodInfo> overrideSet) {, +		for (MethodInfo overrideMth : overrideSet) {, +			OverridedMethodsNode node = ovrdMap.get(overrideMth);, +			if (node != null) {, +				return node;, +		}, +		return null;, +	}, +, +	private MethodInfo getMthOverride(List<MethodNode> methods, String mthSignature) {, +		for (MethodNode m : methods) {, +			MethodInfo mthInfo = m.getMethodInfo();, +			if (mthInfo.getShortId().startsWith(mthSignature)) {, +				return mthInfo;, +			}, +		}, +		return null;, +	}, +, +	private void collectClassHierarchy(ClassNode cls, Set<ClassNode> collected) {, +		boolean added = collected.add(cls);, +		if (added) {, +			ArgType superClass = cls.getSuperClass();, +			if (superClass != null) {, +				ClassNode superNode = cls.dex().resolveClass(superClass);, +				if (superNode != null) {, +					collectClassHierarchy(superNode, collected);, +				}, +			}, +, +			for (ArgType argType : cls.getInterfaces()) {, +				ClassNode interfaceNode = cls.dex().resolveClass(argType);, +				if (interfaceNode != null) {, +					collectClassHierarchy(interfaceNode, collected);, +				}, +			}, +		}, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +import java.util.LinkedHashSet;, +		Set<ClassNode> clsParents = new LinkedHashSet<>();, +		collectClassHierarchy(mth.getParentClass(), clsParents);, +, +		Set<MethodInfo> overrideSet = new LinkedHashSet<>();, +		for (ClassNode classNode : clsParents) {, +			MethodInfo methodInfo = getMthOverride(classNode.getMethods(), mthSignature);, +			if (methodInfo != null) {, +				overrideSet.add(methodInfo);, +		if (overrideSet.isEmpty()) {, +			return;, +		}, +		OverridedMethodsNode overrideNode = getOverrideMethodsNode(overrideSet);, +		for (MethodInfo overrideMth : overrideSet) {, +			if (!ovrdMap.containsKey(overrideMth)) {, +				ovrdMap.put(overrideMth, overrideNode);, +				overrideNode.add(overrideMth);, +, +	private OverridedMethodsNode getOverrideMethodsNode(Set<MethodInfo> overrideSet) {, +		for (MethodInfo overrideMth : overrideSet) {, +			OverridedMethodsNode node = ovrdMap.get(overrideMth);, +			if (node != null) {, +				return node;, +		}, +		return null;, +	}, +, +	private MethodInfo getMthOverride(List<MethodNode> methods, String mthSignature) {, +		for (MethodNode m : methods) {, +			MethodInfo mthInfo = m.getMethodInfo();, +			if (mthInfo.getShortId().startsWith(mthSignature)) {, +				return mthInfo;, +			}, +		}, +		return null;, +	}, +, +	private void collectClassHierarchy(ClassNode cls, Set<ClassNode> collected) {, +		boolean added = collected.add(cls);, +		if (added) {, +			ArgType superClass = cls.getSuperClass();, +			if (superClass != null) {, +				ClassNode superNode = cls.dex().resolveClass(superClass);]