[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +import java.io.EOFException;, +, +import com.android.dex.Code;, +import com.android.dx.io.OpcodeInfo;, +import com.android.dx.io.Opcodes;, +import com.android.dx.io.instructions.DecodedInstruction;, +import com.android.dx.io.instructions.FillArrayDataPayloadDecodedInstruction;, +import com.android.dx.io.instructions.PackedSwitchPayloadDecodedInstruction;, +import com.android.dx.io.instructions.ShortArrayCodeInput;, +import com.android.dx.io.instructions.SparseSwitchPayloadDecodedInstruction;, +import org.jetbrains.annotations.NotNull;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(InsnDecoder.class);, +				decoded[in.cursor()] = decodeRawInsn(in);, +			throw new DecodeException(method, e.getMessage(), e);, +	private DecodedInstruction decodeRawInsn(ShortArrayCodeInput in) throws EOFException {, +		int opcodeUnit = in.read();, +		int opcode = Opcodes.extractOpcodeFromUnit(opcodeUnit);, +		OpcodeInfo.Info opcodeInfo;, +		try {, +			opcodeInfo = OpcodeInfo.get(opcode);, +		} catch (IllegalArgumentException e) {, +			LOG.warn("Ignore decode error: '{}', replace with NOP instruction", e.getMessage());, +			opcodeInfo = OpcodeInfo.NOP;, +		}, +		return opcodeInfo.getFormat().decode(opcodeUnit, in);, +	}, +, +	@NotNull, +				return new InsnNode(InsnType.NOP, 0);, +			default:, +	}]