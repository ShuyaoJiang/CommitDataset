[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case CAST: {, +			}, +			case INSTANCE_OF: {, +				boolean wrap = state.contains(IGState.BODY_ONLY);, +				if (wrap), +					code.add("(");, +				code.add(arg(insn, 0));, +				code.add(" instanceof ");, +				code.add(useType((ArgType) ((IndexInsnNode) insn).getIndex()));, +				if (wrap) {, +					code.add(")");, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case CAST: {, +			}, +			case INSTANCE_OF: {, +				boolean wrap = state.contains(IGState.BODY_ONLY);, +				if (wrap), +					code.add("(");, +				code.add(arg(insn, 0));, +				code.add(" instanceof ");, +				code.add(useType((ArgType) ((IndexInsnNode) insn).getIndex()));, +				if (wrap) {, +					code.add(")");, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.args.InsnWrapArg;, +			if (lit.getLiteral() == 0) {, +			}, +				return arg(firstArg, false); // == true, +		return arg(firstArg, isWrapNeeded(firstArg)), +				+ " " + op.getSymbol() + " ", +				+ arg(secondArg, isWrapNeeded(secondArg));, +	}, +, +	private boolean isWrapNeeded(InsnArg arg) {, +		if (!arg.isInsnWrap()) {, +			return false;, +		}, +		InsnNode insn = ((InsnWrapArg) arg).getWrapInsn();, +		if(insn.getType() == InsnType.ARITH) {, +			ArithNode arith = ((ArithNode) insn);, +			switch (arith.getOp()) {, +				case ADD:, +				case SUB:, +				case MUL:, +				case DIV:, +				case REM:, +					return false;, +			}, +		}, +		return true;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case CAST: {, +			}, +			case INSTANCE_OF: {, +				boolean wrap = state.contains(IGState.BODY_ONLY);, +				if (wrap), +					code.add("(");, +				code.add(arg(insn, 0));, +				code.add(" instanceof ");, +				code.add(useType((ArgType) ((IndexInsnNode) insn).getIndex()));, +				if (wrap) {, +					code.add(")");, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.args.InsnWrapArg;, +			if (lit.getLiteral() == 0) {, +			}, +				return arg(firstArg, false); // == true, +		return arg(firstArg, isWrapNeeded(firstArg)), +				+ " " + op.getSymbol() + " ", +				+ arg(secondArg, isWrapNeeded(secondArg));, +	}, +, +	private boolean isWrapNeeded(InsnArg arg) {, +		if (!arg.isInsnWrap()) {, +			return false;, +		}, +		InsnNode insn = ((InsnWrapArg) arg).getWrapInsn();, +		if(insn.getType() == InsnType.ARITH) {, +			ArithNode arith = ((ArithNode) insn);, +			switch (arith.getOp()) {, +				case ADD:, +				case SUB:, +				case MUL:, +				case DIV:, +				case REM:, +					return false;, +			}, +		}, +		return true;]