[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +				// remove INFO ThresholdFilter, +				rootLogger.getAppender("STDOUT").clearAllFilters();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +				// remove INFO ThresholdFilter, +				rootLogger.getAppender("STDOUT").clearAllFilters();, +++ b/jadx-cli/src/main/resources/logback.xml, +        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">, +            <level>INFO</level>, +        </filter>, +    <root level="DEBUG">, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +				// remove INFO ThresholdFilter, +				rootLogger.getAppender("STDOUT").clearAllFilters();, +++ b/jadx-cli/src/main/resources/logback.xml, +        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">, +            <level>INFO</level>, +        </filter>, +    <root level="DEBUG">, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +import jadx.gui.utils.LogCollector;, +			LogCollector.register();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +				// remove INFO ThresholdFilter, +				rootLogger.getAppender("STDOUT").clearAllFilters();, +++ b/jadx-cli/src/main/resources/logback.xml, +        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">, +            <level>INFO</level>, +        </filter>, +    <root level="DEBUG">, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +import jadx.gui.utils.LogCollector;, +			LogCollector.register();, +++ b/jadx-gui/src/main/java/jadx/gui/ui/LogViewer.java, +package jadx.gui.ui;, +, +import ch.qos.logback.classic.Level;, +import jadx.gui.utils.LogCollector;, +import jadx.gui.utils.NLS;, +, +import javax.swing.BorderFactory;, +import javax.swing.JButton;, +import javax.swing.JComboBox;, +import javax.swing.JDialog;, +import javax.swing.JLabel;, +import javax.swing.JPanel;, +import javax.swing.JScrollPane;, +import javax.swing.SwingUtilities;, +import java.awt.BorderLayout;, +import java.awt.Container;, +import java.awt.event.ActionEvent;, +import java.awt.event.ActionListener;, +, +import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;, +, +class LogViewer extends JDialog {, +	private static final long serialVersionUID = -2188700277429054641L;, +	private static final Level[] LEVEL_ITEMS = {Level.DEBUG, Level.INFO, Level.WARN, Level.ERROR};, +, +	private static Level level = Level.WARN;, +	private RSyntaxTextArea textPane;, +, +	public LogViewer() {, +		initUI();, +		registerLogListener();, +	}, +, +	public final void initUI() {, +		textPane = new RSyntaxTextArea();, +		textPane.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));, +, +		JPanel controlPane = new JPanel();, +		controlPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));, +		final JComboBox cb = new JComboBox(LEVEL_ITEMS);, +		cb.setSelectedItem(level);, +		cb.addActionListener(new ActionListener() {, +			@Override, +			public void actionPerformed(ActionEvent e) {, +				int i = cb.getSelectedIndex();, +				level = LEVEL_ITEMS[i];, +				registerLogListener();, +			}, +		});, +		JLabel levelLabel = new JLabel(NLS.str("log.level"));, +		levelLabel.setLabelFor(cb);, +		controlPane.add(levelLabel);, +		controlPane.add(cb);, +, +		JScrollPane scrollPane = new JScrollPane(textPane);, +, +		JButton close = new JButton(NLS.str("tabs.close"));, +		close.addActionListener(new ActionListener() {, +			public void actionPerformed(ActionEvent event) {, +				close();, +			}, +		});, +		close.setAlignmentX(0.5f);, +, +		Container contentPane = getContentPane();, +		contentPane.add(controlPane, BorderLayout.PAGE_START);]