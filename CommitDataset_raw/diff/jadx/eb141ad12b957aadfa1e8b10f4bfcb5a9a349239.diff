[+++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +	public String getTestName() {, +		return this.getClass().getSimpleName();, +	}, +, +	public String getTestPkg() {, +		return this.getClass().getPackage().getName().replace("jadx.tests.integration.", "");, +	}, +, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +	public String getTestName() {, +		return this.getClass().getSimpleName();, +	}, +, +	public String getTestPkg() {, +		return this.getClass().getPackage().getName().replace("jadx.tests.integration.", "");, +	}, +, +++ b/jadx-core/src/test/java/jadx/tests/api/SmaliTest.java, +import jadx.api.JadxInternalAccess;, +import jadx.core.dex.nodes.RootNode;, +	protected List<ClassNode> loadFromSmaliFiles() {, +		compileSmali(outDex, collectSmaliFiles(getTestPkg(), getTestName()));, +		JadxDecompiler d = loadFiles(Collections.singletonList(outDex));, +		RootNode root = JadxInternalAccess.getRoot(d);, +		List<ClassNode> classes = root.getClasses(false);, +		for (ClassNode cls : classes) {, +			decompileAndCheckCls(d, cls);, +		}, +		return classes;, +		assertThat("Smali files not found in " + smaliDir, smaliFileNames, notNullValue());, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +	public String getTestName() {, +		return this.getClass().getSimpleName();, +	}, +, +	public String getTestPkg() {, +		return this.getClass().getPackage().getName().replace("jadx.tests.integration.", "");, +	}, +, +++ b/jadx-core/src/test/java/jadx/tests/api/SmaliTest.java, +import jadx.api.JadxInternalAccess;, +import jadx.core.dex.nodes.RootNode;, +	protected List<ClassNode> loadFromSmaliFiles() {, +		compileSmali(outDex, collectSmaliFiles(getTestPkg(), getTestName()));, +		JadxDecompiler d = loadFiles(Collections.singletonList(outDex));, +		RootNode root = JadxInternalAccess.getRoot(d);, +		List<ClassNode> classes = root.getClasses(false);, +		for (ClassNode cls : classes) {, +			decompileAndCheckCls(d, cls);, +		}, +		return classes;, +		assertThat("Smali files not found in " + smaliDir, smaliFileNames, notNullValue());, +++ b/jadx-core/src/test/java/jadx/tests/integration/names/TestCaseSensitiveChecks.java, +package jadx.tests.integration.names;, +, +import java.util.List;, +import java.util.stream.Collectors;, +, +import org.hamcrest.Matchers;, +import org.junit.jupiter.api.Test;, +, +import jadx.core.Consts;, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.SmaliTest;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.emptyString;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.not;, +, +public class TestCaseSensitiveChecks extends SmaliTest {, +	/*, +		public class A {}, +		public class a {}, +	*/, +, +	@Test, +	public void test() {, +		args.setFsCaseSensitive(false);, +, +		List<ClassNode> classes = loadFromSmaliFiles();, +		for (ClassNode cls : classes) {, +			assertThat(cls.getPackage(), is(Consts.DEFAULT_PACKAGE_NAME));, +		}, +		long namesCount = classes.stream().map(cls -> cls.getShortName().toLowerCase()).distinct().count();, +		assertThat(namesCount, is(2L));, +	}, +, +	@Test, +	public void testCaseSensitiveFS() {, +		args.setFsCaseSensitive(true);, +, +		List<ClassNode> classes = loadFromSmaliFiles();, +		for (ClassNode cls : classes) {, +			assertThat(cls.getPackage(), is(Consts.DEFAULT_PACKAGE_NAME));, +		}, +		List<String> names = classes.stream().map(ClassNode::getShortName).collect(Collectors.toList());, +		assertThat(names, Matchers.containsInAnyOrder("A", "a"));, +	}]