[+++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +import java.util.LinkedList;, +import java.util.Queue;, +	private static class CondStack {, +		private final Queue<IfCondition> stack = new LinkedList<IfCondition>();, +, +		public Queue<IfCondition> getStack() {, +			return stack;, +		}, +, +		public void push(IfCondition cond) {, +			stack.add(cond);, +		}, +, +		public IfCondition pop() {, +			return stack.poll();, +		}, +	}, +, +		add(code, new CondStack(), condition);, +	}, +, +	void wrap(CodeWriter code, IfCondition condition) throws CodegenException {, +		wrap(code, new CondStack(), condition);, +	}, +, +	private void add(CodeWriter code, CondStack stack, IfCondition condition) throws CodegenException {, +		stack.push(condition);, +				addCompare(code, stack, condition.getCompare());, +				addTernary(code, stack, condition);, +				addNot(code, stack, condition);, +				addAndOr(code, stack, condition);, +		stack.pop();, +	private void wrap(CodeWriter code, CondStack stack, IfCondition cond) throws CodegenException {, +		add(code, stack, cond);, +	private void wrap(CodeWriter code, InsnArg firstArg) throws CodegenException {, +		boolean wrap = isArgWrapNeeded(firstArg);, +		if (wrap) {, +			code.add('(');, +		}, +		addArg(code, firstArg, false);, +		if (wrap) {, +			code.add(')');, +		}, +	}, +, +	private void addCompare(CodeWriter code, CondStack stack, Compare compare) throws CodegenException {, +				if (stack.getStack().size() == 1) {, +				} else {, +					wrap(code, firstArg);, +				}, +				wrap(code, firstArg);, +	private void addTernary(CodeWriter code, CondStack stack, IfCondition condition) throws CodegenException {, +		add(code, stack, condition.first());, +		add(code, stack, condition.second());, +		add(code, stack, condition.third());, +	private void addNot(CodeWriter code, CondStack stack, IfCondition condition) throws CodegenException {, +		wrap(code, stack, condition.getArgs().get(0));, +	private void addAndOr(CodeWriter code, CondStack stack, IfCondition condition) throws CodegenException {, +			wrap(code, stack, it.next());, +		if (condition.isCompare()) {, +			return false;, +		}, +		if (condition.getMode() != Mode.NOT) {, +			return true;, +		}, +		return false;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +import java.util.LinkedList;, +import java.util.Queue;, +	private static class CondStack {, +		private final Queue<IfCondition> stack = new LinkedList<IfCondition>();, +, +		public Queue<IfCondition> getStack() {, +			return stack;, +		}, +, +		public void push(IfCondition cond) {, +			stack.add(cond);, +		}, +, +		public IfCondition pop() {, +			return stack.poll();, +		}, +	}, +, +		add(code, new CondStack(), condition);, +	}, +, +	void wrap(CodeWriter code, IfCondition condition) throws CodegenException {, +		wrap(code, new CondStack(), condition);, +	}, +, +	private void add(CodeWriter code, CondStack stack, IfCondition condition) throws CodegenException {, +		stack.push(condition);, +				addCompare(code, stack, condition.getCompare());, +				addTernary(code, stack, condition);, +				addNot(code, stack, condition);, +				addAndOr(code, stack, condition);, +		stack.pop();]