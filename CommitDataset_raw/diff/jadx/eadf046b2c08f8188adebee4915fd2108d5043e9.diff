[+++ b/jadx-core/src/main/java/jadx/core/dex/trycatch/SplitterBlockAttr.java, +++ b/jadx-core/src/main/java/jadx/core/dex/trycatch/SplitterBlockAttr.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, +			fixSplitterBlock(mth, block);, +	private static void fixSplitterBlock(MethodNode mth, BlockNode block) {, +			mth.addWarn("Unknown top exception splitter block from list: " + splitters);, +++ b/jadx-core/src/main/java/jadx/core/dex/trycatch/SplitterBlockAttr.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, +			fixSplitterBlock(mth, block);, +	private static void fixSplitterBlock(MethodNode mth, BlockNode block) {, +			mth.addWarn("Unknown top exception splitter block from list: " + splitters);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +					mth.addWarn("Missing block: " + block + ", code skipped:" + CodeWriter.NL + blockCode);, +++ b/jadx-core/src/main/java/jadx/core/dex/trycatch/SplitterBlockAttr.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, +			fixSplitterBlock(mth, block);, +	private static void fixSplitterBlock(MethodNode mth, BlockNode block) {, +			mth.addWarn("Unknown top exception splitter block from list: " + splitters);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +					mth.addWarn("Missing block: " + block + ", code skipped:" + CodeWriter.NL + blockCode);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +				mth.addWarn("No exception handlers in catch block: " + tb);, +			processTryCatchBlock(mth, tb, tryBlocksMap);, +		}, +	}, +, +	private static void processTryCatchBlock(MethodNode mth, TryCatchBlock tb, Map<BlockNode, TryCatchBlock> tryBlocksMap) {, +				mth.addWarn("Exception block dominator not found, dom blocks: " + domBlocks);, +				return;, +			mth.addWarn("Failed to process nested try/catch");, +					ErrorsCounter.methodWarn(mth, "Can't wrap try/catch for region: " + region);, +++ b/jadx-core/src/main/java/jadx/core/dex/trycatch/SplitterBlockAttr.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, +			fixSplitterBlock(mth, block);, +	private static void fixSplitterBlock(MethodNode mth, BlockNode block) {, +			mth.addWarn("Unknown top exception splitter block from list: " + splitters);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +					mth.addWarn("Missing block: " + block + ", code skipped:" + CodeWriter.NL + blockCode);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +				mth.addWarn("No exception handlers in catch block: " + tb);, +			processTryCatchBlock(mth, tb, tryBlocksMap);, +		}, +	}, +, +	private static void processTryCatchBlock(MethodNode mth, TryCatchBlock tb, Map<BlockNode, TryCatchBlock> tryBlocksMap) {, +				mth.addWarn("Exception block dominator not found, dom blocks: " + domBlocks);, +				return;, +			mth.addWarn("Failed to process nested try/catch");, +					ErrorsCounter.methodWarn(mth, "Can't wrap try/catch for region: " + region);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +				processExcHandler(mth, handler, exits);, +	private void processExcHandler(MethodNode mth, ExceptionHandler handler, Set<BlockNode> exits) {, +		RegionStack stack = new RegionStack(this.mth);, +		List<BlockNode> handlerExits = BlockUtils.bitSetToBlocks(this.mth, domFrontier);, +		boolean inLoop = this.mth.getLoopForBlock(start) != null;, +					&& RegionUtils.isRegionContainsBlock(this.mth.getRegion(), exit)) {, +			mth.addWarn("Missing exception handler attribute for start block: " + start);, +++ b/jadx-core/src/main/java/jadx/core/dex/trycatch/SplitterBlockAttr.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinish.java, +			fixSplitterBlock(mth, block);, +	private static void fixSplitterBlock(MethodNode mth, BlockNode block) {, +			mth.addWarn("Unknown top exception splitter block from list: " + splitters);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +					mth.addWarn("Missing block: " + block + ", code skipped:" + CodeWriter.NL + blockCode);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +				mth.addWarn("No exception handlers in catch block: " + tb);, +			processTryCatchBlock(mth, tb, tryBlocksMap);, +		}, +	}, +, +	private static void processTryCatchBlock(MethodNode mth, TryCatchBlock tb, Map<BlockNode, TryCatchBlock> tryBlocksMap) {, +				mth.addWarn("Exception block dominator not found, dom blocks: " + domBlocks);, +				return;, +			mth.addWarn("Failed to process nested try/catch");, +					ErrorsCounter.methodWarn(mth, "Can't wrap try/catch for region: " + region);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +				processExcHandler(mth, handler, exits);, +	private void processExcHandler(MethodNode mth, ExceptionHandler handler, Set<BlockNode> exits) {, +		RegionStack stack = new RegionStack(this.mth);, +		List<BlockNode> handlerExits = BlockUtils.bitSetToBlocks(this.mth, domFrontier);, +		boolean inLoop = this.mth.getLoopForBlock(start) != null;, +					&& RegionUtils.isRegionContainsBlock(this.mth.getRegion(), exit)) {, +			mth.addWarn("Missing exception handler attribute for start block: " + start);, +++ b/jadx-core/src/test/java/jadx/tests/external/BaseExternalTest.java, +				int decompiledLine = mth.getDecompiledLine() - 1;, +				int startLine = getCommentLinesCount(lines, decompiledLine);, +				for (int i = startLine; i > 0 && i < lines.length; i++) {, +					if (i >= decompiledLine) {, +				}, +				LOG.info("Print method: {}\n{}", mth.getMethodInfo().getShortId(), mthCode);, +	protected int getCommentLinesCount(String[] lines, int line) {, +		for (int i = line - 1; i > 0 && i < lines.length; i--) {, +			String str = lines[i];, +			if (str.isEmpty() || str.equals(CodeWriter.NL)) {, +				return i + 1;, +			}, +		}, +		return 0;, +	}, +]