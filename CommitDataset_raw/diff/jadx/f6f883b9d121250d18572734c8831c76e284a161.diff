[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.utils.CodegenUtils;, +		CodegenUtils.addComments(code, cls);, +		insertDecompilationProblems(code, cls);, +			CodegenUtils.addComments(code, mth);, +	private void insertDecompilationProblems(CodeWriter code, AttrNode node) {, +		List<JadxError> errors = node.getAll(AType.JADX_ERROR);, +		List<JadxWarn> warns = node.getAll(AType.JADX_WARN);, +			CodegenUtils.addComments(code, f);, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.utils.CodegenUtils;, +		CodegenUtils.addComments(code, cls);, +		insertDecompilationProblems(code, cls);, +			CodegenUtils.addComments(code, mth);, +	private void insertDecompilationProblems(CodeWriter code, AttrNode node) {, +		List<JadxError> errors = node.getAll(AType.JADX_ERROR);, +		List<JadxWarn> warns = node.getAll(AType.JADX_WARN);, +			CodegenUtils.addComments(code, f);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +	public static final AType<AttrList<String>> COMMENTS = new AType<>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.utils.CodegenUtils;, +		CodegenUtils.addComments(code, cls);, +		insertDecompilationProblems(code, cls);, +			CodegenUtils.addComments(code, mth);, +	private void insertDecompilationProblems(CodeWriter code, AttrNode node) {, +		List<JadxError> errors = node.getAll(AType.JADX_ERROR);, +		List<JadxWarn> warns = node.getAll(AType.JADX_WARN);, +			CodegenUtils.addComments(code, f);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +	public static final AType<AttrList<String>> COMMENTS = new AType<>();, +++ b/jadx-core/src/main/java/jadx/core/dex/info/ConstStorage.java, +import jadx.core.utils.ErrorsCounter;, +		DexNode dex = cls.dex();, +		if (value instanceof Integer) {, +			FieldNode rField = getResourceField((Integer) value, dex);, +			if (rField != null) {, +				return rField;, +			}, +		}, +	private FieldNode getResourceField(Integer value, DexNode dex) {, +		String str = resourcesNames.get(value);, +		if (str == null) {, +			return null;, +		}, +		ClassNode appResClass = dex.root().getAppResClass();, +		if (appResClass == null) {, +			return null;, +		}, +		String[] parts = str.split("/", 2);, +		if (parts.length != 2) {, +			return null;, +		}, +		String typeName = parts[0];, +		String fieldName = parts[1];, +		for (ClassNode innerClass : appResClass.getInnerClasses()) {, +			if (innerClass.getShortName().equals(typeName)) {, +				return innerClass.searchFieldByName(fieldName);, +			}, +		}, +		ErrorsCounter.classWarn(appResClass, "Not found resource field with id: " + value + ", name: " + str.replace('/', '.'));, +		return null;, +	}, +, +	@Nullable, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.utils.CodegenUtils;, +		CodegenUtils.addComments(code, cls);, +		insertDecompilationProblems(code, cls);, +			CodegenUtils.addComments(code, mth);, +	private void insertDecompilationProblems(CodeWriter code, AttrNode node) {, +		List<JadxError> errors = node.getAll(AType.JADX_ERROR);, +		List<JadxWarn> warns = node.getAll(AType.JADX_WARN);, +			CodegenUtils.addComments(code, f);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +	public static final AType<AttrList<String>> COMMENTS = new AType<>();, +++ b/jadx-core/src/main/java/jadx/core/dex/info/ConstStorage.java, +import jadx.core.utils.ErrorsCounter;, +		DexNode dex = cls.dex();, +		if (value instanceof Integer) {, +			FieldNode rField = getResourceField((Integer) value, dex);, +			if (rField != null) {, +				return rField;, +			}, +		}, +	private FieldNode getResourceField(Integer value, DexNode dex) {, +		String str = resourcesNames.get(value);, +		if (str == null) {, +			return null;, +		}, +		ClassNode appResClass = dex.root().getAppResClass();, +		if (appResClass == null) {, +			return null;, +		}, +		String[] parts = str.split("/", 2);, +		if (parts.length != 2) {, +			return null;, +		}, +		String typeName = parts[0];, +		String fieldName = parts[1];]