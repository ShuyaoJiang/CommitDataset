[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	private static enum IGState {, +		BODY_ONLY_NOWRAP,, +		return arg(arg, true);, +	}, +, +	public String arg(InsnArg arg, boolean wrap) throws CodegenException {, +			IGState flag = wrap ? IGState.BODY_ONLY : IGState.BODY_ONLY_NOWRAP;, +			makeInsn(((InsnWrapArg) arg).getWrapInsn(), code, flag);, +		return makeInsn(insn, code, null);, +	private boolean makeInsn(InsnNode insn, CodeWriter code, IGState flag) throws CodegenException {, +			EnumSet<IGState> state = EnumSet.noneOf(IGState.class);, +			if (flag == IGState.BODY_ONLY || flag == IGState.BODY_ONLY_NOWRAP) {, +				state.add(flag);, +				if (state.contains(IGState.SKIP)) {, +				if (insn.getResult() != null && !state.contains(IGState.NO_RESULT)) {, +				}, +				if (!state.contains(IGState.NO_SEMICOLON)) {, +			}, +	private void makeInsnBody(CodeWriter code, InsnNode insn, EnumSet<IGState> state) throws CodegenException {, +				code.add(arg(insn.getArg(0), false));, +				code.add(arg(insn.getArg(0), false));, +				if (state.contains(IGState.BODY_ONLY)) {, +				} else {, +				}, +					code.add("return ").add(arg(insn.getArg(0), false));, +				code.add("throw ").add(arg(insn.getArg(0), true));, +				code.add(arg(insn.getArg(0))).add('[').add(arg(insn.getArg(1), false)).add(']');, +				code.add(ifield(fieldInfo, insn.getArg(1))).add(" = ").add(arg(insn.getArg(0), false));, +				code.add(sfield((FieldInfo) node.getIndex())).add(" = ").add(arg(node.getArg(0), false));, +				if (state.contains(IGState.BODY_ONLY)) {, +					state.add(IGState.SKIP);, +					state.add(IGState.SKIP);, +				state.add(IGState.SKIP);, +				state.add(IGState.NO_SEMICOLON);, +	private void makeConstructor(ConstructorInsn insn, CodeWriter code, EnumSet<IGState> state), +			state.add(IGState.SKIP);, +					code.add('(').add(useType(origType)).add(')').add(arg(arg, true));, +					code.add(arg(arg, false));, +			makeInsn(inl, code, IGState.BODY_ONLY);, +			makeInsn(inl, code, IGState.BODY_ONLY);, +			code.add(arg(insn.getArg(k), false));, +				code.add(arg(insn.getArg(i), false));, +	private void makeArith(ArithNode insn, CodeWriter code, EnumSet<IGState> state) throws CodegenException {, +		if (state.contains(IGState.BODY_ONLY)) {, +		} else if (state.contains(IGState.BODY_ONLY_NOWRAP)) {, +			code.add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2);, +				state.add(IGState.NO_RESULT);, +				v2 = arg(insn.getArg(1), false);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	private static enum IGState {, +		BODY_ONLY_NOWRAP,, +		return arg(arg, true);, +	}, +, +	public String arg(InsnArg arg, boolean wrap) throws CodegenException {, +			IGState flag = wrap ? IGState.BODY_ONLY : IGState.BODY_ONLY_NOWRAP;, +			makeInsn(((InsnWrapArg) arg).getWrapInsn(), code, flag);, +		return makeInsn(insn, code, null);, +	private boolean makeInsn(InsnNode insn, CodeWriter code, IGState flag) throws CodegenException {, +			EnumSet<IGState> state = EnumSet.noneOf(IGState.class);, +			if (flag == IGState.BODY_ONLY || flag == IGState.BODY_ONLY_NOWRAP) {, +				state.add(flag);, +				if (state.contains(IGState.SKIP)) {, +				if (insn.getResult() != null && !state.contains(IGState.NO_RESULT)) {, +				}, +				if (!state.contains(IGState.NO_SEMICOLON)) {, +			}, +	private void makeInsnBody(CodeWriter code, InsnNode insn, EnumSet<IGState> state) throws CodegenException {, +				code.add(arg(insn.getArg(0), false));, +				code.add(arg(insn.getArg(0), false));, +				if (state.contains(IGState.BODY_ONLY)) {, +				} else {, +				}, +					code.add("return ").add(arg(insn.getArg(0), false));, +				code.add("throw ").add(arg(insn.getArg(0), true));, +				code.add(arg(insn.getArg(0))).add('[').add(arg(insn.getArg(1), false)).add(']');, +				code.add(ifield(fieldInfo, insn.getArg(1))).add(" = ").add(arg(insn.getArg(0), false));, +				code.add(sfield((FieldInfo) node.getIndex())).add(" = ").add(arg(node.getArg(0), false));, +				if (state.contains(IGState.BODY_ONLY)) {, +					state.add(IGState.SKIP);, +					state.add(IGState.SKIP);, +				state.add(IGState.SKIP);, +				state.add(IGState.NO_SEMICOLON);, +	private void makeConstructor(ConstructorInsn insn, CodeWriter code, EnumSet<IGState> state), +			state.add(IGState.SKIP);, +					code.add('(').add(useType(origType)).add(')').add(arg(arg, true));, +					code.add(arg(arg, false));, +			makeInsn(inl, code, IGState.BODY_ONLY);, +			makeInsn(inl, code, IGState.BODY_ONLY);, +			code.add(arg(insn.getArg(k), false));, +				code.add(arg(insn.getArg(i), false));, +	private void makeArith(ArithNode insn, CodeWriter code, EnumSet<IGState> state) throws CodegenException {, +		if (state.contains(IGState.BODY_ONLY)) {, +		} else if (state.contains(IGState.BODY_ONLY_NOWRAP)) {, +			code.add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2);, +				state.add(IGState.NO_RESULT);, +				v2 = arg(insn.getArg(1), false);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +					InsnType wrapType = wrap.getType();]