[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.NewArrayNode;, +				ArgType arrayType = ((NewArrayNode) insn).getArrayType();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.NewArrayNode;, +				ArgType arrayType = ((NewArrayNode) insn).getArrayType();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FilledNewArrayNode.java, +import org.jetbrains.annotations.NotNull;, +, +	public FilledNewArrayNode(@NotNull ArgType elemType, int size) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.NewArrayNode;, +				ArgType arrayType = ((NewArrayNode) insn).getArrayType();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FilledNewArrayNode.java, +import org.jetbrains.annotations.NotNull;, +, +	public FilledNewArrayNode(@NotNull ArgType elemType, int size) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +				ArgType arrType = dex.getType(insn.getIndex());, +				return new NewArrayNode(arrType,, +						InsnArg.reg(insn, 0, arrType),, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.NewArrayNode;, +				ArgType arrayType = ((NewArrayNode) insn).getArrayType();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FilledNewArrayNode.java, +import org.jetbrains.annotations.NotNull;, +, +	public FilledNewArrayNode(@NotNull ArgType elemType, int size) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +				ArgType arrType = dex.getType(insn.getIndex());, +				return new NewArrayNode(arrType,, +						InsnArg.reg(insn, 0, arrType),, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/NewArrayNode.java, +package jadx.core.dex.instructions;, +, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.RegisterArg;, +import jadx.core.dex.nodes.InsnNode;, +, +import org.jetbrains.annotations.NotNull;, +, +public class NewArrayNode extends InsnNode {, +, +	private final ArgType arrType;, +, +	public NewArrayNode(@NotNull ArgType arrType, RegisterArg res, InsnArg size) {, +		super(InsnType.NEW_ARRAY, 1);, +		this.arrType = arrType;, +		setResult(res);, +		addArg(size);, +	}, +, +	public ArgType getArrayType() {, +		return arrType;, +	}, +, +	@Override, +	public boolean isSame(InsnNode obj) {, +		if (this == obj) {, +			return true;, +		}, +		if (!(obj instanceof NewArrayNode) || !super.isSame(obj)) {, +			return false;, +		}, +		NewArrayNode other = (NewArrayNode) obj;, +		return arrType == other.arrType;, +	}, +, +	@Override, +	public String toString() {, +		return super.toString() + " type: " + arrType;, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.NewArrayNode;, +				ArgType arrayType = ((NewArrayNode) insn).getArrayType();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FilledNewArrayNode.java, +import org.jetbrains.annotations.NotNull;, +, +	public FilledNewArrayNode(@NotNull ArgType elemType, int size) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +				ArgType arrType = dex.getType(insn.getIndex());, +				return new NewArrayNode(arrType,, +						InsnArg.reg(insn, 0, arrType),, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/NewArrayNode.java, +package jadx.core.dex.instructions;, +, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.RegisterArg;, +import jadx.core.dex.nodes.InsnNode;, +, +import org.jetbrains.annotations.NotNull;, +, +public class NewArrayNode extends InsnNode {, +, +	private final ArgType arrType;, +, +	public NewArrayNode(@NotNull ArgType arrType, RegisterArg res, InsnArg size) {]