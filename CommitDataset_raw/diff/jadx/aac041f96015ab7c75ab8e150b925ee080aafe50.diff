[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/DebugInfoParser.java, +		InsnArg activeReg = activeRegisters[var.getRegNum()];, +		if (activeReg instanceof RegisterArg) {, +			SSAVar ssaVar = ((RegisterArg) activeReg).getSVar();, +			if (ssaVar != null && ssaVar.getStartAddr() != -1) {, +				InsnNode parentInsn = ssaVar.getAssign().getParentInsn();, +				if (parentInsn != null && parentInsn.getOffset() >= 0) {, +					addr = parentInsn.getOffset();, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/DebugInfoParser.java, +		InsnArg activeReg = activeRegisters[var.getRegNum()];, +		if (activeReg instanceof RegisterArg) {, +			SSAVar ssaVar = ((RegisterArg) activeReg).getSVar();, +			if (ssaVar != null && ssaVar.getStartAddr() != -1) {, +				InsnNode parentInsn = ssaVar.getAssign().getParentInsn();, +				if (parentInsn != null && parentInsn.getOffset() >= 0) {, +					addr = parentInsn.getOffset();, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +				ArgType argType = castArg.getType();, +				// Don't removes CHECK_CAST for wrapped INVOKE if invoked method returns different type, +					InsnNode wrapInsn = ((InsnWrapArg) castArg).getWrapInsn();, +						argType = ((InvokeNode) wrapInsn).getCallMth().getReturnType();, +				ArgType castToType = (ArgType) ((IndexInsnNode) insn).getIndex();, +				if (!ArgType.isCastNeeded(argType, castToType)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/DebugInfoParser.java, +		InsnArg activeReg = activeRegisters[var.getRegNum()];, +		if (activeReg instanceof RegisterArg) {, +			SSAVar ssaVar = ((RegisterArg) activeReg).getSVar();, +			if (ssaVar != null && ssaVar.getStartAddr() != -1) {, +				InsnNode parentInsn = ssaVar.getAssign().getParentInsn();, +				if (parentInsn != null && parentInsn.getOffset() >= 0) {, +					addr = parentInsn.getOffset();, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +				ArgType argType = castArg.getType();, +				// Don't removes CHECK_CAST for wrapped INVOKE if invoked method returns different type, +					InsnNode wrapInsn = ((InsnWrapArg) castArg).getWrapInsn();, +						argType = ((InvokeNode) wrapInsn).getCallMth().getReturnType();, +				ArgType castToType = (ArgType) ((IndexInsnNode) insn).getIndex();, +				if (!ArgType.isCastNeeded(argType, castToType)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +				LOG.debug("Fixing incorrect switch cases order, method: {}", mth);]