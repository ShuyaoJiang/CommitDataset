[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +	private static boolean allArgsNull(ConstructorInsn insn) {, +			} else {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +	private static boolean allArgsNull(ConstructorInsn insn) {, +			} else {, +++ b/jadx-core/src/test/java/jadx/tests/external/BaseExternalTest.java, +import static org.hamcrest.Matchers.greaterThan;, +			processByPatterns(jadx, clsPtrn, mthPtrn);, +	private void processByPatterns(JadxDecompiler jadx, Pattern clsPattern, @Nullable Pattern mthPattern) {, +		int processed = 0;, +				if (processCls(mthPattern, passes, classNode)) {, +					processed++;, +				}, +			}, +		}, +		assertThat("No classes processed", processed, greaterThan(0));, +	}, +, +	private boolean processCls(@Nullable Pattern mthPattern, List<IDexTreeVisitor> passes, ClassNode classNode) {, +		if (!decompile) {, +			return false;, +		}, +		return true;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +	private static boolean allArgsNull(ConstructorInsn insn) {, +			} else {, +++ b/jadx-core/src/test/java/jadx/tests/external/BaseExternalTest.java, +import static org.hamcrest.Matchers.greaterThan;, +			processByPatterns(jadx, clsPtrn, mthPtrn);, +	private void processByPatterns(JadxDecompiler jadx, Pattern clsPattern, @Nullable Pattern mthPattern) {, +		int processed = 0;, +				if (processCls(mthPattern, passes, classNode)) {, +					processed++;, +				}, +			}, +		}, +		assertThat("No classes processed", processed, greaterThan(0));, +	}, +, +	private boolean processCls(@Nullable Pattern mthPattern, List<IDexTreeVisitor> passes, ClassNode classNode) {, +		if (!decompile) {, +			return false;, +		}, +		return true;, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestOuterConstructorCall.java, +package jadx.tests.integration.inner;, +, +import org.junit.Test;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.not;, +import static org.junit.Assert.assertThat;, +, +public class TestOuterConstructorCall extends IntegrationTest {, +, +	public static class TestCls {, +		private TestCls(Inner inner) {, +			System.out.println(inner);, +		}, +, +		private class Inner {, +			private TestCls test() {, +				return new TestCls(this);, +			}, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsString("private class Inner {"));, +		assertThat(code, containsString("return new TestOuterConstructorCall$TestCls(this);"));, +		assertThat(code, not(containsString("synthetic")));, +	}, +}]