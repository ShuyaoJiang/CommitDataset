[+++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		arg.getSVar().setVariableName(name);, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		arg.getSVar().setVariableName(name);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	public void setVariableName(String name) {, +		setName(name);, +		if (isUsedInPhi()) {, +			PhiInsn phi = getUsedInPhi();, +			phi.getResult().getSVar().setVariableName(name);, +			for (InsnArg arg : phi.getArguments()) {, +				if (arg.isRegister()) {, +					RegisterArg reg = (RegisterArg) arg;, +					SSAVar sVar = reg.getSVar();, +					if (sVar != this && !name.equals(reg.getName())) {, +						sVar.setVariableName(name);, +					}, +				}, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		arg.getSVar().setVariableName(name);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	public void setVariableName(String name) {, +		setName(name);, +		if (isUsedInPhi()) {, +			PhiInsn phi = getUsedInPhi();, +			phi.getResult().getSVar().setVariableName(name);, +			for (InsnArg arg : phi.getArguments()) {, +				if (arg.isRegister()) {, +					RegisterArg reg = (RegisterArg) arg;, +					SSAVar sVar = reg.getSVar();, +					if (sVar != this && !name.equals(reg.getName())) {, +						sVar.setVariableName(name);, +					}, +				}, +			}, +		}, +	}, +, +++ b/jadx-core/src/test/java/jadx/tests/internal/inline/TestInline2.java, +		public int test() throws InterruptedException {, +		System.out.println(code);, +		assertThat(code, containsString("long i_2 ="));, +		assertThat(code, containsString("+ i_2"));, +		assertThat(code, containsString("i_2--;"));]