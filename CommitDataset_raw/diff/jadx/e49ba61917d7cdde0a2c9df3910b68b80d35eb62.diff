[+++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		LOG.debug("processing class {} ...", cls);, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		LOG.debug("processing class {} ...", cls);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new SSATransform());, +			passes.add(new TypeInference());, +			passes.add(new ConstInlinerVisitor());, +			passes.add(new FinishTypeInference());, +			passes.add(new EliminatePhiNodes());, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		LOG.debug("processing class {} ...", cls);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new SSATransform());, +			passes.add(new TypeInference());, +			passes.add(new ConstInlinerVisitor());, +			passes.add(new FinishTypeInference());, +			passes.add(new EliminatePhiNodes());, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getRegisterArg());, +				makeArithOneArg((ArithNode) insn, code);, +				makeConstructor((ConstructorInsn) insn, code);, +			case PHI:, +				break;, +, +	private void makeConstructor(ConstructorInsn insn, CodeWriter code), +	private void makeArithOneArg(ArithNode insn, CodeWriter code) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		LOG.debug("processing class {} ...", cls);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new SSATransform());, +			passes.add(new TypeInference());, +			passes.add(new ConstInlinerVisitor());, +			passes.add(new FinishTypeInference());, +			passes.add(new EliminatePhiNodes());, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getRegisterArg());, +				makeArithOneArg((ArithNode) insn, code);, +				makeConstructor((ConstructorInsn) insn, code);, +			case PHI:, +				break;, +, +	private void makeConstructor(ConstructorInsn insn, CodeWriter code), +	private void makeArithOneArg(ArithNode insn, CodeWriter code) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.attributes.IAttribute;, +		String name = arg.getName();, +		arg.getSVar().setName(name);, +					List<IAttribute> catchAttrs = attrs.getAll(AttributeType.CATCH_BLOCK);, +					for (IAttribute catchAttr : catchAttrs) {, +						code.add("\t " + catchAttr);, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		LOG.debug("processing class {} ...", cls);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new SSATransform());, +			passes.add(new TypeInference());, +			passes.add(new ConstInlinerVisitor());, +			passes.add(new FinishTypeInference());, +			passes.add(new EliminatePhiNodes());, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getRegisterArg());, +				makeArithOneArg((ArithNode) insn, code);, +				makeConstructor((ConstructorInsn) insn, code);, +			case PHI:, +				break;, +, +	private void makeConstructor(ConstructorInsn insn, CodeWriter code), +	private void makeArithOneArg(ArithNode insn, CodeWriter code) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.attributes.IAttribute;, +		String name = arg.getName();, +		arg.getSVar().setName(name);, +					List<IAttribute> catchAttrs = attrs.getAll(AttributeType.CATCH_BLOCK);, +					for (IAttribute catchAttr : catchAttrs) {, +						code.add("\t " + catchAttr);, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			} else {, +				declareVars(code, cont);, +				if (cont instanceof IfRegion) {, +			}, +			declareVars(code, region);, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		LOG.debug("processing class {} ...", cls);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java]