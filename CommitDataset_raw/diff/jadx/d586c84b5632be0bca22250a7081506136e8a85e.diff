[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +, +		} catch (Exception e) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +, +		} catch (Exception e) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import ch.qos.logback.classic.spi.ILoggingEvent;, +import ch.qos.logback.core.Appender;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import jadx.api.IJadxArgs;, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +	private final List<File> input = new ArrayList<>(1);, +		Map<String, ParameterDescription> paramsMap = new LinkedHashMap<>(params.size());, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +, +		} catch (Exception e) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import ch.qos.logback.classic.spi.ILoggingEvent;, +import ch.qos.logback.core.Appender;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import jadx.api.IJadxArgs;, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +	private final List<File> input = new ArrayList<>(1);, +		Map<String, ParameterDescription> paramsMap = new LinkedHashMap<>(params.size());, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final List<InputFile> inputFiles = new ArrayList<>();, +		try {, +			LOG.error("Save interrupted", e);, +			Thread.currentThread().interrupt();, +	private void appendSourcesSave(ExecutorService executor, File outDir) {, +		for (JavaClass cls : getClasses()) {, +			executor.execute(() -> {, +			List<JavaClass> clsList = new ArrayList<>(classNodeList.size());, +		Map<String, List<JavaClass>> map = new HashMap<>();, +			List<JavaClass> clsList = map.computeIfAbsent(pkg, k -> new ArrayList<>());, +		List<JavaPackage> packages = new ArrayList<>(map.size());, +			pkg.getClasses().sort(Comparator.comparing(JavaClass::getName));, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +, +		} catch (Exception e) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import ch.qos.logback.classic.spi.ILoggingEvent;, +import ch.qos.logback.core.Appender;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import jadx.api.IJadxArgs;, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +	private final List<File> input = new ArrayList<>(1);, +		Map<String, ParameterDescription> paramsMap = new LinkedHashMap<>(params.size());, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final List<InputFile> inputFiles = new ArrayList<>();, +		try {, +			LOG.error("Save interrupted", e);, +			Thread.currentThread().interrupt();, +	private void appendSourcesSave(ExecutorService executor, File outDir) {, +		for (JavaClass cls : getClasses()) {, +			executor.execute(() -> {, +			List<JavaClass> clsList = new ArrayList<>(classNodeList.size());, +		Map<String, List<JavaClass>> map = new HashMap<>();, +			List<JavaClass> clsList = map.computeIfAbsent(pkg, k -> new ArrayList<>());, +		List<JavaPackage> packages = new ArrayList<>(map.size());, +			pkg.getClasses().sort(Comparator.comparing(JavaClass::getName));, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +			List<JavaClass> list = new ArrayList<>(inClsCount);, +			List<JavaField> flds = new ArrayList<>(fieldsCount);, +			List<JavaMethod> mths = new ArrayList<>(methodsCount);, +		Map<CodePosition, JavaNode> resultMap = new HashMap<>(map.size());, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;, +, +		} catch (Exception e) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import ch.qos.logback.classic.spi.ILoggingEvent;, +import ch.qos.logback.core.Appender;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import jadx.api.IJadxArgs;, +import jadx.api.JadxDecompiler;, +import jadx.core.utils.exceptions.JadxException;]