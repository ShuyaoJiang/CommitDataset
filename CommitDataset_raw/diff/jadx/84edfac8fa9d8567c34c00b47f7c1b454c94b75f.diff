[+++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.Utils;, +			throw new JadxException("Error decode: " + zipRef.getEntryName(), e);, +			CodeWriter cw = new CodeWriter();, +			cw.add("Error decode ").add(rf.getType().toString().toLowerCase());, +			cw.startLine(Utils.getStackTrace(e.getCause()));, +			return cw;, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.Utils;, +			throw new JadxException("Error decode: " + zipRef.getEntryName(), e);, +			CodeWriter cw = new CodeWriter();, +			cw.add("Error decode ").add(rf.getType().toString().toLowerCase());, +			cw.startLine(Utils.getStackTrace(e.getCause()));, +			return cw;, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	public synchronized CodeWriter parse(InputStream inputStream) throws IOException {, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.Utils;, +			throw new JadxException("Error decode: " + zipRef.getEntryName(), e);, +			CodeWriter cw = new CodeWriter();, +			cw.add("Error decode ").add(rf.getType().toString().toLowerCase());, +			cw.startLine(Utils.getStackTrace(e.getCause()));, +			return cw;, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	public synchronized CodeWriter parse(InputStream inputStream) throws IOException {, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/CommonBinaryParser.java, +import java.util.Arrays;, +		byte[] strArray = is.readInt8Array((int) (stringsEnd - is.getPos()));, +				strings[i] = extractString8(strArray, stringsOffset[i]);, +	private static String extractString8(byte[] strArray, int offset) {, +		int start = offset + skipStrLen8(strArray, offset);, +		int len = strArray[start++];, +		if (len == 0) {, +			return "";, +		}, +		if ((len & 0x80) != 0) {, +			len = ((len & 0x7F) << 8) | (strArray[start++] & 0xFF);, +		}, +		byte[] arr = Arrays.copyOfRange(strArray, start, start + len);, +		return new String(arr, ParserStream.STRING_CHARSET_UTF8);, +	}, +, +		int start = offset + skipStrLen16(strArray, offset);, +		byte[] arr = Arrays.copyOfRange(strArray, start, end);, +		return new String(arr, ParserStream.STRING_CHARSET_UTF16);, +	}, +, +	private static int skipStrLen8(byte[] strArray, int offset) {, +		return (strArray[offset] & 0x80) == 0 ? 1 : 2;, +	}, +, +	private static int skipStrLen16(byte[] strArray, int offset) {, +		return (strArray[offset + 1] & 0x80) == 0 ? 2 : 4;, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.Utils;, +			throw new JadxException("Error decode: " + zipRef.getEntryName(), e);, +			CodeWriter cw = new CodeWriter();, +			cw.add("Error decode ").add(rf.getType().toString().toLowerCase());, +			cw.startLine(Utils.getStackTrace(e.getCause()));, +			return cw;, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	public synchronized CodeWriter parse(InputStream inputStream) throws IOException {, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/CommonBinaryParser.java, +import java.util.Arrays;, +		byte[] strArray = is.readInt8Array((int) (stringsEnd - is.getPos()));, +				strings[i] = extractString8(strArray, stringsOffset[i]);, +	private static String extractString8(byte[] strArray, int offset) {, +		int start = offset + skipStrLen8(strArray, offset);, +		int len = strArray[start++];, +		if (len == 0) {, +			return "";, +		}, +		if ((len & 0x80) != 0) {, +			len = ((len & 0x7F) << 8) | (strArray[start++] & 0xFF);, +		}, +		byte[] arr = Arrays.copyOfRange(strArray, start, start + len);, +		return new String(arr, ParserStream.STRING_CHARSET_UTF8);, +	}, +, +		int start = offset + skipStrLen16(strArray, offset);, +		byte[] arr = Arrays.copyOfRange(strArray, start, end);, +		return new String(arr, ParserStream.STRING_CHARSET_UTF16);, +	}, +, +	private static int skipStrLen8(byte[] strArray, int offset) {, +		return (strArray[offset] & 0x80) == 0 ? 1 : 2;, +	}, +, +	private static int skipStrLen16(byte[] strArray, int offset) {, +		return (strArray[offset + 1] & 0x80) == 0 ? 2 : 4;, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ParserStream.java, +	private static final int[] EMPTY_INT_ARRAY = new int[0];, +	private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];, +, +			return EMPTY_INT_ARRAY;, +			return EMPTY_BYTE_ARRAY;, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.Utils;, +			throw new JadxException("Error decode: " + zipRef.getEntryName(), e);, +			CodeWriter cw = new CodeWriter();]