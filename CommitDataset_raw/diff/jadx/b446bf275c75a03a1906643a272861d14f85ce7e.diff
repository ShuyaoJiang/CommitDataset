[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +import jadx.api.JadxArgs;, +import jadx.core.utils.files.FileUtils;, +		JadxArgs args = inputArgs.toJadxArgs();, +		args.setFsCaseSensitive(getFsCaseSensitivity(args));, +		JadxDecompiler jadx = new JadxDecompiler(args);, +, +	private static boolean getFsCaseSensitivity(JadxArgs args) {, +		List<File> testDirList = new ArrayList<>(3);, +		testDirList.add(args.getOutDir());, +		testDirList.add(args.getOutDirSrc());, +		if (!args.getInputFiles().isEmpty()) {, +			testDirList.add(args.getInputFiles().get(0));, +		}, +		return FileUtils.isCaseSensitiveFS(testDirList);, +	}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +import jadx.api.JadxArgs;, +import jadx.core.utils.files.FileUtils;, +		JadxArgs args = inputArgs.toJadxArgs();, +		args.setFsCaseSensitive(getFsCaseSensitivity(args));, +		JadxDecompiler jadx = new JadxDecompiler(args);, +, +	private static boolean getFsCaseSensitivity(JadxArgs args) {, +		List<File> testDirList = new ArrayList<>(3);, +		testDirList.add(args.getOutDir());, +		testDirList.add(args.getOutDirSrc());, +		if (!args.getInputFiles().isEmpty()) {, +			testDirList.add(args.getInputFiles().get(0));, +		}, +		return FileUtils.isCaseSensitiveFS(testDirList);, +	}, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +import java.util.Collections;, +	private boolean isFsCaseSensitive;, +, +	public void setInputFile(File inputFile) {, +		this.inputFiles = Collections.singletonList(inputFile);, +	}, +, +	public boolean isFsCaseSensitive() {, +		return isFsCaseSensitive;, +	}, +, +	public void setFsCaseSensitive(boolean fsCaseSensitive) {, +		isFsCaseSensitive = fsCaseSensitive;, +	}, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +import jadx.api.JadxArgs;, +import jadx.core.utils.files.FileUtils;, +		JadxArgs args = inputArgs.toJadxArgs();, +		args.setFsCaseSensitive(getFsCaseSensitivity(args));, +		JadxDecompiler jadx = new JadxDecompiler(args);, +, +	private static boolean getFsCaseSensitivity(JadxArgs args) {, +		List<File> testDirList = new ArrayList<>(3);, +		testDirList.add(args.getOutDir());, +		testDirList.add(args.getOutDirSrc());, +		if (!args.getInputFiles().isEmpty()) {, +			testDirList.add(args.getInputFiles().get(0));, +		}, +		return FileUtils.isCaseSensitiveFS(testDirList);, +	}, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +import java.util.Collections;, +	private boolean isFsCaseSensitive;, +, +	public void setInputFile(File inputFile) {, +		this.inputFiles = Collections.singletonList(inputFile);, +	}, +, +	public boolean isFsCaseSensitive() {, +		return isFsCaseSensitive;, +	}, +, +	public void setFsCaseSensitive(boolean fsCaseSensitive) {, +		isFsCaseSensitive = fsCaseSensitive;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		checkClasses(root, args.isFsCaseSensitive());, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import java.io.File;, +import java.util.ArrayList;, +import java.util.List;, +, +import jadx.api.JadxArgs;]