[+++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		return Collections.unmodifiableList(classes);, +		return Collections.unmodifiableList(packages);, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		return Collections.unmodifiableList(classes);, +		return Collections.unmodifiableList(packages);, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.dex.attributes.AttributeFlag;, +import jadx.core.dex.info.AccessInfo;, +import jadx.core.dex.nodes.FieldNode;, +import jadx.core.dex.nodes.MethodNode;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +	private final List<JavaClass> innerClasses;, +	private final List<JavaField> fields;, +	private final List<JavaMethod> methods;, +, +		int inClsCount = cls.getInnerClasses().size();, +		if (inClsCount == 0) {, +			this.innerClasses = Collections.emptyList();, +		} else {, +			List<JavaClass> list = new ArrayList<JavaClass>(inClsCount);, +			for (ClassNode inner : cls.getInnerClasses()) {, +				list.add(new JavaClass(decompiler, inner));, +			}, +			this.innerClasses = Collections.unmodifiableList(list);, +		}, +, +		int fieldsCount = cls.getFields().size();, +		if (fieldsCount == 0) {, +			this.fields = Collections.emptyList();, +		} else {, +			List<JavaField> flds = new ArrayList<JavaField>(fieldsCount);, +			for (FieldNode f : cls.getFields()) {, +				flds.add(new JavaField(f));, +			}, +			this.fields = Collections.unmodifiableList(flds);, +		}, +, +		int methodsCount = cls.getMethods().size();, +		if (methodsCount == 0) {, +			this.methods = Collections.emptyList();, +		} else {, +			List<JavaMethod> mths = new ArrayList<JavaMethod>(methodsCount);, +			for (MethodNode m : cls.getMethods()) {, +				if (!m.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +					mths.add(new JavaMethod(m));, +				}, +			}, +			this.methods = Collections.unmodifiableList(mths);, +		}, +	public AccessInfo getAccessInfo() {, +		return cls.getAccessFlags();, +	}, +, +	public List<JavaClass> getInnerClasses() {, +		return innerClasses;, +	}, +, +	public List<JavaField> getFields() {, +		return fields;, +	}, +, +	public List<JavaMethod> getMethods() {, +		return methods;, +	}, +, +, +	public int getDecompiledLine() {, +		return cls.getDecompiledLine();, +	}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		return Collections.unmodifiableList(classes);, +		return Collections.unmodifiableList(packages);, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.dex.attributes.AttributeFlag;, +import jadx.core.dex.info.AccessInfo;, +import jadx.core.dex.nodes.FieldNode;, +import jadx.core.dex.nodes.MethodNode;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +	private final List<JavaClass> innerClasses;, +	private final List<JavaField> fields;, +	private final List<JavaMethod> methods;, +, +		int inClsCount = cls.getInnerClasses().size();, +		if (inClsCount == 0) {, +			this.innerClasses = Collections.emptyList();, +		} else {, +			List<JavaClass> list = new ArrayList<JavaClass>(inClsCount);, +			for (ClassNode inner : cls.getInnerClasses()) {, +				list.add(new JavaClass(decompiler, inner));, +			}, +			this.innerClasses = Collections.unmodifiableList(list);, +		}, +]