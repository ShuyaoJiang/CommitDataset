[+++ b/jadx-cli/build.gradle, +    compile 'com.beust:jcommander:1.72', +++ b/jadx-cli/build.gradle, +    compile 'com.beust:jcommander:1.72', +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.exceptions.JadxArgsValidateException;, +		try {, +		} catch (JadxArgsValidateException e) {, +			LOG.error("Incorrect arguments: {}", e.getMessage());, +			System.exit(1);, +		}, +++ b/jadx-cli/build.gradle, +    compile 'com.beust:jcommander:1.72', +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.exceptions.JadxArgsValidateException;, +		try {, +		} catch (JadxArgsValidateException e) {, +			LOG.error("Incorrect arguments: {}", e.getMessage());, +			System.exit(1);, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(description = "<input file> (.apk, .dex, .jar or .class)"), +	@Parameter(names = {"-j", "--threads-count"}, description = "processing threads count"), +	protected int threadsCount = JadxArgs.DEFAULT_THREADS_COUNT;, +, +	@Parameter(names = {"--no-imports"}, description = "disable use of imports, always write entire package name"), +	@Parameter(names = "--no-replace-consts", description = "don't replace constant value with matching constant field"), +	@Parameter(names = {"--version"}, description = "print jadx version"), +	protected boolean printVersion = false;, +, +			makeJCommander().parse(args);, +	private JCommander makeJCommander() {, +		return JCommander.newBuilder().addObject(this).build();, +	}, +, +		if (printHelp) {, +		if (printVersion) {, +			System.out.println(JadxDecompiler.getVersion());, +			return false;, +		}, +			if (verbose) {, +		JCommander jc = makeJCommander();, +			opt.append("  ").append(p.getNames());, +	public boolean isEscapeUnicode() {, +		return escapeUnicode;, +	}, +, +	public boolean isCfgOutput() {, +		return cfgOutput;, +	}, +, +	public boolean isRawCfgOutput() {, +		return rawCfgOutput;, +	}, +, +++ b/jadx-cli/build.gradle, +    compile 'com.beust:jcommander:1.72', +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.exceptions.JadxArgsValidateException;, +		try {, +		} catch (JadxArgsValidateException e) {, +			LOG.error("Incorrect arguments: {}", e.getMessage());, +			System.exit(1);, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(description = "<input file> (.apk, .dex, .jar or .class)"), +	@Parameter(names = {"-j", "--threads-count"}, description = "processing threads count"), +	protected int threadsCount = JadxArgs.DEFAULT_THREADS_COUNT;, +, +	@Parameter(names = {"--no-imports"}, description = "disable use of imports, always write entire package name"), +	@Parameter(names = "--no-replace-consts", description = "don't replace constant value with matching constant field"), +	@Parameter(names = {"--version"}, description = "print jadx version"), +	protected boolean printVersion = false;, +, +			makeJCommander().parse(args);, +	private JCommander makeJCommander() {, +		return JCommander.newBuilder().addObject(this).build();, +	}, +, +		if (printHelp) {, +		if (printVersion) {, +			System.out.println(JadxDecompiler.getVersion());, +			return false;, +		}, +			if (verbose) {, +		JCommander jc = makeJCommander();, +			opt.append("  ").append(p.getNames());, +	public boolean isEscapeUnicode() {, +		return escapeUnicode;, +	}, +, +	public boolean isCfgOutput() {, +		return cfgOutput;, +	}, +, +	public boolean isRawCfgOutput() {, +		return rawCfgOutput;, +	}, +, +++ b/jadx-cli/src/main/resources/logback.xml]