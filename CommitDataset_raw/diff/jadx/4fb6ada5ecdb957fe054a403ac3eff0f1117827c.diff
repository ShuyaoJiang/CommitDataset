[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/EliminatePhiNodes.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(EliminatePhiNodes.class);, +, +				removeInsn(mth, block, phiInsn);, +			}, +		}, +	}, +, +	private static void removeInsn(MethodNode mth, BlockNode block, PhiInsn phiInsn) {, +		Iterator<InsnNode> it = block.getInstructions().iterator();, +		while (it.hasNext()) {, +			InsnNode insn = it.next();, +				it.remove();, +				return;, +		LOG.warn("Phi node not removed: {}, mth: {}", phiInsn, mth);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/EliminatePhiNodes.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(EliminatePhiNodes.class);, +, +				removeInsn(mth, block, phiInsn);, +			}, +		}, +	}, +, +	private static void removeInsn(MethodNode mth, BlockNode block, PhiInsn phiInsn) {, +		Iterator<InsnNode> it = block.getInstructions().iterator();, +		while (it.hasNext()) {, +			InsnNode insn = it.next();, +				it.remove();, +				return;, +		LOG.warn("Phi node not removed: {}, mth: {}", phiInsn, mth);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/PostTypeInference.java, +import jadx.core.dex.instructions.PhiInsn;, +			case PHI: {, +				PhiInsn phi = (PhiInsn) insn;, +				SSAVar resultSVar = phi.getResult().getSVar();, +				if (resultSVar != null && !resultSVar.getType().isTypeKnown()) {, +					for (InsnArg arg : phi.getArguments()) {, +						ArgType argType = arg.getType();, +						if (argType.isTypeKnown()) {, +							resultSVar.setType(argType);, +							return true;, +						}, +					}, +				}, +				return false;, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/EliminatePhiNodes.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(EliminatePhiNodes.class);, +, +				removeInsn(mth, block, phiInsn);, +			}, +		}, +	}, +, +	private static void removeInsn(MethodNode mth, BlockNode block, PhiInsn phiInsn) {, +		Iterator<InsnNode> it = block.getInstructions().iterator();, +		while (it.hasNext()) {, +			InsnNode insn = it.next();, +				it.remove();, +				return;, +		LOG.warn("Phi node not removed: {}, mth: {}", phiInsn, mth);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/PostTypeInference.java, +import jadx.core.dex.instructions.PhiInsn;, +			case PHI: {, +				PhiInsn phi = (PhiInsn) insn;, +				SSAVar resultSVar = phi.getResult().getSVar();, +				if (resultSVar != null && !resultSVar.getType().isTypeKnown()) {, +					for (InsnArg arg : phi.getArguments()) {, +						ArgType argType = arg.getType();, +						if (argType.isTypeKnown()) {, +							resultSVar.setType(argType);, +							return true;, +						}, +					}, +				}, +				return false;, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInference.java, +	private static ArgType processType(SSAVar var) {, +			ArgType newType = ArgType.merge(type, useType);, +			if (newType != null) {, +				type = newType;, +	private static void processPhiNode(PhiInsn phi) {, +	private static String processVarName(SSAVar var) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/EliminatePhiNodes.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(EliminatePhiNodes.class);]