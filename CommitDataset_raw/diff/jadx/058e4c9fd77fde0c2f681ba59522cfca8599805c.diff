[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithOp.java, +	public boolean noWrapWith(ArithOp other) {, +		return (this == ADD && other == ADD), +				|| (this == MUL && other == MUL), +				|| (this == AND && other == AND), +				|| (this == OR && other == OR);, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithOp.java, +	public boolean noWrapWith(ArithOp other) {, +		return (this == ADD && other == ADD), +				|| (this == MUL && other == MUL), +				|| (this == AND && other == AND), +				|| (this == OR && other == OR);, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.InsnType;, +, +		if (insn.getType() == InsnType.ARITH && parent.getType() == InsnType.ARITH, +				&& ((ArithNode) insn).getOp().noWrapWith(((ArithNode) parent).getOp())) {, +			insn.add(AFlag.DONT_WRAP);, +		}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithOp.java, +	public boolean noWrapWith(ArithOp other) {, +		return (this == ADD && other == ADD), +				|| (this == MUL && other == MUL), +				|| (this == AND && other == AND), +				|| (this == OR && other == OR);, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.InsnType;, +, +		if (insn.getType() == InsnType.ARITH && parent.getType() == InsnType.ARITH, +				&& ((ArithNode) insn).getOp().noWrapWith(((ArithNode) parent).getOp())) {, +			insn.add(AFlag.DONT_WRAP);, +		}, +, +++ b/jadx-core/src/test/java/jadx/tests/integration/arith/TestArith2.java, +, +		public boolean test3(boolean a, boolean b, boolean c) {, +			return a | b | c;, +		}, +, +		public boolean test4(boolean a, boolean b, boolean c) {, +			return a & b & c;, +		}, +, +		public int substract(int a, int b, int c) {, +			return a - (b - c);, +		}, +, +		public int divide(int a, int b, int c) {, +			return a / (b / c);, +		}, +, +		assertThat(code, containsString("return a | b | c;"));, +		assertThat(code, not(containsString("return (a | b) | c;")));, +, +		assertThat(code, containsString("return a & b & c;"));, +		assertThat(code, not(containsString("return (a & b) & c;")));, +, +		assertThat(code, containsString("return a - (b - c);"));, +		assertThat(code, not(containsString("return a - b - c;")));, +, +		assertThat(code, containsString("return a / (b / c);"));, +		assertThat(code, not(containsString("return a / b / c;")));]