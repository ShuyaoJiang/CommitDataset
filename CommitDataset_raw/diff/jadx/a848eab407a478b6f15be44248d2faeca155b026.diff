[+++ b/.gitignore, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java, +				opt.append(" (default: ").append(val).append(')');, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java, +				opt.append(" (default: ").append(val).append(')');, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	private boolean process(JCommanderWrapper<?> jcw) {, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java, +				opt.append(" (default: ").append(val).append(')');, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	private boolean process(JCommanderWrapper<?> jcw) {, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +		return line + ':' + offset + (node != null ? " " + node : "");, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java, +				opt.append(" (default: ").append(val).append(')');, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	private boolean process(JCommanderWrapper<?> jcw) {, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +		return line + ':' + offset + (node != null ? " " + node : "");, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java, +				opt.append(" (default: ").append(val).append(')');, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	private boolean process(JCommanderWrapper<?> jcw) {, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +		return line + ':' + offset + (node != null ? " " + node : "");, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java, +				opt.append(" (default: ").append(val).append(')');, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	private boolean process(JCommanderWrapper<?> jcw) {, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +		return line + ':' + offset + (node != null ? " " + node : "");, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.CodeShrinker;, +import jadx.core.dex.visitors.DebugInfoVisitor;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.regions.ProcessVariables;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +			passes.add(new SSATransform());, +			if (args.isDebugInfo()) {, +				passes.add(new DebugInfoVisitor());, +			}, +			passes.add(new TypeInference());, +, +			passes.add(new FinishTypeInference());, +			passes.add(new EliminatePhiNodes());, +, +			passes.add(new CodeShrinker());, +, +			passes.add(new CodeShrinker());, +			passes.add(new LoopRegionVisitor());, +			passes.add(new ProcessVariables());, +, +, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JCommanderWrapper.java, +				opt.append(" (default: ").append(val).append(')');, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	private boolean process(JCommanderWrapper<?> jcw) {, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +		return line + ':' + offset + (node != null ? " " + node : "");, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.CodeShrinker;, +import jadx.core.dex.visitors.DebugInfoVisitor;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.regions.ProcessVariables;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +			passes.add(new SSATransform());, +			if (args.isDebugInfo()) {, +				passes.add(new DebugInfoVisitor());]