[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				InputFile.addFilesFrom(file, inputFiles);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				InputFile.addFilesFrom(file, inputFiles);, +++ b/jadx-core/src/main/java/jadx/api/ResourceType.java, +	CODE(".dex", ".jar", ".class"),, +	XML(".xml"),, +	ARSC(".arsc"),, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				InputFile.addFilesFrom(file, inputFiles);, +++ b/jadx-core/src/main/java/jadx/api/ResourceType.java, +	CODE(".dex", ".jar", ".class"),, +	XML(".xml"),, +	ARSC(".arsc"),, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +					return loadContent(jadxRef, rf, is, size);, +			InputStream inputStream, long size) throws IOException {, +		if (size > LOAD_SIZE_LIMIT) {, +			return ResContainer.singleFile(rf.getName(),, +					new CodeWriter().add("File too big, size: " + String.format("%.2f KB", size / 1024.)));, +		}, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				InputFile.addFilesFrom(file, inputFiles);, +++ b/jadx-core/src/main/java/jadx/api/ResourceType.java, +	CODE(".dex", ".jar", ".class"),, +	XML(".xml"),, +	ARSC(".arsc"),, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +					return loadContent(jadxRef, rf, is, size);, +			InputStream inputStream, long size) throws IOException {, +		if (size > LOAD_SIZE_LIMIT) {, +			return ResContainer.singleFile(rf.getName(),, +					new CodeWriter().add("File too big, size: " + String.format("%.2f KB", size / 1024.)));, +		}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ConvertToClsSet.java, +				InputFile.addFilesFrom(f, inputFiles);, +	private static void addFilesFromDirectory(File dir, List<InputFile> inputFiles) {, +			} else {, +				try {, +					InputFile.addFilesFrom(file, inputFiles);, +				} catch (Exception e) {, +					LOG.warn("Skip file: {}, load error: {}", file, e.getMessage());, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				InputFile.addFilesFrom(file, inputFiles);, +++ b/jadx-core/src/main/java/jadx/api/ResourceType.java, +	CODE(".dex", ".jar", ".class"),, +	XML(".xml"),, +	ARSC(".arsc"),, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +					return loadContent(jadxRef, rf, is, size);, +			InputStream inputStream, long size) throws IOException {, +		if (size > LOAD_SIZE_LIMIT) {, +			return ResContainer.singleFile(rf.getName(),, +					new CodeWriter().add("File too big, size: " + String.format("%.2f KB", size / 1024.)));, +		}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ConvertToClsSet.java, +				InputFile.addFilesFrom(f, inputFiles);, +	private static void addFilesFromDirectory(File dir, List<InputFile> inputFiles) {, +			} else {, +				try {, +					InputFile.addFilesFrom(file, inputFiles);, +				} catch (Exception e) {, +					LOG.warn("Skip file: {}, load error: {}", file, e.getMessage());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java, +import jadx.core.utils.files.DexFile;, +	private final DexFile file;, +	public DexNode(RootNode root, DexFile input) {, +		this.dexBuf = input.getDexBuf();, +	public DexFile getDexFile() {, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				InputFile.addFilesFrom(file, inputFiles);, +++ b/jadx-core/src/main/java/jadx/api/ResourceType.java, +	CODE(".dex", ".jar", ".class"),, +	XML(".xml"),, +	ARSC(".arsc"),, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +					return loadContent(jadxRef, rf, is, size);, +			InputStream inputStream, long size) throws IOException {, +		if (size > LOAD_SIZE_LIMIT) {, +			return ResContainer.singleFile(rf.getName(),, +					new CodeWriter().add("File too big, size: " + String.format("%.2f KB", size / 1024.)));, +		}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ConvertToClsSet.java, +				InputFile.addFilesFrom(f, inputFiles);, +	private static void addFilesFromDirectory(File dir, List<InputFile> inputFiles) {, +			} else {, +				try {, +					InputFile.addFilesFrom(file, inputFiles);, +				} catch (Exception e) {, +					LOG.warn("Skip file: {}, load error: {}", file, e.getMessage());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java, +import jadx.core.utils.files.DexFile;, +	private final DexFile file;, +	public DexNode(RootNode root, DexFile input) {, +		this.dexBuf = input.getDexBuf();, +	public DexFile getDexFile() {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java, +import jadx.core.utils.files.DexFile;, +	public void load(List<InputFile> inputFiles) throws DecodeException {, +		dexNodes = new ArrayList<DexNode>();]