[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.FieldArg;, +			return mgen.makeArgName((RegisterArg) arg);, +		} else if (arg.isField()) {, +			FieldArg f = (FieldArg) arg;, +			if (f.isStatic()) {, +				return sfield(f.getField());, +			} else {, +				RegisterArg regArg = new RegisterArg(f.getRegNum());, +				regArg.setTypedVar(f.getTypedVar());, +				return ifield(f.getField(), regArg);, +			}, +	public String assignVar(InsnNode insn) throws CodegenException {, +	private String ifield(FieldInfo field, InsnArg arg) throws CodegenException {, +		return arg(arg) + "." + field.getName();, +	private String sfield(FieldInfo field) {, +			case IGET: {, +				FieldInfo fieldInfo = (FieldInfo) ((IndexInsnNode) insn).getIndex();, +				code.add(ifield(fieldInfo, insn.getArg(0)));, +			}, +			case IPUT: {, +				FieldInfo fieldInfo = (FieldInfo) ((IndexInsnNode) insn).getIndex();, +				code.add(ifield(fieldInfo, insn.getArg(1))).add(" = ").add(arg(insn.getArg(0)));, +			}, +				code.add(sfield((FieldInfo) ((IndexInsnNode) insn).getIndex()));, +				code.add(sfield((FieldInfo) node.getIndex())).add(" = ").add(arg(node.getArg(0)));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.FieldArg;, +			return mgen.makeArgName((RegisterArg) arg);, +		} else if (arg.isField()) {, +			FieldArg f = (FieldArg) arg;, +			if (f.isStatic()) {, +				return sfield(f.getField());, +			} else {, +				RegisterArg regArg = new RegisterArg(f.getRegNum());, +				regArg.setTypedVar(f.getTypedVar());, +				return ifield(f.getField(), regArg);, +			}, +	public String assignVar(InsnNode insn) throws CodegenException {, +	private String ifield(FieldInfo field, InsnArg arg) throws CodegenException {, +		return arg(arg) + "." + field.getName();, +	private String sfield(FieldInfo field) {, +			case IGET: {, +				FieldInfo fieldInfo = (FieldInfo) ((IndexInsnNode) insn).getIndex();, +				code.add(ifield(fieldInfo, insn.getArg(0)));, +			}, +			case IPUT: {, +				FieldInfo fieldInfo = (FieldInfo) ((IndexInsnNode) insn).getIndex();, +				code.add(ifield(fieldInfo, insn.getArg(1))).add(" = ").add(arg(insn.getArg(0)));, +			}, +				code.add(sfield((FieldInfo) ((IndexInsnNode) insn).getIndex()));, +				code.add(sfield((FieldInfo) node.getIndex())).add(" = ").add(arg(node.getArg(0)));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, +package jadx.core.dex.instructions.args;, +, +import jadx.core.dex.info.FieldInfo;, +, +public final class FieldArg extends RegisterArg {, +, +	private final FieldInfo field;, +, +	public FieldArg(FieldInfo field, int regNum) {, +		super(regNum, field.getType());, +		this.field = field;, +	}, +, +	public FieldInfo getField() {, +		return field;, +	}, +, +	public boolean isStatic() {, +		return regNum == -1;, +	}, +, +	@Override, +	public boolean isField() {, +		return true;, +	}, +, +	@Override, +	public boolean isRegister() {, +		return false;, +	}, +, +	@Override, +	public String toString() {, +		return "(" + field + ")";, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.FieldArg;, +			return mgen.makeArgName((RegisterArg) arg);, +		} else if (arg.isField()) {, +			FieldArg f = (FieldArg) arg;, +			if (f.isStatic()) {, +				return sfield(f.getField());, +			} else {, +				RegisterArg regArg = new RegisterArg(f.getRegNum());, +				regArg.setTypedVar(f.getTypedVar());, +				return ifield(f.getField(), regArg);]