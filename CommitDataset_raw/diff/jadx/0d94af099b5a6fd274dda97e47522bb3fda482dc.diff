[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.ReturnVisitor;, +			passes.add(new ReturnVisitor());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.ReturnVisitor;, +			passes.add(new ReturnVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (!els.contains(AFlag.ELSE_IF_CHAIN)) {, +			return false;, +		}, +		if (!(els instanceof Region)) {, +			return false;, +		}, +		List<IContainer> subBlocks = ((Region) els).getSubBlocks();, +		if (subBlocks.size() == 1, +				&& subBlocks.get(0) instanceof IfRegion) {, +			makeIf((IfRegion) subBlocks.get(0), code, false);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.ReturnVisitor;, +			passes.add(new ReturnVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (!els.contains(AFlag.ELSE_IF_CHAIN)) {, +			return false;, +		}, +		if (!(els instanceof Region)) {, +			return false;, +		}, +		List<IContainer> subBlocks = ((Region) els).getSubBlocks();, +		if (subBlocks.size() == 1, +				&& subBlocks.get(0) instanceof IfRegion) {, +			makeIf((IfRegion) subBlocks.get(0), code, false);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +	public String baseString() {, +		return Integer.toString(id);, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.ReturnVisitor;, +			passes.add(new ReturnVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (!els.contains(AFlag.ELSE_IF_CHAIN)) {, +			return false;, +		}, +		if (!(els instanceof Region)) {, +			return false;, +		}, +		List<IContainer> subBlocks = ((Region) els).getSubBlocks();, +		if (subBlocks.size() == 1, +				&& subBlocks.get(0) instanceof IfRegion) {, +			makeIf((IfRegion) subBlocks.get(0), code, false);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +	public String baseString() {, +		return Integer.toString(id);, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IContainer.java, +, +	// unique id for use in 'toString()' method, +	String baseString();, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.ReturnVisitor;, +			passes.add(new ReturnVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (!els.contains(AFlag.ELSE_IF_CHAIN)) {, +			return false;, +		}, +		if (!(els instanceof Region)) {, +			return false;, +		}, +		List<IContainer> subBlocks = ((Region) els).getSubBlocks();, +		if (subBlocks.size() == 1, +				&& subBlocks.get(0) instanceof IfRegion) {, +			makeIf((IfRegion) subBlocks.get(0), code, false);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +	public String baseString() {, +		return Integer.toString(id);, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IContainer.java, +, +	// unique id for use in 'toString()' method, +	String baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnContainer.java, +	@Override, +	public String baseString() {, +		return Integer.toString(insns.size());, +	}, +, +	@Override, +	public String toString() {, +		return "InsnContainer:" + insns.size();, +	}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.ReturnVisitor;, +			passes.add(new ReturnVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (!els.contains(AFlag.ELSE_IF_CHAIN)) {]