[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode || mth.contains(AType.JADX_ERROR) || fallback) {, +			if (fallback) {, +				mthGen.addFallbackMethodCode(code);, +			} else {, +			}, +			code.startLine("/* compiled from: ").add(sourceFileAttr.getFileName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode || mth.contains(AType.JADX_ERROR) || fallback) {, +			if (fallback) {, +				mthGen.addFallbackMethodCode(code);, +			} else {, +			}, +			code.startLine("/* compiled from: ").add(sourceFileAttr.getFileName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		if (name == null || fallback) {, +		return name != null ? base + "_" + name : base;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode || mth.contains(AType.JADX_ERROR) || fallback) {, +			if (fallback) {, +				mthGen.addFallbackMethodCode(code);, +			} else {, +			}, +			code.startLine("/* compiled from: ").add(sourceFileAttr.getFileName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		if (name == null || fallback) {, +		return name != null ? base + "_" + name : base;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public void checkInstructions() {, +		List<RegisterArg> list = new ArrayList<RegisterArg>();, +		for (InsnNode insnNode : instructions) {, +			if (insnNode == null) {, +				continue;, +			}, +			list.clear();, +			RegisterArg resultArg = insnNode.getResult();, +			if (resultArg != null) {, +				list.add(resultArg);, +			}, +			insnNode.getRegisterArgs(list);, +			for (int i = 0, listSize = list.size(); i < listSize; i++) {, +				if (list.get(i).getRegNum() >= regsCount) {, +					throw new JadxRuntimeException("Incorrect register number in instruction: " + insnNode);, +				}, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode || mth.contains(AType.JADX_ERROR) || fallback) {, +			if (fallback) {, +				mthGen.addFallbackMethodCode(code);, +			} else {, +			}, +			code.startLine("/* compiled from: ").add(sourceFileAttr.getFileName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		if (name == null || fallback) {, +		return name != null ? base + "_" + name : base;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public void checkInstructions() {, +		List<RegisterArg> list = new ArrayList<RegisterArg>();, +		for (InsnNode insnNode : instructions) {, +			if (insnNode == null) {, +				continue;, +			}, +			list.clear();, +			RegisterArg resultArg = insnNode.getResult();, +			if (resultArg != null) {, +				list.add(resultArg);, +			}, +			insnNode.getRegisterArgs(list);, +			for (int i = 0, listSize = list.size(); i < listSize; i++) {, +				if (list.get(i).getRegNum() >= regsCount) {, +					throw new JadxRuntimeException("Incorrect register number in instruction: " + insnNode);, +				}, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/BlockMakerVisitor.java, +		mth.checkInstructions();, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode || mth.contains(AType.JADX_ERROR) || fallback) {, +			if (fallback) {, +				mthGen.addFallbackMethodCode(code);, +			} else {, +			}, +			code.startLine("/* compiled from: ").add(sourceFileAttr.getFileName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		if (name == null || fallback) {, +		return name != null ? base + "_" + name : base;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public void checkInstructions() {, +		List<RegisterArg> list = new ArrayList<RegisterArg>();, +		for (InsnNode insnNode : instructions) {, +			if (insnNode == null) {, +				continue;, +			}, +			list.clear();]