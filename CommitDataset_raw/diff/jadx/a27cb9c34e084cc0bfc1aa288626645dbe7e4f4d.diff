[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +import jadx.core.dex.nodes.BlockNode;, +public class GotoNode extends TargetInsnNode {, +	public boolean replaceTargetBlock(BlockNode origin, BlockNode replace) {, +		return false;, +	}, +, +	@Override, +	public void initBlocks(BlockNode curBlock) {, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +import jadx.core.dex.nodes.BlockNode;, +public class GotoNode extends TargetInsnNode {, +	public boolean replaceTargetBlock(BlockNode origin, BlockNode replace) {, +		return false;, +	}, +, +	@Override, +	public void initBlocks(BlockNode curBlock) {, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	@Override, +	@Override, +	public boolean replaceTargetBlock(BlockNode origin, BlockNode replace) {, +		if (thenBlock == origin) {, +			thenBlock = replace;, +			return true;, +		}, +		if (elseBlock == origin) {, +			elseBlock = replace;, +			return true;, +		}, +		return false;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +import jadx.core.dex.nodes.BlockNode;, +public class GotoNode extends TargetInsnNode {, +	public boolean replaceTargetBlock(BlockNode origin, BlockNode replace) {, +		return false;, +	}, +, +	@Override, +	public void initBlocks(BlockNode curBlock) {, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	@Override, +	@Override, +	public boolean replaceTargetBlock(BlockNode origin, BlockNode replace) {, +		if (thenBlock == origin) {, +			thenBlock = replace;, +			return true;, +		}, +		if (elseBlock == origin) {, +			elseBlock = replace;, +			return true;, +		}, +		return false;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/SwitchNode.java, +import java.util.List;, +import jadx.core.dex.nodes.BlockNode;, +import static jadx.core.utils.BlockUtils.getBlockByOffset;, +, +public class SwitchNode extends TargetInsnNode {, +	private BlockNode[] targetBlocks;, +	private BlockNode defTargetBlock;, +, +	public BlockNode[] getTargetBlocks() {, +		return targetBlocks;, +	}, +, +	public BlockNode getDefTargetBlock() {, +		return defTargetBlock;, +	}, +, +	@Override, +	public void initBlocks(BlockNode curBlock) {, +		List<BlockNode> successors = curBlock.getSuccessors();, +		int len = targets.length;, +		targetBlocks = new BlockNode[len];, +		for (int i = 0; i < len; i++) {, +			targetBlocks[i] = getBlockByOffset(targets[i], successors);, +		}, +		defTargetBlock = getBlockByOffset(def, successors);, +	}, +, +	@Override, +	public boolean replaceTargetBlock(BlockNode origin, BlockNode replace) {, +		int count = 0;, +		int len = targetBlocks.length;, +		for (int i = 0; i < len; i++) {, +			if (targetBlocks[i] == origin) {]