[+++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		arg.setName(name);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		arg.setName(name);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	public RegisterArg duplicate() {, +		RegisterArg dup = new RegisterArg(getRegNum(), getType());, +		dup.setSVar(sVar);, +		return dup;, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		arg.setName(name);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	public RegisterArg duplicate() {, +		RegisterArg dup = new RegisterArg(getRegNum(), getType());, +		dup.setSVar(sVar);, +		return dup;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +import java.util.ArrayList;, +					InsnNode newInstInsn = removeAssignChain(instArgAssignInsn, remover, InsnType.NEW_INSTANCE);, +					if (newInstInsn != null) {, +						RegisterArg instArg = newInstInsn.getResult();, +						RegisterArg resultArg = co.getResult();, +						if (!resultArg.equals(instArg)) {, +							// replace all usages of 'instArg' with result of this constructor instruction, +							for (RegisterArg useArg : new ArrayList<RegisterArg>(instArg.getSVar().getUseList())) {, +								RegisterArg dup = resultArg.duplicate();, +								InsnNode parentInsn = useArg.getParentInsn();, +								parentInsn.replaceArg(useArg, dup);, +								dup.setParentInsn(parentInsn);, +								resultArg.getSVar().use(dup);, +							}, +						}, +					}, +		if (callMth == null, +				|| !callMth.getAccessFlags().isSynthetic(), +				|| !allArgsNull(co)) {, +			return null;, +		}, +		if (classNode == null) {, +			return null;, +		}, +		if (defCtr == null) {, +			return null;, +		}, +	private static InsnNode removeAssignChain(InsnNode insn, InstructionRemover remover, InsnType insnType) {, +			return null;, +			return insn;, +			return removeAssignChain(arg.getAssignInsn(), remover, insnType);, +		return null;]