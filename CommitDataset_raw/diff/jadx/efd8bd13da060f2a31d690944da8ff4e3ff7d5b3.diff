[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		if (classInfo.getAlias().getPackage().isEmpty()) {, +			String fullName = classInfo.makeFullClsName(classInfo.getAlias().getShortName(), true);, +			String newFullName = Consts.DEFAULT_PACKAGE_NAME + "." + fullName;, +			classInfo.rename(cls.dex(), newFullName);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		if (classInfo.getAlias().getPackage().isEmpty()) {, +			String fullName = classInfo.makeFullClsName(classInfo.getAlias().getShortName(), true);, +			String newFullName = Consts.DEFAULT_PACKAGE_NAME + "." + fullName;, +			classInfo.rename(cls.dex(), newFullName);, +		}, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.empty;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.notNullValue;, +		assertThat("Class not found: " + clsName, cls, notNullValue());, +		assertThat(clsName, is(cls.getClassInfo().getFullName()));, +			throw (AssertionError) cause;, +		assertThat("File list is empty", list, not(empty()));, +		assertThat("Test source file not found: " + fileName, file.exists(), is(true));, +		List<File> compileFileList = Collections.singletonList(file);, +		List<File> files = StaticCompiler.compile(compileFileList, outTmp, withDebugInfo);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		if (classInfo.getAlias().getPackage().isEmpty()) {, +			String fullName = classInfo.makeFullClsName(classInfo.getAlias().getShortName(), true);, +			String newFullName = Consts.DEFAULT_PACKAGE_NAME + "." + fullName;, +			classInfo.rename(cls.dex(), newFullName);, +		}, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.empty;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.not;, +import static org.hamcrest.Matchers.notNullValue;, +		assertThat("Class not found: " + clsName, cls, notNullValue());, +		assertThat(clsName, is(cls.getClassInfo().getFullName()));, +			throw (AssertionError) cause;, +		assertThat("File list is empty", list, not(empty()));, +		assertThat("Test source file not found: " + fileName, file.exists(), is(true));, +		List<File> compileFileList = Collections.singletonList(file);, +		List<File> files = StaticCompiler.compile(compileFileList, outTmp, withDebugInfo);, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettingsAdapter.java, +			LOG.debug("Loaded settings: {}", makeString(settings));]