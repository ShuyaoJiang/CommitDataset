[+++ b/jadx-core/build.gradle, +    testCompile 'org.smali:smali:2.2.2', +    testCompile 'org.smali:baksmali:2.2.2', +++ b/jadx-core/build.gradle, +    testCompile 'org.smali:smali:2.2.2', +    testCompile 'org.smali:baksmali:2.2.2', +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case NEG:, +				oneArgInsn(code, insn, state, '-');, +, +			case NOT:, +				oneArgInsn(code, insn, state, '~');, +				break;, +	private void oneArgInsn(CodeWriter code, InsnNode insn, Set<Flags> state, char op) throws CodegenException {, +		boolean wrap = state.contains(Flags.BODY_ONLY);, +		if (wrap) {, +			code.add('(');, +		}, +		code.add(op);, +		addArg(code, insn.getArg(0));, +		if (wrap) {, +			code.add(')');, +		}, +	}, +, +++ b/jadx-core/build.gradle, +    testCompile 'org.smali:smali:2.2.2', +    testCompile 'org.smali:baksmali:2.2.2', +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case NEG:, +				oneArgInsn(code, insn, state, '-');, +, +			case NOT:, +				oneArgInsn(code, insn, state, '~');, +				break;, +	private void oneArgInsn(CodeWriter code, InsnNode insn, Set<Flags> state, char op) throws CodegenException {, +		boolean wrap = state.contains(Flags.BODY_ONLY);, +		if (wrap) {, +			code.add('(');, +		}, +		code.add(op);, +		addArg(code, insn.getArg(0));, +		if (wrap) {, +			code.add(')');, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +			case Opcodes.NOT_INT:, +				return not(insn, ArgType.INT);, +			case Opcodes.NOT_LONG:, +				return not(insn, ArgType.LONG);, +, +	private InsnNode not(DecodedInstruction insn, ArgType type) {, +		InsnNode inode = new InsnNode(InsnType.NOT, 1);, +		inode.setResult(InsnArg.reg(insn, 0, type));, +		inode.addArg(InsnArg.reg(insn, 1, type));, +		return inode;, +	}, +, +++ b/jadx-core/build.gradle, +    testCompile 'org.smali:smali:2.2.2', +    testCompile 'org.smali:baksmali:2.2.2', +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case NEG:, +				oneArgInsn(code, insn, state, '-');, +, +			case NOT:, +				oneArgInsn(code, insn, state, '~');, +				break;, +	private void oneArgInsn(CodeWriter code, InsnNode insn, Set<Flags> state, char op) throws CodegenException {, +		boolean wrap = state.contains(Flags.BODY_ONLY);, +		if (wrap) {, +			code.add('(');, +		}, +		code.add(op);, +		addArg(code, insn.getArg(0));, +		if (wrap) {, +			code.add(')');, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +			case Opcodes.NOT_INT:, +				return not(insn, ArgType.INT);, +			case Opcodes.NOT_LONG:, +				return not(insn, ArgType.LONG);, +, +	private InsnNode not(DecodedInstruction insn, ArgType type) {, +		InsnNode inode = new InsnNode(InsnType.NOT, 1);, +		inode.setResult(InsnArg.reg(insn, 0, type));, +		inode.addArg(InsnArg.reg(insn, 1, type));, +		return inode;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	NOT,, +++ b/jadx-core/build.gradle, +    testCompile 'org.smali:smali:2.2.2', +    testCompile 'org.smali:baksmali:2.2.2']