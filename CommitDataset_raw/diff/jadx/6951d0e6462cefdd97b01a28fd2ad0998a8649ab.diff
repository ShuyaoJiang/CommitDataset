[+++ b/jadx-core/build.gradle, +    compile 'com.intellij:annotations:12.0', +++ b/jadx-core/build.gradle, +    compile 'com.intellij:annotations:12.0', +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	// not null after SSATransform pass, +	private SSAVar sVar;, +		return sVar.getAssign().getParentInsn();, +		InsnNode parent = sVar.getAssign().getParentInsn();, +++ b/jadx-core/build.gradle, +    compile 'com.intellij:annotations:12.0', +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	// not null after SSATransform pass, +	private SSAVar sVar;, +		return sVar.getAssign().getParentInsn();, +		InsnNode parent = sVar.getAssign().getParentInsn();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +import org.jetbrains.annotations.NotNull;, +import org.jetbrains.annotations.Nullable;, +, +	@NotNull, +	@Nullable, +	public SSAVar(int regNum, int v, @NotNull RegisterArg assign) {, +		if (assign.getParentInsn() != null) {, +	@NotNull, +	public void setAssign(@NotNull RegisterArg assign) {, +	public void setUsedInPhi(@Nullable PhiInsn usedInPhi) {, +	@Nullable, +		if (usedInPhi == null) {, +++ b/jadx-core/build.gradle, +    compile 'com.intellij:annotations:12.0', +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	// not null after SSATransform pass, +	private SSAVar sVar;, +		return sVar.getAssign().getParentInsn();, +		InsnNode parent = sVar.getAssign().getParentInsn();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +import org.jetbrains.annotations.NotNull;, +import org.jetbrains.annotations.Nullable;, +, +	@NotNull, +	@Nullable, +	public SSAVar(int regNum, int v, @NotNull RegisterArg assign) {, +		if (assign.getParentInsn() != null) {, +	@NotNull, +	public void setAssign(@NotNull RegisterArg assign) {, +	public void setUsedInPhi(@Nullable PhiInsn usedInPhi) {, +	@Nullable, +		if (usedInPhi == null) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/TernaryMod.java, +			PhiInsn phi = t.getResult().getSVar().getUsedInPhi();, +			if (phi == null || !t.getResult().equalRegisterAndType(e.getResult())) {, +++ b/jadx-core/build.gradle, +    compile 'com.intellij:annotations:12.0', +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	// not null after SSATransform pass, +	private SSAVar sVar;, +		return sVar.getAssign().getParentInsn();, +		InsnNode parent = sVar.getAssign().getParentInsn();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +import org.jetbrains.annotations.NotNull;, +import org.jetbrains.annotations.Nullable;, +, +	@NotNull, +	@Nullable, +	public SSAVar(int regNum, int v, @NotNull RegisterArg assign) {, +		if (assign.getParentInsn() != null) {, +	@NotNull, +	public void setAssign(@NotNull RegisterArg assign) {, +	public void setUsedInPhi(@Nullable PhiInsn usedInPhi) {, +	@Nullable, +		if (usedInPhi == null) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/TernaryMod.java, +			PhiInsn phi = t.getResult().getSVar().getUsedInPhi();, +			if (phi == null || !t.getResult().equalRegisterAndType(e.getResult())) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInference.java, +			PhiInsn phi = sVar.getUsedInPhi();, +			if (phi != null) {, +				processPhiNode(phi);, +		if (useList.isEmpty() || var.isTypeImmutable()) {, +		ArgType type = assign.getType();, +		String name = var.getAssign().getName();, +				return vName;, +		return null;]