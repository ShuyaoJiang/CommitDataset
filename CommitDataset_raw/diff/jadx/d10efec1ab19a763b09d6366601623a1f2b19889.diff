[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +				node.addArg(InsnArg.reg(insn, 1, ArgType.array(ArgType.UNKNOWN)));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +				node.addArg(InsnArg.reg(insn, 1, ArgType.array(ArgType.UNKNOWN)));, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +					LiteralArg litArg;, +					if (use.size() == 2) {, +						// arg used only in one place, +						litArg = InsnArg.lit(literal, arg.getType());, +					} else {, +						litArg = InsnArg.lit(literal, ArgType.UNKNOWN);, +					}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +				node.addArg(InsnArg.reg(insn, 1, ArgType.array(ArgType.UNKNOWN)));, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +					LiteralArg litArg;, +					if (use.size() == 2) {, +						// arg used only in one place, +						litArg = InsnArg.lit(literal, arg.getType());, +					} else {, +						litArg = InsnArg.lit(literal, ArgType.UNKNOWN);, +					}, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestWrongCode.java, +package jadx.tests.internal;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.hamcrest.CoreMatchers.not;, +import static org.junit.Assert.assertThat;, +, +public class TestWrongCode extends InternalJadxTest {, +, +	public static class TestCls {, +		private int f() {, +			int[] a = null;, +			return a.length;, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, not(containsString("return false.length;")));, +		assertThat(code, containsString("return null.length;"));, +	}, +}]