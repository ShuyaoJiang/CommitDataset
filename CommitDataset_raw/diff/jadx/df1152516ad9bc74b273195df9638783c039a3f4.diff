[+++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +						// print original value, sometimes replace with incorrect field, +						FieldValueAttr valueAttr = fn.get(AType.FIELD_VALUE);, +						if (valueAttr != null && valueAttr.getValue() != null) {, +							code.add(" /*").add(valueAttr.getValue().toString()).add("*/");, +					}, +				} else if (k instanceof Integer) {, +				} else {, +					throw new JadxRuntimeException("Unexpected key in switch: " + (k != null ? k.getClass() : k));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +						// print original value, sometimes replace with incorrect field, +						FieldValueAttr valueAttr = fn.get(AType.FIELD_VALUE);, +						if (valueAttr != null && valueAttr.getValue() != null) {, +							code.add(" /*").add(valueAttr.getValue().toString()).add("*/");, +					}, +				} else if (k instanceof Integer) {, +				} else {, +					throw new JadxRuntimeException("Unexpected key in switch: " + (k != null ? k.getClass() : k));, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +								sn.getKeys()[k] = f;, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +						// print original value, sometimes replace with incorrect field, +						FieldValueAttr valueAttr = fn.get(AType.FIELD_VALUE);, +						if (valueAttr != null && valueAttr.getValue() != null) {, +							code.add(" /*").add(valueAttr.getValue().toString()).add("*/");, +					}, +				} else if (k instanceof Integer) {, +				} else {, +					throw new JadxRuntimeException("Unexpected key in switch: " + (k != null ? k.getClass() : k));, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +								sn.getKeys()[k] = f;, +++ b/jadx-core/src/test/java/jadx/tests/integration/switches/TestSwitchLabels.java, +		assertThat(code, containsString("case CONST_ABC"));, +		assertThat(code, containsString("case CONST_CDE_PRIVATE"));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +						// print original value, sometimes replace with incorrect field, +						FieldValueAttr valueAttr = fn.get(AType.FIELD_VALUE);, +						if (valueAttr != null && valueAttr.getValue() != null) {, +							code.add(" /*").add(valueAttr.getValue().toString()).add("*/");, +					}, +				} else if (k instanceof Integer) {, +				} else {, +					throw new JadxRuntimeException("Unexpected key in switch: " + (k != null ? k.getClass() : k));, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +								sn.getKeys()[k] = f;, +++ b/jadx-core/src/test/java/jadx/tests/integration/switches/TestSwitchLabels.java, +		assertThat(code, containsString("case CONST_ABC"));, +		assertThat(code, containsString("case CONST_CDE_PRIVATE"));, +++ b/jadx-core/src/test/java/jadx/tests/integration/switches/TestSwitchWithFallThroughCase.java, +	@SuppressWarnings("fallthrough"), +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +						// print original value, sometimes replace with incorrect field, +						FieldValueAttr valueAttr = fn.get(AType.FIELD_VALUE);, +						if (valueAttr != null && valueAttr.getValue() != null) {, +							code.add(" /*").add(valueAttr.getValue().toString()).add("*/");, +					}, +				} else if (k instanceof Integer) {, +				} else {, +					throw new JadxRuntimeException("Unexpected key in switch: " + (k != null ? k.getClass() : k));, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +								sn.getKeys()[k] = f;, +++ b/jadx-core/src/test/java/jadx/tests/integration/switches/TestSwitchLabels.java, +		assertThat(code, containsString("case CONST_ABC"));, +		assertThat(code, containsString("case CONST_CDE_PRIVATE"));, +++ b/jadx-core/src/test/java/jadx/tests/integration/switches/TestSwitchWithFallThroughCase.java, +	@SuppressWarnings("fallthrough"), +++ b/jadx-core/src/test/java/jadx/tests/integration/switches/TestSwitchWithFallThroughCase2.java, +	@SuppressWarnings("fallthrough")]