[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				assert isFallback() : "if insn in not fallback mode";, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				assert isFallback() : "if insn in not fallback mode";, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +import jadx.core.dex.instructions.args.PrimitiveType;, +						if (accFlags.isPublic()) {, +						}, +	public FieldNode getConstField(Object obj) {, +		return getConstField(obj, true);, +	}, +, +	public FieldNode getConstField(Object obj, boolean searchGlobal) {, +			field = cn.constFields.get(obj);, +		if (field == null && searchGlobal) {, +			field = dex.getConstFields().get(obj);, +		}, +		PrimitiveType type = arg.getType().getPrimitiveType();, +		if (type == null) {, +			return null;, +		}, +		switch (type) {, +			case BOOLEAN:, +				return getConstField(literal == 1, false);, +			case CHAR:, +				return getConstField((char) literal, Math.abs(literal) > 1);, +			case BYTE:, +				return getConstField((byte) literal, Math.abs(literal) > 1);, +			case SHORT:, +				return getConstField((short) literal, Math.abs(literal) > 1);, +			case INT:, +				return getConstField((int) literal, Math.abs(literal) > 1);, +			case LONG:, +				return getConstField(literal, Math.abs(literal) > 1);, +			case FLOAT:, +				return getConstField(Float.intBitsToFloat((int) literal), true);, +			case DOUBLE:, +				return getConstField(Double.longBitsToDouble(literal), true);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				assert isFallback() : "if insn in not fallback mode";, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +import jadx.core.dex.instructions.args.PrimitiveType;, +						if (accFlags.isPublic()) {, +						}, +	public FieldNode getConstField(Object obj) {, +		return getConstField(obj, true);, +	}, +, +	public FieldNode getConstField(Object obj, boolean searchGlobal) {, +			field = cn.constFields.get(obj);, +		if (field == null && searchGlobal) {, +			field = dex.getConstFields().get(obj);, +		}, +		PrimitiveType type = arg.getType().getPrimitiveType();, +		if (type == null) {, +			return null;, +		}, +		switch (type) {, +			case BOOLEAN:, +				return getConstField(literal == 1, false);, +			case CHAR:, +				return getConstField((char) literal, Math.abs(literal) > 1);, +			case BYTE:, +				return getConstField((byte) literal, Math.abs(literal) > 1);, +			case SHORT:, +				return getConstField((short) literal, Math.abs(literal) > 1);, +			case INT:, +				return getConstField((int) literal, Math.abs(literal) > 1);, +			case LONG:, +				return getConstField(literal, Math.abs(literal) > 1);, +			case FLOAT:, +				return getConstField(Float.intBitsToFloat((int) literal), true);, +			case DOUBLE:, +				return getConstField(Double.longBitsToDouble(literal), true);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessVariables.java, +import java.util.LinkedHashMap;, +		final Map<RegisterArg, Usage> usageMap = new LinkedHashMap<RegisterArg, Usage>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				assert isFallback() : "if insn in not fallback mode";, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +import jadx.core.dex.instructions.args.PrimitiveType;, +						if (accFlags.isPublic()) {, +						}, +	public FieldNode getConstField(Object obj) {, +		return getConstField(obj, true);, +	}, +, +	public FieldNode getConstField(Object obj, boolean searchGlobal) {, +			field = cn.constFields.get(obj);, +		if (field == null && searchGlobal) {, +			field = dex.getConstFields().get(obj);, +		}, +		PrimitiveType type = arg.getType().getPrimitiveType();, +		if (type == null) {, +			return null;, +		}, +		switch (type) {, +			case BOOLEAN:, +				return getConstField(literal == 1, false);, +			case CHAR:]