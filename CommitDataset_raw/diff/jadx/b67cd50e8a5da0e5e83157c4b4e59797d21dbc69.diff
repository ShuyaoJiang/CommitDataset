[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +			JadxDecompiler jadx = new JadxDecompiler(jadxArgs);, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +			JadxDecompiler jadx = new JadxDecompiler(jadxArgs);, +++ /dev/null, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.api.JadxDecompiler;, +			JadxDecompiler jadx = new JadxDecompiler(jadxArgs);, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +package jadx.api;, +, +import jadx.core.Jadx;, +import jadx.core.ProcessClass;, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.RootNode;, +import jadx.core.dex.visitors.IDexTreeVisitor;, +import jadx.core.dex.visitors.SaveCode;, +import jadx.core.utils.ErrorsCounter;, +import jadx.core.utils.exceptions.DecodeException;, +import jadx.core.utils.exceptions.JadxException;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +import jadx.core.utils.files.InputFile;, +, +import java.io.File;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.TimeUnit;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +/**, + * Jadx API usage example:, + * <pre><code>, + *  Decompiler jadx = new Decompiler();, + *  jadx.loadFile(new File("classes.dex"));, + *  jadx.setOutputDir(new File("out"));, + *  jadx.save();, + * </code></pre>, + * <p/>, + * Instead of 'save()' you can get list of decompiled classes:, + * <pre><code>, + *  for(JavaClass cls : jadx.getClasses()) {, + *      System.out.println(cls.getCode());, + *  }, + * </code></pre>, + */, +public final class JadxDecompiler {, +	private static final Logger LOG = LoggerFactory.getLogger(JadxDecompiler.class);, +, +	private final IJadxArgs args;, +	private final List<InputFile> inputFiles = new ArrayList<InputFile>();, +, +	private File outDir;, +, +	private RootNode root;, +	private List<IDexTreeVisitor> passes;, +	private List<JavaClass> classes;, +, +	public JadxDecompiler() {, +		this.args = new DefaultJadxArgs();, +		init();, +	}, +, +	public JadxDecompiler(IJadxArgs jadxArgs) {, +		this.args = jadxArgs;, +		init();, +	}, +, +	public void setOutputDir(File outDir) {, +		this.outDir = outDir;, +		init();, +	}, +, +	void init() {, +		reset();, +		if (outDir == null) {, +			outDir = new File("jadx-output");, +		}, +		this.passes = Jadx.getPassesList(args, outDir);, +	}, +, +	void reset() {, +		ClassInfo.clearCache();, +		ErrorsCounter.reset();, +		classes = null;, +	}, +, +	public void loadFile(File file) throws JadxException {]