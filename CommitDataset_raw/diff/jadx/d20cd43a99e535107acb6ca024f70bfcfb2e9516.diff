[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	private static boolean canRemoveBlock(BlockNode block) {, +		return block.getInstructions().isEmpty(), +				&& block.getSuccessors().size() <= 1, +				&& !block.getPredecessors().isEmpty();, +	}, +, +	private static boolean removeEmptyBlock(BlockNode block) {, +		if (canRemoveBlock(block)) {, +			try {, +			} catch (StackOverflowError e) {, +				throw new JadxOverflowException("Failed compute block dominance frontier");, +			} catch (Exception e) {, +				throw new JadxRuntimeException("Failed compute block dominance frontier", e);, +			}, +		block.getDominatesOn().forEach(domBlock -> computeBlockDF(mth, domBlock));, +			if (removeEmptyBlock(basicBlock)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	private static boolean canRemoveBlock(BlockNode block) {, +		return block.getInstructions().isEmpty(), +				&& block.getSuccessors().size() <= 1, +				&& !block.getPredecessors().isEmpty();, +	}, +, +	private static boolean removeEmptyBlock(BlockNode block) {, +		if (canRemoveBlock(block)) {, +			try {, +			} catch (StackOverflowError e) {, +				throw new JadxOverflowException("Failed compute block dominance frontier");, +			} catch (Exception e) {, +				throw new JadxRuntimeException("Failed compute block dominance frontier", e);, +			}, +		block.getDominatesOn().forEach(domBlock -> computeBlockDF(mth, domBlock));, +			if (removeEmptyBlock(basicBlock)) {, +++ b/jadx-core/src/test/java/jadx/tests/integration/loops/TestLoopCondition5.java, +package jadx.tests.integration.loops;, +, +import org.junit.Test;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.SmaliTest;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static jadx.tests.api.utils.JadxMatchers.countString;, +import static org.hamcrest.Matchers.anyOf;, +import static org.junit.Assert.assertThat;, +, +public class TestLoopCondition5 extends SmaliTest {, +, +	public static class TestCls {, +		private static int lastIndexOf(int[] array, int target, int start, int end) {, +			for (int i = end - 1; i >= start; i--) {, +				if (array[i] == target) {, +					return i;, +				}, +			}, +			return -1;, +		}, +	}, +, +	@Test, +	public void test0() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsOne("for ("));, +		assertThat(code, containsOne("return -1;"));, +		assertThat(code, countString(2, "return "));, +	}, +, +	@Test, +	public void test1() {, +		ClassNode cls = getClassNodeFromSmaliWithPath("loops", "TestLoopCondition5");, +		String code = cls.getCode().toString();, +, +		assertThat(code, anyOf(containsOne("for ("), containsOne("while (true) {")));, +		assertThat(code, containsOne("return -1;"));, +		assertThat(code, countString(2, "return "));, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	private static boolean canRemoveBlock(BlockNode block) {, +		return block.getInstructions().isEmpty(), +				&& block.getSuccessors().size() <= 1, +				&& !block.getPredecessors().isEmpty();, +	}, +, +	private static boolean removeEmptyBlock(BlockNode block) {, +		if (canRemoveBlock(block)) {, +			try {, +			} catch (StackOverflowError e) {, +				throw new JadxOverflowException("Failed compute block dominance frontier");, +			} catch (Exception e) {, +				throw new JadxRuntimeException("Failed compute block dominance frontier", e);, +			}, +		block.getDominatesOn().forEach(domBlock -> computeBlockDF(mth, domBlock));, +			if (removeEmptyBlock(basicBlock)) {]