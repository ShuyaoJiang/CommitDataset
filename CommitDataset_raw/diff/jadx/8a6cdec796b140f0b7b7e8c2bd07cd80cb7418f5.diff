[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.FilledNewArrayNode;, +import java.util.Arrays;, +				filledNewArray((FilledNewArrayNode) insn, code);, +			case FILL_ARRAY:, +				assert isFallback();, +				FillArrayNode arrayNode = (FillArrayNode) insn;, +				Object data = arrayNode.getData();, +				String arrStr;, +				if (data instanceof int[]) {, +					arrStr = Arrays.toString((int[]) data);, +				} else if (data instanceof short[]) {, +					arrStr = Arrays.toString((short[]) data);, +				} else if (data instanceof byte[]) {, +					arrStr = Arrays.toString((byte[]) data);, +				} else if (data instanceof long[]) {, +					arrStr = Arrays.toString((long[]) data);, +				} else {, +					arrStr = "?";, +				}, +				code.add('{').add(arrStr.substring(1, arrStr.length() - 1)).add('}');, +				break;, +, +	private void filledNewArray(FilledNewArrayNode insn, CodeWriter code) throws CodegenException {, +		useType(code, insn.getArrayType());, +		int c = insn.getArgsCount();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.FilledNewArrayNode;, +import java.util.Arrays;, +				filledNewArray((FilledNewArrayNode) insn, code);, +			case FILL_ARRAY:, +				assert isFallback();, +				FillArrayNode arrayNode = (FillArrayNode) insn;, +				Object data = arrayNode.getData();, +				String arrStr;, +				if (data instanceof int[]) {, +					arrStr = Arrays.toString((int[]) data);, +				} else if (data instanceof short[]) {, +					arrStr = Arrays.toString((short[]) data);, +				} else if (data instanceof byte[]) {, +					arrStr = Arrays.toString((byte[]) data);, +				} else if (data instanceof long[]) {, +					arrStr = Arrays.toString((long[]) data);, +				} else {, +					arrStr = "?";, +				}, +				code.add('{').add(arrStr.substring(1, arrStr.length() - 1)).add('}');, +				break;, +, +	private void filledNewArray(FilledNewArrayNode insn, CodeWriter code) throws CodegenException {, +		useType(code, insn.getArrayType());, +		int c = insn.getArgsCount();, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		return "r" + arg.getRegNum();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.FilledNewArrayNode;, +import java.util.Arrays;, +				filledNewArray((FilledNewArrayNode) insn, code);, +			case FILL_ARRAY:, +				assert isFallback();, +				FillArrayNode arrayNode = (FillArrayNode) insn;, +				Object data = arrayNode.getData();, +				String arrStr;, +				if (data instanceof int[]) {, +					arrStr = Arrays.toString((int[]) data);, +				} else if (data instanceof short[]) {, +					arrStr = Arrays.toString((short[]) data);, +				} else if (data instanceof byte[]) {, +					arrStr = Arrays.toString((byte[]) data);, +				} else if (data instanceof long[]) {, +					arrStr = Arrays.toString((long[]) data);, +				} else {, +					arrStr = "?";, +				}, +				code.add('{').add(arrStr.substring(1, arrStr.length() - 1)).add('}');, +				break;, +, +	private void filledNewArray(FilledNewArrayNode insn, CodeWriter code) throws CodegenException {, +		useType(code, insn.getArrayType());, +		int c = insn.getArgsCount();, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +		return "r" + arg.getRegNum();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FillArrayNode.java, +import jadx.core.dex.instructions.args.LiteralArg;, +import java.util.ArrayList;, +import java.util.List;, +, +	private final int size;, +		this.size = payload.getSize();, +	public int getSize() {, +		return size;, +	}, +, +	public List<LiteralArg> getLiteralArgs() {, +		List<LiteralArg> list = new ArrayList<LiteralArg>(size);, +		Object array = data;, +		if (array instanceof int[]) {, +			for (int b : (int[]) array) {, +				list.add(InsnArg.lit(b, elemType));, +			}]