[+++ b/.travis.yml, +    - openjdk6, +++ b/.travis.yml, +    - openjdk6, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.10.jar'), +++ b/.travis.yml, +    - openjdk6, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.10.jar'), +++ b/jadx-core/lib/dx-1.10.jar, +++ b/.travis.yml, +    - openjdk6, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.10.jar'), +++ b/jadx-core/lib/dx-1.10.jar, +++ /dev/null, +++ b/.travis.yml, +    - openjdk6, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.10.jar'), +++ b/jadx-core/lib/dx-1.10.jar, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, +import java.util.Enumeration;, +, +		// Input file could be .apk or .zip files, +		// we should consider the input file could contain only one single dex, multi-dex, or instantRun support dex for Android .apk files, +		String instantRunDexSuffix = "classes" + ext;, +		for (Enumeration<? extends ZipEntry> e = zf.entries(); e.hasMoreElements(); ) {, +			ZipEntry entry = e.nextElement();, +			String entryName = entry.getName();, +, +				if ((entryName.startsWith("classes") && entryName.endsWith(ext)) || entryName.endsWith(instantRunDexSuffix)) {, +						index++;, +						index++;, +				} else if (entryName.equals("instant-run.zip") && ext.equals(".dex")) {, +					File jarFile = FileUtils.createTempFile("instant-run.zip");, +					FileOutputStream fos = new FileOutputStream(jarFile);, +					try {, +						IOUtils.copy(inputStream, fos);, +					} finally {, +						close(fos);, +					}, +					InputFile tempFile = new InputFile(jarFile);, +					tempFile.loadFromZip(ext);, +					List<DexFile> dexFiles = tempFile.getDexFiles();, +					if (!dexFiles.isEmpty()) {, +						index += dexFiles.size();, +						this.dexFiles.addAll(dexFiles);, +					}, +				}]