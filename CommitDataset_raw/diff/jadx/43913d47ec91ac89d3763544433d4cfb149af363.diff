[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		insertSourceFileInfo(clsCode, cls);, +					if (mthGen.addDefinition(code)) {, +						code.add(' ');, +					}, +			code.startLine("// compiled from: ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		insertSourceFileInfo(clsCode, cls);, +					if (mthGen.addDefinition(code)) {, +						code.add(' ');, +					}, +			code.startLine("// compiled from: ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +	public boolean addDefinition(CodeWriter code) {, +			return true;, +			return false;, +		return true;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		insertSourceFileInfo(clsCode, cls);, +					if (mthGen.addDefinition(code)) {, +						code.add(' ');, +					}, +			code.startLine("// compiled from: ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +	public boolean addDefinition(CodeWriter code) {, +			return true;, +			return false;, +		return true;, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestAnnotations.java, +, +		assertThat(code, containsString("int a();"));, +		assertThat(code, containsString("float value() default 1.1f;"));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		insertSourceFileInfo(clsCode, cls);, +					if (mthGen.addDefinition(code)) {, +						code.add(' ');, +					}, +			code.startLine("// compiled from: ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +	public boolean addDefinition(CodeWriter code) {, +			return true;, +			return false;, +		return true;, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestAnnotations.java, +, +		assertThat(code, containsString("int a();"));, +		assertThat(code, containsString("float value() default 1.1f;"));, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestStaticMethod.java, +package jadx.tests.internal;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.junit.Assert.assertThat;, +, +public class TestStaticMethod extends InternalJadxTest {, +, +	public static class TestCls {, +		static {, +			f();, +		}, +, +		private static void f() {, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsString("static {"));, +		assertThat(code, containsString("private static void f() {"));, +	}, +}]