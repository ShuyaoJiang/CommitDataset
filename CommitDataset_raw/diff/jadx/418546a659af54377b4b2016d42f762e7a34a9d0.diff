[+++ b/.DS_Store, +++ b/.DS_Store, +++ b/jadx-core/.DS_Store, +++ b/.DS_Store, +++ b/jadx-core/.DS_Store, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.files.ZipSecurity;, +				, +				if(!ZipSecurity.isValidZipEntry(entry)) {, +					return null;, +				}, +				, +				if(ZipSecurity.isValidZipEntry(entry)) {, +			}, +++ b/.DS_Store, +++ b/jadx-core/.DS_Store, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.files.ZipSecurity;, +				, +				if(!ZipSecurity.isValidZipEntry(entry)) {, +					return null;, +				}, +				, +				if(ZipSecurity.isValidZipEntry(entry)) {, +			}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.ZipSecurity;, +						if (entry.getName().endsWith(CLST_EXTENSION) && ZipSecurity.isValidZipEntry(entry)) {, +++ b/.DS_Store, +++ b/jadx-core/.DS_Store, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.files.ZipSecurity;, +				, +				if(!ZipSecurity.isValidZipEntry(entry)) {, +					return null;, +				}, +				, +				if(ZipSecurity.isValidZipEntry(entry)) {, +			}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.ZipSecurity;, +						if (entry.getName().endsWith(CLST_EXTENSION) && ZipSecurity.isValidZipEntry(entry)) {, +++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, +				// security check, +				if(!ZipSecurity.isValidZipEntry(entry)) {, +					continue;, +				}, +, +			if (clsName == null || ZipSecurity.isValidZipEntryName(clsName)) {, +++ b/.DS_Store, +++ b/jadx-core/.DS_Store, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.files.ZipSecurity;, +				, +				if(!ZipSecurity.isValidZipEntry(entry)) {, +					return null;, +				}, +				, +				if(ZipSecurity.isValidZipEntry(entry)) {, +			}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.ZipSecurity;, +						if (entry.getName().endsWith(CLST_EXTENSION) && ZipSecurity.isValidZipEntry(entry)) {, +++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, +				// security check, +				if(!ZipSecurity.isValidZipEntry(entry)) {, +					continue;, +				}, +, +			if (clsName == null || ZipSecurity.isValidZipEntryName(clsName)) {, +++ b/jadx-core/src/main/java/jadx/core/utils/files/ZipSecurity.java, +package jadx.core.utils.files;, +, +import java.io.File;, +import java.util.zip.ZipEntry;, +, +public class ZipSecurity {, +	// size of uncompressed zip entry shouldn't be bigger of compressed in MAX_SIZE_DIFF times, +	private static final int MAX_SIZE_DIFF = 5;, +	, +	private static boolean isInSubDirectory(File base, File file) {, +	    if (file == null) {, +	        return false;, +	    }, +	    if (file.equals(base)) {, +	        return true;, +	    }, +, +	    return isInSubDirectory(base, file.getParentFile());, +	}, +	, +	// checks that entry name contains no any traversals, +	// and prevents cases like "../classes.dex", to limit output only to the specified directory, +	public static boolean isValidZipEntryName(String entryName) {, +		try {, +			File currentPath = new File(".").getCanonicalFile();, +			File canonical = new File(currentPath, entryName).getCanonicalFile();, +			return isInSubDirectory(currentPath, canonical);, +		}, +		catch(Exception e) {]