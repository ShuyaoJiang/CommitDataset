[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +	public boolean canReorderRecursive() {, +		if (!canReorder()) {, +			return false;, +		}, +		for (InsnArg arg : this.getArguments()) {, +			if (arg.isInsnWrap()) {, +				InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +				if (!wrapInsn.canReorderRecursive()) {, +					return false;, +				}, +			}, +		}, +		return true;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +	public boolean canReorderRecursive() {, +		if (!canReorder()) {, +			return false;, +		}, +		for (InsnArg arg : this.getArguments()) {, +			if (arg.isInsnWrap()) {, +				InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +				if (!wrapInsn.canReorderRecursive()) {, +					return false;, +				}, +			}, +		}, +		return true;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ExtractFieldInit.java, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.InsnWrapArg;, +		InsnArg arg = insn.getArg(0);, +		if (arg.isInsnWrap()) {, +			InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +			if (!wrapInsn.canReorderRecursive() && insn.contains(AType.CATCH_BLOCK)) {, +				return false;, +			}, +		} else {, +			return arg.isLiteral() || arg.isThis();, +		}, +		if (!regs.isEmpty()) {, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +	public boolean canReorderRecursive() {, +		if (!canReorder()) {, +			return false;, +		}, +		for (InsnArg arg : this.getArguments()) {, +			if (arg.isInsnWrap()) {, +				InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +				if (!wrapInsn.canReorderRecursive()) {, +					return false;, +				}, +			}, +		}, +		return true;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ExtractFieldInit.java, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.InsnWrapArg;, +		InsnArg arg = insn.getArg(0);, +		if (arg.isInsnWrap()) {, +			InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +			if (!wrapInsn.canReorderRecursive() && insn.contains(AType.CATCH_BLOCK)) {, +				return false;, +			}, +		} else {, +			return arg.isLiteral() || arg.isThis();, +		}, +		if (!regs.isEmpty()) {, +		}, +++ b/jadx-core/src/test/java/jadx/tests/integration/others/TestFieldInitInTryCatch.java, +package jadx.tests.integration.others;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import java.net.MalformedURLException;, +import java.net.URL;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsLines;, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestFieldInitInTryCatch extends IntegrationTest {, +, +	public static class TestCls {, +		private static final URL a;, +, +		static {, +			try {, +				a = new URL("http://www.example.com/");, +			} catch (MalformedURLException e) {]