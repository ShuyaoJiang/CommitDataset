[+++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +import static jadx.core.utils.StringUtils.notEmpty;, +, +		return notEmpty(str), +				&& VALID_JAVA_IDENTIFIER.matcher(str).matches(), +				&& isAllCharsPrintable(str);, +		return notEmpty(str), +				&& VALID_JAVA_FULL_IDENTIFIER.matcher(str).matches(), +				&& isAllCharsPrintable(str);, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +import static jadx.core.utils.StringUtils.notEmpty;, +, +		return notEmpty(str), +				&& VALID_JAVA_IDENTIFIER.matcher(str).matches(), +				&& isAllCharsPrintable(str);, +		return notEmpty(str), +				&& VALID_JAVA_FULL_IDENTIFIER.matcher(str).matches(), +				&& isAllCharsPrintable(str);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/DebugInfoParser.java, +import jadx.core.deobf.NameMapper;, +			applyDebugInfo(reg, var);, +		}, +	}, +, +	private static void applyDebugInfo(RegisterArg reg, LocalVar var) {, +		String varName = var.getName();, +		if (NameMapper.isValidIdentifier(varName)) {, +			reg.mergeDebugInfo(var.getType(), varName);, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +import static jadx.core.utils.StringUtils.notEmpty;, +, +		return notEmpty(str), +				&& VALID_JAVA_IDENTIFIER.matcher(str).matches(), +				&& isAllCharsPrintable(str);, +		return notEmpty(str), +				&& VALID_JAVA_FULL_IDENTIFIER.matcher(str).matches(), +				&& isAllCharsPrintable(str);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/DebugInfoParser.java, +import jadx.core.deobf.NameMapper;, +			applyDebugInfo(reg, var);, +		}, +	}, +, +	private static void applyDebugInfo(RegisterArg reg, LocalVar var) {, +		String varName = var.getName();, +		if (NameMapper.isValidIdentifier(varName)) {, +			reg.mergeDebugInfo(var.getType(), varName);, +++ b/jadx-core/src/main/java/jadx/core/utils/StringUtils.java, +, +	public static boolean notEmpty(String str) {, +		return str != null && !str.isEmpty();, +	}]