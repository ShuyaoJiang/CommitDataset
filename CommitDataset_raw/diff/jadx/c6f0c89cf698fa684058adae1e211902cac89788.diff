[+++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	public int length() {, +		return buf.length();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	public int length() {, +		return buf.length();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	@Deprecated, +	@Deprecated, +	@Deprecated, +		addArg(code, arg, wrap);, +		return code;, +	}, +, +	public void addArg(CodeWriter code, InsnArg arg) throws CodegenException {, +		addArg(code, arg, true);, +	}, +, +	public void addArg(CodeWriter code, InsnArg arg, boolean wrap) throws CodegenException {, +				code.add(staticField(f.getField()));, +				instanceField(code, f.getField(), regArg);, +	private void instanceField(CodeWriter code, FieldInfo field, InsnArg arg) throws CodegenException {, +			return;, +		int len = code.length();, +		addArg(code, arg);, +		if (code.length() != len) {, +			code.add('.');, +		code.add(field.getName());, +	protected String staticField(FieldInfo field) {, +				addArg(code, insn.getArg(0), false);, +				addArg(code, insn.getArg(0), true);, +					code.add("return ");, +					addArg(code, insn.getArg(0), false);, +				code.add("throw ");, +				addArg(code, insn.getArg(0), true);, +				addArg(code, insn.getArg(0));, +				code.add('[');, +				addArg(code, insn.getArg(1), false);, +				code.add(']');, +				addArg(code, insn.getArg(0));, +				code.add('[');, +				addArg(code, insn.getArg(1), false);, +				code.add("] = ");, +				addArg(code, insn.getArg(2), false);, +				instanceField(code, fieldInfo, insn.getArg(0));, +				instanceField(code, fieldInfo, insn.getArg(1));, +				code.add(" = ");, +				addArg(code, insn.getArg(0), false);, +				code.add(staticField((FieldInfo) ((IndexInsnNode) insn).getIndex()));, +				code.add(staticField((FieldInfo) node.getIndex())).add(" = ");, +				addArg(code, node.getArg(0), false);, +					code.add('(').add(useType(origType)).add(')');, +					addArg(code, arg, true);, +					addArg(code, arg, false);, +				addArg(code, insn.getArg(k), false);, +					addArg(code, insn.getArg(i), false);, +			for (Map.Entry<RegisterArg, InsnArg> e : toRevert.entrySet()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	public int length() {, +		return buf.length();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	@Deprecated, +	@Deprecated, +	@Deprecated, +		addArg(code, arg, wrap);, +		return code;, +	}, +, +	public void addArg(CodeWriter code, InsnArg arg) throws CodegenException {, +		addArg(code, arg, true);, +	}, +, +	public void addArg(CodeWriter code, InsnArg arg, boolean wrap) throws CodegenException {, +				code.add(staticField(f.getField()));, +				instanceField(code, f.getField(), regArg);, +	private void instanceField(CodeWriter code, FieldInfo field, InsnArg arg) throws CodegenException {, +			return;, +		int len = code.length();, +		addArg(code, arg);, +		if (code.length() != len) {, +			code.add('.');, +		code.add(field.getName());, +	protected String staticField(FieldInfo field) {, +				addArg(code, insn.getArg(0), false);, +				addArg(code, insn.getArg(0), true);, +					code.add("return ");, +					addArg(code, insn.getArg(0), false);, +				code.add("throw ");, +				addArg(code, insn.getArg(0), true);, +				addArg(code, insn.getArg(0));, +				code.add('[');, +				addArg(code, insn.getArg(1), false);, +				code.add(']');, +				addArg(code, insn.getArg(0));]