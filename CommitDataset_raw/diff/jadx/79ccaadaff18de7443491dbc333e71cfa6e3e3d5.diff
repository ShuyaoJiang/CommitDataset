[+++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, +import static jadx.core.utils.files.FileUtils.isApkFile;, +import static jadx.core.utils.files.FileUtils.isZipDexFile;, +, +import java.nio.file.Files;, +import java.nio.file.Path;, +import com.android.dex.Dex;, +, +			for (Dex dex : loadFromClassFile(file)) {, +				addDexFile(dex);, +			}, +				for (Dex dex : loadFromJar(file.toPath())) {, +					addDexFile(dex);, +				}, +								Path jarFile = Files.createTempFile(entryName, ".jar");, +								Files.copy(inputStream, jarFile);, +								for (Dex dex : loadFromJar(jarFile)) {, +									addDexFile(entryName, dex);, +	private static List<Dex> loadFromJar(Path jar) throws DecodeException {, +			LOG.info("converting to dex: {} ...", jar.getFileName());, +			List<byte[]> byteList = j2d.convert(jar);, +			if (byteList.isEmpty()) {, +			List<Dex> dexList = new ArrayList<>(byteList.size());, +			for (byte[] b : byteList) {, +				dexList.add(new Dex(b));, +			}, +			return dexList;, +	private static List<Dex> loadFromClassFile(File file) throws IOException, DecodeException {, +		Path outFile = Files.createTempFile("cls", ".jar");, +		try (JarOutputStream jo = new JarOutputStream(Files.newOutputStream(outFile))) {, +++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, +import static jadx.core.utils.files.FileUtils.isApkFile;, +import static jadx.core.utils.files.FileUtils.isZipDexFile;, +, +import java.nio.file.Files;, +import java.nio.file.Path;, +import com.android.dex.Dex;, +, +			for (Dex dex : loadFromClassFile(file)) {, +				addDexFile(dex);, +			}, +				for (Dex dex : loadFromJar(file.toPath())) {, +					addDexFile(dex);, +				}, +								Path jarFile = Files.createTempFile(entryName, ".jar");, +								Files.copy(inputStream, jarFile);, +								for (Dex dex : loadFromJar(jarFile)) {, +									addDexFile(entryName, dex);, +	private static List<Dex> loadFromJar(Path jar) throws DecodeException {, +			LOG.info("converting to dex: {} ...", jar.getFileName());, +			List<byte[]> byteList = j2d.convert(jar);, +			if (byteList.isEmpty()) {, +			List<Dex> dexList = new ArrayList<>(byteList.size());, +			for (byte[] b : byteList) {, +				dexList.add(new Dex(b));, +			}, +			return dexList;, +	private static List<Dex> loadFromClassFile(File file) throws IOException, DecodeException {, +		Path outFile = Files.createTempFile("cls", ".jar");, +		try (JarOutputStream jo = new JarOutputStream(Files.newOutputStream(outFile))) {, +++ b/jadx-core/src/main/java/jadx/core/utils/files/JavaToDex.java, +import java.nio.file.DirectoryStream;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.util.ArrayList;, +import java.util.List;, +		public DxArgs(DxContext context, String dexDir, String[] input) {, +			outName = dexDir;, +			multiDex = true;, +	public List<byte[]> convert(Path jar) throws JadxException {, +			Path dir = Files.createTempDirectory("jadx");, +			DxArgs args = new DxArgs(, +					context,, +					dir.toAbsolutePath().toString(),, +					new String[]{jar.toAbsolutePath().toString()});, +			int result = new Main(context).runDx(args);, +			List<byte[]> list = new ArrayList<>();, +	        try (DirectoryStream<Path> ds = Files.newDirectoryStream(dir)) {, +	            for (Path child : ds) {, +	            	list.add(Files.readAllBytes(child));, +	            	Files.delete(child);, +	            }, +	        }, +	        Files.delete(dir);, +	        return list;]