[+++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +	public Integer getSourceLine(int decompiledLine) {, +		decompile();, +		return cls.getCode().getLineMapping().get(decompiledLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +	public Integer getSourceLine(int decompiledLine) {, +		decompile();, +		return cls.getCode().getLineMapping().get(decompiledLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +	public Integer getSourceLine(int decompiledLine) {, +		decompile();, +		return cls.getCode().getLineMapping().get(decompiledLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	private Map<Integer, Integer> lineMap = Collections.emptyMap();, +		for (Map.Entry<Integer, Integer> entry : code.lineMap.entrySet()) {, +			attachSourceLine(line + entry.getKey(), entry.getValue());, +		}, +	public CodeWriter addIndent() {, +		add(INDENT);, +		return this;, +	}, +, +	private void attachSourceLine(int decompiledLine, int sourceLine) {, +		if (lineMap.isEmpty()) {, +			lineMap = new HashMap<Integer, Integer>();, +		}, +		lineMap.put(decompiledLine, sourceLine);, +	}, +, +	public Map<CodePosition, Object> getAnnotations() {, +		return annotations;, +	}, +, +	public void attachSourceLine(int sourceLine) {, +		attachSourceLine(line, sourceLine);, +	}, +, +	public Map<Integer, Integer> getLineMapping() {, +		return lineMap;, +	}, +, +		return str;, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +	public Integer getSourceLine(int decompiledLine) {, +		decompile();, +		return cls.getCode().getLineMapping().get(decompiledLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	private Map<Integer, Integer> lineMap = Collections.emptyMap();, +		for (Map.Entry<Integer, Integer> entry : code.lineMap.entrySet()) {, +			attachSourceLine(line + entry.getKey(), entry.getValue());, +		}, +	public CodeWriter addIndent() {, +		add(INDENT);, +		return this;, +	}, +, +	private void attachSourceLine(int decompiledLine, int sourceLine) {, +		if (lineMap.isEmpty()) {, +			lineMap = new HashMap<Integer, Integer>();, +		}, +		lineMap.put(decompiledLine, sourceLine);, +	}, +, +	public Map<CodePosition, Object> getAnnotations() {, +		return annotations;, +	}, +, +	public void attachSourceLine(int sourceLine) {, +		attachSourceLine(line, sourceLine);, +	}, +, +	public Map<Integer, Integer> getLineMapping() {, +		return lineMap;, +	}, +, +		return str;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +					code.attachSourceLine(insn.getSourceLine());, +					String key = sw.getKeys()[i].toString();, +					code.startLine("case ").add(key).add(": goto ");, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +	public Integer getSourceLine(int decompiledLine) {, +		decompile();, +		return cls.getCode().getLineMapping().get(decompiledLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	private Map<Integer, Integer> lineMap = Collections.emptyMap();]