[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import java.util.Comparator;, +	public static final Comparator<MethodNode> METHOD_LINE_COMPARATOR = new Comparator<MethodNode>() {, +		@Override, +		public int compare(MethodNode a, MethodNode b) {, +			return Utils.compare(a.getSourceLine(), b.getSourceLine());, +		}, +	};, +, +		List<MethodNode> methods = sortMethodsByLine(cls.getMethods());, +		for (MethodNode mth : methods) {, +	private static List<MethodNode> sortMethodsByLine(List<MethodNode> methods) {, +		List<MethodNode> out = new ArrayList<MethodNode>(methods);, +		Collections.sort(out, METHOD_LINE_COMPARATOR);, +		return out;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import java.util.Comparator;, +	public static final Comparator<MethodNode> METHOD_LINE_COMPARATOR = new Comparator<MethodNode>() {, +		@Override, +		public int compare(MethodNode a, MethodNode b) {, +			return Utils.compare(a.getSourceLine(), b.getSourceLine());, +		}, +	};, +, +		List<MethodNode> methods = sortMethodsByLine(cls.getMethods());, +		for (MethodNode mth : methods) {, +	private static List<MethodNode> sortMethodsByLine(List<MethodNode> methods) {, +		List<MethodNode> out = new ArrayList<MethodNode>(methods);, +		Collections.sort(out, METHOD_LINE_COMPARATOR);, +		return out;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/utils/Utils.java, +, +	public static int compare(int x, int y) {, +		return (x < y) ? -1 : ((x == y) ? 0 : 1);, +	}]