[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(ClassGen.class);, +, +					if (mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE)) {, +						code.startLine("/* JADX WARNING: inconsistent code */");, +						LOG.error(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +						mthGen.makeMethodDump(code);, +					}, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(ClassGen.class);, +, +					if (mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE)) {, +						code.startLine("/* JADX WARNING: inconsistent code */");, +						LOG.error(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +						mthGen.makeMethodDump(code);, +					}, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +			makeMethodDump(code);, +	public void makeMethodDump(CodeWriter code) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(ClassGen.class);, +, +					if (mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE)) {, +						code.startLine("/* JADX WARNING: inconsistent code */");, +						LOG.error(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +						mthGen.makeMethodDump(code);, +					}, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +			makeMethodDump(code);, +	public void makeMethodDump(CodeWriter code) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +import jadx.core.dex.nodes.BlockNode;, +import static jadx.core.utils.BlockUtils.getBlockByOffset;, +import static jadx.core.utils.BlockUtils.selectOther;, +, +	private BlockNode thenBlock;, +	private BlockNode elseBlock;, +, +	public void invertCondition() {, +		BlockNode tmp = thenBlock;, +		thenBlock = elseBlock;, +		elseBlock = tmp;, +		target = thenBlock.getStartOffset();, +			if (getArgsCount() == 2) {, +			} else {, +	}, +, +	public void initBlocks(BlockNode curBlock) {, +		thenBlock = getBlockByOffset(target, curBlock.getSuccessors());, +		if (curBlock.getSuccessors().size() == 1) {, +			elseBlock = thenBlock;, +		} else {, +			elseBlock = selectOther(thenBlock, curBlock.getSuccessors());, +		}, +		target = thenBlock.getStartOffset();, +	}, +, +	public BlockNode getThenBlock() {, +		return thenBlock;, +	}, +, +	public BlockNode getElseBlock() {, +		return elseBlock;, +	}, +				+ "  -> " + (thenBlock != null ? thenBlock : InsnUtils.formatOffset(target));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(ClassGen.class);, +, +					if (mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE)) {, +						code.startLine("/* JADX WARNING: inconsistent code */");, +						LOG.error(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +						mthGen.makeMethodDump(code);, +					}, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +			makeMethodDump(code);, +	public void makeMethodDump(CodeWriter code) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +import jadx.core.dex.nodes.BlockNode;, +import static jadx.core.utils.BlockUtils.getBlockByOffset;, +import static jadx.core.utils.BlockUtils.selectOther;, +, +	private BlockNode thenBlock;, +	private BlockNode elseBlock;, +, +	public void invertCondition() {, +		BlockNode tmp = thenBlock;, +		thenBlock = elseBlock;, +		elseBlock = tmp;]