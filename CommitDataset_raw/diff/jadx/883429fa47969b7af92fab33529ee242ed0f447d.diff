[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java, +// TODO: run after code shrinker at final stage, +		ClassInfo classInfo = cls.getClassInfo();, +				if (f.getDeclClass().equals(classInfo)) {, +					FieldNode fieldNode = cls.searchField(f);, +					if (fieldNode != null, +							&& fieldNode.getAccessFlags().isSynthetic(), +							&& fieldNode.getType().isArray(), +							&& fieldNode.getType().getArrayRootElement().equals(classInfo.getType())) {, +		}, +				if (!clsInfo.equals(classInfo) && !constrCls.getAccessFlags().isEnum()) {, +					InsnArg constrArg = iArg;, +					} else if (iArg.isRegister()) {, +				if (!co.getClassType().equals(classInfo)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java, +// TODO: run after code shrinker at final stage, +		ClassInfo classInfo = cls.getClassInfo();, +				if (f.getDeclClass().equals(classInfo)) {, +					FieldNode fieldNode = cls.searchField(f);, +					if (fieldNode != null, +							&& fieldNode.getAccessFlags().isSynthetic(), +							&& fieldNode.getType().isArray(), +							&& fieldNode.getType().getArrayRootElement().equals(classInfo.getType())) {, +		}, +				if (!clsInfo.equals(classInfo) && !constrCls.getAccessFlags().isEnum()) {, +					InsnArg constrArg = iArg;, +					} else if (iArg.isRegister()) {, +				if (!co.getClassType().equals(classInfo)) {, +++ b/jadx-core/src/test/java/jadx/tests/integration/enums/TestEnumsWithConsts.java, +package jadx.tests.integration.enums;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsLines;, +import static org.junit.Assert.assertThat;, +, +public class TestEnumsWithConsts extends IntegrationTest {, +, +	public static class TestCls {, +, +		public static final int C1 = 1;, +		public static final int C2 = 2;, +		public static final int C4 = 4;, +, +		public static final String S = "NORTH";, +, +		public enum Direction {, +			NORTH,, +			SOUTH,, +			EAST,, +			WEST, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsLines(1, "public enum Direction {",, +				indent(1) + "NORTH,",, +				indent(1) + "SOUTH,",, +				indent(1) + "EAST,",, +				indent(1) + "WEST",, +				"}"));, +	}, +}]