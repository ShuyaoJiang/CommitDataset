[+++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			makeRegionIndent(code, c);, +			makeRegionIndent(code, sw.getDefaultCase());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			makeRegionIndent(code, c);, +			makeRegionIndent(code, sw.getDefaultCase());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IBranchRegion.java, +package jadx.core.dex.nodes;, +, +import java.util.List;, +, +public interface IBranchRegion extends IRegion {, +, +	/**, +	 * Return list of branches in this region., +	 * NOTE: Contains 'null' elements for indicate empty branches., +	 */, +	List<IContainer> getBranches();, +, +}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			makeRegionIndent(code, c);, +			makeRegionIndent(code, sw.getDefaultCase());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IBranchRegion.java, +package jadx.core.dex.nodes;, +, +import java.util.List;, +, +public interface IBranchRegion extends IRegion {, +, +	/**, +	 * Return list of branches in this region., +	 * NOTE: Contains 'null' elements for indicate empty branches., +	 */, +	List<IContainer> getBranches();, +, +}, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/SwitchRegion.java, +import jadx.core.dex.nodes.IBranchRegion;, +public final class SwitchRegion extends AbstractRegion implements IBranchRegion {, +	public List<IContainer> getBranches() {, +		List<IContainer> branches = new ArrayList<IContainer>(cases.size() + 1);, +		branches.addAll(cases);, +		branches.add(defCase);, +		return Collections.unmodifiableList(branches);, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			makeRegionIndent(code, c);, +			makeRegionIndent(code, sw.getDefaultCase());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IBranchRegion.java, +package jadx.core.dex.nodes;, +, +import java.util.List;, +, +public interface IBranchRegion extends IRegion {, +, +	/**, +	 * Return list of branches in this region., +	 * NOTE: Contains 'null' elements for indicate empty branches., +	 */, +	List<IContainer> getBranches();, +, +}, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/SwitchRegion.java, +import jadx.core.dex.nodes.IBranchRegion;, +public final class SwitchRegion extends AbstractRegion implements IBranchRegion {, +	public List<IContainer> getBranches() {, +		List<IContainer> branches = new ArrayList<IContainer>(cases.size() + 1);, +		branches.addAll(cases);, +		branches.add(defCase);, +		return Collections.unmodifiableList(branches);, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/TryCatchRegion.java, +import jadx.core.dex.nodes.IBranchRegion;, +public final class TryCatchRegion extends AbstractRegion implements IBranchRegion {, +	public List<IContainer> getBranches() {, +		return getSubBlocks();, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			makeRegionIndent(code, c);, +			makeRegionIndent(code, sw.getDefaultCase());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IBranchRegion.java, +package jadx.core.dex.nodes;, +, +import java.util.List;, +, +public interface IBranchRegion extends IRegion {, +, +	/**, +	 * Return list of branches in this region., +	 * NOTE: Contains 'null' elements for indicate empty branches., +	 */, +	List<IContainer> getBranches();, +]