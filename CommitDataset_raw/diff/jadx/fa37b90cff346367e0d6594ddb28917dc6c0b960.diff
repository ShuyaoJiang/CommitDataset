[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +import java.util.ArrayList;, +import java.util.List;, +					// printRegionsWithBlock(mth, block);, +, +	private static void printRegionsWithBlock(MethodNode mth, final BlockNode block) {, +		final List<IRegion> regions = new ArrayList<IRegion>();, +		DepthRegionTraversal.traverseAll(mth, new TracedRegionVisitor() {, +			@Override, +			public void processBlockTraced(MethodNode mth, IBlock container, IRegion currentRegion) {, +				if (block.equals(container)) {, +					regions.add(currentRegion);, +				}, +			}, +		});, +		LOG.debug(" Found block: {} in regions: {}", block, regions);, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +import java.util.ArrayList;, +import java.util.List;, +					// printRegionsWithBlock(mth, block);, +, +	private static void printRegionsWithBlock(MethodNode mth, final BlockNode block) {, +		final List<IRegion> regions = new ArrayList<IRegion>();, +		DepthRegionTraversal.traverseAll(mth, new TracedRegionVisitor() {, +			@Override, +			public void processBlockTraced(MethodNode mth, IBlock container, IRegion currentRegion) {, +				if (block.equals(container)) {, +					regions.add(currentRegion);, +				}, +			}, +		});, +		LOG.debug(" Found block: {} in regions: {}", block, regions);, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +, +	public static void process(MethodNode mth) {, +		final Map<BlockNode, TryCatchBlock> tryBlocksMap = new HashMap<BlockNode, TryCatchBlock>(2);, +		searchTryCatchDominators(mth, tryBlocksMap);, +, +		int k = 0;, +		while (!tryBlocksMap.isEmpty()) {, +			DepthRegionTraversal.traverseAll(mth, new AbstractRegionVisitor() {, +				@Override, +				public void leaveRegion(MethodNode mth, IRegion region) {, +					checkAndWrap(tryBlocksMap, region);, +				}, +			});, +			if (k++ > 100) {, +				throw new JadxRuntimeException("Try/catch wrap count limit reached in " + mth);, +			}, +		}, +	}, +, +	private static void searchTryCatchDominators(MethodNode mth, Map<BlockNode, TryCatchBlock> tryBlocksMap) {, +		final Set<TryCatchBlock> tryBlocks = new HashSet<TryCatchBlock>();, +	private static void checkAndWrap(Map<BlockNode, TryCatchBlock> tryBlocksMap, IRegion region) {, +		for (Map.Entry<BlockNode, TryCatchBlock> entry : tryBlocksMap.entrySet()) {, +			BlockNode dominator = entry.getKey();, +				TryCatchBlock tb = tryBlocksMap.get(dominator);, +				wrapBlocks(region, tb, dominator);, +	private static void wrapBlocks(IRegion region, TryCatchBlock tb, BlockNode dominator) {, +			return;, +	private static boolean isHandlerPath(TryCatchBlock tb, IContainer cont) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +import java.util.ArrayList;, +import java.util.List;, +					// printRegionsWithBlock(mth, block);, +, +	private static void printRegionsWithBlock(MethodNode mth, final BlockNode block) {, +		final List<IRegion> regions = new ArrayList<IRegion>();, +		DepthRegionTraversal.traverseAll(mth, new TracedRegionVisitor() {, +			@Override, +			public void processBlockTraced(MethodNode mth, IBlock container, IRegion currentRegion) {, +				if (block.equals(container)) {, +					regions.add(currentRegion);, +				}, +			}, +		});, +		LOG.debug(" Found block: {} in regions: {}", block, regions);, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +, +	public static void process(MethodNode mth) {, +		final Map<BlockNode, TryCatchBlock> tryBlocksMap = new HashMap<BlockNode, TryCatchBlock>(2);, +		searchTryCatchDominators(mth, tryBlocksMap);, +, +		int k = 0;, +		while (!tryBlocksMap.isEmpty()) {, +			DepthRegionTraversal.traverseAll(mth, new AbstractRegionVisitor() {, +				@Override, +				public void leaveRegion(MethodNode mth, IRegion region) {, +					checkAndWrap(tryBlocksMap, region);, +				}, +			});, +			if (k++ > 100) {, +				throw new JadxRuntimeException("Try/catch wrap count limit reached in " + mth);, +			}, +		}, +	}]