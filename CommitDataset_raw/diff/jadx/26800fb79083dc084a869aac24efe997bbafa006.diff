[+++ b/src/main/java/jadx/codegen/InsnGen.java, +			return arg((RegisterArg) arg);, +	public String arg(RegisterArg arg) {, +		return mgen.makeArgName(arg);, +	}, +, +			return arg(arg);, +			/* fallback mode instructions */, +		if (state.contains(InsnGenState.BODY_ONLY)) {, +			code.add('(').add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2).add(')');, +		} else {, +			String res = arg(insn.getResult());, +			if (res.equals(v1)) {, +				state.add(InsnGenState.NO_RESULT);, +				// "++" or "--", +				if (insn.getArg(1).isLiteral() && (op == ArithOp.ADD || op == ArithOp.SUB)) {, +					LiteralArg lit = (LiteralArg) insn.getArg(1);, +					if (Math.abs(lit.getLiteral()) == 1 && lit.isInteger()) {, +						code.add(assignVar(insn)).add(op.getSymbol()).add(op.getSymbol());, +						return;, +					}, +				}, +				// +=, -= ..., +				code.add(assignVar(insn)).add(' ').add(op.getSymbol()).add("= ").add(v2);, +			} else {, +				code.add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2);, +++ b/src/main/java/jadx/codegen/InsnGen.java, +			return arg((RegisterArg) arg);, +	public String arg(RegisterArg arg) {, +		return mgen.makeArgName(arg);, +	}, +, +			return arg(arg);, +			/* fallback mode instructions */, +		if (state.contains(InsnGenState.BODY_ONLY)) {, +			code.add('(').add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2).add(')');, +		} else {, +			String res = arg(insn.getResult());, +			if (res.equals(v1)) {, +				state.add(InsnGenState.NO_RESULT);, +				// "++" or "--", +				if (insn.getArg(1).isLiteral() && (op == ArithOp.ADD || op == ArithOp.SUB)) {, +					LiteralArg lit = (LiteralArg) insn.getArg(1);, +					if (Math.abs(lit.getLiteral()) == 1 && lit.isInteger()) {, +						code.add(assignVar(insn)).add(op.getSymbol()).add(op.getSymbol());, +						return;, +					}, +				}, +				// +=, -= ..., +				code.add(assignVar(insn)).add(' ').add(op.getSymbol()).add("= ").add(v2);, +			} else {, +				code.add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2);, +++ b/src/main/java/jadx/codegen/RegionGen.java, +		if (RegionUtils.notEmpty(c)) {, +		code.startLine('}');, +++ b/src/main/java/jadx/codegen/InsnGen.java, +			return arg((RegisterArg) arg);, +	public String arg(RegisterArg arg) {, +		return mgen.makeArgName(arg);, +	}, +, +			return arg(arg);, +			/* fallback mode instructions */, +		if (state.contains(InsnGenState.BODY_ONLY)) {, +			code.add('(').add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2).add(')');, +		} else {, +			String res = arg(insn.getResult());, +			if (res.equals(v1)) {, +				state.add(InsnGenState.NO_RESULT);, +				// "++" or "--", +				if (insn.getArg(1).isLiteral() && (op == ArithOp.ADD || op == ArithOp.SUB)) {, +					LiteralArg lit = (LiteralArg) insn.getArg(1);, +					if (Math.abs(lit.getLiteral()) == 1 && lit.isInteger()) {, +						code.add(assignVar(insn)).add(op.getSymbol()).add(op.getSymbol());, +						return;, +					}, +				}, +				// +=, -= ..., +				code.add(assignVar(insn)).add(' ').add(op.getSymbol()).add("= ").add(v2);, +			} else {, +				code.add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2);, +++ b/src/main/java/jadx/codegen/RegionGen.java, +		if (RegionUtils.notEmpty(c)) {, +		code.startLine('}');, +++ b/src/main/java/jadx/dex/instructions/ArithNode.java, +		this.op = op;, +		this.op = op;, +				+ getArg(0) + " ", +				+ op.getSymbol() + " ", +				+ (getArgsCount() == 2 ? getArg(1) : "");, +++ b/src/main/java/jadx/codegen/InsnGen.java, +			return arg((RegisterArg) arg);, +	public String arg(RegisterArg arg) {, +		return mgen.makeArgName(arg);, +	}, +, +			return arg(arg);, +			/* fallback mode instructions */, +		if (state.contains(InsnGenState.BODY_ONLY)) {, +			code.add('(').add(v1).add(' ').add(op.getSymbol()).add(' ').add(v2).add(')');]