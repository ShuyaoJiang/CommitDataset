[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		boolean wrap = state.contains(Flags.BODY_ONLY), +				&& !insn.getAttributes().contains(AttributeFlag.DONT_WRAP);, +		if (wrap) {, +		}, +		code.add(insn.getOp().getSymbol());, +		if (wrap) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		boolean wrap = state.contains(Flags.BODY_ONLY), +				&& !insn.getAttributes().contains(AttributeFlag.DONT_WRAP);, +		if (wrap) {, +		}, +		code.add(insn.getOp().getSymbol());, +		if (wrap) {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributeFlag.java, +	DONT_WRAP,, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		boolean wrap = state.contains(Flags.BODY_ONLY), +				&& !insn.getAttributes().contains(AttributeFlag.DONT_WRAP);, +		if (wrap) {, +		}, +		code.add(insn.getOp().getSymbol());, +		if (wrap) {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributeFlag.java, +	DONT_WRAP,, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/PrepareForCodeGen.java, +import jadx.core.dex.attributes.AttributeFlag;, +import jadx.core.dex.instructions.ArithOp;, +import jadx.core.dex.instructions.args.InsnWrapArg;, +			removeBrackets(block);, +	private static void removeBrackets(BlockNode block) {, +		for (InsnNode insn : block.getInstructions()) {, +			checkInsn(insn);, +		}, +	}, +, +	private static void checkInsn(InsnNode insn) {, +		if (insn.getType() == InsnType.ARITH) {, +			ArithNode arith = (ArithNode) insn;, +			ArithOp op = arith.getOp();, +			if (op == ArithOp.ADD || op == ArithOp.SUB) {, +				for (int i = 0; i < 2; i++) {, +					InsnArg arg = arith.getArg(i);, +					if (arg.isInsnWrap()) {, +						InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +						wrapInsn.getAttributes().add(AttributeFlag.DONT_WRAP);, +						checkInsn(wrapInsn);, +					}, +				}, +			}, +		} else {, +			for (InsnArg arg : insn.getArguments()) {, +				if (arg.isInsnWrap()) {, +					InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +					checkInsn(wrapInsn);, +				}, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		boolean wrap = state.contains(Flags.BODY_ONLY), +				&& !insn.getAttributes().contains(AttributeFlag.DONT_WRAP);, +		if (wrap) {, +		}, +		code.add(insn.getOp().getSymbol());, +		if (wrap) {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributeFlag.java, +	DONT_WRAP,, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/PrepareForCodeGen.java, +import jadx.core.dex.attributes.AttributeFlag;, +import jadx.core.dex.instructions.ArithOp;, +import jadx.core.dex.instructions.args.InsnWrapArg;, +			removeBrackets(block);, +	private static void removeBrackets(BlockNode block) {, +		for (InsnNode insn : block.getInstructions()) {, +			checkInsn(insn);, +		}, +	}, +, +	private static void checkInsn(InsnNode insn) {, +		if (insn.getType() == InsnType.ARITH) {, +			ArithNode arith = (ArithNode) insn;, +			ArithOp op = arith.getOp();, +			if (op == ArithOp.ADD || op == ArithOp.SUB) {, +				for (int i = 0; i < 2; i++) {, +					InsnArg arg = arith.getArg(i);, +					if (arg.isInsnWrap()) {, +						InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +						wrapInsn.getAttributes().add(AttributeFlag.DONT_WRAP);, +						checkInsn(wrapInsn);, +					}, +				}, +			}, +		} else {, +			for (InsnArg arg : insn.getArguments()) {, +				if (arg.isInsnWrap()) {, +					InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +					checkInsn(wrapInsn);, +				}]