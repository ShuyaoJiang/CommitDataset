[+++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			InsnNode insn = insnByOffset[offset];, +			insn.add(AFlag.TRY_ENTER);, +			} else {, +++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			InsnNode insn = insnByOffset[offset];, +			insn.add(AFlag.TRY_ENTER);, +			} else {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DependencyCollector.java, +++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			InsnNode insn = insnByOffset[offset];, +			insn.add(AFlag.TRY_ENTER);, +			} else {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DependencyCollector.java, +++ /dev/null, +++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			InsnNode insn = insnByOffset[offset];, +			insn.add(AFlag.TRY_ENTER);, +			} else {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DependencyCollector.java, +++ /dev/null, +++ /dev/null, +++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			InsnNode insn = insnByOffset[offset];, +			insn.add(AFlag.TRY_ENTER);, +			} else {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DependencyCollector.java, +++ /dev/null, +++ /dev/null, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import javax.swing.ProgressMonitor;, +, +		List<String> excludedPackages = getExcludedPackages();, +		if (excludedPackages.isEmpty()) {, +			for (String exclude : excludedPackages) {, +	public List<String> getExcludedPackages() {, +		String excludedPackages = settings.getExcludedPackages().trim();, +		return Arrays.asList(excludedPackages.split("[ ]+"));, +	}, +, +	public void addExcludedPackage(String packageToExclude) {, +		settings.setExcludedPackages(settings.getExcludedPackages() + ' ' + packageToExclude);, +		settings.sync();, +	}, +, +	public void removeExcludedPackage(String packageToRemoveFromExclusion) {, +		List<String> list = new ArrayList<>(getExcludedPackages());, +		list.remove(packageToRemoveFromExclusion);, +		settings.setExcludedPackages(String.join(" ", list));, +		settings.sync();, +	}, +, +++ b/.travis.yml, +      if: branch = master AND env(BINTRAY_USER) IS present, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			InsnNode insn = insnByOffset[offset];, +			insn.add(AFlag.TRY_ENTER);, +			} else {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DependencyCollector.java, +++ /dev/null, +++ /dev/null, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +import java.util.ArrayList;, +import java.util.Arrays;, +import javax.swing.ProgressMonitor;, +, +		List<String> excludedPackages = getExcludedPackages();, +		if (excludedPackages.isEmpty()) {, +			for (String exclude : excludedPackages) {, +	public List<String> getExcludedPackages() {, +		String excludedPackages = settings.getExcludedPackages().trim();, +		return Arrays.asList(excludedPackages.split("[ ]+"));, +	}, +, +	public void addExcludedPackage(String packageToExclude) {, +		settings.setExcludedPackages(settings.getExcludedPackages() + ' ' + packageToExclude);, +		settings.sync();]