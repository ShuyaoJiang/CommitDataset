[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	// 'dumb' guard to prevent endless loop in regions processing, +	private static final int REGIONS_LIMIT = 1000 * 1000;, +, +	private int regionsCount;, +		regionsCount++;, +		if (regionsCount > REGIONS_LIMIT) {, +			throw new JadxOverflowException("Regions count limit reached");, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	// 'dumb' guard to prevent endless loop in regions processing, +	private static final int REGIONS_LIMIT = 1000 * 1000;, +, +	private int regionsCount;, +		regionsCount++;, +		if (regionsCount > REGIONS_LIMIT) {, +			throw new JadxOverflowException("Regions count limit reached");, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	private static final int REGIONS_STACK_LIMIT = 1000;, +, +		if (stack.size() > REGIONS_STACK_LIMIT) {, +			throw new JadxOverflowException("Regions stack size limit reached");, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	// 'dumb' guard to prevent endless loop in regions processing, +	private static final int REGIONS_LIMIT = 1000 * 1000;, +, +	private int regionsCount;, +		regionsCount++;, +		if (regionsCount > REGIONS_LIMIT) {, +			throw new JadxOverflowException("Regions count limit reached");, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	private static final int REGIONS_STACK_LIMIT = 1000;, +, +		if (stack.size() > REGIONS_STACK_LIMIT) {, +			throw new JadxOverflowException("Regions stack size limit reached");, +++ b/jadx-core/src/main/java/jadx/core/utils/ErrorsCounter.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +			if (e.getClass() == JadxOverflowException.class) {, +				e = new JadxOverflowException(e.getMessage());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	// 'dumb' guard to prevent endless loop in regions processing, +	private static final int REGIONS_LIMIT = 1000 * 1000;, +, +	private int regionsCount;, +		regionsCount++;, +		if (regionsCount > REGIONS_LIMIT) {, +			throw new JadxOverflowException("Regions count limit reached");, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionStack.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +	private static final int REGIONS_STACK_LIMIT = 1000;, +, +		if (stack.size() > REGIONS_STACK_LIMIT) {, +			throw new JadxOverflowException("Regions stack size limit reached");, +++ b/jadx-core/src/main/java/jadx/core/utils/ErrorsCounter.java, +import jadx.core.utils.exceptions.JadxOverflowException;, +			if (e.getClass() == JadxOverflowException.class) {, +				e = new JadxOverflowException(e.getMessage());, +++ b/jadx-core/src/main/java/jadx/core/utils/exceptions/JadxOverflowException.java, +package jadx.core.utils.exceptions;, +, +public class JadxOverflowException extends JadxRuntimeException {, +	public JadxOverflowException(String message) {, +		super(message);, +	}, +}]