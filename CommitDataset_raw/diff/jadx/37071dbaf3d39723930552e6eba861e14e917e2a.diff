[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +	public boolean canBeObject() {, +		return isObject() || (!isTypeKnown() && contains(PrimitiveType.OBJECT));, +	}, +, +	public boolean canBeArray() {, +		return isArray() || (!isTypeKnown() && contains(PrimitiveType.ARRAY));, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +	public boolean canBeObject() {, +		return isObject() || (!isTypeKnown() && contains(PrimitiveType.OBJECT));, +	}, +, +	public boolean canBeArray() {, +		return isArray() || (!isTypeKnown() && contains(PrimitiveType.ARRAY));, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeUpdate.java, +		TypeUpdateResult result = updateTypeChecked(updateInfo, updateArg, candidateType);, +		if (result == REJECT) {, +			// soft checks for objects and array - exact type not compared, +			ArgType updateArgType = updateArg.getType();, +			if (candidateType.isObject() && updateArgType.canBeObject()) {, +				return SAME;, +			}, +			if (candidateType.isArray() && updateArgType.canBeArray()) {, +				return SAME;, +			}, +		}, +		return result;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +	public boolean canBeObject() {, +		return isObject() || (!isTypeKnown() && contains(PrimitiveType.OBJECT));, +	}, +, +	public boolean canBeArray() {, +		return isArray() || (!isTypeKnown() && contains(PrimitiveType.ARRAY));, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeUpdate.java, +		TypeUpdateResult result = updateTypeChecked(updateInfo, updateArg, candidateType);, +		if (result == REJECT) {, +			// soft checks for objects and array - exact type not compared, +			ArgType updateArgType = updateArg.getType();, +			if (candidateType.isObject() && updateArgType.canBeObject()) {, +				return SAME;, +			}, +			if (candidateType.isArray() && updateArgType.canBeArray()) {, +				return SAME;, +			}, +		}, +		return result;, +++ b/jadx-core/src/test/java/jadx/tests/integration/types/TestConstTypeInference.java, +package jadx.tests.integration.types;, +, +import org.junit.Test;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.hamcrest.Matchers.anyOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotEquals;, +import static org.junit.Assert.assertThat;, +, +public class TestConstTypeInference extends IntegrationTest {, +, +	public static class TestCls {, +		private final int a;, +, +		public TestCls() {, +			this(0);, +		}, +, +		public TestCls(int a) {, +			this.a = a;, +		}, +, +		public boolean equals(Object obj) {, +			if (obj == this) {, +				return true;, +			}, +			if (obj != null) {, +				if (getClass() == obj.getClass()) {, +					TestCls other = (TestCls) obj;, +					return this.a == other.a;, +				}, +			}, +			return false;, +		}, +, +		public void check() {, +			TestCls seven = new TestCls(7);, +			assertEquals(seven, seven);, +			assertNotEquals(seven, null);, +, +			TestCls six = new TestCls(6);, +			assertNotEquals(seven, six);]