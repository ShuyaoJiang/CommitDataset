[+++ b/.gitignore, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.DebugInfoVisitor;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.regions.ProcessVariables;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +			passes.add(new SSATransform());, +			passes.add(new DebugInfoVisitor());, +			passes.add(new TypeInference());, +, +			passes.add(new FinishTypeInference());, +			passes.add(new EliminatePhiNodes());, +, +, +			passes.add(new LoopRegionVisitor());, +			passes.add(new ProcessVariables());, +, +, +++ b/.gitignore, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.DebugInfoVisitor;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.regions.ProcessVariables;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;]