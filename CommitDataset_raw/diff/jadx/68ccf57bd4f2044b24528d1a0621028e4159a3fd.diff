[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +					code.add(") ");, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +					code.add(") ");, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/MthParameterArg.java, +		sVar.setTypeImmutable(type);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +					code.add(") ");, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/MthParameterArg.java, +		sVar.setTypeImmutable(type);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	@Deprecated, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +					code.add(") ");, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/MthParameterArg.java, +		sVar.setTypeImmutable(type);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	@Deprecated, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	private boolean typeImmutable;, +	public int getRegNum() {, +		return regNum;, +	}, +, +		ArgType acceptedType;, +		if (typeImmutable) {, +			// don't change type, just update types in useList, +			acceptedType = this.type;, +		} else {, +			acceptedType = type;, +			this.type = acceptedType;, +		}, +			assign.type = acceptedType;, +			useList.get(i).type = acceptedType;, +	public void setTypeImmutable(ArgType type) {, +		setType(type);, +		this.typeImmutable = true;, +	}, +, +	public boolean isTypeImmutable() {, +		return typeImmutable;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +					code.add(") ");, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/MthParameterArg.java, +		sVar.setTypeImmutable(type);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	@Deprecated, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	private boolean typeImmutable;, +	public int getRegNum() {, +		return regNum;, +	}, +, +		ArgType acceptedType;, +		if (typeImmutable) {, +			// don't change type, just update types in useList, +			acceptedType = this.type;, +		} else {, +			acceptedType = type;, +			this.type = acceptedType;, +		}, +			assign.type = acceptedType;, +			useList.get(i).type = acceptedType;, +	public void setTypeImmutable(ArgType type) {, +		setType(type);, +		this.typeImmutable = true;, +	}, +, +	public boolean isTypeImmutable() {, +		return typeImmutable;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/PostTypeInference.java, +				RegisterArg result = insn.getResult();, +				boolean skip = castType.isObject() && castType.getObject().equals(result.getType().getObject());, +					result.getSVar().setType(castType);, +				RegisterArg result = phi.getResult();, +				SSAVar resultSVar = result.getSVar();, +				if (resultSVar != null && !result.getType().isTypeKnown()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +					code.add(") ");, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/MthParameterArg.java, +		sVar.setTypeImmutable(type);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	@Deprecated, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	private boolean typeImmutable;, +	public int getRegNum() {, +		return regNum;, +	}, +, +		ArgType acceptedType;, +		if (typeImmutable) {, +			// don't change type, just update types in useList, +			acceptedType = this.type;, +		} else {, +			acceptedType = type;, +			this.type = acceptedType;]