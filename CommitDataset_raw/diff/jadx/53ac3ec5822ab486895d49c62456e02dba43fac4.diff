[+++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +import jadx.core.dex.instructions.args.ArgType;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.Iterator;, +	private final Map<MethodInfo, OverridedMethodsNode> ovrdMap = new HashMap<MethodInfo, OverridedMethodsNode>();, +	private final List<OverridedMethodsNode> ovrd = new ArrayList<OverridedMethodsNode>();, +, +		postProcess();, +	}, +, +	private void postProcess() {, +		int id = 1;, +		for (OverridedMethodsNode o : ovrd) {, +, +			Iterator<MethodInfo> it = o.getMethods().iterator();, +			if (it.hasNext()) {, +				MethodInfo mth = it.next();, +, +				if (mth.isRenamed() && !mth.isAliasFromPreset()) {, +					mth.setAlias(String.format("mo%d%s", id, makeName(mth.getName())));, +				}, +				String firstMethodAlias = mth.getAlias();, +, +				while (it.hasNext()) {, +					mth = it.next();, +					if (!mth.getAlias().equals(firstMethodAlias)) {, +						mth.setAlias(firstMethodAlias);, +					}, +				}, +			}, +, +			id++;, +		}, +, +		ovrd.clear();, +		ovrdMap.clear();, +	}, +, +	@Nullable, +	private static ClassNode resolveOverridingInternal(DexNode dex, ClassNode cls, String signature,, +			Set<MethodInfo> overrideSet, ClassNode rootClass) {, +		ClassNode result = null;, +, +		for (MethodNode m : cls.getMethods()) {, +			if (m.getMethodInfo().getShortId().startsWith(signature)) {, +				result = cls;, +				if (!overrideSet.contains(m.getMethodInfo())) {, +					overrideSet.add(m.getMethodInfo());, +				}, +				break;, +			}, +		}, +, +		ArgType superClass = cls.getSuperClass();, +		if (superClass != null) {, +			ClassNode superNode = dex.resolveClass(superClass);, +			if (superNode != null) {, +				ClassNode clsWithMth = resolveOverridingInternal(dex, superNode, signature, overrideSet, rootClass);, +				if (clsWithMth != null) {, +					if ((result != null) && (result != cls)) {, +						if (clsWithMth != result) {, +							LOG.warn(String.format("Multiple overriding '%s' from '%s' and '%s' in '%s'",, +									signature,, +									result.getFullName(), clsWithMth.getFullName(),, +									rootClass.getFullName()));, +						}, +					} else {, +						result = clsWithMth;, +					}, +				}, +			}, +		}, +, +		for (ArgType iFaceType : cls.getInterfaces()) {, +			ClassNode iFaceNode = dex.resolveClass(iFaceType);, +			if (iFaceNode != null) {, +				ClassNode clsWithMth = resolveOverridingInternal(dex, iFaceNode, signature, overrideSet, rootClass);, +				if (clsWithMth != null) {, +					if ((result != null) && (result != cls)) {, +						if (clsWithMth != result) {, +							LOG.warn(String.format("Multiple overriding '%s' from '%s' and '%s' in '%s'",, +									signature,, +									result.getFullName(), clsWithMth.getFullName(),, +									rootClass.getFullName()));, +						}, +					} else {, +						result = clsWithMth;, +					}, +				}, +			}, +		}, +, +		return result;, +	}, +, +	private void resolveOverriding(DexNode dex, ClassNode cls, MethodNode mth) {, +		Set<MethodInfo> overrideSet = new HashSet<MethodInfo>();, +		resolveOverridingInternal(dex, cls, mth.getMethodInfo().makeSignature(false), overrideSet, cls);, +]