[+++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.ExecutorService;, +import java.util.concurrent.Executors;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +				limitExecTime(() -> checkMth.invoke(origCls.getConstructor().newInstance()));, +			} catch (Exception e) {, +				rethrow("Original check failed", e);, +					limitExecTime(() -> invoke("check"));, +				} catch (Exception e) {, +					rethrow("Decompiled check failed", e);, +	private <T> T limitExecTime(Callable<T> call) {, +		ExecutorService executor = Executors.newSingleThreadExecutor();, +		Future<T> future = executor.submit(call);, +		try {, +			return future.get(5, TimeUnit.SECONDS);, +		} catch (TimeoutException ex) {, +			future.cancel(true);, +			rethrow("Execution timeout", ex);, +		} catch (Exception ex) {, +			rethrow(ex.getMessage(), ex);, +		} finally {, +			executor.shutdownNow();, +		}, +		return null;, +	}, +, +	private void rethrow(String msg, Throwable e) {, +		if (e instanceof InvocationTargetException) {, +			Throwable cause = e.getCause();, +				fail(cause);, +			}, +		} else if (e instanceof ExecutionException) {, +			rethrow(e.getMessage(), e.getCause());, +		} else {, +			fail(msg, e);, +			fail(e);, +	protected void outputCFG() {, +	}, +	// Use only for debug purpose, +	protected void outputRawCFG() {]