[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				return new ResRefField(dex, str.replace('/', '.'));, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				return new ResRefField(dex, str.replace('/', '.'));, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java, +, +	/**, +	 * Resources *, +	 */, +		resourcesNames = resStorage.getResourcesNames();, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				return new ResRefField(dex, str.replace('/', '.'));, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java, +, +	/**, +	 * Resources *, +	 */, +		resourcesNames = resStorage.getResourcesNames();, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +import jadx.core.xmlgen.entry.ValuesParser;, +	private final Map<Integer, String> styleMap = new HashMap<Integer, String>();, +	private final Map<Integer, FieldNode> localStyleMap = new HashMap<Integer, FieldNode>();, +	private final Map<Integer, String> resNames;, +	private ValuesParser valuesParser;, +, +			resNames = root.getResourcesNames();, +, +					valuesParser = new ValuesParser(strings, resNames);, +					die("Type: 0x" + Integer.toHexString(type) + " not yet implemented");, +		if (attrValDataType == TYPE_REFERENCE) {, +			// reference custom processing, +					String resName = resNames.get(attrValData);, +					if (resName != null) {, +						writer.add("@").add(resName);, +					} else {, +			}, +		} else {, +			String str = valuesParser.decodeValue(attrValDataType, attrValData);, +			writer.add(str);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				return new ResRefField(dex, str.replace('/', '.'));, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java, +, +	/**, +	 * Resources *, +	 */, +		resourcesNames = resStorage.getResourcesNames();, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +import jadx.core.xmlgen.entry.ValuesParser;, +	private final Map<Integer, String> styleMap = new HashMap<Integer, String>();, +	private final Map<Integer, FieldNode> localStyleMap = new HashMap<Integer, FieldNode>();, +	private final Map<Integer, String> resNames;, +	private ValuesParser valuesParser;, +, +			resNames = root.getResourcesNames();, +, +					valuesParser = new ValuesParser(strings, resNames);, +					die("Type: 0x" + Integer.toHexString(type) + " not yet implemented");, +		if (attrValDataType == TYPE_REFERENCE) {, +			// reference custom processing, +					String resName = resNames.get(attrValData);, +					if (resName != null) {, +						writer.add("@").add(resName);, +					} else {, +			}, +		} else {, +			String str = valuesParser.decodeValue(attrValDataType, attrValData);, +			writer.add(str);, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java, +		writer.add("app package: ").add(resStorage.getAppPackage());, +		writer.startLine();, +, +		ValuesParser vp = new ValuesParser(strings, resStorage.getResourcesNames());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				return new ResRefField(dex, str.replace('/', '.'));, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java, +, +	/**, +	 * Resources *, +	 */, +		resourcesNames = resStorage.getResourcesNames();, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +import jadx.core.xmlgen.entry.ValuesParser;, +	private final Map<Integer, String> styleMap = new HashMap<Integer, String>();, +	private final Map<Integer, FieldNode> localStyleMap = new HashMap<Integer, FieldNode>();, +	private final Map<Integer, String> resNames;, +	private ValuesParser valuesParser;, +, +			resNames = root.getResourcesNames();, +, +					valuesParser = new ValuesParser(strings, resNames);, +					die("Type: 0x" + Integer.toHexString(type) + " not yet implemented");, +		if (attrValDataType == TYPE_REFERENCE) {, +			// reference custom processing, +					String resName = resNames.get(attrValData);, +					if (resName != null) {, +						writer.add("@").add(resName);, +					} else {, +			}, +		} else {]