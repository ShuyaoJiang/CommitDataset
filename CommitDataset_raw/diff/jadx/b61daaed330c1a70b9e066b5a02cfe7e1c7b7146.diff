[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new CodeShrinker());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new CodeShrinker());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, cont.getEnterInsn().getArg(0));, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new CodeShrinker());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, cont.getEnterInsn().getArg(0));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +		if (parent == null) {, +			return null;, +		}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new CodeShrinker());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, cont.getEnterInsn().getArg(0));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +		if (parent == null) {, +			return null;, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/TypedVar.java, +import java.util.Iterator;, +	public List<InsnArg> getUseList() {, +		return useList;, +	}, +, +	public void removeUse(InsnArg arg) {, +		Iterator<InsnArg> it = useList.iterator();, +		while (it.hasNext()) {, +			InsnArg use = it.next();, +			if (use == arg) {, +				it.remove();, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new CodeShrinker());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, cont.getEnterInsn().getArg(0));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +		if (parent == null) {, +			return null;, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/TypedVar.java, +import java.util.Iterator;, +	public List<InsnArg> getUseList() {, +		return useList;, +	}, +, +	public void removeUse(InsnArg arg) {, +		Iterator<InsnArg> it = useList.iterator();, +		while (it.hasNext()) {, +			InsnArg use = it.next();, +			if (use == arg) {, +				it.remove();, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +import jadx.core.dex.regions.Region;, +	private Region region;, +	public Region getRegion() {, +	public void setRegion(Region region) {, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new CodeShrinker());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, cont.getEnterInsn().getArg(0));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +		if (parent == null) {, +			return null;, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/TypedVar.java, +import java.util.Iterator;, +	public List<InsnArg> getUseList() {, +		return useList;, +	}, +, +	public void removeUse(InsnArg arg) {, +		Iterator<InsnArg> it = useList.iterator();, +		while (it.hasNext()) {, +			InsnArg use = it.next();, +			if (use == arg) {, +				it.remove();, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +import jadx.core.dex.regions.Region;, +	private Region region;, +	public Region getRegion() {, +	public void setRegion(Region region) {, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/SynchronizedRegion.java, +import java.util.LinkedList;, +	private final InsnNode enterInsn;, +	private final List<InsnNode> exitInsns = new LinkedList<InsnNode>();]