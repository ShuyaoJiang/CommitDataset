[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case ONE_ARG:, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case ONE_ARG:, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	// *** Additional instructions ***, +, +	// replacement for removed instructions, +	NOP,, +, +	TERNARY,, +, +	// strings concatenation, +	STR_CONCAT,, +	// just generate one argument, +	ONE_ARG,, +	// TODO: now multidimensional arrays created using Array.newInstance function, +	NEW_MULTIDIM_ARRAY, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case ONE_ARG:, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	// *** Additional instructions ***, +, +	// replacement for removed instructions, +	NOP,, +, +	TERNARY,, +, +	// strings concatenation, +	STR_CONCAT,, +	// just generate one argument, +	ONE_ARG,, +	// TODO: now multidimensional arrays created using Array.newInstance function, +	NEW_MULTIDIM_ARRAY, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +		InsnNode insn = new InsnNode(InsnType.ONE_ARG, 1);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case ONE_ARG:, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	// *** Additional instructions ***, +, +	// replacement for removed instructions, +	NOP,, +, +	TERNARY,, +, +	// strings concatenation, +	STR_CONCAT,, +	// just generate one argument, +	ONE_ARG,, +	// TODO: now multidimensional arrays created using Array.newInstance function, +	NEW_MULTIDIM_ARRAY, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +		InsnNode insn = new InsnNode(InsnType.ONE_ARG, 1);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +import org.jetbrains.annotations.NotNull;, +	public SSAVar makeNewSVar(int regNum, int[] versions, @NotNull RegisterArg arg) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case ONE_ARG:, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	// *** Additional instructions ***, +, +	// replacement for removed instructions, +	NOP,, +, +	TERNARY,, +, +	// strings concatenation, +	STR_CONCAT,, +	// just generate one argument, +	ONE_ARG,, +	// TODO: now multidimensional arrays created using Array.newInstance function, +	NEW_MULTIDIM_ARRAY, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +		InsnNode insn = new InsnNode(InsnType.ONE_ARG, 1);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +import org.jetbrains.annotations.NotNull;, +	public SSAVar makeNewSVar(int regNum, int[] versions, @NotNull RegisterArg arg) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/BlockMakerVisitor.java, +				// insert additional blocks for possible 'break' insertion, +				// insert additional blocks for possible 'continue' insertion, +				BlockNode loopEnd = loop.getEnd();, +				if (loopEnd.getPredecessors().size() > 1) {, +					boolean change = false;, +					List<BlockNode> nodes = new ArrayList<BlockNode>(loopEnd.getPredecessors());, +					for (BlockNode pred : nodes) {, +						if (!pred.contains(AFlag.SYNTHETIC)) {, +							insertBlockBetween(mth, pred, loopEnd);, +							change = true;, +						}, +					}, +					if (change) {, +						return true;, +					}, +				}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case ONE_ARG:, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	// *** Additional instructions ***, +]