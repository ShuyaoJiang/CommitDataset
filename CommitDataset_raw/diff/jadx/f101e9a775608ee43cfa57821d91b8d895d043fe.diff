[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	private Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();, +	private Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();, +	private Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	private Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();, +	private Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();, +	private Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (classInfo.isRenamed(), +				&& !cls.getShortName().equals(cls.getAlias().getShortName())) {, +			code.startLine("/* renamed from: ").add(classInfo.getFullName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	private Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();, +	private Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();, +	private Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (classInfo.isRenamed(), +				&& !cls.getShortName().equals(cls.getAlias().getShortName())) {, +			code.startLine("/* renamed from: ").add(classInfo.getFullName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	private Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();, +	private Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();, +	private Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (classInfo.isRenamed(), +				&& !cls.getShortName().equals(cls.getAlias().getShortName())) {, +			code.startLine("/* renamed from: ").add(classInfo.getFullName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	private Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();, +	private Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();, +	private Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (classInfo.isRenamed(), +				&& !cls.getShortName().equals(cls.getAlias().getShortName())) {, +			code.startLine("/* renamed from: ").add(classInfo.getFullName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +import java.util.Iterator;, +, +			Iterator<MethodInfo> it = o.getMethods().iterator();, +			if (it.hasNext()) {, +				MethodInfo mth = it.next();, +, +				String firstMethodAlias = mth.getAlias();, +, +				while (it.hasNext()) {, +					mth = it.next();, +					if (!mth.getAlias().equals(firstMethodAlias)) {, +						mth.setAlias(firstMethodAlias);, +				}, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	private Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();, +	private Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();, +	private Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (classInfo.isRenamed(), +				&& !cls.getShortName().equals(cls.getAlias().getShortName())) {, +			code.startLine("/* renamed from: ").add(classInfo.getFullName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +import java.util.Iterator;, +, +			Iterator<MethodInfo> it = o.getMethods().iterator();, +			if (it.hasNext()) {, +				MethodInfo mth = it.next();, +, +				String firstMethodAlias = mth.getAlias();, +, +				while (it.hasNext()) {, +					mth = it.next();, +					if (!mth.getAlias().equals(firstMethodAlias)) {, +						mth.setAlias(firstMethodAlias);, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java, +		ClassInfo cls = dex.getInfoStorage().getCls(type);, +		return dex.getInfoStorage().putCls(cls);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	private Map<ClassNode, JavaClass> classesMap = new java.util.concurrent.ConcurrentHashMap<ClassNode, JavaClass>();, +	private Map<MethodNode, JavaMethod> methodsMap = new java.util.concurrent.ConcurrentHashMap<MethodNode, JavaMethod>();, +	private Map<FieldNode, JavaField> fieldsMap = new java.util.concurrent.ConcurrentHashMap<FieldNode, JavaField>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (classInfo.isRenamed(), +				&& !cls.getShortName().equals(cls.getAlias().getShortName())) {, +			code.startLine("/* renamed from: ").add(classInfo.getFullName()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +import java.util.Iterator;, +, +			Iterator<MethodInfo> it = o.getMethods().iterator();, +			if (it.hasNext()) {, +				MethodInfo mth = it.next();, +, +				String firstMethodAlias = mth.getAlias();]