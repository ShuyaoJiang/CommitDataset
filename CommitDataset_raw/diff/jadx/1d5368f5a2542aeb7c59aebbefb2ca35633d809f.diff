[+++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			if (RegionUtils.hasExitEdge(c)) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			if (RegionUtils.hasExitEdge(c)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		LoopInfo loop = mth.getLoopForBlock(block);, +		BitSet outs = new BitSet(mth.getBasicBlocks().size());, +		outs.or(block.getDomFrontier());, +		for (BlockNode s : block.getCleanSuccessors()) {, +			outs.or(s.getDomFrontier());, +		}, +		stack.push(sw);, +		stack.addExits(BlockUtils.bitSetToBlocks(mth, outs));, +, +		// filter 'out' block, +		if (outs.cardinality() > 1) {, +			BlockUtils.cleanBitSet(mth, outs);, +		if (outs.cardinality() > 1) {, +			// filter loop start and successors of other blocks, +			for (int i = outs.nextSetBit(0); i >= 0; i = outs.nextSetBit(i + 1)) {, +				if (b.contains(AFlag.LOOP_START)) {, +					outs.clear(b.getId());, +				} else {, +						outs.clear(s.getId());, +			}, +		if (loop != null && outs.cardinality() > 1) {, +			outs.clear(loop.getEnd().getId());, +		}, +		if (outs.cardinality() == 0) {, +					outs.set(maybeOut.getId());, +		BlockNode out = null;, +		if (outs.cardinality() == 1) {, +			out = mth.getBasicBlocks().get(outs.nextSetBit(0));, +		} else if (loop == null && outs.cardinality() > 1) {, +			LOG.warn("Can't detect out node for switch block: {} in {}", block, mth);, +		}, +		if (loop != null) {, +			// check if 'continue' must be inserted, +			BlockNode end = loop.getEnd();, +			if (out != end && out != null) {, +				insertContinueInSwitch(block, out, end);, +			}, +	private static void insertContinueInSwitch(BlockNode block, BlockNode out, BlockNode end) {, +		int endId = end.getId();, +		for (BlockNode s : block.getCleanSuccessors()) {, +			if (s.getDomFrontier().get(endId) && s != out) {, +				// search predecessor of loop end on path from this successor, +				List<BlockNode> list = BlockUtils.collectBlocksDominatedBy(s, s);, +				for (BlockNode p : end.getPredecessors()) {, +					if (list.contains(p)) {, +						if (p.isSynthetic()) {, +							p.getInstructions().add(new InsnNode(InsnType.CONTINUE, 0));, +						}, +						break;, +					}, +				}, +			}, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			if (RegionUtils.hasExitEdge(c)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		LoopInfo loop = mth.getLoopForBlock(block);, +		BitSet outs = new BitSet(mth.getBasicBlocks().size());, +		outs.or(block.getDomFrontier());, +		for (BlockNode s : block.getCleanSuccessors()) {, +			outs.or(s.getDomFrontier());, +		}, +		stack.push(sw);, +		stack.addExits(BlockUtils.bitSetToBlocks(mth, outs));, +, +		// filter 'out' block, +		if (outs.cardinality() > 1) {, +			BlockUtils.cleanBitSet(mth, outs);, +		if (outs.cardinality() > 1) {, +			// filter loop start and successors of other blocks, +			for (int i = outs.nextSetBit(0); i >= 0; i = outs.nextSetBit(i + 1)) {, +				if (b.contains(AFlag.LOOP_START)) {, +					outs.clear(b.getId());, +				} else {, +						outs.clear(s.getId());, +			}, +		if (loop != null && outs.cardinality() > 1) {, +			outs.clear(loop.getEnd().getId());, +		}, +		if (outs.cardinality() == 0) {, +					outs.set(maybeOut.getId());, +		BlockNode out = null;, +		if (outs.cardinality() == 1) {, +			out = mth.getBasicBlocks().get(outs.nextSetBit(0));, +		} else if (loop == null && outs.cardinality() > 1) {, +			LOG.warn("Can't detect out node for switch block: {} in {}", block, mth);, +		}, +		if (loop != null) {, +			// check if 'continue' must be inserted, +			BlockNode end = loop.getEnd();, +			if (out != end && out != null) {, +				insertContinueInSwitch(block, out, end);, +			}]