[+++ b/README.md, +     --no-replace-consts    - don't replace constant value with matching constant field, +     --escape-unicode       - escape non latin characters in strings (with \u), +     --cfg                  - save methods control flow graph to dot file, +     --raw-cfg              - save methods control flow graph (use raw instructions), + -f, --fallback             - make simple dump (using goto instead of 'if', 'for', etc), + -v, --verbose              - verbose output, +++ b/README.md, +     --no-replace-consts    - don't replace constant value with matching constant field, +     --escape-unicode       - escape non latin characters in strings (with \u), +     --cfg                  - save methods control flow graph to dot file, +     --raw-cfg              - save methods control flow graph (use raw instructions), + -f, --fallback             - make simple dump (using goto instead of 'if', 'for', etc), + -v, --verbose              - verbose output, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import com.beust.jcommander.IStringConverter;, +	@Parameter(names = "--no-replace-consts", converter = InvertedBooleanConverter.class,, +			description = "don't replace constant value with matching constant field"), +	protected boolean replaceConsts = true;, +	@Parameter(names = {"--escape-unicode"}, description = "escape non latin characters in strings (with \\u)"), +	protected boolean escapeUnicode = false;, +	@Parameter(names = {"--cfg"}, description = "save methods control flow graph to dot file"), +	protected boolean cfgOutput = false;, +, +	@Parameter(names = {"--raw-cfg"}, description = "save methods control flow graph (use raw instructions)"), +	protected boolean rawCfgOutput = false;, +, +	@Parameter(names = {"-f", "--fallback"}, description = "make simple dump (using goto instead of 'if', 'for', etc)"), +	protected boolean fallbackMode = false;, +, +	@Parameter(names = {"-v", "--verbose"}, description = "verbose output"), +	protected boolean verbose = false;, +	public static class InvertedBooleanConverter implements IStringConverter<Boolean> {, +		@Override, +		public Boolean convert(String value) {, +			return "false".equals(value);, +		}, +	}, +, +, +	@Override, +	public boolean isReplaceConsts() {, +		return replaceConsts;, +	}, +++ b/README.md, +     --no-replace-consts    - don't replace constant value with matching constant field, +     --escape-unicode       - escape non latin characters in strings (with \u), +     --cfg                  - save methods control flow graph to dot file, +     --raw-cfg              - save methods control flow graph (use raw instructions), + -f, --fallback             - make simple dump (using goto instead of 'if', 'for', etc), + -v, --verbose              - verbose output, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import com.beust.jcommander.IStringConverter;, +	@Parameter(names = "--no-replace-consts", converter = InvertedBooleanConverter.class,, +			description = "don't replace constant value with matching constant field"), +	protected boolean replaceConsts = true;, +	@Parameter(names = {"--escape-unicode"}, description = "escape non latin characters in strings (with \\u)"), +	protected boolean escapeUnicode = false;, +	@Parameter(names = {"--cfg"}, description = "save methods control flow graph to dot file"), +	protected boolean cfgOutput = false;, +, +	@Parameter(names = {"--raw-cfg"}, description = "save methods control flow graph (use raw instructions)"), +	protected boolean rawCfgOutput = false;, +, +	@Parameter(names = {"-f", "--fallback"}, description = "make simple dump (using goto instead of 'if', 'for', etc)"), +	protected boolean fallbackMode = false;, +, +	@Parameter(names = {"-v", "--verbose"}, description = "verbose output"), +	protected boolean verbose = false;, +	public static class InvertedBooleanConverter implements IStringConverter<Boolean> {, +		@Override, +		public Boolean convert(String value) {, +			return "false".equals(value);, +		}, +	}, +, +, +	@Override, +	public boolean isReplaceConsts() {, +		return replaceConsts;, +	}, +++ b/jadx-cli/src/test/java/jadx/cli/JadxCLIArgsTest.java, +package jadx.cli;, +, +import org.junit.Test;, +, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertThat;, +, +public class JadxCLIArgsTest {, +, +	@Test, +	public void testInvertedBooleanOption() throws Exception {, +		assertThat(parse("--no-replace-consts").isReplaceConsts(), is(false));, +		assertThat(parse("").isReplaceConsts(), is(true));, +	}, +, +	private JadxCLIArgs parse(String... args) {, +		JadxCLIArgs jadxArgs = new JadxCLIArgs();, +		boolean res = jadxArgs.processArgs(args);]