[+++ b/src/main/java/jadx/dex/nodes/ClassNode.java, +				AccessInfo accFlags = f.getAccessFlags();, +				if (accFlags.isStatic() && accFlags.isFinal()) {, +						if (accFlags.isPublic()), +							dex.getConstFields().put(fv.getValue(), f);, +						else, +	public FieldNode getConstField(Object o) {, +		FieldNode field = constFields.get(o);, +		if(field == null), +			field = dex.getConstFields().get(o);, +		return field;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/ClassNode.java, +				AccessInfo accFlags = f.getAccessFlags();, +				if (accFlags.isStatic() && accFlags.isFinal()) {, +						if (accFlags.isPublic()), +							dex.getConstFields().put(fv.getValue(), f);, +						else, +	public FieldNode getConstField(Object o) {, +		FieldNode field = constFields.get(o);, +		if(field == null), +			field = dex.getConstFields().get(o);, +		return field;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/DexNode.java, +import java.util.HashMap;, +import java.util.Map;, +	private final Map<Object, FieldNode> constFields = new HashMap<Object, FieldNode>();, +, +	public Map<Object, FieldNode> getConstFields() {, +		return constFields;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/ClassNode.java, +				AccessInfo accFlags = f.getAccessFlags();, +				if (accFlags.isStatic() && accFlags.isFinal()) {, +						if (accFlags.isPublic()), +							dex.getConstFields().put(fv.getValue(), f);, +						else, +	public FieldNode getConstField(Object o) {, +		FieldNode field = constFields.get(o);, +		if(field == null), +			field = dex.getConstFields().get(o);, +		return field;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/DexNode.java, +import java.util.HashMap;, +import java.util.Map;, +	private final Map<Object, FieldNode> constFields = new HashMap<Object, FieldNode>();, +, +	public Map<Object, FieldNode> getConstFields() {, +		return constFields;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/FieldNode.java, +	private final FieldInfo fieldInfo;, +	private ArgType type; // store signature, +		this.fieldInfo = FieldInfo.fromDex(cls.dex(), field.getFieldIndex());, +		this.type = fieldInfo.getType();, +	public FieldInfo getFieldInfo() {, +		return fieldInfo;, +	}, +, +		return fieldInfo.getName();, +		return fieldInfo.getDeclClass() + "." + fieldInfo.getName() + " " + type;, +++ b/src/main/java/jadx/dex/nodes/ClassNode.java, +				AccessInfo accFlags = f.getAccessFlags();, +				if (accFlags.isStatic() && accFlags.isFinal()) {, +						if (accFlags.isPublic()), +							dex.getConstFields().put(fv.getValue(), f);, +						else, +	public FieldNode getConstField(Object o) {, +		FieldNode field = constFields.get(o);, +		if(field == null), +			field = dex.getConstFields().get(o);, +		return field;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/DexNode.java, +import java.util.HashMap;, +import java.util.Map;, +	private final Map<Object, FieldNode> constFields = new HashMap<Object, FieldNode>();, +, +	public Map<Object, FieldNode> getConstFields() {, +		return constFields;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/FieldNode.java, +	private final FieldInfo fieldInfo;, +	private ArgType type; // store signature, +		this.fieldInfo = FieldInfo.fromDex(cls.dex(), field.getFieldIndex());, +		this.type = fieldInfo.getType();, +	public FieldInfo getFieldInfo() {, +		return fieldInfo;, +	}, +, +		return fieldInfo.getName();]