[+++ b/build.gradle, +        testCompile 'ch.qos.logback:logback-classic:1.1.2', +        testCompile 'cglib:cglib-nodep:3.1', +++ b/build.gradle, +        testCompile 'ch.qos.logback:logback-classic:1.1.2', +        testCompile 'cglib:cglib-nodep:3.1', +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import jadx.core.utils.exceptions.JadxException;, +		reset();, +	void reset() {, +		ClassInfo.clearCache();, +		ErrorsCounter.reset();, +		classes = null;, +	}, +, +	public void loadFile(File file) throws JadxException {, +	public void loadFiles(List<File> files) throws JadxException {, +			throw new JadxException("Empty file list");, +			try {, +			} catch (IOException e) {, +				throw new JadxException("Error load file: " + file, e);, +			}, +			throw new JadxRuntimeException("Save interrupted", e);, +	public ExecutorService getSaveExecutor() {, +		ExecutorService executor = Executors.newFixedThreadPool(threadsCount);, +		if (root == null) {, +			return Collections.emptyList();, +		}, +		List<JavaClass> classList = getClasses();, +		if (classList.isEmpty()) {, +			return Collections.emptyList();, +		}, +		for (JavaClass javaClass : classList) {, +, +	@Override, +	public String toString() {, +		return "jadx decompiler";, +	}, +++ b/build.gradle, +        testCompile 'ch.qos.logback:logback-classic:1.1.2', +        testCompile 'cglib:cglib-nodep:3.1', +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import jadx.core.utils.exceptions.JadxException;, +		reset();, +	void reset() {, +		ClassInfo.clearCache();, +		ErrorsCounter.reset();, +		classes = null;, +	}, +, +	public void loadFile(File file) throws JadxException {, +	public void loadFiles(List<File> files) throws JadxException {, +			throw new JadxException("Empty file list");, +			try {, +			} catch (IOException e) {, +				throw new JadxException("Error load file: " + file, e);, +			}, +			throw new JadxRuntimeException("Save interrupted", e);, +	public ExecutorService getSaveExecutor() {, +		ExecutorService executor = Executors.newFixedThreadPool(threadsCount);, +		if (root == null) {, +			return Collections.emptyList();, +		}, +		List<JavaClass> classList = getClasses();, +		if (classList.isEmpty()) {, +			return Collections.emptyList();, +		}, +		for (JavaClass javaClass : classList) {, +, +	@Override, +	public String toString() {, +		return "jadx decompiler";, +	}, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.dex.attributes.AFlag;, +import jadx.core.dex.attributes.nodes.LineAttrNode;, +		if (code == null) {, +			return "";, +		}, +		return code.toString();, +				if (!inner.contains(AFlag.DONT_GENERATE)) {, +				if (!f.contains(AFlag.DONT_GENERATE)) {, +				if (!m.contains(AFlag.DONT_GENERATE)) {, +++ b/build.gradle, +        testCompile 'ch.qos.logback:logback-classic:1.1.2', +        testCompile 'cglib:cglib-nodep:3.1', +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import jadx.core.utils.exceptions.JadxException;, +		reset();, +	void reset() {, +		ClassInfo.clearCache();, +		ErrorsCounter.reset();, +		classes = null;, +	}, +, +	public void loadFile(File file) throws JadxException {, +	public void loadFiles(List<File> files) throws JadxException {, +			throw new JadxException("Empty file list");, +			try {, +			} catch (IOException e) {]