[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DebugInfoVisitor.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import jadx.core.utils.ErrorsCounter;, +import jadx.core.utils.exceptions.DecodeException;, +, +	private static final Logger LOG = LoggerFactory.getLogger(DebugInfoVisitor.class);, +, +		try {, +				processDebugInfo(mth, debugOffset);, +			}, +		} catch (Exception e) {, +			LOG.error("Error in debug info parser: " + ErrorsCounter.formatErrorMsg(mth, e.getMessage()), e);, +		} finally {, +			mth.unloadInsnArr();, +		}, +	}, +, +	private void processDebugInfo(MethodNode mth, int debugOffset) throws DecodeException {, +			setMethodSourceLine(mth, insnArr);, +			setLineForReturn(mth, insnArr);, +		}, +	}, +, +	/**, +	 * Fix debug info for splitter 'return' instructions, +	 */, +	private void setLineForReturn(MethodNode mth, InsnNode[] insnArr) {, +			if (ret != null) {, +				if (oldRet != ret) {, +	}, +, +	/**, +	 * Set method source line from first instruction, +	 */, +	private void setMethodSourceLine(MethodNode mth, InsnNode[] insnArr) {, +		for (InsnNode insn : insnArr) {, +			if (insn != null) {, +				int line = insn.getSourceLine();, +				if (line != 0) {, +					mth.setSourceLine(line - 1);, +				}, +				return;, +			}, +		}]