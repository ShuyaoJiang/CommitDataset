[+++ b/jadx-core/src/main/java/jadx/core/dex/regions/AbstractRegion.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(AbstractRegion.class);, +		LOG.warn("Replace sub block not supported for class \"{}\"", this.getClass());, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/AbstractRegion.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(AbstractRegion.class);, +		LOG.warn("Replace sub block not supported for class \"{}\"", this.getClass());, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/IfRegion.java, +	public boolean replaceSubBlock(IContainer oldBlock, IContainer newBlock) {, +		if (oldBlock == thenRegion) {, +			thenRegion = newBlock;, +			return true;, +		}, +		if (oldBlock == elseRegion) {, +			elseRegion = newBlock;, +			return true;, +		}, +		return false;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/AbstractRegion.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(AbstractRegion.class);, +		LOG.warn("Replace sub block not supported for class \"{}\"", this.getClass());, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/IfRegion.java, +	public boolean replaceSubBlock(IContainer oldBlock, IContainer newBlock) {, +		if (oldBlock == thenRegion) {, +			thenRegion = newBlock;, +			return true;, +		}, +		if (oldBlock == elseRegion) {, +			elseRegion = newBlock;, +			return true;, +		}, +		return false;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +import jadx.core.dex.attributes.AFlag;, +					checkAndWrap(mth, tryBlocksMap, region);, +	private static void checkAndWrap(MethodNode mth, Map<BlockNode, TryCatchBlock> tryBlocksMap, IRegion region) {, +				if (!wrapBlocks(region, tb, dominator)) {, +					LOG.warn("Can't wrap try/catch for {}, method: {}", dominator, mth);, +					mth.add(AFlag.INCONSISTENT_CODE);, +				}, +	private static boolean wrapBlocks(IRegion region, TryCatchBlock tb, BlockNode dominator) {, +		List<IContainer> subBlocks = region.getSubBlocks();, +		for (IContainer cont : subBlocks) {, +			return false;, +		if (!region.replaceSubBlock(firstNode, newRegion)) {, +			return false;, +		}, +		subBlocks.removeAll(newRegion.getSubBlocks());, +		return true;]