[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +import jadx.core.dex.attributes.AttributeType;, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.instructions.IndexInsnNode;, +import jadx.core.dex.nodes.DexNode;, +import jadx.core.dex.nodes.FieldNode;, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(RegisterArg.class);, +, +	public Object getConstValue(DexNode dex) {, +				case SGET:, +					FieldInfo f = (FieldInfo) ((IndexInsnNode) parInsn).getIndex();, +					FieldNode fieldNode = dex.resolveField(f);, +					if (fieldNode != null) {, +						FieldValueAttr attr = (FieldValueAttr) fieldNode.getAttributes().get(AttributeType.FIELD_VALUE);, +						if (attr != null) {, +							return attr.getValue();, +						}, +					} else {, +						LOG.warn("Field {} not found in dex {}", f, dex);, +					}, +					break;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +import jadx.core.dex.attributes.AttributeType;, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.instructions.IndexInsnNode;, +import jadx.core.dex.nodes.DexNode;, +import jadx.core.dex.nodes.FieldNode;, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(RegisterArg.class);, +, +	public Object getConstValue(DexNode dex) {, +				case SGET:, +					FieldInfo f = (FieldInfo) ((IndexInsnNode) parInsn).getIndex();, +					FieldNode fieldNode = dex.resolveField(f);, +					if (fieldNode != null) {, +						FieldValueAttr attr = (FieldValueAttr) fieldNode.getAttributes().get(AttributeType.FIELD_VALUE);, +						if (attr != null) {, +							return attr.getValue();, +						}, +					} else {, +						LOG.warn("Field {} not found in dex {}", f, dex);, +					}, +					break;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java, +import jadx.core.dex.info.FieldInfo;, +	public FieldNode resolveField(FieldInfo field) {, +		ClassNode cls = resolveClass(field.getDeclClass());, +		if (cls != null) {, +			return cls.searchField(field);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +import jadx.core.dex.attributes.AttributeType;, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.instructions.IndexInsnNode;, +import jadx.core.dex.nodes.DexNode;, +import jadx.core.dex.nodes.FieldNode;, +import jadx.core.dex.nodes.parser.FieldValueAttr;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(RegisterArg.class);, +, +	public Object getConstValue(DexNode dex) {, +				case SGET:, +					FieldInfo f = (FieldInfo) ((IndexInsnNode) parInsn).getIndex();, +					FieldNode fieldNode = dex.resolveField(f);, +					if (fieldNode != null) {, +						FieldValueAttr attr = (FieldValueAttr) fieldNode.getAttributes().get(AttributeType.FIELD_VALUE);, +						if (attr != null) {, +							return attr.getValue();, +						}, +					} else {, +						LOG.warn("Field {} not found in dex {}", f, dex);, +					}, +					break;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java, +import jadx.core.dex.info.FieldInfo;, +	public FieldNode resolveField(FieldInfo field) {, +		ClassNode cls = resolveClass(field.getDeclClass());, +		if (cls != null) {, +			return cls.searchField(field);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java, +				String name = (String) nameArg.getConstValue(cls.dex());, +				if (name == null) {, +					throw new JadxException("Unknown enum field name: " + cls);, +				}]