[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		}, +		if (isClassInnerFor(useCls, extClsInfo)) {, +			return shortName;, +		}, +		if (isBothClassesInOneTopClass(useCls, extClsInfo)) {, +	private static boolean isBothClassesInOneTopClass(ClassInfo useCls, ClassInfo extClsInfo) {, +		ClassInfo a = useCls.getTopParentClass();, +		ClassInfo b = extClsInfo.getTopParentClass();, +		if (a != null) {, +			return a.equals(b);, +		}, +		// useCls - is a top class, +		return useCls.equals(b);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		}, +		if (isClassInnerFor(useCls, extClsInfo)) {, +			return shortName;, +		}, +		if (isBothClassesInOneTopClass(useCls, extClsInfo)) {, +	private static boolean isBothClassesInOneTopClass(ClassInfo useCls, ClassInfo extClsInfo) {, +		ClassInfo a = useCls.getTopParentClass();, +		ClassInfo b = extClsInfo.getTopParentClass();, +		if (a != null) {, +			return a.equals(b);, +		}, +		// useCls - is a top class, +		return useCls.equals(b);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java, +		this.fullName = makeFullClsName(clsName, false);, +	public String makeFullClsName(String shortName, boolean raw) {, +			String innerSep = raw ? "$" : ".";, +			return parentClass.makeFullClsName(parentClass.getShortName(), raw) + innerSep + shortName;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		}, +		if (isClassInnerFor(useCls, extClsInfo)) {, +			return shortName;, +		}, +		if (isBothClassesInOneTopClass(useCls, extClsInfo)) {, +	private static boolean isBothClassesInOneTopClass(ClassInfo useCls, ClassInfo extClsInfo) {, +		ClassInfo a = useCls.getTopParentClass();, +		ClassInfo b = extClsInfo.getTopParentClass();, +		if (a != null) {, +			return a.equals(b);, +		}, +		// useCls - is a top class, +		return useCls.equals(b);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java, +		this.fullName = makeFullClsName(clsName, false);, +	public String makeFullClsName(String shortName, boolean raw) {, +			String innerSep = raw ? "$" : ".";, +			return parentClass.makeFullClsName(parentClass.getShortName(), raw) + innerSep + shortName;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		}, +			classInfo.rename(cls.dex(), classInfo.makeFullClsName(newShortName, true));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		}, +		if (isClassInnerFor(useCls, extClsInfo)) {, +			return shortName;, +		}, +		if (isBothClassesInOneTopClass(useCls, extClsInfo)) {, +	private static boolean isBothClassesInOneTopClass(ClassInfo useCls, ClassInfo extClsInfo) {, +		ClassInfo a = useCls.getTopParentClass();, +		ClassInfo b = extClsInfo.getTopParentClass();, +		if (a != null) {, +			return a.equals(b);, +		}, +		// useCls - is a top class, +		return useCls.equals(b);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java, +		this.fullName = makeFullClsName(clsName, false);, +	public String makeFullClsName(String shortName, boolean raw) {, +			String innerSep = raw ? "$" : ".";, +			return parentClass.makeFullClsName(parentClass.getShortName(), raw) + innerSep + shortName;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		}, +			classInfo.rename(cls.dex(), classInfo.makeFullClsName(newShortName, true));, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass2.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		}, +		if (isClassInnerFor(useCls, extClsInfo)) {, +			return shortName;, +		}, +		if (isBothClassesInOneTopClass(useCls, extClsInfo)) {, +	private static boolean isBothClassesInOneTopClass(ClassInfo useCls, ClassInfo extClsInfo) {, +		ClassInfo a = useCls.getTopParentClass();, +		ClassInfo b = extClsInfo.getTopParentClass();, +		if (a != null) {, +			return a.equals(b);, +		}, +		// useCls - is a top class, +		return useCls.equals(b);]