[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +			repeat = traverseIterativeStepInternal(mth, visitor, mth.getRegion());, +			if (k++ > ITERATIVE_LIMIT) {, +				throw new JadxOverflowException("Iterative traversal limit reached, method: " + mth);, +			}, +		} while (repeat);, +	}, +, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionIterativeVisitor visitor) {, +		boolean repeat;, +		int k = 0;, +		do {, +			repeat = traverseIterativeStepInternal(mth, visitor, mth.getRegion());, +			if (!repeat) {, +				for (ExceptionHandler h : mth.getExceptionHandlers()) {, +					repeat = traverseIterativeStepInternal(mth, visitor, h.getHandlerRegion());, +					if (repeat) {, +						break;, +					}, +				}, +			}, +	private static boolean traverseIterativeStepInternal(MethodNode mth, IRegionIterativeVisitor visitor,, +				if (traverseIterativeStepInternal(mth, visitor, subCont)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +			repeat = traverseIterativeStepInternal(mth, visitor, mth.getRegion());, +			if (k++ > ITERATIVE_LIMIT) {, +				throw new JadxOverflowException("Iterative traversal limit reached, method: " + mth);, +			}, +		} while (repeat);, +	}, +, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionIterativeVisitor visitor) {, +		boolean repeat;, +		int k = 0;, +		do {, +			repeat = traverseIterativeStepInternal(mth, visitor, mth.getRegion());, +			if (!repeat) {, +				for (ExceptionHandler h : mth.getExceptionHandlers()) {, +					repeat = traverseIterativeStepInternal(mth, visitor, h.getHandlerRegion());, +					if (repeat) {, +						break;, +					}, +				}, +			}, +	private static boolean traverseIterativeStepInternal(MethodNode mth, IRegionIterativeVisitor visitor,, +				if (traverseIterativeStepInternal(mth, visitor, subCont)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +import jadx.core.dex.nodes.IBranchRegion;, +		IRegionIterativeVisitor visitor = new IRegionIterativeVisitor() {, +			public boolean visitRegion(MethodNode mth, IRegion region) {, +				boolean changed = checkAndWrap(mth, tryBlocksMap, region);, +				return changed && !tryBlocksMap.isEmpty();, +		};, +		DepthRegionTraversal.traverseIncludingExcHandlers(mth, visitor);, +	private static boolean checkAndWrap(MethodNode mth, Map<BlockNode, TryCatchBlock> tryBlocksMap, IRegion region) {, +				return true;, +		return false;, +		if (replaceRegion == null) {, +			return false;, +		}, +		if (replaceRegion instanceof LoopRegion) {, +			LoopRegion loop = (LoopRegion) replaceRegion;, +			return wrapBlocks(loop.getBody(), tb, dominator);, +		}, +		if (replaceRegion instanceof IBranchRegion) {, +			return wrapBlocks(replaceRegion.getParent(), tb, dominator);, +		Region tryRegion = new Region(replaceRegion);, +		List<IContainer> subBlocks = replaceRegion.getSubBlocks();, +		TryCatchRegion tryCatchRegion = new TryCatchRegion(replaceRegion, tryRegion);, +		if (!replaceRegion.replaceSubBlock(firstNode, tryCatchRegion)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +			repeat = traverseIterativeStepInternal(mth, visitor, mth.getRegion());, +			if (k++ > ITERATIVE_LIMIT) {, +				throw new JadxOverflowException("Iterative traversal limit reached, method: " + mth);, +			}, +		} while (repeat);, +	}, +, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionIterativeVisitor visitor) {, +		boolean repeat;, +		int k = 0;, +		do {, +			repeat = traverseIterativeStepInternal(mth, visitor, mth.getRegion());, +			if (!repeat) {, +				for (ExceptionHandler h : mth.getExceptionHandlers()) {, +					repeat = traverseIterativeStepInternal(mth, visitor, h.getHandlerRegion());, +					if (repeat) {, +						break;, +					}, +				}, +			}, +	private static boolean traverseIterativeStepInternal(MethodNode mth, IRegionIterativeVisitor visitor,, +				if (traverseIterativeStepInternal(mth, visitor, subCont)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +import jadx.core.dex.nodes.IBranchRegion;, +		IRegionIterativeVisitor visitor = new IRegionIterativeVisitor() {, +			public boolean visitRegion(MethodNode mth, IRegion region) {, +				boolean changed = checkAndWrap(mth, tryBlocksMap, region);, +				return changed && !tryBlocksMap.isEmpty();, +		};]