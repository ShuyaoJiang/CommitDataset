[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public int getLoopsCount() {, +		return loops.size();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public int getLoopsCount() {, +		return loops.size();, +	}, +, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public int getLoopsCount() {, +		return loops.size();, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public int getLoopsCount() {, +		return loops.size();, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/PostRegionVisitor.java, +		IContainer startRegion = mth.getRegion();, +		if (mth.isNoCode() || startRegion == null) {, +		DepthRegionTraverser.traverse(mth, new ProcessTryCatchRegions(mth), startRegion);, +		if (mth.getLoopsCount() != 0) {, +			DepthRegionTraverser.traverse(mth, new ProcessLoopRegions(), startRegion);, +		if (mth.getReturnType().equals(ArgType.VOID)) {, +			DepthRegionTraverser.traverseAll(mth, new ProcessReturnInsns());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public int getLoopsCount() {, +		return loops.size();, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/PostRegionVisitor.java, +		IContainer startRegion = mth.getRegion();, +		if (mth.isNoCode() || startRegion == null) {, +		DepthRegionTraverser.traverse(mth, new ProcessTryCatchRegions(mth), startRegion);, +		if (mth.getLoopsCount() != 0) {, +			DepthRegionTraverser.traverse(mth, new ProcessLoopRegions(), startRegion);, +		if (mth.getReturnType().equals(ArgType.VOID)) {, +			DepthRegionTraverser.traverseAll(mth, new ProcessReturnInsns());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessLoopRegions.java, +package jadx.core.dex.visitors.regions;, +, +import jadx.core.dex.nodes.IRegion;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.dex.regions.LoopRegion;, +, +public class ProcessLoopRegions extends AbstractRegionVisitor {, +, +	@Override, +	public void enterRegion(MethodNode mth, IRegion region) {, +		if (region instanceof LoopRegion) {, +			LoopRegion loop = (LoopRegion) region;, +			loop.mergePreCondition();, +		}, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public int getLoopsCount() {, +		return loops.size();, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/PostRegionVisitor.java, +		IContainer startRegion = mth.getRegion();, +		if (mth.isNoCode() || startRegion == null) {, +		DepthRegionTraverser.traverse(mth, new ProcessTryCatchRegions(mth), startRegion);, +		if (mth.getLoopsCount() != 0) {, +			DepthRegionTraverser.traverse(mth, new ProcessLoopRegions(), startRegion);, +		if (mth.getReturnType().equals(ArgType.VOID)) {, +			DepthRegionTraverser.traverseAll(mth, new ProcessReturnInsns());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessLoopRegions.java, +package jadx.core.dex.visitors.regions;, +, +import jadx.core.dex.nodes.IRegion;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.dex.regions.LoopRegion;, +, +public class ProcessLoopRegions extends AbstractRegionVisitor {, +, +	@Override, +	public void enterRegion(MethodNode mth, IRegion region) {, +		if (region instanceof LoopRegion) {, +			LoopRegion loop = (LoopRegion) region;, +			loop.mergePreCondition();, +		}, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessReturnInsns.java, +package jadx.core.dex.visitors.regions;, +]