[+++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		if (aList == null || aList.isEmpty()) {, +		if (aList == null || aList.isEmpty()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		if (aList == null || aList.isEmpty()) {, +		if (aList == null || aList.isEmpty()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {, +			if (!f.getArgs().isEmpty()) {, +		ArgType[] generics = classInfo.getType().getGenericTypes();, +			if (searchCollision(cls.dex(), useCls, classInfo)) {, +	private static boolean searchCollision(DexNode dex, ClassInfo useCls, ClassInfo searchCls) {, +		String shortName = searchCls.getShortName();, +				if (inner.getShortName().equals(shortName), +						&& !inner.getClassInfo().equals(searchCls)) {, +		return searchCollision(dex, useCls.getParentClass(), searchCls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		if (aList == null || aList.isEmpty()) {, +		if (aList == null || aList.isEmpty()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {, +			if (!f.getArgs().isEmpty()) {, +		ArgType[] generics = classInfo.getType().getGenericTypes();, +			if (searchCollision(cls.dex(), useCls, classInfo)) {, +	private static boolean searchCollision(DexNode dex, ClassInfo useCls, ClassInfo searchCls) {, +		String shortName = searchCls.getShortName();, +				if (inner.getShortName().equals(shortName), +						&& !inner.getClassInfo().equals(searchCls)) {, +		return searchCollision(dex, useCls.getParentClass(), searchCls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import java.util.Set;, +		while (fieldNode == null, +				&& pCls.getParentClass() != pCls, +				&& pCls.getParentClass() != null) {, +			Set<Flags> state = EnumSet.noneOf(Flags.class);, +	private void makeInsnBody(CodeWriter code, InsnNode insn, Set<Flags> state) throws CodegenException {, +	private void makeTernary(TernaryInsn insn, CodeWriter code, Set<Flags> state) throws CodegenException {, +	private void makeArith(ArithNode insn, CodeWriter code, Set<Flags> state) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		if (aList == null || aList.isEmpty()) {, +		if (aList == null || aList.isEmpty()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {, +			if (!f.getArgs().isEmpty()) {, +		ArgType[] generics = classInfo.getType().getGenericTypes();, +			if (searchCollision(cls.dex(), useCls, classInfo)) {, +	private static boolean searchCollision(DexNode dex, ClassInfo useCls, ClassInfo searchCls) {, +		String shortName = searchCls.getShortName();, +				if (inner.getShortName().equals(shortName), +						&& !inner.getClassInfo().equals(searchCls)) {, +		return searchCollision(dex, useCls.getParentClass(), searchCls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import java.util.Set;, +		while (fieldNode == null, +				&& pCls.getParentClass() != pCls, +				&& pCls.getParentClass() != null) {, +			Set<Flags> state = EnumSet.noneOf(Flags.class);, +	private void makeInsnBody(CodeWriter code, InsnNode insn, Set<Flags> state) throws CodegenException {, +	private void makeTernary(TernaryInsn insn, CodeWriter code, Set<Flags> state) throws CodegenException {, +	private void makeArith(ArithNode insn, CodeWriter code, Set<Flags> state) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +			if (addLabels && (insn.contains(AType.JUMP) || insn.contains(AType.EXC_HANDLER))) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		if (aList == null || aList.isEmpty()) {, +		if (aList == null || aList.isEmpty()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {, +			if (!f.getArgs().isEmpty()) {, +		ArgType[] generics = classInfo.getType().getGenericTypes();, +			if (searchCollision(cls.dex(), useCls, classInfo)) {, +	private static boolean searchCollision(DexNode dex, ClassInfo useCls, ClassInfo searchCls) {, +		String shortName = searchCls.getShortName();, +				if (inner.getShortName().equals(shortName), +						&& !inner.getClassInfo().equals(searchCls)) {, +		return searchCollision(dex, useCls.getParentClass(), searchCls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import java.util.Set;, +		while (fieldNode == null, +				&& pCls.getParentClass() != pCls, +				&& pCls.getParentClass() != null) {, +			Set<Flags> state = EnumSet.noneOf(Flags.class);, +	private void makeInsnBody(CodeWriter code, InsnNode insn, Set<Flags> state) throws CodegenException {, +	private void makeTernary(TernaryInsn insn, CodeWriter code, Set<Flags> state) throws CodegenException {, +	private void makeArith(ArithNode insn, CodeWriter code, Set<Flags> state) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +			if (addLabels && (insn.contains(AType.JUMP) || insn.contains(AType.EXC_HANDLER))) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/TypeGen.java, +	private TypeGen() {, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		if (aList == null || aList.isEmpty()) {, +		if (aList == null || aList.isEmpty()) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		if (!cls.getInterfaces().isEmpty() && !af.isAnnotation()) {, +			if (!f.getArgs().isEmpty()) {, +		ArgType[] generics = classInfo.getType().getGenericTypes();, +			if (searchCollision(cls.dex(), useCls, classInfo)) {, +	private static boolean searchCollision(DexNode dex, ClassInfo useCls, ClassInfo searchCls) {, +		String shortName = searchCls.getShortName();]