[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +, +		assignInsn.getResult().add(AFlag.DONT_GENERATE);, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +, +		assignInsn.getResult().add(AFlag.DONT_GENERATE);, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/variables/CollectUsageRegionVisitor.java, +	private final List<RegisterArg> args = new ArrayList<>();, +	private final Map<SSAVar, VarUsage> usageMap = new LinkedHashMap<>();, +			if (!arg.contains(AFlag.DONT_GENERATE)) {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +, +		assignInsn.getResult().add(AFlag.DONT_GENERATE);, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/variables/CollectUsageRegionVisitor.java, +	private final List<RegisterArg> args = new ArrayList<>();, +	private final Map<SSAVar, VarUsage> usageMap = new LinkedHashMap<>();, +			if (!arg.contains(AFlag.DONT_GENERATE)) {, +	}, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +, +		assignInsn.getResult().add(AFlag.DONT_GENERATE);, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/variables/CollectUsageRegionVisitor.java, +	private final List<RegisterArg> args = new ArrayList<>();, +	private final Map<SSAVar, VarUsage> usageMap = new LinkedHashMap<>();, +			if (!arg.contains(AFlag.DONT_GENERATE)) {, +	}, +++ /dev/null, +++ b/jadx-core/src/test/java/jadx/tests/integration/variables/TestVariablesUsageWithLoops.java, +package jadx.tests.integration.variables;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.containsString;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.junit.jupiter.api.Test;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +public class TestVariablesUsageWithLoops extends IntegrationTest {, +, +	public static class TestEnhancedFor {, +, +		public void test() {, +			List list;, +			synchronized (this) {, +				list = new ArrayList();, +			}, +			for (Object o : list) {, +				System.out.println(o);, +			}, +		}, +	}, +, +	@Test, +	public void testEnhancedFor() {, +		ClassNode cls = getClassNode(TestEnhancedFor.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsString("     list = new ArrayList"));, +	}, +, +	public static class TestForLoop {, +, +		public void test() {, +			List list;, +			synchronized (this) {, +				list = new ArrayList();, +			}, +			for (int i = 0; i < list.size(); i++) {, +				System.out.println(i);, +			}, +		}, +	}, +, +	@Test, +	public void testForLoop() {, +		ClassNode cls = getClassNode(TestForLoop.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsString("     list = new ArrayList"));, +	}, +}]