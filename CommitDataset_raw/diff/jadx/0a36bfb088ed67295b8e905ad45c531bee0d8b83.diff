[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	public boolean isNameEquals(InsnArg arg) {, +		if (name == null || !(arg instanceof Named)) {, +			return false;, +		}, +		return name.equals(((Named) arg).getName());, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	public boolean isNameEquals(InsnArg arg) {, +		if (name == null || !(arg instanceof Named)) {, +			return false;, +		}, +		return name.equals(((Named) arg).getName());, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	public int getUseCount() {, +		return useList.size();, +	}, +, +		return useList.size() + usedInPhi.getResult().getSVar().getUseCount();, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	public boolean isNameEquals(InsnArg arg) {, +		if (name == null || !(arg instanceof Named)) {, +			return false;, +		}, +		return name.equals(((Named) arg).getName());, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	public int getUseCount() {, +		return useList.size();, +	}, +, +		return useList.size() + usedInPhi.getResult().getSVar().getUseCount();, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +	public void load() {, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +	public boolean isNameEquals(InsnArg arg) {, +		if (name == null || !(arg instanceof Named)) {, +			return false;, +		}, +		return name.equals(((Named) arg).getName());, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +	public int getUseCount() {, +		return useList.size();, +	}, +, +		return useList.size() + usedInPhi.getResult().getSVar().getUseCount();, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +	public void load() {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	public Iterable<ExceptionHandler> getExceptionHandlers() {, +		return exceptionHandlers;, +	}, +, +	public boolean isNoExceptionHandlers() {, +		return exceptionHandlers.isEmpty();, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));]