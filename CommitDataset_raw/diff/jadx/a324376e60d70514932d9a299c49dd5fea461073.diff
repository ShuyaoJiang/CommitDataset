[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			ClassLoader classLoader = Jadx.class.getClassLoader();, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			ClassLoader classLoader = Jadx.class.getClassLoader();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +	private void fallbackOnlyInsn(InsnNode insn) throws CodegenException {, +		if (!fallback) {, +			throw new CodegenException(insn.getType() + " can be used only in fallback mode");, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			ClassLoader classLoader = Jadx.class.getClassLoader();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +	private void fallbackOnlyInsn(InsnNode insn) throws CodegenException {, +		if (!fallback) {, +			throw new CodegenException(insn.getType() + " can be used only in fallback mode");, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithNode.java, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			ClassLoader classLoader = Jadx.class.getClassLoader();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +	private void fallbackOnlyInsn(InsnNode insn) throws CodegenException {, +		if (!fallback) {, +			throw new CodegenException(insn.getType() + " can be used only in fallback mode");, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnWrapArg.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (parentInsn == wrappedInsn) {, +			throw new JadxRuntimeException("Can't wrap instruction info itself: " + parentInsn);, +		}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			ClassLoader classLoader = Jadx.class.getClassLoader();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +	private void fallbackOnlyInsn(InsnNode insn) throws CodegenException {, +		if (!fallback) {, +			throw new CodegenException(insn.getType() + " can be used only in fallback mode");, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnWrapArg.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (parentInsn == wrappedInsn) {, +			throw new JadxRuntimeException("Can't wrap instruction info itself: " + parentInsn);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/DebugInfoParser.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(DebugInfoParser.class);, +				if (i < mthArgs.size()) {, +		}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			ClassLoader classLoader = Jadx.class.getClassLoader();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +				fallbackOnlyInsn(insn);, +	private void fallbackOnlyInsn(InsnNode insn) throws CodegenException {, +		if (!fallback) {, +			throw new CodegenException(insn.getType() + " can be used only in fallback mode");, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnWrapArg.java, +import jadx.core.utils.exceptions.JadxRuntimeException;]