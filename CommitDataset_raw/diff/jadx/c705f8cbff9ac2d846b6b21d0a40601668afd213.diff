[+++ b/.gitignore, +*.orig, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	List<IDexTreeVisitor> getPasses() {, +		return passes;, +	}, +, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	List<IDexTreeVisitor> getPasses() {, +		return passes;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ConstructorVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoApplyVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoParseVisitor;, +import jadx.core.dex.visitors.typeinference.TypeInferenceVisitor;, +			passes.add(new DebugInfoParseVisitor());, +			if (args.isRawCFGOutput()) {, +				passes.add(DotGraphVisitor.dumpRaw());, +			}, +, +			passes.add(new ConstructorVisitor());, +			passes.add(new TypeInferenceVisitor());, +			passes.add(new DebugInfoApplyVisitor());, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	List<IDexTreeVisitor> getPasses() {, +		return passes;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ConstructorVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoApplyVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoParseVisitor;, +import jadx.core.dex.visitors.typeinference.TypeInferenceVisitor;, +			passes.add(new DebugInfoParseVisitor());, +			if (args.isRawCFGOutput()) {, +				passes.add(DotGraphVisitor.dumpRaw());, +			}, +, +			passes.add(new ConstructorVisitor());, +			passes.add(new TypeInferenceVisitor());, +			passes.add(new DebugInfoApplyVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +	private final Map<String, Set<String>> ancestorCache = Collections.synchronizedMap(new WeakHashMap<>());, +	public boolean isClsKnown(String fullName) {, +		return nameMap.containsKey(fullName);, +	}, +, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	List<IDexTreeVisitor> getPasses() {, +		return passes;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ConstructorVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoApplyVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoParseVisitor;, +import jadx.core.dex.visitors.typeinference.TypeInferenceVisitor;, +			passes.add(new DebugInfoParseVisitor());, +			if (args.isRawCFGOutput()) {, +				passes.add(DotGraphVisitor.dumpRaw());, +			}, +, +			passes.add(new ConstructorVisitor());, +			passes.add(new TypeInferenceVisitor());, +			passes.add(new DebugInfoApplyVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +	private final Map<String, Set<String>> ancestorCache = Collections.synchronizedMap(new WeakHashMap<>());, +	public boolean isClsKnown(String fullName) {, +		return nameMap.containsKey(fullName);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				String arrStr = arrayNode.dataToString();, +		if (callMthNode != null && inlineMethod(callMthNode, insn, code)) {, +			code.add(callMthNode.getAlias());, +		} else {, +		}, +		ArgType origType;, +		List<RegisterArg> arguments = callMth.getArguments(false);, +		if (arguments == null || arguments.isEmpty()) {, +			mth.addComment("JADX WARN: used method not loaded: " + callMth + ", types can be incorrect");, +			origType = callMth.getMethodInfo().getArgumentsTypes().get(origPos);, +		} else {, +			origType = arguments.get(origPos).getInitType();, +		}, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	List<IDexTreeVisitor> getPasses() {, +		return passes;]