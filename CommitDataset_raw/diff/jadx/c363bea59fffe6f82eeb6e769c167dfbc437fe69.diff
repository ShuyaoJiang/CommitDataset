[+++ b/src/main/java/jadx/dex/info/LocalVarInfo.java, +import jadx.utils.InsnUtils;, +	public LocalVarInfo(DexNode dex, RegisterArg arg) {, +		super(arg.getRegNum());, +		init(arg.getTypedVar().getName(), arg.getType(), null);, +		return super.toString() + " " + (isEnd, +				? "end: " + InsnUtils.formatOffset(startAddr) + "-" + InsnUtils.formatOffset(endAddr), +				: "active: " + InsnUtils.formatOffset(startAddr));, +++ b/src/main/java/jadx/dex/info/LocalVarInfo.java, +import jadx.utils.InsnUtils;, +	public LocalVarInfo(DexNode dex, RegisterArg arg) {, +		super(arg.getRegNum());, +		init(arg.getTypedVar().getName(), arg.getType(), null);, +		return super.toString() + " " + (isEnd, +				? "end: " + InsnUtils.formatOffset(startAddr) + "-" + InsnUtils.formatOffset(endAddr), +				: "active: " + InsnUtils.formatOffset(startAddr));, +++ b/src/main/java/jadx/dex/nodes/parser/DebugInfoParser.java, +	private final LocalVarInfo[] locals;, +	private final InsnArg[] activeRegisters;, +	private final InsnNode[] insnByOffset;, +, +	public DebugInfoParser(MethodNode mth, int debugOffset, InsnNode[] insnByOffset) {, +, +		this.locals = new LocalVarInfo[mth.getRegsCount()];, +		this.activeRegisters = new InsnArg[mth.getRegsCount()];, +		this.insnByOffset = insnByOffset;, +	public void process() throws DecodeException {, +			int rn = arg.getRegNum();, +			locals[rn] = new LocalVarInfo(dex, arg);, +			activeRegisters[rn] = arg;, +		addrChange(-1, 1); // process '0' instruction, +, +				case DBG_ADVANCE_PC: {, +					int addrInc = section.readUleb128();, +					addr = addrChange(addr, addrInc);, +				}, +				case DBG_ADVANCE_LINE: {, +				}, +					startVar(var, addr, line);, +					startVar(var, addr, line);, +						setVar(var);, +						setVar(var);, +				default: {, +						int addrInc = (adjusted_opcode / DBG_LINE_RANGE);, +						addr = addrChange(addr, addrInc);, +			}, +				setVar(var);, +	private int addrChange(int addr, int addrInc) {, +		int newAddr = addr + addrInc;, +		for (int i = addr + 1; i <= newAddr; i++) {, +			InsnNode insn = insnByOffset[i];, +			if (insn == null), +				continue;, +, +			for (InsnArg arg : insn.getArguments()), +				if (arg.isRegister()) {, +					activeRegisters[arg.getRegNum()] = arg;, +				}, +, +			RegisterArg res = insn.getResult();, +			if (res != null), +				activeRegisters[res.getRegNum()] = res;, +		}, +		return newAddr;, +	}, +, +	private void startVar(LocalVarInfo var, int addr, int line) {, +			setVar(prev);, +	private void setVar(LocalVarInfo var) {, +			if (insn != null), +		merge(activeRegisters[var.getRegNum()], var);, +	private static void fillLocals(InsnNode insn, LocalVarInfo var) {, +	private static void merge(InsnArg arg, LocalVarInfo var) {, +		if (arg != null && arg.isRegister()) {, +			if (var.getRegNum() == arg.getRegNum())]