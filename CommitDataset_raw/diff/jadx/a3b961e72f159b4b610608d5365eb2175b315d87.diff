[+++ b/.gitignore, +jadx-core/src/test/java/jadx/tests/external/, +++ b/.gitignore, +jadx-core/src/test/java/jadx/tests/external/, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		useClass(code, ClassInfo.extCls(cls.root(), type));, +++ b/.gitignore, +jadx-core/src/test/java/jadx/tests/external/, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		useClass(code, ClassInfo.extCls(cls.root(), type));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		MethodNode callMthNode = mth.root().deepResolveMethod(callMth);, +++ b/.gitignore, +jadx-core/src/test/java/jadx/tests/external/, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		useClass(code, ClassInfo.extCls(cls.root(), type));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		MethodNode callMthNode = mth.root().deepResolveMethod(callMth);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +			ClassInfo extClsInfo = ClassInfo.extCls(mth.root(), type);, +++ b/.gitignore, +jadx-core/src/test/java/jadx/tests/external/, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		useClass(code, ClassInfo.extCls(cls.root(), type));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		MethodNode callMthNode = mth.root().deepResolveMethod(callMth);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +			ClassInfo extClsInfo = ClassInfo.extCls(mth.root(), type);, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +import jadx.api.JadxArgs;, +import jadx.core.dex.attributes.AType;, +import jadx.core.dex.attributes.nodes.SourceFileAttr;, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.info.MethodInfo;, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.DexNode;, +import jadx.core.dex.nodes.FieldNode;, +import jadx.core.dex.nodes.MethodNode;, +, +				preProcessClass(cls);, +				processClass(cls);, +	private void resolveOverriding(MethodNode mth) {, +		String mthSignature = mth.getMethodInfo().makeSignature(false);, +		ClassNode cls = mth.getParentClass();, +		resolveOverridingInternal(mth.dex(), cls, mthSignature, overrideSet, cls);, +		}, +	private void processClass(ClassNode cls) {, +			clsInfo.rename(cls.dex().root(), fullName);, +			renameField(field);, +		}, +		for (MethodNode mth : cls.getMethods()) {, +			renameMethod(mth);, +		}, +		for (ClassNode innerCls : cls.getInnerClasses()) {, +			processClass(innerCls);, +		}, +	}, +, +	public void renameField(FieldNode field) {, +, +	public void renameMethod(MethodNode mth) {, +			mth.getMethodInfo().setAlias(alias);, +			resolveOverriding(mth);, +	private void preProcessClass(ClassNode cls) {, +		} else {, +			if (!clsMap.containsKey(classInfo), +					&& shouldRename(classInfo.getShortName())) {, +		for (ClassNode innerCls : cls.getInnerClasses()) {, +			preProcessClass(innerCls);, +		}, +	}, +		if (cls.getClassInfo().isInner()) {, +			return null;, +		}, +		} else if (name.endsWith(".kt")) {, +			name = name.substring(0, name.length() - ".kt".length());, +		if (!NameMapper.isValidIdentifier(name) || NameMapper.isReserved(name)) {, +			return null;, +		}, +		for (DeobfClsInfo deobfClsInfo : clsMap.values()) {, +			if (deobfClsInfo.getAlias().equals(name)) {, +				return null;, +			}, +		}, +		ClassNode otherCls = cls.dex().root().searchClassByName(cls.getPackage() + "." + name);, +		if (otherCls != null) {, +			return null;, +		}, +	private String getFieldAlias(FieldNode field) {, +	private String getMethodAlias(MethodNode mth) {, +++ b/.gitignore, +jadx-core/src/test/java/jadx/tests/external/, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		useClass(code, ClassInfo.extCls(cls.root(), type));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		MethodNode callMthNode = mth.root().deepResolveMethod(callMth);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +			ClassInfo extClsInfo = ClassInfo.extCls(mth.root(), type);]