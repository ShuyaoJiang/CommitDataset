[+++ b/src/main/java/jadx/codegen/InsnGen.java, +		return useType(arg.getType()) + " " + mgen.assignArg(arg);, +++ b/src/main/java/jadx/codegen/InsnGen.java, +		return useType(arg.getType()) + " " + mgen.assignArg(arg);, +++ b/src/main/java/jadx/codegen/MethodGen.java, +	private final Set<String> varNames = new HashSet<String>();, +, +			varNames.add(makeArgName(arg));, +		if (varNames.add(name)), +, +		if (fallback), +			return name;, +, +		name = getUniqVarName(name);, +		arg.getTypedVar().setName(name);, +		return name;, +	}, +, +	private String getUniqVarName(String name) {, +		String r;, +		int i = 2;, +		do {, +			r = name + i;, +			i++;, +		} while (varNames.contains(r));, +		varNames.add(r);, +		return r;, +++ b/src/main/java/jadx/codegen/InsnGen.java, +		return useType(arg.getType()) + " " + mgen.assignArg(arg);, +++ b/src/main/java/jadx/codegen/MethodGen.java, +	private final Set<String> varNames = new HashSet<String>();, +, +			varNames.add(makeArgName(arg));, +		if (varNames.add(name)), +, +		if (fallback), +			return name;, +, +		name = getUniqVarName(name);, +		arg.getTypedVar().setName(name);, +		return name;, +	}, +, +	private String getUniqVarName(String name) {, +		String r;, +		int i = 2;, +		do {, +			r = name + i;, +			i++;, +		} while (varNames.contains(r));, +		varNames.add(r);, +		return r;, +++ b/src/main/java/jadx/dex/visitors/regions/ProcessVariables.java, +		for (RegisterArg arg : mthArgs) {, +			usageMap.remove(arg);, +		}, +, +			// if no assigns => remove, +			if (u.getAssigns().isEmpty()) {, +					u.getArg().getParentInsn().getAttributes().add(new DeclareVariableAttr());, +			// find region which contain all usage regions, +++ b/src/main/java/jadx/codegen/InsnGen.java, +		return useType(arg.getType()) + " " + mgen.assignArg(arg);, +++ b/src/main/java/jadx/codegen/MethodGen.java, +	private final Set<String> varNames = new HashSet<String>();, +, +			varNames.add(makeArgName(arg));, +		if (varNames.add(name)), +, +		if (fallback), +			return name;, +, +		name = getUniqVarName(name);, +		arg.getTypedVar().setName(name);, +		return name;, +	}, +, +	private String getUniqVarName(String name) {, +		String r;, +		int i = 2;, +		do {, +			r = name + i;, +			i++;, +		} while (varNames.contains(r));, +		varNames.add(r);, +		return r;, +++ b/src/main/java/jadx/dex/visitors/regions/ProcessVariables.java, +		for (RegisterArg arg : mthArgs) {, +			usageMap.remove(arg);, +		}, +, +			// if no assigns => remove, +			if (u.getAssigns().isEmpty()) {, +					u.getArg().getParentInsn().getAttributes().add(new DeclareVariableAttr());, +			// find region which contain all usage regions, +++ b/src/samples/java/jadx/samples/TestCF2.java, +	public int simple_loops() throws InterruptedException {, +		int[] a = new int[] { 1, 2, 4, 6, 8 };, +		int b = 0;, +		for (int i = 0; i < a.length; i++) {]