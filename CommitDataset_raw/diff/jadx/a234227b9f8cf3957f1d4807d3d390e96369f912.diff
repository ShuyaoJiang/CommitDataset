[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +							h.setTryBlock(ct1);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +							h.setTryBlock(ct1);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		BlockNode loopEnd = loop.getEnd();, +		if (!RegionUtils.isRegionContainsBlock(body, loopEnd), +				&& !loopEnd.contains(AType.EXC_HANDLER)) {, +			body.getSubBlocks().add(loopEnd);, +			BlockNode next = getNextBlock(loopEnd);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +							h.setTryBlock(ct1);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		BlockNode loopEnd = loop.getEnd();, +		if (!RegionUtils.isRegionContainsBlock(body, loopEnd), +				&& !loopEnd.contains(AType.EXC_HANDLER)) {, +			body.getSubBlocks().add(loopEnd);, +			BlockNode next = getNextBlock(loopEnd);, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +		b.and(b2.getDomFrontier());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +							h.setTryBlock(ct1);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		BlockNode loopEnd = loop.getEnd();, +		if (!RegionUtils.isRegionContainsBlock(body, loopEnd), +				&& !loopEnd.contains(AType.EXC_HANDLER)) {, +			body.getSubBlocks().add(loopEnd);, +			BlockNode next = getNextBlock(loopEnd);, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +		b.and(b2.getDomFrontier());, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +							h.setTryBlock(ct1);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		BlockNode loopEnd = loop.getEnd();, +		if (!RegionUtils.isRegionContainsBlock(body, loopEnd), +				&& !loopEnd.contains(AType.EXC_HANDLER)) {, +			body.getSubBlocks().add(loopEnd);, +			BlockNode next = getNextBlock(loopEnd);, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +		b.and(b2.getDomFrontier());, +++ /dev/null, +++ b/jadx-core/src/test/java/jadx/tests/internal/others/TestIssue13a.java, +package jadx.tests.internal.others;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import java.lang.reflect.Field;, +import java.util.HashMap;, +, +import org.junit.Test;, +, +import static jadx.tests.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestIssue13a extends InternalJadxTest {, +, +	public static class TestCls {, +		private static final String TAG = "Parcel";, +		private static final HashMap<ClassLoader, HashMap<String, Parcelable.Creator>>, +				mCreators = new HashMap<ClassLoader, HashMap<String, Parcelable.Creator>>();, +, +		@SuppressWarnings("unchecked"), +		public final <T extends Parcelable> T test(ClassLoader loader) {, +			String name = readString();, +			if (name == null) {, +				return null;, +			}, +			Parcelable.Creator<T> creator;, +			synchronized (mCreators) {, +				HashMap<String, Parcelable.Creator> map = mCreators.get(loader);, +				if (map == null) {, +					map = new HashMap<String, Parcelable.Creator>();, +					mCreators.put(loader, map);, +				}, +				creator = map.get(name);, +				if (creator == null) {, +					try {, +						Class c = loader == null ?, +								Class.forName(name) : Class.forName(name, true, loader);, +						Field f = c.getField("CREATOR");, +						creator = (Parcelable.Creator) f.get(null);, +					} catch (IllegalAccessException e) {, +						Log.e(TAG, "1" + name + ", e: " + e);, +						throw new RuntimeException("2" + name);, +					} catch (ClassNotFoundException e) {, +						Log.e(TAG, "3" + name + ", e: " + e);, +						throw new RuntimeException("4" + name);, +					} catch (ClassCastException e) {, +						throw new RuntimeException("5" + name);, +					} catch (NoSuchFieldException e) {, +						throw new RuntimeException("6" + name);, +					}, +					if (creator == null) {, +						throw new RuntimeException("7" + name);, +					}, +					map.put(name, creator);, +				}, +			}]