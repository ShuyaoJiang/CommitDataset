[+++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +	/**, +	 * @return {@code clsName} instanceof {@code implClsName}, +	 */, +	public List<String> getImplementations(String clsName) {, +		List<String> list = new ArrayList<>();, +		for (String cls : nameMap.keySet()) {, +			if (isImplements(cls, clsName)) {, +				list.add(cls);, +			}, +		}, +		return list;, +	}, +, +	public Set<String> getAncestors(String clsName) {, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +	/**, +	 * @return {@code clsName} instanceof {@code implClsName}, +	 */, +	public List<String> getImplementations(String clsName) {, +		List<String> list = new ArrayList<>();, +		for (String cls : nameMap.keySet()) {, +			if (isImplements(cls, clsName)) {, +				list.add(cls);, +			}, +		}, +		return list;, +	}, +, +	public Set<String> getAncestors(String clsName) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			if (!aCls.startsWith(Consts.DALVIK_ANNOTATION_PKG)) {, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +	/**, +	 * @return {@code clsName} instanceof {@code implClsName}, +	 */, +	public List<String> getImplementations(String clsName) {, +		List<String> list = new ArrayList<>();, +		for (String cls : nameMap.keySet()) {, +			if (isImplements(cls, clsName)) {, +				list.add(cls);, +			}, +		}, +		return list;, +	}, +, +	public Set<String> getAncestors(String clsName) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			if (!aCls.startsWith(Consts.DALVIK_ANNOTATION_PKG)) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			mth.addComment("JADX INFO: used method not loaded: " + callMth + ", types can be incorrect");, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +	/**, +	 * @return {@code clsName} instanceof {@code implClsName}, +	 */, +	public List<String> getImplementations(String clsName) {, +		List<String> list = new ArrayList<>();, +		for (String cls : nameMap.keySet()) {, +			if (isImplements(cls, clsName)) {, +				list.add(cls);, +			}, +		}, +		return list;, +	}, +, +	public Set<String> getAncestors(String clsName) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			if (!aCls.startsWith(Consts.DALVIK_ANNOTATION_PKG)) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			mth.addComment("JADX INFO: used method not loaded: " + callMth + ", types can be incorrect");, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IndexInsnNode.java, +import java.util.Objects;, +, +import jadx.core.utils.Utils;, +		return Objects.equals(index, other.index);, +		switch (insnType) {, +			case CAST:, +			case CHECK_CAST:, +				return InsnUtils.formatOffset(offset) + ": ", +						+ InsnUtils.insnTypeToString(insnType), +						+ getResult() + " = (" + InsnUtils.indexToString(index) + ") ", +						+ Utils.listToString(getArguments());, +, +			default:, +}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +	/**, +	 * @return {@code clsName} instanceof {@code implClsName}, +	 */, +	public List<String> getImplementations(String clsName) {, +		List<String> list = new ArrayList<>();, +		for (String cls : nameMap.keySet()) {, +			if (isImplements(cls, clsName)) {, +				list.add(cls);, +			}, +		}, +		return list;, +	}, +, +	public Set<String> getAncestors(String clsName) {]