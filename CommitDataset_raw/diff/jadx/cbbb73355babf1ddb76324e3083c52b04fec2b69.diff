[+++ b/src/main/java/jadx/dex/nodes/MethodNode.java, +import jadx.dex.attributes.LoopAttr;, +	private List<LoopAttr> loops = Collections.emptyList();, +	public void registerLoop(LoopAttr loop) {, +		if(loops.isEmpty()) {, +			loops = new ArrayList<LoopAttr>(5);, +		}, +		loops.add(loop);, +	}, +, +	public LoopAttr getLoopForBlock(BlockNode block) {, +		for (LoopAttr loop : loops) {, +			if(loop.getLoopBlocks().contains(block)), +				return loop;, +		}, +		return null;, +	}, +, +++ b/src/main/java/jadx/dex/nodes/MethodNode.java, +import jadx.dex.attributes.LoopAttr;, +	private List<LoopAttr> loops = Collections.emptyList();, +	public void registerLoop(LoopAttr loop) {, +		if(loops.isEmpty()) {, +			loops = new ArrayList<LoopAttr>(5);, +		}, +		loops.add(loop);, +	}, +, +	public LoopAttr getLoopForBlock(BlockNode block) {, +		for (LoopAttr loop : loops) {, +			if(loop.getLoopBlocks().contains(block)), +				return loop;, +		}, +		return null;, +	}, +, +++ b/src/main/java/jadx/dex/visitors/BlockMakerVisitor.java, +, +		registerLoops(mth);, +	private static void registerLoops(MethodNode mth) {, +		for (BlockNode block : mth.getBasicBlocks()) {, +			AttributesList attributes = block.getAttributes();, +			IAttribute loop = attributes.get(AttributeType.LOOP);, +			if(loop != null && attributes.contains(AttributeFlag.LOOP_START)) {, +				mth.registerLoop((LoopAttr) loop);, +			}, +		}, +	}, +, +++ b/src/main/java/jadx/dex/nodes/MethodNode.java, +import jadx.dex.attributes.LoopAttr;, +	private List<LoopAttr> loops = Collections.emptyList();, +	public void registerLoop(LoopAttr loop) {, +		if(loops.isEmpty()) {, +			loops = new ArrayList<LoopAttr>(5);, +		}, +		loops.add(loop);, +	}, +, +	public LoopAttr getLoopForBlock(BlockNode block) {, +		for (LoopAttr loop : loops) {, +			if(loop.getLoopBlocks().contains(block)), +				return loop;, +		}, +		return null;, +	}, +, +++ b/src/main/java/jadx/dex/visitors/BlockMakerVisitor.java, +, +		registerLoops(mth);, +	private static void registerLoops(MethodNode mth) {, +		for (BlockNode block : mth.getBasicBlocks()) {, +			AttributesList attributes = block.getAttributes();, +			IAttribute loop = attributes.get(AttributeType.LOOP);, +			if(loop != null && attributes.contains(AttributeFlag.LOOP_START)) {, +				mth.registerLoop((LoopAttr) loop);, +			}, +		}, +	}, +, +++ b/src/main/java/jadx/dex/visitors/regions/FinishRegions.java, +import jadx.dex.instructions.args.ArgType;, +import jadx.dex.nodes.BlockNode;, +import java.util.Iterator;, +public class FinishRegions extends TracedRegionVisitor {, +	public void processBlockTraced(MethodNode mth, IBlock container, IRegion currentRegion) {, +		if (container.getClass() != BlockNode.class), +			return;, +		BlockNode block = (BlockNode) container;, +, +		// remove last return in void functions, +		if (block.getCleanSuccessors().isEmpty(), +				&& mth.getReturnType().equals(ArgType.VOID)) {, +			int lastIndex = insns.size() - 1;, +			if (lastIndex != -1) {, +				InsnNode last = insns.get(lastIndex);, +				if (last.getType() == InsnType.RETURN, +						&& blockNotInLoop(mth, block)) {, +					insns.remove(lastIndex);, +	private boolean blockNotInLoop(MethodNode mth, BlockNode block) {]