[+++ b/src/main/java/jadx/dex/attributes/AttributeType.java, +, +	private static final int notUniqCount;, +	static {, +		// place all not unique attributes at first, +		int last = -1;, +		AttributeType[] vals = AttributeType.values();, +		for (int i = 0; i < vals.length; i++) {, +			AttributeType type = vals[i];, +			if (type.notUniq()), +				last = i;, +		}, +		notUniqCount = last + 1;, +	}, +, +	public static int getNotUniqCount() {, +		return notUniqCount;, +	}, +, +++ b/src/main/java/jadx/dex/attributes/AttributeType.java, +, +	private static final int notUniqCount;, +	static {, +		// place all not unique attributes at first, +		int last = -1;, +		AttributeType[] vals = AttributeType.values();, +		for (int i = 0; i < vals.length; i++) {, +			AttributeType type = vals[i];, +			if (type.notUniq()), +				last = i;, +		}, +		notUniqCount = last + 1;, +	}, +, +	public static int getNotUniqCount() {, +		return notUniqCount;, +	}, +, +++ b/src/main/java/jadx/dex/attributes/AttributesList.java, +/**, + * Storage for different attribute types:, + * 1. flags - boolean attribute (set or not), + * 2. attribute - class instance associated for attribute type,, + * only one attached to node for unique attributes, multiple for others, + */, +		attributes = new ArrayList<IAttribute>(0);, +		attrCount = new int[AttributeType.getNotUniqCount()];, +	// Flags, +	// Attributes, +, +	public void add(IAttribute attr) {, +		if (attr.getType().isUniq()), +			uniqAttr.put(attr.getType(), attr);, +		else, +			addMultiAttribute(attr);, +	}, +, +	private int getMultiCountInternal(AttributeType type) {, +			return getMultiCountInternal(type) != 0;, +			if (getMultiCountInternal(type) != 0) {, +			return uniqAttr.containsKey(type) ? 1 : 0;, +			return getMultiCountInternal(type);, +		int count = getMultiCountInternal(type);, +	public void remove(IAttribute attr) {, +		AttributeType type = attr.getType();, +		if (type.isUniq()) {, +			IAttribute a = uniqAttr.get(type);, +			if (a == attr), +				uniqAttr.remove(type);, +		} else {, +			if (getMultiCountInternal(type) == 0), +				return;, +, +			for (Iterator<IAttribute> it = attributes.iterator(); it.hasNext();) {, +				IAttribute a = it.next();, +				if (a == attr) {, +					it.remove();, +					attrCount[type.ordinal()]--;, +				}, +			}, +		}, +	}, +]