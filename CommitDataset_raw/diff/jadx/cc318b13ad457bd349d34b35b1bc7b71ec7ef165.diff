[+++ b/src/main/java/jadx/codegen/InsnGen.java, +		String type = useType(arg.getType());, +		ArgType[] generics = arg.getType().getGenericTypes();, +		if (generics != null) {, +			StringBuilder sb = new StringBuilder();, +			sb.append(type);, +			sb.append("/*<");, +			for (ArgType gt : generics) {, +				sb.append(useType(gt));, +			}, +			sb.append(">*/");, +			type = sb.toString();, +		}, +++ b/src/main/java/jadx/codegen/InsnGen.java, +		String type = useType(arg.getType());, +		ArgType[] generics = arg.getType().getGenericTypes();, +		if (generics != null) {, +			StringBuilder sb = new StringBuilder();, +			sb.append(type);, +			sb.append("/*<");, +			for (ArgType gt : generics) {, +				sb.append(useType(gt));, +			}, +			sb.append(">*/");, +			type = sb.toString();, +		}, +++ b/src/main/java/jadx/dex/info/LocalVarInfo.java, +			type = ArgType.generic(type.getObject(), sign);, +++ b/src/main/java/jadx/codegen/InsnGen.java, +		String type = useType(arg.getType());, +		ArgType[] generics = arg.getType().getGenericTypes();, +		if (generics != null) {, +			StringBuilder sb = new StringBuilder();, +			sb.append(type);, +			sb.append("/*<");, +			for (ArgType gt : generics) {, +				sb.append(useType(gt));, +			}, +			sb.append(">*/");, +			type = sb.toString();, +		}, +++ b/src/main/java/jadx/dex/info/LocalVarInfo.java, +			type = ArgType.generic(type.getObject(), sign);, +++ b/src/main/java/jadx/dex/instructions/args/ArgType.java, +public abstract class ArgType {, +	protected int hash;, +	private static ArgType primitive(PrimitiveType stype) {, +		return new PrimitiveArg(stype);, +		return new ObjectArg(Utils.cleanObjectName(obj));, +	}, +, +	public static ArgType generic(String obj, String signature) {, +		return new GenericObjectArg(obj, signature);, +		return new ArrayArg(vtype);, +		return new UnknownArg(types);, +	private static abstract class KnownTypeArg extends ArgType {, +		@Override, +			return true;, +		}, +	private static final class PrimitiveArg extends KnownTypeArg {, +		private final PrimitiveType type;, +, +		public PrimitiveArg(PrimitiveType type) {, +			this.type = type;, +			this.hash = type.hashCode();, +		}, +, +		@Override, +		@Override, +			return true;, +		@Override, +		public String toString() {, +			return type.toString();, +		}, +	}, +, +	private static class ObjectArg extends KnownTypeArg {, +		private final String object;, +, +		public ObjectArg(String obj) {, +			this.object = obj;, +			this.hash = obj.hashCode();, +		}, +, +		@Override, +		@Override, +			return true;, +		@Override, +		public PrimitiveType getPrimitiveType() {, +			return PrimitiveType.OBJECT;, +		@Override, +		public String toString() {, +			return object;, +		}, +	private static final class GenericObjectArg extends ObjectArg {, +		private final ArgType[] generics;, +, +		public GenericObjectArg(String obj, String signature) {, +			super(obj);, +			this.generics = parseSignature(signature);]