[+++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.FieldNode;, +				if (k instanceof FieldNode) {, +					FieldNode fn = (FieldNode) k;, +					if (fn.getParentClass().isEnum()) {, +						code.add(fn.getName());, +					} else {, +						staticField(code, fn.getFieldInfo());, +					}, +				} else if (k instanceof IndexInsnNode) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.FieldNode;, +				if (k instanceof FieldNode) {, +					FieldNode fn = (FieldNode) k;, +					if (fn.getParentClass().isEnum()) {, +						code.add(fn.getName());, +					} else {, +						staticField(code, fn.getFieldInfo());, +					}, +				} else if (k instanceof IndexInsnNode) {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +import jadx.core.dex.attributes.nodes.EnumMapAttr;, +	public static final AType<EnumMapAttr> ENUM_MAP = new AType<EnumMapAttr>();, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.FieldNode;, +				if (k instanceof FieldNode) {, +					FieldNode fn = (FieldNode) k;, +					if (fn.getParentClass().isEnum()) {, +						code.add(fn.getName());, +					} else {, +						staticField(code, fn.getFieldInfo());, +					}, +				} else if (k instanceof IndexInsnNode) {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +import jadx.core.dex.attributes.nodes.EnumMapAttr;, +	public static final AType<EnumMapAttr> ENUM_MAP = new AType<EnumMapAttr>();, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttrNode.java, +		initStorage().add(flag);, +		initStorage().add(attr);, +		initStorage().add(type, obj);, +		initStorage().addAll(attrNode.storage);, +	AttributeStorage initStorage() {, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.FieldNode;, +				if (k instanceof FieldNode) {, +					FieldNode fn = (FieldNode) k;, +					if (fn.getParentClass().isEnum()) {, +						code.add(fn.getName());, +					} else {, +						staticField(code, fn.getFieldInfo());, +					}, +				} else if (k instanceof IndexInsnNode) {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +import jadx.core.dex.attributes.nodes.EnumMapAttr;, +	public static final AType<EnumMapAttr> ENUM_MAP = new AType<EnumMapAttr>();, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttrNode.java, +		initStorage().add(flag);, +		initStorage().add(attr);, +		initStorage().add(type, obj);, +		initStorage().addAll(attrNode.storage);, +	AttributeStorage initStorage() {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/EmptyAttrStorage.java, +public final class EmptyAttrStorage extends AttributeStorage {, +, +	@Override, +	public String toString() {, +		return "";, +	}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.FieldNode;, +				if (k instanceof FieldNode) {, +					FieldNode fn = (FieldNode) k;, +					if (fn.getParentClass().isEnum()) {, +						code.add(fn.getName());, +					} else {, +						staticField(code, fn.getFieldInfo());, +					}, +				} else if (k instanceof IndexInsnNode) {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +import jadx.core.dex.attributes.nodes.EnumMapAttr;, +	public static final AType<EnumMapAttr> ENUM_MAP = new AType<EnumMapAttr>();, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttrNode.java, +		initStorage().add(flag);, +		initStorage().add(attr);, +		initStorage().add(type, obj);, +		initStorage().addAll(attrNode.storage);, +	AttributeStorage initStorage() {, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/EmptyAttrStorage.java, +public final class EmptyAttrStorage extends AttributeStorage {, +, +	@Override, +	public String toString() {, +		return "";, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumMapAttr.java, +package jadx.core.dex.attributes.nodes;, +, +import jadx.core.dex.attributes.AType;, +import jadx.core.dex.attributes.IAttribute;, +]