[+++ b/src/main/java/jadx/Main.java, +import jadx.dex.visitors.ClassModifier;, +import jadx.dex.visitors.regions.CleanRegions;, +			passes.add(new ClassModifier());, +, +, +			passes.add(new CleanRegions());, +++ b/src/main/java/jadx/Main.java, +import jadx.dex.visitors.ClassModifier;, +import jadx.dex.visitors.regions.CleanRegions;, +			passes.add(new ClassModifier());, +, +, +			passes.add(new CleanRegions());, +++ b/src/main/java/jadx/codegen/MethodGen.java, +				LOG.debug(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +++ b/src/main/java/jadx/Main.java, +import jadx.dex.visitors.ClassModifier;, +import jadx.dex.visitors.regions.CleanRegions;, +			passes.add(new ClassModifier());, +, +, +			passes.add(new CleanRegions());, +++ b/src/main/java/jadx/codegen/MethodGen.java, +				LOG.debug(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +++ b/src/main/java/jadx/codegen/RegionGen.java, +				code.startLine();, +		code.add("if ").add(makeCondition(insn)).add(" {");, +			code.add(" else ");, +, +			// connect if-else-if block, +			if (els instanceof Region) {, +				Region re = (Region) els;, +				if (re.getSubBlocks().size() == 1, +						&& re.getSubBlocks().get(0) instanceof IfRegion) {, +					makeIf((IfRegion) re.getSubBlocks().get(0), code);, +					return;, +				}, +			}, +, +			code.add("{");, +++ b/src/main/java/jadx/Main.java, +import jadx.dex.visitors.ClassModifier;, +import jadx.dex.visitors.regions.CleanRegions;, +			passes.add(new ClassModifier());, +, +, +			passes.add(new CleanRegions());, +++ b/src/main/java/jadx/codegen/MethodGen.java, +				LOG.debug(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +++ b/src/main/java/jadx/codegen/RegionGen.java, +				code.startLine();, +		code.add("if ").add(makeCondition(insn)).add(" {");, +			code.add(" else ");, +, +			// connect if-else-if block, +			if (els instanceof Region) {, +				Region re = (Region) els;, +				if (re.getSubBlocks().size() == 1, +						&& re.getSubBlocks().get(0) instanceof IfRegion) {, +					makeIf((IfRegion) re.getSubBlocks().get(0), code);, +					return;, +				}, +			}, +, +			code.add("{");, +++ b/src/main/java/jadx/dex/regions/IfRegion.java, +import java.util.Collections;, +		return Collections.unmodifiableList(all);, +++ b/src/main/java/jadx/Main.java, +import jadx.dex.visitors.ClassModifier;, +import jadx.dex.visitors.regions.CleanRegions;, +			passes.add(new ClassModifier());, +, +, +			passes.add(new CleanRegions());, +++ b/src/main/java/jadx/codegen/MethodGen.java, +				LOG.debug(ErrorsCounter.formatErrorMsg(mth, " Inconsistent code"));, +++ b/src/main/java/jadx/codegen/RegionGen.java, +				code.startLine();, +		code.add("if ").add(makeCondition(insn)).add(" {");, +			code.add(" else ");, +, +			// connect if-else-if block, +			if (els instanceof Region) {, +				Region re = (Region) els;, +				if (re.getSubBlocks().size() == 1, +						&& re.getSubBlocks().get(0) instanceof IfRegion) {, +					makeIf((IfRegion) re.getSubBlocks().get(0), code);, +					return;, +				}, +			}, +, +			code.add("{");, +++ b/src/main/java/jadx/dex/regions/IfRegion.java, +import java.util.Collections;, +		return Collections.unmodifiableList(all);, +++ b/src/main/java/jadx/dex/regions/LoopRegion.java, +import java.util.Collections;, +		return Collections.unmodifiableList(all);]