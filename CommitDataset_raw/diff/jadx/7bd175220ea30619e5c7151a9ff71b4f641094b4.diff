[+++ b/.gitignore, +*.orig, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		setFromOut(args);, +		checkDir(args.getOutDir());, +		checkDir(args.getOutDirSrc());, +		checkDir(args.getOutDirRes());, +	private static void setFromOut(JadxArgs args) {, +		if (args.getOutDirSrc() == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (args.getOutDirRes() == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +	}, +, +	private static void checkDir(File dir) {, +			throw new JadxArgsValidateException("Output directory exists as file " + dir);, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		setFromOut(args);, +		checkDir(args.getOutDir());, +		checkDir(args.getOutDirSrc());, +		checkDir(args.getOutDirRes());, +	private static void setFromOut(JadxArgs args) {, +		if (args.getOutDirSrc() == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (args.getOutDirRes() == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +	}, +, +	private static void checkDir(File dir) {, +			throw new JadxArgsValidateException("Output directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	List<IDexTreeVisitor> getPasses() {, +		return passes;, +	}, +, +++ b/.gitignore, +*.orig, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		setFromOut(args);, +		checkDir(args.getOutDir());, +		checkDir(args.getOutDirSrc());, +		checkDir(args.getOutDirRes());, +	private static void setFromOut(JadxArgs args) {, +		if (args.getOutDirSrc() == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (args.getOutDirRes() == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +	}, +, +	private static void checkDir(File dir) {, +			throw new JadxArgsValidateException("Output directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	List<IDexTreeVisitor> getPasses() {, +		return passes;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ConstructorVisitor;, +import jadx.core.dex.visitors.InitCodeVariables;, +import jadx.core.dex.visitors.MarkFinallyVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoApplyVisitor;, +import jadx.core.dex.visitors.debuginfo.DebugInfoParseVisitor;, +import jadx.core.dex.visitors.regions.CleanRegions;, +import jadx.core.dex.visitors.regions.variables.ProcessVariables;, +import jadx.core.dex.visitors.typeinference.TypeInferenceVisitor;, +			passes.add(new DebugInfoParseVisitor());, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinish());, +, +			passes.add(new SSATransform());, +			passes.add(new ConstructorVisitor());, +			passes.add(new InitCodeVariables());, +			passes.add(new MarkFinallyVisitor());, +			passes.add(new TypeInferenceVisitor());, +			passes.add(new DebugInfoApplyVisitor());, +			passes.add(new CleanRegions());, +			passes.add(new MethodInlineVisitor());, +			passes.add(new ProcessVariables());, +			passes.add(new PrepareForCodeGen());, +++ b/.gitignore]