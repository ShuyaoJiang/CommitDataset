[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		// 'static' modifier not allowed for top classes (not inner), +		if (!cls.getClassInfo().isInner()) {, +			af = af.remove(AccessFlags.ACC_STATIC);, +		}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		// 'static' modifier not allowed for top classes (not inner), +		if (!cls.getClassInfo().isInner()) {, +			af = af.remove(AccessFlags.ACC_STATIC);, +		}, +, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import jadx.api.JadxInternalAccess;, +import jadx.tests.api.compiler.DynamicCompiler;, +import java.lang.reflect.Method;, +	protected boolean compile = true;, +	private DynamicCompiler dynamicCompiler;, +, +		compile(cls);, +	void compile(ClassNode cls) {, +		if (!compile) {, +			return;, +		}, +		try {, +			dynamicCompiler = new DynamicCompiler(cls);, +			boolean result = dynamicCompiler.compile();, +			assertTrue("Compilation failed on code: \n\n" + cls.getCode() + "\n", result);, +		} catch (Exception e) {, +			e.printStackTrace();, +			fail(e.getMessage());, +		}, +	}, +, +	public Object invoke(String method) throws Exception {, +		return invoke(method, new Class[0]);, +	}, +, +	public Object invoke(String method, Class[] types, Object... args) {, +		Method mth = getReflectMethod(method, types);, +		return invoke(mth, args);, +	}, +, +	public Method getReflectMethod(String method, Class... types) {, +		assertNotNull("dynamicCompiler not ready", dynamicCompiler);, +		try {, +			return dynamicCompiler.getMethod(method, types);, +		} catch (Exception e) {, +			e.printStackTrace();, +			fail(e.getMessage());, +		}, +		return null;, +	}, +, +	public Object invoke(Method mth, Object... args) {, +		assertNotNull("dynamicCompiler not ready", dynamicCompiler);, +		assertNotNull("unknown method", mth);, +		try {, +			return dynamicCompiler.invoke(mth, args);, +		} catch (Exception e) {, +			e.printStackTrace();, +			fail(e.getMessage());, +		}, +		return null;, +	}, +, +	// Try to make test class compilable, +	@Deprecated, +	public void disableCompilation() {, +		this.compile = false;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		// 'static' modifier not allowed for top classes (not inner), +		if (!cls.getClassInfo().isInner()) {, +			af = af.remove(AccessFlags.ACC_STATIC);, +		}, +, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import jadx.api.JadxInternalAccess;, +import jadx.tests.api.compiler.DynamicCompiler;, +import java.lang.reflect.Method;, +	protected boolean compile = true;, +	private DynamicCompiler dynamicCompiler;, +, +		compile(cls);, +	void compile(ClassNode cls) {, +		if (!compile) {, +			return;, +		}, +		try {, +			dynamicCompiler = new DynamicCompiler(cls);, +			boolean result = dynamicCompiler.compile();, +			assertTrue("Compilation failed on code: \n\n" + cls.getCode() + "\n", result);, +		} catch (Exception e) {, +			e.printStackTrace();, +			fail(e.getMessage());, +		}, +	}, +]