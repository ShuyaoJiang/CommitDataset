[+++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributesList.java, +import java.util.LinkedList;, +		attributes = new LinkedList<IAttribute>();, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributesList.java, +import java.util.LinkedList;, +		attributes = new LinkedList<IAttribute>();, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +import java.util.LinkedHashMap;, +	private final AccessInfo accessFlags;, +	private final List<MethodNode> methods;, +	private final List<FieldNode> fields;, +	private Map<Object, FieldNode> constFields = Collections.emptyMap();, +			if (cls.getSupertypeIndex() == DexNode.NO_INDEX) {, +				this.superClass = null;, +			} else {, +				this.superClass = ClassInfo.fromDex(dex, cls.getSupertypeIndex());, +			}, +				int mthsCount = clsData.getDirectMethods().length + clsData.getVirtualMethods().length;, +				int fieldsCount = clsData.getStaticFields().length + clsData.getInstanceFields().length;, +				methods = new ArrayList<MethodNode>(mthsCount);, +				fields = new ArrayList<FieldNode>(fieldsCount);, +, +				for (Method mth : clsData.getDirectMethods()) {, +				}, +				for (Method mth : clsData.getVirtualMethods()) {, +				}, +				for (Field f : clsData.getStaticFields()) {, +				}, +				for (Field f : clsData.getInstanceFields()) {, +			} else {, +				methods = Collections.emptyList();, +				fields = Collections.emptyList();, +			}, +			// restore original access flags from dalvik annotation if present, +			if (a != null) {, +			} else {, +			}, +			int count = parser.processFields(staticFields);, +			constFields = new LinkedHashMap<Object, FieldNode>(count);, +		if (a == null) {, +		}, +			if (a != null) {, +				if (gType != null) {, +		}, +	}, +			if (f.getName().equals(name)) {, +		}, +			if (f.getName().equals(name)) {, +		}, +			if (m.getMethodInfo().equals(mth)) {, +		}, +			if (m.getMethodInfo().getShortId().equals(shortId)) {, +		}, +		if (innerClasses.isEmpty()) {, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributesList.java, +import java.util.LinkedList;, +		attributes = new LinkedList<IAttribute>();, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +import java.util.LinkedHashMap;, +	private final AccessInfo accessFlags;, +	private final List<MethodNode> methods;, +	private final List<FieldNode> fields;, +	private Map<Object, FieldNode> constFields = Collections.emptyMap();, +			if (cls.getSupertypeIndex() == DexNode.NO_INDEX) {, +				this.superClass = null;, +			} else {, +				this.superClass = ClassInfo.fromDex(dex, cls.getSupertypeIndex());, +			}, +				int mthsCount = clsData.getDirectMethods().length + clsData.getVirtualMethods().length;, +				int fieldsCount = clsData.getStaticFields().length + clsData.getInstanceFields().length;, +				methods = new ArrayList<MethodNode>(mthsCount);, +				fields = new ArrayList<FieldNode>(fieldsCount);, +, +				for (Method mth : clsData.getDirectMethods()) {, +				}, +				for (Method mth : clsData.getVirtualMethods()) {, +				}, +				for (Field f : clsData.getStaticFields()) {, +				}, +				for (Field f : clsData.getInstanceFields()) {, +			} else {, +				methods = Collections.emptyList();, +				fields = Collections.emptyList();, +			}, +			// restore original access flags from dalvik annotation if present, +			if (a != null) {, +			} else {, +			}, +			int count = parser.processFields(staticFields);, +			constFields = new LinkedHashMap<Object, FieldNode>(count);, +		if (a == null) {, +		}, +			if (a != null) {, +				if (gType != null) {, +		}, +	}, +			if (f.getName().equals(name)) {, +		}, +			if (f.getName().equals(name)) {]