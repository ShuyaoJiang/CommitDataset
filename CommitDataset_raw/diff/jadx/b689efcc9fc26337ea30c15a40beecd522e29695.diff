[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/CodeVar.java, +	private ArgType type; // nullable before type inference, set only for immutable types, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/CodeVar.java, +	private ArgType type; // nullable before type inference, set only for immutable types, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +		if (codeVar.getType() != null && !typeInfo.getType().equals(codeVar.getType())) {, +			throw new JadxRuntimeException("Unmached types for SSA and Code variables: " + this + " and " + codeVar);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/CodeVar.java, +	private ArgType type; // nullable before type inference, set only for immutable types, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +		if (codeVar.getType() != null && !typeInfo.getType().equals(codeVar.getType())) {, +			throw new JadxRuntimeException("Unmached types for SSA and Code variables: " + this + " and " + codeVar);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/InitCodeVariables.java, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.stream.Collectors;, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +			Set<SSAVar> vars = new LinkedHashSet<>();, +			vars.add(ssaVar);, +			setCodeVarType(codeVar, vars);, +		} else {, +			ssaVar.setCodeVar(codeVar);, +		}, +	}, +, +	private static void setCodeVarType(CodeVar codeVar, Set<SSAVar> vars) {, +		if (vars.size() > 1) {, +			List<ArgType> imTypes = vars.stream(), +					.filter(var -> var.contains(AFlag.METHOD_ARGUMENT)), +					.map(var -> var.getTypeInfo().getType()), +					.distinct(), +					.collect(Collectors.toList());, +			int imCount = imTypes.size();, +			if (imCount == 1) {, +				codeVar.setType(imTypes.get(0));, +			} else if (imCount > 1) {, +				throw new JadxRuntimeException("Several immutable types in one variable: " + imTypes + ", vars: " + vars);, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/CodeVar.java, +	private ArgType type; // nullable before type inference, set only for immutable types, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +		if (codeVar.getType() != null && !typeInfo.getType().equals(codeVar.getType())) {, +			throw new JadxRuntimeException("Unmached types for SSA and Code variables: " + this + " and " + codeVar);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/InitCodeVariables.java, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.stream.Collectors;, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +			Set<SSAVar> vars = new LinkedHashSet<>();, +			vars.add(ssaVar);, +			setCodeVarType(codeVar, vars);, +		} else {, +			ssaVar.setCodeVar(codeVar);, +		}, +	}, +, +	private static void setCodeVarType(CodeVar codeVar, Set<SSAVar> vars) {, +		if (vars.size() > 1) {, +			List<ArgType> imTypes = vars.stream(), +					.filter(var -> var.contains(AFlag.METHOD_ARGUMENT)), +					.map(var -> var.getTypeInfo().getType()), +					.distinct(), +					.collect(Collectors.toList());, +			int imCount = imTypes.size();, +			if (imCount == 1) {, +				codeVar.setType(imTypes.get(0));, +			} else if (imCount > 1) {, +				throw new JadxRuntimeException("Several immutable types in one variable: " + imTypes + ", vars: " + vars);, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java, +			ArgType codeVarType = ssaVar.getCodeVar().getType();, +			if (codeVarType != null) {, +				return applyImmutableType(ssaVar, codeVarType);, +			RegisterArg assignArg = ssaVar.getAssign();, +			if (assignArg.isTypeImmutable()) {, +				return applyImmutableType(ssaVar, assignArg.getInitType());, +			}, +			return calculateFromBounds(ssaVar);, +		} catch (Exception e) {, +			LOG.error("Failed to calculate best type for var: {}", ssaVar);, +			return false;, +		}, +	}, +, +	private boolean applyImmutableType(SSAVar ssaVar, ArgType initType) {, +		return result == TypeUpdateResult.CHANGED;, +		if (!bestTypeOpt.isPresent()) {, +			if (Consts.DEBUG) {, +				LOG.warn("Failed to select best type from bounds, count={} : ", bounds.size());, +				for (ITypeBound bound : bounds) {, +					LOG.warn("  {}", bound);, +				}, +			}, +			return false;, +		}]