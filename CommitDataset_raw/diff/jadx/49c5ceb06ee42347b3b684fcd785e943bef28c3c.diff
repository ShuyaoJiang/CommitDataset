[+++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +, +	RootNode getRoot() {, +		return root;, +	}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +, +	RootNode getRoot() {, +		return root;, +	}, +++ b/jadx-core/src/test/java/jadx/api/InternalJadxTest.java, +package jadx.api;, +, +import jadx.core.Jadx;, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.dex.visitors.DepthTraverser;, +import jadx.core.dex.visitors.IDexTreeVisitor;, +, +import java.io.BufferedInputStream;, +import java.io.File;, +import java.io.FileInputStream;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.net.URL;, +import java.util.List;, +import java.util.jar.JarEntry;, +import java.util.jar.JarOutputStream;, +, +import static junit.framework.Assert.assertEquals;, +import static junit.framework.Assert.fail;, +, +public abstract class InternalJadxTest {, +, +	public ClassNode getClassNode(Class clazz) {, +		try {, +			File temp = getJarForClass(clazz);, +, +			Decompiler d = new Decompiler();, +			try {, +				d.loadFile(temp);, +				assertEquals(d.getClasses().size(), 1);, +			} catch (Exception e) {, +				fail(e.getMessage());, +			} finally {, +				temp.delete();, +			}, +, +			List<ClassNode> classes = d.getRoot().getClasses(false);, +			ClassNode cls = classes.get(0);, +, +			assertEquals(cls.getFullName(), clazz.getName());, +, +			cls.load();, +			List<IDexTreeVisitor> passes = Jadx.getPassesList(new DefaultJadxArgs(), null);, +			for (IDexTreeVisitor visitor : passes) {, +				DepthTraverser.visit(visitor, cls);, +			}, +			return cls;, +		} catch (Exception e) {, +			fail(e.getMessage());, +			return null;, +		}, +	}, +, +	protected MethodNode getMethod(ClassNode cls, String method) {, +		for (MethodNode mth : cls.getMethods()) {, +			if (mth.getName().equals(method)) {, +				return mth;, +			}, +		}, +		fail("Method not found " + method + " in class " + cls);, +		return null;, +	}, +, +	public File getJarForClass(Class<?> cls) throws IOException {, +		File classFile = getClassFile(cls);, +		String shortClsFileName = cls.getName().replace('.', '/') + ".class";, +, +		File temp = File.createTempFile("jadx-tmp-", System.nanoTime() + ".jar");, +		JarOutputStream jo = new JarOutputStream(new FileOutputStream(temp));, +		add(classFile, shortClsFileName, jo);, +		jo.close();, +		temp.deleteOnExit();, +		return temp;, +	}, +, +	private File getClassFile(Class<?> cls) {, +		String path = cutPackage(cls) + ".class";, +		URL resource = cls.getResource(path);, +		if (resource == null) {, +			throw new AssertionError("Class file not found: " + path);, +		}, +		if (!"file".equalsIgnoreCase(resource.getProtocol())) {, +			throw new IllegalStateException("Class is not stored in a file.");, +		}, +		return new File(resource.getPath());, +	}, +, +	private String cutPackage(Class<?> cls) {]