[+++ b/.travis.yml, +script:, +    - TERM=dumb ./gradlew clean build dist, +++ b/.travis.yml, +script:, +    - TERM=dumb ./gradlew clean build dist, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.exceptions.JadxException;, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws JadxException {, +			throw new JadxException("Output directory exists as file " + outputDir);, +++ b/.travis.yml, +script:, +    - TERM=dumb ./gradlew clean build dist, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.exceptions.JadxException;, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws JadxException {, +			throw new JadxException("Output directory exists as file " + outputDir);, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +	private static final String STRING_CHARSET = "US-ASCII";, +, +					throw new JadxRuntimeException("Duplicate class: " + clsRawName);, +			throw new JadxRuntimeException("Unknown file format: " + outputName);, +			throw new JadxRuntimeException("Can't load classpath file: " + CLST_FILENAME);, +			throw new JadxRuntimeException("Unknown file format: " + name);, +		int readHeaderLength = in.read(header);, +		if (readHeaderLength != JADX_CLS_SET_HEADER.length(), +				|| !JADX_CLS_SET_HEADER.equals(new String(header, STRING_CHARSET)), +				|| version != VERSION) {, +		byte[] bytes = name.getBytes(STRING_CHARSET);, +		return new String(bytes, STRING_CHARSET);, +	public int getClassesCount() {, +		return classes.length;, +	}, +, +	public void addToMap(Map<String, NClass> nameMap) {, +		for (NClass cls : classes) {, +			nameMap.put(cls.getName(), cls);, +		}, +++ b/.travis.yml, +script:, +    - TERM=dumb ./gradlew clean build dist, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.exceptions.JadxException;, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws JadxException {, +			throw new JadxException("Output directory exists as file " + outputDir);, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +	private static final String STRING_CHARSET = "US-ASCII";, +, +					throw new JadxRuntimeException("Duplicate class: " + clsRawName);, +			throw new JadxRuntimeException("Unknown file format: " + outputName);, +			throw new JadxRuntimeException("Can't load classpath file: " + CLST_FILENAME);, +			throw new JadxRuntimeException("Unknown file format: " + name);, +		int readHeaderLength = in.read(header);, +		if (readHeaderLength != JADX_CLS_SET_HEADER.length(), +				|| !JADX_CLS_SET_HEADER.equals(new String(header, STRING_CHARSET)), +				|| version != VERSION) {, +		byte[] bytes = name.getBytes(STRING_CHARSET);, +		return new String(bytes, STRING_CHARSET);, +	public int getClassesCount() {, +		return classes.length;, +	}, +, +	public void addToMap(Map<String, NClass> nameMap) {, +		for (NClass cls : classes) {, +			nameMap.put(cls.getName(), cls);, +		}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClspGraph.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +	private final Map<String, Set<String>> ancestorCache = new WeakHashMap<String, Set<String>>();, +			nameMap = new HashMap<String, NClass>(set.getClassesCount());, +			set.addToMap(nameMap);, +			throw new JadxRuntimeException("Classpath already loaded");, +			throw new JadxRuntimeException("Classpath must be loaded first");, +++ b/.travis.yml, +script:, +    - TERM=dumb ./gradlew clean build dist, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +import jadx.core.utils.exceptions.JadxException;, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws JadxException {, +			throw new JadxException("Output directory exists as file " + outputDir);, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +	private static final String STRING_CHARSET = "US-ASCII";, +, +					throw new JadxRuntimeException("Duplicate class: " + clsRawName);, +			throw new JadxRuntimeException("Unknown file format: " + outputName);, +			throw new JadxRuntimeException("Can't load classpath file: " + CLST_FILENAME);, +			throw new JadxRuntimeException("Unknown file format: " + name);, +		int readHeaderLength = in.read(header);, +		if (readHeaderLength != JADX_CLS_SET_HEADER.length(), +				|| !JADX_CLS_SET_HEADER.equals(new String(header, STRING_CHARSET)), +				|| version != VERSION) {, +		byte[] bytes = name.getBytes(STRING_CHARSET);, +		return new String(bytes, STRING_CHARSET);, +	public int getClassesCount() {, +		return classes.length;, +	}, +]