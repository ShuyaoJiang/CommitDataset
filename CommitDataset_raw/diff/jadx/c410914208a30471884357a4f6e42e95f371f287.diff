[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DepthTraversal.java, +, +	private DepthTraversal() {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DepthTraversal.java, +, +	private DepthTraversal() {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinallyExtract.java, +import jadx.core.Jadx;, +import jadx.core.dex.attributes.AFlag;, +import jadx.core.dex.attributes.AType;, +import jadx.core.dex.attributes.nodes.IgnoreEdgeAttr;, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.RegisterArg;, +import jadx.core.dex.nodes.BlockNode;, +import jadx.core.dex.nodes.InsnNode;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.dex.trycatch.CatchAttr;, +import jadx.core.dex.trycatch.ExceptionHandler;, +import jadx.core.dex.trycatch.SplitterBlockAttr;, +import jadx.core.dex.trycatch.TryCatchBlock;, +import jadx.core.dex.visitors.AbstractVisitor;, +import jadx.core.dex.visitors.DepthTraversal;, +import jadx.core.dex.visitors.IDexTreeVisitor;, +import jadx.core.dex.visitors.blocksmaker.helpers.BlocksPair;, +import jadx.core.dex.visitors.blocksmaker.helpers.BlocksRemoveInfo;, +import jadx.core.dex.visitors.ssa.LiveVarAnalysis;, +import jadx.core.utils.BlockUtils;, +import jadx.core.utils.ErrorsCounter;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +, +		try {, +		} catch (Exception e) {, +			LOG.warn("Undo finally extract visitor, mth: {}", mth, e);, +			try {, +				// reload method without applying this visitor, +				// TODO: make more common and less hacky, +				mth.unload();, +				mth.load();, +				List<IDexTreeVisitor> passes = Jadx.getPassesList(mth.root().getArgs());, +				for (IDexTreeVisitor visitor : passes) {, +					if (visitor instanceof BlockFinallyExtract) {, +						break;, +					}, +					DepthTraversal.visit(visitor, mth);, +				}, +			} catch (Exception ee) {, +				LOG.error("Undo finally extract failed, mth: {}", mth, e);, +			}, +		}, +		if (removeInfo.getOuts().isEmpty()) {, +			ErrorsCounter.methodError(mth, "Failed to extract finally block: empty outs");, +			return false;, +		}, +		// safe checks finished, altering blocks tree, +		// all error must throw exception to undo changes, +		Set<BlocksPair> outs = removeInfo.getOuts();, +		if (outs.isEmpty()) {, +			throw new JadxRuntimeException("Failed to extract finally block: all outs is deleted");, +		}, +		BlocksPair out = outs.iterator().next();, +				throw new JadxRuntimeException("Block not found by " + pred + ", in " + removeInfo);]