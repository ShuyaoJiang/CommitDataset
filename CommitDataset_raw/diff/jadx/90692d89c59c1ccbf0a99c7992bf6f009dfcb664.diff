[+++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +				return new ResTableParser(), +					.decodeFiles(inputStream);, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +				return new ResTableParser(), +					.decodeFiles(inputStream);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	, +	public void updateContent(String newData) {, +		offset = newData.length();, +		buf = new StringBuilder(newData);, +		line = newData.split(NL).length + 1;, +		code = newData;, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +				return new ResTableParser(), +					.decodeFiles(inputStream);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	, +	public void updateContent(String newData) {, +		offset = newData.length();, +		buf = new StringBuilder(newData);, +		line = newData.split(NL).length + 1;, +		code = newData;, +	}, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	private RootNode rootNode;, +	private String appPackageName;, +, +	public BinaryXMLParser(RootNode rootNode) {, +		this.rootNode = rootNode;, +			ConstStorage constStorage = rootNode.getConstValues();, +		currentTag = deobfClassName(currentTag);, +		String shortNsName = null;, +			shortNsName = getAttributeNS(attributeNS);, +			writer.add(shortNsName).add(':');, +			memorizePackageName(attrName, decodedAttr);, +			if(isDeobfCandidateAttr(shortNsName, attrName)) {, +				decodedAttr = deobfClassName(decodedAttr);, +			}, +			decodeAttribute(attributeNS, attrValDataType, attrValData,, +					shortNsName, attrName);, +	private void decodeAttribute(int attributeNS, int attrValDataType, int attrValData,, +			String shortNsName, String attrName) {, +		, +			memorizePackageName(attrName, str);, +			if(isDeobfCandidateAttr(shortNsName, attrName)) {, +				str = deobfClassName(str);, +			}, +	, +	private String deobfClassName(String className) {, +		String newName = XmlDeobf.deobfClassName(rootNode, className,, +				appPackageName);, +		if(newName != null) {, +			return newName;, +		}, +		return className;, +	}, +	, +	private boolean isDeobfCandidateAttr(String shortNsName, String attrName) {, +		String fullName;, +		if(shortNsName != null) {, +			fullName = shortNsName + ":" + attrName;, +		}, +		else {, +			return false;, +		}, +		return "android:name".equals(fullName);, +	}, +	, +	private void memorizePackageName(String attrName, String attrValue) {, +		if("manifest".equals(currentTag) && "package".equals(attrName)) {, +			appPackageName = attrValue;, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +				return new ResTableParser(), +					.decodeFiles(inputStream);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	, +	public void updateContent(String newData) {, +		offset = newData.length();, +		buf = new StringBuilder(newData);, +		line = newData.split(NL).length + 1;, +		code = newData;, +	}, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	private RootNode rootNode;, +	private String appPackageName;, +, +	public BinaryXMLParser(RootNode rootNode) {, +		this.rootNode = rootNode;, +			ConstStorage constStorage = rootNode.getConstValues();, +		currentTag = deobfClassName(currentTag);, +		String shortNsName = null;, +			shortNsName = getAttributeNS(attributeNS);, +			writer.add(shortNsName).add(':');, +			memorizePackageName(attrName, decodedAttr);, +			if(isDeobfCandidateAttr(shortNsName, attrName)) {, +				decodedAttr = deobfClassName(decodedAttr);]