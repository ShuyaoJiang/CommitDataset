[+++ b/jadx-core/src/test/java/jadx/api/InternalJadxTest.java, +import java.net.URISyntaxException;, +import java.util.ArrayList;, +		String path = cls.getPackage().getName().replace('.', '/');, +		List<File> list = getClassFilesWithInners(cls);, +		for (File file : list) {, +			add(file, path + "/" + file.getName(), jo);, +		}, +	private List<File> getClassFilesWithInners(Class<?> cls) {, +		List<File> list = new ArrayList<File>();, +		String pkgName = cls.getPackage().getName();, +		URL pkgResource = ClassLoader.getSystemClassLoader().getResource(pkgName.replace('.', '/'));, +		if (pkgResource != null) {, +			try {, +				String clsName = cls.getName();, +				File directory = new File(pkgResource.toURI());, +				String[] files = directory.list();, +				for (String file : files) {, +					String fullName = pkgName + "." + file;, +					if (fullName.startsWith(clsName)) {, +						list.add(new File(directory, file));, +			} catch (URISyntaxException e) {, +				fail(e.getMessage());, +		}, +		return list;, +				if (count == -1) {, +				}, +++ b/jadx-core/src/test/java/jadx/api/InternalJadxTest.java, +import java.net.URISyntaxException;, +import java.util.ArrayList;, +		String path = cls.getPackage().getName().replace('.', '/');, +		List<File> list = getClassFilesWithInners(cls);, +		for (File file : list) {, +			add(file, path + "/" + file.getName(), jo);, +		}, +	private List<File> getClassFilesWithInners(Class<?> cls) {, +		List<File> list = new ArrayList<File>();, +		String pkgName = cls.getPackage().getName();, +		URL pkgResource = ClassLoader.getSystemClassLoader().getResource(pkgName.replace('.', '/'));, +		if (pkgResource != null) {, +			try {, +				String clsName = cls.getName();, +				File directory = new File(pkgResource.toURI());, +				String[] files = directory.list();, +				for (String file : files) {, +					String fullName = pkgName + "." + file;, +					if (fullName.startsWith(clsName)) {, +						list.add(new File(directory, file));, +			} catch (URISyntaxException e) {, +				fail(e.getMessage());, +		}, +		return list;, +				if (count == -1) {, +				}, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestInnerClass.java, +package jadx.tests.internal;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.junit.Assert.assertThat;, +, +public class TestInnerClass extends InternalJadxTest {, +, +	public static class TestCls {, +		public class Inner {, +			public class Inner2 {, +			}, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +		System.out.println(code);, +, +		assertThat(code, containsString("Inner"));, +		assertThat(code, containsString("Inner2"));, +		// assertThat(code, not(containsString("this$0")));, +		// assertThat(code, not(containsString("super()")));, +		// assertThat(code, not(containsString("/* synthetic */")));, +	}, +}]