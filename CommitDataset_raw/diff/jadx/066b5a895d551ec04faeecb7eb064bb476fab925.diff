[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +import jadx.core.utils.InstructionRemover;, +			InstructionRemover remover = new InstructionRemover(block.getInstructions());, +			for (InsnNode insn : block.getInstructions()) {, +					remover.add(insn);, +			remover.perform();, +		int assignCount = 0;, +				assignCount++;, +		return replaceCount == use.size() - assignCount;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +import jadx.core.utils.InstructionRemover;, +			InstructionRemover remover = new InstructionRemover(block.getInstructions());, +			for (InsnNode insn : block.getInstructions()) {, +					remover.add(insn);, +			remover.perform();, +		int assignCount = 0;, +				assignCount++;, +		return replaceCount == use.size() - assignCount;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessReturnInsns.java, +import jadx.core.dex.regions.IfRegion;, +import jadx.core.dex.regions.SwitchRegion;, +			// ignore paths on other branches, +			if (region instanceof IfRegion, +					|| region instanceof SwitchRegion) {, +				curContainer = region;, +				continue;, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +import jadx.core.utils.InstructionRemover;, +			InstructionRemover remover = new InstructionRemover(block.getInstructions());, +			for (InsnNode insn : block.getInstructions()) {, +					remover.add(insn);, +			remover.perform();, +		int assignCount = 0;, +				assignCount++;, +		return replaceCount == use.size() - assignCount;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessReturnInsns.java, +import jadx.core.dex.regions.IfRegion;, +import jadx.core.dex.regions.SwitchRegion;, +			// ignore paths on other branches, +			if (region instanceof IfRegion, +					|| region instanceof SwitchRegion) {, +				curContainer = region;, +				continue;, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		if (elseBlock != null && stack.containsExit(elseBlock)) {, +		IfInfo info = new IfInfo();, +		info.setIfnode(block);, +		info.setCondition(IfCondition.fromIfBlock(block));, +		info.setThenBlock(bThen);, +		info.setElseBlock(bElse);, +		return mergeNestedIfNodes(info, merged);, +	}, +, +	private IfInfo mergeNestedIfNodes(IfInfo info, List<BlockNode> merged) {, +		BlockNode bThen = info.getThenBlock();, +		BlockNode bElse = info.getElseBlock();, +		BlockNode ifBlock = info.getIfnode();, +		BlockNode nestedIfBlock = getNextIfBlock(ifBlock);, +		if (nestedIfBlock == null) {, +			return null;, +		}, +, +		IfCondition nestedCondition = IfCondition.fromIfNode(nestedIfInsn);, +		IfCondition condition = info.getCondition();, +					return null;, +					return null;, +		nestedIfBlock.getAttributes().add(AttributeFlag.SKIP);, +		BlockNode blockToNestedIfBlock = BlockUtils.getNextBlockToPath(ifBlock, nestedIfBlock);, +		skipSimplePath(BlockUtils.selectOther(blockToNestedIfBlock, ifBlock.getCleanSuccessors()));, +		IfInfo result = new IfInfo();, +		result.setCondition(condition);, +		// search next nested if block, +		IfInfo next = mergeNestedIfNodes(result, merged);, +		if (next != null) {, +			return next;, +	private BlockNode getNextIfBlock(BlockNode block) {, +		for (BlockNode succ : block.getSuccessors()) {, +			BlockNode nestedIfBlock = getIfNode(succ);, +			if (nestedIfBlock != null && nestedIfBlock != block) {, +				return nestedIfBlock;, +			}, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +import jadx.core.utils.InstructionRemover;, +			InstructionRemover remover = new InstructionRemover(block.getInstructions());, +			for (InsnNode insn : block.getInstructions()) {, +					remover.add(insn);, +			remover.perform();, +		int assignCount = 0;, +				assignCount++;, +		return replaceCount == use.size() - assignCount;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessReturnInsns.java, +import jadx.core.dex.regions.IfRegion;, +import jadx.core.dex.regions.SwitchRegion;, +			// ignore paths on other branches]