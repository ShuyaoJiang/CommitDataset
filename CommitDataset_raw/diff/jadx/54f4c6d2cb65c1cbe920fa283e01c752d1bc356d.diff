[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +		} else if (arg.isInsnWrap()) {, +		} else if (arg.isNamed()) {, +			return ((NamedArg) arg).getName();, +		} else {, +			throw new CodegenException("Unknown arg type " + arg);, +					code.add("monitor-exit(").add(arg(insn, 0)).add(')');, +					code.add(arg(insn, 0));, +				code.add(arg(insn, 0));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +		} else if (arg.isInsnWrap()) {, +		} else if (arg.isNamed()) {, +			return ((NamedArg) arg).getName();, +		} else {, +			throw new CodegenException("Unknown arg type " + arg);, +					code.add("monitor-exit(").add(arg(insn, 0)).add(')');, +					code.add(arg(insn, 0));, +				code.add(arg(insn, 0));, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +	 * @param arg register variable, +		if (varNames.add(name) || fallback), +	public String assignNamedArg(NamedArg arg) {, +		String name = arg.getName();, +		if (varNames.add(name) || fallback), +			return name;, +, +		name = getUniqVarName(name);, +		arg.setName(name);, +		return name;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +		} else if (arg.isInsnWrap()) {, +		} else if (arg.isNamed()) {, +			return ((NamedArg) arg).getName();, +		} else {, +			throw new CodegenException("Unknown arg type " + arg);, +					code.add("monitor-exit(").add(arg(insn, 0)).add(')');, +					code.add(arg(insn, 0));, +				code.add(arg(insn, 0));, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +	 * @param arg register variable, +		if (varNames.add(name) || fallback), +	public String assignNamedArg(NamedArg arg) {, +		String name = arg.getName();, +		if (varNames.add(name) || fallback), +			return name;, +, +		name = getUniqVarName(name);, +		arg.setName(name);, +		return name;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			code.add(mgen.assignNamedArg(handler.getArg()));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +		} else if (arg.isInsnWrap()) {, +		} else if (arg.isNamed()) {, +			return ((NamedArg) arg).getName();, +		} else {, +			throw new CodegenException("Unknown arg type " + arg);, +					code.add("monitor-exit(").add(arg(insn, 0)).add(')');, +					code.add(arg(insn, 0));, +				code.add(arg(insn, 0));, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +	 * @param arg register variable, +		if (varNames.add(name) || fallback), +	public String assignNamedArg(NamedArg arg) {, +		String name = arg.getName();, +		if (varNames.add(name) || fallback), +			return name;, +, +		name = getUniqVarName(name);, +		arg.setName(name);, +		return name;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +			code.add(mgen.assignNamedArg(handler.getArg()));, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/BlockRegState.java, +		regType.use(arg);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +		} else if (arg.isInsnWrap()) {, +		} else if (arg.isNamed()) {, +			return ((NamedArg) arg).getName();, +		} else {, +			throw new CodegenException("Unknown arg type " + arg);, +					code.add("monitor-exit(").add(arg(insn, 0)).add(')');, +					code.add(arg(insn, 0));, +				code.add(arg(insn, 0));, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.instructions.args.NamedArg;]