[+++ b/jadx-core/src/main/java/jadx/core/xmlgen/ParserStream.java, +import java.io.EOFException;, +	public void readFully(byte[] b) throws IOException {, +		readFully(b, 0, b.length);, +	}, +, +	public void readFully(byte[] b, int off, int len) throws IOException {, +		readPos += len;, +		if (len < 0), +			throw new IndexOutOfBoundsException();, +		int n = 0;, +		while (n < len) {, +			int count = input.read(b, off + n, len - n);, +			if (count < 0), +				throw new EOFException();, +			n += count;, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ParserStream.java, +import java.io.EOFException;, +	public void readFully(byte[] b) throws IOException {, +		readFully(b, 0, b.length);, +	}, +, +	public void readFully(byte[] b, int off, int len) throws IOException {, +		readPos += len;, +		if (len < 0), +			throw new IndexOutOfBoundsException();, +		int n = 0;, +		while (n < len) {, +			int count = input.read(b, off + n, len - n);, +			if (count < 0), +				throw new EOFException();, +			n += count;, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/ResTableParser.java, +import java.math.BigInteger;, +	private static final int KNOWN_CONFIG_BYTES = 56;, +, +		if (config.isInvalid) {, +			String typeName = pkg.getTypeStrings()[id - 1];, +			LOG.warn("Invalid config flags detected: " + typeName + config.getQualifiers());, +		}, +, +		int read = 28;, +		if (size < 28) {, +			throw new IOException("Config size < 28");, +		}, +		boolean isInvalid = false;, +		short mcc = (short) is.readInt16();, +		short mnc = (short) is.readInt16();, +		char[] language = unpackLocaleOrRegion((byte) is.readInt8(), (byte) is.readInt8(), 'a');, +		char[] country = unpackLocaleOrRegion((byte) is.readInt8(), (byte) is.readInt8(), '0');, +, +		byte orientation = (byte) is.readInt8();, +		byte touchscreen = (byte) is.readInt8();, +, +		byte keyboard = (byte) is.readInt8();, +		byte navigation = (byte) is.readInt8();, +		byte inputFlags = (byte) is.readInt8();, +		/* inputPad0 */is.readInt8();, +, +		short screenWidth = (short) is.readInt16();, +		short screenHeight = (short) is.readInt16();, +, +		short sdkVersion = (short) is.readInt16();, +		/* minorVersion, now must always be 0 */is.readInt16();, +, +		byte screenLayout = 0;, +		byte uiMode = 0;, +		short smallestScreenWidthDp = 0;, +		if (size >= 32) {, +			screenLayout = (byte) is.readInt8();, +			uiMode = (byte) is.readInt8();, +			smallestScreenWidthDp = (short) is.readInt16();, +			read = 32;, +		short screenWidthDp = 0;, +		short screenHeightDp = 0;, +		if (size >= 36) {, +			screenWidthDp = (short) is.readInt16();, +			screenHeightDp = (short) is.readInt16();, +			read = 36;, +		char[] localeScript = null;, +		char[] localeVariant = null;, +		if (size >= 48) {, +			localeScript = readScriptOrVariantChar(4).toCharArray();, +			localeVariant = readScriptOrVariantChar(8).toCharArray();, +			read = 48;, +		byte screenLayout2 = 0;, +		byte colorMode = 0;, +		if (size >= 52) {, +			screenLayout2 = (byte) is.readInt8();, +			colorMode = (byte) is.readInt8();, +			is.readInt16(); // reserved padding, +			read = 52;, +		if (size >= 56) {, +			is.readInt32();]