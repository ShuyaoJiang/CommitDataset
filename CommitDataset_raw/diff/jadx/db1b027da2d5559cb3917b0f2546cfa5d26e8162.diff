[+++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.Consts;, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.utils.Utils;, +		if (Consts.DEBUG) {, +			code.add(mth.isVirtual() ? "/* virtual */ " : "/* direct */ ");, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.Consts;, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.utils.Utils;, +		if (Consts.DEBUG) {, +			code.add(mth.isVirtual() ? "/* virtual */ " : "/* direct */ ");, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +import com.android.dx.rop.code.AccessFlags;, +, +		runAfter = {, +				ModVisitor.class,, +				FixAccessModifiers.class, +		}, +				AccessInfo wrappedAccFlags = wrappedMth.getAccessFlags();, +				if (wrappedAccFlags.isStatic()) {, +					return false;, +				}, +				if (!wrappedAccFlags.isPublic()) {, +					// must be public, +					FixAccessModifiers.changeVisibility(wrappedMth, AccessFlags.ACC_PUBLIC);, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.Consts;, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.utils.Utils;, +		if (Consts.DEBUG) {, +			code.add(mth.isVirtual() ? "/* virtual */ " : "/* direct */ ");, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +import com.android.dx.rop.code.AccessFlags;, +, +		runAfter = {, +				ModVisitor.class,, +				FixAccessModifiers.class, +		}, +				AccessInfo wrappedAccFlags = wrappedMth.getAccessFlags();, +				if (wrappedAccFlags.isStatic()) {, +					return false;, +				}, +				if (!wrappedAccFlags.isPublic()) {, +					// must be public, +					FixAccessModifiers.changeVisibility(wrappedMth, AccessFlags.ACC_PUBLIC);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/FixAccessModifiers.java, +		int newVisFlag = fixVisibility(mth);, +			changeVisibility(mth, newVisFlag);, +	public static void changeVisibility(MethodNode mth, int newVisFlag) {, +		AccessInfo accessFlags = mth.getAccessFlags();, +		AccessInfo newAccFlags = accessFlags.changeVisibility(newVisFlag);, +		if (newAccFlags != accessFlags) {, +			mth.setAccFlags(newAccFlags);, +			mth.addAttr(AType.COMMENTS, "access modifiers changed from: " + accessFlags.rawString());, +		}, +	}, +, +	private static int fixVisibility(MethodNode mth) {, +			AccessInfo accessFlags = mth.getAccessFlags();, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.Consts;, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.utils.Utils;, +		if (Consts.DEBUG) {, +			code.add(mth.isVirtual() ? "/* virtual */ " : "/* direct */ ");, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +import com.android.dx.rop.code.AccessFlags;, +, +		runAfter = {, +				ModVisitor.class,, +				FixAccessModifiers.class, +		}, +				AccessInfo wrappedAccFlags = wrappedMth.getAccessFlags();, +				if (wrappedAccFlags.isStatic()) {, +					return false;, +				}, +				if (!wrappedAccFlags.isPublic()) {, +					// must be public, +					FixAccessModifiers.changeVisibility(wrappedMth, AccessFlags.ACC_PUBLIC);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/FixAccessModifiers.java, +		int newVisFlag = fixVisibility(mth);, +			changeVisibility(mth, newVisFlag);, +	public static void changeVisibility(MethodNode mth, int newVisFlag) {, +		AccessInfo accessFlags = mth.getAccessFlags();, +		AccessInfo newAccFlags = accessFlags.changeVisibility(newVisFlag);, +		if (newAccFlags != accessFlags) {, +			mth.setAccFlags(newAccFlags);, +			mth.addAttr(AType.COMMENTS, "access modifiers changed from: " + accessFlags.rawString());, +		}, +	}, +, +	private static int fixVisibility(MethodNode mth) {, +			AccessInfo accessFlags = mth.getAccessFlags();, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestInner2Samples.java, +package jadx.tests.integration.inner;]