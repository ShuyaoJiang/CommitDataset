[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add(arg(insn, 0)).add('[').add(arg(insn.getArg(1), false)).add("] = ").add(arg(insn.getArg(2), false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add(arg(insn, 0)).add('[').add(arg(insn.getArg(1), false)).add("] = ").add(arg(insn.getArg(2), false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +				String mode = condition.getMode() == IfCondition.Mode.AND ? " && " : " || ";, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add(arg(insn, 0)).add('[').add(arg(insn.getArg(1), false)).add("] = ").add(arg(insn.getArg(2), false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +				String mode = condition.getMode() == IfCondition.Mode.AND ? " && " : " || ";, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/IfCondition.java, +import java.util.ArrayList;, +	public static IfCondition merge(Mode mode, IfCondition a, IfCondition b) {, +		if (a.getMode() == mode) {, +			IfCondition n = new IfCondition(a);, +			n.addArg(b);, +			return n;, +		} else if (b.getMode() == mode) {, +			IfCondition n = new IfCondition(b);, +			n.addArg(a);, +			return n;, +		} else {, +			return new IfCondition(mode, Arrays.asList(a, b));, +	public static enum Mode {, +	private final Mode mode;, +		this.mode = Mode.COMPARE;, +	private IfCondition(Mode mode, List<IfCondition> args) {, +	private IfCondition(IfCondition c) {, +		this.mode = c.mode;, +		this.compare = c.compare;, +		this.args = new ArrayList<IfCondition>(c.args);, +	}, +, +	public Mode getMode() {, +	public void addArg(IfCondition c) {, +		args.add(c);, +	}, +, +		return mode == Mode.COMPARE;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add(arg(insn, 0)).add('[').add(arg(insn.getArg(1), false)).add("] = ").add(arg(insn.getArg(2), false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +				String mode = condition.getMode() == IfCondition.Mode.AND ? " && " : " || ";, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/IfCondition.java, +import java.util.ArrayList;, +	public static IfCondition merge(Mode mode, IfCondition a, IfCondition b) {, +		if (a.getMode() == mode) {, +			IfCondition n = new IfCondition(a);, +			n.addArg(b);, +			return n;, +		} else if (b.getMode() == mode) {, +			IfCondition n = new IfCondition(b);, +			n.addArg(a);, +			return n;, +		} else {, +			return new IfCondition(mode, Arrays.asList(a, b));, +	public static enum Mode {, +	private final Mode mode;, +		this.mode = Mode.COMPARE;, +	private IfCondition(Mode mode, List<IfCondition> args) {, +	private IfCondition(IfCondition c) {, +		this.mode = c.mode;, +		this.compare = c.compare;, +		this.args = new ArrayList<IfCondition>(c.args);, +	}, +, +	public Mode getMode() {, +	public void addArg(IfCondition c) {, +		args.add(c);, +	}, +, +		return mode == Mode.COMPARE;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +import static jadx.core.dex.regions.IfCondition.Mode;, +					IfCondition nestedCondition = IfCondition.fromIfNode(nestedIfInsn);, +						condition = IfCondition.merge(Mode.OR, ifRegion.getCondition(), nestedCondition);, +						condition = IfCondition.merge(Mode.AND, ifRegion.getCondition(), nestedCondition);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add(arg(insn, 0)).add('[').add(arg(insn.getArg(1), false)).add("] = ").add(arg(insn.getArg(2), false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +				String mode = condition.getMode() == IfCondition.Mode.AND ? " && " : " || ";, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/IfCondition.java, +import java.util.ArrayList;, +	public static IfCondition merge(Mode mode, IfCondition a, IfCondition b) {, +		if (a.getMode() == mode) {, +			IfCondition n = new IfCondition(a);, +			n.addArg(b);, +			return n;, +		} else if (b.getMode() == mode) {, +			IfCondition n = new IfCondition(b);, +			n.addArg(a);, +			return n;, +		} else {, +			return new IfCondition(mode, Arrays.asList(a, b));, +	public static enum Mode {, +	private final Mode mode;, +		this.mode = Mode.COMPARE;, +	private IfCondition(Mode mode, List<IfCondition> args) {, +	private IfCondition(IfCondition c) {, +		this.mode = c.mode;]