[+++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(visitor, cls);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(visitor, cls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(new FallbackModeVisitor(), mth);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(visitor, cls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(new FallbackModeVisitor(), mth);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DepthTraversal.java, +package jadx.core.dex.visitors;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.utils.ErrorsCounter;, +, +public class DepthTraversal {, +, +	public static void visit(IDexTreeVisitor visitor, ClassNode cls) {, +		try {, +			if (visitor.visit(cls)) {, +				for (ClassNode inCls : cls.getInnerClasses()) {, +					visit(visitor, inCls);, +				}, +				for (MethodNode mth : cls.getMethods()) {, +					visit(visitor, mth);, +				}, +			}, +		} catch (Throwable e) {, +			ErrorsCounter.classError(cls,, +					e.getClass().getSimpleName() + " in pass: " + visitor.getClass().getSimpleName(), e);, +		}, +	}, +, +	public static void visit(IDexTreeVisitor visitor, MethodNode mth) {, +		try {, +			visitor.visit(mth);, +		} catch (Throwable e) {, +			ErrorsCounter.methodError(mth,, +					e.getClass().getSimpleName() + " in pass: " + visitor.getClass().getSimpleName(), e);, +		}, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(visitor, cls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(new FallbackModeVisitor(), mth);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DepthTraversal.java, +package jadx.core.dex.visitors;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.utils.ErrorsCounter;, +, +public class DepthTraversal {, +, +	public static void visit(IDexTreeVisitor visitor, ClassNode cls) {, +		try {, +			if (visitor.visit(cls)) {, +				for (ClassNode inCls : cls.getInnerClasses()) {, +					visit(visitor, inCls);, +				}, +				for (MethodNode mth : cls.getMethods()) {, +					visit(visitor, mth);, +				}, +			}, +		} catch (Throwable e) {, +			ErrorsCounter.classError(cls,, +					e.getClass().getSimpleName() + " in pass: " + visitor.getClass().getSimpleName(), e);, +		}, +	}, +, +	public static void visit(IDexTreeVisitor visitor, MethodNode mth) {, +		try {, +			visitor.visit(mth);, +		} catch (Throwable e) {, +			ErrorsCounter.methodError(mth,, +					e.getClass().getSimpleName() + " in pass: " + visitor.getClass().getSimpleName(), e);, +		}, +	}, +}, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(visitor, cls);, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.visitors.DepthTraversal;, +				DepthTraversal.visit(new FallbackModeVisitor(), mth);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DepthTraversal.java, +package jadx.core.dex.visitors;, +, +import jadx.core.dex.nodes.ClassNode;]