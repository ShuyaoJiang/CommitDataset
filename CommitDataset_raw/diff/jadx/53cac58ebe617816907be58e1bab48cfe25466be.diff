[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			if (source.contains(AType.CATCH_BLOCK), +					&& source.getSuccessors().size() == 2) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			if (source.contains(AType.CATCH_BLOCK), +					&& source.getSuccessors().size() == 2) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/SSATransform.java, +import jadx.core.dex.attributes.AFlag;, +		fixLastTryCatchAssign(mth);, +		if (removeUselessPhi(mth)) {, +			renameVariables(mth);, +		}, +, +	private static void fixLastTryCatchAssign(MethodNode mth) {, +		for (BlockNode block : mth.getBasicBlocks()) {, +			PhiListAttr phiList = block.get(AType.PHI_LIST);, +			if (phiList == null || !block.contains(AType.EXC_HANDLER)) {, +				continue;, +			}, +			for (PhiInsn phi : phiList.getList()) {, +				for (int i = 0; i < phi.getArgsCount(); i++) {, +					RegisterArg arg = phi.getArg(i);, +					InsnNode parentInsn = arg.getAssignInsn();, +					if (parentInsn != null, +							&& parentInsn.getResult() != null, +							&& parentInsn.contains(AFlag.TRY_LEAVE)) {, +						phi.removeArg(arg);, +					}, +				}, +			}, +		}, +	}, +, +	private static boolean removeUselessPhi(MethodNode mth) {, +		return removePhiList(mth, insnToRemove);, +	private static boolean removePhiList(MethodNode mth, List<PhiInsn> insnToRemove) {, +			return false;, +		return true;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			if (source.contains(AType.CATCH_BLOCK), +					&& source.getSuccessors().size() == 2) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/SSATransform.java, +import jadx.core.dex.attributes.AFlag;, +		fixLastTryCatchAssign(mth);, +		if (removeUselessPhi(mth)) {, +			renameVariables(mth);, +		}, +, +	private static void fixLastTryCatchAssign(MethodNode mth) {, +		for (BlockNode block : mth.getBasicBlocks()) {, +			PhiListAttr phiList = block.get(AType.PHI_LIST);, +			if (phiList == null || !block.contains(AType.EXC_HANDLER)) {, +				continue;, +			}, +			for (PhiInsn phi : phiList.getList()) {, +				for (int i = 0; i < phi.getArgsCount(); i++) {, +					RegisterArg arg = phi.getArg(i);, +					InsnNode parentInsn = arg.getAssignInsn();, +					if (parentInsn != null, +							&& parentInsn.getResult() != null, +							&& parentInsn.contains(AFlag.TRY_LEAVE)) {, +						phi.removeArg(arg);, +					}, +				}, +			}, +		}, +	}, +, +	private static boolean removeUselessPhi(MethodNode mth) {, +		return removePhiList(mth, insnToRemove);, +	private static boolean removePhiList(MethodNode mth, List<PhiInsn> insnToRemove) {, +			return false;, +		return true;, +++ b/jadx-core/src/test/java/jadx/tests/integration/loops/TestNestedLoops3.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			if (source.contains(AType.CATCH_BLOCK), +					&& source.getSuccessors().size() == 2) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/SSATransform.java, +import jadx.core.dex.attributes.AFlag;, +		fixLastTryCatchAssign(mth);, +		if (removeUselessPhi(mth)) {, +			renameVariables(mth);, +		}, +, +	private static void fixLastTryCatchAssign(MethodNode mth) {, +		for (BlockNode block : mth.getBasicBlocks()) {, +			PhiListAttr phiList = block.get(AType.PHI_LIST);, +			if (phiList == null || !block.contains(AType.EXC_HANDLER)) {, +				continue;, +			}, +			for (PhiInsn phi : phiList.getList()) {, +				for (int i = 0; i < phi.getArgsCount(); i++) {, +					RegisterArg arg = phi.getArg(i);, +					InsnNode parentInsn = arg.getAssignInsn();, +					if (parentInsn != null, +							&& parentInsn.getResult() != null, +							&& parentInsn.contains(AFlag.TRY_LEAVE)) {, +						phi.removeArg(arg);, +					}, +				}]