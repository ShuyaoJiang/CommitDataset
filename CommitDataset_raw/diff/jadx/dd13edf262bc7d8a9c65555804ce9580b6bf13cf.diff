[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +		// remove public empty constructors (static or default), +				&& mth.getArguments(false).isEmpty()) {, +				if (af.isStatic() && mth.getMethodInfo().isClassInit()) {, +					mth.add(AFlag.DONT_GENERATE);, +				} else {, +					// don't remove default constructor if other constructors exists, +					if (mth.isDefaultConstructor() && !isNonDefaultConstructorExists(mth)) {, +	}, +, +	private static boolean isNonDefaultConstructorExists(MethodNode defCtor) {, +		ClassNode parentClass = defCtor.getParentClass();, +		for (MethodNode mth : parentClass.getMethods()) {, +			if (mth != defCtor, +					&& mth.getAccessFlags().isConstructor(), +					&& mth.getMethodInfo().isConstructor(), +					&& !mth.isDefaultConstructor()) {, +				return true;, +			}, +		}, +		return false;, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +		// remove public empty constructors (static or default), +				&& mth.getArguments(false).isEmpty()) {, +				if (af.isStatic() && mth.getMethodInfo().isClassInit()) {, +					mth.add(AFlag.DONT_GENERATE);, +				} else {, +					// don't remove default constructor if other constructors exists, +					if (mth.isDefaultConstructor() && !isNonDefaultConstructorExists(mth)) {, +	}, +, +	private static boolean isNonDefaultConstructorExists(MethodNode defCtor) {, +		ClassNode parentClass = defCtor.getParentClass();, +		for (MethodNode mth : parentClass.getMethods()) {, +			if (mth != defCtor, +					&& mth.getAccessFlags().isConstructor(), +					&& mth.getMethodInfo().isConstructor(), +					&& !mth.isDefaultConstructor()) {, +				return true;, +			}, +		}, +		return false;, +	}, +}, +++ b/jadx-core/src/test/java/jadx/tests/integration/others/TestDefConstructorNotRemoved.java, +package jadx.tests.integration.others;, +, +import org.junit.Test;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.not;, +import static org.junit.Assert.assertThat;, +, +public class TestDefConstructorNotRemoved extends IntegrationTest {, +, +	public static class TestCls {, +, +		static {, +			// empty, +		}, +, +		public static class A {, +			private final String s;, +, +			public A() {, +				s = "a";, +			}, +, +			public A(String str) {, +				s = str;, +			}, +		}, +, +		public static class B extends A {, +			public B() {, +				super();, +			}, +, +			public B(String s) {, +				super(s);, +			}, +		}, +, +		public void check() {, +			new A();, +			new A("a");, +			new B();, +			new B("b");, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);]