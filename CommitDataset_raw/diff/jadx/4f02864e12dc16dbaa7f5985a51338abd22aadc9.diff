[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			if (args.isCfgOutput()) {, +				passes.add(DotGraphVisitor.dumpRegions());, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			if (args.isCfgOutput()) {, +				passes.add(DotGraphVisitor.dumpRegions());, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, null));, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			if (args.isCfgOutput()) {, +				passes.add(DotGraphVisitor.dumpRegions());, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, null));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (els.contains(AFlag.ELSE_IF_CHAIN) && els instanceof Region) {, +			if (subBlocks.size() == 1) {, +				IContainer elseBlock = subBlocks.get(0);, +				if (elseBlock instanceof IfRegion) {, +					declareVars(code, elseBlock);, +					makeIf((IfRegion) elseBlock, code, false);, +			}, +		}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			if (args.isCfgOutput()) {, +				passes.add(DotGraphVisitor.dumpRegions());, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, null));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (els.contains(AFlag.ELSE_IF_CHAIN) && els instanceof Region) {, +			if (subBlocks.size() == 1) {, +				IContainer elseBlock = subBlocks.get(0);, +				if (elseBlock instanceof IfRegion) {, +					declareVars(code, elseBlock);, +					makeIf((IfRegion) elseBlock, code, false);, +			}, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IRegion.java, +	void setParent(IRegion parent);, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			if (args.isCfgOutput()) {, +				passes.add(DotGraphVisitor.dumpRegions());, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, null));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (els.contains(AFlag.ELSE_IF_CHAIN) && els instanceof Region) {, +			if (subBlocks.size() == 1) {, +				IContainer elseBlock = subBlocks.get(0);, +				if (elseBlock instanceof IfRegion) {, +					declareVars(code, elseBlock);, +					makeIf((IfRegion) elseBlock, code, false);, +			}, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IRegion.java, +	void setParent(IRegion parent);, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/AbstractRegion.java, +	@Override, +, +	public void updateParent(IContainer container, IRegion newParent) {, +		if (container instanceof IRegion) {, +			((IRegion) container).setParent(newParent);, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			if (args.isCfgOutput()) {, +				passes.add(DotGraphVisitor.dumpRegions());, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, null));, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		if (els.contains(AFlag.ELSE_IF_CHAIN) && els instanceof Region) {, +			if (subBlocks.size() == 1) {, +				IContainer elseBlock = subBlocks.get(0);, +				if (elseBlock instanceof IfRegion) {, +					declareVars(code, elseBlock);, +					makeIf((IfRegion) elseBlock, code, false);, +			}, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IRegion.java, +	void setParent(IRegion parent);, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/AbstractRegion.java, +	@Override, +, +	public void updateParent(IContainer container, IRegion newParent) {, +		if (container instanceof IRegion) {, +			((IRegion) container).setParent(newParent);, +		}]