[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ExtractFieldInit;, +			passes.add(new ExtractFieldInit());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ExtractFieldInit;, +			passes.add(new ExtractFieldInit());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.nodes.InsnNode;, +import jadx.core.dex.nodes.parser.FieldInitAttr;, +import jadx.core.dex.nodes.parser.FieldInitAttr.InitType;, +			FieldInitAttr fv = f.get(AType.FIELD_INIT);, +					if (fv.getValueType() == InitType.CONST) {, +					} else if (fv.getValueType() == InitType.INSN) {, +						InsnGen insnGen = makeInsnGen(fv.getInsnMth());, +						addInsnBody(insnGen, code, fv.getInsn());, +					}, +					igen = makeInsnGen(enumFields.getStaticMethod());, +	private InsnGen makeInsnGen(MethodNode mth) {, +		MethodGen mthGen = new MethodGen(this, mth);, +		return new InsnGen(mthGen, false);, +	}, +, +	private void addInsnBody(InsnGen insnGen, CodeWriter code, InsnNode insn) {, +		try {, +			insnGen.makeInsn(insn, code, InsnGen.Flags.BODY_ONLY_NOWRAP);, +		} catch (Exception e) {, +			ErrorsCounter.classError(cls, "Failed to generate init code", e);, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ExtractFieldInit;, +			passes.add(new ExtractFieldInit());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.nodes.InsnNode;, +import jadx.core.dex.nodes.parser.FieldInitAttr;, +import jadx.core.dex.nodes.parser.FieldInitAttr.InitType;, +			FieldInitAttr fv = f.get(AType.FIELD_INIT);, +					if (fv.getValueType() == InitType.CONST) {, +					} else if (fv.getValueType() == InitType.INSN) {, +						InsnGen insnGen = makeInsnGen(fv.getInsnMth());, +						addInsnBody(insnGen, code, fv.getInsn());, +					}, +					igen = makeInsnGen(enumFields.getStaticMethod());, +	private InsnGen makeInsnGen(MethodNode mth) {, +		MethodGen mthGen = new MethodGen(this, mth);, +		return new InsnGen(mthGen, false);, +	}, +, +	private void addInsnBody(InsnGen insnGen, CodeWriter code, InsnNode insn) {, +		try {, +			insnGen.makeInsn(insn, code, InsnGen.Flags.BODY_ONLY_NOWRAP);, +		} catch (Exception e) {, +			ErrorsCounter.classError(cls, "Failed to generate init code", e);, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.parser.FieldInitAttr;, +						FieldInitAttr valueAttr = fn.get(AType.FIELD_INIT);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ExtractFieldInit;, +			passes.add(new ExtractFieldInit());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.nodes.InsnNode;, +import jadx.core.dex.nodes.parser.FieldInitAttr;, +import jadx.core.dex.nodes.parser.FieldInitAttr.InitType;, +			FieldInitAttr fv = f.get(AType.FIELD_INIT);, +					if (fv.getValueType() == InitType.CONST) {, +					} else if (fv.getValueType() == InitType.INSN) {, +						InsnGen insnGen = makeInsnGen(fv.getInsnMth());, +						addInsnBody(insnGen, code, fv.getInsn());, +					}, +					igen = makeInsnGen(enumFields.getStaticMethod());, +	private InsnGen makeInsnGen(MethodNode mth) {, +		MethodGen mthGen = new MethodGen(this, mth);, +		return new InsnGen(mthGen, false);, +	}, +, +	private void addInsnBody(InsnGen insnGen, CodeWriter code, InsnNode insn) {, +		try {, +			insnGen.makeInsn(insn, code, InsnGen.Flags.BODY_ONLY_NOWRAP);, +		} catch (Exception e) {, +			ErrorsCounter.classError(cls, "Failed to generate init code", e);, +		}, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.nodes.parser.FieldInitAttr;, +						FieldInitAttr valueAttr = fn.get(AType.FIELD_INIT);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +import jadx.core.dex.nodes.parser.FieldInitAttr;, +	public static final AType<FieldInitAttr> FIELD_INIT = new AType<FieldInitAttr>();, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ExtractFieldInit;, +			passes.add(new ExtractFieldInit());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.nodes.InsnNode;, +import jadx.core.dex.nodes.parser.FieldInitAttr;, +import jadx.core.dex.nodes.parser.FieldInitAttr.InitType;]