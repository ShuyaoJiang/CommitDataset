[+++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.instructions.IndexInsnNode;, +			List<Object> keys = sw.getKeys().get(i);, +			for (Object k : keys) {, +				if (k instanceof IndexInsnNode) {, +					code.add(sfield((FieldInfo) ((IndexInsnNode) k).getIndex()));, +				}, +				else {, +					code.add(TypeGen.literalToString((Integer) k, arg.getType()));, +				}, +	private String sfield(FieldInfo field) {, +		String thisClass = mth.getParentClass().getFullName();, +		if (field.getDeclClass().getFullName().equals(thisClass)) {, +			return field.getName();, +		} else {, +			return useClass(field.getDeclClass()) + '.' + field.getName();, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.instructions.IndexInsnNode;, +			List<Object> keys = sw.getKeys().get(i);, +			for (Object k : keys) {, +				if (k instanceof IndexInsnNode) {, +					code.add(sfield((FieldInfo) ((IndexInsnNode) k).getIndex()));, +				}, +				else {, +					code.add(TypeGen.literalToString((Integer) k, arg.getType()));, +				}, +	private String sfield(FieldInfo field) {, +		String thisClass = mth.getParentClass().getFullName();, +		if (field.getDeclClass().getFullName().equals(thisClass)) {, +			return field.getName();, +		} else {, +			return useClass(field.getDeclClass()) + '.' + field.getName();, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +		Object[] keys;, +			keys = new Object[targets.length];, +			keys = new Object[targets.length];, +			for (int i = 0; i < keys.length; i++), +				keys[i] = ss.getKeys()[i];				, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.instructions.IndexInsnNode;, +			List<Object> keys = sw.getKeys().get(i);, +			for (Object k : keys) {, +				if (k instanceof IndexInsnNode) {, +					code.add(sfield((FieldInfo) ((IndexInsnNode) k).getIndex()));, +				}, +				else {, +					code.add(TypeGen.literalToString((Integer) k, arg.getType()));, +				}, +	private String sfield(FieldInfo field) {, +		String thisClass = mth.getParentClass().getFullName();, +		if (field.getDeclClass().getFullName().equals(thisClass)) {, +			return field.getName();, +		} else {, +			return useClass(field.getDeclClass()) + '.' + field.getName();, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +		Object[] keys;, +			keys = new Object[targets.length];, +			keys = new Object[targets.length];, +			for (int i = 0; i < keys.length; i++), +				keys[i] = ss.getKeys()[i];				, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/SwitchNode.java, +	private final Object[] keys;, +	public SwitchNode(InsnArg arg, Object[] keys, int[] targets, int def) {, +	public Object[] getKeys() {, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.info.FieldInfo;, +import jadx.core.dex.instructions.IndexInsnNode;, +			List<Object> keys = sw.getKeys().get(i);, +			for (Object k : keys) {, +				if (k instanceof IndexInsnNode) {, +					code.add(sfield((FieldInfo) ((IndexInsnNode) k).getIndex()));, +				}, +				else {, +					code.add(TypeGen.literalToString((Integer) k, arg.getType()));, +				}, +	private String sfield(FieldInfo field) {, +		String thisClass = mth.getParentClass().getFullName();, +		if (field.getDeclClass().getFullName().equals(thisClass)) {, +			return field.getName();, +		} else {, +			return useClass(field.getDeclClass()) + '.' + field.getName();, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +		Object[] keys;, +			keys = new Object[targets.length];, +			keys = new Object[targets.length];, +			for (int i = 0; i < keys.length; i++), +				keys[i] = ss.getKeys()[i];				, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/SwitchNode.java, +	private final Object[] keys;]