[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) throws JadxException {, +		} catch (Throwable e) {, +			LOG.error("jadx error: " + e.getMessage(), e);, +		jadx.loadFiles(jadxArgs.getInput());, +		if (jadx.getErrorsCount() != 0) {, +			jadx.printErrorsReport();, +			LOG.error("finished with errors");, +		} else {, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) throws JadxException {, +		} catch (Throwable e) {, +			LOG.error("jadx error: " + e.getMessage(), e);, +		jadx.loadFiles(jadxArgs.getInput());, +		if (jadx.getErrorsCount() != 0) {, +			jadx.printErrorsReport();, +			LOG.error("finished with errors");, +		} else {, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import jadx.api.JadxDecompiler;, +		out.println("jadx - dex to java decompiler, version: " + JadxDecompiler.getVersion());, +	@Override, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) throws JadxException {, +		} catch (Throwable e) {, +			LOG.error("jadx error: " + e.getMessage(), e);, +		jadx.loadFiles(jadxArgs.getInput());, +		if (jadx.getErrorsCount() != 0) {, +			jadx.printErrorsReport();, +			LOG.error("finished with errors");, +		} else {, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import jadx.api.JadxDecompiler;, +		out.println("jadx - dex to java decompiler, version: " + JadxDecompiler.getVersion());, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +import java.io.File;, +, +	public File getOutDir() {, +		return new File("jadx-output");, +	}, +, +	@Override, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) throws JadxException {, +		} catch (Throwable e) {, +			LOG.error("jadx error: " + e.getMessage(), e);, +		jadx.loadFiles(jadxArgs.getInput());, +		if (jadx.getErrorsCount() != 0) {, +			jadx.printErrorsReport();, +			LOG.error("finished with errors");, +		} else {, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import jadx.api.JadxDecompiler;, +		out.println("jadx - dex to java decompiler, version: " + JadxDecompiler.getVersion());, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +import java.io.File;, +, +	public File getOutDir() {, +		return new File("jadx-output");, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +import java.io.File;, +, +	File getOutDir();, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) throws JadxException {, +		} catch (Throwable e) {, +			LOG.error("jadx error: " + e.getMessage(), e);, +		jadx.loadFiles(jadxArgs.getInput());, +		if (jadx.getErrorsCount() != 0) {, +			jadx.printErrorsReport();, +			LOG.error("finished with errors");, +		} else {, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import jadx.api.JadxDecompiler;, +		out.println("jadx - dex to java decompiler, version: " + JadxDecompiler.getVersion());, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +import java.io.File;, +, +	public File getOutDir() {, +		return new File("jadx-output");, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +import java.io.File;, +, +	File getOutDir();, +]