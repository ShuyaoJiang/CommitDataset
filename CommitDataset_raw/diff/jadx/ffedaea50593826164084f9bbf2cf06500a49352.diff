[+++ b/jadx-gui/src/main/java/jadx/gui/ui/HeapUsageBar.java, +import jadx.gui.utils.Utils;, +		if ((used + Utils.MIN_FREE_MEMORY) > r.maxMemory()) {, +++ b/jadx-gui/src/main/java/jadx/gui/ui/HeapUsageBar.java, +import jadx.gui.utils.Utils;, +		if ((used + Utils.MIN_FREE_MEMORY) > r.maxMemory()) {, +++ b/jadx-gui/src/main/java/jadx/gui/utils/Utils.java, +	/**, +	 * The minimum about of memory in bytes we are trying to keep free, otherwise the application may run out of heap, +	 * which ends up in a Java garbage collector running "amok" (CPU utilization 100% for each core and the UI is, +	 * not responsive)., +	 *, +	 * We can calculate and store this value here as the maximum heap is fixed for each JVM instance, +	 * and can't be changed at runtime., +	 */, +	public static final long MIN_FREE_MEMORY = calculateMinFreeMemory();, +, +	/**, +	 * @return 20% of the maximum heap size limited to 512 MB (bytes), +	 */, +	public static long calculateMinFreeMemory() {, +		Runtime runtime = Runtime.getRuntime();, +		long minFree = (long) (runtime.maxMemory() * 0.2);, +		minFree = Math.min(minFree, 512 * 1048576);, +		return minFree;, +	}, +, +		long totalFree = runtime.freeMemory() + (maxMemory - runtime.totalMemory());, +		return totalFree > MIN_FREE_MEMORY;]