[+++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +import java.util.stream.Collectors;, +	/**, +	 * Get the complete list of classes, +	 * @return, +	 */, +	/**, +	 * Get all classes that are not excluded by the excluded packages settings, +	 * @return, +	 */, +	public List<JavaClass> getIncludedClasses() {, +		List<JavaClass> classList = decompiler.getClasses();, +		String excludedPackages = settings.getExcludedPackages().trim();, +		if (excludedPackages.length() == 0), +			return classList;, +		String[] excluded = excludedPackages.split("[ ]+");, +, +		return classList.stream().filter(cls -> {, +			for (String exclude : excluded) {, +				if (cls.getFullName().startsWith(exclude)), +					return false;, +			}, +			return true;, +		}).collect(Collectors.toList());, +	}, +, +, +	public JadxSettings getSettings() {, +		return settings;, +	}, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +import java.util.stream.Collectors;, +	/**, +	 * Get the complete list of classes, +	 * @return, +	 */, +	/**, +	 * Get all classes that are not excluded by the excluded packages settings, +	 * @return, +	 */, +	public List<JavaClass> getIncludedClasses() {, +		List<JavaClass> classList = decompiler.getClasses();, +		String excludedPackages = settings.getExcludedPackages().trim();, +		if (excludedPackages.length() == 0), +			return classList;, +		String[] excluded = excludedPackages.split("[ ]+");, +, +		return classList.stream().filter(cls -> {, +			for (String exclude : excluded) {, +				if (cls.getFullName().startsWith(exclude)), +					return false;, +			}, +			return true;, +		}).collect(Collectors.toList());, +	}, +, +, +	public JadxSettings getSettings() {, +		return settings;, +	}, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +import jadx.gui.utils.NLS;, +				String msg = NLS.str("message.indexingClassesSkipped");, +				msg = String.format(msg, searchIndex.getSkippedCount());, +				JOptionPane.showMessageDialog(null, msg);, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +import java.util.stream.Collectors;, +	/**, +	 * Get the complete list of classes, +	 * @return, +	 */, +	/**, +	 * Get all classes that are not excluded by the excluded packages settings, +	 * @return, +	 */, +	public List<JavaClass> getIncludedClasses() {, +		List<JavaClass> classList = decompiler.getClasses();, +		String excludedPackages = settings.getExcludedPackages().trim();, +		if (excludedPackages.length() == 0), +			return classList;, +		String[] excluded = excludedPackages.split("[ ]+");, +, +		return classList.stream().filter(cls -> {, +			for (String exclude : excluded) {, +				if (cls.getFullName().startsWith(exclude)), +					return false;, +			}, +			return true;, +		}).collect(Collectors.toList());, +	}, +, +, +	public JadxSettings getSettings() {, +		return settings;, +	}, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +import jadx.gui.utils.NLS;, +				String msg = NLS.str("message.indexingClassesSkipped");, +				msg = String.format(msg, searchIndex.getSkippedCount());, +				JOptionPane.showMessageDialog(null, msg);]