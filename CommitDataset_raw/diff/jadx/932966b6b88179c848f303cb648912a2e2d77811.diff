[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				RegisterArg callArg = getCallMthArg(callMth, i - startArgNum);, +				if (callArg != null && callArg.contains(AFlag.SKIP_ARG)) {, +					continue;, +				}, +	private static RegisterArg getCallMthArg(@Nullable MethodNode callMth, int num) {, +		if (callMth == null) {, +			return null;, +		}, +		List<RegisterArg> args = callMth.getArguments(false);, +		if (args != null && num < args.size()) {, +			return args.get(num);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				RegisterArg callArg = getCallMthArg(callMth, i - startArgNum);, +				if (callArg != null && callArg.contains(AFlag.SKIP_ARG)) {, +					continue;, +				}, +	private static RegisterArg getCallMthArg(@Nullable MethodNode callMth, int num) {, +		if (callMth == null) {, +			return null;, +		}, +		List<RegisterArg> args = callMth.getArguments(false);, +		if (args != null && num < args.size()) {, +			return args.get(num);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +import jadx.core.dex.instructions.args.SSAVar;, +			// remove synthetic constructor for inner classes, +					List<RegisterArg> args = mth.getArguments(false);, +					if (constr.isThis() && !args.isEmpty()) {, +						// remove first arg for non-static class (references to outer class), +						if (args.get(0).getType().equals(cls.getParentClass().getClassInfo().getType())) {, +							args.get(0).add(AFlag.SKIP_ARG);, +						}, +						// remove unused args, +						for (RegisterArg arg : args) {, +							SSAVar sVar = arg.getSVar();, +							if (sVar != null && sVar.getUseCount() == 0) {, +								arg.add(AFlag.SKIP_ARG);, +							}, +						}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				RegisterArg callArg = getCallMthArg(callMth, i - startArgNum);, +				if (callArg != null && callArg.contains(AFlag.SKIP_ARG)) {, +					continue;, +				}, +	private static RegisterArg getCallMthArg(@Nullable MethodNode callMth, int num) {, +		if (callMth == null) {, +			return null;, +		}, +		List<RegisterArg> args = callMth.getArguments(false);, +		if (args != null && num < args.size()) {, +			return args.get(num);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +import jadx.core.dex.instructions.args.SSAVar;, +			// remove synthetic constructor for inner classes, +					List<RegisterArg> args = mth.getArguments(false);, +					if (constr.isThis() && !args.isEmpty()) {, +						// remove first arg for non-static class (references to outer class), +						if (args.get(0).getType().equals(cls.getParentClass().getClassInfo().getType())) {, +							args.get(0).add(AFlag.SKIP_ARG);, +						}, +						// remove unused args, +						for (RegisterArg arg : args) {, +							SSAVar sVar = arg.getSVar();, +							if (sVar != null && sVar.getUseCount() == 0) {, +								arg.add(AFlag.SKIP_ARG);, +							}, +						}, +++ b/jadx-core/src/test/java/jadx/tests/integration/invoke/TestInvoke1.java, +package jadx.tests.integration.invoke;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import java.io.IOException;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestInvoke1 extends IntegrationTest {, +, +	public static class TestCls {, +, +		private A is;, +, +		private C test(int start) throws IOException {]