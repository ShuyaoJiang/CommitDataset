[+++ b/.gitignore, +.attach_pid*, +++ b/.gitignore, +.attach_pid*, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		if (mth.getMethodInfo().isRenamed() && !ai.isConstructor()) {, +		if (ai.isConstructor()) {, +++ b/.gitignore, +.attach_pid*, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		if (mth.getMethodInfo().isRenamed() && !ai.isConstructor()) {, +		if (ai.isConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +						mth.setAlias(String.format("mo%d%s", id, prepareNamePart(mth.getName())));, +			alias = String.format("C%04d%s", clsIndex++, prepareNamePart(clsName));, +		String alias = String.format("f%d%s", fldIndex++, prepareNamePart(field.getName()));, +		String alias = String.format("m%d%s", mthIndex++, prepareNamePart(mth.getName()));, +			String pkgAlias = String.format("p%03d%s", pkgIndex++, prepareNamePart(pkgName));, +		int len = s.length();, +		return len < minLength || len > maxLength, +				|| !NameMapper.isValidIdentifier(s);, +	private String prepareNamePart(String name) {, +++ b/.gitignore, +.attach_pid*, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		if (mth.getMethodInfo().isRenamed() && !ai.isConstructor()) {, +		if (ai.isConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +						mth.setAlias(String.format("mo%d%s", id, prepareNamePart(mth.getName())));, +			alias = String.format("C%04d%s", clsIndex++, prepareNamePart(clsName));, +		String alias = String.format("f%d%s", fldIndex++, prepareNamePart(field.getName()));, +		String alias = String.format("m%d%s", mthIndex++, prepareNamePart(mth.getName()));, +			String pkgAlias = String.format("p%03d%s", pkgIndex++, prepareNamePart(pkgName));, +		int len = s.length();, +		return len < minLength || len > maxLength, +				|| !NameMapper.isValidIdentifier(s);, +	private String prepareNamePart(String name) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +				&& !isReserved(str), +				&& !isReserved(str), +++ b/.gitignore, +.attach_pid*, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		if (mth.getMethodInfo().isRenamed() && !ai.isConstructor()) {, +		if (ai.isConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +						mth.setAlias(String.format("mo%d%s", id, prepareNamePart(mth.getName())));, +			alias = String.format("C%04d%s", clsIndex++, prepareNamePart(clsName));, +		String alias = String.format("f%d%s", fldIndex++, prepareNamePart(field.getName()));, +		String alias = String.format("m%d%s", mthIndex++, prepareNamePart(mth.getName()));, +			String pkgAlias = String.format("p%03d%s", pkgIndex++, prepareNamePart(pkgName));, +		int len = s.length();, +		return len < minLength || len > maxLength, +				|| !NameMapper.isValidIdentifier(s);, +	private String prepareNamePart(String name) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +				&& !isReserved(str), +				&& !isReserved(str), +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +import jadx.core.deobf.NameMapper;, +			String fieldName = fieldInfo.getAlias();, +			if (!names.add(fieldName) || !NameMapper.isValidIdentifier(fieldName)) {, +			if (mth.contains(AFlag.DONT_GENERATE) || mth.getAccessFlags().isConstructor()) {, +			if (!names.add(signature) || !NameMapper.isValidIdentifier(mth.getAlias())) {, +++ b/.gitignore, +.attach_pid*, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		if (mth.getMethodInfo().isRenamed() && !ai.isConstructor()) {, +		if (ai.isConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +						mth.setAlias(String.format("mo%d%s", id, prepareNamePart(mth.getName())));, +			alias = String.format("C%04d%s", clsIndex++, prepareNamePart(clsName));, +		String alias = String.format("f%d%s", fldIndex++, prepareNamePart(field.getName()));, +		String alias = String.format("m%d%s", mthIndex++, prepareNamePart(mth.getName()));, +			String pkgAlias = String.format("p%03d%s", pkgIndex++, prepareNamePart(pkgName));, +		int len = s.length();, +		return len < minLength || len > maxLength, +				|| !NameMapper.isValidIdentifier(s);, +	private String prepareNamePart(String name) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +				&& !isReserved(str), +				&& !isReserved(str), +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +import jadx.core.deobf.NameMapper;, +			String fieldName = fieldInfo.getAlias();, +			if (!names.add(fieldName) || !NameMapper.isValidIdentifier(fieldName)) {, +			if (mth.contains(AFlag.DONT_GENERATE) || mth.getAccessFlags().isConstructor()) {, +			if (!names.add(signature) || !NameMapper.isValidIdentifier(mth.getAlias())) {, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import jadx.core.utils.exceptions.JadxException;, +		List<IDexTreeVisitor> passes = getPassesList(jadx);, +	protected void decompileWithoutUnload(JadxDecompiler jadx, ClassNode cls) {, +		List<IDexTreeVisitor> passes = getPassesList(jadx);, +	private List<IDexTreeVisitor> getPassesList(JadxDecompiler jadx) {, +		RootNode root = JadxInternalAccess.getRoot(jadx);, +		List<IDexTreeVisitor> passesList = Jadx.getPassesList(jadx.getArgs());, +		passesList.forEach(pass -> {, +			try {, +				pass.init(root);, +			} catch (JadxException e) {]