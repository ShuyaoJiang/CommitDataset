[+++ b/.gitignore, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--respect-bytecode-access-modifiers"}, description = "don't change original access modifiers"), +	protected boolean respectBytecodeAccessModifiers = false;, +, +		args.setRespectBytecodeAccModifiers(respectBytecodeAccessModifiers);, +	public boolean isRespectBytecodeAccessModifiers() {, +		return respectBytecodeAccessModifiers;, +	}, +, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--respect-bytecode-access-modifiers"}, description = "don't change original access modifiers"), +	protected boolean respectBytecodeAccessModifiers = false;, +, +		args.setRespectBytecodeAccModifiers(respectBytecodeAccessModifiers);, +	public boolean isRespectBytecodeAccessModifiers() {, +		return respectBytecodeAccessModifiers;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +	private boolean respectBytecodeAccModifiers = false;, +	public boolean isRespectBytecodeAccModifiers() {, +		return respectBytecodeAccModifiers;, +	}, +, +	public void setRespectBytecodeAccModifiers(boolean respectBytecodeAccModifiers) {, +		this.respectBytecodeAccModifiers = respectBytecodeAccModifiers;, +	}, +, +		sb.append(", respectBytecodeAccModifiers=").append(respectBytecodeAccModifiers);, +, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--respect-bytecode-access-modifiers"}, description = "don't change original access modifiers"), +	protected boolean respectBytecodeAccessModifiers = false;, +, +		args.setRespectBytecodeAccModifiers(respectBytecodeAccessModifiers);, +	public boolean isRespectBytecodeAccessModifiers() {, +		return respectBytecodeAccessModifiers;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +	private boolean respectBytecodeAccModifiers = false;, +	public boolean isRespectBytecodeAccModifiers() {, +		return respectBytecodeAccModifiers;, +	}, +, +	public void setRespectBytecodeAccModifiers(boolean respectBytecodeAccModifiers) {, +		this.respectBytecodeAccModifiers = respectBytecodeAccModifiers;, +	}, +, +		sb.append(", respectBytecodeAccModifiers=").append(respectBytecodeAccModifiers);, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/.gitignore, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--respect-bytecode-access-modifiers"}, description = "don't change original access modifiers"), +	protected boolean respectBytecodeAccessModifiers = false;, +, +		args.setRespectBytecodeAccModifiers(respectBytecodeAccessModifiers);, +	public boolean isRespectBytecodeAccessModifiers() {, +		return respectBytecodeAccessModifiers;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +	private boolean respectBytecodeAccModifiers = false;, +	public boolean isRespectBytecodeAccModifiers() {, +		return respectBytecodeAccModifiers;, +	}, +, +	public void setRespectBytecodeAccModifiers(boolean respectBytecodeAccModifiers) {, +		this.respectBytecodeAccModifiers = respectBytecodeAccModifiers;, +	}, +, +		sb.append(", respectBytecodeAccModifiers=").append(respectBytecodeAccModifiers);, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.DebugInfoVisitor;, +import jadx.core.dex.visitors.FixAccessModifiers;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.regions.ProcessVariables;, +import jadx.core.dex.visitors.ssa.EliminatePhiNodes;, +import jadx.core.dex.visitors.typeinference.FinishTypeInference;, +import jadx.core.dex.visitors.typeinference.TypeInference;, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +			passes.add(new SSATransform());, +			passes.add(new DebugInfoVisitor());, +			passes.add(new TypeInference());, +, +			passes.add(new FinishTypeInference());, +			passes.add(new EliminatePhiNodes());, +, +]