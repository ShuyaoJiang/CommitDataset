[+++ b/build.gradle, +++ b/build.gradle, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		} catch (Exception e) {, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws Exception {, +		if (jadxArgs.getInput().isEmpty()) {, +			LOG.error("Please specify input file");, +			jadxArgs.printUsage();, +			System.exit(1);, +		}, +			if (pos != -1) {, +			} else {, +			}, +		if (outputDir.exists() && !outputDir.isDirectory()) {, +			throw new Exception("Output directory exists as file " + outputDir);, +		}, +++ b/build.gradle, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		} catch (Exception e) {, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws Exception {, +		if (jadxArgs.getInput().isEmpty()) {, +			LOG.error("Please specify input file");, +			jadxArgs.printUsage();, +			System.exit(1);, +		}, +			if (pos != -1) {, +			} else {, +			}, +		if (outputDir.exists() && !outputDir.isDirectory()) {, +			throw new Exception("Output directory exists as file " + outputDir);, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(description = "<input file> (.dex, .apk or .jar)"), +	@Parameter(names = {"--cfg"}, description = "save methods control flow graph to dot file"), +++ b/build.gradle, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		} catch (Exception e) {, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws Exception {, +		if (jadxArgs.getInput().isEmpty()) {, +			LOG.error("Please specify input file");, +			jadxArgs.printUsage();, +			System.exit(1);, +		}, +			if (pos != -1) {, +			} else {, +			}, +		if (outputDir.exists() && !outputDir.isDirectory()) {, +			throw new Exception("Output directory exists as file " + outputDir);, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(description = "<input file> (.dex, .apk or .jar)"), +	@Parameter(names = {"--cfg"}, description = "save methods control flow graph to dot file"), +++ b/jadx-cli/src/main/resources/logback.xml, +<configuration>, +, +    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">, +        <encoder>, +            <pattern>%-5level - %msg%n</pattern>, +        </encoder>, +    </appender>, +, +    <root level="INFO">, +        <appender-ref ref="STDOUT"/>, +    </root>, +, +</configuration>, +++ b/build.gradle, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		} catch (Exception e) {, +	private static void checkArgs(JadxCLIArgs jadxArgs) throws Exception {, +		if (jadxArgs.getInput().isEmpty()) {, +			LOG.error("Please specify input file");, +			jadxArgs.printUsage();, +			System.exit(1);, +		}, +			if (pos != -1) {, +			} else {, +			}, +		if (outputDir.exists() && !outputDir.isDirectory()) {, +			throw new Exception("Output directory exists as file " + outputDir);, +		}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(description = "<input file> (.dex, .apk or .jar)"), +	@Parameter(names = {"--cfg"}, description = "save methods control flow graph to dot file"), +++ b/jadx-cli/src/main/resources/logback.xml, +<configuration>, +, +    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">, +        <encoder>, +            <pattern>%-5level - %msg%n</pattern>, +        </encoder>, +    </appender>, +, +    <root level="INFO">, +        <appender-ref ref="STDOUT"/>, +    </root>, +, +</configuration>, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.ConstClassNode;]