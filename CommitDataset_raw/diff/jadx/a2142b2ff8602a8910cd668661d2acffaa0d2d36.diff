[+++ b/jadx-gui/src/main/java/jadx/gui/ui/CodePanel.java, +	private static final long serialVersionUID = 5310536092010045565L;, +, +++ b/jadx-gui/src/main/java/jadx/gui/ui/CodePanel.java, +	private static final long serialVersionUID = 5310536092010045565L;, +, +++ b/jadx-gui/src/main/java/jadx/gui/ui/TabbedPane.java, +import jadx.gui.utils.NLS;, +import javax.swing.JMenuItem;, +import javax.swing.JPopupMenu;, +import javax.swing.SwingUtilities;, +import java.awt.event.MouseWheelEvent;, +import java.awt.event.MouseWheelListener;, +import java.util.ArrayList;, +import java.util.LinkedHashMap;, +import java.util.List;, +	private static final long serialVersionUID = -8833600618794570904L;, +, +	private final Map<JClass, CodePanel> openTabs = new LinkedHashMap<JClass, CodePanel>();, +, +		addMouseWheelListener(new MouseWheelListener() {, +			public void mouseWheelMoved(MouseWheelEvent e) {, +				int direction = e.getWheelRotation();, +				int index = getSelectedIndex();, +				int maxIndex = getTabCount() - 1;, +				if ((index == 0 && direction < 0), +						|| (index == maxIndex && direction > 0)) {, +					index = maxIndex - index;, +				} else {, +					index += direction;, +				}, +				setSelectedIndex(index);, +			}, +		});, +	}, +, +	MainWindow getMainWindow() {, +		return mainWindow;, +	}, +, +	void showCode(final JClass cls, final int line) {, +		final CodePanel codePanel = getCodePanel(cls);, +		SwingUtilities.invokeLater(new Runnable() {, +			@Override, +			public void run() {, +				setSelectedComponent(codePanel);, +				CodeArea codeArea = codePanel.getCodeArea();, +				codeArea.scrollToLine(line);, +				codeArea.requestFocus();, +			}, +		});, +		add(codePanel);, +		remove(codePanel);, +	private CodePanel getCodePanel(JClass cls) {, +		return panel;, +	}, +	private CodePanel getCodePanel(int index) {, +		Component component = getComponent(index);, +		if (component instanceof CodePanel) {, +			return (CodePanel) component;, +		}, +		return null;, +	}, +, +	CodePanel getSelectedCodePanel() {, +		return (CodePanel) getSelectedComponent();, +, +		final JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 3, 0));, +				if (SwingUtilities.isMiddleMouseButton(e)) {, +				} else if (SwingUtilities.isRightMouseButton(e)) {, +					JPopupMenu menu = createTabPopupMenu(codePanel);, +					menu.show(panel, e.getX(), e.getY());, +	private JPopupMenu createTabPopupMenu(final CodePanel codePanel) {, +		JPopupMenu menu = new JPopupMenu();, +		JMenuItem closeTab = new JMenuItem(NLS.str("tabs.close"));, +		closeTab.addActionListener(new ActionListener() {, +			@Override, +			public void actionPerformed(ActionEvent e) {, +				closeCodePanel(codePanel);, +			}, +		});, +		menu.add(closeTab);, +, +		if (openTabs.size() > 1) {, +			JMenuItem closeOther = new JMenuItem(NLS.str("tabs.closeOthers"));, +			closeOther.addActionListener(new ActionListener() {, +				@Override, +				public void actionPerformed(ActionEvent e) {, +					List<CodePanel> codePanels = new ArrayList<CodePanel>(openTabs.values());, +					for (CodePanel panel : codePanels) {, +						if (panel != codePanel) {, +							closeCodePanel(panel);, +						}, +					}, +				}, +			});, +			menu.add(closeOther);, +, +			JMenuItem closeAll = new JMenuItem(NLS.str("tabs.closeAll"));, +			closeAll.addActionListener(new ActionListener() {]