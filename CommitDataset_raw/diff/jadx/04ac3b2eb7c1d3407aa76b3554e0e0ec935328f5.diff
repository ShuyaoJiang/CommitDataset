[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.nodes.DexNode;, +		String baseClass = useClassInternal(cls.getClassInfo(), classInfo);, +	private String useClassInternal(ClassInfo useCls, ClassInfo classInfo) {, +		if (parentGen != null) {, +			return parentGen.useClassInternal(useCls, classInfo);, +		}, +		if (fallback) {, +		}, +			if (isClassInnerFor(classInfo, useCls)) {, +			}, +			if (classInfo.getPackage().equals(useCls.getPackage()) && !classInfo.isInner()) {, +			}, +			if (classInfo.getPackage().equals(useCls.getPackage())) {, +				clsStr = classInfo.getNameWithoutPackage();, +			}, +			if (searchCollision(cls.dex(), useCls, shortName)) {, +				return clsStr;, +			}, +					if (cls.getShortName().equals(shortName)) {, +			}, +	private static boolean isClassInnerFor(ClassInfo inner, ClassInfo parent) {, +			return p.equals(parent) || isClassInnerFor(p, parent);, +	private static boolean searchCollision(DexNode dex, ClassInfo useCls, String shortName) {, +		if (useCls == null) {, +			return false;, +		}, +		if (useCls.getShortName().equals(shortName)) {, +			return true;, +		}, +		ClassNode classNode = dex.resolveClass(useCls);, +		for (ClassNode inner : classNode.getInnerClasses()) {, +			if (inner.getShortName().equals(shortName)) {, +				return true;, +			}, +		}, +		return searchCollision(dex, useCls.getParentClass(), shortName);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.nodes.DexNode;, +		String baseClass = useClassInternal(cls.getClassInfo(), classInfo);, +	private String useClassInternal(ClassInfo useCls, ClassInfo classInfo) {, +		if (parentGen != null) {, +			return parentGen.useClassInternal(useCls, classInfo);, +		}, +		if (fallback) {, +		}, +			if (isClassInnerFor(classInfo, useCls)) {, +			}, +			if (classInfo.getPackage().equals(useCls.getPackage()) && !classInfo.isInner()) {, +			}, +			if (classInfo.getPackage().equals(useCls.getPackage())) {, +				clsStr = classInfo.getNameWithoutPackage();, +			}, +			if (searchCollision(cls.dex(), useCls, shortName)) {, +				return clsStr;, +			}, +					if (cls.getShortName().equals(shortName)) {, +			}, +	private static boolean isClassInnerFor(ClassInfo inner, ClassInfo parent) {, +			return p.equals(parent) || isClassInnerFor(p, parent);, +	private static boolean searchCollision(DexNode dex, ClassInfo useCls, String shortName) {, +		if (useCls == null) {, +			return false;, +		}, +		if (useCls.getShortName().equals(shortName)) {, +			return true;, +		}, +		ClassNode classNode = dex.resolveClass(useCls);, +		for (ClassNode inner : classNode.getInnerClasses()) {, +			if (inner.getShortName().equals(shortName)) {, +				return true;, +			}, +		}, +		return searchCollision(dex, useCls.getParentClass(), shortName);, +	}, +, +++ b/jadx-samples/src/main/java/jadx/samples/TestInnerNames.java, +package jadx.samples;, +, +public class TestInnerNames extends AbstractTest {, +, +	public int D;, +, +	public class A extends TestInner.MyThread {, +		public A(String name) {, +			super(name);, +		}, +	}, +, +	public class B extends A {, +		public B(String name) {, +			super(name);, +		}, +, +		public class C extends TestInner2.B {, +		}, +	}, +]