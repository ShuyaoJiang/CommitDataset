[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new ProcessVariables());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new ProcessVariables());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessVariables.java, +import jadx.core.dex.regions.loops.ForLoop;, +import jadx.core.dex.regions.loops.LoopRegion;, +import jadx.core.dex.regions.loops.LoopType;, +	private static class CollectUsageRegionVisitor extends TracedRegionVisitor {, +		private final List<RegisterArg> args;, +		private final Map<Variable, Usage> usageMap;, +, +		public CollectUsageRegionVisitor(Map<Variable, Usage> usageMap) {, +			this.usageMap = usageMap;, +			args = new ArrayList<RegisterArg>();, +			regionProcess(mth, curRegion);, +				if (insn.contains(AFlag.SKIP)) {, +					continue;, +				}, +				args.clear();, +				processInsn(insn, curRegion);, +			}, +		}, +, +		private void regionProcess(MethodNode mth, IRegion region) {, +			if (region instanceof LoopRegion) {, +				LoopRegion loopRegion = (LoopRegion) region;, +				LoopType loopType = loopRegion.getType();, +				if (loopType instanceof ForLoop) {, +					ForLoop forLoop = (ForLoop) loopType;, +					processInsn(forLoop.getInitInsn(), region);, +					processInsn(forLoop.getIncrInsn(), region);, +				}, +			}, +		}, +, +		void processInsn(InsnNode insn, IRegion curRegion) {, +			if (insn == null) {, +				return;, +			}, +, +	@Override, +	public void visit(MethodNode mth) throws JadxException {, +		if (mth.isNoCode()) {, +			return;, +		}, +		final Map<Variable, Usage> usageMap = new LinkedHashMap<Variable, Usage>();, +		for (RegisterArg arg : mth.getArguments(true)) {, +			addToUsageMap(arg, usageMap);, +		}, +, +		// collect all variables usage, +		IRegionVisitor collect = new CollectUsageRegionVisitor(usageMap);, +					if (declareAtAssign(u)) {, +		}, +	private static Usage addToUsageMap(RegisterArg arg, Map<Variable, Usage> usageMap) {, +	private static boolean declareAtAssign(Usage u) {, +		RegisterArg arg = u.getArg();, +		InsnNode parentInsn = arg.getParentInsn();, +		if (!arg.equals(parentInsn.getResult())) {, +			return false;, +		}, +		parentInsn.add(AFlag.DECLARE_VAR);, +		processVar(arg);, +		return true;, +	}, +, +		// workaround for declare variables used in several loops, +		if (region instanceof LoopRegion) {, +			for (IRegion r : u.getAssigns()) {, +				if (!RegionUtils.isRegionContainsRegion(region, r)) {, +					return false;, +				}, +			}, +		}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new ProcessVariables());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessVariables.java, +import jadx.core.dex.regions.loops.ForLoop;, +import jadx.core.dex.regions.loops.LoopRegion;, +import jadx.core.dex.regions.loops.LoopType;, +	private static class CollectUsageRegionVisitor extends TracedRegionVisitor {, +		private final List<RegisterArg> args;, +		private final Map<Variable, Usage> usageMap;, +, +		public CollectUsageRegionVisitor(Map<Variable, Usage> usageMap) {, +			this.usageMap = usageMap;, +			args = new ArrayList<RegisterArg>();, +			regionProcess(mth, curRegion);, +				if (insn.contains(AFlag.SKIP)) {, +					continue;, +				}, +				args.clear();, +				processInsn(insn, curRegion);, +			}, +		}, +, +		private void regionProcess(MethodNode mth, IRegion region) {, +			if (region instanceof LoopRegion) {, +				LoopRegion loopRegion = (LoopRegion) region;]