[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.EmptyBitSet;, +	private BitSet doms = EmptyBitSet.EMPTY;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.EmptyBitSet;, +	private BitSet doms = EmptyBitSet.EMPTY;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			int argsCount = list.size();, +			for (int i = 0; i < argsCount; i++) {, +					throw new JadxRuntimeException("Incorrect register number in instruction: " + insnNode, +							+ ", expected to be less than " + regsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.EmptyBitSet;, +	private BitSet doms = EmptyBitSet.EMPTY;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			int argsCount = list.size();, +			for (int i = 0; i < argsCount; i++) {, +					throw new JadxRuntimeException("Incorrect register number in instruction: " + insnNode, +							+ ", expected to be less than " + regsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlineVisitor.java, +			ArgType argType = arg.getType();, +			if (argType.isObject() && literal != 0) {, +				argType = ArgType.NARROW_NUMBERS;, +			}, +				litArg = InsnArg.lit(literal, argType);, +				litArg = InsnArg.lit(literal, argType);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.EmptyBitSet;, +	private BitSet doms = EmptyBitSet.EMPTY;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			int argsCount = list.size();, +			for (int i = 0; i < argsCount; i++) {, +					throw new JadxRuntimeException("Incorrect register number in instruction: " + insnNode, +							+ ", expected to be less than " + regsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlineVisitor.java, +			ArgType argType = arg.getType();, +			if (argType.isObject() && literal != 0) {, +				argType = ArgType.NARROW_NUMBERS;, +			}, +				litArg = InsnArg.lit(literal, argType);, +				litArg = InsnArg.lit(literal, argType);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		if (excHandlerAttr == null) {, +			LOG.warn("Missing exception handler attribute for start block");, +		} else {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.EmptyBitSet;, +	private BitSet doms = EmptyBitSet.EMPTY;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			int argsCount = list.size();, +			for (int i = 0; i < argsCount; i++) {, +					throw new JadxRuntimeException("Incorrect register number in instruction: " + insnNode, +							+ ", expected to be less than " + regsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlineVisitor.java, +			ArgType argType = arg.getType();, +			if (argType.isObject() && literal != 0) {, +				argType = ArgType.NARROW_NUMBERS;, +			}, +				litArg = InsnArg.lit(literal, argType);, +				litArg = InsnArg.lit(literal, argType);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		if (excHandlerAttr == null) {, +			LOG.warn("Missing exception handler attribute for start block");, +		} else {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/PostTypeInference.java, +				ArgType resultType = result.getType();, +				boolean skip = castType.isObject() && resultType.isObject(), +						&& castType.getObject().equals(resultType.getObject());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.EmptyBitSet;, +	private BitSet doms = EmptyBitSet.EMPTY;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			int argsCount = list.size();, +			for (int i = 0; i < argsCount; i++) {, +					throw new JadxRuntimeException("Incorrect register number in instruction: " + insnNode, +							+ ", expected to be less than " + regsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlineVisitor.java, +			ArgType argType = arg.getType();, +			if (argType.isObject() && literal != 0) {, +				argType = ArgType.NARROW_NUMBERS;, +			}, +				litArg = InsnArg.lit(literal, argType);, +				litArg = InsnArg.lit(literal, argType);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		if (excHandlerAttr == null) {, +			LOG.warn("Missing exception handler attribute for start block");, +		} else {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/PostTypeInference.java, +				ArgType resultType = result.getType();, +				boolean skip = castType.isObject() && resultType.isObject(), +						&& castType.getObject().equals(resultType.getObject());, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java, +			"files", "input", "outputDir", "verbose", "printHelp"]