[+++ b/src/main/java/jadx/Consts.java, +, +	public static final String DALVIK_SIGNATURE = "dalvik.annotation.Signature";, +++ b/src/main/java/jadx/Consts.java, +, +	public static final String DALVIK_SIGNATURE = "dalvik.annotation.Signature";, +++ b/src/main/java/jadx/codegen/AnnotationGen.java, +				if (Consts.DEBUG) {, +		Annotation an = mth.getAttributes().getAnnotation("dalvik.annotation.Throws");, +			Object exs = an.getDefaultValue();, +		Annotation an = cls.getAttributes().getAnnotation("dalvik.annotation.AnnotationDefault");, +			Annotation defAnnotation = (Annotation) an.getDefaultValue();, +++ b/src/main/java/jadx/Consts.java, +, +	public static final String DALVIK_SIGNATURE = "dalvik.annotation.Signature";, +++ b/src/main/java/jadx/codegen/AnnotationGen.java, +				if (Consts.DEBUG) {, +		Annotation an = mth.getAttributes().getAnnotation("dalvik.annotation.Throws");, +			Object exs = an.getDefaultValue();, +		Annotation an = cls.getAttributes().getAnnotation("dalvik.annotation.AnnotationDefault");, +			Annotation defAnnotation = (Annotation) an.getDefaultValue();, +++ b/src/main/java/jadx/codegen/ClassGen.java, +import java.util.Map;, +import java.util.Map.Entry;, +		makeGenericMap(clsCode, cls.getGenericMap());, +		clsCode.add(' ');, +, +		ClassInfo sup = cls.getSuperClass();, +			clsCode.add("extends ").add(useClass(sup)).add(' ');, +			if (!cls.getInterfaces().isEmpty()), +				clsCode.add(' ');, +	public void makeGenericMap(CodeWriter code, Map<ArgType, List<ArgType>> gmap) {, +		if (gmap == null || gmap.isEmpty()), +			return;, +, +		code.add('<');, +		int i = 0;, +		for (Entry<ArgType, List<ArgType>> e : gmap.entrySet()) {, +			ArgType type = e.getKey();, +			List<ArgType> list = e.getValue();, +			if (i != 0) {, +				code.add(", ");, +			}, +			code.add(useClass(type));, +			if (list != null && !list.isEmpty()) {, +				code.add(" extends ");, +				for (Iterator<ArgType> it = list.iterator(); it.hasNext();) {, +					ArgType g = it.next();, +					code.add(useClass(g));, +					if (it.hasNext()) {, +						code.add(" & ");, +					}, +				}, +			}, +			i++;, +		}, +		code.add('>');, +	}, +, +		if (clsType.isGenericType()) {, +			return clsType.getObject();, +		}, +		return useClass(ClassInfo.fromType(cls.dex(), clsType));, +	}, +	public String useClass(ClassInfo classInfo) {, +		String baseClass = useClassInner(classInfo);, +		ArgType[] generics = classInfo.getType().getGenericTypes();, +					sb.append(TypeGen.translate(this, gt));, +	private String useClassInner(ClassInfo classInfo) {, +			return parentGen.useClassInner(classInfo);, +++ b/src/main/java/jadx/Consts.java, +, +	public static final String DALVIK_SIGNATURE = "dalvik.annotation.Signature";, +++ b/src/main/java/jadx/codegen/AnnotationGen.java, +				if (Consts.DEBUG) {, +		Annotation an = mth.getAttributes().getAnnotation("dalvik.annotation.Throws");, +			Object exs = an.getDefaultValue();, +		Annotation an = cls.getAttributes().getAnnotation("dalvik.annotation.AnnotationDefault");, +			Annotation defAnnotation = (Annotation) an.getDefaultValue();, +++ b/src/main/java/jadx/codegen/ClassGen.java, +import java.util.Map;, +import java.util.Map.Entry;, +		makeGenericMap(clsCode, cls.getGenericMap());, +		clsCode.add(' ');, +, +		ClassInfo sup = cls.getSuperClass();, +			clsCode.add("extends ").add(useClass(sup)).add(' ');, +			if (!cls.getInterfaces().isEmpty()), +				clsCode.add(' ');, +	public void makeGenericMap(CodeWriter code, Map<ArgType, List<ArgType>> gmap) {, +		if (gmap == null || gmap.isEmpty()), +			return;, +, +		code.add('<');, +		int i = 0;, +		for (Entry<ArgType, List<ArgType>> e : gmap.entrySet()) {, +			ArgType type = e.getKey();, +			List<ArgType> list = e.getValue();, +			if (i != 0) {, +				code.add(", ");]