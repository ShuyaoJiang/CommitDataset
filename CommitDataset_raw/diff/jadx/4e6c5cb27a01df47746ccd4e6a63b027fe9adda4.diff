[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.SSAVar;, +		if (arg.getSVar().contains(AFlag.FINAL)) {, +			code.add("final ");, +		}, +				switch (replace.getReplaceType()) {, +					case CLASS_INSTANCE:, +						useClass(code, replace.getClsRef());, +						break;, +					case VAR:, +						addArg(code, replace.getVarRef());, +						break;, +			inlineAnonymousConstr(code, cls, insn);, +			return;, +		}, +		if (insn.isSelf()) {, +			throw new JadxRuntimeException("Constructor 'self' invoke must be removed!");, +		}, +		if (insn.isSuper()) {, +			code.add("super");, +		} else if (insn.isThis()) {, +			code.add("this");, +		} else {, +			code.add("new ");, +			useClass(code, insn.getClassType());, +		}, +		MethodNode callMth = mth.dex().resolveMethod(insn.getCallMth());, +		generateMethodArguments(code, insn, 0, callMth);, +	}, +, +	private void inlineAnonymousConstr(CodeWriter code, ClassNode cls, ConstructorInsn insn) throws CodegenException {, +		MethodNode callMth = mth.dex().resolveMethod(insn.getCallMth());, +		generateMethodArguments(code, insn, 0, callMth);, +		code.add(' ');, +				if (arg.isRegister()) {, +					SSAVar sVar = ((RegisterArg) arg).getSVar();, +					if (sVar != null && sVar.contains(AFlag.SKIP_ARG)) {, +						continue;, +					}, +				}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.SSAVar;, +		if (arg.getSVar().contains(AFlag.FINAL)) {, +			code.add("final ");, +		}, +				switch (replace.getReplaceType()) {, +					case CLASS_INSTANCE:, +						useClass(code, replace.getClsRef());, +						break;, +					case VAR:, +						addArg(code, replace.getVarRef());, +						break;, +			inlineAnonymousConstr(code, cls, insn);, +			return;, +		}, +		if (insn.isSelf()) {, +			throw new JadxRuntimeException("Constructor 'self' invoke must be removed!");, +		}, +		if (insn.isSuper()) {, +			code.add("super");, +		} else if (insn.isThis()) {, +			code.add("this");, +		} else {, +			code.add("new ");, +			useClass(code, insn.getClassType());, +		}, +		MethodNode callMth = mth.dex().resolveMethod(insn.getCallMth());, +		generateMethodArguments(code, insn, 0, callMth);, +	}, +, +	private void inlineAnonymousConstr(CodeWriter code, ClassNode cls, ConstructorInsn insn) throws CodegenException {, +		MethodNode callMth = mth.dex().resolveMethod(insn.getCallMth());, +		generateMethodArguments(code, insn, 0, callMth);, +		code.add(' ');, +				if (arg.isRegister()) {, +					SSAVar sVar = ((RegisterArg) arg).getSVar();, +					if (sVar != null && sVar.contains(AFlag.SKIP_ARG)) {, +						continue;, +					}, +				}, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.instructions.args.SSAVar;, +			SSAVar argSVar = arg.getSVar();, +			if (argSVar!= null && argSVar.contains(AFlag.FINAL)) {, +				argsCode.add("final ");, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.SSAVar;, +		if (arg.getSVar().contains(AFlag.FINAL)) {, +			code.add("final ");, +		}, +				switch (replace.getReplaceType()) {, +					case CLASS_INSTANCE:, +						useClass(code, replace.getClsRef());, +						break;, +					case VAR:, +						addArg(code, replace.getVarRef());, +						break;, +			inlineAnonymousConstr(code, cls, insn);, +			return;]