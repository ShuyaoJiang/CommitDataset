[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				if (!classNode.contains(AFlag.DONT_GENERATE)) {, +			}, +		ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				if (!classNode.contains(AFlag.DONT_GENERATE)) {, +			}, +		ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +	public static void process(ClassNode cls, List<IDexTreeVisitor> passes, boolean generateCode) {, +		if (!generateCode && cls.getState() == PROCESSED) {, +				if (cls.getState() == PROCESSED && generateCode) {, +					CodeGen.generate(cls);, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, false));, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				if (!classNode.contains(AFlag.DONT_GENERATE)) {, +			}, +		ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +	public static void process(ClassNode cls, List<IDexTreeVisitor> passes, boolean generateCode) {, +		if (!generateCode && cls.getState() == PROCESSED) {, +				if (cls.getState() == PROCESSED && generateCode) {, +					CodeGen.generate(cls);, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		return clsCode.finish();, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				if (!classNode.contains(AFlag.DONT_GENERATE)) {, +			}, +		ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +	public static void process(ClassNode cls, List<IDexTreeVisitor> passes, boolean generateCode) {, +		if (!generateCode && cls.getState() == PROCESSED) {, +				if (cls.getState() == PROCESSED && generateCode) {, +					CodeGen.generate(cls);, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		return clsCode.finish();, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeGen.java, +import jadx.core.dex.attributes.AFlag;, +	public static void generate(ClassNode cls) throws CodegenException {, +		if (cls.contains(AFlag.DONT_GENERATE)) {, +			cls.setCode(CodeWriter.EMPTY);, +		} else {, +			cls.setCode(clsGen.makeClass());, +		}, +	}, +, +	private CodeGen() {, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				if (!classNode.contains(AFlag.DONT_GENERATE)) {, +			}, +		ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +	public static void process(ClassNode cls, List<IDexTreeVisitor> passes, boolean generateCode) {, +		if (!generateCode && cls.getState() == PROCESSED) {, +				if (cls.getState() == PROCESSED && generateCode) {, +					CodeGen.generate(cls);, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		return clsCode.finish();, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeGen.java, +import jadx.core.dex.attributes.AFlag;, +	public static void generate(ClassNode cls) throws CodegenException {, +		if (cls.contains(AFlag.DONT_GENERATE)) {, +			cls.setCode(CodeWriter.EMPTY);, +		} else {, +			cls.setCode(clsGen.makeClass());, +		}, +	}, +, +	private CodeGen() {, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	public static final CodeWriter EMPTY = new CodeWriter().finish();, +, +	public CodeWriter finish() {, +		return this;, +		if (buf.length() > len && buf.substring(0, len).equals(NL)) {, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +				if (!classNode.contains(AFlag.DONT_GENERATE)) {, +			}, +		ProcessClass.process(cls, passes, true);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +	public static void process(ClassNode cls, List<IDexTreeVisitor> passes, boolean generateCode) {, +		if (!generateCode && cls.getState() == PROCESSED) {, +				if (cls.getState() == PROCESSED && generateCode) {, +					CodeGen.generate(cls);, +		cls.getDependencies().forEach(depCls -> process(depCls, passes, false));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		return clsCode.finish();, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeGen.java, +import jadx.core.dex.attributes.AFlag;, +	public static void generate(ClassNode cls) throws CodegenException {, +		if (cls.contains(AFlag.DONT_GENERATE)) {, +			cls.setCode(CodeWriter.EMPTY);, +		} else {, +			cls.setCode(clsGen.makeClass());, +		}, +	}, +]