[+++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +		if (isValidIdentifier(name)) {, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +		if (isValidIdentifier(name)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		String cleanClsName = NameMapper.removeInvalidChars(clsName, "C");, +		if (!NameMapper.isValidIdentifier(cleanClsName)) {, +			return 'C' + cleanClsName;, +		return cleanClsName;, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +		if (isValidIdentifier(name)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		String cleanClsName = NameMapper.removeInvalidChars(clsName, "C");, +		if (!NameMapper.isValidIdentifier(cleanClsName)) {, +			return 'C' + cleanClsName;, +		return cleanClsName;, +++ b/jadx-core/src/test/java/jadx/tests/integration/names/TestClassNameWithInvalidChar.java, +package jadx.tests.integration.names;, +, +import org.junit.jupiter.api.Test;, +, +import jadx.api.JadxDecompiler;, +import jadx.api.JadxInternalAccess;, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.RootNode;, +import jadx.tests.api.SmaliTest;, +, +public class TestClassNameWithInvalidChar extends SmaliTest {, +	/*, +		public class do- {}, +		public class i-f {}, +	*/, +, +	@Test, +	public void test() {, +		JadxDecompiler d = loadSmaliFiles("names", "TestClassNameWithInvalidChar");, +		RootNode root = JadxInternalAccess.getRoot(d);, +		for (ClassNode cls : root.getClasses(false)) {, +			decompileAndCheckCls(d, cls);, +		}, +	}, +, +	@Test, +	public void testWithDeobfuscation() {, +		enableDeobfuscation();, +, +		JadxDecompiler d = loadSmaliFiles("names", "TestClassNameWithInvalidChar");, +		RootNode root = JadxInternalAccess.getRoot(d);, +		for (ClassNode cls : root.getClasses(false)) {, +			decompileAndCheckCls(d, cls);, +		}, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/deobf/NameMapper.java, +		if (isValidIdentifier(name)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +		String cleanClsName = NameMapper.removeInvalidChars(clsName, "C");, +		if (!NameMapper.isValidIdentifier(cleanClsName)) {, +			return 'C' + cleanClsName;, +		return cleanClsName;, +++ b/jadx-core/src/test/java/jadx/tests/integration/names/TestClassNameWithInvalidChar.java, +package jadx.tests.integration.names;, +, +import org.junit.jupiter.api.Test;, +, +import jadx.api.JadxDecompiler;, +import jadx.api.JadxInternalAccess;, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.RootNode;, +import jadx.tests.api.SmaliTest;, +, +public class TestClassNameWithInvalidChar extends SmaliTest {, +	/*, +		public class do- {}, +		public class i-f {}, +	*/, +, +	@Test, +	public void test() {, +		JadxDecompiler d = loadSmaliFiles("names", "TestClassNameWithInvalidChar");, +		RootNode root = JadxInternalAccess.getRoot(d);, +		for (ClassNode cls : root.getClasses(false)) {, +			decompileAndCheckCls(d, cls);, +		}, +	}, +, +	@Test, +	public void testWithDeobfuscation() {, +		enableDeobfuscation();, +, +		JadxDecompiler d = loadSmaliFiles("names", "TestClassNameWithInvalidChar");, +		RootNode root = JadxInternalAccess.getRoot(d);, +		for (ClassNode cls : root.getClasses(false)) {, +			decompileAndCheckCls(d, cls);, +		}, +	}, +}, +++ b/jadx-core/src/test/smali/names/TestClassNameWithInvalidChar/a.smali, +.class public Ldo-;, +.super Ljava/lang/Object;]