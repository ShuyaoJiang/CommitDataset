[+++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +		List<File> files = compileClass(cls);, +		assertThat("File list is empty", files, not(empty()));, +		String path = cls.getPackage().getName().replace('.', '/');, +			for (File file : files) {, +		String clsFullName = cls.getName();, +		String rootClsName;, +		int end = clsFullName.indexOf('$');, +			rootClsName = clsFullName.substring(0, end);, +		} else {, +			rootClsName = clsFullName;, +		String javaFileName = rootClsName.replace('.', '/') + ".java";, +		File file = new File(TEST_DIRECTORY, javaFileName);, +			file = new File(TEST_DIRECTORY2, javaFileName);, +		assertThat("Test source file not found: " + javaFileName, file.exists(), is(true));, +		files.forEach(File::deleteOnExit);, +		String clsName = clsFullName.substring(clsFullName.lastIndexOf('.') + 1);, +		files.removeIf(next -> !next.getName().contains(clsName));, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +		List<File> files = compileClass(cls);, +		assertThat("File list is empty", files, not(empty()));, +		String path = cls.getPackage().getName().replace('.', '/');, +			for (File file : files) {, +		String clsFullName = cls.getName();, +		String rootClsName;, +		int end = clsFullName.indexOf('$');, +			rootClsName = clsFullName.substring(0, end);, +		} else {, +			rootClsName = clsFullName;, +		String javaFileName = rootClsName.replace('.', '/') + ".java";, +		File file = new File(TEST_DIRECTORY, javaFileName);, +			file = new File(TEST_DIRECTORY2, javaFileName);, +		assertThat("Test source file not found: " + javaFileName, file.exists(), is(true));, +		files.forEach(File::deleteOnExit);, +		String clsName = clsFullName.substring(clsFullName.lastIndexOf('.') + 1);, +		files.removeIf(next -> !next.getName().contains(clsName));, +++ b/jadx-core/src/test/java/jadx/tests/integration/generics/TestImportGenericMap.java, +	public static class SuperClass<O extends SuperClass.ToImport> {, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(SuperClass.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsString(, +			"import " + SuperClass.ToImport.class.getName().replace("$ToImport", ".ToImport") + ';'));, +		assertThat(code, not(containsString(, +			"import " + SuperClass.NotToImport.class.getName().replace("NotToImport", ".NotToImport") + ';')));, +	}, +}, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +		List<File> files = compileClass(cls);, +		assertThat("File list is empty", files, not(empty()));, +		String path = cls.getPackage().getName().replace('.', '/');, +			for (File file : files) {, +		String clsFullName = cls.getName();, +		String rootClsName;, +		int end = clsFullName.indexOf('$');, +			rootClsName = clsFullName.substring(0, end);, +		} else {, +			rootClsName = clsFullName;, +		String javaFileName = rootClsName.replace('.', '/') + ".java";, +		File file = new File(TEST_DIRECTORY, javaFileName);, +			file = new File(TEST_DIRECTORY2, javaFileName);, +		assertThat("Test source file not found: " + javaFileName, file.exists(), is(true));, +		files.forEach(File::deleteOnExit);, +		String clsName = clsFullName.substring(clsFullName.lastIndexOf('.') + 1);, +		files.removeIf(next -> !next.getName().contains(clsName));, +++ b/jadx-core/src/test/java/jadx/tests/integration/generics/TestImportGenericMap.java, +	public static class SuperClass<O extends SuperClass.ToImport> {, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(SuperClass.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsString(, +			"import " + SuperClass.ToImport.class.getName().replace("$ToImport", ".ToImport") + ';'));, +		assertThat(code, not(containsString(, +			"import " + SuperClass.NotToImport.class.getName().replace("NotToImport", ".NotToImport") + ';')));, +	}, +}, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestInner2Samples.java]