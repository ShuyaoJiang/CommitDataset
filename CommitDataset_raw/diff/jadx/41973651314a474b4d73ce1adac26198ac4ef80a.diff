[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	public void makeInsn(InsnNode insn, CodeWriter code) throws CodegenException {, +		makeInsn(insn, code, null);, +	protected void makeInsn(InsnNode insn, CodeWriter code, Flags flag) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	public void makeInsn(InsnNode insn, CodeWriter code) throws CodegenException {, +		makeInsn(insn, code, null);, +	protected void makeInsn(InsnNode insn, CodeWriter code, Flags flag) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.attributes.nodes.JumpInfo;, +import jadx.core.dex.instructions.IfNode;, +			ArgType argType = var.getType();, +				mth.unload();, +		InsnNode prevInsn = null;, +			if (addLabels && needLabel(insn, prevInsn)) {, +				code.startLine();, +				RegisterArg resArg = insn.getResult();, +				if (resArg != null) {, +					ArgType varType = resArg.getInitType();, +					if (varType.isTypeKnown()) {, +						code.add(varType.toString()).add(' ');, +					}, +				}, +				insnGen.makeInsn(insn, code, InsnGen.Flags.INLINE);, +					code.add("     // " + catchAttr);, +			prevInsn = insn;, +	private static boolean needLabel(InsnNode insn, InsnNode prevInsn) {, +		if (insn.contains(AType.EXC_HANDLER)) {, +			return true;, +		}, +		if (insn.contains(AType.JUMP)) {, +			// don't add label for ifs else branch, +			if (prevInsn != null && prevInsn.getType() == InsnType.IF) {, +				List<JumpInfo> jumps = insn.getAll(AType.JUMP);, +				if (jumps.size() == 1) {, +					JumpInfo jump = jumps.get(0);, +					if (jump.getSrc() == prevInsn.getOffset() && jump.getDest() == insn.getOffset()) {, +						int target = ((IfNode) prevInsn).getTarget();, +						return insn.getOffset() == target;, +					}, +				}, +			}, +			return true;, +		}, +		return false;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	public void makeInsn(InsnNode insn, CodeWriter code) throws CodegenException {, +		makeInsn(insn, code, null);, +	protected void makeInsn(InsnNode insn, CodeWriter code, Flags flag) throws CodegenException {, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.attributes.nodes.JumpInfo;, +import jadx.core.dex.instructions.IfNode;, +			ArgType argType = var.getType();, +				mth.unload();, +		InsnNode prevInsn = null;, +			if (addLabels && needLabel(insn, prevInsn)) {, +				code.startLine();, +				RegisterArg resArg = insn.getResult();, +				if (resArg != null) {, +					ArgType varType = resArg.getInitType();, +					if (varType.isTypeKnown()) {, +						code.add(varType.toString()).add(' ');, +					}, +				}, +				insnGen.makeInsn(insn, code, InsnGen.Flags.INLINE);, +					code.add("     // " + catchAttr);, +			prevInsn = insn;, +	private static boolean needLabel(InsnNode insn, InsnNode prevInsn) {, +		if (insn.contains(AType.EXC_HANDLER)) {, +			return true;, +		}, +		if (insn.contains(AType.JUMP)) {, +			// don't add label for ifs else branch, +			if (prevInsn != null && prevInsn.getType() == InsnType.IF) {, +				List<JumpInfo> jumps = insn.getAll(AType.JUMP);, +				if (jumps.size() == 1) {, +					JumpInfo jump = jumps.get(0);, +					if (jump.getSrc() == prevInsn.getOffset() && jump.getDest() == insn.getOffset()) {, +						int target = ((IfNode) prevInsn).getTarget();, +						return insn.getOffset() == target;, +					}, +				}, +			}, +			return true;, +		}, +		return false;, +	}, +, +++ b/jadx-core/src/test/java/jadx/tests/integration/fallback/TestFallbackMode.java, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +		assertThat(code, containsOne("r1 = this;"));, +		assertThat(code, containsOne("L_0x0000:"));, +		assertThat(code, containsOne("L_0x0007:"));, +		assertThat(code, containsOne("int r2 = r2 + 1"));]