[+++ b/jadx-core/src/main/java/jadx/core/codegen/TypeGen.java, +//		if (lz), +//			return "(" + str + ")";, +//		else, +++ b/jadx-core/src/main/java/jadx/core/codegen/TypeGen.java, +//		if (lz), +//			return "(" + str + ")";, +//		else, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/AnnotationsParser.java, +import java.util.LinkedHashMap;, +		EncValueParser parser = new EncValueParser(dex, s);, +		if (readVisibility) {, +		}, +		Map<String, Object> values = new LinkedHashMap<String, Object>(size);, +			values.put(name, parser.parseValue());, +++ b/jadx-core/src/main/java/jadx/core/codegen/TypeGen.java, +//		if (lz), +//			return "(" + str + ")";, +//		else, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/AnnotationsParser.java, +import java.util.LinkedHashMap;, +		EncValueParser parser = new EncValueParser(dex, s);, +		if (readVisibility) {, +		}, +		Map<String, Object> values = new LinkedHashMap<String, Object>(size);, +			values.put(name, parser.parseValue());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/EncValueParser.java, +		int argAndType = in.readByte() & 0xFF;, +		int type = argAndType & 0x1F;, +		int arg = (argAndType & 0xE0) >> 5;, +				return arg == 1;, +				return in.readByte();, +, +				return (short) parseNumber(size, true);, +				return (char) parseNumber(size, false);, +				return (int) parseNumber(size, true);, +				return parseNumber(size, true);, +				return Float.intBitsToFloat((int) parseNumber(size, false));, +				return Double.longBitsToDouble(parseNumber(size, false));, +				return dex.getString((int) parseNumber(size, false));, +				return dex.getType((int) parseNumber(size, false));, +				return MethodInfo.fromDex(dex, (int) parseNumber(size, false));, +				return FieldInfo.fromDex(dex, (int) parseNumber(size, false));, +	private long parseNumber(int byteCount, boolean isSignExtended) {, +		int shift = 8;, +		int first = in.readByte() & 0xFF;, +		if (isSignExtended && (first & 0x80) != 0) {, +			result = ~result << shift;, +		}, +		result |= (long) first;, +		for (int i = 1; i < byteCount; i++) {, +			result |= (long) (in.readByte() & 0xFF) << shift;, +++ b/jadx-core/src/main/java/jadx/core/codegen/TypeGen.java, +//		if (lz), +//			return "(" + str + ")";, +//		else, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/AnnotationsParser.java, +import java.util.LinkedHashMap;, +		EncValueParser parser = new EncValueParser(dex, s);, +		if (readVisibility) {, +		}, +		Map<String, Object> values = new LinkedHashMap<String, Object>(size);, +			values.put(name, parser.parseValue());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/EncValueParser.java, +		int argAndType = in.readByte() & 0xFF;, +		int type = argAndType & 0x1F;, +		int arg = (argAndType & 0xE0) >> 5;, +				return arg == 1;, +				return in.readByte();, +, +				return (short) parseNumber(size, true);, +				return (char) parseNumber(size, false);, +				return (int) parseNumber(size, true);, +				return parseNumber(size, true);, +				return Float.intBitsToFloat((int) parseNumber(size, false));, +				return Double.longBitsToDouble(parseNumber(size, false));, +				return dex.getString((int) parseNumber(size, false));, +				return dex.getType((int) parseNumber(size, false));, +				return MethodInfo.fromDex(dex, (int) parseNumber(size, false));, +				return FieldInfo.fromDex(dex, (int) parseNumber(size, false));, +	private long parseNumber(int byteCount, boolean isSignExtended) {, +		int shift = 8;, +		int first = in.readByte() & 0xFF;, +		if (isSignExtended && (first & 0x80) != 0) {, +			result = ~result << shift;, +		}, +		result |= (long) first;, +		for (int i = 1; i < byteCount; i++) {, +			result |= (long) (in.readByte() & 0xFF) << shift;, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestAnnotations.java, +package jadx.tests.internal;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.hamcrest.CoreMatchers.not;, +import static org.junit.Assert.assertThat;]