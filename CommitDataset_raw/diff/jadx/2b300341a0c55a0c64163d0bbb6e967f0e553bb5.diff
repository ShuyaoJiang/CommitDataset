[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +					boolean badCode = mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE);, +					if (badCode) {, +						code.startLine("/* JADX WARNING: inconsistent code. */");, +						code.startLine("/* Code decompiled incorrectly, please refer to instructions dump. */");, +					code.incIndent();, +					mthGen.addInstructions(code);, +					code.decIndent();, +		addEnumFields(cls, code);, +	private void addEnumFields(ClassNode cls, CodeWriter code) throws CodegenException {, +		EnumClassAttr enumFields = (EnumClassAttr) cls.getAttributes().get(AttributeType.ENUM_CLASS);, +		if (enumFields != null) {, +			InsnGen igen = null;, +			for (Iterator<EnumField> it = enumFields.getFields().iterator(); it.hasNext(); ) {, +				EnumField f = it.next();, +				code.startLine(f.getName());, +				if (f.getArgs().size() != 0) {, +					code.add('(');, +					for (Iterator<InsnArg> aIt = f.getArgs().iterator(); aIt.hasNext(); ) {, +						InsnArg arg = aIt.next();, +						if (igen == null) {, +							// don't init mth gen if this is simple enum, +							MethodGen mthGen = new MethodGen(this, enumFields.getStaticMethod());, +							igen = new InsnGen(mthGen, enumFields.getStaticMethod(), false);, +						}, +						igen.addArg(code, arg);, +						if (aIt.hasNext()) {, +							code.add(", ");, +						}, +					}, +					code.add(')');, +				}, +				if (f.getCls() != null) {, +					new ClassGen(f.getCls(), this, fallback).makeClassBody(code);, +				}, +				if (it.hasNext()) {, +					code.add(',');, +				}, +			}, +			if (enumFields.getFields().isEmpty()) {, +				code.startLine();, +			}, +			code.add(';');, +			code.newLine();, +		}, +	}, +, +		String fullName = classInfo.getFullName();, +			return fullName;, +				fullName = classInfo.getNameWithoutPackage();, +				return fullName;, +					return fullName;, +		SourceFileAttr sourceFileAttr = (SourceFileAttr) node.getAttributes().get(AttributeType.SOURCE_FILE);, +			code.startLine("// compiled from: ").add(sourceFileAttr.getFileName());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +					boolean badCode = mth.getAttributes().contains(AttributeFlag.INCONSISTENT_CODE);, +					if (badCode) {, +						code.startLine("/* JADX WARNING: inconsistent code. */");, +						code.startLine("/* Code decompiled incorrectly, please refer to instructions dump. */");, +					code.incIndent();, +					mthGen.addInstructions(code);, +					code.decIndent();, +		addEnumFields(cls, code);, +	private void addEnumFields(ClassNode cls, CodeWriter code) throws CodegenException {, +		EnumClassAttr enumFields = (EnumClassAttr) cls.getAttributes().get(AttributeType.ENUM_CLASS);, +		if (enumFields != null) {, +			InsnGen igen = null;, +			for (Iterator<EnumField> it = enumFields.getFields().iterator(); it.hasNext(); ) {, +				EnumField f = it.next();, +				code.startLine(f.getName());, +				if (f.getArgs().size() != 0) {, +					code.add('(');, +					for (Iterator<InsnArg> aIt = f.getArgs().iterator(); aIt.hasNext(); ) {, +						InsnArg arg = aIt.next();, +						if (igen == null) {, +							// don't init mth gen if this is simple enum, +							MethodGen mthGen = new MethodGen(this, enumFields.getStaticMethod());, +							igen = new InsnGen(mthGen, enumFields.getStaticMethod(), false);, +						}, +						igen.addArg(code, arg);, +						if (aIt.hasNext()) {, +							code.add(", ");, +						}, +					}, +					code.add(')');, +				}, +				if (f.getCls() != null) {, +					new ClassGen(f.getCls(), this, fallback).makeClassBody(code);, +				}, +				if (it.hasNext()) {, +					code.add(',');, +				}, +			}, +			if (enumFields.getFields().isEmpty()) {, +				code.startLine();, +			}, +			code.add(';');, +			code.newLine();, +		}, +	}]