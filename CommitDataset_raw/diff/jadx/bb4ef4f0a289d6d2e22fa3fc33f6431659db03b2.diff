[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("if (");, +				code.add(arg(insn.getArg(0))).add(' ');, +				code.add(ifInsn.getOp().getSymbol()).add(' ');, +				code.add(arg(insn.getArg(1)));, +				code.add(") goto ").add(MethodGen.getLabelName(ifInsn.getTarget()));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("if (");, +				code.add(arg(insn.getArg(0))).add(' ');, +				code.add(ifInsn.getOp().getSymbol()).add(' ');, +				code.add(arg(insn.getArg(1)));, +				code.add(") goto ").add(MethodGen.getLabelName(ifInsn.getTarget()));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +		this(InsnType.GOTO, target, 0);, +	protected GotoNode(InsnType type, int target, int argsCount) {, +		super(type, argsCount);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("if (");, +				code.add(arg(insn.getArg(0))).add(' ');, +				code.add(ifInsn.getOp().getSymbol()).add(' ');, +				code.add(arg(insn.getArg(1)));, +				code.add(") goto ").add(MethodGen.getLabelName(ifInsn.getTarget()));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +		this(InsnType.GOTO, target, 0);, +	protected GotoNode(InsnType type, int target, int argsCount) {, +		super(type, argsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	private static final ArgType ARG_TYPE = ArgType.unknown(, +			PrimitiveType.INT, PrimitiveType.OBJECT, PrimitiveType.ARRAY,, +			PrimitiveType.BOOLEAN, PrimitiveType.SHORT, PrimitiveType.CHAR);, +, +		this(op, insn.getTarget(),, +				InsnArg.reg(insn, 0, ARG_TYPE),, +				insn.getRegisterCount() == 1 ? InsnArg.lit(0, ARG_TYPE) : InsnArg.reg(insn, 1, ARG_TYPE));, +, +	public IfNode(IfOp op, int targetOffset, InsnArg arg1, InsnArg arg2) {, +		super(InsnType.IF, targetOffset, 2);, +		this.op = op;, +		addArg(arg1);, +		addArg(arg2);, +	public void changeCondition(IfOp op, InsnArg arg1, InsnArg arg2) {, +				+ getArg(0) + " " + op.getSymbol() + " " + getArg(1), +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("if (");, +				code.add(arg(insn.getArg(0))).add(' ');, +				code.add(ifInsn.getOp().getSymbol()).add(' ');, +				code.add(arg(insn.getArg(1)));, +				code.add(") goto ").add(MethodGen.getLabelName(ifInsn.getTarget()));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +		this(InsnType.GOTO, target, 0);, +	protected GotoNode(InsnType type, int target, int argsCount) {, +		super(type, argsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	private static final ArgType ARG_TYPE = ArgType.unknown(, +			PrimitiveType.INT, PrimitiveType.OBJECT, PrimitiveType.ARRAY,, +			PrimitiveType.BOOLEAN, PrimitiveType.SHORT, PrimitiveType.CHAR);, +, +		this(op, insn.getTarget(),, +				InsnArg.reg(insn, 0, ARG_TYPE),, +				insn.getRegisterCount() == 1 ? InsnArg.lit(0, ARG_TYPE) : InsnArg.reg(insn, 1, ARG_TYPE));, +, +	public IfNode(IfOp op, int targetOffset, InsnArg arg1, InsnArg arg2) {, +		super(InsnType.IF, targetOffset, 2);, +		this.op = op;, +		addArg(arg1);, +		addArg(arg2);, +	public void changeCondition(IfOp op, InsnArg arg1, InsnArg arg2) {, +				+ getArg(0) + " " + op.getSymbol() + " " + getArg(1), +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +		throw new UnsupportedOperationException("ArgType.getObject()");, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("if (");, +				code.add(arg(insn.getArg(0))).add(' ');, +				code.add(ifInsn.getOp().getSymbol()).add(' ');, +				code.add(arg(insn.getArg(1)));, +				code.add(") goto ").add(MethodGen.getLabelName(ifInsn.getTarget()));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +		this(InsnType.GOTO, target, 0);, +	protected GotoNode(InsnType type, int target, int argsCount) {, +		super(type, argsCount);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	private static final ArgType ARG_TYPE = ArgType.unknown(, +			PrimitiveType.INT, PrimitiveType.OBJECT, PrimitiveType.ARRAY,, +			PrimitiveType.BOOLEAN, PrimitiveType.SHORT, PrimitiveType.CHAR);, +, +		this(op, insn.getTarget(),, +				InsnArg.reg(insn, 0, ARG_TYPE),, +				insn.getRegisterCount() == 1 ? InsnArg.lit(0, ARG_TYPE) : InsnArg.reg(insn, 1, ARG_TYPE));, +, +	public IfNode(IfOp op, int targetOffset, InsnArg arg1, InsnArg arg2) {, +		super(InsnType.IF, targetOffset, 2);, +		this.op = op;, +		addArg(arg1);, +		addArg(arg2);, +	public void changeCondition(IfOp op, InsnArg arg1, InsnArg arg2) {, +				+ getArg(0) + " " + op.getSymbol() + " " + getArg(1), +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +		throw new UnsupportedOperationException("ArgType.getObject()");, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/LiteralArg.java, +	public static final LiteralArg TRUE = new LiteralArg(1, ArgType.BOOLEAN);]