[+++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumMapAttr.java, +import jadx.core.dex.nodes.FieldNode;, +	public static class KeyValueMap {, +		public Object get(Object key) {, +			return map.get(key);, +		}, +, +		void put(Object key, Object value) {, +			map.put(key, value);, +		}, +	}, +, +	private Map<FieldNode, KeyValueMap> fieldsMap = new HashMap<FieldNode, KeyValueMap>();, +, +	public KeyValueMap getMap(FieldNode field) {, +		return fieldsMap.get(field);, +	}, +, +	public void add(FieldNode field, Object key, Object value) {, +		KeyValueMap map = getMap(field);, +		if (map == null) {, +			map = new KeyValueMap();, +			fieldsMap.put(field, map);, +		}, +		map.put(key, value);, +		return "Enum fields map: " + fieldsMap;, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumMapAttr.java, +import jadx.core.dex.nodes.FieldNode;, +	public static class KeyValueMap {, +		public Object get(Object key) {, +			return map.get(key);, +		}, +, +		void put(Object key, Object value) {, +			map.put(key, value);, +		}, +	}, +, +	private Map<FieldNode, KeyValueMap> fieldsMap = new HashMap<FieldNode, KeyValueMap>();, +, +	public KeyValueMap getMap(FieldNode field) {, +		return fieldsMap.get(field);, +	}, +, +	public void add(FieldNode field, Object key, Object value) {, +		KeyValueMap map = getMap(field);, +		if (map == null) {, +			map = new KeyValueMap();, +			fieldsMap.put(field, map);, +		}, +		map.put(key, value);, +		return "Enum fields map: " + fieldsMap;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ReSugarCode.java, +import jadx.core.dex.info.AccessInfo;, +		EnumMapAttr.KeyValueMap valueMap = getEnumMap(mth, enumMapField);, +		if (valueMap == null) {, +		for (Object key : keys) {, +			Object newKey = valueMap.get(key);, +			if (newKey == null) {, +		// replace confirmed, +		if (!insn.replaceArg(arg, invArg)) {, +			return null;, +		}, +		for (int i = 0; i < keys.length; i++) {, +			keys[i] = valueMap.get(keys[i]);, +		}, +		enumMapField.add(AFlag.DONT_GENERATE);, +		checkAndHideClass(enumMapField.getParentClass());, +	private static EnumMapAttr.KeyValueMap getEnumMap(MethodNode mth, FieldNode field) {, +			return mapAttr.getMap(field);, +		mapAttr = new EnumMapAttr();, +		syntheticClass.addAttr(mapAttr);, +, +					addToEnumMap(mth, mapAttr, insn);, +		return mapAttr.getMap(field);, +	private static void addToEnumMap(MethodNode mth, EnumMapAttr mapAttr, InsnNode aputInsn) {, +		InsnArg litArg = aputInsn.getArg(2);, +		EnumMapInfo mapInfo = checkEnumMapAccess(mth, aputInsn);, +		FieldNode field = mapInfo.getMapField();, +		if (field == null || !enumArg.isInsnWrap()) {, +		mapAttr.add(field, literal, fieldNode);, +	/**, +	 * If all static final synthetic fields have DONT_GENERATE => hide whole class, +	 */, +	private static void checkAndHideClass(ClassNode cls) {, +		for (FieldNode field : cls.getFields()) {, +			AccessInfo af = field.getAccessFlags();, +			if (af.isSynthetic() && af.isStatic() && af.isFinal(), +					&& !field.contains(AFlag.DONT_GENERATE)) {, +				return;, +			}, +		}, +		cls.add(AFlag.DONT_GENERATE);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumMapAttr.java, +import jadx.core.dex.nodes.FieldNode;, +	public static class KeyValueMap {, +		public Object get(Object key) {, +			return map.get(key);]