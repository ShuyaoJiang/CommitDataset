[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	private List<ExceptionHandler> exceptionHandlers = Collections.emptyList();, +		if (exceptionHandlers.isEmpty()) {, +		return Collections.unmodifiableList(exceptionHandlers);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	private List<ExceptionHandler> exceptionHandlers = Collections.emptyList();, +		if (exceptionHandlers.isEmpty()) {, +		return Collections.unmodifiableList(exceptionHandlers);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/DotGraphVisitor.java, +import jadx.core.dex.instructions.IfNode;, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.utils.RegionUtils;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +	private CodeWriter dot;, +	private CodeWriter conn;, +, +		dot = new CodeWriter();, +		conn = new CodeWriter();, +		dot.startLine("digraph \"CFG for");, +		dot.add(escape(mth.getParentClass().getFullName() + "." + mth.getMethodInfo().getShortId()));, +		dot.add("\" {");, +			processMethodRegion(mth);, +				processBlock(mth, block);, +		dot.startLine("MethodNode[shape=record,label=\"{");, +		dot.add(escape(mth.getAccessFlags().makeString()));, +		dot.add(escape(mth.getReturnType() + " ", +				+ mth.getParentClass().getFullName() + "." + mth.getName(), +				+ "(" + Utils.listToString(mth.getArguments(true)) + ") "));, +, +		if (attrs.length() != 0) {, +			dot.add(" | ").add(attrs);, +		}, +		dot.add("}\"];");, +		dot.startLine("MethodNode -> ").add(makeName(mth.getEnterBlock())).add(';');, +		dot.add(conn.toString());, +	private void processMethodRegion(MethodNode mth) {, +		processRegion(mth, mth.getRegion());, +		for (ExceptionHandler h : mth.getExceptionHandlers()) {, +			if (h.getHandlerRegion() != null) {, +				processRegion(mth, h.getHandlerRegion());, +			}, +		}, +		Set<BlockNode> regionsBlocks = new HashSet<BlockNode>(mth.getBasicBlocks().size());, +		RegionUtils.getAllRegionBlocks(mth.getRegion(), regionsBlocks);, +		for (ExceptionHandler handler : mth.getExceptionHandlers()) {, +			IContainer handlerRegion = handler.getHandlerRegion();, +			if (handlerRegion != null) {, +				RegionUtils.getAllRegionBlocks(handlerRegion, regionsBlocks);, +			}, +		}, +		for (BlockNode block : mth.getBasicBlocks()) {, +			if (!regionsBlocks.contains(block)) {, +				processBlock(mth, block, true);, +			}, +		}, +	}, +, +	private void processRegion(MethodNode mth, IContainer region) {, +			dot.startLine("label = \"").add(r);, +			String attrs = attributesString(r);, +			if (attrs.length() != 0) {, +				dot.add(" | ").add(attrs);, +			}, +			dot.add("\";");, +				processRegion(mth, c);, +			processBlock(mth, (BlockNode) region);, +	private void processBlock(MethodNode mth, BlockNode block) {, +		processBlock(mth, block, false);, +	}, +, +	private void processBlock(MethodNode mth, BlockNode block, boolean error) {, +		dot.startLine(makeName(block));, +		dot.add(" [shape=record,");, +		if (error) {, +			dot.add("color=red,");, +		dot.add("label=\"{");, +		dot.add(block.getId()).add("\\:\\ ");, +		dot.add(InsnUtils.formatOffset(block.getStartOffset()));, +		if (attrs.length() != 0) {, +			dot.add('|').add(attrs);, +		}, +		String insns = insertInsns(mth, block);, +		if (insns.length() != 0) {, +			dot.add('|').add(insns);, +		}, +		dot.add("}\"];");, +, +		BlockNode falsePath = null;, +		List<InsnNode> list = block.getInstructions();, +		if (!list.isEmpty() && list.get(0).getType() == InsnType.IF) {, +			falsePath = ((IfNode) list.get(0)).getElseBlock();, +		}, +		for (BlockNode next : block.getSuccessors()) {, +			conn.startLine(makeName(block)).add(" -> ").add(makeName(next));, +			if (next == falsePath) {, +				conn.add("[style=dotted]");, +			}, +			conn.add(';');]