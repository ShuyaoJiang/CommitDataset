[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				char op = insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';, +				oneArgInsn(code, insn, state, op);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				char op = insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';, +				oneArgInsn(code, insn, state, op);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.ArithOp;, +import jadx.core.dex.instructions.CallMthInterface;, +import jadx.core.dex.instructions.ConstStringNode;, +import jadx.core.dex.instructions.IfNode;, +import jadx.core.dex.instructions.IndexInsnNode;, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.InvokeNode;, +import jadx.core.dex.instructions.args.RegisterArg;, +				return simplifyArith((ArithNode) insn);, +				return convertInvoke(mth, (InvokeNode) insn);, +	private static InsnNode convertInvoke(MethodNode mth, InvokeNode insn) {, +		MethodInfo callMth = insn.getCallMth();, +	private static InsnNode simplifyArith(ArithNode arith) {, +						arith.getResult(), arith.getArg(0),, +			InsnArg firstArg = arith.getArg(0);, +			if (arith.getOp() == ArithOp.XOR && firstArg.getType() == ArgType.BOOLEAN, +					&& (lit == 0 || lit == 1)) {, +				InsnNode node = new InsnNode(lit == 0 ? InsnType.MOVE : InsnType.NOT, 1);, +				node.setResult(arith.getResult());, +				node.addArg(firstArg);, +				return node;, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				char op = insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';, +				oneArgInsn(code, insn, state, op);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.ArithOp;, +import jadx.core.dex.instructions.CallMthInterface;, +import jadx.core.dex.instructions.ConstStringNode;, +import jadx.core.dex.instructions.IfNode;, +import jadx.core.dex.instructions.IndexInsnNode;, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.InvokeNode;, +import jadx.core.dex.instructions.args.RegisterArg;, +				return simplifyArith((ArithNode) insn);, +				return convertInvoke(mth, (InvokeNode) insn);, +	private static InsnNode convertInvoke(MethodNode mth, InvokeNode insn) {, +		MethodInfo callMth = insn.getCallMth();, +	private static InsnNode simplifyArith(ArithNode arith) {, +						arith.getResult(), arith.getArg(0),, +			InsnArg firstArg = arith.getArg(0);, +			if (arith.getOp() == ArithOp.XOR && firstArg.getType() == ArgType.BOOLEAN, +					&& (lit == 0 || lit == 1)) {, +				InsnNode node = new InsnNode(lit == 0 ? InsnType.MOVE : InsnType.NOT, 1);, +				node.setResult(arith.getResult());, +				node.addArg(firstArg);, +				return node;, +			}, +++ b/jadx-core/src/test/java/jadx/tests/integration/conditions/TestXor.java, +import jadx.tests.api.SmaliTest;, +public class TestXor extends SmaliTest {, +		public boolean test1() {, +			return test() ^ true;, +		public boolean test2(boolean v) {, +			return v ^ true;, +		}, +, +		public boolean test() {, +	public void test() {, +		assertThat(code, containsOne("return !test();"));, +		assertThat(code, containsOne("return !v;"));, +	}, +, +	@Test, +	public void smali() {, +		/*, +    		public boolean test1() {, +				return test() ^ true;, +			}, +, +			public boolean test2() {, +				return test() ^ false;, +			}, +, +			public boolean test() {, +				return true;, +			}, +		 */, +		ClassNode cls = getClassNodeFromSmaliWithPath("conditions", "TestXor");, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsOne("return !test();"));, +		assertThat(code, containsOne("return test();"));, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				char op = insn.getArg(0).getType() == ArgType.BOOLEAN ? '!' : '~';, +				oneArgInsn(code, insn, state, op);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.ArithOp;, +import jadx.core.dex.instructions.CallMthInterface;, +import jadx.core.dex.instructions.ConstStringNode;]