[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		if (callMthNode != null && inlineMethod(callMthNode, insn, code)) {, +	private boolean inlineMethod(MethodNode callMthNode, InvokeNode insn, CodeWriter code) throws CodegenException {, +		MethodInlineAttr mia = (MethodInlineAttr) callMthNode.getAttributes().get(AttributeType.METHOD_INLINE);, +		if (mia == null) {, +			return false;, +		}, +		InsnNode inl = mia.getInsn();, +				int regNum = r.getRegNum();, +				if (regNum >= regs.length) {, +					LOG.warn("Unknown register number {} in method call: {} from {}", r, callMthNode, mth);, +					InsnArg repl = regs[regNum];, +						LOG.warn("Not passed register {} in method call: {} from {}", r, callMthNode, mth);, +			// revert changes in 'MethodInlineAttr', +		return true;, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		if (callMthNode != null && inlineMethod(callMthNode, insn, code)) {, +	private boolean inlineMethod(MethodNode callMthNode, InvokeNode insn, CodeWriter code) throws CodegenException {, +		MethodInlineAttr mia = (MethodInlineAttr) callMthNode.getAttributes().get(AttributeType.METHOD_INLINE);, +		if (mia == null) {, +			return false;, +		}, +		InsnNode inl = mia.getInsn();, +				int regNum = r.getRegNum();, +				if (regNum >= regs.length) {, +					LOG.warn("Unknown register number {} in method call: {} from {}", r, callMthNode, mth);, +					InsnArg repl = regs[regNum];, +						LOG.warn("Not passed register {} in method call: {} from {}", r, callMthNode, mth);, +			// revert changes in 'MethodInlineAttr', +		return true;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +	/**, +	 * Replace instruction arg with another using recursive search., +	 * <br>, +	 * <b>Caution:</b> this method don't change usage information for replaced argument., +	 */, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.ssa.SSATransform;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		if (callMthNode != null && inlineMethod(callMthNode, insn, code)) {, +	private boolean inlineMethod(MethodNode callMthNode, InvokeNode insn, CodeWriter code) throws CodegenException {, +		MethodInlineAttr mia = (MethodInlineAttr) callMthNode.getAttributes().get(AttributeType.METHOD_INLINE);, +		if (mia == null) {, +			return false;, +		}, +		InsnNode inl = mia.getInsn();, +				int regNum = r.getRegNum();, +				if (regNum >= regs.length) {, +					LOG.warn("Unknown register number {} in method call: {} from {}", r, callMthNode, mth);, +					InsnArg repl = regs[regNum];, +						LOG.warn("Not passed register {} in method call: {} from {}", r, callMthNode, mth);, +			// revert changes in 'MethodInlineAttr', +		return true;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +	/**, +	 * Replace instruction arg with another using recursive search., +	 * <br>, +	 * <b>Caution:</b> this method don't change usage information for replaced argument., +	 */, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/MethodInlineVisitor.java, +			// set arg from 'return' instruction]