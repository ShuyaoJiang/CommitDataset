[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +	protected final int target;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +	protected final int target;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	public int getTarget() {, +		return thenBlock == null ? target : thenBlock.getStartOffset();, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +	protected final int target;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	public int getTarget() {, +		return thenBlock == null ? target : thenBlock.getStartOffset();, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +	protected final int target;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	public int getTarget() {, +		return thenBlock == null ? target : thenBlock.getStartOffset();, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/Region.java, +import jadx.core.utils.Utils;, +		int size = blocks.size();, +		sb.append('(');, +		sb.append(size);, +		if (size > 0) {, +			sb.append(':');, +			Utils.listToString(sb, blocks, "|", IContainer::baseString);, +		sb.append(')');, +		return "R" + baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +	protected final int target;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	public int getTarget() {, +		return thenBlock == null ? target : thenBlock.getStartOffset();, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/Region.java, +import jadx.core.utils.Utils;, +		int size = blocks.size();, +		sb.append('(');, +		sb.append(size);, +		if (size > 0) {, +			sb.append(':');, +			Utils.listToString(sb, blocks, "|", IContainer::baseString);, +		sb.append(')');, +		return "R" + baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java, +				cond = not(new IfCondition(c.invert()));, +				return "!(" + first() + ")";, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +	protected final int target;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	public int getTarget() {, +		return thenBlock == null ? target : thenBlock.getStartOffset();, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/Region.java, +import jadx.core.utils.Utils;, +		int size = blocks.size();, +		sb.append('(');, +		sb.append(size);, +		if (size > 0) {, +			sb.append(':');, +			Utils.listToString(sb, blocks, "|", IContainer::baseString);, +		sb.append(')');, +		return "R" + baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java, +				cond = not(new IfCondition(c.invert()));, +				return "!(" + first() + ")";, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/GotoNode.java, +	protected final int target;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +	public int getTarget() {, +		return thenBlock == null ? target : thenBlock.getStartOffset();, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/Region.java, +import jadx.core.utils.Utils;, +		int size = blocks.size();, +		sb.append('(');, +		sb.append(size);, +		if (size > 0) {, +			sb.append(':');, +			Utils.listToString(sb, blocks, "|", IContainer::baseString);]