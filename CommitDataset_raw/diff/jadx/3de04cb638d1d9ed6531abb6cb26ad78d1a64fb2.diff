[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().addMultiLine(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().addMultiLine(Utils.getStackTrace(e));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().addMultiLine(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().addMultiLine(Utils.getStackTrace(e));, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +, +	/**, +	 * RegisterArg attribute for method arguments, +	 */, +	METHOD_ARGUMENT,, +, +	/**, +	 * Type of RegisterArg or SSAVar can't be changed, +	 */, +	IMMUTABLE_TYPE,, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().addMultiLine(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().addMultiLine(Utils.getStackTrace(e));, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +, +	/**, +	 * RegisterArg attribute for method arguments, +	 */, +	METHOD_ARGUMENT,, +, +	/**, +	 * Type of RegisterArg or SSAVar can't be changed, +	 */, +	IMMUTABLE_TYPE,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +		RegisterArg arg = InsnArg.reg(getResult().getRegNum(), getResult().getInitType());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().addMultiLine(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().addMultiLine(Utils.getStackTrace(e));, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +, +	/**, +	 * RegisterArg attribute for method arguments, +	 */, +	METHOD_ARGUMENT,, +, +	/**, +	 * Type of RegisterArg or SSAVar can't be changed, +	 */, +	IMMUTABLE_TYPE,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +		RegisterArg arg = InsnArg.reg(getResult().getRegNum(), getResult().getInitType());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/CodeVar.java, +	private ArgType type; // before type inference can be null and set only for immutable types, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().addMultiLine(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().addMultiLine(Utils.getStackTrace(e));, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +, +	/**, +	 * RegisterArg attribute for method arguments, +	 */, +	METHOD_ARGUMENT,, +, +	/**, +	 * Type of RegisterArg or SSAVar can't be changed, +	 */, +	IMMUTABLE_TYPE,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +		RegisterArg arg = InsnArg.reg(getResult().getRegNum(), getResult().getInitType());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/CodeVar.java, +	private ArgType type; // before type inference can be null and set only for immutable types, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		super(-1, field.getType());, +	public ArgType getType() {, +		return this.field.getType();, +	}, +, +	@Override, +	public ArgType getInitType() {, +		return this.field.getType();, +	}, +, +	@Override, +	public void setType(ArgType newType) {, +		throw new JadxRuntimeException("Can't set type for FieldArg");, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().addMultiLine(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().addMultiLine(Utils.getStackTrace(e));, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +, +	/**, +	 * RegisterArg attribute for method arguments, +	 */, +	METHOD_ARGUMENT,, +, +	/**, +	 * Type of RegisterArg or SSAVar can't be changed, +	 */, +	IMMUTABLE_TYPE,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +		RegisterArg arg = InsnArg.reg(getResult().getRegNum(), getResult().getInitType());]