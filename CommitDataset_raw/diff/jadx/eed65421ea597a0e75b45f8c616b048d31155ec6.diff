[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +						&& parentClass.equals(fieldsCls.getClassInfo()), +						&& field.getName().startsWith("this$") /* TODO: don't check name */) {, +		if (args.isEmpty() || mth.contains(AFlag.SKIP_FIRST_ARG)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +						&& parentClass.equals(fieldsCls.getClassInfo()), +						&& field.getName().startsWith("this$") /* TODO: don't check name */) {, +		if (args.isEmpty() || mth.contains(AFlag.SKIP_FIRST_ARG)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/MethodInlineVisitor.java, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.RegisterArg;, +import java.util.List;, +, +			BlockNode returnBlock = mth.getBasicBlocks().get(1);, +			if (returnBlock.contains(AFlag.RETURN) || returnBlock.getInstructions().isEmpty()) {, +				BlockNode firstBlock = mth.getBasicBlocks().get(0);, +				inlineMth(mth, firstBlock, returnBlock);, +	private static void inlineMth(MethodNode mth, BlockNode firstBlock, BlockNode returnBlock) {, +		List<InsnNode> insnList = firstBlock.getInstructions();, +		if (insnList.isEmpty()) {, +			return;, +		}, +		if (insnList.size() == 1) {, +			addInlineAttr(mth, insnList.get(0));, +			return;, +		}, +		// other field operations, +		if (insnList.size() == 2, +				&& returnBlock.getInstructions().size() == 1, +				&& !mth.getReturnType().equals(ArgType.VOID)) {, +			InsnNode get = insnList.get(0);, +			InsnNode put = insnList.get(1);, +			InsnArg retArg = returnBlock.getInstructions().get(0).getArg(0);, +			if (get.getType() == InsnType.IGET, +					&& put.getType() == InsnType.IPUT, +					&& retArg.isRegister(), +					&& get.getResult().equalRegisterAndType((RegisterArg) retArg)) {, +				RegisterArg retReg = (RegisterArg) retArg;, +				retReg.getSVar().removeUse(retReg);, +				CodeShrinker.shrinkMethod(mth);, +, +				insnList = firstBlock.getInstructions();, +				if (insnList.size() == 1) {, +					addInlineAttr(mth, insnList.get(0));, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ClassModifier.java, +						&& parentClass.equals(fieldsCls.getClassInfo()), +						&& field.getName().startsWith("this$") /* TODO: don't check name */) {, +		if (args.isEmpty() || mth.contains(AFlag.SKIP_FIRST_ARG)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/MethodInlineVisitor.java, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.RegisterArg;, +import java.util.List;, +, +			BlockNode returnBlock = mth.getBasicBlocks().get(1);, +			if (returnBlock.contains(AFlag.RETURN) || returnBlock.getInstructions().isEmpty()) {, +				BlockNode firstBlock = mth.getBasicBlocks().get(0);, +				inlineMth(mth, firstBlock, returnBlock);, +	private static void inlineMth(MethodNode mth, BlockNode firstBlock, BlockNode returnBlock) {, +		List<InsnNode> insnList = firstBlock.getInstructions();, +		if (insnList.isEmpty()) {, +			return;, +		}, +		if (insnList.size() == 1) {, +			addInlineAttr(mth, insnList.get(0));, +			return;, +		}, +		// other field operations, +		if (insnList.size() == 2, +				&& returnBlock.getInstructions().size() == 1, +				&& !mth.getReturnType().equals(ArgType.VOID)) {, +			InsnNode get = insnList.get(0);, +			InsnNode put = insnList.get(1);, +			InsnArg retArg = returnBlock.getInstructions().get(0).getArg(0);, +			if (get.getType() == InsnType.IGET, +					&& put.getType() == InsnType.IPUT, +					&& retArg.isRegister(), +					&& get.getResult().equalRegisterAndType((RegisterArg) retArg)) {, +				RegisterArg retReg = (RegisterArg) retArg;, +				retReg.getSVar().removeUse(retReg);, +				CodeShrinker.shrinkMethod(mth);, +, +				insnList = firstBlock.getInstructions();, +				if (insnList.size() == 1) {, +					addInlineAttr(mth, insnList.get(0));, +				}, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass5.java, +package jadx.tests.integration.inner;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.Map;, +]