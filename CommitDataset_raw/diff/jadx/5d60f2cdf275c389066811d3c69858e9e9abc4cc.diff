[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--no-imports"}, converter = InvertedBooleanConverter.class,, +			description = "disables use of imports, always writes entire package name"), +	protected boolean useImports = true;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +, +	@Override, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--no-imports"}, converter = InvertedBooleanConverter.class,, +			description = "disables use of imports, always writes entire package name"), +	protected boolean useImports = true;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	, +	boolean isUsingImports();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--no-imports"}, converter = InvertedBooleanConverter.class,, +			description = "disables use of imports, always writes entire package name"), +	protected boolean useImports = true;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	, +	boolean isUsingImports();, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +	private boolean useImports = false;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +, +	public void setUseImports(boolean useImports) {, +		this.useImports = useImports;, +	}, +, +	@Override, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--no-imports"}, converter = InvertedBooleanConverter.class,, +			description = "disables use of imports, always writes entire package name"), +	protected boolean useImports = true;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	, +	boolean isUsingImports();, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +	private boolean useImports = false;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +, +	public void setUseImports(boolean useImports) {, +		this.useImports = useImports;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +	private final boolean useImports;, +		this(cls, null, jadxArgs.isUsingImports(), jadxArgs.isFallbackMode(), jadxArgs.isShowInconsistentCode());, +		this(cls, parentClsGen, parentClsGen.useImports, parentClsGen.fallback, parentClsGen.showInconsistentCode);, +	public ClassGen(ClassNode cls, ClassGen parentClsGen, boolean useImports, boolean fallback, boolean showBadCode) {, +		this.useImports = useImports;, +		if (fallback || !useImports) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"--no-imports"}, converter = InvertedBooleanConverter.class,, +			description = "disables use of imports, always writes entire package name"), +	protected boolean useImports = true;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	, +	boolean isUsingImports();, +++ b/jadx-core/src/main/java/jadx/api/JadxArgs.java, +	private boolean useImports = false;, +, +	public boolean isUsingImports() {, +		return useImports;, +	}, +]