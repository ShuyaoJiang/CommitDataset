[+++ b/jadx-core/src/main/java/jadx/core/Consts.java, +	public static final String ANONYMOUS_CLASS_PREFIX = "AnonymousClass_";, +++ b/jadx-core/src/main/java/jadx/core/Consts.java, +	public static final String ANONYMOUS_CLASS_PREFIX = "AnonymousClass_";, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +					code.add('{');, +++ b/jadx-core/src/main/java/jadx/core/Consts.java, +	public static final String ANONYMOUS_CLASS_PREFIX = "AnonymousClass_";, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +					code.add('{');, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.RegionUtils;, +			if (cls.getSuperClass() != null && !cls.getSuperClass().isObject()) {, +			} else {, +			}, +			MethodNode defCtr = cls.getDefaultConstructor();, +			if (RegionUtils.notEmpty(defCtr.getRegion())) {, +				defCtr.getAttributes().add(AttributeFlag.ANONYMOUS_CONSTRUCTOR);, +			} else {, +				defCtr.getAttributes().add(AttributeFlag.DONT_GENERATE);, +			}, +++ b/jadx-core/src/main/java/jadx/core/Consts.java, +	public static final String ANONYMOUS_CLASS_PREFIX = "AnonymousClass_";, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +					code.add('{');, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.RegionUtils;, +			if (cls.getSuperClass() != null && !cls.getSuperClass().isObject()) {, +			} else {, +			}, +			MethodNode defCtr = cls.getDefaultConstructor();, +			if (RegionUtils.notEmpty(defCtr.getRegion())) {, +				defCtr.getAttributes().add(AttributeFlag.ANONYMOUS_CONSTRUCTOR);, +			} else {, +				defCtr.getAttributes().add(AttributeFlag.DONT_GENERATE);, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.attributes.AttributeFlag;, +, +			code.attachAnnotation(mth);, +			return;, +		}, +		if (mth.getAttributes().contains(AttributeFlag.ANONYMOUS_CONSTRUCTOR)) {, +			// don't add method name and arguments, +			code.startLine();, +			code.attachAnnotation(mth);, +			return;, +		}, +		if (classGen.makeGenericMap(code, mth.getGenericMap())) {, +		}, +			if (args.size() == 2) {, +			} else if (args.size() > 2) {, +			} else {, +		}, +++ b/jadx-core/src/main/java/jadx/core/Consts.java, +	public static final String ANONYMOUS_CLASS_PREFIX = "AnonymousClass_";, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +					code.add('{');, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.RegionUtils;, +			if (cls.getSuperClass() != null && !cls.getSuperClass().isObject()) {, +			} else {, +			}, +			MethodNode defCtr = cls.getDefaultConstructor();, +			if (RegionUtils.notEmpty(defCtr.getRegion())) {, +				defCtr.getAttributes().add(AttributeFlag.ANONYMOUS_CONSTRUCTOR);, +			} else {, +				defCtr.getAttributes().add(AttributeFlag.DONT_GENERATE);, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.attributes.AttributeFlag;, +, +			code.attachAnnotation(mth);, +			return;, +		}, +		if (mth.getAttributes().contains(AttributeFlag.ANONYMOUS_CONSTRUCTOR)) {, +			// don't add method name and arguments, +			code.startLine();, +			code.attachAnnotation(mth);, +			return;, +		}, +		if (classGen.makeGenericMap(code, mth.getGenericMap())) {, +		}, +			if (args.size() == 2) {, +			} else if (args.size() > 2) {, +			} else {, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributeFlag.java, +	ANONYMOUS_CONSTRUCTOR,, +++ b/jadx-core/src/main/java/jadx/core/Consts.java, +	public static final String ANONYMOUS_CLASS_PREFIX = "AnonymousClass_";, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +					code.add('{');, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.RegionUtils;, +			if (cls.getSuperClass() != null && !cls.getSuperClass().isObject()) {, +			} else {, +			}, +			MethodNode defCtr = cls.getDefaultConstructor();, +			if (RegionUtils.notEmpty(defCtr.getRegion())) {]