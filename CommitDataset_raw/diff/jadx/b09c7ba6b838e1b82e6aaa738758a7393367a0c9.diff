[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +			SwingUtilities.invokeLater(new MainWindow(settings)::init);, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +			SwingUtilities.invokeLater(new MainWindow(settings)::init);, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +		Runnable save = () -> {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +			SwingUtilities.invokeLater(new MainWindow(settings)::init);, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +		Runnable save = () -> {, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +				String msg = NLS.str("message.indexingClassesSkipped", searchIndex.getSkippedCount());, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +++ b/jadx-gui/src/main/java/jadx/gui/JadxGUI.java, +			SwingUtilities.invokeLater(new MainWindow(settings)::init);, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +		Runnable save = () -> {, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +				String msg = NLS.str("message.indexingClassesSkipped", searchIndex.getSkippedCount());, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxProject.java, +package jadx.gui.settings;, +, +import java.io.BufferedWriter;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.util.Arrays;, +import java.util.List;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import com.google.gson.Gson;, +import com.google.gson.GsonBuilder;, +, +import jadx.gui.utils.PathTypeAdapter;, +, +public class JadxProject {, +, +	private static final Logger LOG = LoggerFactory.getLogger(JadxProject.class);, +	private static final int CURRENT_SETTINGS_VERSION = 0;, +, +	public static final String PROJECT_EXTENSION = "jadx";, +, +	private static final Gson GSON = new GsonBuilder(), +			.registerTypeHierarchyAdapter(Path.class, PathTypeAdapter.singleton()), +			.create();, +, +	private transient JadxSettings settings;, +	private transient String name = "New Project";, +	private transient Path projectPath;, +	private List<Path> filesPath;, +	private transient boolean saved;, +	private transient boolean initial = true;, +, +	private int projectVersion = 0;, +, +	public JadxProject(JadxSettings settings) {, +		this.settings = settings;, +	}, +, +	public Path getProjectPath() {, +		return projectPath;, +	}, +, +	private void setProjectPath(Path projectPath) {, +		this.projectPath = projectPath;, +		if (projectVersion != CURRENT_SETTINGS_VERSION) {, +			upgradeSettings(projectVersion);, +		}, +		name = projectPath.getFileName().toString();, +		name = name.substring(0, name.lastIndexOf('.'));, +		changed();, +	}, +, +	public Path getFilePath() {, +		return filesPath == null ? null : filesPath.get(0);, +	}, +, +	public void setFilePath(Path filePath) {, +		if (!filePath.equals(getFilePath())) {, +			this.filesPath = Arrays.asList(filePath);, +			changed();, +		}, +	}, +, +	private void changed() {, +		if (settings.isAutoSaveProject()) {, +			save();, +		}, +		else {, +			saved = false;, +		}, +		initial = false;, +	}, +, +	public String getName() {]