[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new EliminatePhiNodes());, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new EliminatePhiNodes());, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +				boolean wrap = isArgWrapNeeded(firstArg);, +		addArg(code, firstArg, isArgWrapNeeded(firstArg));, +		addArg(code, secondArg, isArgWrapNeeded(secondArg));, +		return !condition.isCompare() && condition.getMode() != IfCondition.Mode.NOT;, +	private static boolean isArgWrapNeeded(InsnArg arg) {, +		InsnType insnType = insn.getType();, +		if (insnType == InsnType.ARITH) {, +		} else {, +			switch (insnType) {, +				case INVOKE:, +				case SGET:, +				case IGET:, +				case AGET:, +				case CONST:, +				case ARRAY_LENGTH:, +				default:, +					return true;, +			}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new EliminatePhiNodes());, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +				boolean wrap = isArgWrapNeeded(firstArg);, +		addArg(code, firstArg, isArgWrapNeeded(firstArg));, +		addArg(code, secondArg, isArgWrapNeeded(secondArg));, +		return !condition.isCompare() && condition.getMode() != IfCondition.Mode.NOT;, +	private static boolean isArgWrapNeeded(InsnArg arg) {, +		InsnType insnType = insn.getType();, +		if (insnType == InsnType.ARITH) {, +		} else {, +			switch (insnType) {, +				case INVOKE:, +				case SGET:, +				case IGET:, +				case AGET:, +				case CONST:, +				case ARRAY_LENGTH:, +				default:, +					return true;, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +	private AType() {, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new EliminatePhiNodes());, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +				boolean wrap = isArgWrapNeeded(firstArg);, +		addArg(code, firstArg, isArgWrapNeeded(firstArg));, +		addArg(code, secondArg, isArgWrapNeeded(secondArg));, +		return !condition.isCompare() && condition.getMode() != IfCondition.Mode.NOT;, +	private static boolean isArgWrapNeeded(InsnArg arg) {, +		InsnType insnType = insn.getType();, +		if (insnType == InsnType.ARITH) {, +		} else {, +			switch (insnType) {, +				case INVOKE:, +				case SGET:, +				case IGET:, +				case AGET:, +				case CONST:, +				case ARRAY_LENGTH:, +				default:, +					return true;, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +	private AType() {, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/IfCondition.java, +		return new IfCondition(mode, Arrays.asList(a, b));, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new EliminatePhiNodes());, +			if (args.isCFGOutput()) {, +				passes.add(new DotGraphVisitor(outDir, false));, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +				boolean wrap = isArgWrapNeeded(firstArg);, +		addArg(code, firstArg, isArgWrapNeeded(firstArg));]