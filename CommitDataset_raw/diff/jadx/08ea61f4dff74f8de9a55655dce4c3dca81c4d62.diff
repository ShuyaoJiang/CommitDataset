[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, +		DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, +		DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionVisitor visitor) {, +	public static void traverseIterative(MethodNode mth, IRegionIterativeVisitor visitor) {, +			repeat = traverseIterativeInternal(mth, visitor, mth.getRegion());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, +		DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionVisitor visitor) {, +	public static void traverseIterative(MethodNode mth, IRegionIterativeVisitor visitor) {, +			repeat = traverseIterativeInternal(mth, visitor, mth.getRegion());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfRegionVisitor.java, +	private static final TernaryVisitor TERNARY_VISITOR = new TernaryVisitor();, +, +		DepthRegionTraversal.traverseIterative(mth, TERNARY_VISITOR);, +		DepthRegionTraversal.traverse(mth, this);, +		DepthRegionTraversal.traverseIterative(mth, this);, +	}, +, +	private static class TernaryVisitor implements IRegionIterativeVisitor {, +			return region instanceof IfRegion, +					&& TernaryMod.makeTernaryInsn(mth, (IfRegion) region);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, +		DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionVisitor visitor) {, +	public static void traverseIterative(MethodNode mth, IRegionIterativeVisitor visitor) {, +			repeat = traverseIterativeInternal(mth, visitor, mth.getRegion());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfRegionVisitor.java, +	private static final TernaryVisitor TERNARY_VISITOR = new TernaryVisitor();, +, +		DepthRegionTraversal.traverseIterative(mth, TERNARY_VISITOR);, +		DepthRegionTraversal.traverse(mth, this);, +		DepthRegionTraversal.traverseIterative(mth, this);, +	}, +, +	private static class TernaryVisitor implements IRegionIterativeVisitor {, +			return region instanceof IfRegion, +					&& TernaryMod.makeTernaryInsn(mth, (IfRegion) region);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +		DepthRegionTraversal.traverse(mth, this);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, +		DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionVisitor visitor) {, +	public static void traverseIterative(MethodNode mth, IRegionIterativeVisitor visitor) {, +			repeat = traverseIterativeInternal(mth, visitor, mth.getRegion());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfRegionVisitor.java, +	private static final TernaryVisitor TERNARY_VISITOR = new TernaryVisitor();, +, +		DepthRegionTraversal.traverseIterative(mth, TERNARY_VISITOR);, +		DepthRegionTraversal.traverse(mth, this);, +		DepthRegionTraversal.traverseIterative(mth, this);, +	}, +, +	private static class TernaryVisitor implements IRegionIterativeVisitor {, +			return region instanceof IfRegion, +					&& TernaryMod.makeTernaryInsn(mth, (IfRegion) region);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +		DepthRegionTraversal.traverse(mth, this);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/ProcessTryCatchRegions.java, +			DepthRegionTraversal.traverseIncludingExcHandlers(mth, new AbstractRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		DepthRegionTraversal.traverse(mth, new AbstractRegionVisitor() {, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CleanRegions.java, +		DepthRegionTraversal.traverse(mth, removeEmptyBlocks);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/DepthRegionTraversal.java, +	public static void traverseIncludingExcHandlers(MethodNode mth, IRegionVisitor visitor) {, +	public static void traverseIterative(MethodNode mth, IRegionIterativeVisitor visitor) {, +			repeat = traverseIterativeInternal(mth, visitor, mth.getRegion());, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfRegionVisitor.java, +	private static final TernaryVisitor TERNARY_VISITOR = new TernaryVisitor();, +, +		DepthRegionTraversal.traverseIterative(mth, TERNARY_VISITOR);, +		DepthRegionTraversal.traverse(mth, this);, +		DepthRegionTraversal.traverseIterative(mth, this);, +	}, +]