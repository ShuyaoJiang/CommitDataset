[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	JavaMethod getJavaMethodByNode(MethodNode mth) {, +		JavaMethod javaMethod = methodsMap.get(mth);, +		if (javaMethod != null) {, +			return javaMethod;, +		}, +		// parent class not loaded yet, +		JavaClass javaClass = classesMap.get(mth.getParentClass());, +		if (javaClass != null) {, +			javaClass.decompile();, +			return methodsMap.get(mth);, +		}, +		return null;, +	}, +, +	JavaField getJavaFieldByNode(FieldNode fld) {, +		JavaField javaField = fieldsMap.get(fld);, +		if (javaField != null) {, +			return javaField;, +		}, +		// parent class not loaded yet, +		JavaClass javaClass = classesMap.get(fld.getParentClass());, +		if (javaClass != null) {, +			javaClass.decompile();, +			return fieldsMap.get(fld);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	JavaMethod getJavaMethodByNode(MethodNode mth) {, +		JavaMethod javaMethod = methodsMap.get(mth);, +		if (javaMethod != null) {, +			return javaMethod;, +		}, +		// parent class not loaded yet, +		JavaClass javaClass = classesMap.get(mth.getParentClass());, +		if (javaClass != null) {, +			javaClass.decompile();, +			return methodsMap.get(mth);, +		}, +		return null;, +	}, +, +	JavaField getJavaFieldByNode(FieldNode fld) {, +		JavaField javaField = fieldsMap.get(fld);, +		if (javaField != null) {, +			return javaField;, +		}, +		// parent class not loaded yet, +		JavaClass javaClass = classesMap.get(fld.getParentClass());, +		if (javaClass != null) {, +			javaClass.decompile();, +			return fieldsMap.get(fld);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +			return getRootDecompiler().getJavaMethodByNode(((MethodNode) obj));, +			return getRootDecompiler().getJavaFieldByNode((FieldNode) obj);, +		return getFullName();, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	JavaMethod getJavaMethodByNode(MethodNode mth) {, +		JavaMethod javaMethod = methodsMap.get(mth);, +		if (javaMethod != null) {, +			return javaMethod;, +		}, +		// parent class not loaded yet, +		JavaClass javaClass = classesMap.get(mth.getParentClass());, +		if (javaClass != null) {, +			javaClass.decompile();, +			return methodsMap.get(mth);, +		}, +		return null;, +	}, +, +	JavaField getJavaFieldByNode(FieldNode fld) {, +		JavaField javaField = fieldsMap.get(fld);, +		if (javaField != null) {, +			return javaField;, +		}, +		// parent class not loaded yet, +		JavaClass javaClass = classesMap.get(fld.getParentClass());, +		if (javaClass != null) {, +			javaClass.decompile();, +			return fieldsMap.get(fld);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +			return getRootDecompiler().getJavaMethodByNode(((MethodNode) obj));, +			return getRootDecompiler().getJavaFieldByNode((FieldNode) obj);, +		return getFullName();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			List<ClassInfo> sortedImports = new ArrayList<>(imports);, +			sortedImports.sort(Comparator.comparing(classInfo -> classInfo.getAlias().getFullName()));, +			sortedImports.forEach(classInfo -> {, +				ClassNode classNode = cls.root().resolveClass(classInfo);]