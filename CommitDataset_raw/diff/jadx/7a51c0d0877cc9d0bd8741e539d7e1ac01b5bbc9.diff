[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +		throw new UnsupportedOperationException("ArgType.getObject(), call class: " + this.getClass());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +		throw new UnsupportedOperationException("ArgType.getObject(), call class: " + this.getClass());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/LocalVar.java, +			try {, +			} catch (Exception e) {, +				LOG.error("Can't parse signature for local variable: " + sign, e);, +			}, +		boolean apply;, +			if (!type.getArrayRootElement().getObject().equals(el.getObject())) {, +			apply = false;, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +		throw new UnsupportedOperationException("ArgType.getObject(), call class: " + this.getClass());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/LocalVar.java, +			try {, +			} catch (Exception e) {, +				LOG.error("Can't parse signature for local variable: " + sign, e);, +			}, +		boolean apply;, +			if (!type.getArrayRootElement().getObject().equals(el.getObject())) {, +			apply = false;, +++ b/jadx-core/src/test/java/jadx/tests/internal/generics/TestGenerics4.java, +package jadx.tests.internal.generics;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.hamcrest.CoreMatchers.not;, +import static org.junit.Assert.assertThat;, +, +public class TestGenerics4 extends InternalJadxTest {, +, +	public static class TestCls {, +, +		public static Class<?> method(int i) {, +			Class<?>[] a = new Class<?>[0];, +			return a[a.length - i];, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +		System.out.println(code);, +, +		assertThat(code, containsString("Class<?>[] a ="));, +		assertThat(code, not(containsString("Class[] a =")));, +	}, +}]