[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +			if (!arg.isThis(), +					&& (assignPos >= inlineBorder || !canMove(assignPos, inlineBorder))) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +			if (!arg.isThis(), +					&& (assignPos >= inlineBorder || !canMove(assignPos, inlineBorder))) {, +++ b/jadx-core/src/test/java/jadx/tests/internal/inline/TestInlineInLoop.java, +package jadx.tests.internal.inline;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static jadx.tests.utils.JadxMatchers.containsOne;, +import static jadx.tests.utils.JadxMatchers.countString;, +import static org.junit.Assert.assertThat;, +, +public class TestInlineInLoop extends InternalJadxTest {, +, +	public static class TestCls {, +		public static void main(String[] args) throws Exception {, +			int a = 0;, +			int b = 4;, +			int c = 0;, +			while (a < 12) {, +				if (b + a < 9 && b < 8) {, +					if (b >= 2 && a > -1 && b < 6) {, +						System.out.println("OK");, +						c = b + 1;, +					}, +					c = b;, +				}, +				c = b;, +				b++;, +				b = c;, +				a++;, +			}, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +		System.out.println(code);, +, +		assertThat(code, containsOne("int c"));, +		assertThat(code, containsOne("c = b + 1"));, +		assertThat(code, countString(2, "c = b;"));, +		assertThat(code, containsOne("b++;"));, +		assertThat(code, containsOne("b = c"));, +		assertThat(code, containsOne("a++;"));, +	}, +}]