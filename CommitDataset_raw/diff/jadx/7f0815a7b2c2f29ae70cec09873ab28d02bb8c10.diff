[+++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.FileUtils;, +		FileUtils.makeDirsForFile(output);, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.FileUtils;, +		FileUtils.makeDirsForFile(output);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import jadx.core.utils.files.FileUtils;, +			FileUtils.makeDirsForFile(file);, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.FileUtils;, +		FileUtils.makeDirsForFile(output);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import jadx.core.utils.files.FileUtils;, +			FileUtils.makeDirsForFile(file);, +++ b/jadx-core/src/main/java/jadx/core/utils/Utils.java, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.FileUtils;, +		FileUtils.makeDirsForFile(output);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import jadx.core.utils.files.FileUtils;, +			FileUtils.makeDirsForFile(file);, +++ b/jadx-core/src/main/java/jadx/core/utils/Utils.java, +++ b/jadx-core/src/main/java/jadx/core/utils/files/FileUtils.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +, +, +	public static void makeDirsForFile(File file) {, +		File dir = file.getParentFile();, +		if (dir != null && !dir.exists()) {, +			// if directory already created in other thread mkdirs will return false,, +			// so check dir existence again, +			if (!dir.mkdirs() && !dir.exists()) {, +				throw new JadxRuntimeException("Can't create directory " + dir);, +			}, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +import jadx.core.utils.files.FileUtils;, +		FileUtils.makeDirsForFile(output);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import jadx.core.utils.files.FileUtils;, +			FileUtils.makeDirsForFile(file);, +++ b/jadx-core/src/main/java/jadx/core/utils/Utils.java, +++ b/jadx-core/src/main/java/jadx/core/utils/files/FileUtils.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +, +, +	public static void makeDirsForFile(File file) {, +		File dir = file.getParentFile();, +		if (dir != null && !dir.exists()) {, +			// if directory already created in other thread mkdirs will return false,, +			// so check dir existence again, +			if (!dir.mkdirs() && !dir.exists()) {, +				throw new JadxRuntimeException("Can't create directory " + dir);, +			}, +		}, +	}, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import jadx.tests.api.compiler.StaticCompiler;, +import java.util.Arrays;, +import java.util.Iterator;, +import static org.junit.Assert.assertNotEquals;, +	private static final String TEST_DIRECTORY = "src/test/java";, +	private static final String TEST_DIRECTORY2 = "jadx-core/" + TEST_DIRECTORY;, +, +	protected boolean withDebugInfo = true;, +, +			assertTrue("Compilation failed", result);, +		List<File> list;, +		if (!withDebugInfo) {, +			list = compileClass(cls);, +		} else {, +			list = getClassFilesWithInners(cls);, +			if (list.isEmpty()) {, +				list = compileClass(cls);, +			}, +		}, +		assertNotEquals("File list is empty", 0, list.size());, +	private static File createTempDir(String prefix) throws IOException {, +		File baseDir = new File(System.getProperty("java.io.tmpdir"));, +		String baseName = prefix + "-" + System.nanoTime();, +		for (int counter = 1; counter < 1000; counter++) {, +			File tempDir = new File(baseDir, baseName + counter);, +			if (tempDir.mkdir()) {, +				return tempDir;, +			}, +		}, +		throw new IOException("Failed to create temp directory");, +	}, +, +	private List<File> compileClass(Class<?> cls) throws IOException {, +		String fileName = cls.getName();, +		int end = fileName.indexOf('$');, +		if (end != -1) {, +			fileName = fileName.substring(0, end);, +		}, +		fileName = fileName.replace('.', '/') + ".java";, +		File file = new File(TEST_DIRECTORY, fileName);, +		if (!file.exists()) {]