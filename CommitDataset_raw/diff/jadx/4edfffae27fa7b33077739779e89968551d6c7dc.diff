[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				boolean wrap = state.contains(IGState.BODY_ONLY);, +				if (wrap), +					code.add("(");, +				code.add("(");, +				code.add(") ");, +				code.add(arg(insn.getArg(0)));, +				if (wrap), +					code.add(")");, +	private void addArgs(CodeWriter code, InsnNode insn, int k) throws CodegenException {, +		int argsCount = insn.getArgsCount();, +		code.add('(');, +		if (k < argsCount) {, +			code.add(arg(insn.getArg(k), false));, +			for (int i = k + 1; i < argsCount; i++) {, +				code.add(", ");, +				code.add(arg(insn.getArg(i), false));, +			}, +		}, +		code.add(')');, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				boolean wrap = state.contains(IGState.BODY_ONLY);, +				if (wrap), +					code.add("(");, +				code.add("(");, +				code.add(") ");, +				code.add(arg(insn.getArg(0)));, +				if (wrap), +					code.add(")");, +	private void addArgs(CodeWriter code, InsnNode insn, int k) throws CodegenException {, +		int argsCount = insn.getArgsCount();, +		code.add('(');, +		if (k < argsCount) {, +			code.add(arg(insn.getArg(k), false));, +			for (int i = k + 1; i < argsCount; i++) {, +				code.add(", ");, +				code.add(arg(insn.getArg(i), false));, +			}, +		}, +		code.add(')');, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +	public static boolean isCastNeeded(ArgType from, ArgType to) {, +		if (from.equals(to)) {, +			return false;, +		}, +		if (from.isObject() && to.isObject(), +				&& clsp.isImplements(from.getObject(), to.getObject())) {, +			return false;, +		}, +		return true;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				boolean wrap = state.contains(IGState.BODY_ONLY);, +				if (wrap), +					code.add("(");, +				code.add("(");, +				code.add(") ");, +				code.add(arg(insn.getArg(0)));, +				if (wrap), +					code.add(")");, +	private void addArgs(CodeWriter code, InsnNode insn, int k) throws CodegenException {, +		int argsCount = insn.getArgsCount();, +		code.add('(');, +		if (k < argsCount) {, +			code.add(arg(insn.getArg(k), false));, +			for (int i = k + 1; i < argsCount; i++) {, +				code.add(", ");, +				code.add(arg(insn.getArg(i), false));, +			}, +		}, +		code.add(')');, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +	public static boolean isCastNeeded(ArgType from, ArgType to) {, +		if (from.equals(to)) {, +			return false;, +		}, +		if (from.isObject() && to.isObject(), +				&& clsp.isImplements(from.getObject(), to.getObject())) {, +			return false;, +		}, +		return true;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +			if (cls.getClassDataOffset() != 0) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				boolean wrap = state.contains(IGState.BODY_ONLY);, +				if (wrap), +					code.add("(");, +				code.add("(");, +				code.add(") ");, +				code.add(arg(insn.getArg(0)));, +				if (wrap)]