[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +			if (threadsCount <= 0) {, +			}, +					if (file.exists()) {, +					} else {, +			}, +			if (input.size() > 1) {, +			}, +			if (outDirName != null) {, +			}, +			if (len > maxNamesLen) {, +		}, +		for (int i = 0; i < count; i++) {, +	}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +			if (threadsCount <= 0) {, +			}, +					if (file.exists()) {, +					} else {, +			}, +			if (input.size() > 1) {, +			}, +			if (outDirName != null) {, +			}, +			if (len > maxNamesLen) {, +		}, +		for (int i = 0; i < count; i++) {, +	}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		loadFiles(Collections.singletonList(file));, +		final List<IDexTreeVisitor> passList = new ArrayList<IDexTreeVisitor>(passes);, +		for (final ClassNode cls : root.getClasses(false)) {, +				Runnable job = new Runnable() {, +					@Override, +					public void run() {, +						ProcessClass.process(cls, passList);, +					}, +				};, +		ProcessClass.process(cls, passes);, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +			if (threadsCount <= 0) {, +			}, +					if (file.exists()) {, +					} else {, +			}, +			if (input.size() > 1) {, +			}, +			if (outDirName != null) {, +			}, +			if (len > maxNamesLen) {, +		}, +		for (int i = 0; i < count; i++) {, +	}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		loadFiles(Collections.singletonList(file));, +		final List<IDexTreeVisitor> passList = new ArrayList<IDexTreeVisitor>(passes);, +		for (final ClassNode cls : root.getClasses(false)) {, +				Runnable job = new Runnable() {, +					@Override, +					public void run() {, +						ProcessClass.process(cls, passList);, +					}, +				};, +		ProcessClass.process(cls, passes);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.MethodInlineVisitor;, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +			if (threadsCount <= 0) {, +			}, +					if (file.exists()) {, +					} else {, +			}, +			if (input.size() > 1) {, +			}, +			if (outDirName != null) {, +			}, +			if (len > maxNamesLen) {, +		}, +		for (int i = 0; i < count; i++) {, +	}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +		loadFiles(Collections.singletonList(file));, +		final List<IDexTreeVisitor> passList = new ArrayList<IDexTreeVisitor>(passes);, +		for (final ClassNode cls : root.getClasses(false)) {, +				Runnable job = new Runnable() {, +					@Override, +					public void run() {, +						ProcessClass.process(cls, passList);, +					}, +				};, +		ProcessClass.process(cls, passes);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.MethodInlineVisitor;, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +public final class ProcessClass {, +	private ProcessClass() {, +	public static void process(ClassNode cls, List<IDexTreeVisitor> passes) {, +		} catch (Exception e) {]