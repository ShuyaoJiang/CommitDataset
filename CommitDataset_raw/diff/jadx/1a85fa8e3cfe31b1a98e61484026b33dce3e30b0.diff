[+++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +		return "IfInfo: then: " + thenBlock + ", else: " + elseBlock;, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +		return "IfInfo: then: " + thenBlock + ", else: " + elseBlock;, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java, +		return body == null ? "-" : body.baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +		return "IfInfo: then: " + thenBlock + ", else: " + elseBlock;, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java, +		return body == null ? "-" : body.baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		// printRegion(mth);, +	private void printRegion(MethodNode mth) {, +		LOG.debug("|" + mth.toString());, +		printRegion(mth, mth.getRegion(), "| ");, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +		return "IfInfo: then: " + thenBlock + ", else: " + elseBlock;, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java, +		return body == null ? "-" : body.baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		// printRegion(mth);, +	private void printRegion(MethodNode mth) {, +		LOG.debug("|" + mth.toString());, +		printRegion(mth, mth.getRegion(), "| ");, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +import static jadx.core.dex.visitors.regions.RegionMaker.isEqualPaths;, +import static jadx.core.dex.visitors.regions.RegionMaker.isReturnBlocks;, +			pred = BlockUtils.skipSyntheticPredecessor(pred);, +		if (!isEqualPaths(curThen, nextIf.getThenBlock()), +				&& !isEqualPaths(curElse, nextIf.getElseBlock())) {, +			otherBranchBlock = BlockUtils.skipSyntheticSuccessor(otherBranchBlock);, +				if (!canMerge(currentIf, nextIf, followThenBranch)) {, +					return currentIf;, +				}, +		return isEqualPaths(currentIf.getElseBlock(), nextIf.getThenBlock()), +				|| isEqualPaths(currentIf.getThenBlock(), nextIf.getElseBlock());, +	}, +, +	private static boolean canMerge(IfInfo a, IfInfo b, boolean followThenBranch) {, +		if (followThenBranch) {, +			return isEqualPaths(a.getElseBlock(), b.getElseBlock());, +		} else {, +			return isEqualPaths(a.getThenBlock(), b.getThenBlock());, +		}, +		// skip synthetic successor if both parts leads to same block, +		BlockNode thenBlock;, +		BlockNode elseBlock;, +		if (followThenBranch) {, +			thenBlock = second.getThenBlock();, +			elseBlock = getCrossBlock(first.getElseBlock(), second.getElseBlock());, +		} else {, +			thenBlock = getCrossBlock(first.getThenBlock(), second.getThenBlock());, +			elseBlock = second.getElseBlock();, +		}, +		IfInfo result = new IfInfo(condition, thenBlock, elseBlock);, +	private static BlockNode getCrossBlock(BlockNode first, BlockNode second) {, +		if (isSameBlocks(first, second)) {, +			return second;, +		}, +		BlockNode firstSkip = BlockUtils.skipSyntheticSuccessor(first);, +		if (isSameBlocks(firstSkip, second)) {, +			return second;, +		}, +		BlockNode secondSkip = BlockUtils.skipSyntheticSuccessor(second);, +		if (isSameBlocks(firstSkip, secondSkip) || isSameBlocks(first, secondSkip)) {, +			return secondSkip;, +		}, +		throw new JadxRuntimeException("Unexpected merge pattern");, +	}, +, +	private static boolean isSameBlocks(BlockNode first, BlockNode second) {, +		return first == second || isReturnBlocks(first, second);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +		return "IfInfo: then: " + thenBlock + ", else: " + elseBlock;, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/loops/LoopRegion.java, +		return body == null ? "-" : body.baseString();, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +		// printRegion(mth);, +	private void printRegion(MethodNode mth) {, +		LOG.debug("|" + mth.toString());, +		printRegion(mth, mth.getRegion(), "| ");, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +import static jadx.core.dex.visitors.regions.RegionMaker.isEqualPaths;, +import static jadx.core.dex.visitors.regions.RegionMaker.isReturnBlocks;, +			pred = BlockUtils.skipSyntheticPredecessor(pred);, +		if (!isEqualPaths(curThen, nextIf.getThenBlock()), +				&& !isEqualPaths(curElse, nextIf.getElseBlock())) {, +			otherBranchBlock = BlockUtils.skipSyntheticSuccessor(otherBranchBlock);, +				if (!canMerge(currentIf, nextIf, followThenBranch)) {, +					return currentIf;]