[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +, +			default:, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +, +			default:, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/PrepareForCodeGen.java, +/**, + * Prepare instructions for code generation pass,, + * most of this modification breaks register dependencies,, + * so this pass must be just before CodeGen., + */, +			checkInline(block);, +			removeParenthesis(block);, +	private static void checkInline(BlockNode block) {, +		List<InsnNode> list = block.getInstructions();, +		for (int i = 0; i < list.size(); i++) {, +			InsnNode insn = list.get(i);, +			// replace 'move' with inner wrapped instruction, +			if (insn.getType() == InsnType.MOVE, +					&& insn.getArg(0).isInsnWrap(), +					&& !insn.getAttributes().contains(AttributeFlag.DECLARE_VAR)) {, +				InsnNode wrapInsn = ((InsnWrapArg)insn.getArg(0)).getWrapInsn();, +				wrapInsn.setResult(insn.getResult());, +				list.set(i, wrapInsn);, +			}, +		}, +	}, +, +	private static void removeParenthesis(BlockNode block) {, +	/**, +	 * Remove parenthesis for wrapped insn  in arith '+' or '-', +	 * ('(a + b) +c' => 'a + b + c'), +	 */, +	/**, +	 * Replace arithmetic operation with short form, +	 * ('a = a + 2' => 'a += 2'), +	 */, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/InsnNode.java, +, +			default:, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/PrepareForCodeGen.java, +/**, + * Prepare instructions for code generation pass,, + * most of this modification breaks register dependencies,, + * so this pass must be just before CodeGen., + */, +			checkInline(block);, +			removeParenthesis(block);, +	private static void checkInline(BlockNode block) {, +		List<InsnNode> list = block.getInstructions();, +		for (int i = 0; i < list.size(); i++) {, +			InsnNode insn = list.get(i);, +			// replace 'move' with inner wrapped instruction, +			if (insn.getType() == InsnType.MOVE, +					&& insn.getArg(0).isInsnWrap(), +					&& !insn.getAttributes().contains(AttributeFlag.DECLARE_VAR)) {, +				InsnNode wrapInsn = ((InsnWrapArg)insn.getArg(0)).getWrapInsn();, +				wrapInsn.setResult(insn.getResult());, +				list.set(i, wrapInsn);, +			}, +		}, +	}, +, +	private static void removeParenthesis(BlockNode block) {, +	/**, +	 * Remove parenthesis for wrapped insn  in arith '+' or '-', +	 * ('(a + b) +c' => 'a + b + c'), +	 */, +	/**, +	 * Replace arithmetic operation with short form, +	 * ('a = a + 2' => 'a += 2'), +	 */, +++ b/jadx-core/src/test/java/jadx/tests/internal/TestArgInline.java, +import org.junit.Test;, +, +	@Test, +, +		assertThat(code, not(containsString("a = a + 1;")));]