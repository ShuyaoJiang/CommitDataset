[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +		if (hasNextCall == null || nextCall == null, +				|| !checkInvoke(hasNextCall, "java.util.Iterator", "hasNext()Z", 0), +					if (castArg != null && castArg.getParentInsn() != null) {, +		ArgType iterableType = iterableArg.getType();, +		ArgType varType = iterVar.getType();, +		if (iterableType.isGeneric()) {, +			ArgType[] genericTypes = iterableType.getGenericTypes();, +			if (genericTypes == null || genericTypes.length != 1) {, +				return false;, +			}, +			if (gType.equals(varType)) {, +			if (gType.isGenericType()) {, +				iterVar.setType(gType);, +				return true;, +			if (ArgType.isInstanceOf(gType, varType)) {, +				return true;, +			}, +			LOG.warn("Generic type differs: {} and {}", gType, varType);, +			return false;, +		}, +		iterableType = ArgType.generic(iterableType.getObject(), new ArgType[]{varType});, +		iterableArg.setType(iterableType);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/LoopRegionVisitor.java, +		if (hasNextCall == null || nextCall == null, +				|| !checkInvoke(hasNextCall, "java.util.Iterator", "hasNext()Z", 0), +					if (castArg != null && castArg.getParentInsn() != null) {, +		ArgType iterableType = iterableArg.getType();, +		ArgType varType = iterVar.getType();, +		if (iterableType.isGeneric()) {, +			ArgType[] genericTypes = iterableType.getGenericTypes();, +			if (genericTypes == null || genericTypes.length != 1) {, +				return false;, +			}, +			if (gType.equals(varType)) {, +			if (gType.isGenericType()) {, +				iterVar.setType(gType);, +				return true;, +			if (ArgType.isInstanceOf(gType, varType)) {, +				return true;, +			}, +			LOG.warn("Generic type differs: {} and {}", gType, varType);, +			return false;, +		}, +		iterableType = ArgType.generic(iterableType.getObject(), new ArgType[]{varType});, +		iterableArg.setType(iterableType);, +++ b/jadx-core/src/test/java/jadx/tests/integration/loops/TestIterableForEach3.java, +package jadx.tests.integration.loops;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import java.util.Set;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestIterableForEach3 extends IntegrationTest {, +, +	public static class TestCls<T extends String> {, +		private Set<T> a;, +		private Set<T> b;, +, +		private void test(T str) {, +			Set<T> set = str.length() == 1 ? a : b;, +			for (T s : set) {, +				if (s.length() == str.length()) {, +					if (str.length() == 0) {, +						set.remove(s);, +					} else {, +						set.add(str);, +					}, +					return;, +				}, +			}, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsOne("for (T s : set) {"));, +		assertThat(code, containsOne("if (str.length() == 0) {"));, +		// TODO move return outside 'if', +	}, +}]