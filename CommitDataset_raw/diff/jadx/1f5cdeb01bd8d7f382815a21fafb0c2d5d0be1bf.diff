[+++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.xmlgen.ResContainer;, +, +	public ZipRef getZipRef() {, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.xmlgen.ResContainer;, +, +	public ZipRef getZipRef() {, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +import java.io.FileInputStream;, +import jadx.api.ResourceFile.ZipRef;, +import jadx.core.codegen.CodeWriter;, +import jadx.core.utils.Utils;, +import jadx.core.utils.exceptions.JadxException;, +import jadx.core.utils.files.InputFile;, +import jadx.core.xmlgen.ResContainer;, +import jadx.core.xmlgen.ResTableParser;, +			long size;, +			ZipRef zipRef = rf.getZipRef();, +			if (zipRef == null) {, +				File file = new File(rf.getName());, +				inputStream = new BufferedInputStream(new FileInputStream(file));, +				size = file.length();, +			} else {, +				size = entry.getSize();, +			}, +			result = decoder.decode(size, inputStream);, +			throw new JadxException("Error decode: " + rf.getName(), e);, +				LOG.error("Error close zip file: {}", rf.getName(), e);, +			addResourceFile(list, file);, +	private void addResourceFile(List<ResourceFile> list, File file) {, +		String name = file.getAbsolutePath();, +		ResourceType type = ResourceType.getFileType(name);, +		ResourceFile rf = new ResourceFile(jadxRef, name, type);, +		list.add(rf);, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.xmlgen.ResContainer;, +, +	public ZipRef getZipRef() {, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +import java.io.FileInputStream;, +import jadx.api.ResourceFile.ZipRef;, +import jadx.core.codegen.CodeWriter;, +import jadx.core.utils.Utils;, +import jadx.core.utils.exceptions.JadxException;, +import jadx.core.utils.files.InputFile;, +import jadx.core.xmlgen.ResContainer;, +import jadx.core.xmlgen.ResTableParser;, +			long size;, +			ZipRef zipRef = rf.getZipRef();, +			if (zipRef == null) {, +				File file = new File(rf.getName());, +				inputStream = new BufferedInputStream(new FileInputStream(file));, +				size = file.length();, +			} else {, +				size = entry.getSize();, +			}, +			result = decoder.decode(size, inputStream);, +			throw new JadxException("Error decode: " + rf.getName(), e);, +				LOG.error("Error close zip file: {}", rf.getName(), e);, +			addResourceFile(list, file);, +	private void addResourceFile(List<ResourceFile> list, File file) {, +		String name = file.getAbsolutePath();, +		ResourceType type = ResourceType.getFileType(name);, +		ResourceFile rf = new ResourceFile(jadxRef, name, type);, +		list.add(rf);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +import jadx.core.dex.nodes.DexNode;, +import java.util.List;, +		List<DexNode> dexNodes = root.getDexNodes();, +		if (dexNodes.size() == 0) {, +			return;, +		}, +		InputFile firstInputFile = dexNodes.get(0).getDexFile().getInputFile();, +		deobfuscator = new Deobfuscator(args, dexNodes, deobfMapFile);, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.xmlgen.ResContainer;, +, +	public ZipRef getZipRef() {, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +import java.io.FileInputStream;, +import jadx.api.ResourceFile.ZipRef;, +import jadx.core.codegen.CodeWriter;, +import jadx.core.utils.Utils;, +import jadx.core.utils.exceptions.JadxException;, +import jadx.core.utils.files.InputFile;, +import jadx.core.xmlgen.ResContainer;, +import jadx.core.xmlgen.ResTableParser;, +			long size;, +			ZipRef zipRef = rf.getZipRef();]