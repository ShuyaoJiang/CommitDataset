[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.load(inputFiles);, +, +					BinaryXMLParser bxp = new BinaryXMLParser(root);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.load(inputFiles);, +, +					BinaryXMLParser bxp = new BinaryXMLParser(root);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	public int getIndent() {, +		return indent;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.load(inputFiles);, +, +					BinaryXMLParser bxp = new BinaryXMLParser(root);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	public int getIndent() {, +		return indent;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java, +	public List<DexNode> getDexNodes() {, +		return dexNodes;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.load(inputFiles);, +, +					BinaryXMLParser bxp = new BinaryXMLParser(root);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	public int getIndent() {, +		return indent;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/RootNode.java, +	public List<DexNode> getDexNodes() {, +		return dexNodes;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +import jadx.core.dex.instructions.args.ArgType;, +import jadx.core.dex.nodes.DexNode;, +import jadx.core.dex.nodes.FieldNode;, +import jadx.core.dex.nodes.RootNode;, +	private Map<Integer, String> styleMap = new HashMap<Integer, String>();, +	private Map<Integer, FieldNode> localStyleMap = new HashMap<Integer, FieldNode>();, +	private final ManifestAttributes attributes;, +	public BinaryXMLParser(RootNode root) {, +			// add application constants, +			for (DexNode dexNode : root.getDexNodes()) {, +				for (Map.Entry<Object, FieldNode> entry : dexNode.getConstFields().entrySet()) {, +					Object key = entry.getKey();, +					FieldNode field = entry.getValue();, +					if (field.getType().equals(ArgType.INT) && key instanceof Integer) {, +						localStyleMap.put((Integer) key, field);, +					}, +				}, +			}, +			attributes = new ManifestAttributes();, +			attributes.parse();, +		} catch (Exception e) {, +		writer.startLine("<").add(strings[startNSName]);, +			writer.add(" xmlns:\"").add(nsURI).add("\"");, +				writer.add(nsPrefix).add(':');, +			String attrName = strings[attributeName];, +			writer.add(attrName).add("=\"");, +			String decodedAttr = attributes.decode(attrName, attrValData);, +			if (decodedAttr != null) {, +				writer.add(decodedAttr);, +			} else {, +				switch (attrValDataType) {, +					case 0x3:, +						break;, +, +					case 0x10:, +						break;, +, +					case 0x12:, +						break;, +, +					case 0x1:, +								writer.add(nsPrefix).add(':');, +							writer.add("style/").add(name.replaceAll("_", "."));, +							FieldNode field = localStyleMap.get(attrValData);, +							if (field != null) {, +								String cls = field.getParentClass().getShortName().toLowerCase();, +								writer.add("@").add(cls).add("/").add(field.getName());, +							} else {, +								writer.add("0x").add(Integer.toHexString(attrValData));, +						break;, +, +					default:, +						break;, +			writer.add('"');, +				writer.add(strings[elementNS]).add(':');, +			writer.add(strings[elementName]).add(">");, +		if (writer.getIndent() != 0) {, +	}]