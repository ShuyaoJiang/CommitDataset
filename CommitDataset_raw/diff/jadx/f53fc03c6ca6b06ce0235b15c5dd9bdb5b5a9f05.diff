[+++ b/jadx-core/build.gradle, +    compile 'commons-io:commons-io:2.6', +++ b/jadx-core/build.gradle, +    compile 'commons-io:commons-io:2.6', +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +import java.io.File;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import org.apache.commons.io.FilenameUtils;, +, +import jadx.core.utils.files.FileUtils;, +		if (dexNodes.isEmpty()) {, +		boolean isCaseSensitive = FileUtils.isCaseSensitiveFS(new File(inputPath)); // args.getOutDir() - not set in gui, +		checkClasses(root, isCaseSensitive);, +	private void checkClasses(RootNode root, boolean caseSensitive) {, +			if (!caseSensitive) {, +++ b/jadx-core/build.gradle, +    compile 'commons-io:commons-io:2.6', +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +import java.io.File;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import org.apache.commons.io.FilenameUtils;, +, +import jadx.core.utils.files.FileUtils;, +		if (dexNodes.isEmpty()) {, +		boolean isCaseSensitive = FileUtils.isCaseSensitiveFS(new File(inputPath)); // args.getOutDir() - not set in gui, +		checkClasses(root, isCaseSensitive);, +	private void checkClasses(RootNode root, boolean caseSensitive) {, +			if (!caseSensitive) {, +++ b/jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java, +			FileUtils.makeDirs(srcOutDir);, +			FileUtils.makeDirs(resOutDir);, +++ b/jadx-core/build.gradle, +    compile 'commons-io:commons-io:2.6', +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/RenameVisitor.java, +import java.io.File;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import org.apache.commons.io.FilenameUtils;, +, +import jadx.core.utils.files.FileUtils;, +		if (dexNodes.isEmpty()) {, +		boolean isCaseSensitive = FileUtils.isCaseSensitiveFS(new File(inputPath)); // args.getOutDir() - not set in gui, +		checkClasses(root, isCaseSensitive);, +	private void checkClasses(RootNode root, boolean caseSensitive) {, +			if (!caseSensitive) {, +++ b/jadx-core/src/main/java/jadx/core/export/ExportGradleProject.java, +			FileUtils.makeDirs(srcOutDir);, +			FileUtils.makeDirs(resOutDir);, +++ b/jadx-core/src/main/java/jadx/core/utils/files/FileUtils.java, +import org.apache.commons.io.IOCase;, +import org.jetbrains.annotations.Nullable;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +, +		if (file != null) {, +			makeDirs(file.getParentFile());, +		}, +	}, +, +	private static final Object MKDIR_SYNC = new Object();, +, +	public static void makeDirs(@Nullable File dir) {, +		if (dir != null) {, +			synchronized (MKDIR_SYNC) {, +				if (!dir.exists() && !dir.mkdirs()) {, +	}, +, +	public static boolean isCaseSensitiveFS(File testDir) {, +		if (testDir != null) {, +			File caseCheckUpper = new File(testDir, "CaseCheck");, +			File caseCheckLow = new File(testDir, "casecheck");, +			try {, +				makeDirs(testDir);, +				if (caseCheckUpper.createNewFile()) {, +					boolean caseSensitive = !caseCheckLow.exists();, +					LOG.debug("Filesystem at {} is {} case-sensitive", testDir.getAbsolutePath(),, +							(caseSensitive ? "" : "NOT"));, +					return caseSensitive;, +				} else {, +					LOG.debug("Failed to create file: {}", caseCheckUpper.getAbsolutePath());, +				}, +			} catch (Exception e) {, +				LOG.debug("Failed to detect filesystem case-sensitivity by file creation", e);, +			} finally {, +				try {, +					caseCheckUpper.delete();, +					caseCheckLow.delete();, +				} catch (Exception e) {, +					// ignore, +				}, +			}, +		}, +		return IOCase.SYSTEM.isCaseSensitive();]