[+++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +import java.util.LinkedList;, +import java.util.List;, +	private final Set<BlockNode> mergedBlocks;, +	private final List<BlockNode> skipBlocks;, +		this(condition, thenBlock, elseBlock, new HashSet<BlockNode>(), new LinkedList<BlockNode>());, +		this(condition, info.getThenBlock(), info.getElseBlock(), info.getMergedBlocks(), info.getSkipBlocks());, +	}, +, +	public IfInfo(IfInfo info, BlockNode thenBlock, BlockNode elseBlock) {, +		this(info.getCondition(), thenBlock, elseBlock, info.getMergedBlocks(), info.getSkipBlocks());, +	}, +, +	private IfInfo(IfCondition condition, BlockNode thenBlock, BlockNode elseBlock,, +	              Set<BlockNode> mergedBlocks, List<BlockNode> skipBlocks) {, +		this.thenBlock = thenBlock;, +		this.elseBlock = elseBlock;, +		this.mergedBlocks = mergedBlocks;, +		this.skipBlocks = skipBlocks;, +		IfCondition invertedCondition = IfCondition.invert(info.getCondition());, +		IfInfo tmpIf = new IfInfo(invertedCondition,, +				info.getElseBlock(), info.getThenBlock(),, +				info.getMergedBlocks(), info.getSkipBlocks());, +	public List<BlockNode> getSkipBlocks() {, +		return skipBlocks;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +import java.util.LinkedList;, +import java.util.List;, +	private final Set<BlockNode> mergedBlocks;, +	private final List<BlockNode> skipBlocks;, +		this(condition, thenBlock, elseBlock, new HashSet<BlockNode>(), new LinkedList<BlockNode>());, +		this(condition, info.getThenBlock(), info.getElseBlock(), info.getMergedBlocks(), info.getSkipBlocks());, +	}, +, +	public IfInfo(IfInfo info, BlockNode thenBlock, BlockNode elseBlock) {, +		this(info.getCondition(), thenBlock, elseBlock, info.getMergedBlocks(), info.getSkipBlocks());, +	}, +, +	private IfInfo(IfCondition condition, BlockNode thenBlock, BlockNode elseBlock,, +	              Set<BlockNode> mergedBlocks, List<BlockNode> skipBlocks) {, +		this.thenBlock = thenBlock;, +		this.elseBlock = elseBlock;, +		this.mergedBlocks = mergedBlocks;, +		this.skipBlocks = skipBlocks;, +		IfCondition invertedCondition = IfCondition.invert(info.getCondition());, +		IfInfo tmpIf = new IfInfo(invertedCondition,, +				info.getElseBlock(), info.getThenBlock(),, +				info.getMergedBlocks(), info.getSkipBlocks());, +	public List<BlockNode> getSkipBlocks() {, +		return skipBlocks;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import static jadx.core.utils.BlockUtils.getNextBlock;, +	static IfInfo searchNestedIf(IfInfo info) {, +		IfInfo tmp = mergeNestedIfNodes(info);, +		return tmp != null ? tmp : info;, +	}, +, +			info = new IfInfo(info, thenBlock, null);, +			info = new IfInfo(info, elseBlock, null);, +		result.getSkipBlocks().addAll(currentIf.getSkipBlocks());, +		result.getSkipBlocks().addAll(nextThen.getSkipBlocks());, +		result.getSkipBlocks().addAll(nextElse.getSkipBlocks());, +		confirmMerge(result);, +		result.getSkipBlocks().addAll(first.getSkipBlocks());, +		result.getSkipBlocks().addAll(second.getSkipBlocks());, +, +		BlockNode otherPathBlock = followThenBranch ? first.getElseBlock() : first.getThenBlock();, +		skipSimplePath(otherPathBlock, result.getSkipBlocks());, +	static void confirmMerge(IfInfo info) {, +		for (BlockNode block : info.getMergedBlocks()) {, +			block.add(AFlag.SKIP);, +		}, +		for (BlockNode block : info.getSkipBlocks()) {, +			block.add(AFlag.SKIP);, +		}, +		info.getSkipBlocks().clear();, +	}, +, +, +	private static void skipSimplePath(BlockNode block, List<BlockNode> skipped) {, +		while (block != null, +				&& block.getCleanSuccessors().size() < 2, +				&& block.getPredecessors().size() == 1) {, +			skipped.add(block);, +			block = getNextBlock(block);, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +import java.util.LinkedList;, +import java.util.List;, +	private final Set<BlockNode> mergedBlocks;, +	private final List<BlockNode> skipBlocks;, +		this(condition, thenBlock, elseBlock, new HashSet<BlockNode>(), new LinkedList<BlockNode>());, +		this(condition, info.getThenBlock(), info.getElseBlock(), info.getMergedBlocks(), info.getSkipBlocks());, +	}, +]