[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.loadResources(getResources());, +		root.initAppResClass();, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.loadResources(getResources());, +		root.initAppResClass();, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +		return ResourcesLoader.loadContent(decompiler, this);, +	ZipRef getZipRef() {, +		return zipRef;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.loadResources(getResources());, +		root.initAppResClass();, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +		return ResourcesLoader.loadContent(decompiler, this);, +	ZipRef getZipRef() {, +		return zipRef;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +	public static interface ResourceDecoder {, +		Object decode(long size, InputStream is) throws IOException;, +	}, +, +	public static Object decodeStream(ResourceFile rf, ResourceDecoder decoder) throws JadxException {, +		ZipRef zipRef = rf.getZipRef();, +			if (entry == null) {, +				throw new IOException("Zip entry not found: " + zipRef);, +			return decoder.decode(entry.getSize(), inputStream);, +		} catch (Exception e) {, +			throw new JadxException("Error load: " + zipRef, e);, +	}, +, +	static CodeWriter loadContent(final JadxDecompiler jadxRef, final ResourceFile rf) {, +		try {, +			return (CodeWriter) decodeStream(rf, new ResourceDecoder() {, +				@Override, +				public Object decode(long size, InputStream is) throws IOException {, +					if (size > LOAD_SIZE_LIMIT) {, +						return new CodeWriter().add("File too big, size: ", +								+ String.format("%.2f KB", size / 1024.));, +					}, +					return loadContent(jadxRef, rf.getType(), is);, +				}, +			});, +		} catch (JadxException e) {, +			LOG.error("Decode error", e);, +		}, +	private static CodeWriter loadContent(JadxDecompiler jadxRef, ResourceType type,, +			LOG.debug("Not a zip file: {}", file.getAbsolutePath());, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +		root.loadResources(getResources());, +		root.initAppResClass();, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +		return ResourcesLoader.loadContent(decompiler, this);, +	ZipRef getZipRef() {, +		return zipRef;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +	public static interface ResourceDecoder {, +		Object decode(long size, InputStream is) throws IOException;, +	}, +, +	public static Object decodeStream(ResourceFile rf, ResourceDecoder decoder) throws JadxException {, +		ZipRef zipRef = rf.getZipRef();, +			if (entry == null) {, +				throw new IOException("Zip entry not found: " + zipRef);, +			return decoder.decode(entry.getSize(), inputStream);, +		} catch (Exception e) {, +			throw new JadxException("Error load: " + zipRef, e);, +	}, +, +	static CodeWriter loadContent(final JadxDecompiler jadxRef, final ResourceFile rf) {, +		try {, +			return (CodeWriter) decodeStream(rf, new ResourceDecoder() {, +				@Override, +				public Object decode(long size, InputStream is) throws IOException {, +					if (size > LOAD_SIZE_LIMIT) {, +						return new CodeWriter().add("File too big, size: ", +								+ String.format("%.2f KB", size / 1024.));, +					}, +					return loadContent(jadxRef, rf.getType(), is);, +				}, +			});, +		} catch (JadxException e) {, +			LOG.error("Decode error", e);, +		}, +	private static CodeWriter loadContent(JadxDecompiler jadxRef, ResourceType type,, +			LOG.debug("Not a zip file: {}", file.getAbsolutePath());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +import com.android.dx.rop.code.AccessFlags;, +	// empty synthetic class, +	public ClassNode(DexNode dex, ClassInfo clsInfo) {, +		this.dex = dex;, +		this.clsInfo = clsInfo;, +		this.interfaces = Collections.emptyList();, +		this.methods = Collections.emptyList();]