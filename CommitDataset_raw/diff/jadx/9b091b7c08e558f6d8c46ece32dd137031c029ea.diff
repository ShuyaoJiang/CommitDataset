[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.variables.ProcessVariables;, +			passes.add(new ProcessVariables());, +			passes.add(new PrepareForCodeGen());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.variables.ProcessVariables;, +			passes.add(new ProcessVariables());, +			passes.add(new PrepareForCodeGen());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +	private static final NClass[] EMPTY_NCLASS_ARRAY = new NClass[0];, +, +		int size = parents.size();, +		if (size == 0) {, +			return EMPTY_NCLASS_ARRAY;, +		}, +		return parents.toArray(new NClass[size]);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.variables.ProcessVariables;, +			passes.add(new ProcessVariables());, +			passes.add(new PrepareForCodeGen());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +	private static final NClass[] EMPTY_NCLASS_ARRAY = new NClass[0];, +, +		int size = parents.size();, +		if (size == 0) {, +			return EMPTY_NCLASS_ARRAY;, +		}, +		return parents.toArray(new NClass[size]);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.CodeVar;, +		declareVar(code, arg.getSVar().getCodeVar());, +	}, +, +	public void declareVar(CodeWriter code, CodeVar codeVar) {, +		if (codeVar.isFinal()) {, +		useType(code, codeVar.getType());, +		code.add(mgen.getNameGen().assignArg(codeVar));, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.variables.ProcessVariables;, +			passes.add(new ProcessVariables());, +			passes.add(new PrepareForCodeGen());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +	private static final NClass[] EMPTY_NCLASS_ARRAY = new NClass[0];, +, +		int size = parents.size();, +		if (size == 0) {, +			return EMPTY_NCLASS_ARRAY;, +		}, +		return parents.toArray(new NClass[size]);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.instructions.args.CodeVar;, +		declareVar(code, arg.getSVar().getCodeVar());, +	}, +, +	public void declareVar(CodeWriter code, CodeVar codeVar) {, +		if (codeVar.isFinal()) {, +		useType(code, codeVar.getType());, +		code.add(mgen.getNameGen().assignArg(codeVar));, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.dex.instructions.args.CodeVar;, +import jadx.core.utils.Utils;, +				mth.addComment("JADX WARN: Incorrect number of args for enum constructor: " + args.size() + " (expected >= 2)");, +	private void addMethodArguments(CodeWriter code, List<RegisterArg> args) {, +		Iterator<RegisterArg> it = args.iterator();, +		while (it.hasNext()) {, +			RegisterArg mthArg = it.next();, +			SSAVar ssaVar = mthArg.getSVar();, +			CodeVar var;, +			if (ssaVar == null) {, +				// null for abstract or interface methods, +				var = CodeVar.fromMthArg(mthArg);, +			} else {, +				var = ssaVar.getCodeVar();, +			}, +			ArgType argType = var.getType();, +				annotationGen.addForParameter(code, paramsAnnotation, i);, +			if (var.isFinal()) {, +				code.add("final ");, +					classGen.useType(code, elType);, +					code.add("...");, +					mth.addComment("JADX INFO: Last argument in varargs method is not array: " + var);, +					classGen.useType(code, argType);, +				classGen.useType(code, argType);, +			code.add(' ');, +			code.add(nameGen.assignArg(var));, +				code.add(", ");, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.variables.ProcessVariables;, +			passes.add(new ProcessVariables());, +			passes.add(new PrepareForCodeGen());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +	private static final NClass[] EMPTY_NCLASS_ARRAY = new NClass[0];, +, +		int size = parents.size();, +		if (size == 0) {, +			return EMPTY_NCLASS_ARRAY;, +		}, +		return parents.toArray(new NClass[size]);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java]