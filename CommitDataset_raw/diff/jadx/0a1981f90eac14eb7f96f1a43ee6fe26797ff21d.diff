[+++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +	public boolean isSet() {, +		return line != 0 || offset != 0;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +	public boolean isSet() {, +		return line != 0 || offset != 0;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		classGen.useType(code, a.getType());, +				classGen.useType(code, ex);, +			classGen.useType(code, (ArgType) val);, +			code.add(".class");, +			InsnGen.makeStaticFieldAccess(code, field, classGen);, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +	public boolean isSet() {, +		return line != 0 || offset != 0;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		classGen.useType(code, a.getType());, +				classGen.useType(code, ex);, +			classGen.useType(code, (ArgType) val);, +			code.add(".class");, +			InsnGen.makeStaticFieldAccess(code, field, classGen);, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.instructions.args.PrimitiveType;, +			clsCode.add("extends ");, +			useClass(clsCode, sup);, +			clsCode.add(' ');, +				useClass(clsCode, interf);, +			if (type.isGenericType()) {, +				code.add(type.getObject());, +			} else {, +				useClass(code, ClassInfo.fromType(type));, +			}, +					if (g.isGenericType()) {, +						code.add(g.getObject());, +					} else {, +						useClass(code, ClassInfo.fromType(g));, +					}, +			useType(code, f.getType());, +		if (enumFields == null) {, +			return;, +		}, +, +	public void useType(CodeWriter code, ArgType type) {, +		final PrimitiveType stype = type.getPrimitiveType();, +		if (stype == null) {, +			code.add(type.toString());, +		} else if (stype == PrimitiveType.OBJECT) {, +			if (type.isGenericType()) {, +				code.add(type.getObject());, +			} else {, +				useClass(code, ClassInfo.fromType(type));, +			}, +		} else if (stype == PrimitiveType.ARRAY) {, +			useType(code, type.getArrayElement());, +			code.add("[]");, +		} else {, +			code.add(stype.getLongName());, +		}, +	public void useClass(CodeWriter code, ClassInfo classInfo) {, +		ClassNode classNode = cls.dex().resolveClass(classInfo);, +		if (classNode != null) {, +			code.attachAnnotation(classNode);, +		ArgType[] generics = classInfo.getType().getGenericTypes();, +		code.add(baseClass);, +		if (generics != null) {, +			code.add('<');, +					code.add(", ");, +					code.add('?');, +						code.add(bounds == -1 ? " super " : " extends ");, +						useType(code, wt);, +					useType(code, gt);, +			code.add('>');, +		}, +++ b/jadx-core/src/main/java/jadx/api/CodePosition.java, +	public boolean isSet() {, +		return line != 0 || offset != 0;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +		classGen.useType(code, a.getType());, +				classGen.useType(code, ex);, +			classGen.useType(code, (ArgType) val);, +			code.add(".class");, +			InsnGen.makeStaticFieldAccess(code, field, classGen);, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.instructions.args.PrimitiveType;, +			clsCode.add("extends ");, +			useClass(clsCode, sup);, +			clsCode.add(' ');, +				useClass(clsCode, interf);, +			if (type.isGenericType()) {, +				code.add(type.getObject());, +			} else {, +				useClass(code, ClassInfo.fromType(type));]