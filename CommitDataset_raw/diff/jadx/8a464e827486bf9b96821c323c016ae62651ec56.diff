[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.IfRegionVisitor;, +			passes.add(new IfRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.IfRegionVisitor;, +			passes.add(new IfRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java, +import jadx.core.dex.instructions.args.LiteralArg;, +, +		if (th.equals(LiteralArg.FALSE) && els.equals(LiteralArg.TRUE)) {, +			// inverted, +			this.condition = IfCondition.invert(condition);, +			addArg(els);, +			addArg(th);, +		} else {, +			this.condition = condition;, +	}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.IfRegionVisitor;, +			passes.add(new IfRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java, +import jadx.core.dex.instructions.args.LiteralArg;, +, +		if (th.equals(LiteralArg.FALSE) && els.equals(LiteralArg.TRUE)) {, +			// inverted, +			this.condition = IfCondition.invert(condition);, +			addArg(els);, +			addArg(th);, +		} else {, +			this.condition = condition;, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +	// all dominators, +	private BitSet doms;, +	// dominance frontier, +	private BitSet domFrontier;, +	// immediate dominator, +	private BlockNode idom;, +	// blocks on which dominates this block, +	public BitSet getDomFrontier() {, +		return domFrontier;, +	}, +, +	public void setDomFrontier(BitSet domFrontier) {, +		this.domFrontier = domFrontier;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.IfRegionVisitor;, +			passes.add(new IfRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java, +import jadx.core.dex.instructions.args.LiteralArg;, +, +		if (th.equals(LiteralArg.FALSE) && els.equals(LiteralArg.TRUE)) {, +			// inverted, +			this.condition = IfCondition.invert(condition);, +			addArg(els);, +			addArg(th);, +		} else {, +			this.condition = condition;, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +	// all dominators, +	private BitSet doms;, +	// dominance frontier, +	private BitSet domFrontier;, +	// immediate dominator, +	private BlockNode idom;, +	// blocks on which dominates this block, +	public BitSet getDomFrontier() {, +		return domFrontier;, +	}, +, +	public void setDomFrontier(BitSet domFrontier) {, +		this.domFrontier = domFrontier;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/IRegion.java, +	boolean replaceSubBlock(IContainer oldBlock, IContainer newBlock);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.IfRegionVisitor;, +			passes.add(new IfRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java, +import jadx.core.dex.instructions.args.LiteralArg;, +, +		if (th.equals(LiteralArg.FALSE) && els.equals(LiteralArg.TRUE)) {, +			// inverted, +			this.condition = IfCondition.invert(condition);, +			addArg(els);, +			addArg(th);, +		} else {, +			this.condition = condition;, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +	// all dominators, +	private BitSet doms;, +	// dominance frontier, +	private BitSet domFrontier;, +	// immediate dominator, +	private BlockNode idom;]