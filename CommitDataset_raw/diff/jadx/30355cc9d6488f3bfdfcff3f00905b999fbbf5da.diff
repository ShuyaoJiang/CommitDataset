[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if(f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +				continue;, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if(f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +				continue;, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.attributes.AttributeFlag;, +		FieldNode fieldNode = mth.getParentClass().searchField(field);, +		if(fieldNode != null && fieldNode.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			return "";, +		}, +		// TODO: add jadx argument "add this", +		String argStr = arg(arg);, +		return argStr.isEmpty() ? name : argStr + "." + name;, +		ClassNode cls = mth.dex().resolveClass(insn.getClassType());, +			return;, +		}, +		if (insn.isSelf()) {, +			return;, +		}, +		if (insn.isSuper()) {, +			code.add("super");, +		} else if (insn.isThis()) {, +			code.add("this");, +		generateArguments(code, insn, 0, mth.dex().resolveMethod(insn.getCallMth()));, +				// FIXME: add 'this' for equals methods in scope, +				if (!arg.isThis()) {, +					String argStr = arg(arg);, +					if(!argStr.isEmpty()) {, +						code.add(argStr).add('.');, +					}, +		generateArguments(code, insn, k, callMthNode);, +	}, +	private void generateArguments(CodeWriter code, InsnNode insn, int k, MethodNode callMth) throws CodegenException {, +		if (callMth != null && callMth.getAttributes().contains(AttributeFlag.SKIP_FIRST_ARG)) {, +			k++;, +		}, +		int argsCount = insn.getArgsCount();, +		if (callMth != null && callMth.isArgsOverload()) {, +			// add additional argument casts for overloaded methods, +			List<ArgType> originalType = callMth.getMethodInfo().getArgumentsTypes();, +			int origPos = 0;, +	}, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if(f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +				continue;, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.attributes.AttributeFlag;, +		FieldNode fieldNode = mth.getParentClass().searchField(field);, +		if(fieldNode != null && fieldNode.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			return "";, +		}, +		// TODO: add jadx argument "add this", +		String argStr = arg(arg);, +		return argStr.isEmpty() ? name : argStr + "." + name;, +		ClassNode cls = mth.dex().resolveClass(insn.getClassType());, +			return;, +		}, +		if (insn.isSelf()) {, +			return;, +		}, +		if (insn.isSuper()) {, +			code.add("super");, +		} else if (insn.isThis()) {, +			code.add("this");, +		generateArguments(code, insn, 0, mth.dex().resolveMethod(insn.getCallMth()));, +				// FIXME: add 'this' for equals methods in scope, +				if (!arg.isThis()) {, +					String argStr = arg(arg);, +					if(!argStr.isEmpty()) {, +						code.add(argStr).add('.');, +					}, +		generateArguments(code, insn, k, callMthNode);, +	}, +	private void generateArguments(CodeWriter code, InsnNode insn, int k, MethodNode callMth) throws CodegenException {, +		if (callMth != null && callMth.getAttributes().contains(AttributeFlag.SKIP_FIRST_ARG)) {, +			k++;, +		}, +		int argsCount = insn.getArgsCount();, +		if (callMth != null && callMth.isArgsOverload()) {, +			// add additional argument casts for overloaded methods, +			List<ArgType> originalType = callMth.getMethodInfo().getArgumentsTypes();, +			int origPos = 0;, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AttributeFlag.java, +	SKIP_FIRST_ARG,, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if(f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +				continue;, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.dex.attributes.AttributeFlag;, +		FieldNode fieldNode = mth.getParentClass().searchField(field);, +		if(fieldNode != null && fieldNode.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			return "";]