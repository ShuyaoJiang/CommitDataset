[+++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	private int[] resourceIds;, +		int size = is.readInt32();, +		int len = (size - 8) / 4;, +		resourceIds = new int[len];, +		for (int i = 0; i < len; i++) {, +			resourceIds[i] = is.readInt32();, +		nsMap.computeIfAbsent(getString(beginURI), k -> getString(beginPrefix));, +		nsMap.computeIfAbsent(getString(endURI), k -> getString(endPrefix));, +		String str = getString(strIndex);, +		currentTag = getString(startNSName);, +			writer.add(getAttributeNS(attributeNS)).add(':');, +		String attrName = getAttributeName(attributeName);, +	private String getAttributeNS(int attributeNS) {, +		String attrUrl = getString(attributeNS);, +		if (attrUrl == null || attrUrl.isEmpty()) {, +			if (isResInternalId(attributeNS)) {, +				return null;, +			} else {, +				attrUrl = ANDROID_NS_URL;, +			}, +		}, +		String attrName = nsMap.get(attrUrl);, +		if (attrName == null) {, +			return "NOT_FOUND_NS_0x" + Integer.toHexString(attributeNS) + "_" + attrUrl;, +		}, +		return attrName;, +	}, +, +	private String getAttributeName(int id) {, +		String str = getString(id);, +		if (str == null || str.isEmpty()) {, +			int resId = resourceIds[id];, +			str = ValuesParser.getAndroidResMap().get(resId);, +			if (str == null) {, +				return "NOT_FOUND_0x" + Integer.toHexString(id);, +			}, +			// cut type before /, +			int typeEnd = str.indexOf('/');, +			if (typeEnd != -1) {, +				return str.substring(typeEnd + 1);, +			}, +			return str;, +		}, +		return str;, +	}, +, +	private String getString(int strId) {, +		if (0 <= strId && strId < strings.length) {, +			return strings[strId];, +		}, +		return "NOT_FOUND_STR_0x" + Integer.toHexString(strId);, +	}, +, +					writer.add(getAttributeNS(attributeNS)).add(':');, +		if (currentTag.equals(getString(elementName)) && isOneLine && !isLastEnd) {, +				writer.add(getString(elementNS)).add(':');, +			writer.add(getString(elementName)).add(">");, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	private int[] resourceIds;, +		int size = is.readInt32();, +		int len = (size - 8) / 4;, +		resourceIds = new int[len];, +		for (int i = 0; i < len; i++) {, +			resourceIds[i] = is.readInt32();, +		nsMap.computeIfAbsent(getString(beginURI), k -> getString(beginPrefix));, +		nsMap.computeIfAbsent(getString(endURI), k -> getString(endPrefix));, +		String str = getString(strIndex);, +		currentTag = getString(startNSName);, +			writer.add(getAttributeNS(attributeNS)).add(':');, +		String attrName = getAttributeName(attributeName);, +	private String getAttributeNS(int attributeNS) {, +		String attrUrl = getString(attributeNS);, +		if (attrUrl == null || attrUrl.isEmpty()) {, +			if (isResInternalId(attributeNS)) {, +				return null;, +			} else {, +				attrUrl = ANDROID_NS_URL;, +			}, +		}, +		String attrName = nsMap.get(attrUrl);, +		if (attrName == null) {, +			return "NOT_FOUND_NS_0x" + Integer.toHexString(attributeNS) + "_" + attrUrl;, +		}, +		return attrName;, +	}, +, +	private String getAttributeName(int id) {, +		String str = getString(id);, +		if (str == null || str.isEmpty()) {, +			int resId = resourceIds[id];, +			str = ValuesParser.getAndroidResMap().get(resId);, +			if (str == null) {, +				return "NOT_FOUND_0x" + Integer.toHexString(id);, +			}, +			// cut type before /, +			int typeEnd = str.indexOf('/');, +			if (typeEnd != -1) {, +				return str.substring(typeEnd + 1);, +			}]