[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +			} else if (b.contains(AFlag.SYNTHETIC)) {, +				List<BlockNode> s = b.getSuccessors();, +				if (s.size() == 1 && s.get(0).contains(AType.EXC_HANDLER)) {, +					toRemove.add(b);, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +			} else if (b.contains(AFlag.SYNTHETIC)) {, +				List<BlockNode> s = b.getSuccessors();, +				if (s.size() == 1 && s.get(0).contains(AType.EXC_HANDLER)) {, +					toRemove.add(b);, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(IfMakerHelper.class);, +				LOG.debug("Stop processing blocks after bad 'else' in 'if': {}, method: {}", info, mth);, +				LOG.debug("Stop processing blocks after bad 'then' in 'if': {}, method: {}", info, mth);, +		for (BlockNode pred : preds) {, +			if (!ifBlocks.contains(pred) && !pred.contains(AFlag.LOOP_END)) {, +				return false;, +			}, +		}, +		return true;, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +			} else if (b.contains(AFlag.SYNTHETIC)) {, +				List<BlockNode> s = b.getSuccessors();, +				if (s.size() == 1 && s.get(0).contains(AType.EXC_HANDLER)) {, +					toRemove.add(b);, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(IfMakerHelper.class);, +				LOG.debug("Stop processing blocks after bad 'else' in 'if': {}, method: {}", info, mth);, +				LOG.debug("Stop processing blocks after bad 'then' in 'if': {}, method: {}", info, mth);, +		for (BlockNode pred : preds) {, +			if (!ifBlocks.contains(pred) && !pred.contains(AFlag.LOOP_END)) {, +				return false;, +			}, +		}, +		return true;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			if (block == loop.getStart() || block == loop.getEnd(), +					|| BlockUtils.isEmptySimplePath(loop.getStart(), block)) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +			} else if (b.contains(AFlag.SYNTHETIC)) {, +				List<BlockNode> s = b.getSuccessors();, +				if (s.size() == 1 && s.get(0).contains(AType.EXC_HANDLER)) {, +					toRemove.add(b);, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(IfMakerHelper.class);, +				LOG.debug("Stop processing blocks after bad 'else' in 'if': {}, method: {}", info, mth);, +				LOG.debug("Stop processing blocks after bad 'then' in 'if': {}, method: {}", info, mth);, +		for (BlockNode pred : preds) {, +			if (!ifBlocks.contains(pred) && !pred.contains(AFlag.LOOP_END)) {, +				return false;, +			}, +		}, +		return true;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			if (block == loop.getStart() || block == loop.getEnd(), +					|| BlockUtils.isEmptySimplePath(loop.getStart(), block)) {, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +, +	/**, +	 * Return true if on path from start to end no instructions and no branches., +	 */, +	public static boolean isEmptySimplePath(BlockNode start, BlockNode end) {, +		if (start == end && start.getInstructions().isEmpty()) {, +			return true;, +		}, +		if (!start.getInstructions().isEmpty() || start.getCleanSuccessors().size() != 1) {, +			return false;, +		}, +		BlockNode block = getNextBlock(start);, +		while (block != null, +				&& block != end, +				&& block.getCleanSuccessors().size() < 2, +				&& block.getPredecessors().size() == 1, +				&& block.getInstructions().isEmpty()) {, +			block = getNextBlock(block);, +		}, +		return block == end;, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +			} else if (b.contains(AFlag.SYNTHETIC)) {, +				List<BlockNode> s = b.getSuccessors();, +				if (s.size() == 1 && s.get(0).contains(AType.EXC_HANDLER)) {, +					toRemove.add(b);, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;]