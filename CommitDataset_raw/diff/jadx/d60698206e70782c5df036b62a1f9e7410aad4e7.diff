[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.ErrorsCounter;, +import jadx.core.utils.InsnUtils;, +		ArgType insnArrayType = insn.getResult().getType();, +		ArgType insnElementType = insnArrayType.getArrayElement();, +		ArgType elType = insn.getElementType();, +		if (!elType.equals(insnElementType) && !insnArrayType.equals(ArgType.OBJECT)) {, +			ErrorsCounter.methodError(mth,, +					"Incorrect type for fill-array insn " + InsnUtils.formatOffset(insn.getOffset()));, +		Object data = insn.getData();, +				byte[] array = (byte[]) data;, +				short[] sarray = (short[]) data;, +				int[] iarray = (int[]) data;, +				long[] larray = (long[]) data;, +		code.add("new ").add(useType(elType)).add("[]{").add(str.toString()).add('}');, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.ErrorsCounter;, +import jadx.core.utils.InsnUtils;, +		ArgType insnArrayType = insn.getResult().getType();, +		ArgType insnElementType = insnArrayType.getArrayElement();, +		ArgType elType = insn.getElementType();, +		if (!elType.equals(insnElementType) && !insnArrayType.equals(ArgType.OBJECT)) {, +			ErrorsCounter.methodError(mth,, +					"Incorrect type for fill-array insn " + InsnUtils.formatOffset(insn.getOffset()));, +		Object data = insn.getData();, +				byte[] array = (byte[]) data;, +				short[] sarray = (short[]) data;, +				int[] iarray = (int[]) data;, +				long[] larray = (long[]) data;, +		code.add("new ").add(useType(elType)).add("[]{").add(str.toString()).add('}');, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FillArrayNode.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +	private ArgType elemType;, +				throw new JadxRuntimeException("Unknown array element width: " + payload.getElementWidthUnit());, +, +		this.data = payload.getData();, +		this.elemType = elType;, +, +	public ArgType getElementType() {, +		return elemType;, +	}, +, +	public void mergeElementType(ArgType foundElemType) {, +		ArgType r = ArgType.merge(elemType, foundElemType);, +		if (r != null) {, +			elemType = r;, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.ErrorsCounter;, +import jadx.core.utils.InsnUtils;, +		ArgType insnArrayType = insn.getResult().getType();, +		ArgType insnElementType = insnArrayType.getArrayElement();, +		ArgType elType = insn.getElementType();, +		if (!elType.equals(insnElementType) && !insnArrayType.equals(ArgType.OBJECT)) {, +			ErrorsCounter.methodError(mth,, +					"Incorrect type for fill-array insn " + InsnUtils.formatOffset(insn.getOffset()));, +		Object data = insn.getData();, +				byte[] array = (byte[]) data;, +				short[] sarray = (short[]) data;, +				int[] iarray = (int[]) data;, +				long[] larray = (long[]) data;, +		code.add("new ").add(useType(elType)).add("[]{").add(str.toString()).add('}');, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/FillArrayNode.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +	private ArgType elemType;, +				throw new JadxRuntimeException("Unknown array element width: " + payload.getElementWidthUnit());, +, +		this.data = payload.getData();, +		this.elemType = elType;, +, +	public ArgType getElementType() {, +		return elemType;, +	}, +, +	public void mergeElementType(ArgType foundElemType) {, +		ArgType r = ArgType.merge(elemType, foundElemType);, +		if (r != null) {, +			elemType = r;, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +		if (a.equals(b)), +		if (a == UNKNOWN) {, +		}, +			if (a.isArray()) {, +				if (b.isArray()) {, +					ArgType ea = a.getArrayElement();, +					ArgType eb = b.getArrayElement();, +					if (ea.isPrimitive() && eb.isPrimitive()) {, +						return OBJECT;, +					} else {, +						ArgType res = merge(ea, eb);, +				} else if (b.equals(OBJECT)) {, +					return OBJECT;, +				} else {, +					return null;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java]