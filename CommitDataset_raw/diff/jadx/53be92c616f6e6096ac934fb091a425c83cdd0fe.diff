[+++ b/jadx-core/src/main/java/jadx/api/ResourceType.java, +			case XML:, +++ b/jadx-core/src/main/java/jadx/api/ResourceType.java, +			case XML:, +++ b/jadx-core/src/main/java/jadx/core/xmlgen/BinaryXMLParser.java, +	private static final Charset STRING_CHARSET_UTF16 = Charset.forName("UTF-16LE");, +	private static final Charset STRING_CHARSET_UTF8 = Charset.forName("UTF-8");, +, +	private static final int RES_NULL_TYPE = 0x0000;, +	private static final int RES_STRING_POOL_TYPE = 0x0001;, +	private static final int RES_TABLE_TYPE = 0x0002;, +, +	private static final int RES_XML_TYPE = 0x0003;, +	private static final int RES_XML_FIRST_CHUNK_TYPE = 0x0100;, +	private static final int RES_XML_START_NAMESPACE_TYPE = 0x0100;, +	private static final int RES_XML_END_NAMESPACE_TYPE = 0x0101;, +	private static final int RES_XML_START_ELEMENT_TYPE = 0x0102;, +	private static final int RES_XML_END_ELEMENT_TYPE = 0x0103;, +	private static final int RES_XML_CDATA_TYPE = 0x0104;, +	private static final int RES_XML_LAST_CHUNK_TYPE = 0x017f;, +	private static final int RES_XML_RESOURCE_MAP_TYPE = 0x0180;, +, +	private static final int RES_TABLE_PACKAGE_TYPE = 0x0200;, +	private static final int RES_TABLE_TYPE_TYPE = 0x0201;, +	private static final int RES_TABLE_TYPE_SPEC_TYPE = 0x0202;, +, +	// string pool flags, +	private static final int SORTED_FLAG = 1;, +	private static final int UTF8_FLAG = 1 << 8;, +	private ParserStream is;, +		is = new ParserStream(inputStream);, +		if (is.readInt16() != 0x0003) {, +		if (is.readInt16() != 0x0008) {, +		int size = is.readInt32();, +		while (is.getPos() < size) {, +			int type = is.readInt16();, +				case RES_NULL_TYPE:, +					// NullType is just doing nothing, +					break;, +				case RES_STRING_POOL_TYPE:, +				case RES_XML_RESOURCE_MAP_TYPE:, +				case RES_XML_START_NAMESPACE_TYPE:, +				case RES_XML_END_NAMESPACE_TYPE:, +				case RES_XML_START_ELEMENT_TYPE:, +				case RES_XML_END_ELEMENT_TYPE:, +		if (is.readInt16() != 0x001c) {, +		int hsize = is.readInt32();, +		int stringCount = is.readInt32();, +		int styleCount = is.readInt32();, +		int flags = is.readInt32();, +		int stringsStart = is.readInt32();, +		int stylesStart = is.readInt32();, +		// skip string offsets, +		is.skip(stringCount * 4);, +		if ((flags & UTF8_FLAG) != 0) {, +			// UTF-8, +			long start = is.getPos();, +				int charsCount = is.decodeLength8();, +				int len = is.decodeLength8();, +				strings[i] = new String(is.readArray(len), STRING_CHARSET_UTF8);, +				int zero = is.readInt8();, +				if (zero != 0) {, +					die("Not a trailing zero at string end: " + zero + ", " + strings[i]);, +				}, +			}, +			long shift = is.getPos() - start;, +			if (shift % 2 != 0) {, +				is.skip(1);, +			}, +		} else {, +			// UTF-16, +			for (int i = 0; i < stringCount; i++) {, +				int len = is.decodeLength16();, +				strings[i] = new String(is.readArray(len * 2), STRING_CHARSET_UTF16);, +				int zero = is.readInt16();, +				if (zero != 0) {, +					die("Not a trailing zero at string end: " + zero + ", " + strings[i]);, +				}, +			}, +		}, +		if (styleCount != 0) {, +			die("Styles parsing in string pool not yet implemented");, +		if (is.readInt16() != 0x8) {, +		int rhsize = is.readInt32();, +			ids[i] = is.readInt32();, +		if (is.readInt16() != 0x10) {, +		if (is.readInt32() != 0x18) {, +		int beginLineNumber = is.readInt32();, +		int comment = is.readInt32();, +		int beginPrefix = is.readInt32();, +		int beginURI = is.readInt32();, +		if (is.readInt16() != 0x10) {, +		if (is.readInt32() != 0x18) {, +		int endLineNumber = is.readInt32();, +		int comment = is.readInt32();, +		int endPrefix = is.readInt32();, +		int endURI = is.readInt32();, +		if (is.readInt16() != 0x10) {, +		is.readInt32();, +		int elementBegLineNumber = is.readInt32();]