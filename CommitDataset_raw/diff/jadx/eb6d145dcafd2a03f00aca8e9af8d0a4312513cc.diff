[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	public void addArgDot(CodeWriter code, InsnArg arg) throws CodegenException {, +		int len = code.length();, +		addArg(code, arg, true);, +		if (len != code.length()) {, +			code.add('.');, +		}, +	}, +, +		addArgDot(code, arg);, +					addArgDot(code, arg);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	public void addArgDot(CodeWriter code, InsnArg arg) throws CodegenException {, +		int len = code.length();, +		addArg(code, arg, true);, +		if (len != code.length()) {, +			code.add('.');, +		}, +	}, +, +		addArgDot(code, arg);, +					addArgDot(code, arg);, +++ b/jadx-core/src/test/java/jadx/api/InternalJadxTest.java, +import jadx.core.codegen.CodeWriter;, +	protected String makeIndent(int indent) {, +		StringBuilder sb = new StringBuilder(indent * CodeWriter.INDENT.length());, +		for (int i = 0; i < indent; i++) {, +			sb.append(CodeWriter.INDENT);, +		}, +		return sb.toString();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	public void addArgDot(CodeWriter code, InsnArg arg) throws CodegenException {, +		int len = code.length();, +		addArg(code, arg, true);, +		if (len != code.length()) {, +			code.add('.');, +		}, +	}, +, +		addArgDot(code, arg);, +					addArgDot(code, arg);, +++ b/jadx-core/src/test/java/jadx/api/InternalJadxTest.java, +import jadx.core.codegen.CodeWriter;, +	protected String makeIndent(int indent) {, +		StringBuilder sb = new StringBuilder(indent * CodeWriter.INDENT.length());, +		for (int i = 0; i < indent; i++) {, +			sb.append(CodeWriter.INDENT);, +		}, +		return sb.toString();, +	}, +, +++ b/jadx-core/src/test/java/jadx/tests/internal/inner/TestAnonymousClass3.java, +package jadx.tests.internal.inner;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.junit.Assert.assertThat;, +, +public class TestAnonymousClass3 extends InternalJadxTest {, +, +	public static class TestCls {, +		public static class Inner {, +			private int f;, +			private double d;, +, +			public void test() {, +				new Thread() {, +					@Override, +					public void run() {, +						int a = f--;, +						p(a);, +, +						f += 2;, +						f *= 2;, +, +						a = ++f;, +						p(a);, +, +						d /= 3;, +					}, +, +					public void p(int a) {, +					}, +				}.start();, +			}, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +		System.out.println(code);, +]