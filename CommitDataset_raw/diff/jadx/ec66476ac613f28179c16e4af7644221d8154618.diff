[+++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +	private MethodInfo(ClassInfo declClass, String name, List<ArgType> args, ArgType retType) {, +		this.name = name;, +		alias = name;, +		aliasFromPreset = false;, +		this.declClass = declClass;, +, +		this.args = args;, +		this.retType = retType;, +		shortId = makeSignature(true);, +	}, +, +	public static MethodInfo externalMth(ClassInfo declClass, String name, List<ArgType> args, ArgType retType) {, +		return new MethodInfo(declClass, name, args, retType);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +	private MethodInfo(ClassInfo declClass, String name, List<ArgType> args, ArgType retType) {, +		this.name = name;, +		alias = name;, +		aliasFromPreset = false;, +		this.declClass = declClass;, +, +		this.args = args;, +		this.retType = retType;, +		shortId = makeSignature(true);, +	}, +, +	public static MethodInfo externalMth(ClassInfo declClass, String name, List<ArgType> args, ArgType retType) {, +		return new MethodInfo(declClass, name, args, retType);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InvokeNode.java, +	public InvokeNode(MethodInfo mth, InvokeType invokeType, int argsCount) {, +++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +	private MethodInfo(ClassInfo declClass, String name, List<ArgType> args, ArgType retType) {, +		this.name = name;, +		alias = name;, +		aliasFromPreset = false;, +		this.declClass = declClass;, +, +		this.args = args;, +		this.retType = retType;, +		shortId = makeSignature(true);, +	}, +, +	public static MethodInfo externalMth(ClassInfo declClass, String name, List<ArgType> args, ArgType retType) {, +		return new MethodInfo(declClass, name, args, retType);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InvokeNode.java, +	public InvokeNode(MethodInfo mth, InvokeType invokeType, int argsCount) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +import jadx.core.deobf.NameMapper;, +import jadx.core.dex.info.ClassInfo;, +import jadx.core.dex.instructions.InvokeType;, +import jadx.core.dex.nodes.RootNode;, +			case CONSTRUCTOR:, +				simplfyConstructor(mth.root(), (ConstructorInsn) insn);, +				break;, +, +	private static void simplfyConstructor(RootNode root, ConstructorInsn insn) {, +		if (insn.getArgsCount() != 0, +				&& insn.getCallMth().getDeclClass().getType().equals(ArgType.STRING)) {, +			InsnArg arg = insn.getArg(0);, +			InsnNode node = arg.isInsnWrap(), +					? ((InsnWrapArg) arg).getWrapInsn(), +					: insn;, +		    if (node.getArgsCount() != 0) {, +		    	ArgType argType = node.getArg(0).getType();, +		    	if (node.getType() == InsnType.FILLED_NEW_ARRAY, +		    			&& (argType == ArgType.BYTE || argType == ArgType.CHAR)) {, +		    		int printable = 0;, +		    		byte[] arr = new byte[node.getArgsCount()];, +		    		for (int i = 0; i < arr.length; i++) {, +		    			arr[i] = (byte) ((LiteralArg) node.getArg(i)).getLiteral();, +		    			if (NameMapper.isPrintableChar(arr[i])) {, +		    				printable++;, +		    			}, +		    		}, +		    		if (printable >= arr.length - printable) {, +		    			InsnWrapArg wa = new InsnWrapArg(new ConstStringNode(new String(arr)));, +		    			if (insn.getArgsCount() == 1) {, +		    				insn.setArg(0, wa);, +		    			} else {, +		    				MethodInfo mi = MethodInfo.externalMth(, +		    						ClassInfo.fromType(root, ArgType.STRING),, +		    						"getBytes",, +		    						Collections.emptyList(),, +		    						ArgType.array(ArgType.BYTE));, +		    				InvokeNode in = new InvokeNode(mi, InvokeType.VIRTUAL, 1);, +		    				in.addArg(wa);, +		    				insn.setArg(0, new InsnWrapArg(in));, +		    			}, +		    		}, +		    	}, +		    }, +		}, +	}, +]