[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		int result = 0;, +				result = processAndSave(jadxArgs);, +			result = 1;, +		} finally {, +			System.exit(result);, +	static int processAndSave(JadxCLIArgs inputArgs) {, +			return 1;, +		int errorsCount = jadx.getErrorsCount();, +		if (errorsCount != 0) {, +		return errorsCount;, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		int result = 0;, +				result = processAndSave(jadxArgs);, +			result = 1;, +		} finally {, +			System.exit(result);, +	static int processAndSave(JadxCLIArgs inputArgs) {, +			return 1;, +		int errorsCount = jadx.getErrorsCount();, +		if (errorsCount != 0) {, +		return errorsCount;, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	public int getWarnsCount() {, +		if (root == null) {, +			return 0;, +		}, +		return root.getErrorsCounter().getWarnsCount();, +	}, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		int result = 0;, +				result = processAndSave(jadxArgs);, +			result = 1;, +		} finally {, +			System.exit(result);, +	static int processAndSave(JadxCLIArgs inputArgs) {, +			return 1;, +		int errorsCount = jadx.getErrorsCount();, +		if (errorsCount != 0) {, +		return errorsCount;, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	public int getWarnsCount() {, +		if (root == null) {, +			return 0;, +		}, +		return root.getErrorsCounter().getWarnsCount();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.attributes.nodes.JadxError;, +import jadx.core.dex.attributes.nodes.JadxWarn;, +			int savedIndent = code.getIndent();, +				code.setIndent(savedIndent);, +			insertDecompilationProblems(code, mth);, +					code.startLine("/* Code decompiled incorrectly, please refer to instructions dump. */");, +	private void insertDecompilationProblems(CodeWriter code, MethodNode mth) {, +		List<JadxError> errors = mth.getAll(AType.JADX_ERROR);, +		List<JadxWarn> warns = mth.getAll(AType.JADX_WARN);, +		if (!errors.isEmpty()) {, +			errors.forEach(err -> {, +				code.startLine("/*  JADX ERROR: ").add(err.getError());, +				Throwable cause = err.getCause();, +				if (cause != null) {, +					code.incIndent();, +					Utils.appendStackTrace(code, cause);, +					code.decIndent();, +				}, +				code.add("*/");, +			});, +		}, +		if (!warns.isEmpty()) {, +			warns.forEach(warn -> code.startLine("/* JADX WARNING: ").add(warn.getWarn()).add(" */"));, +		}, +	}, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +		int result = 0;, +				result = processAndSave(jadxArgs);, +			result = 1;, +		} finally {, +			System.exit(result);, +	static int processAndSave(JadxCLIArgs inputArgs) {, +			return 1;, +		int errorsCount = jadx.getErrorsCount();, +		if (errorsCount != 0) {, +		return errorsCount;, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +	public int getWarnsCount() {, +		if (root == null) {, +			return 0;, +		}, +		return root.getErrorsCounter().getWarnsCount();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.core.dex.attributes.nodes.JadxError;, +import jadx.core.dex.attributes.nodes.JadxWarn;, +			int savedIndent = code.getIndent();, +				code.setIndent(savedIndent);]