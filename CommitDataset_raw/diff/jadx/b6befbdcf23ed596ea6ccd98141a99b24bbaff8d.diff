[+++ b/jadx-gui/src/main/java/jadx/gui/MainWindow.java, +import javax.swing.BorderFactory;, +import javax.swing.JLabel;, +import javax.swing.JTabbedPane;, +import javax.swing.JTextArea;, +import javax.swing.plaf.basic.BasicButtonUI;, +import java.util.HashMap;, +import java.util.Map;, +, +	private final JTabbedPane tabbedPane = new JTabbedPane();, +	private Map<JClass, Integer> openTabs = new HashMap<JClass, Integer>();, +		SearchBar searchBar = getSearchBar((JPanel) tabbedPane.getSelectedComponent());, +				showCode(node.getJParent(), node.getLine());, +				showCode((JClass) node, node.getLine());, +	private JPanel newCodePane() {, +		RSyntaxTextArea textArea = new RSyntaxTextArea();, +		textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);, +		textArea.setMarkOccurrences(true);, +		textArea.setBackground(BACKGROUND);, +		textArea.setCodeFoldingEnabled(true);, +		textArea.setAntiAliasingEnabled(true);, +		// textArea.setEditable(false);, +		// textArea.setHyperlinksEnabled(true);, +		textArea.setTabSize(4);, +, +		RTextScrollPane scrollPane = new RTextScrollPane(textArea);, +		scrollPane.setFoldIndicatorEnabled(true);, +, +		JPanel textPanel = new JPanel(new BorderLayout());, +		SearchBar searchBar = new SearchBar(textArea);, +		textPanel.add(searchBar, BorderLayout.NORTH);, +		textPanel.add(scrollPane);, +, +		KeyStroke key = KeyStroke.getKeyStroke(KeyEvent.VK_F, InputEvent.CTRL_MASK);, +		Utils.addKeyBinding(textArea, key, "SearchAction", new AbstractAction() {, +			@Override, +			public void actionPerformed(ActionEvent e) {, +				toggleSearch();, +			}, +		});, +		return textPanel;, +	}, +, +	private SearchBar getSearchBar(JPanel panel) {, +		return (SearchBar) panel.getComponent(0);, +	}, +, +	private JTextArea getTextArea(JPanel panel) {, +		RTextScrollPane scrollPane = (RTextScrollPane) panel.getComponent(1);, +		return scrollPane.getTextArea();, +	}, +, +	private void showCode(JClass cls, int line) {, +		JPanel panel;, +		if (openTabs.containsKey(cls)) {, +			int id = openTabs.get(cls);, +			panel = (JPanel) tabbedPane.getComponentAt(id);, +			tabbedPane.setSelectedIndex(id);, +		} else {, +			panel = newCodePane();, +			tabbedPane.add(panel);, +			int id = tabbedPane.getTabCount() - 1;, +			openTabs.put(cls, id);, +			tabbedPane.setSelectedIndex(id);, +			tabbedPane.setTabComponentAt(id, makeTabComponent(cls, panel));, +		}, +		if (panel != null) {, +			JTextArea textArea = getTextArea(panel);, +			textArea.setText(cls.getCode());, +			scrollToLine(textArea, line);, +		}, +	}, +, +	private Component makeTabComponent(final JClass cls, final Component comp) {, +		String name = cls.getCls().getFullName();, +		JPanel p = new JPanel();, +		JLabel label = new JLabel(name);, +		p.add(label);, +		JButton button = new JButton();, +		button.setIcon(ICON_CLOSE);, +		final int size = 12;, +		button.setPreferredSize(new Dimension(size, size));, +		button.setToolTipText("Close");, +		button.setUI(new BasicButtonUI());, +		button.setContentAreaFilled(false);, +		button.setFocusable(false);, +		button.setBorder(BorderFactory.createEtchedBorder());, +		button.setBorderPainted(false);, +		button.addActionListener(new ActionListener() {, +			@Override, +			public void actionPerformed(ActionEvent e) {, +				tabbedPane.remove(comp);, +				openTabs.remove(cls);, +			}, +		});, +		p.add(button);, +		p.doLayout();, +		return p;, +	}, +]