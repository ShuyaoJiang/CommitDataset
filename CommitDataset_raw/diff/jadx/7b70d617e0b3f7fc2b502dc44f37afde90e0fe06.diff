[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +			simplifyMoveInsns(block);, +						inline(arg, assignInsn, assignBlock);, +				inline(wrapInfo.getArg(), wrapInfo.getInsn(), block);, +	private static boolean inline(RegisterArg arg, InsnNode insn, BlockNode block) {, +		if (parentInsn != null && parentInsn.getType() == InsnType.RETURN) {, +		boolean replaced = arg.wrapInstruction(insn) != null;, +		if (replaced) {, +			InsnList.remove(block, insn);, +		return replaced;, +, +	private static void simplifyMoveInsns(BlockNode block) {, +		List<InsnNode> insns = block.getInstructions();, +		int size = insns.size();, +		for (int i = 0; i < size; i++) {, +			InsnNode insn = insns.get(i);, +			if (insn.getType() == InsnType.MOVE) {, +				// replace 'move' with wrapped insn, +				InsnArg arg = insn.getArg(0);, +				if (arg.isInsnWrap()) {, +					InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +					wrapInsn.setResult(insn.getResult());, +					wrapInsn.copyAttributesFrom(insn);, +					wrapInsn.setOffset(insn.getOffset());, +					wrapInsn.remove(AFlag.WRAPPED);, +					block.getInstructions().set(i, wrapInsn);, +				}, +			}, +		}, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +			simplifyMoveInsns(block);, +						inline(arg, assignInsn, assignBlock);, +				inline(wrapInfo.getArg(), wrapInfo.getInsn(), block);, +	private static boolean inline(RegisterArg arg, InsnNode insn, BlockNode block) {, +		if (parentInsn != null && parentInsn.getType() == InsnType.RETURN) {, +		boolean replaced = arg.wrapInstruction(insn) != null;, +		if (replaced) {, +			InsnList.remove(block, insn);, +		return replaced;, +, +	private static void simplifyMoveInsns(BlockNode block) {, +		List<InsnNode> insns = block.getInstructions();, +		int size = insns.size();, +		for (int i = 0; i < size; i++) {, +			InsnNode insn = insns.get(i);, +			if (insn.getType() == InsnType.MOVE) {, +				// replace 'move' with wrapped insn, +				InsnArg arg = insn.getArg(0);, +				if (arg.isInsnWrap()) {, +					InsnNode wrapInsn = ((InsnWrapArg) arg).getWrapInsn();, +					wrapInsn.setResult(insn.getResult());, +					wrapInsn.copyAttributesFrom(insn);, +					wrapInsn.setOffset(insn.getOffset());, +					wrapInsn.remove(AFlag.WRAPPED);, +					block.getInstructions().set(i, wrapInsn);, +				}, +			}, +		}, +	}, +++ b/jadx-core/src/test/java/jadx/tests/integration/inline/TestIssue86.java, +package jadx.tests.integration.inline;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestIssue86 extends IntegrationTest {, +, +	public static class TestCls {, +		private static final String SERVER_ERR = "server-err";, +		private static final String NOT_FOUND = "not-found";, +		private static final String LIST_TAG = "list-tag";, +		private static final String TEMP_TAG = "temp-tag";, +		private static final String MIN_TAG = "min-tag";, +		private static final String MAX_TAG = "max-tag";, +		private static final String MILLIS_TAG = "millis-tag";, +		private static final String WEATHER_TAG = "weather-tag";, +		private static final String DESC_TAG = "desc-tag";, +, +		private List<Day> test(String response) {, +			List<Day> reportList = new ArrayList<Day>();, +			try {, +				System.out.println(response);, +				if (response != null, +						&& (response.startsWith(SERVER_ERR), +						|| response.startsWith(NOT_FOUND))) {, +					return reportList;, +				}, +				JSONObject jsonObj = new JSONObject(response);, +				JSONArray days = jsonObj.getJSONArray(LIST_TAG);, +				for (int i = 0; i < days.length(); i++) {, +					JSONObject c = days.getJSONObject(i);]