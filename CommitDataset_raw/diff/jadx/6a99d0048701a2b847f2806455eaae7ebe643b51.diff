[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		// 'static' and 'private' modifier not allowed for top classes (not inner), +			af = af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);, +			code.startLine(f.getField().getAlias());, +			if (isFieldsPresents()) {, +				code.startLine();, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		// 'static' and 'private' modifier not allowed for top classes (not inner), +			af = af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);, +			code.startLine(f.getField().getAlias());, +			if (isFieldsPresents()) {, +				code.startLine();, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumClassAttr.java, +import jadx.core.dex.info.FieldInfo;, +		private final FieldInfo field;, +		public EnumField(FieldInfo field, ConstructorInsn co, int startArg) {, +			this.field = field;, +		public FieldInfo getField() {, +			return field;, +			return field + "(" + constrInsn + ") " + cls;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +		// 'static' and 'private' modifier not allowed for top classes (not inner), +			af = af.remove(AccessFlags.ACC_STATIC).remove(AccessFlags.ACC_PRIVATE);, +			code.startLine(f.getField().getAlias());, +			if (isFieldsPresents()) {, +				code.startLine();, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/EnumClassAttr.java, +import jadx.core.dex.info.FieldInfo;, +		private final FieldInfo field;, +		public EnumField(FieldInfo field, ConstructorInsn co, int startArg) {, +			this.field = field;, +		public FieldInfo getField() {, +			return field;, +			return field + "(" + constrInsn + ") " + cls;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/EnumVisitor.java, +import jadx.core.deobf.NameMapper;, +			FieldInfo fieldInfo = (FieldInfo) ((IndexInsnNode) putInsn).getIndex();, +			if (name != null, +					&& !fieldInfo.getAlias().equals(name), +					&& NameMapper.isValidIdentifier(name)) {, +				// LOG.debug("Rename enum field: '{}' to '{}' in {}", fieldInfo.getName(), name, cls);, +				fieldInfo.setAlias(name);, +, +			EnumField field = new EnumField(fieldInfo, co, 2);, +]