[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected int threadsCount = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected int threadsCount = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +++ b/jadx-cli/src/main/resources/logback.xml, +            <pattern>%d{HH:mm:ss} %-5level - %msg%n</pattern>, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected int threadsCount = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +++ b/jadx-cli/src/main/resources/logback.xml, +            <pattern>%d{HH:mm:ss} %-5level - %msg%n</pattern>, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +import jadx.gui.utils.search.TextSearchIndex;, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected int threadsCount = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +++ b/jadx-cli/src/main/resources/logback.xml, +            <pattern>%d{HH:mm:ss} %-5level - %msg%n</pattern>, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +import jadx.gui.utils.search.TextSearchIndex;, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/IndexJob.java, +import jadx.gui.utils.JNodeCache;, +import jadx.gui.utils.search.StringRef;, +import jadx.gui.utils.search.TextSearchIndex;, +, +import java.util.List;, +	public IndexJob(JadxWrapper wrapper, CacheObject cache, int threadsCount, boolean useFastSearch) {, +		super(wrapper, threadsCount);, +		this.useFastSearch = useFastSearch;, +		JNodeCache nodeCache = cache.getNodeCache();, +		final TextSearchIndex index = new TextSearchIndex(nodeCache, useFastSearch);, +		final CodeUsageInfo usageInfo = new CodeUsageInfo(nodeCache);, +						List<StringRef> lines = splitLines(cls);, +						if (Utils.isFreeMemoryAvailable()) {, +	protected List<StringRef> splitLines(JavaClass cls) {, +		List<StringRef> lines = StringRef.split(cls.getCode(), CodeWriter.NL);, +		int size = lines.size();, +		for (int i = 0; i < size; i++) {, +			lines.set(i, lines.get(i).trim());, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected int threadsCount = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +++ b/jadx-cli/src/main/resources/logback.xml, +            <pattern>%d{HH:mm:ss} %-5level - %msg%n</pattern>, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +import jadx.gui.utils.search.TextSearchIndex;, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/IndexJob.java, +import jadx.gui.utils.JNodeCache;, +import jadx.gui.utils.search.StringRef;, +import jadx.gui.utils.search.TextSearchIndex;, +, +import java.util.List;, +	public IndexJob(JadxWrapper wrapper, CacheObject cache, int threadsCount, boolean useFastSearch) {, +		super(wrapper, threadsCount);, +		this.useFastSearch = useFastSearch;, +		JNodeCache nodeCache = cache.getNodeCache();, +		final TextSearchIndex index = new TextSearchIndex(nodeCache, useFastSearch);, +		final CodeUsageInfo usageInfo = new CodeUsageInfo(nodeCache);, +						List<StringRef> lines = splitLines(cls);, +						if (Utils.isFreeMemoryAvailable()) {, +	protected List<StringRef> splitLines(JavaClass cls) {, +		List<StringRef> lines = StringRef.split(cls.getCode(), CodeWriter.NL);, +		int size = lines.size();, +		for (int i = 0; i < size; i++) {, +			lines.set(i, lines.get(i).trim());, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java, +	private boolean autoStartJobs = true;, +, +	public JadxSettings() {, +		setSkipResources(true);, +	}, +		return false;, +//		return useFastSearch;, +	public boolean isAutoStartJobs() {, +		return autoStartJobs;, +	}, +, +	public void setAutoStartJobs(boolean autoStartJobs) {, +		this.autoStartJobs = autoStartJobs;, +	}, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected int threadsCount = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +++ b/jadx-cli/src/main/resources/logback.xml, +            <pattern>%d{HH:mm:ss} %-5level - %msg%n</pattern>, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/BackgroundWorker.java, +import jadx.gui.utils.search.TextSearchIndex;, +++ b/jadx-gui/src/main/java/jadx/gui/jobs/IndexJob.java, +import jadx.gui.utils.JNodeCache;, +import jadx.gui.utils.search.StringRef;, +import jadx.gui.utils.search.TextSearchIndex;, +, +import java.util.List;, +	public IndexJob(JadxWrapper wrapper, CacheObject cache, int threadsCount, boolean useFastSearch) {, +		super(wrapper, threadsCount);, +		this.useFastSearch = useFastSearch;, +		JNodeCache nodeCache = cache.getNodeCache();, +		final TextSearchIndex index = new TextSearchIndex(nodeCache, useFastSearch);, +		final CodeUsageInfo usageInfo = new CodeUsageInfo(nodeCache);, +						List<StringRef> lines = splitLines(cls);, +						if (Utils.isFreeMemoryAvailable()) {, +	protected List<StringRef> splitLines(JavaClass cls) {, +		List<StringRef> lines = StringRef.split(cls.getCode(), CodeWriter.NL);]