[+++ b/build.gradle, +    apply plugin: 'groovy', +, +        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0' , +        // setup coveralls (http://coveralls.io/) see http://github.com/kt3k/coveralls-gradle-plugin, +++ b/build.gradle, +    apply plugin: 'groovy', +, +        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0' , +        // setup coveralls (http://coveralls.io/) see http://github.com/kt3k/coveralls-gradle-plugin, +++ b/jadx-core/build.gradle, +task packTests(type: Jar) {, +    classifier = 'tests', +    from sourceSets.test.output, +}, +, +++ b/build.gradle, +    apply plugin: 'groovy', +, +        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0' , +        // setup coveralls (http://coveralls.io/) see http://github.com/kt3k/coveralls-gradle-plugin, +++ b/jadx-core/build.gradle, +task packTests(type: Jar) {, +    classifier = 'tests', +    from sourceSets.test.output, +}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java, +			return Collections.emptyMap();, +++ b/build.gradle, +    apply plugin: 'groovy', +, +        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0' , +        // setup coveralls (http://coveralls.io/) see http://github.com/kt3k/coveralls-gradle-plugin, +++ b/jadx-core/build.gradle, +task packTests(type: Jar) {, +    classifier = 'tests', +    from sourceSets.test.output, +}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/SignatureParser.java, +			return Collections.emptyMap();, +++ b/jadx-core/src/test/groovy/jadx/tests/TestSignatureParser.groovy, +package jadx.tests, +, +import jadx.core.dex.instructions.args.ArgType, +import jadx.core.dex.nodes.parser.SignatureParser, +import spock.lang.Specification, +, +import static jadx.core.dex.instructions.args.ArgType.*, +, +class TestSignatureParser extends Specification {, +    def "simple types"() {, +        expect:, +        new SignatureParser(str).consumeType() == result, +, +        where:, +        str                   | result, +        ""                    | null, +        "I"                   | INT, +        "[I"                  | array(INT), +        "Ljava/lang/Object;"  | OBJECT, +        "[Ljava/lang/Object;" | array(OBJECT), +        "[[I"                 | array(array(INT)), +    }, +, +    def "generics"() {, +        expect:, +        new SignatureParser(str).consumeType() == result, +, +        where:, +        str               | result, +        "TD;"             | genericType("D"), +        "La<TV;Lb;>;"     | generic("La;", genericType("V"), object("b")), +        "La<Lb<Lc;>;>;"   | generic("La;", generic("Lb;", object("Lc;"))), +        "La<TD;>.c;"      | genericInner(generic("La;", genericType("D")), "c", null), +        "La<Lb;>.c<TV;>;" | genericInner(generic("La;", object("Lb;")), "c", genericType("V")), +    }, +, +    def "inner generic"() {, +        expect:, +        new SignatureParser(str).consumeType().getObject() == result, +, +        where:, +        str                                           | result, +        "La<TV;>.LinkedHashIterator<Lb\$c<Ls;TV;>;>;" | "a\$LinkedHashIterator", +    }, +, +    def "wildcards"() {, +        expect:, +        new SignatureParser("La<$s>;").consumeType() == generic("La;", r as ArgType[]), +, +        where:, +        s       | r, +        "*"     | wildcard(), +        "+Lb;"  | wildcard(object("b"), 1), +        "-Lb;"  | wildcard(object("b"), -1), +        "+TV;"  | wildcard(genericType("V"), 1), +        "-TV;"  | wildcard(genericType("V"), -1), +]