[+++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import java.util.List;, +, +import org.jetbrains.annotations.Nullable;, +, +		synchronized (getSyncObj(cls)) {, +	public static Object getSyncObj(ClassNode cls) {, +		return cls.getClassInfo();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import java.util.List;, +, +import org.jetbrains.annotations.Nullable;, +, +		synchronized (getSyncObj(cls)) {, +	public static Object getSyncObj(ClassNode cls) {, +		return cls.getClassInfo();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +		int len = NL.length();, +		if (buf.substring(0, len).equals(NL)) {, +			buf.delete(0, len);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import java.util.List;, +, +import org.jetbrains.annotations.Nullable;, +, +		synchronized (getSyncObj(cls)) {, +	public static Object getSyncObj(ClassNode cls) {, +		return cls.getClassInfo();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +		int len = NL.length();, +		if (buf.substring(0, len).equals(NL)) {, +			buf.delete(0, len);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +import java.util.LinkedHashSet;, +	private final Set<String> varNames = new LinkedHashSet<>();, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import java.util.List;, +, +import org.jetbrains.annotations.Nullable;, +, +		synchronized (getSyncObj(cls)) {, +	public static Object getSyncObj(ClassNode cls) {, +		return cls.getClassInfo();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +		int len = NL.length();, +		if (buf.substring(0, len).equals(NL)) {, +			buf.delete(0, len);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +import java.util.LinkedHashSet;, +	private final Set<String> varNames = new LinkedHashSet<>();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +import java.util.LinkedHashMap;, +		this.blockBinds = new LinkedHashMap<>(predecessors);, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import java.util.List;, +, +import org.jetbrains.annotations.Nullable;, +, +		synchronized (getSyncObj(cls)) {, +	public static Object getSyncObj(ClassNode cls) {, +		return cls.getClassInfo();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +		int len = NL.length();, +		if (buf.substring(0, len).equals(NL)) {, +			buf.delete(0, len);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +import java.util.LinkedHashSet;, +	private final Set<String> varNames = new LinkedHashSet<>();, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +import java.util.LinkedHashMap;, +		this.blockBinds = new LinkedHashMap<>(predecessors);, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +		this(condition, thenBlock, elseBlock, new HashSet<>(), new HashSet<>());, +++ b/jadx-core/src/main/java/jadx/core/ProcessClass.java, +import java.util.List;, +, +import org.jetbrains.annotations.Nullable;, +, +		synchronized (getSyncObj(cls)) {, +	public static Object getSyncObj(ClassNode cls) {, +		return cls.getClassInfo();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +		int len = NL.length();, +		if (buf.substring(0, len).equals(NL)) {, +			buf.delete(0, len);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +import java.util.LinkedHashSet;, +	private final Set<String> varNames = new LinkedHashSet<>();]