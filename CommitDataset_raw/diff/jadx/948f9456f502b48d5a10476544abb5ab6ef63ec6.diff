[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +			if (jadxArgs.processArgs(args)) {, +	static void processAndSave(JadxCLIArgs inputArgs) {, +		JadxDecompiler jadx = new JadxDecompiler(inputArgs.toJadxArgs());, +		jadx.load();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +			if (jadxArgs.processArgs(args)) {, +	static void processAndSave(JadxCLIArgs inputArgs) {, +		JadxDecompiler jadx = new JadxDecompiler(inputArgs.toJadxArgs());, +		jadx.load();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import java.util.stream.Collectors;, +import jadx.api.JadxArgs;, +import jadx.core.utils.files.FileUtils;, +public class JadxCLIArgs {, +	protected List<String> files = new ArrayList<>(1);, +	protected String outDir;, +	protected String outDirSrc;, +	protected String outDirRes;, +	protected int threadsCount = JadxArgs.DEFAULT_THREADS_COUNT;, +	public JadxArgs toJadxArgs() {, +		JadxArgs args = new JadxArgs();, +		args.setInputFiles(files.stream().map(FileUtils::toFile).collect(Collectors.toList()));, +		args.setOutDir(FileUtils.toFile(outDir));, +		args.setOutDirSrc(FileUtils.toFile(outDirSrc));, +		args.setOutDirRes(FileUtils.toFile(outDirRes));, +		args.setThreadsCount(threadsCount);, +		args.setSkipSources(skipSources);, +		args.setSkipResources(skipResources);, +		args.setFallbackMode(fallbackMode);, +		args.setShowInconsistentCode(showInconsistentCode);, +		args.setCfgOutput(cfgOutput);, +		args.setRawCFGOutput(rawCfgOutput);, +		args.setReplaceConsts(replaceConsts);, +		args.setDeobfuscationOn(deobfuscationOn);, +		args.setDeobfuscationForceSave(deobfuscationForceSave);, +		args.setDeobfuscationMinLength(deobfuscationMinLength);, +		args.setDeobfuscationMaxLength(deobfuscationMaxLength);, +		args.setUseSourceNameAsClassAlias(deobfuscationUseSourceNameAsAlias);, +		args.setEscapeUnicode(escapeUnicode);, +		args.setExportAsGradleProject(exportAsGradleProject);, +		args.setUseImports(useImports);, +		return args;, +	}, +, +	public List<String> getFiles() {, +		return files;, +	public String getOutDir() {, +		return outDir;, +	public String getOutDirSrc() {, +		return outDirSrc;, +	public String getOutDirRes() {, +		return outDirRes;, +	public boolean isUseImports() {, +	public boolean isDeobfuscationUseSourceNameAsAlias() {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +			if (jadxArgs.processArgs(args)) {, +	static void processAndSave(JadxCLIArgs inputArgs) {, +		JadxDecompiler jadx = new JadxDecompiler(inputArgs.toJadxArgs());, +		jadx.load();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +import java.util.stream.Collectors;, +import jadx.api.JadxArgs;, +import jadx.core.utils.files.FileUtils;, +public class JadxCLIArgs {, +	protected List<String> files = new ArrayList<>(1);, +	protected String outDir;, +	protected String outDirSrc;, +	protected String outDirRes;, +	protected int threadsCount = JadxArgs.DEFAULT_THREADS_COUNT;, +	public JadxArgs toJadxArgs() {, +		JadxArgs args = new JadxArgs();, +		args.setInputFiles(files.stream().map(FileUtils::toFile).collect(Collectors.toList()));, +		args.setOutDir(FileUtils.toFile(outDir));, +		args.setOutDirSrc(FileUtils.toFile(outDirSrc));, +		args.setOutDirRes(FileUtils.toFile(outDirRes));, +		args.setThreadsCount(threadsCount);, +		args.setSkipSources(skipSources);, +		args.setSkipResources(skipResources);, +		args.setFallbackMode(fallbackMode);, +		args.setShowInconsistentCode(showInconsistentCode);, +		args.setCfgOutput(cfgOutput);, +		args.setRawCFGOutput(rawCfgOutput);, +		args.setReplaceConsts(replaceConsts);, +		args.setDeobfuscationOn(deobfuscationOn);, +		args.setDeobfuscationForceSave(deobfuscationForceSave);, +		args.setDeobfuscationMinLength(deobfuscationMinLength);, +		args.setDeobfuscationMaxLength(deobfuscationMaxLength);, +		args.setUseSourceNameAsClassAlias(deobfuscationUseSourceNameAsAlias);, +		args.setEscapeUnicode(escapeUnicode);, +		args.setExportAsGradleProject(exportAsGradleProject);, +		args.setUseImports(useImports);, +		return args;, +	}, +, +	public List<String> getFiles() {, +		return files;, +	public String getOutDir() {, +		return outDir;, +	public String getOutDirSrc() {]