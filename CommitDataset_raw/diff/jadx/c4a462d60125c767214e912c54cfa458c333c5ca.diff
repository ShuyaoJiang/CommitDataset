[+++ b/.gitignore, +jadx-output/, +++ b/.gitignore, +jadx-output/, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.14.jar'), +++ b/.gitignore, +jadx-output/, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.14.jar'), +++ /dev/null, +++ b/.gitignore, +jadx-output/, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.14.jar'), +++ /dev/null, +++ b/jadx-core/lib/dx-1.14.jar, +++ b/.gitignore, +jadx-output/, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.14.jar'), +++ /dev/null, +++ b/jadx-core/lib/dx-1.14.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +		throw new DecodeException("Unknown instruction: '" + OpcodeInfo.getName(insn.getOpcode()) + "'");, +++ b/.gitignore, +jadx-output/, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.14.jar'), +++ /dev/null, +++ b/jadx-core/lib/dx-1.14.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +		throw new DecodeException("Unknown instruction: '" + OpcodeInfo.getName(insn.getOpcode()) + "'");, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			throw new DecodeException(this, "Load method exception: " + e.getMessage(), e);, +++ b/.gitignore, +jadx-output/, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.14.jar'), +++ /dev/null, +++ b/jadx-core/lib/dx-1.14.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +		throw new DecodeException("Unknown instruction: '" + OpcodeInfo.getName(insn.getOpcode()) + "'");, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			throw new DecodeException(this, "Load method exception: " + e.getMessage(), e);, +++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, +		JavaToDex j2d = new JavaToDex();, +				throw new JadxException("Empty dx output");, +		} finally {, +			if (j2d.isError()) {, +				LOG.warn("dx message: {}", j2d.getDxErrors());, +			}, +++ b/.gitignore, +jadx-output/, +++ b/jadx-core/build.gradle, +    compile files('lib/dx-1.14.jar'), +++ /dev/null, +++ b/jadx-core/lib/dx-1.14.jar, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +		throw new DecodeException("Unknown instruction: '" + OpcodeInfo.getName(insn.getOpcode()) + "'");, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +			throw new DecodeException(this, "Load method exception: " + e.getMessage(), e);, +++ b/jadx-core/src/main/java/jadx/core/utils/files/InputFile.java, +		JavaToDex j2d = new JavaToDex();, +				throw new JadxException("Empty dx output");, +		} finally {, +			if (j2d.isError()) {, +				LOG.warn("dx message: {}", j2d.getDxErrors());, +			}, +++ b/jadx-core/src/main/java/jadx/core/utils/files/JavaToDex.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +import jadx.core.utils.exceptions.JadxException;, +	private static final Logger LOG = LoggerFactory.getLogger(JavaToDex.class);, +		public DxArgs(DxContext context, String dexFile, String[] input) {, +			super(context);, +			warnings = true;, +			minSdkVersion = 28;, +		try (ByteArrayOutputStream out = new ByteArrayOutputStream();, +		     ByteArrayOutputStream errOut = new ByteArrayOutputStream()) {, +			DxArgs args = new DxArgs(context, "-", new String[]{javaFile});, +			dxErrors = errOut.toString(CHARSET_NAME);]