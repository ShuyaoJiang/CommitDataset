[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +			if (mth.isDefaultConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +			if (mth.isDefaultConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	, +	public boolean isDefaultConstructor() {, +		boolean result = false;, +, +		if (accFlags.isConstructor() && mthInfo.isConstructor()) {, +			int defaultArgCount = 0;, +, +			/** workaround for non-static inner class constructor, that has, +			 * synthetic argument */, +			if ((parentClass != null) && parentClass.getClassInfo().isInner()) {, +				if (!parentClass.getAccessFlags().isStatic()) {, +					ClassNode outerCls = parentClass.getParentClass();, +					if ((argsList != null) && (argsList.size() >= 1)) {, +						if (argsList.get(0).getType().equals(outerCls.getClassInfo().getType())) {, +							defaultArgCount = 1;, +						}, +					}, +				}, +			}, +, +			result = (argsList == null) || (argsList.size() == defaultArgCount);, +		}, +, +		return result;, +	} , +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +			if (mth.isDefaultConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	, +	public boolean isDefaultConstructor() {, +		boolean result = false;, +, +		if (accFlags.isConstructor() && mthInfo.isConstructor()) {, +			int defaultArgCount = 0;, +, +			/** workaround for non-static inner class constructor, that has, +			 * synthetic argument */, +			if ((parentClass != null) && parentClass.getClassInfo().isInner()) {, +				if (!parentClass.getAccessFlags().isStatic()) {, +					ClassNode outerCls = parentClass.getParentClass();, +					if ((argsList != null) && (argsList.size() >= 1)) {, +						if (argsList.get(0).getType().equals(outerCls.getClassInfo().getType())) {, +							defaultArgCount = 1;, +						}, +					}, +				}, +			}, +, +			result = (argsList == null) || (argsList.size() == defaultArgCount);, +		}, +, +		return result;, +	} , +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +, +							// remove super() call in instance initializer, +							if (parentClass.isAnonymous() && mth.isDefaultConstructor() && co.isSuper()) {, +								remove = true;, +							} , +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +			if (mth.isDefaultConstructor()) {, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/MethodNode.java, +	, +	public boolean isDefaultConstructor() {, +		boolean result = false;, +, +		if (accFlags.isConstructor() && mthInfo.isConstructor()) {, +			int defaultArgCount = 0;, +, +			/** workaround for non-static inner class constructor, that has, +			 * synthetic argument */, +			if ((parentClass != null) && parentClass.getClassInfo().isInner()) {, +				if (!parentClass.getAccessFlags().isStatic()) {, +					ClassNode outerCls = parentClass.getParentClass();, +					if ((argsList != null) && (argsList.size() >= 1)) {, +						if (argsList.get(0).getType().equals(outerCls.getClassInfo().getType())) {, +							defaultArgCount = 1;, +						}, +					}, +				}, +			}, +, +			result = (argsList == null) || (argsList.size() == defaultArgCount);, +		}, +, +		return result;, +	} , +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ModVisitor.java, +, +							// remove super() call in instance initializer, +							if (parentClass.isAnonymous() && mth.isDefaultConstructor() && co.isSuper()) {, +								remove = true;, +							} , +]