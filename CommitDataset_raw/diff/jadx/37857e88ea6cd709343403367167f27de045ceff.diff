[+++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, arg, false);, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, arg, false);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		domsOn.xor(succ); // filter 'out' block, +			List<BlockNode> blocks = mth.getBasicBlocks();, +				BlockNode b = blocks.get(i);, +					domsOn.clear(s.getId());, +			// one or several case blocks are empty,, +			// run expensive algorithm for find 'out' block, +			for (BlockNode maybeOut : block.getSuccessors()) {, +				boolean allReached = true;, +				for (BlockNode s : block.getSuccessors()) {, +					if (!BlockUtils.isPathExists(s, maybeOut)) {, +						allReached = false;, +						break;, +					}, +				}, +				if (allReached) {, +					out = maybeOut;, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, arg, false);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		domsOn.xor(succ); // filter 'out' block, +			List<BlockNode> blocks = mth.getBasicBlocks();, +				BlockNode b = blocks.get(i);, +					domsOn.clear(s.getId());, +			// one or several case blocks are empty,, +			// run expensive algorithm for find 'out' block, +			for (BlockNode maybeOut : block.getSuccessors()) {, +				boolean allReached = true;, +				for (BlockNode s : block.getSuccessors()) {, +					if (!BlockUtils.isPathExists(s, maybeOut)) {, +						allReached = false;, +						break;, +					}, +				}, +				if (allReached) {, +					out = maybeOut;, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +		if (start == end || end.isDominator(start)) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, arg, false);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		domsOn.xor(succ); // filter 'out' block, +			List<BlockNode> blocks = mth.getBasicBlocks();, +				BlockNode b = blocks.get(i);, +					domsOn.clear(s.getId());, +			// one or several case blocks are empty,, +			// run expensive algorithm for find 'out' block, +			for (BlockNode maybeOut : block.getSuccessors()) {, +				boolean allReached = true;, +				for (BlockNode s : block.getSuccessors()) {, +					if (!BlockUtils.isPathExists(s, maybeOut)) {, +						allReached = false;, +						break;, +					}, +				}, +				if (allReached) {, +					out = maybeOut;, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +		if (start == end || end.isDominator(start)) {, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		addArg(code, arg, false);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		domsOn.xor(succ); // filter 'out' block, +			List<BlockNode> blocks = mth.getBasicBlocks();, +				BlockNode b = blocks.get(i);, +					domsOn.clear(s.getId());, +			// one or several case blocks are empty,, +			// run expensive algorithm for find 'out' block, +			for (BlockNode maybeOut : block.getSuccessors()) {, +				boolean allReached = true;, +				for (BlockNode s : block.getSuccessors()) {, +					if (!BlockUtils.isPathExists(s, maybeOut)) {, +						allReached = false;, +						break;, +					}, +				}, +				if (allReached) {, +					out = maybeOut;, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +		if (start == end || end.isDominator(start)) {, +++ /dev/null, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java]