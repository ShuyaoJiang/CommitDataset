[+++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import java.util.concurrent.ThreadPoolExecutor;, +			ExecutorService ex = saveAll(args.getOutDir());, +			ex.awaitTermination(100, TimeUnit.DAYS);, +			LOG.info("done");, +	public ThreadPoolExecutor saveAll(File dir) throws InterruptedException {, +		SaveCode savePass = new SaveCode(dir, args);, +		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(threadsCount);, +		return executor;, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import java.util.concurrent.ThreadPoolExecutor;, +			ExecutorService ex = saveAll(args.getOutDir());, +			ex.awaitTermination(100, TimeUnit.DAYS);, +			LOG.info("done");, +	public ThreadPoolExecutor saveAll(File dir) throws InterruptedException {, +		SaveCode savePass = new SaveCode(dir, args);, +		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(threadsCount);, +		return executor;, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import java.util.concurrent.ThreadPoolExecutor;, +			ExecutorService ex = saveAll(args.getOutDir());, +			ex.awaitTermination(100, TimeUnit.DAYS);, +			LOG.info("done");, +	public ThreadPoolExecutor saveAll(File dir) throws InterruptedException {, +		SaveCode savePass = new SaveCode(dir, args);, +		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(threadsCount);, +		return executor;, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SaveCode.java, +	public SaveCode(File dir, IJadxArgs args) {, +		this.dir = dir;, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import java.util.concurrent.ThreadPoolExecutor;, +			ExecutorService ex = saveAll(args.getOutDir());, +			ex.awaitTermination(100, TimeUnit.DAYS);, +			LOG.info("done");, +	public ThreadPoolExecutor saveAll(File dir) throws InterruptedException {, +		SaveCode savePass = new SaveCode(dir, args);, +		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(threadsCount);, +		return executor;, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SaveCode.java, +	public SaveCode(File dir, IJadxArgs args) {, +		this.dir = dir;, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +import javax.swing.ProgressMonitor;, +import java.util.concurrent.ThreadPoolExecutor;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +	private static final Logger LOG = LoggerFactory.getLogger(JadxWrapper.class);, +, +	public void saveAll(final File dir, final ProgressMonitor progressMonitor) {, +		Runnable save = new Runnable() {, +			@Override, +			public void run() {, +				try {, +					ThreadPoolExecutor ex = decompiler.saveAll(dir);, +					while (ex.isTerminating()) {, +						long total = ex.getTaskCount();, +						long done = ex.getCompletedTaskCount();, +						progressMonitor.setProgress((int) (done * 100.0 / (double) total));, +						Thread.sleep(500);, +					}, +					progressMonitor.close();, +					LOG.info("done");, +				} catch (InterruptedException e) {, +					e.printStackTrace();, +				}, +			}, +		};, +		new Thread(save).start();, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +import java.util.concurrent.ThreadPoolExecutor;, +			ExecutorService ex = saveAll(args.getOutDir());, +			ex.awaitTermination(100, TimeUnit.DAYS);, +			LOG.info("done");, +	public ThreadPoolExecutor saveAll(File dir) throws InterruptedException {, +		SaveCode savePass = new SaveCode(dir, args);, +		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(threadsCount);, +		return executor;, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SaveCode.java, +	public SaveCode(File dir, IJadxArgs args) {, +		this.dir = dir;, +++ b/jadx-gui/src/main/java/jadx/gui/JadxWrapper.java, +import javax.swing.ProgressMonitor;, +import java.util.concurrent.ThreadPoolExecutor;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +	private static final Logger LOG = LoggerFactory.getLogger(JadxWrapper.class);, +, +	public void saveAll(final File dir, final ProgressMonitor progressMonitor) {, +		Runnable save = new Runnable() {, +			@Override, +			public void run() {]