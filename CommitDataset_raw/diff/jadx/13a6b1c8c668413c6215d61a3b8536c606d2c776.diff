[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-f", "--fallback"}, description = "make simple dump (using goto instead of 'if', 'for', etc)"), +	@Parameter(names = {"--show-bad-code"}, description = "show inconsistent code (incorrectly decompiled)"), +	protected boolean showInconsistentCode = false;, +, +	public boolean isShowInconsistentCode() {, +		return showInconsistentCode;, +	}, +, +	@Override, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-f", "--fallback"}, description = "make simple dump (using goto instead of 'if', 'for', etc)"), +	@Parameter(names = {"--show-bad-code"}, description = "show inconsistent code (incorrectly decompiled)"), +	protected boolean showInconsistentCode = false;, +, +	public boolean isShowInconsistentCode() {, +		return showInconsistentCode;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +	public boolean isShowInconsistentCode() {, +		return false;, +	}, +, +	@Override, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-f", "--fallback"}, description = "make simple dump (using goto instead of 'if', 'for', etc)"), +	@Parameter(names = {"--show-bad-code"}, description = "show inconsistent code (incorrectly decompiled)"), +	protected boolean showInconsistentCode = false;, +, +	public boolean isShowInconsistentCode() {, +		return showInconsistentCode;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +	public boolean isShowInconsistentCode() {, +		return false;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	boolean isShowInconsistentCode();, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-f", "--fallback"}, description = "make simple dump (using goto instead of 'if', 'for', etc)"), +	@Parameter(names = {"--show-bad-code"}, description = "show inconsistent code (incorrectly decompiled)"), +	protected boolean showInconsistentCode = false;, +, +	public boolean isShowInconsistentCode() {, +		return showInconsistentCode;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +	public boolean isShowInconsistentCode() {, +		return false;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	boolean isShowInconsistentCode();, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.api.IJadxArgs;, +	private boolean showInconsistentCode = false;, +, +	public ClassGen(ClassNode cls, ClassGen parentClsGen, IJadxArgs jadxArgs) {, +		this(cls, parentClsGen, jadxArgs.isFallbackMode());, +		this.showInconsistentCode = jadxArgs.isShowInconsistentCode();, +	}, +, +				if (showInconsistentCode) {, +					mth.remove(AFlag.INCONSISTENT_CODE);, +				}, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-f", "--fallback"}, description = "make simple dump (using goto instead of 'if', 'for', etc)"), +	@Parameter(names = {"--show-bad-code"}, description = "show inconsistent code (incorrectly decompiled)"), +	protected boolean showInconsistentCode = false;, +, +	public boolean isShowInconsistentCode() {, +		return showInconsistentCode;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +	public boolean isShowInconsistentCode() {, +		return false;, +	}, +, +	@Override, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	boolean isShowInconsistentCode();, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +import jadx.api.IJadxArgs;, +	private boolean showInconsistentCode = false;, +, +	public ClassGen(ClassNode cls, ClassGen parentClsGen, IJadxArgs jadxArgs) {]