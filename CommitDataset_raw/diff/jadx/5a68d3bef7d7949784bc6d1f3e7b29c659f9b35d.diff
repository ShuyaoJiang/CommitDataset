[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected void useType(CodeWriter code, ArgType type) {, +				if (insn.getResult() != null && !insn.contains(AFlag.ARITH_ONEARG)) {, +		if (insn.contains(AFlag.ARITH_ONEARG)) {, +			makeArithOneArg(insn, code);, +			return;, +		}, +		InsnArg arg = insn.getArg(1);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected void useType(CodeWriter code, ArgType type) {, +				if (insn.getResult() != null && !insn.contains(AFlag.ARITH_ONEARG)) {, +		if (insn.contains(AFlag.ARITH_ONEARG)) {, +			makeArithOneArg(insn, code);, +			return;, +		}, +		InsnArg arg = insn.getArg(1);, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.regions.loops.ForEachLoop;, +			if (type instanceof ForEachLoop) {, +				ForEachLoop forEachLoop = (ForEachLoop) type;, +				code.startLine("for (");, +				declareVar(code, forEachLoop.getVarArg());, +				code.add(" : ");, +				addArg(code, forEachLoop.getIterableArg(), false);, +				code.add(") {");, +				makeRegionIndent(code, region.getBody());, +				code.startLine('}');, +				return code;, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected void useType(CodeWriter code, ArgType type) {, +				if (insn.getResult() != null && !insn.contains(AFlag.ARITH_ONEARG)) {, +		if (insn.contains(AFlag.ARITH_ONEARG)) {, +			makeArithOneArg(insn, code);, +			return;, +		}, +		InsnArg arg = insn.getArg(1);, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.regions.loops.ForEachLoop;, +			if (type instanceof ForEachLoop) {, +				ForEachLoop forEachLoop = (ForEachLoop) type;, +				code.startLine("for (");, +				declareVar(code, forEachLoop.getVarArg());, +				code.add(" : ");, +				addArg(code, forEachLoop.getIterableArg(), false);, +				code.add(") {");, +				makeRegionIndent(code, region.getBody());, +				code.startLine('}');, +				return code;, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +	ARITH_ONEARG,, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected void useType(CodeWriter code, ArgType type) {, +				if (insn.getResult() != null && !insn.contains(AFlag.ARITH_ONEARG)) {, +		if (insn.contains(AFlag.ARITH_ONEARG)) {, +			makeArithOneArg(insn, code);, +			return;, +		}, +		InsnArg arg = insn.getArg(1);, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.regions.loops.ForEachLoop;, +			if (type instanceof ForEachLoop) {, +				ForEachLoop forEachLoop = (ForEachLoop) type;, +				code.startLine("for (");, +				declareVar(code, forEachLoop.getVarArg());, +				code.add(" : ");, +				addArg(code, forEachLoop.getIterableArg(), false);, +				code.add(") {");, +				makeRegionIndent(code, region.getBody());, +				code.startLine('}');, +				return code;, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +	ARITH_ONEARG,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/ArithNode.java, +import jadx.core.dex.attributes.AFlag;, +		this(op, res, res, a);, +		add(AFlag.ARITH_ONEARG);, +				+ getArg(1);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected void useType(CodeWriter code, ArgType type) {, +				if (insn.getResult() != null && !insn.contains(AFlag.ARITH_ONEARG)) {, +		if (insn.contains(AFlag.ARITH_ONEARG)) {, +			makeArithOneArg(insn, code);, +			return;, +		}, +		InsnArg arg = insn.getArg(1);, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.regions.loops.ForEachLoop;, +			if (type instanceof ForEachLoop) {, +				ForEachLoop forEachLoop = (ForEachLoop) type;, +				code.startLine("for (");, +				declareVar(code, forEachLoop.getVarArg());, +				code.add(" : ");, +				addArg(code, forEachLoop.getIterableArg(), false);, +				code.add(") {");, +				makeRegionIndent(code, region.getBody());, +				code.startLine('}');, +				return code;]