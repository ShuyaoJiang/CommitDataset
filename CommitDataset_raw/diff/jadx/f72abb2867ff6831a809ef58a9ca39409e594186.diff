[+++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +		JadxDecompiler d = loadFiles(Collections.singletonList(file));, +		RootNode root = JadxInternalAccess.getRoot(d);, +, +		ClassNode cls = root.searchClassByName(clsName);, +		assertThat("Class not found: " + clsName, cls, notNullValue());, +		assertThat(clsName, is(cls.getClassInfo().getFullName()));, +, +		decompileAndCheckCls(d, cls);, +		return cls;, +	}, +, +	protected JadxDecompiler loadFiles(List<File> inputFiles) {, +			args.setInputFiles(inputFiles);, +		return d;, +	}, +	protected void decompileAndCheckCls(JadxDecompiler d, ClassNode cls) {, +		runAutoCheck(cls.getClassInfo().getFullName());, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +		JadxDecompiler d = loadFiles(Collections.singletonList(file));, +		RootNode root = JadxInternalAccess.getRoot(d);, +, +		ClassNode cls = root.searchClassByName(clsName);, +		assertThat("Class not found: " + clsName, cls, notNullValue());, +		assertThat(clsName, is(cls.getClassInfo().getFullName()));, +, +		decompileAndCheckCls(d, cls);, +		return cls;, +	}, +, +	protected JadxDecompiler loadFiles(List<File> inputFiles) {, +			args.setInputFiles(inputFiles);, +		return d;, +	}, +	protected void decompileAndCheckCls(JadxDecompiler d, ClassNode cls) {, +		runAutoCheck(cls.getClassInfo().getFullName());, +++ b/jadx-core/src/test/java/jadx/tests/api/SmaliTest.java, +import org.jetbrains.annotations.Nullable;, +import jadx.api.JadxDecompiler;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.junit.Assert.assertThat;, +, +	protected ClassNode getClassNodeFromSmali(String clsName) {, +		return getClassNodeFromSmali(clsName, clsName);, +	}, +, +	protected ClassNode getClassNodeFromSmaliFiles(String pkg, String testName, String clsName) {, +		compileSmali(outDex, collectSmaliFiles(pkg, testName));, +	protected JadxDecompiler loadSmaliFile(String pkg, String smaliFileName) {, +		File outDex = createTempFile(".dex");, +		compileSmali(outDex, Collections.singletonList(getSmaliFile(pkg + File.separatorChar + smaliFileName)));, +		return loadFiles(Collections.singletonList(outDex));, +	}, +, +	protected JadxDecompiler loadSmaliFiles(String pkg, String testNameDir) {, +		File outDex = createTempFile(".dex");, +		compileSmali(outDex, collectSmaliFiles(pkg, testNameDir));, +		return loadFiles(Collections.singletonList(outDex));, +	}, +, +	private List<File> collectSmaliFiles(String pkg, @Nullable String testDir) {, +		String smaliFilesDir;, +		if (testDir == null) {, +			smaliFilesDir = pkg + File.separatorChar;, +		} else {, +			smaliFilesDir = pkg + File.separatorChar + testDir + File.separatorChar;, +		}, +		File smaliDir = new File(SMALI_TESTS_DIR, smaliFilesDir);, +		String[] smaliFileNames = smaliDir.list((dir, name) -> name.endsWith(".smali"));, +		assertThat("Smali files not found", smaliFileNames, notNullValue());, +		return Arrays.stream(smaliFileNames), +				.map(file -> new File(smaliDir, file)), +				.collect(Collectors.toList());, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +		JadxDecompiler d = loadFiles(Collections.singletonList(file));, +		RootNode root = JadxInternalAccess.getRoot(d);, +, +		ClassNode cls = root.searchClassByName(clsName);, +		assertThat("Class not found: " + clsName, cls, notNullValue());, +		assertThat(clsName, is(cls.getClassInfo().getFullName()));, +, +		decompileAndCheckCls(d, cls);, +		return cls;, +	}, +, +	protected JadxDecompiler loadFiles(List<File> inputFiles) {, +			args.setInputFiles(inputFiles);, +		return d;, +	}, +	protected void decompileAndCheckCls(JadxDecompiler d, ClassNode cls) {, +		runAutoCheck(cls.getClassInfo().getFullName());, +++ b/jadx-core/src/test/java/jadx/tests/api/SmaliTest.java, +import org.jetbrains.annotations.Nullable;, +import jadx.api.JadxDecompiler;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.junit.Assert.assertThat;, +, +	protected ClassNode getClassNodeFromSmali(String clsName) {, +		return getClassNodeFromSmali(clsName, clsName);, +	}]