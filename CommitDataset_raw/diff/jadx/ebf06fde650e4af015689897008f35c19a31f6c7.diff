[+++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.dex.attributes.AttributeFlag;, +, +	private List<JavaClass> innerClasses = Collections.emptyList();, +	private List<JavaField> fields = Collections.emptyList();, +	private List<JavaMethod> methods = Collections.emptyList();, +	}, +, +	public void decompile() {, +		decompiler.processClass(cls);, +		if (inClsCount != 0) {, +				if (!inner.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (fieldsCount != 0) {, +				if (!f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (methodsCount != 0) {, +				if (!m.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +					mths.add(new JavaMethod(this, m));, +			decompile();, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.dex.attributes.AttributeFlag;, +, +	private List<JavaClass> innerClasses = Collections.emptyList();, +	private List<JavaField> fields = Collections.emptyList();, +	private List<JavaMethod> methods = Collections.emptyList();, +	}, +, +	public void decompile() {, +		decompiler.processClass(cls);, +		if (inClsCount != 0) {, +				if (!inner.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (fieldsCount != 0) {, +				if (!f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (methodsCount != 0) {, +				if (!m.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +					mths.add(new JavaMethod(this, m));, +			decompile();, +++ b/jadx-core/src/main/java/jadx/api/JavaMethod.java, +	private final JavaClass parent;, +	public JavaMethod(JavaClass cls, MethodNode m) {, +		this.parent = cls;, +		return mth.getMethodInfo().getName();, +, +	public JavaClass getDeclaringClass() {, +		return parent;, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.dex.attributes.AttributeFlag;, +, +	private List<JavaClass> innerClasses = Collections.emptyList();, +	private List<JavaField> fields = Collections.emptyList();, +	private List<JavaMethod> methods = Collections.emptyList();, +	}, +, +	public void decompile() {, +		decompiler.processClass(cls);, +		if (inClsCount != 0) {, +				if (!inner.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (fieldsCount != 0) {, +				if (!f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (methodsCount != 0) {, +				if (!m.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +					mths.add(new JavaMethod(this, m));, +			decompile();, +++ b/jadx-core/src/main/java/jadx/api/JavaMethod.java, +	private final JavaClass parent;, +	public JavaMethod(JavaClass cls, MethodNode m) {, +		this.parent = cls;, +		return mth.getMethodInfo().getName();, +, +	public JavaClass getDeclaringClass() {, +		return parent;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (mth.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +			if (it.hasNext()) {, +		}, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.dex.attributes.AttributeFlag;, +, +	private List<JavaClass> innerClasses = Collections.emptyList();, +	private List<JavaField> fields = Collections.emptyList();, +	private List<JavaMethod> methods = Collections.emptyList();, +	}, +, +	public void decompile() {, +		decompiler.processClass(cls);, +		if (inClsCount != 0) {, +				if (!inner.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (fieldsCount != 0) {, +				if (!f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +			}, +		if (methodsCount != 0) {, +				if (!m.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +					mths.add(new JavaMethod(this, m));]