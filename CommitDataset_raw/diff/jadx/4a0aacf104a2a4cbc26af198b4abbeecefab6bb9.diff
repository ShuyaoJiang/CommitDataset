[+++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (decompiler == null) {, +			throw new JadxRuntimeException("Can't decompile inner class");, +		}, +		load();, +	}, +	private void load() {, +					JavaClass javaClass = new JavaClass(null, inner);, +					javaClass.load();, +					list.add(javaClass);, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (decompiler == null) {, +			throw new JadxRuntimeException("Can't decompile inner class");, +		}, +		load();, +	}, +	private void load() {, +					JavaClass javaClass = new JavaClass(null, inner);, +					javaClass.load();, +					list.add(javaClass);, +++ b/jadx-gui/src/main/java/jadx/gui/MainWindow.java, +			JClass cls = node.getRootClass();, +			if (cls != null) {, +				showCode(cls, node.getLine());, +					cls.getRootClass().load();, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (decompiler == null) {, +			throw new JadxRuntimeException("Can't decompile inner class");, +		}, +		load();, +	}, +	private void load() {, +					JavaClass javaClass = new JavaClass(null, inner);, +					javaClass.load();, +					list.add(javaClass);, +++ b/jadx-gui/src/main/java/jadx/gui/MainWindow.java, +			JClass cls = node.getRootClass();, +			if (cls != null) {, +				showCode(cls, node.getLine());, +					cls.getRootClass().load();, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JClass.java, +	private final JClass jParent;, +		this.jParent = null;, +		this.loaded = false;, +	}, +, +	public JClass(JavaClass cls, JClass parent) {, +		this.cls = cls;, +		this.jParent = parent;, +		this.loaded = true;, +				JClass child = new JClass(javaClass, this);, +				child.updateChilds();, +				add(new JField(f, this));, +				add(new JMethod(m, this));, +	@Override, +	public JClass getJParent() {, +		return jParent;, +	public JClass getRootClass() {, +		if (jParent == null) {, +			return this;, +		}, +		return jParent.getRootClass();, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (decompiler == null) {, +			throw new JadxRuntimeException("Can't decompile inner class");, +		}, +		load();, +	}, +	private void load() {, +					JavaClass javaClass = new JavaClass(null, inner);, +					javaClass.load();, +					list.add(javaClass);, +++ b/jadx-gui/src/main/java/jadx/gui/MainWindow.java, +			JClass cls = node.getRootClass();, +			if (cls != null) {, +				showCode(cls, node.getLine());, +					cls.getRootClass().load();, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JClass.java, +	private final JClass jParent;, +		this.jParent = null;, +		this.loaded = false;, +	}, +, +	public JClass(JavaClass cls, JClass parent) {, +		this.cls = cls;, +		this.jParent = parent;, +		this.loaded = true;, +				JClass child = new JClass(javaClass, this);, +				child.updateChilds();, +				add(new JField(f, this));, +				add(new JMethod(m, this));, +	@Override, +	public JClass getJParent() {, +		return jParent;, +	public JClass getRootClass() {, +		if (jParent == null) {]