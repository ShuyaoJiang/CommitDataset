[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +		if (parentInsn != null) {, +			switch (parentInsn.getType()) {, +				case MOVE: {, +					break;, +				}, +				case RETURN: {, +					parentInsn.setSourceLine(insn.getSourceLine());, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +		if (parentInsn != null) {, +			switch (parentInsn.getType()) {, +				case MOVE: {, +					break;, +				}, +				case RETURN: {, +					parentInsn.setSourceLine(insn.getSourceLine());, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +		return replaceConst(mth, insn, lit);, +	private static boolean replaceConst(MethodNode mth, InsnNode constInsn, long literal) {, +		SSAVar sVar = constInsn.getResult().getSVar();, +				if (useInsn.getType() == InsnType.RETURN) {, +					useInsn.setSourceLine(constInsn.getSourceLine());, +				}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +		if (parentInsn != null) {, +			switch (parentInsn.getType()) {, +				case MOVE: {, +					break;, +				}, +				case RETURN: {, +					parentInsn.setSourceLine(insn.getSourceLine());, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +		return replaceConst(mth, insn, lit);, +	private static boolean replaceConst(MethodNode mth, InsnNode constInsn, long literal) {, +		SSAVar sVar = constInsn.getResult().getSVar();, +				if (useInsn.getType() == InsnType.RETURN) {, +					useInsn.setSourceLine(constInsn.getSourceLine());, +				}, +++ b/jadx-core/src/test/java/jadx/tests/integration/conditions/TestTernary3.java, +		assertThat(code, containsOne("if (n == null || !(arg instanceof Named)) {"));, +		assertThat(code, containsOne("return n.equals(((Named) arg).getName());"));, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +		if (parentInsn != null) {, +			switch (parentInsn.getType()) {, +				case MOVE: {, +					break;, +				}, +				case RETURN: {, +					parentInsn.setSourceLine(insn.getSourceLine());, +					break;, +				}, +			}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/ConstInlinerVisitor.java, +		return replaceConst(mth, insn, lit);, +	private static boolean replaceConst(MethodNode mth, InsnNode constInsn, long literal) {, +		SSAVar sVar = constInsn.getResult().getSVar();, +				if (useInsn.getType() == InsnType.RETURN) {, +					useInsn.setSourceLine(constInsn.getSourceLine());, +				}, +++ b/jadx-core/src/test/java/jadx/tests/integration/conditions/TestTernary3.java, +		assertThat(code, containsOne("if (n == null || !(arg instanceof Named)) {"));, +		assertThat(code, containsOne("return n.equals(((Named) arg).getName());"));, +++ b/jadx-core/src/test/java/jadx/tests/integration/debuginfo/TestReturnSourceLine.java, +package jadx.tests.integration.debuginfo;, +, +import jadx.core.codegen.CodeWriter;, +import jadx.core.dex.attributes.nodes.LineAttrNode;, +import jadx.core.dex.nodes.ClassNode;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.tests.api.IntegrationTest;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertThat;, +, +public class TestReturnSourceLine extends IntegrationTest {, +, +	public static class TestCls {, +		public int test1(boolean v) {, +			if (v) {, +				f();, +				return 1;, +			}, +			f();, +			return 0;, +		}, +, +		public int test2(int v) {]