[+++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JPackage.java, +		if (this == o) {, +		if (o == null || getClass() != o.getClass()) {, +			return false;, +		}, +		return name.equals(((JPackage) o).name);, +	}, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JPackage.java, +		if (this == o) {, +		if (o == null || getClass() != o.getClass()) {, +			return false;, +		}, +		return name.equals(((JPackage) o).name);, +	}, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JRoot.java, +import java.util.IdentityHashMap;, +	/**, +	 * Convert packages list to hierarchical packages representation, +	 *, +	 * @param packages input packages list, +	 * @return root packages, +	 */, +, +, +		// use identity set for collect inner packages, +		Set<JPackage> innerPackages = Collections.newSetFromMap(new IdentityHashMap<JPackage,Boolean>());, +			innerPackages.addAll(pkg.getInnerPackages());, +		// find root packages, +			if (!innerPackages.contains(pkg)) {, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JPackage.java, +		if (this == o) {, +		if (o == null || getClass() != o.getClass()) {, +			return false;, +		}, +		return name.equals(((JPackage) o).name);, +	}, +++ b/jadx-gui/src/main/java/jadx/gui/treemodel/JRoot.java, +import java.util.IdentityHashMap;, +	/**, +	 * Convert packages list to hierarchical packages representation, +	 *, +	 * @param packages input packages list, +	 * @return root packages, +	 */, +, +, +		// use identity set for collect inner packages, +		Set<JPackage> innerPackages = Collections.newSetFromMap(new IdentityHashMap<JPackage,Boolean>());, +			innerPackages.addAll(pkg.getInnerPackages());, +		// find root packages, +			if (!innerPackages.contains(pkg)) {, +++ b/jadx-gui/src/test/java/jadx/gui/treemodel/JRootTest.java, +import org.junit.Before;, +	private JRoot root;, +	private Decompiler decompiler;, +, +	@Before, +	public void init() {, +		root = new JRoot(mock(JadxWrapper.class));, +		decompiler = new Decompiler(mock(IJadxArgs.class));, +	}, +, +		List<JavaPackage> packages = Arrays.asList(newPkg(pkgName));, +	@Test, +	public void testHierarchyPackages2() {, +		List<JavaPackage> packages = Arrays.asList(, +				newPkg("a.b"),, +				newPkg("a.c"),, +				newPkg("a.d"), +		);, +		List<JPackage> out = root.getHierarchyPackages(packages);, +, +		assertEquals(out.size(), 1);, +		JPackage jpkg = out.get(0);, +		assertEquals(jpkg.getName(), "a");, +		assertEquals(jpkg.getClasses().size(), 0);, +		assertEquals(jpkg.getInnerPackages().size(), 3);, +	}, +, +	@Test, +	public void testHierarchyPackages3() {, +		List<JavaPackage> packages = Arrays.asList(, +				newPkg("a.b.p1"),, +				newPkg("a.b.p2"),, +				newPkg("a.b.p3"), +		);, +		List<JPackage> out = root.getHierarchyPackages(packages);, +, +		assertEquals(out.size(), 1);, +		JPackage jpkg = out.get(0);, +		assertEquals(jpkg.getName(), "a.b");, +		assertEquals(jpkg.getClasses().size(), 0);, +		assertEquals(jpkg.getInnerPackages().size(), 3);, +	}, +, +	@Test, +	public void testHierarchyPackages4() {, +		List<JavaPackage> packages = Arrays.asList(, +				newPkg("a.p1"),, +				newPkg("a.b.c.p2"),]