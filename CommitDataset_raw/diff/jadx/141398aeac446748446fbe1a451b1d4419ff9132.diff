[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +	public void setParentInsn(@Nullable InsnNode parentInsn) {, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +	public void setParentInsn(@Nullable InsnNode parentInsn) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +import org.jetbrains.annotations.Nullable;, +, +						if (inline(arg, assignInsn, assignBlock, mth)) {, +		}, +				inline(wrapInfo.getArg(), wrapInfo.getInsn(), block, mth);, +	private static boolean inline(RegisterArg arg, InsnNode insn, @Nullable BlockNode block, MethodNode mth) {, +		InsnNode parentInsn = arg.getParentInsn();, +		// replace move instruction if needed, +		if (parentInsn != null && parentInsn.getType() == InsnType.MOVE) {, +			if (block == null) {, +				block = BlockUtils.getBlockByInsn(mth, parentInsn);, +			}, +			if (block != null) {, +				int index = InsnList.getIndex(block.getInstructions(), parentInsn);, +				if (index != -1) {, +					insn.setResult(parentInsn.getResult());, +					insn.copyAttributesFrom(parentInsn);, +					insn.setOffset(parentInsn.getOffset());, +, +					block.getInstructions().set(index, insn);, +					return true;, +				}, +			}, +		}, +		// simple case, +		return arg.wrapInstruction(insn) != null;, +	}, +, +					inline(rarg, ai, null, mth);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +	public void setParentInsn(@Nullable InsnNode parentInsn) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +import org.jetbrains.annotations.Nullable;, +, +						if (inline(arg, assignInsn, assignBlock, mth)) {, +		}, +				inline(wrapInfo.getArg(), wrapInfo.getInsn(), block, mth);, +	private static boolean inline(RegisterArg arg, InsnNode insn, @Nullable BlockNode block, MethodNode mth) {, +		InsnNode parentInsn = arg.getParentInsn();, +		// replace move instruction if needed, +		if (parentInsn != null && parentInsn.getType() == InsnType.MOVE) {, +			if (block == null) {, +				block = BlockUtils.getBlockByInsn(mth, parentInsn);, +			}, +			if (block != null) {, +				int index = InsnList.getIndex(block.getInstructions(), parentInsn);, +				if (index != -1) {, +					insn.setResult(parentInsn.getResult());, +					insn.copyAttributesFrom(parentInsn);, +					insn.setOffset(parentInsn.getOffset());, +, +					block.getInstructions().set(index, insn);, +					return true;, +				}, +			}, +		}, +		// simple case, +		return arg.wrapInstruction(insn) != null;, +	}, +, +					inline(rarg, ai, null, mth);, +++ b/jadx-core/src/test/java/jadx/tests/smali/TestInlineVarArg.java, +package jadx.tests.smali;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.SmaliTest;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestInlineVarArg extends SmaliTest {, +, +	@Test, +	public void test() {, +		noDebugInfo();, +		ClassNode cls = getClassNodeFromSmali("TestInlineVarArg");, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsOne("f(\"a\", \"b\", \"c\");"));, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +	public void setParentInsn(@Nullable InsnNode parentInsn) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/CodeShrinker.java, +import org.jetbrains.annotations.Nullable;, +, +						if (inline(arg, assignInsn, assignBlock, mth)) {, +		}, +				inline(wrapInfo.getArg(), wrapInfo.getInsn(), block, mth);, +	private static boolean inline(RegisterArg arg, InsnNode insn, @Nullable BlockNode block, MethodNode mth) {, +		InsnNode parentInsn = arg.getParentInsn();, +		// replace move instruction if needed, +		if (parentInsn != null && parentInsn.getType() == InsnType.MOVE) {]