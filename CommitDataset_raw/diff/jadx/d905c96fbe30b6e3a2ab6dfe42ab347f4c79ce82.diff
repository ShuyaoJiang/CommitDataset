[+++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +			out.println(code);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +			out.println(code);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case MOVE_EXCEPTION:, +				assert isFallback();, +				code.add("move-exception");, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +			out.println(code);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case MOVE_EXCEPTION:, +				assert isFallback();, +				code.add("move-exception");, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +import jadx.core.dex.regions.TryCatchRegion;, +				} else if (cont instanceof TryCatchRegion) {, +					makeTryCatch((TryCatchRegion) cont, code);, +	private void makeTryCatch(TryCatchRegion region, CodeWriter code) throws CodegenException {, +		TryCatchBlock tryCatchBlock = region.geTryCatchBlock();, +		makeRegionIndent(code, region.getTryRegion());, +		// TODO: move search of 'allHandler' to 'TryCatchRegion', +	private void makeCatchBlock(CodeWriter code, ExceptionHandler handler) throws CodegenException {, +		if (region == null) {, +			return;, +		}, +		InsnArg arg = handler.getArg();, +		if (arg instanceof RegisterArg) {, +			declareVar(code, (RegisterArg) arg);, +		} else if (arg instanceof NamedArg) {, +			code.add(mgen.getNameGen().assignNamedArg((NamedArg) arg));, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +			out.println(code);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case MOVE_EXCEPTION:, +				assert isFallback();, +				code.add("move-exception");, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +import jadx.core.dex.regions.TryCatchRegion;, +				} else if (cont instanceof TryCatchRegion) {, +					makeTryCatch((TryCatchRegion) cont, code);, +	private void makeTryCatch(TryCatchRegion region, CodeWriter code) throws CodegenException {, +		TryCatchBlock tryCatchBlock = region.geTryCatchBlock();, +		makeRegionIndent(code, region.getTryRegion());, +		// TODO: move search of 'allHandler' to 'TryCatchRegion', +	private void makeCatchBlock(CodeWriter code, ExceptionHandler handler) throws CodegenException {, +		if (region == null) {, +			return;, +		}, +		InsnArg arg = handler.getArg();, +		if (arg instanceof RegisterArg) {, +			declareVar(code, (RegisterArg) arg);, +		} else if (arg instanceof NamedArg) {, +			code.add(mgen.getNameGen().assignNamedArg((NamedArg) arg));, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +						InsnArg.reg(insn, 0, ArgType.unknown(PrimitiveType.OBJECT)));, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +			out.println(code);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +			case MOVE_EXCEPTION:, +				assert isFallback();, +				code.add("move-exception");, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.instructions.args.NamedArg;, +import jadx.core.dex.regions.TryCatchRegion;, +				} else if (cont instanceof TryCatchRegion) {, +					makeTryCatch((TryCatchRegion) cont, code);, +	private void makeTryCatch(TryCatchRegion region, CodeWriter code) throws CodegenException {, +		TryCatchBlock tryCatchBlock = region.geTryCatchBlock();, +		makeRegionIndent(code, region.getTryRegion());, +		// TODO: move search of 'allHandler' to 'TryCatchRegion', +	private void makeCatchBlock(CodeWriter code, ExceptionHandler handler) throws CodegenException {, +		if (region == null) {, +			return;, +		}, +		InsnArg arg = handler.getArg();, +		if (arg instanceof RegisterArg) {, +			declareVar(code, (RegisterArg) arg);, +		} else if (arg instanceof NamedArg) {, +			code.add(mgen.getNameGen().assignNamedArg((NamedArg) arg));, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +						InsnArg.reg(insn, 0, ArgType.unknown(PrimitiveType.OBJECT)));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/InsnArg.java, +	public static TypeImmutableArg typeImmutableReg(int regNum, ArgType type) {, +		return new TypeImmutableArg(regNum, type);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +			out.println(code);]