[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.blocksmaker.BlockExceptionHandler;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.blocksmaker.BlockFinish;, +import jadx.core.dex.visitors.blocksmaker.BlockProcessor;, +import jadx.core.dex.visitors.blocksmaker.BlockSplitter;, +			passes.add(new BlockSplitter());, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +, +, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.blocksmaker.BlockExceptionHandler;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.blocksmaker.BlockFinish;, +import jadx.core.dex.visitors.blocksmaker.BlockProcessor;, +import jadx.core.dex.visitors.blocksmaker.BlockSplitter;, +			passes.add(new BlockSplitter());, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				assert isFallback();, +				code.add("PHI(").add(String.valueOf(insn.getArgsCount())).add(")");, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.blocksmaker.BlockExceptionHandler;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.blocksmaker.BlockFinish;, +import jadx.core.dex.visitors.blocksmaker.BlockProcessor;, +import jadx.core.dex.visitors.blocksmaker.BlockSplitter;, +			passes.add(new BlockSplitter());, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				assert isFallback();, +				code.add("PHI(").add(String.valueOf(insn.getArgsCount())).add(")");, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import java.util.Map;, +		for (Map.Entry<ExceptionHandler, IContainer> entry : region.getCatchRegions().entrySet()) {, +			ExceptionHandler handler = entry.getKey();, +			if (handler.isCatchAll()) {, +			} else {, +				makeCatchBlock(code, handler);, +		IContainer finallyRegion = region.getFinallyRegion();, +		if (finallyRegion != null) {, +			makeRegionIndent(code, finallyRegion);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.blocksmaker.BlockExceptionHandler;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.blocksmaker.BlockFinish;, +import jadx.core.dex.visitors.blocksmaker.BlockProcessor;, +import jadx.core.dex.visitors.blocksmaker.BlockSplitter;, +			passes.add(new BlockSplitter());, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +, +, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				assert isFallback();, +				code.add("PHI(").add(String.valueOf(insn.getArgsCount())).add(")");, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import java.util.Map;, +		for (Map.Entry<ExceptionHandler, IContainer> entry : region.getCatchRegions().entrySet()) {, +			ExceptionHandler handler = entry.getKey();, +			if (handler.isCatchAll()) {, +			} else {, +				makeCatchBlock(code, handler);, +		IContainer finallyRegion = region.getFinallyRegion();, +		if (finallyRegion != null) {, +			makeRegionIndent(code, finallyRegion);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +	ORIG_RETURN,, +	REMOVE,, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.blocksmaker.BlockExceptionHandler;, +import jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract;, +import jadx.core.dex.visitors.blocksmaker.BlockFinish;, +import jadx.core.dex.visitors.blocksmaker.BlockProcessor;, +import jadx.core.dex.visitors.blocksmaker.BlockSplitter;, +			passes.add(new BlockSplitter());, +			passes.add(new BlockProcessor());, +			passes.add(new BlockExceptionHandler());, +			passes.add(new BlockFinallyExtract());, +			passes.add(new BlockFinish());, +]