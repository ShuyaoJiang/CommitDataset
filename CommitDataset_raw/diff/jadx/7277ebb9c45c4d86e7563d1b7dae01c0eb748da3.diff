[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import org.jetbrains.annotations.Nullable;, +		String filledArray = makeArrayElements(insn);, +		code.add("new ");, +		useType(code, insn.getElementType());, +		code.add("[]{").add(filledArray).add('}');, +	}, +, +	private String makeArrayElements(FillArrayNode insn) throws CodegenException {, +		insn.mergeElementType(elType);, +, +		return str.toString();, +		generateMethodArguments(code, insn, 0, mth.dex().resolveMethod(insn.getCallMth()));, +		generateMethodArguments(code, insn, k, callMthNode);, +	private void generateMethodArguments(CodeWriter code, InsnNode insn, int startArgNum,, +			@Nullable MethodNode callMth) throws CodegenException {, +		int k = startArgNum;, +		if (k < argsCount) {, +			boolean overloaded = callMth != null && callMth.isArgsOverload();, +				boolean cast = overloaded && processOverloadedArg(code, callMth, arg, i - startArgNum);, +				if (!cast && i == argsCount - 1 && processVarArg(code, callMth, arg)) {, +					continue;, +				}, +				addArg(code, arg, false);, +				if (i < argsCount - 1) {, +					code.add(", ");, +				}, +			}, +		}, +		code.add(')');, +	}, +, +	/**, +	 * Add additional cast for overloaded method argument., +	 */, +	private boolean processOverloadedArg(CodeWriter code, MethodNode callMth, InsnArg arg, int origPos) {, +		ArgType origType = callMth.getMethodInfo().getArgumentsTypes().get(origPos);, +			return true;, +		return false;, +	}, +, +	/**, +	 * Expand varArgs from filled array., +	 */, +	private boolean processVarArg(CodeWriter code, MethodNode callMth, InsnArg lastArg) throws CodegenException {, +		if (callMth == null || !callMth.getAccessFlags().isVarArgs()) {, +			return false;, +		}, +		if (!lastArg.getType().isArray() || !lastArg.isInsnWrap()) {, +			return false;, +		}, +		InsnNode insn = ((InsnWrapArg) lastArg).getWrapInsn();, +		if (insn.getType() == InsnType.FILLED_NEW_ARRAY) {, +			int count = insn.getArgsCount();, +			for (int i = 0; i < count; i++) {, +				InsnArg elemArg = insn.getArg(i);, +				addArg(code, elemArg, false);, +				if (i < count - 1) {, +			return true;, +		} else if (insn.getType() == InsnType.FILL_ARRAY) {, +			code.add(makeArrayElements((FillArrayNode) insn));, +			return true;, +		return false;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import org.jetbrains.annotations.Nullable;, +		String filledArray = makeArrayElements(insn);, +		code.add("new ");, +		useType(code, insn.getElementType());, +		code.add("[]{").add(filledArray).add('}');, +	}, +, +	private String makeArrayElements(FillArrayNode insn) throws CodegenException {, +		insn.mergeElementType(elType);, +, +		return str.toString();, +		generateMethodArguments(code, insn, 0, mth.dex().resolveMethod(insn.getCallMth()));, +		generateMethodArguments(code, insn, k, callMthNode);, +	private void generateMethodArguments(CodeWriter code, InsnNode insn, int startArgNum,, +			@Nullable MethodNode callMth) throws CodegenException {, +		int k = startArgNum;, +		if (k < argsCount) {, +			boolean overloaded = callMth != null && callMth.isArgsOverload();, +				boolean cast = overloaded && processOverloadedArg(code, callMth, arg, i - startArgNum);, +				if (!cast && i == argsCount - 1 && processVarArg(code, callMth, arg)) {, +					continue;, +				}, +				addArg(code, arg, false);, +				if (i < argsCount - 1) {, +					code.add(", ");, +				}, +			}, +		}, +		code.add(')');, +	}, +, +	/**, +	 * Add additional cast for overloaded method argument., +	 */, +	private boolean processOverloadedArg(CodeWriter code, MethodNode callMth, InsnArg arg, int origPos) {, +		ArgType origType = callMth.getMethodInfo().getArgumentsTypes().get(origPos);]