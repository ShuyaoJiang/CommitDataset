[+++ b/src/main/java/jadx/codegen/RegionGen.java, +import jadx.dex.regions.IfCondition;, +		code.add("if (").add(makeCondition(region.getCondition())).add(") {");, +				List<IContainer> subBlocks = re.getSubBlocks();, +				if (subBlocks.size() == 1 && subBlocks.get(0) instanceof IfRegion) {, +					makeIf((IfRegion) subBlocks.get(0), code);, +		IfCondition condition = region.getCondition();, +		if (condition == null) {, +		if (region.isConditionAtEnd()) {, +			code.startLine("} while (").add(makeCondition(condition)).add(");");, +		} else {, +			code.startLine("while (").add(makeCondition(condition)).add(") {");, +			makeRegionIndent(code, region.getBody());, +			code.startLine('}');, +	private String makeCondition(IfCondition condition) throws CodegenException {, +		switch (condition.getMode()) {, +			case COMPARE:, +				return makeCompare(condition.getCompare());, +			case NOT:, +				return "!" + makeCondition(condition.getArgs().get(0));, +			case AND:, +			case OR:, +				String mode = condition.getMode() == IfCondition.MODE.AND ? " && " : " || ";, +				CodeWriter cw = new CodeWriter();, +				for (IfCondition arg : condition.getArgs()) {, +					if (cw.notEmpty()) {, +						cw.add(mode);, +					cw.add('(').add(makeCondition(arg)).add(')');, +				}, +				return cw.toString();, +			default:, +				return "??" + condition.toString();, +		}, +	private String makeCompare(IfCondition.Compare compare) throws CodegenException {, +		IfOp op = compare.getOp();, +		InsnArg firstArg = compare.getA();, +		InsnArg secondArg = compare.getB();, +		if (firstArg.getType().equals(ArgType.BOOLEAN), +				&& secondArg.isLiteral(), +				&& secondArg.getType().equals(ArgType.BOOLEAN)) {, +				return arg(firstArg); // == true, +				return "!" + arg(firstArg); // != true, +		return arg(firstArg) + " " + op.getSymbol() + " " + arg(secondArg);, +++ b/src/main/java/jadx/codegen/RegionGen.java, +import jadx.dex.regions.IfCondition;, +		code.add("if (").add(makeCondition(region.getCondition())).add(") {");, +				List<IContainer> subBlocks = re.getSubBlocks();, +				if (subBlocks.size() == 1 && subBlocks.get(0) instanceof IfRegion) {, +					makeIf((IfRegion) subBlocks.get(0), code);, +		IfCondition condition = region.getCondition();, +		if (condition == null) {, +		if (region.isConditionAtEnd()) {, +			code.startLine("} while (").add(makeCondition(condition)).add(");");, +		} else {, +			code.startLine("while (").add(makeCondition(condition)).add(") {");, +			makeRegionIndent(code, region.getBody());, +			code.startLine('}');, +	private String makeCondition(IfCondition condition) throws CodegenException {, +		switch (condition.getMode()) {, +			case COMPARE:, +				return makeCompare(condition.getCompare());, +			case NOT:, +				return "!" + makeCondition(condition.getArgs().get(0));, +			case AND:, +			case OR:, +				String mode = condition.getMode() == IfCondition.MODE.AND ? " && " : " || ";, +				CodeWriter cw = new CodeWriter();, +				for (IfCondition arg : condition.getArgs()) {, +					if (cw.notEmpty()) {, +						cw.add(mode);, +					cw.add('(').add(makeCondition(arg)).add(')');, +				}, +				return cw.toString();, +			default:, +				return "??" + condition.toString();, +		}, +	private String makeCompare(IfCondition.Compare compare) throws CodegenException {, +		IfOp op = compare.getOp();, +		InsnArg firstArg = compare.getA();, +		InsnArg secondArg = compare.getB();, +		if (firstArg.getType().equals(ArgType.BOOLEAN), +				&& secondArg.isLiteral(), +				&& secondArg.getType().equals(ArgType.BOOLEAN)) {, +				return arg(firstArg); // == true, +				return "!" + arg(firstArg); // != true, +		return arg(firstArg) + " " + op.getSymbol() + " " + arg(secondArg);, +++ b/src/main/java/jadx/dex/attributes/AttributeFlag.java, +	SKIP,, +++ b/src/main/java/jadx/codegen/RegionGen.java, +import jadx.dex.regions.IfCondition;, +		code.add("if (").add(makeCondition(region.getCondition())).add(") {");, +				List<IContainer> subBlocks = re.getSubBlocks();, +				if (subBlocks.size() == 1 && subBlocks.get(0) instanceof IfRegion) {, +					makeIf((IfRegion) subBlocks.get(0), code);, +		IfCondition condition = region.getCondition();, +		if (condition == null) {, +		if (region.isConditionAtEnd()) {, +			code.startLine("} while (").add(makeCondition(condition)).add(");");, +		} else {, +			code.startLine("while (").add(makeCondition(condition)).add(") {");]