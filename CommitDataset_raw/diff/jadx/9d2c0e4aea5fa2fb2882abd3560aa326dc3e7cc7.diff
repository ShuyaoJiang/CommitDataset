[+++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +	DONT_INLINE,, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +	DONT_INLINE,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +import jadx.core.utils.InsnUtils;, +		boolean typeImmutable = elType.isPrimitive();, +		int regsCount = insn.getRegisterCount();, +		InsnArg[] regs = new InsnArg[regsCount];, +			for (int i = 0; i < regsCount; i++) {, +				regs[i] = InsnArg.reg(r, elType, typeImmutable);, +			for (int i = 0; i < regsCount; i++) {, +				int regNum = InsnUtils.getArg(insn, i);, +				regs[i] = InsnArg.reg(regNum, elType, typeImmutable);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +	DONT_INLINE,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +import jadx.core.utils.InsnUtils;, +		boolean typeImmutable = elType.isPrimitive();, +		int regsCount = insn.getRegisterCount();, +		InsnArg[] regs = new InsnArg[regsCount];, +			for (int i = 0; i < regsCount; i++) {, +				regs[i] = InsnArg.reg(r, elType, typeImmutable);, +			for (int i = 0; i < regsCount; i++) {, +				int regNum = InsnUtils.getArg(insn, i);, +				regs[i] = InsnArg.reg(regNum, elType, typeImmutable);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +import jadx.core.dex.attributes.AFlag;, +		add(AFlag.DONT_INLINE);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AFlag.java, +	DONT_INLINE,, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +import jadx.core.utils.InsnUtils;, +		boolean typeImmutable = elType.isPrimitive();, +		int regsCount = insn.getRegisterCount();, +		InsnArg[] regs = new InsnArg[regsCount];, +			for (int i = 0; i < regsCount; i++) {, +				regs[i] = InsnArg.reg(r, elType, typeImmutable);, +			for (int i = 0; i < regsCount; i++) {, +				int regNum = InsnUtils.getArg(insn, i);, +				regs[i] = InsnArg.reg(regNum, elType, typeImmutable);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/PhiInsn.java, +import jadx.core.dex.attributes.AFlag;, +		add(AFlag.DONT_INLINE);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/ArgType.java, +import org.jetbrains.annotations.Nullable;, +, +, +		private static final PrimitiveType[] EMPTY_POSSIBLES = new PrimitiveType[0];, +, +, +		@Override, +		public boolean contains(PrimitiveType type) {, +			return getPrimitiveType() == type;, +		}, +, +		@Override, +		public ArgType selectFirst() {, +			return null;, +		}, +, +		@Override, +		public PrimitiveType[] getPossibleTypes() {, +			return EMPTY_POSSIBLES;, +		}, +		public static final PrimitiveType[] ARRAY_POSSIBLES = new PrimitiveType[]{PrimitiveType.ARRAY};, +		public boolean isTypeKnown() {, +			return arrayElement.isTypeKnown();, +		}, +, +		@Override, +		public ArgType selectFirst() {, +			return array(arrayElement.selectFirst());, +		}, +, +		@Override, +		public PrimitiveType[] getPossibleTypes() {, +			return ARRAY_POSSIBLES;, +		}, +, +		@Override, +			if (contains(PrimitiveType.OBJECT)) {, +				return OBJECT;, +			} else if (contains(PrimitiveType.ARRAY)) {, +				return array(OBJECT);, +	public abstract boolean contains(PrimitiveType type);, +	public abstract ArgType selectFirst();, +	public abstract PrimitiveType[] getPossibleTypes();, +	@Nullable, +, +		if (a.isArray()) {, +			return mergeArrays((ArrayArg) a, b);, +		} else if (b.isArray()) {, +			return mergeArrays((ArrayArg) b, a);, +		}, +				return null;, +				}, +				if (types.size() == 1) {, +				}, +				if (aObj.equals(Consts.CLASS_OBJECT)) {]