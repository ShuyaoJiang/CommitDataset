[+++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.LoopRegionVisitor;, +			passes.add(new LoopRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.LoopRegionVisitor;, +			passes.add(new LoopRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +import jadx.core.dex.regions.conditions.Compare;, +import jadx.core.dex.regions.conditions.IfCondition;, +import jadx.core.dex.regions.conditions.IfCondition.Mode;, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.LoopRegionVisitor;, +			passes.add(new LoopRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +import jadx.core.dex.regions.conditions.Compare;, +import jadx.core.dex.regions.conditions.IfCondition;, +import jadx.core.dex.regions.conditions.IfCondition.Mode;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected enum Flags {, +		INLINE, +	protected boolean makeInsn(InsnNode insn, CodeWriter code, Flags flag) throws CodegenException {, +				if (flag != Flags.INLINE) {, +				}, +				if (flag != Flags.INLINE) {, +			}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.LoopRegionVisitor;, +			passes.add(new LoopRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +import jadx.core.dex.regions.conditions.Compare;, +import jadx.core.dex.regions.conditions.IfCondition;, +import jadx.core.dex.regions.conditions.IfCondition.Mode;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected enum Flags {, +		INLINE, +	protected boolean makeInsn(InsnNode insn, CodeWriter code, Flags flag) throws CodegenException {, +				if (flag != Flags.INLINE) {, +				}, +				if (flag != Flags.INLINE) {, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.regions.conditions.IfCondition;, +import jadx.core.dex.regions.conditions.IfRegion;, +import jadx.core.dex.regions.loops.IndexLoop;, +import jadx.core.dex.regions.loops.LoopRegion;, +import jadx.core.dex.regions.loops.LoopType;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +			if (!insn.contains(AFlag.SKIP)) {, +		}, +		LoopType type = region.getType();, +		if (type != null) {, +			if (type instanceof IndexLoop) {, +				IndexLoop indexLoop = (IndexLoop) type;, +				code.startLine("for (");, +				makeInsn(indexLoop.getInitInsn(), code, Flags.INLINE);, +				code.add("; ");, +				conditionGen.add(code, condition);, +				code.add("; ");, +				makeInsn(indexLoop.getIncrInsn(), code, Flags.INLINE);, +				code.add(") {");, +				makeRegionIndent(code, region.getBody());, +				code.startLine('}');, +				return code;, +			}, +			throw new JadxRuntimeException("Unknown loop type: " + type.getClass());, +		}, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +import jadx.core.dex.visitors.regions.LoopRegionVisitor;, +			passes.add(new LoopRegionVisitor());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +import jadx.core.dex.regions.conditions.Compare;, +import jadx.core.dex.regions.conditions.IfCondition;, +import jadx.core.dex.regions.conditions.IfCondition.Mode;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +	protected enum Flags {, +		INLINE, +	protected boolean makeInsn(InsnNode insn, CodeWriter code, Flags flag) throws CodegenException {, +				if (flag != Flags.INLINE) {, +				}, +				if (flag != Flags.INLINE) {, +			}, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +import jadx.core.dex.regions.conditions.IfCondition;, +import jadx.core.dex.regions.conditions.IfRegion;, +import jadx.core.dex.regions.loops.IndexLoop;, +import jadx.core.dex.regions.loops.LoopRegion;, +import jadx.core.dex.regions.loops.LoopType;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +			if (!insn.contains(AFlag.SKIP)) {, +		}, +		LoopType type = region.getType();, +		if (type != null) {, +			if (type instanceof IndexLoop) {, +				IndexLoop indexLoop = (IndexLoop) type;, +				code.startLine("for (");, +				makeInsn(indexLoop.getInitInsn(), code, Flags.INLINE);, +				code.add("; ");, +				conditionGen.add(code, condition);, +				code.add("; ");, +				makeInsn(indexLoop.getIncrInsn(), code, Flags.INLINE);]