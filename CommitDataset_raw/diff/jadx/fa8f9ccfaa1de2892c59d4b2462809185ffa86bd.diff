[+++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +	public static MethodGen getFallbackMethodGen(MethodNode mth) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +	public static MethodGen getFallbackMethodGen(MethodNode mth) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +	public static MethodGen getFallbackMethodGen(MethodNode mth) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/CheckRegions.java, +++ b/jadx-core/src/main/java/jadx/core/utils/DebugUtils.java, +package jadx.core.utils;, +, +import jadx.core.codegen.CodeWriter;, +import jadx.core.codegen.InsnGen;, +import jadx.core.codegen.MethodGen;, +import jadx.core.dex.attributes.AType;, +import jadx.core.dex.attributes.nodes.PhiListAttr;, +import jadx.core.dex.instructions.InsnType;, +import jadx.core.dex.instructions.PhiInsn;, +import jadx.core.dex.instructions.args.InsnArg;, +import jadx.core.dex.instructions.args.RegisterArg;, +import jadx.core.dex.instructions.args.SSAVar;, +import jadx.core.dex.nodes.BlockNode;, +import jadx.core.dex.nodes.IBlock;, +import jadx.core.dex.nodes.IContainer;, +import jadx.core.dex.nodes.IRegion;, +import jadx.core.dex.nodes.InsnNode;, +import jadx.core.dex.nodes.MethodNode;, +import jadx.core.dex.visitors.DotGraphVisitor;, +import jadx.core.dex.visitors.regions.DepthRegionTraversal;, +import jadx.core.dex.visitors.regions.TracedRegionVisitor;, +import jadx.core.utils.exceptions.CodegenException;, +import jadx.core.utils.exceptions.JadxRuntimeException;, +, +import java.io.File;, +import java.util.ArrayList;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +@Deprecated, +public class DebugUtils {, +	private static final Logger LOG = LoggerFactory.getLogger(DebugUtils.class);, +, +	public static void dump(MethodNode mth) {, +		File out = new File("test-graph-tmp");, +		DotGraphVisitor.dump(out).visit(mth);, +		DotGraphVisitor.dumpRaw(out).visit(mth);, +		DotGraphVisitor.dumpRegions(out).visit(mth);, +	}, +, +	public static void printRegionsWithBlock(MethodNode mth, final BlockNode block) {, +		final Set<IRegion> regions = new LinkedHashSet<IRegion>();, +		DepthRegionTraversal.traverse(mth, new TracedRegionVisitor() {, +			@Override, +			public void processBlockTraced(MethodNode mth, IBlock container, IRegion currentRegion) {, +				if (block.equals(container)) {, +					regions.add(currentRegion);, +				}, +			}, +		});, +		LOG.debug(" Found block: {} in regions: {}", block, regions);, +	}, +, +	public static void printRegions(MethodNode mth) {, +		printRegions(mth, false);, +	}, +, +	public static void printRegions(MethodNode mth, boolean printInsns) {, +		LOG.debug("|{}", mth.toString());, +		printRegion(mth, mth.getRegion(), "|  ", printInsns);, +	}, +, +	private static void printRegion(MethodNode mth, IRegion region, String indent, boolean printInsns) {, +		LOG.debug("{}{}", indent, region);, +		indent += "|  ";, +		for (IContainer container : region.getSubBlocks()) {, +			if (container instanceof IRegion) {, +				printRegion(mth, (IRegion) container, indent, printInsns);, +			} else {, +				LOG.debug("{}{}", indent, container);, +				if (printInsns && container instanceof IBlock) {, +					IBlock block = (IBlock) container;, +					printInsns(mth, indent, block);, +				}, +			}, +		}, +	}, +, +	private static void printInsns(MethodNode mth, String indent, IBlock block) {, +		for (InsnNode insn : block.getInstructions()) {, +			try {, +				MethodGen mg = MethodGen.getFallbackMethodGen(mth);, +				InsnGen ig = new InsnGen(mg, true);, +				CodeWriter code = new CodeWriter();, +				ig.makeInsn(insn, code);, +				String insnStr = code.toString().substring(CodeWriter.NL.length());, +				LOG.debug("{} - {}", indent, insnStr);]