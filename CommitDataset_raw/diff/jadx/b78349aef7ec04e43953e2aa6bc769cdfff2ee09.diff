[+++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.ArithOp;, +			IfCondition i = simplifyCmpOp(c);, +			if (i != null) {, +				return i;, +			}, +	private static IfCondition simplifyCmpOp(Compare c) {, +			return null;, +		if (!c.getB().isLiteral()) {, +			return null;, +		long lit = ((LiteralArg) c.getB()).getLiteral();, +		if (lit != 0 && lit != 1) {, +			return null;, +		}, +, +		switch (wrapInsn.getType()) {, +			case CMP_L:, +			case CMP_G:, +				if (lit == 0) {, +				break;, +, +			case ARITH:, +				ArithOp arithOp = ((ArithNode) wrapInsn).getOp();, +				if (arithOp == ArithOp.OR || arithOp == ArithOp.AND) {, +					IfOp ifOp = c.getInsn().getOp();, +					boolean isTrue = ifOp == IfOp.NE && lit == 0, +							|| ifOp == IfOp.EQ && lit == 1;, +, +					IfOp op = isTrue ? IfOp.NE : IfOp.EQ;, +					Mode mode = isTrue && arithOp == ArithOp.OR ||, +							!isTrue && arithOp == ArithOp.AND ? Mode.OR : Mode.AND;, +, +					IfNode if1 = new IfNode(op, -1, wrapInsn.getArg(0), LiteralArg.FALSE);, +					IfNode if2 = new IfNode(op, -1, wrapInsn.getArg(1), LiteralArg.FALSE);, +					return new IfCondition(mode,, +							Arrays.asList(new IfCondition(new Compare(if1)),, +									new IfCondition(new Compare(if2))));, +				}, +			break;, +, +		default:, +			break;, +		}, +, +, +		return null;, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfCondition.java, +import jadx.core.dex.instructions.ArithNode;, +import jadx.core.dex.instructions.ArithOp;, +			IfCondition i = simplifyCmpOp(c);, +			if (i != null) {, +				return i;, +			}, +	private static IfCondition simplifyCmpOp(Compare c) {, +			return null;, +		if (!c.getB().isLiteral()) {, +			return null;, +		long lit = ((LiteralArg) c.getB()).getLiteral();, +		if (lit != 0 && lit != 1) {, +			return null;, +		}, +, +		switch (wrapInsn.getType()) {, +			case CMP_L:, +			case CMP_G:, +				if (lit == 0) {, +				break;, +, +			case ARITH:, +				ArithOp arithOp = ((ArithNode) wrapInsn).getOp();, +				if (arithOp == ArithOp.OR || arithOp == ArithOp.AND) {, +					IfOp ifOp = c.getInsn().getOp();, +					boolean isTrue = ifOp == IfOp.NE && lit == 0, +							|| ifOp == IfOp.EQ && lit == 1;, +, +					IfOp op = isTrue ? IfOp.NE : IfOp.EQ;, +					Mode mode = isTrue && arithOp == ArithOp.OR ||, +							!isTrue && arithOp == ArithOp.AND ? Mode.OR : Mode.AND;, +, +					IfNode if1 = new IfNode(op, -1, wrapInsn.getArg(0), LiteralArg.FALSE);, +					IfNode if2 = new IfNode(op, -1, wrapInsn.getArg(1), LiteralArg.FALSE);, +					return new IfCondition(mode,, +							Arrays.asList(new IfCondition(new Compare(if1)),, +									new IfCondition(new Compare(if2))));, +				}, +			break;, +, +		default:, +			break;, +		}, +, +, +		return null;, +	}, +++ b/jadx-core/src/test/java/jadx/tests/integration/conditions/TestBitwiseAnd.java, +package jadx.tests.integration.conditions;, +, +import org.junit.jupiter.api.Test;]