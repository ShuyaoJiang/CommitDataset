[+++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/IgnoreEdgeAttr.java, +	private final Set<BlockNode> blocks = new HashSet<BlockNode>(3);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/IgnoreEdgeAttr.java, +	private final Set<BlockNode> blocks = new HashSet<BlockNode>(3);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +		return startOffset;, +		return id == other.id && startOffset == other.startOffset;, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/IgnoreEdgeAttr.java, +	private final Set<BlockNode> blocks = new HashSet<BlockNode>(3);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +		return startOffset;, +		return id == other.id && startOffset == other.startOffset;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +			case MOVE:, +				InsnArg firstArg = insn.getArg(0);, +				if (firstArg.isLiteral()) {, +					InsnNode constInsn = new InsnNode(InsnType.CONST, 1);, +					constInsn.setResult(insn.getResult());, +					constInsn.addArg(firstArg);, +					constInsn.copyAttributesFrom(insn);, +					return constInsn;, +				}, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/IgnoreEdgeAttr.java, +	private final Set<BlockNode> blocks = new HashSet<BlockNode>(3);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +		return startOffset;, +		return id == other.id && startOffset == other.startOffset;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +			case MOVE:, +				InsnArg firstArg = insn.getArg(0);, +				if (firstArg.isLiteral()) {, +					InsnNode constInsn = new InsnNode(InsnType.CONST, 1);, +					constInsn.setResult(insn.getResult());, +					constInsn.addArg(firstArg);, +					constInsn.copyAttributesFrom(insn);, +					return constInsn;, +				}, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinallyExtract.java, +		List<BlockNode> filtPreds = BlockUtils.filterPredecessors(sOut);, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/IgnoreEdgeAttr.java, +	private final Set<BlockNode> blocks = new HashSet<BlockNode>(3);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +		return startOffset;, +		return id == other.id && startOffset == other.startOffset;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +			case MOVE:, +				InsnArg firstArg = insn.getArg(0);, +				if (firstArg.isLiteral()) {, +					InsnNode constInsn = new InsnNode(InsnType.CONST, 1);, +					constInsn.setResult(insn.getResult());, +					constInsn.addArg(firstArg);, +					constInsn.copyAttributesFrom(insn);, +					return constInsn;, +				}, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinallyExtract.java, +		List<BlockNode> filtPreds = BlockUtils.filterPredecessors(sOut);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java, +		if (exitBlock.getInstructions().size() != 1, +				|| exitBlock.contains(AFlag.SYNTHETIC)) {, +			return false;, +		}, +		List<BlockNode> preds = exitBlock.getPredecessors();, +		if (preds.size() < 2) {, +			return false;, +		}, +		preds = BlockUtils.filterPredecessors(exitBlock);, +		if (preds.size() < 2) {, +			return false;, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/nodes/IgnoreEdgeAttr.java, +	private final Set<BlockNode> blocks = new HashSet<BlockNode>(3);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +		return startOffset;, +		return id == other.id && startOffset == other.startOffset;, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +			case MOVE:, +				InsnArg firstArg = insn.getArg(0);, +				if (firstArg.isLiteral()) {, +					InsnNode constInsn = new InsnNode(InsnType.CONST, 1);, +					constInsn.setResult(insn.getResult());, +					constInsn.addArg(firstArg);, +					constInsn.copyAttributesFrom(insn);, +					return constInsn;, +				}, +				break;, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinallyExtract.java, +		List<BlockNode> filtPreds = BlockUtils.filterPredecessors(sOut);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockProcessor.java, +		if (exitBlock.getInstructions().size() != 1, +				|| exitBlock.contains(AFlag.SYNTHETIC)) {, +			return false;, +		}, +		List<BlockNode> preds = exitBlock.getPredecessors();]