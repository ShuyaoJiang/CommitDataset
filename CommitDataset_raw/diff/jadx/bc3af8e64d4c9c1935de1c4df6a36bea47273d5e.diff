[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode && showInconsistentCode) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode && showInconsistentCode) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		} catch (Exception th) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode && showInconsistentCode) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		} catch (Exception th) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode && showInconsistentCode) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		} catch (Exception th) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +, +	private AType() {, +	}, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode && showInconsistentCode) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		} catch (Exception th) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +, +	private AType() {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +			case Opcodes.CONST_STRING_JUMBO:, +				InsnNode constStrInsn = new ConstStringNode(dex.getString(insn.getIndex()));, +				constStrInsn.setResult(InsnArg.reg(insn, 0, ArgType.STRING));, +				return constStrInsn;, +			case Opcodes.CONST_CLASS:, +				InsnNode constClsInsn = new ConstClassNode(dex.getType(insn.getIndex()));, +				constClsInsn.setResult(InsnArg.reg(insn, 0, ArgType.CLASS));, +				return constClsInsn;, +			case Opcodes.INSTANCE_OF:, +				InsnNode instInsn = new IndexInsnNode(InsnType.INSTANCE_OF, dex.getType(insn.getIndex()), 1);, +				instInsn.setResult(InsnArg.reg(insn, 0, ArgType.BOOLEAN));, +				instInsn.addArg(InsnArg.reg(insn, 1, ArgType.UNKNOWN_OBJECT));, +				return instInsn;, +			case Opcodes.CHECK_CAST:, +				InsnNode checkCastInsn = new IndexInsnNode(InsnType.CHECK_CAST, castType, 1);, +				checkCastInsn.setResult(InsnArg.reg(insn, 0, castType));, +				checkCastInsn.addArg(InsnArg.reg(insn, 0, ArgType.UNKNOWN_OBJECT));, +				return checkCastInsn;, +			case Opcodes.IGET_OBJECT:, +				FieldInfo igetFld = FieldInfo.fromDex(dex, insn.getIndex());, +				InsnNode igetInsn = new IndexInsnNode(InsnType.IGET, igetFld, 1);, +				igetInsn.setResult(InsnArg.reg(insn, 0, igetFld.getType()));, +				igetInsn.addArg(InsnArg.reg(insn, 1, igetFld.getDeclClass().getType()));, +				return igetInsn;, +			case Opcodes.IPUT_OBJECT:, +				FieldInfo iputFld = FieldInfo.fromDex(dex, insn.getIndex());, +				InsnNode iputInsn = new IndexInsnNode(InsnType.IPUT, iputFld, 2);, +				iputInsn.addArg(InsnArg.reg(insn, 0, iputFld.getType()));, +				iputInsn.addArg(InsnArg.reg(insn, 1, iputFld.getDeclClass().getType()));, +				return iputInsn;, +			case Opcodes.SGET_OBJECT:, +				FieldInfo sgetFld = FieldInfo.fromDex(dex, insn.getIndex());, +				InsnNode sgetInsn = new IndexInsnNode(InsnType.SGET, sgetFld, 0);, +				sgetInsn.setResult(InsnArg.reg(insn, 0, sgetFld.getType()));, +				return sgetInsn;, +			case Opcodes.SPUT_OBJECT:, +				FieldInfo sputFld = FieldInfo.fromDex(dex, insn.getIndex());, +				InsnNode sputInsn = new IndexInsnNode(InsnType.SPUT, sputFld, 1);, +				sputInsn.addArg(InsnArg.reg(insn, 0, sputFld.getType()));, +				return sputInsn;, +			case Opcodes.ARRAY_LENGTH:, +				InsnNode arrLenInsn = new InsnNode(InsnType.ARRAY_LENGTH, 1);, +				arrLenInsn.setResult(InsnArg.reg(insn, 0, ArgType.INT));, +				arrLenInsn.addArg(InsnArg.reg(insn, 1, ArgType.array(ArgType.UNKNOWN)));, +				return arrLenInsn;, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +			if (badCode && showInconsistentCode) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		} catch (Exception th) {, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +, +	private AType() {, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnDecoder.java, +			case Opcodes.CONST_STRING_JUMBO:, +				InsnNode constStrInsn = new ConstStringNode(dex.getString(insn.getIndex()));, +				constStrInsn.setResult(InsnArg.reg(insn, 0, ArgType.STRING));, +				return constStrInsn;, +			case Opcodes.CONST_CLASS:, +				InsnNode constClsInsn = new ConstClassNode(dex.getType(insn.getIndex()));, +				constClsInsn.setResult(InsnArg.reg(insn, 0, ArgType.CLASS));, +				return constClsInsn;, +			case Opcodes.INSTANCE_OF:, +				InsnNode instInsn = new IndexInsnNode(InsnType.INSTANCE_OF, dex.getType(insn.getIndex()), 1);, +				instInsn.setResult(InsnArg.reg(insn, 0, ArgType.BOOLEAN));, +				instInsn.addArg(InsnArg.reg(insn, 1, ArgType.UNKNOWN_OBJECT));, +				return instInsn;, +			case Opcodes.CHECK_CAST:, +				InsnNode checkCastInsn = new IndexInsnNode(InsnType.CHECK_CAST, castType, 1);]