[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +, +			if(f.getFieldInfo().isRenamed()) {, +				code.startLine("/* renamed from: ").add(f.getName()).add(" */");, +			}, +		if (classInfo.isRenamed()) {, +			code.startLine("/* renamed from: ").add(classInfo.getType().getObject()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +, +			if(f.getFieldInfo().isRenamed()) {, +				code.startLine("/* renamed from: ").add(f.getName()).add(" */");, +			}, +		if (classInfo.isRenamed()) {, +			code.startLine("/* renamed from: ").add(classInfo.getType().getObject()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +, +		if(mth.getMethodInfo().isRenamed()) {, +			code.startLine("/* renamed from: ").add(mth.getName()).add(" */");, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +, +			if(f.getFieldInfo().isRenamed()) {, +				code.startLine("/* renamed from: ").add(f.getName()).add(" */");, +			}, +		if (classInfo.isRenamed()) {, +			code.startLine("/* renamed from: ").add(classInfo.getType().getObject()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +, +		if(mth.getMethodInfo().isRenamed()) {, +			code.startLine("/* renamed from: ").add(mth.getName()).add(" */");, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +			return StringUtils.escape(shortName.toLowerCase());, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +, +			if(f.getFieldInfo().isRenamed()) {, +				code.startLine("/* renamed from: ").add(f.getName()).add(" */");, +			}, +		if (classInfo.isRenamed()) {, +			code.startLine("/* renamed from: ").add(classInfo.getType().getObject()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +, +		if(mth.getMethodInfo().isRenamed()) {, +			code.startLine("/* renamed from: ").add(mth.getName()).add(" */");, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +			return StringUtils.escape(shortName.toLowerCase());, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +			boolean aliasFromPreset = false;, +			String aliasToUse = null;, +			for(MethodInfo mth : o.getMethods()){, +				if(mth.isAliasFromPreset()) {, +					aliasToUse = mth.getAlias();, +					aliasFromPreset = true;, +				}, +			}, +			for(MethodInfo mth : o.getMethods()){, +				if(aliasToUse == null) {, +					aliasToUse = mth.getAlias();, +				mth.setAlias(aliasToUse);, +				mth.setAliasFromPreset(aliasFromPreset);, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +, +			if(f.getFieldInfo().isRenamed()) {, +				code.startLine("/* renamed from: ").add(f.getName()).add(" */");, +			}, +		if (classInfo.isRenamed()) {, +			code.startLine("/* renamed from: ").add(classInfo.getType().getObject()).add(" */");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +, +		if(mth.getMethodInfo().isRenamed()) {, +			code.startLine("/* renamed from: ").add(mth.getName()).add(" */");, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java, +			return StringUtils.escape(shortName.toLowerCase());, +++ b/jadx-core/src/main/java/jadx/core/deobf/Deobfuscator.java, +			boolean aliasFromPreset = false;, +			String aliasToUse = null;, +			for(MethodInfo mth : o.getMethods()){, +				if(mth.isAliasFromPreset()) {, +					aliasToUse = mth.getAlias();, +					aliasFromPreset = true;, +				}, +			}, +			for(MethodInfo mth : o.getMethods()){, +				if(aliasToUse == null) {, +					aliasToUse = mth.getAlias();, +				mth.setAlias(aliasToUse);, +				mth.setAliasFromPreset(aliasFromPreset);, +++ b/jadx-core/src/main/java/jadx/core/dex/info/ClassInfo.java, +		ClassInfo cls = dex.root().getInfoStorage().getCls(type);, +		return dex.root().getInfoStorage().putCls(cls);, +			if(pkg.length() == 0) {, +				parClsName = clsName.substring(0, sep);, +			}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +, +			if(f.getFieldInfo().isRenamed()) {, +				code.startLine("/* renamed from: ").add(f.getName()).add(" */");]