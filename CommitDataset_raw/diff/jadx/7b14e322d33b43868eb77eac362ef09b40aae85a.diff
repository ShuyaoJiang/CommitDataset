[+++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +	public static final AType<AttrList<JadxError>> JADX_ERROR = new AType<>(); // code failed to decompile completely, +	public static final AType<AttrList<JadxWarn>> JADX_WARN = new AType<>(); // mark code as inconsistent (code can be viewed), +	public static final AType<AttrList<String>> COMMENTS = new AType<>(); // any additional info about decompilation, +++ b/jadx-core/src/main/java/jadx/core/dex/attributes/AType.java, +	public static final AType<AttrList<JadxError>> JADX_ERROR = new AType<>(); // code failed to decompile completely, +	public static final AType<AttrList<JadxWarn>> JADX_WARN = new AType<>(); // mark code as inconsistent (code can be viewed), +	public static final AType<AttrList<String>> COMMENTS = new AType<>(); // any additional info about decompilation, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import jadx.core.dex.attributes.AttrList;, +import jadx.core.dex.attributes.IAttributeNode;, +import static org.junit.Assert.assertFalse;, +		assertFalse("Inconsistent cls: " + cls, hasErrors(cls));, +			assertFalse("Method with problems: " + mthNode, hasErrors(mthNode));, +	private static boolean hasErrors(IAttributeNode node) {, +		if (node.contains(AFlag.INCONSISTENT_CODE), +				|| node.contains(AType.JADX_ERROR), +				|| node.contains(AType.JADX_WARN)) {, +			return true;, +		}, +		AttrList<String> commentsAttr = node.get(AType.COMMENTS);, +		if (commentsAttr != null) {, +			for (String comment : commentsAttr.getList()) {, +				if (comment.contains("JADX WARN")) {, +					return true;, +				}, +			}, +		}, +		return false;, +	}, +]