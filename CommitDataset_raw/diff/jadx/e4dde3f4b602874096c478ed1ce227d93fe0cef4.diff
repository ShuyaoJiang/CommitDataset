[+++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + *  JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + *  JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + *  JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, +	// instArg equal 'null' for static fields, +	private final InsnArg instArg;, +	public FieldArg(FieldInfo field, InsnArg reg) {, +		this.instArg = reg;, +	public InsnArg getInstanceArg() {, +		return instArg;, +		return instArg == null;, +		if (instArg != null ? !instArg.equals(fieldArg.instArg) : fieldArg.instArg != null) {, +		result = 31 * result + (instArg != null ? instArg.hashCode() : 0);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + *  JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, +	// instArg equal 'null' for static fields, +	private final InsnArg instArg;, +	public FieldArg(FieldInfo field, InsnArg reg) {, +		this.instArg = reg;, +	public InsnArg getInstanceArg() {, +		return instArg;, +		return instArg == null;, +		if (instArg != null ? !instArg.equals(fieldArg.instArg) : fieldArg.instArg != null) {, +		result = 31 * result + (instArg != null ? instArg.hashCode() : 0);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +			InsnArg reg = null;, +				reg = get.getArg(0);, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + *  JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, +	// instArg equal 'null' for static fields, +	private final InsnArg instArg;, +	public FieldArg(FieldInfo field, InsnArg reg) {, +		this.instArg = reg;, +	public InsnArg getInstanceArg() {, +		return instArg;, +		return instArg == null;, +		if (instArg != null ? !instArg.equals(fieldArg.instArg) : fieldArg.instArg != null) {, +		result = 31 * result + (instArg != null ? instArg.hashCode() : 0);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +			InsnArg reg = null;, +				reg = get.getArg(0);, +++ b/jadx-core/src/main/java/jadx/core/utils/InstructionRemover.java, +import jadx.core.dex.instructions.args.InsnWrapArg;, +			unbindArgUsage(mth, arg);, +		}, +		insn.add(AFlag.INCONSISTENT_CODE);, +	}, +, +	public static void unbindArgUsage(MethodNode mth, InsnArg arg) {, +		} else if (arg instanceof InsnWrapArg) {, +			InsnWrapArg wrap = (InsnWrapArg) arg;, +			unbindInsn(mth, wrap.getWrapInsn());, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + *  JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, +	// instArg equal 'null' for static fields, +	private final InsnArg instArg;, +	public FieldArg(FieldInfo field, InsnArg reg) {, +		this.instArg = reg;, +	public InsnArg getInstanceArg() {, +		return instArg;, +		return instArg == null;, +		if (instArg != null ? !instArg.equals(fieldArg.instArg) : fieldArg.instArg != null) {, +		result = 31 * result + (instArg != null ? instArg.hashCode() : 0);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/SimplifyVisitor.java, +			InsnArg reg = null;, +				reg = get.getArg(0);, +++ b/jadx-core/src/main/java/jadx/core/utils/InstructionRemover.java, +import jadx.core.dex.instructions.args.InsnWrapArg;, +			unbindArgUsage(mth, arg);, +		}, +		insn.add(AFlag.INCONSISTENT_CODE);, +	}, +, +	public static void unbindArgUsage(MethodNode mth, InsnArg arg) {, +		} else if (arg instanceof InsnWrapArg) {, +			InsnWrapArg wrap = (InsnWrapArg) arg;, +			unbindInsn(mth, wrap.getWrapInsn());, +++ /dev/null, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, + *  JadxDecompiler jadx = new JadxDecompiler();, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				instanceField(code, f.getField(), f.getInstanceArg());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/FieldArg.java, +	// instArg equal 'null' for static fields]