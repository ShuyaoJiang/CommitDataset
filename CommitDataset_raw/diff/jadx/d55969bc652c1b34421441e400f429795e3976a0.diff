[+++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().add("/*");, +				code.newLine().add(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().add(Utils.getStackTrace(e));, +				code.newLine().add("*/");, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().add("/*");, +				code.newLine().add(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().add(Utils.getStackTrace(e));, +				code.newLine().add("*/");, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("new ").add(insn.getResult().getType().toString());, +				break;, +, +			case PHI:, +			case MERGE:, +				fallbackOnlyInsn(insn);, +				code.add(insn.getType().toString()).add("(");, +				for (InsnArg insnArg : insn.getArguments()) {, +					addArg(code, insnArg);, +					code.add(' ');, +				}, +				code.add(")");, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().add("/*");, +				code.newLine().add(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().add(Utils.getStackTrace(e));, +				code.newLine().add("*/");, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("new ").add(insn.getResult().getType().toString());, +				break;, +, +			case PHI:, +			case MERGE:, +				fallbackOnlyInsn(insn);, +				code.add(insn.getType().toString()).add("(");, +				for (InsnArg insnArg : insn.getArguments()) {, +					addArg(code, insnArg);, +					code.add(' ');, +				}, +				code.add(")");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +					code.newLine().add("Error: ").add(Utils.getStackTrace(cause));, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().add("/*");, +				code.newLine().add(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().add(Utils.getStackTrace(e));, +				code.newLine().add("*/");, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("new ").add(insn.getResult().getType().toString());, +				break;, +, +			case PHI:, +			case MERGE:, +				fallbackOnlyInsn(insn);, +				code.add(insn.getType().toString()).add("(");, +				for (InsnArg insnArg : insn.getArguments()) {, +					addArg(code, insnArg);, +					code.add(' ');, +				}, +				code.add(")");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +					code.newLine().add("Error: ").add(Utils.getStackTrace(cause));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	// merge all arguments in one, +	MERGE,, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +				code.newLine().add("/*");, +				code.newLine().add(ErrorsCounter.methodError(mth, "Method generation error", e));, +				code.newLine().add(Utils.getStackTrace(e));, +				code.newLine().add("*/");, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +				code.add("new ").add(insn.getResult().getType().toString());, +				break;, +, +			case PHI:, +			case MERGE:, +				fallbackOnlyInsn(insn);, +				code.add(insn.getType().toString()).add("(");, +				for (InsnArg insnArg : insn.getArguments()) {, +					addArg(code, insnArg);, +					code.add(' ');, +				}, +				code.add(")");, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +					code.newLine().add("Error: ").add(Utils.getStackTrace(cause));, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/InsnType.java, +	// merge all arguments in one, +	MERGE,, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/RegisterArg.java, +		return duplicate(getRegNum(), sVar);, +	}, +, +	public RegisterArg duplicate(int regNum, SSAVar sVar) {, +		RegisterArg dup = new RegisterArg(regNum, getType());, +		if (sVar != null) {, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java]