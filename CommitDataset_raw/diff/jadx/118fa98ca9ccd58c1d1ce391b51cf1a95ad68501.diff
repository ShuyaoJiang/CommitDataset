[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected static final int DEFAULT_THREADS_COUNT = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +, +	protected int threadsCount = DEFAULT_THREADS_COUNT;, +				throw new JadxException("Threads count must be positive, got: " + threadsCount);, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected static final int DEFAULT_THREADS_COUNT = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +, +	protected int threadsCount = DEFAULT_THREADS_COUNT;, +				throw new JadxException("Threads count must be positive, got: " + threadsCount);, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java, +	public void fixOnLoad() {, +		if (threadsCount <= 0) {, +			threadsCount = DEFAULT_THREADS_COUNT;, +		}, +	}, +, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLI.java, +	public static void main(String[] args) {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	protected static final int DEFAULT_THREADS_COUNT = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);, +, +	protected int threadsCount = DEFAULT_THREADS_COUNT;, +				throw new JadxException("Threads count must be positive, got: " + threadsCount);, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettings.java, +	public void fixOnLoad() {, +		if (threadsCount <= 0) {, +			threadsCount = DEFAULT_THREADS_COUNT;, +		}, +	}, +, +++ b/jadx-gui/src/main/java/jadx/gui/settings/JadxSettingsAdapter.java, +			settings.fixOnLoad();]