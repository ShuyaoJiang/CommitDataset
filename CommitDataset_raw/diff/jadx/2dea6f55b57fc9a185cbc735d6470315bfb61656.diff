[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import jadx.core.dex.attributes.AType;, +import jadx.core.dex.attributes.nodes.RegDebugInfoAttr;, +import jadx.core.dex.nodes.MethodNode;, +, +	public String getDetailedVarInfo(MethodNode mth) {, +		Set<ArgType> types = new HashSet<>();, +		Set<String> names = Collections.emptySet();, +, +		List<RegisterArg> useArgs = new ArrayList<>(1 + useList.size());, +		useArgs.add(assign);, +		useArgs.addAll(useList);, +, +		if (mth.contains(AType.LOCAL_VARS_DEBUG_INFO)) {, +			names = new HashSet<>();, +			for (RegisterArg arg : useArgs) {, +				RegDebugInfoAttr debugInfoAttr = arg.get(AType.REG_DEBUG_INFO);, +				if (debugInfoAttr != null) {, +					names.add(debugInfoAttr.getName());, +					types.add(debugInfoAttr.getRegType());, +				}, +			}, +		}, +, +		for (RegisterArg arg : useArgs) {, +			ArgType initType = arg.getInitType();, +			if (initType.isTypeKnown()) {, +				types.add(initType);, +			}, +			ArgType type = arg.getType();, +			if (type.isTypeKnown()) {, +				types.add(type);, +			}, +		}, +		StringBuilder sb = new StringBuilder();, +		sb.append('r').append(regNum).append('v').append(version);, +		if (!names.isEmpty()) {, +			sb.append(", names: ").append(names);, +		}, +		if (!types.isEmpty()) {, +			sb.append(", types: ").append(types);, +		}, +		return sb.toString();, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/args/SSAVar.java, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.Set;, +import jadx.core.dex.attributes.AType;, +import jadx.core.dex.attributes.nodes.RegDebugInfoAttr;, +import jadx.core.dex.nodes.MethodNode;, +, +	public String getDetailedVarInfo(MethodNode mth) {, +		Set<ArgType> types = new HashSet<>();, +		Set<String> names = Collections.emptySet();, +, +		List<RegisterArg> useArgs = new ArrayList<>(1 + useList.size());, +		useArgs.add(assign);, +		useArgs.addAll(useList);, +, +		if (mth.contains(AType.LOCAL_VARS_DEBUG_INFO)) {, +			names = new HashSet<>();, +			for (RegisterArg arg : useArgs) {, +				RegDebugInfoAttr debugInfoAttr = arg.get(AType.REG_DEBUG_INFO);, +				if (debugInfoAttr != null) {, +					names.add(debugInfoAttr.getName());, +					types.add(debugInfoAttr.getRegType());, +				}, +			}, +		}, +, +		for (RegisterArg arg : useArgs) {, +			ArgType initType = arg.getInitType();, +			if (initType.isTypeKnown()) {, +				types.add(initType);, +			}, +			ArgType type = arg.getType();, +			if (type.isTypeKnown()) {, +				types.add(type);, +			}, +		}, +		StringBuilder sb = new StringBuilder();, +		sb.append('r').append(regNum).append('v').append(version);, +		if (!names.isEmpty()) {, +			sb.append(", names: ").append(names);, +		}, +		if (!types.isEmpty()) {, +			sb.append(", types: ").append(types);, +		}, +		return sb.toString();, +	}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/typeinference/TypeInferenceVisitor.java, +					mth.addComment("JADX WARNING: type inference failed for: " + var.getDetailedVarInfo(mth));]