[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		MethodNode callMthNode = mth.dex().deepResolveMethod(callMth);, +		if (callMthNode != null) {, +			if (inlineMethod(callMthNode, insn, code)) {, +			callMth = callMthNode.getMethodInfo();, +		}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		MethodNode callMthNode = mth.dex().deepResolveMethod(callMth);, +		if (callMthNode != null) {, +			if (inlineMethod(callMthNode, insn, code)) {, +			callMth = callMthNode.getMethodInfo();, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +		shortId = makeSignature(true);, +	public String makeSignature(boolean includeRetType) {, +		StringBuilder signature = new StringBuilder();, +		signature.append(name);, +		signature.append('(');, +		for (ArgType arg : args) {, +			signature.append(TypeGen.signature(arg));, +		}, +		signature.append(')');, +		if (includeRetType) {, +			signature.append(TypeGen.signature(retType));, +		}, +		return signature.toString();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +		MethodNode callMthNode = mth.dex().deepResolveMethod(callMth);, +		if (callMthNode != null) {, +			if (inlineMethod(callMthNode, insn, code)) {, +			callMth = callMthNode.getMethodInfo();, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/info/MethodInfo.java, +		shortId = makeSignature(true);, +	public String makeSignature(boolean includeRetType) {, +		StringBuilder signature = new StringBuilder();, +		signature.append(name);, +		signature.append('(');, +		for (ArgType arg : args) {, +			signature.append(TypeGen.signature(arg));, +		}, +		signature.append(')');, +		if (includeRetType) {, +			signature.append(TypeGen.signature(retType));, +		}, +		return signature.toString();, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/DexNode.java, +import org.jetbrains.annotations.NotNull;, +	public ClassNode resolveClass(@NotNull ArgType type) {, +		if (type.isGeneric()) {, +			type = ArgType.object(type.getObject());, +		}, +		return resolveClass(ClassInfo.fromType(this, type));, +	}, +, +	@Nullable, +	public MethodNode resolveMethod(@NotNull MethodInfo mth) {, +	/**, +	 * Search method in class hierarchy., +	 */, +	@Nullable, +	public MethodNode deepResolveMethod(@NotNull MethodInfo mth) {, +		ClassNode cls = resolveClass(mth.getDeclClass());, +		if (cls == null) {, +			return null;, +		}, +		return deepResolveMethod(cls, mth.makeSignature(false));, +	}, +, +	@Nullable, +	private MethodNode deepResolveMethod(@NotNull ClassNode cls, String signature) {, +		for (MethodNode m : cls.getMethods()) {, +			if (m.getMethodInfo().getShortId().startsWith(signature)) {, +				return m;, +			}, +		}, +		MethodNode found;, +		ArgType superClass = cls.getSuperClass();, +		if (superClass != null) {, +			ClassNode superNode = resolveClass(superClass);, +			if (superNode != null) {, +				found = deepResolveMethod(superNode, signature);, +				if (found != null) {, +					return found;, +				}, +			}, +		}, +		for (ArgType iFaceType : cls.getInterfaces()) {, +			ClassNode iFaceNode = resolveClass(iFaceType);, +			if (iFaceNode != null) {, +				found = deepResolveMethod(iFaceNode, signature);, +				if (found != null) {, +					return found;, +				}, +			}, +		}]