[+++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +			case TERNARY:, +				addTernary(code, condition);, +				break;, +, +				throw new JadxRuntimeException("Unknown condition mode: " + condition.getMode());, +	private void addTernary(CodeWriter code, IfCondition condition) throws CodegenException {, +		add(code, condition.first());, +		code.add(" ? ");, +		add(code, condition.second());, +		code.add(" : ");, +		add(code, condition.third());, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +			case TERNARY:, +				addTernary(code, condition);, +				break;, +, +				throw new JadxRuntimeException("Unknown condition mode: " + condition.getMode());, +	private void addTernary(CodeWriter code, IfCondition condition) throws CodegenException {, +		add(code, condition.first());, +		code.add(" ? ");, +		add(code, condition.second());, +		code.add(" : ");, +		add(code, condition.third());, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java, +	private IfCondition condition;, +, +	public TernaryInsn(IfCondition condition, RegisterArg result) {, +		this(condition, result, LiteralArg.TRUE, LiteralArg.FALSE);, +	}, +	public void simplifyCondition() {, +		condition = IfCondition.simplify(condition);, +		if (condition.getMode() == IfCondition.Mode.NOT) {, +			invert();, +		}, +	}, +, +	private void invert() {, +		condition = IfCondition.invert(condition);, +		InsnArg tmp = getArg(0);, +		setArg(0, getArg(1));, +		setArg(1, tmp);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java, +			case TERNARY:, +				addTernary(code, condition);, +				break;, +, +				throw new JadxRuntimeException("Unknown condition mode: " + condition.getMode());, +	private void addTernary(CodeWriter code, IfCondition condition) throws CodegenException {, +		add(code, condition.first());, +		code.add(" ? ");, +		add(code, condition.second());, +		code.add(" : ");, +		add(code, condition.third());, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/TernaryInsn.java, +	private IfCondition condition;, +, +	public TernaryInsn(IfCondition condition, RegisterArg result) {, +		this(condition, result, LiteralArg.TRUE, LiteralArg.FALSE);, +	}, +	public void simplifyCondition() {, +		condition = IfCondition.simplify(condition);, +		if (condition.getMode() == IfCondition.Mode.NOT) {, +			invert();, +		}, +	}, +, +	private void invert() {, +		condition = IfCondition.invert(condition);, +		InsnArg tmp = getArg(0);, +		setArg(0, getArg(1));, +		setArg(1, tmp);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/IfCondition.java, +		TERNARY,, +	public static IfCondition ternary(IfCondition a, IfCondition b, IfCondition c) {, +		return new IfCondition(Mode.TERNARY, Arrays.asList(a, b, c));, +	}, +, +	public IfCondition third() {, +		return args.get(2);, +	}, +, +			case TERNARY:, +				return ternary(not(cond.first()), cond.third(), cond.second());, +			cond = invert(cond.first());, +		}, +		if (cond.getMode() == Mode.TERNARY && cond.first().getMode() == Mode.NOT) {, +			cond = invert(cond);, +			case TERNARY:, +				return first() + " ? " + second() + " : " + third();]