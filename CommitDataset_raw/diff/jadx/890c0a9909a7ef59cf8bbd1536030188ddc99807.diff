[+++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			Iterator<?> it = ((List) val).iterator();, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			Iterator<?> it = ((List) val).iterator();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +	private int clsDeclLine = 0;, +		addClassDeclaration(code);, +		addClassBody(code);, +	public void addClassDeclaration(CodeWriter clsCode) {, +		addGenericMap(clsCode, cls.getGenericMap());, +	public boolean addGenericMap(CodeWriter code, Map<ArgType, List<ArgType>> gmap) {, +	public void addClassBody(CodeWriter clsCode) throws CodegenException {, +		clsDeclLine = clsCode.getLine();, +		clsCode.incIndent();, +		addFields(clsCode);, +		addInnerClasses(clsCode, cls);, +		addMethods(clsCode);, +		clsCode.decIndent();, +	private void addInnerClasses(CodeWriter code, ClassNode cls) throws CodegenException {, +		for (ClassNode innerCls : cls.getInnerClasses()) {, +			if (!innerCls.isAnonymous()) {, +				ClassGen inClGen = new ClassGen(innerCls, getParentGen(), fallback);, +				code.newLine();, +				inClGen.addClassCode(code);, +	private void addMethods(CodeWriter code) {, +		for (MethodNode mth : cls.getMethods()) {, +			if (!mth.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +					if (code.getLine() != clsDeclLine) {, +						code.newLine();, +					}, +					addMethod(code, mth);, +				} catch (Exception e) {, +					String msg = ErrorsCounter.methodError(mth, "Method generation error", e);, +					code.startLine("/* " + msg + CodeWriter.NL + Utils.getStackTrace(e) + " */");, +				}, +			}, +		}, +	}, +, +	private void addMethod(CodeWriter code, MethodNode mth) throws CodegenException {, +		if (mth.getAccessFlags().isAbstract() || mth.getAccessFlags().isNative()) {, +	private void addFields(CodeWriter code) throws CodegenException {, +		addEnumFields(code);, +		for (FieldNode f : cls.getFields()) {, +	private void addEnumFields(CodeWriter code) throws CodegenException {, +							igen = new InsnGen(mthGen, false);, +					new ClassGen(f.getCls(), this, fallback).addClassBody(code);, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java, +			Iterator<?> it = ((List) val).iterator();, +++ b/jadx-core/src/main/java/jadx/core/codegen/ClassGen.java, +	private int clsDeclLine = 0;, +		addClassDeclaration(code);, +		addClassBody(code);, +	public void addClassDeclaration(CodeWriter clsCode) {, +		addGenericMap(clsCode, cls.getGenericMap());, +	public boolean addGenericMap(CodeWriter code, Map<ArgType, List<ArgType>> gmap) {, +	public void addClassBody(CodeWriter clsCode) throws CodegenException {, +		clsDeclLine = clsCode.getLine();, +		clsCode.incIndent();, +		addFields(clsCode);, +		addInnerClasses(clsCode, cls);, +		addMethods(clsCode);, +		clsCode.decIndent();, +	private void addInnerClasses(CodeWriter code, ClassNode cls) throws CodegenException {, +		for (ClassNode innerCls : cls.getInnerClasses()) {, +			if (!innerCls.isAnonymous()) {, +				ClassGen inClGen = new ClassGen(innerCls, getParentGen(), fallback);, +				code.newLine();, +				inClGen.addClassCode(code);, +	private void addMethods(CodeWriter code) {, +		for (MethodNode mth : cls.getMethods()) {, +			if (!mth.getAttributes().contains(AttributeFlag.DONT_GENERATE)) {, +					if (code.getLine() != clsDeclLine) {, +						code.newLine();, +					}, +					addMethod(code, mth);, +				} catch (Exception e) {, +					String msg = ErrorsCounter.methodError(mth, "Method generation error", e);, +					code.startLine("/* " + msg + CodeWriter.NL + Utils.getStackTrace(e) + " */");, +				}, +			}, +		}, +	}, +, +	private void addMethod(CodeWriter code, MethodNode mth) throws CodegenException {, +		if (mth.getAccessFlags().isAbstract() || mth.getAccessFlags().isNative()) {, +	private void addFields(CodeWriter code) throws CodegenException {, +		addEnumFields(code);, +		for (FieldNode f : cls.getFields()) {, +	private void addEnumFields(CodeWriter code) throws CodegenException {, +							igen = new InsnGen(mthGen, false);, +					new ClassGen(f.getCls(), this, fallback).addClassBody(code);, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +	CodeWriter add(CodeWriter code) {, +		buf.append(code);, +	public int getLine() {, +		return line;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/AnnotationGen.java]