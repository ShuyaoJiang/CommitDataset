[+++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.utils.files.ZipSecurity;, +	protected ResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +	, +	public static ResourceFile createResourceFileInstance(JadxDecompiler decompiler, String name, ResourceType type) {, +		if(!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.utils.files.ZipSecurity;, +	protected ResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +	, +	public static ResourceFile createResourceFileInstance(JadxDecompiler decompiler, String name, ResourceType type) {, +		if(!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourceFileContent.java, +import jadx.core.utils.files.ZipSecurity;, +	private ResourceFileContent(String name, ResourceType type, CodeWriter content) {, +	, +	public static ResourceFileContent createResourceFileContentInstance(String name, ResourceType type, CodeWriter content) {, +		if(!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFileContent(name, type, content);, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.utils.files.ZipSecurity;, +	protected ResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +	, +	public static ResourceFile createResourceFileInstance(JadxDecompiler decompiler, String name, ResourceType type) {, +		if(!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourceFileContent.java, +import jadx.core.utils.files.ZipSecurity;, +	private ResourceFileContent(String name, ResourceType type, CodeWriter content) {, +	, +	public static ResourceFileContent createResourceFileContentInstance(String name, ResourceType type, CodeWriter content) {, +		if(!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFileContent(name, type, content);, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +		ResourceFile rf = ResourceFile.createResourceFileInstance(jadxRef, name, type);, +		if(rf != null) {, +	}, +		ResourceFile rf = ResourceFile.createResourceFileInstance(jadxRef, name, type);, +		if(rf != null) {, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +import jadx.core.utils.files.ZipSecurity;, +	protected ResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +	, +	public static ResourceFile createResourceFileInstance(JadxDecompiler decompiler, String name, ResourceType type) {, +		if(!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourceFileContent.java, +import jadx.core.utils.files.ZipSecurity;, +	private ResourceFileContent(String name, ResourceType type, CodeWriter content) {, +	, +	public static ResourceFileContent createResourceFileContentInstance(String name, ResourceType type, CodeWriter content) {, +		if(!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFileContent(name, type, content);, +	}, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +		ResourceFile rf = ResourceFile.createResourceFileInstance(jadxRef, name, type);, +		if(rf != null) {, +	}, +		ResourceFile rf = ResourceFile.createResourceFileInstance(jadxRef, name, type);, +		if(rf != null) {, +	}, +++ b/jadx-core/src/main/java/jadx/core/utils/files/ZipSecurity.java, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +	private static final Logger LOG = LoggerFactory.getLogger(ZipSecurity.class);, +	, +			if(isInSubDirectory(currentPath, canonical)) {, +				return true;, +			}, +			LOG.debug("Path traversal attack detected, invalid name: {}", entryName);, +			return false;, +			LOG.debug("Path traversal attack detected, invalid name: {}", entryName);, +		if(compressedSize * MAX_SIZE_DIFF < uncompressedSize) {, +			LOG.debug("Zip bomp attack detected, invalid sizes: compressed {}, uncompressed {}", compressedSize, uncompressedSize);, +			return true;, +		}]