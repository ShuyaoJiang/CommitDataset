[+++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import java.util.TreeMap;, +	private Object attachAnnotation(Object obj, CodePosition pos) {, +		if (annotations.isEmpty()) {, +			annotations = new HashMap<CodePosition, Object>();, +		return annotations.put(pos, obj);, +		if (sourceLine == 0) {, +			return;, +		}, +	private void attachSourceLine(int decompiledLine, int sourceLine) {, +		if (lineMap.isEmpty()) {, +			lineMap = new TreeMap<Integer, Integer>();, +		}, +		lineMap.put(decompiledLine, sourceLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import java.util.TreeMap;, +	private Object attachAnnotation(Object obj, CodePosition pos) {, +		if (annotations.isEmpty()) {, +			annotations = new HashMap<CodePosition, Object>();, +		return annotations.put(pos, obj);, +		if (sourceLine == 0) {, +			return;, +		}, +	private void attachSourceLine(int decompiledLine, int sourceLine) {, +		if (lineMap.isEmpty()) {, +			lineMap = new TreeMap<Integer, Integer>();, +		}, +		lineMap.put(decompiledLine, sourceLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		code.attachSourceLine(mth.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import java.util.TreeMap;, +	private Object attachAnnotation(Object obj, CodePosition pos) {, +		if (annotations.isEmpty()) {, +			annotations = new HashMap<CodePosition, Object>();, +		return annotations.put(pos, obj);, +		if (sourceLine == 0) {, +			return;, +		}, +	private void attachSourceLine(int decompiledLine, int sourceLine) {, +		if (lineMap.isEmpty()) {, +			lineMap = new TreeMap<Integer, Integer>();, +		}, +		lineMap.put(decompiledLine, sourceLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		code.attachSourceLine(mth.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		code.attachSourceLine(region.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import java.util.TreeMap;, +	private Object attachAnnotation(Object obj, CodePosition pos) {, +		if (annotations.isEmpty()) {, +			annotations = new HashMap<CodePosition, Object>();, +		return annotations.put(pos, obj);, +		if (sourceLine == 0) {, +			return;, +		}, +	private void attachSourceLine(int decompiledLine, int sourceLine) {, +		if (lineMap.isEmpty()) {, +			lineMap = new TreeMap<Integer, Integer>();, +		}, +		lineMap.put(decompiledLine, sourceLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		code.attachSourceLine(mth.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		code.attachSourceLine(region.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/ConstructorInsn.java, +		setSourceLine(invoke.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/codegen/CodeWriter.java, +import java.util.TreeMap;, +	private Object attachAnnotation(Object obj, CodePosition pos) {, +		if (annotations.isEmpty()) {, +			annotations = new HashMap<CodePosition, Object>();, +		return annotations.put(pos, obj);, +		if (sourceLine == 0) {, +			return;, +		}, +	private void attachSourceLine(int decompiledLine, int sourceLine) {, +		if (lineMap.isEmpty()) {, +			lineMap = new TreeMap<Integer, Integer>();, +		}, +		lineMap.put(decompiledLine, sourceLine);, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/codegen/MethodGen.java, +		code.attachSourceLine(mth.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/codegen/RegionGen.java, +		code.attachSourceLine(region.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/mods/ConstructorInsn.java, +		setSourceLine(invoke.getSourceLine());, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/parser/DebugInfoParser.java, +		setLine(addr, line);]