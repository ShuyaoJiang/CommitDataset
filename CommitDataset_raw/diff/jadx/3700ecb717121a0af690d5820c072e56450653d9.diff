[+++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-r", "--no-res"}, description = "do not decode resources"), +	protected boolean skipResources = false;, +, +	@Parameter(names = {"-s", "--no-src"}, description = "do not decompile source code"), +	protected boolean skipSources = false;, +, +	public boolean isSkipResources() {, +		return skipResources;, +	}, +, +	@Override, +	public boolean isSkipSources() {, +		return skipSources;, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-r", "--no-res"}, description = "do not decode resources"), +	protected boolean skipResources = false;, +, +	@Parameter(names = {"-s", "--no-src"}, description = "do not decompile source code"), +	protected boolean skipSources = false;, +, +	public boolean isSkipResources() {, +		return skipResources;, +	}, +, +	@Override, +	public boolean isSkipSources() {, +		return skipSources;, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +	public boolean isSkipResources() {, +		return false;, +	}, +, +	@Override, +	public boolean isSkipSources() {, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-r", "--no-res"}, description = "do not decode resources"), +	protected boolean skipResources = false;, +, +	@Parameter(names = {"-s", "--no-src"}, description = "do not decompile source code"), +	protected boolean skipSources = false;, +, +	public boolean isSkipResources() {, +		return skipResources;, +	}, +, +	@Override, +	public boolean isSkipSources() {, +		return skipSources;, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +	public boolean isSkipResources() {, +		return false;, +	}, +, +	@Override, +	public boolean isSkipSources() {, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	boolean isSkipResources();, +, +	boolean isSkipSources();, +++ b/jadx-cli/src/main/java/jadx/cli/JadxCLIArgs.java, +	@Parameter(names = {"-r", "--no-res"}, description = "do not decode resources"), +	protected boolean skipResources = false;, +, +	@Parameter(names = {"-s", "--no-src"}, description = "do not decompile source code"), +	protected boolean skipSources = false;, +, +	public boolean isSkipResources() {, +		return skipResources;, +	}, +, +	@Override, +	public boolean isSkipSources() {, +		return skipSources;, +++ b/jadx-core/src/main/java/jadx/api/DefaultJadxArgs.java, +	public boolean isSkipResources() {, +		return false;, +	}, +, +	@Override, +	public boolean isSkipSources() {, +++ b/jadx-core/src/main/java/jadx/api/IJadxArgs.java, +	boolean isSkipResources();, +, +	boolean isSkipSources();, +++ b/jadx-core/src/main/java/jadx/api/JadxDecompiler.java, +import jadx.core.codegen.CodeWriter;, +	private List<ResourceFile> resources;, +, +	private BinaryXMLParser xmlParser;, +		resources = null;, +		xmlParser = null;, +		save(!args.isSkipSources(), !args.isSkipResources());, +	}, +	public void saveSources() {, +		save(true, false);, +	}, +, +	public void saveResources() {, +		save(false, true);]