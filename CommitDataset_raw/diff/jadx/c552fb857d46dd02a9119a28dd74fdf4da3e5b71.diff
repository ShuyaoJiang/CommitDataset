[+++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Modifier;, +		System.out.println(cls.getCode());, +, +		runAutoCheck(clsName);, +, +			@Override, +			public boolean isShowInconsistentCode() {, +				return true;, +			}, +	private void runAutoCheck(String clsName) {, +		try {, +			// run 'check' method from original class, +			Class<?> origCls;, +			try {, +				origCls = Class.forName(clsName);, +			} catch (ClassNotFoundException e) {, +				// ignore, +				return;, +			}, +			Method checkMth;, +			try {, +				checkMth = origCls.getMethod("check");, +			} catch (NoSuchMethodException e) {, +				// ignore, +				return;, +			}, +			if (!checkMth.getReturnType().equals(void.class), +					|| !Modifier.isPublic(checkMth.getModifiers()), +					|| Modifier.isStatic(checkMth.getModifiers())) {, +				fail("Wrong 'check' method");, +				return;, +			}, +			try {, +				checkMth.invoke(origCls.newInstance());, +			} catch (InvocationTargetException ie) {, +				rethrow("Java check failed", ie);, +			}, +			// run 'check' method from decompiled class, +			try {, +				invoke("check");, +			} catch (InvocationTargetException ie) {, +				rethrow("Decompiled check failed", ie);, +			}, +		} catch (Exception e) {, +			e.printStackTrace();, +			fail("Auto check exception: " + e.getMessage());, +		}, +	}, +, +	private void rethrow(String msg, InvocationTargetException ie) {, +		Throwable cause = ie.getCause();, +		if (cause instanceof AssertionError) {, +			System.err.println(msg);, +			throw ((AssertionError) cause);, +		} else {, +			cause.printStackTrace();, +			fail(msg + cause.getMessage());, +		}, +	}, +, +	public Object invoke(String method, Class[] types, Object... args) throws Exception {, +	public Object invoke(Method mth, Object... args) throws Exception {, +++ b/jadx-core/src/test/java/jadx/tests/api/IntegrationTest.java, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Modifier;, +		System.out.println(cls.getCode());, +, +		runAutoCheck(clsName);, +, +			@Override, +			public boolean isShowInconsistentCode() {, +				return true;, +			}, +	private void runAutoCheck(String clsName) {, +		try {, +			// run 'check' method from original class, +			Class<?> origCls;, +			try {, +				origCls = Class.forName(clsName);, +			} catch (ClassNotFoundException e) {, +				// ignore, +				return;, +			}, +			Method checkMth;, +			try {, +				checkMth = origCls.getMethod("check");, +			} catch (NoSuchMethodException e) {, +				// ignore, +				return;, +			}, +			if (!checkMth.getReturnType().equals(void.class), +					|| !Modifier.isPublic(checkMth.getModifiers()), +					|| Modifier.isStatic(checkMth.getModifiers())) {, +				fail("Wrong 'check' method");, +				return;, +			}, +			try {, +				checkMth.invoke(origCls.newInstance());]