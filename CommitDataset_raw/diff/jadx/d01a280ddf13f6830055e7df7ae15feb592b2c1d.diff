[+++ b/src/main/java/jadx/Consts.java, +package jadx;, +, +public class Consts {, +	public static final String JADX_VERSION = "dev";, +, +	public static final boolean DEBUG = false;, +, +	public static final String CLASS_OBJECT = "java.lang.Object";, +	public static final String CLASS_STRING = "java.lang.String";, +	public static final String CLASS_CLASS = "java.lang.Class";, +	public static final String CLASS_THROWABLE = "java.lang.Throwable";, +	public static final String CLASS_ENUM = "java.lang.Enum";, +}, +++ b/src/main/java/jadx/Consts.java, +package jadx;, +, +public class Consts {, +	public static final String JADX_VERSION = "dev";, +, +	public static final boolean DEBUG = false;, +, +	public static final String CLASS_OBJECT = "java.lang.Object";, +	public static final String CLASS_STRING = "java.lang.String";, +	public static final String CLASS_CLASS = "java.lang.Class";, +	public static final String CLASS_THROWABLE = "java.lang.Throwable";, +	public static final String CLASS_ENUM = "java.lang.Enum";, +}, +++ b/src/main/java/jadx/JadxArgs.java, +package jadx;, +, +import jadx.utils.exceptions.JadxException;, +import jadx.utils.files.InputFile;, +, +import java.io.File;, +import java.io.IOException;, +import java.io.PrintStream;, +import java.lang.reflect.Field;, +import java.util.ArrayList;, +import java.util.List;, +, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +, +import com.beust.jcommander.JCommander;, +import com.beust.jcommander.Parameter;, +import com.beust.jcommander.ParameterDescription;, +import com.beust.jcommander.ParameterException;, +, +public class JadxArgs {, +	private final static Logger LOG = LoggerFactory.getLogger(JadxArgs.class);, +, +	@Parameter(description = "<input files> (.dex, .apk, .jar or .class)", required = true), +	protected List<String> files;, +, +	@Parameter(names = { "-d", "--output-dir" }, description = "output directory"), +	protected String outDirName;, +, +	@Parameter(names = { "-j", "--threads-count" }, description = "processing threads count"), +	protected int threadsCount = Runtime.getRuntime().availableProcessors();, +, +	@Parameter(names = { "-f", "--fallback" }, description = "make simple dump (using goto instead of 'if', 'for', etc)", help = true), +	protected boolean fallbackMode = false;, +, +	@Parameter(names = { "--not-obfuscated" }, description = "set this flag if code not obfuscated"), +	protected boolean notObfuscated = false;, +, +	@Parameter(names = { "--cfg" }, description = "save methods control flow graph"), +	protected boolean cfgOutput = false;, +, +	@Parameter(names = { "--raw-cfg" }, description = "save methods control flow graph (use raw instructions)"), +	protected boolean rawCfgOutput = false;, +, +	@Parameter(names = { "-v", "--verbose" }, description = "verbose output"), +	protected boolean verbose = false;, +, +	@Parameter(names = { "-h", "--help" }, description = "print this help", help = true), +	protected boolean printHelp = false;, +, +	private final List<InputFile> input = new ArrayList<InputFile>();, +	private File outputDir;, +, +	public void parse(String[] args) throws JadxException {, +		try {, +			new JCommander(this, args);, +			processArgs();, +		} catch (ParameterException e) {, +			System.out.println("Arguments parse error: " + e.getMessage());, +			System.out.println();, +			printHelp = true;, +		}, +	}, +, +	private void processArgs() throws JadxException {, +		if (printHelp), +			return;, +, +		if (files == null || files.isEmpty()), +			throw new JadxException("Please specify at least one input file");, +]