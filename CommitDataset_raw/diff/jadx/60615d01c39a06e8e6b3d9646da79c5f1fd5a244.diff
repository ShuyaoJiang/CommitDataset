[+++ b/src/main/java/jadx/codegen/RegionGen.java, +		code.startLine("synchronized(").add(arg(cont.getInsn().getArg(0))).add(") {");, +++ b/src/main/java/jadx/codegen/RegionGen.java, +		code.startLine("synchronized(").add(arg(cont.getInsn().getArg(0))).add(") {");, +++ b/src/main/java/jadx/dex/regions/SynchronizedRegion.java, +import jadx.dex.nodes.InsnNode;, +	private final InsnNode insn;, +	public SynchronizedRegion(IRegion parent, InsnNode insn) {, +		this.insn = insn;, +	public InsnNode getInsn() {, +		return insn;, +++ b/src/main/java/jadx/codegen/RegionGen.java, +		code.startLine("synchronized(").add(arg(cont.getInsn().getArg(0))).add(") {");, +++ b/src/main/java/jadx/dex/regions/SynchronizedRegion.java, +import jadx.dex.nodes.InsnNode;, +	private final InsnNode insn;, +	public SynchronizedRegion(IRegion parent, InsnNode insn) {, +		this.insn = insn;, +	public InsnNode getInsn() {, +		return insn;, +++ b/src/main/java/jadx/dex/visitors/regions/RegionMaker.java, +import jadx.dex.instructions.args.InsnArg;, +		SynchronizedRegion synchRegion = new SynchronizedRegion(curRegion, insn);, +		traverseMonitorExits(insn.getArg(0), block, exits, cacheSet);, +	private void traverseMonitorExits(InsnArg arg, BlockNode block, Set<BlockNode> exits, Set<BlockNode> visited) {]