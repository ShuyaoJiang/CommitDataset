[+++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +import java.util.List;, +, +		List<BlockNode> successors = curBlock.getSuccessors();, +		thenBlock = getBlockByOffset(target, successors);, +		if (successors.size() == 1) {, +			elseBlock = selectOther(thenBlock, successors);, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +import java.util.List;, +, +		List<BlockNode> successors = curBlock.getSuccessors();, +		thenBlock = getBlockByOffset(target, successors);, +		if (successors.size() == 1) {, +			elseBlock = selectOther(thenBlock, successors);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import java.util.Objects;, +		if (Objects.equals(thenBlock, elseBlock)) {, +			IfInfo ifInfo = new IfInfo(info, null, null);, +			ifInfo.setOutBlock(thenBlock);, +			return ifInfo;, +		}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +import java.util.List;, +, +		List<BlockNode> successors = curBlock.getSuccessors();, +		thenBlock = getBlockByOffset(target, successors);, +		if (successors.size() == 1) {, +			elseBlock = selectOther(thenBlock, successors);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import java.util.Objects;, +		if (Objects.equals(thenBlock, elseBlock)) {, +			IfInfo ifInfo = new IfInfo(info, null, null);, +			ifInfo.setOutBlock(thenBlock);, +			return ifInfo;, +		}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +	private BitSet processedBlocks;, +		this.processedBlocks = new BitSet(mth.getBasicBlocks().size());, +		Region r = new Region(stack.peekRegion());, +		if (startBlock == null) {, +			return r;, +		int startBlockId = startBlock.getId();, +		if (processedBlocks.get(startBlockId)) {, +			mth.addWarn("Removed duplicated region for block: " + startBlock + " " + startBlock.getAttributesString());, +			return r;, +		}, +		processedBlocks.set(startBlockId);, +, +			processedBlocks.clear(loopStart.getId());, +		processedBlocks.clear(loopStart.getId());, +++ b/jadx-core/src/main/java/jadx/core/dex/instructions/IfNode.java, +import java.util.List;, +, +		List<BlockNode> successors = curBlock.getSuccessors();, +		thenBlock = getBlockByOffset(target, successors);, +		if (successors.size() == 1) {, +			elseBlock = selectOther(thenBlock, successors);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +import java.util.Objects;, +		if (Objects.equals(thenBlock, elseBlock)) {, +			IfInfo ifInfo = new IfInfo(info, null, null);, +			ifInfo.setOutBlock(thenBlock);, +			return ifInfo;, +		}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +	private BitSet processedBlocks;, +		this.processedBlocks = new BitSet(mth.getBasicBlocks().size());, +		Region r = new Region(stack.peekRegion());, +		if (startBlock == null) {, +			return r;, +		int startBlockId = startBlock.getId();, +		if (processedBlocks.get(startBlockId)) {, +			mth.addWarn("Removed duplicated region for block: " + startBlock + " " + startBlock.getAttributesString());, +			return r;, +		}, +		processedBlocks.set(startBlockId);, +, +			processedBlocks.clear(loopStart.getId());, +		processedBlocks.clear(loopStart.getId());, +++ b/jadx-core/src/test/java/jadx/tests/integration/TestWrongCode.java, +import static jadx.tests.api.utils.JadxMatchers.containsLines;, +		assertThat(code, containsLines(2,, +				"if (a == 0) {",, +				"}",, +				"return a;", +		));]