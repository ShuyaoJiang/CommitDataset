[+++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass13.java, +package jadx.tests.integration.inner;, +, +import org.junit.jupiter.api.Test;, +, +import jadx.NotYetImplemented;, +import jadx.tests.api.IntegrationTest;, +, +public class TestAnonymousClass13 extends IntegrationTest {, +, +	public static class TestCls {, +, +		public void test() {, +			new TestCls() {, +			};, +		}, +	}, +, +	@Test, +	@NotYetImplemented, +	public void test() {, +		getClassNode(TestCls.class);, +	}, +}, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass13.java, +package jadx.tests.integration.inner;, +, +import org.junit.jupiter.api.Test;, +, +import jadx.NotYetImplemented;, +import jadx.tests.api.IntegrationTest;, +, +public class TestAnonymousClass13 extends IntegrationTest {, +, +	public static class TestCls {, +, +		public void test() {, +			new TestCls() {, +			};, +		}, +	}, +, +	@Test, +	@NotYetImplemented, +	public void test() {, +		getClassNode(TestCls.class);, +	}, +}, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass2.java, +, +		assertThat(code, containsString("f = i;"));, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass13.java, +package jadx.tests.integration.inner;, +, +import org.junit.jupiter.api.Test;, +, +import jadx.NotYetImplemented;, +import jadx.tests.api.IntegrationTest;, +, +public class TestAnonymousClass13 extends IntegrationTest {, +, +	public static class TestCls {, +, +		public void test() {, +			new TestCls() {, +			};, +		}, +	}, +, +	@Test, +	@NotYetImplemented, +	public void test() {, +		getClassNode(TestCls.class);, +	}, +}, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass2.java, +, +		assertThat(code, containsString("f = i;"));, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass3.java, +import jadx.NotYetImplemented;, +import static org.hamcrest.Matchers.not;, +		assertThat(code, not(containsString("AnonymousClass_")));, +	}, +	@Test, +	@NotYetImplemented, +	public void test2() {, +		disableCompilation();, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, not(containsString("synthetic")));, +		assertThat(code, containsString("a = f--;"));]