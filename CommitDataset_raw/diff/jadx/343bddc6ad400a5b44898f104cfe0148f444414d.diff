[+++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				if (!this.getFullName().contains(fileName.replace(".java", "")), +						&& !fileName.equals("SourceFile")) {, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				if (!this.getFullName().contains(fileName.replace(".java", "")), +						&& !fileName.equals("SourceFile")) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			BlockNode loopExit = BlockUtils.selectOtherSafe(loopBody, condBlock.getCleanSuccessors());, +			if (loopExit != null) {, +		}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				if (!this.getFullName().contains(fileName.replace(".java", "")), +						&& !fileName.equals("SourceFile")) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			BlockNode loopExit = BlockUtils.selectOtherSafe(loopBody, condBlock.getCleanSuccessors());, +			if (loopExit != null) {, +		}, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +	public static BlockNode selectOtherSafe(BlockNode node, List<BlockNode> blocks) {, +		int size = blocks.size();, +		if (size == 1) {, +			BlockNode first = blocks.get(0);, +			return first != node ? first : null;, +		} else if (size == 2) {, +			BlockNode first = blocks.get(0);, +			return first != node ? first : blocks.get(1);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/ClassNode.java, +				if (!this.getFullName().contains(fileName.replace(".java", "")), +						&& !fileName.equals("SourceFile")) {, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +			BlockNode loopExit = BlockUtils.selectOtherSafe(loopBody, condBlock.getCleanSuccessors());, +			if (loopExit != null) {, +		}, +++ b/jadx-core/src/main/java/jadx/core/utils/BlockUtils.java, +	public static BlockNode selectOtherSafe(BlockNode node, List<BlockNode> blocks) {, +		int size = blocks.size();, +		if (size == 1) {, +			BlockNode first = blocks.get(0);, +			return first != node ? first : null;, +		} else if (size == 2) {, +			BlockNode first = blocks.get(0);, +			return first != node ? first : blocks.get(1);, +		}, +		return null;, +	}, +, +++ b/jadx-core/src/test/java/jadx/tests/internal/loops/TestLoopDetection3.java, +package jadx.tests.internal.loops;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.junit.Assert.assertThat;, +, +public class TestLoopDetection3 extends InternalJadxTest {, +, +	public static class TestCls {, +, +		private void test(TestCls parent, int pos) {, +			Object item;, +			while (--pos >= 0) {, +				item = parent.get(pos);, +				if (item instanceof String) {, +					func((String) item);, +					return;, +				}, +			}, +		}, +, +		private Object get(int pos) {, +			return null;, +		}, +, +		private void func(String item) {, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +		System.out.println(code);, +, +		assertThat(code, containsString("while"));, +		// TODO, +		// assertThat(code, containsString("while (--pos >= 0) {"));, +	}, +}]