[+++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +	public static ResourceFile createResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +		if (!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +	public static ResourceFile createResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +		if (!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/ResourceFileContent.java, +	public ResourceFileContent(String name, ResourceType type, CodeWriter content) {, +		return ResContainer.textResource(getName(), content);, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +	public static ResourceFile createResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +		if (!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/ResourceFileContent.java, +	public ResourceFileContent(String name, ResourceType type, CodeWriter content) {, +		return ResContainer.textResource(getName(), content);, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.android.Res9patchStreamDecoder;, +	public interface ResourceDecoder<T> {, +		T decode(long size, InputStream is) throws IOException;, +	public static <T> T decodeStream(ResourceFile rf, ResourceDecoder<T> decoder) throws JadxException {, +			return decodeStream(rf, (size, is) -> loadContent(jadxRef, rf, is));, +			return ResContainer.textResource(rf.getName(), cw);, +	                                        InputStream inputStream) throws IOException {, +				CodeWriter content = jadxRef.getXmlParser().parse(inputStream);, +				return ResContainer.textResource(rf.getName(), content);, +				return new ResTableParser().decodeFiles(inputStream);, +				return decodeImage(rf, inputStream);, +				return ResContainer.resourceFileLink(rf);, +, +	private static ResContainer decodeImage(ResourceFile rf, InputStream inputStream) {, +		String name = rf.getName();, +		if (name.endsWith(".9.png")) {, +			Res9patchStreamDecoder decoder = new Res9patchStreamDecoder();, +			ByteArrayOutputStream os = new ByteArrayOutputStream();, +			try {, +				decoder.decode(inputStream, os);, +				return ResContainer.decodedData(rf.getName(), os.toByteArray());, +			} catch (Exception e) {, +				LOG.error("Failed to decode 9-patch png image, path: {}", name, e);, +			}, +		}, +		return ResContainer.resourceFileLink(rf);, +		ResourceFile rf = ResourceFile.createResourceFile(jadxRef, name, type);, +		ResourceFile rf = ResourceFile.createResourceFile(jadxRef, name, type);, +++ b/jadx-core/src/main/java/jadx/api/ResourceFile.java, +	public static ResourceFile createResourceFile(JadxDecompiler decompiler, String name, ResourceType type) {, +		if (!ZipSecurity.isValidZipEntryName(name)) {, +			return null;, +		}, +		return new ResourceFile(decompiler, name, type);, +	}, +, +++ b/jadx-core/src/main/java/jadx/api/ResourceFileContent.java, +	public ResourceFileContent(String name, ResourceType type, CodeWriter content) {, +		return ResContainer.textResource(getName(), content);, +++ b/jadx-core/src/main/java/jadx/api/ResourcesLoader.java, +import jadx.core.utils.android.Res9patchStreamDecoder;, +	public interface ResourceDecoder<T> {, +		T decode(long size, InputStream is) throws IOException;, +	public static <T> T decodeStream(ResourceFile rf, ResourceDecoder<T> decoder) throws JadxException {, +			return decodeStream(rf, (size, is) -> loadContent(jadxRef, rf, is));, +			return ResContainer.textResource(rf.getName(), cw);, +	                                        InputStream inputStream) throws IOException {, +				CodeWriter content = jadxRef.getXmlParser().parse(inputStream);, +				return ResContainer.textResource(rf.getName(), content);, +				return new ResTableParser().decodeFiles(inputStream);, +				return decodeImage(rf, inputStream);, +				return ResContainer.resourceFileLink(rf);, +, +	private static ResContainer decodeImage(ResourceFile rf, InputStream inputStream) {, +		String name = rf.getName();, +		if (name.endsWith(".9.png")) {, +			Res9patchStreamDecoder decoder = new Res9patchStreamDecoder();, +			ByteArrayOutputStream os = new ByteArrayOutputStream();, +			try {, +				decoder.decode(inputStream, os);, +				return ResContainer.decodedData(rf.getName(), os.toByteArray());, +			} catch (Exception e) {, +				LOG.error("Failed to decode 9-patch png image, path: {}", name, e);, +			}, +		}, +		return ResContainer.resourceFileLink(rf);, +		ResourceFile rf = ResourceFile.createResourceFile(jadxRef, name, type);, +		ResourceFile rf = ResourceFile.createResourceFile(jadxRef, name, type);, +++ b/jadx-core/src/main/java/jadx/core/codegen/NameGen.java]