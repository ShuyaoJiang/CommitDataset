[+++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +	private final Set<BlockNode> skipBlocks;, +		this(condition, thenBlock, elseBlock, new HashSet<BlockNode>(), new HashSet<BlockNode>());, +	              Set<BlockNode> mergedBlocks, Set<BlockNode> skipBlocks) {, +	public void merge(IfInfo... arr) {, +		for (IfInfo info : arr) {, +			mergedBlocks.addAll(info.getMergedBlocks());, +			skipBlocks.addAll(info.getSkipBlocks());, +		}, +	}, +, +	public Set<BlockNode> getSkipBlocks() {, +		return skipBlocks;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +	private final Set<BlockNode> skipBlocks;, +		this(condition, thenBlock, elseBlock, new HashSet<BlockNode>(), new HashSet<BlockNode>());, +	              Set<BlockNode> mergedBlocks, Set<BlockNode> skipBlocks) {, +	public void merge(IfInfo... arr) {, +		for (IfInfo info : arr) {, +			mergedBlocks.addAll(info.getMergedBlocks());, +			skipBlocks.addAll(info.getSkipBlocks());, +		}, +	}, +, +	public Set<BlockNode> getSkipBlocks() {, +		return skipBlocks;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +		result.merge(currentIf, nextThen, nextElse);, +		result.merge(first, second);, +	private static void skipSimplePath(BlockNode block, Set<BlockNode> skipped) {, +++ b/jadx-core/src/main/java/jadx/core/dex/regions/conditions/IfInfo.java, +	private final Set<BlockNode> skipBlocks;, +		this(condition, thenBlock, elseBlock, new HashSet<BlockNode>(), new HashSet<BlockNode>());, +	              Set<BlockNode> mergedBlocks, Set<BlockNode> skipBlocks) {, +	public void merge(IfInfo... arr) {, +		for (IfInfo info : arr) {, +			mergedBlocks.addAll(info.getMergedBlocks());, +			skipBlocks.addAll(info.getSkipBlocks());, +		}, +	}, +, +	public Set<BlockNode> getSkipBlocks() {, +		return skipBlocks;, +	}, +, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/IfMakerHelper.java, +		result.merge(currentIf, nextThen, nextElse);, +		result.merge(first, second);, +	private static void skipSimplePath(BlockNode block, Set<BlockNode> skipped) {, +++ b/jadx-core/src/test/java/jadx/tests/internal/conditions/TestConditions15.java, +package jadx.tests.internal.conditions;, +, +import jadx.api.InternalJadxTest;, +import jadx.core.dex.nodes.ClassNode;, +, +import org.junit.Test;, +, +import static jadx.tests.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestConditions15 extends InternalJadxTest {, +, +	public static class TestCls {, +, +		private static boolean test(final String name) {, +			if (isEmpty(name)) {, +				return false;, +			}, +			if ("1".equals(name), +					|| "2".equals(name), +					|| "3".equals(name), +					|| "4".equals(name), +					|| "5".equals(name), +					|| "6".equals(name), +					|| "7".equals(name), +					|| "8".equals(name), +					|| "9".equals(name), +					|| "10".equals(name), +					|| "11".equals(name), +					|| "12".equals(name), +					|| "13".equals(name), +					|| "14".equals(name), +					|| "15".equals(name), +					|| "16".equals(name), +					|| "17".equals(name), +					|| "18".equals(name), +					|| "19".equals(name), +					|| "20".equals(name), +					|| "22".equals(name), +					|| "22".equals(name), +					|| "23".equals(name), +					|| "24".equals(name), +					|| "25".equals(name), +					|| "26".equals(name), +					|| "27".equals(name), +					|| "28".equals(name)]