[+++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		Set<BlockNode> cacheSet = new HashSet<BlockNode>();, +			BlockNode insnBlock = BlockUtils.getBlockByInsn(mth, exitInsn);, +			if (insnBlock != null) {, +				insnBlock.add(AFlag.SKIP);, +			}, +			exitInsn.add(AFlag.SKIP);, +		BlockNode exit = null;, +		} else if (exits.size() > 1) {, +		if (exit != null) {, +		} else {, +			for (BlockNode exitBlock : exits) {, +				// don't add exit blocks which leads to method end blocks ('return', 'throw', etc), +				List<BlockNode> list = BlockUtils.buildSimplePath(exitBlock);, +				if (list.isEmpty() || !list.get(list.size() - 1).getSuccessors().isEmpty()) {, +					stack.addExit(exitBlock);, +				}, +			}, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/regions/RegionMaker.java, +		Set<BlockNode> cacheSet = new HashSet<BlockNode>();, +			BlockNode insnBlock = BlockUtils.getBlockByInsn(mth, exitInsn);, +			if (insnBlock != null) {, +				insnBlock.add(AFlag.SKIP);, +			}, +			exitInsn.add(AFlag.SKIP);, +		BlockNode exit = null;, +		} else if (exits.size() > 1) {, +		if (exit != null) {, +		} else {, +			for (BlockNode exitBlock : exits) {, +				// don't add exit blocks which leads to method end blocks ('return', 'throw', etc), +				List<BlockNode> list = BlockUtils.buildSimplePath(exitBlock);, +				if (list.isEmpty() || !list.get(list.size() - 1).getSuccessors().isEmpty()) {, +					stack.addExit(exitBlock);, +				}, +			}, +		}, +++ b/jadx-core/src/test/java/jadx/tests/integration/synchronize/TestSynchronized3.java, +package jadx.tests.integration.synchronize;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsLines;, +import static org.junit.Assert.assertThat;, +, +public class TestSynchronized3 extends IntegrationTest {, +, +	public static class TestCls {, +		private int x;, +, +		public void f() {, +		}, +, +		public void test() {, +			while (true) {, +				synchronized (this) {, +					if (x == 0) {, +						throw new IllegalStateException("bad luck");, +					}, +					x++;, +					if (x == 10) {, +						break;, +					}, +				}, +				this.x++;, +				f();, +			}, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsLines(3, "}", "this.x++;", "f();"));, +	}, +}]