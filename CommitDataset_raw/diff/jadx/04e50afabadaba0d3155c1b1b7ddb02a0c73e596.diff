[+++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.ErrorsCounter;, +		if (cls.contains(AFlag.DONT_GENERATE)) {, +			code.add("/* anonymous class already generated */");, +			ErrorsCounter.methodError(mth, "Anonymous class already generated: " + cls);, +			return;, +		}, +			InsnNode inlCopy = inl.copy();, +			inlCopy.getRegisterArgs(inlArgs);, +						inlCopy.replaceArg(r, repl);, +			makeInsn(inlCopy, code, Flags.BODY_ONLY);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.ErrorsCounter;, +		if (cls.contains(AFlag.DONT_GENERATE)) {, +			code.add("/* anonymous class already generated */");, +			ErrorsCounter.methodError(mth, "Anonymous class already generated: " + cls);, +			return;, +		}, +			InsnNode inlCopy = inl.copy();, +			inlCopy.getRegisterArgs(inlArgs);, +						inlCopy.replaceArg(r, repl);, +			makeInsn(inlCopy, code, Flags.BODY_ONLY);, +++ b/jadx-core/src/main/java/jadx/core/utils/ErrorsCounter.java, +	public static String classError(ClassNode cls, String errorMsg) {, +		return classError(cls, errorMsg, null);, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.ErrorsCounter;, +		if (cls.contains(AFlag.DONT_GENERATE)) {, +			code.add("/* anonymous class already generated */");, +			ErrorsCounter.methodError(mth, "Anonymous class already generated: " + cls);, +			return;, +		}, +			InsnNode inlCopy = inl.copy();, +			inlCopy.getRegisterArgs(inlArgs);, +						inlCopy.replaceArg(r, repl);, +			makeInsn(inlCopy, code, Flags.BODY_ONLY);, +++ b/jadx-core/src/main/java/jadx/core/utils/ErrorsCounter.java, +	public static String classError(ClassNode cls, String errorMsg) {, +		return classError(cls, errorMsg, null);, +++ b/jadx-core/src/test/java/jadx/tests/integration/inner/TestAnonymousClass12.java, +package jadx.tests.integration.inner;, +, +import jadx.core.dex.nodes.ClassNode;, +import jadx.tests.api.IntegrationTest;, +, +import org.junit.Test;, +, +import static jadx.tests.api.utils.JadxMatchers.containsOne;, +import static org.junit.Assert.assertThat;, +, +public class TestAnonymousClass12 extends IntegrationTest {, +, +	public static class TestCls {, +, +		public abstract static class BasicAbstract {, +			public abstract void doSomething();, +		}, +, +		private BasicAbstract outer;, +		private BasicAbstract inner;, +, +		public void test() {, +			outer = new BasicAbstract() {, +				@Override, +				public void doSomething() {, +					inner = new BasicAbstract() {, +						@Override, +						public void doSomething() {, +							inner = null;, +						}, +					};, +				}, +			};, +		}, +	}, +, +	@Test, +	public void test() {, +		ClassNode cls = getClassNode(TestCls.class);, +		String code = cls.getCode().toString();, +, +		assertThat(code, containsOne("outer = new BasicAbstract() {"));, +		assertThat(code, containsOne("inner = new BasicAbstract() {"));, +		assertThat(code, containsOne("inner = null;"));, +	}, +}, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.utils.ErrorsCounter;, +		if (cls.contains(AFlag.DONT_GENERATE)) {, +			code.add("/* anonymous class already generated */");, +			ErrorsCounter.methodError(mth, "Anonymous class already generated: " + cls);, +			return;, +		}, +			InsnNode inlCopy = inl.copy();, +			inlCopy.getRegisterArgs(inlArgs);, +						inlCopy.replaceArg(r, repl);, +			makeInsn(inlCopy, code, Flags.BODY_ONLY);, +++ b/jadx-core/src/main/java/jadx/core/utils/ErrorsCounter.java, +	public static String classError(ClassNode cls, String errorMsg) {, +		return classError(cls, errorMsg, null);]