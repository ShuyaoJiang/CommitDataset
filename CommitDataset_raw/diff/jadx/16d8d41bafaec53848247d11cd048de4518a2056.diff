[+++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/core/clsp/NClass.java, +	private final int id;, +++ b/jadx-core/src/main/java/jadx/api/JadxArgsValidator.java, +		}, +		if (srcDir == null) {, +			args.setOutDirSrc(new File(args.getOutDir(), JadxArgs.DEFAULT_SRC_DIR));, +		}, +		if (resDir == null) {, +			args.setOutDirRes(new File(args.getOutDir(), JadxArgs.DEFAULT_RES_DIR));, +		}, +		checkDir(args.getOutDir(), "Output");, +		checkDir(args.getOutDirSrc(), "Source output");, +		checkDir(args.getOutDirRes(), "Resources output");, +	private static void checkDir(File dir, String desc) {, +			throw new JadxArgsValidateException(desc + " directory exists as file " + dir);, +++ b/jadx-core/src/main/java/jadx/core/Jadx.java, +			passes.add(new MethodInlineVisitor());, +++ b/jadx-core/src/main/java/jadx/core/clsp/ClsSet.java, +		NClass cls = names.get(fullName);, +		if (cls == null) {, +		return cls;, +++ b/jadx-core/src/main/java/jadx/core/clsp/NClass.java, +	private final int id;, +++ b/jadx-core/src/main/java/jadx/core/codegen/InsnGen.java, +import jadx.core.Consts;, +				ClassInfo superCallCls = getClassForSuperCall(code, callMth);, +				if (superCallCls != null) {, +					useClass(code, superCallCls);, +					code.add('.');, +				}, +	@Nullable, +	private ClassInfo getClassForSuperCall(CodeWriter code, MethodInfo callMth) {, +		ClassNode useCls = mth.getParentClass();, +		ClassInfo insnCls = useCls.getAlias();]