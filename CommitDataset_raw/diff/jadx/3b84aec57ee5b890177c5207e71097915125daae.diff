[+++ b/src/main/java/jadx/codegen/AnnotationGen.java, +				if (aCls.equals("dalvik.annotation.Signature")) {, +					if (!(node instanceof MethodNode)) {, +						String sign = Utils.mergeSignature((List<String>) a.getValues().get("value"));, +						List<ArgType> types = ArgType.parseSignatureList(sign);, +						code.startLine("// signature: " + Utils.listToString(types));, +					}, +				} else if (Consts.DEBUG) {, +				}, +++ b/src/main/java/jadx/codegen/AnnotationGen.java, +				if (aCls.equals("dalvik.annotation.Signature")) {, +					if (!(node instanceof MethodNode)) {, +						String sign = Utils.mergeSignature((List<String>) a.getValues().get("value"));, +						List<ArgType> types = ArgType.parseSignatureList(sign);, +						code.startLine("// signature: " + Utils.listToString(types));, +					}, +				} else if (Consts.DEBUG) {, +				}, +++ b/src/main/java/jadx/codegen/ClassGen.java, +		String baseClass = useClass(ClassInfo.fromType(cls.dex(), clsType));, +, +		ArgType[] generics = clsType.getGenericTypes();, +		if (generics != null) {, +			StringBuilder sb = new StringBuilder();, +			sb.append(baseClass);, +			sb.append("<");, +			int len = generics.length;, +			for (int i = 0; i < len; i++) {, +				if (i != 0) {, +					sb.append(", ");, +				}, +				ArgType gt = generics[i];, +				if (gt.isTypeKnown()), +					sb.append(useClass(gt));, +				else, +					sb.append('?');, +			}, +			sb.append(">");, +			return sb.toString();, +		} else {, +			return baseClass;, +		}, +++ b/src/main/java/jadx/codegen/AnnotationGen.java, +				if (aCls.equals("dalvik.annotation.Signature")) {, +					if (!(node instanceof MethodNode)) {, +						String sign = Utils.mergeSignature((List<String>) a.getValues().get("value"));, +						List<ArgType> types = ArgType.parseSignatureList(sign);, +						code.startLine("// signature: " + Utils.listToString(types));, +					}, +				} else if (Consts.DEBUG) {, +				}, +++ b/src/main/java/jadx/codegen/ClassGen.java, +		String baseClass = useClass(ClassInfo.fromType(cls.dex(), clsType));, +, +		ArgType[] generics = clsType.getGenericTypes();, +		if (generics != null) {, +			StringBuilder sb = new StringBuilder();, +			sb.append(baseClass);, +			sb.append("<");, +			int len = generics.length;, +			for (int i = 0; i < len; i++) {, +				if (i != 0) {, +					sb.append(", ");, +				}, +				ArgType gt = generics[i];, +				if (gt.isTypeKnown()), +					sb.append(useClass(gt));, +				else, +					sb.append('?');, +			}, +			sb.append(">");, +			return sb.toString();, +		} else {, +			return baseClass;, +		}, +++ b/src/main/java/jadx/codegen/InsnGen.java, +		return useType(arg.getType()) + " " + arg(arg);, +				code.add(useType(((ArgType) ((IndexInsnNode) insn).getIndex())));, +		code.add("new ").add(useType(elType)).add("[] { ").add(str.toString()).add(" }");, +++ b/src/main/java/jadx/codegen/AnnotationGen.java, +				if (aCls.equals("dalvik.annotation.Signature")) {, +					if (!(node instanceof MethodNode)) {, +						String sign = Utils.mergeSignature((List<String>) a.getValues().get("value"));, +						List<ArgType> types = ArgType.parseSignatureList(sign);, +						code.startLine("// signature: " + Utils.listToString(types));, +					}, +				} else if (Consts.DEBUG) {, +				}, +++ b/src/main/java/jadx/codegen/ClassGen.java, +		String baseClass = useClass(ClassInfo.fromType(cls.dex(), clsType));, +, +		ArgType[] generics = clsType.getGenericTypes();, +		if (generics != null) {, +			StringBuilder sb = new StringBuilder();, +			sb.append(baseClass);, +			sb.append("<");, +			int len = generics.length;, +			for (int i = 0; i < len; i++) {, +				if (i != 0) {, +					sb.append(", ");]