[+++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +	private List<JavaClass> classes;, +			ex.shutdown();, +		if (classes == null) {, +			List<JavaClass> clsList = new ArrayList<JavaClass>(classNodeList.size());, +				clsList.add(new JavaClass(this, classNode));, +			classes = Collections.unmodifiableList(clsList);, +		}, +		return classes;, +		for (JavaClass javaClass : getClasses()) {, +		reset();, +	private void reset() {, +		ClassInfo.clearCache();, +		ErrorsCounter.reset();, +		classes = null;, +	}, +, +, +	JavaClass findJavaClass(ClassNode cls) {, +		if (cls == null) {, +			return null;, +		}, +		for (JavaClass javaClass : getClasses()) {, +			if (javaClass.getClassNode().equals(cls)) {, +				return javaClass;, +			}, +		}, +		return null;, +	}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +	private List<JavaClass> classes;, +			ex.shutdown();, +		if (classes == null) {, +			List<JavaClass> clsList = new ArrayList<JavaClass>(classNodeList.size());, +				clsList.add(new JavaClass(this, classNode));, +			classes = Collections.unmodifiableList(clsList);, +		}, +		return classes;, +		for (JavaClass javaClass : getClasses()) {, +		reset();, +	private void reset() {, +		ClassInfo.clearCache();, +		ErrorsCounter.reset();, +		classes = null;, +	}, +, +, +	JavaClass findJavaClass(ClassNode cls) {, +		if (cls == null) {, +			return null;, +		}, +		for (JavaClass javaClass : getClasses()) {, +			if (javaClass.getClassNode().equals(cls)) {, +				return javaClass;, +			}, +		}, +		return null;, +	}, +++ b/jadx-core/src/main/java/jadx/api/JavaClass.java, +	ClassNode getClassNode() {, +		return cls;, +	}, +, +		decompile();, +			if (clsNode == null) {, +				return null;, +			}, +			JavaClass jCls = decompiler.findJavaClass(clsNode);, +			if (jCls == null) {, +				return null;, +			}, +++ b/jadx-core/src/main/java/jadx/api/Decompiler.java, +	private List<JavaClass> classes;, +			ex.shutdown();, +		if (classes == null) {, +			List<JavaClass> clsList = new ArrayList<JavaClass>(classNodeList.size());, +				clsList.add(new JavaClass(this, classNode));, +			classes = Collections.unmodifiableList(clsList);, +		}, +		return classes;, +		for (JavaClass javaClass : getClasses()) {, +		reset();, +	private void reset() {, +		ClassInfo.clearCache();, +		ErrorsCounter.reset();, +		classes = null;, +	}, +, +, +	JavaClass findJavaClass(ClassNode cls) {, +		if (cls == null) {, +			return null;, +		}, +		for (JavaClass javaClass : getClasses()) {, +			if (javaClass.getClassNode().equals(cls)) {, +				return javaClass;, +			}, +		}, +		return null;, +	}]