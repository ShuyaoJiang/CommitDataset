[+++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (domFrontier == null) {, +			throw new JadxRuntimeException("Dominance frontier not set for block: " + this);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (domFrontier == null) {, +			throw new JadxRuntimeException("Dominance frontier not set for block: " + this);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinallyExtract.java, +import java.util.stream.Collectors;, +		int removeApplied = 0;, +			if (applyRemove(mth, removeInfo)) {, +				removeApplied++;, +				removeInfo.setApplied(true);, +			}, +		}, +		if (removeApplied == 0) {, +		if (removeApplied != removes.size()) {, +			throw new JadxRuntimeException("Some finally instructions failed to remove: ", +					+ removes.stream().filter(n -> !n.isApplied()).map(BlocksRemoveInfo::toString).collect(Collectors.joining(",")), +			);, +++ b/jadx-core/src/main/java/jadx/core/dex/nodes/BlockNode.java, +import jadx.core.utils.exceptions.JadxRuntimeException;, +		if (domFrontier == null) {, +			throw new JadxRuntimeException("Dominance frontier not set for block: " + this);, +		}, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/BlockFinallyExtract.java, +import java.util.stream.Collectors;, +		int removeApplied = 0;, +			if (applyRemove(mth, removeInfo)) {, +				removeApplied++;, +				removeInfo.setApplied(true);, +			}, +		}, +		if (removeApplied == 0) {, +		if (removeApplied != removes.size()) {, +			throw new JadxRuntimeException("Some finally instructions failed to remove: ", +					+ removes.stream().filter(n -> !n.isApplied()).map(BlocksRemoveInfo::toString).collect(Collectors.joining(",")), +			);, +++ b/jadx-core/src/main/java/jadx/core/dex/visitors/blocksmaker/helpers/BlocksRemoveInfo.java, +	private boolean applied;, +, +	public boolean isApplied() {, +		return applied;, +	}, +, +	public void setApplied(boolean applied) {, +		this.applied = applied;, +	}, +, +		return "BRI{start: " + start, +				+ ", processed: " + processed, +				+ ", split: " + startSplitIndex + "-" + endSplitIndex, +				+ "}";]