[+++ b/src/main/java/jadx/dex/visitors/regions/RegionMaker.java, +, +		// this can help if loop have several exits (after using 'break' or 'return' in loop), +		BlockNode nextStart = BlockUtils.getNextBlock(loopStart);, +		if (nextStart != null && exitBlocksSet.remove(nextStart)), +			exitBlocks.add(nextStart);, +		if (exitBlocksSet.remove(loop.getEnd())), +		if (exitBlocksSet.remove(loopStart)), +			BlockNode next = BlockUtils.getNextBlock(loop.getEnd());, +			if (!RegionUtils.isRegionContainsBlock(body, next)), +				return next;, +			else, +				return null;, +		if (BlockUtils.isBackEdge(block, out)) {, +			out = null;, +		}, +, +++ b/src/main/java/jadx/dex/visitors/regions/RegionMaker.java, +, +		// this can help if loop have several exits (after using 'break' or 'return' in loop), +		BlockNode nextStart = BlockUtils.getNextBlock(loopStart);, +		if (nextStart != null && exitBlocksSet.remove(nextStart)), +			exitBlocks.add(nextStart);, +		if (exitBlocksSet.remove(loop.getEnd())), +		if (exitBlocksSet.remove(loopStart)), +			BlockNode next = BlockUtils.getNextBlock(loop.getEnd());, +			if (!RegionUtils.isRegionContainsBlock(body, next)), +				return next;, +			else, +				return null;, +		if (BlockUtils.isBackEdge(block, out)) {, +			out = null;, +		}, +, +++ b/src/main/java/jadx/utils/BlockUtils.java, +	public static boolean isBackEdge(BlockNode from, BlockNode to) {, +		if (from.getCleanSuccessors().contains(to)), +			return false; // already checked, +, +		if (!from.getSuccessors().contains(to)), +			return false; // not even successor, +, +		return true;, +	}, +, +++ b/src/main/java/jadx/dex/visitors/regions/RegionMaker.java, +, +		// this can help if loop have several exits (after using 'break' or 'return' in loop), +		BlockNode nextStart = BlockUtils.getNextBlock(loopStart);, +		if (nextStart != null && exitBlocksSet.remove(nextStart)), +			exitBlocks.add(nextStart);, +		if (exitBlocksSet.remove(loop.getEnd())), +		if (exitBlocksSet.remove(loopStart)), +			BlockNode next = BlockUtils.getNextBlock(loop.getEnd());, +			if (!RegionUtils.isRegionContainsBlock(body, next)), +				return next;, +			else, +				return null;, +		if (BlockUtils.isBackEdge(block, out)) {, +			out = null;, +		}, +, +++ b/src/main/java/jadx/utils/BlockUtils.java, +	public static boolean isBackEdge(BlockNode from, BlockNode to) {, +		if (from.getCleanSuccessors().contains(to)), +			return false; // already checked, +, +		if (!from.getSuccessors().contains(to)), +			return false; // not even successor, +, +		return true;, +	}, +, +++ b/src/samples/java/jadx/samples/TestCF3.java, +	private int exc() throws Exception {, +		return 1;, +	}, +, +	public String testReturnInLoop(List<String> list) {, +		Iterator<String> it = list.iterator();, +		while (it.hasNext()) {, +			String ver = it.next();, +			if (ver != null), +				return ver;, +		}, +		return "error";, +	}, +, +	public String testReturnInLoop2(List<String> list) {, +		try {, +			Iterator<String> it = list.iterator();, +			while (it.hasNext()) {, +				String ver = it.next();, +				exc();, +				if (ver != null), +					return ver;, +			}, +		} catch (Exception e) {, +			setEnabled(false);, +		}]