[+++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/IntegerFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/IntegerFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/LongFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/IntegerFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/LongFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.TermQuery;, +    public final Query termQuery(Object value, @Nullable QueryParseContext context) {, +        TermQuery scoringQuery = new TermQuery(new Term(names.indexName(), indexedValueForSearch(value)));, +        return new ConstantScoreQuery(scoringQuery);, +    public final Filter termFilter(Object value, @Nullable QueryParseContext context) {, +        // Made this method final because previously many subclasses duplicated, +        // the same code, returning a NumericRangeFilter, which should be less, +        // efficient than super's default impl of a single TermFilter., +        return super.termFilter(value, context);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/IntegerFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/LongFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.TermQuery;, +    public final Query termQuery(Object value, @Nullable QueryParseContext context) {, +        TermQuery scoringQuery = new TermQuery(new Term(names.indexName(), indexedValueForSearch(value)));, +        return new ConstantScoreQuery(scoringQuery);, +    public final Filter termFilter(Object value, @Nullable QueryParseContext context) {, +        // Made this method final because previously many subclasses duplicated, +        // the same code, returning a NumericRangeFilter, which should be less, +        // efficient than super's default impl of a single TermFilter., +        return super.termFilter(value, context);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ShortFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +    public Filter rangeFilter(Object lowerTerm, Object upperTerm, boolean includeLower, boolean includeUpper,, +            @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/IntegerFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/LongFieldMapper.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.TermQuery;, +    public final Query termQuery(Object value, @Nullable QueryParseContext context) {, +        TermQuery scoringQuery = new TermQuery(new Term(names.indexName(), indexedValueForSearch(value)));, +        return new ConstantScoreQuery(scoringQuery);, +    public final Filter termFilter(Object value, @Nullable QueryParseContext context) {, +        // Made this method final because previously many subclasses duplicated, +        // the same code, returning a NumericRangeFilter, which should be less, +        // efficient than super's default impl of a single TermFilter., +        return super.termFilter(value, context);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ShortFieldMapper.java, +++ b/src/test/java/org/elasticsearch/index/query/SimpleIndexQueryParserTests.java, +        TermQuery fieldQuery = unwrapTermQuery(parsedQuery, true);, +        assertThat(fieldQuery.getTerm().bytes(), equalTo(indexedValueForSearch(34l)));, +        TermQuery fieldQuery = unwrapTermQuery(queryParser.parse(query).query(), true);, +        assertThat(fieldQuery.getTerm().bytes(), equalTo(indexedValueForSearch(34l)));]