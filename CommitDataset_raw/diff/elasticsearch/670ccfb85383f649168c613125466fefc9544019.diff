[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/user/RestGetUserPrivilegesAction.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.xpack.core.security.user.User;, +        final User user = securityContext.getUser();, +        if (user == null) {, +            return restChannel -> { throw new ElasticsearchSecurityException("there is no authenticated user"); };, +        }, +        final String username = user.principal();, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/user/RestGetUserPrivilegesAction.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.xpack.core.security.user.User;, +        final User user = securityContext.getUser();, +        if (user == null) {, +            return restChannel -> { throw new ElasticsearchSecurityException("there is no authenticated user"); };, +        }, +        final String username = user.principal();, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/user/RestHasPrivilegesAction.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.xpack.core.security.user.User;, +        if (username == null) {, +            return restChannel -> { throw new ElasticsearchSecurityException("there is no authenticated user"); };, +        }, +        final User user = securityContext.getUser();, +        if (user == null) {, +            return null;, +        }, +        return user.principal();, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/user/RestGetUserPrivilegesAction.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.xpack.core.security.user.User;, +        final User user = securityContext.getUser();, +        if (user == null) {, +            return restChannel -> { throw new ElasticsearchSecurityException("there is no authenticated user"); };, +        }, +        final String username = user.principal();, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/user/RestHasPrivilegesAction.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.xpack.core.security.user.User;, +        if (username == null) {, +            return restChannel -> { throw new ElasticsearchSecurityException("there is no authenticated user"); };, +        }, +        final User user = securityContext.getUser();, +        if (user == null) {, +            return null;, +        }, +        return user.principal();, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/user/RestGetUserPrivilegesActionTests.java, +import org.elasticsearch.client.node.NodeClient;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.license.XPackLicenseState;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.rest.FakeRestChannel;, +import org.elasticsearch.test.rest.FakeRestRequest;, +import org.elasticsearch.xpack.core.security.SecurityContext;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.notNullValue;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +    public void testBasicLicense() throws Exception {, +        final XPackLicenseState licenseState = mock(XPackLicenseState.class);, +        final RestGetUserPrivilegesAction action = new RestGetUserPrivilegesAction(Settings.EMPTY, mock(RestController.class),, +            mock(SecurityContext.class), licenseState);, +        when(licenseState.isSecurityAvailable()).thenReturn(false);, +        final FakeRestRequest request = new FakeRestRequest();, +        final FakeRestChannel channel = new FakeRestChannel(request, true, 1);, +        action.handleRequest(request, channel, mock(NodeClient.class));, +        assertThat(channel.capturedResponse(), notNullValue());, +        assertThat(channel.capturedResponse().status(), equalTo(RestStatus.FORBIDDEN));, +        assertThat(channel.capturedResponse().content().utf8ToString(), containsString("current license is non-compliant for [security]"));, +    }, +, +        assertThat(json, equalTo("{" +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/user/RestGetUserPrivilegesAction.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.xpack.core.security.user.User;, +        final User user = securityContext.getUser();, +        if (user == null) {, +            return restChannel -> { throw new ElasticsearchSecurityException("there is no authenticated user"); };, +        }, +        final String username = user.principal();, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/user/RestHasPrivilegesAction.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.xpack.core.security.user.User;, +        if (username == null) {, +            return restChannel -> { throw new ElasticsearchSecurityException("there is no authenticated user"); };, +        }, +        final User user = securityContext.getUser();, +        if (user == null) {, +            return null;, +        }, +        return user.principal();, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/rest/action/user/RestGetUserPrivilegesActionTests.java, +import org.elasticsearch.client.node.NodeClient;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.license.XPackLicenseState;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.rest.FakeRestChannel;]