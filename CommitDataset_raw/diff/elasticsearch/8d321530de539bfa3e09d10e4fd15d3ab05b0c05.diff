[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/command/CancelAllocationCommand.java, +                            if (fromShardRouting.shardId().equals(shardRouting.shardId()) && fromShardRouting.state() == RELOCATING) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/command/CancelAllocationCommand.java, +                            if (fromShardRouting.shardId().equals(shardRouting.shardId()) && fromShardRouting.state() == RELOCATING) {, +++ b/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationCommandsTests.java, +import static org.elasticsearch.cluster.routing.ShardRoutingState.RELOCATING;, +        logger.info("--> move the replica shard");, +        rerouteResult = allocation.reroute(clusterState, new AllocationCommands(new MoveAllocationCommand(new ShardId("test", 0), "node2", "node3")));, +        clusterState = ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();, +        assertThat(clusterState.routingNodes().node("node1").size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node1").shardsWithState(STARTED).size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node2").size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node2").shardsWithState(RELOCATING).size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node3").size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node3").shardsWithState(INITIALIZING).size(), equalTo(1));, +, +        logger.info("--> cancel the move of the replica shard");, +        rerouteResult = allocation.reroute(clusterState, new AllocationCommands(new CancelAllocationCommand(new ShardId("test", 0), "node3", false)));, +        clusterState = ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();, +        assertThat(clusterState.routingNodes().node("node1").size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node1").shardsWithState(STARTED).size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node2").size(), equalTo(1));, +        assertThat(clusterState.routingNodes().node("node2").shardsWithState(STARTED).size(), equalTo(1));, +, +]