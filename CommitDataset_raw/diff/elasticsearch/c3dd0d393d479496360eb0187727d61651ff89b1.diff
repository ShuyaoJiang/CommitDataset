[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/FunctionRegistry.java, +import org.elasticsearch.xpack.sql.util.Check;, +        addToMap(def(Avg.class, Avg::new, "AVG"),, +                def(Count.class, Count::new, "COUNT"),, +                def(Max.class, Max::new, "MAX"),, +                def(Min.class, Min::new, "MIN"),, +                def(Sum.class, Sum::new, "SUM"));, +        addToMap(def(StddevPop.class, StddevPop::new, "STDDEV_POP"),, +                def(VarPop.class, VarPop::new,"VAR_POP"),, +                def(Percentile.class, Percentile::new, "PERCENTILE"),, +                def(PercentileRank.class, PercentileRank::new, "PERCENTILE_RANK"),, +                def(SumOfSquares.class, SumOfSquares::new, "SUM_OF_SQUARES"),, +                def(Skewness.class, Skewness::new, "SKEWNESS"),, +                def(Kurtosis.class, Kurtosis::new, "KURTOSIS"));, +        addToMap(def(Coalesce.class, Coalesce::new, "COALESCE"),, +                 def(IfNull.class, IfNull::new, "IFNULL", "ISNULL", "NVL"),, +                 def(NullIf.class, NullIf::new, "NULLIF"),, +                 def(Greatest.class, Greatest::new, "GREATEST"),, +                 def(Least.class, Least::new, "LEAST"));, +        addToMap(def(DayName.class, DayName::new, "DAY_NAME", "DAYNAME"),, +                def(DayOfMonth.class, DayOfMonth::new, "DAY_OF_MONTH", "DAYOFMONTH", "DAY", "DOM"),, +                def(DayOfWeek.class, DayOfWeek::new, "DAY_OF_WEEK", "DAYOFWEEK", "DOW"),, +                def(DayOfYear.class, DayOfYear::new, "DAY_OF_YEAR", "DAYOFYEAR", "DOY"),, +                def(HourOfDay.class, HourOfDay::new, "HOUR_OF_DAY", "HOUR"),, +                def(MinuteOfDay.class, MinuteOfDay::new, "MINUTE_OF_DAY"),, +                def(MinuteOfHour.class, MinuteOfHour::new, "MINUTE_OF_HOUR", "MINUTE"),, +                def(MonthName.class, MonthName::new, "MONTH_NAME", "MONTHNAME"),, +                def(MonthOfYear.class, MonthOfYear::new, "MONTH_OF_YEAR", "MONTH"),, +                def(SecondOfMinute.class, SecondOfMinute::new, "SECOND_OF_MINUTE", "SECOND"),, +                def(Quarter.class, Quarter::new, "QUARTER"),, +                def(Year.class, Year::new, "YEAR"),, +                def(WeekOfYear.class, WeekOfYear::new, "WEEK_OF_YEAR", "WEEK"));, +        addToMap(def(Abs.class, Abs::new, "ABS"),, +                def(ACos.class, ACos::new, "ACOS"),, +                def(ASin.class, ASin::new, "ASIN"),, +                def(ATan.class, ATan::new, "ATAN"),, +                def(ATan2.class, ATan2::new, "ATAN2"),, +                def(Cbrt.class, Cbrt::new, "CBRT"),, +                def(Ceil.class, Ceil::new, "CEIL", "CEILING"),, +                def(Cos.class, Cos::new, "COS"),, +                def(Cosh.class, Cosh::new, "COSH"),, +                def(Cot.class, Cot::new, "COT"),, +                def(Degrees.class, Degrees::new, "DEGREES"),, +                def(E.class, E::new, "E"),, +                def(Exp.class, Exp::new, "EXP"),, +                def(Expm1.class, Expm1::new, "EXPM1"),, +                def(Floor.class, Floor::new, "FLOOR"),, +                def(Log.class, Log::new, "LOG"),, +                def(Log10.class, Log10::new, "LOG10"),, +                def(Mod.class, Mod::new, "MOD"),, +                def(Pi.class, Pi::new, "PI"),, +                def(Power.class, Power::new, "POWER"),, +                def(Radians.class, Radians::new, "RADIANS"),, +                def(Random.class, Random::new, "RANDOM", "RAND"),, +                def(Round.class, Round::new, "ROUND"),, +                def(Sign.class, Sign::new, "SIGN", "SIGNUM"),, +                def(Sin.class, Sin::new, "SIN"),, +                def(Sinh.class, Sinh::new, "SINH"),, +                def(Sqrt.class, Sqrt::new, "SQRT"),, +                def(Tan.class, Tan::new, "TAN"),, +                def(Truncate.class, Truncate::new, "TRUNCATE"));, +        addToMap(def(Ascii.class, Ascii::new, "ASCII"),, +                def(BitLength.class, BitLength::new, "BIT_LENGTH"),, +                def(Char.class, Char::new, "CHAR"),, +                def(CharLength.class, CharLength::new, "CHAR_LENGTH", "CHARACTER_LENGTH"),, +                def(Concat.class, Concat::new, "CONCAT"),, +                def(Insert.class, Insert::new, "INSERT"),, +                def(LCase.class, LCase::new, "LCASE"),, +                def(Left.class, Left::new, "LEFT"),, +                def(Length.class, Length::new, "LENGTH"),, +                def(Locate.class, Locate::new, "LOCATE"),, +                def(LTrim.class, LTrim::new, "LTRIM"),, +                def(OctetLength.class, OctetLength::new, "OCTET_LENGTH"),, +                def(Position.class, Position::new, "POSITION"),, +                def(Repeat.class, Repeat::new, "REPEAT"),, +                def(Replace.class, Replace::new, "REPLACE"),, +                def(Right.class, Right::new, "RIGHT"),, +                def(RTrim.class, RTrim::new, "RTRIM"),, +                def(Space.class, Space::new, "SPACE"),, +                def(Substring.class, Substring::new, "SUBSTRING"),, +                def(UCase.class, UCase::new, "UCASE"));, +        addToMap(def(Cast.class, Cast::new, "CAST", "CONVERT"));, +        addToMap(def(Database.class, Database::new, "DATABASE"),, +                def(User.class, User::new, "USER"));, +        addToMap(def(Score.class, Score::new, "SCORE"));, +        Pattern p = Strings.hasText(pattern) ? Pattern.compile(pattern.toUpperCase(Locale.ROOT)) : null;, +            java.util.function.Function<Location, T> ctorRef, String... names) {, +        return def(function, builder, false, names);, +            ConfigurationAwareFunctionBuilder<T> ctorRef, String... names) {, +        return def(function, builder, false, names);, +            BiFunction<Location, Expression, T> ctorRef, String... names) {, +        return def(function, builder, false, names);, +            MultiFunctionBuilder<T> ctorRef, String... names) {, +        return def(function, builder, false, names);, +            DistinctAwareUnaryFunctionBuilder<T> ctorRef, String... names) {, +        return def(function, builder, false, names);, +            DatetimeUnaryFunctionBuilder<T> ctorRef, String... names) {, +        return def(function, builder, true, names);, +            BinaryFunctionBuilder<T> ctorRef, String... names) {, +        return def(function, builder, false, names);]