[+++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.fetch.SearchExtParser;, +    private final Map<String, SearchExtParser> fetchPhaseParsers;, +                        SearchExtParser searchExtParser = this.fetchPhaseParsers.get(currentFieldName);, +                        if (searchExtParser == null) {, +                            Object fetchSubPhaseBuilder = searchExtParser.parse(extParser);, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.fetch.SearchExtParser;, +    private final Map<String, SearchExtParser> fetchPhaseParsers;, +                        SearchExtParser searchExtParser = this.fetchPhaseParsers.get(currentFieldName);, +                        if (searchExtParser == null) {, +                            Object fetchSubPhaseBuilder = searchExtParser.parse(extParser);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +    public Map<String, ? extends SearchExtParser> parsers() {, +        Map<String, SearchExtParser> parsers = new HashMap<>();, +            if (fetchSubPhase.parser() != null) {, +                parsers.put(fetchSubPhase.parser().getName(), fetchSubPhase.parser());, +            }, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.fetch.SearchExtParser;, +    private final Map<String, SearchExtParser> fetchPhaseParsers;, +                        SearchExtParser searchExtParser = this.fetchPhaseParsers.get(currentFieldName);, +                        if (searchExtParser == null) {, +                            Object fetchSubPhaseBuilder = searchExtParser.parse(extParser);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +    public Map<String, ? extends SearchExtParser> parsers() {, +        Map<String, SearchExtParser> parsers = new HashMap<>();, +            if (fetchSubPhase.parser() != null) {, +                parsers.put(fetchSubPhase.parser().getName(), fetchSubPhase.parser());, +            }, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchSubPhase.java, +    /**, +     * Returns the parser for the optional config to be put in the ext section of the search request, +     */, +    default SearchExtParser parser() {, +        return null;, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.fetch.SearchExtParser;, +    private final Map<String, SearchExtParser> fetchPhaseParsers;, +                        SearchExtParser searchExtParser = this.fetchPhaseParsers.get(currentFieldName);, +                        if (searchExtParser == null) {, +                            Object fetchSubPhaseBuilder = searchExtParser.parse(extParser);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +    public Map<String, ? extends SearchExtParser> parsers() {, +        Map<String, SearchExtParser> parsers = new HashMap<>();, +            if (fetchSubPhase.parser() != null) {, +                parsers.put(fetchSubPhase.parser().getName(), fetchSubPhase.parser());, +            }, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchSubPhase.java, +    /**, +     * Returns the parser for the optional config to be put in the ext section of the search request, +     */, +    default SearchExtParser parser() {, +        return null;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.elasticsearch.search.fetch.SearchExtParser;, +    private final Map<String, SearchExtParser> fetchPhaseParsers;, +                        SearchExtParser searchExtParser = this.fetchPhaseParsers.get(currentFieldName);, +                        if (searchExtParser == null) {, +                            Object fetchSubPhaseBuilder = searchExtParser.parse(extParser);, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +    public Map<String, ? extends SearchExtParser> parsers() {, +        Map<String, SearchExtParser> parsers = new HashMap<>();, +            if (fetchSubPhase.parser() != null) {, +                parsers.put(fetchSubPhase.parser().getName(), fetchSubPhase.parser());, +            }, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchSubPhase.java, +    /**, +     * Returns the parser for the optional config to be put in the ext section of the search request, +     */, +    default SearchExtParser parser() {, +        return null;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/fetch/SearchExtParser.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.fetch;, +, +import org.elasticsearch.common.xcontent.XContentParser;, +, +/**, + * Parser for the ext section of a search request, which can hold custom fetch sub phases config]