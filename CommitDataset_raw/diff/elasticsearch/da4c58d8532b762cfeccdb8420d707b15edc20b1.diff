[+++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +import java.io.IOException;, +import java.util.*;, +import java.util.Map.Entry;, +, +     * Clear the candidate generators., +     */, +    public PhraseSuggestionBuilder clearCandidateGenerators() {, +        this.generators.clear();, +        return this;, +    }, +    , +    /**, +        if ((preTag == null) != (postTag == null)) {, +            throw new ElasticSearchIllegalArgumentException("Pre and post tag must both be null or both not be null.");, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +import java.io.IOException;, +import java.util.*;, +import java.util.Map.Entry;, +, +     * Clear the candidate generators., +     */, +    public PhraseSuggestionBuilder clearCandidateGenerators() {, +        this.generators.clear();, +        return this;, +    }, +    , +    /**, +        if ((preTag == null) != (postTag == null)) {, +            throw new ElasticSearchIllegalArgumentException("Pre and post tag must both be null or both not be null.");, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +    /**, +     * Assert suggestion returns exactly the provided text., +     */, +    public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {, +        assertSuggestion(searchSuggest, entry, key, text.length, text);, +    }, +, +    /**, +     * Assert suggestion returns size suggestions and the first are the provided text., +     */, +    public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {, +        assertSuggestionSize(searchSuggest, entry, size, key);, +        for( int i = 0; i < text.length; i++) {, +            assertSuggestion(searchSuggest, entry, i, key, text[i]);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestionBuilder.java, +import java.io.IOException;, +import java.util.*;, +import java.util.Map.Entry;, +, +     * Clear the candidate generators., +     */, +    public PhraseSuggestionBuilder clearCandidateGenerators() {, +        this.generators.clear();, +        return this;, +    }, +    , +    /**, +        if ((preTag == null) != (postTag == null)) {, +            throw new ElasticSearchIllegalArgumentException("Pre and post tag must both be null or both not be null.");, +++ b/src/test/java/org/elasticsearch/test/hamcrest/ElasticsearchAssertions.java, +    /**, +     * Assert suggestion returns exactly the provided text., +     */, +    public static void assertSuggestion(Suggest searchSuggest, int entry, String key, String... text) {, +        assertSuggestion(searchSuggest, entry, key, text.length, text);, +    }, +, +    /**, +     * Assert suggestion returns size suggestions and the first are the provided text., +     */, +    public static void assertSuggestion(Suggest searchSuggest, int entry, String key, int size, String... text) {, +        assertSuggestionSize(searchSuggest, entry, size, key);, +        for( int i = 0; i < text.length; i++) {, +            assertSuggestion(searchSuggest, entry, i, key, text[i]);, +        }, +    }, +, +++ b/src/test/java/org/elasticsearch/test/integration/AbstractSharedClusterTest.java, +        mappingBuilder.startObject().startObject(type);, +            if (!objects[0].toString().equals("_all")) {, +                continue;, +            }, +            mappingBuilder.startObject("_all");, +            for (int i = 1; i < objects.length; i++) {, +                String name = objects[i++].toString();, +                Object value = objects[i];, +                mappingBuilder.field(name, value);, +            }, +            mappingBuilder.endObject();, +        }, +        mappingBuilder.startObject("properties");, +        for (Object[] objects : mapping) {, +            if (objects[0].toString().equals("_all")) {, +                continue;, +            }, +    protected IndexResponse index(String index, String type, String id, Map<String, ? extends Object> source) {]