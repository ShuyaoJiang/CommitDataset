[+++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +import org.elasticsearch.script.*;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +import java.util.*;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.not;, +                new ScriptModule(settings) {, +                    @Override, +                    protected void configure() {, +                        Settings settings = Settings.builder(), +                                .put("path.home", createTempDir()), +                                // no file watching, so we don't need a ResourceWatcherService, +                                .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING, false), +                                .build();, +                        MockScriptEngine mockScriptEngine = new MockScriptEngine();, +                        Multibinder<ScriptEngineService> multibinder = Multibinder.newSetBinder(binder(), ScriptEngineService.class);, +                        multibinder.addBinding().toInstance(mockScriptEngine);, +                        try {, +                            Class.forName("com.github.mustachejava.Mustache");, +                        } catch(ClassNotFoundException e) {, +                            throw new IllegalStateException("error while loading mustache", e);, +                        }, +                        MustacheScriptEngineService mustacheScriptEngineService = new MustacheScriptEngineService(settings);, +                        Set<ScriptEngineService> engines = new HashSet<>();, +                        engines.add(mockScriptEngine);, +                        engines.add(mustacheScriptEngineService);, +                        List<ScriptContext.Plugin> customContexts = new ArrayList<>();, +                        bind(ScriptContextRegistry.class).toInstance(new ScriptContextRegistry(customContexts));, +                        try {, +                            ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null, new ScriptContextRegistry(customContexts));, +                            bind(ScriptService.class).toInstance(scriptService);, +                        } catch(IOException e) {, +                            throw new IllegalStateException("error while binding ScriptService", e);, +                        }, +, +, +                    }, +                },, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +import org.elasticsearch.script.*;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +import java.util.*;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.not;, +                new ScriptModule(settings) {, +                    @Override, +                    protected void configure() {, +                        Settings settings = Settings.builder(), +                                .put("path.home", createTempDir()), +                                // no file watching, so we don't need a ResourceWatcherService, +                                .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING, false), +                                .build();, +                        MockScriptEngine mockScriptEngine = new MockScriptEngine();, +                        Multibinder<ScriptEngineService> multibinder = Multibinder.newSetBinder(binder(), ScriptEngineService.class);, +                        multibinder.addBinding().toInstance(mockScriptEngine);, +                        try {, +                            Class.forName("com.github.mustachejava.Mustache");, +                        } catch(ClassNotFoundException e) {, +                            throw new IllegalStateException("error while loading mustache", e);, +                        }, +                        MustacheScriptEngineService mustacheScriptEngineService = new MustacheScriptEngineService(settings);, +                        Set<ScriptEngineService> engines = new HashSet<>();, +                        engines.add(mockScriptEngine);, +                        engines.add(mustacheScriptEngineService);, +                        List<ScriptContext.Plugin> customContexts = new ArrayList<>();, +                        bind(ScriptContextRegistry.class).toInstance(new ScriptContextRegistry(customContexts));, +                        try {, +                            ScriptService scriptService = new ScriptService(settings, new Environment(settings), engines, null, new ScriptContextRegistry(customContexts));, +                            bind(ScriptService.class).toInstance(scriptService);, +                        } catch(IOException e) {, +                            throw new IllegalStateException("error while binding ScriptService", e);, +                        }, +, +, +                    }, +                },, +++ b/core/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java, +import org.elasticsearch.script.MockScriptEngine;, +import java.util.Collections;, +        String script = "5";, +        Map<String, Object> params = Collections.emptyMap();, +        return new ScriptQueryBuilder(new Script(script, ScriptType.INLINE, MockScriptEngine.NAME, params));, +++ b/core/src/test/java/org/elasticsearch/index/query/AbstractQueryTestCase.java, +import org.elasticsearch.script.*;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +import java.util.*;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.not;, +                new ScriptModule(settings) {, +                    @Override, +                    protected void configure() {, +                        Settings settings = Settings.builder(), +                                .put("path.home", createTempDir()), +                                // no file watching, so we don't need a ResourceWatcherService, +                                .put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING, false), +                                .build();, +                        MockScriptEngine mockScriptEngine = new MockScriptEngine();, +                        Multibinder<ScriptEngineService> multibinder = Multibinder.newSetBinder(binder(), ScriptEngineService.class);, +                        multibinder.addBinding().toInstance(mockScriptEngine);, +                        try {]