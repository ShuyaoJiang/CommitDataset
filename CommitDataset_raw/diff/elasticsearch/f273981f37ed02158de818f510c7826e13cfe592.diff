[+++ b/client/transport/build.gradle, +  testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}", +++ b/client/transport/build.gradle, +  testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}", +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +import io.netty.util.ThreadDeathWatcher;, +import io.netty.util.concurrent.GlobalEventExecutor;, +import org.apache.lucene.util.IOUtils;, +import java.util.concurrent.TimeUnit;, +            return Settings.builder().put("netty.assert.buglevel", true), +    @Override, +    public void close() {, +        super.close();, +        if (NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings) == false, +            || NetworkModule.TRANSPORT_TYPE_SETTING.get(settings).equals(Netty4Plugin.NETTY_TRANSPORT_NAME)) {, +            try {, +                GlobalEventExecutor.INSTANCE.awaitInactivity(5, TimeUnit.SECONDS);, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +            try {, +                ThreadDeathWatcher.awaitInactivity(5, TimeUnit.SECONDS);, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +        }, +    }, +, +++ b/client/transport/build.gradle, +  testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}", +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +import io.netty.util.ThreadDeathWatcher;, +import io.netty.util.concurrent.GlobalEventExecutor;, +import org.apache.lucene.util.IOUtils;, +import java.util.concurrent.TimeUnit;, +            return Settings.builder().put("netty.assert.buglevel", true), +    @Override, +    public void close() {, +        super.close();, +        if (NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings) == false, +            || NetworkModule.TRANSPORT_TYPE_SETTING.get(settings).equals(Netty4Plugin.NETTY_TRANSPORT_NAME)) {, +            try {, +                GlobalEventExecutor.INSTANCE.awaitInactivity(5, TimeUnit.SECONDS);, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +            try {, +                ThreadDeathWatcher.awaitInactivity(5, TimeUnit.SECONDS);, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +        }, +    }, +, +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty4Plugin;, +import static org.junit.Assert.*;, +            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));, +                assertTrue("Expected message to start with [plugin already exists: ] but was instead [" + ex.getMessage() + "]",, +                        ex.getMessage().startsWith("plugin already exists: "));, +++ b/client/transport/build.gradle, +  testCompile "org.hamcrest:hamcrest-all:${versions.hamcrest}", +++ b/client/transport/src/main/java/org/elasticsearch/transport/client/PreBuiltTransportClient.java, +import io.netty.util.ThreadDeathWatcher;, +import io.netty.util.concurrent.GlobalEventExecutor;, +import org.apache.lucene.util.IOUtils;, +import java.util.concurrent.TimeUnit;, +            return Settings.builder().put("netty.assert.buglevel", true), +    @Override, +    public void close() {, +        super.close();, +        if (NetworkModule.TRANSPORT_TYPE_SETTING.exists(settings) == false, +            || NetworkModule.TRANSPORT_TYPE_SETTING.get(settings).equals(Netty4Plugin.NETTY_TRANSPORT_NAME)) {, +            try {, +                GlobalEventExecutor.INSTANCE.awaitInactivity(5, TimeUnit.SECONDS);, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +            try {, +                ThreadDeathWatcher.awaitInactivity(5, TimeUnit.SECONDS);, +            } catch (InterruptedException e) {, +                Thread.currentThread().interrupt();, +            }, +        }, +    }, +, +++ b/client/transport/src/test/java/org/elasticsearch/transport/client/PreBuiltTransportClientTests.java, +import org.elasticsearch.transport.Netty4Plugin;, +import static org.junit.Assert.*;, +            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +            assertEquals(Netty4Plugin.NETTY_TRANSPORT_NAME, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));, +                assertTrue("Expected message to start with [plugin already exists: ] but was instead [" + ex.getMessage() + "]",, +                        ex.getMessage().startsWith("plugin already exists: "));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +    public static final String HTTP_TYPE_DEFAULT_KEY = "http.type.default";, +    public static final String TRANSPORT_TYPE_DEFAULT_KEY = "transport.type.default";, +    public static final Setting<String> TRANSPORT_DEFAULT_TYPE_SETTING = Setting.simpleString(TRANSPORT_TYPE_DEFAULT_KEY,, +            Property.NodeScope);, +    public static final Setting<String> HTTP_DEFAULT_TYPE_SETTING = Setting.simpleString(HTTP_TYPE_DEFAULT_KEY, Property.NodeScope);]