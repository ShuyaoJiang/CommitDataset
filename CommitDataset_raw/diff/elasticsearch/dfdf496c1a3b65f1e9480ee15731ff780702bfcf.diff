[+++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.CheckedRunnable;, +    public abstract IndexCommitRef acquireIndexCommit(boolean flushFirst) throws EngineException;, +    public static class IndexCommitRef implements Closeable {, +        private final AtomicBoolean closed = new AtomicBoolean();, +        private final CheckedRunnable<IOException> onClose;, +        private final IndexCommit indexCommit;, +, +        IndexCommitRef(SnapshotDeletionPolicy deletionPolicy) throws IOException {, +            indexCommit = deletionPolicy.snapshot();, +            onClose = () -> deletionPolicy.release(indexCommit);, +        }, +, +        @Override, +        public void close() throws IOException {, +            if (closed.compareAndSet(false, true)) {, +                onClose.run();, +            }, +        }, +, +        public IndexCommit getIndexCommit() {, +            return indexCommit;, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.CheckedRunnable;, +    public abstract IndexCommitRef acquireIndexCommit(boolean flushFirst) throws EngineException;, +    public static class IndexCommitRef implements Closeable {, +        private final AtomicBoolean closed = new AtomicBoolean();, +        private final CheckedRunnable<IOException> onClose;, +        private final IndexCommit indexCommit;, +, +        IndexCommitRef(SnapshotDeletionPolicy deletionPolicy) throws IOException {, +            indexCommit = deletionPolicy.snapshot();, +            onClose = () -> deletionPolicy.release(indexCommit);, +        }, +, +        @Override, +        public void close() throws IOException {, +            if (closed.compareAndSet(false, true)) {, +                onClose.run();, +            }, +        }, +, +        public IndexCommit getIndexCommit() {, +            return indexCommit;, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +                        IndexSettings indexSettings, Engine.Warmer warmer, Store store,, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.CheckedRunnable;, +    public abstract IndexCommitRef acquireIndexCommit(boolean flushFirst) throws EngineException;, +    public static class IndexCommitRef implements Closeable {, +        private final AtomicBoolean closed = new AtomicBoolean();, +        private final CheckedRunnable<IOException> onClose;, +        private final IndexCommit indexCommit;, +, +        IndexCommitRef(SnapshotDeletionPolicy deletionPolicy) throws IOException {, +            indexCommit = deletionPolicy.snapshot();, +            onClose = () -> deletionPolicy.release(indexCommit);, +        }, +, +        @Override, +        public void close() throws IOException {, +            if (closed.compareAndSet(false, true)) {, +                onClose.run();, +            }, +        }, +, +        public IndexCommit getIndexCommit() {, +            return indexCommit;, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/engine/EngineConfig.java, +                        IndexSettings indexSettings, Engine.Warmer warmer, Store store,, +++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy;, +import org.apache.lucene.index.SnapshotDeletionPolicy;, +    private final SnapshotDeletionPolicy deletionPolicy;, +, +, +        deletionPolicy = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());, +    public IndexCommitRef acquireIndexCommit(final boolean flushFirst) throws EngineException {, +            return new IndexCommitRef(deletionPolicy);, +++ b/core/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.common.CheckedRunnable;, +    public abstract IndexCommitRef acquireIndexCommit(boolean flushFirst) throws EngineException;, +    public static class IndexCommitRef implements Closeable {, +        private final AtomicBoolean closed = new AtomicBoolean();, +        private final CheckedRunnable<IOException> onClose;, +        private final IndexCommit indexCommit;, +, +        IndexCommitRef(SnapshotDeletionPolicy deletionPolicy) throws IOException {, +            indexCommit = deletionPolicy.snapshot();, +            onClose = () -> deletionPolicy.release(indexCommit);, +        }]