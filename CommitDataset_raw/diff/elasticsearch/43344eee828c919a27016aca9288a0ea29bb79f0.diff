[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        try {, +            actual.clazz.asSubclass(expected.clazz);, +, +            return cast;, +        } catch (final ClassCastException cce0) {, +            try {, +                if (explicit) {, +                    expected.clazz.asSubclass(actual.clazz);, +, +                    throw new ClassCastException(, +                        "Error" + location + ": Cannot cast from [" + actual.name + "] to [" + expected.name + "].");, +                }, +            } catch (final ClassCastException cce1) {, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        try {, +            actual.clazz.asSubclass(expected.clazz);, +, +            return cast;, +        } catch (final ClassCastException cce0) {, +            try {, +                if (explicit) {, +                    expected.clazz.asSubclass(actual.clazz);, +, +                    throw new ClassCastException(, +                        "Error" + location + ": Cannot cast from [" + actual.name + "] to [" + expected.name + "].");, +                }, +            } catch (final ClassCastException cce1) {, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +                try {, +                    genargs[count].clazz.asSubclass(args[count].clazz);, +                } catch (final ClassCastException exception) {, +            try {, +                genrtn.clazz.asSubclass(rtn.clazz);, +            } catch (final ClassCastException exception) {, +                try {, +                    genargs[count].clazz.asSubclass(args[count].clazz);, +                } catch (final ClassCastException exception) {, +            try {, +                generic.clazz.asSubclass(type.clazz);, +            } catch (final ClassCastException exception) {, +            try {, +                owner.clazz.asSubclass(child.clazz);, +            } catch (final ClassCastException exception) {, +            try {, +                from.clazz.asSubclass(argument.clazz);, +            } catch (final ClassCastException cce0) {, +                try {, +                    argument.clazz.asSubclass(from.clazz);, +                } catch (final ClassCastException cce1) {, +            try {, +                rtn.clazz.asSubclass(to.clazz);, +            } catch (final ClassCastException cce0) {, +                try {, +                    to.clazz.asSubclass(rtn.clazz);, +                } catch (final ClassCastException cce1) {, +            try {, +                from.clazz.asSubclass(owner.clazz);, +            } catch (final ClassCastException cce0) {, +                try {, +                    owner.clazz.asSubclass(from.clazz);, +                } catch (final ClassCastException cce1) {, +            try {, +                rtn.clazz.asSubclass(to.clazz);, +            } catch (final ClassCastException cce0) {, +                try {, +                    to.clazz.asSubclass(rtn.clazz);, +                } catch (final ClassCastException cce1) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +        try {, +            actual.clazz.asSubclass(expected.clazz);, +, +            return cast;, +        } catch (final ClassCastException cce0) {, +            try {, +                if (explicit) {, +                    expected.clazz.asSubclass(actual.clazz);, +, +                    throw new ClassCastException(, +                        "Error" + location + ": Cannot cast from [" + actual.name + "] to [" + expected.name + "].");, +                }, +            } catch (final ClassCastException cce1) {, +    }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Definition.java, +                try {, +                    genargs[count].clazz.asSubclass(args[count].clazz);, +                } catch (final ClassCastException exception) {, +            try {, +                genrtn.clazz.asSubclass(rtn.clazz);, +            } catch (final ClassCastException exception) {, +                try {, +                    genargs[count].clazz.asSubclass(args[count].clazz);, +                } catch (final ClassCastException exception) {, +            try {, +                generic.clazz.asSubclass(type.clazz);, +            } catch (final ClassCastException exception) {, +            try {, +                owner.clazz.asSubclass(child.clazz);]