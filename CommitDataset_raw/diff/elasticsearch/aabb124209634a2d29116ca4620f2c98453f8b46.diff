[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                indicesService.clearRequestCache(shard);, +                    indicesService.clearRequestCache(shard);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                indicesService.clearRequestCache(shard);, +                    indicesService.clearRequestCache(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.indices.IndicesQueryCache;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                indicesService.clearRequestCache(shard);, +                    indicesService.clearRequestCache(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.indices.IndicesQueryCache;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                                assert false : shardFailedError;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                indicesService.clearRequestCache(shard);, +                    indicesService.clearRequestCache(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.indices.IndicesQueryCache;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesQueryCache;, +import org.elasticsearch.indices.IndicesRequestCache;, +                    IndicesService.INDICES_CACHE_CLEAN_INTERVAL_SETTING,, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                indicesService.clearRequestCache(shard);, +                    indicesService.clearRequestCache(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.indices.IndicesQueryCache;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesQueryCache;, +import org.elasticsearch.indices.IndicesRequestCache;, +                    IndicesService.INDICES_CACHE_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.indices.IndicesRequestCache;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                indicesService.clearRequestCache(shard);, +                    indicesService.clearRequestCache(shard);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.indices.IndicesQueryCache;, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                                assert false : shardFailedError;, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.indices.IndicesQueryCache;, +import org.elasticsearch.indices.IndicesRequestCache;, +                    IndicesService.INDICES_CACHE_CLEAN_INTERVAL_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.indices.IndicesRequestCache;, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +    private final boolean filtered;, +, +    /**, +     * Creates a new Setting instance, unfiltered, +     * @param key the settings key for this setting., +     * @param defaultValue a default value function that returns the default values string representation., +     * @param parser a parser that parses the string rep into a complex datatype., +     * @param dynamic true if this setting can be dynamically updateable, +     * @param scope the scope of this setting, +     */, +    public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, boolean dynamic, Scope scope) {, +        this(key, defaultValue, parser, dynamic, scope, false);, +    }, +     * @param dynamic true if this setting can be dynamically updateable, +     * @param filtered true if this setting should be filtered, +    public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, boolean dynamic, Scope scope,, +                   boolean filtered) {, +        this.filtered = filtered;, +    }, +, +    /**, +     * Creates a new Setting instance, unfiltered, +     * @param key the settings key for this setting., +     * @param fallBackSetting a setting to fall back to if the current setting is not set., +     * @param parser a parser that parses the string rep into a complex datatype., +     * @param dynamic true iff this setting can be dynamically updateable, +     * @param scope the scope of this setting, +     */, +    public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, boolean dynamic, Scope scope) {, +        this(key, fallBackSetting, parser, dynamic, scope, false);, +     * @param filtered true if this setting should be filtered, +    public Setting(String key, Setting<T> fallBackSetting, Function<String, T> parser, boolean dynamic, Scope scope, boolean filtered) {, +        this(key, fallBackSetting::getRaw, parser, dynamic, scope, filtered);, +     * Returns <code>true</code> if this setting is dynamically updateable, otherwise <code>false</code>, +     * Returns <code>true</code> if this setting must be filtered, otherwise <code>false</code>, +     */, +    public boolean isFiltered() {, +        return filtered;, +    }, +]