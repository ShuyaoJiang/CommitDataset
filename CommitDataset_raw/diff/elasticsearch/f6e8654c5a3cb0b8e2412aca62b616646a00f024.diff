[+++ b/x-pack/qa/rolling-upgrade-multi-cluster/build.gradle, +import org.elasticsearch.gradle.Version, +import org.elasticsearch.gradle.test.RestIntegTestTask, +, +apply plugin: 'elasticsearch.standalone-test', +, +dependencies {, +    // "org.elasticsearch.plugin:x-pack-core:${version}" doesn't work with idea because the testArtifacts are also here, +    testCompile project(path: xpackModule('core'), configuration: 'default'), +    testCompile project(path: xpackModule('core'), configuration: 'testArtifacts') // to be moved in a later commit, +}, +, +// This is a top level task which we will add dependencies to below., +// It is a single task that can be used to backcompat tests against all versions., +task bwcTest {, +    description = 'Runs backwards compatibility tests.', +    group = 'verification', +}, +, +for (Version version : bwcVersions.wireCompatible) {, +    String taskPrefix = "v${version}", +, +    // ============================================================================================, +    // Create leader cluster, +    // ============================================================================================, +, +    RestIntegTestTask leaderClusterTest = tasks.create(name: "${taskPrefix}#leader#clusterTest", type: RestIntegTestTask) {, +        mustRunAfter(precommit), +    }, +, +    configure(extensions.findByName("${taskPrefix}#leader#clusterTestCluster")) {, +        bwcVersion = version, +        numBwcNodes = 3, +        numNodes = 3, +        clusterName = 'leader', +        setting 'xpack.security.enabled', 'false', +        setting 'xpack.monitoring.enabled', 'false', +        setting 'xpack.ml.enabled', 'false', +        setting 'xpack.watcher.enabled', 'false', +        setting 'xpack.license.self_generated.type', 'trial', +    }, +, +    Task leaderClusterTestRunner = tasks.getByName("${taskPrefix}#leader#clusterTestRunner"), +    leaderClusterTestRunner.configure {, +        systemProperty 'tests.rest.upgrade_state', 'none', +        systemProperty 'tests.rest.cluster_name', 'leader', +, +        systemProperty 'tests.leader_host', "${-> leaderClusterTest.nodes.get(0).httpUri()}", +        systemProperty 'tests.leader_remote_cluster_seed', "${-> leaderClusterTest.nodes.get(0).transportUri()}", +    }, +, +    // ============================================================================================, +    // Create follower cluster, +    // ============================================================================================, +, +    RestIntegTestTask followerClusterTest = tasks.create(name: "${taskPrefix}#follower#clusterTest", type: RestIntegTestTask) {, +        mustRunAfter(precommit), +    }, +, +    configure(extensions.findByName("${taskPrefix}#follower#clusterTestCluster")) {, +        dependsOn leaderClusterTestRunner, +        bwcVersion = version, +        numBwcNodes = 3, +        numNodes = 3, +        clusterName = 'follower', +        setting 'xpack.security.enabled', 'false', +        setting 'xpack.monitoring.enabled', 'false', +        setting 'xpack.ml.enabled', 'false', +        setting 'xpack.watcher.enabled', 'false', +        setting 'xpack.license.self_generated.type', 'trial', +    }, +, +    Task followerClusterTestRunner = tasks.getByName("${taskPrefix}#follower#clusterTestRunner"), +    followerClusterTestRunner.configure {, +        systemProperty 'tests.rest.upgrade_state', 'none', +        systemProperty 'tests.rest.cluster_name', 'follower', +, +        systemProperty 'tests.leader_host', "${-> leaderClusterTest.nodes.get(0).httpUri()}", +        systemProperty 'tests.leader_remote_cluster_seed', "${-> leaderClusterTest.nodes.get(0).transportUri()}", +, +        systemProperty 'tests.follower_host', "${-> followerClusterTest.nodes.get(0).httpUri()}", +        systemProperty 'tests.follower_remote_cluster_seed', "${-> followerClusterTest.nodes.get(0).transportUri()}", +    }, +, +    // ============================================================================================, +    // Upgrade follower cluster, +    // ============================================================================================, +, +    Closure configureUpgradeCluster = {String prefix, String cluster, String name, Task lastRunner, int stopNode,, +                                       RestIntegTestTask clusterTest, Closure getOtherUnicastHostAddresses ->, +        configure(extensions.findByName("${prefix}#${cluster}#${name}")) {, +            dependsOn lastRunner, "${prefix}#${cluster}#clusterTestCluster#node${stopNode}.stop", +            clusterName = cluster, +            otherUnicastHostAddresses = { getOtherUnicastHostAddresses() }, +            minimumMasterNodes = { 2 }, +            autoSetInitialMasterNodes = false, +            /* Override the data directory so the new node always gets the node we, +            * just stopped's data directory. */, +            dataDir = { nodeNumber -> clusterTest.nodes[stopNode].dataDir }, +            setting 'repositories.url.allowed_urls', 'http://snapshot.test*']