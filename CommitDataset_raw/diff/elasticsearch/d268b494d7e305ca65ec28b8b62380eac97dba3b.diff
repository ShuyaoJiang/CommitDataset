[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/DataDescription.java, +                        throw ExceptionsHelper.badRequestException(, +                                    Messages.getMessage(Messages.JOB_CONFIG_INVALID_TIMEFORMAT, format), e.getCause());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/DataDescription.java, +                        throw ExceptionsHelper.badRequestException(, +                                    Messages.getMessage(Messages.JOB_CONFIG_INVALID_TIMEFORMAT, format), e.getCause());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/time/DateTimeFormatterTimestampConverter.java, +        String formattedTime = formatter.format(ZonedDateTime.ofInstant(Instant.ofEpochSecond(0), ZoneOffset.UTC));, +            TemporalAccessor parsed = formatter.parse(formattedTime);, +            throw new IllegalArgumentException("Timestamp cannot be derived from pattern: " + pattern, e);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/DataDescription.java, +                        throw ExceptionsHelper.badRequestException(, +                                    Messages.getMessage(Messages.JOB_CONFIG_INVALID_TIMEFORMAT, format), e.getCause());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/utils/time/DateTimeFormatterTimestampConverter.java, +        String formattedTime = formatter.format(ZonedDateTime.ofInstant(Instant.ofEpochSecond(0), ZoneOffset.UTC));, +            TemporalAccessor parsed = formatter.parse(formattedTime);, +            throw new IllegalArgumentException("Timestamp cannot be derived from pattern: " + pattern, e);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/config/DataDescriptionTests.java, +import java.time.DateTimeException;, +, +    }, +, +    @AwaitsFix(bugUrl = "https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8206980"), +    public void testVerify_GivenValidFormat_Java11Bug() {, +        DataDescription.Builder description = new DataDescription.Builder();, +        description.setTimeFormat("yyyy.MM.dd G 'at' HH:mm:ss z");, +, +        Throwable cause = e.getCause();, +        assertNotNull(cause);, +        assertThat(cause, instanceOf(DateTimeException.class));]