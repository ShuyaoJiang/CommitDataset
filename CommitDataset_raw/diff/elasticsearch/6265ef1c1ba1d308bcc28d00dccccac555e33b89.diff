[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/NoopPlugin.java, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.rest.RestController;, +import java.util.function.Supplier;, +    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,, +            IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver,, +            Supplier<DiscoveryNodes> nodesInCluster) {, +        return Arrays.asList(, +                new RestNoopBulkAction(settings, restController),, +                new RestNoopSearchAction(settings, restController));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/NoopPlugin.java, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.rest.RestController;, +import java.util.function.Supplier;, +    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,, +            IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver,, +            Supplier<DiscoveryNodes> nodesInCluster) {, +        return Arrays.asList(, +                new RestNoopBulkAction(settings, restController),, +                new RestNoopSearchAction(settings, restController));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/NoopPlugin.java, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.rest.RestController;, +import java.util.function.Supplier;, +    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,, +            IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver,, +            Supplier<DiscoveryNodes> nodesInCluster) {, +        return Arrays.asList(, +                new RestNoopBulkAction(settings, restController),, +                new RestNoopSearchAction(settings, restController));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/RestNoopSearchAction.java, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/NoopPlugin.java, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import org.elasticsearch.rest.RestController;, +import java.util.function.Supplier;, +    public List<RestHandler> getRestHandlers(Settings settings, RestController restController, ClusterSettings clusterSettings,, +            IndexScopedSettings indexScopedSettings, SettingsFilter settingsFilter, IndexNameExpressionResolver indexNameExpressionResolver,, +            Supplier<DiscoveryNodes> nodesInCluster) {, +        return Arrays.asList(, +                new RestNoopBulkAction(settings, restController),, +                new RestNoopSearchAction(settings, restController));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocWriteResponse;, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/RestNoopSearchAction.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.settings.IndexScopedSettings;, +import org.elasticsearch.common.settings.SettingsFilter;, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.function.Consumer;, +import java.util.function.Supplier;, +import java.util.function.UnaryOperator;, +import java.util.stream.Collectors;, +, +    private final IndexNameExpressionResolver indexNameExpressionResolver;, +    private final IndexScopedSettings indexScopedSettings;, +    private final ClusterSettings clusterSettings;, +    private final SettingsFilter settingsFilter;, +    public ActionModule(boolean transportClient, Settings settings, IndexNameExpressionResolver indexNameExpressionResolver,, +                        IndexScopedSettings indexScopedSettings, ClusterSettings clusterSettings, SettingsFilter settingsFilter,, +                        ThreadPool threadPool, List<ActionPlugin> actionPlugins, NodeClient nodeClient,, +                        CircuitBreakerService circuitBreakerService) {, +        this.indexNameExpressionResolver = indexNameExpressionResolver;, +        this.indexScopedSettings = indexScopedSettings;, +        this.clusterSettings = clusterSettings;, +        this.settingsFilter = settingsFilter;, +        autoCreateIndex = transportClient ? null : new AutoCreateIndex(settings, clusterSettings, indexNameExpressionResolver);, +    public void initRestHandlers(Supplier<DiscoveryNodes> nodesInCluster) {, +        List<AbstractCatAction> catActions = new ArrayList<>();, +        Consumer<RestHandler> registerHandler = a -> {, +            if (a instanceof AbstractCatAction) {, +                catActions.add((AbstractCatAction) a);, +            }]