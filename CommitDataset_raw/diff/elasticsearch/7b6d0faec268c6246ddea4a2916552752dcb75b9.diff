[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.client.shared.Version;, +        Version version = Version.fromString(mainResponse.getVersion());, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.client.shared.Version;, +        Version version = Version.fromString(mainResponse.getVersion());, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor);, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/CliSession.java, +        Version version = Version.fromString(response.getVersion());, +        if (version.major != Version.CURRENT.major || version.minor != Version.CURRENT.minor) {, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.client.shared.Version;, +        Version version = Version.fromString(mainResponse.getVersion());, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor);, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/CliSession.java, +        Version version = Version.fromString(response.getVersion());, +        if (version.major != Version.CURRENT.major || version.minor != Version.CURRENT.minor) {, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/ServerInfoCliCommand.java, +                .text(" Version:").em(info.getVersion()), +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.client.shared.Version;, +        Version version = Version.fromString(mainResponse.getVersion());, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor);, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/CliSession.java, +        Version version = Version.fromString(response.getVersion());, +        if (version.major != Version.CURRENT.major || version.minor != Version.CURRENT.minor) {, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/ServerInfoCliCommand.java, +                .text(" Version:").em(info.getVersion()), +++ b/x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/CliSessionTests.java, +        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), org.elasticsearch.Version.CURRENT.toString(),, +                org.elasticsearch.Version.fromString(major + "." + minor + ".23").toString(),, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.client.shared.Version;, +        Version version = Version.fromString(mainResponse.getVersion());, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor);, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/CliSession.java, +        Version version = Version.fromString(response.getVersion());, +        if (version.major != Version.CURRENT.major || version.minor != Version.CURRENT.minor) {, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/ServerInfoCliCommand.java, +                .text(" Version:").em(info.getVersion()), +++ b/x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/CliSessionTests.java, +        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), org.elasticsearch.Version.CURRENT.toString(),, +                org.elasticsearch.Version.fromString(major + "." + minor + ".23").toString(),, +++ b/x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/command/ServerInfoCliCommandTests.java, +        when(client.serverInfo()).thenReturn(new MainResponse("my_node", "1.2.3",, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/client/JdbcHttpClient.java, +import org.elasticsearch.xpack.sql.client.shared.Version;, +        Version version = Version.fromString(mainResponse.getVersion());, +        return new InfoResponse(mainResponse.getClusterName(), version.major, version.minor);, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/CliSession.java, +        Version version = Version.fromString(response.getVersion());, +        if (version.major != Version.CURRENT.major || version.minor != Version.CURRENT.minor) {, +++ b/x-pack/plugin/sql/sql-cli/src/main/java/org/elasticsearch/xpack/sql/cli/command/ServerInfoCliCommand.java, +                .text(" Version:").em(info.getVersion()), +++ b/x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/CliSessionTests.java, +        when(httpClient.serverInfo()).thenReturn(new MainResponse(randomAlphaOfLength(5), org.elasticsearch.Version.CURRENT.toString(),, +                org.elasticsearch.Version.fromString(major + "." + minor + ".23").toString(),, +++ b/x-pack/plugin/sql/sql-cli/src/test/java/org/elasticsearch/xpack/sql/cli/command/ServerInfoCliCommandTests.java, +        when(client.serverInfo()).thenReturn(new MainResponse("my_node", "1.2.3",, +++ b/x-pack/plugin/sql/sql-proto/src/main/java/org/elasticsearch/xpack/sql/proto/MainResponse.java, +    private String version;, +    public MainResponse(String nodeName, String version, String clusterName, String clusterUuid, Build build) {, +    public String getVersion() {, +            response.version = (String) value.get("number");]