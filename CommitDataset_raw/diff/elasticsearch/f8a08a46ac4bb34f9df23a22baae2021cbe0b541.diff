[+++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).loadSource(loadSource));, +            get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).loadSource(loadSource));, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).loadSource(loadSource));, +            get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).loadSource(loadSource));, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context);, +    Filter prefixFilter(Object value, @Nullable QueryParseContext context);, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).loadSource(loadSource));, +            get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).loadSource(loadSource));, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context);, +    Filter prefixFilter(Object value, @Nullable QueryParseContext context);, +++ b/src/main/java/org/elasticsearch/index/mapper/Uid.java, +        return createUid(type, id);, +    }, +, +    public BytesRef toBytesRef() {, +        return createUidAsBytes(type, id);, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).loadSource(loadSource));, +            get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).loadSource(loadSource));, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context);, +    Filter prefixFilter(Object value, @Nullable QueryParseContext context);, +++ b/src/main/java/org/elasticsearch/index/mapper/Uid.java, +        return createUid(type, id);, +    }, +, +    public BytesRef toBytesRef() {, +        return createUidAsBytes(type, id);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    public Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context) {, +    public Filter prefixFilter(Object value, @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).loadSource(loadSource));, +            get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).loadSource(loadSource));, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context);, +    Filter prefixFilter(Object value, @Nullable QueryParseContext context);, +++ b/src/main/java/org/elasticsearch/index/mapper/Uid.java, +        return createUid(type, id);, +    }, +, +    public BytesRef toBytesRef() {, +        return createUidAsBytes(type, id);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    public Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context) {, +    public Filter prefixFilter(Object value, @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +        return new TermFilter(names().createIndexNameTerm(nullValue ? Values.TRUE : Values.FALSE));, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).loadSource(loadSource));, +            get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).loadSource(loadSource));, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context);, +    Filter prefixFilter(Object value, @Nullable QueryParseContext context);, +++ b/src/main/java/org/elasticsearch/index/mapper/Uid.java, +        return createUid(type, id);, +    }, +, +    public BytesRef toBytesRef() {, +        return createUidAsBytes(type, id);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    public Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context) {, +    public Filter prefixFilter(Object value, @Nullable QueryParseContext context) {, +++ b/src/main/java/org/elasticsearch/index/mapper/core/BooleanFieldMapper.java, +        return new TermFilter(names().createIndexNameTerm(nullValue ? Values.TRUE : Values.FALSE));, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/IdFieldMapper.java, +    public Query prefixQuery(Object value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context) {, +            PrefixQuery prefixQuery = new PrefixQuery(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(Iterables.getFirst(queryTypes, null), BytesRefs.toBytesRef(value))));, +            PrefixQuery prefixQuery = new PrefixQuery(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(queryType, BytesRefs.toBytesRef(value))));, +    public Filter prefixFilter(Object value, @Nullable QueryParseContext context) {, +            return new PrefixFilter(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(Iterables.getFirst(queryTypes, null), BytesRefs.toBytesRef(value))));, +            filter.add(new PrefixFilter(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(queryType, BytesRefs.toBytesRef(value)))), BooleanClause.Occur.SHOULD);, +            RegexpQuery regexpQuery = new RegexpQuery(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(Iterables.getFirst(queryTypes, null), value)), flags);, +            RegexpQuery regexpQuery = new RegexpQuery(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(queryType, value)), flags);, +            return new RegexpFilter(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(Iterables.getFirst(queryTypes, null), value)), flags);, +            filter.add(new RegexpFilter(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(queryType, value)), flags), BooleanClause.Occur.SHOULD);, +++ b/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +        Term uidTerm = new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(request.type(), request.id()));, +++ b/src/main/java/org/elasticsearch/index/get/ShardGetService.java, +                get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).loadSource(loadSource));, +            get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).loadSource(loadSource));]