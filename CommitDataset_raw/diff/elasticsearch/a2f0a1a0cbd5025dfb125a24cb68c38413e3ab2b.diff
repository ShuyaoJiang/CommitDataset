[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistogramGroupConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistogramGroupConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistogramGroupConfig.java, +import java.util.Set;, +    public Set<String> getAllFields() {, +        return Arrays.stream(fields).collect(Collectors.toSet());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistogramGroupConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistogramGroupConfig.java, +import java.util.Set;, +    public Set<String> getAllFields() {, +        return Arrays.stream(fields).collect(Collectors.toSet());, +++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/job/RollupIndexer.java, +import org.elasticsearch.xpack.core.rollup.job.HistogramGroupConfig;, +, +        final Map<String, Object> metadata = createMetadata(groupConfig);, +, +    static Map<String, Object> createMetadata(final GroupConfig groupConfig) {, +        final Map<String, Object> metadata = new HashMap<>();, +        if (groupConfig != null) {, +            // Add all the metadata in order: date_histo -> histo, +            final DateHistogramGroupConfig dateHistogram = groupConfig.getDateHistogram();, +            metadata.put(RollupField.formatMetaField(RollupField.INTERVAL), dateHistogram.getInterval().toString());, +, +            final HistogramGroupConfig histogram = groupConfig.getHistogram();, +            if (histogram != null) {, +                metadata.put(RollupField.formatMetaField(RollupField.INTERVAL), histogram.getInterval());, +            }, +        }, +        return metadata;, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/DateHistogramGroupConfig.java, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/HistogramGroupConfig.java, +import java.util.Set;, +    public Set<String> getAllFields() {, +        return Arrays.stream(fields).collect(Collectors.toSet());, +++ b/x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/job/RollupIndexer.java, +import org.elasticsearch.xpack.core.rollup.job.HistogramGroupConfig;, +, +        final Map<String, Object> metadata = createMetadata(groupConfig);, +, +    static Map<String, Object> createMetadata(final GroupConfig groupConfig) {, +        final Map<String, Object> metadata = new HashMap<>();, +        if (groupConfig != null) {, +            // Add all the metadata in order: date_histo -> histo, +            final DateHistogramGroupConfig dateHistogram = groupConfig.getDateHistogram();, +            metadata.put(RollupField.formatMetaField(RollupField.INTERVAL), dateHistogram.getInterval().toString());, +, +            final HistogramGroupConfig histogram = groupConfig.getHistogram();, +            if (histogram != null) {, +                metadata.put(RollupField.formatMetaField(RollupField.INTERVAL), histogram.getInterval());, +            }, +        }, +        return metadata;, +    }, +++ b/x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/job/RollupIndexerTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.rollup.job;, +, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.xpack.core.rollup.ConfigTestHelpers;, +import org.elasticsearch.xpack.core.rollup.job.DateHistogramGroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.GroupConfig;, +import org.elasticsearch.xpack.core.rollup.job.HistogramGroupConfig;, +, +import java.util.Map;, +, +import static org.hamcrest.Matchers.equalTo;, +, +public class RollupIndexerTests extends ESTestCase {, +, +    public void testCreateMetadataNoGroupConfig() {, +        final Map<String, Object> metadata = RollupIndexer.createMetadata(null);, +        assertNotNull(metadata);, +        assertTrue(metadata.isEmpty());, +    }, +, +    public void testCreateMetadataWithDateHistogramGroupConfigOnly() {, +        final DateHistogramGroupConfig dateHistogram = ConfigTestHelpers.randomDateHistogramGroupConfig(random());, +        final GroupConfig groupConfig = new GroupConfig(dateHistogram);, +, +        final Map<String, Object> metadata = RollupIndexer.createMetadata(groupConfig);, +        assertEquals(1, metadata.size());, +        assertTrue(metadata.containsKey("_rollup.interval"));, +        Object value = metadata.get("_rollup.interval");, +        assertThat(value, equalTo(dateHistogram.getInterval().toString()));, +    }, +, +    public void testCreateMetadata() {, +        final DateHistogramGroupConfig dateHistogram = ConfigTestHelpers.randomDateHistogramGroupConfig(random());, +        final HistogramGroupConfig histogram = ConfigTestHelpers.randomHistogramGroupConfig(random());, +        final GroupConfig groupConfig = new GroupConfig(dateHistogram, histogram, null);, +, +        final Map<String, Object> metadata = RollupIndexer.createMetadata(groupConfig);, +        assertEquals(1, metadata.size());, +        assertTrue(metadata.containsKey("_rollup.interval"));, +        Object value = metadata.get("_rollup.interval");]