[+++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/LifecyclePolicyTests.java, +import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsTestHelper;, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_PHASE_SETTING.getKey(), "first_phase"), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), "").build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), MockAction.NAME).build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), MockAction.NAME).build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), MockAction.NAME).build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_PHASE_SETTING.getKey(), "second_phase"), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), "").build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_PHASE_SETTING.getKey(), "third_phase"), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), "").build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/LifecyclePolicyTests.java, +import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsTestHelper;, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_PHASE_SETTING.getKey(), "first_phase"), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), "").build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), MockAction.NAME).build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), MockAction.NAME).build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), MockAction.NAME).build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_PHASE_SETTING.getKey(), "second_phase"), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), "").build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_PHASE_SETTING.getKey(), "third_phase"), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), "").build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +++ b/x-pack/plugin/src/test/java/org/elasticsearch/xpack/indexlifecycle/PhaseTests.java, +import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsTestHelper;, +        MockAction firstAction = new MockAction() {, +            @Override, +            public String getWriteableName() {, +                return "first_action";, +            }, +        };, +        MockAction secondAction = new MockAction() {, +            @Override, +            public String getWriteableName() {, +                return "second_action";, +            }, +        };, +        MockAction thirdAction = new MockAction() {, +            @Override, +            public String getWriteableName() {, +                return "third_action";, +            }, +        };, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), "first_action").build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +                Settings expectedSettings = Settings.builder(), +                        .put(IndexLifecycle.LIFECYCLE_TIMESERIES_ACTION_SETTING.getKey(), Phase.PHASE_COMPLETED).build();, +                UpdateSettingsTestHelper.assertSettingsRequest(request, expectedSettings, indexName);, +                listener.onResponse(UpdateSettingsTestHelper.createMockResponse(true));, +        MockAction firstAction = new MockAction() {, +            @Override, +            public String getWriteableName() {, +                return "first_action";, +            }, +        };, +        MockAction secondAction = new MockAction() {, +            @Override, +            public String getWriteableName() {, +                return "second_action";, +            }, +        };, +        MockAction thirdAction = new MockAction() {, +            @Override]