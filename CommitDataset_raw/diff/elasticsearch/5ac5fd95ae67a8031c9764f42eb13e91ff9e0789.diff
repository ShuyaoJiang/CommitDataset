[+++ b/core/src/main/java/org/apache/lucene/queries/SearchAfterSortedDocQuery.java, +            if (doc <= topDoc) {, +++ b/core/src/main/java/org/apache/lucene/queries/SearchAfterSortedDocQuery.java, +            if (doc <= topDoc) {, +++ b/core/src/main/java/org/elasticsearch/search/query/QueryCollectorContext.java, +    void postProcess(QuerySearchResult result) throws IOException {}, +            void postProcess(QuerySearchResult result) throws IOException {, +                if (collector.terminatedEarly()) {, +++ b/core/src/main/java/org/apache/lucene/queries/SearchAfterSortedDocQuery.java, +            if (doc <= topDoc) {, +++ b/core/src/main/java/org/elasticsearch/search/query/QueryCollectorContext.java, +    void postProcess(QuerySearchResult result) throws IOException {}, +            void postProcess(QuerySearchResult result) throws IOException {, +                if (collector.terminatedEarly()) {, +++ b/core/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.apache.lucene.index.LeafReaderContext;, +        boolean rescore = execute(searchContext, searchContext.searcher(), searcher::setCheckCancelled);, +    static boolean execute(SearchContext searchContext,, +                           final IndexSearcher searcher,, +                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {, +        final IndexReader reader = searcher.getIndexReader();, +                    } else if (canEarlyTerminate(reader, searchContext.sort())) {, +            // whether the chain contains a collector that filters documents, +            boolean hasFilterCollector = false;, +                // this collector can filter documents during the collection, +                hasFilterCollector = true;, +                // this collector can filter documents during the collection, +                hasFilterCollector = true;, +                // this collector can filter documents during the collection, +                hasFilterCollector = true;, +            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector);, +                ctx.postProcess(result);, +     * Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts, +     * with <code>sortAndFormats</code>., +     **/, +    static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {, +        if (sortAndFormats == null || sortAndFormats.sort == null) {, +            return false;, +        }, +        final Sort sort = sortAndFormats.sort;, +        for (LeafReaderContext ctx : reader.leaves()) {, +            Sort indexSort = ctx.reader().getMetaData().getSort();, +            if (indexSort == null || EarlyTerminatingSortingCollector.canEarlyTerminate(sort, indexSort) == false) {, +                return false;, +            }, +        }, +        return true;, +++ b/core/src/main/java/org/apache/lucene/queries/SearchAfterSortedDocQuery.java, +            if (doc <= topDoc) {, +++ b/core/src/main/java/org/elasticsearch/search/query/QueryCollectorContext.java, +    void postProcess(QuerySearchResult result) throws IOException {}, +            void postProcess(QuerySearchResult result) throws IOException {, +                if (collector.terminatedEarly()) {, +++ b/core/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +import org.apache.lucene.index.LeafReaderContext;, +        boolean rescore = execute(searchContext, searchContext.searcher(), searcher::setCheckCancelled);, +    static boolean execute(SearchContext searchContext,, +                           final IndexSearcher searcher,, +                           Consumer<Runnable> checkCancellationSetter) throws QueryPhaseExecutionException {, +        final IndexReader reader = searcher.getIndexReader();, +                    } else if (canEarlyTerminate(reader, searchContext.sort())) {, +            // whether the chain contains a collector that filters documents, +            boolean hasFilterCollector = false;, +                // this collector can filter documents during the collection, +                hasFilterCollector = true;, +                // this collector can filter documents during the collection, +                hasFilterCollector = true;, +                // this collector can filter documents during the collection, +                hasFilterCollector = true;, +            final TopDocsCollectorContext topDocsFactory = createTopDocsCollectorContext(searchContext, reader, hasFilterCollector);, +                ctx.postProcess(result);, +     * Returns whether collection within the provided <code>reader</code> can be early-terminated if it sorts, +     * with <code>sortAndFormats</code>., +     **/, +    static boolean canEarlyTerminate(IndexReader reader, SortAndFormats sortAndFormats) {, +        if (sortAndFormats == null || sortAndFormats.sort == null) {, +            return false;, +        }, +        final Sort sort = sortAndFormats.sort;, +        for (LeafReaderContext ctx : reader.leaves()) {, +            Sort indexSort = ctx.reader().getMetaData().getSort();, +            if (indexSort == null || EarlyTerminatingSortingCollector.canEarlyTerminate(sort, indexSort) == false) {, +                return false;, +            }, +        }, +        return true;, +++ b/core/src/main/java/org/elasticsearch/search/query/TopDocsCollectorContext.java, +import org.apache.lucene.search.MultiCollector;, +import java.util.function.IntSupplier;, +import java.util.function.Supplier;, +import static org.elasticsearch.search.query.QueryPhase.canEarlyTerminate;, +    static class EmptyTopDocsCollectorContext extends TopDocsCollectorContext {, +        private final Collector collector;, +        private final IntSupplier hitCountSupplier;, +         * @param trackTotalHits True if the total number of hits should be tracked, +         * @param hasFilterCollector True if the collector chain contains a filter, +        private EmptyTopDocsCollectorContext(IndexReader reader, Query query,, +                                             boolean trackTotalHits, boolean hasFilterCollector) throws IOException {, +            if (trackTotalHits) {, +                TotalHitCountCollector hitCountCollector = new TotalHitCountCollector();]