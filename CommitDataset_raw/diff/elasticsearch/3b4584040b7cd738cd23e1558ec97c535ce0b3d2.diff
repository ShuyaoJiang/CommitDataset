[+++ b/.idea/dictionaries/kimchy.xml, +      <w>bytebuffer</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>bytebuffer</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.index.store.fs.*;, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, environment, localNodeId));, +++ b/.idea/dictionaries/kimchy.xml, +      <w>bytebuffer</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.index.store.fs.*;, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, environment, localNodeId));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.index.store.IndexStore;, +        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));, +++ b/.idea/dictionaries/kimchy.xml, +      <w>bytebuffer</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.index.store.fs.*;, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, environment, localNodeId));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.index.store.IndexStore;, +        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.store;, +, +import org.elasticsearch.index.IndexComponent;, +, +/**, + * @author kimchy (shay.banon), + */, +public interface IndexStore extends IndexComponent {, +, +    /**, +     * Is the store a persistent store that can survive full restarts., +     */, +    boolean persistent();, +, +    Class<? extends Store> shardStoreClass();, +}, +++ b/.idea/dictionaries/kimchy.xml, +      <w>bytebuffer</w>, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.index.store.fs.*;, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, environment, localNodeId));, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, environment, localNodeId));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.index.store.IndexStore;, +        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/IndexStore.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.store;, +, +import org.elasticsearch.index.IndexComponent;, +, +/**]