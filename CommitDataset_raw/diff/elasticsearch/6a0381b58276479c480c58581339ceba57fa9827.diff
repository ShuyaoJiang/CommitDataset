[+++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.net.MalformedURLException;, +     * Checks the current classpath for duplicate classes, +            if (loader instanceof URLClassLoader ) {, +        }, +        checkJarHell(parseClassPath());, +    }, +    , +    /**, +     * Parses the classpath into a set of URLs, +     */, +    @SuppressForbidden(reason = "resolves against CWD because that is how classpaths work"), +    public static URL[] parseClassPath()  {, +        String elements[] = System.getProperty("java.class.path").split(System.getProperty("path.separator"));, +        URL urlElements[] = new URL[elements.length];, +        for (int i = 0; i < elements.length; i++) {, +            String element = elements[i];, +            // empty classpath element behaves like CWD., +            if (element.isEmpty()) {, +                element = System.getProperty("user.dir");, +            }, +            try {, +                urlElements[i] = PathUtils.get(element).toUri().toURL();, +            } catch (MalformedURLException e) {, +                // should not happen, as we use the filesystem API, +                throw new RuntimeException(e);, +            }, +        }, +        return urlElements;, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +    void flatten(Query sourceQuery, IndexReader reader, Collection<Query> flatQueries, float boost) throws IOException {, +            super.flatten(new TermQuery(((SpanTermQuery) sourceQuery).getTerm()), reader, flatQueries, boost);, +            flatten(((ConstantScoreQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(((FunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(((FilteredQuery) sourceQuery).getQuery(), reader, flatQueries, boost);, +            flatten(sourceQuery.rewrite(reader), reader, flatQueries, boost);, +            flatten(((FiltersFunctionScoreQuery) sourceQuery).getSubQuery(), reader, flatQueries, boost);, +            flatten(blendedTermQuery.rewrite(reader), reader, flatQueries, boost);, +            super.flatten(sourceQuery, reader, flatQueries, boost);, +                        super.flatten(new TermQuery(term), reader, flatQueries, orig.getBoost());    , +            this.flatten(query, reader, flatQueries, orig.getBoost());, +            flatten(((QueryWrapperFilter) sourceFilter).getQuery(), reader, flatQueries, 1.0F);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.net.MalformedURLException;, +     * Checks the current classpath for duplicate classes, +            if (loader instanceof URLClassLoader ) {, +        }, +        checkJarHell(parseClassPath());, +    }, +    , +    /**, +     * Parses the classpath into a set of URLs, +     */, +    @SuppressForbidden(reason = "resolves against CWD because that is how classpaths work"), +    public static URL[] parseClassPath()  {, +        String elements[] = System.getProperty("java.class.path").split(System.getProperty("path.separator"));, +        URL urlElements[] = new URL[elements.length];, +        for (int i = 0; i < elements.length; i++) {, +            String element = elements[i];, +            // empty classpath element behaves like CWD., +            if (element.isEmpty()) {, +                element = System.getProperty("user.dir");, +            }, +            try {, +                urlElements[i] = PathUtils.get(element).toUri().toURL();, +            } catch (MalformedURLException e) {, +                // should not happen, as we use the filesystem API, +                throw new RuntimeException(e);, +            }, +        }, +        return urlElements;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        for (URL url : JarHell.parseClassPath()) {, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java]