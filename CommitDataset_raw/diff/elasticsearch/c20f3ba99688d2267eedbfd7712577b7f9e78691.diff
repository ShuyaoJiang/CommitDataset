[+++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpClient.java, +    private final String proxyScheme;, +        this.proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ? HttpSettings.PROXY_SCHEME.get(settings) : null;, +            // if a proxy scheme is configured use this, but fall back to the same than the request in case there was no special, +            // configuration given, +            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : request.scheme.scheme();, +            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme);, +            String scheme = proxyScheme != null ? proxyScheme : request.scheme.scheme();, +            HttpHost proxy = new HttpHost(proxyHost, proxyPort, scheme);, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpClient.java, +    private final String proxyScheme;, +        this.proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ? HttpSettings.PROXY_SCHEME.get(settings) : null;, +            // if a proxy scheme is configured use this, but fall back to the same than the request in case there was no special, +            // configuration given, +            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : request.scheme.scheme();, +            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme);, +            String scheme = proxyScheme != null ? proxyScheme : request.scheme.scheme();, +            HttpHost proxy = new HttpHost(proxyHost, proxyPort, scheme);, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpProxy.java, +public class HttpProxy implements ToXContentFragment {, +    public static final HttpProxy NO_PROXY = new HttpProxy(null, null, null);, +, +    private static final ParseField HOST = new ParseField("host");, +    private static final ParseField PORT = new ParseField("port");, +    private static final ParseField SCHEME = new ParseField("scheme");, +    private Scheme scheme;, +    public HttpProxy(String host, Integer port, Scheme scheme) {, +        this.host = host;, +        this.port = port;, +        this.scheme = scheme;, +            builder.startObject("proxy").field("host", host).field("port", port);, +            if (scheme != null) {, +                builder.field("scheme", scheme.scheme());, +            }, +            builder.endObject();, +    public Scheme getScheme() {, +        return scheme;, +        return Objects.equals(port, that.port) && Objects.equals(host, that.host) && Objects.equals(scheme, that.scheme);, +        return Objects.hash(host, port, scheme);, +        Scheme scheme = null;, +            } else if (HOST.match(currentFieldName)) {, +            } else if (SCHEME.match(currentFieldName)) {, +                scheme = Scheme.parse(parser.text());, +            } else if (PORT.match(currentFieldName)) {, +        return new HttpProxy(host, port, scheme);, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpClient.java, +    private final String proxyScheme;, +        this.proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ? HttpSettings.PROXY_SCHEME.get(settings) : null;, +            // if a proxy scheme is configured use this, but fall back to the same than the request in case there was no special, +            // configuration given, +            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : request.scheme.scheme();, +            HttpHost proxy = new HttpHost(request.proxy.getHost(), request.proxy.getPort(), scheme);, +            String scheme = proxyScheme != null ? proxyScheme : request.scheme.scheme();, +            HttpHost proxy = new HttpHost(proxyHost, proxyPort, scheme);, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpProxy.java, +public class HttpProxy implements ToXContentFragment {, +    public static final HttpProxy NO_PROXY = new HttpProxy(null, null, null);, +, +    private static final ParseField HOST = new ParseField("host");, +    private static final ParseField PORT = new ParseField("port");, +    private static final ParseField SCHEME = new ParseField("scheme");, +    private Scheme scheme;, +    public HttpProxy(String host, Integer port, Scheme scheme) {, +        this.host = host;, +        this.port = port;, +        this.scheme = scheme;, +            builder.startObject("proxy").field("host", host).field("port", port);, +            if (scheme != null) {, +                builder.field("scheme", scheme.scheme());, +            }, +            builder.endObject();, +    public Scheme getScheme() {, +        return scheme;, +        return Objects.equals(port, that.port) && Objects.equals(host, that.host) && Objects.equals(scheme, that.scheme);, +        return Objects.hash(host, port, scheme);, +        Scheme scheme = null;, +            } else if (HOST.match(currentFieldName)) {, +            } else if (SCHEME.match(currentFieldName)) {, +                scheme = Scheme.parse(parser.text());, +            } else if (PORT.match(currentFieldName)) {, +        return new HttpProxy(host, port, scheme);, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpSettings.java, +import org.elasticsearch.common.settings.Setting.Property;, +            DEFAULT_READ_TIMEOUT, Property.NodeScope);, +            DEFAULT_CONNECTION_TIMEOUT, Property.NodeScope);, +    private static final String PROXY_HOST_KEY = "xpack.http.proxy.host";, +    private static final String PROXY_PORT_KEY = "xpack.http.proxy.port";, +    private static final String PROXY_SCHEME_KEY = "xpack.http.proxy.scheme";, +    private static final String SSL_KEY_PREFIX = "xpack.http.ssl.";, +    static final Setting<String> PROXY_HOST = Setting.simpleString(PROXY_HOST_KEY, Property.NodeScope);, +    static final Setting<String> PROXY_SCHEME = Setting.simpleString(PROXY_SCHEME_KEY, (v, s) -> Scheme.parse(v), Property.NodeScope);, +    static final Setting<Integer> PROXY_PORT = Setting.intSetting(PROXY_PORT_KEY, 0, 0, 0xFFFF, Property.NodeScope);, +            Property.NodeScope);, +        settings.add(PROXY_SCHEME);, +++ b/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/http/HttpClient.java, +    private final String proxyScheme;, +        this.proxyScheme = HttpSettings.PROXY_SCHEME.exists(settings) ? HttpSettings.PROXY_SCHEME.get(settings) : null;, +            // if a proxy scheme is configured use this, but fall back to the same than the request in case there was no special, +            // configuration given, +            String scheme = request.proxy.getScheme() != null ? request.proxy.getScheme().scheme() : request.scheme.scheme();]