[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +        if (type == -1) {, +            return null;, +        } else if (type == 0) {, +        } else if (type == 7) {, +            int size = in.readVInt();, +            List list = new ArrayList(size);, +            for (int i = 0; i < size; i++) {, +                list.add(readFieldValue(in));, +            }, +            return list;, +        } else if (type == 8) {, +            int size = in.readVInt();, +            Map map = new HashMap();, +            for (int i = 0; i < size; i++) {, +                map.put(in.readUTF(), readFieldValue(in));, +            }, +            return map;, +        if (value == null) {, +            out.writeByte((byte) -1);, +            return;, +        }, +        } else if (value instanceof List) {, +            out.writeByte((byte) 7);, +            List list = (List) value;, +            out.writeVInt(list.size());, +            for (Object o : list) {, +                writeFieldValue(out, o);, +            }, +        } else if (value instanceof Map) {, +            out.writeByte((byte) 8);, +            Map<String, Object> map = (Map<String, Object>) value;, +            out.writeVInt(map.size());, +            for (Map.Entry<String, Object> entry : map.entrySet()) {, +                out.writeUTF(entry.getKey());, +                writeFieldValue(out, entry.getValue());, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +        if (type == -1) {, +            return null;, +        } else if (type == 0) {, +        } else if (type == 7) {, +            int size = in.readVInt();, +            List list = new ArrayList(size);, +            for (int i = 0; i < size; i++) {, +                list.add(readFieldValue(in));, +            }, +            return list;, +        } else if (type == 8) {, +            int size = in.readVInt();, +            Map map = new HashMap();, +            for (int i = 0; i < size; i++) {, +                map.put(in.readUTF(), readFieldValue(in));, +            }, +            return map;, +        if (value == null) {, +            out.writeByte((byte) -1);, +            return;, +        }, +        } else if (value instanceof List) {, +            out.writeByte((byte) 7);, +            List list = (List) value;, +            out.writeVInt(list.size());, +            for (Object o : list) {, +                writeFieldValue(out, o);, +            }, +        } else if (value instanceof Map) {, +            out.writeByte((byte) 8);, +            Map<String, Object> map = (Map<String, Object>) value;, +            out.writeVInt(map.size());, +            for (Map.Entry<String, Object> entry : map.entrySet()) {, +                out.writeUTF(entry.getKey());, +                writeFieldValue(out, entry.getValue());, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/builder/XContentBuilder.java, +import java.util.List;, +    public T field(String name, List<Object> value) throws IOException {, +        startArray(name);, +        for (Object o : value) {, +            value(o);, +        }, +        endArray();, +        return builder;, +    }, +, +        } else if (value instanceof List) {, +            field(name, (List) value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/Lucene.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;]