[+++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int IGNORE_ABOVE = -1;, +        protected int ignoreAbove = Defaults.IGNORE_ABOVE;, +        public Builder ignoreAbove(int ignoreAbove) {, +            this.ignoreAbove = ignoreAbove;, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, ignoreAbove);, +                } else if (propName.equals("ignore_above")) {, +                    builder.ignoreAbove(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int ignoreAbove;, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.IGNORE_ABOVE);, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int ignoreAbove) {, +        this.ignoreAbove = ignoreAbove;, +        if (ignoreAbove > 0 && value.length() > ignoreAbove) {, +        if (ignoreAbove != Defaults.IGNORE_ABOVE) {, +            builder.field("ignore_above", ignoreAbove);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int IGNORE_ABOVE = -1;, +        protected int ignoreAbove = Defaults.IGNORE_ABOVE;, +        public Builder ignoreAbove(int ignoreAbove) {, +            this.ignoreAbove = ignoreAbove;, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, ignoreAbove);, +                } else if (propName.equals("ignore_above")) {, +                    builder.ignoreAbove(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int ignoreAbove;, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.IGNORE_ABOVE);, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int ignoreAbove) {, +        this.ignoreAbove = ignoreAbove;, +        if (ignoreAbove > 0 && value.length() > ignoreAbove) {, +        if (ignoreAbove != Defaults.IGNORE_ABOVE) {, +            builder.field("ignore_above", ignoreAbove);, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/SimpleMapperTests.java, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int IGNORE_ABOVE = -1;, +        protected int ignoreAbove = Defaults.IGNORE_ABOVE;, +        public Builder ignoreAbove(int ignoreAbove) {, +            this.ignoreAbove = ignoreAbove;, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, ignoreAbove);, +                } else if (propName.equals("ignore_above")) {, +                    builder.ignoreAbove(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int ignoreAbove;, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.IGNORE_ABOVE);, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int ignoreAbove) {, +        this.ignoreAbove = ignoreAbove;, +        if (ignoreAbove > 0 && value.length() > ignoreAbove) {, +        if (ignoreAbove != Defaults.IGNORE_ABOVE) {, +            builder.field("ignore_above", ignoreAbove);, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/SimpleMapperTests.java, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/test-mapping.json, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int IGNORE_ABOVE = -1;, +        protected int ignoreAbove = Defaults.IGNORE_ABOVE;, +        public Builder ignoreAbove(int ignoreAbove) {, +            this.ignoreAbove = ignoreAbove;, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, ignoreAbove);, +                } else if (propName.equals("ignore_above")) {, +                    builder.ignoreAbove(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int ignoreAbove;, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.IGNORE_ABOVE);, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int ignoreAbove) {, +        this.ignoreAbove = ignoreAbove;, +        if (ignoreAbove > 0 && value.length() > ignoreAbove) {, +        if (ignoreAbove != Defaults.IGNORE_ABOVE) {, +            builder.field("ignore_above", ignoreAbove);, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/SimpleMapperTests.java, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/test-mapping.json, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/test1.json, +++ b/src/main/java/org/elasticsearch/index/mapper/core/StringFieldMapper.java, +        public static final int IGNORE_ABOVE = -1;, +        protected int ignoreAbove = Defaults.IGNORE_ABOVE;, +        public Builder ignoreAbove(int ignoreAbove) {, +            this.ignoreAbove = ignoreAbove;, +                    indexAnalyzer, searchAnalyzer, searchQuotedAnalyzer, positionOffsetGap, ignoreAbove);, +                } else if (propName.equals("ignore_above")) {, +                    builder.ignoreAbove(XContentMapValues.nodeIntegerValue(propNode, -1));, +    private int ignoreAbove;, +                searchAnalyzer, searchAnalyzer, Defaults.POSITION_OFFSET_GAP, Defaults.IGNORE_ABOVE);, +                                NamedAnalyzer searchQuotedAnalyzer, int positionOffsetGap, int ignoreAbove) {, +        this.ignoreAbove = ignoreAbove;, +        if (ignoreAbove > 0 && value.length() > ignoreAbove) {, +        if (ignoreAbove != Defaults.IGNORE_ABOVE) {, +            builder.field("ignore_above", ignoreAbove);, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/SimpleMapperTests.java, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/test-mapping.json, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/simple/test1.json, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/string/SimpleStringMappingTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the]