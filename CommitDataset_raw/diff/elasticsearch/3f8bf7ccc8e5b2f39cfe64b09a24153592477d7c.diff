[+++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +    // TODO test SqlGetIndicesAction. Skipping for now because of lack of serialization support., +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +    // TODO test SqlGetIndicesAction. Skipping for now because of lack of serialization support., +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/TestUtils.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.xpack.sql.plugin.SqlGetIndicesAction;, +, +import java.util.function.BiConsumer;, +        BiConsumer<SqlGetIndicesAction.Request, ActionListener<SqlGetIndicesAction.Response>> getIndices = (request, listener) -> {, +            ClusterState state = client.admin().cluster().prepareState().get(TimeValue.timeValueMinutes(1)).getState();, +            SqlGetIndicesAction.operation(new IndexNameExpressionResolver(Settings.EMPTY), EsCatalog::new, request, state, listener);, +        };, +        PlanExecutor executor = new PlanExecutor(, +                client,, +                () -> client.admin().cluster().prepareState().get(TimeValue.timeValueMinutes(1)).getState(),, +                getIndices,, +                EsCatalog::new);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +    // TODO test SqlGetIndicesAction. Skipping for now because of lack of serialization support., +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/TestUtils.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.xpack.sql.plugin.SqlGetIndicesAction;, +, +import java.util.function.BiConsumer;, +        BiConsumer<SqlGetIndicesAction.Request, ActionListener<SqlGetIndicesAction.Response>> getIndices = (request, listener) -> {, +            ClusterState state = client.admin().cluster().prepareState().get(TimeValue.timeValueMinutes(1)).getState();, +            SqlGetIndicesAction.operation(new IndexNameExpressionResolver(Settings.EMPTY), EsCatalog::new, request, state, listener);, +        };, +        PlanExecutor executor = new PlanExecutor(, +                client,, +                () -> client.admin().cluster().prepareState().get(TimeValue.timeValueMinutes(1)).getState(),, +                getIndices,, +                EsCatalog::new);, +++ b/qa/sql/security/roles.yml, +read_all:, +    - names: bort, +      privileges: [read], +, +read_bort:, +  indices:, +    - names: bort, +      privileges: [read], +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/SqlLicenseIT.java, +    // TODO test SqlGetIndicesAction. Skipping for now because of lack of serialization support., +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/sql/TestUtils.java, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.xpack.sql.plugin.SqlGetIndicesAction;, +, +import java.util.function.BiConsumer;, +        BiConsumer<SqlGetIndicesAction.Request, ActionListener<SqlGetIndicesAction.Response>> getIndices = (request, listener) -> {, +            ClusterState state = client.admin().cluster().prepareState().get(TimeValue.timeValueMinutes(1)).getState();, +            SqlGetIndicesAction.operation(new IndexNameExpressionResolver(Settings.EMPTY), EsCatalog::new, request, state, listener);, +        };, +        PlanExecutor executor = new PlanExecutor(, +                client,, +                () -> client.admin().cluster().prepareState().get(TimeValue.timeValueMinutes(1)).getState(),, +                getIndices,, +                EsCatalog::new);, +++ b/qa/sql/security/roles.yml, +read_all:, +    - names: bort, +      privileges: [read], +, +read_bort:, +  indices:, +    - names: bort, +      privileges: [read], +++ b/qa/sql/security/src/test/java/org/elasticsearch/xpack/sql/security/SqlSecurityIT.java, +import org.elasticsearch.xpack.sql.plugin.SqlGetIndicesAction;, +import static java.util.Collections.emptyList;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.hasItems;, +        bulk.append("{\"index\":{\"_index\": \"test\", \"_type\": \"doc\", \"_id\":\"1\"}\n");, +        bulk.append("{\"index\":{\"_index\": \"test\", \"_type\": \"doc\", \"_id\":\"2\"}\n");, +        bulk.append("{\"index\":{\"_index\": \"bort\", \"_type\": \"doc\", \"_id\":\"1\"}\n");, +        bulk.append("{\"a\": \"test\"}\n");, +        client().performRequest("PUT", "/_bulk", singletonMap("refresh", "true"),, +    // NOCOMMIT assert that we don't have more audit logs then what we expect., +    public void testQueryWorksAsAdmin() throws Exception {, +        assertAuditForSqlGetTableSyncGranted("test_admin", "test");, +    public void testQueryWithFullAccess() throws Exception {, +        createUser("full_access", "read_all");, +        assertAuditForSqlGetTableSyncGranted("test_admin", "test");, +        assertAuditForSqlGetTableSyncGranted("full_access", "test");, +    public void testQueryNoAccess() throws Exception {, +    public void testQueryWrongAccess() throws Exception {, +    public void testQuerySingleFieldGranted() throws Exception {, +        assertAuditForSqlGetTableSyncGranted("test_admin", "test");, +        assertAuditForSqlGetTableSyncGranted("only_a", "test");]