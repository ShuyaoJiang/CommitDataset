[+++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesWriteHandler.java, +    @Override, +    @Override, +    @Override, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesWriteHandler.java, +    @Override, +    @Override, +    @Override, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4TransportIT.java, +import org.elasticsearch.transport.InboundMessage;, +        protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {, +            super.handleRequest(channel, request, messageLengthBytes);, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesWriteHandler.java, +    @Override, +    @Override, +    @Override, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4TransportIT.java, +import org.elasticsearch.transport.InboundMessage;, +        protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {, +            super.handleRequest(channel, request, messageLengthBytes);, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/transport/nio/NioTransportIT.java, +import org.elasticsearch.transport.InboundMessage;, +        protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {, +            super.handleRequest(channel, request, messageLengthBytes);, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesWriteHandler.java, +    @Override, +    @Override, +    @Override, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4TransportIT.java, +import org.elasticsearch.transport.InboundMessage;, +        protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {, +            super.handleRequest(channel, request, messageLengthBytes);, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/transport/nio/NioTransportIT.java, +import org.elasticsearch.transport.InboundMessage;, +        protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {, +            super.handleRequest(channel, request, messageLengthBytes);, +++ b/server/src/main/java/org/elasticsearch/transport/CompressibleBytesOutputStream.java, + * {@link CompressibleBytesOutputStream#close()} will NOT close the underlying stream. The byte stream passed, + * in the constructor must be closed individually., +        if (stream != bytesStreamOutput) {, +            IOUtils.close(stream);, +++ b/libs/nio/src/main/java/org/elasticsearch/nio/BytesWriteHandler.java, +    @Override, +    @Override, +    @Override, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4TransportIT.java, +import org.elasticsearch.transport.InboundMessage;, +        protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {, +            super.handleRequest(channel, request, messageLengthBytes);, +++ b/plugins/transport-nio/src/test/java/org/elasticsearch/transport/nio/NioTransportIT.java, +import org.elasticsearch.transport.InboundMessage;, +        protected void handleRequest(TcpChannel channel, InboundMessage.RequestMessage request, int messageLengthBytes) throws IOException {, +            super.handleRequest(channel, request, messageLengthBytes);, +++ b/server/src/main/java/org/elasticsearch/transport/CompressibleBytesOutputStream.java, + * {@link CompressibleBytesOutputStream#close()} will NOT close the underlying stream. The byte stream passed, + * in the constructor must be closed individually., +        if (stream != bytesStreamOutput) {, +            IOUtils.close(stream);, +++ b/server/src/main/java/org/elasticsearch/transport/InboundMessage.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.transport;, +, +import org.elasticsearch.Version;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.compress.Compressor;, +import org.elasticsearch.common.compress.CompressorFactory;, +import org.elasticsearch.common.compress.NotCompressedException;, +import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +import org.elasticsearch.core.internal.io.IOUtils;, +, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Set;, +import java.util.TreeSet;, +, +public abstract class InboundMessage extends NetworkMessage implements Closeable {, +, +    private final StreamInput streamInput;]