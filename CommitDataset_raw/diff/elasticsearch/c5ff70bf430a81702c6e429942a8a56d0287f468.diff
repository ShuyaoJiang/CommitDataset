[+++ b/docs/reference/query-dsl/queries/function-score-query.asciidoc, +but with additional capabilities such as distance and recency scoring (see description below)., +            "FUNCTION": {},, +            "weight": number, +        },, +        {, +            "filter": {},, +            "weight": number, +Because scores can be on different scales (for example, between 0 and 1 for decay functions but arbitrary for `field_value_factor`) and also because sometimes a different impact of functions on the score is desirable, the score of each function can be adjusted with a user defined `weight` (coming[1.4.0]). The `weight` can be defined per function in the `functions` array (example above) and is multiplied with the score computed by the respective function., +If weight is given without any other function declaration, `weight` acts as a function that simply returns the `weight`., +, +===== Weight, +coming[1.4.0], +, +The `weight` score allows you to multiply the score by the provided, +`weight`. This can sometimes be desired since boost value set on, +"weight" : number, +===== Boost factor, +, +deprecated[1.4.0], +, +Same as `weight`. Use `weight` instead., +, +, +    "weight": 5.2,, +            "weight": "3",, +++ b/docs/reference/query-dsl/queries/function-score-query.asciidoc, +but with additional capabilities such as distance and recency scoring (see description below)., +            "FUNCTION": {},, +            "weight": number, +        },, +        {, +            "filter": {},, +            "weight": number, +Because scores can be on different scales (for example, between 0 and 1 for decay functions but arbitrary for `field_value_factor`) and also because sometimes a different impact of functions on the score is desirable, the score of each function can be adjusted with a user defined `weight` (coming[1.4.0]). The `weight` can be defined per function in the `functions` array (example above) and is multiplied with the score computed by the respective function., +If weight is given without any other function declaration, `weight` acts as a function that simply returns the `weight`., +, +===== Weight, +coming[1.4.0], +, +The `weight` score allows you to multiply the score by the provided, +`weight`. This can sometimes be desired since boost value set on, +"weight" : number, +===== Boost factor, +, +deprecated[1.4.0], +, +Same as `weight`. Use `weight` instead., +, +, +    "weight": 5.2,, +            "weight": "3",, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +@Deprecated, +    public static final String BOOST_WEIGHT_ERROR_MESSAGE = "'boost_factor' and 'weight' cannot be used together. Use 'weight'.";, +, +, +++ b/docs/reference/query-dsl/queries/function-score-query.asciidoc, +but with additional capabilities such as distance and recency scoring (see description below)., +            "FUNCTION": {},, +            "weight": number, +        },, +        {, +            "filter": {},, +            "weight": number, +Because scores can be on different scales (for example, between 0 and 1 for decay functions but arbitrary for `field_value_factor`) and also because sometimes a different impact of functions on the score is desirable, the score of each function can be adjusted with a user defined `weight` (coming[1.4.0]). The `weight` can be defined per function in the `functions` array (example above) and is multiplied with the score computed by the respective function., +If weight is given without any other function declaration, `weight` acts as a function that simply returns the `weight`., +, +===== Weight, +coming[1.4.0], +, +The `weight` score allows you to multiply the score by the provided, +`weight`. This can sometimes be desired since boost value set on, +"weight" : number, +===== Boost factor, +, +deprecated[1.4.0], +, +Same as `weight`. Use `weight` instead., +, +, +    "weight": 5.2,, +            "weight": "3",, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/BoostScoreFunction.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +@Deprecated, +    public static final String BOOST_WEIGHT_ERROR_MESSAGE = "'boost_factor' and 'weight' cannot be used together. Use 'weight'.";, +, +, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/ScoreFunction.java, +++ b/docs/reference/query-dsl/queries/function-score-query.asciidoc, +but with additional capabilities such as distance and recency scoring (see description below)., +            "FUNCTION": {},, +            "weight": number, +        },, +        {, +            "filter": {},, +            "weight": number, +Because scores can be on different scales (for example, between 0 and 1 for decay functions but arbitrary for `field_value_factor`) and also because sometimes a different impact of functions on the score is desirable, the score of each function can be adjusted with a user defined `weight` (coming[1.4.0]). The `weight` can be defined per function in the `functions` array (example above) and is multiplied with the score computed by the respective function.]