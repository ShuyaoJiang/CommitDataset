[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public final class ClusterInfo {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public final class ClusterInfo {, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public final class ClusterInfo {, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public void initialize(ShardRouting shard, String nodeId) {, +        shard.initialize(nodeId);, +    public ShardRouting relocate(ShardRouting shard, String nodeId) {, +        shard.relocate(nodeId);, +            public void initialize(String nodeId) {, +                initialize(nodeId, current.version());, +            }, +, +            /**, +             * Initializes the current unassigned shard and moves it from the unassigned list., +             */, +            public void initialize(String nodeId, long version) {, +                nodes.initialize(new ShardRouting(current, version), nodeId);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public final class ClusterInfo {, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public void initialize(ShardRouting shard, String nodeId) {, +        shard.initialize(nodeId);, +    public ShardRouting relocate(ShardRouting shard, String nodeId) {, +        shard.relocate(nodeId);, +            public void initialize(String nodeId) {, +                initialize(nodeId, current.version());, +            }, +, +            /**, +             * Initializes the current unassigned shard and moves it from the unassigned list., +             */, +            public void initialize(String nodeId, long version) {, +                nodes.initialize(new ShardRouting(current, version), nodeId);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), copy.allocationId(), true);, +                 UnassignedInfo unassignedInfo, AllocationId allocationId, boolean internal) {, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, null, true);, +                AllocationId.newTargetRelocation(allocationId), true);, +    void initialize(String nodeId) {, +    void relocate(String relocatingNodeId) {, +, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public final class ClusterInfo {, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public void initialize(ShardRouting shard, String nodeId) {, +        shard.initialize(nodeId);, +    public ShardRouting relocate(ShardRouting shard, String nodeId) {, +        shard.relocate(nodeId);, +            public void initialize(String nodeId) {, +                initialize(nodeId, current.version());, +            }, +, +            /**, +             * Initializes the current unassigned shard and moves it from the unassigned list., +             */, +            public void initialize(String nodeId, long version) {, +                nodes.initialize(new ShardRouting(current, version), nodeId);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), copy.allocationId(), true);, +                 UnassignedInfo unassignedInfo, AllocationId allocationId, boolean internal) {, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, null, true);, +                AllocationId.newTargetRelocation(allocationId), true);, +    void initialize(String nodeId) {, +    void relocate(String relocatingNodeId) {, +, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java, +                        ShardRouting targetRelocatingShard = routingNodes.relocate(shard, target.nodeId());, +                            routingNodes.initialize(shard, routingNodes.node(minNode.getNodeId()).nodeId());, +                            routingNodes.relocate(candidate, lowRoutingNode.nodeId());, +                            routingNodes.initialize(candidate, routingNodes.node(minNode.getNodeId()).nodeId());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +public final class ClusterInfo {, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +    public void initialize(ShardRouting shard, String nodeId) {, +        shard.initialize(nodeId);, +    public ShardRouting relocate(ShardRouting shard, String nodeId) {, +        shard.relocate(nodeId);, +            public void initialize(String nodeId) {, +                initialize(nodeId, current.version());, +            }, +, +            /**, +             * Initializes the current unassigned shard and moves it from the unassigned list., +             */, +            public void initialize(String nodeId, long version) {, +                nodes.initialize(new ShardRouting(current, version), nodeId);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +        this(copy.index(), copy.id(), copy.currentNodeId(), copy.relocatingNodeId(), copy.restoreSource(), copy.primary(), copy.state(), version, copy.unassignedInfo(), copy.allocationId(), true);, +                 UnassignedInfo unassignedInfo, AllocationId allocationId, boolean internal) {, +        return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, null, true);]