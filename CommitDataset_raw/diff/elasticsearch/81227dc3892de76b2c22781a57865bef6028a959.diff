[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/SystemPrivilege.java, +            "indices:admin/seq_no/global_checkpoint_sync*", // needed for global checkpoint syncs, +            "indices:admin/settings/update" // needed for DiskThresholdMonitor.markIndicesReadOnly, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/SystemPrivilege.java, +            "indices:admin/seq_no/global_checkpoint_sync*", // needed for global checkpoint syncs, +            "indices:admin/settings/update" // needed for DiskThresholdMonitor.markIndicesReadOnly, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/PrivilegeTests.java, +        assertThat(predicate.test("indices:admin/settings/update"), is(true));, +        assertThat(predicate.test("indices:admin/settings/foo"), is(false));, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/SystemPrivilege.java, +            "indices:admin/seq_no/global_checkpoint_sync*", // needed for global checkpoint syncs, +            "indices:admin/settings/update" // needed for DiskThresholdMonitor.markIndicesReadOnly, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/PrivilegeTests.java, +        assertThat(predicate.test("indices:admin/settings/update"), is(true));, +        assertThat(predicate.test("indices:admin/settings/foo"), is(false));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +            logger.debug("action [{}] is unauthorized for user [{}] run as [{}]", action, authUser.principal(),, +                    authentication.getUser().principal());, +        logger.debug("action [{}] is unauthorized for user [{}]", action, authUser.principal());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/privilege/SystemPrivilege.java, +            "indices:admin/seq_no/global_checkpoint_sync*", // needed for global checkpoint syncs, +            "indices:admin/settings/update" // needed for DiskThresholdMonitor.markIndicesReadOnly, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/authz/privilege/PrivilegeTests.java, +        assertThat(predicate.test("indices:admin/settings/update"), is(true));, +        assertThat(predicate.test("indices:admin/settings/foo"), is(false));, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +            logger.debug("action [{}] is unauthorized for user [{}] run as [{}]", action, authUser.principal(),, +                    authentication.getUser().principal());, +        logger.debug("action [{}] is unauthorized for user [{}]", action, authUser.principal());, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/AuthorizationServiceTests.java, +    public void testActionsForSystemUserIsAuthorized() {, +        final TransportRequest request = mock(TransportRequest.class);, +        final Authentication authentication = createAuthentication(SystemUser.INSTANCE);, +        final String[] actions = { "indices:monitor/whatever", "internal:whatever", "cluster:monitor/whatever", "cluster:admin/reroute",, +                "indices:admin/mapping/put", "indices:admin/template/put", "indices:admin/seq_no/global_checkpoint_sync",, +                "indices:admin/settings/update" };, +        for (String action : actions) {, +            authorize(authentication, action, request);, +            verify(auditTrail).accessGranted(authentication, action, request, new String[] { SystemUser.ROLE_NAME });, +        }, +    public void testIndicesActionsForSystemUserWhichAreNotAuthorized() {, +    public void testClusterAdminActionsForSystemUserWhichAreNotAuthorized() {, +        verify(auditTrail).accessDenied(authentication, "cluster:admin/whatever", request, new String[] { SystemUser.ROLE_NAME });, +    public void testClusterAdminSnapshotStatusActionForSystemUserWhichIsNotAuthorized() {, +        verify(auditTrail).accessDenied(authentication, "cluster:admin/snapshot/status", request, new String[] { SystemUser.ROLE_NAME });]