[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void updateIndexingBufferSize(ByteSizeValue indexingBufferSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void updateIndexingBufferSize(ByteSizeValue indexingBufferSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    @Override public void updateIndexingBufferSize(ByteSizeValue indexingBufferSize) {, +            // LUCENE MONITOR - If this restriction is removed from Lucene, remove it from here, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void updateIndexingBufferSize(ByteSizeValue indexingBufferSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    @Override public void updateIndexingBufferSize(ByteSizeValue indexingBufferSize) {, +            // LUCENE MONITOR - If this restriction is removed from Lucene, remove it from here, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.index.translog.TranslogService;, +        try {, +            // now we can close the translog service, we need to close it before the we close the shard, +            shardInjector.getInstance(TranslogService.class).close();, +        } catch (Exception e) {, +            // ignore, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void updateIndexingBufferSize(ByteSizeValue indexingBufferSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    @Override public void updateIndexingBufferSize(ByteSizeValue indexingBufferSize) {, +            // LUCENE MONITOR - If this restriction is removed from Lucene, remove it from here, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.index.translog.TranslogService;, +        try {, +            // now we can close the translog service, we need to close it before the we close the shard, +            shardInjector.getInstance(TranslogService.class).close();, +        } catch (Exception e) {, +            // ignore, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/TranslogModule.java, +        bind(TranslogService.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/Engine.java, +    void updateIndexingBufferSize(ByteSizeValue indexingBufferSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    @Override public void updateIndexingBufferSize(ByteSizeValue indexingBufferSize) {, +            // LUCENE MONITOR - If this restriction is removed from Lucene, remove it from here, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.index.translog.TranslogService;, +        try {, +            // now we can close the translog service, we need to close it before the we close the shard, +            shardInjector.getInstance(TranslogService.class).close();, +        } catch (Exception e) {, +            // ignore, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/TranslogModule.java, +        bind(TranslogService.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/TranslogService.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.translog;, +, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.engine.FlushNotAllowedEngineException;, +import org.elasticsearch.index.settings.IndexSettings;, +import org.elasticsearch.index.shard.AbstractIndexShardComponent;, +import org.elasticsearch.index.shard.IndexShardState;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.index.shard.service.IndexShard;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.util.concurrent.ScheduledFuture;, +, +import static org.elasticsearch.common.unit.TimeValue.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class TranslogService extends AbstractIndexShardComponent {, +, +    private final ThreadPool threadPool;, +, +    private final IndexShard indexShard;, +]