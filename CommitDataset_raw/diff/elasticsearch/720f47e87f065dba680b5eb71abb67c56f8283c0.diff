[+++ b/core/src/main/java/org/elasticsearch/indices/query/IndicesQueriesRegistry.java, +import org.elasticsearch.search.sort.SortBuilderTemp;, +    private Map<String, SortBuilderTemp<?>> sortParsers;, +    , +    /**, +     * Returns all registered sort parsers, +     */, +    public Map<String, SortBuilderTemp<?>> sortParsers() {, +        return sortParsers;, +    }, +++ b/core/src/main/java/org/elasticsearch/indices/query/IndicesQueriesRegistry.java, +import org.elasticsearch.search.sort.SortBuilderTemp;, +    private Map<String, SortBuilderTemp<?>> sortParsers;, +    , +    /**, +     * Returns all registered sort parsers, +     */, +    public Map<String, SortBuilderTemp<?>> sortParsers() {, +        return sortParsers;, +    }, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +public class FieldSortBuilder extends SortBuilder implements SortBuilderTemp<FieldSortBuilder> {, +    public static final String NAME = "field_sort";, +, +     * @param fieldName, +     *            The field name., +     * Specifying a type tells Elasticsearch what type the sort values should, +     * have, which is important for cross-index search, if there are sort fields, +     * that exist on some indices only. If the unmapped type is <tt>null</tt>, +     * then query execution will fail if one or more indices don't have a, +     * mapping for the current field., +    /**, +     * Returns the type to use in case the current field is not mapped in an, +     * index., +     */, +     * Defines what values to pick in the case a document contains multiple, +     * values for the targeted sort field. Possible values: min, max, sum and, +     * avg, +    /**, +     * Returns what values to pick in the case a document contains multiple, +     * values for the targeted sort field., +     */, +, +     * Sets the nested filter that the nested objects should match with in order, +     * to be taken into account for sorting., +     * TODO should the above getters and setters be deprecated/ changed in, +     * favour of real getters and setters?, +    /**, +     * Returns the nested filter that the nested objects should match with in, +     * order to be taken into account for sorting., +     */, +     * Sets the nested path if sorting occurs on a field that is inside a nested, +     * object. By default when sorting on a field inside a nested object, the, +     * nearest upper nested object is selected as nested path., +    /**, +     * Returns the nested path if sorting occurs in a field that is inside a, +     * nested object., +     */, +        return (Objects.equals(this.fieldName, builder.fieldName) && Objects.equals(this.nestedFilter, builder.nestedFilter), +                && Objects.equals(this.nestedPath, builder.nestedPath) && Objects.equals(this.missing, builder.missing), +                && Objects.equals(this.order, builder.order) && Objects.equals(this.sortMode, builder.sortMode), +                && Objects.equals(this.unmappedType, builder.unmappedType));, +        return Objects.hash(this.fieldName, this.nestedFilter, this.nestedPath, this.missing, this.order, this.sortMode, this.unmappedType);, +    @Override, +    public String getName() {, +        return "field_sort_builder";, +    }, +, +    @Override, +    public SortBuilderTemp<FieldSortBuilder> getBuilderPrototype() {, +        return PROTOTYPE;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/indices/query/IndicesQueriesRegistry.java, +import org.elasticsearch.search.sort.SortBuilderTemp;, +    private Map<String, SortBuilderTemp<?>> sortParsers;, +    , +    /**, +     * Returns all registered sort parsers, +     */, +    public Map<String, SortBuilderTemp<?>> sortParsers() {, +        return sortParsers;, +    }, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +public class FieldSortBuilder extends SortBuilder implements SortBuilderTemp<FieldSortBuilder> {, +    public static final String NAME = "field_sort";, +, +     * @param fieldName, +     *            The field name., +     * Specifying a type tells Elasticsearch what type the sort values should, +     * have, which is important for cross-index search, if there are sort fields, +     * that exist on some indices only. If the unmapped type is <tt>null</tt>, +     * then query execution will fail if one or more indices don't have a, +     * mapping for the current field., +    /**, +     * Returns the type to use in case the current field is not mapped in an, +     * index., +     */, +     * Defines what values to pick in the case a document contains multiple, +     * values for the targeted sort field. Possible values: min, max, sum and]