[+++ b/src/test/java/org/elasticsearch/versioning/SimpleVersioningTests.java, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Random;, +import java.util.Set;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.apache.lucene.util.LuceneTestCase.Slow;, +import org.apache.lucene.util.TestUtil;, +import org.elasticsearch.action.index.IndexRequest;, +import static org.hamcrest.Matchers.lessThanOrEqualTo;, +, +, +    // Poached from Lucene's TestIDVersionPostingsFormat:, +, +    private interface IDSource {, +        String next();, +    }, +, +    private IDSource getRandomIDs() {, +        IDSource ids;, +        final Random random = getRandom();, +        switch (random.nextInt(6)) {, +        case 0:, +            // random simple, +            if (VERBOSE) {, +                System.out.println("TEST: use random simple ids");, +            }, +            ids = new IDSource() {, +                    @Override, +                    public String next() {, +                        return TestUtil.randomSimpleString(random);, +                    }, +                };, +            break;, +        case 1:, +            // random realistic unicode, +            if (VERBOSE) {, +                System.out.println("TEST: use random realistic unicode ids");, +            }, +            ids = new IDSource() {, +                    @Override, +                    public String next() {, +                        return TestUtil.randomRealisticUnicodeString(random);, +                    }, +                };, +            break;, +        case 2:, +            // sequential, +            if (VERBOSE) {, +                System.out.println("TEST: use seuquential ids");, +            }, +            ids = new IDSource() {, +                    int upto;, +                    @Override, +                    public String next() {, +                        return Integer.toString(upto++);, +                    }, +                };, +            break;, +        case 3:, +            // zero-pad sequential, +            if (VERBOSE) {, +                System.out.println("TEST: use zero-pad seuquential ids");, +            }, +            ids = new IDSource() {, +                    final int radix = TestUtil.nextInt(random, Character.MIN_RADIX, Character.MAX_RADIX);, +                    final String zeroPad = String.format(Locale.ROOT, "%0" + TestUtil.nextInt(random, 4, 20) + "d", 0);, +                    int upto;, +                    @Override, +                    public String next() {, +                        String s = Integer.toString(upto++);, +                        return zeroPad.substring(zeroPad.length() - s.length()) + s;, +                    }, +                };, +            break;, +        case 4:, +            // random long, +            if (VERBOSE) {, +                System.out.println("TEST: use random long ids");, +            }, +            ids = new IDSource() {, +                    final int radix = TestUtil.nextInt(random, Character.MIN_RADIX, Character.MAX_RADIX);, +                    int upto;, +                    @Override, +                    public String next() {, +                        return Long.toString(random.nextLong() & 0x3ffffffffffffffL, radix);, +                    }, +                };, +            break;, +        case 5:, +            // zero-pad random long, +            if (VERBOSE) {, +                System.out.println("TEST: use zero-pad random long ids");, +            }, +            ids = new IDSource() {, +                    final int radix = TestUtil.nextInt(random, Character.MIN_RADIX, Character.MAX_RADIX);]