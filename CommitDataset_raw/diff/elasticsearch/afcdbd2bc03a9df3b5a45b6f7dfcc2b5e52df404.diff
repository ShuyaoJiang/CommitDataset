[+++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/AutoFollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                    + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/AutoFollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                    + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/FollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                                + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/AutoFollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                    + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/FollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                                + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/scheduler/Cron.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    protected static final TimeZone UTC = TimeZone.getTimeZone(ZoneOffset.UTC);, +    protected static final DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss");, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/AutoFollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                    + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/FollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                                + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/scheduler/Cron.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    protected static final TimeZone UTC = TimeZone.getTimeZone(ZoneOffset.UTC);, +    protected static final DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss");, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/cert/CertificateInfo.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private final ZonedDateTime expiry;, +        this.expiry = certificate.getNotAfter().toInstant().atZone(ZoneOffset.UTC);, +        this.expiry = Instant.ofEpochMilli(in.readLong()).atZone(ZoneOffset.UTC);, +        out.writeLong(expiry.toInstant().toEpochMilli());, +    public ZonedDateTime expiry() {, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/AutoFollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                    + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/FollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                                + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/scheduler/Cron.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    protected static final TimeZone UTC = TimeZone.getTimeZone(ZoneOffset.UTC);, +    protected static final DateFormatter formatter = DateFormatter.forPattern("yyyy-MM-dd'T'HH:mm:ss");, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/cert/CertificateInfo.java, +import java.time.Instant;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +    private final ZonedDateTime expiry;, +        this.expiry = certificate.getNotAfter().toInstant().atZone(ZoneOffset.UTC);, +        this.expiry = Instant.ofEpochMilli(in.readLong()).atZone(ZoneOffset.UTC);, +        out.writeLong(expiry.toInstant().toEpochMilli());, +    public ZonedDateTime expiry() {, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/PostDataFlushResponseTests.java, +, +import java.time.ZonedDateTime;, +import java.util.Date;, +        return new Response(randomBoolean(), Date.from(ZonedDateTime.now(randomZone()).toInstant()));, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/AutoFollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;, +import java.time.ZoneOffset;, +    private static final DateFormatter DATE_TIME_FORMATTER = DateFormatter.forPattern("strict_date_time").withZone(ZoneOffset.UTC);, +                    + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(timestamp) + "\",", +                        + "\"timestamp\":\"" + DATE_TIME_FORMATTER.formatMillis(nodeTimestamp) +  "\"", +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/monitoring/collector/ccr/FollowStatsMonitoringDocTests.java, +import org.elasticsearch.common.time.DateFormatter;]