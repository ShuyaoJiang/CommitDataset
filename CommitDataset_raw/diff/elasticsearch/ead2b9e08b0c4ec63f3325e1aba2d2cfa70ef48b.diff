[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +    /**, +     * Convert a {@linkplain SearchRequest} into a {@linkplain Request}., +     * @param searchRequest the request to convert, +     * @param searchEndpoint the name of the search endpoint. {@literal _search}, +     *    for standard searches and {@literal _rollup_search} for rollup, +     *    searches., +     */, +    static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +    /**, +     * Convert a {@linkplain SearchRequest} into a {@linkplain Request}., +     * @param searchRequest the request to convert, +     * @param searchEndpoint the name of the search endpoint. {@literal _search}, +     *    for standard searches and {@literal _rollup_search} for rollup, +     *    searches., +     */, +    static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +        return performRequestAndParseEntity(, +                searchRequest,, +                r -> RequestConverters.search(r, "_search"),, +                options,, +                SearchResponse::fromXContent,, +                emptySet());, +        performRequestAsyncAndParseEntity(, +                searchRequest,, +                r -> RequestConverters.search(r, "_search"),, +                options,, +                SearchResponse::fromXContent,, +                listener,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +    /**, +     * Convert a {@linkplain SearchRequest} into a {@linkplain Request}., +     * @param searchRequest the request to convert, +     * @param searchEndpoint the name of the search endpoint. {@literal _search}, +     *    for standard searches and {@literal _rollup_search} for rollup, +     *    searches., +     */, +    static Request search(SearchRequest searchRequest, String searchEndpoint) throws IOException {, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint(searchRequest.indices(), searchRequest.types(), searchEndpoint));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +        return performRequestAndParseEntity(, +                searchRequest,, +                r -> RequestConverters.search(r, "_search"),, +                options,, +                SearchResponse::fromXContent,, +                emptySet());, +        performRequestAsyncAndParseEntity(, +                searchRequest,, +                r -> RequestConverters.search(r, "_search"),, +                options,, +                SearchResponse::fromXContent,, +                listener,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RollupClient.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +     * Perform a rollup search., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-search.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public SearchResponse search(SearchRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(, +                request,, +                RollupRequestConverters::search,, +                options,, +                SearchResponse::fromXContent,, +                Collections.emptySet());, +    }, +, +    /**, +     * Perform a rollup search., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-search.html">, +     * the docs</a> for more., +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void searchAsync(SearchRequest request, RequestOptions options, ActionListener<SearchResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(, +                request,, +                RollupRequestConverters::search,, +                options,, +                SearchResponse::fromXContent,, +                listener,, +                Collections.emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +    /**, +     * Convert a {@linkplain SearchRequest} into a {@linkplain Request}., +     * @param searchRequest the request to convert, +     * @param searchEndpoint the name of the search endpoint. {@literal _search}]