[+++ b/core/src/main/java/org/elasticsearch/index/shard/ShardPath.java, +        final String indexUUID = indexSettings.get(IndexMetaData.SETTING_INDEX_UUID, IndexMetaData.INDEX_UUID_NA_VALUE);, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/ShardPath.java, +        final String indexUUID = indexSettings.get(IndexMetaData.SETTING_INDEX_UUID, IndexMetaData.INDEX_UUID_NA_VALUE);, +, +++ b/core/src/test/java/org/elasticsearch/index/shard/NewPathForShardTest.java, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +        // Use 2 data paths:, +, +        // a has lots of free space, but b has little, so new shard should go to a:, +        aFileStore.usableSpace = 100000;, +        bFileStore.usableSpace = 1000;, +, +        ShardId shardId = new ShardId("index", 0);, +        ShardPath result = ShardPath.selectNewPathForShard(nodeEnv, shardId, Settings.EMPTY, 100, Collections.<Path,Integer>emptyMap());, +        assertTrue(result.getDataPath().toString().contains("/a/"));, +, +        // test the reverse: b has lots of free space, but a has little, so new shard should go to b:, +        aFileStore.usableSpace = 1000;, +        bFileStore.usableSpace = 100000;, +, +        shardId = new ShardId("index", 0);, +        result = ShardPath.selectNewPathForShard(nodeEnv, shardId, Settings.EMPTY, 100, Collections.<Path,Integer>emptyMap());, +        assertTrue(result.getDataPath().toString().contains("/b/"));, +, +        // now a and be have equal usable space; we allocate two shards to the node, and each should go to different paths:, +        aFileStore.usableSpace = 100000;, +        bFileStore.usableSpace = 100000;, +, +        Map<Path,Integer> dataPathToShardCount = new HashMap<>();, +        ShardPath result1 = ShardPath.selectNewPathForShard(nodeEnv, shardId, Settings.EMPTY, 100, dataPathToShardCount);, +        dataPathToShardCount.put(NodeEnvironment.shardStatePathToDataPath(result1.getDataPath()), 1);, +        ShardPath result2 = ShardPath.selectNewPathForShard(nodeEnv, shardId, Settings.EMPTY, 100, dataPathToShardCount);, +, +        // This was the original failure: on a node with 2 disks that have nearly equal, +        // free space, we would always allocate all incoming shards to the one path that, +        // had the most free space:, +        assertNotEquals(result1.getDataPath(), result2.getDataPath());]