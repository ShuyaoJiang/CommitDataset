[+++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    variables you specify. You can specify a `preference` to control, +    The default value is `_only_local`. Additionally, you can specify, +    a `prune` to control if all phrase suggestions will be, +    returned, when set to `true` the suggestions will have an additional, +    option `collate_match`, which will be `true` if matching documents, +    for the phrase was found, `false` otherwise. The default value for, +    `prune` is `false`., +           "prune": true <5>, +<5> All suggestions will be returned with an extra `collate_match`, +    option indicating whether the generated phrase matched any, +    document., +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    variables you specify. You can specify a `preference` to control, +    The default value is `_only_local`. Additionally, you can specify, +    a `prune` to control if all phrase suggestions will be, +    returned, when set to `true` the suggestions will have an additional, +    option `collate_match`, which will be `true` if matching documents, +    for the phrase was found, `false` otherwise. The default value for, +    `prune` is `false`., +           "prune": true <5>, +<5> All suggestions will be returned with an extra `collate_match`, +    option indicating whether the generated phrase matched any, +    document., +++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +import org.elasticsearch.Version;, +                    static final XContentBuilderString COLLATE_MATCH = new XContentBuilderString("collate_match");, +                private Boolean collateMatch;, +                public Option(Text text, Text highlighted, float score, Boolean collateMatch) {, +                    this.collateMatch = collateMatch;, +                }, +, +                public Option(Text text, Text highlighted, float score) {, +                    this(text, highlighted, score, null);, +                /**, +                 * @return true if collation has found a match for the entry., +                 * if collate was not set, the value defaults to <code>true</code>, +                 */, +                public boolean collateMatch() {, +                    return (collateMatch != null) ? collateMatch : true;, +                }, +                , +, +                    if (in.getVersion().onOrAfter(Version.V_1_4_0)) {, +                        collateMatch = in.readOptionalBoolean();, +                    }, +, +                    if (out.getVersion().onOrAfter(Version.V_1_4_0)) {, +                        out.writeOptionalBoolean(collateMatch);, +                    }, +                    if (collateMatch != null) {, +                        builder.field(Fields.COLLATE_MATCH, collateMatch.booleanValue());, +                    }, +++ b/docs/reference/search/suggesters/phrase-suggest.asciidoc, +    variables you specify. You can specify a `preference` to control, +    The default value is `_only_local`. Additionally, you can specify, +    a `prune` to control if all phrase suggestions will be, +    returned, when set to `true` the suggestions will have an additional, +    option `collate_match`, which will be `true` if matching documents, +    for the phrase was found, `false` otherwise. The default value for, +    `prune` is `false`., +           "prune": true <5>, +<5> All suggestions will be returned with an extra `collate_match`, +    option indicating whether the generated phrase matched any, +    document., +++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +import org.elasticsearch.Version;, +                    static final XContentBuilderString COLLATE_MATCH = new XContentBuilderString("collate_match");, +                private Boolean collateMatch;, +                public Option(Text text, Text highlighted, float score, Boolean collateMatch) {, +                    this.collateMatch = collateMatch;, +                }, +, +                public Option(Text text, Text highlighted, float score) {, +                    this(text, highlighted, score, null);, +                /**, +                 * @return true if collation has found a match for the entry., +                 * if collate was not set, the value defaults to <code>true</code>, +                 */, +                public boolean collateMatch() {, +                    return (collateMatch != null) ? collateMatch : true;, +                }, +                , +, +                    if (in.getVersion().onOrAfter(Version.V_1_4_0)) {, +                        collateMatch = in.readOptionalBoolean();, +                    }, +, +                    if (out.getVersion().onOrAfter(Version.V_1_4_0)) {, +                        out.writeOptionalBoolean(collateMatch);, +                    }, +                    if (collateMatch != null) {, +                        builder.field(Fields.COLLATE_MATCH, collateMatch.booleanValue());, +                    }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggestParser.java, +                        } else if ("prune".equals(fieldName)) {, +                            if (parser.isBooleanValue()) {, +                                suggestion.setCollatePrune(parser.booleanValue());, +                            } else {, +                                throw new ElasticsearchIllegalArgumentException("suggester[phrase][collate] prune must be either 'true' or 'false'");]