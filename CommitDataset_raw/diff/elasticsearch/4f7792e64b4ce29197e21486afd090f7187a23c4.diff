[+++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +import java.util.Arrays;, +                return a.compareTo(b) < 0;, +            } else if (corrections.top().compareTo(score, path) < 0) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +import java.util.Arrays;, +                return a.compareTo(b) < 0;, +            } else if (corrections.top().compareTo(score, path) < 0) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/Correction.java, +, +public final class Correction implements Comparable<Correction> {, +, +    /** Lower scores sorts first; if scores are equal,, +     *  than later terms (zzz) sort first .*/, +    @Override, +    public int compareTo(Correction other) {, +        return compareTo(other.score, other.candidates);, +    }, +, +    int compareTo(double otherScore, Candidate[] otherCandidates) {, +        if (score == otherScore) {, +            int limit = Math.min(candidates.length, otherCandidates.length);, +            for (int i=0;i<limit;i++) {, +                int cmp = candidates[i].term.compareTo(otherCandidates[i].term);, +                if (cmp != 0) {, +                    // Later (zzz) terms sort before (are weaker than) earlier (aaa) terms:, +                    return -cmp;, +                }, +            }, +, +            return candidates.length - otherCandidates.length;, +        } else {, +            return Double.compare(score, otherScore);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +import java.util.Arrays;, +                return a.compareTo(b) < 0;, +            } else if (corrections.top().compareTo(score, path) < 0) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/Correction.java, +, +public final class Correction implements Comparable<Correction> {, +, +    /** Lower scores sorts first; if scores are equal,, +     *  than later terms (zzz) sort first .*/, +    @Override, +    public int compareTo(Correction other) {, +        return compareTo(other.score, other.candidates);, +    }, +, +    int compareTo(double otherScore, Candidate[] otherCandidates) {, +        if (score == otherScore) {, +            int limit = Math.min(candidates.length, otherCandidates.length);, +            for (int i=0;i<limit;i++) {, +                int cmp = candidates[i].term.compareTo(otherCandidates[i].term);, +                if (cmp != 0) {, +                    // Later (zzz) terms sort before (are weaker than) earlier (aaa) terms:, +                    return -cmp;, +                }, +            }, +, +            return candidates.length - otherCandidates.length;, +        } else {, +            return Double.compare(score, otherScore);, +        }, +    }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import java.util.Arrays;, +import java.util.Collections;, +            // Merge new candidates into existing ones,, +            // deduping:, +            // Sort strongest to weakest:, +            Arrays.sort(this.candidates, Collections.reverseOrder());, +    public static class Candidate implements Comparable<Candidate> {, +            return "Candidate [term=" + term.utf8ToString() + ", stringDistance=" + stringDistance + ", score=" + score + ", frequency=" + frequency + , +, +        /** Lower scores sort first; if scores are equal, then later (zzz) terms sort first */, +        @Override, +        public int compareTo(Candidate other) {, +            if (score == other.score) {, +                // Later (zzz) terms sort before earlier (aaa) terms:, +                return other.term.compareTo(term);, +            } else {, +                return Double.compare(score, other.score);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +import java.util.Arrays;, +                return a.compareTo(b) < 0;, +            } else if (corrections.top().compareTo(score, path) < 0) {, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/Correction.java, +, +public final class Correction implements Comparable<Correction> {, +, +    /** Lower scores sorts first; if scores are equal,, +     *  than later terms (zzz) sort first .*/, +    @Override, +    public int compareTo(Correction other) {, +        return compareTo(other.score, other.candidates);, +    }]