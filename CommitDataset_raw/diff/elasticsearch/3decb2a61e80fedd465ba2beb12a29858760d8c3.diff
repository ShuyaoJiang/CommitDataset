[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBinaryFieldMapper.java, +import org.codehaus.jackson.JsonNode;, +import org.codehaus.jackson.node.ObjectNode;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import static org.elasticsearch.index.mapper.json.JsonMapperBuilders.*;, +import static org.elasticsearch.index.mapper.json.JsonTypeParsers.*;, +, +    public static class TypeParser implements JsonTypeParser {, +        @Override public JsonMapper.Builder parse(String name, JsonNode node, ParserContext parserContext) throws MapperParsingException {, +            ObjectNode binaryNode = (ObjectNode) node;, +            JsonBinaryFieldMapper.Builder builder = binaryField(name);, +            parseJsonField(builder, name, binaryNode, parserContext);, +            return builder;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBinaryFieldMapper.java, +import org.codehaus.jackson.JsonNode;, +import org.codehaus.jackson.node.ObjectNode;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import static org.elasticsearch.index.mapper.json.JsonMapperBuilders.*;, +import static org.elasticsearch.index.mapper.json.JsonTypeParsers.*;, +, +    public static class TypeParser implements JsonTypeParser {, +        @Override public JsonMapper.Builder parse(String name, JsonNode node, ParserContext parserContext) throws MapperParsingException {, +            ObjectNode binaryNode = (ObjectNode) node;, +            JsonBinaryFieldMapper.Builder builder = binaryField(name);, +            parseJsonField(builder, name, binaryNode, parserContext);, +            return builder;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBooleanFieldMapper.java, +import org.codehaus.jackson.JsonNode;, +import org.codehaus.jackson.node.ObjectNode;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import java.util.Iterator;, +import java.util.Map;, +, +import static org.elasticsearch.index.mapper.json.JsonMapperBuilders.*;, +import static org.elasticsearch.index.mapper.json.JsonTypeParsers.*;, +import static org.elasticsearch.util.json.JacksonNodes.*;, +    public static class TypeParser implements JsonTypeParser {, +        @Override public JsonMapper.Builder parse(String name, JsonNode node, ParserContext parserContext) throws MapperParsingException {, +            ObjectNode booleanNode = (ObjectNode) node;, +            JsonBooleanFieldMapper.Builder builder = booleanField(name);, +            parseJsonField(builder, name, booleanNode, parserContext);, +            for (Iterator<Map.Entry<String, JsonNode>> propsIt = booleanNode.getFields(); propsIt.hasNext();) {, +                Map.Entry<String, JsonNode> entry = propsIt.next();, +                String propName = entry.getKey();, +                JsonNode propNode = entry.getValue();, +                if (propName.equals("nullValue")) {, +                    builder.nullValue(nodeBooleanValue(propNode));, +                }, +            }, +            return builder;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBinaryFieldMapper.java, +import org.codehaus.jackson.JsonNode;, +import org.codehaus.jackson.node.ObjectNode;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import static org.elasticsearch.index.mapper.json.JsonMapperBuilders.*;, +import static org.elasticsearch.index.mapper.json.JsonTypeParsers.*;, +, +    public static class TypeParser implements JsonTypeParser {, +        @Override public JsonMapper.Builder parse(String name, JsonNode node, ParserContext parserContext) throws MapperParsingException {, +            ObjectNode binaryNode = (ObjectNode) node;, +            JsonBinaryFieldMapper.Builder builder = binaryField(name);, +            parseJsonField(builder, name, binaryNode, parserContext);, +            return builder;, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBooleanFieldMapper.java, +import org.codehaus.jackson.JsonNode;, +import org.codehaus.jackson.node.ObjectNode;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import java.util.Iterator;, +import java.util.Map;, +, +import static org.elasticsearch.index.mapper.json.JsonMapperBuilders.*;, +import static org.elasticsearch.index.mapper.json.JsonTypeParsers.*;, +import static org.elasticsearch.util.json.JacksonNodes.*;, +    public static class TypeParser implements JsonTypeParser {, +        @Override public JsonMapper.Builder parse(String name, JsonNode node, ParserContext parserContext) throws MapperParsingException {, +            ObjectNode booleanNode = (ObjectNode) node;, +            JsonBooleanFieldMapper.Builder builder = booleanField(name);, +            parseJsonField(builder, name, booleanNode, parserContext);, +            for (Iterator<Map.Entry<String, JsonNode>> propsIt = booleanNode.getFields(); propsIt.hasNext();) {, +                Map.Entry<String, JsonNode> entry = propsIt.next();, +                String propName = entry.getKey();, +                JsonNode propNode = entry.getValue();, +                if (propName.equals("nullValue")) {, +                    builder.nullValue(nodeBooleanValue(propNode));, +                }, +            }, +            return builder;, +        }]