[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticator.java, +            throw samlException("SAML Response is not a 'success' response: {}", getStatusCodeMessage(status));, +    private String getStatusCodeMessage(Status status) {, +        StatusCode firstLevel = status.getStatusCode();, +        StatusCode subLevel = firstLevel.getStatusCode();, +        StringBuilder sb = new StringBuilder();, +        if (StatusCode.REQUESTER.equals(firstLevel.getValue())) {, +            sb.append("The SAML IdP did not grant the request. It indicated that the Elastic Stack side sent something invalid (");, +        } else if (StatusCode.RESPONDER.equals(firstLevel.getValue())) {, +            sb.append("The request could not be granted due to an error in the SAML IDP side (");, +        } else if (StatusCode.VERSION_MISMATCH.equals(firstLevel.getValue())) {, +            sb.append("The request could not be granted because the SAML IDP doesn't support SAML 2.0 (");, +        } else {, +            sb.append("The request could not be granted, the SAML IDP responded with a non-standard Status code (");, +        }, +        sb.append(firstLevel.getValue()).append(").");, +        if (getMessage(status) != null) {, +            sb.append(" Message: [").append(getMessage(status)).append("]");, +        }, +        if (getDetail(status) != null) {, +            sb.append(" Detail: [").append(getDetail(status)).append("]");, +        }, +        if (null != subLevel) {, +            sb.append(" Specific status code which might indicate what the issue is: [").append(subLevel.getValue()).append("]");, +        }, +        return sb.toString();, +    }, +, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticator.java, +            throw samlException("SAML Response is not a 'success' response: {}", getStatusCodeMessage(status));, +    private String getStatusCodeMessage(Status status) {, +        StatusCode firstLevel = status.getStatusCode();, +        StatusCode subLevel = firstLevel.getStatusCode();, +        StringBuilder sb = new StringBuilder();, +        if (StatusCode.REQUESTER.equals(firstLevel.getValue())) {, +            sb.append("The SAML IdP did not grant the request. It indicated that the Elastic Stack side sent something invalid (");, +        } else if (StatusCode.RESPONDER.equals(firstLevel.getValue())) {, +            sb.append("The request could not be granted due to an error in the SAML IDP side (");, +        } else if (StatusCode.VERSION_MISMATCH.equals(firstLevel.getValue())) {, +            sb.append("The request could not be granted because the SAML IDP doesn't support SAML 2.0 (");, +        } else {, +            sb.append("The request could not be granted, the SAML IDP responded with a non-standard Status code (");, +        }, +        sb.append(firstLevel.getValue()).append(").");, +        if (getMessage(status) != null) {, +            sb.append(" Message: [").append(getMessage(status)).append("]");, +        }, +        if (getDetail(status) != null) {, +            sb.append(" Detail: [").append(getDetail(status)).append("]");, +        }, +        if (null != subLevel) {, +            sb.append(" Specific status code which might indicate what the issue is: [").append(subLevel.getValue()).append("]");, +        }, +        return sb.toString();, +    }, +, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/saml/SamlAuthenticatorTests.java, +        final String xml = getStatusFailedResponse();, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element assertion = (Element) legitimateDocument.getElementsByTagNameNS(SAML20_NS, "Assertion").item(0);, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element assertion = (Element) legitimateDocument.getElementsByTagNameNS(SAML20_NS, "Assertion").item(0);, +        final Element issuer = (Element) forgedAssertion.getElementsByTagNameNS(SAML20_NS, "Issuer").item(0);, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element assertion = (Element) legitimateDocument.getElementsByTagNameNS(SAML20_NS, "Assertion").item(0);, +        final Element issuer = (Element) forgedAssertion.getElementsByTagNameNS(SAML20_NS, "Issuer").item(0);, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element assertion = (Element) legitimateDocument.getElementsByTagNameNS(SAML20_NS, "Assertion").item(0);, +        final Element response = (Element) legitimateDocument.getElementsByTagNameNS(SAML20P_NS, "Response").item(0);, +        final Element assertion = (Element) legitimateDocument.getElementsByTagNameNS(SAML20_NS, "Assertion").item(0);, +        final Element issuer = (Element) forgedAssertion.getElementsByTagNameNS(SAML20_NS, "Issuer").item(0);, +    private String getStatusFailedResponse() {, +        final Instant now = clock.instant();, +        return "<?xml version='1.0' encoding='UTF-8'?>\n" +, +            "<proto:Response Destination='" + SP_ACS_URL + "' ID='" + randomId() + "' InResponseTo='" + requestId +, +            "' IssueInstant='" + now + "' Version='2.0'" +, +            " xmlns:proto='urn:oasis:names:tc:SAML:2.0:protocol'" +, +            " xmlns:assert='urn:oasis:names:tc:SAML:2.0:assertion'" +, +            " xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'" +, +            " xmlns:xs='http://www.w3.org/2001/XMLSchema'" +, +            " xmlns:ds='http://www.w3.org/2000/09/xmldsig#' >" +, +            "<assert:Issuer>" + IDP_ENTITY_ID + "</assert:Issuer>" +, +            "<proto:Status><proto:StatusCode Value='urn:oasis:names:tc:SAML:2.0:status:Requester'>" +, +            "<proto:StatusCode Value='urn:oasis:names:tc:SAML:2.0:status:InvalidNameIDPolicy'/></proto:StatusCode>" +, +            "</proto:Status>" +, +            "</proto:Response>";, +    }, +]