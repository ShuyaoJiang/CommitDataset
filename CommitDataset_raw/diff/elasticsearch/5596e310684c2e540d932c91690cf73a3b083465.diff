[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +        args.addAll(config.systemProperties.collect { key, value -> "-D${key}=${value}" }), +                args.add("-D${property.getKey()}=${property.getValue()}"), +        args.add("-Des.path.conf=${confDir}"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +        args.addAll(config.systemProperties.collect { key, value -> "-D${key}=${value}" }), +                args.add("-D${property.getKey()}=${property.getValue()}"), +        args.add("-Des.path.conf=${confDir}"), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCLIParser.java" checks="LineLength" />, +  <suppress files="qa[/\\]evil-tests[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCliParserTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +        args.addAll(config.systemProperties.collect { key, value -> "-D${key}=${value}" }), +                args.add("-D${property.getKey()}=${property.getValue()}"), +        args.add("-Des.path.conf=${confDir}"), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCLIParser.java" checks="LineLength" />, +  <suppress files="qa[/\\]evil-tests[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCliParserTests.java" checks="LineLength" />, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +        args.addAll(config.systemProperties.collect { key, value -> "-D${key}=${value}" }), +                args.add("-D${property.getKey()}=${property.getValue()}"), +        args.add("-Des.path.conf=${confDir}"), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCLIParser.java" checks="LineLength" />, +  <suppress files="qa[/\\]evil-tests[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCliParserTests.java" checks="LineLength" />, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +        args.addAll(config.systemProperties.collect { key, value -> "-D${key}=${value}" }), +                args.add("-D${property.getKey()}=${property.getValue()}"), +        args.add("-Des.path.conf=${confDir}"), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCLIParser.java" checks="LineLength" />, +  <suppress files="qa[/\\]evil-tests[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCliParserTests.java" checks="LineLength" />, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +            convertMultiPhraseQuery(0, new int[q.getTermArrays().length], q, q.getTermArrays(), q.getPositions(), reader, flatQueries);, +    private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, Term[][] terms, int[] pos, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +        if (currentPos == terms.length) {, +                queryBuilder.add(terms[i][termsIdx[i]], pos[i]);, +            Term[] t = terms[currentPos];, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        args.add("-Des.node.portsfile=true"), +        args.addAll(config.systemProperties.collect { key, value -> "-D${key}=${value}" }), +                args.add("-D${property.getKey()}=${property.getValue()}"), +        args.add("-Des.path.conf=${confDir}"), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCLIParser.java" checks="LineLength" />, +  <suppress files="qa[/\\]evil-tests[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]bootstrap[/\\]BootstrapCliParserTests.java" checks="LineLength" />, +++ b/buildSrc/version.properties, +lucene            = 6.0.0-snapshot-f0aa4fc, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +            MultiPhraseQuery.Builder builder = new MultiPhraseQuery.Builder((MultiPhraseQuery) q);, +            builder.setSlop(slop);, +            return builder.build();, +++ b/core/src/main/java/org/apache/lucene/search/vectorhighlight/CustomFieldQuery.java, +            convertMultiPhraseQuery(0, new int[q.getTermArrays().length], q, q.getTermArrays(), q.getPositions(), reader, flatQueries);, +    private void convertMultiPhraseQuery(int currentPos, int[] termsIdx, MultiPhraseQuery orig, Term[][] terms, int[] pos, IndexReader reader, Collection<Query> flatQueries) throws IOException {, +        if (currentPos == terms.length) {, +                queryBuilder.add(terms[i][termsIdx[i]], pos[i]);, +            Term[] t = terms[currentPos];, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.PrintStream;, +import java.nio.file.Path;, +import java.util.Locale;, +import java.util.concurrent.CountDownLatch;, +]