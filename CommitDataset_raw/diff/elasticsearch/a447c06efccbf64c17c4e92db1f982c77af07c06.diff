[+++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +import java.util.Collections;, +import java.util.EnumMap;, +    static Map<RestStatus, HttpResponseStatus> MAP;, +, +    static {, +        EnumMap<RestStatus, HttpResponseStatus> map = new EnumMap<>(RestStatus.class);, +        map.put(RestStatus.CONTINUE, HttpResponseStatus.CONTINUE);, +        map.put(RestStatus.SWITCHING_PROTOCOLS, HttpResponseStatus.SWITCHING_PROTOCOLS);, +        map.put(RestStatus.OK, HttpResponseStatus.OK);, +        map.put(RestStatus.CREATED, HttpResponseStatus.CREATED);, +        map.put(RestStatus.ACCEPTED, HttpResponseStatus.ACCEPTED);, +        map.put(RestStatus.NON_AUTHORITATIVE_INFORMATION, HttpResponseStatus.NON_AUTHORITATIVE_INFORMATION);, +        map.put(RestStatus.NO_CONTENT, HttpResponseStatus.NO_CONTENT);, +        map.put(RestStatus.RESET_CONTENT, HttpResponseStatus.RESET_CONTENT);, +        map.put(RestStatus.PARTIAL_CONTENT, HttpResponseStatus.PARTIAL_CONTENT);, +        map.put(RestStatus.MULTI_STATUS, HttpResponseStatus.INTERNAL_SERVER_ERROR); // no status for this??, +        map.put(RestStatus.MULTIPLE_CHOICES, HttpResponseStatus.MULTIPLE_CHOICES);, +        map.put(RestStatus.MOVED_PERMANENTLY, HttpResponseStatus.MOVED_PERMANENTLY);, +        map.put(RestStatus.FOUND, HttpResponseStatus.FOUND);, +        map.put(RestStatus.SEE_OTHER, HttpResponseStatus.SEE_OTHER);, +        map.put(RestStatus.NOT_MODIFIED, HttpResponseStatus.NOT_MODIFIED);, +        map.put(RestStatus.USE_PROXY, HttpResponseStatus.USE_PROXY);, +        map.put(RestStatus.TEMPORARY_REDIRECT, HttpResponseStatus.TEMPORARY_REDIRECT);, +        map.put(RestStatus.BAD_REQUEST, HttpResponseStatus.BAD_REQUEST);, +        map.put(RestStatus.UNAUTHORIZED, HttpResponseStatus.UNAUTHORIZED);, +        map.put(RestStatus.PAYMENT_REQUIRED, HttpResponseStatus.PAYMENT_REQUIRED);, +        map.put(RestStatus.FORBIDDEN, HttpResponseStatus.FORBIDDEN);, +        map.put(RestStatus.NOT_FOUND, HttpResponseStatus.NOT_FOUND);, +        map.put(RestStatus.METHOD_NOT_ALLOWED, HttpResponseStatus.METHOD_NOT_ALLOWED);, +        map.put(RestStatus.NOT_ACCEPTABLE, HttpResponseStatus.NOT_ACCEPTABLE);, +        map.put(RestStatus.PROXY_AUTHENTICATION, HttpResponseStatus.PROXY_AUTHENTICATION_REQUIRED);, +        map.put(RestStatus.REQUEST_TIMEOUT, HttpResponseStatus.REQUEST_TIMEOUT);, +        map.put(RestStatus.CONFLICT, HttpResponseStatus.CONFLICT);, +        map.put(RestStatus.GONE, HttpResponseStatus.GONE);, +        map.put(RestStatus.LENGTH_REQUIRED, HttpResponseStatus.LENGTH_REQUIRED);, +        map.put(RestStatus.PRECONDITION_FAILED, HttpResponseStatus.PRECONDITION_FAILED);, +        map.put(RestStatus.REQUEST_ENTITY_TOO_LARGE, HttpResponseStatus.REQUEST_ENTITY_TOO_LARGE);, +        map.put(RestStatus.REQUEST_URI_TOO_LONG, HttpResponseStatus.REQUEST_URI_TOO_LONG);, +        map.put(RestStatus.UNSUPPORTED_MEDIA_TYPE, HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE);, +        map.put(RestStatus.REQUESTED_RANGE_NOT_SATISFIED, HttpResponseStatus.REQUESTED_RANGE_NOT_SATISFIABLE);, +        map.put(RestStatus.EXPECTATION_FAILED, HttpResponseStatus.EXPECTATION_FAILED);, +        map.put(RestStatus.UNPROCESSABLE_ENTITY, HttpResponseStatus.BAD_REQUEST);, +        map.put(RestStatus.LOCKED, HttpResponseStatus.BAD_REQUEST);, +        map.put(RestStatus.FAILED_DEPENDENCY, HttpResponseStatus.BAD_REQUEST);, +        map.put(RestStatus.TOO_MANY_REQUESTS, TOO_MANY_REQUESTS);, +        map.put(RestStatus.INTERNAL_SERVER_ERROR, HttpResponseStatus.INTERNAL_SERVER_ERROR);, +        map.put(RestStatus.NOT_IMPLEMENTED, HttpResponseStatus.NOT_IMPLEMENTED);, +        map.put(RestStatus.BAD_GATEWAY, HttpResponseStatus.BAD_GATEWAY);, +        map.put(RestStatus.SERVICE_UNAVAILABLE, HttpResponseStatus.SERVICE_UNAVAILABLE);, +        map.put(RestStatus.GATEWAY_TIMEOUT, HttpResponseStatus.GATEWAY_TIMEOUT);, +        map.put(RestStatus.HTTP_VERSION_NOT_SUPPORTED, HttpResponseStatus.HTTP_VERSION_NOT_SUPPORTED);, +        MAP = Collections.unmodifiableMap(map);, +, +    private static HttpResponseStatus getStatus(RestStatus status) {, +        return MAP.getOrDefault(status, HttpResponseStatus.INTERNAL_SERVER_ERROR);]