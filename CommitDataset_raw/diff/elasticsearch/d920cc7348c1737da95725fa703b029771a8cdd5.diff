[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                                XPackLicenseState licenseState, Set<RequestInterceptor> requestInterceptors, ThreadPool threadPool,, +                                SecurityContext securityContext, DestructiveOperations destructiveOperations) {, +            final ActionListener<ActionResponse> contextPreservingListener =, +                    ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);, +            ActionListener<Void> authenticatedListener = ActionListener.wrap(, +                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);, +                            if (interceptor.supports(request)) {, +                                interceptor.intercept(request, user);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                                XPackLicenseState licenseState, Set<RequestInterceptor> requestInterceptors, ThreadPool threadPool,, +                                SecurityContext securityContext, DestructiveOperations destructiveOperations) {, +            final ActionListener<ActionResponse> contextPreservingListener =, +                    ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);, +            ActionListener<Void> authenticatedListener = ActionListener.wrap(, +                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);, +                            if (interceptor.supports(request)) {, +                                interceptor.intercept(request, user);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/crypto/CryptoService.java, +     * The encryption key is derived from the system key., +        SecretKey systemKey = readSystemKey(keyFile, SYSTEM_KEY_REQUIRED_SETTING.get(settings));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                                XPackLicenseState licenseState, Set<RequestInterceptor> requestInterceptors, ThreadPool threadPool,, +                                SecurityContext securityContext, DestructiveOperations destructiveOperations) {, +            final ActionListener<ActionResponse> contextPreservingListener =, +                    ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);, +            ActionListener<Void> authenticatedListener = ActionListener.wrap(, +                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);, +                            if (interceptor.supports(request)) {, +                                interceptor.intercept(request, user);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/crypto/CryptoService.java, +     * The encryption key is derived from the system key., +        SecretKey systemKey = readSystemKey(keyFile, SYSTEM_KEY_REQUIRED_SETTING.get(settings));, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilterTests.java, +        filter = new SecurityActionFilter(Settings.EMPTY, authcService, authzService,, +                        licenseState, new HashSet<>(), threadPool, securityContext, destructiveOperations);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java, +                                XPackLicenseState licenseState, Set<RequestInterceptor> requestInterceptors, ThreadPool threadPool,, +                                SecurityContext securityContext, DestructiveOperations destructiveOperations) {, +            final ActionListener<ActionResponse> contextPreservingListener =, +                    ContextPreservingActionListener.wrapPreservingContext(listener, threadContext);, +            ActionListener<Void> authenticatedListener = ActionListener.wrap(, +                    (aVoid) -> chain.proceed(task, action, request, contextPreservingListener), contextPreservingListener::onFailure);, +                            if (interceptor.supports(request)) {, +                                interceptor.intercept(request, user);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/crypto/CryptoService.java, +     * The encryption key is derived from the system key., +        SecretKey systemKey = readSystemKey(keyFile, SYSTEM_KEY_REQUIRED_SETTING.get(settings));, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilterTests.java, +        filter = new SecurityActionFilter(Settings.EMPTY, authcService, authzService,, +                        licenseState, new HashSet<>(), threadPool, securityContext, destructiveOperations);, +++ b/plugin/src/test/java/org/elasticsearch/xpack/security/crypto/CryptoServiceTests.java]