[+++ b/server/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            IndicesOptions defaultOptions = searchRequest.indicesOptions();, +                        } else {, +                            // TODO we should not be lenient here and fail if there is any unknown key in the source map, +, +++ b/server/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            IndicesOptions defaultOptions = searchRequest.indicesOptions();, +                        } else {, +                            // TODO we should not be lenient here and fail if there is any unknown key in the source map, +, +++ b/server/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions());, +        multiRequest.indicesOptions(indicesOptions);, +++ b/server/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            IndicesOptions defaultOptions = searchRequest.indicesOptions();, +                        } else {, +                            // TODO we should not be lenient here and fail if there is any unknown key in the source map, +, +++ b/server/src/main/java/org/elasticsearch/rest/action/search/RestMultiSearchAction.java, +        IndicesOptions indicesOptions = IndicesOptions.fromRequest(restRequest, multiRequest.indicesOptions());, +        multiRequest.indicesOptions(indicesOptions);, +++ b/server/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java, +import java.util.Collections;, +    public void testDefaultIndicesOptions() throws IOException {, +        final String requestContent = "{\"index\":\"test\", \"expand_wildcards\" : \"open,closed\"}}\r\n" +, +            "{\"query\" : {\"match_all\" :{}}}\r\n";, +        FakeRestRequest restRequest = new FakeRestRequest.Builder(xContentRegistry()), +            .withContent(new BytesArray(requestContent), XContentType.JSON), +            .withParams(Collections.singletonMap("ignore_unavailable", "true")), +            .build();, +        MultiSearchRequest request = RestMultiSearchAction.parseRequest(restRequest, true);, +        assertThat(request.requests().size(), equalTo(1));, +        assertThat(request.requests().get(0).indices()[0], equalTo("test"));, +        assertThat(request.requests().get(0).indicesOptions(),, +            equalTo(IndicesOptions.fromOptions(true, true, true, true, SearchRequest.DEFAULT_INDICES_OPTIONS)));, +        assertThat(request.requests().get(0).types().length, equalTo(0));, +    }, +]