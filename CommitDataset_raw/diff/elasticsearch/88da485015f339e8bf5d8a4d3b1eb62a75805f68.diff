[+++ b/core/src/test/java/org/elasticsearch/test/rest/client/RestClient.java, +, +import org.apache.http.config.Registry;, +import org.apache.http.config.RegistryBuilder;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +import org.apache.http.conn.socket.PlainConnectionSocketFactory;, +import org.apache.http.conn.ssl.SSLConnectionSocketFactory;, +import org.apache.http.conn.ssl.SSLContexts;, +import org.elasticsearch.common.io.PathUtils;, +import java.io.InputStream;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.security.KeyManagementException;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.NoSuchAlgorithmException;, +import java.security.cert.CertificateException;, +import javax.net.ssl.SSLContext;, +, +    public static final String PROTOCOL = "protocol";, +    public static final String TRUSTSTORE_PATH = "truststore.path";, +    public static final String TRUSTSTORE_PASSWORD = "truststore.password";, +, +    private final String protocol;, +        this.protocol = settings.get(PROTOCOL, "http");, +        this.httpClient = createHttpClient(settings);, +            RestResponse restResponse = new RestResponse(httpRequestBuilder(address), +    protected HttpRequestBuilder httpRequestBuilder(InetSocketAddress address) {, +        return new HttpRequestBuilder(httpClient), +                .addHeaders(headers), +                .protocol(protocol), +                .host(address.getHostName()).port(address.getPort());, +    }, +, +        return httpRequestBuilder(address);, +    protected CloseableHttpClient createHttpClient(Settings settings) throws IOException {, +        SSLConnectionSocketFactory sslsf;, +        String keystorePath = settings.get(TRUSTSTORE_PATH);, +        if (keystorePath != null) {, +            final String keystorePass = settings.get(TRUSTSTORE_PASSWORD);, +            if (keystorePass == null) {, +                throw new IllegalStateException(TRUSTSTORE_PATH + " is provided but not " + TRUSTSTORE_PASSWORD);, +            }, +            Path path = PathUtils.get(keystorePath);, +            if (!Files.exists(path)) {, +                throw new IllegalStateException(TRUSTSTORE_PATH + " is set but points to a non-existing file");, +            }, +            try {, +                KeyStore keyStore = KeyStore.getInstance("jks");, +                try (InputStream is = Files.newInputStream(path)) {, +                    keyStore.load(is, keystorePass.toCharArray());, +                }, +                SSLContext sslcontext = SSLContexts.custom(), +                        .loadTrustMaterial(keyStore, null), +                        .build();, +                sslsf = new SSLConnectionSocketFactory(sslcontext);, +            } catch (KeyStoreException|NoSuchAlgorithmException|KeyManagementException|CertificateException e) {, +                throw new RuntimeException(e);, +            }, +        } else {, +            sslsf = SSLConnectionSocketFactory.getSocketFactory();, +        }, +, +        Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create(), +                .register("http", PlainConnectionSocketFactory.getSocketFactory()), +                .register("https", sslsf), +                .build();, +        return HttpClients.createMinimal(new PoolingHttpClientConnectionManager(socketFactoryRegistry, null, null, null, 15, TimeUnit.SECONDS));, +++ b/core/src/test/java/org/elasticsearch/test/rest/client/RestClient.java, +, +import org.apache.http.config.Registry;, +import org.apache.http.config.RegistryBuilder;, +import org.apache.http.conn.socket.ConnectionSocketFactory;, +import org.apache.http.conn.socket.PlainConnectionSocketFactory;, +import org.apache.http.conn.ssl.SSLConnectionSocketFactory;, +import org.apache.http.conn.ssl.SSLContexts;, +import org.elasticsearch.common.io.PathUtils;, +import java.io.InputStream;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.security.KeyManagementException;, +import java.security.KeyStore;, +import java.security.KeyStoreException;, +import java.security.NoSuchAlgorithmException;, +import java.security.cert.CertificateException;, +import javax.net.ssl.SSLContext;, +, +    public static final String PROTOCOL = "protocol";, +    public static final String TRUSTSTORE_PATH = "truststore.path";, +    public static final String TRUSTSTORE_PASSWORD = "truststore.password";, +, +    private final String protocol;, +        this.protocol = settings.get(PROTOCOL, "http");, +        this.httpClient = createHttpClient(settings);, +            RestResponse restResponse = new RestResponse(httpRequestBuilder(address), +    protected HttpRequestBuilder httpRequestBuilder(InetSocketAddress address) {, +        return new HttpRequestBuilder(httpClient), +                .addHeaders(headers), +                .protocol(protocol), +                .host(address.getHostName()).port(address.getPort());]