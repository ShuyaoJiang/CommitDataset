[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/CertificateTool.java, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.io.PathUtils;, +        final Path outputFile = getOutputFile(terminal, outputPathSpec.value(options), csrOnly ? DEFAULT_CSR_FILE : DEFAULT_CERT_FILE);, +            Collection<CertificateInformation> certificateInformations = getCertificateInformationList(terminal, inputFile);, +            Collection<CertificateInformation> certificateInformations = getCertificateInformationList(terminal, inputFile);, +    static Path getOutputFile(Terminal terminal, String outputPath, String defaultFilename) throws IOException {, +            file = resolvePath(outputPath);, +            file = resolvePath(defaultFilename);, +                file = resolvePath(input);, +    @SuppressForbidden(reason = "resolve paths against CWD for a CLI tool"), +    private static Path resolvePath(String pathStr) {, +        return PathUtils.get(Strings.cleanPath(pathStr)).toAbsolutePath();, +    }, +, +    static Collection<CertificateInformation> getCertificateInformationList(Terminal terminal, String inputFile), +            return parseFile(resolvePath(inputFile));, +            final String resolvedCaCertPath = resolvePath(caCertPath).toString();, +            Certificate[] certificates = CertUtils.readCertificates(Collections.singletonList(resolvedCaCertPath), env);, +            PrivateKey privateKey = readPrivateKey(caKeyPath, keyPass, terminal, prompt);, +    private static PrivateKey readPrivateKey(String path, char[] password, Terminal terminal, boolean prompt), +        try (Reader reader = Files.newBufferedReader(resolvePath(path), StandardCharsets.UTF_8)) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ssl/CertificateTool.java, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.io.PathUtils;, +        final Path outputFile = getOutputFile(terminal, outputPathSpec.value(options), csrOnly ? DEFAULT_CSR_FILE : DEFAULT_CERT_FILE);, +            Collection<CertificateInformation> certificateInformations = getCertificateInformationList(terminal, inputFile);, +            Collection<CertificateInformation> certificateInformations = getCertificateInformationList(terminal, inputFile);, +    static Path getOutputFile(Terminal terminal, String outputPath, String defaultFilename) throws IOException {, +            file = resolvePath(outputPath);, +            file = resolvePath(defaultFilename);, +                file = resolvePath(input);, +    @SuppressForbidden(reason = "resolve paths against CWD for a CLI tool"), +    private static Path resolvePath(String pathStr) {, +        return PathUtils.get(Strings.cleanPath(pathStr)).toAbsolutePath();, +    }, +, +    static Collection<CertificateInformation> getCertificateInformationList(Terminal terminal, String inputFile), +            return parseFile(resolvePath(inputFile));, +            final String resolvedCaCertPath = resolvePath(caCertPath).toString();, +            Certificate[] certificates = CertUtils.readCertificates(Collections.singletonList(resolvedCaCertPath), env);, +            PrivateKey privateKey = readPrivateKey(caKeyPath, keyPass, terminal, prompt);, +    private static PrivateKey readPrivateKey(String path, char[] password, Terminal terminal, boolean prompt), +        try (Reader reader = Files.newBufferedReader(resolvePath(path), StandardCharsets.UTF_8)) {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ssl/CertificateToolTests.java, +import org.elasticsearch.common.SuppressForbidden;, +import org.elasticsearch.common.io.PathUtils;, +        Path resolvedOutputFile = CertificateTool.getOutputFile(terminal, outputFile.toString(), null);, +        resolvedOutputFile = CertificateTool.getOutputFile(terminal, null, "out.zip");, +        Path expectedDefaultPath = resolvePath(defaultFilename);, +        resolvedOutputFile = CertificateTool.getOutputFile(terminal, null, defaultFilename);, +        Collection<CertificateInformation> certInfos = CertificateTool.getCertificateInformationList(terminal, null);, +, +    @SuppressForbidden(reason = "resolve paths against CWD for a CLI tool"), +    private static Path resolvePath(String path) {, +        return PathUtils.get(path).toAbsolutePath();, +    }]