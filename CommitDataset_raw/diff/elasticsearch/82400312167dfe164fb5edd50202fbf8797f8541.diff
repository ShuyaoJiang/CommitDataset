[+++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java, +import org.elasticsearch.common.xcontent.StatusToXContent;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.rest.RestStatus;, +import static org.elasticsearch.rest.RestStatus.NOT_FOUND;, +, +public class DeleteResponse extends ActionWriteResponse implements StatusToXContent {, +, +    @Override, +    public RestStatus status() {, +        RestStatus status = getShardInfo().status();, +        if (isFound() == false) {, +            status = NOT_FOUND;, +        }, +        return status;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        ActionWriteResponse.ShardInfo shardInfo = getShardInfo();, +        builder.field(Fields.FOUND, found), +            .field(Fields._INDEX, index), +            .field(Fields._TYPE, type), +            .field(Fields._ID, id), +            .field(Fields._VERSION, version), +            .value(shardInfo);, +        return builder;, +    }, +, +    static final class Fields {, +        static final XContentBuilderString FOUND = new XContentBuilderString("found");, +        static final XContentBuilderString _INDEX = new XContentBuilderString("_index");, +        static final XContentBuilderString _TYPE = new XContentBuilderString("_type");, +        static final XContentBuilderString _ID = new XContentBuilderString("_id");, +        static final XContentBuilderString _VERSION = new XContentBuilderString("_version");, +    }, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteResponse.java, +import org.elasticsearch.common.xcontent.StatusToXContent;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.rest.RestStatus;, +import static org.elasticsearch.rest.RestStatus.NOT_FOUND;, +, +public class DeleteResponse extends ActionWriteResponse implements StatusToXContent {, +, +    @Override, +    public RestStatus status() {, +        RestStatus status = getShardInfo().status();, +        if (isFound() == false) {, +            status = NOT_FOUND;, +        }, +        return status;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        ActionWriteResponse.ShardInfo shardInfo = getShardInfo();, +        builder.field(Fields.FOUND, found), +            .field(Fields._INDEX, index), +            .field(Fields._TYPE, type), +            .field(Fields._ID, id), +            .field(Fields._VERSION, version), +            .value(shardInfo);, +        return builder;, +    }, +, +    static final class Fields {, +        static final XContentBuilderString FOUND = new XContentBuilderString("found");, +        static final XContentBuilderString _INDEX = new XContentBuilderString("_index");, +        static final XContentBuilderString _TYPE = new XContentBuilderString("_type");, +        static final XContentBuilderString _ID = new XContentBuilderString("_id");, +        static final XContentBuilderString _VERSION = new XContentBuilderString("_version");, +    }, +++ b/core/src/main/java/org/elasticsearch/action/index/IndexResponse.java, +import org.elasticsearch.common.xcontent.StatusToXContent;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.rest.RestStatus;, +import static org.elasticsearch.rest.RestStatus.CREATED;, +, +public class IndexResponse extends ActionWriteResponse implements StatusToXContent {, +    public RestStatus status() {, +        RestStatus status = getShardInfo().status();, +        if (created) {, +            status = CREATED;, +        }, +        return status;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        ActionWriteResponse.ShardInfo shardInfo = getShardInfo();, +        builder.field(Fields._INDEX, index), +            .field(Fields._TYPE, type), +            .field(Fields._ID, id), +            .field(Fields._VERSION, version);]