[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequestBuilder.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequestBuilder.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +import org.elasticsearch.cluster.health.ClusterStateHealth;, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.cluster.health.ClusterIndexHealth;, +public class ClusterHealthResponse extends ActionResponse implements StatusToXContent {, +    private int numberOfPendingTasks = 0;, +    private int numberOfInFlightFetch = 0;, +    private int delayedUnassignedShards = 0;, +    private TimeValue taskMaxWaitingTime = TimeValue.timeValueMillis(0);, +    private boolean timedOut = false;, +    private ClusterStateHealth clusterStateHealth;, +    private ClusterHealthStatus clusterHealthStatus;, +        this.clusterStateHealth = new ClusterStateHealth(clusterState, concreteIndices);, +        this.clusterHealthStatus = clusterStateHealth.getStatus();, +    //package private for testing, +    ClusterStateHealth getClusterStateHealth() {, +        return clusterStateHealth;, +    }, +, +        return clusterStateHealth.getValidationFailures();, +        return clusterStateHealth.getActiveShards();, +        return clusterStateHealth.getRelocatingShards();, +        return clusterStateHealth.getActivePrimaryShards();, +        return clusterStateHealth.getInitializingShards();, +        return clusterStateHealth.getUnassignedShards();, +        return clusterStateHealth.getNumberOfNodes();, +        return clusterStateHealth.getNumberOfDataNodes();, +    public void setTimedOut(boolean timedOut) {, +        this.timedOut = timedOut;, +    }, +, +        return clusterHealthStatus;, +    }, +, +    /**, +     * Allows to explicitly override the derived cluster health status., +     *, +     * @param status The override status. Must not be null., +     */, +    public void setStatus(ClusterHealthStatus status) {, +        if (status == null) {, +            throw new IllegalArgumentException("'status' must not be null");, +        }, +        this.clusterHealthStatus = status;, +        return clusterStateHealth.getIndices();, +        return clusterStateHealth.getActiveShardsPercent();, +        clusterHealthStatus = ClusterHealthStatus.fromValue(in.readByte());, +        clusterStateHealth = ClusterStateHealth.readClusterHealth(in);, +        out.writeByte(clusterHealthStatus.value());, +        clusterStateHealth.writeTo(out);, +                for (ClusterIndexHealth indexHealth : clusterStateHealth.getIndices().values()) {, +            for (ClusterIndexHealth indexHealth : clusterStateHealth.getIndices().values()) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequest.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthRequestBuilder.java, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/ClusterHealthResponse.java, +import org.elasticsearch.cluster.health.ClusterStateHealth;, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.cluster.health.ClusterIndexHealth;, +public class ClusterHealthResponse extends ActionResponse implements StatusToXContent {, +    private int numberOfPendingTasks = 0;, +    private int numberOfInFlightFetch = 0;, +    private int delayedUnassignedShards = 0;, +    private TimeValue taskMaxWaitingTime = TimeValue.timeValueMillis(0);, +    private boolean timedOut = false;, +    private ClusterStateHealth clusterStateHealth;, +    private ClusterHealthStatus clusterHealthStatus;, +        this.clusterStateHealth = new ClusterStateHealth(clusterState, concreteIndices);, +        this.clusterHealthStatus = clusterStateHealth.getStatus();, +    //package private for testing, +    ClusterStateHealth getClusterStateHealth() {, +        return clusterStateHealth;, +    }, +, +        return clusterStateHealth.getValidationFailures();, +        return clusterStateHealth.getActiveShards();, +        return clusterStateHealth.getRelocatingShards();, +        return clusterStateHealth.getActivePrimaryShards();, +        return clusterStateHealth.getInitializingShards();, +        return clusterStateHealth.getUnassignedShards();, +        return clusterStateHealth.getNumberOfNodes();, +        return clusterStateHealth.getNumberOfDataNodes();, +    public void setTimedOut(boolean timedOut) {, +        this.timedOut = timedOut;, +    }, +, +        return clusterHealthStatus;, +    }, +]