[+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/StringFunctionProcessorTests.java, +import java.util.Locale;, +    public void testLCaseWithTRLocale() {, +        Locale.setDefault(Locale.forLanguageTag("tr"));, +        StringProcessor proc = new StringProcessor(StringOperation.LCASE);, +, +        // ES-SQL is not locale sensitive (so far). The obvious test for this is the Turkish language, uppercase letter I conversion, +        // in non-Turkish locale the lowercasing would create i and an additional dot, while in Turkish Locale it would only create "i", +        // unicode 0069 = i, +        assertEquals("\u0069\u0307", proc.process("\u0130"));, +        // unicode 0049 = I (regular capital letter i), +        // in Turkish locale this would be lowercased to a "i" without dot (unicode 0131), +        assertEquals("\u0069", proc.process("\u0049"));, +    }, +, +        // special uppercasing for small letter sharp "s" resulting "SS", +        assertEquals("\u0053\u0053", proc.process("\u00df"));, +, +    public void testUCaseWithTRLocale() {, +        Locale.setDefault(Locale.forLanguageTag("tr"));, +        StringProcessor proc = new StringProcessor(StringOperation.UCASE);, +, +        // ES-SQL is not Locale sensitive (so far)., +        // in Turkish locale, small letter "i" is uppercased to "I" with a dot above (unicode 130), otherwise in "i" (unicode 49), +        assertEquals("\u0049", proc.process("\u0069"));, +    }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/StringFunctionProcessorTests.java, +import java.util.Locale;, +    public void testLCaseWithTRLocale() {, +        Locale.setDefault(Locale.forLanguageTag("tr"));, +        StringProcessor proc = new StringProcessor(StringOperation.LCASE);, +, +        // ES-SQL is not locale sensitive (so far). The obvious test for this is the Turkish language, uppercase letter I conversion, +        // in non-Turkish locale the lowercasing would create i and an additional dot, while in Turkish Locale it would only create "i", +        // unicode 0069 = i, +        assertEquals("\u0069\u0307", proc.process("\u0130"));, +        // unicode 0049 = I (regular capital letter i), +        // in Turkish locale this would be lowercased to a "i" without dot (unicode 0131), +        assertEquals("\u0069", proc.process("\u0049"));, +    }, +, +        // special uppercasing for small letter sharp "s" resulting "SS", +        assertEquals("\u0053\u0053", proc.process("\u00df"));, +, +    public void testUCaseWithTRLocale() {, +        Locale.setDefault(Locale.forLanguageTag("tr"));, +        StringProcessor proc = new StringProcessor(StringOperation.UCASE);, +, +        // ES-SQL is not Locale sensitive (so far)., +        // in Turkish locale, small letter "i" is uppercased to "I" with a dot above (unicode 130), otherwise in "i" (unicode 49), +        assertEquals("\u0049", proc.process("\u0069"));, +    }, +, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/SqlSpecTestCase.java, +import org.junit.Assume;, +import java.util.Locale;, +        tests.addAll(readScriptSpec("/case-functions.sql-spec", parser));, +        boolean goodLocale = !(Locale.getDefault().equals(new Locale.Builder().setLanguageTag("tr").build()), +                || Locale.getDefault().equals(new Locale.Builder().setLanguageTag("tr-TR").build()));, +        if (fileName.startsWith("case-functions")) {, +            Assume.assumeTrue(goodLocale);, +        }, +        , +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/StringFunctionProcessorTests.java, +import java.util.Locale;, +    public void testLCaseWithTRLocale() {, +        Locale.setDefault(Locale.forLanguageTag("tr"));, +        StringProcessor proc = new StringProcessor(StringOperation.LCASE);, +, +        // ES-SQL is not locale sensitive (so far). The obvious test for this is the Turkish language, uppercase letter I conversion, +        // in non-Turkish locale the lowercasing would create i and an additional dot, while in Turkish Locale it would only create "i", +        // unicode 0069 = i, +        assertEquals("\u0069\u0307", proc.process("\u0130"));, +        // unicode 0049 = I (regular capital letter i), +        // in Turkish locale this would be lowercased to a "i" without dot (unicode 0131), +        assertEquals("\u0069", proc.process("\u0049"));, +    }, +, +        // special uppercasing for small letter sharp "s" resulting "SS", +        assertEquals("\u0053\u0053", proc.process("\u00df"));, +, +    public void testUCaseWithTRLocale() {, +        Locale.setDefault(Locale.forLanguageTag("tr"));, +        StringProcessor proc = new StringProcessor(StringOperation.UCASE);, +, +        // ES-SQL is not Locale sensitive (so far)., +        // in Turkish locale, small letter "i" is uppercased to "I" with a dot above (unicode 130), otherwise in "i" (unicode 49), +        assertEquals("\u0049", proc.process("\u0069"));, +    }, +, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/SqlSpecTestCase.java, +import org.junit.Assume;, +import java.util.Locale;, +        tests.addAll(readScriptSpec("/case-functions.sql-spec", parser));, +        boolean goodLocale = !(Locale.getDefault().equals(new Locale.Builder().setLanguageTag("tr").build()), +                || Locale.getDefault().equals(new Locale.Builder().setLanguageTag("tr-TR").build()));, +        if (fileName.startsWith("case-functions")) {, +            Assume.assumeTrue(goodLocale);, +        }]