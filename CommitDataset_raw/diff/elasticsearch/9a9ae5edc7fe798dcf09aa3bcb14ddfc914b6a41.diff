[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +, +        // First try to restore model state., +        int numDocs = modelSnapshot.getSnapshotDocCount();, +        for (int docNum = 1; docNum <= numDocs; ++docNum) {, +            String docId = String.format(Locale.ROOT, "%s#%d", ModelSnapshot.documentId(modelSnapshot), docNum);, +, +            LOGGER.trace("ES API CALL: get ID {} type {} from index {}", docId, ModelState.TYPE, indexName);, +, +            GetResponse stateResponse = client.prepareGet(indexName, ModelState.TYPE.getPreferredName(), docId).get();, +            if (!stateResponse.isExists()) {, +                LOGGER.error("Expected {} documents for model state for {} snapshot {} but failed to find {}",, +                        numDocs, jobId, modelSnapshot.getSnapshotId(), docId);, +                break;, +            }, +            writeStateToStream(stateResponse.getSourceAsBytesRef(), restoreStream);, +        }, +, +, +        // Secondly try to restore categorizer state. This must come after model state because that's, +        // the order the C++ process expects., +        // There are no snapshots for this, so the IDs simply, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +, +        // First try to restore model state., +        int numDocs = modelSnapshot.getSnapshotDocCount();, +        for (int docNum = 1; docNum <= numDocs; ++docNum) {, +            String docId = String.format(Locale.ROOT, "%s#%d", ModelSnapshot.documentId(modelSnapshot), docNum);, +, +            LOGGER.trace("ES API CALL: get ID {} type {} from index {}", docId, ModelState.TYPE, indexName);, +, +            GetResponse stateResponse = client.prepareGet(indexName, ModelState.TYPE.getPreferredName(), docId).get();, +            if (!stateResponse.isExists()) {, +                LOGGER.error("Expected {} documents for model state for {} snapshot {} but failed to find {}",, +                        numDocs, jobId, modelSnapshot.getSnapshotId(), docId);, +                break;, +            }, +            writeStateToStream(stateResponse.getSourceAsBytesRef(), restoreStream);, +        }, +, +, +        // Secondly try to restore categorizer state. This must come after model state because that's, +        // the order the C++ process expects., +        // There are no snapshots for this, so the IDs simply, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/persistence/JobProviderTests.java, +        assertEquals("{\"modName\":\"modVal1\"}", restoreData[0]);, +        assertEquals("{\"modName\":\"modVal2\"}", restoreData[1]);, +        assertEquals("{\"catName\":\"catVal\"}", restoreData[2]);]