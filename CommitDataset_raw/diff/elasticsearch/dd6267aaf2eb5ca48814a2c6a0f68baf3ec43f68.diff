[+++ b/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.cat.RestMasterAction;, +        bind(RestMasterAction.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/rest/action/RestActionModule.java, +import org.elasticsearch.rest.action.cat.RestMasterAction;, +        bind(RestMasterAction.class).asEagerSingleton();, +++ b/src/main/java/org/elasticsearch/rest/action/cat/RestMasterAction.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest.action.cat;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateRequest;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.Table;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.rest.*;, +import org.elasticsearch.rest.action.support.RestTable;, +, +import java.io.IOException;, +, +import static org.elasticsearch.rest.RestRequest.Method.GET;, +, +public class RestMasterAction extends BaseRestHandler {, +, +    @Inject, +    public RestMasterAction(Settings settings, Client client, RestController controller) {, +        super(settings, client);, +        controller.registerHandler(GET, "/_cat/master", this);, +    }, +, +    @Override, +    public void handleRequest(final RestRequest request, final RestChannel channel) {, +        final ClusterStateRequest clusterStateRequest = new ClusterStateRequest();, +        clusterStateRequest.filterMetaData(true);, +        clusterStateRequest.local(request.paramAsBoolean("local", clusterStateRequest.local()));, +        clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout", clusterStateRequest.masterNodeTimeout()));, +, +        client.admin().cluster().state(clusterStateRequest, new ActionListener<ClusterStateResponse>() {, +            @Override, +            public void onResponse(final ClusterStateResponse clusterStateResponse) {, +                try {, +                    channel.sendResponse(RestTable.buildResponse(buildTable(clusterStateResponse), request, channel));, +                } catch (Throwable e) {, +                    onFailure(e);, +                }, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                try {, +                    channel.sendResponse(new XContentThrowableRestResponse(request, e));, +                } catch (IOException e1) {, +                    logger.error("Failed to send failure response", e1);, +                }, +            }, +        });, +    }, +, +    private Table buildTable(ClusterStateResponse state) {, +        Table table = new Table();, +        table.startHeaders(), +                .addCell("id"), +                .addCell("ip"), +                .addCell("node"), +                .endHeaders();, +, +        String masterId = state.getState().nodes().masterNodeId();, +        String masterIp = ((InetSocketTransportAddress) state.getState().nodes().get(masterId).address()).address().getAddress().getHostAddress();, +        String masterName = state.getState().nodes().masterNode().name();, +, +        table.startRow();, +, +        table.addCell(masterId);, +        table.addCell(masterIp);, +        table.addCell(masterName);, +, +        table.endRow();, +, +        return table;]