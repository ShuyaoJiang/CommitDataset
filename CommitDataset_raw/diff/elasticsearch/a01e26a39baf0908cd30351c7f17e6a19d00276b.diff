[+++ b/docs/reference/migration/migrate_7_0/plugins.asciidoc, +, +==== Analysis Plugin changes, +, +* The misspelled helper method `requriesAnalysisSettings(AnalyzerProvider<T> provider)` has been, +renamed to `requiresAnalysisSettings`, +++ b/docs/reference/migration/migrate_7_0/plugins.asciidoc, +, +==== Analysis Plugin changes, +, +* The misspelled helper method `requriesAnalysisSettings(AnalyzerProvider<T> provider)` has been, +renamed to `requiresAnalysisSettings`, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, +import static org.elasticsearch.plugins.AnalysisPlugin.requiresAnalysisSettings;, +        filters.put("common_grams", requiresAnalysisSettings(CommonGramsTokenFilterFactory::new));, +        filters.put("dictionary_decompounder", requiresAnalysisSettings(DictionaryCompoundWordTokenFilterFactory::new));, +        filters.put("hyphenation_decompounder", requiresAnalysisSettings(HyphenationCompoundWordTokenFilterFactory::new));, +        filters.put("keep", requiresAnalysisSettings(KeepWordFilterFactory::new));, +        filters.put("keep_types", requiresAnalysisSettings(KeepTypesFilterFactory::new));, +        filters.put("keyword_marker", requiresAnalysisSettings(KeywordMarkerTokenFilterFactory::new));, +        filters.put("pattern_capture", requiresAnalysisSettings(PatternCaptureGroupTokenFilterFactory::new));, +        filters.put("pattern_replace", requiresAnalysisSettings(PatternReplaceTokenFilterFactory::new));, +        filters.put("stemmer_override", requiresAnalysisSettings(StemmerOverrideTokenFilterFactory::new));, +        filters.put("truncate", requiresAnalysisSettings(TruncateTokenFilterFactory::new));, +        filters.put("pattern_replace", requiresAnalysisSettings(PatternReplaceCharFilterFactory::new));, +        filters.put("mapping", requiresAnalysisSettings(MappingCharFilterFactory::new));, +++ b/docs/reference/migration/migrate_7_0/plugins.asciidoc, +, +==== Analysis Plugin changes, +, +* The misspelled helper method `requriesAnalysisSettings(AnalyzerProvider<T> provider)` has been, +renamed to `requiresAnalysisSettings`, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, +import static org.elasticsearch.plugins.AnalysisPlugin.requiresAnalysisSettings;, +        filters.put("common_grams", requiresAnalysisSettings(CommonGramsTokenFilterFactory::new));, +        filters.put("dictionary_decompounder", requiresAnalysisSettings(DictionaryCompoundWordTokenFilterFactory::new));, +        filters.put("hyphenation_decompounder", requiresAnalysisSettings(HyphenationCompoundWordTokenFilterFactory::new));, +        filters.put("keep", requiresAnalysisSettings(KeepWordFilterFactory::new));, +        filters.put("keep_types", requiresAnalysisSettings(KeepTypesFilterFactory::new));, +        filters.put("keyword_marker", requiresAnalysisSettings(KeywordMarkerTokenFilterFactory::new));, +        filters.put("pattern_capture", requiresAnalysisSettings(PatternCaptureGroupTokenFilterFactory::new));, +        filters.put("pattern_replace", requiresAnalysisSettings(PatternReplaceTokenFilterFactory::new));, +        filters.put("stemmer_override", requiresAnalysisSettings(StemmerOverrideTokenFilterFactory::new));, +        filters.put("truncate", requiresAnalysisSettings(TruncateTokenFilterFactory::new));, +        filters.put("pattern_replace", requiresAnalysisSettings(PatternReplaceCharFilterFactory::new));, +        filters.put("mapping", requiresAnalysisSettings(MappingCharFilterFactory::new));, +++ b/server/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +import static org.elasticsearch.plugins.AnalysisPlugin.requiresAnalysisSettings;, +        tokenFilters.register("hunspell", requiresAnalysisSettings((indexSettings, env, name, settings) -> new HunspellTokenFilterFactory, +++ b/docs/reference/migration/migrate_7_0/plugins.asciidoc, +, +==== Analysis Plugin changes, +, +* The misspelled helper method `requriesAnalysisSettings(AnalyzerProvider<T> provider)` has been, +renamed to `requiresAnalysisSettings`, +++ b/modules/analysis-common/src/main/java/org/elasticsearch/analysis/common/CommonAnalysisPlugin.java, +import static org.elasticsearch.plugins.AnalysisPlugin.requiresAnalysisSettings;, +        filters.put("common_grams", requiresAnalysisSettings(CommonGramsTokenFilterFactory::new));, +        filters.put("dictionary_decompounder", requiresAnalysisSettings(DictionaryCompoundWordTokenFilterFactory::new));, +        filters.put("hyphenation_decompounder", requiresAnalysisSettings(HyphenationCompoundWordTokenFilterFactory::new));, +        filters.put("keep", requiresAnalysisSettings(KeepWordFilterFactory::new));, +        filters.put("keep_types", requiresAnalysisSettings(KeepTypesFilterFactory::new));, +        filters.put("keyword_marker", requiresAnalysisSettings(KeywordMarkerTokenFilterFactory::new));, +        filters.put("pattern_capture", requiresAnalysisSettings(PatternCaptureGroupTokenFilterFactory::new));, +        filters.put("pattern_replace", requiresAnalysisSettings(PatternReplaceTokenFilterFactory::new));, +        filters.put("stemmer_override", requiresAnalysisSettings(StemmerOverrideTokenFilterFactory::new));, +        filters.put("truncate", requiresAnalysisSettings(TruncateTokenFilterFactory::new));, +        filters.put("pattern_replace", requiresAnalysisSettings(PatternReplaceCharFilterFactory::new));, +        filters.put("mapping", requiresAnalysisSettings(MappingCharFilterFactory::new));, +++ b/server/src/main/java/org/elasticsearch/indices/analysis/AnalysisModule.java, +import static org.elasticsearch.plugins.AnalysisPlugin.requiresAnalysisSettings;, +        tokenFilters.register("hunspell", requiresAnalysisSettings((indexSettings, env, name, settings) -> new HunspellTokenFilterFactory, +++ b/server/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java, + * such sharing then it is the Plugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing, +     * Override to add additional {@link CharFilter}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}, +     * Override to add additional {@link TokenFilter}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}, +     * Override to add additional {@link Tokenizer}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}, +     * Override to add additional {@link Analyzer}s. See {@link #requiresAnalysisSettings(AnalysisProvider)}, +     *, +     * @deprecated use {@link #requiresAnalysisSettings(AnalysisProvider)}, +    @Deprecated, +        return requiresAnalysisSettings(provider);, +    }, +, +    /**, +     * Mark an {@link AnalysisProvider} as requiring the index's settings., +     */, +    static <T> AnalysisProvider<T> requiresAnalysisSettings(AnalysisProvider<T> provider) {]