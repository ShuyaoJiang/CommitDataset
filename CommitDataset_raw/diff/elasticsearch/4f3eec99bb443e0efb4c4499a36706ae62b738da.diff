[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public static final String SHARD_FAILURE_TIMEOUT = "action.support.replication.shard.failure_timeout";, +, +    private final TimeValue shardFailedTimeout;, +        // TODO: set a default timeout, +        shardFailedTimeout = settings.getAsTime(SHARD_FAILURE_TIMEOUT, null);, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference, shardFailedTimeout);, +    final class ReplicationPhase extends AbstractRunnable {, +        private final TimeValue shardFailedTimeout;, +                                InternalRequest internalRequest, ActionListener<Response> listener, Releasable indexShardReference,, +                                TimeValue shardFailedTimeout) {, +            this.shardFailedTimeout = shardFailedTimeout;, +                                if (ignoreReplicaException(exp)) {, +                                    onReplicaFailure(nodeId, exp);, +                                } else {, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, shardFailedTimeout, new ReplicationFailedShardStateListener(nodeId, exp));, +        public class ReplicationFailedShardStateListener implements ShardStateAction.Listener {, +            private final String nodeId;, +            private Throwable failure;, +, +            public ReplicationFailedShardStateListener(String nodeId, Throwable failure) {, +                this.nodeId = nodeId;, +                this.failure = failure;, +            }, +, +            @Override, +            public void onSuccess() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedNoMaster() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +                if (e instanceof ReceiveTimeoutTransportException) {, +                    logger.trace("timeout sending shard failure to master [{}]", e, master);, +                }, +                onReplicaFailure(nodeId, failure);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public static final String SHARD_FAILURE_TIMEOUT = "action.support.replication.shard.failure_timeout";, +, +    private final TimeValue shardFailedTimeout;, +        // TODO: set a default timeout, +        shardFailedTimeout = settings.getAsTime(SHARD_FAILURE_TIMEOUT, null);, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference, shardFailedTimeout);, +    final class ReplicationPhase extends AbstractRunnable {, +        private final TimeValue shardFailedTimeout;, +                                InternalRequest internalRequest, ActionListener<Response> listener, Releasable indexShardReference,, +                                TimeValue shardFailedTimeout) {, +            this.shardFailedTimeout = shardFailedTimeout;, +                                if (ignoreReplicaException(exp)) {, +                                    onReplicaFailure(nodeId, exp);, +                                } else {, +                                    shardStateAction.shardFailed(shard, indexMetaData.getIndexUUID(), "failed to perform " + actionName + " on replica on node " + node, exp, shardFailedTimeout, new ReplicationFailedShardStateListener(nodeId, exp));, +        public class ReplicationFailedShardStateListener implements ShardStateAction.Listener {, +            private final String nodeId;, +            private Throwable failure;, +, +            public ReplicationFailedShardStateListener(String nodeId, Throwable failure) {, +                this.nodeId = nodeId;, +                this.failure = failure;, +            }, +, +            @Override, +            public void onSuccess() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedNoMaster() {, +                onReplicaFailure(nodeId, failure);, +            }, +, +            @Override, +            public void onShardFailedFailure(DiscoveryNode master, TransportException e) {, +                if (e instanceof ReceiveTimeoutTransportException) {, +                    logger.trace("timeout sending shard failure to master [{}]", e, master);, +                }, +                onReplicaFailure(nodeId, failure);, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.action.support.replication.TransportReplicationAction;, +        registerClusterDynamicSetting(TransportReplicationAction.SHARD_FAILURE_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +    public static final String SHARD_FAILURE_TIMEOUT = "action.support.replication.shard.failure_timeout";, +, +    private final TimeValue shardFailedTimeout;, +        // TODO: set a default timeout, +        shardFailedTimeout = settings.getAsTime(SHARD_FAILURE_TIMEOUT, null);, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener, indexShardReference, shardFailedTimeout);, +    final class ReplicationPhase extends AbstractRunnable {, +        private final TimeValue shardFailedTimeout;, +                                InternalRequest internalRequest, ActionListener<Response> listener, Releasable indexShardReference,, +                                TimeValue shardFailedTimeout) {]