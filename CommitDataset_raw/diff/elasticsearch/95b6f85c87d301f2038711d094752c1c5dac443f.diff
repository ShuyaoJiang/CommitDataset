[+++ b/core/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +                item.routing(clusterState.metaData().resolveIndexRouting(item.parent(), item.routing(), concreteSingleIndex));, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +                item.routing(clusterState.metaData().resolveIndexRouting(item.parent(), item.routing(), concreteSingleIndex));, +++ b/core/src/test/java/org/elasticsearch/indices/DateMathIndexExpressionsIntegrationIT.java, +import org.elasticsearch.action.get.MultiGetResponse;, +        MultiGetResponse mgetResponse = client().prepareMultiGet(), +            .add(dateMathExp1, "type", "1"), +            .add(dateMathExp2, "type", "2"), +            .add(dateMathExp3, "type", "3").get();, +        assertThat(mgetResponse.getResponses()[0].getResponse().isExists(), is(true));, +        assertThat(mgetResponse.getResponses()[0].getResponse().getId(), equalTo("1"));, +        assertThat(mgetResponse.getResponses()[1].getResponse().isExists(), is(true));, +        assertThat(mgetResponse.getResponses()[1].getResponse().getId(), equalTo("2"));, +        assertThat(mgetResponse.getResponses()[2].getResponse().isExists(), is(true));, +        assertThat(mgetResponse.getResponses()[2].getResponse().getId(), equalTo("3"));, +, +++ b/core/src/main/java/org/elasticsearch/action/get/TransportMultiGetAction.java, +                item.routing(clusterState.metaData().resolveIndexRouting(item.parent(), item.routing(), concreteSingleIndex));, +++ b/core/src/test/java/org/elasticsearch/indices/DateMathIndexExpressionsIntegrationIT.java, +import org.elasticsearch.action.get.MultiGetResponse;, +        MultiGetResponse mgetResponse = client().prepareMultiGet(), +            .add(dateMathExp1, "type", "1"), +            .add(dateMathExp2, "type", "2"), +            .add(dateMathExp3, "type", "3").get();, +        assertThat(mgetResponse.getResponses()[0].getResponse().isExists(), is(true));, +        assertThat(mgetResponse.getResponses()[0].getResponse().getId(), equalTo("1"));, +        assertThat(mgetResponse.getResponses()[1].getResponse().isExists(), is(true));, +        assertThat(mgetResponse.getResponses()[1].getResponse().getId(), equalTo("2"));, +        assertThat(mgetResponse.getResponses()[2].getResponse().isExists(), is(true));, +        assertThat(mgetResponse.getResponses()[2].getResponse().getId(), equalTo("3"));, +, +++ b/core/src/test/java/org/elasticsearch/mget/SimpleMgetIT.java, +import static org.hamcrest.Matchers.containsString;, +, +                .get();, +                .get();, +    }, +    public void testThatMgetShouldWorkWithMultiIndexAlias() throws IOException {, +        assertAcked(prepareCreate("test").addAlias(new Alias("multiIndexAlias")));, +        assertAcked(prepareCreate("test2").addAlias(new Alias("multiIndexAlias")));, +        client().prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject().field("foo", "bar").endObject()), +            .setRefreshPolicy(IMMEDIATE).get();, +, +        MultiGetResponse mgetResponse = client().prepareMultiGet(), +            .add(new MultiGetRequest.Item("test", "test", "1")), +            .add(new MultiGetRequest.Item("multiIndexAlias", "test", "1")), +            .get();, +        assertThat(mgetResponse.getResponses().length, is(2));, +, +        assertThat(mgetResponse.getResponses()[0].getIndex(), is("test"));, +        assertThat(mgetResponse.getResponses()[0].isFailed(), is(false));, +, +        assertThat(mgetResponse.getResponses()[1].getIndex(), is("multiIndexAlias"));, +        assertThat(mgetResponse.getResponses()[1].isFailed(), is(true));, +        assertThat(mgetResponse.getResponses()[1].getFailure().getMessage(), containsString("more than one indices"));, +, +        mgetResponse = client().prepareMultiGet(), +            .add(new MultiGetRequest.Item("multiIndexAlias", "test", "1")), +            .get();, +        assertThat(mgetResponse.getResponses().length, is(1));, +        assertThat(mgetResponse.getResponses()[0].getIndex(), is("multiIndexAlias"));, +        assertThat(mgetResponse.getResponses()[0].isFailed(), is(true));, +        assertThat(mgetResponse.getResponses()[0].getFailure().getMessage(), containsString("more than one indices"));, +                .get();, +                .get();]