[+++ b/test/framework/src/main/java/org/elasticsearch/test/disruption/LongGCDisruption.java, +                    try {, +                        /*, +                         * We need to join on the stopping thread in case it has stopped a thread that is in a critical section and needs to, +                         * be resumed., +                         */, +                        stoppingThread.join();, +                    } catch (InterruptedException e) {, +                        throw new RuntimeException(e);, +                    }, +                    // we assume it is not safe to suspend the thread, +                    boolean safe = false;, +                    try {, +                        /*, +                         * At the bottom of this try-block we will know whether or not it is safe to suspend this thread; we start by, +                         * assuming that it is safe., +                         */, +                        boolean definitelySafe = true;, +                        // double check the thread is not in a shared resource like logging; if so, let it go and come back, +                                    // it is definitely not safe to suspend the thread, +                                    definitelySafe = false;, +                        safe = definitelySafe;, +                    } finally {, +                            /*, +                             * Do not log before resuming as we might be interrupted while logging in which case we will throw an, +                             * interrupted exception and never resume the stopped thread that is in a critical section. Also, logging before, +                             * resuming makes for confusing log messages if we never hit the resume., +                             */, +                            logger.trace("resumed thread [{}] as it is in a critical section", threadName);, +        }, +++ b/test/framework/src/main/java/org/elasticsearch/test/disruption/LongGCDisruption.java, +                    try {, +                        /*, +                         * We need to join on the stopping thread in case it has stopped a thread that is in a critical section and needs to, +                         * be resumed., +                         */, +                        stoppingThread.join();, +                    } catch (InterruptedException e) {, +                        throw new RuntimeException(e);, +                    }, +                    // we assume it is not safe to suspend the thread, +                    boolean safe = false;, +                    try {, +                        /*, +                         * At the bottom of this try-block we will know whether or not it is safe to suspend this thread; we start by, +                         * assuming that it is safe., +                         */, +                        boolean definitelySafe = true;, +                        // double check the thread is not in a shared resource like logging; if so, let it go and come back, +                                    // it is definitely not safe to suspend the thread, +                                    definitelySafe = false;, +                        safe = definitelySafe;, +                    } finally {, +                            /*, +                             * Do not log before resuming as we might be interrupted while logging in which case we will throw an, +                             * interrupted exception and never resume the stopped thread that is in a critical section. Also, logging before, +                             * resuming makes for confusing log messages if we never hit the resume., +                             */, +                            logger.trace("resumed thread [{}] as it is in a critical section", threadName);, +        }, +++ b/test/framework/src/test/java/org/elasticsearch/test/disruption/LongGCDisruptionTests.java, +import java.util.ArrayList;, +import java.util.List;, +        final Thread[] threads = new Thread[10];, +            for (final Thread thread : threads) {, +                thread.join();, +            }, +        final Thread[] threads = new Thread[10];, +            for (final Thread thread : threads) {, +                thread.join();, +            }, +        final List<Thread> threads = new ArrayList<>();, +                threads.add(thread);, +                threads.add(thread);, +            assertTrue(waitForBlockDetectionResult.await(30, TimeUnit.SECONDS));, +            for (final Thread thread : threads) {, +                thread.join();, +            }]