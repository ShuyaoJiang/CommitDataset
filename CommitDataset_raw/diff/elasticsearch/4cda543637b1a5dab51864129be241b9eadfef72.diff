[+++ b/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityTests.java, +import org.elasticsearch.Version;, +        assertUpgradeWorks(isLatestLuceneVersion(index));, +    boolean isLatestLuceneVersion(String index) {, +        String versionStr = index.substring(index.indexOf('-') + 1, index.lastIndexOf('.'));, +        Version version = Version.fromString(versionStr);, +        return version.luceneVersion.major == Version.CURRENT.luceneVersion.major &&, +               version.luceneVersion.minor == Version.CURRENT.luceneVersion.minor;, +    }, +, +    void assertUpgradeWorks(boolean alreadyLatest) throws Exception {, +        if (alreadyLatest == false) {, +        }, +++ b/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityTests.java, +import org.elasticsearch.Version;, +        assertUpgradeWorks(isLatestLuceneVersion(index));, +    boolean isLatestLuceneVersion(String index) {, +        String versionStr = index.substring(index.indexOf('-') + 1, index.lastIndexOf('.'));, +        Version version = Version.fromString(versionStr);, +        return version.luceneVersion.major == Version.CURRENT.luceneVersion.major &&, +               version.luceneVersion.minor == Version.CURRENT.luceneVersion.minor;, +    }, +, +    void assertUpgradeWorks(boolean alreadyLatest) throws Exception {, +        if (alreadyLatest == false) {, +        }, +++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +                                     Version.CURRENT.luceneVersion.major, seg.version.major);, +                        assertEquals("Index " + indexSegments.getIndex() + " has unupgraded segment " + seg.toString(),, +                                     Version.CURRENT.luceneVersion.minor, seg.version.minor);]