[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    if (logger.isDebugEnabled()) {, +                        if (shard != null) {, +                            logger.debug(shard.shortSummary() + ": Failed to execute [" + request + "] while moving to second phase", e);, +                        } else {, +                            logger.debug(shardIt.shardId() + ": Failed to execute [" + request + "] while moving to second phase", e);, +                        }, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    if (logger.isDebugEnabled()) {, +                        if (shard != null) {, +                            logger.debug(shard.shortSummary() + ": Failed to execute [" + request + "] while moving to second phase", e);, +                        } else {, +                            logger.debug(shardIt.shardId() + ": Failed to execute [" + request + "] while moving to second phase", e);, +                        }, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +            // sorting, first if the type is a String, chance CUSTOM to STRING so we handle nulls properly (since our CUSTOM String sorting might return null), +                boolean allValuesAreNull = true;, +                            allValuesAreNull = false;, +                if (!resolvedField && allValuesAreNull) {, +                    // we did not manage to resolve a field, and all the fields are null (which can only happen for STRING), make it a STRING, +                    fieldDocs.fields[i] = new SortField(fieldDocs.fields[i].getField(), SortField.STRING, fieldDocs.fields[i].getReverse());, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    if (logger.isDebugEnabled()) {, +                        if (shard != null) {, +                            logger.debug(shard.shortSummary() + ": Failed to execute [" + request + "] while moving to second phase", e);, +                        } else {, +                            logger.debug(shardIt.shardId() + ": Failed to execute [" + request + "] while moving to second phase", e);, +                        }, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/controller/SearchPhaseController.java, +            // sorting, first if the type is a String, chance CUSTOM to STRING so we handle nulls properly (since our CUSTOM String sorting might return null), +                boolean allValuesAreNull = true;, +                            allValuesAreNull = false;, +                if (!resolvedField && allValuesAreNull) {, +                    // we did not manage to resolve a field, and all the fields are null (which can only happen for STRING), make it a STRING, +                    fieldDocs.fields[i] = new SortField(fieldDocs.fields[i].getField(), SortField.STRING, fieldDocs.fields[i].getReverse());, +                }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/sort/SimpleSortTests.java, +, +        // a query with docs just with null values, +        searchResponse = client.prepareSearch(), +                .setQuery(termQuery("id", "2")), +                .addScriptField("id", "doc['id'].value"), +                .addSort("svalue", SearchSourceBuilder.Order.DESC), +                .execute().actionGet();, +, +        if (searchResponse.failedShards() > 0) {, +            logger.warn("Failed shards:");, +            for (ShardSearchFailure shardSearchFailure : searchResponse.shardFailures()) {, +                logger.warn("-> {}", shardSearchFailure);, +            }, +        }, +        assertThat(searchResponse.failedShards(), equalTo(0));, +, +        assertThat(searchResponse.hits().getTotalHits(), equalTo(1l));, +        assertThat((String) searchResponse.hits().getAt(0).field("id").value(), equalTo("2"));]