[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.cache.query.parser.QueryParserCache;, +    private final QueryParserCache queryParserCache;, +, +                                                    TransportService transportService, IndicesService indicesService, QueryParserCache queryParserCache) {, +        this.queryParserCache = queryParserCache;, +        queryParserCache.clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.cache.query.parser.QueryParserCache;, +    private final QueryParserCache queryParserCache;, +, +                                                    TransportService transportService, IndicesService indicesService, QueryParserCache queryParserCache) {, +        this.queryParserCache = queryParserCache;, +        queryParserCache.clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/QueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    Query get(QueryParserSettings queryString);, +    void put(QueryParserSettings queryString, Query query);, +, +    void clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.cache.query.parser.QueryParserCache;, +    private final QueryParserCache queryParserCache;, +, +                                                    TransportService transportService, IndicesService indicesService, QueryParserCache queryParserCache) {, +        this.queryParserCache = queryParserCache;, +        queryParserCache.clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/QueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    Query get(QueryParserSettings queryString);, +    void put(QueryParserSettings queryString, Query query);, +, +    void clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/none/NoneQueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    @Override public Query get(QueryParserSettings queryString) {, +    @Override public void put(QueryParserSettings queryString, Query query) {, +    }, +, +    @Override public void clear() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.cache.query.parser.QueryParserCache;, +    private final QueryParserCache queryParserCache;, +, +                                                    TransportService transportService, IndicesService indicesService, QueryParserCache queryParserCache) {, +        this.queryParserCache = queryParserCache;, +        queryParserCache.clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/QueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    Query get(QueryParserSettings queryString);, +    void put(QueryParserSettings queryString, Query query);, +, +    void clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/none/NoneQueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    @Override public Query get(QueryParserSettings queryString) {, +    @Override public void put(QueryParserSettings queryString, Query query) {, +    }, +, +    @Override public void clear() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/soft/SoftQueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +        super(settings, new MapMaker().softValues().<QueryParserSettings, Query>makeMap());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.cache.query.parser.QueryParserCache;, +    private final QueryParserCache queryParserCache;, +, +                                                    TransportService transportService, IndicesService indicesService, QueryParserCache queryParserCache) {, +        this.queryParserCache = queryParserCache;, +        queryParserCache.clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/QueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    Query get(QueryParserSettings queryString);, +    void put(QueryParserSettings queryString, Query query);, +, +    void clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/none/NoneQueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    @Override public Query get(QueryParserSettings queryString) {, +    @Override public void put(QueryParserSettings queryString, Query query) {, +    }, +, +    @Override public void clear() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/soft/SoftQueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +        super(settings, new MapMaker().softValues().<QueryParserSettings, Query>makeMap());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/query/parser/support/AbstractJvmQueryParserCache.java, +import org.apache.lucene.queryParser.QueryParserSettings;, +    final ConcurrentMap<QueryParserSettings, Query> cache;, +    protected AbstractJvmQueryParserCache(Settings settings, ConcurrentMap<QueryParserSettings, Query> cache) {, +    @Override public void clear() {, +        cache.clear();, +    }, +, +    @Override public Query get(QueryParserSettings queryString) {, +    @Override public void put(QueryParserSettings queryString, Query query) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.cache.query.parser.QueryParserCache;, +    private final QueryParserCache queryParserCache;, +]