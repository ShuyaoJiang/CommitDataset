[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkByScrollParallelizationHelper.java, +            SearchRequest searchRequest = new SearchRequest(request);, +            searchRequest.source(slicedSource);, +            slices[slice] = searchRequest;, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkByScrollParallelizationHelper.java, +            SearchRequest searchRequest = new SearchRequest(request);, +            searchRequest.source(slicedSource);, +            slices[slice] = searchRequest;, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Constructs a new search request from the provided search request, +     */, +    public SearchRequest(SearchRequest searchRequest) {, +        this.allowPartialSearchResults = searchRequest.allowPartialSearchResults;, +        this.batchedReduceSize = searchRequest.batchedReduceSize;, +        this.indices = searchRequest.indices;, +        this.indicesOptions = searchRequest.indicesOptions;, +        this.maxConcurrentShardRequests = searchRequest.maxConcurrentShardRequests;, +        this.preference = searchRequest.preference;, +        this.preFilterShardSize = searchRequest.preFilterShardSize;, +        this.requestCache = searchRequest.requestCache;, +        this.routing = searchRequest.routing;, +        this.scroll = searchRequest.scroll;, +        this.searchType = searchRequest.searchType;, +        this.source = searchRequest.source;, +        this.types = searchRequest.types;, +    }, +, +    /**, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/BulkByScrollParallelizationHelper.java, +            SearchRequest searchRequest = new SearchRequest(request);, +            searchRequest.source(slicedSource);, +            slices[slice] = searchRequest;, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +     * Constructs a new search request from the provided search request, +     */, +    public SearchRequest(SearchRequest searchRequest) {, +        this.allowPartialSearchResults = searchRequest.allowPartialSearchResults;, +        this.batchedReduceSize = searchRequest.batchedReduceSize;, +        this.indices = searchRequest.indices;, +        this.indicesOptions = searchRequest.indicesOptions;, +        this.maxConcurrentShardRequests = searchRequest.maxConcurrentShardRequests;, +        this.preference = searchRequest.preference;, +        this.preFilterShardSize = searchRequest.preFilterShardSize;, +        this.requestCache = searchRequest.requestCache;, +        this.routing = searchRequest.routing;, +        this.scroll = searchRequest.scroll;, +        this.searchType = searchRequest.searchType;, +        this.source = searchRequest.source;, +        this.types = searchRequest.types;, +    }, +, +    /**, +++ b/server/src/test/java/org/elasticsearch/search/SearchRequestTests.java, +import org.elasticsearch.test.ESTestCase;, +        SearchRequest deserializedRequest = copyWriteable(searchRequest, namedWriteableRegistry, SearchRequest::new);, +    public void testCopyConstructor() throws IOException {, +        SearchRequest searchRequest = createSearchRequest();, +        SearchRequest deserializedRequest = copyWriteable(searchRequest, namedWriteableRegistry, SearchRequest::new);, +        assertEquals(deserializedRequest, searchRequest);, +        assertEquals(deserializedRequest.hashCode(), searchRequest.hashCode());, +        assertNotSame(deserializedRequest, searchRequest);, +    }, +, +    private SearchRequest mutate(SearchRequest searchRequest) {, +        mutators.add(() -> mutation.requestCache((randomValueOtherThan(searchRequest.requestCache(), ESTestCase::randomBoolean))));, +    private static SearchRequest copyRequest(SearchRequest searchRequest) {, +        return new SearchRequest(searchRequest);]