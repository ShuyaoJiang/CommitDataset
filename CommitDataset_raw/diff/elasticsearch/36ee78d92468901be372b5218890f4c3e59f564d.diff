[+++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/StandardCastTests.java, +, +    public void testPrimitiveBooleanCasts() {, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Object n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Object n = (Object)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Number n = (boolean)o;"));, +, +        exec("boolean o = true; boolean b = o;");, +        exec("boolean o = true; boolean b = (boolean)o;");, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; byte b = (byte)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; short b = (short)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; char b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; char b = (char)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; int b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; int b = (int)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; long b = (long)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; float b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; float b = (float)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; double b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; double b = (double)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Boolean b = (Boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Byte b = (Byte)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Short b = (Short)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Character b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Character b = (Character)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Integer b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Integer b = (Integer)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Long b = (Long)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Float b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Float b = (Float)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Double b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; Double b = (Double)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; ArrayList b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("boolean o = true; ArrayList b = (ArrayList)o;"));, +    }, +, +    public void testBoxedBooleanCasts() {, +        exec("Boolean o = Boolean.valueOf(true); Object n = o;");, +        exec("Boolean o = null; Object n = o;");, +        exec("Boolean o = Boolean.valueOf(true); Object n = (Object)o;");, +        exec("Boolean o = null; Object n = (Object)o;");, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; Number n = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); Number n = (Boolean)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; Number n = (Boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; boolean b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); boolean b = (boolean)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; boolean b = (boolean)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; byte b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); byte b = (byte)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; byte b = (byte)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; short b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); short b = (short)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; short b = (short)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); char b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; char b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); char b = (char)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; char b = (char)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); int b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; int b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); int b = (int)o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; int b = (int)o;"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = null; long b = o;"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Boolean o = Boolean.valueOf(true); long b = (long)o;"));]