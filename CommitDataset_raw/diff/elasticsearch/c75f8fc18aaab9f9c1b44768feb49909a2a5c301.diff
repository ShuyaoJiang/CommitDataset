[+++ b/config/elasticsearch.yml, +, +################################## GC Logging ################################, +, +#monitor.jvm.gc.ParNew.warn: 1000ms, +#monitor.jvm.gc.ParNew.info: 700ms, +#monitor.jvm.gc.ParNew.debug: 400ms, +, +#monitor.jvm.gc.ConcurrentMarkSweep.warn: 10s, +#monitor.jvm.gc.ConcurrentMarkSweep.info: 5s, +#monitor.jvm.gc.ConcurrentMarkSweep.debug: 2s, +++ b/config/elasticsearch.yml, +, +################################## GC Logging ################################, +, +#monitor.jvm.gc.ParNew.warn: 1000ms, +#monitor.jvm.gc.ParNew.info: 700ms, +#monitor.jvm.gc.ParNew.debug: 400ms, +, +#monitor.jvm.gc.ConcurrentMarkSweep.warn: 10s, +#monitor.jvm.gc.ConcurrentMarkSweep.info: 5s, +#monitor.jvm.gc.ConcurrentMarkSweep.debug: 2s, +++ b/src/main/java/org/elasticsearch/monitor/jvm/JvmMonitorService.java, +import com.google.common.collect.ImmutableMap;, +import org.elasticsearch.common.collect.MapBuilder;, +import java.util.Map;, +    private final ImmutableMap<String, GcThreshold> gcThresholds;, +    static class GcThreshold {, +        public final String name;, +        public final long warnThreshold;, +        public final long infoThreshold;, +        public final long debugThreshold;, +, +        GcThreshold(String name, long warnThreshold, long infoThreshold, long debugThreshold) {, +            this.name = name;, +            this.warnThreshold = warnThreshold;, +            this.infoThreshold = infoThreshold;, +            this.debugThreshold = debugThreshold;, +        }, +, +        @Override, +        public String toString() {, +            return "GcThreshold{" +, +                    "name='" + name + '\'' +, +                    ", warnThreshold=" + warnThreshold +, +                    ", infoThreshold=" + infoThreshold +, +                    ", debugThreshold=" + debugThreshold +, +                    '}';, +        }, +    }, +, +        this.enabled = componentSettings.getAsBoolean("enabled", true);, +        MapBuilder<String, GcThreshold> gcThresholds = MapBuilder.newMapBuilder();, +        Map<String, Settings> gcThresholdGroups = componentSettings.getGroups("gc");, +        for (Map.Entry<String, Settings> entry : gcThresholdGroups.entrySet()) {, +            String name = entry.getKey();, +            TimeValue warn = entry.getValue().getAsTime("warn", null);, +            TimeValue info = entry.getValue().getAsTime("info", null);, +            TimeValue debug = entry.getValue().getAsTime("debug", null);, +            if (warn == null || info == null || debug == null) {, +                logger.warn("ignoring gc_threshold for [{}], missing warn/info/debug values", name);, +            } else {, +                gcThresholds.put(name, new GcThreshold(name, warn.millis(), info.millis(), debug.millis()));, +            }, +        }, +        if (!gcThresholds.containsKey("ParNew")) {, +            gcThresholds.put("ParNew", new GcThreshold("ParNew", 1000, 700, 400));, +        }, +        if (!gcThresholds.containsKey("ConcurrentMarkSweep")) {, +            gcThresholds.put("ConcurrentMarkSweep", new GcThreshold("ConcurrentMarkSweep", 10000, 5000, 2000));, +        }, +        if (!gcThresholds.containsKey("default")) {, +            gcThresholds.put("default", new GcThreshold("default", 10000, 5000, 2000));, +        }, +, +        this.gcThresholds = gcThresholds.immutableMap();, +, +        logger.debug("enabled [{}], last_gc_enabled [{}], interval [{}], gc_threshold [{}]", enabled, JvmStats.isLastGcEnabled(), interval, this.gcThresholds);, +        private long seq = 0;, +, +        private synchronized void monitorLongGc() {, +            seq++;, +                GarbageCollector prevGc = lastJvmStats.gc.collectors[i];, +, +                // no collection has happened, +                long collections = gc.collectionCount - prevGc.collectionCount;, +                if (collections == 0) {, +                    continue;, +                }, +                long collectionTime = gc.collectionTime - prevGc.collectionTime;, +                if (collectionTime == 0) {, +                    continue;, +                }, +, +                GcThreshold gcThreshold = gcThresholds.get(gc.name());, +                if (gcThreshold == null) {, +                    gcThreshold = gcThresholds.get("default");, +                }, +, +                if (gc.lastGc() != null && prevGc.lastGc() != null) {]