[+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    protected NamedAnalyzer searchAnalyzer;, +            if (fieldMergeWith.searchAnalyzer != null) {, +                this.searchAnalyzer = fieldMergeWith.searchAnalyzer;, +            }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    protected NamedAnalyzer searchAnalyzer;, +            if (fieldMergeWith.searchAnalyzer != null) {, +                this.searchAnalyzer = fieldMergeWith.searchAnalyzer;, +            }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/merge/TestMergeMapperTests.java, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +, +    @Test, +    public void testMergeSearchAnalyzer() throws Exception {, +        String mapping1 = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").field("search_analyzer", "whitespace").endObject().endObject(), +                .endObject().endObject().string();, +        String mapping2 = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").field("search_analyzer", "keyword").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper existing = MapperTests.newParser().parse(mapping1);, +        DocumentMapper changed = MapperTests.newParser().parse(mapping2);, +, +        assertThat(((NamedAnalyzer) existing.mappers().name("field").mapper().searchAnalyzer()).name(), equalTo("whitespace"));, +        DocumentMapper.MergeResult mergeResult = existing.merge(changed, mergeFlags().simulate(false));, +, +        assertThat(mergeResult.hasConflicts(), equalTo(false));, +        assertThat(((NamedAnalyzer) existing.mappers().name("field").mapper().searchAnalyzer()).name(), equalTo("keyword"));, +    }, +, +    @Test, +    public void testNotChangeSearchAnalyzer() throws Exception {, +        String mapping1 = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").field("search_analyzer", "whitespace").endObject().endObject(), +                .endObject().endObject().string();, +        String mapping2 = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "string").field("postings_format", "direct").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper existing = MapperTests.newParser().parse(mapping1);, +        DocumentMapper changed = MapperTests.newParser().parse(mapping2);, +, +        assertThat(((NamedAnalyzer) existing.mappers().name("field").mapper().searchAnalyzer()).name(), equalTo("whitespace"));, +        DocumentMapper.MergeResult mergeResult = existing.merge(changed, mergeFlags().simulate(false));, +, +        assertThat(mergeResult.hasConflicts(), equalTo(false));, +        assertThat(((NamedAnalyzer) existing.mappers().name("field").mapper().searchAnalyzer()).name(), equalTo("whitespace"));, +        assertThat((existing.mappers().name("field").mapper().postingsFormatProvider()).name(), equalTo("direct"));, +    }, +]