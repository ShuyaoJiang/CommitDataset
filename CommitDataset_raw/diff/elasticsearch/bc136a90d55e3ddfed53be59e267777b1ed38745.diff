[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +import org.elasticsearch.common.network.NetworkModule;, +import org.elasticsearch.common.settings.Settings;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicInteger;, +    private final NetworkTypes networkTypes;, +        this.networkTypes = new NetworkTypes(nodeInfos);, +        static final String NETWORK_TYPES = "network_types";, +, +        builder.startObject(Fields.NETWORK_TYPES);, +        networkTypes.toXContent(builder, params);, +        builder.endObject();, +, +    static class NetworkTypes implements ToXContent {, +, +        private final Map<String, AtomicInteger> transportTypes;, +        private final Map<String, AtomicInteger> httpTypes;, +, +        private NetworkTypes(final List<NodeInfo> nodeInfos) {, +            final Map<String, AtomicInteger> transportTypes = new HashMap<>();, +            final Map<String, AtomicInteger> httpTypes = new HashMap<>();, +            for (final NodeInfo nodeInfo : nodeInfos) {, +                final Settings settings = nodeInfo.getSettings();, +                final String transportType =, +                    settings.get(NetworkModule.TRANSPORT_TYPE_KEY, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));, +                final String httpType =, +                    settings.get(NetworkModule.HTTP_TYPE_KEY, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                transportTypes.computeIfAbsent(transportType, k -> new AtomicInteger()).incrementAndGet();, +                httpTypes.computeIfAbsent(httpType, k -> new AtomicInteger()).incrementAndGet();, +            }, +            this.transportTypes = Collections.unmodifiableMap(transportTypes);, +            this.httpTypes = Collections.unmodifiableMap(httpTypes);, +        }, +, +        @Override, +        public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {, +            builder.startObject("transport_types");, +            for (final Map.Entry<String, AtomicInteger> entry : transportTypes.entrySet()) {, +                builder.field(entry.getKey(), entry.getValue().get());, +            }, +            builder.endObject();, +            builder.startObject("http_types");, +            for (final Map.Entry<String, AtomicInteger> entry : httpTypes.entrySet()) {, +                builder.field(entry.getKey(), entry.getValue().get());, +            }, +            builder.endObject();, +            return builder;, +        }, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +import org.elasticsearch.common.network.NetworkModule;, +import org.elasticsearch.common.settings.Settings;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicInteger;, +    private final NetworkTypes networkTypes;, +        this.networkTypes = new NetworkTypes(nodeInfos);, +        static final String NETWORK_TYPES = "network_types";, +, +        builder.startObject(Fields.NETWORK_TYPES);, +        networkTypes.toXContent(builder, params);, +        builder.endObject();, +, +    static class NetworkTypes implements ToXContent {, +, +        private final Map<String, AtomicInteger> transportTypes;, +        private final Map<String, AtomicInteger> httpTypes;, +, +        private NetworkTypes(final List<NodeInfo> nodeInfos) {, +            final Map<String, AtomicInteger> transportTypes = new HashMap<>();, +            final Map<String, AtomicInteger> httpTypes = new HashMap<>();, +            for (final NodeInfo nodeInfo : nodeInfos) {, +                final Settings settings = nodeInfo.getSettings();, +                final String transportType =, +                    settings.get(NetworkModule.TRANSPORT_TYPE_KEY, NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.get(settings));, +                final String httpType =, +                    settings.get(NetworkModule.HTTP_TYPE_KEY, NetworkModule.HTTP_DEFAULT_TYPE_SETTING.get(settings));, +                transportTypes.computeIfAbsent(transportType, k -> new AtomicInteger()).incrementAndGet();, +                httpTypes.computeIfAbsent(httpType, k -> new AtomicInteger()).incrementAndGet();, +            }, +            this.transportTypes = Collections.unmodifiableMap(transportTypes);, +            this.httpTypes = Collections.unmodifiableMap(httpTypes);, +        }, +, +        @Override, +        public XContentBuilder toXContent(final XContentBuilder builder, final Params params) throws IOException {, +            builder.startObject("transport_types");, +            for (final Map.Entry<String, AtomicInteger> entry : transportTypes.entrySet()) {, +                builder.field(entry.getKey(), entry.getValue().get());, +            }, +            builder.endObject();, +            builder.startObject("http_types");, +            for (final Map.Entry<String, AtomicInteger> entry : httpTypes.entrySet()) {, +                builder.field(entry.getKey(), entry.getValue().get());, +            }, +            builder.endObject();, +            return builder;, +        }, +]