[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapperParser.java, +            } else if (type.equals(JsonShortFieldMapper.JSON_TYPE)) {, +                objBuilder.add(parseShort(propName, (ObjectNode) propNode));, +    private JsonShortFieldMapper.Builder parseShort(String name, ObjectNode integerNode) {, +        JsonShortFieldMapper.Builder builder = shortField(name);, +        parseNumberField(builder, name, integerNode);, +        for (Iterator<Map.Entry<String, JsonNode>> propsIt = integerNode.getFields(); propsIt.hasNext();) {, +            Map.Entry<String, JsonNode> entry = propsIt.next();, +            String propName = entry.getKey();, +            JsonNode propNode = entry.getValue();, +            if (propName.equals("nullValue")) {, +                builder.nullValue(nodeShortValue(propNode));, +            }, +        }, +        return builder;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapperParser.java, +            } else if (type.equals(JsonShortFieldMapper.JSON_TYPE)) {, +                objBuilder.add(parseShort(propName, (ObjectNode) propNode));, +    private JsonShortFieldMapper.Builder parseShort(String name, ObjectNode integerNode) {, +        JsonShortFieldMapper.Builder builder = shortField(name);, +        parseNumberField(builder, name, integerNode);, +        for (Iterator<Map.Entry<String, JsonNode>> propsIt = integerNode.getFields(); propsIt.hasNext();) {, +            Map.Entry<String, JsonNode> entry = propsIt.next();, +            String propName = entry.getKey();, +            JsonNode propNode = entry.getValue();, +            if (propName.equals("nullValue")) {, +                builder.nullValue(nodeShortValue(propNode));, +            }, +        }, +        return builder;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonMapperBuilders.java, +    public static JsonShortFieldMapper.Builder shortField(String name) {, +        return new JsonShortFieldMapper.Builder(name);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapperParser.java, +            } else if (type.equals(JsonShortFieldMapper.JSON_TYPE)) {, +                objBuilder.add(parseShort(propName, (ObjectNode) propNode));, +    private JsonShortFieldMapper.Builder parseShort(String name, ObjectNode integerNode) {, +        JsonShortFieldMapper.Builder builder = shortField(name);, +        parseNumberField(builder, name, integerNode);, +        for (Iterator<Map.Entry<String, JsonNode>> propsIt = integerNode.getFields(); propsIt.hasNext();) {, +            Map.Entry<String, JsonNode> entry = propsIt.next();, +            String propName = entry.getKey();, +            JsonNode propNode = entry.getValue();, +            if (propName.equals("nullValue")) {, +                builder.nullValue(nodeShortValue(propNode));, +            }, +        }, +        return builder;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonMapperBuilders.java, +    public static JsonShortFieldMapper.Builder shortField(String name) {, +        return new JsonShortFieldMapper.Builder(name);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonShortFieldMapper.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.json;, +, +import org.apache.lucene.document.Field;, +import org.apache.lucene.document.Fieldable;, +import org.apache.lucene.search.*;, +import org.apache.lucene.util.NumericUtils;, +import org.codehaus.jackson.JsonToken;, +import org.elasticsearch.index.analysis.NamedAnalyzer;, +import org.elasticsearch.index.analysis.NumericIntegerAnalyzer;, +import org.elasticsearch.util.Numbers;, +import org.elasticsearch.util.json.JsonBuilder;, +, +import java.io.IOException;, +, +/**, + * @author kimchy (shay.banon), + */, +public class JsonShortFieldMapper extends JsonNumberFieldMapper<Short> {, +]