[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +    public void testExists() throws Exception {, +        RestHighLevelClient client = highLevelClient();, +        // tag::exists-request, +        GetRequest getRequest = new GetRequest(, +            "posts", // <1>, +            "doc",   // <2>, +            "1");    // <3>, +        getRequest.fetchSourceContext(new FetchSourceContext(false)); // <4>, +        getRequest.storedFields("_none_");                            // <5>, +        // end::exists-request, +        {, +            // tag::exists-execute, +            boolean exists = client.exists(getRequest);, +            // end::exists-execute, +            assertFalse(exists);, +        }, +        {, +            // tag::exists-execute-listener, +            ActionListener<Boolean> listener = new ActionListener<Boolean>() {, +                @Override, +                public void onResponse(Boolean exists) {, +                    // <1>, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    // <2>, +                }, +            };, +            // end::exists-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener<>(listener, latch);, +, +            // tag::exists-execute-async, +            client.existsAsync(getRequest, listener); // <1>, +            // end::exists-execute-async, +, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +        }, +    }, +, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CRUDDocumentationIT.java, +    public void testExists() throws Exception {, +        RestHighLevelClient client = highLevelClient();, +        // tag::exists-request, +        GetRequest getRequest = new GetRequest(, +            "posts", // <1>, +            "doc",   // <2>, +            "1");    // <3>, +        getRequest.fetchSourceContext(new FetchSourceContext(false)); // <4>, +        getRequest.storedFields("_none_");                            // <5>, +        // end::exists-request, +        {, +            // tag::exists-execute, +            boolean exists = client.exists(getRequest);, +            // end::exists-execute, +            assertFalse(exists);, +        }, +        {, +            // tag::exists-execute-listener, +            ActionListener<Boolean> listener = new ActionListener<Boolean>() {, +                @Override, +                public void onResponse(Boolean exists) {, +                    // <1>, +                }, +, +                @Override, +                public void onFailure(Exception e) {, +                    // <2>, +                }, +            };, +            // end::exists-execute-listener, +, +            // Replace the empty listener by a blocking listener in test, +            final CountDownLatch latch = new CountDownLatch(1);, +            listener = new LatchedActionListener<>(listener, latch);, +, +            // tag::exists-execute-async, +            client.existsAsync(getRequest, listener); // <1>, +            // end::exists-execute-async, +, +            assertTrue(latch.await(30L, TimeUnit.SECONDS));, +        }, +    }, +, +++ b/docs/java-rest/high-level/document/exists.asciidoc, +[[java-rest-high-document-exists]], +=== Exists API, +, +The exists API returns `true` if a document exists, and `false` otherwise., +, +[[java-rest-high-document-exists-request]], +==== Exists Request, +, +It uses `GetRequest` just like the <<java-rest-high-document-get>>., +All of its <<java-rest-high-document-get-request-optional-arguments, optional arguments>>, +are supported. Since `exists()` only returns `true` or `false`, we recommend]