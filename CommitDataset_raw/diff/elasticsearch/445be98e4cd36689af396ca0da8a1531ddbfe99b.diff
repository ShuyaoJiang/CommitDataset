[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public void updateBufferSize(ByteSizeValue shardIndexingBufferSize) {, +                updateBufferSize(IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public void updateBufferSize(ByteSizeValue shardIndexingBufferSize) {, +                updateBufferSize(IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public void updateBufferSize(ByteSizeValue shardIndexingBufferSize) {, +                updateBufferSize(IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +            newFile = TranslogWriter.create(shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), getChannelFactory(), config.getBufferSize());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public void updateBufferSize(ByteSizeValue shardIndexingBufferSize) {, +                updateBufferSize(IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +            newFile = TranslogWriter.create(shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), getChannelFactory(), config.getBufferSize());, +++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogConfig.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +    public static final ByteSizeValue DEFAULT_BUFFER_SIZE = new ByteSizeValue(8, ByteSizeUnit.KB);, +    private final ByteSizeValue bufferSize;, +        this(shardId, translogPath, indexSettings, durabilty, bigArrays, threadPool, DEFAULT_BUFFER_SIZE);, +    }, +, +    TranslogConfig(ShardId shardId, Path translogPath, IndexSettings indexSettings, Translog.Durabilty durabilty, BigArrays bigArrays, @Nullable ThreadPool threadPool, ByteSizeValue bufferSize) {, +        this.bufferSize = bufferSize;, +, +, +    /**, +     * The translog buffer size. Default is <tt>8kb</tt>, +     */, +    public ByteSizeValue getBufferSize() {, +        return bufferSize;, +    }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public void updateBufferSize(ByteSizeValue shardIndexingBufferSize) {, +                updateBufferSize(IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java, +            newFile = TranslogWriter.create(shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), getChannelFactory(), config.getBufferSize());, +++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogConfig.java, +import org.elasticsearch.common.unit.ByteSizeUnit;, +    public static final ByteSizeValue DEFAULT_BUFFER_SIZE = new ByteSizeValue(8, ByteSizeUnit.KB);, +    private final ByteSizeValue bufferSize;, +        this(shardId, translogPath, indexSettings, durabilty, bigArrays, threadPool, DEFAULT_BUFFER_SIZE);, +    }, +, +    TranslogConfig(ShardId shardId, Path translogPath, IndexSettings indexSettings, Translog.Durabilty durabilty, BigArrays bigArrays, @Nullable ThreadPool threadPool, ByteSizeValue bufferSize) {, +        this.bufferSize = bufferSize;, +, +, +    /**, +     * The translog buffer size. Default is <tt>8kb</tt>, +     */, +    public ByteSizeValue getBufferSize() {, +        return bufferSize;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +import java.io.BufferedOutputStream;, +import java.io.OutputStream;, +    private final ShardId shardId;, +    private final ReleasableLock readLock;, +    private final ReleasableLock writeLock;, +    private volatile long lastSyncedOffset;, +    private volatile int operationCounter;, +    private volatile long writtenOffset;, +    private final byte[] buffer;, +    private int bufferCount;, +    private WrapperOutputStream bufferOs = new WrapperOutputStream();, +    /* the total offset of this file including the bytes written to the file as well as into the buffer */, +    private volatile long totalOffset;, +, +, +    public TranslogWriter(ShardId shardId, long generation, ChannelReference channelReference, ByteSizeValue bufferSize) throws IOException {, +        this.totalOffset = writtenOffset;, +        this.buffer = new byte[bufferSize.bytesAsInt()];, +        this.lastSyncedOffset = channelReference.getChannel().position();, +    public static TranslogWriter create(ShardId shardId, String translogUUID, long fileGeneration, Path file, Callback<ChannelReference> onClose, ChannelFactory channelFactory, ByteSizeValue bufferSize) throws IOException {, +            final TranslogWriter writer = new TranslogWriter(shardId, fileGeneration, new ChannelReference(file, fileGeneration, channel, onClose), bufferSize);, +    private final void closeWithTragicEvent(Throwable throwable) throws IOException {, +            final long offset = totalOffset;, +            if (data.length() >= buffer.length) {, +                flush();, +                // we use the channel to write, since on windows, writing to the RAF might not be reflected, +                // when reading through the channel, +                } catch (Throwable ex) {, +                    closeWithTragicEvent(ex);, +                    throw ex;, +                writtenOffset += data.length();, +                totalOffset += data.length();, +            } else {]