[+++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(Set<String> nodeIds) {, +        ArrayList<ShardRouting> preferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +        ArrayList<ShardRouting> notPreferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            if (nodeIds.contains(shardRouting.currentNodeId())) {, +                preferred.add(shardRouting);, +            } else {, +                notPreferred.add(shardRouting);, +        preferred.addAll(notPreferred);, +            preferred.addAll(allInitializingShards);, +        return new PlainShardIterator(shardId, preferred);, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(Set<String> nodeIds) {, +        ArrayList<ShardRouting> preferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +        ArrayList<ShardRouting> notPreferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            if (nodeIds.contains(shardRouting.currentNodeId())) {, +                preferred.add(shardRouting);, +            } else {, +                notPreferred.add(shardRouting);, +        preferred.addAll(notPreferred);, +            preferred.addAll(allInitializingShards);, +        return new PlainShardIterator(shardId, preferred);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +import java.util.Arrays;, +import java.util.stream.Collectors;, +                case PREFER_NODES:, +                    final Set<String> nodesIds =, +                            Arrays.stream(, +                                    preference.substring(Preference.PREFER_NODES.type().length() + 1).split(","), +                            ).collect(Collectors.toSet());, +                    return indexShard.preferNodeActiveInitializingShardsIt(nodesIds);, +                    return indexShard.preferNodeActiveInitializingShardsIt(Collections.singleton(localNodeId));, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(Set<String> nodeIds) {, +        ArrayList<ShardRouting> preferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +        ArrayList<ShardRouting> notPreferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            if (nodeIds.contains(shardRouting.currentNodeId())) {, +                preferred.add(shardRouting);, +            } else {, +                notPreferred.add(shardRouting);, +        preferred.addAll(notPreferred);, +            preferred.addAll(allInitializingShards);, +        return new PlainShardIterator(shardId, preferred);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +import java.util.Arrays;, +import java.util.stream.Collectors;, +                case PREFER_NODES:, +                    final Set<String> nodesIds =, +                            Arrays.stream(, +                                    preference.substring(Preference.PREFER_NODES.type().length() + 1).split(","), +                            ).collect(Collectors.toSet());, +                    return indexShard.preferNodeActiveInitializingShardsIt(nodesIds);, +                    return indexShard.preferNodeActiveInitializingShardsIt(Collections.singleton(localNodeId));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/Preference.java, +     * Route to preferred nodes, if possible, +    PREFER_NODES("_prefer_nodes"),, +            case "_prefer_nodes":, +                return PREFER_NODES;, +, +++ b/buildSrc/src/main/resources/forbidden/es-all-signatures.txt, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public ShardIterator preferNodeActiveInitializingShardsIt(Set<String> nodeIds) {, +        ArrayList<ShardRouting> preferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +        ArrayList<ShardRouting> notPreferred = new ArrayList<>(activeShards.size() + allInitializingShards.size());, +            if (nodeIds.contains(shardRouting.currentNodeId())) {]