[+++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbers#UNASSIGNED_SEQ_NO} if the operation, +            seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +        protected Long seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbers#UNASSIGNED_SEQ_NO} if the operation, +            seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +        protected Long seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, aborted);, +            this(index, type, id, cause, status, SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +         * NOTE: {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbers#UNASSIGNED_SEQ_NO} if the operation, +            seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +        protected Long seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, aborted);, +            this(index, type, id, cause, status, SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +         * NOTE: {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +        assert result.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "failed result should not have a sequence number";, +            final Engine.Result result = new Engine.IndexResult(failure, updateRequest.version(), SequenceNumbers.UNASSIGNED_SEQ_NO);, +            return primaryResponse.getFailure().getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO, +                        assert failure.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "seq no must be assigned";, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbers#UNASSIGNED_SEQ_NO} if the operation, +            seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +        protected Long seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, aborted);, +            this(index, type, id, cause, status, SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +         * NOTE: {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +        assert result.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "failed result should not have a sequence number";, +            final Engine.Result result = new Engine.IndexResult(failure, updateRequest.version(), SequenceNumbers.UNASSIGNED_SEQ_NO);, +            return primaryResponse.getFailure().getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO, +                        assert failure.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "seq no must be assigned";, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +            assert localCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO;, +                globalCheckpoint = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbers#UNASSIGNED_SEQ_NO} if the operation, +            seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +        protected Long seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, aborted);, +            this(index, type, id, cause, status, SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +         * NOTE: {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +        assert result.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "failed result should not have a sequence number";, +            final Engine.Result result = new Engine.IndexResult(failure, updateRequest.version(), SequenceNumbers.UNASSIGNED_SEQ_NO);, +            return primaryResponse.getFailure().getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO, +                        assert failure.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "seq no must be assigned";, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +            assert localCheckpoint != SequenceNumbers.UNASSIGNED_SEQ_NO;, +                globalCheckpoint = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +        this(new ShardInfo(0, 0), shardId, type, id, SequenceNumbers.UNASSIGNED_SEQ_NO, 0, version, result);, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +     * Returns the sequence number assigned for this change. Returns {@link SequenceNumbers#UNASSIGNED_SEQ_NO} if the operation, +            seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +        protected Long seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +            this(index, type, id, cause, ExceptionsHelper.status(cause), SequenceNumbers.UNASSIGNED_SEQ_NO, aborted);, +            this(index, type, id, cause, status, SequenceNumbers.UNASSIGNED_SEQ_NO, false);, +                seqNo = SequenceNumbers.UNASSIGNED_SEQ_NO;, +         * NOTE: {@link SequenceNumbers#UNASSIGNED_SEQ_NO}, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.index.seqno.SequenceNumbers;, +        assert result.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "failed result should not have a sequence number";, +            final Engine.Result result = new Engine.IndexResult(failure, updateRequest.version(), SequenceNumbers.UNASSIGNED_SEQ_NO);, +            return primaryResponse.getFailure().getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO, +                        assert failure.getSeqNo() != SequenceNumbers.UNASSIGNED_SEQ_NO : "seq no must be assigned";]