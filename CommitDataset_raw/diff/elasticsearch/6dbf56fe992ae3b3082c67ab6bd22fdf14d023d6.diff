[+++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +    private final ConcurrentMap<String, CompiledScript> staticCache = ConcurrentCollections.newConcurrentMap();, +    private final Cache<String, CompiledScript> cache;, +        String cacheKey = getCacheKey(scriptEngineService, script.getScript());, +            cacheKey = getCacheKey(scriptEngineService, code);, +    private class ScriptCacheRemovalListener implements RemovalListener<String, CompiledScript> {, +        public void onRemoval(RemovalNotification<String, CompiledScript> notification) {, +                                String cacheKey = getCacheKey(engineService, scriptNameExt.v1());, +                staticCache.remove(getCacheKey(engineService, scriptNameExt.v1()));, +    private static String getCacheKey(ScriptEngineService scriptEngineService, String script) {, +        String lang = scriptEngineService.types()[0];, +        return lang + ":" + script;, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +    private final ConcurrentMap<String, CompiledScript> staticCache = ConcurrentCollections.newConcurrentMap();, +    private final Cache<String, CompiledScript> cache;, +        String cacheKey = getCacheKey(scriptEngineService, script.getScript());, +            cacheKey = getCacheKey(scriptEngineService, code);, +    private class ScriptCacheRemovalListener implements RemovalListener<String, CompiledScript> {, +        public void onRemoval(RemovalNotification<String, CompiledScript> notification) {, +                                String cacheKey = getCacheKey(engineService, scriptNameExt.v1());, +                staticCache.remove(getCacheKey(engineService, scriptNameExt.v1()));, +    private static String getCacheKey(ScriptEngineService scriptEngineService, String script) {, +        String lang = scriptEngineService.types()[0];, +        return lang + ":" + script;, +++ b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java, +    public void testInlineScriptCompiledOnceCache() throws IOException {, +        buildScriptService(Settings.EMPTY);, +        CompiledScript compiledScript1 = scriptService.compile(new Script("1+1", ScriptType.INLINE, "test", null),, +                randomFrom(scriptContexts));, +        CompiledScript compiledScript2 = scriptService.compile(new Script("1+1", ScriptType.INLINE, "test", null),, +                randomFrom(scriptContexts));, +        assertThat(compiledScript1, sameInstance(compiledScript2));, +    }, +, +    @Test]