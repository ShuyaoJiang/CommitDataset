[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MachineLearningFeatureSetUsage.java, +    public static final String CREATED_BY = "created_by";, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MachineLearningFeatureSetUsage.java, +    public static final String CREATED_BY = "created_by";, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +            Map<JobState, Map<String, Long>> createdByByState = new HashMap<>();, +            Map<String, Long> allJobsCreatedBy = jobs.stream().map(this::jobCreatedBy), +                    .collect(Collectors.groupingBy(item -> item, Collectors.counting()));;, +                Job job = jobMap.get(jobStats.getJobId());, +                int detectorsCount = job.getAnalysisConfig().getDetectors().size();, +                createdByByState.computeIfAbsent(jobState, js -> new HashMap<>()), +                        .compute(jobCreatedBy(job), (k, v) -> (v == null) ? 1L : (v + 1));, +                    allJobsModelSizeStats, allJobsForecastStats, allJobsCreatedBy));, +                        forecastStatsByState.get(jobState),, +                        createdByByState.get(jobState)));, +        private String jobCreatedBy(Job job) {, +            Map<String, Object> customSettings = job.getCustomSettings();, +            if (customSettings == null || customSettings.containsKey(MachineLearningFeatureSetUsage.CREATED_BY) == false) {, +                return "unknown";, +            }, +            // Replace non-alpha-numeric characters with underscores because, +            // the values from custom settings become keys in the usage data, +            return customSettings.get(MachineLearningFeatureSetUsage.CREATED_BY).toString().replaceAll("\\W", "_");, +        }, +, +                                                        ForecastStats forecastStats, Map<String, Long> createdBy) {, +            usage.put(MachineLearningFeatureSetUsage.CREATED_BY, createdBy);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MachineLearningFeatureSetUsage.java, +    public static final String CREATED_BY = "created_by";, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +            Map<JobState, Map<String, Long>> createdByByState = new HashMap<>();, +            Map<String, Long> allJobsCreatedBy = jobs.stream().map(this::jobCreatedBy), +                    .collect(Collectors.groupingBy(item -> item, Collectors.counting()));;, +                Job job = jobMap.get(jobStats.getJobId());, +                int detectorsCount = job.getAnalysisConfig().getDetectors().size();, +                createdByByState.computeIfAbsent(jobState, js -> new HashMap<>()), +                        .compute(jobCreatedBy(job), (k, v) -> (v == null) ? 1L : (v + 1));, +                    allJobsModelSizeStats, allJobsForecastStats, allJobsCreatedBy));, +                        forecastStatsByState.get(jobState),, +                        createdByByState.get(jobState)));, +        private String jobCreatedBy(Job job) {, +            Map<String, Object> customSettings = job.getCustomSettings();, +            if (customSettings == null || customSettings.containsKey(MachineLearningFeatureSetUsage.CREATED_BY) == false) {, +                return "unknown";, +            }, +            // Replace non-alpha-numeric characters with underscores because, +            // the values from custom settings become keys in the usage data, +            return customSettings.get(MachineLearningFeatureSetUsage.CREATED_BY).toString().replaceAll("\\W", "_");, +        }, +, +                                                        ForecastStats forecastStats, Map<String, Long> createdBy) {, +            usage.put(MachineLearningFeatureSetUsage.CREATED_BY, createdBy);, +++ b/x-pack/plugin/ml/src/test/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSetTests.java, +        Job opened1 = buildJob("opened1", Collections.singletonList(buildMinDetector("foo")),, +                Collections.singletonMap("created_by", randomFrom("a-cool-module", "a_cool_module", "a cool module")));, +            assertThat(source.getValue("jobs._all.created_by.a_cool_module"), equalTo(1));, +            assertThat(source.getValue("jobs._all.created_by.unknown"), equalTo(2));, +            assertThat(source.getValue("jobs.opened.created_by.a_cool_module"), equalTo(1));, +            assertThat(source.getValue("jobs.opened.created_by.unknown"), equalTo(1));, +            assertThat(source.getValue("jobs.closed.created_by.a_cool_module"), is(nullValue()));, +            assertThat(source.getValue("jobs.closed.created_by.unknown"), equalTo(1));, +            @SuppressWarnings("unchecked"), +            @SuppressWarnings("unchecked"), +        return buildJob(jobId, detectors, null);, +    }, +, +    private static Job buildJob(String jobId, List<Detector> detectors, Map<String, Object> customSettings) {, +                .setCustomSettings(customSettings)]