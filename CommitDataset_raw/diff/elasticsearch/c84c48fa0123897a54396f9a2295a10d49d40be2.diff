[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/CommandLineHttpClient.java, +import org.elasticsearch.common.CheckedConsumer;, +import org.elasticsearch.common.CheckedSupplier;, +    /**, +     * General purpose HTTP(S) call with JSON Content-Type and Authorization Header., +     * SSL settings are read from the settings file, if any., +     *, +     * @param user, +     *            user in the authorization header., +     * @param password, +     *            password in the authorization header., +     * @param requestBodySupplier, +     *            supplier for the JSON string body of the request., +     * @param responseConsumer, +     *            consumer of the response Input Stream., +     * @return HTTP protocol response code., +     *, +     * @SuppressForbidden We do not install the security manager when calling from, +     *                    the commandline. However, doPrivileged blocks will be, +     *                    necessary for any test code that calls this., +     */, +    public int postURL(String method, URL url, String user, SecureString password, CheckedSupplier<String, Exception> requestBodySupplier,, +            CheckedConsumer<InputStream, Exception> responseConsumer) throws Exception {, +        if ("https".equalsIgnoreCase(url.getProtocol())) {, +        String bodyString = requestBodySupplier.get();, +        // this throws IOException if there is a network problem, +        final int ans = conn.getResponseCode();, +            responseConsumer.accept(inputStream);, +            // this IOException is if the HTTP response code is 'BAD' (>= 400), +                responseConsumer.accept(errorStream);, +            Releasables.closeWhileHandlingException(conn::disconnect);, +        return ans;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/CommandLineHttpClient.java, +import org.elasticsearch.common.CheckedConsumer;, +import org.elasticsearch.common.CheckedSupplier;, +    /**, +     * General purpose HTTP(S) call with JSON Content-Type and Authorization Header., +     * SSL settings are read from the settings file, if any., +     *, +     * @param user, +     *            user in the authorization header., +     * @param password, +     *            password in the authorization header., +     * @param requestBodySupplier, +     *            supplier for the JSON string body of the request., +     * @param responseConsumer, +     *            consumer of the response Input Stream., +     * @return HTTP protocol response code., +     *, +     * @SuppressForbidden We do not install the security manager when calling from, +     *                    the commandline. However, doPrivileged blocks will be, +     *                    necessary for any test code that calls this., +     */, +    public int postURL(String method, URL url, String user, SecureString password, CheckedSupplier<String, Exception> requestBodySupplier,, +            CheckedConsumer<InputStream, Exception> responseConsumer) throws Exception {, +        if ("https".equalsIgnoreCase(url.getProtocol())) {, +        String bodyString = requestBodySupplier.get();, +        // this throws IOException if there is a network problem, +        final int ans = conn.getResponseCode();, +            responseConsumer.accept(inputStream);, +            // this IOException is if the HTTP response code is 'BAD' (>= 400), +                responseConsumer.accept(errorStream);, +            Releasables.closeWhileHandlingException(conn::disconnect);, +        return ans;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/SetupPasswordTool.java, +, +import org.bouncycastle.util.io.Streams;, +import org.elasticsearch.cli.Terminal.Verbosity;, +import org.elasticsearch.common.CheckedBiConsumer;, +import org.elasticsearch.xpack.security.support.Validation;, +import java.net.ConnectException;, +import java.net.HttpURLConnection;, +import java.net.URL;, +import java.nio.charset.StandardCharsets;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, + * A tool to set passwords of reserved users (elastic, kibana and, + * logstash_system). Can run in `interactive` or `auto` mode. In `auto` mode, + * generates random passwords and prints them on the console. In `interactive`, + * mode prompts for each individual user's password. This tool only runs once,, + * if successful. After the elastic user password is set you have to use the, + * `security` API to manipulate passwords., +    private static final char[] CHARS = ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~!@#$%^&*-_=+?").toCharArray();, +    public static final List<String> USERS = Arrays.asList(ElasticUser.NAME, KibanaUser.NAME, LogstashSystemUser.NAME);, +    private final CheckedFunction<Environment, CommandLineHttpClient, Exception> clientFunction;, +        this((environment) -> new CommandLineHttpClient(environment.settings(), environment), (environment) -> {, +                throw new UserException(ExitCodes.CONFIG,, +                        "Elasticsearch keystore file is missing [" + KeyStoreWrapper.keystorePath(environment.configFile()) + "]");, +    SetupPasswordTool(CheckedFunction<Environment, CommandLineHttpClient, Exception> clientFunction,, +     * This class sets the passwords using automatically generated random passwords., +     * The passwords will be printed to the console., +            checkElasticKeystorePasswordValid(terminal);, +                terminal.println("Initiating the setup of reserved user " + String.join(",", USERS) + "  passwords.");, +            changePasswords((user) -> generatePassword(secureRandom, user),, +     * This class sets the passwords using input prompted on the console, +            checkElasticKeystorePasswordValid(terminal);, +                terminal.println("Initiating the setup of reserved user " + String.join(",", USERS) + "  passwords.");, +            changePasswords(user -> promptForPassword(terminal, user),, +            // loop for two consecutive good passwords]