[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/command/MoveAllocationCommand.java, +        RoutingNode fromRoutingNode = allocation.routingNodes().node(fromDiscoNode.getId());, +        if (fromRoutingNode == null && !fromDiscoNode.isDataNode()) {, +            throw new IllegalArgumentException("[move_allocation] can't move [" + index + "][" + shardId + "] from ", +                + fromDiscoNode + " to " + toDiscoNode + ": source [" +  fromDiscoNode.getName(), +                + "] is not a data node.");, +        }, +        RoutingNode toRoutingNode = allocation.routingNodes().node(toDiscoNode.getId());, +        if (toRoutingNode == null && !toDiscoNode.isDataNode()) {, +            throw new IllegalArgumentException("[move_allocation] can't move [" + index + "][" + shardId + "] from ", +                + fromDiscoNode + " to " + toDiscoNode + ": source [" +  toDiscoNode.getName(), +                + "] is not a data node.");, +        }, +, +        for (ShardRouting shardRouting : fromRoutingNode) {, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/allocation/command/MoveAllocationCommand.java, +        RoutingNode fromRoutingNode = allocation.routingNodes().node(fromDiscoNode.getId());, +        if (fromRoutingNode == null && !fromDiscoNode.isDataNode()) {, +            throw new IllegalArgumentException("[move_allocation] can't move [" + index + "][" + shardId + "] from ", +                + fromDiscoNode + " to " + toDiscoNode + ": source [" +  fromDiscoNode.getName(), +                + "] is not a data node.");, +        }, +        RoutingNode toRoutingNode = allocation.routingNodes().node(toDiscoNode.getId());, +        if (toRoutingNode == null && !toDiscoNode.isDataNode()) {, +            throw new IllegalArgumentException("[move_allocation] can't move [" + index + "][" + shardId + "] from ", +                + fromDiscoNode + " to " + toDiscoNode + ": source [" +  toDiscoNode.getName(), +                + "] is not a data node.");, +        }, +, +        for (ShardRouting shardRouting : fromRoutingNode) {, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocationCommandsTests.java, +import org.elasticsearch.cluster.ClusterInfo;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.routing.RoutingNodes;, +import org.elasticsearch.cluster.routing.allocation.decider.AllocationDeciders;, +import org.elasticsearch.index.Index;, +import java.util.EnumSet;, +import java.util.HashSet;, +import static java.util.Collections.emptyMap;, +, +    public void testMoveShardToNonDataNode() {, +        AllocationService allocation = createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries", 10).build());, +, +        logger.info("creating an index with 1 shard, no replica");, +        MetaData metaData = MetaData.builder(), +            .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0)), +            .build();, +        RoutingTable routingTable = RoutingTable.builder(), +            .addAsNew(metaData.index("test")), +            .build();, +        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();, +, +        logger.info("--> adding two nodes");, +, +        DiscoveryNode node1 = new DiscoveryNode("node1", "node1", "node1", "test1", "test1", buildNewFakeTransportAddress(), emptyMap(),, +            MASTER_DATA_ROLES, Version.CURRENT);, +        DiscoveryNode node2 = new DiscoveryNode("node2", "node2", "node2", "test2", "test2", buildNewFakeTransportAddress(), emptyMap(),, +            new HashSet<>(randomSubsetOf(EnumSet.of(DiscoveryNode.Role.MASTER, DiscoveryNode.Role.INGEST))), Version.CURRENT);, +, +        clusterState = ClusterState.builder(clusterState).nodes(, +            DiscoveryNodes.builder(), +                .add(node1), +                .add(node2)).build();, +, +        logger.info("start primary shard");, +        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));, +, +        Index index = clusterState.getMetaData().index("test").getIndex();, +        MoveAllocationCommand command = new MoveAllocationCommand(index.getName(), 0, "node1", "node2");, +        RoutingAllocation routingAllocation = new RoutingAllocation(new AllocationDeciders(Settings.EMPTY, Collections.emptyList()),, +            new RoutingNodes(clusterState, false), clusterState, ClusterInfo.EMPTY, System.nanoTime());, +        logger.info("--> executing move allocation command to non-data node");, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> command.execute(routingAllocation, false));, +        assertEquals("[move_allocation] can't move [test][0] from " + node1 + " to " + node2 + ": source [" + node2.getName() + "] is not a data node.", e.getMessage());, +    }, +, +    public void testMoveShardFromNonDataNode() {, +        AllocationService allocation = createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries", 10).build());, +, +        logger.info("creating an index with 1 shard, no replica");, +        MetaData metaData = MetaData.builder(), +            .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0)), +            .build();, +        RoutingTable routingTable = RoutingTable.builder(), +            .addAsNew(metaData.index("test")), +            .build();, +        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();, +, +        logger.info("--> adding two nodes");, +, +        DiscoveryNode node1 = new DiscoveryNode("node1", "node1", "node1", "test1", "test1", buildNewFakeTransportAddress(), emptyMap(),, +            MASTER_DATA_ROLES, Version.CURRENT);, +        DiscoveryNode node2 = new DiscoveryNode("node2", "node2", "node2", "test2", "test2", buildNewFakeTransportAddress(), emptyMap(),, +            new HashSet<>(randomSubsetOf(EnumSet.of(DiscoveryNode.Role.MASTER, DiscoveryNode.Role.INGEST))), Version.CURRENT);, +, +        clusterState = ClusterState.builder(clusterState).nodes(, +            DiscoveryNodes.builder(), +                .add(node1), +                .add(node2)).build();, +        logger.info("start primary shard");]