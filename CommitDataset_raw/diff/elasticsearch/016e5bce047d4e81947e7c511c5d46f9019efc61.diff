[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +        Engine engine = new RobinEngine(shardId, settings, store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +        Engine engine = new RobinEngine(shardId, settings, store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +                new IndexSettingsModule(index, settings),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +        Engine engine = new RobinEngine(shardId, settings, store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +                new IndexSettingsModule(index, settings),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.settings.Settings;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;, +        public Builder updateSettings(Settings settings, String... indices) {, +            if (indices == null || indices.length == 0) {, +                indices = this.indices.map().keySet().toArray(new String[this.indices.map().keySet().size()]);, +            }, +            for (String index : indices) {, +                IndexMetaData indexMetaData = this.indices.get(index);, +                if (indexMetaData == null) {, +                    throw new IndexMissingException(new Index(index));, +                }, +                put(IndexMetaData.newIndexMetaDataBuilder(indexMetaData), +                        .settings(settingsBuilder().put(indexMetaData.settings()).put(settings)), +                        .build());, +            }, +            return this;, +        }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +        Engine engine = new RobinEngine(shardId, settings, store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +                new IndexSettingsModule(index, settings),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.settings.Settings;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;, +        public Builder updateSettings(Settings settings, String... indices) {, +            if (indices == null || indices.length == 0) {, +                indices = this.indices.map().keySet().toArray(new String[this.indices.map().keySet().size()]);, +            }, +            for (String index : indices) {, +                IndexMetaData indexMetaData = this.indices.get(index);, +                if (indexMetaData == null) {, +                    throw new IndexMissingException(new Index(index));, +                }, +                put(IndexMetaData.newIndexMetaDataBuilder(indexMetaData), +                        .settings(settingsBuilder().put(indexMetaData.settings()).put(settings)), +                        .build());, +            }, +            return this;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +                    }, +, +                    metaDataBuilder.updateSettings(settings, actualIndices);, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +        Engine engine = new RobinEngine(shardId, settings, store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +                new IndexSettingsModule(index, settings),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.settings.Settings;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;, +        public Builder updateSettings(Settings settings, String... indices) {, +            if (indices == null || indices.length == 0) {, +                indices = this.indices.map().keySet().toArray(new String[this.indices.map().keySet().size()]);, +            }, +            for (String index : indices) {, +                IndexMetaData indexMetaData = this.indices.get(index);, +                if (indexMetaData == null) {, +                    throw new IndexMissingException(new Index(index));, +                }, +                put(IndexMetaData.newIndexMetaDataBuilder(indexMetaData), +                        .settings(settingsBuilder().put(indexMetaData.settings()).put(settings)), +                        .build());, +            }, +            return this;, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +                    }, +, +                    metaDataBuilder.updateSettings(settings, actualIndices);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/unit/TimeValue.java, +        if (duration < 0 && timeUnit == TimeUnit.MILLISECONDS) {, +            return Long.toString(duration);, +        }, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.index.settings.IndexSettingsService;, +        Engine engine = new RobinEngine(shardId, settings, store, deletionPolicy, new FsTranslog(shardId, EMPTY_SETTINGS, new File("work/fs-translog"), false), new LogByteSizeMergePolicyProvider(store, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS)),, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/percolator/EmbeddedPercolatorBenchmarkTest.java, +                new IndexSettingsModule(index, settings),, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.common.settings.Settings;, +import static org.elasticsearch.common.settings.ImmutableSettings.*;]