[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        map.put(GeoHashGridAggregationBuilder.NAME, (p, c) -> ParsedGeoHashGrid.fromXContent(p, (String) c));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        map.put(GeoHashGridAggregationBuilder.NAME, (p, c) -> ParsedGeoHashGrid.fromXContent(p, (String) c));, +++ b/server/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        registerAggregation(new AggregationSpec(GeoHashGridAggregationBuilder.NAME, GeoHashGridAggregationBuilder::new,, +                GeoHashGridAggregationBuilder::parse).addResultReader(InternalGeoHashGrid::new));, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        map.put(GeoHashGridAggregationBuilder.NAME, (p, c) -> ParsedGeoHashGrid.fromXContent(p, (String) c));, +++ b/server/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        registerAggregation(new AggregationSpec(GeoHashGridAggregationBuilder.NAME, GeoHashGridAggregationBuilder::new,, +                GeoHashGridAggregationBuilder::parse).addResultReader(InternalGeoHashGrid::new));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilders.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.InternalGeoHashGrid;, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +     * Create a new {@link InternalGeoHashGrid} aggregation with the given name., +    public static GeoHashGridAggregationBuilder geohashGrid(String name) {, +        return new GeoHashGridAggregationBuilder(name);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        map.put(GeoHashGridAggregationBuilder.NAME, (p, c) -> ParsedGeoHashGrid.fromXContent(p, (String) c));, +++ b/server/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        registerAggregation(new AggregationSpec(GeoHashGridAggregationBuilder.NAME, GeoHashGridAggregationBuilder::new,, +                GeoHashGridAggregationBuilder::parse).addResultReader(InternalGeoHashGrid::new));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilders.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.InternalGeoHashGrid;, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +     * Create a new {@link InternalGeoHashGrid} aggregation with the given name., +    public static GeoHashGridAggregationBuilder geohashGrid(String name) {, +        return new GeoHashGridAggregationBuilder(name);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/BucketPriorityQueue.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.search.aggregations.bucket.geogrid;, +, +import org.apache.lucene.util.PriorityQueue;, +, +class BucketPriorityQueue<B extends InternalGeoGridBucket> extends PriorityQueue<B> {, +, +    BucketPriorityQueue(int size) {, +        super(size);, +    }, +, +    @Override, +    protected boolean lessThan(InternalGeoGridBucket o1, InternalGeoGridBucket o2) {, +        int cmp = Long.compare(o2.getDocCount(), o1.getDocCount());, +        if (cmp == 0) {, +            cmp = o2.compareTo(o1);, +            if (cmp == 0) {, +                cmp = System.identityHashCode(o2) - System.identityHashCode(o1);, +            }, +        }, +        return cmp > 0;, +    }, +}, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        map.put(GeoHashGridAggregationBuilder.NAME, (p, c) -> ParsedGeoHashGrid.fromXContent(p, (String) c));, +++ b/server/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +        registerAggregation(new AggregationSpec(GeoHashGridAggregationBuilder.NAME, GeoHashGridAggregationBuilder::new,, +                GeoHashGridAggregationBuilder::parse).addResultReader(InternalGeoHashGrid::new));, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilders.java, +import org.elasticsearch.search.aggregations.bucket.geogrid.InternalGeoHashGrid;, +import org.elasticsearch.search.aggregations.bucket.geogrid.GeoHashGridAggregationBuilder;, +     * Create a new {@link InternalGeoHashGrid} aggregation with the given name., +    public static GeoHashGridAggregationBuilder geohashGrid(String name) {, +        return new GeoHashGridAggregationBuilder(name);, +++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/geogrid/BucketPriorityQueue.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *]