[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobRenormaliser.java, +                    .setSource(jobResultsPersister.toXContentBuilder(bucket)).execute().actionGet();, +                                .setSource(jobResultsPersister.toXContentBuilder(record)));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobRenormaliser.java, +                    .setSource(jobResultsPersister.toXContentBuilder(bucket)).execute().actionGet();, +                                .setSource(jobResultsPersister.toXContentBuilder(record)));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobResultsPersister.java, +            XContentBuilder content = toXContentBuilder(bucket);, +            persistPerPartitionMaxProbabilities(bucket);, +        } catch (IOException e) {, +            logger.error(new ParameterizedMessage("[{}] Error persisting bucket", new Object[] {jobId}, e));, +, +    /**, +     * Persist a list of anomaly records, +     * @param records the records to persist, +     */, +    public void persistRecords(List<AnomalyRecord> records) {, +        if (records.isEmpty()) {, +            return;, +        }, +        String jobId = records.get(0).getJobId();, +        String indexName = getJobIndexName(jobId);, +        XContentBuilder content = null;, +        try {, +            for (AnomalyRecord record : records) {, +                content = toXContentBuilder(record);, +, +                logger.trace("[{}] ES BULK ACTION: index type {} to index {} with auto-generated ID", jobId, AnomalyRecord.TYPE, indexName);, +                addRecordsRequest.add(client.prepareIndex(indexName, AnomalyRecord.TYPE.getPreferredName()).setSource(content));, +            }, +        } catch (IOException e) {, +            logger.error(new ParameterizedMessage("[{}] Error persisting records", new Object[] {jobId}, e));, +            return;, +, +    /**, +     * Persist a list of influencers, +     * @param influencers the influencers to persist, +     */, +    public void persistInfluencers(List<Influencer> influencers) {, +        if (influencers.isEmpty()) {, +            return;, +        }, +        String jobId = influencers.get(0).getJobId();, +        String indexName = getJobIndexName(jobId);, +        BulkRequestBuilder addInfluencersRequest = client.prepareBulk();, +        XContentBuilder content = null;, +        try {, +            for (Influencer influencer : influencers) {, +                content = toXContentBuilder(influencer);, +                logger.trace("[{}] ES BULK ACTION: index type {} to index {} with auto-generated ID",, +                        jobId, Influencer.TYPE, indexName);, +                addInfluencersRequest.add(client.prepareIndex(indexName, Influencer.TYPE.getPreferredName()).setSource(content));, +            }, +            logger.error(new ParameterizedMessage("[{}] Error persisting influencers", new Object[] {jobId}, e));, +            return;, +        }, +, +        logger.trace("[{}] ES API CALL: bulk request with {} actions", jobId, addInfluencersRequest.numberOfActions());, +        BulkResponse addInfluencersResponse = addInfluencersRequest.execute().actionGet();, +        if (addInfluencersResponse.hasFailures()) {, +            logger.error("[{}] Bulk index of Influencers has errors: {}", jobId, addInfluencersResponse.buildFailureMessage());, +                () -> Quantiles.QUANTILES_ID, () -> toXContentBuilder(quantiles));, +                modelSnapshot::getSnapshotId, () -> toXContentBuilder(modelSnapshot));, +                () -> jobId, () -> toXContentBuilder(modelSizeStats));, +                () -> null, () -> toXContentBuilder(modelSizeStats));, +                () -> null, () -> toXContentBuilder(modelDebugOutput));, +                influencer::getId, () -> toXContentBuilder(influencer));, +    XContentBuilder toXContentBuilder(ToXContent obj) throws IOException {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobRenormaliser.java, +                    .setSource(jobResultsPersister.toXContentBuilder(bucket)).execute().actionGet();, +                                .setSource(jobResultsPersister.toXContentBuilder(record)));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/prelert/job/persistence/JobResultsPersister.java, +            XContentBuilder content = toXContentBuilder(bucket);, +            persistPerPartitionMaxProbabilities(bucket);, +        } catch (IOException e) {, +            logger.error(new ParameterizedMessage("[{}] Error persisting bucket", new Object[] {jobId}, e));, +, +    /**, +     * Persist a list of anomaly records, +     * @param records the records to persist, +     */, +    public void persistRecords(List<AnomalyRecord> records) {, +        if (records.isEmpty()) {, +            return;, +        }, +        String jobId = records.get(0).getJobId();, +        String indexName = getJobIndexName(jobId);, +        XContentBuilder content = null;, +        try {, +            for (AnomalyRecord record : records) {, +                content = toXContentBuilder(record);, +, +                logger.trace("[{}] ES BULK ACTION: index type {} to index {} with auto-generated ID", jobId, AnomalyRecord.TYPE, indexName);, +                addRecordsRequest.add(client.prepareIndex(indexName, AnomalyRecord.TYPE.getPreferredName()).setSource(content));, +            }, +        } catch (IOException e) {, +            logger.error(new ParameterizedMessage("[{}] Error persisting records", new Object[] {jobId}, e));, +            return;, +, +    /**]