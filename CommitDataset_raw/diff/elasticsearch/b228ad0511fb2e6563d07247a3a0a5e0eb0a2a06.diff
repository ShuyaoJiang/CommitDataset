[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java, +import java.util.HashMap;, +import java.util.Map;, +            authorizeBulkItems(authentication, action, (BulkShardRequest) request, permission, metaData, localIndices);, +    /**, +     * Performs authorization checks on the items within a {@link BulkShardRequest}., +     * This inspects the {@link BulkItemRequest items} within the request, computes an <em>implied</em> action for each item's, +     * {@link DocWriteRequest#opType()}, and then checks whether that action is allowed on the targeted index., +     * Items that fail this checks are {@link BulkItemRequest#abort(String, Exception) aborted}, with an, +     * {@link #denial(Authentication, String, TransportRequest) access denied} exception., +     * Because a shard level request is for exactly 1 index, and there are a small number of possible item, +     * {@link DocWriteRequest.OpType types}, the number of distinct authorization checks that need to be performed is very small, but the, +     * results must be cached, to avoid adding a high overhead to each bulk request., +     */, +    private void authorizeBulkItems(Authentication authentication, String action, BulkShardRequest request, Role permission,, +                                    MetaData metaData, Set<String> indices) {, +        if (indices.size() != 1) {, +            final String message = "Action " + action + " should operate on exactly 1 local index but was " + indices.size();, +            assert false : message;, +            throw new IllegalStateException(message);, +        }, +, +        final String index = indices.iterator().next();, +        final Map<String, Boolean> actionAuthority = new HashMap<>();, +        for (BulkItemRequest item : request.items()) {, +            final String itemAction = getAction(item);, +            final boolean granted = actionAuthority.computeIfAbsent(itemAction, key -> {, +                final IndicesAccessControl itemAccessControl = permission.authorize(itemAction, indices, metaData, fieldPermissionsCache);, +                return itemAccessControl.isGranted();, +            });, +            if (granted == false) {, +                item.abort(index, denial(authentication, itemAction, request));, +            }, +        }, +    }, +, +    private static String getAction(BulkItemRequest item) {]