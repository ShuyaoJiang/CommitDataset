[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +    public static enum ScoreMode {First, Avg, Max, Total, Min, Multiply}, +                float multiply = 1;, +                float min = Float.POSITIVE_INFINITY;, +                        multiply *= sc;, +                        min = Math.min(sc, min);, +                        case Min:, +                            sc = min;, +                            break;, +                        case Multiply:, +                            sc = multiply;, +                            break;, +            } else if (scoreMode == ScoreMode.Min) {, +                float minScore = Float.POSITIVE_INFINITY;, +                for (int i = 0; i < filterFunctions.length; i++) {, +                    if (docSets[i].get(docId)) {, +                        minScore = Math.min(filterFunctions[i].function.score(docId, score), minScore);, +                    }, +                }, +                if (minScore != Float.POSITIVE_INFINITY) {, +                    score = minScore;, +                }, +                float multiplicativeScore = 1.0f;, +                        float tempScore = filterFunctions[i].function.score(docId, score);, +                        totalScore += tempScore;, +                        multiplicativeScore *= tempScore;, +                    else if (scoreMode == ScoreMode.Multiply) {, +                        score = multiplicativeScore;, +                    }, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +    public static enum ScoreMode {First, Avg, Max, Total, Min, Multiply}, +                float multiply = 1;, +                float min = Float.POSITIVE_INFINITY;, +                        multiply *= sc;, +                        min = Math.min(sc, min);, +                        case Min:, +                            sc = min;, +                            break;, +                        case Multiply:, +                            sc = multiply;, +                            break;, +            } else if (scoreMode == ScoreMode.Min) {, +                float minScore = Float.POSITIVE_INFINITY;, +                for (int i = 0; i < filterFunctions.length; i++) {, +                    if (docSets[i].get(docId)) {, +                        minScore = Math.min(filterFunctions[i].function.score(docId, score), minScore);, +                    }, +                }, +                if (minScore != Float.POSITIVE_INFINITY) {, +                    score = minScore;, +                }, +                float multiplicativeScore = 1.0f;, +                        float tempScore = filterFunctions[i].function.score(docId, score);, +                        totalScore += tempScore;, +                        multiplicativeScore *= tempScore;, +                    else if (scoreMode == ScoreMode.Multiply) {, +                        score = multiplicativeScore;, +                    }, +++ b/src/main/java/org/elasticsearch/index/query/CustomFiltersScoreQueryParser.java, +                    } else if ("min".equals(sScoreMode)) {, +                        scoreMode = FiltersFunctionScoreQuery.ScoreMode.Min;, +                    } else if ("multiply".equals(sScoreMode)) {, +                        scoreMode = FiltersFunctionScoreQuery.ScoreMode.Multiply;]