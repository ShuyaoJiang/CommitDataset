[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +        QueryBuilder finalQuery = null;, +        if (container.query() != null) {, +                finalQuery = boolQuery().must(container.query().asBuilder()).filter(filter);, +            } else {, +                finalQuery = container.query().asBuilder();, +                finalQuery = boolQuery().filter(filter);, +        final SearchSourceBuilder source = new SearchSourceBuilder();, +        source.query(finalQuery);, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +        QueryBuilder finalQuery = null;, +        if (container.query() != null) {, +                finalQuery = boolQuery().must(container.query().asBuilder()).filter(filter);, +            } else {, +                finalQuery = container.query().asBuilder();, +                finalQuery = boolQuery().filter(filter);, +        final SearchSourceBuilder source = new SearchSourceBuilder();, +        source.query(finalQuery);, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/query/BoolQuery.java, +import java.util.Objects;, +, +            boolQuery.must(left.asBuilder());, +            boolQuery.must(right.asBuilder());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +        QueryBuilder finalQuery = null;, +        if (container.query() != null) {, +                finalQuery = boolQuery().must(container.query().asBuilder()).filter(filter);, +            } else {, +                finalQuery = container.query().asBuilder();, +                finalQuery = boolQuery().filter(filter);, +        final SearchSourceBuilder source = new SearchSourceBuilder();, +        source.query(finalQuery);, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/query/BoolQuery.java, +import java.util.Objects;, +, +            boolQuery.must(left.asBuilder());, +            boolQuery.must(right.asBuilder());, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/SourceGeneratorTests.java, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchQuery;, +        assertEquals(matchQuery("foo", "bar").operator(Operator.OR), sourceBuilder.query());, +        QueryBuilder filter = matchQuery("bar", "baz");, +        assertEquals(boolQuery().filter(matchQuery("bar", "baz")), sourceBuilder.query());, +        QueryBuilder filter = matchQuery("bar", "baz");, +        assertEquals(boolQuery().must(matchQuery("foo", "bar").operator(Operator.OR)).filter(matchQuery("bar", "baz")),, +                sourceBuilder.query());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/execution/search/SourceGenerator.java, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +        QueryBuilder finalQuery = null;, +        if (container.query() != null) {, +                finalQuery = boolQuery().must(container.query().asBuilder()).filter(filter);, +            } else {, +                finalQuery = container.query().asBuilder();, +                finalQuery = boolQuery().filter(filter);, +        final SearchSourceBuilder source = new SearchSourceBuilder();, +        source.query(finalQuery);, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/query/BoolQuery.java, +import java.util.Objects;, +, +            boolQuery.must(left.asBuilder());, +            boolQuery.must(right.asBuilder());, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/execution/search/SourceGeneratorTests.java, +import static org.elasticsearch.index.query.QueryBuilders.boolQuery;, +import static org.elasticsearch.index.query.QueryBuilders.matchQuery;, +        assertEquals(matchQuery("foo", "bar").operator(Operator.OR), sourceBuilder.query());, +        QueryBuilder filter = matchQuery("bar", "baz");, +        assertEquals(boolQuery().filter(matchQuery("bar", "baz")), sourceBuilder.query());, +        QueryBuilder filter = matchQuery("bar", "baz");, +        assertEquals(boolQuery().must(matchQuery("foo", "bar").operator(Operator.OR)).filter(matchQuery("bar", "baz")),, +                sourceBuilder.query());, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/rest/RestSqlTestCase.java, +import java.util.List;, +        Map<String, Object> bool = (Map<String, Object>) query.get("bool");, +        assertNotNull(bool);, +        List<Object> filter = (List<Object>) bool.get("filter");, +        Map<String, Object> map = (Map<String, Object>) filter.get(0);, +        assertNotNull(map);, +        Map<String, Object> matchQ = (Map<String, Object>) map.get("match");, +, +        @SuppressWarnings("unchecked"), +        Map<String, Object> matchQuery = (Map<String, Object>) matchQ.get("test");, +]