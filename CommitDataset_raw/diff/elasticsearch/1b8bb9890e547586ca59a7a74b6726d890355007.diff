[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpRequest.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpRequest.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +    void internalDispatchRequest(final HttpRequest request, final HttpChannel channel) {, +        return request.path();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpRequest.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +    void internalDispatchRequest(final HttpRequest request, final HttpChannel channel) {, +        return request.path();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.elasticsearch.rest.support.AbstractRestRequest;, +import org.elasticsearch.rest.support.RestUtils;, +import java.util.HashMap;, + * @author kimchy (shay.banon), +public class NettyHttpRequest extends AbstractRestRequest implements HttpRequest {, +    private Map<String, String> params;, +, +    private String path;, +        this.params = new HashMap<String, String>();, +, +        String uri = request.getUri();, +        int pathEndPos = uri.indexOf('?');, +        if (pathEndPos < 0) {, +            this.path = uri;, +        } else {, +            this.path = uri.substring(0, pathEndPos);, +            RestUtils.decodeQueryString(uri, pathEndPos + 1, params);, +        }, +    @Override public String path() {, +        return path;, +    }, +, +    @Override public Map<String, String> params() {, +        return params;, +    }, +, +        return params.containsKey(key);, +        return params.get(key);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpRequest.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +    void internalDispatchRequest(final HttpRequest request, final HttpChannel channel) {, +        return request.path();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.elasticsearch.rest.support.AbstractRestRequest;, +import org.elasticsearch.rest.support.RestUtils;, +import java.util.HashMap;, + * @author kimchy (shay.banon), +public class NettyHttpRequest extends AbstractRestRequest implements HttpRequest {, +    private Map<String, String> params;, +, +    private String path;, +        this.params = new HashMap<String, String>();, +, +        String uri = request.getUri();, +        int pathEndPos = uri.indexOf('?');, +        if (pathEndPos < 0) {, +            this.path = uri;, +        } else {, +            this.path = uri.substring(0, pathEndPos);, +            RestUtils.decodeQueryString(uri, pathEndPos + 1, params);, +        }, +    @Override public String path() {, +        return path;, +    }, +, +    @Override public Map<String, String> params() {, +        return params;, +    }, +, +        return params.containsKey(key);, +        return params.get(key);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/RestController.java, +        return request.path();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpRequest.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/HttpServer.java, +    void internalDispatchRequest(final HttpRequest request, final HttpChannel channel) {, +        return request.path();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java, +import org.elasticsearch.rest.support.AbstractRestRequest;, +import org.elasticsearch.rest.support.RestUtils;, +import java.util.HashMap;, + * @author kimchy (shay.banon), +public class NettyHttpRequest extends AbstractRestRequest implements HttpRequest {, +    private Map<String, String> params;, +, +    private String path;, +        this.params = new HashMap<String, String>();, +, +        String uri = request.getUri();, +        int pathEndPos = uri.indexOf('?');, +        if (pathEndPos < 0) {, +            this.path = uri;, +        } else {, +            this.path = uri.substring(0, pathEndPos);, +            RestUtils.decodeQueryString(uri, pathEndPos + 1, params);]