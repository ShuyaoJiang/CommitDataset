[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.Version;, +    private String normalizer;, +, +    public String normalizer() {, +        return this.normalizer;, +    }, +, +    public AnalyzeRequest normalizer(String normalizer) {, +        this.normalizer = normalizer;, +        return this;, +    }, +, +        if ((index == null || index.length() == 0) && normalizer != null) {, +            validationException = addValidationError("index is required if normalizer is specified", validationException);, +        }, +        if (normalizer != null && (tokenizer != null || analyzer != null)) {, +            validationException = addValidationError("tokenizer/analyze should be null if normalizer is specified", validationException);, +        }, +        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha3)) {, +            normalizer = in.readOptionalString();, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha3)) {, +            out.writeOptionalString(normalizer);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.Version;, +    private String normalizer;, +, +    public String normalizer() {, +        return this.normalizer;, +    }, +, +    public AnalyzeRequest normalizer(String normalizer) {, +        this.normalizer = normalizer;, +        return this;, +    }, +, +        if ((index == null || index.length() == 0) && normalizer != null) {, +            validationException = addValidationError("index is required if normalizer is specified", validationException);, +        }, +        if (normalizer != null && (tokenizer != null || analyzer != null)) {, +            validationException = addValidationError("tokenizer/analyze should be null if normalizer is specified", validationException);, +        }, +        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha3)) {, +            normalizer = in.readOptionalString();, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha3)) {, +            out.writeOptionalString(normalizer);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +, +    /**, +     * Instead of setting the analyzer and tokenizer, sets the normalizer as name, +     */, +    public AnalyzeRequestBuilder setNormalizer(String normalizer) {, +        request.normalizer(normalizer);, +        return this;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequest.java, +import org.elasticsearch.Version;, +    private String normalizer;, +, +    public String normalizer() {, +        return this.normalizer;, +    }, +, +    public AnalyzeRequest normalizer(String normalizer) {, +        this.normalizer = normalizer;, +        return this;, +    }, +, +        if ((index == null || index.length() == 0) && normalizer != null) {, +            validationException = addValidationError("index is required if normalizer is specified", validationException);, +        }, +        if (normalizer != null && (tokenizer != null || analyzer != null)) {, +            validationException = addValidationError("tokenizer/analyze should be null if normalizer is specified", validationException);, +        }, +        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha3)) {, +            normalizer = in.readOptionalString();, +        }, +        if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha3)) {, +            out.writeOptionalString(normalizer);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/AnalyzeRequestBuilder.java, +, +    /**, +     * Instead of setting the analyzer and tokenizer, sets the normalizer as name, +     */, +    public AnalyzeRequestBuilder setNormalizer(String normalizer) {, +        request.normalizer(normalizer);, +        return this;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java, +import org.elasticsearch.index.analysis.MultiTermAwareComponent;, +import org.elasticsearch.indices.analysis.PreBuiltTokenizers;, +            List<CharFilterFactory> charFilterFactoryList =, +                parseCharFilterFactories(request, indexSettings, analysisRegistry, environment, false);]