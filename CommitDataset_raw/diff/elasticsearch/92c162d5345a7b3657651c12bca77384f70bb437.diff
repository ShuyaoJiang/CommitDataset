[+++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.QueryParseContext;, +    @Override, +    public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +        int iValue = Integer.parseInt(value);, +        return NumericRangeQuery.newIntRange(names.indexName(), precisionStep,, +                iValue, iValue, true, true);, +    }, +    public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        int iValue = Integer.parseInt(value);, +        return NumericRangeFilter.newIntRange(names.indexName(), precisionStep,, +                iValue, iValue, true, true);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.QueryParseContext;, +    @Override, +    public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +        int iValue = Integer.parseInt(value);, +        return NumericRangeQuery.newIntRange(names.indexName(), precisionStep,, +                iValue, iValue, true, true);, +    }, +    public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        int iValue = Integer.parseInt(value);, +        return NumericRangeFilter.newIntRange(names.indexName(), precisionStep,, +                iValue, iValue, true, true);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.QueryParseContext;, +    public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +        double dValue = Double.parseDouble(value);, +        return NumericRangeQuery.newDoubleRange(names.indexName(), precisionStep,, +                dValue, dValue, true, true);, +    }, +, +    @Override, +    public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        double dValue = Double.parseDouble(value);, +        return NumericRangeFilter.newDoubleRange(names.indexName(), precisionStep,, +                dValue, dValue, true, true);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.QueryParseContext;, +    @Override, +    public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +        int iValue = Integer.parseInt(value);, +        return NumericRangeQuery.newIntRange(names.indexName(), precisionStep,, +                iValue, iValue, true, true);, +    }, +    public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        int iValue = Integer.parseInt(value);, +        return NumericRangeFilter.newIntRange(names.indexName(), precisionStep,, +                iValue, iValue, true, true);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DoubleFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.QueryParseContext;, +    public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +        double dValue = Double.parseDouble(value);, +        return NumericRangeQuery.newDoubleRange(names.indexName(), precisionStep,, +                dValue, dValue, true, true);, +    }, +, +    @Override, +    public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        double dValue = Double.parseDouble(value);, +        return NumericRangeFilter.newDoubleRange(names.indexName(), precisionStep,, +                dValue, dValue, true, true);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/FloatFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.QueryParseContext;, +    public Query fieldQuery(String value, @Nullable QueryParseContext context) {, +        float fValue = Float.parseFloat(value);, +        return NumericRangeQuery.newFloatRange(names.indexName(), precisionStep,, +                fValue, fValue, true, true);, +    }, +, +    @Override, +    public Filter fieldFilter(String value, @Nullable QueryParseContext context) {, +        float fValue = Float.parseFloat(value);, +        return NumericRangeFilter.newFloatRange(names.indexName(), precisionStep,, +                fValue, fValue, true, true);, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/mapper/core/ByteFieldMapper.java]