[+++ b/dev-tools/build_release.py, +    - S3 keys exported via ENV variables (AWS_ACCESS_KEY_ID,  AWS_SECRET_ACCESS_KEY), +    - GPG data exported via ENV variables (GPG_KEY_ID, GPG_PASSPHRASE, optionally GPG_KEYRING), +    - S3 target repository via ENV variables (S3_BUCKET_SYNC_TO, optionally S3_BUCKET_SYNC_FROM), +  gpg_args = '-Dgpg.key="%s" -Dgpg.passphrase="%s" -Ddeb.sign=true' % (target, env.get('GPG_KEY_ID'), env.get('GPG_PASSPHRASE')), +  if env.get('GPG_KEYRING'):, +    gpg_args += ' -Dgpg.keyring="%s"' % env.get('GPG_KEYRING'), +  run_mvn('clean %s -DskipTests %s' % (target, gpg_args)), +    run_mvn('-DskipTests rpm:rpm %s' % (gpg_args)), +def publish_repositories(version, dry_run=True):, +  if dry_run:, +    print('Skipping package repository update'), +  else:, +    print('Triggering repository update - calling dev-tools/build_repositories.sh %s' % version), +    # src_branch is a version like 1.5/1.6/2.0/etc.. so we can use this, +    run('dev-tools/build_repositories.sh %s', src_branch), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +def check_command_exists(name, cmd):, +  try:, +    subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT), +  except subprocess.CalledProcessError:, +    raise RuntimeError('Could not run command %s - please make sure it is installed' % (name)), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  , +    check_command_exists('createrepo', 'createrepo --version'), +    check_command_exists('s3cmd', 's3cmd --version'), +    check_command_exists('apt-ftparchive', 'apt-ftparchive --version'), +      print('  Updating package repositories -- dry_run: %s' % dry_run), +      publish_repositories(src_branch, dry_run=dry_run), +++ b/dev-tools/build_release.py, +    - S3 keys exported via ENV variables (AWS_ACCESS_KEY_ID,  AWS_SECRET_ACCESS_KEY), +    - GPG data exported via ENV variables (GPG_KEY_ID, GPG_PASSPHRASE, optionally GPG_KEYRING), +    - S3 target repository via ENV variables (S3_BUCKET_SYNC_TO, optionally S3_BUCKET_SYNC_FROM), +  gpg_args = '-Dgpg.key="%s" -Dgpg.passphrase="%s" -Ddeb.sign=true' % (target, env.get('GPG_KEY_ID'), env.get('GPG_PASSPHRASE')), +  if env.get('GPG_KEYRING'):, +    gpg_args += ' -Dgpg.keyring="%s"' % env.get('GPG_KEYRING'), +  run_mvn('clean %s -DskipTests %s' % (target, gpg_args)), +    run_mvn('-DskipTests rpm:rpm %s' % (gpg_args)), +def publish_repositories(version, dry_run=True):, +  if dry_run:, +    print('Skipping package repository update'), +  else:, +    print('Triggering repository update - calling dev-tools/build_repositories.sh %s' % version), +    # src_branch is a version like 1.5/1.6/2.0/etc.. so we can use this, +    run('dev-tools/build_repositories.sh %s', src_branch), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +def check_command_exists(name, cmd):, +  try:, +    subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT), +  except subprocess.CalledProcessError:, +    raise RuntimeError('Could not run command %s - please make sure it is installed' % (name)), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  , +    check_command_exists('createrepo', 'createrepo --version'), +    check_command_exists('s3cmd', 's3cmd --version'), +    check_command_exists('apt-ftparchive', 'apt-ftparchive --version'), +      print('  Updating package repositories -- dry_run: %s' % dry_run), +      publish_repositories(src_branch, dry_run=dry_run), +++ b/dev-tools/build_repositories.sh, +#!/bin/bash, +, +# Licensed to Elasticsearch under one or more contributor, +# license agreements. See the NOTICE file distributed with, +# this work for additional information regarding copyright, +# ownership. Elasticsearch licenses this file to you under, +# the Apache License, Version 2.0 (the "License"); you may, +# not use this file except in compliance  with the License., +# You may obtain a copy of the License at, +#, +#     http://www.apache.org/licenses/LICENSE-2.0, +#, +# Unless required by applicable law or agreed to in writing,, +# software distributed under the License is distributed on, +# an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, +# either express or implied. See the License for the specific, +# language governing permissions and limitations under the License., +, +, +# This tool uploads the debian and RPM packages to the specified S3 buckets, +# The packages get signed as well, +# A requirement is the sync of the existing repository, +, +set -e, +, +###################, +## environment variables]