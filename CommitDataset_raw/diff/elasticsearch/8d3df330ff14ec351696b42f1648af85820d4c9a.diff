[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.base.Objects;, +            if ("*".equals(field) || Objects.equal(field, this.field)) {, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.base.Objects;, +            if ("*".equals(field) || Objects.equal(field, this.field)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Collections2;, +            typeIntersection = Collections2.filter(indexService.mapperService().types(), new Predicate<String>() {, +, +                @Override, +                public boolean apply(String type) {, +                    return Regex.simpleMatch(request.types(), type);, +                }, +, +            });, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.base.Objects;, +            if ("*".equals(field) || Objects.equal(field, this.field)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Collections2;, +            typeIntersection = Collections2.filter(indexService.mapperService().types(), new Predicate<String>() {, +, +                @Override, +                public boolean apply(String type) {, +                    return Regex.simpleMatch(request.types(), type);, +                }, +, +            });, +++ b/core/src/main/java/org/elasticsearch/action/support/TransportActions.java, +                actual instanceof NoShardAvailableActionException) {, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.base.Objects;, +            if ("*".equals(field) || Objects.equal(field, this.field)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Collections2;, +            typeIntersection = Collections2.filter(indexService.mapperService().types(), new Predicate<String>() {, +, +                @Override, +                public boolean apply(String type) {, +                    return Regex.simpleMatch(request.types(), type);, +                }, +, +            });, +++ b/core/src/main/java/org/elasticsearch/action/support/TransportActions.java, +                actual instanceof NoShardAvailableActionException) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportBroadcastReplicationAction.java, +                    if (ExceptionsHelper.unwrap(e, UnavailableShardsException.class) != null) {, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.base.Objects;, +            if ("*".equals(field) || Objects.equal(field, this.field)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Collections2;, +            typeIntersection = Collections2.filter(indexService.mapperService().types(), new Predicate<String>() {, +, +                @Override, +                public boolean apply(String type) {, +                    return Regex.simpleMatch(request.types(), type);, +                }, +, +            });, +++ b/core/src/main/java/org/elasticsearch/action/support/TransportActions.java, +                actual instanceof NoShardAvailableActionException) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportBroadcastReplicationAction.java, +                    if (ExceptionsHelper.unwrap(e, UnavailableShardsException.class) != null) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import com.google.common.base.Predicate;, +import static com.google.common.collect.Maps.filterEntries;, +                    matches = filterEntries(metaData.getAliasAndIndexLookup(), new Predicate<Map.Entry<String, AliasOrIndex>>() {, +                        @Override, +                        public boolean apply(@Nullable Map.Entry<String, AliasOrIndex> input) {, +                            return Regex.simpleMatch(pattern, input.getKey());, +                        }, +                    });, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import com.google.common.base.Objects;, +            if ("*".equals(field) || Objects.equal(field, this.field)) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import com.google.common.base.Predicate;, +import com.google.common.collect.Collections2;, +            typeIntersection = Collections2.filter(indexService.mapperService().types(), new Predicate<String>() {, +, +                @Override, +                public boolean apply(String type) {, +                    return Regex.simpleMatch(request.types(), type);, +                }, +, +            });, +++ b/core/src/main/java/org/elasticsearch/action/support/TransportActions.java, +                actual instanceof NoShardAvailableActionException) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportBroadcastReplicationAction.java, +                    if (ExceptionsHelper.unwrap(e, UnavailableShardsException.class) != null) {, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +import com.google.common.base.Predicate;, +import static com.google.common.collect.Maps.filterEntries;, +                    matches = filterEntries(metaData.getAliasAndIndexLookup(), new Predicate<Map.Entry<String, AliasOrIndex>>() {]