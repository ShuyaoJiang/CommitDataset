[+++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java, +    private volatile Map<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> shardSnapshots = emptyMap();, +    private final UpdateSnapshotStatusAction updateSnapshotStatusHandler;, +        this.updateSnapshotStatusHandler =, +            new UpdateSnapshotStatusAction(transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver);, +        Map<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> snapshotShardsMap = shardSnapshots;, +        for (Map.Entry<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> snapshotShards : snapshotShardsMap.entrySet()) {, +            Map<ShardId, IndexShardSnapshotStatus> shards = snapshotShards.getValue();, +        return shardSnapshots.get(snapshot);, +        Map<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> survivors = new HashMap<>();, +        for (Map.Entry<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> entry : shardSnapshots.entrySet()) {, +                for (IndexShardSnapshotStatus snapshotStatus : entry.getValue().values()) {, +                    Map<ShardId, IndexShardSnapshotStatus> snapshotShards = shardSnapshots.get(entry.snapshot());, +                            if (shard.value.state() == State.INIT && (snapshotShards == null || !snapshotShards.containsKey(shard.key))) {, +                            shards.putAll(snapshotShards);, +                            survivors.put(entry.snapshot(), unmodifiableMap(shards));, +                            survivors.put(entry.snapshot(), unmodifiableMap(startedShards));, +                    Map<ShardId, IndexShardSnapshotStatus> snapshotShards = shardSnapshots.get(entry.snapshot());, +                            final IndexShardSnapshotStatus snapshotStatus = snapshotShards.get(shard.key);, +    private class UpdateSnapshotStatusAction, +        extends TransportMasterNodeAction<UpdateIndexShardSnapshotStatusRequest, UpdateIndexShardSnapshotStatusResponse> {, +            UpdateSnapshotStatusAction(TransportService transportService, ClusterService clusterService,, +                    super(, +                        SnapshotShardsService.UPDATE_SNAPSHOT_STATUS_ACTION_NAME, transportService, clusterService, threadPool, actionFilters,, +                        indexNameExpressionResolver, UpdateIndexShardSnapshotStatusRequest::new, +                    );, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java, +    private volatile Map<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> shardSnapshots = emptyMap();, +    private final UpdateSnapshotStatusAction updateSnapshotStatusHandler;, +        this.updateSnapshotStatusHandler =, +            new UpdateSnapshotStatusAction(transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver);, +        Map<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> snapshotShardsMap = shardSnapshots;, +        for (Map.Entry<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> snapshotShards : snapshotShardsMap.entrySet()) {, +            Map<ShardId, IndexShardSnapshotStatus> shards = snapshotShards.getValue();, +        return shardSnapshots.get(snapshot);, +        Map<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> survivors = new HashMap<>();, +        for (Map.Entry<Snapshot, Map<ShardId, IndexShardSnapshotStatus>> entry : shardSnapshots.entrySet()) {, +                for (IndexShardSnapshotStatus snapshotStatus : entry.getValue().values()) {, +                    Map<ShardId, IndexShardSnapshotStatus> snapshotShards = shardSnapshots.get(entry.snapshot());, +                            if (shard.value.state() == State.INIT && (snapshotShards == null || !snapshotShards.containsKey(shard.key))) {, +                            shards.putAll(snapshotShards);, +                            survivors.put(entry.snapshot(), unmodifiableMap(shards));, +                            survivors.put(entry.snapshot(), unmodifiableMap(startedShards));, +                    Map<ShardId, IndexShardSnapshotStatus> snapshotShards = shardSnapshots.get(entry.snapshot());, +                            final IndexShardSnapshotStatus snapshotStatus = snapshotShards.get(shard.key);, +    private class UpdateSnapshotStatusAction, +        extends TransportMasterNodeAction<UpdateIndexShardSnapshotStatusRequest, UpdateIndexShardSnapshotStatusResponse> {, +            UpdateSnapshotStatusAction(TransportService transportService, ClusterService clusterService,, +                    super(, +                        SnapshotShardsService.UPDATE_SNAPSHOT_STATUS_ACTION_NAME, transportService, clusterService, threadPool, actionFilters,, +                        indexNameExpressionResolver, UpdateIndexShardSnapshotStatusRequest::new, +                    );, +++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotState.java, +    private final byte value;, +    private final boolean completed;, +    private final boolean restorable;]