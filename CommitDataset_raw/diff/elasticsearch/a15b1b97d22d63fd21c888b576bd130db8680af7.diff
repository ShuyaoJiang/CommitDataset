[+++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java, +        int indexStartMustacheExpression = template.indexOf("{{");, +        if (indexStartMustacheExpression == -1) {, +            return template;, +        }, +, +++ b/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateEngine.java, +        int indexStartMustacheExpression = template.indexOf("{{");, +        if (indexStartMustacheExpression == -1) {, +            return template;, +        }, +, +++ b/x-pack/plugin/watcher/src/test/java/org/elasticsearch/xpack/watcher/common/text/TextTemplateTests.java, +import java.util.Locale;, +import static org.mockito.Matchers.any;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyZeroInteractions;, +        String templateText = "{{_template}}";, +        String templateText = "{{_template}}";, +        String templateText = "{{_template}}";, +    public void testDontInvokeScriptServiceOnNonMustacheText() {, +        assertNoCompilation("this is my text");, +        assertScriptServiceInvoked("}}{{");, +        assertScriptServiceInvoked("}}{{ctx.payload}}");, +    }, +, +    private void assertNoCompilation(String input) {, +        String output = engine.render(new TextTemplate(input), Collections.emptyMap());, +        assertThat(input, is(output));, +        verifyZeroInteractions(service);, +    }, +, +    private void assertScriptServiceInvoked(final String input) {, +        ScriptService scriptService = mock(ScriptService.class);, +        TextTemplateEngine e = new TextTemplateEngine(Settings.EMPTY, scriptService);, +, +        TemplateScript.Factory compiledTemplate = templateParams ->, +            new TemplateScript(templateParams) {, +                @Override, +                public String execute() {, +                    return input.toUpperCase(Locale.ROOT);, +                }, +            };, +, +        when(scriptService.compile(new Script(ScriptType.INLINE, lang, input,, +            Collections.singletonMap("content_type", "text/plain"), Collections.emptyMap()), Watcher.SCRIPT_TEMPLATE_CONTEXT)), +            .thenReturn(compiledTemplate);, +, +        String output = e.render(new TextTemplate(input), Collections.emptyMap());, +        verify(scriptService).compile(any(), any());, +        assertThat(output, is(input.toUpperCase(Locale.ROOT)));, +    }, +]