[+++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import java.util.Collections;, +import java.util.Map;, +    // tests the _xpack/usage endpoint, +    public void testUsage() throws IOException {, +        createFarequoteJob("job-1");, +        createFarequoteJob("job-2");, +        Map<String, Object> usage = entityAsMap(client().performRequest(new Request("GET", "_xpack/usage")));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs._all.count", usage));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs.closed.count", usage));, +        Response openResponse = client().performRequest(new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/job-1/_open"));, +        assertEquals(Collections.singletonMap("opened", true), entityAsMap(openResponse));, +        usage = entityAsMap(client().performRequest(new Request("GET", "_xpack/usage")));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs._all.count", usage));, +        assertEquals(1, XContentMapValues.extractValue("ml.jobs.closed.count", usage));, +        assertEquals(1, XContentMapValues.extractValue("ml.jobs.opened.count", usage));, +    }, +, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import java.util.Collections;, +import java.util.Map;, +    // tests the _xpack/usage endpoint, +    public void testUsage() throws IOException {, +        createFarequoteJob("job-1");, +        createFarequoteJob("job-2");, +        Map<String, Object> usage = entityAsMap(client().performRequest(new Request("GET", "_xpack/usage")));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs._all.count", usage));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs.closed.count", usage));, +        Response openResponse = client().performRequest(new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/job-1/_open"));, +        assertEquals(Collections.singletonMap("opened", true), entityAsMap(openResponse));, +        usage = entityAsMap(client().performRequest(new Request("GET", "_xpack/usage")));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs._all.count", usage));, +        assertEquals(1, XContentMapValues.extractValue("ml.jobs.closed.count", usage));, +        assertEquals(1, XContentMapValues.extractValue("ml.jobs.opened.count", usage));, +    }, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.JobManagerHolder;, +            // special holder for @link(MachineLearningFeatureSetUsage) which needs access to job manager, empty if ML is disabled, +            return Collections.singletonList(new JobManagerHolder());, +        // special holder for @link(MachineLearningFeatureSetUsage) which needs access to job manager if ML is enabled, +        JobManagerHolder jobManagerHolder = new JobManagerHolder(jobManager);, +, +                jobManagerHolder,, +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import java.util.Collections;, +import java.util.Map;, +    // tests the _xpack/usage endpoint, +    public void testUsage() throws IOException {, +        createFarequoteJob("job-1");, +        createFarequoteJob("job-2");, +        Map<String, Object> usage = entityAsMap(client().performRequest(new Request("GET", "_xpack/usage")));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs._all.count", usage));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs.closed.count", usage));, +        Response openResponse = client().performRequest(new Request("POST", MachineLearning.BASE_PATH + "anomaly_detectors/job-1/_open"));, +        assertEquals(Collections.singletonMap("opened", true), entityAsMap(openResponse));, +        usage = entityAsMap(client().performRequest(new Request("GET", "_xpack/usage")));, +        assertEquals(2, XContentMapValues.extractValue("ml.jobs._all.count", usage));, +        assertEquals(1, XContentMapValues.extractValue("ml.jobs.closed.count", usage));, +        assertEquals(1, XContentMapValues.extractValue("ml.jobs.opened.count", usage));, +    }, +, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +import org.elasticsearch.xpack.ml.job.JobManagerHolder;, +            // special holder for @link(MachineLearningFeatureSetUsage) which needs access to job manager, empty if ML is disabled, +            return Collections.singletonList(new JobManagerHolder());, +        // special holder for @link(MachineLearningFeatureSetUsage) which needs access to job manager if ML is enabled, +        JobManagerHolder jobManagerHolder = new JobManagerHolder(jobManager);, +, +                jobManagerHolder,, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MachineLearningFeatureSet.java, +import org.elasticsearch.xpack.ml.job.JobManagerHolder;, +import java.util.stream.Collectors;, +    private final JobManagerHolder jobManagerHolder;, +                                     @Nullable XPackLicenseState licenseState, JobManagerHolder jobManagerHolder) {, +        this.jobManagerHolder = jobManagerHolder;, +        new Retriever(client, jobManagerHolder, available(), enabled(), mlNodeCount(state)).execute(listener);, +        private final JobManagerHolder jobManagerHolder;, +        public Retriever(Client client, JobManagerHolder jobManagerHolder, boolean available, boolean enabled, int nodeCount) {, +            this.jobManagerHolder = jobManagerHolder;, +            // empty holder means either ML disabled or transport client mode, +            if (jobManagerHolder.isEmpty()) {, +                        jobManagerHolder.getJobManager().expandJobs(MetaData.ALL, true, ActionListener.wrap(jobs -> {, +                            addJobsUsage(response, jobs.results());, +                            GetDatafeedsStatsAction.Request datafeedStatsRequest = new GetDatafeedsStatsAction.Request(, +                                    GetDatafeedsStatsAction.ALL);, +                            client.execute(GetDatafeedsStatsAction.INSTANCE, datafeedStatsRequest, datafeedStatsListener);, +                        }, listener::onFailure));, +                    }, listener::onFailure);, +        private void addJobsUsage(GetJobsStatsAction.Response response, List<Job> jobs) {, +            Map<String, Job> jobMap = jobs.stream().collect(Collectors.toMap(Job::getId, item -> item));, +                int detectorsCount = jobMap.get(jobStats.getJobId()).getAnalysisConfig(), +++ b/x-pack/plugin/ml/qa/native-multi-node-tests/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import java.util.Collections;, +import java.util.Map;, +    // tests the _xpack/usage endpoint]