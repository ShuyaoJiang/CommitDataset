[+++ b/.github/ISSUE_TEMPLATE.md, +**Plugins installed**: [], +, +++ b/.github/ISSUE_TEMPLATE.md, +**Plugins installed**: [], +, +++ b/TESTING.asciidoc, +run it using Gradle:, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT \, +`*Yaml*IT` are the executable test classes that runs all the, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/.github/ISSUE_TEMPLATE.md, +**Plugins installed**: [], +, +++ b/TESTING.asciidoc, +run it using Gradle:, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT \, +`*Yaml*IT` are the executable test classes that runs all the, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.add(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/.github/ISSUE_TEMPLATE.md, +**Plugins installed**: [], +, +++ b/TESTING.asciidoc, +run it using Gradle:, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT \, +`*Yaml*IT` are the executable test classes that runs all the, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.add(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/.github/ISSUE_TEMPLATE.md, +**Plugins installed**: [], +, +++ b/TESTING.asciidoc, +run it using Gradle:, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT \, +`*Yaml*IT` are the executable test classes that runs all the, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.add(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                // Insert a setup defined outside of the docs, +        void emitDo(String method, String pathAndQuery, String body,, +                String catchPart, List warnings, boolean inSetup) {, +            if (false == warnings.isEmpty()) {, +                current.println("      warnings:"), +                for (String warning in warnings) {, +                    // Escape " because we're going to quote the warning, +                    String escaped = warning.replaceAll('"', '\\\\"'), +                    /* Quote the warning in case it starts with [ which makes, +                     * it look too much like an array. */, +                    current.println("         - \"$escaped\""), +                }, +            }, +                emitDo(method, pathAndQuery, body, catchPart, snippet.warnings,, +                    inSetup), +++ b/.github/ISSUE_TEMPLATE.md, +**Plugins installed**: [], +, +++ b/TESTING.asciidoc, +run it using Gradle:, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT, +  -Dtests.class=org.elasticsearch.test.rest.*Yaml*IT \, +`*Yaml*IT` are the executable test classes that runs all the, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/AllocationBenchmark.java, +            nb.add(Allocators.newNode("node" + i, Collections.singletonMap("tag", "tag_" + (i % numTags))));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                // Insert a setup defined outside of the docs, +        void emitDo(String method, String pathAndQuery, String body,, +                String catchPart, List warnings, boolean inSetup) {, +            if (false == warnings.isEmpty()) {, +                current.println("      warnings:"), +                for (String warning in warnings) {, +                    // Escape " because we're going to quote the warning, +                    String escaped = warning.replaceAll('"', '\\\\"'), +                    /* Quote the warning in case it starts with [ which makes, +                     * it look too much like an array. */, +                    current.println("         - \"$escaped\""), +                }, +            }, +                emitDo(method, pathAndQuery, body, catchPart, snippet.warnings,, +                    inSetup), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/SnippetsTask.groovy, +    private static final String WARNING = /warning:(.+)/, +        /(?:$CATCH|$SUBSTITUTION|$SKIP|(continued)|$SETUP|$WARNING) ?/, +                            if (it.group(7) != null) {]