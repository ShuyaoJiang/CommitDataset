[+++ b/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: The file permissions of [" + entry.getKey() + "] have changed ", +                terminal.println(Terminal.Verbosity.SILENT, "Please ensure that the user account running Elasticsearch has read access to this file!");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Owner of file [" + entry.getKey() + "] used to be [" + ownerBeforeWrite + "], but now is [" + ownerAfterWrite + "]");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Group of file [" + entry.getKey() + "] used to be [" + groupBeforeWrite + "], but now is [" + groupAfterWrite + "]");, +++ b/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: The file permissions of [" + entry.getKey() + "] have changed ", +                terminal.println(Terminal.Verbosity.SILENT, "Please ensure that the user account running Elasticsearch has read access to this file!");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Owner of file [" + entry.getKey() + "] used to be [" + ownerBeforeWrite + "], but now is [" + ownerAfterWrite + "]");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Group of file [" + entry.getKey() + "] used to be [" + groupBeforeWrite + "], but now is [" + groupAfterWrite + "]");, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +                terminal.println(Terminal.Verbosity.SILENT, "ERROR: command not specified");, +                terminal.println(Terminal.Verbosity.SILENT, "ERROR: unknown command [" + cmdName + "]. Use [-h] option to list available commands");, +            terminal.println(Terminal.Verbosity.SILENT, "ERROR: " + error.getMessage());, +, +        if (cli.hasOption("v")) {, +            terminal.setVerbosity(Terminal.Verbosity.VERBOSE);, +        } else if (cli.hasOption("s")) {, +            terminal.setVerbosity(Terminal.Verbosity.SILENT);, +        } else {, +            terminal.setVerbosity(Terminal.Verbosity.NORMAL);, +        }, +                        terminal.println(Terminal.Verbosity.SILENT, "ERROR: " + msg);, +++ b/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: The file permissions of [" + entry.getKey() + "] have changed ", +                terminal.println(Terminal.Verbosity.SILENT, "Please ensure that the user account running Elasticsearch has read access to this file!");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Owner of file [" + entry.getKey() + "] used to be [" + ownerBeforeWrite + "], but now is [" + ownerAfterWrite + "]");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Group of file [" + entry.getKey() + "] used to be [" + groupBeforeWrite + "], but now is [" + groupAfterWrite + "]");, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +                terminal.println(Terminal.Verbosity.SILENT, "ERROR: command not specified");, +                terminal.println(Terminal.Verbosity.SILENT, "ERROR: unknown command [" + cmdName + "]. Use [-h] option to list available commands");, +            terminal.println(Terminal.Verbosity.SILENT, "ERROR: " + error.getMessage());, +, +        if (cli.hasOption("v")) {, +            terminal.setVerbosity(Terminal.Verbosity.VERBOSE);, +        } else if (cli.hasOption("s")) {, +            terminal.setVerbosity(Terminal.Verbosity.SILENT);, +        } else {, +            terminal.setVerbosity(Terminal.Verbosity.NORMAL);, +        }, +                        terminal.println(Terminal.Verbosity.SILENT, "ERROR: " + msg);, +++ b/core/src/main/java/org/elasticsearch/common/cli/HelpPrinter.java, +        terminal.println(Terminal.Verbosity.SILENT, "");, +        terminal.println(Terminal.Verbosity.SILENT, "");, +++ b/core/src/main/java/org/elasticsearch/common/cli/CheckFileCommand.java, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: The file permissions of [" + entry.getKey() + "] have changed ", +                terminal.println(Terminal.Verbosity.SILENT, "Please ensure that the user account running Elasticsearch has read access to this file!");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Owner of file [" + entry.getKey() + "] used to be [" + ownerBeforeWrite + "], but now is [" + ownerAfterWrite + "]");, +                terminal.println(Terminal.Verbosity.SILENT, "WARNING: Group of file [" + entry.getKey() + "] used to be [" + groupBeforeWrite + "], but now is [" + groupAfterWrite + "]");, +++ b/core/src/main/java/org/elasticsearch/common/cli/CliTool.java, +                terminal.println(Terminal.Verbosity.SILENT, "ERROR: command not specified");, +                terminal.println(Terminal.Verbosity.SILENT, "ERROR: unknown command [" + cmdName + "]. Use [-h] option to list available commands");, +            terminal.println(Terminal.Verbosity.SILENT, "ERROR: " + error.getMessage());, +, +        if (cli.hasOption("v")) {, +            terminal.setVerbosity(Terminal.Verbosity.VERBOSE);, +        } else if (cli.hasOption("s")) {, +            terminal.setVerbosity(Terminal.Verbosity.SILENT);, +        } else {, +            terminal.setVerbosity(Terminal.Verbosity.NORMAL);, +        }, +                        terminal.println(Terminal.Verbosity.SILENT, "ERROR: " + msg);, +++ b/core/src/main/java/org/elasticsearch/common/cli/HelpPrinter.java, +        terminal.println(Terminal.Verbosity.SILENT, "");, +        terminal.println(Terminal.Verbosity.SILENT, "");, +++ b/core/src/main/java/org/elasticsearch/common/cli/Terminal.java, +import java.nio.charset.Charset;, +, +import org.elasticsearch.common.SuppressForbidden;, + * A Terminal wraps access to reading input and writing output for a {@link CliTool}., + * The available methods are similar to those of {@link Console}, with the ability, + * to read either normal text or a password, and the ability to print a line, + * of text. Printing is also gated by the {@link Verbosity} of the terminal,, + * which allows {@link #println(Verbosity,String)} calls which act like a logger,, + * only actually printing if the verbosity level of the terminal is above, + * the verbosity of the message., +    /** The default terminal implementation, which will be a console if available, or stdout/stderr if not. */, +    public static final Terminal DEFAULT = ConsoleTerminal.isSupported() ? new ConsoleTerminal() : new SystemTerminal();, +    /** Defines the available verbosity levels of messages to be printed. */, +    public enum Verbosity {, +        SILENT, /* always printed */, +        NORMAL, /* printed when no options are given to cli */, +        VERBOSE /* printed only when cli is passed verbose option */, +    /** The current verbosity for the terminal, defaulting to {@link Verbosity#NORMAL}. */, +    /** Sets the verbosity of the terminal. */, +    void setVerbosity(Verbosity verbosity) {, +    /** Reads clear text from the terminal input. See {@link Console#readLine()}. */, +    public abstract String readText(String prompt);, +    /** Reads password text from the terminal input. See {@link Console#readPassword()}}. */, +    public abstract char[] readSecret(String prompt);, +    /** Print a message directly to the terminal. */, +    protected abstract void doPrint(String msg);, +    /** Prints a line to the terminal at {@link Verbosity#NORMAL} verbosity level. */, +    public final void println(String msg) {, +    /** Prints a line to the terminal at {@code verbosity} level. */, +    public final void println(Verbosity verbosity, String msg) {, +        if (this.verbosity.ordinal() >= verbosity.ordinal()) {, +            doPrint(msg + System.lineSeparator());, +        private static final Console console = System.console();, +        static boolean isSupported() {]