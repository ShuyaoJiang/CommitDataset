[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private List<File> classDirectories;, +                classDirectories = [], +                if (project.sourceSets.findByName("main") && project.sourceSets.main.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.main.output.classesDir], +                if (project.sourceSets.findByName("test") && project.sourceSets.test.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.test.output.classesDir], +    List<File> getClassDirectories() {, +    void setClassDirectories(List<File> classDirectories) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private List<File> classDirectories;, +                classDirectories = [], +                if (project.sourceSets.findByName("main") && project.sourceSets.main.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.main.output.classesDir], +                if (project.sourceSets.findByName("test") && project.sourceSets.test.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.test.output.classesDir], +    List<File> getClassDirectories() {, +    void setClassDirectories(List<File> classDirectories) {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private List<File> classDirectories;, +                classDirectories = [], +                if (project.sourceSets.findByName("main") && project.sourceSets.main.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.main.output.classesDir], +                if (project.sourceSets.findByName("test") && project.sourceSets.test.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.test.output.classesDir], +    List<File> getClassDirectories() {, +    void setClassDirectories(List<File> classDirectories) {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    public CancelTasksResponse(DiscoveryNodes discoveryNodes) {, +        super(discoveryNodes);, +    }, +, +        nodeFailures, DiscoveryNodes discoveryNodes) {, +        super(tasks, taskFailures, nodeFailures, discoveryNodes);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private List<File> classDirectories;, +                classDirectories = [], +                if (project.sourceSets.findByName("main") && project.sourceSets.main.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.main.output.classesDir], +                if (project.sourceSets.findByName("test") && project.sourceSets.test.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.test.output.classesDir], +    List<File> getClassDirectories() {, +    void setClassDirectories(List<File> classDirectories) {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    public CancelTasksResponse(DiscoveryNodes discoveryNodes) {, +        super(discoveryNodes);, +    }, +, +        nodeFailures, DiscoveryNodes discoveryNodes) {, +        super(tasks, taskFailures, nodeFailures, discoveryNodes);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, () -> new CancelTasksResponse(clusterService.state().nodes()),, +            ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions, clusterService.state().nodes());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private List<File> classDirectories;, +                classDirectories = [], +                if (project.sourceSets.findByName("main") && project.sourceSets.main.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.main.output.classesDir], +                if (project.sourceSets.findByName("test") && project.sourceSets.test.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.test.output.classesDir], +    List<File> getClassDirectories() {, +    void setClassDirectories(List<File> classDirectories) {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +    public CancelTasksResponse(DiscoveryNodes discoveryNodes) {, +        super(discoveryNodes);, +    }, +, +        nodeFailures, DiscoveryNodes discoveryNodes) {, +        super(tasks, taskFailures, nodeFailures, discoveryNodes);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, () -> new CancelTasksResponse(clusterService.state().nodes()),, +            ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions, clusterService.state().nodes());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.xcontent.json.JsonXContent;, +        this(null, null, null, null);, +    }, +, +    public ListTasksResponse(DiscoveryNodes discoveryNodes) {, +        this(null, null, null, discoveryNodes);, +            List<? extends FailedNodeException> nodeFailures, DiscoveryNodes discoveryNodes) {, +        this.discoveryNodes = discoveryNodes;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private List<File> classDirectories;, +                classDirectories = [], +                if (project.sourceSets.findByName("main") && project.sourceSets.main.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.main.output.classesDir], +                if (project.sourceSets.findByName("test") && project.sourceSets.test.output.classesDir.exists()) {, +                    classDirectories += [project.sourceSets.test.output.classesDir], +    List<File> getClassDirectories() {, +    void setClassDirectories(List<File> classDirectories) {]