[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    final IndexMetaData tmpImd = IndexMetaData.builder(request.index()).settings(actualIndexSettings).build();, +                    indicesService.createIndex(tmpImd);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    final IndexMetaData tmpImd = IndexMetaData.builder(request.index()).settings(actualIndexSettings).build();, +                    indicesService.createIndex(tmpImd);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                            indexService = indicesService.createIndex(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    final IndexMetaData tmpImd = IndexMetaData.builder(request.index()).settings(actualIndexSettings).build();, +                    indicesService.createIndex(tmpImd);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                            indexService = indicesService.createIndex(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                indexService = indicesService.createIndex(indexMetaData);, +                        IndexService indexService = indicesService.createIndex(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    final IndexMetaData tmpImd = IndexMetaData.builder(request.index()).settings(actualIndexSettings).build();, +                    indicesService.createIndex(tmpImd);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                            indexService = indicesService.createIndex(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                indexService = indicesService.createIndex(indexMetaData);, +                        IndexService indexService = indicesService.createIndex(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final IndexMetaData indexMetaData;, +    public IndexModule(IndexMetaData indexMetaData) {, +        this.indexMetaData = indexMetaData;, +    }, +, +        bind(IndexMetaData.class).toInstance(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                    final IndexMetaData tmpImd = IndexMetaData.builder(request.index()).settings(actualIndexSettings).build();, +                    indicesService.createIndex(tmpImd);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                            indexService = indicesService.createIndex(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                indexService = indicesService.createIndex(indexMetaData);, +                        IndexService indexService = indicesService.createIndex(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +    private final IndexMetaData indexMetaData;, +    public IndexModule(IndexMetaData indexMetaData) {, +        this.indexMetaData = indexMetaData;, +    }, +, +        bind(IndexMetaData.class).toInstance(indexMetaData);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.apache.lucene.search.BooleanClause;, +import org.apache.lucene.search.BooleanQuery;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.cluster.metadata.AliasMetaData;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.ParsedQuery;, +import org.elasticsearch.indices.AliasFilterParsingException;, +import org.elasticsearch.indices.InvalidAliasNameException;, +    private volatile IndexMetaData indexMetaData;, +    public IndexService(Index index, IndexMetaData indexMetaData, NodeEnvironment nodeEnv,, +        super(index, settingsService.indexSettings());, +        assert indexMetaData != null;, +        this.indexMetaData = indexMetaData;, +        final Settings indexSettings = settingsService.getSettings();, +        final Settings indexSettings = settingsService.getSettings();, +            final Settings indexSettings = settingsService.getSettings();, +        return settingsService.getSettings();, +    /**, +     * Returns the filter associated with listed filtering aliases., +     * <p>, +     * The list of filtering aliases should be obtained by calling MetaData.filteringAliases., +     * Returns <tt>null</tt> if no filtering is required.</p>, +     */, +    public Query aliasFilter(String... aliasNames) {, +        if (aliasNames == null || aliasNames.length == 0) {, +            return null;, +        }, +        final IndexQueryParserService indexQueryParser = queryParserService();, +        final ImmutableOpenMap<String, AliasMetaData> aliases = this.indexMetaData.getAliases();, +        if (aliasNames.length == 1) {, +            AliasMetaData alias = aliases.get(aliasNames[0]);, +            if (alias == null) {, +                // This shouldn't happen unless alias disappeared after filteringAliases was called., +                throw new InvalidAliasNameException(index, aliasNames[0], "Unknown alias name was passed to alias Filter");, +            }, +            return parse(alias, indexQueryParser);, +        } else {, +            // we need to bench here a bit, to see maybe it makes sense to use OrFilter, +            BooleanQuery.Builder combined = new BooleanQuery.Builder();, +            for (String aliasName : aliasNames) {, +                AliasMetaData alias = aliases.get(aliasName);, +                if (alias == null) {, +                    // This shouldn't happen unless alias disappeared after filteringAliases was called., +                    throw new InvalidAliasNameException(indexQueryParser.index(), aliasNames[0], "Unknown alias name was passed to alias Filter");, +                }, +                Query parsedFilter = parse(alias, indexQueryParser);, +                if (parsedFilter != null) {, +                    combined.add(parsedFilter, BooleanClause.Occur.SHOULD);, +                } else {]