[+++ b/pom.xml, +            <groupId>com.carrotsearch.randomizedtesting</groupId>, +            <artifactId>randomizedtesting-runner</artifactId>, +            <version>2.0.15</version>, +            <scope>test</scope>, +        </dependency>, +        <dependency>, +                <version>2.0.15</version>, +++ b/pom.xml, +            <groupId>com.carrotsearch.randomizedtesting</groupId>, +            <artifactId>randomizedtesting-runner</artifactId>, +            <version>2.0.15</version>, +            <scope>test</scope>, +        </dependency>, +        <dependency>, +                <version>2.0.15</version>, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +    public static final String SHUTTING_DOWN_KEY = "(shutting down)";, +            sb.append(SHUTTING_DOWN_KEY + " ");, +++ b/pom.xml, +            <groupId>com.carrotsearch.randomizedtesting</groupId>, +            <artifactId>randomizedtesting-runner</artifactId>, +            <version>2.0.15</version>, +            <scope>test</scope>, +        </dependency>, +        <dependency>, +                <version>2.0.15</version>, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +    public static final String SHUTTING_DOWN_KEY = "(shutting down)";, +            sb.append(SHUTTING_DOWN_KEY + " ");, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.apache.lucene.util.AbstractRandomizedTest;, +@AbstractRandomizedTest.IntegrationTests, +        assert Thread.getDefaultUncaughtExceptionHandler() instanceof ElasticsearchUncaughtExceptionHandler;, +        try {, +        } catch (OutOfMemoryError e) {, +            if (e.getMessage().contains("unable to create new native thread")) {, +                ElasticsearchTestCase.printStackDump(logger);, +            }, +            throw e;, +        }, +        } catch (OutOfMemoryError e) {, +            if (e.getMessage().contains("unable to create new native thread")) {, +                ElasticsearchTestCase.printStackDump(logger);, +            }, +            throw e;, +++ b/pom.xml, +            <groupId>com.carrotsearch.randomizedtesting</groupId>, +            <artifactId>randomizedtesting-runner</artifactId>, +            <version>2.0.15</version>, +            <scope>test</scope>, +        </dependency>, +        <dependency>, +                <version>2.0.15</version>, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/EsAbortPolicy.java, +    public static final String SHUTTING_DOWN_KEY = "(shutting down)";, +            sb.append(SHUTTING_DOWN_KEY + " ");, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.apache.lucene.util.AbstractRandomizedTest;, +@AbstractRandomizedTest.IntegrationTests, +        assert Thread.getDefaultUncaughtExceptionHandler() instanceof ElasticsearchUncaughtExceptionHandler;, +        try {, +        } catch (OutOfMemoryError e) {, +            if (e.getMessage().contains("unable to create new native thread")) {, +                ElasticsearchTestCase.printStackDump(logger);, +            }, +            throw e;, +        }, +        } catch (OutOfMemoryError e) {, +            if (e.getMessage().contains("unable to create new native thread")) {, +                ElasticsearchTestCase.printStackDump(logger);, +            }, +            throw e;, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchTestCase.java, +import org.elasticsearch.common.util.concurrent.EsAbortPolicy;, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.junit.AfterClass;, +    private static Thread.UncaughtExceptionHandler defaultHandler;, +    , +        defaultHandler = Thread.getDefaultUncaughtExceptionHandler();, +        Thread.setDefaultUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(defaultHandler));, +    }, +, +    @AfterClass, +    public static void resetUncaughtExceptionHandler() {, +       Thread.setDefaultUncaughtExceptionHandler(defaultHandler);, +    static final class ElasticsearchUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {, +, +        private final Thread.UncaughtExceptionHandler parent;, +        private final ESLogger logger = Loggers.getLogger(getClass());, +, +        private ElasticsearchUncaughtExceptionHandler(Thread.UncaughtExceptionHandler parent) {, +            this.parent = parent;, +        }, +, +, +        @Override, +        public void uncaughtException(Thread t, Throwable e) {, +            if (e instanceof EsRejectedExecutionException) {, +                if (e.getMessage().contains(EsAbortPolicy.SHUTTING_DOWN_KEY)) {]