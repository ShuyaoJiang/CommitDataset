[+++ b/core/src/main/java/org/elasticsearch/index/search/NestedHelper.java, +import org.apache.lucene.search.IndexOrDocValuesQuery;, +        } else if (query instanceof IndexOrDocValuesQuery) {, +            return mightMatchNestedDocs(((IndexOrDocValuesQuery) query).getIndexQuery());, +        } else if (query instanceof IndexOrDocValuesQuery) {, +            return mightMatchNonNestedDocs(((IndexOrDocValuesQuery) query).getIndexQuery(), nestedPath);, +++ b/core/src/main/java/org/elasticsearch/index/search/NestedHelper.java, +import org.apache.lucene.search.IndexOrDocValuesQuery;, +        } else if (query instanceof IndexOrDocValuesQuery) {, +            return mightMatchNestedDocs(((IndexOrDocValuesQuery) query).getIndexQuery());, +        } else if (query instanceof IndexOrDocValuesQuery) {, +            return mightMatchNonNestedDocs(((IndexOrDocValuesQuery) query).getIndexQuery(), nestedPath);, +++ b/core/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java, +import org.elasticsearch.index.mapper.MappedFieldType;, +                        .startObject("foo2"), +                            .field("type", "long"), +                        .endObject(), +                                .startObject("foo2"), +                                    .field("type", "long"), +                                .endObject(), +                                .startObject("foo2"), +                                    .field("type", "long"), +                                .endObject(), +                                .startObject("foo2"), +                                    .field("type", "long"), +                                .endObject(), +        Query termQuery = mapperService.fullName("foo").termQuery("bar", null);, +        termQuery = mapperService.fullName("nested1.foo").termQuery("bar", null);, +        termQuery = mapperService.fullName("nested2.foo").termQuery("bar", null);, +        termQuery = mapperService.fullName("nested3.foo").termQuery("bar", null);, +    public void testRangeQuery() {, +        Query rangeQuery = mapperService.fullName("foo2").rangeQuery(2, 5, true, true, null);, +        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing"));, +, +        rangeQuery = mapperService.fullName("nested1.foo2").rangeQuery(2, 5, true, true, null);, +        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));, +        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing"));, +, +        rangeQuery = mapperService.fullName("nested2.foo2").rangeQuery(2, 5, true, true, null);, +        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing"));, +, +        rangeQuery = mapperService.fullName("nested3.foo2").rangeQuery(2, 5, true, true, null);, +        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested1"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested2"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested3"));, +        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, "nested_missing"));, +    }, +]