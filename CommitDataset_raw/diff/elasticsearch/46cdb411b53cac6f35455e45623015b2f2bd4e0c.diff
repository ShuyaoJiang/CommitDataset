[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    static <Response> ActionListener<Response> wrap(Consumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    static <Response> ActionListener<Response> wrap(Consumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +    public ActionModule(boolean ingestEnabled, boolean transportClient, Settings settings, IndexNameExpressionResolver resolver,, +            ClusterSettings clusterSettings, List<ActionPlugin> actionPlugins) {, +        actionFilters = setupActionFilters(actionPlugins, ingestEnabled);, +        restController = new RestController(settings, headers);, +    private List<Class<? extends ActionFilter>> setupActionFilters(List<ActionPlugin> actionPlugins, boolean ingestEnabled) {, +        List<Class<? extends ActionFilter>> filters = new ArrayList<>();, +        if (transportClient == false) {, +            if (ingestEnabled) {, +                filters.add(IngestActionFilter.class);, +            } else {, +                filters.add(IngestProxyActionFilter.class);, +            }, +        }, +, +        for (ActionPlugin plugin : actionPlugins) {, +            filters.addAll(plugin.getActionFilters());, +        }, +        return unmodifiableList(filters);, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    static <Response> ActionListener<Response> wrap(Consumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +    public ActionModule(boolean ingestEnabled, boolean transportClient, Settings settings, IndexNameExpressionResolver resolver,, +            ClusterSettings clusterSettings, List<ActionPlugin> actionPlugins) {, +        actionFilters = setupActionFilters(actionPlugins, ingestEnabled);, +        restController = new RestController(settings, headers);, +    private List<Class<? extends ActionFilter>> setupActionFilters(List<ActionPlugin> actionPlugins, boolean ingestEnabled) {, +        List<Class<? extends ActionFilter>> filters = new ArrayList<>();, +        if (transportClient == false) {, +            if (ingestEnabled) {, +                filters.add(IngestActionFilter.class);, +            } else {, +                filters.add(IngestProxyActionFilter.class);, +            }, +        }, +, +        for (ActionPlugin plugin : actionPlugins) {, +            filters.addAll(plugin.getActionFilters());, +        }, +        return unmodifiableList(filters);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/NodeExplanation.java, +        Decision.writeTo(nodeDecision, out);, +            builder.field("final_explanation", finalExplanation.toString());, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    static <Response> ActionListener<Response> wrap(Consumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestProxyActionFilter;, +    public ActionModule(boolean ingestEnabled, boolean transportClient, Settings settings, IndexNameExpressionResolver resolver,, +            ClusterSettings clusterSettings, List<ActionPlugin> actionPlugins) {, +        actionFilters = setupActionFilters(actionPlugins, ingestEnabled);, +        restController = new RestController(settings, headers);, +    private List<Class<? extends ActionFilter>> setupActionFilters(List<ActionPlugin> actionPlugins, boolean ingestEnabled) {, +        List<Class<? extends ActionFilter>> filters = new ArrayList<>();, +        if (transportClient == false) {, +            if (ingestEnabled) {, +                filters.add(IngestActionFilter.class);, +            } else {, +                filters.add(IngestProxyActionFilter.class);, +            }, +        }, +, +        for (ActionPlugin plugin : actionPlugins) {, +            filters.addAll(plugin.getActionFilters());, +        }, +        return unmodifiableList(filters);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/NodeExplanation.java, +        Decision.writeTo(nodeDecision, out);, +            builder.field("final_explanation", finalExplanation.toString());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequest.java, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java, +    public static final int DEFAULT_SOCKET_TIMEOUT_MILLIS = 10000;, +        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS), +++ b/core/src/main/java/org/elasticsearch/action/ActionListener.java, +    static <Response> ActionListener<Response> wrap(Consumer<Response> onResponse, Consumer<Exception> onFailure) {, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.ingest.IngestActionFilter;]