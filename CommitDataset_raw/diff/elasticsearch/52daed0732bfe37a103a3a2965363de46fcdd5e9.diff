[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        if (valuesSource == null || owningBucketOrd >= sums.size()) {, +            return Double.NaN;, +        }, +        return sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        if (valuesSource == null || owningBucketOrd >= sums.size()) {, +            return Double.NaN;, +        }, +        return sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        if (valuesSource == null || owningBucketOrd >= maxes.size()) {, +            return Double.NEGATIVE_INFINITY;, +        }, +        return maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        if (valuesSource == null || owningBucketOrd >= sums.size()) {, +            return Double.NaN;, +        }, +        return sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        if (valuesSource == null || owningBucketOrd >= maxes.size()) {, +            return Double.NEGATIVE_INFINITY;, +        }, +        return maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        if (valuesSource == null || owningBucketOrd >= mins.size()) {, +            return Double.POSITIVE_INFINITY;, +        }, +        return mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        if (valuesSource == null || owningBucketOrd >= sums.size()) {, +            return Double.NaN;, +        }, +        return sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        if (valuesSource == null || owningBucketOrd >= maxes.size()) {, +            return Double.NEGATIVE_INFINITY;, +        }, +        return maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        if (valuesSource == null || owningBucketOrd >= mins.size()) {, +            return Double.POSITIVE_INFINITY;, +        }, +        return mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java, +        if (valuesSource == null || owningBucketOrd >= counts.size()) {, +                case count: return 0;, +                case sum: return 0;, +                case min: return Double.POSITIVE_INFINITY;, +                case max: return Double.NEGATIVE_INFINITY;, +                case avg: return Double.NaN;, +                default:, +                    throw new IllegalArgumentException("Unknown value [" + name + "] in common stats aggregation");, +            }, +        }, +        switch(InternalStats.Metrics.resolve(name)) {, +            case count: return counts.get(owningBucketOrd);, +            case sum: return sums.get(owningBucketOrd);, +            case min: return mins.get(owningBucketOrd);, +            case max: return maxes.get(owningBucketOrd);, +            case avg: return sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/avg/AvgAggregator.java, +        if (valuesSource == null || owningBucketOrd >= sums.size()) {, +            return Double.NaN;, +        }, +        return sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregator.java, +        if (valuesSource == null || owningBucketOrd >= maxes.size()) {, +            return Double.NEGATIVE_INFINITY;, +        }, +        return maxes.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/min/MinAggregator.java, +        if (valuesSource == null || owningBucketOrd >= mins.size()) {, +            return Double.POSITIVE_INFINITY;, +        }, +        return mins.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java, +        if (valuesSource == null || owningBucketOrd >= counts.size()) {, +                case count: return 0;, +                case sum: return 0;, +                case min: return Double.POSITIVE_INFINITY;, +                case max: return Double.NEGATIVE_INFINITY;, +                case avg: return Double.NaN;, +                default:, +                    throw new IllegalArgumentException("Unknown value [" + name + "] in common stats aggregation");, +            }, +        }, +        switch(InternalStats.Metrics.resolve(name)) {, +            case count: return counts.get(owningBucketOrd);, +            case sum: return sums.get(owningBucketOrd);, +            case min: return mins.get(owningBucketOrd);, +            case max: return maxes.get(owningBucketOrd);, +            case avg: return sums.get(owningBucketOrd) / counts.get(owningBucketOrd);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +import org.elasticsearch.search.aggregations.metrics.stats.InternalStats;, +        if (valuesSource == null || owningBucketOrd >= counts.size()) {, +                case count: return 0;, +                case sum: return 0;, +                case min: return Double.POSITIVE_INFINITY;]