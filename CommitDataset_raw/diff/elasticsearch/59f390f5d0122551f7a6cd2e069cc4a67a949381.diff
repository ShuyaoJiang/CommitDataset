[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +++ b/core/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +    Validator POSITIVE_BYTES_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value, ClusterState state) {, +            try {, +                ByteSizeValue byteSizeValue = parseBytesSizeValue(value, setting);, +                if (byteSizeValue.getBytes() <= 0) {, +                    return setting + " must be a positive byte size value";, +                }, +            } catch (ElasticsearchParseException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +++ b/core/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +    Validator POSITIVE_BYTES_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value, ClusterState state) {, +            try {, +                ByteSizeValue byteSizeValue = parseBytesSizeValue(value, setting);, +                if (byteSizeValue.getBytes() <= 0) {, +                    return setting + " must be a positive byte size value";, +                }, +            } catch (ElasticsearchParseException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +++ b/core/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java, +import org.elasticsearch.common.inject.Scopes;, +    private final Settings settings;, +        this.settings = settings;, +        String queryCacheType = settings.get(QUERY_CACHE_TYPE, INDEX_QUERY_CACHE);, +        Class<? extends QueryCache> queryCacheImpl;, +        if (queryCacheType.equals(INDEX_QUERY_CACHE)) {, +            queryCacheImpl = IndexQueryCache.class;, +        } else if (queryCacheType.equals(NONE_QUERY_CACHE)) {, +            queryCacheImpl = NoneQueryCache.class;, +        } else {, +            throw new IllegalArgumentException("Unknown QueryCache type [" + queryCacheType + "]");, +        }, +        bind(QueryCache.class).to(queryCacheImpl).in(Scopes.SINGLETON);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +++ b/core/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +    Validator POSITIVE_BYTES_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value, ClusterState state) {, +            try {, +                ByteSizeValue byteSizeValue = parseBytesSizeValue(value, setting);, +                if (byteSizeValue.getBytes() <= 0) {, +                    return setting + " must be a positive byte size value";, +                }, +            } catch (ElasticsearchParseException ex) {, +                return ex.getMessage();, +            }, +            return null;, +        }, +    };, +, +++ b/core/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java, +import org.elasticsearch.common.inject.Scopes;, +    private final Settings settings;, +        this.settings = settings;, +        String queryCacheType = settings.get(QUERY_CACHE_TYPE, INDEX_QUERY_CACHE);, +        Class<? extends QueryCache> queryCacheImpl;, +        if (queryCacheType.equals(INDEX_QUERY_CACHE)) {, +            queryCacheImpl = IndexQueryCache.class;, +        } else if (queryCacheType.equals(NONE_QUERY_CACHE)) {, +            queryCacheImpl = NoneQueryCache.class;, +        } else {, +            throw new IllegalArgumentException("Unknown QueryCache type [" + queryCacheType + "]");, +        }, +        bind(QueryCache.class).to(queryCacheImpl).in(Scopes.SINGLETON);, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +                                final int BUFFER_SIZE = (int) Math.max(1, recoverySettings.fileChunkSize().bytes()); // at least one!, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +        registerClusterDynamicSetting(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, Validator.POSITIVE_BYTES_SIZE);, +++ b/core/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +import org.elasticsearch.common.unit.ByteSizeValue;, +    Validator POSITIVE_BYTES_SIZE = new Validator() {, +        @Override, +        public String validate(String setting, String value, ClusterState state) {, +            try {, +                ByteSizeValue byteSizeValue = parseBytesSizeValue(value, setting);, +                if (byteSizeValue.getBytes() <= 0) {, +                    return setting + " must be a positive byte size value";]