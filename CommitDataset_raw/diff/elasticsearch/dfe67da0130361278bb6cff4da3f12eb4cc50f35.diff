[+++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +    @SuppressWarnings("unchecked"), +            ret.add(new UpgradeStatus(index, (Integer)totalBytes, (Integer)toUpgradeBytes));, +    @SuppressWarnings("unchecked"), +++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +    @SuppressWarnings("unchecked"), +            ret.add(new UpgradeStatus(index, (Integer)totalBytes, (Integer)toUpgradeBytes));, +    @SuppressWarnings("unchecked"), +++ b/src/test/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +        return response.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +    @SuppressWarnings("unchecked"), +            ret.add(new UpgradeStatus(index, (Integer)totalBytes, (Integer)toUpgradeBytes));, +    @SuppressWarnings("unchecked"), +++ b/src/test/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +        return response.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/test/rest/Stash.java, +    public static final Stash EMPTY = new Stash();, +, +++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +    @SuppressWarnings("unchecked"), +            ret.add(new UpgradeStatus(index, (Integer)totalBytes, (Integer)toUpgradeBytes));, +    @SuppressWarnings("unchecked"), +++ b/src/test/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +        return response.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/test/rest/Stash.java, +    public static final Stash EMPTY = new Stash();, +, +++ b/src/test/java/org/elasticsearch/test/rest/client/RestResponse.java, +import org.elasticsearch.test.rest.Stash;, +        return evaluate(path, Stash.EMPTY);, +    }, +, +    /**, +     * Parses the response body as json and extracts a specific value from it (identified by the provided path), +     */, +    public Object evaluate(String path, Stash stash) throws IOException {, +        return jsonPath.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +    @SuppressWarnings("unchecked"), +            ret.add(new UpgradeStatus(index, (Integer)totalBytes, (Integer)toUpgradeBytes));, +    @SuppressWarnings("unchecked"), +++ b/src/test/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +        return response.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/test/rest/Stash.java, +    public static final Stash EMPTY = new Stash();, +, +++ b/src/test/java/org/elasticsearch/test/rest/client/RestResponse.java, +import org.elasticsearch.test.rest.Stash;, +        return evaluate(path, Stash.EMPTY);, +    }, +, +    /**, +     * Parses the response body as json and extracts a specific value from it (identified by the provided path), +     */, +    public Object evaluate(String path, Stash stash) throws IOException {, +        return jsonPath.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/test/rest/json/JsonPath.java, +import org.elasticsearch.test.rest.Stash;, +        return evaluate(path, Stash.EMPTY);, +    }, +, +    /**, +     * Returns the object corresponding to the provided path if present, null otherwise, +     */, +    public Object evaluate(String path, Stash stash) {, +            object = evaluate(part, object, stash);, +    private Object evaluate(String key, Object object, Stash stash) {, +        if (stash.isStashedValue(key)) {, +            key = stash.unstashValue(key).toString();, +        }, +, +++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +    @SuppressWarnings("unchecked"), +            ret.add(new UpgradeStatus(index, (Integer)totalBytes, (Integer)toUpgradeBytes));, +    @SuppressWarnings("unchecked"), +++ b/src/test/java/org/elasticsearch/test/rest/RestTestExecutionContext.java, +        return response.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/test/rest/Stash.java, +    public static final Stash EMPTY = new Stash();, +, +++ b/src/test/java/org/elasticsearch/test/rest/client/RestResponse.java, +import org.elasticsearch.test.rest.Stash;, +        return evaluate(path, Stash.EMPTY);, +    }, +, +    /**, +     * Parses the response body as json and extracts a specific value from it (identified by the provided path), +     */, +    public Object evaluate(String path, Stash stash) throws IOException {, +        return jsonPath.evaluate(path, stash);, +++ b/src/test/java/org/elasticsearch/test/rest/json/JsonPath.java, +import org.elasticsearch.test.rest.Stash;, +        return evaluate(path, Stash.EMPTY);, +    }, +, +    /**, +     * Returns the object corresponding to the provided path if present, null otherwise, +     */, +    public Object evaluate(String path, Stash stash) {]