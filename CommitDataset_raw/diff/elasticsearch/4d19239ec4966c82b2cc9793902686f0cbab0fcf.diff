[+++ b/docs/reference/analysis/tokenfilters/stop-tokenfilter.asciidoc, +, +|`remove_trailing` |Set to `false` in order to not ignore the last term of, +a search if it is a stop word. This is very useful for the completion, +suggester as a query like `green a` can be extended to `green apple` even, +though you remove stop words in general. Defaults to `true`., +++ b/docs/reference/analysis/tokenfilters/stop-tokenfilter.asciidoc, +, +|`remove_trailing` |Set to `false` in order to not ignore the last term of, +a search if it is a stop word. This is very useful for the completion, +suggester as a query like `green a` can be extended to `green apple` even, +though you remove stop words in general. Defaults to `true`., +++ b/src/main/java/org/elasticsearch/index/analysis/StopTokenFilterFactory.java, +import org.apache.lucene.search.suggest.analyzing.SuggestStopFilter;, +    private final boolean removeTrailing;, +        this.removeTrailing = settings.getAsBoolean("remove_trailing", true);, +        if (removeTrailing) {, +        } else {, +            return new SuggestStopFilter(tokenStream, stopWords);, +        }, +++ b/docs/reference/analysis/tokenfilters/stop-tokenfilter.asciidoc, +, +|`remove_trailing` |Set to `false` in order to not ignore the last term of, +a search if it is a stop word. This is very useful for the completion, +suggester as a query like `green a` can be extended to `green apple` even, +though you remove stop words in general. Defaults to `true`., +++ b/src/main/java/org/elasticsearch/index/analysis/StopTokenFilterFactory.java, +import org.apache.lucene.search.suggest.analyzing.SuggestStopFilter;, +    private final boolean removeTrailing;, +        this.removeTrailing = settings.getAsBoolean("remove_trailing", true);, +        if (removeTrailing) {, +        } else {, +            return new SuggestStopFilter(tokenStream, stopWords);, +        }, +++ b/src/test/java/org/elasticsearch/index/analysis/StopTokenFilterTests.java, +import org.apache.lucene.search.suggest.analyzing.SuggestStopFilter;, +    @Test, +    public void testThatSuggestStopFilterWorks() throws Exception {, +        Settings settings = ImmutableSettings.settingsBuilder(), +                .put("index.analysis.filter.my_stop.type", "stop"), +                .put("index.analysis.filter.my_stop.remove_trailing", false), +                .build();, +        AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settings);, +        TokenFilterFactory tokenFilter = analysisService.tokenFilter("my_stop");, +        assertThat(tokenFilter, instanceOf(StopTokenFilterFactory.class));, +        TokenStream create = tokenFilter.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader("foo an")));, +        assertThat(create, instanceOf(SuggestStopFilter.class));, +    }, +++ b/docs/reference/analysis/tokenfilters/stop-tokenfilter.asciidoc, +, +|`remove_trailing` |Set to `false` in order to not ignore the last term of, +a search if it is a stop word. This is very useful for the completion, +suggester as a query like `green a` can be extended to `green apple` even, +though you remove stop words in general. Defaults to `true`., +++ b/src/main/java/org/elasticsearch/index/analysis/StopTokenFilterFactory.java, +import org.apache.lucene.search.suggest.analyzing.SuggestStopFilter;, +    private final boolean removeTrailing;, +        this.removeTrailing = settings.getAsBoolean("remove_trailing", true);, +        if (removeTrailing) {, +        } else {, +            return new SuggestStopFilter(tokenStream, stopWords);, +        }, +++ b/src/test/java/org/elasticsearch/index/analysis/StopTokenFilterTests.java, +import org.apache.lucene.search.suggest.analyzing.SuggestStopFilter;, +    @Test, +    public void testThatSuggestStopFilterWorks() throws Exception {, +        Settings settings = ImmutableSettings.settingsBuilder(), +                .put("index.analysis.filter.my_stop.type", "stop"), +                .put("index.analysis.filter.my_stop.remove_trailing", false), +                .build();, +        AnalysisService analysisService = AnalysisTestsHelper.createAnalysisServiceFromSettings(settings);, +        TokenFilterFactory tokenFilter = analysisService.tokenFilter("my_stop");, +        assertThat(tokenFilter, instanceOf(StopTokenFilterFactory.class));, +        TokenStream create = tokenFilter.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader("foo an")));, +        assertThat(create, instanceOf(SuggestStopFilter.class));, +    }, +++ b/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchTests.java, +    @Test, +    public void testThatSuggestStopFilterWorks() throws Exception {, +        ImmutableSettings.Builder settingsBuilder = settingsBuilder(), +                .put("index.analysis.analyzer.stoptest.tokenizer", "standard"), +                .putArray("index.analysis.analyzer.stoptest.filter", "standard", "suggest_stop_filter"), +                .put("index.analysis.filter.suggest_stop_filter.type", "stop"), +                .put("index.analysis.filter.suggest_stop_filter.remove_trailing", false);, +, +        createIndexAndMappingAndSettings(settingsBuilder, "simple", "stoptest", true, true, true);, +, +        client().prepareIndex(INDEX, TYPE, "1").setSource(jsonBuilder(), +                .startObject().field(FIELD, "Feed trolls").endObject(), +        ).get();, +, +        client().prepareIndex(INDEX, TYPE, "2").setSource(jsonBuilder(), +                .startObject().field(FIELD, "Feed the trolls").endObject(), +        ).get();, +, +        refresh();, +, +        assertSuggestions("feed t", "Feed the trolls", "Feed trolls");, +        assertSuggestions("feed th", "Feed the trolls");, +        assertSuggestions("feed the", "Feed the trolls");]