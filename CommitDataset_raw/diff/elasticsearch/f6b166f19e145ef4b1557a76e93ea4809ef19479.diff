[+++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.DiskThresholdSettings;, +        this.enabled = DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.DiskThresholdSettings;, +        this.enabled = DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.cluster.routing.allocation.DiskThresholdSettings;, +                                    DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.getKey(),, +++ b/core/src/main/java/org/elasticsearch/cluster/InternalClusterInfoService.java, +import org.elasticsearch.cluster.routing.allocation.DiskThresholdSettings;, +        this.enabled = DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.get(settings);, +        clusterSettings.addSettingsUpdateConsumer(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING, this::setEnabled);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +import org.elasticsearch.cluster.routing.allocation.DiskThresholdSettings;, +                                    DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL_SETTING.getKey(),, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/DiskThresholdMonitor.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing.allocation;, +, +import java.util.Set;, +, +import com.carrotsearch.hppc.ObjectLookupContainer;, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.ClusterInfo;, +import org.elasticsearch.cluster.ClusterInfoService;, +import org.elasticsearch.cluster.DiskUsage;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.ImmutableOpenMap;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.ClusterSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.set.Sets;, +, +/**, + * Listens for a node to go over the high watermark and kicks off an empty, + * reroute if it does. Also responsible for logging about nodes that have, + * passed the disk watermarks, + */, +public class DiskThresholdMonitor extends AbstractComponent implements ClusterInfoService.Listener {, +    private final DiskThresholdSettings diskThresholdSettings;, +    private final Client client;, +    private final Set<String> nodeHasPassedWatermark = Sets.newConcurrentHashSet();, +, +    private long lastRunNS;, +, +    // TODO: remove injection when ClusterInfoService is not injected, +    @Inject, +    public DiskThresholdMonitor(Settings settings, ClusterSettings clusterSettings,, +                                ClusterInfoService infoService, Client client) {, +        super(settings);, +        this.diskThresholdSettings = new DiskThresholdSettings(settings, clusterSettings);, +        this.client = client;, +        infoService.addListener(this);, +    }, +, +    /**, +     * Warn about the given disk usage if the low or high watermark has been passed, +     */, +    private void warnAboutDiskIfNeeded(DiskUsage usage) {, +        // Check absolute disk values, +        if (usage.getFreeBytes() < diskThresholdSettings.getFreeBytesThresholdHigh().bytes()) {, +            logger.warn("high disk watermark [{}] exceeded on {}, shards will be relocated away from this node",, +                diskThresholdSettings.getFreeBytesThresholdHigh(), usage);, +        } else if (usage.getFreeBytes() < diskThresholdSettings.getFreeBytesThresholdLow().bytes()) {, +            logger.info("low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node",, +                diskThresholdSettings.getFreeBytesThresholdLow(), usage);, +        }, +, +        // Check percentage disk values, +        if (usage.getFreeDiskAsPercentage() < diskThresholdSettings.getFreeDiskThresholdHigh()) {, +            logger.warn("high disk watermark [{}] exceeded on {}, shards will be relocated away from this node",, +                Strings.format1Decimals(100.0 - diskThresholdSettings.getFreeDiskThresholdHigh(), "%"), usage);, +        } else if (usage.getFreeDiskAsPercentage() < diskThresholdSettings.getFreeDiskThresholdLow()) {, +            logger.info("low disk watermark [{}] exceeded on {}, replicas will not be assigned to this node",, +                Strings.format1Decimals(100.0 - diskThresholdSettings.getFreeDiskThresholdLow(), "%"), usage);, +        }, +    }]