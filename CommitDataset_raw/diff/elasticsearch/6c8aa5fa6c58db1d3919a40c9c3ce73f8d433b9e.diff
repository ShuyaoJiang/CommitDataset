[+++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                if (this.indexWriter != null) {, +                    try {, +                        IndexWriter pending = indexWriter;, +                        indexWriter = null;, +                        pending.rollback();, +                    } catch (IOException e1) {, +                       e.addSuppressed(e1);, +                    }, +                }, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                if (this.indexWriter != null) {, +                    try {, +                        IndexWriter pending = indexWriter;, +                        indexWriter = null;, +                        pending.rollback();, +                    } catch (IOException e1) {, +                       e.addSuppressed(e1);, +                    }, +                }, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java, +    private boolean lastChunk;, +    public RecoveryFileChunkRequest(long recoveryId, ShardId shardId, StoreFileMetaData metaData, long position, BytesReference content, boolean lastChunk) {, +        this.lastChunk = lastChunk;, +        if (in.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0_Beta1)) {, +            lastChunk = in.readBoolean();, +        } else {, +            lastChunk = false;, +        }, +        if (out.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0_Beta1)) {, +            out.writeBoolean(lastChunk);, +        }, +, +    /**, +     * Returns <code>true</code> if this chunk is the last chunk in the stream., +     */, +    public boolean lastChunk() {, +        return lastChunk;, +    }, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                if (this.indexWriter != null) {, +                    try {, +                        IndexWriter pending = indexWriter;, +                        indexWriter = null;, +                        pending.rollback();, +                    } catch (IOException e1) {, +                       e.addSuppressed(e1);, +                    }, +                }, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java, +    private boolean lastChunk;, +    public RecoveryFileChunkRequest(long recoveryId, ShardId shardId, StoreFileMetaData metaData, long position, BytesReference content, boolean lastChunk) {, +        this.lastChunk = lastChunk;, +        if (in.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0_Beta1)) {, +            lastChunk = in.readBoolean();, +        } else {, +            lastChunk = false;, +        }, +        if (out.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0_Beta1)) {, +            out.writeBoolean(lastChunk);, +        }, +, +    /**, +     * Returns <code>true</code> if this chunk is the last chunk in the stream., +     */, +    public boolean lastChunk() {, +        return lastChunk;, +    }, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySource.java, +                                        transportService.submitRequest(request.targetNode(), RecoveryTarget.Actions.FILE_CHUNK, new RecoveryFileChunkRequest(request.recoveryId(), request.shardId(), md, position, content, readCount == len),, +                                                TransportRequestOptions.options().withCompress(shouldCompressRequest).withType(TransportRequestOptions.Type.RECOVERY).withTimeout(internalActionTimeout), EmptyTransportResponseHandler.INSTANCE_SAME).txGet();, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                if (this.indexWriter != null) {, +                    try {, +                        IndexWriter pending = indexWriter;, +                        indexWriter = null;, +                        pending.rollback();, +                    } catch (IOException e1) {, +                       e.addSuppressed(e1);, +                    }, +                }, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java, +    private boolean lastChunk;, +    public RecoveryFileChunkRequest(long recoveryId, ShardId shardId, StoreFileMetaData metaData, long position, BytesReference content, boolean lastChunk) {, +        this.lastChunk = lastChunk;, +        if (in.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0_Beta1)) {, +            lastChunk = in.readBoolean();, +        } else {, +            lastChunk = false;, +        }, +        if (out.getVersion().onOrAfter(org.elasticsearch.Version.V_1_4_0_Beta1)) {, +            out.writeBoolean(lastChunk);, +        }, +, +    /**, +     * Returns <code>true</code> if this chunk is the last chunk in the stream., +     */, +    public boolean lastChunk() {, +        return lastChunk;, +    }]