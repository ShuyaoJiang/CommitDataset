[+++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/distributions, +export TAR=/elasticsearch/distribution/tar/build/distributions, +export RPM=/elasticsearch/distribution/rpm/build/distributions, +export DEB=/elasticsearch/distribution/deb/build/distributions, +++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/distributions, +export TAR=/elasticsearch/distribution/tar/build/distributions, +export RPM=/elasticsearch/distribution/rpm/build/distributions, +export DEB=/elasticsearch/distribution/deb/build/distributions, +++ b/build.gradle, +// we need to add the same --debug-jvm option as, +// the real RunTask has, so we can pass it through, +class Run extends DefaultTask {, +  boolean debug = false, +, +  @org.gradle.api.internal.tasks.options.Option(, +        option = "debug-jvm",, +        description = "Enable debugging configuration, to allow attaching a debugger to elasticsearch.", +  ), +  public void setDebug(boolean enabled) {, +    project.project(':distribution').run.clusterConfig.debug = enabled, +  } , +}, +task run(type: Run) {, +  dependsOn ':distribution:run', +  description = 'Runs elasticsearch in the foreground', +  group = 'Verification', +}, +++ b/TESTING.asciidoc, +gradle prepareTestRoot, +If you want to run elasticsearch from your IDE, the `gradle run` task, +supports a remote debugging option:, +, +---------------------------------------------------------------------------, +gradle run --debug-jvm, +---------------------------------------------------------------------------, +++ b/Vagrantfile, +export ZIP=/elasticsearch/distribution/zip/build/distributions, +export TAR=/elasticsearch/distribution/tar/build/distributions, +export RPM=/elasticsearch/distribution/rpm/build/distributions, +export DEB=/elasticsearch/distribution/deb/build/distributions, +++ b/build.gradle, +// we need to add the same --debug-jvm option as, +// the real RunTask has, so we can pass it through, +class Run extends DefaultTask {, +  boolean debug = false, +, +  @org.gradle.api.internal.tasks.options.Option(, +        option = "debug-jvm",, +        description = "Enable debugging configuration, to allow attaching a debugger to elasticsearch.", +  ), +  public void setDebug(boolean enabled) {, +    project.project(':distribution').run.clusterConfig.debug = enabled, +  } , +}, +task run(type: Run) {, +  dependsOn ':distribution:run', +  description = 'Runs elasticsearch in the foreground', +  group = 'Verification', +}, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +import com.carrotsearch.ant.tasks.junit4.events.aggregated.AggregatedTestResultEvent, +import static com.carrotsearch.ant.tasks.junit4.events.aggregated.TestStatus.*, +import static java.lang.Math.max, +/**, + * Adapts junit4's event listeners into gradle's ProgressLogger. Note that, + * junit4 guarantees (via guava) that methods on this class won't be called by, + * multiple threads simultaneously which is helpful in making it simpler., + *, + * Every time a test finishes this class will update the logger. It will log, + * the last finished test method on the logger line until the first suite, + * finishes. Once the first suite finishes it always logs the last finished, + * suite. This means that in test runs with a single suite the logger will be, + * updated with the test name the whole time which is useful because these runs, + * usually have longer individual tests. For test runs with lots of suites the]