[+++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                    queryBuilder = new CrossFieldsQueryBuilder(tieBreaker);, +        CrossFieldsQueryBuilder(float tiebreaker) {, +            super(tiebreaker);, +            return MultiMatchQuery.blendPhrase(query, tieBreaker, blendedFields);, +    static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields) {, +        return new DisjunctionMaxQuery(disjunctions, tiebreaker);, +++ b/server/src/main/java/org/elasticsearch/index/search/MultiMatchQuery.java, +                    queryBuilder = new CrossFieldsQueryBuilder(tieBreaker);, +        CrossFieldsQueryBuilder(float tiebreaker) {, +            super(tiebreaker);, +            return MultiMatchQuery.blendPhrase(query, tieBreaker, blendedFields);, +    static Query blendPhrase(PhraseQuery query, float tiebreaker, FieldAndFieldType... fields) {, +        return new DisjunctionMaxQuery(disjunctions, tiebreaker);, +++ b/server/src/test/java/org/elasticsearch/index/search/MultiMatchQueryTests.java, +        for (float tieBreaker : new float[] {0.0f, 0.5f}) {, +            Query parsedQuery = multiMatchQuery("banon"), +                .field("name.first", 2), +                .field("name.last", 3).field("foobar"), +                .type(MultiMatchQueryBuilder.Type.CROSS_FIELDS), +                .tieBreaker(tieBreaker), +                .toQuery(queryShardContext);, +                        new DisjunctionMaxQuery(Arrays.asList(tq2, tq1), tieBreaker), +                    ), tieBreaker);, +    }]