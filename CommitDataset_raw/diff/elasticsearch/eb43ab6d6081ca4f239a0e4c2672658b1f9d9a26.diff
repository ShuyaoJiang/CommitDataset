[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRestoreSourceService.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.util.CombinedRateLimiter;, +import java.util.function.LongConsumer;, +    private final CounterMetric throttleTime = new CounterMetric();, +        return new SessionReader(restore, ccrSettings, throttleTime::inc);, +    public long getThrottleTime() {, +        return this.throttleTime.count();, +    }, +, +        private final CcrSettings ccrSettings;, +        private final LongConsumer throttleListener;, +        private SessionReader(RestoreSession restoreSession, CcrSettings ccrSettings, LongConsumer throttleListener) {, +            this.ccrSettings = ccrSettings;, +            this.throttleListener = throttleListener;, +            CombinedRateLimiter rateLimiter = ccrSettings.getRateLimiter();, +            long throttleTime = rateLimiter.maybePause(reference.length());, +            throttleListener.accept(throttleTime);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRestoreSourceService.java, +import org.elasticsearch.common.metrics.CounterMetric;, +import org.elasticsearch.common.util.CombinedRateLimiter;, +import java.util.function.LongConsumer;, +    private final CounterMetric throttleTime = new CounterMetric();, +        return new SessionReader(restore, ccrSettings, throttleTime::inc);, +    public long getThrottleTime() {, +        return this.throttleTime.count();, +    }, +, +        private final CcrSettings ccrSettings;, +        private final LongConsumer throttleListener;, +        private SessionReader(RestoreSession restoreSession, CcrSettings ccrSettings, LongConsumer throttleListener) {, +            this.ccrSettings = ccrSettings;, +            this.throttleListener = throttleListener;, +            CombinedRateLimiter rateLimiter = ccrSettings.getRateLimiter();, +            long throttleTime = rateLimiter.maybePause(reference.length());, +            throttleListener.accept(throttleTime);, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrRepositoryIT.java, +        boolean followerRateLimiting = randomBoolean();, +, +        if (followerRateLimiting) {, +        } else {, +            assertAcked(leaderClient().admin().cluster().updateSettings(settingsRequest).actionGet());, +        }, +        List<CcrRestoreSourceService> restoreSources = new ArrayList<>();, +        for (CcrRestoreSourceService restoreSource : getLeaderCluster().getDataOrMasterNodeInstances(CcrRestoreSourceService.class)) {, +            restoreSources.add(restoreSource);, +        }, +        if (followerRateLimiting) {, +        } else {, +            assertTrue(restoreSources.stream().anyMatch(cr -> cr.getThrottleTime() > 0));, +        }, +        if (followerRateLimiting) {, +        } else {, +            assertAcked(leaderClient().admin().cluster().updateSettings(settingsRequest).actionGet());, +        }]