[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.rest.action.document.RestIndexAction;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +, +            long lastUpdateSeqNo;, +            long lastUpdatePrimaryTerm;, +            {, +                final UpdateResponse updateResponse = execute(updateRequest, highLevelClient()::update, highLevelClient()::updateAsync);, +                lastUpdateSeqNo = updateResponse.getSeqNo();, +                lastUpdatePrimaryTerm = updateResponse.getPrimaryTerm();, +                assertThat(lastUpdateSeqNo, greaterThanOrEqualTo(0L));, +                assertThat(lastUpdatePrimaryTerm, greaterThanOrEqualTo(1L));, +            }, +            {, +                final UpdateRequest updateRequest = new UpdateRequest("index", "id");, +                updateRequest.doc(singletonMap("field", "with_seq_no_conflict"), randomFrom(XContentType.values()));, +                if (randomBoolean()) {, +                    updateRequest.setIfSeqNo(lastUpdateSeqNo + 1);, +                    updateRequest.setIfPrimaryTerm(lastUpdatePrimaryTerm);, +                } else {, +                    updateRequest.setIfSeqNo(lastUpdateSeqNo + (randomBoolean() ? 0 : 1));, +                    updateRequest.setIfPrimaryTerm(lastUpdatePrimaryTerm + 1);, +                }, +                    execute(updateRequest, highLevelClient()::update, highLevelClient()::updateAsync));, +                assertEquals(exception.toString(),RestStatus.CONFLICT, exception.status());, +                assertThat(exception.getMessage(), containsString("Elasticsearch exception [type=version_conflict_engine_exception"));, +            }, +            {, +                final UpdateRequest updateRequest = new UpdateRequest("index", "id");, +                updateRequest.doc(singletonMap("field", "with_seq_no"), randomFrom(XContentType.values()));, +                updateRequest.setIfSeqNo(lastUpdateSeqNo);, +                updateRequest.setIfPrimaryTerm(lastUpdatePrimaryTerm);, +                final UpdateResponse updateResponse = execute(updateRequest, highLevelClient()::update, highLevelClient()::updateAsync);, +                assertEquals(RestStatus.OK, updateResponse.status());, +                assertEquals(lastUpdateSeqNo + 1, updateResponse.getSeqNo());, +                assertEquals(lastUpdatePrimaryTerm, updateResponse.getPrimaryTerm());, +            }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.rest.action.document.RestIndexAction;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +, +            long lastUpdateSeqNo;, +            long lastUpdatePrimaryTerm;, +            {, +                final UpdateResponse updateResponse = execute(updateRequest, highLevelClient()::update, highLevelClient()::updateAsync);, +                lastUpdateSeqNo = updateResponse.getSeqNo();, +                lastUpdatePrimaryTerm = updateResponse.getPrimaryTerm();, +                assertThat(lastUpdateSeqNo, greaterThanOrEqualTo(0L));, +                assertThat(lastUpdatePrimaryTerm, greaterThanOrEqualTo(1L));, +            }, +            {, +                final UpdateRequest updateRequest = new UpdateRequest("index", "id");, +                updateRequest.doc(singletonMap("field", "with_seq_no_conflict"), randomFrom(XContentType.values()));, +                if (randomBoolean()) {, +                    updateRequest.setIfSeqNo(lastUpdateSeqNo + 1);, +                    updateRequest.setIfPrimaryTerm(lastUpdatePrimaryTerm);, +                } else {, +                    updateRequest.setIfSeqNo(lastUpdateSeqNo + (randomBoolean() ? 0 : 1));, +                    updateRequest.setIfPrimaryTerm(lastUpdatePrimaryTerm + 1);, +                }, +                    execute(updateRequest, highLevelClient()::update, highLevelClient()::updateAsync));, +                assertEquals(exception.toString(),RestStatus.CONFLICT, exception.status());, +                assertThat(exception.getMessage(), containsString("Elasticsearch exception [type=version_conflict_engine_exception"));, +            }, +            {, +                final UpdateRequest updateRequest = new UpdateRequest("index", "id");, +                updateRequest.doc(singletonMap("field", "with_seq_no"), randomFrom(XContentType.values()));, +                updateRequest.setIfSeqNo(lastUpdateSeqNo);, +                updateRequest.setIfPrimaryTerm(lastUpdatePrimaryTerm);, +                final UpdateResponse updateResponse = execute(updateRequest, highLevelClient()::update, highLevelClient()::updateAsync);, +                assertEquals(RestStatus.OK, updateResponse.status());, +                assertEquals(lastUpdateSeqNo + 1, updateResponse.getSeqNo());, +                assertEquals(lastUpdatePrimaryTerm, updateResponse.getPrimaryTerm());, +            }, +++ b/docs/reference/docs/delete.asciidoc, +Delete operations can be made conditional and only be performed if the last, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/CrudIT.java, +import org.elasticsearch.rest.action.document.RestIndexAction;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +, +            long lastUpdateSeqNo;, +            long lastUpdatePrimaryTerm;, +            {, +                final UpdateResponse updateResponse = execute(updateRequest, highLevelClient()::update, highLevelClient()::updateAsync);, +                lastUpdateSeqNo = updateResponse.getSeqNo();, +                lastUpdatePrimaryTerm = updateResponse.getPrimaryTerm();, +                assertThat(lastUpdateSeqNo, greaterThanOrEqualTo(0L));, +                assertThat(lastUpdatePrimaryTerm, greaterThanOrEqualTo(1L));, +            }, +            {, +                final UpdateRequest updateRequest = new UpdateRequest("index", "id");, +                updateRequest.doc(singletonMap("field", "with_seq_no_conflict"), randomFrom(XContentType.values()));, +                if (randomBoolean()) {, +                    updateRequest.setIfSeqNo(lastUpdateSeqNo + 1);, +                    updateRequest.setIfPrimaryTerm(lastUpdatePrimaryTerm);, +                } else {, +                    updateRequest.setIfSeqNo(lastUpdateSeqNo + (randomBoolean() ? 0 : 1));]