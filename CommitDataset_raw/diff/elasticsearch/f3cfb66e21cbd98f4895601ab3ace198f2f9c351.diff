[+++ b/server/src/main/java/org/elasticsearch/search/internal/ShardSearchLocalRequest.java, + * Used directly by api that need to create a search context within their execution., +    private final String clusterAlias;, +    private final ShardId shardId;, +    private final int numberOfShards;, +    private final SearchType searchType;, +    private final Scroll scroll;, +    private final String[] types;, +    private final float indexBoost;, +    private final Boolean requestCache;, +    private final long nowInMillis;, +    private final boolean allowPartialSearchResults;, +    private final String[] indexRoutings;, +    private final String preference;, +    //these are the only two mutable fields, as they are subject to rewriting, +    public ShardSearchLocalRequest(SearchRequest searchRequest, ShardId shardId, int numberOfShards, AliasFilter aliasFilter,, +                                   float indexBoost, long nowInMillis, @Nullable String clusterAlias, String[] indexRoutings) {, +        this(shardId, numberOfShards, searchRequest.searchType(), searchRequest.source(), searchRequest.types(),, +            searchRequest.requestCache(), aliasFilter, indexBoost, searchRequest.allowPartialSearchResults(), indexRoutings,, +            searchRequest.preference(), searchRequest.scroll(), nowInMillis, clusterAlias);, +        this(shardId, -1, null, null, types, null, aliasFilter, 1.0f, false, Strings.EMPTY_ARRAY, null, null, nowInMillis, null);, +    private ShardSearchLocalRequest(ShardId shardId, int numberOfShards, SearchType searchType, SearchSourceBuilder source, String[] types,, +                                    String[] indexRoutings, String preference, Scroll scroll, long nowInMillis,, +                                    @Nullable String clusterAlias) {, +        this.scroll = scroll;, +        this.nowInMillis = nowInMillis;, +        this.clusterAlias = clusterAlias;, +    }, +, +    ShardSearchLocalRequest(StreamInput in) throws IOException {, +        shardId = ShardId.readShardId(in);, +        searchType = SearchType.fromId(in.readByte());, +        numberOfShards = in.readVInt();, +        scroll = in.readOptionalWriteable(Scroll::new);, +        source = in.readOptionalWriteable(SearchSourceBuilder::new);, +        types = in.readStringArray();, +        aliasFilter = new AliasFilter(in);, +        indexBoost = in.readFloat();, +        nowInMillis = in.readVLong();, +        requestCache = in.readOptionalBoolean();, +        clusterAlias = in.readOptionalString();, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            allowPartialSearchResults = in.readBoolean();, +        } else if (in.getVersion().onOrAfter(Version.V_6_3_0)) {, +            allowPartialSearchResults = in.readOptionalBoolean();, +        } else {, +            allowPartialSearchResults = false;, +        }, +        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {, +            indexRoutings = in.readStringArray();, +            preference = in.readOptionalString();, +        } else {, +            indexRoutings = Strings.EMPTY_ARRAY;, +            preference = null;, +        }, +    }, +, +    protected final void innerWriteTo(StreamOutput out, boolean asKey) throws IOException {, +        shardId.writeTo(out);, +        out.writeByte(searchType.id());, +        if (!asKey) {, +            out.writeVInt(numberOfShards);, +        }, +        out.writeOptionalWriteable(scroll);, +        out.writeOptionalWriteable(source);, +        out.writeStringArray(types);, +        aliasFilter.writeTo(out);, +        out.writeFloat(indexBoost);, +        if (asKey == false) {, +            out.writeVLong(nowInMillis);, +        }, +        out.writeOptionalBoolean(requestCache);, +        out.writeOptionalString(clusterAlias);, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeBoolean(allowPartialSearchResults);, +        } else if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +            out.writeOptionalBoolean(allowPartialSearchResults);, +        }, +        if (asKey == false) {, +            if (out.getVersion().onOrAfter(Version.V_6_4_0)) {, +                out.writeStringArray(indexRoutings);, +                out.writeOptionalString(preference);, +            }, +        }, +++ b/server/src/main/java/org/elasticsearch/search/internal/ShardSearchLocalRequest.java, + * Used directly by api that need to create a search context within their execution., +    private final String clusterAlias;, +    private final ShardId shardId;, +    private final int numberOfShards;, +    private final SearchType searchType;, +    private final Scroll scroll;, +    private final String[] types;, +    private final float indexBoost;, +    private final Boolean requestCache;, +    private final long nowInMillis;, +    private final boolean allowPartialSearchResults;, +    private final String[] indexRoutings;, +    private final String preference;, +    //these are the only two mutable fields, as they are subject to rewriting, +    public ShardSearchLocalRequest(SearchRequest searchRequest, ShardId shardId, int numberOfShards, AliasFilter aliasFilter,]