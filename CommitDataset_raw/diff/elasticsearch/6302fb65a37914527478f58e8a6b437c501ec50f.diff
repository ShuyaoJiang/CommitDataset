[+++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +    public static Boolean readBooleanProperty(String processorType, String processorTag, Map<String, Object> configuration,, +                                             String propertyName, boolean defaultValue) {, +        Object value = configuration.remove(propertyName);, +        if (value == null) {, +            return defaultValue;, +        } else {, +            return readBoolean(processorType, processorTag, propertyName, value).booleanValue();, +        }, +    }, +, +    private static Boolean readBoolean(String processorType, String processorTag, String propertyName, Object value) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof Boolean) {, +            return (Boolean) value;, +        }, +        throw newConfigurationException(processorType, processorTag, propertyName, "property isn't a boolean, but of type [" +, +            value.getClass().getName() + "]");, +    }, +, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +    public static Boolean readBooleanProperty(String processorType, String processorTag, Map<String, Object> configuration,, +                                             String propertyName, boolean defaultValue) {, +        Object value = configuration.remove(propertyName);, +        if (value == null) {, +            return defaultValue;, +        } else {, +            return readBoolean(processorType, processorTag, propertyName, value).booleanValue();, +        }, +    }, +, +    private static Boolean readBoolean(String processorType, String processorTag, String propertyName, Object value) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof Boolean) {, +            return (Boolean) value;, +        }, +        throw newConfigurationException(processorType, processorTag, propertyName, "property isn't a boolean, but of type [" +, +            value.getClass().getName() + "]");, +    }, +, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/IngestDocument.java, +     * Returns the value contained in the document with the provided templated path, +     * @param pathTemplate The path within the document in dot-notation, +     * @param clazz The expected class fo the field value, +     * @return the value fro the provided path if existing, null otherwise, +     * @throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,, +     * or if the field that is found at the provided path is not of the expected type., +     */, +    public <T> T getFieldValue(TemplateService.Template pathTemplate, Class<T> clazz) {, +        return getFieldValue(renderTemplate(pathTemplate), clazz);, +    }, +, +    /**, +     * Checks whether the document contains a value for the provided templated path, +     * @param fieldPathTemplate the template for the path within the document in dot-notation, +     * @return true if the document contains a value for the field, false otherwise, +     * @throws IllegalArgumentException if the path is null, empty or invalid, +     */, +    public boolean hasField(TemplateService.Template fieldPathTemplate) {, +        return hasField(renderTemplate(fieldPathTemplate));, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/ingest/core/ConfigurationUtils.java, +    public static Boolean readBooleanProperty(String processorType, String processorTag, Map<String, Object> configuration,, +                                             String propertyName, boolean defaultValue) {, +        Object value = configuration.remove(propertyName);, +        if (value == null) {, +            return defaultValue;, +        } else {, +            return readBoolean(processorType, processorTag, propertyName, value).booleanValue();, +        }, +    }, +, +    private static Boolean readBoolean(String processorType, String processorTag, String propertyName, Object value) {, +        if (value == null) {, +            return null;, +        }, +        if (value instanceof Boolean) {, +            return (Boolean) value;, +        }, +        throw newConfigurationException(processorType, processorTag, propertyName, "property isn't a boolean, but of type [" +, +            value.getClass().getName() + "]");, +    }, +, +, +++ b/core/src/main/java/org/elasticsearch/ingest/core/IngestDocument.java, +     * Returns the value contained in the document with the provided templated path, +     * @param pathTemplate The path within the document in dot-notation, +     * @param clazz The expected class fo the field value, +     * @return the value fro the provided path if existing, null otherwise, +     * @throws IllegalArgumentException if the pathTemplate is null, empty, invalid, if the field doesn't exist,, +     * or if the field that is found at the provided path is not of the expected type., +     */]