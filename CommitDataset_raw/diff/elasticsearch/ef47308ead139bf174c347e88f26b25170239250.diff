[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/cache/filter/IndicesNodeFilterCache.java, +import org.elasticsearch.node.settings.NodeSettingsService;, +    private final ThreadPool threadPool;, +, +    private volatile String size;, +    @Inject public IndicesNodeFilterCache(Settings settings, ThreadPool threadPool, NodeSettingsService nodeSettingsService) {, +        this.threadPool = threadPool;, +        this.size = componentSettings.get("size", "20%");, +        computeSizeInBytes();, +        buildCache();, +        logger.debug("using [node] filter cache with size [{}], actual_size [{}]", size, new ByteSizeValue(sizeInBytes));, +        nodeSettingsService.addListener(new ApplySettings());, +, +    private void buildCache() {, +                .catchup(this.threadPool.scheduler(), catchupTime.millis(), TimeUnit.MILLISECONDS), +    }, +    private void computeSizeInBytes() {, +        if (size.endsWith("%")) {, +            double percent = Double.parseDouble(size.substring(0, size.length() - 1));, +            sizeInBytes = (long) ((percent / 100) * JvmInfo.jvmInfo().getMem().getHeapMax().bytes());, +        } else {, +            sizeInBytes = ByteSizeValue.parseBytesSizeValue(size).bytes();, +        }, +, +    class ApplySettings implements NodeSettingsService.Listener {, +        @Override public void onRefreshSettings(Settings settings) {, +            String size = settings.get("indices.cache.filter.size", IndicesNodeFilterCache.this.size);, +            if (!size.equals(IndicesNodeFilterCache.this.size)) {, +                logger.info("updating [indices.cache.filter.size] from [{}] to [{}]", IndicesNodeFilterCache.this.size, size);, +                IndicesNodeFilterCache.this.size = size;, +                ConcurrentMap<AbstractWeightedFilterCache.FilterCacheKey, FilterCacheValue<DocSet>> oldCache = IndicesNodeFilterCache.this.cache;, +                computeSizeInBytes();, +                buildCache();, +                oldCache.clear();, +            }, +        }, +    }]