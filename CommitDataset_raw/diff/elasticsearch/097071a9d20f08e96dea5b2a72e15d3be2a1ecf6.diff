[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/FQueryFilterParser.java, + * The "fquery" filter is the same as the {@link QueryFilterParser} except that it allows also to, + * associate a name with the query filter., + *, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/FQueryFilterParser.java, + * The "fquery" filter is the same as the {@link QueryFilterParser} except that it allows also to, + * associate a name with the query filter., + *, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/GeoBoundingBoxFilterParser.java, +import static org.elasticsearch.index.query.support.QueryParsers.*;, +, +, +        Filter filter = new GeoBoundingBoxFilter(topLeft, bottomRight, latFieldName, lonFieldName, mapper.fieldDataType(), parseContext.indexCache().fieldData());, +        filter = wrapSmartNameFilter(filter, parseContext.smartFieldMappers(latFieldName), parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/FQueryFilterParser.java, + * The "fquery" filter is the same as the {@link QueryFilterParser} except that it allows also to, + * associate a name with the query filter., + *, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/GeoBoundingBoxFilterParser.java, +import static org.elasticsearch.index.query.support.QueryParsers.*;, +, +, +        Filter filter = new GeoBoundingBoxFilter(topLeft, bottomRight, latFieldName, lonFieldName, mapper.fieldDataType(), parseContext.indexCache().fieldData());, +        filter = wrapSmartNameFilter(filter, parseContext.smartFieldMappers(latFieldName), parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/GeoDistanceFilterParser.java, +import static org.elasticsearch.index.query.support.QueryParsers.*;, +, +        Filter filter = new GeoDistanceFilter(lat, lon, distance, geoDistance, latFieldName, lonFieldName, mapper.fieldDataType(), parseContext.indexCache().fieldData());, +        filter = wrapSmartNameFilter(filter, parseContext.smartFieldMappers(latFieldName), parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/FQueryFilterParser.java, + * The "fquery" filter is the same as the {@link QueryFilterParser} except that it allows also to, + * associate a name with the query filter., + *, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/GeoBoundingBoxFilterParser.java, +import static org.elasticsearch.index.query.support.QueryParsers.*;, +, +, +        Filter filter = new GeoBoundingBoxFilter(topLeft, bottomRight, latFieldName, lonFieldName, mapper.fieldDataType(), parseContext.indexCache().fieldData());, +        filter = wrapSmartNameFilter(filter, parseContext.smartFieldMappers(latFieldName), parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/GeoDistanceFilterParser.java, +import static org.elasticsearch.index.query.support.QueryParsers.*;, +, +        Filter filter = new GeoDistanceFilter(lat, lon, distance, geoDistance, latFieldName, lonFieldName, mapper.fieldDataType(), parseContext.indexCache().fieldData());, +        filter = wrapSmartNameFilter(filter, parseContext.smartFieldMappers(latFieldName), parseContext);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/GeoPolygonFilterParser.java, +import static org.elasticsearch.index.query.support.QueryParsers.*;, +, +        Filter filter = new GeoPolygonFilter(points.toArray(new GeoPolygonFilter.Point[points.size()]), latFieldName, lonFieldName, mapper.fieldDataType(), parseContext.indexCache().fieldData());, +        filter = wrapSmartNameFilter(filter, parseContext.smartFieldMappers(latFieldName), parseContext);]