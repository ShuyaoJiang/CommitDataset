[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.GetCategoriesAction;, +import org.elasticsearch.xpack.ml.rest.job.RestGetJobStatsAction;, +                RestGetJobStatsAction.class,, +                new ActionHandler<>(GetCategoriesAction.INSTANCE, GetCategoriesAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.GetCategoriesAction;, +import org.elasticsearch.xpack.ml.rest.job.RestGetJobStatsAction;, +                RestGetJobStatsAction.class,, +                new ActionHandler<>(GetCategoriesAction.INSTANCE, GetCategoriesAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/GetCategoriesAction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.action;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.ActionRequest;, +import org.elasticsearch.action.ActionRequestBuilder;, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.action.ActionResponse;, +import org.elasticsearch.action.support.ActionFilters;, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.client.ElasticsearchClient;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.xpack.ml.job.Job;, +import org.elasticsearch.xpack.ml.job.persistence.JobProvider;, +import org.elasticsearch.xpack.ml.job.persistence.QueryPage;, +import org.elasticsearch.xpack.ml.job.results.CategoryDefinition;, +import org.elasticsearch.xpack.ml.job.results.PageParams;, +import org.elasticsearch.xpack.ml.utils.ExceptionsHelper;, +, +import java.io.IOException;, +import java.util.Objects;, +, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +public class GetCategoriesAction extends, +Action<GetCategoriesAction.Request, GetCategoriesAction.Response, GetCategoriesAction.RequestBuilder> {, +, +    public static final GetCategoriesAction INSTANCE = new GetCategoriesAction();, +    private static final String NAME = "cluster:admin/ml/categories/get";, +, +    private GetCategoriesAction() {, +        super(NAME);, +    }, +, +    @Override, +    public RequestBuilder newRequestBuilder(ElasticsearchClient client) {, +        return new RequestBuilder(client, this);, +    }, +, +    @Override, +    public Response newResponse() {, +        return new Response();, +    }, +, +    public static class Request extends ActionRequest implements ToXContent {, +, +        public static final ParseField CATEGORY_ID = new ParseField("category_id");, +        public static final ParseField FROM = new ParseField("from");, +        public static final ParseField SIZE = new ParseField("size");, +, +        private static final ObjectParser<Request, Void> PARSER = new ObjectParser<>(NAME, Request::new);, +, +        static {, +            PARSER.declareString((request, jobId) -> request.jobId = jobId, Job.ID);, +            PARSER.declareString(Request::setCategoryId, CATEGORY_ID);, +            PARSER.declareObject(Request::setPageParams, PageParams.PARSER, PageParams.PAGE);, +        }, +, +        public static Request parseRequest(String jobId, XContentParser parser) {, +            Request request = PARSER.apply(parser, null);, +            if (jobId != null) {, +                request.jobId = jobId;, +            }, +            return request;, +        }, +, +        private String jobId;, +        private String categoryId;, +        private PageParams pageParams;, +, +        public Request(String jobId) {, +            this.jobId = ExceptionsHelper.requireNonNull(jobId, Job.ID.getPreferredName());]