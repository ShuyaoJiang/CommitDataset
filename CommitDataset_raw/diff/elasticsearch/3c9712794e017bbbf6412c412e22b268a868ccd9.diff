[+++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java, +        assertEquals("\"responses\"[{\"error\":{\"root_cause\":[{\"type\":\"illegal_state_exception\",\"reason\":\"foobar\"}],\"type\":\"illegal_state_exception\",\"reason\":\"foobar\"},\"status\":500},{\"error\":{\"root_cause\":[{\"type\":\"illegal_state_exception\",\"reason\":\"baaaaaazzzz\"}],\"type\":\"illegal_state_exception\",\"reason\":\"baaaaaazzzz\"},\"status\":500}]",, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java, +        assertEquals("\"responses\"[{\"error\":{\"root_cause\":[{\"type\":\"illegal_state_exception\",\"reason\":\"foobar\"}],\"type\":\"illegal_state_exception\",\"reason\":\"foobar\"},\"status\":500},{\"error\":{\"root_cause\":[{\"type\":\"illegal_state_exception\",\"reason\":\"baaaaaazzzz\"}],\"type\":\"illegal_state_exception\",\"reason\":\"baaaaaazzzz\"},\"status\":500}]",, +++ b/docs/reference/search/multi-search.asciidoc, +response and status code for each search request matching its order in, +the original multi search request. If there was a complete failure for that, +specific search request, an object with `error` message and corresponding, +status code will be returned in place of the actual search response., +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchResponse.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.rest.RestStatus;, +                builder.field(Fields.STATUS, ExceptionsHelper.status(item.getFailure()).getStatus());, +                builder.field(Fields.STATUS, item.getResponse().status().getStatus());, +        static final String STATUS = "status";, +++ b/core/src/test/java/org/elasticsearch/action/search/MultiSearchRequestTests.java, +        assertEquals("\"responses\"[{\"error\":{\"root_cause\":[{\"type\":\"illegal_state_exception\",\"reason\":\"foobar\"}],\"type\":\"illegal_state_exception\",\"reason\":\"foobar\"},\"status\":500},{\"error\":{\"root_cause\":[{\"type\":\"illegal_state_exception\",\"reason\":\"baaaaaazzzz\"}],\"type\":\"illegal_state_exception\",\"reason\":\"baaaaaazzzz\"},\"status\":500}]",, +++ b/docs/reference/search/multi-search.asciidoc, +response and status code for each search request matching its order in, +the original multi search request. If there was a complete failure for that, +specific search request, an object with `error` message and corresponding, +status code will be returned in place of the actual search response., +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/msearch/11_status.yaml, +---, +setup:, +  - do:, +      indices.create:, +        index: test_1, +, +---, +"Check Status":, +  - do:, +      msearch:, +        body:, +          - index: test_2, +          - query:, +              match_all: {}, +          - index: test_1, +          - query:, +              match_all: {}, +, +  - match: { responses.0.status: 404 }, +  - match: { responses.1.status: 200 }]