[+++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        failIfOverShardCountLimit(clusterService, shardCount);, +        expectedSuccessfulOps = shardCount;, +        // we need to add 1 for non active partition, since we count it in the total!, +        expectedTotalOps = shardsIts.totalSizeWith1ForEmpty();, +, +        firstResults = new AtomicArray<>(shardsIts.size());, +    }, +, +    private void failIfOverShardCountLimit(ClusterService clusterService, int shardCount) {, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        failIfOverShardCountLimit(clusterService, shardCount);, +        expectedSuccessfulOps = shardCount;, +        // we need to add 1 for non active partition, since we count it in the total!, +        expectedTotalOps = shardsIts.totalSizeWith1ForEmpty();, +, +        firstResults = new AtomicArray<>(shardsIts.size());, +    }, +, +    private void failIfOverShardCountLimit(ClusterService clusterService, int shardCount) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder setNoStoredFields() {, +        sourceBuilder().noStoredFields();, +    /**, +     * Adds a docvalue based field to load and return. The field does not have to be stored,, +     * but its recommended to use non analyzed or numeric fields., +     *, +     * @param name The field to get from the docvalue, +     */, +    public SearchRequestBuilder addDocValueField(String name) {, +        sourceBuilder().docValueField(name);, +        return this;, +    }, +     * Adds a stored field to load and return (note, it must be stored) as part of the search request., +    public SearchRequestBuilder addStoredField(String field) {, +        sourceBuilder().storedField(field);, +     * @deprecated Use {@link SearchRequestBuilder#addDocValueField(String)} instead., +    @Deprecated, +        sourceBuilder().docValueField(name);, +, +     * Sets the stored fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +     *, +     * @deprecated Use {@link SearchRequestBuilder#storedFields(String...)} instead., +     */, +    @Deprecated, +    public SearchRequestBuilder fields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +        return this;, +    }, +, +    /**, +    public SearchRequestBuilder storedFields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +++ b/core/src/main/java/org/elasticsearch/action/search/AbstractSearchAsyncAction.java, +        failIfOverShardCountLimit(clusterService, shardCount);, +        expectedSuccessfulOps = shardCount;, +        // we need to add 1 for non active partition, since we count it in the total!, +        expectedTotalOps = shardsIts.totalSizeWith1ForEmpty();, +, +        firstResults = new AtomicArray<>(shardsIts.size());, +    }, +, +    private void failIfOverShardCountLimit(ClusterService clusterService, int shardCount) {, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder setNoStoredFields() {, +        sourceBuilder().noStoredFields();, +    /**, +     * Adds a docvalue based field to load and return. The field does not have to be stored,, +     * but its recommended to use non analyzed or numeric fields., +     *, +     * @param name The field to get from the docvalue, +     */, +    public SearchRequestBuilder addDocValueField(String name) {, +        sourceBuilder().docValueField(name);, +        return this;, +    }, +     * Adds a stored field to load and return (note, it must be stored) as part of the search request., +    public SearchRequestBuilder addStoredField(String field) {, +        sourceBuilder().storedField(field);, +     * @deprecated Use {@link SearchRequestBuilder#addDocValueField(String)} instead., +    @Deprecated, +        sourceBuilder().docValueField(name);, +, +     * Sets the stored fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +     *, +     * @deprecated Use {@link SearchRequestBuilder#storedFields(String...)} instead., +     */, +    @Deprecated, +    public SearchRequestBuilder fields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +        return this;, +    }, +, +    /**, +    public SearchRequestBuilder storedFields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +        searchAsyncAction(searchRequest, listener).start();]