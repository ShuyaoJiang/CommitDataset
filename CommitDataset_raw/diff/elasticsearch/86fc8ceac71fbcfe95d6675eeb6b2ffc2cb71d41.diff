[+++ b/src/main/java/org/elasticsearch/bootstrap/Security.java, +import java.net.URI;, +import java.security.Permission;, +import java.security.PermissionCollection;, +import java.security.Permissions;, +import java.security.Policy;, +import java.security.ProtectionDomain;, +import java.security.URIParameter;, +    static void configure(Environment environment) throws Exception {, +        // init lucene random seed. it will use /dev/urandom where available:, +, +        // enable security policy: union of template and environment-based paths., +        URI template = Security.class.getResource(POLICY_RESOURCE).toURI();, +        Policy.setPolicy(new ESPolicy(template, createPermissions(environment)));, +, +        // enable security manager, +, +        // do some basic tests, +        selfTest();, +    /** returns dynamic Permissions to configured paths */, +    static Permissions createPermissions(Environment environment) throws IOException {, +        Permissions policy = new Permissions();, +        addPath(policy, environment.homeFile(), "read,readlink,write,delete");, +        addPath(policy, environment.configFile(), "read,readlink,write,delete");, +        addPath(policy, environment.logsFile(), "read,readlink,write,delete");, +        addPath(policy, environment.pluginsFile(), "read,readlink,write,delete");, +            addPath(policy, path, "read,readlink,write,delete");, +            addPath(policy, path, "read,readlink,write,delete");, +        return policy;, +    /** Add access to path (and all files underneath it */, +    static void addPath(Permissions policy, Path path, String permissions) throws IOException {, +        policy.add(new FilePermission(path.toString(), permissions));, +        policy.add(new FilePermission(path.toString() + path.getFileSystem().getSeparator() + "-", permissions));, +    /** Simple checks that everything is ok */, +    static void selfTest() {, +        // check we can manipulate temporary files, +        try {, +            Files.delete(Files.createTempFile(null, null));, +        } catch (IOException ignored) {, +            // potentially virus scanner, +        } catch (SecurityException problem) {, +            throw new SecurityException("Security misconfiguration: cannot access java.io.tmpdir", problem);, +        }, +    }, +, +    /** custom policy for union of static and dynamic permissions */, +    static class ESPolicy extends Policy {, +        final Policy template;, +        final PermissionCollection dynamic;, +, +        ESPolicy(URI template, PermissionCollection dynamic) throws Exception {, +            this.template = Policy.getInstance("JavaPolicy", new URIParameter(template));, +            this.dynamic = dynamic;, +        }, +, +        @Override, +        public boolean implies(ProtectionDomain domain, Permission permission) {, +            return template.implies(domain, permission) || dynamic.implies(permission);, +        }, +++ b/src/main/java/org/elasticsearch/bootstrap/Security.java, +import java.net.URI;, +import java.security.Permission;, +import java.security.PermissionCollection;, +import java.security.Permissions;, +import java.security.Policy;, +import java.security.ProtectionDomain;, +import java.security.URIParameter;, +    static void configure(Environment environment) throws Exception {, +        // init lucene random seed. it will use /dev/urandom where available:, +, +        // enable security policy: union of template and environment-based paths., +        URI template = Security.class.getResource(POLICY_RESOURCE).toURI();, +        Policy.setPolicy(new ESPolicy(template, createPermissions(environment)));, +, +        // enable security manager, +, +        // do some basic tests, +        selfTest();, +    /** returns dynamic Permissions to configured paths */, +    static Permissions createPermissions(Environment environment) throws IOException {, +        Permissions policy = new Permissions();, +        addPath(policy, environment.homeFile(), "read,readlink,write,delete");, +        addPath(policy, environment.configFile(), "read,readlink,write,delete");, +        addPath(policy, environment.logsFile(), "read,readlink,write,delete");, +        addPath(policy, environment.pluginsFile(), "read,readlink,write,delete");, +            addPath(policy, path, "read,readlink,write,delete");, +            addPath(policy, path, "read,readlink,write,delete");, +        return policy;, +    /** Add access to path (and all files underneath it */, +    static void addPath(Permissions policy, Path path, String permissions) throws IOException {, +        policy.add(new FilePermission(path.toString(), permissions));, +        policy.add(new FilePermission(path.toString() + path.getFileSystem().getSeparator() + "-", permissions));, +    /** Simple checks that everything is ok */, +    static void selfTest() {, +        // check we can manipulate temporary files, +        try {, +            Files.delete(Files.createTempFile(null, null));, +        } catch (IOException ignored) {, +            // potentially virus scanner, +        } catch (SecurityException problem) {]