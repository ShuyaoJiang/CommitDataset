[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/search/geo/GeoBoundingBoxFilter.java, +            return new LeftGeoBoundingBoxDocSet(reader.maxDoc(), fieldData, topLeft, bottomRight);, +        } else {, +            return new RightGeoBoundingBoxDocSet(reader.maxDoc(), fieldData, topLeft, bottomRight);, +        }, +    }, +, +    public static class LeftGeoBoundingBoxDocSet extends GetDocSet {, +        private final GeoPointFieldData fieldData;, +        private final Point topLeft;, +        private final Point bottomRight;, +, +        public LeftGeoBoundingBoxDocSet(int maxDoc, GeoPointFieldData fieldData, Point topLeft, Point bottomRight) {, +            super(maxDoc);, +            this.fieldData = fieldData;, +            this.topLeft = topLeft;, +            this.bottomRight = bottomRight;, +        }, +    }, +, +    public static class RightGeoBoundingBoxDocSet extends GetDocSet {, +        private final GeoPointFieldData fieldData;, +        private final Point topLeft;, +        private final Point bottomRight;, +, +        public RightGeoBoundingBoxDocSet(int maxDoc, GeoPointFieldData fieldData, Point topLeft, Point bottomRight) {, +            super(maxDoc);, +            this.fieldData = fieldData;, +            this.topLeft = topLeft;, +            this.bottomRight = bottomRight;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/search/geo/GeoBoundingBoxFilter.java, +            return new LeftGeoBoundingBoxDocSet(reader.maxDoc(), fieldData, topLeft, bottomRight);, +        } else {, +            return new RightGeoBoundingBoxDocSet(reader.maxDoc(), fieldData, topLeft, bottomRight);, +        }, +    }, +, +    public static class LeftGeoBoundingBoxDocSet extends GetDocSet {, +        private final GeoPointFieldData fieldData;, +        private final Point topLeft;, +        private final Point bottomRight;, +, +        public LeftGeoBoundingBoxDocSet(int maxDoc, GeoPointFieldData fieldData, Point topLeft, Point bottomRight) {, +            super(maxDoc);, +            this.fieldData = fieldData;, +            this.topLeft = topLeft;, +            this.bottomRight = bottomRight;, +        }, +    }, +, +    public static class RightGeoBoundingBoxDocSet extends GetDocSet {, +        private final GeoPointFieldData fieldData;, +        private final Point topLeft;, +        private final Point bottomRight;, +, +        public RightGeoBoundingBoxDocSet(int maxDoc, GeoPointFieldData fieldData, Point topLeft, Point bottomRight) {, +            super(maxDoc);, +            this.fieldData = fieldData;, +            this.topLeft = topLeft;, +            this.bottomRight = bottomRight;, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/search/geo/GeoDistanceFilter.java, +        return new GeoDistanceDocSet(reader.maxDoc(), geoDistance, fieldData, lat, lon, distance);, +, +    public static class GeoDistanceDocSet extends GetDocSet {, +        private final GeoDistance geoDistance;, +        private final GeoPointFieldData fieldData;, +        private final double lat;, +        private final double lon;, +        private final double distance;, +, +        public GeoDistanceDocSet(int maxDoc, GeoDistance geoDistance, GeoPointFieldData fieldData, double lat, double lon, double distance) {, +            super(maxDoc);, +            this.geoDistance = geoDistance;, +            this.fieldData = fieldData;, +            this.lat = lat;, +            this.lon = lon;, +            this.distance = distance;, +        }, +, +        @Override public boolean isCacheable() {, +            // not cacheable for several reasons:, +            // 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset, +            // 2. Its already fast without in mem bitset, since it works with field data, +            return false;, +        }, +, +        @Override public boolean get(int doc) throws IOException {, +            if (!fieldData.hasValue(doc)) {, +                return false;, +            }, +, +            if (fieldData.multiValued()) {, +                double[] lats = fieldData.latValues(doc);, +                double[] lons = fieldData.lonValues(doc);, +                for (int i = 0; i < lats.length; i++) {, +                    double d = geoDistance.calculate(lat, lon, lats[i], lons[i], DistanceUnit.MILES);, +                    if (d < distance) {, +                        return true;]