[+++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            return exists(secondary) ? get(secondary) : get(primary);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            return exists(secondary) ? get(secondary) : get(primary);, +++ b/core/src/main/java/org/elasticsearch/index/MergeSchedulerConfig.java, +        int maxThread = indexSettings.getValue(MAX_THREAD_COUNT_SETTING);, +        int maxMerge = indexSettings.getValue(MAX_MERGE_COUNT_SETTING);, +        setMaxThreadAndMergeCount(maxThread, maxMerge);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +            return exists(secondary) ? get(secondary) : get(primary);, +++ b/core/src/main/java/org/elasticsearch/index/MergeSchedulerConfig.java, +        int maxThread = indexSettings.getValue(MAX_THREAD_COUNT_SETTING);, +        int maxMerge = indexSettings.getValue(MAX_MERGE_COUNT_SETTING);, +        setMaxThreadAndMergeCount(maxThread, maxMerge);, +++ b/core/src/test/java/org/elasticsearch/index/MergeSchedulerSettingsTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index;, +, +import org.apache.logging.log4j.Level;, +import org.apache.logging.log4j.Logger;, +import org.apache.logging.log4j.core.LogEvent;, +import org.apache.logging.log4j.core.appender.AbstractAppender;, +import org.apache.logging.log4j.core.filter.RegexFilter;, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.ESTestCase;, +, +import static org.elasticsearch.common.util.concurrent.EsExecutors.PROCESSORS_SETTING;, +import static org.elasticsearch.index.IndexSettingsTests.newIndexMeta;, +import static org.elasticsearch.index.MergeSchedulerConfig.MAX_MERGE_COUNT_SETTING;, +import static org.elasticsearch.index.MergeSchedulerConfig.MAX_THREAD_COUNT_SETTING;, +import static org.hamcrest.core.StringContains.containsString;, +, +public class MergeSchedulerSettingsTests extends ESTestCase {, +    private static class MockAppender extends AbstractAppender {, +        public boolean sawUpdateMaxThreadCount;, +        public boolean sawUpdateAutoThrottle;, +, +        MockAppender(final String name) throws IllegalAccessException {, +            super(name, RegexFilter.createFilter(".*(\n.*)*", new String[0], false, null, null), null);, +        }, +, +        @Override, +        public void append(LogEvent event) {, +            String message = event.getMessage().getFormattedMessage();, +            if (event.getLevel() == Level.TRACE && event.getLoggerName().endsWith("lucene.iw")) {, +            }, +            if (event.getLevel() == Level.INFO, +                && message.contains("updating [index.merge.scheduler.max_thread_count] from [10000] to [1]")) {, +                sawUpdateMaxThreadCount = true;, +            }, +            if (event.getLevel() == Level.INFO, +                && message.contains("updating [index.merge.scheduler.auto_throttle] from [true] to [false]")) {, +                sawUpdateAutoThrottle = true;, +            }, +        }, +, +        @Override, +        public boolean ignoreExceptions() {, +            return false;, +        }, +, +    }, +, +    public void testUpdateAutoThrottleSettings() throws Exception {, +        MockAppender mockAppender = new MockAppender("testUpdateAutoThrottleSettings");, +        mockAppender.start();, +        final Logger settingsLogger = Loggers.getLogger("org.elasticsearch.common.settings.IndexScopedSettings");, +        Loggers.addAppender(settingsLogger, mockAppender);, +        Loggers.setLevel(settingsLogger, Level.TRACE);, +        try {, +            Settings.Builder builder = Settings.builder(), +                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "1"), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0"), +                .put(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING.getKey(), "2"), +                .put(MergePolicyConfig.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING.getKey(), "2"), +                .put(MergeSchedulerConfig.MAX_THREAD_COUNT_SETTING.getKey(), "1"), +                .put(MergeSchedulerConfig.MAX_MERGE_COUNT_SETTING.getKey(), "2"), +                .put(MergeSchedulerConfig.AUTO_THROTTLE_SETTING.getKey(), "true");]