[+++ b/x-pack/plugin/sql/qa/src/main/resources/filter.sql-spec, +whereFieldWithLikeAndNotLike, +SELECT COUNT(*), last_name AS f FROM test_emp WHERE last_name LIKE '%o%' AND last_name NOT LIKE '%f%' GROUP BY f HAVING COUNT(*) > 1;, +, +++ b/x-pack/plugin/sql/qa/src/main/resources/filter.sql-spec, +whereFieldWithLikeAndNotLike, +SELECT COUNT(*), last_name AS f FROM test_emp WHERE last_name LIKE '%o%' AND last_name NOT LIKE '%f%' GROUP BY f HAVING COUNT(*) > 1;, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.expression.predicate.regex.Like;, +                        // TODO: we should move to always compare the functions directly, +                        // Same for LIKE: the equals function also compares the pattern of LIKE, +                        if (seenFunction instanceof Count || seenFunction instanceof Like) {, +++ b/x-pack/plugin/sql/qa/src/main/resources/filter.sql-spec, +whereFieldWithLikeAndNotLike, +SELECT COUNT(*), last_name AS f FROM test_emp WHERE last_name LIKE '%o%' AND last_name NOT LIKE '%f%' GROUP BY f HAVING COUNT(*) > 1;, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.expression.predicate.regex.Like;, +                        // TODO: we should move to always compare the functions directly, +                        // Same for LIKE: the equals function also compares the pattern of LIKE, +                        if (seenFunction instanceof Count || seenFunction instanceof Like) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/regex/Like.java, +import org.elasticsearch.xpack.sql.tree.Source;, +, +import java.util.Objects;, +, +    @Override, +    public boolean equals(Object obj) {, +        return super.equals(obj) && Objects.equals(((Like) obj).pattern(), pattern());, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(super.hashCode(), pattern());, +    }, +++ b/x-pack/plugin/sql/qa/src/main/resources/filter.sql-spec, +whereFieldWithLikeAndNotLike, +SELECT COUNT(*), last_name AS f FROM test_emp WHERE last_name LIKE '%o%' AND last_name NOT LIKE '%f%' GROUP BY f HAVING COUNT(*) > 1;, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.expression.predicate.regex.Like;, +                        // TODO: we should move to always compare the functions directly, +                        // Same for LIKE: the equals function also compares the pattern of LIKE, +                        if (seenFunction instanceof Count || seenFunction instanceof Like) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/regex/Like.java, +import org.elasticsearch.xpack.sql.tree.Source;, +, +import java.util.Objects;, +, +    @Override, +    public boolean equals(Object obj) {, +        return super.equals(obj) && Objects.equals(((Like) obj).pattern(), pattern());, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(super.hashCode(), pattern());, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/query/BoolQuery.java, +    public boolean isAnd() {, +    public Query left() {, +    public Query right() {, +++ b/x-pack/plugin/sql/qa/src/main/resources/filter.sql-spec, +whereFieldWithLikeAndNotLike, +SELECT COUNT(*), last_name AS f FROM test_emp WHERE last_name LIKE '%o%' AND last_name NOT LIKE '%f%' GROUP BY f HAVING COUNT(*) > 1;, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.expression.predicate.regex.Like;, +                        // TODO: we should move to always compare the functions directly, +                        // Same for LIKE: the equals function also compares the pattern of LIKE, +                        if (seenFunction instanceof Count || seenFunction instanceof Like) {, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/regex/Like.java, +import org.elasticsearch.xpack.sql.tree.Source;, +, +import java.util.Objects;, +, +    @Override, +    public boolean equals(Object obj) {, +        return super.equals(obj) && Objects.equals(((Like) obj).pattern(), pattern());, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(super.hashCode(), pattern());, +    }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/query/BoolQuery.java, +    public boolean isAnd() {, +    public Query left() {, +    public Query right() {, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import org.elasticsearch.xpack.sql.querydsl.query.BoolQuery;, +    public void testDifferentLikeAndNotLikePatterns() {, +        LogicalPlan p = plan("SELECT keyword k FROM test WHERE k LIKE 'X%' AND k NOT LIKE 'Y%'");, +        assertTrue(p instanceof Project);, +        p = ((Project) p).child();, +        assertTrue(p instanceof Filter);, +        , +        Expression condition = ((Filter) p).condition();, +        QueryTranslation qt = QueryTranslator.toQuery(condition, false);]