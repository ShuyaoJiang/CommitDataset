[+++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java, +import org.elasticsearch.common.BytesHolder;, +    private BytesHolder content;, +    RecoveryFileChunkRequest(ShardId shardId, String name, long position, long length, String checksum, BytesHolder content) {, +    public BytesHolder content() {, +        content = in.readBytesReference();, +        out.writeBytesHolder(content);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java, +import org.elasticsearch.common.BytesHolder;, +    private BytesHolder content;, +    RecoveryFileChunkRequest(ShardId shardId, String name, long position, long length, String checksum, BytesHolder content) {, +    public BytesHolder content() {, +        content = in.readBytesReference();, +        out.writeBytesHolder(content);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySource.java, +import org.elasticsearch.common.BytesHolder;, +                                        BytesHolder content = new BytesHolder(buf, 0, toRead);, +                                        transportService.submitRequest(request.targetNode(), RecoveryTarget.Actions.FILE_CHUNK, new RecoveryFileChunkRequest(request.shardId(), name, position, len, md.checksum(), content),, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java, +import org.elasticsearch.common.BytesHolder;, +    private BytesHolder content;, +    RecoveryFileChunkRequest(ShardId shardId, String name, long position, long length, String checksum, BytesHolder content) {, +    public BytesHolder content() {, +        content = in.readBytesReference();, +        out.writeBytesHolder(content);, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoverySource.java, +import org.elasticsearch.common.BytesHolder;, +                                        BytesHolder content = new BytesHolder(buf, 0, toRead);, +                                        transportService.submitRequest(request.targetNode(), RecoveryTarget.Actions.FILE_CHUNK, new RecoveryFileChunkRequest(request.shardId(), name, position, len, md.checksum(), content),, +++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +                        recoverySettings.rateLimiter().pause(request.content().length());, +                    indexOutput.writeBytes(request.content().bytes(), request.content().offset(), request.content().length());, +                    onGoingRecovery.currentFilesSize.addAndGet(request.length());]