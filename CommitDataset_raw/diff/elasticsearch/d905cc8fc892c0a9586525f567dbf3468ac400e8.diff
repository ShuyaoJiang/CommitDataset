[+++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +            } else {, +        }, +++ b/client/rest/src/main/java/org/elasticsearch/client/Response.java, +            } else {, +        }, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientSingleHostTests.java, +import java.util.List;, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.junit.Assert.assertFalse;, +    private boolean strictDeprecationMode;, +        strictDeprecationMode = randomBoolean();, +                singletonList(node), null, failureListener, NodeSelector.ANY, strictDeprecationMode);, +            assertFalse(esResponse.hasWarnings());, +    public void testDeprecationWarnings() throws IOException {, +        String chars = randomAsciiAlphanumOfLength(5);, +        assertDeprecationWarnings(singletonList("poorly formatted " + chars), singletonList("poorly formatted " + chars));, +        assertDeprecationWarnings(singletonList(formatWarning(chars)), singletonList(chars));, +        assertDeprecationWarnings(, +                Arrays.asList(formatWarning(chars), "another one", "and another"),, +                Arrays.asList(chars,                "another one", "and another"));, +, +    }, +, +    private void assertDeprecationWarnings(List<String> warningHeaderTexts, List<String> warningBodyTexts) throws IOException {, +        String method = randomFrom(getHttpMethods());, +        Request request = new Request(method, "/200");, +        RequestOptions.Builder options = request.getOptions().toBuilder();, +        for (String warningHeaderText : warningHeaderTexts) {, +            options.addHeader("Warning", warningHeaderText);, +        }, +        request.setOptions(options);, +, +        Response response;, +        if (strictDeprecationMode) {, +            try {, +                restClient.performRequest(request);, +                fail("expected ResponseException because strict deprecation mode is enabled");, +                return;, +            } catch (ResponseException e) {, +                assertThat(e.getMessage(), containsString("\nWarnings: " + warningBodyTexts));, +                response = e.getResponse();, +            }, +        } else {, +            response = restClient.performRequest(request);, +        }, +        assertTrue(response.hasWarnings());, +        assertEquals(warningBodyTexts, response.getWarnings());, +    }, +, +    /**, +     * Emulates Elasticsearch's DeprecationLogger.formatWarning in simple, +     * cases. We don't have that available because we're testing against 1.7., +     */, +    private static String formatWarning(String warningBody) {, +        return "299 Elasticsearch-1.2.2-SNAPSHOT-eeeeeee \"" + warningBody + "\" \"Mon, 01 Jan 2001 00:00:00 GMT\"";, +    }, +]