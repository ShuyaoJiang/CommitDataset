[+++ b/src/main/java/org/elasticsearch/shield/signature/tool/SystemKeyTool.java, +import org.elasticsearch.common.collect.Sets;, +import java.nio.file.attribute.PosixFileAttributeView;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.Set;, +    public static final Set<PosixFilePermission> PERMISSION_OWNER_READ_WRITE = Sets.newHashSet(PosixFilePermission.OWNER_READ,, +        PosixFilePermission.OWNER_WRITE);, +, +, +, +            boolean supportsPosixPermissions = Files.getFileStore(path).supportsFileAttributeView(PosixFileAttributeView.class);, +            if (supportsPosixPermissions) {, +                Files.setPosixFilePermissions(path, PERMISSION_OWNER_READ_WRITE);, +                terminal.println("Ensure the generated key can be read by the user that Elasticsearch runs as, permissions are set to owner read/write only");, +            }, +, +++ b/src/main/java/org/elasticsearch/shield/signature/tool/SystemKeyTool.java, +import org.elasticsearch.common.collect.Sets;, +import java.nio.file.attribute.PosixFileAttributeView;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.Set;, +    public static final Set<PosixFilePermission> PERMISSION_OWNER_READ_WRITE = Sets.newHashSet(PosixFilePermission.OWNER_READ,, +        PosixFilePermission.OWNER_WRITE);, +, +, +, +            boolean supportsPosixPermissions = Files.getFileStore(path).supportsFileAttributeView(PosixFileAttributeView.class);, +            if (supportsPosixPermissions) {, +                Files.setPosixFilePermissions(path, PERMISSION_OWNER_READ_WRITE);, +                terminal.println("Ensure the generated key can be read by the user that Elasticsearch runs as, permissions are set to owner read/write only");, +            }, +, +++ b/src/test/java/org/elasticsearch/shield/signature/tool/SystemKeyToolTests.java, +import org.elasticsearch.shield.signature.InternalSignatureService;, +import java.nio.file.attribute.PosixFileAttributeView;, +import java.nio.file.attribute.PosixFilePermission;, +import java.util.Set;, +, +    @Test, +    public void testThatSystemKeyMayOnlyBeReadByOwner() throws Exception {, +        File config = newTempDir();, +        File shieldConfig = new File(config, ShieldPlugin.NAME);, +        shieldConfig.mkdirs();, +        Path path = new File(shieldConfig, "system_key").toPath();, +, +        // no posix file permissions, nothing to test, done here, +        boolean supportsPosixPermissions = Files.getFileStore(shieldConfig.toPath()).supportsFileAttributeView(PosixFileAttributeView.class);, +        assumeTrue("Ignoring because posix file attributes are not supported", supportsPosixPermissions);, +, +        when(env.configFile()).thenReturn(config);, +        Generate generate = new Generate(terminal, null);, +        CliTool.ExitStatus status = generate.execute(ImmutableSettings.EMPTY, env);, +        assertThat(status, is(CliTool.ExitStatus.OK));, +, +        Set<PosixFilePermission> posixFilePermissions = Files.getPosixFilePermissions(path);, +        assertThat(posixFilePermissions, hasSize(2));, +        assertThat(posixFilePermissions, containsInAnyOrder(PosixFilePermission.OWNER_READ, PosixFilePermission.OWNER_WRITE));, +    }]