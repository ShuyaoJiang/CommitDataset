[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/action/admin/indices/template/delete/RestDeleteIndexTemplateAction.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest.action.admin.indices.template.delete;, +, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.indices.template.delete.DeleteIndexTemplateRequest;, +import org.elasticsearch.action.admin.indices.template.delete.DeleteIndexTemplateResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentBuilderString;, +import org.elasticsearch.indices.IndexTemplateMissingException;, +import org.elasticsearch.rest.*;, +import org.elasticsearch.rest.action.support.RestXContentBuilder;, +, +import java.io.IOException;, +, +import static org.elasticsearch.ExceptionsHelper.*;, +import static org.elasticsearch.common.unit.TimeValue.*;, +import static org.elasticsearch.rest.RestResponse.Status.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class RestDeleteIndexTemplateAction extends BaseRestHandler {, +, +    @Inject public RestDeleteIndexTemplateAction(Settings settings, Client client, RestController controller) {, +        super(settings, client);, +        controller.registerHandler(RestRequest.Method.DELETE, "/_template/{name}", this);, +    }, +, +    @Override public void handleRequest(final RestRequest request, final RestChannel channel) {, +        DeleteIndexTemplateRequest deleteIndexTemplateRequest = new DeleteIndexTemplateRequest(request.param("name"));, +        deleteIndexTemplateRequest.timeout(request.paramAsTime("timeout", timeValueSeconds(10)));, +        client.admin().indices().deleteTemplate(deleteIndexTemplateRequest, new ActionListener<DeleteIndexTemplateResponse>() {, +            @Override public void onResponse(DeleteIndexTemplateResponse response) {, +                try {, +                    XContentBuilder builder = RestXContentBuilder.restContentBuilder(request);, +                    builder.startObject(), +                            .field(Fields.OK, true), +                            .field(Fields.ACKNOWLEDGED, response.acknowledged()), +                            .endObject();, +                    channel.sendResponse(new XContentRestResponse(request, OK, builder));, +                } catch (IOException e) {, +                    onFailure(e);, +                }, +            }, +, +            @Override public void onFailure(Throwable e) {, +                try {, +                    Throwable t = unwrapCause(e);, +                    if (t instanceof IndexTemplateMissingException) {, +                        XContentBuilder builder = RestXContentBuilder.restContentBuilder(request);, +                        channel.sendResponse(new XContentRestResponse(request, BAD_REQUEST, builder.startObject().field("error", t.getMessage()).endObject()));, +                    } else {, +                        channel.sendResponse(new XContentThrowableRestResponse(request, e));, +                    }, +                } catch (IOException e1) {, +                    logger.error("Failed to send failure response", e1);, +                }, +            }, +        });, +    }, +, +    static final class Fields {, +        static final XContentBuilderString OK = new XContentBuilderString("ok");, +        static final XContentBuilderString ACKNOWLEDGED = new XContentBuilderString("acknowledged");, +    }, +}]