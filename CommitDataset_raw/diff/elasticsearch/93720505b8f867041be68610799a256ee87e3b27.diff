[+++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/build.gradle, +  testCompile "org.elasticsearch:mocksocket:${versions.mocksocket}", +run {, +  setting 'xpack.graph.enabled', 'true', +  setting 'xpack.security.enabled', 'true', +  setting 'xpack.monitoring.enabled', 'true', +  setting 'xpack.watcher.enabled', 'true', +}, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/build.gradle, +  testCompile "org.elasticsearch:mocksocket:${versions.mocksocket}", +run {, +  setting 'xpack.graph.enabled', 'true', +  setting 'xpack.security.enabled', 'true', +  setting 'xpack.monitoring.enabled', 'true', +  setting 'xpack.watcher.enabled', 'true', +}, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public class License implements ToXContentObject {, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/build.gradle, +  testCompile "org.elasticsearch:mocksocket:${versions.mocksocket}", +run {, +  setting 'xpack.graph.enabled', 'true', +  setting 'xpack.security.enabled', 'true', +  setting 'xpack.monitoring.enabled', 'true', +  setting 'xpack.watcher.enabled', 'true', +}, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public class License implements ToXContentObject {, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/LicensesMetaData.java, +import org.elasticsearch.cluster.AbstractNamedDiffable;, +import org.elasticsearch.cluster.NamedDiff;, +class LicensesMetaData extends AbstractNamedDiffable<MetaData.Custom> implements MetaData.Custom,, +    public String getWriteableName() {, +    public static LicensesMetaData fromXContent(XContentParser parser) throws IOException {, +    public LicensesMetaData(StreamInput streamInput) throws IOException {, +        } else {, +            license = LICENSE_TOMBSTONE;, +    }, +, +    public static NamedDiff<MetaData.Custom> readDiffFrom(StreamInput streamInput) throws IOException {, +        return readDiffFrom(MetaData.Custom.class, TYPE, streamInput);, +++ b/README.asciidoc, +- If you don't work on the UI/Logstash side of x-plugins, you can force gradle to skip building kibana and/or Logstash by adding, +  `xpack.kibana.build=false`/`xpack.logstash.build=false` to your `~/.gradle/gradle.properties`. Alternatively you add `-Pxpack.kibana.build=false` or `-Pxpack.logstash.build=false`, +++ b/build.gradle, +  onlyIf { project('logstash').bundlePlugin.enabled }, +  dependsOn 'logstash:bundlePlugin', +  from { zipTree(project('logstash').bundlePlugin.outputs.files.singleFile) }, +++ b/elasticsearch/build.gradle, +  testCompile "org.elasticsearch:mocksocket:${versions.mocksocket}", +run {, +  setting 'xpack.graph.enabled', 'true', +  setting 'xpack.security.enabled', 'true', +  setting 'xpack.monitoring.enabled', 'true', +  setting 'xpack.watcher.enabled', 'true', +}, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/License.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +public class License implements ToXContentObject {, +++ b/elasticsearch/src/main/java/org/elasticsearch/license/LicensesMetaData.java, +import org.elasticsearch.cluster.AbstractNamedDiffable;, +import org.elasticsearch.cluster.NamedDiff;, +class LicensesMetaData extends AbstractNamedDiffable<MetaData.Custom> implements MetaData.Custom,, +    public String getWriteableName() {, +    public static LicensesMetaData fromXContent(XContentParser parser) throws IOException {, +    public LicensesMetaData(StreamInput streamInput) throws IOException {, +        } else {]