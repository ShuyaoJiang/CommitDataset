[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import org.elasticsearch.Version;, +                        checkManifest(manifest, path);, +    /** inspect manifest for sure incompatibilities */, +    static void checkManifest(Manifest manifest, Path jar) {, +        // give a nice error if jar requires a newer java version, +        String systemVersion = System.getProperty("java.specification.version");, +        String targetVersion = manifest.getMainAttributes().getValue("X-Compile-Target-JDK");, +        if (targetVersion != null) {, +            float current = Float.POSITIVE_INFINITY;, +            float target = Float.NEGATIVE_INFINITY;, +            try {, +                current = Float.parseFloat(systemVersion);, +                target = Float.parseFloat(targetVersion);, +            } catch (NumberFormatException e) {, +                // some spec changed, time for a more complex parser, +            }, +            if (current < target) {, +                throw new IllegalStateException(jar + " requires Java " + targetVersion, +                        + ", your system: " + systemVersion);, +            }, +        }, +, +        // give a nice error if jar is compiled against different es version, +        String systemESVersion = Version.CURRENT.toString();, +        String targetESVersion = manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");, +        if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {, +            throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion, +                    + ", your system: " + systemESVersion);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import org.elasticsearch.Version;, +                        checkManifest(manifest, path);, +    /** inspect manifest for sure incompatibilities */, +    static void checkManifest(Manifest manifest, Path jar) {, +        // give a nice error if jar requires a newer java version, +        String systemVersion = System.getProperty("java.specification.version");, +        String targetVersion = manifest.getMainAttributes().getValue("X-Compile-Target-JDK");, +        if (targetVersion != null) {, +            float current = Float.POSITIVE_INFINITY;, +            float target = Float.NEGATIVE_INFINITY;, +            try {, +                current = Float.parseFloat(systemVersion);, +                target = Float.parseFloat(targetVersion);, +            } catch (NumberFormatException e) {, +                // some spec changed, time for a more complex parser, +            }, +            if (current < target) {, +                throw new IllegalStateException(jar + " requires Java " + targetVersion, +                        + ", your system: " + systemVersion);, +            }, +        }, +, +        // give a nice error if jar is compiled against different es version, +        String systemESVersion = Version.CURRENT.toString();, +        String targetESVersion = manifest.getMainAttributes().getValue("X-Compile-Elasticsearch-Version");, +        if (targetESVersion != null && targetESVersion.equals(systemESVersion) == false) {, +            throw new IllegalStateException(jar + " requires Elasticsearch " + targetESVersion, +                    + ", your system: " + systemESVersion);, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +import org.elasticsearch.Version;, +        return dir.toUri().toURL();, +            fail("did not get expected exception");, +            fail("did not get expected exception");, +            fail("did not get expected exception");, +            fail("did not get expected exception");, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.8");, +            fail("did not get expected exception");, +            assertTrue(e.getMessage().contains("requires Java 1.8"));, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "1.7");, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Target-JDK"), "bogus");, +, +    /** make sure if a plugin is compiled against the same ES version, it works */, +    public void testGoodESVersionInJar() throws Exception {, +        Path dir = createTempDir();, +        Manifest manifest = new Manifest();, +        Attributes attributes = manifest.getMainAttributes();, +        attributes.put(Attributes.Name.MANIFEST_VERSION, "1.0.0");, +        attributes.put(new Attributes.Name("X-Compile-Elasticsearch-Version"), Version.CURRENT.toString());, +        URL[] jars = {makeJar(dir, "foo.jar", manifest, "Foo.class")};, +        JarHell.checkJarHell(jars);, +    }, +, +    /** make sure if a plugin is compiled against a different ES version, it fails */, +    public void testBadESVersionInJar() throws Exception {, +        Path dir = createTempDir();]