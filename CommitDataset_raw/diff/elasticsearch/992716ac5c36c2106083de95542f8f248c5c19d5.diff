[+++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +    public FieldMapper(String simpleName) {, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +     * */, +    public abstract boolean isGenerated();, +, +    /**, +     * Parse using the provided {@link ParseContext} and return a mapping, +     * update if dynamic mappings modified the mappings, or {@code null} if, +     * mappings were not modified., +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +    public FieldMapper(String simpleName) {, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +     * */, +    public abstract boolean isGenerated();, +, +    /**, +     * Parse using the provided {@link ParseContext} and return a mapping, +     * update if dynamic mappings modified the mappings, or {@code null} if, +     * mappings were not modified., +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +     * TODO: make this protected once Mapper, FieldMapper and AbstractFieldMapper are merged together */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +    public FieldMapper(String simpleName) {, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +     * */, +    public abstract boolean isGenerated();, +, +    /**, +     * Parse using the provided {@link ParseContext} and return a mapping, +     * update if dynamic mappings modified the mappings, or {@code null} if, +     * mappings were not modified., +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +     * TODO: make this protected once Mapper, FieldMapper and AbstractFieldMapper are merged together */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +public abstract class MetadataFieldMapper extends AbstractFieldMapper {, +    public abstract static class Builder<T extends Builder, Y extends MetadataFieldMapper> extends AbstractFieldMapper.Builder<T, Y> {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +    public FieldMapper(String simpleName) {, +    public abstract MappedFieldType fieldType();, +    public abstract MappedFieldTypeReference fieldTypeReference();, +    public abstract void setFieldTypeReference(MappedFieldTypeReference ref);, +    public abstract AbstractFieldMapper.CopyTo copyTo();, +     * */, +    public abstract boolean isGenerated();, +, +    /**, +     * Parse using the provided {@link ParseContext} and return a mapping, +     * update if dynamic mappings modified the mappings, or {@code null} if, +     * mappings were not modified., +    public abstract Mapper parse(ParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +     * TODO: make this protected once Mapper, FieldMapper and AbstractFieldMapper are merged together */, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MetadataFieldMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.mapper.core.AbstractFieldMapper;, +public abstract class MetadataFieldMapper extends AbstractFieldMapper {, +    public abstract static class Builder<T extends Builder, Y extends MetadataFieldMapper> extends AbstractFieldMapper.Builder<T, Y> {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.core;, +, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;]