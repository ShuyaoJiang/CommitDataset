[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +                // we handle this later..., +        // do the reverse, and delete dangling indices / shards that might remain on that node, +        // this can happen when deleting a closed index, or when a node joins and it has deleted indices / shards, +            // delete unused shards for existing indices, +            for (IndexRoutingTable indexRoutingTable : routingTable) {, +                IndexService indexService = indicesService.indexService(indexRoutingTable.index());, +                if (indexService != null) { // allocated, ignore this, +                    continue;, +                }, +                for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {, +                    boolean shardCanBeDeleted = true;, +                    for (ShardRouting shardRouting : indexShardRoutingTable) {, +                        // don't delete a shard that not all instances are active, +                        if (!shardRouting.active()) {, +                            shardCanBeDeleted = false;, +                            break;, +                        }, +                        String localNodeId = clusterService.localNode().id();, +                        // check if shard is active on the current node or is getting relocated to the our node, +                        if (localNodeId.equals(shardRouting.currentNodeId()) || localNodeId.equals(shardRouting.relocatingNodeId())) {, +                            // shard will be used locally - keep it, +                            shardCanBeDeleted = false;, +                            break;, +                        }, +                    }, +                    if (shardCanBeDeleted) {, +                        ShardId shardId = indexShardRoutingTable.shardId();, +                        logger.debug("[{}][{}] deleting shard that is no longer used", shardId.index().name(), shardId.id());, +                        FileSystemUtils.deleteRecursively(nodeEnv.shardLocation(shardId));, +                    }, +                }, +            }, +, +            // delete indices that are no longer part of the metadata]