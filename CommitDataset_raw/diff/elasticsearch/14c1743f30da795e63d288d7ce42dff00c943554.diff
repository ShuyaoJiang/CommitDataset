[+++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                    if (Regex.simpleMatch(field, fieldMapper.names().name())) {, +                        addFieldMapper(fieldMapper.names().name(), fieldMapper, fieldMappings, request.includeDefaults());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                    if (Regex.simpleMatch(field, fieldMapper.names().name())) {, +                        addFieldMapper(fieldMapper.names().name(), fieldMapper, fieldMappings, request.includeDefaults());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DisabledIndexFieldData.java, +        return new IllegalStateException("Field data loading is forbidden on " + getFieldNames().name());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                    if (Regex.simpleMatch(field, fieldMapper.names().name())) {, +                        addFieldMapper(fieldMapper.names().name(), fieldMapper, fieldMappings, request.includeDefaults());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DisabledIndexFieldData.java, +        return new IllegalStateException("Field data loading is forbidden on " + getFieldNames().name());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DocValuesIndexFieldData.java, +                throw new IllegalArgumentException("Doc values field data doesn't support filters [" + fieldNames.name() + "]");, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                    if (Regex.simpleMatch(field, fieldMapper.names().name())) {, +                        addFieldMapper(fieldMapper.names().name(), fieldMapper, fieldMappings, request.includeDefaults());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DisabledIndexFieldData.java, +        return new IllegalStateException("Field data loading is forbidden on " + getFieldNames().name());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DocValuesIndexFieldData.java, +                throw new IllegalArgumentException("Doc values field data doesn't support filters [" + fieldNames.name() + "]");, +++ b/src/main/java/org/elasticsearch/index/mapper/ContentPath.java, +/**, + *, + */, +    public static enum Type {, +    private String sourcePath;, +, +        this.sourcePath = null;, +, +    public String sourcePath(String sourcePath) {, +        String orig = this.sourcePath;, +        this.sourcePath = sourcePath;, +        return orig;, +    }, +, +    public String sourcePath() {, +        return this.sourcePath;, +    }, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +                    if (Regex.simpleMatch(field, fieldMapper.names().name())) {, +                        addFieldMapper(fieldMapper.names().name(), fieldMapper, fieldMappings, request.includeDefaults());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DisabledIndexFieldData.java, +        return new IllegalStateException("Field data loading is forbidden on " + getFieldNames().name());, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DocValuesIndexFieldData.java, +                throw new IllegalArgumentException("Doc values field data doesn't support filters [" + fieldNames.name() + "]");, +++ b/src/main/java/org/elasticsearch/index/mapper/ContentPath.java, +/**, + *, + */, +    public static enum Type {, +    private String sourcePath;, +, +        this.sourcePath = null;, +, +    public String sourcePath(String sourcePath) {, +        String orig = this.sourcePath;, +        this.sourcePath = sourcePath;, +        return orig;, +    }, +, +    public String sourcePath() {, +        return this.sourcePath;, +    }, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    public static final String DOC_VALUES_FORMAT = "doc_values_format";, +    public static class Names {, +        private final String name;, +        private final String indexNameClean;, +        private final String sourcePath;, +, +        public Names(String name, String indexName, String indexNameClean, String fullName) {, +            this(name, indexName, indexNameClean, fullName, fullName);, +        }, +, +        public Names(String name, String indexName, String indexNameClean, String fullName, @Nullable String sourcePath) {, +            this.name = name;, +            this.indexNameClean = indexNameClean;, +            this.sourcePath = sourcePath == null ? this.fullName : sourcePath;, +        public String name() {, +            return name;, +         * The cleaned index name, before any "path" modifications performed on it., +        public String indexNameClean() {, +            return indexNameClean;, +        /**, +         * The dot path notation to extract the value from source., +         */, +        public String sourcePath() {, +            return sourcePath;, +        }, +, +        /**, +         * Creates a new index term based on the provided value., +         */, +        public Term createIndexNameTerm(String value) {, +            return new Term(indexName, value);, +        }, +, +        /**]