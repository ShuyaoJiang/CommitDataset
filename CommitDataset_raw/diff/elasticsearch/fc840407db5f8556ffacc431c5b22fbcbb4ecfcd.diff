[+++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +, +            if (mapping.root.isEnabled()) {, +            }, +, +            if (mapping.root.isEnabled() == false) {, +                // entire type is disabled, +                parser.skipChildren();, +            } else if (emptyDoc == false) {, +, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +, +            if (mapping.root.isEnabled()) {, +            }, +, +            if (mapping.root.isEnabled() == false) {, +                // entire type is disabled, +                parser.skipChildren();, +            } else if (emptyDoc == false) {, +, +++ b/core/src/main/java/org/elasticsearch/index/shard/MergePolicyConfig.java, +++ b/core/pom.xml, +                                <include>org/elasticsearch/node/MockNode.class</include>, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.plugins.Plugin;, +import java.util.ArrayList;, +        private List<Class<? extends Plugin>> pluginClasses = new ArrayList<>();, +         * Add the given plugin to the client when it is created., +         */, +        public Builder addPlugin(Class<? extends Plugin> pluginClass) {, +            pluginClasses.add(pluginClass);, +            return this;, +        }, +, +        /**, +            PluginsService pluginsService = new PluginsService(settings, tuple.v2(), pluginClasses);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +, +            if (mapping.root.isEnabled()) {, +            }, +, +            if (mapping.root.isEnabled() == false) {, +                // entire type is disabled, +                parser.skipChildren();, +            } else if (emptyDoc == false) {, +]