[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(MissingAggregationBuilder::new, new MissingParser(), MissingAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalMissing::new));, +        registerAggregation(new AggregationSpec(SamplerAggregationBuilder::new, SamplerAggregationBuilder::parse,, +                SamplerAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalSampler.NAME, InternalSampler::new), +                        .addResultReader(UnmappedSampler.NAME, UnmappedSampler::new));, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(MissingAggregationBuilder::new, new MissingParser(), MissingAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalMissing::new));, +        registerAggregation(new AggregationSpec(SamplerAggregationBuilder::new, SamplerAggregationBuilder::parse,, +                SamplerAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalSampler.NAME, InternalSampler::new), +                        .addResultReader(UnmappedSampler.NAME, UnmappedSampler::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/InternalMissing.java, +    /**, +     * Read from a stream., +     */, +    public InternalMissing(StreamInput in) throws IOException {, +        super(in);, +    }, +, +    public String getWriteableName() {, +        return MissingAggregationBuilder.NAME;, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(MissingAggregationBuilder::new, new MissingParser(), MissingAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalMissing::new));, +        registerAggregation(new AggregationSpec(SamplerAggregationBuilder::new, SamplerAggregationBuilder::parse,, +                SamplerAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalSampler.NAME, InternalSampler::new), +                        .addResultReader(UnmappedSampler.NAME, UnmappedSampler::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/InternalMissing.java, +    /**, +     * Read from a stream., +     */, +    public InternalMissing(StreamInput in) throws IOException {, +        super(in);, +    }, +, +    public String getWriteableName() {, +        return MissingAggregationBuilder.NAME;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/MissingAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;, +    public static final String NAME = "missing";, +    public static final Type TYPE = new Type(NAME);, +        super(name, TYPE, ValuesSourceType.ANY, targetValueType);, +        super(in, TYPE, ValuesSourceType.ANY);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(MissingAggregationBuilder::new, new MissingParser(), MissingAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalMissing::new));, +        registerAggregation(new AggregationSpec(SamplerAggregationBuilder::new, SamplerAggregationBuilder::parse,, +                SamplerAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalSampler.NAME, InternalSampler::new), +                        .addResultReader(UnmappedSampler.NAME, UnmappedSampler::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/InternalMissing.java, +    /**, +     * Read from a stream., +     */, +    public InternalMissing(StreamInput in) throws IOException {, +        super(in);, +    }, +, +    public String getWriteableName() {, +        return MissingAggregationBuilder.NAME;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/MissingAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;, +    public static final String NAME = "missing";, +    public static final Type TYPE = new Type(NAME);, +        super(name, TYPE, ValuesSourceType.ANY, targetValueType);, +        super(in, TYPE, ValuesSourceType.ANY);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/sampler/InternalSampler.java, +    public static final String NAME = "mapped_sampler";, +    /**, +     * Read from a stream., +     */, +    public InternalSampler(StreamInput in) throws IOException {, +        super(in);, +    }, +, +    public String getWriteableName() {, +        return NAME;, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregation(, +                new AggregationSpec(MissingAggregationBuilder::new, new MissingParser(), MissingAggregationBuilder.AGGREGATION_NAME_FIELD), +                        .addResultReader(InternalMissing::new));, +        registerAggregation(new AggregationSpec(SamplerAggregationBuilder::new, SamplerAggregationBuilder::parse,, +                SamplerAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalSampler.NAME, InternalSampler::new), +                        .addResultReader(UnmappedSampler.NAME, UnmappedSampler::new));, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/InternalMissing.java, +    /**, +     * Read from a stream., +     */, +    public InternalMissing(StreamInput in) throws IOException {, +        super(in);, +    }, +, +    public String getWriteableName() {, +        return MissingAggregationBuilder.NAME;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/missing/MissingAggregationBuilder.java, +import org.elasticsearch.search.aggregations.InternalAggregation.Type;]