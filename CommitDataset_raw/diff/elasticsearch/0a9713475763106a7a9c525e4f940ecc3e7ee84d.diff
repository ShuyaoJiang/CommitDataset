[+++ b/src/test/java/org/elasticsearch/index/query/IndexQueryParserFilterCachingTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query;, +, +, +import org.apache.lucene.search.ConstantScoreQuery;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.NumericUtils;, +import org.elasticsearch.cache.recycler.CacheRecyclerModule;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.compress.CompressedString;, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.inject.Injector;, +import org.elasticsearch.common.inject.ModulesBuilder;, +import org.elasticsearch.common.inject.util.Providers;, +import org.elasticsearch.common.lucene.search.CachedFilter;, +import org.elasticsearch.common.lucene.search.NoCacheFilter;, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.settings.SettingsModule;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexNameModule;, +import org.elasticsearch.index.analysis.AnalysisModule;, +import org.elasticsearch.index.cache.IndexCacheModule;, +import org.elasticsearch.index.codec.CodecModule;, +import org.elasticsearch.index.engine.IndexEngineModule;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.MapperServiceModule;, +import org.elasticsearch.index.query.functionscore.FunctionScoreModule;, +import org.elasticsearch.index.settings.IndexSettingsModule;, +import org.elasticsearch.index.similarity.SimilarityModule;, +import org.elasticsearch.indices.fielddata.breaker.CircuitBreakerService;, +import org.elasticsearch.indices.fielddata.breaker.DummyCircuitBreakerService;, +import org.elasticsearch.indices.query.IndicesQueriesModule;, +import org.elasticsearch.script.ScriptModule;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.threadpool.ThreadPoolModule;, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +, +import java.io.IOException;, +, +import static org.elasticsearch.common.io.Streams.copyToBytesFromClasspath;, +import static org.elasticsearch.common.io.Streams.copyToStringFromClasspath;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +, +/**, + *, + */, +public class IndexQueryParserFilterCachingTests extends ElasticsearchTestCase {, +, +    private static Injector injector;, +, +    private static IndexQueryParserService queryParser;, +, +    @BeforeClass, +    public static void setupQueryParser() throws IOException {, +        Settings settings = ImmutableSettings.settingsBuilder(), +                .put("index.cache.filter.type", "weighted"), +                .build();, +        Index index = new Index("test");, +        injector = new ModulesBuilder().add(, +                new CacheRecyclerModule(settings),, +                new CodecModule(settings),, +                new SettingsModule(settings),, +                new ThreadPoolModule(settings),, +                new IndicesQueriesModule(),, +                new ScriptModule(settings),, +                new MapperServiceModule(),, +                new IndexSettingsModule(index, settings),, +                new IndexCacheModule(settings),, +                new AnalysisModule(settings),, +                new IndexEngineModule(settings),, +                new SimilarityModule(settings),, +                new IndexQueryParserModule(settings),, +                new IndexNameModule(index),]