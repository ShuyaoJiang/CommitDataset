[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScanAction.class).asEagerSingleton();, +        bind(TransportSearchScrollScanAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScanAction.class).asEagerSingleton();, +        bind(TransportSearchScrollScanAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +    private SearchOperationThreading operationThreading = SearchOperationThreading.THREAD_PER_SHARD;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScanAction.class).asEagerSingleton();, +        bind(TransportSearchScrollScanAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +    private SearchOperationThreading operationThreading = SearchOperationThreading.THREAD_PER_SHARD;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchType.java, +    QUERY_AND_FETCH((byte) 3),, +    /**, +     * Performs scanning of the results which executes the search without any sorting., +     * It will automatically start scrolling the result set., +     */, +    SCAN((byte) 4);, +        } else if (id == 4) {, +            return SCAN;, +     * "query_then_fetch"/"queryThenFetch", "query_and_fetch"/"queryAndFetch", and "scan"., +        } else if ("scan".equals(searchType)) {, +            return SearchType.SCAN;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScanAction.class).asEagerSingleton();, +        bind(TransportSearchScrollScanAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +    private SearchOperationThreading operationThreading = SearchOperationThreading.THREAD_PER_SHARD;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchType.java, +    QUERY_AND_FETCH((byte) 3),, +    /**, +     * Performs scanning of the results which executes the search without any sorting., +     * It will automatically start scrolling the result set., +     */, +    SCAN((byte) 4);, +        } else if (id == 4) {, +            return SCAN;, +     * "query_then_fetch"/"queryThenFetch", "query_and_fetch"/"queryAndFetch", and "scan"., +        } else if ("scan".equals(searchType)) {, +            return SearchType.SCAN;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.action.search.type.*;, +    private final TransportSearchScanAction scanAction;, +, +                                         TransportSearchQueryAndFetchAction queryAndFetchAction,, +                                         TransportSearchScanAction scanAction) {, +        this.scanAction = scanAction;, +        if (optimizeSingleShard && searchRequest.searchType() != SCAN) {, +        } else if (searchRequest.searchType() == SearchType.SCAN) {, +            scanAction.execute(searchRequest, listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScanAction.class).asEagerSingleton();, +        bind(TransportSearchScrollScanAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +    private SearchOperationThreading operationThreading = SearchOperationThreading.THREAD_PER_SHARD;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchType.java, +    QUERY_AND_FETCH((byte) 3),, +    /**, +     * Performs scanning of the results which executes the search without any sorting., +     * It will automatically start scrolling the result set., +     */, +    SCAN((byte) 4);, +        } else if (id == 4) {, +            return SCAN;, +     * "query_then_fetch"/"queryThenFetch", "query_and_fetch"/"queryAndFetch", and "scan"., +        } else if ("scan".equals(searchType)) {, +            return SearchType.SCAN;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +import org.elasticsearch.action.search.type.*;, +    private final TransportSearchScanAction scanAction;, +, +                                         TransportSearchQueryAndFetchAction queryAndFetchAction,, +                                         TransportSearchScanAction scanAction) {, +        this.scanAction = scanAction;, +        if (optimizeSingleShard && searchRequest.searchType() != SCAN) {, +        } else if (searchRequest.searchType() == SearchType.SCAN) {, +            scanAction.execute(searchRequest, listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/TransportSearchScrollAction.java, +import org.elasticsearch.action.search.type.TransportSearchScrollScanAction;, +    private final TransportSearchScrollScanAction scanAction;, +, +                                               TransportSearchScrollQueryAndFetchAction queryAndFetchAction,, +                                               TransportSearchScrollScanAction scanAction) {, +        this.scanAction = scanAction;, +            } else if (scrollId.type().equals(SCAN)) {, +                scanAction.execute(request, scrollId, listener);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/TransportActionModule.java, +        bind(TransportSearchScanAction.class).asEagerSingleton();, +        bind(TransportSearchScrollScanAction.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +    private SearchOperationThreading operationThreading = SearchOperationThreading.THREAD_PER_SHARD;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/SearchType.java, +    QUERY_AND_FETCH((byte) 3),, +    /**, +     * Performs scanning of the results which executes the search without any sorting., +     * It will automatically start scrolling the result set., +     */, +    SCAN((byte) 4);]