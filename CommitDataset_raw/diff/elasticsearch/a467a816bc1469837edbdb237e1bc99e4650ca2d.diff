[+++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, +        if (Strings.isEmpty(type)) {, +        if (Strings.isEmpty(id)) {, +        if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, +        if (Strings.isEmpty(type)) {, +        if (Strings.isEmpty(id)) {, +        if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        if (Strings.isEmpty(type)) {, +            validationException = addValidationError("type is missing", validationException);, +        if (Strings.isEmpty(id)) {, +            validationException = addValidationError("id is missing", validationException);, +++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, +        if (Strings.isEmpty(type)) {, +        if (Strings.isEmpty(id)) {, +        if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        if (Strings.isEmpty(type)) {, +            validationException = addValidationError("type is missing", validationException);, +        if (Strings.isEmpty(id)) {, +            validationException = addValidationError("id is missing", validationException);, +++ b/server/src/main/java/org/elasticsearch/action/get/GetRequest.java, +import org.elasticsearch.common.Strings;, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        if (Strings.isEmpty(type)) {, +            validationException = addValidationError("type is missing", validationException);, +        if (Strings.isEmpty(id)) {, +            validationException = addValidationError("id is missing", validationException);, +        if (versionType.validateVersionForReads(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, +        if (Strings.isEmpty(type)) {, +        if (Strings.isEmpty(id)) {, +        if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        if (Strings.isEmpty(type)) {, +            validationException = addValidationError("type is missing", validationException);, +        if (Strings.isEmpty(id)) {, +            validationException = addValidationError("id is missing", validationException);, +++ b/server/src/main/java/org/elasticsearch/action/get/GetRequest.java, +import org.elasticsearch.common.Strings;, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        if (Strings.isEmpty(type)) {, +            validationException = addValidationError("type is missing", validationException);, +        if (Strings.isEmpty(id)) {, +            validationException = addValidationError("id is missing", validationException);, +        if (versionType.validateVersionForReads(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +        if (Strings.isEmpty(type)) {, +        if (Strings.isEmpty(id)) {, +++ b/server/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.common.Strings;, +        if (Strings.isEmpty(type)) {, +        if (Strings.isEmpty(id)) {, +        if (versionType.validateVersionForWrites(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/explain/ExplainRequest.java, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        if (Strings.isEmpty(type)) {, +            validationException = addValidationError("type is missing", validationException);, +        if (Strings.isEmpty(id)) {, +            validationException = addValidationError("id is missing", validationException);, +++ b/server/src/main/java/org/elasticsearch/action/get/GetRequest.java, +import org.elasticsearch.common.Strings;, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        if (Strings.isEmpty(type)) {, +            validationException = addValidationError("type is missing", validationException);, +        if (Strings.isEmpty(id)) {, +            validationException = addValidationError("id is missing", validationException);, +        if (versionType.validateVersionForReads(version) == false) {, +++ b/server/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +        if (Strings.isEmpty(type)) {, +        if (Strings.isEmpty(id)) {, +++ b/server/src/test/java/org/elasticsearch/action/delete/DeleteRequestTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an]