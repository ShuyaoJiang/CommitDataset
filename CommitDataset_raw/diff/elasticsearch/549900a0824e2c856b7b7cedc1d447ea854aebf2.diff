[+++ b/src/main/java/org/elasticsearch/common/lucene/spatial/SpatialStrategy.java, +    public Field createField(Shape shape) {, +        // LUCENE 4 Upgrade: We should pass in the FieldType and use it here, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/SpatialStrategy.java, +    public Field createField(Shape shape) {, +        // LUCENE 4 Upgrade: We should pass in the FieldType and use it here, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +public class UidField extends Field {, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/SpatialStrategy.java, +    public Field createField(Shape shape) {, +        // LUCENE 4 Upgrade: We should pass in the FieldType and use it here, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +public class UidField extends Field {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        boolean beforeFieldAdded(FieldMapper fieldMapper, Field fieldable, ParseContext parseContent);, +        public boolean beforeFieldAdded(FieldMapper fieldMapper, Field fieldable, Object parseContext) {, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/SpatialStrategy.java, +    public Field createField(Shape shape) {, +        // LUCENE 4 Upgrade: We should pass in the FieldType and use it here, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +public class UidField extends Field {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        boolean beforeFieldAdded(FieldMapper fieldMapper, Field fieldable, ParseContext parseContent);, +        public boolean beforeFieldAdded(FieldMapper fieldMapper, Field fieldable, Object parseContext) {, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    // LUCENE 4 UPGRADE Consider replacing these all with fieldType() and letting consumer pick and choose, +    boolean storeTermVectors();, +, +    boolean storeTermVectorOffsets();, +, +    boolean storeTermVectorPositions();, +, +    boolean storeTermVectorPayloads();, +    Object valueForSearch(Field field);, +    T value(Field field);, +    String valueAsString(Field field);, +++ b/src/main/java/org/elasticsearch/common/lucene/spatial/SpatialStrategy.java, +    public Field createField(Shape shape) {, +        // LUCENE 4 Upgrade: We should pass in the FieldType and use it here, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +public class UidField extends Field {, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +        boolean beforeFieldAdded(FieldMapper fieldMapper, Field fieldable, ParseContext parseContent);, +        public boolean beforeFieldAdded(FieldMapper fieldMapper, Field fieldable, Object parseContext) {, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +    // LUCENE 4 UPGRADE Consider replacing these all with fieldType() and letting consumer pick and choose, +    boolean storeTermVectors();, +, +    boolean storeTermVectorOffsets();, +, +    boolean storeTermVectorPositions();, +, +    boolean storeTermVectorPayloads();, +    Object valueForSearch(Field field);, +    T value(Field field);, +    String valueAsString(Field field);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.apache.lucene.document.FieldType;, +import org.apache.lucene.util.BytesRef;, +        public static final FieldType FIELD_TYPE = new FieldType();, +, +        static {, +            FIELD_TYPE.setIndexed(true);, +            FIELD_TYPE.setTokenized(true);, +            FIELD_TYPE.setStored(false);, +            FIELD_TYPE.setStoreTermVectors(false);, +            FIELD_TYPE.setOmitNorms(false);, +            FIELD_TYPE.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);, +            FIELD_TYPE.freeze();, +        }, +, +        protected OpenBuilder(String name, FieldType fieldType) {, +            super(name, fieldType);, +        public T index(boolean index) {, +        public T store(boolean store) {, +        protected T storeTermVectors(boolean termVectors) {, +            return super.storeTermVectors(termVectors);, +        }, +, +        @Override, +        protected T storeTermVectorOffsets(boolean termVectorOffsets) {, +            return super.storeTermVectorOffsets(termVectorOffsets);, +        }, +, +        @Override, +        protected T storeTermVectorPositions(boolean termVectorPositions) {, +            return super.storeTermVectorPositions(termVectorPositions);, +        }, +, +        @Override, +        protected T storeTermVectorPayloads(boolean termVectorPayloads) {, +            return super.storeTermVectorPayloads(termVectorPayloads);, +        }, +, +        @Override, +        protected T tokenized(boolean tokenized) {, +            return super.tokenized(tokenized);, +        protected final FieldType fieldType;, +        protected Builder(String name, FieldType fieldType) {, +            this.fieldType = fieldType;]