[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.cluster.routing.allocation.AllocationExplanation;, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +    private final AllocationExplanation allocationExplanation;, +, +        this(version, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.allocationExplanation());, +    public ClusterState(long version, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, AllocationExplanation allocationExplanation) {, +        this.allocationExplanation = allocationExplanation;, +    public AllocationExplanation allocationExplanation() {, +        return this.allocationExplanation;, +    }, +, +    public AllocationExplanation getAllocationExplanation() {, +        return allocationExplanation();, +    }, +, +        private AllocationExplanation allocationExplanation = AllocationExplanation.EMPTY;, +, +        public Builder routingResult(RoutingAllocation.Result routingResult) {, +            this.routingTable = routingResult.routingTable();, +            this.allocationExplanation = routingResult.explanation();, +            return this;, +        }, +, +        public Builder allocationExplanation(AllocationExplanation allocationExplanation) {, +            this.allocationExplanation = allocationExplanation;, +            return this;, +        }, +, +            this.allocationExplanation = state.allocationExplanation();, +            return new ClusterState(version, metaData, routingTable, nodes, blocks, allocationExplanation);, +            state.allocationExplanation().writeTo(out);, +            builder.allocationExplanation = AllocationExplanation.readAllocationExplanation(in);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.cluster.routing.allocation.AllocationExplanation;, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +    private final AllocationExplanation allocationExplanation;, +, +        this(version, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.allocationExplanation());, +    public ClusterState(long version, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, AllocationExplanation allocationExplanation) {, +        this.allocationExplanation = allocationExplanation;, +    public AllocationExplanation allocationExplanation() {, +        return this.allocationExplanation;, +    }, +, +    public AllocationExplanation getAllocationExplanation() {, +        return allocationExplanation();, +    }, +, +        private AllocationExplanation allocationExplanation = AllocationExplanation.EMPTY;, +, +        public Builder routingResult(RoutingAllocation.Result routingResult) {, +            this.routingTable = routingResult.routingTable();, +            this.allocationExplanation = routingResult.explanation();, +            return this;, +        }, +, +        public Builder allocationExplanation(AllocationExplanation allocationExplanation) {, +            this.allocationExplanation = allocationExplanation;, +            return this;, +        }, +, +            this.allocationExplanation = state.allocationExplanation();, +            return new ClusterState(version, metaData, routingTable, nodes, blocks, allocationExplanation);, +            state.allocationExplanation().writeTo(out);, +            builder.allocationExplanation = AllocationExplanation.readAllocationExplanation(in);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +                RoutingAllocation.Result routingResult = shardsAllocation.applyFailedShards(currentState, newArrayList(shardRouting));, +                if (!routingResult.changed()) {, +                return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();, +                RoutingAllocation.Result routingResult = shardsAllocation.applyStartedShards(currentState, newArrayList(shardRouting));, +                if (!routingResult.changed()) {, +                return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.cluster.routing.allocation.AllocationExplanation;, +import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;, +    private final AllocationExplanation allocationExplanation;, +, +        this(version, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.allocationExplanation());, +    public ClusterState(long version, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, AllocationExplanation allocationExplanation) {, +        this.allocationExplanation = allocationExplanation;, +    public AllocationExplanation allocationExplanation() {, +        return this.allocationExplanation;, +    }, +, +    public AllocationExplanation getAllocationExplanation() {, +        return allocationExplanation();, +    }, +, +        private AllocationExplanation allocationExplanation = AllocationExplanation.EMPTY;, +, +        public Builder routingResult(RoutingAllocation.Result routingResult) {, +            this.routingTable = routingResult.routingTable();, +            this.allocationExplanation = routingResult.explanation();, +            return this;, +        }, +, +        public Builder allocationExplanation(AllocationExplanation allocationExplanation) {, +            this.allocationExplanation = allocationExplanation;]