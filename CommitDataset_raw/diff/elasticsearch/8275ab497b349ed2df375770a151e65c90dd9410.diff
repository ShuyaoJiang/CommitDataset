[+++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.elasticsearch.client.node.NodeClient;, +    private final NodeClient client;, +, +                      NodeClient client, CircuitBreakerService circuitBreakerService) {, +        this.client = client;, +            restController.dispatchRequest(request, responseChannel, client, threadContext);, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.elasticsearch.client.node.NodeClient;, +    private final NodeClient client;, +, +                      NodeClient client, CircuitBreakerService circuitBreakerService) {, +        this.client = client;, +            restController.dispatchRequest(request, responseChannel, client, threadContext);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    b.bind(NodeClient.class).toInstance(client);, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.elasticsearch.client.node.NodeClient;, +    private final NodeClient client;, +, +                      NodeClient client, CircuitBreakerService circuitBreakerService) {, +        this.client = client;, +            restController.dispatchRequest(request, responseChannel, client, threadContext);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    b.bind(NodeClient.class).toInstance(client);, +++ b/core/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +    protected BaseRestHandler(Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.elasticsearch.client.node.NodeClient;, +    private final NodeClient client;, +, +                      NodeClient client, CircuitBreakerService circuitBreakerService) {, +        this.client = client;, +            restController.dispatchRequest(request, responseChannel, client, threadContext);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    b.bind(NodeClient.class).toInstance(client);, +++ b/core/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +    protected BaseRestHandler(Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +import org.elasticsearch.client.node.NodeClient;, +    public void dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client, ThreadContext threadContext) throws Exception {, +                executeHandler(request, channel, client);, +                filterChain.continueProcessing(request, channel, client);, +    void executeHandler(RestRequest request, RestChannel channel, NodeClient client) throws Exception {, +            handler.handleRequest(request, channel, client);, +        public void continueProcessing(RestRequest request, RestChannel channel, NodeClient client) {, +                    executionFilter.process(request, channel, client, this);, +                    preProcessor.process(request, channel, client, this);, +        public void process(RestRequest request, RestChannel channel, NodeClient client, RestFilterChain filterChain) throws Exception {, +            executeHandler(request, channel, client);, +++ b/core/src/main/java/org/elasticsearch/http/HttpServer.java, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +import org.elasticsearch.client.node.NodeClient;, +    private final NodeClient client;, +, +                      NodeClient client, CircuitBreakerService circuitBreakerService) {, +        this.client = client;, +            restController.dispatchRequest(request, responseChannel, client, threadContext);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    b.bind(NodeClient.class).toInstance(client);, +++ b/core/src/main/java/org/elasticsearch/rest/BaseRestHandler.java, +    protected BaseRestHandler(Settings settings) {, +++ b/core/src/main/java/org/elasticsearch/rest/RestController.java, +import org.elasticsearch.client.node.NodeClient;, +    public void dispatchRequest(final RestRequest request, final RestChannel channel, final NodeClient client, ThreadContext threadContext) throws Exception {, +                executeHandler(request, channel, client);, +                filterChain.continueProcessing(request, channel, client);, +    void executeHandler(RestRequest request, RestChannel channel, NodeClient client) throws Exception {, +            handler.handleRequest(request, channel, client);, +        public void continueProcessing(RestRequest request, RestChannel channel, NodeClient client) {, +                    executionFilter.process(request, channel, client, this);, +                    preProcessor.process(request, channel, client, this);, +        public void process(RestRequest request, RestChannel channel, NodeClient client, RestFilterChain filterChain) throws Exception {, +            executeHandler(request, channel, client);, +++ b/core/src/main/java/org/elasticsearch/rest/RestFilter.java, +import org.elasticsearch.client.node.NodeClient;]