[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Collections;, +import java.util.HashSet;, +        this(settings, Settings.EMPTY, settingsSet, scope);, +, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, Set<Setting<?>> settingsSet, Setting.Scope scope) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        for (Setting<?> entry : settingsSet) {, +            addSetting(entry);, +        }, +    }, +, +    protected final void addSetting(Setting<?> setting) {, +        if (setting.getScope() != scope) {, +            throw new IllegalArgumentException("Setting must be a " + scope + " setting but was: " + setting.getScope());, +        }, +        if (setting.hasComplexMatcher()) {, +            complexMatchers.putIfAbsent(setting.getKey(), setting);, +        } else {, +            keySettings.putIfAbsent(setting.getKey(), setting);, +        }, +    /**, +     * Returns the value for the given setting., +     */, +    public <T> T get(Setting<T> setting) {, +        if (setting.getScope() != scope) {, +            throw new IllegalArgumentException("settings scope doesn't match the setting scope [" + this.scope + "] != [" + setting.getScope() + "]");, +        }, +        if (get(setting.getKey()) == null) {, +            throw new IllegalArgumentException("setting " + setting.getKey() + " has not been registered");, +        }, +        return setting.get(this.lastSettingsApplied);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Collections;, +import java.util.HashSet;, +        this(settings, Settings.EMPTY, settingsSet, scope);, +, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, Set<Setting<?>> settingsSet, Setting.Scope scope) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        for (Setting<?> entry : settingsSet) {, +            addSetting(entry);, +        }, +    }, +, +    protected final void addSetting(Setting<?> setting) {, +        if (setting.getScope() != scope) {, +            throw new IllegalArgumentException("Setting must be a " + scope + " setting but was: " + setting.getScope());, +        }, +        if (setting.hasComplexMatcher()) {, +            complexMatchers.putIfAbsent(setting.getKey(), setting);, +        } else {, +            keySettings.putIfAbsent(setting.getKey(), setting);, +        }, +    /**, +     * Returns the value for the given setting., +     */, +    public <T> T get(Setting<T> setting) {, +        if (setting.getScope() != scope) {, +            throw new IllegalArgumentException("settings scope doesn't match the setting scope [" + this.scope + "] != [" + setting.getScope() + "]");, +        }, +        if (get(setting.getKey()) == null) {, +            throw new IllegalArgumentException("setting " + setting.getKey() + " has not been registered");, +        }, +        return setting.get(this.lastSettingsApplied);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/gateway/PrimaryShardAllocator.java, +            final IndexSettings indexSettings = new IndexSettings(indexMetaData, settings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +            IndexSettings indexSettings = new IndexSettings(indexMetaData, this.settings);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Collections;, +import java.util.HashSet;, +        this(settings, Settings.EMPTY, settingsSet, scope);, +, +    protected AbstractScopedSettings(Settings nodeSettings, Settings scopeSettings, Set<Setting<?>> settingsSet, Setting.Scope scope) {, +        super(nodeSettings);, +        this.lastSettingsApplied = scopeSettings;, +        for (Setting<?> entry : settingsSet) {, +            addSetting(entry);, +        }, +    }]