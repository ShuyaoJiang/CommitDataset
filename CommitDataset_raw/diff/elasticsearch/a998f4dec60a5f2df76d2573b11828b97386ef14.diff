[+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatter.java, +import org.elasticsearch.ElasticsearchParseException;, +, +     * Return a {@link DateMathParser} built from this formatter., +    DateMathParser toDateMathParser();, +        private final DateMathParser[] dateMathParsers;, +            this.dateMathParsers = Arrays.stream(formatters).map(DateFormatter::toDateMathParser).toArray(DateMathParser[]::new);, +        public DateMathParser toDateMathParser() {, +            return (text, now, roundUp, tz) -> {, +                ElasticsearchParseException failure = null;, +                for (DateMathParser parser : dateMathParsers) {, +                    try {, +                        return parser.parse(text, now, roundUp, tz);, +                    } catch (ElasticsearchParseException e) {, +                        if (failure == null) {, +                            failure = e;, +                        } else {, +                            failure.addSuppressed(e);, +                        }, +                    }, +                }, +                throw failure;, +            };, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatter.java, +import org.elasticsearch.ElasticsearchParseException;, +, +     * Return a {@link DateMathParser} built from this formatter., +    DateMathParser toDateMathParser();, +        private final DateMathParser[] dateMathParsers;, +            this.dateMathParsers = Arrays.stream(formatters).map(DateFormatter::toDateMathParser).toArray(DateMathParser[]::new);, +        public DateMathParser toDateMathParser() {, +            return (text, now, roundUp, tz) -> {, +                ElasticsearchParseException failure = null;, +                for (DateMathParser parser : dateMathParsers) {, +                    try {, +                        return parser.parse(text, now, roundUp, tz);, +                    } catch (ElasticsearchParseException e) {, +                        if (failure == null) {, +                            failure = e;, +                        } else {, +                            failure.addSuppressed(e);, +                        }, +                    }, +                }, +                throw failure;, +            };, +++ b/server/src/main/java/org/elasticsearch/common/time/EpochMillisDateFormatter.java, +    static final DateFormatter INSTANCE = new EpochMillisDateFormatter();, +    static final DateMathParser DATE_MATH_INSTANCE = new JavaDateMathParser(INSTANCE, INSTANCE);, +, +    @Override, +    public DateMathParser toDateMathParser() {, +        return DATE_MATH_INSTANCE;, +    }, +++ b/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +                                DateMathParser dateMathParser = formatter.toDateMathParser();, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatter.java, +import org.elasticsearch.ElasticsearchParseException;, +, +     * Return a {@link DateMathParser} built from this formatter., +    DateMathParser toDateMathParser();, +        private final DateMathParser[] dateMathParsers;, +            this.dateMathParsers = Arrays.stream(formatters).map(DateFormatter::toDateMathParser).toArray(DateMathParser[]::new);, +        public DateMathParser toDateMathParser() {, +            return (text, now, roundUp, tz) -> {, +                ElasticsearchParseException failure = null;, +                for (DateMathParser parser : dateMathParsers) {, +                    try {, +                        return parser.parse(text, now, roundUp, tz);, +                    } catch (ElasticsearchParseException e) {, +                        if (failure == null) {, +                            failure = e;, +                        } else {, +                            failure.addSuppressed(e);, +                        }, +                    }, +                }, +                throw failure;, +            };, +++ b/server/src/main/java/org/elasticsearch/common/time/EpochMillisDateFormatter.java, +    static final DateFormatter INSTANCE = new EpochMillisDateFormatter();, +    static final DateMathParser DATE_MATH_INSTANCE = new JavaDateMathParser(INSTANCE, INSTANCE);, +, +    @Override, +    public DateMathParser toDateMathParser() {, +        return DATE_MATH_INSTANCE;, +    }, +++ b/server/src/main/java/org/elasticsearch/common/time/EpochSecondsDateFormatter.java, +    static final DateMathParser DATE_MATH_INSTANCE = new JavaDateMathParser(INSTANCE, INSTANCE);, +    public DateMathParser toDateMathParser() {, +        return DATE_MATH_INSTANCE;, +    }, +, +    @Override]