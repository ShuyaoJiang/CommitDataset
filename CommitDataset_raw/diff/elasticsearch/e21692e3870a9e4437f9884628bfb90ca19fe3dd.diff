[+++ b/modules/ingest-common/build.gradle, +    extendedPlugins = ['lang-painless'], +    compileOnly project(':modules:lang-painless'), +, +integTestCluster {, +    module project(':modules:lang-painless'), +}, +++ b/modules/ingest-common/build.gradle, +    extendedPlugins = ['lang-painless'], +    compileOnly project(':modules:lang-painless'), +, +integTestCluster {, +    module project(':modules:lang-painless'), +}, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/BytesProcessor.java, +    public static long apply(String value) {, +        return ByteSizeValue.parseBytesSizeValue(value, null, "Ingest Field").getBytes();, +    }, +, +        return apply(value);, +++ b/modules/ingest-common/build.gradle, +    extendedPlugins = ['lang-painless'], +    compileOnly project(':modules:lang-painless'), +, +integTestCluster {, +    module project(':modules:lang-painless'), +}, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/BytesProcessor.java, +    public static long apply(String value) {, +        return ByteSizeValue.parseBytesSizeValue(value, null, "Ingest Field").getBytes();, +    }, +, +        return apply(value);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/JsonProcessor.java, +    public static Object apply(Object fieldValue) {, +        BytesReference bytesRef = fieldValue == null ? new BytesArray("null") : new BytesArray(fieldValue.toString());, +            return value;, +    public static void apply(Map<String, Object> ctx, String fieldName) {, +        Object value = apply(ctx.get(fieldName));, +        if (value instanceof Map) {, +            @SuppressWarnings("unchecked"), +                Map<String, Object> map = (Map<String, Object>) value;, +                ctx.putAll(map);, +        } else {, +            throw new IllegalArgumentException("cannot add non-map fields to root of document");, +        }, +    }, +, +    @Override, +    public void execute(IngestDocument document) throws Exception {, +        if (addToRoot) {, +           apply(document.getSourceAndMetadata(), field);, +        } else {, +            document.setFieldValue(targetField, apply(document.getFieldValue(field, Object.class)));, +        }, +    }, +, +++ b/modules/ingest-common/build.gradle, +    extendedPlugins = ['lang-painless'], +    compileOnly project(':modules:lang-painless'), +, +integTestCluster {, +    module project(':modules:lang-painless'), +}, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/BytesProcessor.java, +    public static long apply(String value) {, +        return ByteSizeValue.parseBytesSizeValue(value, null, "Ingest Field").getBytes();, +    }, +, +        return apply(value);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/JsonProcessor.java, +    public static Object apply(Object fieldValue) {, +        BytesReference bytesRef = fieldValue == null ? new BytesArray("null") : new BytesArray(fieldValue.toString());, +            return value;, +    public static void apply(Map<String, Object> ctx, String fieldName) {, +        Object value = apply(ctx.get(fieldName));, +        if (value instanceof Map) {, +            @SuppressWarnings("unchecked"), +                Map<String, Object> map = (Map<String, Object>) value;, +                ctx.putAll(map);, +        } else {, +            throw new IllegalArgumentException("cannot add non-map fields to root of document");, +        }, +    }, +, +    @Override, +    public void execute(IngestDocument document) throws Exception {, +        if (addToRoot) {, +           apply(document.getSourceAndMetadata(), field);, +        } else {, +            document.setFieldValue(targetField, apply(document.getFieldValue(field, Object.class)));, +        }, +    }, +, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/LowercaseProcessor.java, +    public static String apply(String value) {, +        return value.toLowerCase(Locale.ROOT);, +    }, +, +        return apply(value);]