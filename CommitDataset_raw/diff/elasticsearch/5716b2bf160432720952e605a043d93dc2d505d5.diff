[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {, +                            protected PutJobAction.Response newResponse(boolean acknowledged) {, +                                return new PutJobAction.Response(acknowledged, job);, +            @Override, +            public void onFailure(Exception e) {, +                if (e instanceof IllegalArgumentException, +                        && e.getMessage().matches("mapper \\[.*\\] of different type, current_type \\[.*\\], merged_type \\[.*\\]")) {, +                    actionListener.onFailure(new IllegalArgumentException(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, e));, +                } else {, +                    actionListener.onFailure(e);, +                }, +, +            }, +        });, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {, +                            protected PutJobAction.Response newResponse(boolean acknowledged) {, +                                return new PutJobAction.Response(acknowledged, job);, +            @Override, +            public void onFailure(Exception e) {, +                if (e instanceof IllegalArgumentException, +                        && e.getMessage().matches("mapper \\[.*\\] of different type, current_type \\[.*\\], merged_type \\[.*\\]")) {, +                    actionListener.onFailure(new IllegalArgumentException(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, e));, +                } else {, +                    actionListener.onFailure(e);, +                }, +, +            }, +        });, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/messages/Messages.java, +    public static final String JOB_CONFIG_MAPPING_TYPE_CLASH =, +            "A field has a different mapping type to an existing field with the same name. " +, +                    "Use the 'results_index_name' setting to assign the job to another index";, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java, +                        new AckedClusterStateUpdateTask<PutJobAction.Response>(request, actionListener) {, +                            protected PutJobAction.Response newResponse(boolean acknowledged) {, +                                return new PutJobAction.Response(acknowledged, job);, +            @Override, +            public void onFailure(Exception e) {, +                if (e instanceof IllegalArgumentException, +                        && e.getMessage().matches("mapper \\[.*\\] of different type, current_type \\[.*\\], merged_type \\[.*\\]")) {, +                    actionListener.onFailure(new IllegalArgumentException(Messages.JOB_CONFIG_MAPPING_TYPE_CLASH, e));, +                } else {, +                    actionListener.onFailure(e);, +                }, +, +            }, +        });, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/messages/Messages.java, +    public static final String JOB_CONFIG_MAPPING_TYPE_CLASH =, +            "A field has a different mapping type to an existing field with the same name. " +, +                    "Use the 'results_index_name' setting to assign the job to another index";, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/MlJobIT.java, +    public void testCreateJob_WithClashingFieldMappingsFails() throws Exception {, +        String jobTemplate = "{\n" +, +                "  \"analysis_config\" : {\n" +, +                "        \"detectors\" :[{\"function\":\"metric\",\"field_name\":\"metric\", \"by_field_name\":\"%s\"}]\n" +, +                "    }" +, +                "}";, +, +        String jobId1 = "job-with-response-field";, +        String byFieldName1 = "response";, +        String jobId2 = "job-will-fail-with-mapping-error-on-response-field";, +        String byFieldName2 = "response.time";, +        String jobConfig = String.format(Locale.ROOT, jobTemplate, byFieldName1);, +, +        Response response = client().performRequest("put", MachineLearning.BASE_PATH, +                + "anomaly_detectors/" + jobId1, Collections.emptyMap(), new StringEntity(jobConfig, ContentType.APPLICATION_JSON));, +        assertEquals(200, response.getStatusLine().getStatusCode());, +, +        final String failingJobConfig = String.format(Locale.ROOT, jobTemplate, byFieldName2);, +        ResponseException e = expectThrows(ResponseException.class,, +                () -> client().performRequest("put", MachineLearning.BASE_PATH + "anomaly_detectors/" + jobId2,, +                        Collections.emptyMap(), new StringEntity(failingJobConfig, ContentType.APPLICATION_JSON)));, +, +        assertThat(e.getMessage(),, +                containsString("A field has a different mapping type to an existing field with the same name. " +, +                        "Use the 'results_index_name' setting to assign the job to another index"));, +    }, +]