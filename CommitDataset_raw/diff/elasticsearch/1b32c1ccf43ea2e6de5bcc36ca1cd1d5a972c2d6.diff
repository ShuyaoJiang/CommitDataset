[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldDataOptions.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldDataOptions.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/doubles/SingleValueDoubleFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +        double[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldDataOptions.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/doubles/SingleValueDoubleFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +        double[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/floats/FloatFieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldDataOptions.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/doubles/SingleValueDoubleFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +        double[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/floats/FloatFieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/floats/SingleValueFloatFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> doublesValuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +    private ThreadLocal<ThreadLocals.CleanableValue<float[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<float[]>>() {, +        @Override protected ThreadLocals.CleanableValue<float[]> initialValue() {, +            return new ThreadLocals.CleanableValue<float[]>(new float[1]);, +        double[] ret = doublesValuesCache.get().get();, +        float[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldDataOptions.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/doubles/SingleValueDoubleFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +        double[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/floats/FloatFieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/floats/SingleValueFloatFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> doublesValuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +    private ThreadLocal<ThreadLocals.CleanableValue<float[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<float[]>>() {, +        @Override protected ThreadLocals.CleanableValue<float[]> initialValue() {, +            return new ThreadLocals.CleanableValue<float[]>(new float[1]);, +        double[] ret = doublesValuesCache.get().get();, +        float[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/ints/SingleValueIntFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> doublesValuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +    private ThreadLocal<ThreadLocals.CleanableValue<int[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<int[]>>() {, +        @Override protected ThreadLocals.CleanableValue<int[]> initialValue() {, +            return new ThreadLocals.CleanableValue<int[]>(new int[1]);, +        double[] ret = doublesValuesCache.get().get();, +        int[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/FieldDataOptions.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/doubles/SingleValueDoubleFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +        double[] ret = valuesCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/floats/FloatFieldData.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/field/data/floats/SingleValueFloatFieldData.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<double[]>> doublesValuesCache = new ThreadLocal<ThreadLocals.CleanableValue<double[]>>() {, +        @Override protected ThreadLocals.CleanableValue<double[]> initialValue() {, +            return new ThreadLocals.CleanableValue<double[]>(new double[1]);, +    private ThreadLocal<ThreadLocals.CleanableValue<float[]>> valuesCache = new ThreadLocal<ThreadLocals.CleanableValue<float[]>>() {]