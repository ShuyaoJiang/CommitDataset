[+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +                    restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" +, +                        internalCluster().getNodeNames()[n]));, +                    Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions"));, +        Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodes.get(2)));, +        Response deleteResponse = restClient.performRequest(, +            new Request("DELETE", "/_cluster/voting_config_exclusions/?wait_for_removal=false"));, +        Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodeToWithdraw));, +        Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions"));, +            restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/invalid"));, +                Matchers.containsString("add voting config exclusions request for [invalid] matched no master-eligible nodes"), +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +                    restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" +, +                        internalCluster().getNodeNames()[n]));, +                    Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions"));, +        Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodes.get(2)));, +        Response deleteResponse = restClient.performRequest(, +            new Request("DELETE", "/_cluster/voting_config_exclusions/?wait_for_removal=false"));, +        Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodeToWithdraw));, +        Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions"));, +            restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/invalid"));, +                Matchers.containsString("add voting config exclusions request for [invalid] matched no master-eligible nodes"), +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsAction;, +import org.elasticsearch.action.admin.cluster.configuration.ClearVotingConfigExclusionsAction;, +import org.elasticsearch.action.admin.cluster.configuration.TransportAddVotingConfigExclusionsAction;, +import org.elasticsearch.action.admin.cluster.configuration.TransportClearVotingConfigExclusionsAction;, +import org.elasticsearch.rest.action.admin.cluster.RestClearVotingConfigExclusionsAction;, +import org.elasticsearch.rest.action.admin.cluster.RestAddVotingConfigExclusionAction;, +        actions.register(AddVotingConfigExclusionsAction.INSTANCE, TransportAddVotingConfigExclusionsAction.class);, +        actions.register(ClearVotingConfigExclusionsAction.INSTANCE, TransportClearVotingConfigExclusionsAction.class);, +        registerHandler.accept(new RestAddVotingConfigExclusionAction(settings, restController));, +        registerHandler.accept(new RestClearVotingConfigExclusionsAction(settings, restController));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +                    restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" +, +                        internalCluster().getNodeNames()[n]));, +                    Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions"));, +        Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodes.get(2)));, +        Response deleteResponse = restClient.performRequest(, +            new Request("DELETE", "/_cluster/voting_config_exclusions/?wait_for_removal=false"));, +        Response response = restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" + nodeToWithdraw));, +        Response deleteResponse = restClient.performRequest(new Request("DELETE", "/_cluster/voting_config_exclusions"));, +            restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/invalid"));, +                Matchers.containsString("add voting config exclusions request for [invalid] matched no master-eligible nodes"), +++ b/server/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.cluster.configuration.AddVotingConfigExclusionsAction;, +import org.elasticsearch.action.admin.cluster.configuration.ClearVotingConfigExclusionsAction;, +import org.elasticsearch.action.admin.cluster.configuration.TransportAddVotingConfigExclusionsAction;, +import org.elasticsearch.action.admin.cluster.configuration.TransportClearVotingConfigExclusionsAction;, +import org.elasticsearch.rest.action.admin.cluster.RestClearVotingConfigExclusionsAction;, +import org.elasticsearch.rest.action.admin.cluster.RestAddVotingConfigExclusionAction;, +        actions.register(AddVotingConfigExclusionsAction.INSTANCE, TransportAddVotingConfigExclusionsAction.class);, +        actions.register(ClearVotingConfigExclusionsAction.INSTANCE, TransportClearVotingConfigExclusionsAction.class);, +        registerHandler.accept(new RestAddVotingConfigExclusionAction(settings, restController));, +        registerHandler.accept(new RestClearVotingConfigExclusionsAction(settings, restController));, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/configuration/AddVotingConfigExclusionsAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.action.admin.cluster.configuration;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.common.io.stream.Writeable.Reader;, +, +public class AddVotingConfigExclusionsAction extends Action<AddVotingConfigExclusionsResponse> {, +    public static final AddVotingConfigExclusionsAction INSTANCE = new AddVotingConfigExclusionsAction();, +    public static final String NAME = "cluster:admin/voting_config/add_exclusions";, +, +    private AddVotingConfigExclusionsAction() {, +        super(NAME);, +    }, +, +    @Override, +    public AddVotingConfigExclusionsResponse newResponse() {, +        throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable");, +    }, +, +    @Override, +    public Reader<AddVotingConfigExclusionsResponse> getResponseReader() {, +        return AddVotingConfigExclusionsResponse::new;, +    }, +}, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/discovery/Zen2RestApiIT.java, +                    restClient.performRequest(new Request("POST", "/_cluster/voting_config_exclusions/" +, +                        internalCluster().getNodeNames()[n]));]