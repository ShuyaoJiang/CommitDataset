[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder setNoStoredFields() {, +        sourceBuilder().noStoredFields();, +    /**, +     * Adds a docvalue based field to load and return. The field does not have to be stored,, +     * but its recommended to use non analyzed or numeric fields., +     *, +     * @param name The field to get from the docvalue, +     */, +    public SearchRequestBuilder addDocValueField(String name) {, +        sourceBuilder().docValueField(name);, +        return this;, +    }, +     * Adds a stored field to load and return (note, it must be stored) as part of the search request., +    public SearchRequestBuilder addStoredField(String field) {, +        sourceBuilder().storedField(field);, +     * @deprecated Use {@link SearchRequestBuilder#addDocValueField(String)} instead., +    @Deprecated, +        sourceBuilder().docValueField(name);, +, +     * Sets the stored fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +     *, +     * @deprecated Use {@link SearchRequestBuilder#storedFields(String...)} instead., +     */, +    @Deprecated, +    public SearchRequestBuilder fields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +        return this;, +    }, +, +    /**, +    public SearchRequestBuilder storedFields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +    public SearchRequestBuilder setNoStoredFields() {, +        sourceBuilder().noStoredFields();, +    /**, +     * Adds a docvalue based field to load and return. The field does not have to be stored,, +     * but its recommended to use non analyzed or numeric fields., +     *, +     * @param name The field to get from the docvalue, +     */, +    public SearchRequestBuilder addDocValueField(String name) {, +        sourceBuilder().docValueField(name);, +        return this;, +    }, +     * Adds a stored field to load and return (note, it must be stored) as part of the search request., +    public SearchRequestBuilder addStoredField(String field) {, +        sourceBuilder().storedField(field);, +     * @deprecated Use {@link SearchRequestBuilder#addDocValueField(String)} instead., +    @Deprecated, +        sourceBuilder().docValueField(name);, +, +     * Sets the stored fields to load and return as part of the search request. If none, +     * are specified, the source of the document will be returned., +     *, +     * @deprecated Use {@link SearchRequestBuilder#storedFields(String...)} instead., +     */, +    @Deprecated, +    public SearchRequestBuilder fields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +        return this;, +    }, +, +    /**, +    public SearchRequestBuilder storedFields(String... fields) {, +        sourceBuilder().storedFields(Arrays.asList(fields));, +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +        PARSER.declareStringArray(InnerHitBuilder::setStoredFieldNames, SearchSourceBuilder.STORED_FIELDS_FIELD);, +        PARSER.declareField((p, i, c) -> {, +            throw new ParsingException(p.getTokenLocation(), "The field [" +, +                SearchSourceBuilder.FIELDS_FIELD + "] is not longer supported, please use [" +, +                SearchSourceBuilder.STORED_FIELDS_FIELD + "] to retrieve stored fields or _source filtering " +, +                "if the field is not stored");, +        }, SearchSourceBuilder.FIELDS_FIELD, ObjectParser.ValueType.STRING_ARRAY);, +        PARSER.declareStringArray(InnerHitBuilder::setDocValueFields, SearchSourceBuilder.DOCVALUE_FIELDS_FIELD);, +    private List<String> storedFieldNames;, +    private List<String> docValueFields;, +        if (other.storedFieldNames != null) {, +            storedFieldNames = new ArrayList<>(other.storedFieldNames);, +        if (other.docValueFields != null) {, +            docValueFields = new ArrayList<>(other.docValueFields);, +    /**, +     * Read from a stream., +     */, +    public InnerHitBuilder(StreamInput in) throws IOException {, +        name = in.readOptionalString();, +        nestedPath = in.readOptionalString();, +        parentChildType = in.readOptionalString();, +        from = in.readVInt();, +        size = in.readVInt();, +        explain = in.readBoolean();, +        version = in.readBoolean();, +        trackScores = in.readBoolean();, +        storedFieldNames = (List<String>) in.readGenericValue();, +        docValueFields = (List<String>) in.readGenericValue();, +        if (in.readBoolean()) {, +            int size = in.readVInt();, +            scriptFields = new HashSet<>(size);]