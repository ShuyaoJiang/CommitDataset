[+++ b/docs/reference/docs/bulk.asciidoc, +[[bulk-wait-for-active-shards]], +=== Wait For Active Shards, +When making bulk calls, you can set the `wait_for_active_shards`, +parameter to require a minimum number of shard copies to be active, +before starting to process the bulk request. See , +<<index-wait-for-active-shards,here>> for further details and a usage, +example., +<<docs-refresh,refresh>>., +++ b/docs/reference/docs/bulk.asciidoc, +[[bulk-wait-for-active-shards]], +=== Wait For Active Shards, +When making bulk calls, you can set the `wait_for_active_shards`, +parameter to require a minimum number of shard copies to be active, +before starting to process the bulk request. See , +<<index-wait-for-active-shards,here>> for further details and a usage, +example., +<<docs-refresh,refresh>>., +++ b/docs/reference/docs/delete-by-query.asciidoc, +also supports `refresh`, `wait_for_completion`, `wait_for_active_shards`, and `timeout`., +`wait_for_active_shards` controls how many copies of a shard must be active, +before proceeding with the request. See <<index-wait-for-active-shards,here>> , +for details. `timeout` controls how long each write request waits for unavailable, +++ b/docs/reference/docs/bulk.asciidoc, +[[bulk-wait-for-active-shards]], +=== Wait For Active Shards, +When making bulk calls, you can set the `wait_for_active_shards`, +parameter to require a minimum number of shard copies to be active, +before starting to process the bulk request. See , +<<index-wait-for-active-shards,here>> for further details and a usage, +example., +<<docs-refresh,refresh>>., +++ b/docs/reference/docs/delete-by-query.asciidoc, +also supports `refresh`, `wait_for_completion`, `wait_for_active_shards`, and `timeout`., +`wait_for_active_shards` controls how many copies of a shard must be active, +before proceeding with the request. See <<index-wait-for-active-shards,here>> , +for details. `timeout` controls how long each write request waits for unavailable, +++ b/docs/reference/docs/delete.asciidoc, +[[delete-wait-for-active-shards]], +=== Wait For Active Shards, +When making delete requests, you can set the `wait_for_active_shards`, +parameter to require a minimum number of shard copies to be active, +before starting to process the delete request. See, +<<index-wait-for-active-shards,here>> for further details and a usage, +example., +++ b/docs/reference/docs/bulk.asciidoc, +[[bulk-wait-for-active-shards]], +=== Wait For Active Shards, +When making bulk calls, you can set the `wait_for_active_shards`, +parameter to require a minimum number of shard copies to be active, +before starting to process the bulk request. See , +<<index-wait-for-active-shards,here>> for further details and a usage, +example., +<<docs-refresh,refresh>>., +++ b/docs/reference/docs/delete-by-query.asciidoc, +also supports `refresh`, `wait_for_completion`, `wait_for_active_shards`, and `timeout`., +`wait_for_active_shards` controls how many copies of a shard must be active, +before proceeding with the request. See <<index-wait-for-active-shards,here>> , +for details. `timeout` controls how long each write request waits for unavailable, +++ b/docs/reference/docs/delete.asciidoc, +[[delete-wait-for-active-shards]], +=== Wait For Active Shards, +When making delete requests, you can set the `wait_for_active_shards`, +parameter to require a minimum number of shard copies to be active, +before starting to process the delete request. See, +<<index-wait-for-active-shards,here>> for further details and a usage, +example., +++ b/docs/reference/docs/index_.asciidoc, +NOTE:   Replica shards may not all be started when an indexing operation successfully returns (by default, only the , +        primary is required, but this behavior can be <<index-wait-for-active-shards,changed>>). In that case, , +        `total` will be equal to the total shards based on the `number_of_replicas` setting and `successful` will be , +        equal to the number of shards started (primary plus replicas). If there were no failures, the `failed` will be 0., +[[index-wait-for-active-shards]], +=== Wait For Active Shards, +To improve the resiliency of writes to the system, indexing operations , +can be configured to wait for a certain number of active shard copies , +before proceeding with the operation. If the requisite number of active, +shard copies are not available, then the write operation must wait and , +retry, until either the requisite shard copies have started or a timeout , +occurs. By default, write operations only wait for the primary shards , +to be active before proceeding (i.e. `wait_for_active_shards=1`)., +This default can be overridden in the index settings dynamically, +by setting `index.write.wait_for_active_shards`. To alter this behavior , +per operation, the `wait_for_active_shards` request parameter can be used., +Valid values are `all` or any positive integer up to the total number, +of configured copies per shard in the index (which is `number_of_replicas+1`)., +Specifying a negative value or a number greater than the number of , +shard copies will throw an error., +For example, suppose we have a cluster of three nodes, `A, `B`, and `C` and, +we create an index `index` with the number of replicas set to 3 (resulting in , +4 shard copies, one more copy than there are nodes). If we , +attempt an indexing operation, by default the operation will only ensure, +the primary copy of each shard is available before proceeding. This means, +that even if `B` and `C` went down, and `A` hosted the primary shard copies,, +the indexing operation would still proceed with only one copy of the data. , +If `wait_for_active_shards` is set on the request to `3` (and all 3 nodes, +are up), then the indexing operation will require 3 active shard copies , +before proceeding, a requirement which should be met because there are 3, +active nodes in the cluster, each one holding a copy of the shard. However,, +if we set `wait_for_active_shards` to `all` (or to `4`, which is the same), ]