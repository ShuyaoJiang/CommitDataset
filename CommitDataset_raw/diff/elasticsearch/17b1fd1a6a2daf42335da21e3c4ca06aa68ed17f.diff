[+++ b/src/main/java/org/elasticsearch/search/action/SearchServiceTransportAction.java, +    public static final String FREE_CONTEXT_SCROLL_ACTION_NAME = "indices:data/read/search[free_context/scroll]";, +        transportService.registerHandler(FREE_CONTEXT_SCROLL_ACTION_NAME, new ScrollFreeContextTransportHandler());, +            if (node.getVersion().onOrAfter(Version.V_1_4_0_Beta1)) {, +                //use the separate action for scroll when possible, +                transportService.sendRequest(node, FREE_CONTEXT_SCROLL_ACTION_NAME, new ScrollFreeContextRequest(request, contextId), new FreeContextResponseHandler(actionListener));, +            } else {, +                //fallback to the previous action name if the new one is not supported by the node we are talking to., +                //Do use the same request since it has the same binary format as the previous SearchFreeContextRequest (without the OriginalIndices addition)., +                transportService.sendRequest(node, FREE_CONTEXT_ACTION_NAME, new ScrollFreeContextRequest(request, contextId), new FreeContextResponseHandler(actionListener));, +            }, +    static class ScrollFreeContextRequest extends TransportRequest {, +        ScrollFreeContextRequest() {, +        ScrollFreeContextRequest(ClearScrollRequest request, long id) {, +            this((TransportRequest) request, id);, +        private ScrollFreeContextRequest(TransportRequest request, long id) {, +        }, +    }, +, +    static class SearchFreeContextRequest extends ScrollFreeContextRequest implements IndicesRequest {, +        private OriginalIndices originalIndices;, +, +        SearchFreeContextRequest() {, +        }, +, +        SearchFreeContextRequest(SearchRequest request, long id) {, +            super(request, id);, +            this.originalIndices = new OriginalIndices(request);, +        }, +, +        @Override, +        public String[] indices() {, +            if (originalIndices == null) {, +                return null;, +            }, +            return originalIndices.indices();, +        }, +, +        @Override, +        public IndicesOptions indicesOptions() {, +            if (originalIndices == null) {, +                return null;, +            }, +            return originalIndices.indicesOptions();, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);, +            originalIndices = OriginalIndices.readOriginalIndices(in);, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            OriginalIndices.writeOriginalIndices(originalIndices, out);, +    private abstract class BaseFreeContextTransportHandler<FreeContextRequest extends ScrollFreeContextRequest> extends BaseTransportRequestHandler<FreeContextRequest> {, +        @Override, +        public abstract FreeContextRequest newInstance();, +        public void messageReceived(FreeContextRequest request, TransportChannel channel) throws Exception {, +    class ScrollFreeContextTransportHandler extends BaseFreeContextTransportHandler<ScrollFreeContextRequest> {, +        @Override, +        public ScrollFreeContextRequest newInstance() {, +            return new ScrollFreeContextRequest();, +        }, +    }, +, +    class SearchFreeContextTransportHandler extends BaseFreeContextTransportHandler<SearchFreeContextRequest> {, +        @Override, +        public SearchFreeContextRequest newInstance() {, +            return new SearchFreeContextRequest();, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/search/action/SearchServiceTransportAction.java, +    public static final String FREE_CONTEXT_SCROLL_ACTION_NAME = "indices:data/read/search[free_context/scroll]";, +        transportService.registerHandler(FREE_CONTEXT_SCROLL_ACTION_NAME, new ScrollFreeContextTransportHandler());, +            if (node.getVersion().onOrAfter(Version.V_1_4_0_Beta1)) {, +                //use the separate action for scroll when possible, +                transportService.sendRequest(node, FREE_CONTEXT_SCROLL_ACTION_NAME, new ScrollFreeContextRequest(request, contextId), new FreeContextResponseHandler(actionListener));, +            } else {, +                //fallback to the previous action name if the new one is not supported by the node we are talking to., +                //Do use the same request since it has the same binary format as the previous SearchFreeContextRequest (without the OriginalIndices addition)., +                transportService.sendRequest(node, FREE_CONTEXT_ACTION_NAME, new ScrollFreeContextRequest(request, contextId), new FreeContextResponseHandler(actionListener));, +            }, +    static class ScrollFreeContextRequest extends TransportRequest {, +        ScrollFreeContextRequest() {, +        ScrollFreeContextRequest(ClearScrollRequest request, long id) {, +            this((TransportRequest) request, id);, +        private ScrollFreeContextRequest(TransportRequest request, long id) {, +        }, +    }, +, +    static class SearchFreeContextRequest extends ScrollFreeContextRequest implements IndicesRequest {, +        private OriginalIndices originalIndices;, +, +        SearchFreeContextRequest() {, +        }, +, +        SearchFreeContextRequest(SearchRequest request, long id) {]