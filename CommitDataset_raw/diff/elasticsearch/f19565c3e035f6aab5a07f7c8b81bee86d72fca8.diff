[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.expression.Alias;, +                    // take aliases declared inside the aggregates which point to the grouping (but are not included in there), +                    // to correlate them to the order, +                    List<Expression> groupingAndMatchingAggregatesAliases = new ArrayList<>(a.groupings());, +                    , +                    a.aggregates().forEach(as -> {, +                        if (as instanceof Alias) {, +                            Alias al = (Alias) as;, +                            if (Expressions.anyMatch(a.groupings(), g -> Expressions.equalsAsAttribute(al.child(), g))) {, +                                groupingAndMatchingAggregatesAliases.add(al);, +                            }, +                        }, +                    });, +                    , +                    if (Expressions.anyMatch(groupingAndMatchingAggregatesAliases,, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.expression.Alias;, +                    // take aliases declared inside the aggregates which point to the grouping (but are not included in there), +                    // to correlate them to the order, +                    List<Expression> groupingAndMatchingAggregatesAliases = new ArrayList<>(a.groupings());, +                    , +                    a.aggregates().forEach(as -> {, +                        if (as instanceof Alias) {, +                            Alias al = (Alias) as;, +                            if (Expressions.anyMatch(a.groupings(), g -> Expressions.equalsAsAttribute(al.child(), g))) {, +                                groupingAndMatchingAggregatesAliases.add(al);, +                            }, +                        }, +                    });, +                    , +                    if (Expressions.anyMatch(groupingAndMatchingAggregatesAliases,, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +import org.elasticsearch.xpack.sql.plan.logical.LogicalPlan;, +    private LogicalPlan accepted(String sql) {, +        Map<String, EsField> mapping = TypesTests.loadMapping("mapping-multi-field-with-nested.json");, +        EsIndex test = new EsIndex("test", mapping);, +        Analyzer analyzer = new Analyzer(new FunctionRegistry(), IndexResolution.valid(test), TimeZone.getTimeZone("UTC"));, +        return analyzer.analyze(parser.createStatement(sql), true);, +    }, +, +    public void testGroupByOrderByAliasedInSelectAllowed() {, +        LogicalPlan lp = accepted("SELECT text t FROM test GROUP BY text ORDER BY t");, +        assertNotNull(lp);, +    }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.expression.Alias;, +                    // take aliases declared inside the aggregates which point to the grouping (but are not included in there), +                    // to correlate them to the order, +                    List<Expression> groupingAndMatchingAggregatesAliases = new ArrayList<>(a.groupings());, +                    , +                    a.aggregates().forEach(as -> {, +                        if (as instanceof Alias) {, +                            Alias al = (Alias) as;, +                            if (Expressions.anyMatch(a.groupings(), g -> Expressions.equalsAsAttribute(al.child(), g))) {, +                                groupingAndMatchingAggregatesAliases.add(al);, +                            }, +                        }, +                    });, +                    , +                    if (Expressions.anyMatch(groupingAndMatchingAggregatesAliases,, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +import org.elasticsearch.xpack.sql.plan.logical.LogicalPlan;, +    private LogicalPlan accepted(String sql) {, +        Map<String, EsField> mapping = TypesTests.loadMapping("mapping-multi-field-with-nested.json");, +        EsIndex test = new EsIndex("test", mapping);, +        Analyzer analyzer = new Analyzer(new FunctionRegistry(), IndexResolution.valid(test), TimeZone.getTimeZone("UTC"));, +        return analyzer.analyze(parser.createStatement(sql), true);, +    }, +, +    public void testGroupByOrderByAliasedInSelectAllowed() {, +        LogicalPlan lp = accepted("SELECT text t FROM test GROUP BY text ORDER BY t");, +        assertNotNull(lp);, +    }, +, +++ b/x-pack/qa/sql/src/main/resources/agg.sql-spec, +groupByOnNumberWithAliasInSelect, +SELECT emp_no e FROM "test_emp" WHERE emp_no < 10020 GROUP BY emp_no ORDER BY e DESC;]