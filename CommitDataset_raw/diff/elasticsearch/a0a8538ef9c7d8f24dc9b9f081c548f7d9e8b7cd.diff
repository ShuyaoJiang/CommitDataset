[+++ b/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzer.java, +import org.apache.lucene.document.Fieldable;, +public final class CustomAnalyzer extends Analyzer {, +    private final int positionIncrementGap;, +    private final int offsetGap;, +        this(tokenizerFactory, charFilters, tokenFilters, 0, -1);, +    }, +, +    public CustomAnalyzer(TokenizerFactory tokenizerFactory, CharFilterFactory[] charFilters, TokenFilterFactory[] tokenFilters,, +                          int positionOffsetGap, int offsetGap) {, +        this.positionIncrementGap = positionOffsetGap;, +        this.offsetGap = offsetGap;, +    public int getOffsetGap(Fieldable field) {, +        if (offsetGap < 0) {, +            return super.getOffsetGap(field);, +        }, +        return this.offsetGap;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzer.java, +import org.apache.lucene.document.Fieldable;, +public final class CustomAnalyzer extends Analyzer {, +    private final int positionIncrementGap;, +    private final int offsetGap;, +        this(tokenizerFactory, charFilters, tokenFilters, 0, -1);, +    }, +, +    public CustomAnalyzer(TokenizerFactory tokenizerFactory, CharFilterFactory[] charFilters, TokenFilterFactory[] tokenFilters,, +                          int positionOffsetGap, int offsetGap) {, +        this.positionIncrementGap = positionOffsetGap;, +        this.offsetGap = offsetGap;, +    public int getOffsetGap(Fieldable field) {, +        if (offsetGap < 0) {, +            return super.getOffsetGap(field);, +        }, +        return this.offsetGap;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzerProvider.java, +        int positionOffsetGap = analyzerSettings.getAsInt("position_offset_gap", 0);, +        int offsetGap = analyzerSettings.getAsInt("offset_gap", -1);, +, +                tokenFilters.toArray(new TokenFilterFactory[tokenFilters.size()]),, +                positionOffsetGap,, +                offsetGap, +        );, +++ b/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzer.java, +import org.apache.lucene.document.Fieldable;, +public final class CustomAnalyzer extends Analyzer {, +    private final int positionIncrementGap;, +    private final int offsetGap;, +        this(tokenizerFactory, charFilters, tokenFilters, 0, -1);, +    }, +, +    public CustomAnalyzer(TokenizerFactory tokenizerFactory, CharFilterFactory[] charFilters, TokenFilterFactory[] tokenFilters,, +                          int positionOffsetGap, int offsetGap) {, +        this.positionIncrementGap = positionOffsetGap;, +        this.offsetGap = offsetGap;, +    public int getOffsetGap(Fieldable field) {, +        if (offsetGap < 0) {, +            return super.getOffsetGap(field);, +        }, +        return this.offsetGap;, +    }, +, +    @Override, +++ b/src/main/java/org/elasticsearch/index/analysis/CustomAnalyzerProvider.java, +        int positionOffsetGap = analyzerSettings.getAsInt("position_offset_gap", 0);, +        int offsetGap = analyzerSettings.getAsInt("offset_gap", -1);, +, +                tokenFilters.toArray(new TokenFilterFactory[tokenFilters.size()]),, +                positionOffsetGap,, +                offsetGap, +        );, +++ /dev/null]