[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsAction.java, +import org.elasticsearch.xpack.core.action.AbstractGetResourcesRequest;, +import org.elasticsearch.xpack.core.action.AbstractGetResourcesResponse;, +import org.elasticsearch.xpack.core.action.util.PageParams;, +import org.elasticsearch.xpack.core.action.util.QueryPage;, +, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +    public static class Request extends AbstractGetResourcesRequest implements ToXContent {, +, +        private static final int MAX_SIZE_RETURN = 1000;, +            super(id, PageParams.defaultParams(), true);, +            super(null, PageParams.defaultParams(), true);, +            readFrom(in);, +            return getResourceId();, +            ActionRequestValidationException exception = null;, +            if (getPageParams() != null && getPageParams().getSize() > MAX_SIZE_RETURN) {, +                exception = addValidationError("Param [" + PageParams.SIZE.getPreferredName() +, +                    "] has a max acceptable value of [" + MAX_SIZE_RETURN + "]", exception);, +            }, +            return exception;, +            builder.field(DataFrameField.ID.getPreferredName(), getResourceId());, +        public String getResourceIdField() {, +            return DataFrameField.ID.getPreferredName();, +    public static class Response extends AbstractGetResourcesResponse<DataFrameTransformConfig> implements Writeable, ToXContentObject {, +            super(new QueryPage<>(transformConfigs, transformConfigs.size(), DataFrameField.TRANSFORMS));, +            super();, +            return getResources().results();, +            builder.field(DataFrameField.COUNT.getPreferredName(), getResources().count());, +            for (DataFrameTransformConfig configResponse : getResources().results()) {, +        protected Reader<DataFrameTransformConfig> getReader() {, +            return DataFrameTransformConfig::new;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsAction.java, +import org.elasticsearch.xpack.core.action.AbstractGetResourcesRequest;, +import org.elasticsearch.xpack.core.action.AbstractGetResourcesResponse;, +import org.elasticsearch.xpack.core.action.util.PageParams;, +import org.elasticsearch.xpack.core.action.util.QueryPage;, +, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +    public static class Request extends AbstractGetResourcesRequest implements ToXContent {, +, +        private static final int MAX_SIZE_RETURN = 1000;, +            super(id, PageParams.defaultParams(), true);, +            super(null, PageParams.defaultParams(), true);, +            readFrom(in);, +            return getResourceId();, +            ActionRequestValidationException exception = null;, +            if (getPageParams() != null && getPageParams().getSize() > MAX_SIZE_RETURN) {, +                exception = addValidationError("Param [" + PageParams.SIZE.getPreferredName() +, +                    "] has a max acceptable value of [" + MAX_SIZE_RETURN + "]", exception);, +            }, +            return exception;, +            builder.field(DataFrameField.ID.getPreferredName(), getResourceId());, +        public String getResourceIdField() {, +            return DataFrameField.ID.getPreferredName();, +    public static class Response extends AbstractGetResourcesResponse<DataFrameTransformConfig> implements Writeable, ToXContentObject {, +            super(new QueryPage<>(transformConfigs, transformConfigs.size(), DataFrameField.TRANSFORMS));, +            super();, +            return getResources().results();, +            builder.field(DataFrameField.COUNT.getPreferredName(), getResources().count());, +            for (DataFrameTransformConfig configResponse : getResources().results()) {, +        protected Reader<DataFrameTransformConfig> getReader() {, +            return DataFrameTransformConfig::new;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/transforms/DataFrameTransformStateAndStats.java, +import org.elasticsearch.xpack.core.indexing.IndexerState;, +    public static DataFrameTransformStateAndStats initialStateAndStats(String id) {, +        return new DataFrameTransformStateAndStats(id,, +            new DataFrameTransformState(IndexerState.STOPPED, null, 0),, +            new DataFrameIndexerTransformStats());, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/dataframe/action/GetDataFrameTransformsAction.java, +import org.elasticsearch.xpack.core.action.AbstractGetResourcesRequest;, +import org.elasticsearch.xpack.core.action.AbstractGetResourcesResponse;, +import org.elasticsearch.xpack.core.action.util.PageParams;, +import org.elasticsearch.xpack.core.action.util.QueryPage;, +, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +    public static class Request extends AbstractGetResourcesRequest implements ToXContent {, +, +        private static final int MAX_SIZE_RETURN = 1000;, +            super(id, PageParams.defaultParams(), true);, +            super(null, PageParams.defaultParams(), true);, +            readFrom(in);, +            return getResourceId();, +            ActionRequestValidationException exception = null;, +            if (getPageParams() != null && getPageParams().getSize() > MAX_SIZE_RETURN) {, +                exception = addValidationError("Param [" + PageParams.SIZE.getPreferredName() +, +                    "] has a max acceptable value of [" + MAX_SIZE_RETURN + "]", exception);, +            }, +            return exception;, +            builder.field(DataFrameField.ID.getPreferredName(), getResourceId());, +        public String getResourceIdField() {, +            return DataFrameField.ID.getPreferredName();, +    public static class Response extends AbstractGetResourcesResponse<DataFrameTransformConfig> implements Writeable, ToXContentObject {, +            super(new QueryPage<>(transformConfigs, transformConfigs.size(), DataFrameField.TRANSFORMS));, +            super();, +            return getResources().results();, +            builder.field(DataFrameField.COUNT.getPreferredName(), getResources().count());, +            for (DataFrameTransformConfig configResponse : getResources().results()) {, +        protected Reader<DataFrameTransformConfig> getReader() {]