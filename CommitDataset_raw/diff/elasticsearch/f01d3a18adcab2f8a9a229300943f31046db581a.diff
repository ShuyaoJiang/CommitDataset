[+++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +    public abstract int setDocument(int docId);, +    public abstract double nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +    public abstract int setDocument(int docId);, +    public abstract double nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterBytesValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +    public abstract int setDocument(int docId);, +    public abstract double nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterBytesValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterDoubleValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +    public abstract int setDocument(int docId);, +    public abstract double nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterBytesValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterDoubleValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterLongValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +    public abstract int setDocument(int docId);, +    public abstract double nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterBytesValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterDoubleValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterLongValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/GeoPointValues.java, +    public abstract int setDocument(int docId);, +    public abstract GeoPoint nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +    public abstract int setDocument(int docId);, +    public abstract double nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterBytesValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterDoubleValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterLongValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/GeoPointValues.java, +    public abstract int setDocument(int docId);, +    public abstract GeoPoint nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/LongValues.java, +    public abstract int setDocument(int docId);, +    public abstract long nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +    public abstract int setDocument(int docId);, +    public abstract BytesRef nextValue();, +            assert (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) == length > 0 : "Doc: [" + docId + "] hasValue: [" + (ordinals.getOrd(docId) != Ordinals.MISSING_ORDINAL) + "] but length is [" + length + "]";, +++ b/src/main/java/org/elasticsearch/index/fielddata/DoubleValues.java, +    public abstract int setDocument(int docId);, +    public abstract double nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterBytesValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterDoubleValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/FilterLongValues.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/GeoPointValues.java, +    public abstract int setDocument(int docId);, +    public abstract GeoPoint nextValue();, +++ b/src/main/java/org/elasticsearch/index/fielddata/LongValues.java]