[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +        Params params = Params.builder();, +        params.withIndicesOptions(rankEvalRequest.indicesOptions());, +        return new Request(HttpGet.METHOD_NAME, endpoint, params.getParams(), entity);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +        Params params = Params.builder();, +        params.withIndicesOptions(rankEvalRequest.indicesOptions());, +        return new Request(HttpGet.METHOD_NAME, endpoint, params.getParams(), entity);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.support.IndicesOptions;, +import java.util.Map;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +        // add another index to test basic multi index support, +        client().performRequest("PUT", "/index2/doc/7", Collections.emptyMap(), doc);, +        client().performRequest("POST", "/index2/_refresh");, +        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "2", "3", "4", "5");, +        amsterdamRatedDocs.addAll(createRelevant("index2", "7"));, +        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery);, +        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" });, +        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval,, +        // the expected Prec@ for the first query is 5/7 and the expected Prec@ for the second is 1/7, divided by 2 to get the average, +        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0;, +        Map<String, EvalQueryQuality> partialResults = response.getPartialResults();, +        assertEquals(2, partialResults.size());, +        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query");, +        assertEquals(2, filterUnknownDocuments(amsterdamQueryQuality.getHitsAndRatings()).size());, +        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings();, +        assertEquals(7, hitsAndRatings.size());, +        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query");, +        assertEquals(6, filterUnknownDocuments(berlinQueryQuality.getHitsAndRatings()).size());, +        hitsAndRatings = berlinQueryQuality.getHitsAndRatings();, +        assertEquals(7, hitsAndRatings.size());, +, +        // now try this when test2 is closed, +        client().performRequest("POST", "index2/_close", Collections.emptyMap());, +        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS));, +        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync);, +        return Stream.of(docs).map(s -> new RatedDocument(indexName, s, 1)).collect(Collectors.toList());, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +        Params params = Params.builder();, +        params.withIndicesOptions(rankEvalRequest.indicesOptions());, +        return new Request(HttpGet.METHOD_NAME, endpoint, params.getParams(), entity);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.support.IndicesOptions;, +import java.util.Map;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +        // add another index to test basic multi index support, +        client().performRequest("PUT", "/index2/doc/7", Collections.emptyMap(), doc);, +        client().performRequest("POST", "/index2/_refresh");, +        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "2", "3", "4", "5");, +        amsterdamRatedDocs.addAll(createRelevant("index2", "7"));, +        RatedRequest amsterdamRequest = new RatedRequest("amsterdam_query", amsterdamRatedDocs, testQuery);, +        RankEvalRequest rankEvalRequest = new RankEvalRequest(spec, new String[] { "index", "index2" });, +        RankEvalResponse response = execute(rankEvalRequest, highLevelClient()::rankEval,, +        // the expected Prec@ for the first query is 5/7 and the expected Prec@ for the second is 1/7, divided by 2 to get the average, +        double expectedPrecision = (1.0 / 7.0 + 5.0 / 7.0) / 2.0;, +        Map<String, EvalQueryQuality> partialResults = response.getPartialResults();, +        assertEquals(2, partialResults.size());, +        EvalQueryQuality amsterdamQueryQuality = partialResults.get("amsterdam_query");, +        assertEquals(2, filterUnknownDocuments(amsterdamQueryQuality.getHitsAndRatings()).size());, +        List<RatedSearchHit> hitsAndRatings = amsterdamQueryQuality.getHitsAndRatings();, +        assertEquals(7, hitsAndRatings.size());, +        EvalQueryQuality berlinQueryQuality = partialResults.get("berlin_query");, +        assertEquals(6, filterUnknownDocuments(berlinQueryQuality.getHitsAndRatings()).size());, +        hitsAndRatings = berlinQueryQuality.getHitsAndRatings();, +        assertEquals(7, hitsAndRatings.size());, +, +        // now try this when test2 is closed, +        client().performRequest("POST", "index2/_close", Collections.emptyMap());, +        rankEvalRequest.indicesOptions(IndicesOptions.fromParameters(null, "true", null, SearchRequest.DEFAULT_INDICES_OPTIONS));, +        response = execute(rankEvalRequest, highLevelClient()::rankEval, highLevelClient()::rankEvalAsync);, +        return Stream.of(docs).map(s -> new RatedDocument(indexName, s, 1)).collect(Collectors.toList());, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RequestTests.java, +        Map<String, String> expectedParams = new HashMap<>();, +        setRandomIndicesOptions(rankEvalRequest::indicesOptions, rankEvalRequest::indicesOptions, expectedParams);, +        assertEquals(3, request.getParameters().size());, +        assertEquals(expectedParams, request.getParameters());, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +        Params params = Params.builder();, +        params.withIndicesOptions(rankEvalRequest.indicesOptions());, +        return new Request(HttpGet.METHOD_NAME, endpoint, params.getParams(), entity);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RankEvalIT.java, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.support.IndicesOptions;, +import java.util.Map;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +        // add another index to test basic multi index support, +        client().performRequest("PUT", "/index2/doc/7", Collections.emptyMap(), doc);, +        client().performRequest("POST", "/index2/_refresh");, +        List<RatedDocument> amsterdamRatedDocs = createRelevant("index" , "2", "3", "4", "5");, +        amsterdamRatedDocs.addAll(createRelevant("index2", "7"));]