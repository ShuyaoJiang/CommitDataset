[+++ b/core/src/main/java/org/elasticsearch/common/ParseField.java, + * Holds a field that can be found in a request while parsing and its different, + * variants, which may be deprecated., +    /**, +     * @param name, +     *            the primary name for this field. This will be returned by, +     *            {@link #getPreferredName()}, +     * @param deprecatedNames, +     *            names for this field which are deprecated and will not be, +     *            accepted when strict matching is used., +     */, +    /**, +     * @return the preferred name used for this field, +     */, +    /**, +     * @return All names for this field regardless of whether they are, +     *         deprecated, +     */, +    /**, +     * @param deprecatedNames, +     *            deprecated names to include with the returned, +     *            {@link ParseField}, +     * @return a new {@link ParseField} using the preferred name from this one, +     *         but with the specified deprecated names, +     */, +     * Return a new ParseField where all field names are deprecated and replaced, +     * with {@code allReplacedWith}., +    /**, +     * @param fieldName, +     *            the field name to match against this {@link ParseField}, +     * @param strict, +     *            if true an exception will be thrown if a deprecated field name, +     *            is given. If false the deprecated name will be matched but a, +     *            message will also be logged to the {@link DeprecationLogger}, +     * @return true if <code>fieldName</code> matches any of the acceptable, +     *         names for this {@link ParseField}., +     */, +    boolean match(String fieldName, boolean strict) {, +        // if this parse field has not been completely deprecated then try to, +        // match the preferred name, +        if (allReplacedWith == null && fieldName.equals(name)) {, +        // Now try to match against one of the deprecated names. Note that if, +        // the parse field is entirely deprecated (allReplacedWith != null) all, +        // fields will be in the deprecatedNames array, +            if (fieldName.equals(depName)) {, +                msg = "Deprecated field [" + fieldName + "] used, expected [" + name + "] instead";, +                    // If the field is entirely deprecated then there is no, +                    // preferred name so instead use the `allReplaceWith`, +                    // message to indicate what should be used instead, +                    msg = "Deprecated field [" + fieldName + "] used, replaced by [" + allReplacedWith + "]";, +    /**, +     * @return the message to use if this {@link ParseField} has been entirely, +     *         deprecated in favor of something else. This method will return, +     *         <code>null</code> if the ParseField has not been completely, +     *         deprecated., +     */, +    /**, +     * @return an array of the names for the {@link ParseField} which are, +     *         deprecated., +     */]