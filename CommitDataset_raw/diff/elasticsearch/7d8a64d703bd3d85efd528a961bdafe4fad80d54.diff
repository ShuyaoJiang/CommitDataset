[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/user/PutUserRequest.java, +    private char[] password;, +        if (metadata != null && metadata.keySet().stream().anyMatch(s -> s.startsWith("_"))) {, +            validationException = addValidationError("metadata keys may not start with [_]", validationException);, +        }, +        if (password != null && passwordHash != null) {, +            validationException = addValidationError("only one of [password, passwordHash] can be provided", validationException);, +    public void enabled(boolean enabled) {, +        this.enabled = enabled;, +    }, +, +    public void password(@Nullable char[] password) {, +        this.password = password;, +    public boolean enabled() {, +        return enabled;, +    @Nullable, +    public char[] password() {, +        return password;, +    }, +, +        passwordHash = readCharArrayFromStream(in);, +        writeCharArrayToStream(out, passwordHash);, +        if (password != null) {, +            throw new IllegalStateException("password cannot be serialized. it is only used for HL rest");, +, +    private static char[] readCharArrayFromStream(StreamInput in) throws IOException {, +        BytesReference charBytesRef = in.readBytesReference();, +        if (charBytesRef == BytesArray.EMPTY) {, +            return null;, +        } else {, +            return CharArrays.utf8BytesToChars(BytesReference.toBytes(charBytesRef));, +        }, +    }, +, +    private static void writeCharArrayToStream(StreamOutput out, char[] chars) throws IOException {, +        final BytesReference charBytesRef;, +        if (chars == null) {, +            charBytesRef = null;, +        } else {, +            charBytesRef = new BytesArray(CharArrays.toUtf8Bytes(chars));, +        }, +        out.writeBytesReference(charBytesRef);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/user/PutUserRequest.java, +    private char[] password;, +        if (metadata != null && metadata.keySet().stream().anyMatch(s -> s.startsWith("_"))) {, +            validationException = addValidationError("metadata keys may not start with [_]", validationException);, +        }, +        if (password != null && passwordHash != null) {, +            validationException = addValidationError("only one of [password, passwordHash] can be provided", validationException);, +    public void enabled(boolean enabled) {, +        this.enabled = enabled;, +    }, +, +    public void password(@Nullable char[] password) {, +        this.password = password;, +    public boolean enabled() {, +        return enabled;, +    @Nullable, +    public char[] password() {, +        return password;, +    }, +, +        passwordHash = readCharArrayFromStream(in);, +        writeCharArrayToStream(out, passwordHash);, +        if (password != null) {, +            throw new IllegalStateException("password cannot be serialized. it is only used for HL rest");, +, +    private static char[] readCharArrayFromStream(StreamInput in) throws IOException {, +        BytesReference charBytesRef = in.readBytesReference();, +        if (charBytesRef == BytesArray.EMPTY) {, +            return null;, +        } else {, +            return CharArrays.utf8BytesToChars(BytesReference.toBytes(charBytesRef));, +        }, +    }, +, +    private static void writeCharArrayToStream(StreamOutput out, char[] chars) throws IOException {, +        final BytesReference charBytesRef;, +        if (chars == null) {, +            charBytesRef = null;, +        } else {, +            charBytesRef = new BytesArray(CharArrays.toUtf8Bytes(chars));, +        }, +        out.writeBytesReference(charBytesRef);, +    }, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/user/TransportPutUserAction.java, +import org.elasticsearch.action.ActionRequestValidationException;, +import org.elasticsearch.xpack.core.security.support.Validation;, +import org.elasticsearch.xpack.core.security.user.XPackSecurityUser;, +import static org.elasticsearch.action.ValidateActions.addValidationError;, +, +        final ActionRequestValidationException validationException = validateRequest(request);, +        if (validationException != null) {, +            listener.onFailure(validationException);, +, +    private ActionRequestValidationException validateRequest(PutUserRequest request) {, +        ActionRequestValidationException validationException = null;, +        final String username = request.username();, +        if (ClientReservedRealm.isReserved(username, settings)) {]