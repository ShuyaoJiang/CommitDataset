[+++ b/docs/reference/modules/scripting/painless.asciidoc, +          "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +        "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +`input.doc['first'].0` and `input.doc['last'].0`., +        "inline": "input.doc['first'].0 + ' ' + input.doc['last'].0", +        "inline": "def first = input.doc['first'].0; def last = input.doc['last'].0; return first + ' ' + last;", +        "inline": "String first = (String)((List)((Map)input.get('doc')).get('first')).get(0); String last = (String)((List)((Map)input.get('doc')).get('last')).get(0); return first + ' ' + last;", +++ b/docs/reference/modules/scripting/painless.asciidoc, +          "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +        "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +`input.doc['first'].0` and `input.doc['last'].0`., +        "inline": "input.doc['first'].0 + ' ' + input.doc['last'].0", +        "inline": "def first = input.doc['first'].0; def last = input.doc['last'].0; return first + ' ' + last;", +        "inline": "String first = (String)((List)((Map)input.get('doc')).get('first')).get(0); String last = (String)((List)((Map)input.get('doc')).get('last')).get(0); return first + ' ' + last;", +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: ( '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"' ) | ( '\'' ( '\\\'' | '\\\\' | ~[\\"] )*? '\'' );, +++ b/docs/reference/modules/scripting/painless.asciidoc, +          "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +        "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +`input.doc['first'].0` and `input.doc['last'].0`., +        "inline": "input.doc['first'].0 + ' ' + input.doc['last'].0", +        "inline": "def first = input.doc['first'].0; def last = input.doc['last'].0; return first + ' ' + last;", +        "inline": "String first = (String)((List)((Map)input.get('doc')).get('first')).get(0); String last = (String)((List)((Map)input.get('doc')).get('last')).get(0); return first + ' ' + last;", +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: ( '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"' ) | ( '\'' ( '\\\'' | '\\\\' | ~[\\"] )*? '\'' );, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/docs/reference/modules/scripting/painless.asciidoc, +          "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +        "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +`input.doc['first'].0` and `input.doc['last'].0`., +        "inline": "input.doc['first'].0 + ' ' + input.doc['last'].0", +        "inline": "def first = input.doc['first'].0; def last = input.doc['last'].0; return first + ' ' + last;", +        "inline": "String first = (String)((List)((Map)input.get('doc')).get('first')).get(0); String last = (String)((List)((Map)input.get('doc')).get('last')).get(0); return first + ' ' + last;", +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: ( '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"' ) | ( '\'' ( '\\\'' | '\\\\' | ~[\\"] )*? '\'' );, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +++ b/docs/reference/modules/scripting/painless.asciidoc, +          "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +        "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +`input.doc['first'].0` and `input.doc['last'].0`., +        "inline": "input.doc['first'].0 + ' ' + input.doc['last'].0", +        "inline": "def first = input.doc['first'].0; def last = input.doc['last'].0; return first + ' ' + last;", +        "inline": "String first = (String)((List)((Map)input.get('doc')).get('first')).get(0); String last = (String)((List)((Map)input.get('doc')).get('last')).get(0); return first + ' ' + last;", +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: ( '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"' ) | ( '\'' ( '\\\'' | '\\\\' | ~[\\"] )*? '\'' );, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    case STRING:, +                    case STRING:, +            case STRING:, +                switch (to.sort) {, +                    case CHAR:, +                    case CHAR_OBJ:, +                        if (explicit), +                            return checkTransform(source, cast);, +, +                        break;, +                }, +            throw new IllegalArgumentException(AnalyzerUtility.error(source) +, +                "Cannot cast constant from [" + transform.from.name + "] to [" + transform.to.name + "].");, +++ b/docs/reference/modules/scripting/painless.asciidoc, +          "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +        "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +`input.doc['first'].0` and `input.doc['last'].0`., +        "inline": "input.doc['first'].0 + ' ' + input.doc['last'].0", +        "inline": "def first = input.doc['first'].0; def last = input.doc['last'].0; return first + ' ' + last;", +        "inline": "String first = (String)((List)((Map)input.get('doc')).get('first')).get(0); String last = (String)((List)((Map)input.get('doc')).get('last')).get(0); return first + ' ' + last;", +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: ( '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"' ) | ( '\'' ( '\\\'' | '\\\\' | ~[\\"] )*? '\'' );, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +                    case STRING:, +                    case STRING:, +            case STRING:, +                switch (to.sort) {, +                    case CHAR:, +                    case CHAR_OBJ:, +                        if (explicit), +                            return checkTransform(source, cast);, +, +                        break;, +                }, +            throw new IllegalArgumentException(AnalyzerUtility.error(source) +, +                "Cannot cast constant from [" + transform.from.name + "] to [" + transform.to.name + "].");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerExpression.java, +++ b/docs/reference/modules/scripting/painless.asciidoc, +          "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +        "inline": "int total = 0; for (int i = 0; i < input.doc['goals'].size(); ++i) { total += input.doc['goals'][i]; } return total;", +`input.doc['first'].0` and `input.doc['last'].0`., +        "inline": "input.doc['first'].0 + ' ' + input.doc['last'].0", +        "inline": "def first = input.doc['first'].0; def last = input.doc['last'].0; return first + ' ' + last;", +        "inline": "String first = (String)((List)((Map)input.get('doc')).get('first')).get(0); String last = (String)((List)((Map)input.get('doc')).get('last')).get(0); return first + ' ' + last;", +++ b/modules/lang-painless/src/main/antlr/PainlessLexer.g4, +STRING: ( '"' ( '\\"' | '\\\\' | ~[\\"] )*? '"' ) | ( '\'' ( '\\\'' | '\\\\' | ~[\\"] )*? '\'' );, +++ b/modules/lang-painless/src/main/antlr/PainlessParser.g4, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java]