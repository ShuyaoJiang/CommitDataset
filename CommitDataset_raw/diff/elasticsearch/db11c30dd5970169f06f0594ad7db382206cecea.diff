[+++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private final BlockingQueue<ShardRouting> failedShardQueue = ConcurrentCollections.newBlockingQueue();, +        failedShardQueue.add(shardRouting);, +                List<ShardRouting> shards = new ArrayList<ShardRouting>();, +                failedShardQueue.drainTo(shards);, +, +                RoutingAllocation.Result routingResult = allocationService.applyFailedShards(currentState, shards);, +++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private final BlockingQueue<ShardRouting> failedShardQueue = ConcurrentCollections.newBlockingQueue();, +        failedShardQueue.add(shardRouting);, +                List<ShardRouting> shards = new ArrayList<ShardRouting>();, +                failedShardQueue.drainTo(shards);, +, +                RoutingAllocation.Result routingResult = allocationService.applyFailedShards(currentState, shards);, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import com.google.common.collect.ImmutableList;, +    public RoutingAllocation.Result applyFailedShard(ClusterState clusterState, ShardRouting failedShard) {, +        return applyFailedShards(clusterState, ImmutableList.of(failedShard));, +    }, +, +    public RoutingAllocation.Result applyFailedShards(ClusterState clusterState, List<ShardRouting> failedShards) {, +        FailedRerouteAllocation allocation = new FailedRerouteAllocation(allocationDeciders, routingNodes, clusterState.nodes(), failedShards);, +        boolean changed = false;, +        for (ShardRouting failedShard : failedShards) {, +            changed |= applyFailedShard(allocation, failedShard, true);, +        }, +++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private final BlockingQueue<ShardRouting> failedShardQueue = ConcurrentCollections.newBlockingQueue();, +        failedShardQueue.add(shardRouting);, +                List<ShardRouting> shards = new ArrayList<ShardRouting>();, +                failedShardQueue.drainTo(shards);, +, +                RoutingAllocation.Result routingResult = allocationService.applyFailedShards(currentState, shards);, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import com.google.common.collect.ImmutableList;, +    public RoutingAllocation.Result applyFailedShard(ClusterState clusterState, ShardRouting failedShard) {, +        return applyFailedShards(clusterState, ImmutableList.of(failedShard));, +    }, +, +    public RoutingAllocation.Result applyFailedShards(ClusterState clusterState, List<ShardRouting> failedShards) {, +        FailedRerouteAllocation allocation = new FailedRerouteAllocation(allocationDeciders, routingNodes, clusterState.nodes(), failedShards);, +        boolean changed = false;, +        for (ShardRouting failedShard : failedShards) {, +            changed |= applyFailedShard(allocation, failedShard, true);, +        }, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/FailedRerouteAllocation.java, +import java.util.List;, +, +    private final List<ShardRouting> failedShards;, +    public FailedRerouteAllocation(AllocationDeciders deciders, RoutingNodes routingNodes, DiscoveryNodes nodes, List<ShardRouting> failedShards) {, +        this.failedShards = failedShards;, +    public List<ShardRouting> failedShards() {, +        return failedShards;, +++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private final BlockingQueue<ShardRouting> failedShardQueue = ConcurrentCollections.newBlockingQueue();, +        failedShardQueue.add(shardRouting);, +                List<ShardRouting> shards = new ArrayList<ShardRouting>();, +                failedShardQueue.drainTo(shards);, +, +                RoutingAllocation.Result routingResult = allocationService.applyFailedShards(currentState, shards);, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import com.google.common.collect.ImmutableList;, +    public RoutingAllocation.Result applyFailedShard(ClusterState clusterState, ShardRouting failedShard) {, +        return applyFailedShards(clusterState, ImmutableList.of(failedShard));, +    }, +, +    public RoutingAllocation.Result applyFailedShards(ClusterState clusterState, List<ShardRouting> failedShards) {, +        FailedRerouteAllocation allocation = new FailedRerouteAllocation(allocationDeciders, routingNodes, clusterState.nodes(), failedShards);, +        boolean changed = false;, +        for (ShardRouting failedShard : failedShards) {, +            changed |= applyFailedShard(allocation, failedShard, true);, +        }, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/FailedRerouteAllocation.java, +import java.util.List;, +, +    private final List<ShardRouting> failedShards;, +    public FailedRerouteAllocation(AllocationDeciders deciders, RoutingNodes routingNodes, DiscoveryNodes nodes, List<ShardRouting> failedShards) {, +        this.failedShards = failedShards;, +    public List<ShardRouting> failedShards() {, +        return failedShards;, +++ b/src/main/java/org/elasticsearch/gateway/blobstore/BlobReuseExistingGatewayAllocator.java, +        for (ShardRouting failedShard : allocation.failedShards()) {, +            cachedCommitPoints.remove(failedShard.shardId());, +            cachedStores.remove(failedShard.shardId());, +        }, +++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private final BlockingQueue<ShardRouting> failedShardQueue = ConcurrentCollections.newBlockingQueue();, +        failedShardQueue.add(shardRouting);, +                List<ShardRouting> shards = new ArrayList<ShardRouting>();, +                failedShardQueue.drainTo(shards);, +, +                RoutingAllocation.Result routingResult = allocationService.applyFailedShards(currentState, shards);, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +import com.google.common.collect.ImmutableList;, +    public RoutingAllocation.Result applyFailedShard(ClusterState clusterState, ShardRouting failedShard) {, +        return applyFailedShards(clusterState, ImmutableList.of(failedShard));, +    }, +, +    public RoutingAllocation.Result applyFailedShards(ClusterState clusterState, List<ShardRouting> failedShards) {, +        FailedRerouteAllocation allocation = new FailedRerouteAllocation(allocationDeciders, routingNodes, clusterState.nodes(), failedShards);]