[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +import java.sql.SQLType;, +                SQLType type = JDBCType.VARCHAR;, +                    if (cols[i + 1] instanceof SQLType) {, +                        type = (SQLType) cols[i + 1];, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +import java.sql.SQLType;, +                SQLType type = JDBCType.VARCHAR;, +                    if (cols[i + 1] instanceof SQLType) {, +                        type = (SQLType) cols[i + 1];, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcParameterMetaData.java, +        return paramInfo(param).type.getName();, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +import java.sql.SQLType;, +                SQLType type = JDBCType.VARCHAR;, +                    if (cols[i + 1] instanceof SQLType) {, +                        type = (SQLType) cols[i + 1];, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcParameterMetaData.java, +        return paramInfo(param).type.getName();, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.sql.SQLType;, +    private void setParam(int parameterIndex, Object value, SQLType type) throws SQLException {, +        query.setParam(parameterIndex, value, type);, +        setParam(parameterIndex, null, JDBCType.valueOf(sqlType));, +            setParam(parameterIndex, null, JDBCType.NULL);, +            setParam(parameterIndex, null, JDBCType.valueOf(targetSqlType));, +            setParam(parameterIndex, x, JDBCType.VARBINARY);, +                setParam(parameterIndex, dateToSet, JDBCType.TIMESTAMP);, +                setParam(parameterIndex, String.valueOf(x), JDBCType.VARCHAR);, +                    JDBCType.valueOf(targetSqlType));, +        List<Class<?>> unsupportedTypes = new ArrayList<>(Arrays.asList(Struct.class, Array.class, SQLXML.class,, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +import java.sql.SQLType;, +                SQLType type = JDBCType.VARCHAR;, +                    if (cols[i + 1] instanceof SQLType) {, +                        type = (SQLType) cols[i + 1];, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcParameterMetaData.java, +        return paramInfo(param).type.getName();, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.sql.SQLType;, +    private void setParam(int parameterIndex, Object value, SQLType type) throws SQLException {, +        query.setParam(parameterIndex, value, type);, +        setParam(parameterIndex, null, JDBCType.valueOf(sqlType));, +            setParam(parameterIndex, null, JDBCType.NULL);, +            setParam(parameterIndex, null, JDBCType.valueOf(targetSqlType));, +            setParam(parameterIndex, x, JDBCType.VARBINARY);, +                setParam(parameterIndex, dateToSet, JDBCType.TIMESTAMP);, +                setParam(parameterIndex, String.valueOf(x), JDBCType.VARCHAR);, +                    JDBCType.valueOf(targetSqlType));, +        List<Class<?>> unsupportedTypes = new ArrayList<>(Arrays.asList(Struct.class, Array.class, SQLXML.class,, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +import java.sql.SQLType;, +        SQLType type = cursor.columns().get(columnIndex - 1).type;, +        SQLType columnType = cursor.columns().get(columnIndex - 1).type;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +import java.sql.SQLType;, +                SQLType type = JDBCType.VARCHAR;, +                    if (cols[i + 1] instanceof SQLType) {, +                        type = (SQLType) cols[i + 1];, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcParameterMetaData.java, +        return paramInfo(param).type.getName();, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.sql.SQLType;, +    private void setParam(int parameterIndex, Object value, SQLType type) throws SQLException {, +        query.setParam(parameterIndex, value, type);, +        setParam(parameterIndex, null, JDBCType.valueOf(sqlType));, +            setParam(parameterIndex, null, JDBCType.NULL);, +            setParam(parameterIndex, null, JDBCType.valueOf(targetSqlType));, +            setParam(parameterIndex, x, JDBCType.VARBINARY);, +                setParam(parameterIndex, dateToSet, JDBCType.TIMESTAMP);, +                setParam(parameterIndex, String.valueOf(x), JDBCType.VARCHAR);, +                    JDBCType.valueOf(targetSqlType));, +        List<Class<?>> unsupportedTypes = new ArrayList<>(Arrays.asList(Struct.class, Array.class, SQLXML.class,, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +import java.sql.SQLType;, +        SQLType type = cursor.columns().get(columnIndex - 1).type;, +        SQLType columnType = cursor.columns().get(columnIndex - 1).type;, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSetMetaData.java, +        return column(column).type.getName();, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcDatabaseMetaData.java, +import java.sql.SQLType;, +                SQLType type = JDBCType.VARCHAR;, +                    if (cols[i + 1] instanceof SQLType) {, +                        type = (SQLType) cols[i + 1];, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcParameterMetaData.java, +        return paramInfo(param).type.getName();, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcPreparedStatement.java, +import java.sql.SQLType;, +    private void setParam(int parameterIndex, Object value, SQLType type) throws SQLException {, +        query.setParam(parameterIndex, value, type);, +        setParam(parameterIndex, null, JDBCType.valueOf(sqlType));, +            setParam(parameterIndex, null, JDBCType.NULL);, +            setParam(parameterIndex, null, JDBCType.valueOf(targetSqlType));, +            setParam(parameterIndex, x, JDBCType.VARBINARY);, +                setParam(parameterIndex, dateToSet, JDBCType.TIMESTAMP);, +                setParam(parameterIndex, String.valueOf(x), JDBCType.VARCHAR);, +                    JDBCType.valueOf(targetSqlType));, +        List<Class<?>> unsupportedTypes = new ArrayList<>(Arrays.asList(Struct.class, Array.class, SQLXML.class,, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +import java.sql.SQLType;]