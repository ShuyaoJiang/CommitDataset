[+++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                fieldType.setHasDocValues(defaultDocValues);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                fieldType.setHasDocValues(defaultDocValues);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        if (hasDocValues() != other.hasDocValues()) {, +            conflicts.add("mapper [" + name() + "] has different [doc_values] values");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                fieldType.setHasDocValues(defaultDocValues);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        if (hasDocValues() != other.hasDocValues()) {, +            conflicts.add("mapper [" + name() + "] has different [doc_values] values");, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java, +                .field("doc_values", true), +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                fieldType.setHasDocValues(defaultDocValues);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        if (hasDocValues() != other.hasDocValues()) {, +            conflicts.add("mapper [" + name() + "] has different [doc_values] values");, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java, +                .field("doc_values", true), +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java, +        public Modifier(String property, boolean strictOnly) {, +        new Modifier("boost", true) {, +        new Modifier("doc_values", false) {, +        new Modifier("analyzer", false) {, +        new Modifier("analyzer", false) {, +        new Modifier("search_analyzer", true) {, +        new Modifier("search_analyzer", true) {, +        new Modifier("search_quote_analyzer", true) {, +        new Modifier("search_quote_analyzer", true) {, +        new Modifier("similarity", false) {, +        new Modifier("similarity", false) {, +        new Modifier("norms.loading", true) {, +        new Modifier("fielddata", true) {, +        new Modifier("null_value", true) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                fieldType.setHasDocValues(defaultDocValues);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        if (hasDocValues() != other.hasDocValues()) {, +            conflicts.add("mapper [" + name() + "] has different [doc_values] values");, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java, +                .field("doc_values", true), +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java, +        public Modifier(String property, boolean strictOnly) {, +        new Modifier("boost", true) {, +        new Modifier("doc_values", false) {, +        new Modifier("analyzer", false) {, +        new Modifier("analyzer", false) {, +        new Modifier("search_analyzer", true) {, +        new Modifier("search_analyzer", true) {, +        new Modifier("search_quote_analyzer", true) {, +        new Modifier("search_quote_analyzer", true) {, +        new Modifier("similarity", false) {, +        new Modifier("similarity", false) {, +        new Modifier("norms.loading", true) {, +        new Modifier("fielddata", true) {, +        new Modifier("null_value", true) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/CompletionFieldTypeTests.java, +        addModifier(new Modifier("preserve_separators", false) {, +        addModifier(new Modifier("preserve_position_increments", false) {, +        addModifier(new Modifier("context_mappings", false) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                fieldType.setHasDocValues(defaultDocValues);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        if (hasDocValues() != other.hasDocValues()) {, +            conflicts.add("mapper [" + name() + "] has different [doc_values] values");, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java, +                .field("doc_values", true), +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java, +        public Modifier(String property, boolean strictOnly) {, +        new Modifier("boost", true) {, +        new Modifier("doc_values", false) {, +        new Modifier("analyzer", false) {, +        new Modifier("analyzer", false) {, +        new Modifier("search_analyzer", true) {, +        new Modifier("search_analyzer", true) {, +        new Modifier("search_quote_analyzer", true) {, +        new Modifier("search_quote_analyzer", true) {, +        new Modifier("similarity", false) {, +        new Modifier("similarity", false) {, +        new Modifier("norms.loading", true) {, +        new Modifier("fielddata", true) {, +        new Modifier("null_value", true) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/CompletionFieldTypeTests.java, +        addModifier(new Modifier("preserve_separators", false) {, +        addModifier(new Modifier("preserve_position_increments", false) {, +        addModifier(new Modifier("context_mappings", false) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/DateFieldTypeTests.java, +        addModifier(new Modifier("format", true) {, +        addModifier(new Modifier("locale", true) {, +        addModifier(new Modifier("numeric_resolution", true) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +                fieldType.setHasDocValues(defaultDocValues);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/MappedFieldType.java, +        if (hasDocValues() != other.hasDocValues()) {, +            conflicts.add("mapper [" + name() + "] has different [doc_values] values");, +++ b/core/src/test/java/org/elasticsearch/index/fielddata/BinaryDVFieldDataTests.java, +                .field("doc_values", true), +++ b/core/src/test/java/org/elasticsearch/index/mapper/FieldTypeTestCase.java]