[+++ b/CONTRIBUTING.md, +++ b/CONTRIBUTING.md, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/CONTRIBUTING.md, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/CHANGELOG.asciidoc, +++ b/CONTRIBUTING.md, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/CHANGELOG.asciidoc, +++ b/docs/plugins/api.asciidoc, +++ b/CONTRIBUTING.md, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/CHANGELOG.asciidoc, +++ b/docs/plugins/api.asciidoc, +++ b/docs/reference/indices/forcemerge.asciidoc, +++ b/CONTRIBUTING.md, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/CHANGELOG.asciidoc, +++ b/docs/plugins/api.asciidoc, +++ b/docs/reference/indices/forcemerge.asciidoc, +++ b/docs/reference/search/request/preference.asciidoc, +search. By default, the operation is randomized among the available shard copies., +++ b/CONTRIBUTING.md, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/CHANGELOG.asciidoc, +++ b/docs/plugins/api.asciidoc, +++ b/docs/reference/indices/forcemerge.asciidoc, +++ b/docs/reference/search/request/preference.asciidoc, +search. By default, the operation is randomized among the available shard copies., +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +import org.apache.http.HttpEntity;, +import java.util.HashMap;, +import java.util.Map;, +import static java.util.Collections.singletonMap;, + * Elasticsearch. Thus is often uses identifiers for versions like {@code 2000099}, +    static String initialSearchPath(SearchRequest searchRequest) {, +        return path.toString();, +    }, +    static Map<String, String> initialSearchParams(SearchRequest searchRequest, Version remoteVersion) {, +        Map<String, String> params = new HashMap<>();, +            params.put("scroll", keepAlive.getStringRep());, +        params.put("size", Integer.toString(searchRequest.source().size()));, +            params.put("version", null);, +                params.put("search_type", "scan");, +                params.put("sort", sorts.toString());, +            params.put(storedFieldsParamName, fields.toString());, +        }, +        return params;, +    static HttpEntity initialSearchEntity(SearchRequest searchRequest, BytesReference query, Version remoteVersion) {, +                /* We're intentionally a bit paranoid here - copying the query as xcontent rather than writing a raw field. We don't want, +            return new ByteArrayEntity(bytes.bytes, bytes.offset, bytes.length, ContentType.APPLICATION_JSON);, +    static String scrollPath() {, +        return "/_search/scroll";, +    }, +    static Map<String, String> scrollParams(TimeValue keepAlive, Version remoteVersion) {, +        return singletonMap("scroll", keepAlive.getStringRep());, +    static HttpEntity scrollEntity(String scroll, Version remoteVersion) {, +        if (remoteVersion.before(Version.fromId(2000099))) {, +            // Versions before 2.0.0 extract the plain scroll_id from the body, +            return new StringEntity(scroll, ContentType.TEXT_PLAIN);, +        }, +            return new StringEntity(Strings.toString(entity.startObject(), +                .endObject()), ContentType.APPLICATION_JSON);, +    static HttpEntity clearScrollEntity(String scroll, Version remoteVersion) {, +            return new StringEntity(scroll, ContentType.TEXT_PLAIN);, +            return new StringEntity(Strings.toString(entity.startObject(), +                .endObject()), ContentType.APPLICATION_JSON);, +++ b/CONTRIBUTING.md, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +++ b/docs/CHANGELOG.asciidoc, +++ b/docs/plugins/api.asciidoc, +++ b/docs/reference/indices/forcemerge.asciidoc, +++ b/docs/reference/search/request/preference.asciidoc, +search. By default, the operation is randomized among the available shard copies., +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +import org.apache.http.HttpEntity;, +import java.util.HashMap;, +import java.util.Map;, +import static java.util.Collections.singletonMap;, + * Elasticsearch. Thus is often uses identifiers for versions like {@code 2000099}, +    static String initialSearchPath(SearchRequest searchRequest) {, +        return path.toString();, +    }, +    static Map<String, String> initialSearchParams(SearchRequest searchRequest, Version remoteVersion) {, +        Map<String, String> params = new HashMap<>();, +            params.put("scroll", keepAlive.getStringRep());, +        params.put("size", Integer.toString(searchRequest.source().size()));, +            params.put("version", null);, +                params.put("search_type", "scan");, +                params.put("sort", sorts.toString());, +            params.put(storedFieldsParamName, fields.toString());, +        }, +        return params;, +    static HttpEntity initialSearchEntity(SearchRequest searchRequest, BytesReference query, Version remoteVersion) {, +                /* We're intentionally a bit paranoid here - copying the query as xcontent rather than writing a raw field. We don't want, +            return new ByteArrayEntity(bytes.bytes, bytes.offset, bytes.length, ContentType.APPLICATION_JSON);, +    static String scrollPath() {, +        return "/_search/scroll";, +    }, +    static Map<String, String> scrollParams(TimeValue keepAlive, Version remoteVersion) {]