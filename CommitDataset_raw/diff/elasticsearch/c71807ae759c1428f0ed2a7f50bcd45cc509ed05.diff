[+++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +import org.elasticsearch.threadpool.ThreadPool;, +    private final ThreadPool threadPool;, +    volatile Long startTimeMS;, +        this.threadPool = clusterApplierService.threadPool();, +            this.startTimeMS = threadPool.relativeTimeInMillis();, +                long timeSinceStartMS = threadPool.relativeTimeInMillis() - startTimeMS;, +            this.startTimeMS = threadPool.relativeTimeInMillis();, +                long timeSinceStartMS = threadPool.relativeTimeInMillis() - startTimeMS;, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +import org.elasticsearch.threadpool.ThreadPool;, +    private final ThreadPool threadPool;, +    volatile Long startTimeMS;, +        this.threadPool = clusterApplierService.threadPool();, +            this.startTimeMS = threadPool.relativeTimeInMillis();, +                long timeSinceStartMS = threadPool.relativeTimeInMillis() - startTimeMS;, +            this.startTimeMS = threadPool.relativeTimeInMillis();, +                long timeSinceStartMS = threadPool.relativeTimeInMillis() - startTimeMS;, +++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +    public ThreadPool threadPool() {, +        return threadPool;, +    }, +, +        long startTimeMS = currentTimeInMillis();, +            TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +            TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +                TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +                TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +    protected long currentTimeInMillis() {, +        return threadPool.relativeTimeInMillis();, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterStateObserver.java, +import org.elasticsearch.threadpool.ThreadPool;, +    private final ThreadPool threadPool;, +    volatile Long startTimeMS;, +        this.threadPool = clusterApplierService.threadPool();, +            this.startTimeMS = threadPool.relativeTimeInMillis();, +                long timeSinceStartMS = threadPool.relativeTimeInMillis() - startTimeMS;, +            this.startTimeMS = threadPool.relativeTimeInMillis();, +                long timeSinceStartMS = threadPool.relativeTimeInMillis() - startTimeMS;, +++ b/server/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +    public ThreadPool threadPool() {, +        return threadPool;, +    }, +, +        long startTimeMS = currentTimeInMillis();, +            TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +            TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +                TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +                TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, currentTimeInMillis() - startTimeMS));, +    protected long currentTimeInMillis() {, +        return threadPool.relativeTimeInMillis();, +++ b/server/src/test/java/org/elasticsearch/cluster/service/ClusterApplierServiceTests.java, +    TimedClusterApplierService createTimedClusterService(boolean makeMaster) {, +            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();, +                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),, +                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(2).millis();, +            clusterApplierService.currentTimeOverride = threadPool.relativeTimeInMillis();, +                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(1).millis(),, +                    clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(32).millis();, +                currentState -> clusterApplierService.currentTimeOverride += TimeValue.timeValueSeconds(34).millis(),, +        protected long currentTimeInMillis() {, +            return super.currentTimeInMillis();]