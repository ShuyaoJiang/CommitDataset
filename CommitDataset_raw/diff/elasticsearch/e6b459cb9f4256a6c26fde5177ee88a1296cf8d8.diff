[+++ b/docs/reference/docs/update.asciidoc, +=== Upserts, +added[1.4.0], +If the document does not exist you may want your update script to, +run anyway in order to initialize the document contents using , +business logic unknown to the client. In this case pass the, +new `scripted_upsert` parameter with the value `true`. , +, +[source,js], +--------------------------------------------------, +curl -XPOST 'localhost:9200/sessions/session/dh3sgudg8gsrgl/_update' -d '{, +    "script_id" : "my_web_session_summariser",, +    "scripted_upsert":true,, +    "params" : {, +        "pageViewEvent" : {, +        	"url":"foo.com/bar",, +        	"response":404,, +        	"time":"2014-01-01 12:32", +        }, +    },, +    "upsert" : {, +    }, +}', +--------------------------------------------------, +The default `scripted_upsert` setting is `false` meaning the script is not executed for inserts., +However, in scenarios like the one above we may be using a non-trivial script stored, +using the new "indexed scripts" feature. The script may be deriving properties , +like the duration of our web session based on observing multiple page view events so the , +client can supply a blank "upsert" document and allow the script to fill in most of the details, +using the events passed in the `params` element.  , +, +, +Last, the upsert facility also supports `doc_as_upsert`. So that the, +, +=== Parameters, +, +++ b/docs/reference/docs/update.asciidoc, +=== Upserts, +added[1.4.0], +If the document does not exist you may want your update script to, +run anyway in order to initialize the document contents using , +business logic unknown to the client. In this case pass the, +new `scripted_upsert` parameter with the value `true`. , +, +[source,js], +--------------------------------------------------, +curl -XPOST 'localhost:9200/sessions/session/dh3sgudg8gsrgl/_update' -d '{, +    "script_id" : "my_web_session_summariser",, +    "scripted_upsert":true,, +    "params" : {, +        "pageViewEvent" : {, +        	"url":"foo.com/bar",, +        	"response":404,, +        	"time":"2014-01-01 12:32", +        }, +    },, +    "upsert" : {, +    }, +}', +--------------------------------------------------, +The default `scripted_upsert` setting is `false` meaning the script is not executed for inserts., +However, in scenarios like the one above we may be using a non-trivial script stored, +using the new "indexed scripts" feature. The script may be deriving properties , +like the duration of our web session based on observing multiple page view events so the , +client can supply a blank "upsert" document and allow the script to fill in most of the details, +using the events passed in the `params` element.  , +, +, +Last, the upsert facility also supports `doc_as_upsert`. So that the, +, +=== Parameters, +, +++ b/rest-api-spec/api/update.json, +        "script_id": {, +          "description": "The id of a stored script", +        },, +        "scripted_upsert": {, +          "type": "boolean",        , +          "description": "True if the script referenced in script or script_id should be called to perform inserts - defaults to false", +        },, +++ b/docs/reference/docs/update.asciidoc, +=== Upserts, +added[1.4.0], +If the document does not exist you may want your update script to, +run anyway in order to initialize the document contents using , +business logic unknown to the client. In this case pass the, +new `scripted_upsert` parameter with the value `true`. , +, +[source,js], +--------------------------------------------------, +curl -XPOST 'localhost:9200/sessions/session/dh3sgudg8gsrgl/_update' -d '{, +    "script_id" : "my_web_session_summariser",, +    "scripted_upsert":true,, +    "params" : {, +        "pageViewEvent" : {, +        	"url":"foo.com/bar",, +        	"response":404,, +        	"time":"2014-01-01 12:32", +        }, +    },]