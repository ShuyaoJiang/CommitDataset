[+++ b/elasticsearch/x-pack/build.gradle, +  compile project(path: ':modules:transport-netty4', configuration: 'runtime'), +++ b/elasticsearch/x-pack/build.gradle, +  compile project(path: ':modules:transport-netty4', configuration: 'runtime'), +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/LicenseServiceClusterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        return Arrays.asList(XPackPlugin.class, MockNetty3Plugin.class, MockNetty4Plugin.class);, +++ b/elasticsearch/x-pack/build.gradle, +  compile project(path: ':modules:transport-netty4', configuration: 'runtime'), +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/LicenseServiceClusterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        return Arrays.asList(XPackPlugin.class, MockNetty3Plugin.class, MockNetty4Plugin.class);, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/settings/MonitoringSettingsTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        plugins.add(MockNetty4Plugin.class); // for http, +++ b/elasticsearch/x-pack/build.gradle, +  compile project(path: ':modules:transport-netty4', configuration: 'runtime'), +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/LicenseServiceClusterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        return Arrays.asList(XPackPlugin.class, MockNetty3Plugin.class, MockNetty4Plugin.class);, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/settings/MonitoringSettingsTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        plugins.add(MockNetty4Plugin.class); // for http, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        plugins.add(MockNetty4Plugin.class); // for http, +, +++ b/elasticsearch/x-pack/build.gradle, +  compile project(path: ':modules:transport-netty4', configuration: 'runtime'), +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/LicenseServiceClusterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        return Arrays.asList(XPackPlugin.class, MockNetty3Plugin.class, MockNetty4Plugin.class);, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/settings/MonitoringSettingsTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        plugins.add(MockNetty4Plugin.class); // for http, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        plugins.add(MockNetty4Plugin.class); // for http, +, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.transport.netty4.SecurityNetty4HttpServerTransport;, +import org.elasticsearch.xpack.security.transport.netty4.SecurityNetty4Transport;, +                    .put(NetworkModule.HTTP_TYPE_KEY, "netty4"), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, "netty4"), +        settingsBuilder.put(NetworkModule.TRANSPORT_TYPE_KEY, Security.NAME + "4");, +        settingsBuilder.put(NetworkModule.HTTP_TYPE_SETTING.getKey(), Security.NAME + "4");, +        SecurityNetty4HttpServerTransport.overrideSettings(settingsBuilder, settings);, +                module.registerTransport(Security.NAME + "4", SecurityNetty4Transport.class);, +            module.registerTransport(Security.NAME + "4", SecurityNetty4Transport.class);, +            module.registerHttpTransport(Security.NAME + "4", SecurityNetty4HttpServerTransport.class);, +++ b/elasticsearch/x-pack/build.gradle, +  compile project(path: ':modules:transport-netty4', configuration: 'runtime'), +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/LicenseServiceClusterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        return Arrays.asList(XPackPlugin.class, MockNetty3Plugin.class, MockNetty4Plugin.class);, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/settings/MonitoringSettingsTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        plugins.add(MockNetty4Plugin.class); // for http, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/security/MonitoringSettingsFilterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        plugins.add(MockNetty4Plugin.class); // for http, +, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +import org.elasticsearch.xpack.security.transport.netty4.SecurityNetty4HttpServerTransport;, +import org.elasticsearch.xpack.security.transport.netty4.SecurityNetty4Transport;, +                    .put(NetworkModule.HTTP_TYPE_KEY, "netty4"), +                    .put(NetworkModule.TRANSPORT_TYPE_KEY, "netty4"), +        settingsBuilder.put(NetworkModule.TRANSPORT_TYPE_KEY, Security.NAME + "4");, +        settingsBuilder.put(NetworkModule.HTTP_TYPE_SETTING.getKey(), Security.NAME + "4");, +        SecurityNetty4HttpServerTransport.overrideSettings(settingsBuilder, settings);, +                module.registerTransport(Security.NAME + "4", SecurityNetty4Transport.class);, +            module.registerTransport(Security.NAME + "4", SecurityNetty4Transport.class);, +            module.registerHttpTransport(Security.NAME + "4", SecurityNetty4HttpServerTransport.class);, +++ b/elasticsearch/x-pack/security/src/main/java/org/elasticsearch/xpack/security/rest/SecurityRestFilter.java, +import org.elasticsearch.http.netty4.Netty4HttpRequest;, +import javax.net.ssl.SSLEngine;, +        assert request instanceof Netty3HttpRequest || request instanceof Netty4HttpRequest;, +        if (request instanceof Netty3HttpRequest) {, +            extractClientCerts(handler.getEngine(), nettyHttpRequest.getChannel(), threadContext, logger);, +        } else if (request instanceof Netty4HttpRequest) {, +            Netty4HttpRequest nettyHttpRequest = (Netty4HttpRequest) request;, +, +            io.netty.handler.ssl.SslHandler handler = nettyHttpRequest.getChannel().pipeline().get(io.netty.handler.ssl.SslHandler.class);, +            assert handler != null;, +            extractClientCerts(handler.engine(), nettyHttpRequest.getChannel(), threadContext, logger);, +        }, +, +    }, +, +    private static void extractClientCerts(SSLEngine sslEngine, Object channel, ThreadContext threadContext, ESLogger logger) {, +            Certificate[] certs = sslEngine.getSession().getPeerCertificates();, +                logger.trace("SSL Peer did not present a certificate on channel [{}]", e, channel);, +                logger.debug("SSL Peer did not present a certificate on channel [{}]", channel);, +++ b/elasticsearch/x-pack/build.gradle, +  compile project(path: ':modules:transport-netty4', configuration: 'runtime'), +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/LicenseServiceClusterTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;, +        return Arrays.asList(XPackPlugin.class, MockNetty3Plugin.class, MockNetty4Plugin.class);, +++ b/elasticsearch/x-pack/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/agent/settings/MonitoringSettingsTests.java, +import org.elasticsearch.xpack.MockNetty4Plugin;]