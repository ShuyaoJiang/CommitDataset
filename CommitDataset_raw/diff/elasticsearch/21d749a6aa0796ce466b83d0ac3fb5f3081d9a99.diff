[+++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +import com.google.common.collect.Maps;, +            for (Map.Entry<String, String> entry : Maps.newHashMap(map).entrySet()) {, +                // if the values exists and has length, we should maintain it  in the map, +                // otherwise, the replace process resolved into removing it, +                } else {, +                    map.remove(entry.getKey());, +++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java, +import com.google.common.collect.Maps;, +            for (Map.Entry<String, String> entry : Maps.newHashMap(map).entrySet()) {, +                // if the values exists and has length, we should maintain it  in the map, +                // otherwise, the replace process resolved into removing it, +                } else {, +                    map.remove(entry.getKey());, +++ b/src/test/java/org/elasticsearch/test/unit/common/settings/ImmutableSettingsTests.java, +import static org.hamcrest.Matchers.*;, +, +    @Test, +    public void testReplacePropertiesPlaceholderSystemProperty() {, +        System.setProperty("sysProp1", "sysVal1");, +        try {, +            Settings settings = settingsBuilder(), +                    .put("setting1", "${sysProp1}"), +                    .replacePropertyPlaceholders(), +                    .build();, +            assertThat(settings.get("setting1"), equalTo("sysVal1"));, +        } finally {, +            System.clearProperty("sysProp1");, +        }, +, +        Settings settings = settingsBuilder(), +                .put("setting1", "${sysProp1:defaultVal1}"), +                .replacePropertyPlaceholders(), +                .build();, +        assertThat(settings.get("setting1"), equalTo("defaultVal1"));, +, +        settings = settingsBuilder(), +                .put("setting1", "${sysProp1:}"), +                .replacePropertyPlaceholders(), +                .build();, +        assertThat(settings.get("setting1"), is(nullValue()));, +    }, +, +    @Test, +    public void testReplacePropertiesPlaceholderIgnoreEnvUnset() {, +        Settings settings = settingsBuilder(), +                .put("setting1", "${env.UNSET_ENV_VAR}"), +                .replacePropertyPlaceholders(), +                .build();, +        assertThat(settings.get("setting1"), is(nullValue()));, +    }]