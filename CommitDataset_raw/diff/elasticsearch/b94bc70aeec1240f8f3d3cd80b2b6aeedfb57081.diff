[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +    static Request createRepository(PutRepositoryRequest putRepositoryRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot").addPathPart(putRepositoryRequest.name()).build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(putRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(putRepositoryRequest.timeout());, +        parameters.withVerify(putRepositoryRequest.verify());, +, +        request.setEntity(createEntity(putRepositoryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +, +        Params withVerify(boolean verify) {, +            if (verify) {, +                return putParam("verify", Boolean.TRUE.toString());, +            }, +            return this;, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +    static Request createRepository(PutRepositoryRequest putRepositoryRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot").addPathPart(putRepositoryRequest.name()).build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(putRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(putRepositoryRequest.timeout());, +        parameters.withVerify(putRepositoryRequest.verify());, +, +        request.setEntity(createEntity(putRepositoryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +, +        Params withVerify(boolean verify) {, +            if (verify) {, +                return putParam("verify", Boolean.TRUE.toString());, +            }, +            return this;, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryResponse;, +, +    /**, +     * Creates a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public PutRepositoryResponse createRepository(PutRepositoryRequest putRepositoryRequest, Header... headers) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(putRepositoryRequest, RequestConverters::createRepository,, +            PutRepositoryResponse::fromXContent, emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously creates a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     */, +    public void createRepositoryAsync(PutRepositoryRequest putRepositoryRequest,, +                                      ActionListener<PutRepositoryResponse> listener, Header... headers) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(putRepositoryRequest, RequestConverters::createRepository,, +            PutRepositoryResponse::fromXContent, listener, emptySet(), headers);, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +    static Request createRepository(PutRepositoryRequest putRepositoryRequest) throws IOException {, +        String endpoint = new EndpointBuilder().addPathPart("_snapshot").addPathPart(putRepositoryRequest.name()).build();, +        Request request = new Request(HttpPut.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(putRepositoryRequest.masterNodeTimeout());, +        parameters.withTimeout(putRepositoryRequest.timeout());, +        parameters.withVerify(putRepositoryRequest.verify());, +, +        request.setEntity(createEntity(putRepositoryRequest, REQUEST_BODY_CONTENT_TYPE));, +        return request;, +    }, +, +, +        Params withVerify(boolean verify) {, +            if (verify) {, +                return putParam("verify", Boolean.TRUE.toString());, +            }, +            return this;, +        }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;, +import org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryResponse;, +, +    /**, +     * Creates a snapshot repository., +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore]