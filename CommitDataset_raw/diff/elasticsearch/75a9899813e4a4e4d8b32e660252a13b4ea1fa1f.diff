[+++ b/core/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.search.MatchQuery.ZeroTermsQuery;, +    public static final ParseField MATCH_PHRASE_FIELD = new ParseField("match_phrase", "text_phrase");, +    public static final ParseField MATCH_PHRASE_PREFIX_FIELD = new ParseField("match_phrase_prefix", "text_phrase_prefix");, +    public static final ParseField SLOP_FIELD = new ParseField("slop", "phrase_slop");, +    public static final ParseField ZERO_TERMS_QUERY_FIELD = new ParseField("zero_terms_query");, +    public static final ParseField CUTOFF_FREQUENCY_FIELD = new ParseField("cutoff_frequency");, +    public static final ParseField LENIENT_FIELD = new ParseField("lenient");, +    public static final ParseField FUZZY_TRANSPOSITIONS_FIELD = new ParseField("fuzzy_transpositions");, +    public static final ParseField FUZZY_REWRITE_FIELD = new ParseField("fuzzy_rewrite");, +    public static final ParseField MINIMUM_SHOULD_MATCH_FIELD = new ParseField("minimum_should_match");, +    public static final ParseField OPERATOR_FIELD = new ParseField("operator");, +    public static final ParseField MAX_EXPANSIONS_FIELD = new ParseField("max_expansions");, +    public static final ParseField PREFIX_LENGTH_FIELD = new ParseField("prefix_length");, +    public static final ParseField ANALYZER_FIELD = new ParseField("analyzer");, +    public static final ParseField TYPE_FIELD = new ParseField("type");, +    public static final ParseField QUERY_FIELD = new ParseField("query");, +    public static final MatchQueryBuilder PROTOTYPE = new MatchQueryBuilder("","");, +        builder.field(QUERY_FIELD.getPreferredName(), value);, +        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));, +        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());, +            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);, +        builder.field(SLOP_FIELD.getPreferredName(), slop);, +        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);, +        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);, +            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);, +            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);, +        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);, +        builder.field(LENIENT_FIELD.getPreferredName(), lenient);, +        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());, +            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);, +, +    public static MatchQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +, +        MatchQuery.Type type = MatchQuery.Type.BOOLEAN;, +        if (parseContext.parseFieldMatcher().match(parser.currentName(), MATCH_PHRASE_FIELD)) {, +            type = MatchQuery.Type.PHRASE;, +        } else if (parseContext.parseFieldMatcher().match(parser.currentName(), MATCH_PHRASE_PREFIX_FIELD)) {, +            type = MatchQuery.Type.PHRASE_PREFIX;, +        }, +, +        XContentParser.Token token = parser.nextToken();, +        if (token != XContentParser.Token.FIELD_NAME) {, +            throw new ParsingException(parser.getTokenLocation(), "[" + MatchQueryBuilder.NAME + "] query malformed, no field");, +        }, +        String fieldName = parser.currentName();, +, +        Object value = null;, +        float boost = AbstractQueryBuilder.DEFAULT_BOOST;, +        String minimumShouldMatch = null;, +        String analyzer = null;, +        Operator operator = MatchQueryBuilder.DEFAULT_OPERATOR;, +        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;, +        Fuzziness fuzziness = null;, +        int prefixLength = FuzzyQuery.defaultPrefixLength;, +        int maxExpansion = FuzzyQuery.defaultMaxExpansions;, +        boolean fuzzyTranspositions = FuzzyQuery.defaultTranspositions;, +        String fuzzyRewrite = null;, +        boolean lenient = MatchQuery.DEFAULT_LENIENCY;, +        Float cutOffFrequency = null;, +        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;, +        String queryName = null;, +, +        token = parser.nextToken();, +        if (token == XContentParser.Token.START_OBJECT) {, +            String currentFieldName = null;, +            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    currentFieldName = parser.currentName();, +                } else if (token.isValue()) {, +                    if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) {, +                        value = parser.objectText();, +                    } else if (parseContext.parseFieldMatcher().match(currentFieldName, TYPE_FIELD)) {, +                        String tStr = parser.text();, +                        if ("boolean".equals(tStr)) {, +                            type = MatchQuery.Type.BOOLEAN;, +                        } else if ("phrase".equals(tStr)) {, +                            type = MatchQuery.Type.PHRASE;, +                        } else if ("phrase_prefix".equals(tStr) || ("phrasePrefix".equals(tStr))) {, +                            type = MatchQuery.Type.PHRASE_PREFIX;, +                        } else {, +                            throw new ParsingException(parser.getTokenLocation(),, +                                    "[" + MatchQueryBuilder.NAME + "] query does not support type " + tStr);, +                        }, +                    } else if (parseContext.parseFieldMatcher().match(currentFieldName, ANALYZER_FIELD)) {, +                        analyzer = parser.text();, +                    } else if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) {, +                        boost = parser.floatValue();, +                    } else if (parseContext.parseFieldMatcher().match(currentFieldName, SLOP_FIELD)) {, +                        slop = parser.intValue();, +                    } else if (parseContext.parseFieldMatcher().match(currentFieldName, Fuzziness.FIELD)) {, +                        fuzziness = Fuzziness.parse(parser);, +                    } else if (parseContext.parseFieldMatcher().match(currentFieldName, PREFIX_LENGTH_FIELD)) {, +                        prefixLength = parser.intValue();, +                    } else if (parseContext.parseFieldMatcher().match(currentFieldName, MAX_EXPANSIONS_FIELD)) {, +                        maxExpansion = parser.intValue();]