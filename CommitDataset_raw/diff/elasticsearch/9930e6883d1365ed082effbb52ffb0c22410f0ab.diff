[+++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +     * is prevented by {@link #canDeleteShardContent(ShardId, IndexSettings)}, +     * @param indexSettings the shards's relevant {@link IndexSettings}. This is required to access the indexes settings etc., +    public boolean canDeleteShardContent(ShardId shardId, IndexSettings indexSettings) {, +        assert shardId.getIndex().equals(indexSettings.getIndex().name());, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +     * is prevented by {@link #canDeleteShardContent(ShardId, IndexSettings)}, +     * @param indexSettings the shards's relevant {@link IndexSettings}. This is required to access the indexes settings etc., +    public boolean canDeleteShardContent(ShardId shardId, IndexSettings indexSettings) {, +        assert shardId.getIndex().equals(indexSettings.getIndex().name());, +++ b/core/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(event.state().getMetaData().index(indexRoutingTable.index()), settings, Collections.emptyList());, +                    if (indicesService.canDeleteShardContent(shardId, indexSettings)) {, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java, +     * is prevented by {@link #canDeleteShardContent(ShardId, IndexSettings)}, +     * @param indexSettings the shards's relevant {@link IndexSettings}. This is required to access the indexes settings etc., +    public boolean canDeleteShardContent(ShardId shardId, IndexSettings indexSettings) {, +        assert shardId.getIndex().equals(indexSettings.getIndex().name());, +++ b/core/src/main/java/org/elasticsearch/indices/store/IndicesStore.java, +import org.elasticsearch.index.IndexSettings;, +import java.util.Collections;, +            IndexSettings indexSettings = new IndexSettings(event.state().getMetaData().index(indexRoutingTable.index()), settings, Collections.emptyList());, +                    if (indicesService.canDeleteShardContent(shardId, indexSettings)) {, +++ b/core/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java, +        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings("test", meta.getSettings());, +        assertFalse("no shard location", indicesService.canDeleteShardContent(new ShardId("test", 0), indexSettings));, +        assertFalse("shard is allocated", indicesService.canDeleteShardContent(new ShardId("test", 0), indexSettings));, +        assertTrue("shard is removed", indicesService.canDeleteShardContent(new ShardId("test", 0), indexSettings));]