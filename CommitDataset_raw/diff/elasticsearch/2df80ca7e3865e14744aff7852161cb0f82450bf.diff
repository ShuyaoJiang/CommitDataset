[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +                try (XContentParser parser = XContentHelper.createParser(, +                        /*, +                         * EMPTY and THROW are fine here because we just call, +                         * copyCurrentStructure which doesn't touch the, +                         * registry or deprecation., +                         */, +                        NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,, +                        indexSource, indexXContentType)) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +                try (XContentParser parser = XContentHelper.createParser(, +                        /*, +                         * EMPTY and THROW are fine here because we just call, +                         * copyCurrentStructure which doesn't touch the, +                         * registry or deprecation., +                         */, +                        NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,, +                        indexSource, indexXContentType)) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +        try (XContentParser parser = xContentType.xContent().createParser(registry, DEPRECATION_HANDLER, entity.getContent())) {, +    /**, +     * Ignores deprecation warnings. This is appropriate because it is only, +     * used to parse responses from Elasticsearch. Any deprecation warnings, +     * emitted there just mean that you are talking to an old version of, +     * Elasticsearch. There isn't anything you can do about the deprecation., +     */, +    private static final DeprecationHandler DEPRECATION_HANDLER = new DeprecationHandler() {, +        @Override, +        public void usedDeprecatedName(String usedName, String modernName) {}, +        @Override, +        public void usedDeprecatedField(String usedName, String replacedWith) {}, +    };, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +                try (XContentParser parser = XContentHelper.createParser(, +                        /*, +                         * EMPTY and THROW are fine here because we just call, +                         * copyCurrentStructure which doesn't touch the, +                         * registry or deprecation., +                         */, +                        NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,, +                        indexSource, indexXContentType)) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +        try (XContentParser parser = xContentType.xContent().createParser(registry, DEPRECATION_HANDLER, entity.getContent())) {, +    /**, +     * Ignores deprecation warnings. This is appropriate because it is only, +     * used to parse responses from Elasticsearch. Any deprecation warnings, +     * emitted there just mean that you are talking to an old version of, +     * Elasticsearch. There isn't anything you can do about the deprecation., +     */, +    private static final DeprecationHandler DEPRECATION_HANDLER = new DeprecationHandler() {, +        @Override, +        public void usedDeprecatedName(String usedName, String modernName) {}, +        @Override, +        public void usedDeprecatedField(String usedName, String replacedWith) {}, +    };, +, +++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +, +@defaultMessage We can't rely on log4j2 being on the classpath so don't log deprecations!, +org.elasticsearch.common.xcontent.LoggingDeprecationHandler, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +                try (XContentParser parser = XContentHelper.createParser(, +                        /*, +                         * EMPTY and THROW are fine here because we just call, +                         * copyCurrentStructure which doesn't touch the, +                         * registry or deprecation., +                         */, +                        NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,, +                        indexSource, indexXContentType)) {, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +        try (XContentParser parser = xContentType.xContent().createParser(registry, DEPRECATION_HANDLER, entity.getContent())) {, +    /**, +     * Ignores deprecation warnings. This is appropriate because it is only, +     * used to parse responses from Elasticsearch. Any deprecation warnings, +     * emitted there just mean that you are talking to an old version of, +     * Elasticsearch. There isn't anything you can do about the deprecation., +     */, +    private static final DeprecationHandler DEPRECATION_HANDLER = new DeprecationHandler() {, +        @Override, +        public void usedDeprecatedName(String usedName, String modernName) {}, +        @Override, +        public void usedDeprecatedField(String usedName, String replacedWith) {}, +    };, +, +++ b/client/rest-high-level/src/main/resources/forbidden/rest-high-level-signatures.txt, +, +@defaultMessage We can't rely on log4j2 being on the classpath so don't log deprecations!, +org.elasticsearch.common.xcontent.LoggingDeprecationHandler, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SyncedFlushResponseTests.java, +import org.elasticsearch.common.xcontent.DeprecationHandler;, +                    DeprecationHandler.THROW_UNSUPPORTED_OPERATION,, +                    DeprecationHandler.THROW_UNSUPPORTED_OPERATION,]