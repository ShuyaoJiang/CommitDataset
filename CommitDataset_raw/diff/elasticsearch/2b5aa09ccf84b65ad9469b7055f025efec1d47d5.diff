[+++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +                throw new SearchParseException(context, "failed to parse aggregation source [" + sSource + "]", location, e);, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +                throw new SearchParseException(context, "failed to parse aggregation source [" + sSource + "]", location, e);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgParser.java, +        GapPolicy gapPolicy = null;, +        Integer window = null;, +        String model = null;, +        Integer predict = null;, +                        throw new SearchParseException(context, "[" + currentFieldName + "] value must be a positive integer.", +                                + "  Value supplied was [" + predict + "] in [" + pipelineAggregatorName + "].",, +        MovAvgPipelineAggregator.Factory factory = new MovAvgPipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths);, +            factory.format(format);, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        if (window != null) {, +            factory.window(window);, +        }, +        if (predict != null) {, +            factory.predict(predict);, +        }, +        if (model != null) {, +                throw new SearchParseException(context,, +                        "Unknown model [" + model + "] specified.  Valid options are:" + movAvgModelParserMapper.getAllNames().toString(),, +                        parser.getTokenLocation());, +            factory.model(movAvgModel);, +        }, +        if (minimize != null) {, +            factory.minimize(minimize);, +        }, +        return factory;, +        return new MovAvgPipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +                throw new SearchParseException(context, "failed to parse aggregation source [" + sSource + "]", location, e);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgParser.java, +        GapPolicy gapPolicy = null;, +        Integer window = null;, +        String model = null;, +        Integer predict = null;, +                        throw new SearchParseException(context, "[" + currentFieldName + "] value must be a positive integer.", +                                + "  Value supplied was [" + predict + "] in [" + pipelineAggregatorName + "].",, +        MovAvgPipelineAggregator.Factory factory = new MovAvgPipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths);, +            factory.format(format);, +        if (gapPolicy != null) {, +            factory.gapPolicy(gapPolicy);, +        }, +        if (window != null) {, +            factory.window(window);, +        }, +        if (predict != null) {, +            factory.predict(predict);, +        }, +        if (model != null) {, +                throw new SearchParseException(context,, +                        "Unknown model [" + model + "] specified.  Valid options are:" + movAvgModelParserMapper.getAllNames().toString(),, +                        parser.getTokenLocation());, +            factory.model(movAvgModel);, +        }, +        if (minimize != null) {, +            factory.minimize(minimize);, +        }, +        return factory;, +        return new MovAvgPipelineAggregator.Factory(null, null);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgPipelineAggregator.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;, +import org.elasticsearch.search.aggregations.support.format.ValueFormat;, +import java.util.Objects;, +        private String format;, +        private GapPolicy gapPolicy = GapPolicy.SKIP;, +        private int window = 5;, +        private MovAvgModel model = new SimpleModel();, +        private int predict = 0;, +        private Boolean minimize;, +        public Factory(String name, String[] bucketsPaths) {, +        }, +, +        /**, +         * Sets the format to use on the output of this aggregation., +         */, +        public void format(String format) {, +            this.format = format;, +        }, +, +        /**, +         * Gets the format to use on the output of this aggregation., +         */, +        public String format() {, +            return format;, +        }, +, +        /**, +         * Sets the GapPolicy to use on the output of this aggregation., +         */, +        public void gapPolicy(GapPolicy gapPolicy) {, +        }, +, +        /**, +         * Gets the GapPolicy to use on the output of this aggregation.]