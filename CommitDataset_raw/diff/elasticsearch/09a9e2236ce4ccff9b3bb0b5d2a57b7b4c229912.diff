[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.java, +import org.gradle.api.artifacts.Dependency;, +import org.gradle.api.specs.Spec;, +import org.gradle.api.tasks.CacheableTask;, +import org.gradle.api.tasks.Optional;, +import org.gradle.api.tasks.SkipWhenEmpty;, +@CacheableTask, +    @Optional, +    @InputFiles, +    @SkipWhenEmpty, +    public Set<File> getJarsToScan() {, +        // These are SelfResolvingDependency, and some of them backed by file collections, like  the Gradle API files,, +        // or dependencies added as `files(...)`, we can't be sure if those are third party or not., +        // err on the side of scanning these to make sure we don't miss anything, +        Spec<Dependency> reallyThirdParty = dep -> dep.getGroup() != null &&, +            dep.getGroup().startsWith("org.elasticsearch") == false;, +        Set<File> jars = getRuntimeConfiguration(), +            .getResolvedConfiguration(), +            .getFiles(reallyThirdParty);, +        Set<File> compileOnlyConfiguration = getProject().getConfigurations().getByName("compileOnly").getResolvedConfiguration(), +            .getFiles(reallyThirdParty);, +        // don't scan provided dependencies that we already scanned, e.x. don't scan cores dependencies for every plugin, +        if (compileOnlyConfiguration != null) {, +            jars.removeAll(compileOnlyConfiguration);, +        }, +        return jars;, +    }, +, +        Set<File> jars = getJarsToScan();, +        try {, +        } catch (IllegalStateException e) {, +            getLogger().error(forbiddenApisOutput);, +            throw e;, +        }, +    private void extractJars(Set<File> jars) {, +            throw new IllegalStateException(, +                "Audit of third party dependencies failed:\n" +, +                    "  Jar Hell with the JDK:\n" + formatClassList(jdkJarHellClasses), +            );, +            if (javaHome != null) {, +            }, +                getProject().getConfigurations().getByName("compileOnly"), +                    getProject().getConfigurations().getByName("compileOnly"), +            if (javaHome != null) {, +            }, +    private Configuration getRuntimeConfiguration() {, +        Configuration runtime = getProject().getConfigurations().findByName("runtime");, +        if (runtime == null) {, +            return getProject().getConfigurations().getByName("testCompile");, +        }, +        return runtime;, +    }, +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.java, +import org.gradle.api.artifacts.Dependency;, +import org.gradle.api.specs.Spec;, +import org.gradle.api.tasks.CacheableTask;, +import org.gradle.api.tasks.Optional;, +import org.gradle.api.tasks.SkipWhenEmpty;, +@CacheableTask, +    @Optional, +    @InputFiles, +    @SkipWhenEmpty, +    public Set<File> getJarsToScan() {, +        // These are SelfResolvingDependency, and some of them backed by file collections, like  the Gradle API files,, +        // or dependencies added as `files(...)`, we can't be sure if those are third party or not., +        // err on the side of scanning these to make sure we don't miss anything, +        Spec<Dependency> reallyThirdParty = dep -> dep.getGroup() != null &&, +            dep.getGroup().startsWith("org.elasticsearch") == false;, +        Set<File> jars = getRuntimeConfiguration(), +            .getResolvedConfiguration(), +            .getFiles(reallyThirdParty);, +        Set<File> compileOnlyConfiguration = getProject().getConfigurations().getByName("compileOnly").getResolvedConfiguration(), +            .getFiles(reallyThirdParty);, +        // don't scan provided dependencies that we already scanned, e.x. don't scan cores dependencies for every plugin, +        if (compileOnlyConfiguration != null) {, +            jars.removeAll(compileOnlyConfiguration);, +        }, +        return jars;, +    }, +, +        Set<File> jars = getJarsToScan();, +        try {, +        } catch (IllegalStateException e) {, +            getLogger().error(forbiddenApisOutput);, +            throw e;, +        }, +    private void extractJars(Set<File> jars) {, +            throw new IllegalStateException(, +                "Audit of third party dependencies failed:\n" +, +                    "  Jar Hell with the JDK:\n" + formatClassList(jdkJarHellClasses), +            );, +            if (javaHome != null) {, +            }, +                getProject().getConfigurations().getByName("compileOnly"), +                    getProject().getConfigurations().getByName("compileOnly"), +            if (javaHome != null) {, +            }, +    private Configuration getRuntimeConfiguration() {, +        Configuration runtime = getProject().getConfigurations().findByName("runtime");, +        if (runtime == null) {]