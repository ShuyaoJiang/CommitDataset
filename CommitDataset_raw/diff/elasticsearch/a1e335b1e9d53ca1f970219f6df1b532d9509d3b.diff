[+++ b/docs/reference/modules/http.asciidoc, +i.e. any origin. If you prepend and append a `/` to the value, this will, +be treated as a regular expression, allowing you to support HTTP and HTTPs., +for example using `/https?:\/\/localhost(:[0-9]+)?/` would return the, +request header appropriately in both cases., +++ b/docs/reference/modules/http.asciidoc, +i.e. any origin. If you prepend and append a `/` to the value, this will, +be treated as a regular expression, allowing you to support HTTP and HTTPs., +for example using `/https?:\/\/localhost(:[0-9]+)?/` would return the, +request header appropriately in both cases., +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.rest.support.RestUtils;, +import java.util.regex.Pattern;, +, +    private final Pattern corsPattern;, +        this.corsPattern = RestUtils.getCorsSettingRegex(serverTransport.settings());, +        serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, e.getChannel(), httpRequest, corsPattern));, +++ b/docs/reference/modules/http.asciidoc, +i.e. any origin. If you prepend and append a `/` to the value, this will, +be treated as a regular expression, allowing you to support HTTP and HTTPs., +for example using `/https?:\/\/localhost(:[0-9]+)?/` would return the, +request header appropriately in both cases., +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.rest.support.RestUtils;, +import java.util.regex.Pattern;, +, +    private final Pattern corsPattern;, +        this.corsPattern = RestUtils.getCorsSettingRegex(serverTransport.settings());, +        serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, e.getChannel(), httpRequest, corsPattern));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +import com.google.common.base.Strings;, +import java.util.regex.Pattern;, +, +import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.*;, +    private Pattern corsPattern;, +    public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, NettyHttpRequest request, Pattern corsPattern) {, +        this.corsPattern = corsPattern;, +        if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) {, +                String originHeader = request.header(ORIGIN);, +                if (!Strings.isNullOrEmpty(originHeader)) {, +                    if (corsPattern == null) {, +                        resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, transport.settings().get("http.cors.allow-origin", "*"));, +                    } else {, +                        resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : "null");, +                    }, +                }, +                    resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt("http.cors.max-age", 1728000));, +                    resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE"));, +                    resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length"));, +++ b/docs/reference/modules/http.asciidoc, +i.e. any origin. If you prepend and append a `/` to the value, this will, +be treated as a regular expression, allowing you to support HTTP and HTTPs., +for example using `/https?:\/\/localhost(:[0-9]+)?/` would return the, +request header appropriately in both cases., +++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java, +import org.elasticsearch.rest.support.RestUtils;, +import java.util.regex.Pattern;, +, +    private final Pattern corsPattern;, +        this.corsPattern = RestUtils.getCorsSettingRegex(serverTransport.settings());, +        serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, e.getChannel(), httpRequest, corsPattern));, +++ b/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +import com.google.common.base.Strings;, +import java.util.regex.Pattern;, +, +import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.*;, +    private Pattern corsPattern;, +    public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, NettyHttpRequest request, Pattern corsPattern) {, +        this.corsPattern = corsPattern;, +        if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) {, +                String originHeader = request.header(ORIGIN);, +                if (!Strings.isNullOrEmpty(originHeader)) {, +                    if (corsPattern == null) {, +                        resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, transport.settings().get("http.cors.allow-origin", "*"));, +                    } else {, +                        resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : "null");, +                    }, +                }, +                    resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt("http.cors.max-age", 1728000));, +                    resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get("http.cors.allow-methods", "OPTIONS, HEAD, GET, POST, PUT, DELETE"));, +                    resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get("http.cors.allow-headers", "X-Requested-With, Content-Type, Content-Length"));, +++ b/src/main/java/org/elasticsearch/rest/support/RestUtils.java, +import org.elasticsearch.common.settings.Settings;, +import java.util.regex.Pattern;, +    public static final String HTTP_CORS_ALLOW_ORIGIN_SETTING = "http.cors.allow-origin";, +, +    /**, +     * Determine if CORS setting is a regex, +     */, +    public static Pattern getCorsSettingRegex(Settings settings) {, +        String corsSetting = settings.get(HTTP_CORS_ALLOW_ORIGIN_SETTING, "*");, +        int len = corsSetting.length();, +        boolean isRegex = len > 2 &&  corsSetting.startsWith("/") && corsSetting.endsWith("/");, +, +        if (isRegex) {, +            return Pattern.compile(corsSetting.substring(1, corsSetting.length()-1));, +        }, +, +        return null;, +    }]