[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}]",, +                maxBytesPerSec, concurrentStreams);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}]",, +                maxBytesPerSec, concurrentStreams);, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +import java.io.BufferedOutputStream;, +    private static final int CHUNK_SIZE = 512 * 1000; // 512KB, +                final Function<StoreFileMetaData, OutputStream> outputStreamFactories = (md) -> new BufferedOutputStream(new RecoveryOutputStream(md, bytesSinceLastPause, translogView), CHUNK_SIZE);, +                .withCompress(true), +            // Check if this request is past bytes threshold, and, +            if (size >= CHUNK_SIZE) {, +            final TransportRequestOptions chunkSendOptions = TransportRequestOptions.builder(), +                .withCompress(false), +                .withType(TransportRequestOptions.Type.RECOVERY), +                .withTimeout(recoverySettings.internalActionTimeout()), +                .build();, +                                throttleTimeInNanos), chunkSendOptions, EmptyTransportResponseHandler.INSTANCE_SAME).txGet();, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}]",, +                maxBytesPerSec, concurrentStreams);, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +import java.io.BufferedOutputStream;, +    private static final int CHUNK_SIZE = 512 * 1000; // 512KB, +                final Function<StoreFileMetaData, OutputStream> outputStreamFactories = (md) -> new BufferedOutputStream(new RecoveryOutputStream(md, bytesSinceLastPause, translogView), CHUNK_SIZE);, +                .withCompress(true), +            // Check if this request is past bytes threshold, and, +            if (size >= CHUNK_SIZE) {, +            final TransportRequestOptions chunkSendOptions = TransportRequestOptions.builder(), +                .withCompress(false), +                .withType(TransportRequestOptions.Type.RECOVERY), +                .withTimeout(recoverySettings.internalActionTimeout()), +                .build();, +                                throttleTimeInNanos), chunkSendOptions, EmptyTransportResponseHandler.INSTANCE_SAME).txGet();, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}]",, +                maxBytesPerSec, concurrentStreams);, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +import java.io.BufferedOutputStream;, +    private static final int CHUNK_SIZE = 512 * 1000; // 512KB, +                final Function<StoreFileMetaData, OutputStream> outputStreamFactories = (md) -> new BufferedOutputStream(new RecoveryOutputStream(md, bytesSinceLastPause, translogView), CHUNK_SIZE);, +                .withCompress(true), +            // Check if this request is past bytes threshold, and, +            if (size >= CHUNK_SIZE) {, +            final TransportRequestOptions chunkSendOptions = TransportRequestOptions.builder(), +                .withCompress(false), +                .withType(TransportRequestOptions.Type.RECOVERY), +                .withTimeout(recoverySettings.internalActionTimeout()), +                .build();, +                                throttleTimeInNanos), chunkSendOptions, EmptyTransportResponseHandler.INSTANCE_SAME).txGet();, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java, +++ b/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}]",, +                maxBytesPerSec, concurrentStreams);, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +import java.io.BufferedOutputStream;, +    private static final int CHUNK_SIZE = 512 * 1000; // 512KB, +                final Function<StoreFileMetaData, OutputStream> outputStreamFactories = (md) -> new BufferedOutputStream(new RecoveryOutputStream(md, bytesSinceLastPause, translogView), CHUNK_SIZE);, +                .withCompress(true), +            // Check if this request is past bytes threshold, and, +            if (size >= CHUNK_SIZE) {, +            final TransportRequestOptions chunkSendOptions = TransportRequestOptions.builder(), +                .withCompress(false), +                .withType(TransportRequestOptions.Type.RECOVERY), +                .withTimeout(recoverySettings.internalActionTimeout()), +                .build();, +                                throttleTimeInNanos), chunkSendOptions, EmptyTransportResponseHandler.INSTANCE_SAME).txGet();, +++ b/core/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryIT.java, +++ b/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java, +++ b/core/src/test/java/org/elasticsearch/recovery/TruncatedRecoveryIT.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySettings.java, +        logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}]",, +                maxBytesPerSec, concurrentStreams);, +++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +import java.io.BufferedOutputStream;, +    private static final int CHUNK_SIZE = 512 * 1000; // 512KB, +                final Function<StoreFileMetaData, OutputStream> outputStreamFactories = (md) -> new BufferedOutputStream(new RecoveryOutputStream(md, bytesSinceLastPause, translogView), CHUNK_SIZE);, +                .withCompress(true), +            // Check if this request is past bytes threshold, and, +            if (size >= CHUNK_SIZE) {, +            final TransportRequestOptions chunkSendOptions = TransportRequestOptions.builder(), +                .withCompress(false)]