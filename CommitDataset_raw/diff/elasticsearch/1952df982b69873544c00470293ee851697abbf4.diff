[+++ b/src/main/java/jsr166e/CompletableFuture.java, +                            e.execute(new AsyncApply<>(t, fn, dst));, +                            e.execute(new AsyncAccept<>(t, fn, dst));, +                            e.execute(new AsyncCombine<>(t, u, fn, dst));, +                            e.execute(new AsyncAcceptBoth<>(t, u, fn, dst));, +                            e.execute(new AsyncApply<>(t, fn, dst));, +                            e.execute(new AsyncAccept<>(t, fn, dst));, +                        e.execute(new AsyncCompose<>(t, fn, dst));, +                            (d = new ThenCopy<>(c, dst));, +        CompletableFuture<U> f = new CompletableFuture<>();, +            execute((ForkJoinTask<?>)new AsyncSupply<>(supplier, f));, +        CompletableFuture<U> f = new CompletableFuture<>();, +        executor.execute(new AsyncSupply<>(supplier, f));, +        CompletableFuture<Void> f = new CompletableFuture<>();, +        CompletableFuture<Void> f = new CompletableFuture<>();, +        CompletableFuture<U> f = new CompletableFuture<>();, +        CompletableFuture<U> dst = new CompletableFuture<>();, +                (d = new ThenApply<>(this, fn, dst, e));, +                        e.execute(new AsyncApply<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +                (d = new ThenAccept<>(this, fn, dst, e));, +                        e.execute(new AsyncAccept<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +        CompletableFuture<V> dst = new CompletableFuture<>();, +            d = new ThenCombine<>(this, other, fn, dst, e);, +                        e.execute(new AsyncCombine<>(t, u, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            d = new ThenAcceptBoth<>(this, other, fn, dst, e);, +                        e.execute(new AsyncAcceptBoth<>(t, u, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +        CompletableFuture<U> dst = new CompletableFuture<>();, +            d = new ApplyToEither<>(this, other, fn, dst, e);, +                        e.execute(new AsyncApply<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            d = new AcceptEither<>(this, other, fn, dst, e);, +                        e.execute(new AsyncAccept<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            dst = new CompletableFuture<>();, +                (d = new ThenCompose<>(this, fn, dst, e));, +                        dst = new CompletableFuture<>();, +                    e.execute(new AsyncCompose<>(t, fn, dst));, +                dst = new CompletableFuture<>();, +        CompletableFuture<T> dst = new CompletableFuture<>();, +                new CompletionNode(d = new ExceptionCompletion<>(this, fn, dst));, +        CompletableFuture<U> dst = new CompletableFuture<>();, +                new CompletionNode(d = new HandleCompletion<>(this, fn, dst));, +            CompletableFuture<Void> dst = new CompletableFuture<>();, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            CompletableFuture<Object> dst = new CompletableFuture<>();, +                        d = new ThenCopy<>(f, dst);, +        CompletableFuture<Object> dst = new CompletableFuture<>();, +++ b/src/main/java/jsr166e/CompletableFuture.java, +                            e.execute(new AsyncApply<>(t, fn, dst));, +                            e.execute(new AsyncAccept<>(t, fn, dst));, +                            e.execute(new AsyncCombine<>(t, u, fn, dst));, +                            e.execute(new AsyncAcceptBoth<>(t, u, fn, dst));, +                            e.execute(new AsyncApply<>(t, fn, dst));, +                            e.execute(new AsyncAccept<>(t, fn, dst));, +                        e.execute(new AsyncCompose<>(t, fn, dst));, +                            (d = new ThenCopy<>(c, dst));, +        CompletableFuture<U> f = new CompletableFuture<>();, +            execute((ForkJoinTask<?>)new AsyncSupply<>(supplier, f));, +        CompletableFuture<U> f = new CompletableFuture<>();, +        executor.execute(new AsyncSupply<>(supplier, f));, +        CompletableFuture<Void> f = new CompletableFuture<>();, +        CompletableFuture<Void> f = new CompletableFuture<>();, +        CompletableFuture<U> f = new CompletableFuture<>();, +        CompletableFuture<U> dst = new CompletableFuture<>();, +                (d = new ThenApply<>(this, fn, dst, e));, +                        e.execute(new AsyncApply<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +                (d = new ThenAccept<>(this, fn, dst, e));, +                        e.execute(new AsyncAccept<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +        CompletableFuture<V> dst = new CompletableFuture<>();, +            d = new ThenCombine<>(this, other, fn, dst, e);, +                        e.execute(new AsyncCombine<>(t, u, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            d = new ThenAcceptBoth<>(this, other, fn, dst, e);, +                        e.execute(new AsyncAcceptBoth<>(t, u, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +        CompletableFuture<U> dst = new CompletableFuture<>();, +            d = new ApplyToEither<>(this, other, fn, dst, e);, +                        e.execute(new AsyncApply<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            d = new AcceptEither<>(this, other, fn, dst, e);, +                        e.execute(new AsyncAccept<>(t, fn, dst));, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            dst = new CompletableFuture<>();, +                (d = new ThenCompose<>(this, fn, dst, e));, +                        dst = new CompletableFuture<>();, +                    e.execute(new AsyncCompose<>(t, fn, dst));, +                dst = new CompletableFuture<>();, +        CompletableFuture<T> dst = new CompletableFuture<>();, +                new CompletionNode(d = new ExceptionCompletion<>(this, fn, dst));, +        CompletableFuture<U> dst = new CompletableFuture<>();, +                new CompletionNode(d = new HandleCompletion<>(this, fn, dst));, +            CompletableFuture<Void> dst = new CompletableFuture<>();, +        CompletableFuture<Void> dst = new CompletableFuture<>();, +            CompletableFuture<Object> dst = new CompletableFuture<>();]