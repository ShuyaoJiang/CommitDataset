[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.common.xcontent.XContentType;, +        final XContentType xContentType = source.getXContentType();, +, +        try (XContentParser parser = XContentHelper.createParser(docMapperParser.getXContentRegistry(), source.source(), xContentType)) {, +            context = new ParseContext.InternalParseContext(indexSettings.getSettings(), docMapperParser, docMapper, source, parser);, +        return parsedDocument(source, context, createDynamicUpdate(mapping, docMapper, context.getDynamicMappers()));, +            parseObjectOrNested(context, mapping.root);, +    static void parseObjectOrNested(ParseContext context, ObjectMapper mapper) throws IOException {, +            parseObjectOrNested(context, (ObjectMapper) mapper);, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper objectMapper = getMapper(mapper, currentFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(arrayFieldName);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper mapper = getMapper(parentMapper, currentFieldName, paths);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, splitAndValidatePath(lastFieldName));, +                        return new Tuple<>(pathsAdded, parent);, +        return new Tuple<>(pathsAdded, mapper);, +    private static Mapper getMapper(ObjectMapper objectMapper, String fieldName, String[] subfields) {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.common.xcontent.XContentType;, +        final XContentType xContentType = source.getXContentType();, +, +        try (XContentParser parser = XContentHelper.createParser(docMapperParser.getXContentRegistry(), source.source(), xContentType)) {, +            context = new ParseContext.InternalParseContext(indexSettings.getSettings(), docMapperParser, docMapper, source, parser);, +        return parsedDocument(source, context, createDynamicUpdate(mapping, docMapper, context.getDynamicMappers()));, +            parseObjectOrNested(context, mapping.root);, +    static void parseObjectOrNested(ParseContext context, ObjectMapper mapper) throws IOException {, +            parseObjectOrNested(context, (ObjectMapper) mapper);, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper objectMapper = getMapper(mapper, currentFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(arrayFieldName);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper mapper = getMapper(parentMapper, currentFieldName, paths);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, splitAndValidatePath(lastFieldName));, +                        return new Tuple<>(pathsAdded, parent);, +        return new Tuple<>(pathsAdded, mapper);, +    private static Mapper getMapper(ObjectMapper objectMapper, String fieldName, String[] subfields) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java, +            DocumentParser.parseObjectOrNested(ctx, mapper.root());, +        ParsedDocument parsedDocument = mapper.parse(SourceToParse.source("index", "type", "id", source, builder.contentType()));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.common.xcontent.XContentType;, +        final XContentType xContentType = source.getXContentType();, +, +        try (XContentParser parser = XContentHelper.createParser(docMapperParser.getXContentRegistry(), source.source(), xContentType)) {, +            context = new ParseContext.InternalParseContext(indexSettings.getSettings(), docMapperParser, docMapper, source, parser);, +        return parsedDocument(source, context, createDynamicUpdate(mapping, docMapper, context.getDynamicMappers()));, +            parseObjectOrNested(context, mapping.root);, +    static void parseObjectOrNested(ParseContext context, ObjectMapper mapper) throws IOException {, +            parseObjectOrNested(context, (ObjectMapper) mapper);, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper objectMapper = getMapper(mapper, currentFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(arrayFieldName);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper mapper = getMapper(parentMapper, currentFieldName, paths);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, splitAndValidatePath(lastFieldName));, +                        return new Tuple<>(pathsAdded, parent);, +        return new Tuple<>(pathsAdded, mapper);, +    private static Mapper getMapper(ObjectMapper objectMapper, String fieldName, String[] subfields) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java, +            DocumentParser.parseObjectOrNested(ctx, mapper.root());, +        ParsedDocument parsedDocument = mapper.parse(SourceToParse.source("index", "type", "id", source, builder.contentType()));, +++ b/core/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java, +                XContentType.SMILE));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +import org.elasticsearch.common.xcontent.XContentType;, +        final XContentType xContentType = source.getXContentType();, +, +        try (XContentParser parser = XContentHelper.createParser(docMapperParser.getXContentRegistry(), source.source(), xContentType)) {, +            context = new ParseContext.InternalParseContext(indexSettings.getSettings(), docMapperParser, docMapper, source, parser);, +        return parsedDocument(source, context, createDynamicUpdate(mapping, docMapper, context.getDynamicMappers()));, +            parseObjectOrNested(context, mapping.root);, +    static void parseObjectOrNested(ParseContext context, ObjectMapper mapper) throws IOException {, +            parseObjectOrNested(context, (ObjectMapper) mapper);, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper objectMapper = getMapper(mapper, currentFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(arrayFieldName);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, paths);, +, +        final String[] paths = splitAndValidatePath(currentFieldName);, +        Mapper mapper = getMapper(parentMapper, currentFieldName, paths);, +        Mapper mapper = getMapper(parentMapper, lastFieldName, splitAndValidatePath(lastFieldName));, +                        return new Tuple<>(pathsAdded, parent);, +        return new Tuple<>(pathsAdded, mapper);, +    private static Mapper getMapper(ObjectMapper objectMapper, String fieldName, String[] subfields) {, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java, +            DocumentParser.parseObjectOrNested(ctx, mapper.root());, +        ParsedDocument parsedDocument = mapper.parse(SourceToParse.source("index", "type", "id", source, builder.contentType()));, +++ b/core/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java]