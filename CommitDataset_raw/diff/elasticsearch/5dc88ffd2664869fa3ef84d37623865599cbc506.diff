[+++ b/buildSrc/build.gradle, +// TODO: remove this when upgrading to a version that supports ProgressLogger, +// gradle 2.14 made internal apis unavailable to plugins, and gradle considered, +// ProgressLogger to be an internal api. Until this is made available again,, +// we can't upgrade without losing our nice progress logging, +// NOTE that this check duplicates that in BuildPlugin, but we need to check, +// early here before trying to compile the broken classes in buildSrc, +if (GradleVersion.current() != GradleVersion.version('2.13')) {, +  throw new GradleException('Gradle 2.13 is required to build elasticsearch'), +}, +, +++ b/buildSrc/build.gradle, +// TODO: remove this when upgrading to a version that supports ProgressLogger, +// gradle 2.14 made internal apis unavailable to plugins, and gradle considered, +// ProgressLogger to be an internal api. Until this is made available again,, +// we can't upgrade without losing our nice progress logging, +// NOTE that this check duplicates that in BuildPlugin, but we need to check, +// early here before trying to compile the broken classes in buildSrc, +if (GradleVersion.current() != GradleVersion.version('2.13')) {, +  throw new GradleException('Gradle 2.13 is required to build elasticsearch'), +}, +, +++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;, +    public TrackingResultProcessor(boolean ignoreFailure, Processor actualProcessor, List<SimulateProcessorResult> processorResultList) {, +        this.ignoreFailure = ignoreFailure;, +            if (ignoreFailure) {, +                processorResultList.add(new SimulateProcessorResult(actualProcessor.getTag(), new IngestDocument(ingestDocument)));, +            } else {, +            }, +                processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +                onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +        return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors);, +++ b/buildSrc/build.gradle, +// TODO: remove this when upgrading to a version that supports ProgressLogger, +// gradle 2.14 made internal apis unavailable to plugins, and gradle considered, +// ProgressLogger to be an internal api. Until this is made available again,, +// we can't upgrade without losing our nice progress logging, +// NOTE that this check duplicates that in BuildPlugin, but we need to check, +// early here before trying to compile the broken classes in buildSrc, +if (GradleVersion.current() != GradleVersion.version('2.13')) {, +  throw new GradleException('Gradle 2.13 is required to build elasticsearch'), +}, +, +++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;, +    public TrackingResultProcessor(boolean ignoreFailure, Processor actualProcessor, List<SimulateProcessorResult> processorResultList) {, +        this.ignoreFailure = ignoreFailure;, +            if (ignoreFailure) {, +                processorResultList.add(new SimulateProcessorResult(actualProcessor.getTag(), new IngestDocument(ingestDocument)));, +            } else {, +            }, +                processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +                onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +        return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import static org.elasticsearch.common.util.set.Sets.newHashSet;, +, +++ b/buildSrc/build.gradle, +// TODO: remove this when upgrading to a version that supports ProgressLogger, +// gradle 2.14 made internal apis unavailable to plugins, and gradle considered, +// ProgressLogger to be an internal api. Until this is made available again,, +// we can't upgrade without losing our nice progress logging, +// NOTE that this check duplicates that in BuildPlugin, but we need to check, +// early here before trying to compile the broken classes in buildSrc, +if (GradleVersion.current() != GradleVersion.version('2.13')) {, +  throw new GradleException('Gradle 2.13 is required to build elasticsearch'), +}, +, +++ b/core/src/main/java/org/elasticsearch/action/ingest/TrackingResultProcessor.java, +import java.util.Collections;, +    private final boolean ignoreFailure;, +    public TrackingResultProcessor(boolean ignoreFailure, Processor actualProcessor, List<SimulateProcessorResult> processorResultList) {, +        this.ignoreFailure = ignoreFailure;, +            if (ignoreFailure) {, +                processorResultList.add(new SimulateProcessorResult(actualProcessor.getTag(), new IngestDocument(ingestDocument)));, +            } else {, +            }, +                processors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +                onFailureProcessors.add(new TrackingResultProcessor(compoundProcessor.isIgnoreFailure(), processor, processorResultList));, +        return new CompoundProcessor(compoundProcessor.isIgnoreFailure(), processors, onFailureProcessors);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexUpgradeService.java, +import static org.elasticsearch.common.util.set.Sets.newHashSet;, +, +++ b/core/src/main/java/org/elasticsearch/index/translog/ChannelFactory.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an]