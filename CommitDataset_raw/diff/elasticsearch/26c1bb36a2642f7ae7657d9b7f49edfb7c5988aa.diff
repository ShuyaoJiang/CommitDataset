[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +import org.elasticsearch.action.support.replication.ReplicationRequest;, +            location = handleItem(metaData, request, indexShard, preVersions, preVersionTypes, location, requestIndex, item);, +        }, +, +        processAfterWrite(request.refresh(), indexShard, location);, +        BulkItemResponse[] responses = new BulkItemResponse[request.items().length];, +        BulkItemRequest[] items = request.items();, +        for (int i = 0; i < items.length; i++) {, +            responses[i] = items[i].getPrimaryResponse();, +        }, +        return new Tuple<>(new BulkShardResponse(request.shardId(), responses), request);, +    }, +, +    private Translog.Location handleItem(MetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +            location = index(metaData, request, indexShard, preVersions, preVersionTypes, location, requestIndex, item);, +        } else if (item.request() instanceof DeleteRequest) {, +            location = delete(request, indexShard, preVersions, preVersionTypes, location, requestIndex, item);, +        } else if (item.request() instanceof UpdateRequest) {, +            Tuple<Translog.Location, BulkItemRequest> tuple = update(metaData, request, indexShard, preVersions, preVersionTypes, location, requestIndex, item);, +            location = tuple.v1();, +            item = tuple.v2();, +        } else {, +            throw new IllegalStateException("Unexpected index operation: " + item.request());, +        }, +, +        assert item.getPrimaryResponse() != null;, +        assert preVersionTypes[requestIndex] != null;, +        return location;, +    }, +, +    private Translog.Location index(MetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +            logFailure(e, "index", request.shardId(), indexRequest);, +        return location;, +    }, +, +    private <ReplicationRequestT extends ReplicationRequest<ReplicationRequestT>> void logFailure(Throwable e, String operation, ShardId shardId, ReplicationRequest<ReplicationRequestT> request) {, +        if (ExceptionsHelper.status(e) == RestStatus.CONFLICT) {, +            logger.trace("{} failed to execute bulk item ({}) {}", e, shardId, operation, request);, +        } else {, +            logger.debug("{} failed to execute bulk item ({}) {}", e, shardId, operation, request);, +        }, +    }, +, +    private Translog.Location delete(BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +            logFailure(e, "delete", request.shardId(), deleteRequest);, +        return location;, +    }, +, +    private Tuple<Translog.Location, BulkItemRequest> update(MetaData metaData, BulkShardRequest request, IndexShard indexShard, long[] preVersions, VersionType[] preVersionTypes, Translog.Location location, int requestIndex, BulkItemRequest item) {, +                                logFailure(t, "index", request.shardId(), indexRequest);, +                                logFailure(t, "delete", request.shardId(), deleteRequest);, +        return Tuple.tuple(location, item);]