[+++ b/docs/reference/sql/functions/date-time.asciidoc, +[IMPORTANT], +Currently, Using a _precision_ greater than 3 doesn't make any difference to the output of the, +function as the maximum number of second fractional digits returned is 3 (milliseconds)., +, +++ b/docs/reference/sql/functions/date-time.asciidoc, +[IMPORTANT], +Currently, Using a _precision_ greater than 3 doesn't make any difference to the output of the, +function as the maximum number of second fractional digits returned is 3 (milliseconds)., +, +++ b/docs/reference/sql/language/data-types.asciidoc, +| <<date, `date`>>            | datetime      | TIMESTAMP   | 29, +| date                      | 29, +++ b/docs/reference/sql/functions/date-time.asciidoc, +[IMPORTANT], +Currently, Using a _precision_ greater than 3 doesn't make any difference to the output of the, +function as the maximum number of second fractional digits returned is 3 (milliseconds)., +, +++ b/docs/reference/sql/language/data-types.asciidoc, +| <<date, `date`>>            | datetime      | TIMESTAMP   | 29, +| date                      | 29, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/SqlProtocolTestCase.java, +            "datetime", "2019-01-14T12:29:25.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "date", "2019-01-14T00:00:00.000Z", 29);, +            "date", "1119-01-15T00:00:00.000Z", 29);, +++ b/docs/reference/sql/functions/date-time.asciidoc, +[IMPORTANT], +Currently, Using a _precision_ greater than 3 doesn't make any difference to the output of the, +function as the maximum number of second fractional digits returned is 3 (milliseconds)., +, +++ b/docs/reference/sql/language/data-types.asciidoc, +| <<date, `date`>>            | datetime      | TIMESTAMP   | 29, +| date                      | 29, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/SqlProtocolTestCase.java, +            "datetime", "2019-01-14T12:29:25.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "date", "2019-01-14T00:00:00.000Z", 29);, +            "date", "1119-01-15T00:00:00.000Z", 29);, +++ b/x-pack/plugin/sql/qa/src/main/resources/setup_mock_metadata_get_columns.sql, +SELECT null, 'test2', 'date', 93, 'DATETIME', 29, 8, null, null,, +++ b/docs/reference/sql/functions/date-time.asciidoc, +[IMPORTANT], +Currently, Using a _precision_ greater than 3 doesn't make any difference to the output of the, +function as the maximum number of second fractional digits returned is 3 (milliseconds)., +, +++ b/docs/reference/sql/language/data-types.asciidoc, +| <<date, `date`>>            | datetime      | TIMESTAMP   | 29, +| date                      | 29, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/SqlProtocolTestCase.java, +            "datetime", "2019-01-14T12:29:25.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "date", "2019-01-14T00:00:00.000Z", 29);, +            "date", "1119-01-15T00:00:00.000Z", 29);, +++ b/x-pack/plugin/sql/qa/src/main/resources/setup_mock_metadata_get_columns.sql, +SELECT null, 'test2', 'date', 93, 'DATETIME', 29, 8, null, null,, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +    // the precision is 23 (number of chars in ISO8601 with millis) + 6 chars for the timezone (e.g.: +05:00), +    DATE(                            JDBCType.DATE,      Long.BYTES,        3,                 29, false, false, true),, +    TIME(                            JDBCType.TIME,      Long.BYTES,        3,                 18, false, false, true),, +    DATETIME(      "date",           JDBCType.TIMESTAMP, Long.BYTES,        3,                 29, false, false, true),, +++ b/docs/reference/sql/functions/date-time.asciidoc, +[IMPORTANT], +Currently, Using a _precision_ greater than 3 doesn't make any difference to the output of the, +function as the maximum number of second fractional digits returned is 3 (milliseconds)., +, +++ b/docs/reference/sql/language/data-types.asciidoc, +| <<date, `date`>>            | datetime      | TIMESTAMP   | 29, +| date                      | 29, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/SqlProtocolTestCase.java, +            "datetime", "2019-01-14T12:29:25.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "datetime", "1119-01-15T12:37:29.000Z", 29);, +            "date", "2019-01-14T00:00:00.000Z", 29);, +            "date", "1119-01-15T00:00:00.000Z", 29);, +++ b/x-pack/plugin/sql/qa/src/main/resources/setup_mock_metadata_get_columns.sql, +SELECT null, 'test2', 'date', 93, 'DATETIME', 29, 8, null, null,, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataType.java, +    // the precision is 23 (number of chars in ISO8601 with millis) + 6 chars for the timezone (e.g.: +05:00), +    DATE(                            JDBCType.DATE,      Long.BYTES,        3,                 29, false, false, true),, +    TIME(                            JDBCType.TIME,      Long.BYTES,        3,                 18, false, false, true),, +    DATETIME(      "date",           JDBCType.TIMESTAMP, Long.BYTES,        3,                 29, false, false, true),, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumnsTests.java, +        assertEquals(29, precision(row));, +        assertEquals(29, precision(row));, +        assertEquals(29, precision(row));]