[+++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/GeoDistanceComparator.java, +    protected final SortMode sortMode;, +    private GeoDistanceValues geoDistanceValues;, +    public GeoDistanceComparator(int numHits, IndexGeoPointFieldData<?> indexFieldData, double lat, double lon, DistanceUnit unit, GeoDistance geoDistance, SortMode sortMode) {, +        this.sortMode = sortMode;, +        GeoPointValues readerValues = indexFieldData.load(context).getGeoPointValues();, +        if (readerValues.isMultiValued()) {, +            geoDistanceValues = new MV(readerValues, fixedSourceDistance, sortMode);, +        } else {, +            geoDistanceValues = new SV(readerValues, fixedSourceDistance);, +        }, +        final double v2 = geoDistanceValues.computeDistance(doc);, +        double distance1 = geoDistanceValues.computeDistance(doc);, +        values[slot] = geoDistanceValues.computeDistance(doc);, +, +    // Computes the distance based on geo points., +    // Due to this abstractions the geo distance comparator doesn't need to deal with whether fields have one, +    // or multiple geo points per document., +    private static abstract class GeoDistanceValues {, +, +        protected final GeoPointValues readerValues;, +        protected final GeoDistance.FixedSourceDistance fixedSourceDistance;, +, +        protected GeoDistanceValues(GeoPointValues readerValues, GeoDistance.FixedSourceDistance fixedSourceDistance) {, +            this.readerValues = readerValues;, +            this.fixedSourceDistance = fixedSourceDistance;, +        }, +, +        public abstract double computeDistance(int doc);, +, +    }, +, +    // Deals with one geo point per document, +    private static final class SV extends GeoDistanceValues {, +, +        SV(GeoPointValues readerValues, GeoDistance.FixedSourceDistance fixedSourceDistance) {, +            super(readerValues, fixedSourceDistance);, +        }, +, +        @Override, +        public double computeDistance(int doc) {, +            GeoPoint geoPoint = readerValues.getValue(doc);, +            if (geoPoint == null) {, +                // is this true? push this to the "end", +                return Double.MAX_VALUE;, +            } else {, +                return fixedSourceDistance.calculate(geoPoint.lat(), geoPoint.lon());, +            }, +        }, +    }, +, +    // Deals with more than one geo point per document, +    private static final class MV extends GeoDistanceValues {, +, +        private final SortMode sortMode;, +, +        MV(GeoPointValues readerValues, GeoDistance.FixedSourceDistance fixedSourceDistance, SortMode sortMode) {, +            super(readerValues, fixedSourceDistance);, +            this.sortMode = sortMode;, +        }, +, +        @Override, +        public double computeDistance(int doc) {, +            GeoPointValues.Iter iter = readerValues.getIter(doc);, +            if (!iter.hasNext()) {, +                return Double.MAX_VALUE;, +            }, +, +            GeoPoint point = iter.next();, +            double distance = fixedSourceDistance.calculate(point.lat(), point.lon());, +            while (iter.hasNext()) {, +                point = iter.next();, +                double newDistance = fixedSourceDistance.calculate(point.lat(), point.lon());, +                switch (sortMode) {, +                    case MIN:, +                        if (distance > newDistance) {, +                            distance = newDistance;, +                        }, +                        break;, +                    case MAX:, +                        if (distance < newDistance) {, +                            distance = newDistance;, +                        }, +                        break;, +                }, +            }, +            return distance;, +        }, +, +    }, +, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/GeoDistanceComparator.java, +    protected final SortMode sortMode;, +    private GeoDistanceValues geoDistanceValues;, +    public GeoDistanceComparator(int numHits, IndexGeoPointFieldData<?> indexFieldData, double lat, double lon, DistanceUnit unit, GeoDistance geoDistance, SortMode sortMode) {, +        this.sortMode = sortMode;, +        GeoPointValues readerValues = indexFieldData.load(context).getGeoPointValues();, +        if (readerValues.isMultiValued()) {, +            geoDistanceValues = new MV(readerValues, fixedSourceDistance, sortMode);, +        } else {]