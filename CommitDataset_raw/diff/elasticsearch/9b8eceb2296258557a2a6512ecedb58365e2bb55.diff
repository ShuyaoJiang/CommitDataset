[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/facet/HistogramFacetSearchBenchmark.java, +                    .addFacet(histogramFacet("l_value").field("l_value").bounds(0, NUMBER_OF_TERMS + 1).interval(4)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Histogram Facet + bounds (l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");, +, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setQuery(matchAllQuery()), +                    .addFacet(histogramFacet("l_value").field("l_value").valueField("l_value").bounds(0, NUMBER_OF_TERMS + 1).interval(4)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Histogram Facet + bounds (l_value/l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");, +, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setQuery(matchAllQuery()), +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/facet/HistogramFacetSearchBenchmark.java, +                    .addFacet(histogramFacet("l_value").field("l_value").bounds(0, NUMBER_OF_TERMS + 1).interval(4)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Histogram Facet + bounds (l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");, +, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setQuery(matchAllQuery()), +                    .addFacet(histogramFacet("l_value").field("l_value").valueField("l_value").bounds(0, NUMBER_OF_TERMS + 1).interval(4)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Histogram Facet + bounds (l_value/l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");, +, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch(), +                    .setQuery(matchAllQuery()), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/CacheRecycler.java, +    private static ThreadLocal<SoftReference<Deque<Object[]>>> objectArray = new ThreadLocal<SoftReference<Deque<Object[]>>>();, +, +    public static Object[] popObjectArray(int size) {, +        size = size < 100 ? 100 : size;, +        SoftReference<Deque<Object[]>> ref = objectArray.get();, +        Deque<Object[]> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<Object[]>();, +            objectArray.set(new SoftReference<Deque<Object[]>>(deque));, +        }, +        if (deque.isEmpty()) {, +            return new Object[size];, +        }, +        Object[] objects = deque.pollFirst();, +        if (objects.length < size) {, +            return new Object[size];, +        }, +        Arrays.fill(objects, null);, +        return objects;, +    }, +, +    public static void pushObjectArray(Object[] objects) {, +        SoftReference<Deque<Object[]>> ref = objectArray.get();, +        Deque<Object[]> deque = ref == null ? null : ref.get();, +        if (deque == null) {, +            deque = new ArrayDeque<Object[]>();, +            objectArray.set(new SoftReference<Deque<Object[]>>(deque));, +        }, +        deque.add(objects);, +    }, +, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/search/facet/HistogramFacetSearchBenchmark.java, +                    .addFacet(histogramFacet("l_value").field("l_value").bounds(0, NUMBER_OF_TERMS + 1).interval(4)), +                    .execute().actionGet();, +            if (searchResponse.hits().totalHits() != COUNT) {, +                System.err.println("--> mismatch on hits");, +            }, +            totalQueryTime += searchResponse.tookInMillis();, +        }, +        System.out.println("--> Histogram Facet + bounds (l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");, +, +        totalQueryTime = 0;, +        for (int j = 0; j < QUERY_COUNT; j++) {, +            SearchResponse searchResponse = client.prepareSearch()]