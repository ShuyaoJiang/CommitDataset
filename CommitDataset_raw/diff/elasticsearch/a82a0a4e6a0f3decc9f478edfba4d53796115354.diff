[+++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +    private final ESLicenseManager licenseManager;, +    private final AtomicReference<LicensesMetaData> lastObservedLicensesState;, +    public LicensesService(Settings settings, ClusterService clusterService, ThreadPool threadPool, TransportService transportService, ESLicenseManager licenseManager) {, +        this.licenseManager = licenseManager;, +        this.lastObservedLicensesState = new AtomicReference<>(null);, +                licensesWrapper.addSignedLicenses(licenseManager, newLicenses);, +                licensesWrapper.removeFeatures(licenseManager, request.features());, +            licenseManager.verifyLicenses(licenseMap);, +            Set<ESLicense> licenses = Sets.union(licenseManager.fromSignatures(currentMetaData.getSignatures()),, +                licensesWrapper.addTrialLicenseIfNeeded(licenseManager,, +        lastObservedLicensesState.set(null);, +        final LicensesMetaData lastNotifiedLicensesMetaData = lastObservedLicensesState.get();, +            esLicenses.addAll(licenseManager.fromSignatures(metaData.getSignatures()));, +        lastObservedLicensesState.set(licensesWrapper.get());, +            //logger.info("enabled flag: " + enabled.get());, +                //logger.info("calling onEnabled on listener");, +            //logger.info("enabled flag: " + enabled.get());, +                //logger.info("calling onDisabled on listener");, +         * Check if any license(s) for the feature exists,, +         * if no license(s) for feature exists, add new, +         * @param generatedTrialLicense new trial license for feature, +++ b/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +    private final ESLicenseManager licenseManager;, +    private final AtomicReference<LicensesMetaData> lastObservedLicensesState;, +    public LicensesService(Settings settings, ClusterService clusterService, ThreadPool threadPool, TransportService transportService, ESLicenseManager licenseManager) {, +        this.licenseManager = licenseManager;, +        this.lastObservedLicensesState = new AtomicReference<>(null);, +                licensesWrapper.addSignedLicenses(licenseManager, newLicenses);, +                licensesWrapper.removeFeatures(licenseManager, request.features());, +            licenseManager.verifyLicenses(licenseMap);, +            Set<ESLicense> licenses = Sets.union(licenseManager.fromSignatures(currentMetaData.getSignatures()),, +                licensesWrapper.addTrialLicenseIfNeeded(licenseManager,, +        lastObservedLicensesState.set(null);, +        final LicensesMetaData lastNotifiedLicensesMetaData = lastObservedLicensesState.get();, +            esLicenses.addAll(licenseManager.fromSignatures(metaData.getSignatures()));, +        lastObservedLicensesState.set(licensesWrapper.get());, +            //logger.info("enabled flag: " + enabled.get());, +                //logger.info("calling onEnabled on listener");, +            //logger.info("enabled flag: " + enabled.get());, +                //logger.info("calling onDisabled on listener");, +         * Check if any license(s) for the feature exists,, +         * if no license(s) for feature exists, add new, +         * @param generatedTrialLicense new trial license for feature, +++ b/src/test/java/org/elasticsearch/license/plugin/LicensesServiceTests.java, +        ESLicenseManager esLicenseManager = masterLicenseManager();, +    private ESLicenseManager masterLicenseManager() {, +        final InternalTestCluster clients = internalCluster();, +        return clients.getInstance(ESLicenseManager.class, clients.getMasterName());, +    }, +]