[+++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollRequest.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +public class ClearScrollRequest extends ActionRequest implements ToXContentObject {, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.startArray("scroll_id");, +        for (String scrollId : scrollIds) {, +            builder.value(scrollId);, +        }, +        builder.endArray();, +        builder.endObject();, +        return builder;, +    }, +, +    public void fromXContent(XContentParser parser) throws IOException {, +        scrollIds = null;, +        if (parser.nextToken() != XContentParser.Token.START_OBJECT) {, +            throw new IllegalArgumentException("Malformed content, must start with an object");, +        } else {, +            XContentParser.Token token;, +            String currentFieldName = null;, +            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    currentFieldName = parser.currentName();, +                } else if ("scroll_id".equals(currentFieldName)){, +                    if (token == XContentParser.Token.START_ARRAY) {, +                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                            if (token.isValue() == false) {, +                                throw new IllegalArgumentException("scroll_id array element should only contain scroll_id");, +                            }, +                            addScrollId(parser.text());, +                        }, +                    } else {, +                        if (token.isValue() == false) {, +                            throw new IllegalArgumentException("scroll_id element should only contain scroll_id");, +                        }, +                        addScrollId(parser.text());, +                    }, +                } else {, +                    throw new IllegalArgumentException("Unknown parameter [" + currentFieldName, +                            + "] in request body or parameter is of the wrong type[" + token + "] ");, +                }, +            }, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollRequest.java, +import org.elasticsearch.common.xcontent.ToXContentObject;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +public class ClearScrollRequest extends ActionRequest implements ToXContentObject {, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.startArray("scroll_id");, +        for (String scrollId : scrollIds) {, +            builder.value(scrollId);, +        }, +        builder.endArray();, +        builder.endObject();, +        return builder;, +    }, +, +    public void fromXContent(XContentParser parser) throws IOException {, +        scrollIds = null;, +        if (parser.nextToken() != XContentParser.Token.START_OBJECT) {, +            throw new IllegalArgumentException("Malformed content, must start with an object");, +        } else {, +            XContentParser.Token token;, +            String currentFieldName = null;, +            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                if (token == XContentParser.Token.FIELD_NAME) {, +                    currentFieldName = parser.currentName();, +                } else if ("scroll_id".equals(currentFieldName)){, +                    if (token == XContentParser.Token.START_ARRAY) {, +                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                            if (token.isValue() == false) {, +                                throw new IllegalArgumentException("scroll_id array element should only contain scroll_id");, +                            }, +                            addScrollId(parser.text());, +                        }, +                    } else {, +                        if (token.isValue() == false) {, +                            throw new IllegalArgumentException("scroll_id element should only contain scroll_id");, +                        }, +                        addScrollId(parser.text());, +                    }, +                } else {, +                    throw new IllegalArgumentException("Unknown parameter [" + currentFieldName, +                            + "] in request body or parameter is of the wrong type[" + token + "] ");, +                }, +            }, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/rest/action/search/RestClearScrollAction.java, +                // NOTE: if rest request with xcontent body has request parameters, values parsed from request body have the precedence, +                    clearRequest.fromXContent(xContentParser);, +++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollRequest.java]