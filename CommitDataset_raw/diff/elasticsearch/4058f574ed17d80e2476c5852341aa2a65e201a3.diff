[+++ b/pom.xml, +                <version>1.6.1</version>, +++ b/pom.xml, +                <version>1.6.1</version>, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import org.hamcrest.CoreMatchers;, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +++ b/pom.xml, +                <version>1.6.1</version>, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import org.hamcrest.CoreMatchers;, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +        NodeSettingsSource nodeSettingsSource = new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/pom.xml, +                <version>1.6.1</version>, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import org.hamcrest.CoreMatchers;, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +        NodeSettingsSource nodeSettingsSource = new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/src/test/java/org/elasticsearch/test/ExternalNode.java, +    private final NodeSettingsSource nodeSettingsSource;, +    ExternalNode(File path, long seed, NodeSettingsSource nodeSettingsSource) {, +        this(path, null, seed, nodeSettingsSource);, +    ExternalNode(File path, String clusterName, long seed, NodeSettingsSource nodeSettingsSource) {, +        this.nodeSettingsSource = nodeSettingsSource;, +        ExternalNode externalNode = new ExternalNode(path, clusterName, random.nextLong(), nodeSettingsSource);, +        Settings settings = ImmutableSettings.builder().put(nodeSettingsSource.settings(nodeOrdinal)).put(defaultSettings).build();, +++ b/pom.xml, +                <version>1.6.1</version>, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import org.hamcrest.CoreMatchers;, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +        NodeSettingsSource nodeSettingsSource = new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/src/test/java/org/elasticsearch/test/ExternalNode.java, +    private final NodeSettingsSource nodeSettingsSource;, +    ExternalNode(File path, long seed, NodeSettingsSource nodeSettingsSource) {, +        this(path, null, seed, nodeSettingsSource);, +    ExternalNode(File path, String clusterName, long seed, NodeSettingsSource nodeSettingsSource) {, +        this.nodeSettingsSource = nodeSettingsSource;, +        ExternalNode externalNode = new ExternalNode(path, clusterName, random.nextLong(), nodeSettingsSource);, +        Settings settings = ImmutableSettings.builder().put(nodeSettingsSource.settings(nodeOrdinal)).put(defaultSettings).build();, +++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    private final NodeSettingsSource nodeSettingsSource;, +        this(clusterSeed, DEFAULT_MIN_NUM_DATA_NODES, DEFAULT_MAX_NUM_DATA_NODES, clusterName, NodeSettingsSource.EMPTY, DEFAULT_NUM_CLIENT_NODES, DEFAULT_ENABLE_RANDOM_BENCH_NODES);, +        this(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, NodeSettingsSource.EMPTY, numClientNodes, enableRandomBenchNodes);, +    public InternalTestCluster(long clusterSeed, int minNumDataNodes, int maxNumDataNodes, String clusterName, NodeSettingsSource nodeSettingsSource, int numClientNodes, boolean enableRandomBenchNodes) {, +        this.nodeSettingsSource = nodeSettingsSource;, +        Settings settings = nodeSettingsSource.settings(nodeOrdinal);, +        return new NodeAndClient(name, node, new RandomClientFactory());, +                    transportClient = TransportClientFactory.NO_SNIFF_CLIENT_FACTORY.client(node, clusterName, random);, +        private boolean sniff;, +        public static TransportClientFactory NO_SNIFF_CLIENT_FACTORY = new TransportClientFactory(false);, +        public static TransportClientFactory SNIFF_CLIENT_FACTORY = new TransportClientFactory(true);, +        private TransportClientFactory(boolean sniff) {, +            Builder builder = settingsBuilder().put("client.transport.nodes_sampler_interval", "1s"), +                    .put(ClusterName.SETTING, clusterName).put("client.transport.sniff", sniff);, +            builder.put("node.mode", nodeSettings.get("node.mode", NODE_MODE));, +            builder.put("node.local", nodeSettings.get("node.local", ""));, +            builder.put("logger.prefix", nodeSettings.get("logger.prefix", ""));, +            builder.put("logger.level", nodeSettings.get("logger.level", "INFO"));, +            builder.put("config.ignore_system_properties", true);, +                return TransportClientFactory.NO_SNIFF_CLIENT_FACTORY.client(node, clusterName, random);, +    public synchronized void startNodeClient(Settings settings) {, +        ensureOpen(); // currently unused, +        Builder builder = settingsBuilder().put(settings).put("node.client", true).put("node.data", false);, +        if (size() == 0) {, +            // if we are the first node - don't wait for a state, +            builder.put("discovery.initial_state_timeout", 0);, +        }, +        startNode(builder);, +    }, +, +++ b/pom.xml, +                <version>1.6.1</version>, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +import org.hamcrest.CoreMatchers;, +        ExternalNode externalNode = new ExternalNode(backwardsCompatibilityPath(), randomLong(), new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +        NodeSettingsSource nodeSettingsSource = new NodeSettingsSource() {, +            public Settings settings(int nodeOrdinal) {, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes, clusterName(scope.name(), ElasticsearchTestCase.CHILD_VM_ID, currentClusterSeed), nodeSettingsSource, numClientNodes, enableRandomBenchNodes);, +++ b/src/test/java/org/elasticsearch/test/ExternalNode.java, +    private final NodeSettingsSource nodeSettingsSource;, +    ExternalNode(File path, long seed, NodeSettingsSource nodeSettingsSource) {, +        this(path, null, seed, nodeSettingsSource);, +    ExternalNode(File path, String clusterName, long seed, NodeSettingsSource nodeSettingsSource) {]