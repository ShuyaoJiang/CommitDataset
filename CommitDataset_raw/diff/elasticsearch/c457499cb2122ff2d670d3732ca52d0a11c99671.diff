[+++ b/dev-tools/tests.policy, +  // needed for natives calls, +  permission java.lang.RuntimePermission "createSecurityManager";, +++ b/dev-tools/tests.policy, +  // needed for natives calls, +  permission java.lang.RuntimePermission "createSecurityManager";, +++ b/src/main/java/org/elasticsearch/common/jna/Kernel32Library.java, +    // Callbacks must be kept around in order to be able to be called later,, +    // when the Windows ConsoleCtrlHandler sends an event., +    // Native library instance must be kept around for the same reason., +            Native.register("kernel32");, +    /**, +     * Adds a Console Ctrl Handler., +     *, +     * @param handler, +     * @return true if the handler is correctly set, +     * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found, +     * @throws java.lang.NoClassDefFoundError if the library for native calls is missing, +     */, +            result = SetConsoleCtrlHandler(callback, true);, +     * Native call to the Kernel32 API to set a new Console Ctrl Handler., +     * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found, +     * @throws java.lang.NoClassDefFoundError if the library for native calls is missing, +    public native boolean SetConsoleCtrlHandler(StdCallLibrary.StdCallCallback handler, boolean add);, +++ b/dev-tools/tests.policy, +  // needed for natives calls, +  permission java.lang.RuntimePermission "createSecurityManager";, +++ b/src/main/java/org/elasticsearch/common/jna/Kernel32Library.java, +    // Callbacks must be kept around in order to be able to be called later,, +    // when the Windows ConsoleCtrlHandler sends an event., +    // Native library instance must be kept around for the same reason., +            Native.register("kernel32");, +    /**, +     * Adds a Console Ctrl Handler., +     *, +     * @param handler, +     * @return true if the handler is correctly set, +     * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found, +     * @throws java.lang.NoClassDefFoundError if the library for native calls is missing, +     */, +            result = SetConsoleCtrlHandler(callback, true);, +     * Native call to the Kernel32 API to set a new Console Ctrl Handler., +     * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found, +     * @throws java.lang.NoClassDefFoundError if the library for native calls is missing, +    public native boolean SetConsoleCtrlHandler(StdCallLibrary.StdCallCallback handler, boolean add);, +++ /dev/null, +++ b/dev-tools/tests.policy, +  // needed for natives calls, +  permission java.lang.RuntimePermission "createSecurityManager";, +++ b/src/main/java/org/elasticsearch/common/jna/Kernel32Library.java, +    // Callbacks must be kept around in order to be able to be called later,, +    // when the Windows ConsoleCtrlHandler sends an event., +    // Native library instance must be kept around for the same reason., +            Native.register("kernel32");, +    /**, +     * Adds a Console Ctrl Handler., +     *, +     * @param handler, +     * @return true if the handler is correctly set, +     * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found, +     * @throws java.lang.NoClassDefFoundError if the library for native calls is missing, +     */, +            result = SetConsoleCtrlHandler(callback, true);, +     * Native call to the Kernel32 API to set a new Console Ctrl Handler., +     * @throws java.lang.UnsatisfiedLinkError if the Kernel32 library is not loaded or if the native function is not found, +     * @throws java.lang.NoClassDefFoundError if the library for native calls is missing, +    public native boolean SetConsoleCtrlHandler(StdCallLibrary.StdCallCallback handler, boolean add);, +++ /dev/null, +++ b/src/test/java/org/elasticsearch/common/jna/NativesTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.jna;, +, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.common.jna.Kernel32Library.ConsoleCtrlHandler;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.util.HashMap;, +import java.util.Map;, +]