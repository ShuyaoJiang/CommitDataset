[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +, +    /**, +     * Read anything left in the stream before, +     * closing the stream otherwise if the process, +     * tries to write more after the close it gets, +     * a SIGPIPE, +     */, +    void consumeAndCloseOutputStream();, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +, +    /**, +     * Read anything left in the stream before, +     * closing the stream otherwise if the process, +     * tries to write more after the close it gets, +     * a SIGPIPE, +     */, +    void consumeAndCloseOutputStream();, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/BlackHoleAutodetectProcess.java, +    public void consumeAndCloseOutputStream() {, +    }, +, +    @Override, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +, +    /**, +     * Read anything left in the stream before, +     * closing the stream otherwise if the process, +     * tries to write more after the close it gets, +     * a SIGPIPE, +     */, +    void consumeAndCloseOutputStream();, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/BlackHoleAutodetectProcess.java, +    public void consumeAndCloseOutputStream() {, +    }, +, +    @Override, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +, +    @Override, +    public void consumeAndCloseOutputStream() {, +        try {, +            byte[] buff = new byte[512];, +            while (processOutStream().read(buff) >= 0) {, +                // Do nothing, +            }, +            processOutStream().close();, +        } catch (IOException e) {, +            throw new RuntimeException("Error closing result parser input stream", e);, +        }, +    }, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcess.java, +, +    /**, +     * Read anything left in the stream before, +     * closing the stream otherwise if the process, +     * tries to write more after the close it gets, +     * a SIGPIPE, +     */, +    void consumeAndCloseOutputStream();, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/BlackHoleAutodetectProcess.java, +    public void consumeAndCloseOutputStream() {, +    }, +, +    @Override, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcess.java, +, +    @Override, +    public void consumeAndCloseOutputStream() {, +        try {, +            byte[] buff = new byte[512];, +            while (processOutStream().read(buff) >= 0) {, +                // Do nothing, +            }, +            processOutStream().close();, +        } catch (IOException e) {, +            throw new RuntimeException("Error closing result parser input stream", e);, +        }, +    }, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java, +import org.elasticsearch.xpack.ml.job.persistence.JobResultsProvider;, +            readResults(process, context);, +    private void readResults(AutodetectProcess process, Context context) {, +        bucketCount = 0;, +        try {, +            Iterator<AutodetectResult> iterator = process.readAutodetectResults();, +            while (iterator.hasNext()) {, +                try {, +                    AutodetectResult result = iterator.next();, +                    processResult(context, result);, +                    if (result.getBucket() != null) {, +                        LOGGER.trace("[{}] Bucket number {} parsed from output", jobId, bucketCount);, +                    }, +                } catch (Exception e) {, +                    if (processKilled) {, +                        throw e;, +                    }, +                    if (process.isProcessAliveAfterWaiting() == false) {, +                        throw e;, +                    }]