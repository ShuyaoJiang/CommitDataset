[+++ b/src/main/java/org/apache/lucene/index/memory/CustomMemoryIndex.java, +/*, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Comparator;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute;, +import org.apache.lucene.index.AtomicReader;, +import org.apache.lucene.index.AtomicReaderContext;, +import org.apache.lucene.index.FieldInfo;, +import org.apache.lucene.index.Norm;, +import org.apache.lucene.index.DocValues;, +import org.apache.lucene.index.DocsAndPositionsEnum;, +import org.apache.lucene.index.DocsEnum;, +import org.apache.lucene.index.FieldInfos;, +import org.apache.lucene.index.FieldInvertState;, +import org.apache.lucene.index.Fields;, +import org.apache.lucene.index.OrdTermState;, +import org.apache.lucene.index.StoredFieldVisitor;, +import org.apache.lucene.index.TermState;, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.index.TermsEnum;, +import org.apache.lucene.index.FieldInfo.IndexOptions;, +import org.apache.lucene.index.memory.MemoryIndexNormDocValues.SingleValueSource;, +import org.apache.lucene.search.Collector;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.similarities.Similarity;, +import org.apache.lucene.store.RAMDirectory; // for javadocs, +import org.apache.lucene.util.Bits;, +import org.apache.lucene.util.BytesRef;, +import org.apache.lucene.util.Constants; // for javadocs, + *, + *, + * <pre class="prettyprint">, + * <p>, + * <p>, + * href="{@docRoot}/../queryparser/org/apache/lucene/queryparser/classic/package-summary.html#package_description">, + * Lucene Query Syntax</a>, + * <p>, + *, + *, + *, + * <pre class="prettyprint">, + * Analyzer analyzer = new SimpleAnalyzer(version);, + * QueryParser parser = new QueryParser(version, "content", analyzer);, + *, + *, + *, + * <pre class="prettyprint">, + *, + *, + *, + * <pre class="prettyprint">, + *, + *, + *, + * <p>, + * <p>, + * <p>, + *, +public class CustomMemoryIndex {, +    /** info for each field: Map<String fieldName, Info field> */, +    /** fields sorted ascending by fieldName; lazily computed on demand */, +    /** pos: positions[3*i], startOffset: positions[3*i +1], endOffset: positions[3*i +2] */, +    /** Could be made configurable; */, +    private HashMap<String,FieldInfo> fieldInfos = new HashMap<String,FieldInfo>();, +        @SuppressWarnings({"unchecked","rawtypes"}), +            return ((Comparable) o1).compareTo((Comparable) o2);, +     * Protected until the highlighter package matures, so that this can actually, +     * @param storeOffsets, +     *            whether or not to store the start and end character offset of, +    protected CustomMemoryIndex(boolean storeOffsets) {, +     * {@link org.apache.lucene.document.Field} that is tokenized, not stored,, +     * termVectorStored with positions (or termVectorStored with positions and offsets),, +     * @param fieldName, +     *            a name to be associated with the text, +     * @param text, +     *            the text to tokenize and index., +     * @param analyzer, +     *            the analyzer to use for tokenization, +            stream = analyzer.tokenStream(fieldName, new FastStringReader(text));, +     * @param keywords, +     *            the keywords to generate tokens for, +     * @param fieldName, +     *            a name to be associated with the text, +     * @param stream, +     *            the token stream to retrieve tokens from, +     * {@link #keywordTokenStream(Collection)}, the Lucene <code>KeywordTokenizer</code> or similar utilities., +     * @param fieldName, +     *            a name to be associated with the text, +     * @param stream, +     *            the token stream to retrieve tokens from., +     * @param boost, +     *            the boost factor for hits for this field]