[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/whitelist/InternalSqlScriptUtils.java, +            if (dateTime instanceof String) {, +                return DateUtils.asDateTime(dateTime.toString());, +            }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/whitelist/InternalSqlScriptUtils.java, +            if (dateTime instanceof String) {, +                return DateUtils.asDateTime(dateTime.toString());, +            }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/script/ScriptWeaver.java, +import org.elasticsearch.xpack.sql.util.DateUtils;, +, +import java.time.ZonedDateTime;, +, +        //, +        // Custom type handling, +        //, +, +        if (fold instanceof ZonedDateTime) {, +            ZonedDateTime zdt = (ZonedDateTime) fold;, +            return new ScriptTemplate(processScript("{sql}.asDateTime({})"),, +                    paramsBuilder().variable(DateUtils.toString(zdt)).build(), dataType());, +        }, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/whitelist/InternalSqlScriptUtils.java, +            if (dateTime instanceof String) {, +                return DateUtils.asDateTime(dateTime.toString());, +            }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/script/ScriptWeaver.java, +import org.elasticsearch.xpack.sql.util.DateUtils;, +, +import java.time.ZonedDateTime;, +, +        //, +        // Custom type handling, +        //, +, +        if (fold instanceof ZonedDateTime) {, +            ZonedDateTime zdt = (ZonedDateTime) fold;, +            return new ScriptTemplate(processScript("{sql}.asDateTime({})"),, +                    paramsBuilder().variable(DateUtils.toString(zdt)).build(), dataType());, +        }, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import static org.hamcrest.CoreMatchers.containsString;, +, +    public void testZonedDateTimeInScripts() throws Exception {, +        PhysicalPlan p = optimizeAndPlan(, +                "SELECT date FROM test WHERE date + INTERVAL 1 YEAR > CAST('2019-03-11T12:34:56.000Z' AS DATETIME)");, +        assertEquals(EsQueryExec.class, p.getClass());, +        EsQueryExec eqe = (EsQueryExec) p;, +        assertThat(eqe.queryContainer().toString().replaceAll("\\s+", ""), containsString(, +                "\"script\":{\"script\":{\"source\":\"InternalSqlScriptUtils.nullSafeFilter(", +                + "InternalSqlScriptUtils.gt(InternalSqlScriptUtils.add(InternalSqlScriptUtils.docValue(doc,params.v0),", +                + "InternalSqlScriptUtils.intervalYearMonth(params.v1,params.v2)),InternalSqlScriptUtils.asDateTime(params.v3)))\",", +                + "\"lang\":\"painless\",", +                + "\"params\":{\"v0\":\"date\",\"v1\":\"P1Y\",\"v2\":\"INTERVAL_YEAR\",\"v3\":\"2019-03-11T12:34:56.000Z\"}},"));, +    }]