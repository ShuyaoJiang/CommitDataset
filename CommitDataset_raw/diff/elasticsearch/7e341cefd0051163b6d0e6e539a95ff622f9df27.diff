[+++ b/docs/reference/search/percolate.asciidoc, +* `sort` - Define a sort specification like in the search api. Currently only sorting `_score` reverse (default relevancy), +is supported. Other sort fields will throw an exception. The `size` and `query` option are required for this setting. Like, +`track_score` the score is based on the query and represents how the query matched to the percolate query's metadata, +and *not* how the document being percolated matched to the query., +++ b/docs/reference/search/percolate.asciidoc, +* `sort` - Define a sort specification like in the search api. Currently only sorting `_score` reverse (default relevancy), +is supported. Other sort fields will throw an exception. The `size` and `query` option are required for this setting. Like, +`track_score` the score is based on the query and represents how the query matched to the percolate query's metadata, +and *not* how the document being percolated matched to the query., +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.sort.SortBuilder;, +     * Similar as {@link #setScore(boolean)}, but whether to sort by the score descending., +    public PercolateRequestBuilder setSortByScore(boolean sort) {, +     * Adds, +     */, +    public PercolateRequestBuilder addSort(SortBuilder sort) {, +        sourceBuilder().addSort(sort);, +        return this;, +    }, +, +    /**, +++ b/docs/reference/search/percolate.asciidoc, +* `sort` - Define a sort specification like in the search api. Currently only sorting `_score` reverse (default relevancy), +is supported. Other sort fields will throw an exception. The `size` and `query` option are required for this setting. Like, +`track_score` the score is based on the query and represents how the query matched to the percolate query's metadata, +and *not* how the document being percolated matched to the query., +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.sort.SortBuilder;, +     * Similar as {@link #setScore(boolean)}, but whether to sort by the score descending., +    public PercolateRequestBuilder setSortByScore(boolean sort) {, +     * Adds, +     */, +    public PercolateRequestBuilder addSort(SortBuilder sort) {, +        sourceBuilder().addSort(sort);, +        return this;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.sort.ScoreSortBuilder;, +import org.elasticsearch.search.sort.SortBuilder;, +    private List<SortBuilder> sorts;, +     * Similar as {@link #setTrackScores(boolean)}, but whether to sort by the score descending., +        if (sort) {, +            addSort(new ScoreSortBuilder());, +        } else {, +            this.sorts = null;, +        }, +        return this;, +    }, +, +    /**, +     * Adds a sort builder. Only sorting by score desc is supported., +     */, +    public PercolateSourceBuilder addSort(SortBuilder sort) {, +        if (sorts == null) {, +            sorts = Lists.newArrayList();, +        }, +        sorts.add(sort);, +        if (sorts != null) {, +            builder.startArray("sort");, +            for (SortBuilder sort : sorts) {, +                builder.startObject();, +                sort.toXContent(builder, params);, +                builder.endObject();, +            }, +            builder.endArray();, +++ b/docs/reference/search/percolate.asciidoc, +* `sort` - Define a sort specification like in the search api. Currently only sorting `_score` reverse (default relevancy), +is supported. Other sort fields will throw an exception. The `size` and `query` option are required for this setting. Like, +`track_score` the score is based on the query and represents how the query matched to the percolate query's metadata, +and *not* how the document being percolated matched to the query., +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +import org.elasticsearch.search.sort.SortBuilder;, +     * Similar as {@link #setScore(boolean)}, but whether to sort by the score descending., +    public PercolateRequestBuilder setSortByScore(boolean sort) {, +     * Adds, +     */, +    public PercolateRequestBuilder addSort(SortBuilder sort) {, +        sourceBuilder().addSort(sort);, +        return this;, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +import org.elasticsearch.search.sort.ScoreSortBuilder;, +import org.elasticsearch.search.sort.SortBuilder;, +    private List<SortBuilder> sorts;, +     * Similar as {@link #setTrackScores(boolean)}, but whether to sort by the score descending., +        if (sort) {, +            addSort(new ScoreSortBuilder());, +        } else {, +            this.sorts = null;, +        }, +        return this;, +    }, +, +    /**, +     * Adds a sort builder. Only sorting by score desc is supported.]