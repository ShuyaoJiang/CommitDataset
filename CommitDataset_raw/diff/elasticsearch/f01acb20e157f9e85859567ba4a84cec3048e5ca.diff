[+++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse() {, +++ b/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +    public ClusterStateResponse() {, +++ b/src/main/java/org/elasticsearch/client/transport/TransportClientNodesService.java, +import com.google.common.collect.Sets;, +import jsr166y.LinkedTransferQueue;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateAction;, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;, +import java.util.Set;, +            Set<DiscoveryNode> nodesToPing = Sets.newHashSet();, +                nodesToPing.add(node);, +                nodesToPing.add(node);, +            final LinkedTransferQueue<ClusterStateResponse> clusterStateResponses = new LinkedTransferQueue<ClusterStateResponse>();, +            for (final DiscoveryNode listedNode : nodesToPing) {, +, +                                    // if its one of hte actual nodes we will talk to, not to listed nodes, fully connect, +                                    if (nodes.contains(listedNode)) {, +                                        logger.trace("connecting to cluster node [{}]", listedNode);, +                                    } else {, +                                        // its a listed node, light connect to it..., +                                        logger.trace("connecting to listed node (light) [{}]", listedNode);, +                                        transportService.connectToNodeLight(listedNode);, +                                    }, +                            transportService.sendRequest(listedNode, ClusterStateAction.NAME,, +                                    Requests.clusterStateRequest(), +                                            .filterAll().filterNodes(false).local(true),, +                                    new BaseTransportResponseHandler<ClusterStateResponse>() {, +                                        public ClusterStateResponse newInstance() {, +                                            return new ClusterStateResponse();, +                                        public void handleResponse(ClusterStateResponse response) {, +                                            clusterStateResponses.add(response);, +                                            logger.info("failed to get local cluster state for {}, disconnecting...", e, listedNode);, +                            logger.info("failed to get local cluster state info for {}, disconnecting...", e, listedNode);, +            for (ClusterStateResponse clusterStateResponse : clusterStateResponses) {, +                if (!clusterName.equals(clusterStateResponse.clusterName())) {, +                    logger.warn("node {} not part of the cluster {}, ignoring...", clusterStateResponse.state().nodes().localNode(), clusterName);, +                for (DiscoveryNode node : clusterStateResponse.state().nodes().dataNodes().values()) {, +                    newNodes.add(node);]