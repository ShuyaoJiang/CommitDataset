[+++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.warn("can't send shard failed for {}, no master known.", shardRouting);, +++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.warn("can't send shard failed for {}, no master known.", shardRouting);, +++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                } catch (Throwable e) {, +                    sendFailShard(shard, indexMetaData.getUUID(), "failed to create index", e);, +            try {, +            } catch (Throwable t) {, +                // if we failed the mappings anywhere, we need to fail the shards for this index, note, we safeguard, +                // by creating the processing the mappings on the master, or on the node the mapping was introduced on,, +                // so this failure typically means wrong node level configuration or something similar, +                for (IndexShard indexShard : indexService) {, +                    ShardRouting shardRouting = indexShard.routingEntry();, +                    failAndRemoveShard(shardRouting, indexService, true, "failed to update mappings", t);, +                }, +            }, +    private boolean processMapping(String index, MapperService mapperService, String mappingType, CompressedString mappingSource) throws Throwable {, +            throw e;, +                    sendFailShard(shardRouting, indexMetaData.getUUID(), "master [" + nodes.masterNode() + "] marked shard as started, but shard has not been created, mark shard as failed", null);, +                failAndRemoveShard(shardRouting, indexService, true, "failed to create shard", e);, +                handleRecoveryFailure(indexService, shardRouting, true, e);, +                    handleRecoveryFailure(indexService, shardRouting, true, e);, +            handleRecoveryFailure(indexService, shardRouting, sendShardFailure, e);, +    private void handleRecoveryFailure(IndexService indexService, ShardRouting shardRouting, boolean sendShardFailure, Throwable failure) {, +            failAndRemoveShard(shardRouting, indexService, sendShardFailure, "failed recovery", failure);, +    private void failAndRemoveShard(ShardRouting shardRouting, IndexService indexService, boolean sendShardFailure, String message, @Nullable Throwable failure) {, +        if (indexService.hasShard(shardRouting.getId())) {, +            try {, +                indexService.removeShard(shardRouting.getId(), message);, +            } catch (IndexShardMissingException e) {, +                // the node got closed on us, ignore it, +            } catch (Throwable e1) {, +                logger.warn("[{}][{}] failed to remove shard after failure ([{}])", e1, shardRouting.getIndex(), shardRouting.getId(), message);, +            }, +        }, +        if (sendShardFailure) {, +            sendFailShard(shardRouting, indexService.indexUUID(), message, failure);, +        }, +    }, +, +    private void sendFailShard(ShardRouting shardRouting, String indexUUID, String message, @Nullable Throwable failure) {, +        try {, +            logger.warn("[{}] marking and sending shard failed due to [{}]", failure, shardRouting.shardId(), message);, +            failedShards.put(shardRouting.shardId(), new FailedShard(shardRouting.version()));, +            shardStateAction.shardFailed(shardRouting, indexUUID, "shard failure [" + message + "]" + (failure == null ? "" : "[" + detailedMessage(failure) + "]"));, +        } catch (Throwable e1) {, +            logger.warn("[{}][{}] failed to mark shard as failed (because of [{}])", e1, shardRouting.getIndex(), shardRouting.getId(), message);, +        }, +    }, +, +                logger.warn("[{}][{}] engine failed, but can't find index shard. failure reason: [{}]", failure,, +                        failAndRemoveShard(fShardRouting, indexService, true, "engine failure, reason [" + reason + "]", failure);, +++ b/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +            logger.warn("can't send shard failed for {}, no master known.", shardRouting);, +++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                } catch (Throwable e) {, +                    sendFailShard(shard, indexMetaData.getUUID(), "failed to create index", e);, +            try {, +            } catch (Throwable t) {, +                // if we failed the mappings anywhere, we need to fail the shards for this index, note, we safeguard, +                // by creating the processing the mappings on the master, or on the node the mapping was introduced on,, +                // so this failure typically means wrong node level configuration or something similar, +                for (IndexShard indexShard : indexService) {, +                    ShardRouting shardRouting = indexShard.routingEntry();, +                    failAndRemoveShard(shardRouting, indexService, true, "failed to update mappings", t);, +                }, +            }, +    private boolean processMapping(String index, MapperService mapperService, String mappingType, CompressedString mappingSource) throws Throwable {, +            throw e;, +                    sendFailShard(shardRouting, indexMetaData.getUUID(), "master [" + nodes.masterNode() + "] marked shard as started, but shard has not been created, mark shard as failed", null);, +                failAndRemoveShard(shardRouting, indexService, true, "failed to create shard", e);, +                handleRecoveryFailure(indexService, shardRouting, true, e);, +                    handleRecoveryFailure(indexService, shardRouting, true, e);, +            handleRecoveryFailure(indexService, shardRouting, sendShardFailure, e);, +    private void handleRecoveryFailure(IndexService indexService, ShardRouting shardRouting, boolean sendShardFailure, Throwable failure) {, +            failAndRemoveShard(shardRouting, indexService, sendShardFailure, "failed recovery", failure);, +    private void failAndRemoveShard(ShardRouting shardRouting, IndexService indexService, boolean sendShardFailure, String message, @Nullable Throwable failure) {, +        if (indexService.hasShard(shardRouting.getId())) {, +            try {, +                indexService.removeShard(shardRouting.getId(), message);, +            } catch (IndexShardMissingException e) {, +                // the node got closed on us, ignore it, +            } catch (Throwable e1) {, +                logger.warn("[{}][{}] failed to remove shard after failure ([{}])", e1, shardRouting.getIndex(), shardRouting.getId(), message);, +            }, +        }, +        if (sendShardFailure) {, +            sendFailShard(shardRouting, indexService.indexUUID(), message, failure);, +        }, +    }, +, +    private void sendFailShard(ShardRouting shardRouting, String indexUUID, String message, @Nullable Throwable failure) {, +        try {, +            logger.warn("[{}] marking and sending shard failed due to [{}]", failure, shardRouting.shardId(), message);, +            failedShards.put(shardRouting.shardId(), new FailedShard(shardRouting.version()));, +            shardStateAction.shardFailed(shardRouting, indexUUID, "shard failure [" + message + "]" + (failure == null ? "" : "[" + detailedMessage(failure) + "]"));, +        } catch (Throwable e1) {, +            logger.warn("[{}][{}] failed to mark shard as failed (because of [{}])", e1, shardRouting.getIndex(), shardRouting.getId(), message);, +        }]