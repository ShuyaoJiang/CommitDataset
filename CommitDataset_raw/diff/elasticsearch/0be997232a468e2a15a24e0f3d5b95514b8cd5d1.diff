[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError"), +                        ), +                    );, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java, +            List<? extends FailedNodeException> nodeFailures) {, +    /**, +     * Set a reference to the {@linkplain DiscoveryNodes}. Used for calling {@link #toXContent(XContentBuilder, ToXContent.Params)} with, +     * {@code group_by=nodes}., +     */, +    public void setDiscoveryNodes(DiscoveryNodes discoveryNodes) {, +        //WTF is this? Why isn't this set by default;, +        this.discoveryNodes = discoveryNodes;, +    }, +, +            if (discoveryNodes == null) {, +                throw new IllegalStateException("discoveryNodes must be set before calling toXContent with group_by=nodes");, +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.groovy, +++ b/core/src/main/java/org/elasticsearch/ExceptionsHelper.java, +     * Returns <code>true</code> iff the given throwable is and OutOfMemoryException, otherwise <code>false</code>, +     */, +    public static boolean isOOM(Throwable t) {, +        return t != null, +                && (t instanceof OutOfMemoryError, +                    || (t instanceof IllegalStateException, +                        && t.getMessage() != null, +                        && t.getMessage().contains("OutOfMemoryError")]