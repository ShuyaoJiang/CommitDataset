[+++ b/src/test/java/org/elasticsearch/watcher/test/integration/NoMasterNodeTests.java, +import org.elasticsearch.discovery.zen.ping.ZenPing;, +import org.elasticsearch.discovery.zen.ping.ZenPingService;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +@TestLogging("discovery:TRACE"), +        // Due to the fact that the elected master node gets stopped before the ping timeout has passed,, +        // the unicast ping may have cached ping responses. This can cause the existing node to think, +        // that there is another node and if its node id is lower than the node that has been stopped it, +        // will elect itself as master. This is bad and should be fixed in core. What I think that should happen is that, +        // if a node detects that is has lost a node, a node should clear its unicast temporal responses or at least, +        // remove the node that has been removed. This is a workaround:, +        for (ZenPingService pingService : internalCluster().getInstances(ZenPingService.class)) {, +            for (ZenPing zenPing : pingService.zenPings()) {, +                if (zenPing instanceof UnicastZenPing) {, +                    ((UnicastZenPing) zenPing).clearTemporalResponses();, +                }, +            }, +        }]