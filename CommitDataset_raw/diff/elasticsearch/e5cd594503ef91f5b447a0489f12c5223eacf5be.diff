[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +import com.google.common.collect.Maps;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.util.io.Streams;, +import java.io.File;, +import java.io.FileReader;, +import java.io.IOException;, +    private final Environment environment;, +    @Inject public MetaDataService(Settings settings, Environment environment, ClusterService clusterService, IndicesService indicesService, ShardsRoutingStrategy shardsRoutingStrategy,, +        this.environment = environment;, +    public synchronized CreateIndexResult createIndex(final String index, final Settings indexSettings, Map<String, String> mappings, TimeValue timeout) throws IndexAlreadyExistsException {, +        // add to the mappings files that exists within the config/mappings location, +        if (mappings == null) {, +            mappings = Maps.newHashMap();, +        } else {, +            mappings = Maps.newHashMap(mappings);, +        }, +        File mappingsDir = new File(environment.configFile(), "mappings");, +        if (mappingsDir.exists() && mappingsDir.isDirectory()) {, +            File[] mappingsFiles = mappingsDir.listFiles();, +            for (File mappingFile : mappingsFiles) {, +                String fileNameNoSuffix = mappingFile.getName().substring(0, mappingFile.getName().lastIndexOf('.'));, +                if (mappings.containsKey(fileNameNoSuffix)) {, +                    // if we have the mapping defined, ignore it, +                    continue;, +                }, +                try {, +                    mappings.put(fileNameNoSuffix, Streams.copyToString(new FileReader(mappingFile)));, +                } catch (IOException e) {, +                    logger.warn("Failed to read mapping [" + fileNameNoSuffix + "] from location [" + mappingFile + "], ignoring...", e);, +                }, +            }, +        }, +        final Map<String, String> fMappings = mappings;, +, +                for (Map.Entry<String, String> entry : fMappings.entrySet()) {, +                logger.info("Creating Index [{}], shards [{}]/[{}], mappings {}", new Object[]{index, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet()});, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataService.java, +import com.google.common.collect.Maps;, +import org.elasticsearch.env.Environment;, +import org.elasticsearch.util.io.Streams;, +import java.io.File;, +import java.io.FileReader;, +import java.io.IOException;, +    private final Environment environment;, +    @Inject public MetaDataService(Settings settings, Environment environment, ClusterService clusterService, IndicesService indicesService, ShardsRoutingStrategy shardsRoutingStrategy,, +        this.environment = environment;, +    public synchronized CreateIndexResult createIndex(final String index, final Settings indexSettings, Map<String, String> mappings, TimeValue timeout) throws IndexAlreadyExistsException {, +        // add to the mappings files that exists within the config/mappings location, +        if (mappings == null) {, +            mappings = Maps.newHashMap();, +        } else {, +            mappings = Maps.newHashMap(mappings);, +        }, +        File mappingsDir = new File(environment.configFile(), "mappings");, +        if (mappingsDir.exists() && mappingsDir.isDirectory()) {, +            File[] mappingsFiles = mappingsDir.listFiles();, +            for (File mappingFile : mappingsFiles) {, +                String fileNameNoSuffix = mappingFile.getName().substring(0, mappingFile.getName().lastIndexOf('.'));, +                if (mappings.containsKey(fileNameNoSuffix)) {, +                    // if we have the mapping defined, ignore it, +                    continue;, +                }, +                try {, +                    mappings.put(fileNameNoSuffix, Streams.copyToString(new FileReader(mappingFile)));, +                } catch (IOException e) {, +                    logger.warn("Failed to read mapping [" + fileNameNoSuffix + "] from location [" + mappingFile + "], ignoring...", e);, +                }, +            }, +        }, +        final Map<String, String> fMappings = mappings;, +, +                for (Map.Entry<String, String> entry : fMappings.entrySet()) {, +                logger.info("Creating Index [{}], shards [{}]/[{}], mappings {}", new Object[]{index, indexMetaData.numberOfShards(), indexMetaData.numberOfReplicas(), fMappings.keySet()});, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/env/Environment.java, +    public File configFile() {, +        return configFile;, +    }, +]