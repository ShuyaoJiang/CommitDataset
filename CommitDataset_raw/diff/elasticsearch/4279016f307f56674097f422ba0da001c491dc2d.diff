[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +import org.elasticsearch.common.unit.TimeValue;, +, +, +    public static TimeValue nodeTimeValue(Object node, TimeValue defaultValue) {, +        if (node == null) {, +            return defaultValue;, +        }, +        return nodeTimeValue(node);, +    }, +, +    public static TimeValue nodeTimeValue(Object node) {, +        if (node instanceof Number) {, +            return TimeValue.timeValueMillis(((Number) node).longValue());, +        }, +        return TimeValue.parseTimeValue(node.toString(), null);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +import org.elasticsearch.common.unit.TimeValue;, +, +, +    public static TimeValue nodeTimeValue(Object node, TimeValue defaultValue) {, +        if (node == null) {, +            return defaultValue;, +        }, +        return nodeTimeValue(node);, +    }, +, +    public static TimeValue nodeTimeValue(Object node) {, +        if (node instanceof Number) {, +            return TimeValue.timeValueMillis(((Number) node).longValue());, +        }, +        return TimeValue.parseTimeValue(node.toString(), null);, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java, +        public static final long DEFAULT = -1;, +        private long defaultTTL = Defaults.DEFAULT;, +        public Builder defaultTTL(long defaultTTL) {, +            this.defaultTTL = defaultTTL;, +            return builder;, +        }, +, +            return new TTLFieldMapper(store, index, enabled, defaultTTL);, +                } else if (fieldName.equals("default")) {, +                    TimeValue ttlTimeValue = nodeTimeValue(fieldNode, null);, +                    if (ttlTimeValue != null) {, +                        builder.defaultTTL(ttlTimeValue.millis());, +                    }, +    private long defaultTTL;, +        this(Defaults.STORE, Defaults.INDEX, Defaults.ENABLED, Defaults.DEFAULT);, +    protected TTLFieldMapper(Field.Store store, Field.Index index, boolean enabled, long defaultTTL) {, +        this.defaultTTL = defaultTTL;, +    public long defaultTTL() {, +        return this.defaultTTL;, +    }, +, +            if (ttl <= 0 && defaultTTL > 0) { // no ttl provided so we use the default value, +                ttl = defaultTTL;, +            }, +                long timestamp = context.sourceToParse().timestamp();, +        if (enabled == Defaults.ENABLED && defaultTTL == Defaults.DEFAULT) {, +        if (defaultTTL != Defaults.DEFAULT) {, +            builder.field("default", defaultTTL);, +        }]