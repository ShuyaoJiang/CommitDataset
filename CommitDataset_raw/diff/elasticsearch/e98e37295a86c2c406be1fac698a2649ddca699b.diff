[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            plugins = new PluginsAndModules(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            plugins = new PluginsAndModules(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginsAndModules.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class PluginsAndModules implements Writeable, ToXContent {, +    private final List<PluginInfo> plugins;, +    private final List<PluginInfo> modules;, +    public PluginsAndModules(List<PluginInfo> plugins, List<PluginInfo> modules) {, +        this.plugins = Collections.unmodifiableList(plugins);, +        this.modules = Collections.unmodifiableList(modules);, +    }, +, +    public PluginsAndModules(StreamInput in) throws IOException {, +        int pluginsSize = in.readInt();, +        List<PluginInfo> plugins = new ArrayList<>(pluginsSize);, +        for (int i = 0; i < pluginsSize; i++) {, +            plugins.add(PluginInfo.readFromStream(in));, +        }, +        this.plugins = Collections.unmodifiableList(plugins);, +        int modulesSize = in.readInt();, +        List<PluginInfo> modules = new ArrayList<>(modulesSize);, +        for (int i = 0; i < modulesSize; i++) {, +            modules.add(PluginInfo.readFromStream(in));, +        }, +        this.modules = Collections.unmodifiableList(modules);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeInt(plugins.size());, +        for (PluginInfo plugin : getPluginInfos()) {, +            plugin.writeTo(out);, +        }, +        out.writeInt(modules.size());, +        for (PluginInfo module : getModuleInfos()) {, +            module.writeTo(out);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            plugins = new PluginsAndModules(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginsAndModules.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class PluginsAndModules implements Writeable, ToXContent {, +    private final List<PluginInfo> plugins;, +    private final List<PluginInfo> modules;, +    public PluginsAndModules(List<PluginInfo> plugins, List<PluginInfo> modules) {, +        this.plugins = Collections.unmodifiableList(plugins);, +        this.modules = Collections.unmodifiableList(modules);, +    }, +, +    public PluginsAndModules(StreamInput in) throws IOException {, +        int pluginsSize = in.readInt();, +        List<PluginInfo> plugins = new ArrayList<>(pluginsSize);, +        for (int i = 0; i < pluginsSize; i++) {, +            plugins.add(PluginInfo.readFromStream(in));, +        }, +        this.plugins = Collections.unmodifiableList(plugins);, +        int modulesSize = in.readInt();, +        List<PluginInfo> modules = new ArrayList<>(modulesSize);, +        for (int i = 0; i < modulesSize; i++) {, +            modules.add(PluginInfo.readFromStream(in));, +        }, +        this.modules = Collections.unmodifiableList(modules);, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeInt(plugins.size());, +        for (PluginInfo plugin : getPluginInfos()) {, +            plugin.writeTo(out);, +        }, +        out.writeInt(modules.size());, +        for (PluginInfo module : getModuleInfos()) {, +            module.writeTo(out);, +        }, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +        List<PluginInfo> pluginsList = new ArrayList<>();, +            pluginsList.add(pluginInfo);, +        List<PluginInfo> modulesList = new ArrayList<>();, +                    modulesList.add(module.v1());, +                    pluginsList.add(plugin.v1());, +        this.info = new PluginsAndModules(pluginsList, modulesList);, +        this.plugins = Collections.unmodifiableList(pluginsLoaded);, +        for (Tuple<PluginInfo, Plugin> tuple : this.plugins) {, +        for (Tuple<PluginInfo, Plugin> pluginEntry : this.plugins) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/NodeInfo.java, +            plugins = new PluginsAndModules(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/info/PluginsAndModules.java, +import org.elasticsearch.common.io.stream.Writeable;, +public class PluginsAndModules implements Writeable, ToXContent {, +    private final List<PluginInfo> plugins;, +    private final List<PluginInfo> modules;, +    public PluginsAndModules(List<PluginInfo> plugins, List<PluginInfo> modules) {, +        this.plugins = Collections.unmodifiableList(plugins);, +        this.modules = Collections.unmodifiableList(modules);, +    }, +, +    public PluginsAndModules(StreamInput in) throws IOException {, +        int pluginsSize = in.readInt();]