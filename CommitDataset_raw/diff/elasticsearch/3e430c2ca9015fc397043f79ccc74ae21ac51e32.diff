[+++ b/plugins/memcached/src/main/java/org/elasticsearch/memcached/MemcachedRestRequest.java, +    private final byte[] uriBytes;, +, +    private int opaque;, +, +    public MemcachedRestRequest(Method method, String uri, byte[] uriBytes, int dataSize, boolean binary) {, +        this.uriBytes = uriBytes;, +    public byte[] getUriBytes() {, +        return uriBytes;, +    }, +, +    public boolean isBinary() {, +        return binary;, +    }, +, +    public int getOpaque() {, +        return opaque;, +    }, +, +    public void setOpaque(int opaque) {, +        this.opaque = opaque;, +    }, +, +++ b/plugins/memcached/src/main/java/org/elasticsearch/memcached/MemcachedRestRequest.java, +    private final byte[] uriBytes;, +, +    private int opaque;, +, +    public MemcachedRestRequest(Method method, String uri, byte[] uriBytes, int dataSize, boolean binary) {, +        this.uriBytes = uriBytes;, +    public byte[] getUriBytes() {, +        return uriBytes;, +    }, +, +    public boolean isBinary() {, +        return binary;, +    }, +, +    public int getOpaque() {, +        return opaque;, +    }, +, +    public void setOpaque(int opaque) {, +        this.opaque = opaque;, +    }, +, +++ b/plugins/memcached/src/main/java/org/elasticsearch/memcached/netty/MemcachedDecoder.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.memcached.netty;, +, +import org.elasticsearch.memcached.MemcachedRestRequest;, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.util.Unicode;, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.channel.Channel;, +import org.jboss.netty.channel.ChannelHandlerContext;, +import org.jboss.netty.channel.ExceptionEvent;, +import org.jboss.netty.handler.codec.frame.FrameDecoder;, +, +import java.io.StreamCorruptedException;, +import java.util.regex.Pattern;, +, +/**, + * @author kimchy (shay.banon), + */, +public class MemcachedDecoder extends FrameDecoder {, +, +    private final Pattern lineSplit = Pattern.compile(" +");, +, +    public static final byte CR = 13;, +    public static final byte LF = 10;, +    public static final byte[] CRLF = new byte[]{CR, LF};, +, +    private volatile StringBuffer sb = new StringBuffer();, +, +    private volatile MemcachedRestRequest request;, +, +    public MemcachedDecoder() {, +        super(false);, +    }, +, +    @Override protected Object decode(ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer) throws Exception {]