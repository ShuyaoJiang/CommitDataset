[+++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetMappingsAction.java, +        logger.debug("Serving getMapping request based on version {}", state.version());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetMappingsAction.java, +        logger.debug("Serving getMapping request based on version {}", state.version());, +++ b/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                            masterOperation(request, clusterService.state(), listener);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetMappingsAction.java, +        logger.debug("Serving getMapping request based on version {}", state.version());, +++ b/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                            masterOperation(request, clusterService.state(), listener);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +, +, +, +            CountDownListener countDownListener; // used to count ack responses before confirming operation is complete, +, +                    // counter the number of nodes participating so we can wait for responses from other nodes if needed, +                    int counter = 1; // this mast node, +                    countDownListener = new CountDownListener(counter, listener);, +                    mappingCreatedAction.add(countDownListener, request.timeout);, +, +                if (countDownListener != null) {, +                    // notify we did stuff on our end., +                    countDownListener.onNodeMappingCreated(null);, +            // response may be null - see clusterStateProcessed implementation in {@link MetaDataMappingService#putMapping}, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetMappingsAction.java, +        logger.debug("Serving getMapping request based on version {}", state.version());, +++ b/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                            masterOperation(request, clusterService.state(), listener);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +, +, +, +            CountDownListener countDownListener; // used to count ack responses before confirming operation is complete, +, +                    // counter the number of nodes participating so we can wait for responses from other nodes if needed, +                    int counter = 1; // this mast node, +                    countDownListener = new CountDownListener(counter, listener);, +                    mappingCreatedAction.add(countDownListener, request.timeout);, +, +                if (countDownListener != null) {, +                    // notify we did stuff on our end., +                    countDownListener.onNodeMappingCreated(null);, +            // response may be null - see clusterStateProcessed implementation in {@link MetaDataMappingService#putMapping}, +, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("Publishing cluster state version {}", newClusterState.version());, +                logger.debug("Updating cluster state version {}: {}", newClusterState.version(), newClusterState);, +                // TODO: do we want to call updateTask.onFailure here?, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetMappingsAction.java, +        logger.debug("Serving getMapping request based on version {}", state.version());, +++ b/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                            masterOperation(request, clusterService.state(), listener);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +, +, +, +            CountDownListener countDownListener; // used to count ack responses before confirming operation is complete, +, +                    // counter the number of nodes participating so we can wait for responses from other nodes if needed, +                    int counter = 1; // this mast node, +                    countDownListener = new CountDownListener(counter, listener);, +                    mappingCreatedAction.add(countDownListener, request.timeout);, +, +                if (countDownListener != null) {, +                    // notify we did stuff on our end., +                    countDownListener.onNodeMappingCreated(null);, +            // response may be null - see clusterStateProcessed implementation in {@link MetaDataMappingService#putMapping}, +, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("Publishing cluster state version {}", newClusterState.version());, +                logger.debug("Updating cluster state version {}: {}", newClusterState.version(), newClusterState);, +                // TODO: do we want to call updateTask.onFailure here?, +++ b/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java, +            logger.debug("Received clusterstate version {}", clusterState.version());, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetMappingsAction.java, +        logger.debug("Serving getMapping request based on version {}", state.version());, +++ b/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeOperationAction.java, +                            masterOperation(request, clusterService.state(), listener);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +, +, +, +            CountDownListener countDownListener; // used to count ack responses before confirming operation is complete, +, +                    // counter the number of nodes participating so we can wait for responses from other nodes if needed, +                    int counter = 1; // this mast node, +                    countDownListener = new CountDownListener(counter, listener);, +                    mappingCreatedAction.add(countDownListener, request.timeout);, +, +                if (countDownListener != null) {, +                    // notify we did stuff on our end., +                    countDownListener.onNodeMappingCreated(null);, +            // response may be null - see clusterStateProcessed implementation in {@link MetaDataMappingService#putMapping}, +, +++ b/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +                    logger.debug("Publishing cluster state version {}", newClusterState.version());, +                logger.debug("Updating cluster state version {}: {}", newClusterState.version(), newClusterState);, +                // TODO: do we want to call updateTask.onFailure here?]