[+++ b/pom.xml, +        <lucene.maven.version>5.0.0-snapshot-1650327</lucene.maven.version>, +            <url>https://download.elasticsearch.org/lucenesnapshots/1650327</url>, +++ b/pom.xml, +        <lucene.maven.version>5.0.0-snapshot-1650327</lucene.maven.version>, +            <url>https://download.elasticsearch.org/lucenesnapshots/1650327</url>, +++ b/src/main/java/org/apache/lucene/index/memory/ExtendedMemoryIndex.java, +    public ExtendedMemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {, +        super(storeOffsets, storePayloads, maxReusedBytes);, +++ b/pom.xml, +        <lucene.maven.version>5.0.0-snapshot-1650327</lucene.maven.version>, +            <url>https://download.elasticsearch.org/lucenesnapshots/1650327</url>, +++ b/src/main/java/org/apache/lucene/index/memory/ExtendedMemoryIndex.java, +    public ExtendedMemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {, +        super(storeOffsets, storePayloads, maxReusedBytes);, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                    stats.addTermsMemoryInBytes(guardedRamBytesUsed(segmentReader.getPostingsReader()));, +++ b/pom.xml, +        <lucene.maven.version>5.0.0-snapshot-1650327</lucene.maven.version>, +            <url>https://download.elasticsearch.org/lucenesnapshots/1650327</url>, +++ b/src/main/java/org/apache/lucene/index/memory/ExtendedMemoryIndex.java, +    public ExtendedMemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {, +        super(storeOffsets, storePayloads, maxReusedBytes);, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                    stats.addTermsMemoryInBytes(guardedRamBytesUsed(segmentReader.getPostingsReader()));, +++ b/src/main/java/org/elasticsearch/index/merge/policy/ElasticsearchMergePolicy.java, +    static CodecReader filter(CodecReader reader) throws IOException {, +        // convert 0.90.x _uid payloads to _version docvalues if needed, +        reader = VersionFieldUpgrader.wrap(reader);, +        // TODO: remove 0.90.x/1.x freqs/prox/payloads from _uid? , +        // the previous code never did this, so some indexes carry around trash., +        public List<CodecReader> getMergeReaders() throws IOException {, +            final List<CodecReader> newReaders = new ArrayList<>();, +            for (CodecReader reader : super.getMergeReaders()) {, +            return newReaders;, +++ b/pom.xml, +        <lucene.maven.version>5.0.0-snapshot-1650327</lucene.maven.version>, +            <url>https://download.elasticsearch.org/lucenesnapshots/1650327</url>, +++ b/src/main/java/org/apache/lucene/index/memory/ExtendedMemoryIndex.java, +    public ExtendedMemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {, +        super(storeOffsets, storePayloads, maxReusedBytes);, +++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java, +                    stats.addTermsMemoryInBytes(guardedRamBytesUsed(segmentReader.getPostingsReader()));, +++ b/src/main/java/org/elasticsearch/index/merge/policy/ElasticsearchMergePolicy.java, +    static CodecReader filter(CodecReader reader) throws IOException {, +        // convert 0.90.x _uid payloads to _version docvalues if needed, +        reader = VersionFieldUpgrader.wrap(reader);, +        // TODO: remove 0.90.x/1.x freqs/prox/payloads from _uid? , +        // the previous code never did this, so some indexes carry around trash., +        public List<CodecReader> getMergeReaders() throws IOException {, +            final List<CodecReader> newReaders = new ArrayList<>();, +            for (CodecReader reader : super.getMergeReaders()) {, +            return newReaders;, +++ b/src/main/java/org/elasticsearch/index/merge/policy/FilterDocValuesProducer.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.merge.policy;, +, +import org.apache.lucene.codecs.DocValuesProducer;, +import org.apache.lucene.index.BinaryDocValues;, +import org.apache.lucene.index.FieldInfo;, +import org.apache.lucene.index.NumericDocValues;, +import org.apache.lucene.index.SortedDocValues;, +import org.apache.lucene.index.SortedNumericDocValues;, +import org.apache.lucene.index.SortedSetDocValues;, +import org.apache.lucene.util.Accountable;, +import org.apache.lucene.util.Bits;, +, +import java.io.IOException;, +import java.util.Collection;, +import java.util.Collections;, +, +// TODO: move this to lucene's FilterCodecReader, +, +/** , + * Base class for filtering DocValuesProducer implementations., + * <p>, + * NOTE: just like with DocValuesProducer, the default {@link #getMergeInstance()} , + * is unoptimized. overriding this method when possible can improve performance., + */, +class FilterDocValuesProducer extends DocValuesProducer {, +    /** The underlying Producer instance. */, +    protected final DocValuesProducer in;]