[+++ b/server/src/main/java/org/elasticsearch/common/Rounding.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.common;, +, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.unit.TimeValue;, +, +import java.io.IOException;, +import java.time.DayOfWeek;, +import java.time.Instant;, +import java.time.LocalDateTime;, +import java.time.LocalTime;, +import java.time.OffsetDateTime;, +import java.time.ZoneId;, +import java.time.ZoneOffset;, +import java.time.ZonedDateTime;, +import java.time.temporal.ChronoField;, +import java.time.temporal.ChronoUnit;, +import java.time.temporal.IsoFields;, +import java.time.temporal.TemporalField;, +import java.time.zone.ZoneOffsetTransition;, +import java.util.List;, +import java.util.Objects;, +, +/**, + * A strategy for rounding date/time based values., + *, + * There are two implementations for rounding., + * The first one requires a date time unit and rounds to the supplied date time unit (i.e. quarter of year, day of month), + * The second one allows you to specify an interval to round to, + */, +public abstract class Rounding implements Writeable {, +, +    public static String format(long epochMillis) {, +        return Instant.ofEpochMilli(epochMillis) + "/" + epochMillis;, +    }, +, +    public enum DateTimeUnit {, +        WEEK_OF_WEEKYEAR(   (byte) 1, IsoFields.WEEK_OF_WEEK_BASED_YEAR),, +        YEAR_OF_CENTURY(    (byte) 2, ChronoField.YEAR_OF_ERA),, +        QUARTER_OF_YEAR(    (byte) 3, IsoFields.QUARTER_OF_YEAR),, +        MONTH_OF_YEAR(      (byte) 4, ChronoField.MONTH_OF_YEAR),, +        DAY_OF_MONTH(       (byte) 5, ChronoField.DAY_OF_MONTH),, +        HOUR_OF_DAY(        (byte) 6, ChronoField.HOUR_OF_DAY),, +        MINUTES_OF_HOUR(    (byte) 7, ChronoField.MINUTE_OF_HOUR),, +        SECOND_OF_MINUTE(   (byte) 8, ChronoField.SECOND_OF_MINUTE);, +, +        private final byte id;, +        private final TemporalField field;, +, +        DateTimeUnit(byte id, TemporalField field) {, +            this.id = id;, +            this.field = field;, +        }, +, +        public byte getId() {, +            return id;, +        }, +, +        public TemporalField getField() {, +            return field;, +        }, +, +        public static DateTimeUnit resolve(byte id) {, +            switch (id) {, +                case 1: return WEEK_OF_WEEKYEAR;, +                case 2: return YEAR_OF_CENTURY;, +                case 3: return QUARTER_OF_YEAR;, +                case 4: return MONTH_OF_YEAR;, +                case 5: return DAY_OF_MONTH;, +                case 6: return HOUR_OF_DAY;, +                case 7: return MINUTES_OF_HOUR;, +                case 8: return SECOND_OF_MINUTE;, +                default: throw new ElasticsearchException("Unknown date time unit id [" + id + "]");, +            }, +        }, +    }, +, +    public abstract void innerWriteTo(StreamOutput out) throws IOException;, +]