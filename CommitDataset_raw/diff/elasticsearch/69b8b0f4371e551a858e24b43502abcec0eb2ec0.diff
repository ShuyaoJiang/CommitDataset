[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobReuseExistingNodeAllocation.java, +import org.elasticsearch.gateway.Gateway;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.internal.InternalNode;, +    private final Node node;, +    @Inject public BlobReuseExistingNodeAllocation(Settings settings, Node node,, +        this.node = node; // YACK!, we need the Gateway, but it creates crazy circular dependency, +                            commitPoint = ((BlobStoreGateway) ((InternalNode) this.node).injector().getInstance(Gateway.class)).findCommitPoint(shard.index(), shard.id());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobReuseExistingNodeAllocation.java, +import org.elasticsearch.gateway.Gateway;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.internal.InternalNode;, +    private final Node node;, +    @Inject public BlobReuseExistingNodeAllocation(Settings settings, Node node,, +        this.node = node; // YACK!, we need the Gateway, but it creates crazy circular dependency, +                            commitPoint = ((BlobStoreGateway) ((InternalNode) this.node).injector().getInstance(Gateway.class)).findCommitPoint(shard.index(), shard.id());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import org.elasticsearch.common.collect.Lists;, +import org.elasticsearch.index.gateway.CommitPoint;, +import org.elasticsearch.index.gateway.CommitPoints;, +import org.elasticsearch.index.gateway.blobstore.BlobStoreIndexGateway;, +import java.util.List;, +    public CommitPoint findCommitPoint(String index, int shardId) throws IOException {, +        ImmutableBlobContainer container = blobStore.immutableBlobContainer(BlobStoreIndexGateway.shardPath(basePath, index, shardId));, +        ImmutableMap<String, BlobMetaData> blobs = container.listBlobs();, +        List<CommitPoint> commitPointsList = Lists.newArrayList();, +        for (String name : blobs.keySet()) {, +            if (name.startsWith("commit-")) {, +                try {, +                    commitPointsList.add(CommitPoints.fromXContent(container.readBlobFully(name)));, +                } catch (Exception e) {, +                    logger.warn("failed to read commit point [{}]", e, name);, +                }, +            }, +        }, +        CommitPoints commitPoints = new CommitPoints(commitPointsList);, +        if (commitPoints.commits().isEmpty()) {, +            return null;, +        }, +        return commitPoints.commits().get(0);, +    }, +, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobReuseExistingNodeAllocation.java, +import org.elasticsearch.gateway.Gateway;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.internal.InternalNode;, +    private final Node node;, +    @Inject public BlobReuseExistingNodeAllocation(Settings settings, Node node,, +        this.node = node; // YACK!, we need the Gateway, but it creates crazy circular dependency, +                            commitPoint = ((BlobStoreGateway) ((InternalNode) this.node).injector().getInstance(Gateway.class)).findCommitPoint(shard.index(), shard.id());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import org.elasticsearch.common.collect.Lists;, +import org.elasticsearch.index.gateway.CommitPoint;, +import org.elasticsearch.index.gateway.CommitPoints;, +import org.elasticsearch.index.gateway.blobstore.BlobStoreIndexGateway;, +import java.util.List;, +    public CommitPoint findCommitPoint(String index, int shardId) throws IOException {, +        ImmutableBlobContainer container = blobStore.immutableBlobContainer(BlobStoreIndexGateway.shardPath(basePath, index, shardId));, +        ImmutableMap<String, BlobMetaData> blobs = container.listBlobs();, +        List<CommitPoint> commitPointsList = Lists.newArrayList();, +        for (String name : blobs.keySet()) {, +            if (name.startsWith("commit-")) {, +                try {, +                    commitPointsList.add(CommitPoints.fromXContent(container.readBlobFully(name)));, +                } catch (Exception e) {, +                    logger.warn("failed to read commit point [{}]", e, name);, +                }, +            }, +        }, +        CommitPoints commitPoints = new CommitPoints(commitPointsList);, +        if (commitPoints.commits().isEmpty()) {, +            return null;, +        }, +        return commitPoints.commits().get(0);, +    }, +, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexGateway.java, +    public static BlobPath shardPath(BlobPath basePath, String index, int shardId) {, +        return basePath.add("indices").add(index).add(Integer.toString(shardId));, +    }, +]