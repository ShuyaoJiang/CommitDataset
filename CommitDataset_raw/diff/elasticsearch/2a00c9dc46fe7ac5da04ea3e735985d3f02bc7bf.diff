[+++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (simpleName.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (simpleName.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +import java.util.Objects;, +        Objects.requireNonNull(simpleName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (simpleName.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +import java.util.Objects;, +        Objects.requireNonNull(simpleName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java, +import org.elasticsearch.Version;, +            return new ObjectMapper(name, fullPath, enabled, nested, dynamic, includeInAll, mappers, settings);, +            Boolean includeInAll, Map<String, Mapper> mappers, Settings settings) {, +        assert settings != null;, +        Version indexCreatedVersion = Version.indexCreated(settings);, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (name.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (simpleName.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +import java.util.Objects;, +        Objects.requireNonNull(simpleName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java, +import org.elasticsearch.Version;, +            return new ObjectMapper(name, fullPath, enabled, nested, dynamic, includeInAll, mappers, settings);, +            Boolean includeInAll, Map<String, Mapper> mappers, Settings settings) {, +        assert settings != null;, +        Version indexCreatedVersion = Version.indexCreated(settings);, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (name.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java, +                    dateDetection, numericDetection, settings);, +                     Explicit<Boolean> dateDetection, Explicit<Boolean> numericDetection, Settings settings) {, +        super(name, name, enabled, Nested.NO, dynamic, includeInAll, mappers, settings);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (simpleName.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +import java.util.Objects;, +        Objects.requireNonNull(simpleName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java, +import org.elasticsearch.Version;, +            return new ObjectMapper(name, fullPath, enabled, nested, dynamic, includeInAll, mappers, settings);, +            Boolean includeInAll, Map<String, Mapper> mappers, Settings settings) {, +        assert settings != null;, +        Version indexCreatedVersion = Version.indexCreated(settings);, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (name.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/RootObjectMapper.java, +                    dateDetection, numericDetection, settings);, +                     Explicit<Boolean> dateDetection, Explicit<Boolean> numericDetection, Settings settings) {, +        super(name, name, enabled, Nested.NO, dynamic, includeInAll, mappers, settings);, +++ b/core/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.test.InternalSettingsPlugin;, +import java.util.Collection;, +        BuilderContext context = new BuilderContext(, +            Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build(), new ContentPath());, +++ b/core/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +        if (indexCreatedVersion.onOrAfter(Version.V_5_0_0_alpha6)) {, +            if (simpleName.isEmpty()) {, +                throw new IllegalArgumentException("name cannot be empty string");, +            }, +        }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +import java.util.Objects;, +        Objects.requireNonNull(simpleName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/ObjectMapper.java, +import org.elasticsearch.Version;]