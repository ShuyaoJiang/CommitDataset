[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedSearchHit.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedSearchHit.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ReciprocalRank.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedSearchHit.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ReciprocalRank.java, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAtTests.java, +import java.util.Arrays;, +import static org.elasticsearch.index.rankeval.RankedListQualityMetric.filterUnknownDocuments;, +, +        assertEquals(2, filterUnknownDocuments(result.getHitsAndRatings()).size());, +        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null};, +        EvalQueryQuality result = dcg.evaluate("id",  Arrays.copyOfRange(hits, 0, 4), rated);, +        assertEquals(1, filterUnknownDocuments(result.getHitsAndRatings()).size());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedSearchHit.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ReciprocalRank.java, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAtTests.java, +import java.util.Arrays;, +import static org.elasticsearch.index.rankeval.RankedListQualityMetric.filterUnknownDocuments;, +, +        assertEquals(2, filterUnknownDocuments(result.getHitsAndRatings()).size());, +        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null};, +        EvalQueryQuality result = dcg.evaluate("id",  Arrays.copyOfRange(hits, 0, 4), rated);, +        assertEquals(1, filterUnknownDocuments(result.getHitsAndRatings()).size());, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/EvalQueryQualityTests.java, +        MetricDetails metricDetails = original.getMetricDetails();, +            if (metricDetails == null) {, +                metricDetails = new PrecisionAtN.Breakdown(1, 5);, +                metricDetails = null;, +        case 3:, +            throw new IllegalStateException("The test should only allow four parameters mutated");, +        evalQueryQuality.addMetricDetails(metricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedSearchHit.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ReciprocalRank.java, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAtTests.java, +import java.util.Arrays;, +import static org.elasticsearch.index.rankeval.RankedListQualityMetric.filterUnknownDocuments;, +, +        assertEquals(2, filterUnknownDocuments(result.getHitsAndRatings()).size());, +        Integer[] relevanceRatings = new Integer[] { 3, 2, 3, null, 1, null};, +        EvalQueryQuality result = dcg.evaluate("id",  Arrays.copyOfRange(hits, 0, 4), rated);, +        assertEquals(1, filterUnknownDocuments(result.getHitsAndRatings()).size());, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/EvalQueryQualityTests.java, +        MetricDetails metricDetails = original.getMetricDetails();, +            if (metricDetails == null) {, +                metricDetails = new PrecisionAtN.Breakdown(1, 5);, +                metricDetails = null;, +        case 3:, +            throw new IllegalStateException("The test should only allow four parameters mutated");, +        evalQueryQuality.addMetricDetails(metricDetails);, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalRequestTests.java, +import static org.elasticsearch.index.rankeval.RankedListQualityMetric.filterUnknownDocuments;, +, +, +                assertEquals(2, filterUnknownDocuments(quality.getHitsAndRatings()).size());, +                assertEquals(5, filterUnknownDocuments(quality.getHitsAndRatings()).size());, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, +        for (DocumentKey key : RankedListQualityMetric.filterUnknownDocuments(hits)) {, +        return Objects.hash(id, qualityLevel, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RatedSearchHit.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/ReciprocalRank.java, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAtTests.java, +import java.util.Arrays;, +import static org.elasticsearch.index.rankeval.RankedListQualityMetric.filterUnknownDocuments;]