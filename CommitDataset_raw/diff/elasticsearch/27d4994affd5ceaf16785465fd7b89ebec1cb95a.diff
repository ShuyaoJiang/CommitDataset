[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        in.readOptionalWritable(DiscoveryNode::new);, +        out.writeOptionalWriteable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        in.readOptionalWritable(DiscoveryNode::new);, +        out.writeOptionalWriteable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        in.readOptionalWritable(DiscoveryNode::new);, +        out.writeOptionalWriteable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java, +            nodes[i] = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        in.readOptionalWritable(DiscoveryNode::new);, +        out.writeOptionalWriteable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java, +            nodes[i] = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +            nodes[i] = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/liveness/LivenessResponse.java, +        in.readOptionalWritable(DiscoveryNode::new);, +        out.writeOptionalWriteable(node);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TaskInfo.java, +        node = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java, +            nodes[i] = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +            nodes[i] = new DiscoveryNode(in);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/stats/ClusterStatsNodes.java, +import org.elasticsearch.common.io.stream.Writeable;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +public class ClusterStatsNodes implements ToXContent, Writeable<ClusterStatsNodes> {, +    private final Counts counts;, +    private final Set<Version> versions;, +    private final OsStats os;, +    private final ProcessStats process;, +    private final JvmStats jvm;, +    private final FsInfo.Path fs;, +    private final Set<PluginInfo> plugins;, +    ClusterStatsNodes(StreamInput in) throws IOException {, +        this.counts = new Counts(in);, +, +        int size = in.readVInt();, +        this.versions = new HashSet<>(size);, +        for (; size > 0; size--) {, +            this.versions.add(Version.readVersion(in));, +        this.os = new OsStats(in);, +        this.process = new ProcessStats(in);, +        this.jvm = new JvmStats(in);, +        this.fs = FsInfo.Path.readInfoFrom(in);, +, +        size = in.readVInt();, +        this.plugins = new HashSet<>(size);, +        for (; size > 0; size--) {, +            this.plugins.add(PluginInfo.readFromStream(in));, +        }, +    }, +, +    ClusterStatsNodes(ClusterStatsNodeResponse[] nodeResponses) {, +        List<NodeInfo> nodeInfos = new ArrayList<>();, +        List<NodeStats> nodeStats = new ArrayList<>();, +            nodeInfos.add(nodeResponse.nodeInfo());, +            nodeStats.add(nodeResponse.nodeStats());, +            this.versions.add(nodeResponse.nodeInfo().getVersion());, +            this.plugins.addAll(nodeResponse.nodeInfo().getPlugins().getPluginInfos());, +                this.fs.add(nodeResponse.nodeStats().getFs().total());, +        this.counts = new Counts(nodeInfos);, +        this.os = new OsStats(nodeInfos);, +        this.process = new ProcessStats(nodeStats);, +        this.jvm = new JvmStats(nodeInfos, nodeStats);, +    public ClusterStatsNodes readFrom(StreamInput in) throws IOException {, +        return new ClusterStatsNodes(in);, +    public static class Counts implements Writeable<Counts>, ToXContent {, +        static final String COORDINATING_ONLY = "coordinating_only";, +        private final int total;, +        private final Map<String, Integer> roles;, +, +        @SuppressWarnings("unchecked"), +        private Counts(StreamInput in) throws IOException {, +            this.total = in.readVInt();, +            this.roles = (Map<String, Integer>)in.readGenericValue();, +        }, +, +        private Counts(List<NodeInfo> nodeInfos) {, +            this.roles = new HashMap<>();, +            for (DiscoveryNode.Role role : DiscoveryNode.Role.values()) {, +                this.roles.put(role.getRoleName(), 0);, +            }, +            this.roles.put(COORDINATING_ONLY, 0);, +, +            int total = 0;, +            for (NodeInfo nodeInfo : nodeInfos) {]