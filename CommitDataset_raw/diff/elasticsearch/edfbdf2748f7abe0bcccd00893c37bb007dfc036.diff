[+++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +, +// add buildSrc itself as a groovy project, +task buildSrcEclipse(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanEclipse', 'eclipse'], +}, +tasks.eclipse.dependsOn(buildSrcEclipse), +, +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +, +// add buildSrc itself as a groovy project, +task buildSrcEclipse(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanEclipse', 'eclipse'], +}, +tasks.eclipse.dependsOn(buildSrcEclipse), +, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `patterns`             | yes       | -                   | An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches., +| `trace_match`          | no        | false               | when true, `_ingest._grok_match_index` will be inserted into your matched document's metadata with the index into the pattern found in `patterns` that matched., +        "patterns": ["%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}"], +        "patterns": ["my %{FAVORITE_DOG:dog} is colored %{RGB:color}"], +++ b/build.gradle, +// add buildSrc itself as a groovy project, +task buildSrcIdea(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanIdea', 'ideaModule'], +}, +tasks.idea.dependsOn(buildSrcIdea), +, +// add buildSrc itself as a groovy project, +task buildSrcEclipse(type: GradleBuild) {, +  buildFile = 'buildSrc/build.gradle', +  tasks = ['cleanEclipse', 'eclipse'], +}, +tasks.eclipse.dependsOn(buildSrcEclipse), +, +++ b/docs/reference/ingest/ingest-node.asciidoc, +| `patterns`             | yes       | -                   | An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches., +| `trace_match`          | no        | false               | when true, `_ingest._grok_match_index` will be inserted into your matched document's metadata with the index into the pattern found in `patterns` that matched., +        "patterns": ["%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}"], +        "patterns": ["my %{FAVORITE_DOG:dog} is colored %{RGB:color}"], +++ b/modules/ingest-grok/src/main/java/org/elasticsearch/ingest/grok/GrokProcessor.java, +import java.util.List;, +import java.util.Objects;, +    private static final String PATTERN_MATCH_KEY = "_ingest._grok_match_index";, +    private final boolean traceMatch;, +    public GrokProcessor(String tag, Map<String, String> patternBank, List<String> matchPatterns, String matchField) {, +        this(tag, patternBank, matchPatterns, matchField, false);, +    }, +, +    public GrokProcessor(String tag, Map<String, String> patternBank, List<String> matchPatterns, String matchField, boolean traceMatch) {, +        this.grok = new Grok(patternBank, combinePatterns(matchPatterns, traceMatch));, +        this.traceMatch = traceMatch;, +        if (matches == null) {, +            throw new IllegalArgumentException("Provided Grok expressions do not match field value: [" + fieldValue + "]");, +        }, +, +        matches.entrySet().stream(), +            .filter((e) -> Objects.nonNull(e.getValue())), +            .forEach((e) -> ingestDocument.setFieldValue(e.getKey(), e.getValue()));, +, +        if (traceMatch) {, +            @SuppressWarnings("unchecked"), +            HashMap<String, String> matchMap = (HashMap<String, String>) ingestDocument.getFieldValue(PATTERN_MATCH_KEY, Object.class);, +            matchMap.keySet().stream().findFirst().ifPresent((index) -> {, +                ingestDocument.setFieldValue(PATTERN_MATCH_KEY, index);, +            });, +    public Grok getGrok() {, +        return grok;, +    }, +, +    static String combinePatterns(List<String> patterns, boolean traceMatch) {, +        String combinedPattern;, +        if (patterns.size() > 1) {, +            if (traceMatch) {, +                combinedPattern = "";, +                for (int i = 0; i < patterns.size(); i++) {, +                    String valueWrap = "(?<" + PATTERN_MATCH_KEY + "." + i + ">" + patterns.get(i) + ")";, +                    if (combinedPattern.equals("")) {, +                        combinedPattern = valueWrap;, +                    } else {, +                        combinedPattern = combinedPattern + "|" + valueWrap;, +                    }, +                }, +            } else {, +                combinedPattern = patterns.stream().reduce("", (prefix, value) -> {]