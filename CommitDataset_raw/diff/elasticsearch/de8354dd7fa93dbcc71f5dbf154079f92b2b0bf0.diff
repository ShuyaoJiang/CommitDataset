[+++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.search.sort.SortAndFormats;, +            Optional<SortAndFormats> optionalSort = SortBuilder.buildSort(sorts, context);, +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.search.sort.SortAndFormats;, +            Optional<SortAndFormats> optionalSort = SortBuilder.buildSort(sorts, context);, +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +import org.elasticsearch.common.network.InetAddresses;, +    /** Format a long value. This is used by terms and histogram aggregations, +     *  to format keys for fields that use longs as a doc value representation, +     *  such as the {@code long} and {@code date} fields. */, +    /** Format a double value. This is used by terms and stats aggregations, +     *  to format keys for fields that use numbers as a doc value representation, +     *  such as the {@code long}, {@code double} or {@code date} fields. */, +    /** Format a double value. This is used by terms aggregations to format, +     *  keys for fields that use binary doc value representations such as the, +     *  {@code keyword} and {@code ip} fields. */, +    /** Parse a value that was formatted with {@link #format(long)} back to the, +     *  original long value. */, +    /** Parse a value that was formatted with {@link #format(double)} back to, +     *  the original double value. */, +    /** Parse a value that was formatted with {@link #format(BytesRef)} back, +     *  to the original BytesRef. */, +    BytesRef parseBytesRef(String value);, +, +            return value.utf8ToString();, +, +        public BytesRef parseBytesRef(String value) {, +            return new BytesRef(value);, +        }, +, +        @Override, +        public BytesRef parseBytesRef(String value) {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public BytesRef parseBytesRef(String value) {, +            throw new UnsupportedOperationException();, +        }, +            switch (value) {, +            case "false":, +                return 0;, +            case "true":, +                return 1;, +            }, +            throw new IllegalArgumentException("Cannot parse boolean [" + value + "], expected either [true] or [false]");, +, +        @Override, +        public BytesRef parseBytesRef(String value) {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public BytesRef parseBytesRef(String value) {, +            return new BytesRef(InetAddressPoint.encode(InetAddresses.forString(value)));, +        }, +        @Override, +        public BytesRef parseBytesRef(String value) {, +            throw new UnsupportedOperationException();, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import org.elasticsearch.search.sort.SortAndFormats;, +            Optional<SortAndFormats> optionalSort = SortBuilder.buildSort(sorts, context);, +++ b/core/src/main/java/org/elasticsearch/search/DocValueFormat.java, +import org.elasticsearch.common.network.InetAddresses;, +    /** Format a long value. This is used by terms and histogram aggregations, +     *  to format keys for fields that use longs as a doc value representation, +     *  such as the {@code long} and {@code date} fields. */, +    /** Format a double value. This is used by terms and stats aggregations, +     *  to format keys for fields that use numbers as a doc value representation, +     *  such as the {@code long}, {@code double} or {@code date} fields. */, +    /** Format a double value. This is used by terms aggregations to format, +     *  keys for fields that use binary doc value representations such as the, +     *  {@code keyword} and {@code ip} fields. */, +    /** Parse a value that was formatted with {@link #format(long)} back to the, +     *  original long value. */, +    /** Parse a value that was formatted with {@link #format(double)} back to, +     *  the original double value. */, +    /** Parse a value that was formatted with {@link #format(BytesRef)} back, +     *  to the original BytesRef. */, +    BytesRef parseBytesRef(String value);, +, +            return value.utf8ToString();, +, +        public BytesRef parseBytesRef(String value) {, +            return new BytesRef(value);, +        }, +, +        @Override, +        public BytesRef parseBytesRef(String value) {, +            throw new UnsupportedOperationException();, +        }, +, +        @Override, +        public BytesRef parseBytesRef(String value) {, +            throw new UnsupportedOperationException();, +        }, +            switch (value) {, +            case "false":]