[+++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +            .appendFraction(NANO_OF_SECOND, 1, 9, true), +            .appendFraction(NANO_OF_SECOND, 1, 9, true), +    private static final DateTimeFormatter STRICT_DATE_PRINTER = new DateTimeFormatterBuilder(), +        .append(STRICT_YEAR_MONTH_DAY_FORMATTER), +        .appendLiteral('T'), +        .append(STRICT_HOUR_MINUTE_SECOND_FORMATTER), +        .appendFraction(NANO_OF_SECOND, 3, 9, true), +        .appendOffset("+HH:MM", "Z"), +        .toFormatter(Locale.ROOT);, +, +        .appendFraction(NANO_OF_SECOND, 1, 9, true), +    private static final DateFormatter STRICT_DATE_TIME = new JavaDateFormatter("strict_date_time", STRICT_DATE_PRINTER,, +    private static final DateTimeFormatter STRICT_ORDINAL_DATE_TIME_PRINTER = new DateTimeFormatterBuilder(), +    private static final DateTimeFormatter STRICT_ORDINAL_DATE_TIME_FORMATTER_BASE = new DateTimeFormatterBuilder(), +        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD), +        .appendLiteral('-'), +        .appendValue(DAY_OF_YEAR, 3, 3, SignStyle.NOT_NEGATIVE), +        .appendLiteral('T'), +        .appendPattern("HH:mm"), +        .optionalStart(), +        .appendLiteral(':'), +        .appendValue(SECOND_OF_MINUTE, 2, 2, SignStyle.NOT_NEGATIVE), +        .appendFraction(NANO_OF_SECOND, 1, 9, true), +        .optionalEnd(), +        .toFormatter(Locale.ROOT);, +, +        new DateTimeFormatterBuilder().append(STRICT_ORDINAL_DATE_TIME_PRINTER), +        new DateTimeFormatterBuilder().append(STRICT_ORDINAL_DATE_TIME_PRINTER), +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +            .appendFraction(NANO_OF_SECOND, 1, 9, true), +            .appendFraction(NANO_OF_SECOND, 1, 9, true), +    private static final DateTimeFormatter STRICT_DATE_PRINTER = new DateTimeFormatterBuilder(), +        .append(STRICT_YEAR_MONTH_DAY_FORMATTER), +        .appendLiteral('T'), +        .append(STRICT_HOUR_MINUTE_SECOND_FORMATTER), +        .appendFraction(NANO_OF_SECOND, 3, 9, true), +        .appendOffset("+HH:MM", "Z"), +        .toFormatter(Locale.ROOT);, +, +        .appendFraction(NANO_OF_SECOND, 1, 9, true), +    private static final DateFormatter STRICT_DATE_TIME = new JavaDateFormatter("strict_date_time", STRICT_DATE_PRINTER,, +    private static final DateTimeFormatter STRICT_ORDINAL_DATE_TIME_PRINTER = new DateTimeFormatterBuilder(), +    private static final DateTimeFormatter STRICT_ORDINAL_DATE_TIME_FORMATTER_BASE = new DateTimeFormatterBuilder(), +        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD), +        .appendLiteral('-'), +        .appendValue(DAY_OF_YEAR, 3, 3, SignStyle.NOT_NEGATIVE), +        .appendLiteral('T'), +        .appendPattern("HH:mm"), +        .optionalStart(), +        .appendLiteral(':'), +        .appendValue(SECOND_OF_MINUTE, 2, 2, SignStyle.NOT_NEGATIVE), +        .appendFraction(NANO_OF_SECOND, 1, 9, true), +        .optionalEnd(), +        .toFormatter(Locale.ROOT);, +, +        new DateTimeFormatterBuilder().append(STRICT_ORDINAL_DATE_TIME_PRINTER), +        new DateTimeFormatterBuilder().append(STRICT_ORDINAL_DATE_TIME_PRINTER), +++ b/server/src/test/java/org/elasticsearch/common/joda/JavaJodaTimeDuellingTests.java, +        assertSameDate("2018363T121212.1Z", "basic_ordinal_date_time");, +        assertSameDate("121212.1Z", "basic_time");, +        assertSameDate("121212.1+0100", "basic_time");, +        assertSameDate("T121212.1Z", "basic_t_time");, +        assertSameDate("T121212.1+0100", "basic_t_time");, +        assertSameDate("2018W313T121212.1Z", "basic_week_date_time");, +        assertSameDate("2018-12-31T12:12:12.1", "date_hour_minute_second_fraction");, +        assertSameDate("2018-12-31T12:12:12.1", "date_hour_minute_second_millis");, +        assertSameDate("2018-05-30T20:21:23.1", "date_optional_time");, +        assertSameDate("2018-05-30T20:21:23.1+0100", "date_optional_time");, +        assertSameDate("2018-05-30T20:21:23.1+01:00", "date_optional_time");, +        assertSameDate("2018-12-31T10:15:30.1Z", "date_time");, +        assertSameDate("2018-12-31T10:15:30.1+0100", "date_time");, +        assertSameDate("2018-12-31T10:15:30.1+01:00", "date_time");, +        assertSameDate("2018-12-31T10:15:3.1Z", "date_time");, +        assertSameDate("2018-12-31T10:15:3.1+0100", "date_time");, +        assertSameDate("2018-12-31T10:15:3.1+01:00", "date_time");, +        assertSameDate("2018-128T10:15:30.1Z", "ordinal_date_time");, +        assertSameDate("2018-1T10:15:30.1Z", "ordinal_date_time");, +        assertSameDate("10:15:30.1Z", "time");, +        assertSameDate("1:15:30.1Z", "time");, +        assertSameDate("10:1:30.1Z", "time");, +        assertSameDate("10:15:3.1Z", "time");, +        assertSameDate("T10:15:30.1Z", "t_time");, +        assertSameDate("T10:15:30.1+0100", "t_time");, +        assertSameDate("T10:15:30.1+01:00", "t_time");, +        assertSameDate("2012-W48-6T10:15:30.1Z", "week_date_time");, +        assertSameDate("2012-W48-6T10:15:30.1+0100", "week_date_time");, +        assertSameDate("2012-W48-6T10:15:30.1+01:00", "week_date_time");, +        assertSameDate("2012-W1-6T10:15:30.1Z", "week_date_time");, +        assertSameDate("2012-W1-6T10:15:30.1+0100", "week_date_time");, +        assertSameDate("2012-W1-6T10:15:30.1+01:00", "week_date_time");, +        assertSameDate("2018W313T121212.1Z", "strict_basic_week_date_time");, +        assertSameDate("2018W313T121212.1+0100", "strict_basic_week_date_time");, +        assertSameDate("2018W313T121212.1+01:00", "strict_basic_week_date_time");, +        assertSameDate("2018-12-31T12:12:12.1", "strict_date_hour_minute_second_fraction");, +        assertSameDate("2018-12-31T10:15:30.1Z", "strict_date_time");, +        assertSameDate("2018-12-31T10:15:30.1+0100", "strict_date_time");, +        assertSameDate("2018-12-31T10:15:30.1+01:00", "strict_date_time");, +        assertSameDate("2018-128T10:15:30.1Z", "strict_ordinal_date_time");, +        assertSameDate("2018-128T10:15:30.1+0100", "strict_ordinal_date_time");]