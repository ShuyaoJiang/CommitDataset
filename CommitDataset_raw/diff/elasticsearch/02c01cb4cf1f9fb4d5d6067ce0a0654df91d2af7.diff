[+++ b/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java, +        builder.field("forbid_aliases_to_multiple_indices", allowAliasesToMultipleIndices() == false);, +        builder.field("forbid_closed_indices", forbidClosedIndices());, +        builder.field("ignore_aliases", ignoreAliases());, +++ b/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java, +        builder.field("forbid_aliases_to_multiple_indices", allowAliasesToMultipleIndices() == false);, +        builder.field("forbid_closed_indices", forbidClosedIndices());, +        builder.field("ignore_aliases", ignoreAliases());, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequestTests.java, +import org.elasticsearch.action.support.IndicesOptions.Option;, +import org.elasticsearch.action.support.IndicesOptions.WildcardStates;, +import org.elasticsearch.common.xcontent.ToXContent.MapParams;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.EnumSet;, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +            original.settings(settings);, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +            Collection<WildcardStates> wildcardStates = randomSubsetOf(Arrays.asList(WildcardStates.values()));, +            Collection<Option> options = randomSubsetOf(Arrays.asList(Option.ALLOW_NO_INDICES, Option.IGNORE_UNAVAILABLE));, +            original.indicesOptions(new IndicesOptions(, +                    options.isEmpty() ? Option.NONE : EnumSet.copyOf(options),, +                    wildcardStates.isEmpty() ? WildcardStates.NONE : EnumSet.copyOf(wildcardStates)));, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +        XContentBuilder builder = original.toXContent(XContentFactory.jsonBuilder(), new MapParams(Collections.emptyMap()));, +++ b/server/src/main/java/org/elasticsearch/action/support/IndicesOptions.java, +        builder.field("forbid_aliases_to_multiple_indices", allowAliasesToMultipleIndices() == false);, +        builder.field("forbid_closed_indices", forbidClosedIndices());, +        builder.field("ignore_aliases", ignoreAliases());, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/create/CreateSnapshotRequestTests.java, +import org.elasticsearch.action.support.IndicesOptions.Option;, +import org.elasticsearch.action.support.IndicesOptions.WildcardStates;, +import org.elasticsearch.common.xcontent.ToXContent.MapParams;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.EnumSet;, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +            original.settings(settings);, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +            Collection<WildcardStates> wildcardStates = randomSubsetOf(Arrays.asList(WildcardStates.values()));, +            Collection<Option> options = randomSubsetOf(Arrays.asList(Option.ALLOW_NO_INDICES, Option.IGNORE_UNAVAILABLE));, +            original.indicesOptions(new IndicesOptions(, +                    options.isEmpty() ? Option.NONE : EnumSet.copyOf(options),, +                    wildcardStates.isEmpty() ? WildcardStates.NONE : EnumSet.copyOf(wildcardStates)));, +        if (randomBoolean()) {, +        if (randomBoolean()) {, +        XContentBuilder builder = original.toXContent(XContentFactory.jsonBuilder(), new MapParams(Collections.emptyMap()));, +++ b/server/src/test/java/org/elasticsearch/action/support/IndicesOptionsTests.java, +import org.elasticsearch.action.support.IndicesOptions.Option;, +import org.elasticsearch.action.support.IndicesOptions.WildcardStates;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import org.elasticsearch.common.xcontent.ToXContent.MapParams;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentType;, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.EnumSet;, +import java.util.List;, +, +    public void testFromMap() {, +        IndicesOptions defaults = IndicesOptions.strictExpandOpen();, +        Collection<String> wildcardStates = randomBoolean() ?, +                null : randomSubsetOf(Arrays.asList("open", "closed"));, +        Boolean ignoreUnavailable = randomBoolean() ? null : randomBoolean();, +        Boolean allowNoIndices = randomBoolean() ? null : randomBoolean();, +, +        Map<String, Object> settings = new HashMap<>();, +, +        if (wildcardStates != null) {, +            settings.put("expand_wildcards", wildcardStates);, +        }, +, +        if (ignoreUnavailable != null) {, +            settings.put("ignore_unavailable", ignoreUnavailable);, +        }, +, +        if (allowNoIndices != null) {, +            settings.put("allow_no_indices", allowNoIndices);, +        }, +, +        IndicesOptions fromMap = IndicesOptions.fromMap(settings, defaults);, +, +        boolean open = wildcardStates != null ? wildcardStates.contains("open") : defaults.expandWildcardsOpen();, +        assertEquals(fromMap.expandWildcardsOpen(), open);, +        boolean closed = wildcardStates != null ? wildcardStates.contains("closed") : defaults.expandWildcardsClosed();, +        assertEquals(fromMap.expandWildcardsClosed(), closed);]