[+++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/graph/GraphFeatureSet.java, +        namedWriteableRegistry.register(Usage.class, Usage.writeableName(Graph.NAME), Usage::new);, +    public XPackFeatureSet.Usage usage() {, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/graph/GraphFeatureSet.java, +        namedWriteableRegistry.register(Usage.class, Usage.writeableName(Graph.NAME), Usage::new);, +    public XPackFeatureSet.Usage usage() {, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/MonitoringFeatureSet.java, +import java.util.HashMap;, +import java.util.Map;, +    private final Exporters exporters;, +        namedWriteableRegistry.register(Usage.class, Usage.writeableName(Monitoring.NAME), Usage::new);, +    public XPackFeatureSet.Usage usage() {, +    static Map<String, Object> exportersUsage(Exporters exporters) {, +        Map<String, Object> usage = new HashMap<>();, +                String type = exporter.type();, +                int count = (Integer) usage.getOrDefault(type, 0);, +                usage.put(type, count + 1);, +        return usage;, +        private static final String ENABLED_EXPORTERS_XFIELD = "enabled_exporters";, +        private @Nullable Map<String, Object> exporters;, +            exporters = in.readMap();, +        public Usage(boolean available, boolean enabled, Map<String, Object> exporters) {, +            out.writeMap(exporters);, +        protected void innerXContent(XContentBuilder builder, Params params) throws IOException {, +            super.innerXContent(builder, params);, +                builder.field(ENABLED_EXPORTERS_XFIELD, exporters);, +++ b/elasticsearch/x-pack/graph/src/main/java/org/elasticsearch/graph/GraphFeatureSet.java, +        namedWriteableRegistry.register(Usage.class, Usage.writeableName(Graph.NAME), Usage::new);, +    public XPackFeatureSet.Usage usage() {, +++ b/elasticsearch/x-pack/marvel/src/main/java/org/elasticsearch/marvel/MonitoringFeatureSet.java, +import java.util.HashMap;, +import java.util.Map;, +    private final Exporters exporters;, +        namedWriteableRegistry.register(Usage.class, Usage.writeableName(Monitoring.NAME), Usage::new);, +    public XPackFeatureSet.Usage usage() {, +    static Map<String, Object> exportersUsage(Exporters exporters) {, +        Map<String, Object> usage = new HashMap<>();, +                String type = exporter.type();, +                int count = (Integer) usage.getOrDefault(type, 0);, +                usage.put(type, count + 1);, +        return usage;, +        private static final String ENABLED_EXPORTERS_XFIELD = "enabled_exporters";, +        private @Nullable Map<String, Object> exporters;, +            exporters = in.readMap();, +        public Usage(boolean available, boolean enabled, Map<String, Object> exporters) {, +            out.writeMap(exporters);, +        protected void innerXContent(XContentBuilder builder, Params params) throws IOException {, +            super.innerXContent(builder, params);, +                builder.field(ENABLED_EXPORTERS_XFIELD, exporters);, +++ b/elasticsearch/x-pack/marvel/src/test/java/org/elasticsearch/marvel/MonitoringFeatureSetTests.java, +import org.elasticsearch.marvel.agent.exporter.Exporter;, +import org.elasticsearch.marvel.agent.exporter.http.HttpExporter;, +import org.elasticsearch.marvel.agent.exporter.local.LocalExporter;, +import org.elasticsearch.xpack.XPackFeatureSet;, +import org.elasticsearch.xpack.watcher.support.xcontent.XContentSource;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.hamcrest.CoreMatchers.nullValue;, +import static org.hamcrest.Matchers.notNullValue;, +        when(licensee.isAvailable()).thenReturn(available);, +    public void testEnabledSetting() throws Exception {, +, +    public void testEnabledDefault() throws Exception {, +        MonitoringFeatureSet featureSet = new MonitoringFeatureSet(Settings.EMPTY, licensee, exporters, namedWriteableRegistry);, +        assertThat(featureSet.enabled(), is(true));, +    }, +, +    public void testUsage() throws Exception {, +, +        List<Exporter> exporterList = new ArrayList<>();, +        int localCount = randomIntBetween(0, 5);, +        for (int i = 0; i < localCount; i++) {, +            Exporter exporter = mockExporter(LocalExporter.TYPE, true);, +            exporterList.add(exporter);, +            if (randomBoolean()) {, +                exporter = mockExporter(LocalExporter.TYPE, false);, +                exporterList.add(exporter);, +            }, +        }, +        int httpCount = randomIntBetween(0, 5);, +        for (int i = 0; i < httpCount; i++) {, +            Exporter exporter = mockExporter(HttpExporter.TYPE, true);, +            exporterList.add(exporter);, +            if (randomBoolean()) {, +                exporter = mockExporter(HttpExporter.TYPE, false);, +                exporterList.add(exporter);, +            }, +        }, +        int xCount = randomIntBetween(0, 5);, +        String xType = randomAsciiOfLength(10);, +        for (int i = 0; i < xCount; i++) {, +            Exporter exporter = mockExporter(xType, true);, +            exporterList.add(exporter);, +            if (randomBoolean()) {, +                exporter = mockExporter(xType, false);, +                exporterList.add(exporter);, +            }, +        }, +        when(exporters.iterator()).thenReturn(exporterList.iterator());]