[+++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +++ b/core/src/test/java/org/elasticsearch/discovery/DiscoveryWithServiceDisruptionsIT.java, +++ b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java, +import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;, +    protected void ensureStableCluster(int nodeCount) {, +        ensureStableCluster(nodeCount, TimeValue.timeValueSeconds(30));, +    }, +, +    protected void ensureStableCluster(int nodeCount, TimeValue timeValue) {, +        ensureStableCluster(nodeCount, timeValue, false, null);, +    }, +, +    protected void ensureStableCluster(int nodeCount, @Nullable String viaNode) {, +        ensureStableCluster(nodeCount, TimeValue.timeValueSeconds(30), false, viaNode);, +    }, +, +    protected void ensureStableCluster(int nodeCount, TimeValue timeValue, boolean local, @Nullable String viaNode) {, +        if (viaNode == null) {, +            viaNode = randomFrom(internalCluster().getNodeNames());, +        }, +        logger.debug("ensuring cluster is stable with [{}] nodes. access node: [{}]. timeout: [{}]", nodeCount, viaNode, timeValue);, +        ClusterHealthResponse clusterHealthResponse = client(viaNode).admin().cluster().prepareHealth(), +                .setWaitForEvents(Priority.LANGUID), +                .setWaitForNodes(Integer.toString(nodeCount)), +                .setTimeout(timeValue), +                .setLocal(local), +                .setWaitForRelocatingShards(0), +                .get();, +        if (clusterHealthResponse.isTimedOut()) {, +            ClusterStateResponse stateResponse = client(viaNode).admin().cluster().prepareState().get();, +            fail("failed to reach a stable cluster of [" + nodeCount + "] nodes. Tried via [" + viaNode + "]. last cluster state:\n", +                    + stateResponse.getState().prettyPrint());, +        }, +        assertThat(clusterHealthResponse.isTimedOut(), is(false));, +    }, +]