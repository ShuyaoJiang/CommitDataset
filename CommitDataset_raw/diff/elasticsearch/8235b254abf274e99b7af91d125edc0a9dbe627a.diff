[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    // **Note** for systemProperties, settings, keystoreFiles etc:, +    // value could be a GString that is evaluated to just a String, +    // there are cases when value depends on task that is not executed yet on configuration stage, +    Map<String, Object> systemProperties = new HashMap<>(), +    void systemProperty(String property, Object value) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    // **Note** for systemProperties, settings, keystoreFiles etc:, +    // value could be a GString that is evaluated to just a String, +    // there are cases when value depends on task that is not executed yet on configuration stage, +    Map<String, Object> systemProperties = new HashMap<>(), +    void systemProperty(String property, Object value) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            // Configure ES JAVA OPTS - adds system properties, assertion flags, remote debug etc, +            List<String> esJavaOpts = [node.env.get('ES_JAVA_OPTS', '')], +            String collectedSystemProperties = node.config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +            esJavaOpts.add(collectedSystemProperties), +            esJavaOpts.add(node.config.jvmArgs), +            if (Boolean.parseBoolean(System.getProperty('tests.asserts', 'true'))) {, +                // put the enable assertions options before other options to allow, +                // flexibility to disable assertions for specific packages or classes, +                // in the cluster-specific options, +                esJavaOpts.add("-ea"), +                esJavaOpts.add("-esa"), +            }, +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                esJavaOpts.add('-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000'), +            }, +            node.env['ES_JAVA_OPTS'] = esJavaOpts.join(" "), +, +            //, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    // **Note** for systemProperties, settings, keystoreFiles etc:, +    // value could be a GString that is evaluated to just a String, +    // there are cases when value depends on task that is not executed yet on configuration stage, +    Map<String, Object> systemProperties = new HashMap<>(), +    void systemProperty(String property, Object value) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            // Configure ES JAVA OPTS - adds system properties, assertion flags, remote debug etc, +            List<String> esJavaOpts = [node.env.get('ES_JAVA_OPTS', '')], +            String collectedSystemProperties = node.config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +            esJavaOpts.add(collectedSystemProperties), +            esJavaOpts.add(node.config.jvmArgs), +            if (Boolean.parseBoolean(System.getProperty('tests.asserts', 'true'))) {, +                // put the enable assertions options before other options to allow, +                // flexibility to disable assertions for specific packages or classes, +                // in the cluster-specific options, +                esJavaOpts.add("-ea"), +                esJavaOpts.add("-esa"), +            }, +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                esJavaOpts.add('-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000'), +            }, +            node.env['ES_JAVA_OPTS'] = esJavaOpts.join(" "), +, +            //, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        env = [:], +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    // **Note** for systemProperties, settings, keystoreFiles etc:, +    // value could be a GString that is evaluated to just a String, +    // there are cases when value depends on task that is not executed yet on configuration stage, +    Map<String, Object> systemProperties = new HashMap<>(), +    void systemProperty(String property, Object value) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            // Configure ES JAVA OPTS - adds system properties, assertion flags, remote debug etc, +            List<String> esJavaOpts = [node.env.get('ES_JAVA_OPTS', '')], +            String collectedSystemProperties = node.config.systemProperties.collect { key, value -> "-D${key}=${value}" }.join(" "), +            esJavaOpts.add(collectedSystemProperties), +            esJavaOpts.add(node.config.jvmArgs), +            if (Boolean.parseBoolean(System.getProperty('tests.asserts', 'true'))) {, +                // put the enable assertions options before other options to allow, +                // flexibility to disable assertions for specific packages or classes, +                // in the cluster-specific options, +                esJavaOpts.add("-ea"), +                esJavaOpts.add("-esa"), +            }, +            // we must add debug options inside the closure so the config is read at execution time, as, +            // gradle task options are not processed until the end of the configuration phase, +            if (node.config.debug) {, +                println 'Running elasticsearch in debug mode, suspending until connected on port 8000', +                esJavaOpts.add('-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000'), +            }, +            node.env['ES_JAVA_OPTS'] = esJavaOpts.join(" "), +, +            //, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/NodeInfo.groovy, +        env = [:], +++ b/plugins/repository-s3/build.gradle, +String s3EC2Bucket = System.getenv("amazon_s3_bucket_ec2"), +String s3EC2BasePath = System.getenv("amazon_s3_base_path_ec2"), +, +if (!s3PermanentAccessKey && !s3PermanentSecretKey && !s3PermanentBucket && !s3PermanentBasePath, +        && !s3EC2Bucket && !s3EC2BasePath) {]