[+++ b/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +import org.elasticsearch.ElasticsearchParseException;, +                    if (fieldNode instanceof Collection && ((Collection) fieldNode).isEmpty()) {, +                        // nothing to do here, empty (to support "properties: []" case), +                    } else if (!(fieldNode instanceof Map)) {, +                        throw new ElasticsearchParseException("properties must be a map type");, +                    } else {, +                    }, +++ b/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +import org.elasticsearch.ElasticsearchParseException;, +                    if (fieldNode instanceof Collection && ((Collection) fieldNode).isEmpty()) {, +                        // nothing to do here, empty (to support "properties: []" case), +                    } else if (!(fieldNode instanceof Map)) {, +                        throw new ElasticsearchParseException("properties must be a map type");, +                    } else {, +                    }, +++ b/src/test/java/org/elasticsearch/index/mapper/object/SimpleObjectMappingTests.java, +, +    @Test, +    public void testEmptyArrayProperties() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startArray("properties").endArray(), +                .endObject().endObject().string();, +        MapperTestUtils.newParser().parse(mapping);, +    }]