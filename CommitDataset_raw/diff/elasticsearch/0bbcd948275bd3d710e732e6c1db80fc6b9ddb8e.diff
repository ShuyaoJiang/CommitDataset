[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.apache.http.client.methods.HttpGet;, +import org.apache.http.client.methods.HttpHead;, +import org.apache.http.client.methods.HttpPost;, +import org.apache.http.client.methods.HttpPut;, +import org.apache.http.entity.ByteArrayEntity;, +import org.apache.http.entity.ContentType;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.action.DocWriteRequest;, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.support.ActiveShardCount;, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.common.unit.TimeValue;, +    private static final String DELIMITER = "/";, +, +        Request request = get(getRequest);, +        return new Request(HttpHead.METHOD_NAME, request.endpoint, request.params, null);, +        String endpoint = endpoint(getRequest.index(), getRequest.type(), getRequest.id());, +, +        Params parameters = Params.builder();, +        parameters.withPreference(getRequest.preference());, +        parameters.withRouting(getRequest.routing());, +        parameters.withParent(getRequest.parent());, +        parameters.withRefresh(getRequest.refresh());, +        parameters.withRealtime(getRequest.realtime());, +        parameters.withStoredFields(getRequest.storedFields());, +        parameters.withVersion(getRequest.version());, +        parameters.withVersionType(getRequest.versionType());, +        parameters.withFetchSourceContext(getRequest.fetchSourceContext());, +, +        return new Request(HttpGet.METHOD_NAME, endpoint, parameters.getParams(), null);, +    }, +, +    static Request index(IndexRequest indexRequest) {, +        String method = Strings.hasLength(indexRequest.id()) ? HttpPut.METHOD_NAME : HttpPost.METHOD_NAME;, +, +        boolean isCreate = (indexRequest.opType() == DocWriteRequest.OpType.CREATE);, +        String endpoint = endpoint(indexRequest.index(), indexRequest.type(), indexRequest.id(), isCreate ? "_create" : null);, +, +        Params parameters = Params.builder();, +        parameters.withRouting(indexRequest.routing());, +        parameters.withParent(indexRequest.parent());, +        parameters.withTimeout(indexRequest.timeout());, +        parameters.withVersion(indexRequest.version());, +        parameters.withVersionType(indexRequest.versionType());, +        parameters.withPipeline(indexRequest.getPipeline());, +        parameters.withRefreshPolicy(indexRequest.getRefreshPolicy());, +        parameters.withWaitForActiveShards(indexRequest.waitForActiveShards());, +, +        BytesRef source = indexRequest.source().toBytesRef();, +        ContentType contentType = ContentType.create(indexRequest.getContentType().mediaType());, +        HttpEntity entity = new ByteArrayEntity(source.bytes, source.offset, source.length, contentType);, +, +        return new Request(method, endpoint, parameters.getParams(), entity);, +, +    /**, +     * Utility method to build request's endpoint., +     */, +    static String endpoint(String... parts) {, +        if (parts == null || parts.length == 0) {, +            return DELIMITER;, +, +        StringJoiner joiner = new StringJoiner(DELIMITER, DELIMITER, "");, +        for (String part : parts) {, +            if (part != null) {, +                joiner.add(part);, +            }, +        }, +        return joiner.toString();, +    /**, +     * Utility class to build request's parameters map and centralize all parameter names., +     */, +    static class Params {, +        private final Map<String, String> params = new HashMap<>();, +, +        private Params() {, +        Params putParam(String key, String value) {, +                if (params.putIfAbsent(key, value) != null) {, +                    throw new IllegalArgumentException("Request parameter [" + key + "] is already registered");, +                }, +            }, +            return this;, +        }, +, +        Params putParam(String key, TimeValue value) {, +            if (value != null) {, +                return putParam(key, value.getStringRep());, +            }, +            return this;, +        }, +, +        Params withFetchSourceContext(FetchSourceContext fetchSourceContext) {, +            if (fetchSourceContext != null) {, +                if (fetchSourceContext.fetchSource() == false) {, +                    putParam("_source", Boolean.FALSE.toString());, +                }, +                if (fetchSourceContext.includes() != null && fetchSourceContext.includes().length > 0) {, +                    putParam("_source_include", String.join(",", fetchSourceContext.includes()));, +                }, +                if (fetchSourceContext.excludes() != null && fetchSourceContext.excludes().length > 0) {]