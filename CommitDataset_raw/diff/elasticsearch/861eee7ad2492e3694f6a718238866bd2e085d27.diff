[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.analysis.index.MappingException;, +import org.elasticsearch.xpack.sql.expression.FieldAttribute;, +    protected TypeResolution resolveType() {, +        if (value instanceof FieldAttribute) {, +            try {, +                ((FieldAttribute) value).exactAttribute();, +            } catch (MappingException e) {, +                return new TypeResolution(format(null, "[{}] cannot operate on field of data type [{}]: {}",, +                    functionName(), value().dataType().esType, e.getMessage()));, +            }, +        }, +, +        for (Expression ex : list) {, +            if (ex.foldable() == false) {, +                return new TypeResolution(format(null, "Comparisons against variables are not (currently) supported; offender [{}] in [{}]",, +                    Expressions.name(ex),, +                    name()));, +            }, +        }, +        return super.resolveType();, +    }, +, +    @Override, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.analysis.index.MappingException;, +import org.elasticsearch.xpack.sql.expression.FieldAttribute;, +    protected TypeResolution resolveType() {, +        if (value instanceof FieldAttribute) {, +            try {, +                ((FieldAttribute) value).exactAttribute();, +            } catch (MappingException e) {, +                return new TypeResolution(format(null, "[{}] cannot operate on field of data type [{}]: {}",, +                    functionName(), value().dataType().esType, e.getMessage()));, +            }, +        }, +, +        for (Expression ex : list) {, +            if (ex.foldable() == false) {, +                return new TypeResolution(format(null, "Comparisons against variables are not (currently) supported; offender [{}] in [{}]",, +                    Expressions.name(ex),, +                    name()));, +            }, +        }, +        return super.resolveType();, +    }, +, +    @Override, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +                        FieldAttribute fa = (FieldAttribute) in.value();, +                        // equality should always be against an exact match (which is important for strings), +                        q = new TermsQuery(in.source(), fa.isInexact() ? fa.exactAttribute().name() : fa.name(), in.list());, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/In.java, +import org.elasticsearch.xpack.sql.analysis.index.MappingException;, +import org.elasticsearch.xpack.sql.expression.FieldAttribute;, +    protected TypeResolution resolveType() {, +        if (value instanceof FieldAttribute) {, +            try {, +                ((FieldAttribute) value).exactAttribute();, +            } catch (MappingException e) {, +                return new TypeResolution(format(null, "[{}] cannot operate on field of data type [{}]: {}",, +                    functionName(), value().dataType().esType, e.getMessage()));, +            }, +        }, +, +        for (Expression ex : list) {, +            if (ex.foldable() == false) {, +                return new TypeResolution(format(null, "Comparisons against variables are not (currently) supported; offender [{}] in [{}]",, +                    Expressions.name(ex),, +                    name()));, +            }, +        }, +        return super.resolveType();, +    }, +, +    @Override, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +                        FieldAttribute fa = (FieldAttribute) in.value();, +                        // equality should always be against an exact match (which is important for strings), +                        q = new TermsQuery(in.source(), fa.isInexact() ? fa.exactAttribute().name() : fa.name(), in.list());, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java, +        assertEquals("1:52: expected data type [keyword], value provided is of type [integer]",, +            error("SELECT * FROM test WHERE keyword IN ('foo', 'bar', 4)"));, +        assertEquals("1:63: expected data type [keyword], value provided is of type [integer]",, +            error("SELECT * FROM test WHERE int = 1 OR keyword IN ('foo', 'bar', 2)"));, +        assertEquals("1:38: expected data type [keyword], value provided is of type [integer]",, +            error("SELECT * FROM test WHERE keyword IN (1, 2)"));, +        assertEquals("1:49: expected data type [keyword], value provided is of type [integer]",, +            error("SELECT * FROM test WHERE int = 1 OR keyword IN (1, 2)"));, +    }, +, +    public void testInWithFieldInListOfValues() {, +        assertEquals("1:26: Comparisons against variables are not (currently) supported; offender [int] in [int IN (1, int)]",, +            error("SELECT * FROM test WHERE int IN (1, int)"));, +    }, +, +    public void testInOnFieldTextWithNoKeyword() {, +        assertEquals("1:26: [IN] cannot operate on field of data type [text]: " +, +            "No keyword/multi-field defined exact matches for [text]; define one or use MATCH/QUERY instead",, +            error("SELECT * FROM test WHERE text IN ('foo', 'bar')"));]