[+++ b/docs/reference/mapping/types/core-types.asciidoc, +            },, +            "user" : {, +                "type" : "string",, +                "index" : "not_analyzed",, +                "norms" : {, +                    "enabled" : false, +                }, +then the value that will be stored is `na`. There is also a `string` `user`, +which is indexed as-is (not broken down into tokens) and has norms, +disabled (so that matching this field is a binary decision, no match is, +better than another one)., +|`norms.enabled` |Boolean value if norms should be enabled or not. Defaults, +to `true` for `analyzed` fields, and to `false` for `not_analyzed` fields., +, +|`norms.loading` |Describes how norms should be loaded, possible values are, +`eager` and `lazy` (default). It is possible to change the default value to, +eager for all fields by configuring the index setting `index.norms.loading`, +to `eager`., +++ b/docs/reference/mapping/types/core-types.asciidoc, +            },, +            "user" : {, +                "type" : "string",, +                "index" : "not_analyzed",, +                "norms" : {, +                    "enabled" : false, +                }, +then the value that will be stored is `na`. There is also a `string` `user`, +which is indexed as-is (not broken down into tokens) and has norms, +disabled (so that matching this field is a binary decision, no match is, +better than another one)., +|`norms.enabled` |Boolean value if norms should be enabled or not. Defaults, +to `true` for `analyzed` fields, and to `false` for `not_analyzed` fields., +, +|`norms.loading` |Describes how norms should be loaded, possible values are, +`eager` and `lazy` (default). It is possible to change the default value to, +eager for all fields by configuring the index setting `index.norms.loading`, +to `eager`., +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +import org.elasticsearch.ElasticSearchParseException;, +, +    public static Map<String, Object> nodeMapValue(Object node, String desc) {, +        if (node instanceof Map) {, +            return (Map<String, Object>) node;, +        } else {, +            throw new ElasticSearchParseException(desc + " should be a hash but was of type: " + node.getClass());, +        }, +    }, +++ b/docs/reference/mapping/types/core-types.asciidoc, +            },, +            "user" : {, +                "type" : "string",, +                "index" : "not_analyzed",, +                "norms" : {, +                    "enabled" : false, +                }, +then the value that will be stored is `na`. There is also a `string` `user`, +which is indexed as-is (not broken down into tokens) and has norms, +disabled (so that matching this field is a binary decision, no match is, +better than another one)., +|`norms.enabled` |Boolean value if norms should be enabled or not. Defaults, +to `true` for `analyzed` fields, and to `false` for `not_analyzed` fields., +, +|`norms.loading` |Describes how norms should be loaded, possible values are, +`eager` and `lazy` (default). It is possible to change the default value to, +eager for all fields by configuring the index setting `index.norms.loading`, +to `eager`., +++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +import org.elasticsearch.ElasticSearchParseException;, +, +    public static Map<String, Object> nodeMapValue(Object node, String desc) {, +        if (node instanceof Map) {, +            return (Map<String, Object>) node;, +        } else {, +            throw new ElasticSearchParseException(desc + " should be a hash but was of type: " + node.getClass());, +        }, +    }, +++ b/src/main/java/org/elasticsearch/index/fielddata/FieldDataType.java, +import org.elasticsearch.index.mapper.FieldMapper.Loading;, +        final String loading = settings.get(Loading.KEY);, +        this.loading = Loading.parse(loading, Loading.LAZY);, +++ b/docs/reference/mapping/types/core-types.asciidoc, +            },, +            "user" : {, +                "type" : "string",, +                "index" : "not_analyzed",, +                "norms" : {, +                    "enabled" : false, +                }, +then the value that will be stored is `na`. There is also a `string` `user`, +which is indexed as-is (not broken down into tokens) and has norms, +disabled (so that matching this field is a binary decision, no match is, +better than another one)., +|`norms.enabled` |Boolean value if norms should be enabled or not. Defaults, +to `true` for `analyzed` fields, and to `false` for `not_analyzed` fields., +, +|`norms.loading` |Describes how norms should be loaded, possible values are, +`eager` and `lazy` (default). It is possible to change the default value to, +eager for all fields by configuring the index setting `index.norms.loading`, +to `eager`.]