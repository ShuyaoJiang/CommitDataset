[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.cluster.metadata.MetaData;, +        this.membership = new MembershipAction(settings, transportService, this, new MembershipListener());, +                ClusterState clusterState;, +                    clusterState = membership.sendJoinRequestBlocking(masterNode, localNode, initialPingTimeout);, +, +                // we update the metadata once we managed to join, so we pre-create indices and so on (no shards allocation), +                final MetaData metaData = clusterState.metaData();, +                        // make sure we have the local node id set, we might need it as a result of the new metadata, +                        DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.newNodesBuilder().putAll(currentState.nodes()).put(localNode).localNodeId(localNode.id());, +                        return newClusterStateBuilder().state(currentState).nodes(nodesBuilder).blocks(clusterBlocks).metaData(metaData).build();, +        @Override public ClusterState onJoin(DiscoveryNode node) {, +            return clusterService.state();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +import org.elasticsearch.cluster.metadata.MetaData;, +        this.membership = new MembershipAction(settings, transportService, this, new MembershipListener());, +                ClusterState clusterState;, +                    clusterState = membership.sendJoinRequestBlocking(masterNode, localNode, initialPingTimeout);, +, +                // we update the metadata once we managed to join, so we pre-create indices and so on (no shards allocation), +                final MetaData metaData = clusterState.metaData();, +                        // make sure we have the local node id set, we might need it as a result of the new metadata, +                        DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.newNodesBuilder().putAll(currentState.nodes()).put(localNode).localNodeId(localNode.id());, +                        return newClusterStateBuilder().state(currentState).nodes(nodesBuilder).blocks(clusterBlocks).metaData(metaData).build();, +        @Override public ClusterState onJoin(DiscoveryNode node) {, +            return clusterService.state();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/membership/MembershipAction.java, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.discovery.zen.DiscoveryNodesProvider;, +import org.elasticsearch.transport.*;, +        ClusterState onJoin(DiscoveryNode node);, +    private final DiscoveryNodesProvider nodesProvider;, +, +    public MembershipAction(Settings settings, TransportService transportService, DiscoveryNodesProvider nodesProvider, MembershipListener listener) {, +        this.nodesProvider = nodesProvider;, +        transportService.sendRequest(masterNode, JoinRequestRequestHandler.ACTION, new JoinRequest(node, false), VoidTransportResponseHandler.INSTANCE_NOSPAWN);, +    public ClusterState sendJoinRequestBlocking(DiscoveryNode masterNode, DiscoveryNode node, TimeValue timeout) throws ElasticSearchException {, +        return transportService.submitRequest(masterNode, JoinRequestRequestHandler.ACTION, new JoinRequest(node, true), new FutureTransportResponseHandler<JoinResponse>() {, +            @Override public JoinResponse newInstance() {, +                return new JoinResponse();, +            }, +        }).txGet(timeout.millis(), TimeUnit.MILLISECONDS).clusterState;, +    static class JoinRequest implements Streamable {, +        DiscoveryNode node;, +, +        boolean withClusterState;, +        private JoinRequest(DiscoveryNode node, boolean withClusterState) {, +            this.withClusterState = withClusterState;, +            withClusterState = in.readBoolean();, +            out.writeBoolean(withClusterState);, +        }, +    }, +, +    class JoinResponse implements Streamable {, +, +        ClusterState clusterState;, +, +        JoinResponse() {, +        }, +, +        JoinResponse(ClusterState clusterState) {, +            this.clusterState = clusterState;, +        }, +, +        @Override public void readFrom(StreamInput in) throws IOException {, +            clusterState = ClusterState.Builder.readFrom(in, settings, nodesProvider.nodes().localNode());, +        }, +, +        @Override public void writeTo(StreamOutput out) throws IOException {, +            ClusterState.Builder.writeTo(clusterState, out);, +            ClusterState clusterState = listener.onJoin(request.node);, +            if (request.withClusterState) {, +                channel.sendResponse(new JoinResponse(clusterState));, +            } else {, +    }]