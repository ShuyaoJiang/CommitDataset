[+++ b/src/main/java/org/elasticsearch/shield/ShieldModule.java, +import org.elasticsearch.shield.crypto.CryptoModule;, +                new CryptoModule(settings),, +++ b/src/main/java/org/elasticsearch/shield/ShieldModule.java, +import org.elasticsearch.shield.crypto.CryptoModule;, +                new CryptoModule(settings),, +++ b/src/main/java/org/elasticsearch/shield/ShieldPlugin.java, +import org.elasticsearch.shield.crypto.InternalCryptoService;, +                ImmutableList.<Class<? extends LifecycleComponent>>of(LicenseService.class, InternalCryptoService.class, FileRolesStore.class, Realms.class, IPFilter.class) :, +++ b/src/main/java/org/elasticsearch/shield/ShieldModule.java, +import org.elasticsearch.shield.crypto.CryptoModule;, +                new CryptoModule(settings),, +++ b/src/main/java/org/elasticsearch/shield/ShieldPlugin.java, +import org.elasticsearch.shield.crypto.InternalCryptoService;, +                ImmutableList.<Class<? extends LifecycleComponent>>of(LicenseService.class, InternalCryptoService.class, FileRolesStore.class, Realms.class, IPFilter.class) :, +++ b/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +import org.elasticsearch.shield.crypto.SignatureException;, +import org.elasticsearch.shield.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public ShieldActionFilter(Settings settings, AuthenticationService authcService, AuthorizationService authzService, CryptoService cryptoService,, +        this.cryptoService = cryptoService;, +                scrollRequest.scrollId(cryptoService.unsignAndVerify(scrollId));, +                        unsignedIds.add(cryptoService.unsignAndVerify(signedId));, +            if (scrollId != null && !cryptoService.signed(scrollId)) {, +                searchResponse.scrollId(cryptoService.sign(scrollId));, +++ b/src/main/java/org/elasticsearch/shield/ShieldModule.java, +import org.elasticsearch.shield.crypto.CryptoModule;, +                new CryptoModule(settings),, +++ b/src/main/java/org/elasticsearch/shield/ShieldPlugin.java, +import org.elasticsearch.shield.crypto.InternalCryptoService;, +                ImmutableList.<Class<? extends LifecycleComponent>>of(LicenseService.class, InternalCryptoService.class, FileRolesStore.class, Realms.class, IPFilter.class) :, +++ b/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +import org.elasticsearch.shield.crypto.SignatureException;, +import org.elasticsearch.shield.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public ShieldActionFilter(Settings settings, AuthenticationService authcService, AuthorizationService authzService, CryptoService cryptoService,, +        this.cryptoService = cryptoService;, +                scrollRequest.scrollId(cryptoService.unsignAndVerify(scrollId));, +                        unsignedIds.add(cryptoService.unsignAndVerify(signedId));, +            if (scrollId != null && !cryptoService.signed(scrollId)) {, +                searchResponse.scrollId(cryptoService.sign(scrollId));, +++ b/src/main/java/org/elasticsearch/shield/authc/InternalAuthenticationService.java, +import org.elasticsearch.shield.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public InternalAuthenticationService(Settings settings, Realms realms, AuditTrail auditTrail, CryptoService cryptoService) {, +        this.cryptoService = cryptoService;, +                header = cryptoService.unsignAndVerify(header);, +            header = signUserHeader ? cryptoService.sign(encodeUser(user, logger)) : encodeUser(user, logger);, +            String userHeader = signUserHeader ? cryptoService.sign(encodeUser(userFromContext, logger)) : encodeUser(userFromContext, logger);, +        String userHeader = signUserHeader ? cryptoService.sign(encodeUser(user, logger)) : encodeUser(user, logger);, +++ b/src/main/java/org/elasticsearch/shield/ShieldModule.java, +import org.elasticsearch.shield.crypto.CryptoModule;, +                new CryptoModule(settings),, +++ b/src/main/java/org/elasticsearch/shield/ShieldPlugin.java, +import org.elasticsearch.shield.crypto.InternalCryptoService;, +                ImmutableList.<Class<? extends LifecycleComponent>>of(LicenseService.class, InternalCryptoService.class, FileRolesStore.class, Realms.class, IPFilter.class) :, +++ b/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +import org.elasticsearch.shield.crypto.SignatureException;, +import org.elasticsearch.shield.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public ShieldActionFilter(Settings settings, AuthenticationService authcService, AuthorizationService authzService, CryptoService cryptoService,, +        this.cryptoService = cryptoService;, +                scrollRequest.scrollId(cryptoService.unsignAndVerify(scrollId));, +                        unsignedIds.add(cryptoService.unsignAndVerify(signedId));, +            if (scrollId != null && !cryptoService.signed(scrollId)) {, +                searchResponse.scrollId(cryptoService.sign(scrollId));, +++ b/src/main/java/org/elasticsearch/shield/authc/InternalAuthenticationService.java, +import org.elasticsearch.shield.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public InternalAuthenticationService(Settings settings, Realms realms, AuditTrail auditTrail, CryptoService cryptoService) {, +        this.cryptoService = cryptoService;, +                header = cryptoService.unsignAndVerify(header);, +            header = signUserHeader ? cryptoService.sign(encodeUser(user, logger)) : encodeUser(user, logger);, +            String userHeader = signUserHeader ? cryptoService.sign(encodeUser(userFromContext, logger)) : encodeUser(userFromContext, logger);, +        String userHeader = signUserHeader ? cryptoService.sign(encodeUser(user, logger)) : encodeUser(user, logger);, +++ b/src/main/java/org/elasticsearch/shield/authc/support/CharArrays.java, +    public static char[] utf8BytesToChars(byte[] utf8Bytes) {, +++ b/src/main/java/org/elasticsearch/shield/ShieldModule.java, +import org.elasticsearch.shield.crypto.CryptoModule;, +                new CryptoModule(settings),, +++ b/src/main/java/org/elasticsearch/shield/ShieldPlugin.java, +import org.elasticsearch.shield.crypto.InternalCryptoService;, +                ImmutableList.<Class<? extends LifecycleComponent>>of(LicenseService.class, InternalCryptoService.class, FileRolesStore.class, Realms.class, IPFilter.class) :, +++ b/src/main/java/org/elasticsearch/shield/action/ShieldActionFilter.java, +import org.elasticsearch.shield.crypto.SignatureException;, +import org.elasticsearch.shield.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public ShieldActionFilter(Settings settings, AuthenticationService authcService, AuthorizationService authzService, CryptoService cryptoService,, +        this.cryptoService = cryptoService;, +                scrollRequest.scrollId(cryptoService.unsignAndVerify(scrollId));, +                        unsignedIds.add(cryptoService.unsignAndVerify(signedId));, +            if (scrollId != null && !cryptoService.signed(scrollId)) {, +                searchResponse.scrollId(cryptoService.sign(scrollId));, +++ b/src/main/java/org/elasticsearch/shield/authc/InternalAuthenticationService.java, +import org.elasticsearch.shield.crypto.CryptoService;, +    private final CryptoService cryptoService;, +    public InternalAuthenticationService(Settings settings, Realms realms, AuditTrail auditTrail, CryptoService cryptoService) {, +        this.cryptoService = cryptoService;, +                header = cryptoService.unsignAndVerify(header);, +            header = signUserHeader ? cryptoService.sign(encodeUser(user, logger)) : encodeUser(user, logger);]