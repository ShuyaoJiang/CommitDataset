[+++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +        markSeqNoAsSeen(index.seqNo());, +        markSeqNoAsSeen(delete.seqNo());, +            markSeqNoAsSeen(noOp.seqNo());, +     * Marks the given seq_no as seen and advances the max_seq_no of this engine to at least that value., +     */, +    protected final void markSeqNoAsSeen(long seqNo) {, +        localCheckpointTracker.advanceMaxSeqNo(seqNo);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +        markSeqNoAsSeen(index.seqNo());, +        markSeqNoAsSeen(delete.seqNo());, +            markSeqNoAsSeen(noOp.seqNo());, +     * Marks the given seq_no as seen and advances the max_seq_no of this engine to at least that value., +     */, +    protected final void markSeqNoAsSeen(long seqNo) {, +        localCheckpointTracker.advanceMaxSeqNo(seqNo);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/seqno/LocalCheckpointTracker.java, +     * Marks the provided sequence number as seen and updates the max_seq_no if needed., +     */, +    public synchronized void advanceMaxSeqNo(long seqNo) {, +        if (seqNo >= nextSeqNo) {, +            nextSeqNo = seqNo + 1;, +        }, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +        markSeqNoAsSeen(index.seqNo());, +        markSeqNoAsSeen(delete.seqNo());, +            markSeqNoAsSeen(noOp.seqNo());, +     * Marks the given seq_no as seen and advances the max_seq_no of this engine to at least that value., +     */, +    protected final void markSeqNoAsSeen(long seqNo) {, +        localCheckpointTracker.advanceMaxSeqNo(seqNo);, +    }, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/seqno/LocalCheckpointTracker.java, +     * Marks the provided sequence number as seen and updates the max_seq_no if needed., +     */, +    public synchronized void advanceMaxSeqNo(long seqNo) {, +        if (seqNo >= nextSeqNo) {, +            nextSeqNo = seqNo + 1;, +        }, +    }, +, +    /**, +++ b/server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java, +, +    public void testMaxSeqNoInCommitUserData() throws Exception {, +        AtomicBoolean running = new AtomicBoolean(true);, +        Thread rollTranslog = new Thread(() -> {, +            while (running.get() && engine.getTranslog().currentFileGeneration() < 500) {, +                engine.rollTranslogGeneration(); // make adding operations to translog slower, +            }, +        });, +        rollTranslog.start();, +, +        Thread indexing = new Thread(() -> {, +            long seqNo = 0;, +            while (running.get() && seqNo <= 1000) {, +                try {, +                    String id = Long.toString(between(1, 50));, +                    if (randomBoolean()) {, +                        ParsedDocument doc = testParsedDocument(id, null, testDocumentWithTextField(), SOURCE, null);, +                        engine.index(replicaIndexForDoc(doc, 1L, seqNo, false));, +                    } else {, +                        engine.delete(replicaDeleteForDoc(id, 1L, seqNo, 0L));, +                    }, +                    seqNo++;, +                } catch (IOException e) {, +                    throw new AssertionError(e);, +                }, +            }, +        });, +        indexing.start();, +, +        int numCommits = between(5, 20);, +        for (int i = 0; i < numCommits; i++) {, +            engine.flush(false, true);, +        }, +        running.set(false);, +        indexing.join();, +        rollTranslog.join();, +        assertMaxSeqNoInCommitUserData(engine);, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +        markSeqNoAsSeen(index.seqNo());, +        markSeqNoAsSeen(delete.seqNo());, +            markSeqNoAsSeen(noOp.seqNo());, +     * Marks the given seq_no as seen and advances the max_seq_no of this engine to at least that value., +     */, +    protected final void markSeqNoAsSeen(long seqNo) {, +        localCheckpointTracker.advanceMaxSeqNo(seqNo);]