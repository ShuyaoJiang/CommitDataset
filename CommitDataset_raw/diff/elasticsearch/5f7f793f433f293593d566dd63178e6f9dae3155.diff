[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.action.index.IndexRequest;, +    /**, +     * Returns the maximum auto_id_timestamp of all append-only index requests have been processed by this engine, +     * or the auto_id_timestamp received from its primary shard via {@link #updateMaxUnsafeAutoIdTimestamp(long)}., +     * Notes this method returns the auto_id_timestamp of all append-only requests, not max_unsafe_auto_id_timestamp., +     */, +    public long getMaxSeenAutoIdTimestamp() {, +        return IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP;, +    }, +, +    /**, +     * Forces this engine to advance its max_unsafe_auto_id_timestamp marker to at least the given timestamp., +     * The engine will disable optimization for all append-only whose timestamp at most {@code newTimestamp}., +     */, +    public abstract void updateMaxUnsafeAutoIdTimestamp(long newTimestamp);, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.action.index.IndexRequest;, +    /**, +     * Returns the maximum auto_id_timestamp of all append-only index requests have been processed by this engine, +     * or the auto_id_timestamp received from its primary shard via {@link #updateMaxUnsafeAutoIdTimestamp(long)}., +     * Notes this method returns the auto_id_timestamp of all append-only requests, not max_unsafe_auto_id_timestamp., +     */, +    public long getMaxSeenAutoIdTimestamp() {, +        return IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP;, +    }, +, +    /**, +     * Forces this engine to advance its max_unsafe_auto_id_timestamp marker to at least the given timestamp., +     * The engine will disable optimization for all append-only whose timestamp at most {@code newTimestamp}., +     */, +    public abstract void updateMaxUnsafeAutoIdTimestamp(long newTimestamp);, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private final AtomicLong maxSeenAutoIdTimestamp = new AtomicLong(-1);, +            updateAutoIdTimestamp(Long.MAX_VALUE, true);, +                updateAutoIdTimestamp(Long.parseLong(entry.getValue()), true);, +            updateAutoIdTimestamp(index.getAutoGeneratedIdTimestamp(), true);, +            updateAutoIdTimestamp(index.getAutoGeneratedIdTimestamp(), false);, +            updateAutoIdTimestamp(Long.MAX_VALUE, true);, +, +    @Override, +    public final long getMaxSeenAutoIdTimestamp() {, +        return maxSeenAutoIdTimestamp.get();, +    }, +, +    @Override, +    public final void updateMaxUnsafeAutoIdTimestamp(long newTimestamp) {, +        updateAutoIdTimestamp(newTimestamp, true);, +    }, +, +    private void updateAutoIdTimestamp(long newTimestamp, boolean unsafe) {, +        assert newTimestamp >= -1 : "invalid timestamp [" + newTimestamp + "]";, +        maxSeenAutoIdTimestamp.updateAndGet(curr -> Math.max(curr, newTimestamp));, +        if (unsafe) {, +            maxUnsafeAutoIdTimestamp.updateAndGet(curr -> Math.max(curr, newTimestamp));, +        }, +        assert maxUnsafeAutoIdTimestamp.get() <= maxSeenAutoIdTimestamp.get();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import org.elasticsearch.action.index.IndexRequest;, +    /**, +     * Returns the maximum auto_id_timestamp of all append-only index requests have been processed by this engine, +     * or the auto_id_timestamp received from its primary shard via {@link #updateMaxUnsafeAutoIdTimestamp(long)}., +     * Notes this method returns the auto_id_timestamp of all append-only requests, not max_unsafe_auto_id_timestamp., +     */, +    public long getMaxSeenAutoIdTimestamp() {, +        return IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP;, +    }, +, +    /**, +     * Forces this engine to advance its max_unsafe_auto_id_timestamp marker to at least the given timestamp., +     * The engine will disable optimization for all append-only whose timestamp at most {@code newTimestamp}., +     */, +    public abstract void updateMaxUnsafeAutoIdTimestamp(long newTimestamp);, +, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +    private final AtomicLong maxSeenAutoIdTimestamp = new AtomicLong(-1);, +            updateAutoIdTimestamp(Long.MAX_VALUE, true);, +                updateAutoIdTimestamp(Long.parseLong(entry.getValue()), true);, +            updateAutoIdTimestamp(index.getAutoGeneratedIdTimestamp(), true);, +            updateAutoIdTimestamp(index.getAutoGeneratedIdTimestamp(), false);, +            updateAutoIdTimestamp(Long.MAX_VALUE, true);, +, +    @Override, +    public final long getMaxSeenAutoIdTimestamp() {, +        return maxSeenAutoIdTimestamp.get();, +    }, +, +    @Override, +    public final void updateMaxUnsafeAutoIdTimestamp(long newTimestamp) {, +        updateAutoIdTimestamp(newTimestamp, true);, +    }, +, +    private void updateAutoIdTimestamp(long newTimestamp, boolean unsafe) {, +        assert newTimestamp >= -1 : "invalid timestamp [" + newTimestamp + "]";, +        maxSeenAutoIdTimestamp.updateAndGet(curr -> Math.max(curr, newTimestamp));, +        if (unsafe) {]