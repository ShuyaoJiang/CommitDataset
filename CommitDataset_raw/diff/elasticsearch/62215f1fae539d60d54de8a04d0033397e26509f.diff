[+++ b/docs/en/security/limitations.asciidoc, +* If suggesters are specified and document level security is enabled then, +  the specified suggesters are ignored., +++ b/docs/en/security/limitations.asciidoc, +* If suggesters are specified and document level security is enabled then, +  the specified suggesters are ignored., +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/interceptor/SearchRequestInterceptor.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.rest.RestStatus;, +, +        if (documentLevelSecurityEnabled) {, +            if (request.source() != null && request.source().suggest() != null) {, +                throw new ElasticsearchSecurityException("Suggest isn't supported if document level security is enabled",, +                        RestStatus.BAD_REQUEST);, +            }, +        }, +++ b/docs/en/security/limitations.asciidoc, +* If suggesters are specified and document level security is enabled then, +  the specified suggesters are ignored., +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/action/interceptor/SearchRequestInterceptor.java, +import org.elasticsearch.ElasticsearchSecurityException;, +import org.elasticsearch.rest.RestStatus;, +, +        if (documentLevelSecurityEnabled) {, +            if (request.source() != null && request.source().suggest() != null) {, +                throw new ElasticsearchSecurityException("Suggest isn't supported if document level security is enabled",, +                        RestStatus.BAD_REQUEST);, +            }, +        }, +++ b/plugin/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java, +import org.apache.lucene.util.LuceneTestCase;, +import org.elasticsearch.search.suggest.SuggestBuilder;, +import org.elasticsearch.search.suggest.completion.CompletionSuggestion;, +import org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder;, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestion;, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder;, +import org.elasticsearch.search.suggest.term.TermSuggestion;, +import org.elasticsearch.search.suggest.term.TermSuggestionBuilder;, +import static org.hamcrest.Matchers.notNullValue;, +@LuceneTestCase.SuppressCodecs("*") // suppress test codecs otherwise test using completion suggester fails, +    public void testSuggesters() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .addMapping("type1", "field1", "type=text", "suggest_field1", "type=text", "suggest_field2", "type=completion"), +        );, +, +        client().prepareIndex("test", "type1", "1"), +                .setSource(jsonBuilder().startObject(), +                        .field("field1", "value1"), +                        .field("suggest_field1", "value"), +                        .startObject("suggest_field2"), +                            .field("input", "value"), +                        .endObject(), +                        .endObject()).get();, +        // A document that is always included by role query of both roles:, +        client().prepareIndex("test", "type1", "2"), +                .setSource(jsonBuilder().startObject(), +                        .field("field1", "value1"), +                        .field("field2", "value2"), +                        .endObject()).get();, +        refresh("test");, +, +        // Term suggester:, +        SearchResponse response = client(), +                .prepareSearch("test"), +                .suggest(new SuggestBuilder(), +                        .setGlobalText("valeu"), +                        .addSuggestion("_name1", new TermSuggestionBuilder("suggest_field1")), +                ).get();, +        assertNoFailures(response);, +, +        TermSuggestion termSuggestion = response.getSuggest().getSuggestion("_name1");, +        assertThat(termSuggestion, notNullValue());, +        assertThat(termSuggestion.getEntries().size(), equalTo(1));, +        assertThat(termSuggestion.getEntries().get(0).getOptions().size(), equalTo(1));, +        assertThat(termSuggestion.getEntries().get(0).getOptions().get(0).getText().string(), equalTo("value"));, +, +        Exception e = expectThrows(ElasticsearchSecurityException.class, () -> client(), +                .filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user2", USERS_PASSWD))), +                .prepareSearch("test"), +                .suggest(new SuggestBuilder(), +                        .setGlobalText("valeu"), +                        .addSuggestion("_name1", new TermSuggestionBuilder("suggest_field1")), +                ).get());, +        assertThat(e.getMessage(), equalTo("Suggest isn't supported if document level security is enabled"));, +, +        // Phrase suggester:, +        response = client(), +                .prepareSearch("test"), +                .suggest(new SuggestBuilder(), +                        .setGlobalText("valeu"), +                        .addSuggestion("_name1", new PhraseSuggestionBuilder("suggest_field1")), +                ).get();, +        assertNoFailures(response);, +, +        PhraseSuggestion phraseSuggestion = response.getSuggest().getSuggestion("_name1");, +        assertThat(phraseSuggestion, notNullValue());, +        assertThat(phraseSuggestion.getEntries().size(), equalTo(1));, +        assertThat(phraseSuggestion.getEntries().get(0).getOptions().size(), equalTo(1));, +        assertThat(phraseSuggestion.getEntries().get(0).getOptions().get(0).getText().string(), equalTo("value"));, +]