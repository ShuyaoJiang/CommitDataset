[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +import org.gradle.api.tasks.Input, +        final int outputLevel = logger.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO, +        } catch (Exception e) {, +    protected abstract void runAnt(AntBuilder ant), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/AntTask.groovy, +import org.gradle.api.tasks.Input, +        final int outputLevel = logger.isDebugEnabled() ? Project.MSG_DEBUG : Project.MSG_INFO, +        } catch (Exception e) {, +    protected abstract void runAnt(AntBuilder ant), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/Fixture.groovy, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.gradle.test, +, +import org.apache.tools.ant.taskdefs.condition.Os, +import org.elasticsearch.gradle.AntTask, +import org.elasticsearch.gradle.LoggedExec, +import org.gradle.api.GradleException, +import org.gradle.api.Task, +import org.gradle.api.tasks.Exec, +import org.gradle.api.tasks.Input, +, +/**, + * A fixture for integration tests which runs in a separate process., + */, +public class Fixture extends AntTask {, +, +    /** The path to the executable that starts the fixture. */, +    @Input, +    String executable, +, +    private final List<Object> arguments = new ArrayList<>(), +, +    @Input, +    public void args(Object... args) {, +        arguments.addAll(args), +    }, +, +    /**, +     * Environment variables for the fixture process. The value can be any object, which, +     * will have toString() called at execution time., +     */, +    private final Map<String, Object> environment = new HashMap<>(), +, +    @Input, +    public void env(String key, Object value) {, +        environment.put(key, value), +    }, +, +    /** A flag to indicate whether the command should be executed from a shell. */, +    @Input, +    boolean useShell = false, +, +    /**, +     * A flag to indicate whether the fixture should be run in the foreground, or spawned., +     * It is protected so subclasses can override (eg RunTask)., +     */, +    protected boolean spawn = true, +, +    /**, +     * A closure to call before the fixture is considered ready. The closure is passed the fixture object,, +     * as well as a groovy AntBuilder, to enable running ant condition checks. The default wait, +     * condition is for http on the http port., +     */, +    @Input, +    Closure waitCondition = { Fixture fixture, AntBuilder ant ->, +        File tmpFile = new File(fixture.cwd, 'wait.success'), +        ant.get(src: "http://${fixture.addressAndPort}",, +                dest: tmpFile.toString(),, +                ignoreerrors: true, // do not fail on error, so logging information can be flushed, +                retries: 10), +        return tmpFile.exists(), +    }, +, +    /** A task which will stop this fixture. This should be used as a finalizedBy for any tasks that use the fixture. */, +    public final Task stopTask, +, +    public Fixture() {, +        stopTask = createStopTask(), +        finalizedBy(stopTask), +    }, +]