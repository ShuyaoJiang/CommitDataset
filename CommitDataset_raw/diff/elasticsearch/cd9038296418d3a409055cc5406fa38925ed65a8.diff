[+++ b/pom.xml, +            <version>15.0</version>, +++ b/pom.xml, +            <version>15.0</version>, +++ /dev/null, +++ b/pom.xml, +            <version>15.0</version>, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/inject/internal/FailableCache.java, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.CacheLoader;, +import com.google.common.cache.LoadingCache;, +import java.util.concurrent.ExecutionException;, +    private final LoadingCache<K, Object> delegate = CacheBuilder.newBuilder().build(new CacheLoader<K, Object>() {, +        @Override, +        public Object load(K key) throws Exception {, +        try {, +        } catch (ExecutionException e) {, +            throw new RuntimeException(e);, +        }, +++ b/pom.xml, +            <version>15.0</version>, +++ /dev/null, +++ b/src/main/java/org/elasticsearch/common/inject/internal/FailableCache.java, +import com.google.common.cache.CacheBuilder;, +import com.google.common.cache.CacheLoader;, +import com.google.common.cache.LoadingCache;, +import java.util.concurrent.ExecutionException;, +    private final LoadingCache<K, Object> delegate = CacheBuilder.newBuilder().build(new CacheLoader<K, Object>() {, +        @Override, +        public Object load(K key) throws Exception {, +        try {, +        } catch (ExecutionException e) {, +            throw new RuntimeException(e);, +        }, +++ b/src/main/java/org/elasticsearch/common/util/concurrent/ConcurrentCollections.java, +import com.google.common.collect.Sets;, +        return Sets.newSetFromMap(ConcurrentCollections.<V, Boolean>newConcurrentMap());]