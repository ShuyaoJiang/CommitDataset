[+++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, +        return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, +        return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, +        return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, +        return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java, +++ b/server/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +            Future<Void> future = shards.asyncRecoverReplica(replica,, +                (indexShard, node) -> new RecoveryTarget(indexShard, node, recoveryListener) {, +                (shard, node) -> new RecoveryTarget(shard, node, recoveryListener) {, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, +        return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java, +++ b/server/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +            Future<Void> future = shards.asyncRecoverReplica(replica,, +                (indexShard, node) -> new RecoveryTarget(indexShard, node, recoveryListener) {, +                (shard, node) -> new RecoveryTarget(shard, node, recoveryListener) {, +++ b/server/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +                return new RecoveryTarget(indexShard, node, recoveryListener) {, +                    (indexShard, node) -> new RecoveryTarget(indexShard, node, recoveryListener) {, +            super(shard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, +        return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java, +++ b/server/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +            Future<Void> future = shards.asyncRecoverReplica(replica,, +                (indexShard, node) -> new RecoveryTarget(indexShard, node, recoveryListener) {, +                (shard, node) -> new RecoveryTarget(shard, node, recoveryListener) {, +++ b/server/src/test/java/org/elasticsearch/index/replication/RecoveryDuringReplicationTests.java, +                return new RecoveryTarget(indexShard, node, recoveryListener) {, +                    (indexShard, node) -> new RecoveryTarget(indexShard, node, recoveryListener) {, +            super(shard, sourceNode, listener);, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +            new RecoveryTarget(shard, discoveryNode, recoveryListener) {, +            new RecoveryTarget(shard, discoveryNode, recoveryListener) {, +            new RecoveryTarget(shard, discoveryNode, recoveryListener) {, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +        this.onGoingRecoveries = new RecoveriesCollection(logger, threadPool);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveriesCollection.java, +    public RecoveriesCollection(Logger logger, ThreadPool threadPool) {, +        RecoveryTarget recoveryTarget = new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java, +    public RecoveryTarget(IndexShard indexShard, DiscoveryNode sourceNode, PeerRecoveryTargetService.RecoveryListener listener) {, +        return new RecoveryTarget(indexShard, sourceNode, listener);, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTargetHandler.java, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java, +++ b/server/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +            Future<Void> future = shards.asyncRecoverReplica(replica,]