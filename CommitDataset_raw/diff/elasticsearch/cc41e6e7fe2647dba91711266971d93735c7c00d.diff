[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +        super(request);, +        // this does not set the listenerThreaded API, if needed, its up to the caller to set it, +        // since most times, we actually want it to not be threaded..., +        // this.listenerThreaded = request.listenerThreaded();, +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +        super(request);, +        // this does not set the listenerThreaded API, if needed, its up to the caller to set it, +        // since most times, we actually want it to not be threaded..., +        // this.listenerThreaded = request.listenerThreaded();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    @SuppressWarnings("unchecked"), +    public final RequestBuilder putHeader(String key, Object value) {, +        request.putHeader(key, value);, +        return (RequestBuilder) this;, +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +        super(request);, +        // this does not set the listenerThreaded API, if needed, its up to the caller to set it, +        // since most times, we actually want it to not be threaded..., +        // this.listenerThreaded = request.listenerThreaded();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    @SuppressWarnings("unchecked"), +    public final RequestBuilder putHeader(String key, Object value) {, +        request.putHeader(key, value);, +        return (RequestBuilder) this;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +        super(request);, +        // this does not set the listenerThreaded API, if needed, its up to the caller to set it, +        // since most times, we actually want it to not be threaded..., +        // this.listenerThreaded = request.listenerThreaded();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    @SuppressWarnings("unchecked"), +    public final RequestBuilder putHeader(String key, Object value) {, +        request.putHeader(key, value);, +        return (RequestBuilder) this;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java, +            super(request, nodeId);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +        super(request);, +        // this does not set the listenerThreaded API, if needed, its up to the caller to set it, +        // since most times, we actually want it to not be threaded..., +        // this.listenerThreaded = request.listenerThreaded();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestBuilder.java, +    @SuppressWarnings("unchecked"), +    public final RequestBuilder putHeader(String key, Object value) {, +        request.putHeader(key, value);, +        return (RequestBuilder) this;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +        final ClusterStateObserver observer = new ClusterStateObserver(clusterService, logger);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/hotthreads/TransportNodesHotThreadsAction.java]