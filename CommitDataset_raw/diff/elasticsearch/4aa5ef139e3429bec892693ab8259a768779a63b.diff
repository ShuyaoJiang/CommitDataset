[+++ b/docs/reference/index-modules/translog.asciidoc, +, +|index.translog.interval |How often to check if a flush is needed, randomized, +between the interval value and 2x the interval value. Defaults to `5s`., +++ b/docs/reference/index-modules/translog.asciidoc, +, +|index.translog.interval |How often to check if a flush is needed, randomized, +between the interval value and 2x the interval value. Defaults to `5s`., +++ b/src/main/java/org/elasticsearch/index/settings/IndexDynamicSettingsModule.java, +        indexDynamicSettings.addDynamicSetting(TranslogService.INDEX_TRANSLOG_FLUSH_INTERVAL, Validator.TIME);, +++ b/docs/reference/index-modules/translog.asciidoc, +, +|index.translog.interval |How often to check if a flush is needed, randomized, +between the interval value and 2x the interval value. Defaults to `5s`., +++ b/src/main/java/org/elasticsearch/index/settings/IndexDynamicSettingsModule.java, +        indexDynamicSettings.addDynamicSetting(TranslogService.INDEX_TRANSLOG_FLUSH_INTERVAL, Validator.TIME);, +++ b/src/main/java/org/elasticsearch/index/translog/TranslogService.java, +import jsr166y.ThreadLocalRandom;, +    private volatile TimeValue interval;, +    private volatile int flushThresholdOperations;, +    private volatile ByteSizeValue flushThresholdSize;, +    private volatile TimeValue flushThresholdPeriod;, +    private volatile boolean disableFlush;, +    private volatile ScheduledFuture future;, +    public static final String INDEX_TRANSLOG_FLUSH_INTERVAL = "index.translog.interval";, +            TimeValue interval = settings.getAsTime(INDEX_TRANSLOG_FLUSH_INTERVAL, TranslogService.this.interval);, +            if (!interval.equals(TranslogService.this.interval)) {, +                logger.info("updating interval from [{}] to [{}]", TranslogService.this.interval, interval);, +                TranslogService.this.interval = interval;, +            }, +    private TimeValue computeNextInterval() {, +        return new TimeValue(interval.millis() + (ThreadLocalRandom.current().nextLong(interval.millis())));, +    }, +, +            future = threadPool.schedule(computeNextInterval(), ThreadPool.Names.SAME, this);, +                    } catch (Throwable e) {, +                        future = threadPool.schedule(computeNextInterval(), ThreadPool.Names.SAME, TranslogBasedFlush.this);]