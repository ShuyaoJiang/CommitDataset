[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +                    @Override public void postAdded() {, +                        if (start(true)) {, +                            // if we managed to start and perform the operation on the primary, we can remove this listener, +                            clusterService.remove(this);, +                        }, +                    }, +, +                    @Override public void onClose() {, +                        clusterService.remove(this);, +                        listener.onFailure(new ElasticSearchIllegalStateException("node is shutting down"));, +                    }, +, +                        clusterService.remove(this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +                    @Override public void postAdded() {, +                        if (start(true)) {, +                            // if we managed to start and perform the operation on the primary, we can remove this listener, +                            clusterService.remove(this);, +                        }, +                    }, +, +                    @Override public void onClose() {, +                        clusterService.remove(this);, +                        listener.onFailure(new ElasticSearchIllegalStateException("node is shutting down"));, +                    }, +, +                        clusterService.remove(this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterService.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +                    @Override public void postAdded() {, +                        if (start(true)) {, +                            // if we managed to start and perform the operation on the primary, we can remove this listener, +                            clusterService.remove(this);, +                        }, +                    }, +, +                    @Override public void onClose() {, +                        clusterService.remove(this);, +                        listener.onFailure(new ElasticSearchIllegalStateException("node is shutting down"));, +                    }, +, +                        clusterService.remove(this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterService.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/TimeoutClusterStateListener.java, + * An exception to cluster state listener that allows for timeouts and for post added notifications., + *, + * @author kimchy (shay.banon), +    void postAdded();, +, +    void onClose();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +                    @Override public void postAdded() {, +                        if (start(true)) {, +                            // if we managed to start and perform the operation on the primary, we can remove this listener, +                            clusterService.remove(this);, +                        }, +                    }, +, +                    @Override public void onClose() {, +                        clusterService.remove(this);, +                        listener.onFailure(new ElasticSearchIllegalStateException("node is shutting down"));, +                    }, +, +                        clusterService.remove(this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/ClusterService.java, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/TimeoutClusterStateListener.java, + * An exception to cluster state listener that allows for timeouts and for post added notifications., + *, + * @author kimchy (shay.banon), +    void postAdded();, +, +    void onClose();, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +import org.elasticsearch.common.collect.Tuple;, +import org.elasticsearch.common.timer.Timeout;, +import org.elasticsearch.common.timer.TimerTask;, +import org.elasticsearch.common.util.concurrent.jsr166y.LinkedTransferQueue;, +import org.elasticsearch.timer.TimerService;, +import java.util.Queue;, +    private final TimerService timerService;, +, +    private final Queue<Tuple<Timeout, TimeoutClusterStateListener>> onGoingTimeouts = new LinkedTransferQueue<Tuple<Timeout, TimeoutClusterStateListener>>();, +    @Inject public InternalClusterService(Settings settings, DiscoveryService discoveryService, TransportService transportService, ThreadPool threadPool,, +                                          TimerService timerService) {, +        this.timerService = timerService;, +        for (Tuple<Timeout, TimeoutClusterStateListener> onGoingTimeout : onGoingTimeouts) {, +            onGoingTimeout.v1().cancel();, +            onGoingTimeout.v2().onClose();, +    public void add(TimeValue timeout, final TimeoutClusterStateListener listener) {, +        Timeout timerTimeout = timerService.newTimeout(new NotifyTimeout(listener, timeout), timeout, TimerService.ExecutionType.THREADED);, +        onGoingTimeouts.add(new Tuple<Timeout, TimeoutClusterStateListener>(timerTimeout, listener));, +        clusterStateListeners.add(listener);, +        // call the post added notification on the same event thread]