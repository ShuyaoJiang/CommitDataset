[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexingSlowLog;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexingSlowLog;, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen(), true);, +        private final boolean preserveAliases;, +            this(state, options, System.currentTimeMillis());, +        }, +, +        Context(ClusterState state, IndicesOptions options, boolean preserveAliases) {, +            this(state, options, System.currentTimeMillis(), preserveAliases);, +           this(state, options, startTime, false);, +        }, +, +        public Context(ClusterState state, IndicesOptions options, long startTime, boolean preserveAliases) {, +            this.preserveAliases = preserveAliases;, +, +        /**, +         * This is used to prevent resolving aliases to concrete indices but this also means, +         * that we might return aliases that point to a closed index. This is currently only used, +         * by {@link #filteringAliases(ClusterState, String, String...)} since it's the only one that needs aliases, +         */, +        boolean isPreserveAliases() {, +            return preserveAliases;, +        }, +                if (Strings.isEmpty(expression)) {, +                    throw new IndexNotFoundException(expression);, +                }, +                Set<String> expand = new HashSet<>();, +                    if (context.isPreserveAliases() && aliasOrIndex.isAlias()) {, +                        expand.add(entry.getKey());, +                        for (IndexMetaData meta : aliasOrIndex.getIndices()) {, +                            if (excludeState == null || meta.getState() != excludeState) {, +                                expand.add(meta.getIndex());, +                    }, +                }, +                if (add) {, +                    result.addAll(expand);, +                } else {, +                    result.removeAll(expand);, +                }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexingSlowLog;, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +        Context context = new Context(state, IndicesOptions.lenientExpandOpen(), true);, +        private final boolean preserveAliases;, +            this(state, options, System.currentTimeMillis());, +        }, +, +        Context(ClusterState state, IndicesOptions options, boolean preserveAliases) {, +            this(state, options, System.currentTimeMillis(), preserveAliases);, +           this(state, options, startTime, false);, +        }, +, +        public Context(ClusterState state, IndicesOptions options, long startTime, boolean preserveAliases) {, +            this.preserveAliases = preserveAliases;, +, +        /**, +         * This is used to prevent resolving aliases to concrete indices but this also means, +         * that we might return aliases that point to a closed index. This is currently only used, +         * by {@link #filteringAliases(ClusterState, String, String...)} since it's the only one that needs aliases, +         */, +        boolean isPreserveAliases() {, +            return preserveAliases;, +        }, +                if (Strings.isEmpty(expression)) {, +                    throw new IndexNotFoundException(expression);, +                }, +                Set<String> expand = new HashSet<>();]