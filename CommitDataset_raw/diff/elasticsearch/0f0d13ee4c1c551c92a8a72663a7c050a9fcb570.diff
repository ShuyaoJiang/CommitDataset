[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        } catch (StorageException e) {, +            if (e.getHttpStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {, +                throw new NoSuchFileException(e.getMessage());, +            }, +            throw new IOException(e);, +        } catch (URISyntaxException e) {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        } catch (StorageException e) {, +            if (e.getHttpStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {, +                throw new NoSuchFileException(e.getMessage());, +            }, +            throw new IOException(e);, +        } catch (URISyntaxException e) {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageServiceImpl.java, +            final CloudBlobContainer blobContainer = client.v1().getContainerReference(container);, +            SocketAccess.doPrivilegedVoidException(() ->, +                blob.upload(inputStream, blobSize, AccessCondition.generateIfNotExistsCondition(), null, client.v2().get()));, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureBlobContainer.java, +        } catch (StorageException e) {, +            if (e.getHttpStatusCode() == HttpURLConnection.HTTP_NOT_FOUND) {, +                throw new NoSuchFileException(e.getMessage());, +            }, +            throw new IOException(e);, +        } catch (URISyntaxException e) {, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageServiceImpl.java, +            final CloudBlobContainer blobContainer = client.v1().getContainerReference(container);, +            SocketAccess.doPrivilegedVoidException(() ->, +                blob.upload(inputStream, blobSize, AccessCondition.generateIfNotExistsCondition(), null, client.v2().get()));, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureStorageServiceMock.java, +    public void deleteFiles(String account, String container, String path) throws URISyntaxException, StorageException {, +        for (String key : blobs.keySet()) {, +            deleteBlob(account, container, key);, +        }, +    public void deleteBlob(String account, String container, String blob) throws URISyntaxException, StorageException {, +        if (blobs.remove(blob) == null) {, +            throw new StorageException("BlobNotFound", "[" + blob + "] does not exist.", 404, null, null);, +        }]