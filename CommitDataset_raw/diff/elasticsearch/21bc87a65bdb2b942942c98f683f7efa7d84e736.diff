[+++ b/server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java, +import java.io.EOFException;, +            input.readFully(salt);, +            input.readFully(iv);, +            input.readFully(encryptedBytes);, +            if (input.read() != -1) {, +        } catch (EOFException e) {, +            throw new SecurityException("Keystore has been corrupted or tampered with", e);, +                input.readFully(entryBytes);, +            if (input.read() != -1) {, +                throw new SecurityException("Keystore has been corrupted or tampered with");, +            }, +        } catch (EOFException e) {, +            throw new SecurityException("Keystore has been corrupted or tampered with", e);, +++ b/server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java, +import java.io.EOFException;, +            input.readFully(salt);, +            input.readFully(iv);, +            input.readFully(encryptedBytes);, +            if (input.read() != -1) {, +        } catch (EOFException e) {, +            throw new SecurityException("Keystore has been corrupted or tampered with", e);, +                input.readFully(entryBytes);, +            if (input.read() != -1) {, +                throw new SecurityException("Keystore has been corrupted or tampered with");, +            }, +        } catch (EOFException e) {, +            throw new SecurityException("Keystore has been corrupted or tampered with", e);, +++ b/server/src/test/java/org/elasticsearch/common/settings/KeyStoreWrapperTests.java, +import javax.crypto.Cipher;, +import javax.crypto.CipherOutputStream;, +import javax.crypto.spec.GCMParameterSpec;, +import javax.crypto.spec.SecretKeySpec;, +import java.io.DataOutputStream;, +import java.io.EOFException;, +import java.security.SecureRandom;, +import org.elasticsearch.common.Randomness;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.instanceOf;, +    public void testFailWhenCannotConsumeSecretStream() throws Exception {, +        Path configDir = env.configFile();, +        SimpleFSDirectory directory = new SimpleFSDirectory(configDir);, +        try (IndexOutput indexOutput = directory.createOutput("elasticsearch.keystore", IOContext.DEFAULT)) {, +            CodecUtil.writeHeader(indexOutput, "elasticsearch.keystore", 3);, +            indexOutput.writeByte((byte) 0); // No password, +            SecureRandom random = Randomness.createSecure();, +            byte[] salt = new byte[64];, +            random.nextBytes(salt);, +            byte[] iv = new byte[12];, +            random.nextBytes(iv);, +            ByteArrayOutputStream bytes = new ByteArrayOutputStream();, +            CipherOutputStream cipherStream = getCipherStream(bytes, salt, iv);, +            DataOutputStream output = new DataOutputStream(cipherStream);, +            // Indicate that the secret string is longer than it is so readFully() fails, +            possiblyAlterSecretString(output, -4);, +            cipherStream.close();, +            final byte[] encryptedBytes = bytes.toByteArray();, +            possiblyAlterEncryptedBytes(indexOutput, salt, iv, encryptedBytes, 0);, +            CodecUtil.writeFooter(indexOutput);, +        }, +, +        KeyStoreWrapper keystore = KeyStoreWrapper.load(configDir);, +        SecurityException e = expectThrows(SecurityException.class, () -> keystore.decrypt(new char[0]));, +        assertThat(e.getMessage(), containsString("Keystore has been corrupted or tampered with"));, +        assertThat(e.getCause(), instanceOf(EOFException.class));, +    }, +, +    public void testFailWhenCannotConsumeEncryptedBytesStream() throws Exception {, +        Path configDir = env.configFile();, +        SimpleFSDirectory directory = new SimpleFSDirectory(configDir);, +        try (IndexOutput indexOutput = directory.createOutput("elasticsearch.keystore", IOContext.DEFAULT)) {, +            CodecUtil.writeHeader(indexOutput, "elasticsearch.keystore", 3);, +            indexOutput.writeByte((byte) 0); // No password, +            SecureRandom random = Randomness.createSecure();, +            byte[] salt = new byte[64];, +            random.nextBytes(salt);, +            byte[] iv = new byte[12];, +            random.nextBytes(iv);, +            ByteArrayOutputStream bytes = new ByteArrayOutputStream();, +            CipherOutputStream cipherStream = getCipherStream(bytes, salt, iv);, +            DataOutputStream output = new DataOutputStream(cipherStream);, +, +            possiblyAlterSecretString(output, 0);, +            cipherStream.close();, +            final byte[] encryptedBytes = bytes.toByteArray();, +            // Indicate that the encryptedBytes is larger than it is so readFully() fails, +            possiblyAlterEncryptedBytes(indexOutput, salt, iv, encryptedBytes, -12);, +            CodecUtil.writeFooter(indexOutput);, +        }, +, +        KeyStoreWrapper keystore = KeyStoreWrapper.load(configDir);, +        SecurityException e = expectThrows(SecurityException.class, () -> keystore.decrypt(new char[0]));, +        assertThat(e.getMessage(), containsString("Keystore has been corrupted or tampered with"));, +        assertThat(e.getCause(), instanceOf(EOFException.class));, +    }, +, +    public void testFailWhenSecretStreamNotConsumed() throws Exception {, +        Path configDir = env.configFile();, +        SimpleFSDirectory directory = new SimpleFSDirectory(configDir);, +        try (IndexOutput indexOutput = directory.createOutput("elasticsearch.keystore", IOContext.DEFAULT)) {]