[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +public class TransportClusterUpdateSettingsAction extends, +    TransportMasterNodeAction<ClusterUpdateSettingsRequest, ClusterUpdateSettingsResponse> {, +    public TransportClusterUpdateSettingsAction(Settings settings, TransportService transportService, ClusterService clusterService,, +                                                ThreadPool threadPool, AllocationService allocationService, ActionFilters actionFilters,, +                                                IndexNameExpressionResolver indexNameExpressionResolver, ClusterSettings clusterSettings) {, +        super(settings, ClusterUpdateSettingsAction.NAME, false, transportService, clusterService, threadPool, actionFilters,, +            indexNameExpressionResolver, ClusterUpdateSettingsRequest::new);, +        if ((request.transientSettings().getAsMap().isEmpty() &&, +            request.persistentSettings().getAsMap().size() == 1 &&, +            MetaData.SETTING_READ_ONLY_SETTING.exists(request.persistentSettings())) ||, +            (request.persistentSettings().getAsMap().isEmpty() && request.transientSettings().getAsMap().size() == 1 &&, +                MetaData.SETTING_READ_ONLY_SETTING.exists(request.transientSettings()))) {, +    protected void masterOperation(final ClusterUpdateSettingsRequest request, final ClusterState state,, +                                   final ActionListener<ClusterUpdateSettingsResponse> listener) {, +                    listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, updater.getTransientUpdates(),, +                        updater.getPersistentUpdate()));, +                    // we return when the cluster reroute is acked or it times out but the acknowledged flag depends on whether the, +                    // update settings was acknowledged, +                        return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged, updater.getTransientUpdates(),, +                            updater.getPersistentUpdate());, +                        listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, updater.getTransientUpdates(),, +                            updater.getPersistentUpdate()));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +public class TransportClusterUpdateSettingsAction extends, +    TransportMasterNodeAction<ClusterUpdateSettingsRequest, ClusterUpdateSettingsResponse> {, +    public TransportClusterUpdateSettingsAction(Settings settings, TransportService transportService, ClusterService clusterService,, +                                                ThreadPool threadPool, AllocationService allocationService, ActionFilters actionFilters,, +                                                IndexNameExpressionResolver indexNameExpressionResolver, ClusterSettings clusterSettings) {, +        super(settings, ClusterUpdateSettingsAction.NAME, false, transportService, clusterService, threadPool, actionFilters,, +            indexNameExpressionResolver, ClusterUpdateSettingsRequest::new);, +        if ((request.transientSettings().getAsMap().isEmpty() &&, +            request.persistentSettings().getAsMap().size() == 1 &&, +            MetaData.SETTING_READ_ONLY_SETTING.exists(request.persistentSettings())) ||, +            (request.persistentSettings().getAsMap().isEmpty() && request.transientSettings().getAsMap().size() == 1 &&, +                MetaData.SETTING_READ_ONLY_SETTING.exists(request.transientSettings()))) {, +    protected void masterOperation(final ClusterUpdateSettingsRequest request, final ClusterState state,, +                                   final ActionListener<ClusterUpdateSettingsResponse> listener) {, +                    listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, updater.getTransientUpdates(),, +                        updater.getPersistentUpdate()));, +                    // we return when the cluster reroute is acked or it times out but the acknowledged flag depends on whether the, +                    // update settings was acknowledged, +                        return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged, updater.getTransientUpdates(),, +                            updater.getPersistentUpdate());, +                        listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, updater.getTransientUpdates(),, +                            updater.getPersistentUpdate()));, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +import java.util.stream.Stream;, +import static org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING;, +import static org.hamcrest.Matchers.nullValue;, +        Settings.Builder resetSettings = Settings.builder();, +        Stream.of(, +            HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,, +            HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,, +            HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,, +            HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,, +            IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING,, +            HierarchyCircuitBreakerService.IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_OVERHEAD_SETTING,, +            HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING).forEach(s -> resetSettings.putNull(s.getKey()));, +    public void testCanResetUnreasonableSettings() {, +        if (noopBreakerUsed()) {, +            logger.info("--> noop breakers used, skipping test");, +            return;, +        }, +        Settings insane = Settings.builder(), +            .put(IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), "5b"), +            .build();, +        client().admin().cluster().prepareUpdateSettings().setTransientSettings(insane).get();, +, +        reset();, +, +        assertThat(client().admin().cluster().prepareState().get(), +            .getState().metaData().transientSettings().get(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey()),, +            nullValue());, +, +    }, +, +            .put(IN_FLIGHT_REQUESTS_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), inFlightRequestsLimit)]