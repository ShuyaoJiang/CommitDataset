[+++ b/docs/reference/mapping/types/core-types.asciidoc, +++ b/docs/reference/mapping/types/core-types.asciidoc, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +                CustomLongNumericField field = new CustomLongNumericField(this, value, fieldType);, +                addDocValue(context, fields, value);, +                long time = Long.parseLong(value);, +                return timeUnit.toMillis(time);, +++ b/docs/reference/mapping/types/core-types.asciidoc, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +                CustomLongNumericField field = new CustomLongNumericField(this, value, fieldType);, +                addDocValue(context, fields, value);, +                long time = Long.parseLong(value);, +                return timeUnit.toMillis(time);, +++ b/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityTests.java, +                if (v.snapshot()) continue;  // snapshots are unreleased, so there is no backcompat yet, +                if (v.onOrBefore(Version.V_0_20_6)) continue; // we can only test back one major lucene version, +                if (v.equals(Version.CURRENT)) continue; // the current version is always compatible with itself, +++ b/docs/reference/mapping/types/core-types.asciidoc, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +                CustomLongNumericField field = new CustomLongNumericField(this, value, fieldType);, +                addDocValue(context, fields, value);, +                long time = Long.parseLong(value);, +                return timeUnit.toMillis(time);, +++ b/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityTests.java, +                if (v.snapshot()) continue;  // snapshots are unreleased, so there is no backcompat yet, +                if (v.onOrBefore(Version.V_0_20_6)) continue; // we can only test back one major lucene version, +                if (v.equals(Version.CURRENT)) continue; // the current version is always compatible with itself, +++ b/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatTests.java, +                if (v.equals(Version.CURRENT)) continue;, +++ b/docs/reference/mapping/types/core-types.asciidoc, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +                CustomLongNumericField field = new CustomLongNumericField(this, value, fieldType);, +                addDocValue(context, fields, value);, +                long time = Long.parseLong(value);, +                return timeUnit.toMillis(time);, +++ b/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityTests.java, +                if (v.snapshot()) continue;  // snapshots are unreleased, so there is no backcompat yet, +                if (v.onOrBefore(Version.V_0_20_6)) continue; // we can only test back one major lucene version, +                if (v.equals(Version.CURRENT)) continue; // the current version is always compatible with itself, +++ b/src/test/java/org/elasticsearch/bwcompat/RestoreBackwardsCompatTests.java, +                if (v.equals(Version.CURRENT)) continue;, +++ b/src/test/java/org/elasticsearch/index/mapper/date/SimpleDateMappingTests.java, +import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;]