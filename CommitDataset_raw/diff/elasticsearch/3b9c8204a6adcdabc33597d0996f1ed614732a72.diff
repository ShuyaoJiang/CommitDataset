[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +    static Request getRepositories(GetRepositoriesRequest getRepositoriesRequest) {, +        String[] repositories = getRepositoriesRequest.repositories() == null ? Strings.EMPTY_ARRAY : getRepositoriesRequest.repositories();, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addCommaSeparatedPathParts(repositories).build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getRepositoriesRequest.masterNodeTimeout());, +        parameters.withLocal(getRepositoriesRequest.local());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +    static Request getRepositories(GetRepositoriesRequest getRepositoriesRequest) {, +        String[] repositories = getRepositoriesRequest.repositories() == null ? Strings.EMPTY_ARRAY : getRepositoriesRequest.repositories();, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addCommaSeparatedPathParts(repositories).build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getRepositoriesRequest.masterNodeTimeout());, +        parameters.withLocal(getRepositoriesRequest.local());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesResponse;, +    private final SnapshotClient snapshotClient = new SnapshotClient(this);, +     * Provides a {@link SnapshotClient} which can be used to access the Snapshot API., +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">Snapshot API on elastic.co</a>, +     */, +    public final SnapshotClient snapshot() {, +        return snapshotClient;, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +    static Request getRepositories(GetRepositoriesRequest getRepositoriesRequest) {, +        String[] repositories = getRepositoriesRequest.repositories() == null ? Strings.EMPTY_ARRAY : getRepositoriesRequest.repositories();, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot").addCommaSeparatedPathParts(repositories).build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(getRepositoriesRequest.masterNodeTimeout());, +        parameters.withLocal(getRepositoriesRequest.local());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesResponse;, +    private final SnapshotClient snapshotClient = new SnapshotClient(this);, +     * Provides a {@link SnapshotClient} which can be used to access the Snapshot API., +     *, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html">Snapshot API on elastic.co</a>, +     */, +    public final SnapshotClient snapshot() {, +        return snapshotClient;, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.client;, +, +import org.apache.http.Header;, +import org.elasticsearch.action.ActionListener;, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest;, +import org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesResponse;, +import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;, +import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;, +, +import java.io.IOException;, +, +import static java.util.Collections.emptySet;, +, +/**, + * A wrapper for the {@link RestHighLevelClient} that provides methods for accessing the Snapshot API.]