[+++ b/server/src/main/java/org/elasticsearch/index/engine/SoftDeletesPolicy.java, +        /*, +         * When an engine is flushed, we need to provide it the latest collection of retention leases even when the soft deletes policy is, +         * locked for peer recovery., +         */, +        final Collection<RetentionLease> retentionLeases = retentionLeasesSupplier.get();, +++ b/server/src/main/java/org/elasticsearch/index/engine/SoftDeletesPolicy.java, +        /*, +         * When an engine is flushed, we need to provide it the latest collection of retention leases even when the soft deletes policy is, +         * locked for peer recovery., +         */, +        final Collection<RetentionLease> retentionLeases = retentionLeasesSupplier.get();, +++ b/server/src/test/java/org/elasticsearch/index/engine/SoftDeletesPolicyTests.java, +import java.util.Collections;, +import static org.elasticsearch.index.seqno.SequenceNumbers.NO_OPS_PERFORMED;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.empty;, +        AtomicLong globalCheckpoint = new AtomicLong(NO_OPS_PERFORMED);, +    public void testAlwaysFetchLatestRetentionLeases() {, +        final AtomicLong globalCheckpoint = new AtomicLong(NO_OPS_PERFORMED);, +        final Collection<RetentionLease> leases = new ArrayList<>();, +        final int numLeases = randomIntBetween(0, 10);, +        for (int i = 0; i < numLeases; i++) {, +            leases.add(new RetentionLease(Integer.toString(i), randomLongBetween(0, 1000), randomNonNegativeLong(), "test"));, +        }, +        final Supplier<Collection<RetentionLease>> leasesSupplier = () -> Collections.unmodifiableCollection(new ArrayList<>(leases));, +        final SoftDeletesPolicy policy =, +                new SoftDeletesPolicy(globalCheckpoint::get, randomIntBetween(1, 1000), randomIntBetween(0, 1000), leasesSupplier);, +        if (randomBoolean()) {, +            policy.acquireRetentionLock();, +        }, +        if (numLeases == 0) {, +            assertThat(policy.getRetentionPolicy().v2(), empty());, +        } else {, +            assertThat(policy.getRetentionPolicy().v2(), contains(leases.toArray(new RetentionLease[0])));, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/index/engine/SoftDeletesPolicy.java, +        /*, +         * When an engine is flushed, we need to provide it the latest collection of retention leases even when the soft deletes policy is, +         * locked for peer recovery., +         */, +        final Collection<RetentionLease> retentionLeases = retentionLeasesSupplier.get();, +++ b/server/src/test/java/org/elasticsearch/index/engine/SoftDeletesPolicyTests.java, +import java.util.Collections;, +import static org.elasticsearch.index.seqno.SequenceNumbers.NO_OPS_PERFORMED;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.empty;, +        AtomicLong globalCheckpoint = new AtomicLong(NO_OPS_PERFORMED);, +    public void testAlwaysFetchLatestRetentionLeases() {, +        final AtomicLong globalCheckpoint = new AtomicLong(NO_OPS_PERFORMED);, +        final Collection<RetentionLease> leases = new ArrayList<>();, +        final int numLeases = randomIntBetween(0, 10);, +        for (int i = 0; i < numLeases; i++) {, +            leases.add(new RetentionLease(Integer.toString(i), randomLongBetween(0, 1000), randomNonNegativeLong(), "test"));, +        }, +        final Supplier<Collection<RetentionLease>> leasesSupplier = () -> Collections.unmodifiableCollection(new ArrayList<>(leases));, +        final SoftDeletesPolicy policy =, +                new SoftDeletesPolicy(globalCheckpoint::get, randomIntBetween(1, 1000), randomIntBetween(0, 1000), leasesSupplier);, +        if (randomBoolean()) {, +            policy.acquireRetentionLock();, +        }, +        if (numLeases == 0) {, +            assertThat(policy.getRetentionPolicy().v2(), empty());, +        } else {, +            assertThat(policy.getRetentionPolicy().v2(), contains(leases.toArray(new RetentionLease[0])));, +        }, +    }, +++ b/server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncIT.java, +import java.io.Closeable;, +            // simulate a peer-recovery which locks the soft-deletes policy on the primary., +            final Closeable retentionLock = randomBoolean() ? primary.acquireRetentionLockForPeerRecovery() : () -> {};, +            retentionLock.close();]