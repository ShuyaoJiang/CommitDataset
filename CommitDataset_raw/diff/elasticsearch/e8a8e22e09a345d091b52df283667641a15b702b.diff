[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.settings.ClusterDynamicSettings;, +import org.elasticsearch.cluster.settings.DynamicSettings;, +import java.util.Map;, +, +    private final DynamicSettings dynamicSettings;, +                                                AllocationService allocationService, @ClusterDynamicSettings DynamicSettings dynamicSettings,, +                                                ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.dynamicSettings = dynamicSettings;, +        if ((request.transientSettings().getAsMap().isEmpty() && request.persistentSettings().getAsMap().size() == 1 && request.persistentSettings().get(MetaData.SETTING_READ_ONLY) != null) ||, +                request.persistentSettings().getAsMap().isEmpty() && request.transientSettings().getAsMap().size() == 1 && request.transientSettings().get(MetaData.SETTING_READ_ONLY) != null) {, +        final Settings.Builder transientUpdates = Settings.settingsBuilder();, +        final Settings.Builder persistentUpdates = Settings.settingsBuilder();, +, +                return new ClusterUpdateSettingsResponse(acknowledged, transientUpdates.build(), persistentUpdates.build());, +                    listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, transientUpdates.build(), persistentUpdates.build()));, +                        return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged, transientUpdates.build(), persistentUpdates.build());, +                        listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, transientUpdates.build(), persistentUpdates.build()));, +                Settings.Builder transientSettings = Settings.settingsBuilder();, +                transientSettings.put(currentState.metaData().transientSettings());, +                for (Map.Entry<String, String> entry : request.transientSettings().getAsMap().entrySet()) {, +                    if (dynamicSettings.isDynamicOrLoggingSetting(entry.getKey())) {, +                        String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue(), clusterService.state());, +                        if (error == null) {, +                            transientSettings.put(entry.getKey(), entry.getValue());, +                            transientUpdates.put(entry.getKey(), entry.getValue());, +                            changed = true;, +                        } else {, +                            logger.warn("ignoring transient setting [{}], [{}]", entry.getKey(), error);, +                        }, +                    } else {, +                        logger.warn("ignoring transient setting [{}], not dynamically updateable", entry.getKey());, +                    }, +                }, +, +                Settings.Builder persistentSettings = Settings.settingsBuilder();, +                persistentSettings.put(currentState.metaData().persistentSettings());, +                for (Map.Entry<String, String> entry : request.persistentSettings().getAsMap().entrySet()) {, +                    if (dynamicSettings.isDynamicOrLoggingSetting(entry.getKey())) {, +                        String error = dynamicSettings.validateDynamicSetting(entry.getKey(), entry.getValue(), clusterService.state());, +                        if (error == null) {, +                            persistentSettings.put(entry.getKey(), entry.getValue());, +                            persistentUpdates.put(entry.getKey(), entry.getValue());, +                            changed = true;, +                        } else {, +                            logger.warn("ignoring persistent setting [{}], [{}]", entry.getKey(), error);, +                        }, +                    } else {, +                        logger.warn("ignoring persistent setting [{}], not dynamically updateable", entry.getKey());, +                    }, +                }, +, +                if (!changed) {, +                    return currentState;, +                }, +, +                MetaData.Builder metaData = MetaData.builder(currentState.metaData()), +                        .persistentSettings(persistentSettings.build()), +                        .transientSettings(transientSettings.build());, +, +                ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks());, +                boolean updatedReadOnly = metaData.persistentSettings().getAsBoolean(MetaData.SETTING_READ_ONLY, false) || metaData.transientSettings().getAsBoolean(MetaData.SETTING_READ_ONLY, false);, +                if (updatedReadOnly) {, +                    blocks.addGlobalBlock(MetaData.CLUSTER_READ_ONLY_BLOCK);, +                } else {, +                    blocks.removeGlobalBlock(MetaData.CLUSTER_READ_ONLY_BLOCK);, +                }, +, +                return builder(currentState).metaData(metaData).blocks(blocks).build();, +++ b/build.gradle, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/settings/TransportClusterUpdateSettingsAction.java, +import org.elasticsearch.cluster.block.ClusterBlocks;, +import org.elasticsearch.cluster.settings.ClusterDynamicSettings;, +import org.elasticsearch.cluster.settings.DynamicSettings;, +import java.util.Map;, +, +    private final DynamicSettings dynamicSettings;, +                                                AllocationService allocationService, @ClusterDynamicSettings DynamicSettings dynamicSettings,, +                                                ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.dynamicSettings = dynamicSettings;, +        if ((request.transientSettings().getAsMap().isEmpty() && request.persistentSettings().getAsMap().size() == 1 && request.persistentSettings().get(MetaData.SETTING_READ_ONLY) != null) ||, +                request.persistentSettings().getAsMap().isEmpty() && request.transientSettings().getAsMap().size() == 1 && request.transientSettings().get(MetaData.SETTING_READ_ONLY) != null) {, +        final Settings.Builder transientUpdates = Settings.settingsBuilder();, +        final Settings.Builder persistentUpdates = Settings.settingsBuilder();, +, +                return new ClusterUpdateSettingsResponse(acknowledged, transientUpdates.build(), persistentUpdates.build());, +                    listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, transientUpdates.build(), persistentUpdates.build()));, +                        return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged, transientUpdates.build(), persistentUpdates.build());, +                        listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked, transientUpdates.build(), persistentUpdates.build()));, +                Settings.Builder transientSettings = Settings.settingsBuilder();, +                transientSettings.put(currentState.metaData().transientSettings());, +                for (Map.Entry<String, String> entry : request.transientSettings().getAsMap().entrySet()) {, +                    if (dynamicSettings.isDynamicOrLoggingSetting(entry.getKey())) {]