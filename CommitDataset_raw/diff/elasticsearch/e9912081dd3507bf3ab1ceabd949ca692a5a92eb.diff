[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RestHighLevelClient.java, +    /**, +     * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation, +     * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}., +     */, +    @Deprecated, +    /**, +     * Defines a helper method for performing a request and then parsing the returned entity using the provided entityParser., +     */, +    protected final <Req extends Validatable, Resp> Resp performRequestAndParseEntity(Req request,, +                                                                  CheckedFunction<Req, Request, IOException> requestConverter,, +                                                                  RequestOptions options,, +                                                                  CheckedFunction<XContentParser, Resp, IOException> entityParser,, +                                                                  Set<Integer> ignores) throws IOException {, +        return performRequest(request, requestConverter, options,, +                response -> parseEntity(response.getEntity(), entityParser), ignores);, +    }, +, +    /**, +     * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation, +     * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}., +     */, +    @Deprecated, +        if (validationException != null && validationException.validationErrors().isEmpty() == false) {, +        return internalPerformRequest(request, requestConverter, options, responseConverter, ignores);, +    }, +, +    /**, +     * Defines a helper method for performing a request., +     */, +    protected final <Req extends Validatable, Resp> Resp performRequest(Req request,, +                                                             CheckedFunction<Req, Request, IOException> requestConverter,, +                                                             RequestOptions options,, +                                                             CheckedFunction<Response, Resp, IOException> responseConverter,, +                                                             Set<Integer> ignores) throws IOException {, +        ValidationException validationException = request.validate();, +        if (validationException != null && validationException.validationErrors().isEmpty() == false) {, +            throw validationException;, +        }, +        return internalPerformRequest(request, requestConverter, options, responseConverter, ignores);, +    }, +, +    /**, +     * Provides common functionality for performing a request., +     */, +    private <Req, Resp> Resp internalPerformRequest(Req request,, +                                            CheckedFunction<Req, Request, IOException> requestConverter,, +                                            RequestOptions options,, +                                            CheckedFunction<Response, Resp, IOException> responseConverter,, +                                            Set<Integer> ignores) throws IOException {, +    /**, +     * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation, +     * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}., +     */, +    @Deprecated, +    /**, +     * Defines a helper method for asynchronously performing a request., +     */, +    protected final <Req extends Validatable, Resp> void performRequestAsyncAndParseEntity(Req request,, +                                                                       CheckedFunction<Req, Request, IOException> requestConverter,, +                                                                       RequestOptions options,, +                                                                       CheckedFunction<XContentParser, Resp, IOException> entityParser,, +                                                                       ActionListener<Resp> listener, Set<Integer> ignores) {, +        performRequestAsync(request, requestConverter, options,, +                response -> parseEntity(response.getEntity(), entityParser), listener, ignores);, +    }, +, +, +    /**, +     * @deprecated If creating a new HLRC ReST API call, consider creating new actions instead of reusing server actions. The Validation, +     * layer has been added to the ReST client, and requests should extend {@link Validatable} instead of {@link ActionRequest}., +     */, +    @Deprecated, +        if (validationException != null && validationException.validationErrors().isEmpty() == false) {, +        internalPerformRequestAsync(request, requestConverter, options, responseConverter, listener, ignores);, +    }, +, +    /**, +     * Defines a helper method for asynchronously performing a request., +     */, +    protected final <Req extends Validatable, Resp> void performRequestAsync(Req request,, +                                                                          CheckedFunction<Req, Request, IOException> requestConverter,, +                                                                          RequestOptions options,, +                                                                          CheckedFunction<Response, Resp, IOException> responseConverter,, +                                                                          ActionListener<Resp> listener, Set<Integer> ignores) {, +        ValidationException validationException = request.validate();, +        if (validationException != null && validationException.validationErrors().isEmpty() == false) {, +            listener.onFailure(validationException);, +            return;, +        }, +        internalPerformRequestAsync(request, requestConverter, options, responseConverter, listener, ignores);, +    }, +, +    /**, +     * Provides common functionality for asynchronously performing a request., +     */, +    private <Req, Resp> void internalPerformRequestAsync(Req request,, +                                                 CheckedFunction<Req, Request, IOException> requestConverter,, +                                                 RequestOptions options,, +                                                 CheckedFunction<Response, Resp, IOException> responseConverter,]