[+++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +            disconnectFromNodeChannel(ctx.getChannel(), e.getCause());, +            disconnectFromNodeChannel(ctx.getChannel(), e.getCause());, +    /**, +     * Disconnects from a node, only if the relevant channel is found to be part of the node channels., +     */, +    private void disconnectFromNode(DiscoveryNode node, Channel channel, String reason) {, +        synchronized (connectLock(node.id())) {, +            NodeChannels nodeChannels = connectedNodes.get(node);, +            if (nodeChannels != null && nodeChannels.hasChannel(channel)) {, +                connectedNodes.remove(node);, +                try {, +                    nodeChannels.close();, +                } finally {, +                    logger.debug("disconnected from [{}], {}", node, reason);, +                    transportServiceAdapter.raiseNodeDisconnected(node);, +                }, +            }, +        }, +    }, +, +    /**, +     * Disconnects from a node if a channel is found as part of that nodes channels., +     */, +    private void disconnectFromNodeChannel(Channel channel, Throwable failure) {, +        for (DiscoveryNode node : connectedNodes.keySet()) {, +            synchronized (connectLock(node.id())) {, +                NodeChannels nodeChannels = connectedNodes.get(node);, +                if (nodeChannels != null && nodeChannels.hasChannel(channel)) {, +                    connectedNodes.remove(node);, +                    try {, +                        nodeChannels.close();, +                    } finally {, +                        logger.debug("disconnected from [{}] on channel failure", failure, node);, +                        transportServiceAdapter.raiseNodeDisconnected(node);, +                    }, +                }, +            }, +        }, +    }, +, +            disconnectFromNode(node, future.getChannel(), "channel closed event");]