[+++ b/modules/lang-painless/build.gradle, +++ b/modules/lang-painless/build.gradle, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +, +        final Definition definition = Definition.INSTANCE;, +        final byte[] bytes = Writer.write(metadata);, +        final Executable executable = createExecutable(loader, definition, name, source, bytes);, +, +        return executable;, +            // Used for debugging.  Uncomment this code and add -Dtests.security.manager=false when running to save, +            // the generated Java class files.  The javap tool can then be used to inspect the generated byte code., +, +            // try {, +            //    FileOutputStream f = new FileOutputStream(new File("<path>"), false);, +            //    f.write(bytes);, +            //    f.close();, +            // } catch (Exception e) {, +            //    throw new RuntimeException(e);, +            // }, +, +++ b/modules/lang-painless/build.gradle, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +, +        final Definition definition = Definition.INSTANCE;, +        final byte[] bytes = Writer.write(metadata);, +        final Executable executable = createExecutable(loader, definition, name, source, bytes);, +, +        return executable;, +            // Used for debugging.  Uncomment this code and add -Dtests.security.manager=false when running to save, +            // the generated Java class files.  The javap tool can then be used to inspect the generated byte code., +, +            // try {, +            //    FileOutputStream f = new FileOutputStream(new File("<path>"), false);, +            //    f.write(bytes);, +            //    f.close();, +            // } catch (Exception e) {, +            //    throw new RuntimeException(e);, +            // }, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() * (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left * ((Number)right).floatValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() / (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left / ((Number)right).floatValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() % (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left % ((Number)right).floatValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() + (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left + ((Number)right).floatValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() - (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left - ((Number)right).floatValue();, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double ||  left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                    left instanceof Long || right instanceof Long ||, +                    left instanceof Float || right instanceof Float) {, +                if (left instanceof Double || left instanceof Long || left instanceof Float) {, +                if (right instanceof Double || right instanceof Long || right instanceof Float) {, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() < (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left < ((Number)right).floatValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() <= (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left <= ((Number)right).floatValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() > (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left > ((Number)right).floatValue();, +                } else if (left instanceof Float) {, +                    return ((Number)left).floatValue() >= (char)right;, +                } else if (right instanceof Float) {, +                    return (char)left >= ((Number)right).floatValue();]