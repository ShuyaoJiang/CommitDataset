[+++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.apache.lucene.index.PrefixCodedTerms;, +        } else if (query instanceof TermsQuery) {, +            Set<Term> terms = new HashSet<>();, +            TermsQuery termsQuery = (TermsQuery) query;, +            PrefixCodedTerms.TermIterator iterator = termsQuery.getTermData().iterator();, +            for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {, +                terms.add(new Term(iterator.field(), term));, +            }, +            return  terms;, +++ b/core/src/main/java/org/elasticsearch/index/percolator/ExtractQueryTermsService.java, +import org.apache.lucene.index.PrefixCodedTerms;, +        } else if (query instanceof TermsQuery) {, +            Set<Term> terms = new HashSet<>();, +            TermsQuery termsQuery = (TermsQuery) query;, +            PrefixCodedTerms.TermIterator iterator = termsQuery.getTermData().iterator();, +            for (BytesRef term = iterator.next(); term != null; term = iterator.next()) {, +                terms.add(new Term(iterator.field(), term));, +            }, +            return  terms;, +++ b/core/src/test/java/org/elasticsearch/index/percolator/ExtractQueryTermsServiceTests.java, +import java.util.Arrays;, +    public void testExtractQueryMetadata_termsQuery() {, +        TermsQuery termsQuery = new TermsQuery("_field", new BytesRef("_term1"), new BytesRef("_term2"));, +        List<Term> terms = new ArrayList<>(ExtractQueryTermsService.extractQueryTerms(termsQuery));, +        Collections.sort(terms);, +        assertThat(terms.size(), equalTo(2));, +        assertThat(terms.get(0).field(), equalTo("_field"));, +        assertThat(terms.get(0).text(), equalTo("_term1"));, +        assertThat(terms.get(1).field(), equalTo("_field"));, +        assertThat(terms.get(1).text(), equalTo("_term2"));, +, +        // test with different fields, +        termsQuery = new TermsQuery(new Term("_field1", "_term1"), new Term("_field2", "_term2"));, +        terms = new ArrayList<>(ExtractQueryTermsService.extractQueryTerms(termsQuery));, +        Collections.sort(terms);, +        assertThat(terms.size(), equalTo(2));, +        assertThat(terms.get(0).field(), equalTo("_field1"));, +        assertThat(terms.get(0).text(), equalTo("_term1"));, +        assertThat(terms.get(1).field(), equalTo("_field2"));, +        assertThat(terms.get(1).text(), equalTo("_term2"));, +    }, +]