[+++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/CommandLineHttpClient.java, +import javax.net.ssl.HttpsURLConnection;, +, +        final HttpURLConnection conn;, +                final Settings sslSettings = SSLService.getHttpTransportSSLSettings(settings);, +                final boolean isHostnameVerificationEnabled =, +                        sslService.getVerificationMode(sslSettings, Settings.EMPTY).isHostnameVerificationEnabled();, +                if (isHostnameVerificationEnabled == false) {, +                    httpsConn.setHostnameVerifier((hostname, session) -> true);, +                }, +, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/CommandLineHttpClient.java, +import javax.net.ssl.HttpsURLConnection;, +, +        final HttpURLConnection conn;, +                final Settings sslSettings = SSLService.getHttpTransportSSLSettings(settings);, +                final boolean isHostnameVerificationEnabled =, +                        sslService.getVerificationMode(sslSettings, Settings.EMPTY).isHostnameVerificationEnabled();, +                if (isHostnameVerificationEnabled == false) {, +                    httpsConn.setHostnameVerifier((hostname, session) -> true);, +                }, +, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/SetupPasswordTool.java, +import org.elasticsearch.cli.Command;, +import org.elasticsearch.xpack.core.XPackSettings;, +import java.util.function.BiFunction;, +    private final BiFunction<Environment, Settings, CommandLineHttpClient> clientFunction;, +, +        this((environment, settings) -> {, +            return new CommandLineHttpClient(settings, environment);, +        }, (environment) -> {, +    SetupPasswordTool(BiFunction<Environment, Settings, CommandLineHttpClient> clientFunction,, +        private KeyStoreWrapper keyStoreWrapper;, +        @Override, +        public void close() {, +            if (keyStoreWrapper != null) {, +                keyStoreWrapper.close();, +            }, +            if (elasticUserPassword != null) {, +                elasticUserPassword.close();, +            }, +        }, +, +            keyStoreWrapper = keyStoreFunction.apply(env);, +            // TODO: We currently do not support keystore passwords, +            keyStoreWrapper.decrypt(new char[0]);, +, +            Settings.Builder settingsBuilder = Settings.builder();, +            settingsBuilder.put(env.settings(), true);, +            if (settingsBuilder.getSecureSettings() == null) {, +                settingsBuilder.setSecureSettings(keyStoreWrapper);, +            }, +            Settings settings = settingsBuilder.build();, +            elasticUserPassword = ReservedRealm.BOOTSTRAP_ELASTIC_PASSWORD.get(settings);, +, +            client = clientFunction.apply(env, settings);, +, +                terminal.println("Please check the elasticsearch SSL settings under " + XPackSettings.HTTP_SSL_PREFIX);, +                throw new UserException(ExitCodes.CONFIG,, +                        "Failed to connect to elasticsearch at " + route.toString() + ". Is the URL correct and elasticsearch running?", e);, +            final HttpResponse httpResponse =, +                    client.execute("GET", route, elasticUser, elasticUserPassword, () -> null, is -> responseBuilder(is, terminal));, +                    throw new UserException(ExitCodes.TEMP_FAILURE, "Failed to set password for user [" + user + "].");, +, +        private URL createURL(URL url, String path, String query) throws MalformedURLException, URISyntaxException {, +            return new URL(url, (url.toURI().getPath() + path).replaceAll("/+", "/") + query);, +        }, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/CommandLineHttpClient.java, +import javax.net.ssl.HttpsURLConnection;, +, +        final HttpURLConnection conn;, +                final Settings sslSettings = SSLService.getHttpTransportSSLSettings(settings);, +                final boolean isHostnameVerificationEnabled =, +                        sslService.getVerificationMode(sslSettings, Settings.EMPTY).isHostnameVerificationEnabled();, +                if (isHostnameVerificationEnabled == false) {, +                    httpsConn.setHostnameVerifier((hostname, session) -> true);, +                }, +, +++ b/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/esnative/tool/SetupPasswordTool.java, +import org.elasticsearch.cli.Command;, +import org.elasticsearch.xpack.core.XPackSettings;, +import java.util.function.BiFunction;, +    private final BiFunction<Environment, Settings, CommandLineHttpClient> clientFunction;, +, +        this((environment, settings) -> {, +            return new CommandLineHttpClient(settings, environment);, +        }, (environment) -> {, +    SetupPasswordTool(BiFunction<Environment, Settings, CommandLineHttpClient> clientFunction,, +        private KeyStoreWrapper keyStoreWrapper;, +        @Override, +        public void close() {, +            if (keyStoreWrapper != null) {, +                keyStoreWrapper.close();, +            }, +            if (elasticUserPassword != null) {, +                elasticUserPassword.close();, +            }, +        }, +, +            keyStoreWrapper = keyStoreFunction.apply(env);]