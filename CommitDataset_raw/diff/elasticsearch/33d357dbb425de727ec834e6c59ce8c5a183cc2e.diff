[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        Store store = new ByteBufferStore(shardId, settings, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        Store store = new ByteBufferStore(shardId, settings, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        ByteBufferCache byteBufferCache = new ByteBufferCache(settings);, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +        } else if (type.equalsIgnoreCase("memory")) {, +            store = new ByteBufferStore(shardId, settings, byteBufferCache);, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        Store store = new ByteBufferStore(shardId, settings, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        ByteBufferCache byteBufferCache = new ByteBufferCache(settings);, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +        } else if (type.equalsIgnoreCase("memory")) {, +            store = new ByteBufferStore(shardId, settings, byteBufferCache);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/NodeCache.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +    private final ByteBufferCache byteBufferCache;, +, +    @Inject public NodeCache(Settings settings, ByteBufferCache byteBufferCache) {, +        this.byteBufferCache = byteBufferCache;, +    }, +, +    public void close() {, +        byteBufferCache.close();, +    }, +, +    public ByteBufferCache byteBuffer() {, +        return byteBufferCache;, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        Store store = new ByteBufferStore(shardId, settings, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        ByteBufferCache byteBufferCache = new ByteBufferCache(settings);, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +        } else if (type.equalsIgnoreCase("memory")) {, +            store = new ByteBufferStore(shardId, settings, byteBufferCache);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/NodeCache.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +    private final ByteBufferCache byteBufferCache;, +, +    @Inject public NodeCache(Settings settings, ByteBufferCache byteBufferCache) {, +        this.byteBufferCache = byteBufferCache;, +    }, +, +    public void close() {, +        byteBufferCache.close();, +    }, +, +    public ByteBufferCache byteBuffer() {, +        return byteBufferCache;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/NodeCacheModule.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        bind(ByteBufferCache.class).asEagerSingleton();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        Store store = new ByteBufferStore(shardId, settings, new ByteBufferCache(settings));, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/store/SimpleStoreBenchmark.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        ByteBufferCache byteBufferCache = new ByteBufferCache(settings);, +            store = new SimpleFsStore(shardId, settings, new SimpleFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new NioFsStore(shardId, settings, new NioFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +            store = new MmapFsStore(shardId, settings, new MmapFsIndexStore(shardId.index(), settings, null, nodeEnvironment), byteBufferCache);, +        } else if (type.equalsIgnoreCase("memory")) {, +            store = new ByteBufferStore(shardId, settings, byteBufferCache);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/NodeCache.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +    private final ByteBufferCache byteBufferCache;, +, +    @Inject public NodeCache(Settings settings, ByteBufferCache byteBufferCache) {, +        this.byteBufferCache = byteBufferCache;, +    }, +, +    public void close() {, +        byteBufferCache.close();, +    }, +, +    public ByteBufferCache byteBuffer() {, +        return byteBufferCache;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/NodeCacheModule.java, +import org.elasticsearch.cache.memory.ByteBufferCache;, +        bind(ByteBufferCache.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cache/memory/ByteBufferCache.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information]