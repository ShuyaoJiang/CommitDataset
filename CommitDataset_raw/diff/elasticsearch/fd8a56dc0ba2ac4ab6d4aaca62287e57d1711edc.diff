[+++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +                        if (!Store.isChecksum(storeFile) && !snapshot.containPhysicalIndexFile(storeFile)) {, +++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java, +                        if (!Store.isChecksum(storeFile) && !snapshot.containPhysicalIndexFile(storeFile)) {, +++ b/src/main/java/org/elasticsearch/index/store/Store.java, +import org.elasticsearch.common.logging.Loggers;, +        private static final ESLogger logger = Loggers.getLogger(MetadataSnapshot.class);, +, +        /**, +         * Reads legacy checksum files found in the directory., +         *, +         * Files are expected to start with _checksums- prefix, +         * followed by long file version. Only file with the highest version is read, all other files are ignored., +         *, +         * @param directory the directory to read checksums from, +         * @return a map of file checksums and the checksum file version, +         * @throws IOException, +         */, +        /**, +         * Deletes all checksum files with version lower than newVersion., +         *, +         * @param directory the directory to clean, +         * @param newVersion the latest checksum file version, +         * @throws IOException, +         */, +        static void cleanLegacyChecksums(Directory directory, long newVersion) throws IOException {, +            synchronized (directory) {, +                for (String name : directory.listAll()) {, +                    if (isChecksum(name)) {, +                        long current = Long.parseLong(name.substring(CHECKSUMS_PREFIX.length()));, +                        if (current < newVersion) {, +                            try {, +                                directory.deleteFile(name);, +                            } catch (IOException ex) {, +                                logger.debug("can't delete old checksum file [{}]", ex, name);, +                            }, +                        }, +                    }, +                }, +            }, +        }, +, +            MetadataSnapshot.cleanLegacyChecksums(directory, nextVersion);]