[+++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import java.util.List;, +        final List<FieldMapper> allFieldMappers = documentMapper.mappers().mappers();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java, +import java.util.List;, +        final List<FieldMapper> allFieldMappers = documentMapper.mappers().mappers();, +++ b/src/main/java/org/elasticsearch/common/collect/UpdateInPlaceMap.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.collect;, +, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import com.google.common.collect.Iterables;, +import org.elasticsearch.ElasticsearchIllegalStateException;, +import org.elasticsearch.common.lease.Releasable;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +, +import java.util.Iterator;, +import java.util.Map;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.atomic.AtomicBoolean;, +, +/**, + * A map that exposes only read only methods, and can be mutated using a {@link #mutator()}. It, + * allows for a cutoff switch between {@link ImmutableOpenMap} and {@link ConcurrentMap}, based on size, since as, + * the size grows bigger, cloning the immutable map cost gets bigger and bigger, and might as well move to CHM., + * <p/>, + * Note, its important to understand the semantics of the class and its mutator, its not an update in place, when, + * CHM is used, changes to the mutator will be reflected in the existing maps!. This class should be used as if, + * its a regular, mutable concurrent map, mutation can affect the existing map., + * <p/>, + * This class only allows for a single concurrent mutator to execute at the same time., + */, +public final class UpdateInPlaceMap<K, V> {, +, +    final int switchSize;, +    final AtomicBoolean mutating = new AtomicBoolean();, +    volatile ImmutableOpenMap<K, V> immutableMap;, +    volatile ConcurrentMap<K, V> concurrentMap;, +, +    UpdateInPlaceMap(int switchSize) {, +        this.switchSize = switchSize;, +        if (switchSize == 0) {, +            this.concurrentMap = ConcurrentCollections.newConcurrentMap();, +            this.immutableMap = null;, +        } else {, +            this.concurrentMap = null;, +            this.immutableMap = ImmutableOpenMap.of();, +        }, +    }, +, +    /**, +     * Returns if the map is empty or not., +     */, +    public boolean isEmpty() {, +        final ImmutableOpenMap<K, V> immutableMap = this.immutableMap;, +        final ConcurrentMap<K, V> concurrentMap = this.concurrentMap;, +        return immutableMap != null ? immutableMap.isEmpty() : concurrentMap.isEmpty();, +    }, +, +    /**, +     * Returns the value matching a key, or null if not matched., +     */, +    public V get(K key) {, +        final ImmutableOpenMap<K, V> immutableMap = this.immutableMap;, +        final ConcurrentMap<K, V> concurrentMap = this.concurrentMap;, +        return immutableMap != null ? immutableMap.get(key) : concurrentMap.get(key);, +    }, +, +    /**, +     * Returns all the values in the map, on going mutator changes might or might not be reflected, +     * in the values., +     */, +    public Iterable<V> values() {, +        return new Iterable<V>() {, +            @Override, +            public Iterator<V> iterator() {, +                final ImmutableOpenMap<K, V> immutableMap = UpdateInPlaceMap.this.immutableMap;, +                final ConcurrentMap<K, V> concurrentMap = UpdateInPlaceMap.this.concurrentMap;, +                if (immutableMap != null) {, +                    return immutableMap.valuesIt();, +                } else {, +                    return Iterables.unmodifiableIterable(concurrentMap.values()).iterator();]