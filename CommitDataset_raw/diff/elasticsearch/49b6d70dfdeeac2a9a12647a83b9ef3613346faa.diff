[+++ b/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                    Query query = null;, +                    if (currentMapper.useFieldQueryWithQueryString()) {, +                        if (fieldMappers.hasDocMapper()) {, +                            String[] previousTypes = QueryParseContext.setTypesWithPrevious(new String[]{fieldMappers.docMapper().type()});, +                            try {, +                                query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                            } finally {, +                                QueryParseContext.setTypes(previousTypes);, +                        } else {, +                            query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                    }, +                    if (query == null) {, +                        query = super.getPrefixQuery(currentMapper.names().indexName(), termStr);, +                    }, +                    return wrapSmartNameQuery(query, fieldMappers, parseContext);, +                }, +            }, +            return super.getPrefixQuery(field, termStr);, +++ b/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                    Query query = null;, +                    if (currentMapper.useFieldQueryWithQueryString()) {, +                        if (fieldMappers.hasDocMapper()) {, +                            String[] previousTypes = QueryParseContext.setTypesWithPrevious(new String[]{fieldMappers.docMapper().type()});, +                            try {, +                                query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                            } finally {, +                                QueryParseContext.setTypes(previousTypes);, +                        } else {, +                            query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                    }, +                    if (query == null) {, +                        query = super.getPrefixQuery(currentMapper.names().indexName(), termStr);, +                    }, +                    return wrapSmartNameQuery(query, fieldMappers, parseContext);, +                }, +            }, +            return super.getPrefixQuery(field, termStr);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.apache.lucene.search.MultiTermQuery;, +    Query prefixQuery(String value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context);, +, +    Filter prefixFilter(String value, @Nullable QueryParseContext context);, +, +++ b/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                    Query query = null;, +                    if (currentMapper.useFieldQueryWithQueryString()) {, +                        if (fieldMappers.hasDocMapper()) {, +                            String[] previousTypes = QueryParseContext.setTypesWithPrevious(new String[]{fieldMappers.docMapper().type()});, +                            try {, +                                query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                            } finally {, +                                QueryParseContext.setTypes(previousTypes);, +                        } else {, +                            query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                    }, +                    if (query == null) {, +                        query = super.getPrefixQuery(currentMapper.names().indexName(), termStr);, +                    }, +                    return wrapSmartNameQuery(query, fieldMappers, parseContext);, +                }, +            }, +            return super.getPrefixQuery(field, termStr);, +++ b/src/main/java/org/elasticsearch/index/mapper/FieldMapper.java, +import org.apache.lucene.search.MultiTermQuery;, +    Query prefixQuery(String value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context);, +, +    Filter prefixFilter(String value, @Nullable QueryParseContext context);, +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +    public Query prefixQuery(String value, @Nullable MultiTermQuery.RewriteMethod method, @Nullable QueryParseContext context) {, +        PrefixQuery query = new PrefixQuery(names().createIndexNameTerm(indexedValue(value)));, +        if (method != null) {, +            query.setRewriteMethod(method);, +        }, +        return query;, +    }, +, +    @Override, +    public Filter prefixFilter(String value, @Nullable QueryParseContext context) {, +        return new PrefixFilter(names().createIndexNameTerm(indexedValue(value)));, +    }, +, +    @Override, +++ b/src/main/java/org/apache/lucene/queryParser/MapperQueryParser.java, +                    Query query = null;, +                    if (currentMapper.useFieldQueryWithQueryString()) {, +                        if (fieldMappers.hasDocMapper()) {, +                            String[] previousTypes = QueryParseContext.setTypesWithPrevious(new String[]{fieldMappers.docMapper().type()});, +                            try {, +                                query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                            } finally {, +                                QueryParseContext.setTypes(previousTypes);, +                        } else {, +                            query = currentMapper.prefixQuery(termStr, multiTermRewriteMethod, parseContext);, +                    }, +                    if (query == null) {, +                        query = super.getPrefixQuery(currentMapper.names().indexName(), termStr);, +                    }, +                    return wrapSmartNameQuery(query, fieldMappers, parseContext);]