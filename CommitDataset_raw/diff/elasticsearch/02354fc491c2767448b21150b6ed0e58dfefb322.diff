[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.*;, +import org.elasticsearch.transport.*;, +/**, + *, + */, +, +                        logger.warn("failed to send failed shard to {}", exp, masterNode);, +, +    private final ShardFailedClusterStateHandler shardFailedClusterStateHandler = new ShardFailedClusterStateHandler();, +, +    private void handleShardFailureOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.warn("{} received shard failed for {}", shardRoutingEntry.failure, shardRoutingEntry.shardRouting.shardId(), shardRoutingEntry);, +        clusterService.submitStateUpdateTask(, +                "shard-failed (" + shardRoutingEntry.shardRouting + "), message [" + shardRoutingEntry.message + "]",, +                shardRoutingEntry,, +                ClusterStateTaskConfig.build(Priority.HIGH),, +                shardFailedClusterStateHandler,, +                shardFailedClusterStateHandler);, +, +    class ShardFailedClusterStateHandler implements ClusterStateTaskExecutor<ShardRoutingEntry>, ClusterStateTaskListener {, +        @Override, +        public BatchResult<ShardRoutingEntry> execute(ClusterState currentState, List<ShardRoutingEntry> tasks) throws Exception {, +            BatchResult.Builder<ShardRoutingEntry> batchResultBuilder = BatchResult.builder();, +            List<FailedRerouteAllocation.FailedShard> shardRoutingsToBeApplied = new ArrayList<>(tasks.size());, +            for (ShardRoutingEntry task : tasks) {, +                shardRoutingsToBeApplied.add(new FailedRerouteAllocation.FailedShard(task.shardRouting, task.message, task.failure));, +            }, +            ClusterState maybeUpdatedState = currentState;, +            try {, +                RoutingAllocation.Result result = allocationService.applyFailedShards(currentState, shardRoutingsToBeApplied);, +                if (result.changed()) {, +                    maybeUpdatedState = ClusterState.builder(currentState).routingResult(result).build();, +                }, +                batchResultBuilder.successes(tasks);, +            } catch (Throwable t) {, +                batchResultBuilder.failures(tasks, t);, +            }, +            return batchResultBuilder.build(maybeUpdatedState);, +        }, +, +        @Override, +        public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {, +                if (oldState != newState && newState.getRoutingNodes().unassigned().size() > 0) {, +                    logger.trace("unassigned shards after shard failures. scheduling a reroute.");, +                    routingService.reroute("unassigned shards after shard failures, scheduling a reroute");, +                }, +        }, +, +        @Override, +        public void onFailure(String source, Throwable t) {, +            logger.error("unexpected failure during [{}]", t, source);, +        }, +    }, +, +    private final ShardStartedClusterStateHandler shardStartedClusterStateHandler =, +            new ShardStartedClusterStateHandler();, +, +    private void shardStartedOnMaster(final ShardRoutingEntry shardRoutingEntry) {, +        logger.debug("received shard started for {}", shardRoutingEntry);, +, +        clusterService.submitStateUpdateTask(, +                "shard-started (" + shardRoutingEntry.shardRouting + "), reason [" + shardRoutingEntry.message + "]",, +                shardRoutingEntry,, +                ClusterStateTaskConfig.build(Priority.URGENT),, +                shardStartedClusterStateHandler,, +                shardStartedClusterStateHandler);, +    private class ShardFailedTransportHandler implements TransportRequestHandler<ShardRoutingEntry> {, +        @Override, +        public void messageReceived(ShardRoutingEntry request, TransportChannel channel) throws Exception {, +            handleShardFailureOnMaster(request);, +            channel.sendResponse(TransportResponse.Empty.INSTANCE);, +        }, +    }, +    class ShardStartedTransportHandler implements TransportRequestHandler<ShardRoutingEntry> {, +, +        @Override, +        public void messageReceived(ShardRoutingEntry request, TransportChannel channel) throws Exception {, +            shardStartedOnMaster(request);, +            channel.sendResponse(TransportResponse.Empty.INSTANCE);, +        }, +, +        default void onSuccess() {}, +        default void onShardFailedNoMaster() {}, +        default void onShardFailedFailure(final DiscoveryNode master, final TransportException e) {}, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                logger.trace("Retrying operation on replica, action [{}], request [{}]", t, actionName, request);, +                        threadPool.executor(executor).execute(AsyncReplicaAction.this);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.cluster.*;, +import org.elasticsearch.transport.*;, +/**, + *, + */]