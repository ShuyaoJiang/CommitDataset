[+++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedSupplier;, +, +    /**, +     * Completes the given listener with the result from the provided supplier accordingly., +     * This method is mainly used to complete a listener with a block of synchronous code., +     */, +    static <Response> void completeWith(ActionListener<Response> listener, CheckedSupplier<Response, ? extends Exception> supplier) {, +        try {, +            listener.onResponse(supplier.get());, +        } catch (Exception e) {, +            listener.onFailure(e);, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedSupplier;, +, +    /**, +     * Completes the given listener with the result from the provided supplier accordingly., +     * This method is mainly used to complete a listener with a block of synchronous code., +     */, +    static <Response> void completeWith(ActionListener<Response> listener, CheckedSupplier<Response, ? extends Exception> supplier) {, +        try {, +            listener.onResponse(supplier.get());, +        } catch (Exception e) {, +            listener.onFailure(e);, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/ActionListenerResponseHandler.java, +    private final String executor;, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Writeable.Reader<Response> reader, String executor) {, +        this.executor = Objects.requireNonNull(executor);, +    }, +, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Writeable.Reader<Response> reader) {, +        this(listener, reader, ThreadPool.Names.SAME);, +        return executor;, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedSupplier;, +, +    /**, +     * Completes the given listener with the result from the provided supplier accordingly., +     * This method is mainly used to complete a listener with a block of synchronous code., +     */, +    static <Response> void completeWith(ActionListener<Response> listener, CheckedSupplier<Response, ? extends Exception> supplier) {, +        try {, +            listener.onResponse(supplier.get());, +        } catch (Exception e) {, +            listener.onFailure(e);, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/ActionListenerResponseHandler.java, +    private final String executor;, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Writeable.Reader<Response> reader, String executor) {, +        this.executor = Objects.requireNonNull(executor);, +    }, +, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Writeable.Reader<Response> reader) {, +        this(listener, reader, ThreadPool.Names.SAME);, +        return executor;, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +            try (RecoveryRef recoveryRef = onGoingRecoveries.getRecoverySafe(request.recoveryId(), request.shardId())) {, +                final ActionListener<TransportResponse> listener =, +                    new HandledTransportAction.ChannelActionListener<>(channel, Actions.FINALIZE, request);, +                recoveryRef.target().finalizeRecovery(request.globalCheckpoint(),, +                    ActionListener.wrap(nullVal -> listener.onResponse(TransportResponse.Empty.INSTANCE), listener::onFailure));, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +import org.elasticsearch.common.CheckedSupplier;, +, +    /**, +     * Completes the given listener with the result from the provided supplier accordingly., +     * This method is mainly used to complete a listener with a block of synchronous code., +     */, +    static <Response> void completeWith(ActionListener<Response> listener, CheckedSupplier<Response, ? extends Exception> supplier) {, +        try {, +            listener.onResponse(supplier.get());, +        } catch (Exception e) {, +            listener.onFailure(e);, +        }, +    }, +++ b/server/src/main/java/org/elasticsearch/action/ActionListenerResponseHandler.java, +    private final String executor;, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Writeable.Reader<Response> reader, String executor) {, +        this.executor = Objects.requireNonNull(executor);, +    }, +, +    public ActionListenerResponseHandler(ActionListener<? super Response> listener, Writeable.Reader<Response> reader) {, +        this(listener, reader, ThreadPool.Names.SAME);, +        return executor;, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java, +            try (RecoveryRef recoveryRef = onGoingRecoveries.getRecoverySafe(request.recoveryId(), request.shardId())) {, +                final ActionListener<TransportResponse> listener =, +                    new HandledTransportAction.ChannelActionListener<>(channel, Actions.FINALIZE, request);, +                recoveryRef.target().finalizeRecovery(request.globalCheckpoint(),, +                    ActionListener.wrap(nullVal -> listener.onResponse(TransportResponse.Empty.INSTANCE), listener::onFailure));, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +import org.elasticsearch.action.StepListener;, +import java.util.function.Consumer;, +            final Consumer<Exception> onFailure = e ->, +                IOUtils.closeWhileHandlingException(releaseResources, () -> wrappedListener.onFailure(e));]