[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +                    builder.field("open_time", openTime.getStringRep());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +                    builder.field("open_time", openTime.getStringRep());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/ChunkingConfig.java, +import org.elasticsearch.common.unit.TimeValue;, +            "chunking_config", a -> new ChunkingConfig((Mode) a[0], (TimeValue) a[1]));, +        PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {, +            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {, +                return TimeValue.parseTimeValue(p.text(), TIME_SPAN_FIELD.getPreferredName());, +            }, +            throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]");, +        }, TIME_SPAN_FIELD, ValueType.STRING);, +    private final TimeValue timeSpan;, +        timeSpan = in.readOptionalWriteable(TimeValue::new);, +        out.writeOptionalWriteable(timeSpan);, +    ChunkingConfig(Mode mode, @Nullable TimeValue timeSpan) {, +            if (timeSpan.getMillis() <= 0) {, +    public TimeValue getTimeSpan() {, +            builder.field(TIME_SPAN_FIELD.getPreferredName(), timeSpan.getStringRep());, +    public static ChunkingConfig newManual(TimeValue timeSpan) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +                    builder.field("open_time", openTime.getStringRep());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/ChunkingConfig.java, +import org.elasticsearch.common.unit.TimeValue;, +            "chunking_config", a -> new ChunkingConfig((Mode) a[0], (TimeValue) a[1]));, +        PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {, +            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {, +                return TimeValue.parseTimeValue(p.text(), TIME_SPAN_FIELD.getPreferredName());, +            }, +            throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]");, +        }, TIME_SPAN_FIELD, ValueType.STRING);, +    private final TimeValue timeSpan;, +        timeSpan = in.readOptionalWriteable(TimeValue::new);, +        out.writeOptionalWriteable(timeSpan);, +    ChunkingConfig(Mode mode, @Nullable TimeValue timeSpan) {, +            if (timeSpan.getMillis() <= 0) {, +    public TimeValue getTimeSpan() {, +            builder.field(TIME_SPAN_FIELD.getPreferredName(), timeSpan.getStringRep());, +    public static ChunkingConfig newManual(TimeValue timeSpan) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/chunked/ChunkedDataExtractor.java, +            chunkSpan = context.chunkSpan == null ? dataSummary.estimateChunk() : context.chunkSpan.getMillis();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +                    builder.field("open_time", openTime.getStringRep());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/ChunkingConfig.java, +import org.elasticsearch.common.unit.TimeValue;, +            "chunking_config", a -> new ChunkingConfig((Mode) a[0], (TimeValue) a[1]));, +        PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {, +            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {, +                return TimeValue.parseTimeValue(p.text(), TIME_SPAN_FIELD.getPreferredName());, +            }, +            throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]");, +        }, TIME_SPAN_FIELD, ValueType.STRING);, +    private final TimeValue timeSpan;, +        timeSpan = in.readOptionalWriteable(TimeValue::new);, +        out.writeOptionalWriteable(timeSpan);, +    ChunkingConfig(Mode mode, @Nullable TimeValue timeSpan) {, +            if (timeSpan.getMillis() <= 0) {, +    public TimeValue getTimeSpan() {, +            builder.field(TIME_SPAN_FIELD.getPreferredName(), timeSpan.getStringRep());, +    public static ChunkingConfig newManual(TimeValue timeSpan) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/chunked/ChunkedDataExtractor.java, +            chunkSpan = context.chunkSpan == null ? dataSummary.estimateChunk() : context.chunkSpan.getMillis();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/chunked/ChunkedDataExtractorContext.java, +import org.elasticsearch.common.unit.TimeValue;, +    final TimeValue chunkSpan;, +                                QueryBuilder query, int scrollSize, long start, long end, @Nullable TimeValue chunkSpan) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +                    builder.field("open_time", openTime.getStringRep());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/ChunkingConfig.java, +import org.elasticsearch.common.unit.TimeValue;, +            "chunking_config", a -> new ChunkingConfig((Mode) a[0], (TimeValue) a[1]));, +        PARSER.declareField(ConstructingObjectParser.optionalConstructorArg(), p -> {, +            if (p.currentToken() == XContentParser.Token.VALUE_STRING) {, +                return TimeValue.parseTimeValue(p.text(), TIME_SPAN_FIELD.getPreferredName());, +            }, +            throw new IllegalArgumentException("Unsupported token [" + p.currentToken() + "]");, +        }, TIME_SPAN_FIELD, ValueType.STRING);, +    private final TimeValue timeSpan;, +        timeSpan = in.readOptionalWriteable(TimeValue::new);, +        out.writeOptionalWriteable(timeSpan);, +    ChunkingConfig(Mode mode, @Nullable TimeValue timeSpan) {, +            if (timeSpan.getMillis() <= 0) {, +    public TimeValue getTimeSpan() {, +            builder.field(TIME_SPAN_FIELD.getPreferredName(), timeSpan.getStringRep());, +    public static ChunkingConfig newManual(TimeValue timeSpan) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/chunked/ChunkedDataExtractor.java, +            chunkSpan = context.chunkSpan == null ? dataSummary.estimateChunk() : context.chunkSpan.getMillis();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/chunked/ChunkedDataExtractorContext.java, +import org.elasticsearch.common.unit.TimeValue;, +    final TimeValue chunkSpan;, +                                QueryBuilder query, int scrollSize, long start, long end, @Nullable TimeValue chunkSpan) {, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/ChunkingConfigTests.java, +import org.elasticsearch.common.unit.TimeValue;, +        expectThrows(IllegalArgumentException.class, () ->new ChunkingConfig(ChunkingConfig.Mode.AUTO, TimeValue.timeValueMillis(1000)));, +        expectThrows(IllegalArgumentException.class, () ->new ChunkingConfig(ChunkingConfig.Mode.OFF, TimeValue.timeValueMillis(1000)));, +        assertThat(ChunkingConfig.newManual(TimeValue.timeValueMillis(1000)).isEnabled(), is(true));, +        TimeValue timeSpan = null;, +            timeSpan = TimeValue.parseTimeValue(randomPositiveTimeValue(), "test");, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java]