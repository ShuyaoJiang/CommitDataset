[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::field, FIELDNAME_FIELD);, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::analyzer, ANALYZER_FIELD);, +        TLP_PARSER.declareInt(CompletionSuggestionBuilder.InnerBuilder::size, SIZE_FIELD);, +        TLP_PARSER.declareInt(CompletionSuggestionBuilder.InnerBuilder::shardSize, SHARDSIZE_FIELD);, +                "the required field option [" + FIELDNAME_FIELD.getPreferredName() + "] is missing");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::field, FIELDNAME_FIELD);, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::analyzer, ANALYZER_FIELD);, +        TLP_PARSER.declareInt(CompletionSuggestionBuilder.InnerBuilder::size, SIZE_FIELD);, +        TLP_PARSER.declareInt(CompletionSuggestionBuilder.InnerBuilder::shardSize, SHARDSIZE_FIELD);, +                "the required field option [" + FIELDNAME_FIELD.getPreferredName() + "] is missing");, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +        analyze(preFilter, term, field, new TokenConsumer() {, +            analyze(postFilter, candidate.term, field, new TokenConsumer() {, +    public abstract static class TokenConsumer {, +        protected CharTermAttribute charTermAttr;, +        protected PositionIncrementAttribute posIncAttr;, +        protected OffsetAttribute offsetAttr;, +, +        public void reset(TokenStream stream) {, +            charTermAttr = stream.addAttribute(CharTermAttribute.class);, +            posIncAttr = stream.addAttribute(PositionIncrementAttribute.class);, +            offsetAttr = stream.addAttribute(OffsetAttribute.class);, +        }, +, +        protected BytesRef fillBytesRef(BytesRefBuilder spare) {, +            spare.copyChars(charTermAttr);, +            return spare.get();, +        }, +, +        public abstract void nextToken() throws IOException;, +, +        public void end() {}, +    }, +, +    public static int analyze(Analyzer analyzer, BytesRef toAnalyze, String field, TokenConsumer consumer, CharsRefBuilder spare), +            throws IOException {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::field, FIELDNAME_FIELD);, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::analyzer, ANALYZER_FIELD);, +        TLP_PARSER.declareInt(CompletionSuggestionBuilder.InnerBuilder::size, SIZE_FIELD);, +        TLP_PARSER.declareInt(CompletionSuggestionBuilder.InnerBuilder::shardSize, SHARDSIZE_FIELD);, +                "the required field option [" + FIELDNAME_FIELD.getPreferredName() + "] is missing");, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;, +import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;, +import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;, +        analyze(preFilter, term, field, new TokenConsumer() {, +            analyze(postFilter, candidate.term, field, new TokenConsumer() {, +    public abstract static class TokenConsumer {, +        protected CharTermAttribute charTermAttr;, +        protected PositionIncrementAttribute posIncAttr;, +        protected OffsetAttribute offsetAttr;, +, +        public void reset(TokenStream stream) {, +            charTermAttr = stream.addAttribute(CharTermAttribute.class);, +            posIncAttr = stream.addAttribute(PositionIncrementAttribute.class);, +            offsetAttr = stream.addAttribute(OffsetAttribute.class);, +        }, +, +        protected BytesRef fillBytesRef(BytesRefBuilder spare) {, +            spare.copyChars(charTermAttr);, +            return spare.get();, +        }, +, +        public abstract void nextToken() throws IOException;, +, +        public void end() {}, +    }, +, +    public static int analyze(Analyzer analyzer, BytesRef toAnalyze, String field, TokenConsumer consumer, CharsRefBuilder spare), +            throws IOException {, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGeneratorBuilder.java, +    public static final ParseField DIRECT_GENERATOR_FIELD = new ParseField(TYPE);, +    public static final ParseField FIELDNAME_FIELD = new ParseField("field");, +    public static final ParseField PREFILTER_FIELD = new ParseField("pre_filter");, +    public static final ParseField POSTFILTER_FIELD = new ParseField("post_filter");, +    public static final ParseField SUGGESTMODE_FIELD = new ParseField("suggest_mode");, +    public static final ParseField MIN_DOC_FREQ_FIELD = new ParseField("min_doc_freq");, +    public static final ParseField ACCURACY_FIELD = new ParseField("accuracy");, +    public static final ParseField SIZE_FIELD = new ParseField("size");, +    public static final ParseField SORT_FIELD = new ParseField("sort");, +    public static final ParseField STRING_DISTANCE_FIELD = new ParseField("string_distance");, +    public static final ParseField MAX_EDITS_FIELD = new ParseField("max_edits");, +    public static final ParseField MAX_INSPECTIONS_FIELD = new ParseField("max_inspections");, +    public static final ParseField MAX_TERM_FREQ_FIELD = new ParseField("max_term_freq");, +    public static final ParseField PREFIX_LENGTH_FIELD = new ParseField("prefix_length");, +    public static final ParseField MIN_WORD_LENGTH_FIELD = new ParseField("min_word_length");, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggestionBuilder.java, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::field, FIELDNAME_FIELD);, +        TLP_PARSER.declareString(CompletionSuggestionBuilder.InnerBuilder::analyzer, ANALYZER_FIELD);]