[+++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        ThreadPool threadPool = new ThreadPool();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        ThreadPool threadPool = new ThreadPool();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadIndexingStress.java, +//            client1.admin().cluster().preparePingSingle("test", "type1", Integer.toString(i)).execute().actionGet();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        ThreadPool threadPool = new ThreadPool();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadIndexingStress.java, +//            client1.admin().cluster().preparePingSingle("test", "type1", Integer.toString(i)).execute().actionGet();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool();, +            @Override public String executor() {, +                return ThreadPool.Names.CACHED;, +            @Override public void messageReceived(BenchmarkMessage request, TransportChannel channel) throws Exception {, +                channel.sendResponse(request);, +                            @Override public String executor() {, +                                return ThreadPool.Names.SAME;, +                            }, +, +                        @Override public String executor() {, +                            return ThreadPool.Names.SAME;, +                        }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        ThreadPool threadPool = new ThreadPool();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadIndexingStress.java, +//            client1.admin().cluster().preparePingSingle("test", "type1", Integer.toString(i)).execute().actionGet();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool();, +            @Override public String executor() {, +                return ThreadPool.Names.CACHED;, +            @Override public void messageReceived(BenchmarkMessage request, TransportChannel channel) throws Exception {, +                channel.sendResponse(request);, +                            @Override public String executor() {, +                                return ThreadPool.Names.SAME;, +                            }, +, +                        @Override public String executor() {, +                            return ThreadPool.Names.SAME;, +                        }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final String executor = ThreadPool.Names.CACHED;, +        final ThreadPool serverThreadPool = new ThreadPool();, +        final ThreadPool clientThreadPool = new ThreadPool();, +            @Override public String executor() {, +                return executor;, +            @Override public void messageReceived(BenchmarkMessage request, TransportChannel channel) throws Exception {, +                channel.sendResponse(request);, +                @Override public String executor() {, +                    return ThreadPool.Names.SAME;, +                }, +, +                            @Override public String executor() {, +                                return executor;, +                            }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        ThreadPool threadPool = new ThreadPool();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadIndexingStress.java, +//            client1.admin().cluster().preparePingSingle("test", "type1", Integer.toString(i)).execute().actionGet();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool();, +            @Override public String executor() {, +                return ThreadPool.Names.CACHED;, +            @Override public void messageReceived(BenchmarkMessage request, TransportChannel channel) throws Exception {, +                channel.sendResponse(request);, +                            @Override public String executor() {, +                                return ThreadPool.Names.SAME;, +                            }, +, +                        @Override public String executor() {, +                            return ThreadPool.Names.SAME;, +                        }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final String executor = ThreadPool.Names.CACHED;, +        final ThreadPool serverThreadPool = new ThreadPool();, +        final ThreadPool clientThreadPool = new ThreadPool();, +            @Override public String executor() {, +                return executor;, +            @Override public void messageReceived(BenchmarkMessage request, TransportChannel channel) throws Exception {, +                channel.sendResponse(request);, +                @Override public String executor() {, +                    return ThreadPool.Names.SAME;, +                }, +, +                            @Override public String executor() {, +                                return executor;, +                            }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +    @Override protected String executor() {, +        return ThreadPool.Names.CACHED;, +    }, +, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/index/engine/SimpleEngineBenchmark.java, +        ThreadPool threadPool = new ThreadPool();, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadIndexingStress.java]