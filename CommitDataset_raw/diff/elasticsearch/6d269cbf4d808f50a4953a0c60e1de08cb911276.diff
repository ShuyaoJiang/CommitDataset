[+++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/config/logging.yml, +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/config/logging.yml, +++ b/dev-tools/build_release.py, +verify_java_version('1.7') # we require to build with 1.7, +verify_mvn_java_version('1.7', MVN), +, +def check_s3_credentials():, +  if not env.get('AWS_ACCESS_KEY_ID', None) or not env.get('AWS_SECRET_ACCESS_KEY', None):, +    raise RuntimeError('Could not find "AWS_ACCESS_KEY_ID" / "AWS_SECRET_ACCESS_KEY" in the env variables please export in order to upload to S3'), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +# we print a notice if we can not find the relevant infos in the ~/.m2/settings.xml, +print_sonatype_notice(), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  , +    check_s3_credentials(), +    check_command_exists('createrepo', 'createrepo --version'), +    check_command_exists('s3cmd', 's3cmd --version'), +    check_command_exists('apt-ftparchive', 'apt-ftparchive --version'), +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/config/logging.yml, +++ b/dev-tools/build_release.py, +verify_java_version('1.7') # we require to build with 1.7, +verify_mvn_java_version('1.7', MVN), +, +def check_s3_credentials():, +  if not env.get('AWS_ACCESS_KEY_ID', None) or not env.get('AWS_SECRET_ACCESS_KEY', None):, +    raise RuntimeError('Could not find "AWS_ACCESS_KEY_ID" / "AWS_SECRET_ACCESS_KEY" in the env variables please export in order to upload to S3'), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +# we print a notice if we can not find the relevant infos in the ~/.m2/settings.xml, +print_sonatype_notice(), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  , +    check_s3_credentials(), +    check_command_exists('createrepo', 'createrepo --version'), +    check_command_exists('s3cmd', 's3cmd --version'), +    check_command_exists('apt-ftparchive', 'apt-ftparchive --version'), +++ b/docs/community/integrations.asciidoc, +  Thin asynchronous scala client for storehaus., +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/config/logging.yml, +++ b/dev-tools/build_release.py, +verify_java_version('1.7') # we require to build with 1.7, +verify_mvn_java_version('1.7', MVN), +, +def check_s3_credentials():, +  if not env.get('AWS_ACCESS_KEY_ID', None) or not env.get('AWS_SECRET_ACCESS_KEY', None):, +    raise RuntimeError('Could not find "AWS_ACCESS_KEY_ID" / "AWS_SECRET_ACCESS_KEY" in the env variables please export in order to upload to S3'), +, +def check_gpg_credentials():, +  if not env.get('GPG_KEY_ID', None) or not env.get('GPG_PASSPHRASE', None):, +    raise RuntimeError('Could not find "GPG_KEY_ID" / "GPG_PASSPHRASE" in the env variables please export in order to sign the packages (also make sure that GPG_KEYRING is set when not in ~/.gnupg)'), +, +# we print a notice if we can not find the relevant infos in the ~/.m2/settings.xml, +print_sonatype_notice(), +, +  check_gpg_credentials(), +  check_command_exists('gpg', 'gpg --version'), +  check_command_exists('expect', 'expect -v'), +  , +    check_s3_credentials(), +    check_command_exists('createrepo', 'createrepo --version'), +    check_command_exists('s3cmd', 's3cmd --version'), +    check_command_exists('apt-ftparchive', 'apt-ftparchive --version'), +++ b/docs/community/integrations.asciidoc, +  Thin asynchronous scala client for storehaus., +++ b/docs/groovy-api/anatomy.asciidoc, +    pritnln "Indexed $response.id into $response.index/$response.type", +++ b/bin/elasticsearch, +IS_PACKAGED_VERSION='${project.name}', +++ b/config/logging.yml, +++ b/dev-tools/build_release.py, +verify_java_version('1.7') # we require to build with 1.7, +verify_mvn_java_version('1.7', MVN), +, +def check_s3_credentials():, +  if not env.get('AWS_ACCESS_KEY_ID', None) or not env.get('AWS_SECRET_ACCESS_KEY', None):, +    raise RuntimeError('Could not find "AWS_ACCESS_KEY_ID" / "AWS_SECRET_ACCESS_KEY" in the env variables please export in order to upload to S3'), +]