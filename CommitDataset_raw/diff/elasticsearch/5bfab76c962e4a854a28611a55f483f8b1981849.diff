[+++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        // we initialize the status logger immediately otherwise Log4j will complain when we try to get the context, +        final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();, +        builder.setStatusLevel(Level.ERROR);, +        Configurator.initialize(builder.build());, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        // we initialize the status logger immediately otherwise Log4j will complain when we try to get the context, +        final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();, +        builder.setStatusLevel(Level.ERROR);, +        Configurator.initialize(builder.build());, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        // we initialize the status logger immediately otherwise Log4j will complain when we try to get the context, +        final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();, +        builder.setStatusLevel(Level.ERROR);, +        Configurator.initialize(builder.build());, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +            return parser.numberValue();, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        // we initialize the status logger immediately otherwise Log4j will complain when we try to get the context, +        final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();, +        builder.setStatusLevel(Level.ERROR);, +        Configurator.initialize(builder.build());, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +            return parser.numberValue();, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeAction.java, +        public static final ParseField TOKEN_FILTERS = new ParseField("filter", "token_filter");, +        for (String filter : request.paramAsStringArray("filter", request.paramAsStringArray("token_filter", Strings.EMPTY_ARRAY))) {, +                                        + " array element should contain token_filter's name or setting");, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        // we initialize the status logger immediately otherwise Log4j will complain when we try to get the context, +        final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();, +        builder.setStatusLevel(Level.ERROR);, +        Configurator.initialize(builder.build());, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +            return parser.numberValue();, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeAction.java, +        public static final ParseField TOKEN_FILTERS = new ParseField("filter", "token_filter");, +        for (String filter : request.paramAsStringArray("filter", request.paramAsStringArray("token_filter", Strings.EMPTY_ARRAY))) {, +                                        + " array element should contain token_filter's name or setting");, +++ b/core/src/test/java/org/elasticsearch/common/xcontent/BaseXContentTestCase.java, +import com.fasterxml.jackson.core.JsonGenerator;, +, +import org.elasticsearch.common.bytes.BytesReference;, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.util.Map;, +, +    protected void doTestBigInteger(JsonGenerator generator, ByteArrayOutputStream os) throws Exception {, +        // Big integers cannot be handled explicitly, but if some values happen to be big ints,, +        // we can still call parser.map() and get the bigint value so that eg. source filtering, +        // keeps working, +        BigInteger bigInteger = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);, +        generator.writeStartObject();, +        generator.writeFieldName("foo");, +        generator.writeString("bar");, +        generator.writeFieldName("bigint");, +        generator.writeNumber(bigInteger);, +        generator.writeEndObject();, +        generator.flush();, +        byte[] serialized = os.toByteArray();, +, +        XContentParser parser = xcontentType().xContent().createParser(serialized);, +        Map<String, Object> map = parser.map();, +        assertEquals("bar", map.get("foo"));, +        assertEquals(bigInteger, map.get("bigint"));, +    }, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        // we initialize the status logger immediately otherwise Log4j will complain when we try to get the context, +        final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();, +        builder.setStatusLevel(Level.ERROR);, +        Configurator.initialize(builder.build());, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/Loggers.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java, +            return parser.numberValue();, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/RestAnalyzeAction.java, +        public static final ParseField TOKEN_FILTERS = new ParseField("filter", "token_filter");, +        for (String filter : request.paramAsStringArray("filter", request.paramAsStringArray("token_filter", Strings.EMPTY_ARRAY))) {, +                                        + " array element should contain token_filter's name or setting");, +++ b/core/src/test/java/org/elasticsearch/common/xcontent/BaseXContentTestCase.java, +import com.fasterxml.jackson.core.JsonGenerator;, +, +import org.elasticsearch.common.bytes.BytesReference;, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.util.Map;, +, +    protected void doTestBigInteger(JsonGenerator generator, ByteArrayOutputStream os) throws Exception {, +        // Big integers cannot be handled explicitly, but if some values happen to be big ints,, +        // we can still call parser.map() and get the bigint value so that eg. source filtering, +        // keeps working]