[+++ b/core/src/main/java/org/elasticsearch/index/fielddata/UidIndexFieldData.java, +public final class UidIndexFieldData implements IndexFieldData<AtomicFieldData> {, +    private final IndexFieldData<?> idFieldData;, +    public UidIndexFieldData(Index index, String type, IndexFieldData<?> idFieldData) {, +    public AtomicFieldData load(LeafReaderContext context) {, +    public AtomicFieldData loadDirect(LeafReaderContext context) throws Exception {, +    static final class UidAtomicFieldData implements AtomicFieldData {, +        private final AtomicFieldData idFieldData;, +        UidAtomicFieldData(BytesRef prefix, AtomicFieldData idFieldData) {, +            return new ScriptDocValues.Strings(getBytesValues());, +        public SortedBinaryDocValues getBytesValues() {, +            SortedBinaryDocValues idValues = idFieldData.getBytesValues();, +            return new SortedBinaryDocValues() {, +                public boolean advanceExact(int doc) throws IOException {, +                    return idValues.advanceExact(doc);, +                public int docValueCount() {, +                    return idValues.docValueCount();, +                public BytesRef nextValue() throws IOException {, +                    BytesRef nextID = idValues.nextValue();, +                    scratch.copyBytes(prefix);, +                    scratch.append(nextID);, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/UidIndexFieldData.java, +public final class UidIndexFieldData implements IndexFieldData<AtomicFieldData> {, +    private final IndexFieldData<?> idFieldData;, +    public UidIndexFieldData(Index index, String type, IndexFieldData<?> idFieldData) {, +    public AtomicFieldData load(LeafReaderContext context) {, +    public AtomicFieldData loadDirect(LeafReaderContext context) throws Exception {, +    static final class UidAtomicFieldData implements AtomicFieldData {, +        private final AtomicFieldData idFieldData;, +        UidAtomicFieldData(BytesRef prefix, AtomicFieldData idFieldData) {, +            return new ScriptDocValues.Strings(getBytesValues());, +        public SortedBinaryDocValues getBytesValues() {, +            SortedBinaryDocValues idValues = idFieldData.getBytesValues();, +            return new SortedBinaryDocValues() {, +                public boolean advanceExact(int doc) throws IOException {, +                    return idValues.advanceExact(doc);, +                public int docValueCount() {, +                    return idValues.docValueCount();, +                public BytesRef nextValue() throws IOException {, +                    BytesRef nextID = idValues.nextValue();, +                    scratch.copyBytes(prefix);, +                    scratch.append(nextID);, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +        } else if (IdFieldMapper.NAME.equals(fieldInfo.name)) {, +            id = Uid.decodeId(value);, +            // 5.x-only, +            // TODO: Remove when we are on 7.x, +            // only applies to 5.x indices that have single_type = true, +            // TODO: Remove when we are on 7.x, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/UidIndexFieldData.java, +public final class UidIndexFieldData implements IndexFieldData<AtomicFieldData> {, +    private final IndexFieldData<?> idFieldData;, +    public UidIndexFieldData(Index index, String type, IndexFieldData<?> idFieldData) {, +    public AtomicFieldData load(LeafReaderContext context) {, +    public AtomicFieldData loadDirect(LeafReaderContext context) throws Exception {, +    static final class UidAtomicFieldData implements AtomicFieldData {, +        private final AtomicFieldData idFieldData;, +        UidAtomicFieldData(BytesRef prefix, AtomicFieldData idFieldData) {, +            return new ScriptDocValues.Strings(getBytesValues());, +        public SortedBinaryDocValues getBytesValues() {, +            SortedBinaryDocValues idValues = idFieldData.getBytesValues();, +            return new SortedBinaryDocValues() {, +                public boolean advanceExact(int doc) throws IOException {, +                    return idValues.advanceExact(doc);, +                public int docValueCount() {, +                    return idValues.docValueCount();, +                public BytesRef nextValue() throws IOException {, +                    BytesRef nextID = idValues.nextValue();, +                    scratch.copyBytes(prefix);, +                    scratch.append(nextID);, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +        } else if (IdFieldMapper.NAME.equals(fieldInfo.name)) {, +            id = Uid.decodeId(value);, +            // 5.x-only, +            // TODO: Remove when we are on 7.x, +            // only applies to 5.x indices that have single_type = true, +            // TODO: Remove when we are on 7.x, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                if (idField.stringValue() != null) {, +                    // backward compat with 5.x, +                    // TODO: Remove on 7.0, +                    nestedDoc.add(new Field(IdFieldMapper.NAME, idField.binaryValue(), IdFieldMapper.Defaults.NESTED_FIELD_TYPE));, +                }, +            } else {, +++ b/core/src/main/java/org/elasticsearch/index/fielddata/UidIndexFieldData.java, +public final class UidIndexFieldData implements IndexFieldData<AtomicFieldData> {, +    private final IndexFieldData<?> idFieldData;, +    public UidIndexFieldData(Index index, String type, IndexFieldData<?> idFieldData) {, +    public AtomicFieldData load(LeafReaderContext context) {, +    public AtomicFieldData loadDirect(LeafReaderContext context) throws Exception {, +    static final class UidAtomicFieldData implements AtomicFieldData {, +        private final AtomicFieldData idFieldData;, +        UidAtomicFieldData(BytesRef prefix, AtomicFieldData idFieldData) {, +            return new ScriptDocValues.Strings(getBytesValues());, +        public SortedBinaryDocValues getBytesValues() {, +            SortedBinaryDocValues idValues = idFieldData.getBytesValues();, +            return new SortedBinaryDocValues() {, +                public boolean advanceExact(int doc) throws IOException {, +                    return idValues.advanceExact(doc);, +                public int docValueCount() {]