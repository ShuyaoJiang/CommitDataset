[+++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java, +            return "shingle";, +    public FieldMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {, +        SearchAsYouTypeFieldMapper fieldMapper = (SearchAsYouTypeFieldMapper) super.updateFieldType(fullNameToFieldType);, +        fieldMapper.prefixField = (PrefixFieldMapper) fieldMapper.prefixField.updateFieldType(fullNameToFieldType);, +        for (int i = 0; i < fieldMapper.shingleFields.length; i++) {, +            fieldMapper.shingleFields[i] = (ShingleFieldMapper) fieldMapper.shingleFields[i].updateFieldType(fullNameToFieldType);, +        }, +        return fieldMapper;, +    }, +, +    @Override, +            throw new IllegalArgumentException("mapper [" + name() + "] has different [max_shingle_size] setting, current [", +        this.prefixField = (PrefixFieldMapper) this.prefixField.merge(mw.prefixField);, +++ b/modules/mapper-extras/src/main/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapper.java, +            return "shingle";, +    public FieldMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldType) {, +        SearchAsYouTypeFieldMapper fieldMapper = (SearchAsYouTypeFieldMapper) super.updateFieldType(fullNameToFieldType);, +        fieldMapper.prefixField = (PrefixFieldMapper) fieldMapper.prefixField.updateFieldType(fullNameToFieldType);, +        for (int i = 0; i < fieldMapper.shingleFields.length; i++) {, +            fieldMapper.shingleFields[i] = (ShingleFieldMapper) fieldMapper.shingleFields[i].updateFieldType(fullNameToFieldType);, +        }, +        return fieldMapper;, +    }, +, +    @Override, +            throw new IllegalArgumentException("mapper [" + name() + "] has different [max_shingle_size] setting, current [", +        this.prefixField = (PrefixFieldMapper) this.prefixField.merge(mw.prefixField);, +++ b/modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldMapperTests.java, +import static org.hamcrest.Matchers.containsString;, +    public void testSimpleMerge() throws IOException {, +        MapperService mapperService = createIndex("test").mapperService();, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc"), +                    .startObject("properties"), +                        .startObject("a_field"), +                            .field("type", "search_as_you_type"), +                            .field("analyzer", "standard"), +                        .endObject(), +                    .endObject(), +                .endObject().endObject());, +            DocumentMapper mapper = mapperService.merge("_doc",, +                new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);, +        }, +, +        {, +           String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc"), +                    .startObject("properties"), +                        .startObject("a_field"), +                            .field("type", "search_as_you_type"), +                            .field("analyzer", "standard"), +                        .endObject(), +                        .startObject("b_field"), +                            .field("type", "text"), +                        .endObject(), +                    .endObject(), +                .endObject().endObject());, +            DocumentMapper mapper = mapperService.merge("_doc",, +                new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);, +        }, +, +        {, +            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject(), +                .startObject("_doc"), +                    .startObject("properties"), +                        .startObject("a_field"), +                            .field("type", "search_as_you_type"), +                            .field("analyzer", "standard"), +                            .field("max_shingle_size", "4"), +                        .endObject(), +                        .startObject("b_field"), +                            .field("type", "text"), +                        .endObject(), +                    .endObject(), +                .endObject().endObject());, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                () -> mapperService.merge("_doc",, +                    new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE));, +            assertThat(e.getMessage(), containsString("different [max_shingle_size]"));, +        }, +    }, +]