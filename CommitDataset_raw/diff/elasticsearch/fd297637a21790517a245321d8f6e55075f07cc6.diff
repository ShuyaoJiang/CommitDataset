[+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +     * Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without parameters and request body., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted, +     * @throws ClientProtocolException in case of an http protocol error, +     * @throws ResponseException in case elasticsearch responded with a status code that indicated an error, +     */, +    public Response performRequest(String method, String endpoint, Header... headers) throws IOException {, +        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), null, headers);, +    }, +, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +     * Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without request body., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param params the query_string parameters, +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted, +     * @throws ClientProtocolException in case of an http protocol error, +     * @throws ResponseException in case elasticsearch responded with a status code that indicated an error, +     */, +    public Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {, +        return performRequest(method, endpoint, params, null, headers);, +    }, +, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +     * Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without parameters and request body., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted, +     * @throws ClientProtocolException in case of an http protocol error, +     * @throws ResponseException in case elasticsearch responded with a status code that indicated an error, +     */, +    public Response performRequest(String method, String endpoint, Header... headers) throws IOException {, +        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), null, headers);, +    }, +, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +     * Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without request body., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param params the query_string parameters, +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted, +     * @throws ClientProtocolException in case of an http protocol error, +     * @throws ResponseException in case elasticsearch responded with a status code that indicated an error, +     */, +    public Response performRequest(String method, String endpoint, Map<String, String> params, Header... headers) throws IOException {, +        return performRequest(method, endpoint, params, null, headers);, +    }, +, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsTests.java, +                        Collections.<String, String>emptyMap())) {, +                try (Response response = restClient.performRequest(method, "/" + statusCode, Collections.<String, String>emptyMap())) {, +            restClient.performRequest(randomHttpMethod(getRandom()), retryEndpoint, Collections.<String, String>emptyMap());, +                    restClient.performRequest(randomHttpMethod(getRandom()), retryEndpoint, Collections.<String, String>emptyMap());, +                            Collections.<String, String>emptyMap())) {, +                        restClient.performRequest(randomHttpMethod(getRandom()), retryEndpoint, Collections.<String, String>emptyMap());, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +     * Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without parameters and request body., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted, +     * @throws ClientProtocolException in case of an http protocol error, +     * @throws ResponseException in case elasticsearch responded with a status code that indicated an error, +     */, +    public Response performRequest(String method, String endpoint, Header... headers) throws IOException {, +        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), null, headers);, +    }, +, +    /**, +     * Sends a request to the elasticsearch cluster that the current client points to., +     * Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without request body., +     *, +     * @param method the http method, +     * @param endpoint the path of the request (without host and port), +     * @param params the query_string parameters, +     * @param headers the optional request headers, +     * @return the response returned by elasticsearch, +     * @throws IOException in case of a problem or the connection was aborted]