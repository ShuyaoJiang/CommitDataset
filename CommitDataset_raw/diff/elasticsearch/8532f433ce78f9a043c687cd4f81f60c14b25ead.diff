[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/NodesShutdownRequest.java, +    boolean exit = true;, +, +    /**, +     * Should the JVM be exited as well or not. Defaults to <tt>true</tt>., +     */, +    public NodesShutdownRequest exit(boolean exit) {, +        this.exit = exit;, +        return this;, +    }, +, +    /**, +     * Should the JVM be exited as well or not. Defaults to <tt>true</tt>., +     */, +    public boolean exit() {, +        return exit;, +    }, +, +        exit = in.readBoolean();, +        out.writeBoolean(exit);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/NodesShutdownRequest.java, +    boolean exit = true;, +, +    /**, +     * Should the JVM be exited as well or not. Defaults to <tt>true</tt>., +     */, +    public NodesShutdownRequest exit(boolean exit) {, +        this.exit = exit;, +        return this;, +    }, +, +    /**, +     * Should the JVM be exited as well or not. Defaults to <tt>true</tt>., +     */, +    public boolean exit() {, +        return exit;, +    }, +, +        exit = in.readBoolean();, +        out.writeBoolean(exit);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportNodesShutdownAction.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.io.stream.Streamable;, +import org.elasticsearch.transport.BaseTransportRequestHandler;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportService;, +import org.elasticsearch.transport.VoidTransportResponseHandler;, +import java.io.IOException;, +                            transportService.sendRequest(node, NodeShutdownRequestHandler.ACTION, new NodeShutdownRequest(request.exit), new VoidTransportResponseHandler(ThreadPool.Names.SAME) {, +                    transportService.sendRequest(state.nodes().masterNode(), NodeShutdownRequestHandler.ACTION, new NodeShutdownRequest(request.exit), new VoidTransportResponseHandler(ThreadPool.Names.SAME) {, +                        transportService.sendRequest(node, NodeShutdownRequestHandler.ACTION, new NodeShutdownRequest(request.exit), new VoidTransportResponseHandler(ThreadPool.Names.SAME) {, +    private class NodeShutdownRequestHandler extends BaseTransportRequestHandler<NodeShutdownRequest> {, +        @Override public NodeShutdownRequest newInstance() {, +            return new NodeShutdownRequest();, +        @Override public void messageReceived(final NodeShutdownRequest request, TransportChannel channel) throws Exception {, +                    if (!request.exit) {, +                        logger.info("initiating requested shutdown (no exit)...");, +                        try {, +                            node.close();, +                        } catch (Exception e) {, +                            logger.warn("Failed to shutdown", e);, +                        }, +                        return;, +                    }, +, +    static class NodeShutdownRequest implements Streamable {, +, +        boolean exit;, +, +        NodeShutdownRequest() {, +        }, +, +        NodeShutdownRequest(boolean exit) {, +            this.exit = exit;, +        }, +, +        @Override public void readFrom(StreamInput in) throws IOException {, +            exit = in.readBoolean();, +        }, +, +        @Override public void writeTo(StreamOutput out) throws IOException {, +            out.writeBoolean(exit);, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/NodesShutdownRequest.java, +    boolean exit = true;, +, +    /**, +     * Should the JVM be exited as well or not. Defaults to <tt>true</tt>., +     */, +    public NodesShutdownRequest exit(boolean exit) {, +        this.exit = exit;, +        return this;, +    }, +, +    /**, +     * Should the JVM be exited as well or not. Defaults to <tt>true</tt>., +     */]