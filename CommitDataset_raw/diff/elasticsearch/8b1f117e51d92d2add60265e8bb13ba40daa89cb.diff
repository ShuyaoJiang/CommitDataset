[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKey());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKey());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java, +     * Simple upgrade test for streaming significant terms buckets, +, +        logClusterState();, +        boolean upgraded;, +        int upgradedNodesCounter = 1;, +        do {, +            logger.debug("testBucketStreaming: upgrading {}st node", upgradedNodesCounter++);, +            upgraded = backwardsCluster().upgradeOneNode();, +        } while (upgraded);, +        StringTerms classes = (StringTerms) response.getAggregations().get("class");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKey());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java, +     * Simple upgrade test for streaming significant terms buckets, +, +        logClusterState();, +        boolean upgraded;, +        int upgradedNodesCounter = 1;, +        do {, +            logger.debug("testBucketStreaming: upgrading {}st node", upgradedNodesCounter++);, +            upgraded = backwardsCluster().upgradeOneNode();, +        } while (upgraded);, +        StringTerms classes = (StringTerms) response.getAggregations().get("class");, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/significant/SignificanceHeuristicTests.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.lessThan;, +import static org.hamcrest.Matchers.lessThanOrEqualTo;, +, +, +            BytesRef term = new BytesRef("123.0");, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKey());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java, +     * Simple upgrade test for streaming significant terms buckets, +, +        logClusterState();, +        boolean upgraded;, +        int upgradedNodesCounter = 1;, +        do {, +            logger.debug("testBucketStreaming: upgrading {}st node", upgradedNodesCounter++);, +            upgraded = backwardsCluster().upgradeOneNode();, +        } while (upgraded);, +        StringTerms classes = (StringTerms) response.getAggregations().get("class");, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/significant/SignificanceHeuristicTests.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.greaterThan;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.lessThan;, +import static org.hamcrest.Matchers.lessThanOrEqualTo;, +, +, +            BytesRef term = new BytesRef("123.0");, +++ b/docs/plugins/ingest.asciidoc, +[[ingest]], +== Ingest Plugin, +, +=== Processors, +, +==== Mutate Processor, +, +The Mutate Processor applies functions on the structure of a document. The processor comes with a few, +functions to help achieve this., +, +The following are the supported configuration actions and how to use them., +, +===== Convert, +Convert a field's value to a different type, like turning a string to an integer., +If the field value is an array, all members will be converted., +, +The supported types include: `integer`, `float`, `string`, and `boolean`., +, +`boolean` will set a field to "true" if its string value does not match any of the following: "false", "0", "off", "no"., +, +[source,js], +--------------------------------------------------, +{, +  "mutate": {, +    "convert": {, +      "field1": "integer",, +      "field2": "float", +    }, +  }, +}]