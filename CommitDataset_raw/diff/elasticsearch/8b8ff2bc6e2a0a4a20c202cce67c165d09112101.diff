[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusRequest;, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusResponse;, +     * Get the status of index lifecycle management, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     *, +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     */, +    public LifecycleManagementStatusResponse lifecycleManagementStatus(LifecycleManagementStatusRequest request, RequestOptions options), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::lifecycleManagementStatus, options,, +            LifecycleManagementStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get the status of index lifecycle management, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     *, +     * @param request  the request, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void lifecycleManagementStatusAsync(LifecycleManagementStatusRequest request, RequestOptions options,, +                                               ActionListener<LifecycleManagementStatusResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::lifecycleManagementStatus, options,, +            LifecycleManagementStatusResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusRequest;, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusResponse;, +     * Get the status of index lifecycle management, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     *, +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     */, +    public LifecycleManagementStatusResponse lifecycleManagementStatus(LifecycleManagementStatusRequest request, RequestOptions options), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::lifecycleManagementStatus, options,, +            LifecycleManagementStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get the status of index lifecycle management, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     *, +     * @param request  the request, +     * @param options  the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void lifecycleManagementStatusAsync(LifecycleManagementStatusRequest request, RequestOptions options,, +                                               ActionListener<LifecycleManagementStatusResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, RequestConverters::lifecycleManagementStatus, options,, +            LifecycleManagementStatusResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusRequest;, +    static Request lifecycleManagementStatus(LifecycleManagementStatusRequest lifecycleManagementStatusRequest){, +        Request request = new Request(HttpGet.METHOD_NAME,, +            new EndpointBuilder(), +                .addPathPartAsIs("_ilm"), +                .addPathPartAsIs("status"), +            .build());, +        Params params = new Params(request);, +        params.withMasterTimeout(lifecycleManagementStatusRequest.masterNodeTimeout());, +        params.withTimeout(lifecycleManagementStatusRequest.timeout());, +        return request;, +    }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndexLifecycleClient.java, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusRequest;, +import org.elasticsearch.client.indexlifecycle.LifecycleManagementStatusResponse;, +     * Get the status of index lifecycle management, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     *, +     * @param request the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     */, +    public LifecycleManagementStatusResponse lifecycleManagementStatus(LifecycleManagementStatusRequest request, RequestOptions options), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, RequestConverters::lifecycleManagementStatus, options,, +            LifecycleManagementStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously get the status of index lifecycle management, +     * See <a href="https://fix-me-when-we-have-docs.com">, +     * the docs</a> for more., +     *, +     * @param request  the request]