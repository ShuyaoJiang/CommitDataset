[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.index.fielddata.plain.LongArrayIndexFieldData;, +                .put("long", new LongArrayIndexFieldData.Builder()), +        buildersByTypeAndFormat = MapBuilder.<Tuple<String, String>, IndexFieldData.Builder>newMapBuilder(), +                .put(Tuple.tuple("string", "concrete_bytes"), new ConcreteBytesRefIndexFieldData.Builder()), +                .put(Tuple.tuple("long", "array"), new LongArrayIndexFieldData.Builder()), +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldDataService.java, +import org.elasticsearch.index.fielddata.plain.LongArrayIndexFieldData;, +                .put("long", new LongArrayIndexFieldData.Builder()), +        buildersByTypeAndFormat = MapBuilder.<Tuple<String, String>, IndexFieldData.Builder>newMapBuilder(), +                .put(Tuple.tuple("string", "concrete_bytes"), new ConcreteBytesRefIndexFieldData.Builder()), +                .put(Tuple.tuple("long", "array"), new LongArrayIndexFieldData.Builder()), +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/LongArrayAtomicFieldData.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.fielddata.plain;, +, +import org.apache.lucene.util.FixedBitSet;, +import org.elasticsearch.common.RamUsage;, +import org.elasticsearch.index.fielddata.*;, +import org.elasticsearch.index.fielddata.ordinals.Ordinals;, +import org.elasticsearch.index.fielddata.util.DoubleArrayRef;, +import org.elasticsearch.index.fielddata.util.IntArrayRef;, +import org.elasticsearch.index.fielddata.util.LongArrayRef;, +import org.elasticsearch.index.fielddata.util.StringArrayRef;, +, +/**, + */, +public abstract class LongArrayAtomicFieldData implements AtomicNumericFieldData {, +, +    protected final long[] values;, +    private final int numDocs;, +, +    protected long size = -1;, +, +    public LongArrayAtomicFieldData(long[] values, int numDocs) {, +        this.values = values;, +        this.numDocs = numDocs;, +    }, +, +    @Override, +    public int getNumDocs() {, +        return numDocs;, +    }, +, +    public static class WithOrdinals extends LongArrayAtomicFieldData {, +, +        private final Ordinals ordinals;, +, +        public WithOrdinals(long[] values, int numDocs, Ordinals ordinals) {, +            super(values, numDocs);, +            this.ordinals = ordinals;, +        }, +, +        @Override, +        public boolean isMultiValued() {, +            return ordinals.isMultiValued();, +        }, +, +        @Override, +        public boolean isValuesOrdered() {, +            return true;, +        }, +, +        @Override, +        public long getMemorySizeInBytes() {, +            if (size == -1) {, +                size = RamUsage.NUM_BYTES_INT/*size*/ + RamUsage.NUM_BYTES_INT/*numDocs*/ + +RamUsage.NUM_BYTES_ARRAY_HEADER + (values.length * RamUsage.NUM_BYTES_DOUBLE) + ordinals.getMemorySizeInBytes();, +            }, +            return size;, +        }, +, +        @Override, +        public BytesValues getBytesValues() {, +            return new BytesValues.StringBased(getStringValues());, +        }, +, +        @Override, +        public HashedBytesValues getHashedBytesValues() {, +            return new HashedBytesValues.StringBased(getStringValues());, +        }, +, +        @Override]