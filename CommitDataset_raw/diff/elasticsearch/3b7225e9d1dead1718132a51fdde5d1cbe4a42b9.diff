[+++ b/server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +        private final NumberType type;, +        private NumberFieldType(NumberFieldType other) {, +, +        @Override, +        public boolean equals(Object o) {, +            if (super.equals(o) == false) {, +                return false;, +            }, +            NumberFieldType that = (NumberFieldType) o;, +            return type == that.type;, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(super.hashCode(), type);, +        }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java, +        private final NumberType type;, +        private NumberFieldType(NumberFieldType other) {, +, +        @Override, +        public boolean equals(Object o) {, +            if (super.equals(o) == false) {, +                return false;, +            }, +            NumberFieldType that = (NumberFieldType) o;, +            return type == that.type;, +        }, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(super.hashCode(), type);, +        }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.index.mapper.NumberFieldMapper.NumberFieldType;, +    public void testEqualsWithDifferentNumberTypes() {, +        NumberType type = randomFrom(NumberType.values());, +        NumberFieldType fieldType = new NumberFieldType(type);, +, +        NumberType otherType = randomValueOtherThan(type,, +            () -> randomFrom(NumberType.values()));, +        NumberFieldType otherFieldType = new NumberFieldType(otherType);, +, +        assertNotEquals(fieldType, otherFieldType);, +    }, +]