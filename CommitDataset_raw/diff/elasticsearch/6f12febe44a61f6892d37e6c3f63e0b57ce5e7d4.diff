[+++ b/server/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return values[index].get().utf8ToString();, +        }, +, +        public String getValue() {, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +++ b/server/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return get(0);, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +            return values[index].get().utf8ToString();, +        }, +, +        public String getValue() {, +            if (count == 0) {, +                throw new IllegalStateException("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!");, +            }, +++ b/server/src/test/java/org/elasticsearch/index/fielddata/ScriptDocValuesGeoPointsTests.java, +import org.elasticsearch.index.fielddata.ScriptDocValues.GeoPoints;, +    private static MultiGeoPointValues wrap(GeoPoint[][] points) {, +            GeoPoint[] current;, +                return current[i++];, +                if (docId < points.length) {, +                    current = points[docId];, +                } else {, +                    current = new GeoPoint[0];, +                }, +                i = 0;, +                return current.length > 0;, +                return current.length;, +        GeoPoint[][] points = {{new GeoPoint(lat1, lon1), new GeoPoint(lat2, lon2)}};, +        final MultiGeoPointValues values = wrap(points);, +        GeoPoint[][] points = {{new GeoPoint(lat, lon)}};, +        final MultiGeoPointValues values = wrap(points);, +        GeoPoint[][] points2 = {new GeoPoint[0]};, +        final ScriptDocValues.GeoPoints emptyScript = new ScriptDocValues.GeoPoints(wrap(points2));, +, +    public void testMissingValues() throws IOException {, +        GeoPoint[][] points = new GeoPoint[between(3, 10)][];, +        for (int d = 0; d < points.length; d++) {, +            points[d] = new GeoPoint[randomBoolean() ? 0 : between(1, 10)];, +        }, +        final ScriptDocValues.GeoPoints geoPoints = new GeoPoints(wrap(points));, +        for (int d = 0; d < points.length; d++) {, +            geoPoints.setNextDocId(d);, +            if (points[d].length > 0) {, +                assertEquals(points[d][0], geoPoints.getValue());, +            } else {, +                Exception e = expectThrows(IllegalStateException.class, () -> geoPoints.getValue());, +                assertEquals("A document doesn't have a value for a field! " +, +                    "Use doc[<field>].size()==0 to check if a document is missing a field!", e.getMessage());]