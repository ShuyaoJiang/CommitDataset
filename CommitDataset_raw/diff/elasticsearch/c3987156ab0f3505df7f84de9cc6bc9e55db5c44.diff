[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java, +        final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();, +        final Decision decision;, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                decision = allocation.decision(Decision.NO, NAME, "shard has already failed allocating [", +            } else {, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                    + unassignedInfo.getNumFailedAllocations() + "] times but [" + maxRetry + "] retries are allowed");, +        } else {, +            decision = allocation.decision(Decision.YES, NAME, "shard has no previous failures");, +        return decision;, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java, +        final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();, +        final Decision decision;, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                decision = allocation.decision(Decision.NO, NAME, "shard has already failed allocating [", +            } else {, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                    + unassignedInfo.getNumFailedAllocations() + "] times but [" + maxRetry + "] retries are allowed");, +        } else {, +            decision = allocation.decision(Decision.YES, NAME, "shard has no previous failures");, +        return decision;, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +, +        public boolean isEmpty() {, +            return extensions.isEmpty();, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java, +        final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();, +        final Decision decision;, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                decision = allocation.decision(Decision.NO, NAME, "shard has already failed allocating [", +            } else {, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                    + unassignedInfo.getNumFailedAllocations() + "] times but [" + maxRetry + "] retries are allowed");, +        } else {, +            decision = allocation.decision(Decision.YES, NAME, "shard has no previous failures");, +        return decision;, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +, +        public boolean isEmpty() {, +            return extensions.isEmpty();, +        }, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        addDiscoveryType("none", NoneDiscovery.class);, +        if (discoveryType.equals("none") == false) {, +            if (zenPings.isEmpty()) {, +                zenPings.registerExtension(UnicastZenPing.class);, +            }, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, + * the type of discovery. In the Zen Discovery it is handled in the {@link PublishClusterStateAction#publish} method. The, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/MaxRetryAllocationDecider.java, +        final UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();, +        final Decision decision;, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                decision = allocation.decision(Decision.NO, NAME, "shard has already failed allocating [", +            } else {, +                decision = allocation.decision(Decision.YES, NAME, "shard has already failed allocating [", +                    + unassignedInfo.getNumFailedAllocations() + "] times but [" + maxRetry + "] retries are allowed");, +        } else {, +            decision = allocation.decision(Decision.YES, NAME, "shard has no previous failures");, +        return decision;, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +, +        public boolean isEmpty() {, +            return extensions.isEmpty();, +        }, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        addDiscoveryType("none", NoneDiscovery.class);, +        if (discoveryType.equals("none") == false) {, +            if (zenPings.isEmpty()) {, +                zenPings.registerExtension(UnicastZenPing.class);, +            }, +++ b/core/src/main/java/org/elasticsearch/discovery/NoneDiscovery.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */]