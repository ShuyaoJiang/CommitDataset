[+++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/ExpirationCallback.java, +import org.elasticsearch.xpack.scheduler.SchedulerEngine;, +, +import java.util.UUID;, +    final static String EXPIRATION_JOB_PREFIX = ".license_expiration_job_";, +, +        public TimeValue delay(long expirationDate, long now) {, +            return TimeValue.timeValueMillis((expirationDate - now) - max.getMillis());, +        public TimeValue delay(long expirationDate, long now) {, +            long expiryDuration = expirationDate - now;, +    private final String id;, +        this.id = String.join("", EXPIRATION_JOB_PREFIX, UUID.randomUUID().toString());, +    }, +, +    public String getId() {, +        return id;, +    public abstract TimeValue delay(long expirationDate, long now);, +    public SchedulerEngine.Schedule schedule(long expiryDate) {, +        return new ExpirySchedule(expiryDate);, +    }, +, +, +    private class ExpirySchedule implements SchedulerEngine.Schedule {, +, +        private final long expiryDate;, +, +        private ExpirySchedule(long expiryDate) {, +            this.expiryDate = expiryDate;, +        }, +, +        @Override, +        public long nextScheduledTimeAfter(long startTime, long time) {, +            if (matches(expiryDate, time)) {, +                if (startTime == time) {, +                    return time;, +                } else {, +                    return time + frequency().getMillis();, +                }, +            } else {, +                if (startTime == time) {, +                    final TimeValue delay = delay(expiryDate, time);, +                    if (delay != null) {, +                        return time + delay.getMillis();, +                    }, +                }, +                return -1;, +            }, +        }, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/ExpirationCallback.java, +import org.elasticsearch.xpack.scheduler.SchedulerEngine;, +, +import java.util.UUID;, +    final static String EXPIRATION_JOB_PREFIX = ".license_expiration_job_";, +, +        public TimeValue delay(long expirationDate, long now) {, +            return TimeValue.timeValueMillis((expirationDate - now) - max.getMillis());, +        public TimeValue delay(long expirationDate, long now) {, +            long expiryDuration = expirationDate - now;, +    private final String id;, +        this.id = String.join("", EXPIRATION_JOB_PREFIX, UUID.randomUUID().toString());, +    }, +, +    public String getId() {, +        return id;, +    public abstract TimeValue delay(long expirationDate, long now);, +    public SchedulerEngine.Schedule schedule(long expiryDate) {, +        return new ExpirySchedule(expiryDate);, +    }, +, +, +    private class ExpirySchedule implements SchedulerEngine.Schedule {, +, +        private final long expiryDate;, +, +        private ExpirySchedule(long expiryDate) {, +            this.expiryDate = expiryDate;, +        }, +, +        @Override, +        public long nextScheduledTimeAfter(long startTime, long time) {, +            if (matches(expiryDate, time)) {, +                if (startTime == time) {, +                    return time;, +                } else {, +                    return time + frequency().getMillis();, +                }, +            } else {, +                if (startTime == time) {, +                    final TimeValue delay = delay(expiryDate, time);, +                    if (delay != null) {, +                        return time + delay.getMillis();, +                    }, +                }, +                return -1;, +            }, +        }, +    }, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicenseSchedule.java, +/*]