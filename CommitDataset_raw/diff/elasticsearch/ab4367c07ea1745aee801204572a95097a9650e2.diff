[+++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +    @AwaitsFix(bugUrl = "way too unstable request size. Needs a proper and more stable fix."), +        // We need the request limit beforehand, just from a single node because the limit should always be the same, +        long beforeReqLimit = client.admin().cluster().prepareNodesStats().setBreaker(true).get(), +                .getNodes().get(0).getBreaker().getStats(CircuitBreaker.REQUEST).getLimit();, +, +        // There is no "one size fits all" breaker size as internal request size will vary based on doc count., +        int parentBreakerSize = docCount * 3;, +                .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), parentBreakerSize + "b"), +            String errMsg = "[parent] Data too large, data for [test] would be larger than limit of [" + parentBreakerSize;, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",, +                    e.toString(), containsString(errMsg));, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +    @AwaitsFix(bugUrl = "way too unstable request size. Needs a proper and more stable fix."), +        // We need the request limit beforehand, just from a single node because the limit should always be the same, +        long beforeReqLimit = client.admin().cluster().prepareNodesStats().setBreaker(true).get(), +                .getNodes().get(0).getBreaker().getStats(CircuitBreaker.REQUEST).getLimit();, +, +        // There is no "one size fits all" breaker size as internal request size will vary based on doc count., +        int parentBreakerSize = docCount * 3;, +                .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), parentBreakerSize + "b"), +            String errMsg = "[parent] Data too large, data for [test] would be larger than limit of [" + parentBreakerSize;, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",, +                    e.toString(), containsString(errMsg));, +++ b/docs/reference/query-dsl/bool-query.asciidoc, +[source,js], +[source,js], +[source,js], +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +    @AwaitsFix(bugUrl = "way too unstable request size. Needs a proper and more stable fix."), +        // We need the request limit beforehand, just from a single node because the limit should always be the same, +        long beforeReqLimit = client.admin().cluster().prepareNodesStats().setBreaker(true).get(), +                .getNodes().get(0).getBreaker().getStats(CircuitBreaker.REQUEST).getLimit();, +, +        // There is no "one size fits all" breaker size as internal request size will vary based on doc count., +        int parentBreakerSize = docCount * 3;, +                .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), parentBreakerSize + "b"), +            String errMsg = "[parent] Data too large, data for [test] would be larger than limit of [" + parentBreakerSize;, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",, +                    e.toString(), containsString(errMsg));, +++ b/docs/reference/query-dsl/bool-query.asciidoc, +[source,js], +[source,js], +[source,js], +++ b/docs/reference/query-dsl/constant-score-query.asciidoc, +GET /_search, +    "query": {, +}, +// CONSOLE, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +    @AwaitsFix(bugUrl = "way too unstable request size. Needs a proper and more stable fix."), +        // We need the request limit beforehand, just from a single node because the limit should always be the same, +        long beforeReqLimit = client.admin().cluster().prepareNodesStats().setBreaker(true).get(), +                .getNodes().get(0).getBreaker().getStats(CircuitBreaker.REQUEST).getLimit();, +, +        // There is no "one size fits all" breaker size as internal request size will vary based on doc count., +        int parentBreakerSize = docCount * 3;, +                .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), parentBreakerSize + "b"), +            String errMsg = "[parent] Data too large, data for [test] would be larger than limit of [" + parentBreakerSize;, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",, +                    e.toString(), containsString(errMsg));, +++ b/docs/reference/query-dsl/bool-query.asciidoc, +[source,js], +[source,js], +[source,js], +++ b/docs/reference/query-dsl/constant-score-query.asciidoc, +GET /_search, +    "query": {, +}, +// CONSOLE, +++ b/docs/reference/query-dsl/full-text-queries.asciidoc, +++ b/core/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceIT.java, +    @AwaitsFix(bugUrl = "way too unstable request size. Needs a proper and more stable fix."), +        // We need the request limit beforehand, just from a single node because the limit should always be the same, +        long beforeReqLimit = client.admin().cluster().prepareNodesStats().setBreaker(true).get(), +                .getNodes().get(0).getBreaker().getStats(CircuitBreaker.REQUEST).getLimit();, +, +        // There is no "one size fits all" breaker size as internal request size will vary based on doc count., +        int parentBreakerSize = docCount * 3;, +                .put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(), parentBreakerSize + "b"), +            String errMsg = "[parent] Data too large, data for [test] would be larger than limit of [" + parentBreakerSize;, +            assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",, +                    e.toString(), containsString(errMsg));, +++ b/docs/reference/query-dsl/bool-query.asciidoc, +[source,js], +[source,js], +[source,js], +++ b/docs/reference/query-dsl/constant-score-query.asciidoc, +GET /_search, +    "query": {, +}, +// CONSOLE, +++ b/docs/reference/query-dsl/full-text-queries.asciidoc, +++ b/docs/reference/query-dsl/function-score-query.asciidoc, +GET /_search, +{, +    "query": {, +            "boost": "5",, +            "random_score": {}, <1>, +            "boost_mode":"multiply"]