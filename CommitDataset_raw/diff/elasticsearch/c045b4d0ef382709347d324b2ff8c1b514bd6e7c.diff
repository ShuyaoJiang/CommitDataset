[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentGeoPointFieldMapper.java, +import org.apache.lucene.document.Field;, +        public static final Field.Store STORE = Field.Store.NO;, +        private Field.Store store = Defaults.STORE;, +, +        public Builder store(Field.Store store) {, +            this.store = store;, +            return this;, +        }, +, +                latMapper = (XContentNumberFieldMapper) latMapperBuilder.includeInAll(false).store(store).build(context);, +                lonMapper = (XContentNumberFieldMapper) lonMapperBuilder.includeInAll(false).store(store).build(context);, +                } else if (fieldName.equals("store")) {, +                    builder.store(parseStore(name, fieldNode.toString()));, +        builder.field("store", latMapper.name().toLowerCase());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentGeoPointFieldMapper.java, +import org.apache.lucene.document.Field;, +        public static final Field.Store STORE = Field.Store.NO;, +        private Field.Store store = Defaults.STORE;, +, +        public Builder store(Field.Store store) {, +            this.store = store;, +            return this;, +        }, +, +                latMapper = (XContentNumberFieldMapper) latMapperBuilder.includeInAll(false).store(store).build(context);, +                lonMapper = (XContentNumberFieldMapper) lonMapperBuilder.includeInAll(false).store(store).build(context);, +                } else if (fieldName.equals("store")) {, +                    builder.store(parseStore(name, fieldNode.toString()));, +        builder.field("store", latMapper.name().toLowerCase());, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/xcontent/geopoint/LatLonMappingGeoPointTests.java, +import org.elasticsearch.common.Numbers;, +import static org.hamcrest.MatcherAssert.*;, +        assertThat(doc.doc().getField("point.lat"), notNullValue());, +        assertThat(doc.doc().getField("point.lat").getBinaryValue(), nullValue());, +        assertThat(doc.doc().getField("point.lon"), notNullValue());, +        assertThat(doc.doc().getField("point.lon").getBinaryValue(), nullValue());, +        assertThat(doc.doc().getField("point.geohash"), nullValue());, +    }, +, +    @Test public void testLatLonValuesStored() throws Exception {, +        String mapping = XContentFactory.contentTextBuilder(XContentType.JSON).startObject().startObject("type"), +                .startObject("properties").startObject("point").field("type", "geo_point").field("store", "yes").endObject().endObject(), +                .endObject().endObject().string();, +, +        XContentDocumentMapper defaultMapper = XContentMapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .startObject("point").field("lat", 1.2).field("lon", 1.3).endObject(), +                .endObject(), +                .copiedBytes());, +, +        assertThat(doc.doc().getField("point.lat"), notNullValue());, +        assertThat(doc.doc().getField("point.lat").getBinaryValue(), equalTo(Numbers.doubleToBytes(1.2)));, +        assertThat(doc.doc().getField("point.lon"), notNullValue());, +        assertThat(doc.doc().getField("point.lon").getBinaryValue(), equalTo(Numbers.doubleToBytes(1.3)));, +        assertThat(doc.doc().getField("point.geohash"), nullValue());, +    }, +, +    @Test public void testArrayLatLonValues() throws Exception {, +        String mapping = XContentFactory.contentTextBuilder(XContentType.JSON).startObject().startObject("type"), +                .startObject("properties").startObject("point").field("type", "geo_point").field("store", "yes").endObject().endObject(), +                .endObject().endObject().string();, +, +        XContentDocumentMapper defaultMapper = XContentMapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .startArray("point"), +                .startObject().field("lat", 1.2).field("lon", 1.3).endObject(), +                .startObject().field("lat", 1.4).field("lon", 1.5).endObject(), +                .endArray(), +                .endObject(), +                .copiedBytes());, +, +        assertThat(doc.doc().getFields("point.lat").length, equalTo(2));, +        assertThat(doc.doc().getFields("point.lon").length, equalTo(2));, +        assertThat(doc.doc().getFields("point.lat")[0].getBinaryValue(), equalTo(Numbers.doubleToBytes(1.2)));, +        assertThat(doc.doc().getFields("point.lon")[0].getBinaryValue(), equalTo(Numbers.doubleToBytes(1.3)));, +        assertThat(doc.doc().getFields("point.lat")[1].getBinaryValue(), equalTo(Numbers.doubleToBytes(1.4)));, +        assertThat(doc.doc().getFields("point.lon")[1].getBinaryValue(), equalTo(Numbers.doubleToBytes(1.5)));, +, +        assertThat(doc.doc().getField("point.geohash"), nullValue());, +        assertThat(doc.doc().getField("point.lat"), notNullValue());, +        assertThat(doc.doc().getField("point.lon"), notNullValue());, +        assertThat(doc.doc().getField("point.geohash"), nullValue());, +    }, +, +    @Test public void testLatLonInOneValueStored() throws Exception {, +        String mapping = XContentFactory.contentTextBuilder(XContentType.JSON).startObject().startObject("type"), +                .startObject("properties").startObject("point").field("type", "geo_point").field("store", "yes").endObject().endObject(), +                .endObject().endObject().string();, +, +        XContentDocumentMapper defaultMapper = XContentMapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("point", "1.2,1.3"), +                .endObject()]