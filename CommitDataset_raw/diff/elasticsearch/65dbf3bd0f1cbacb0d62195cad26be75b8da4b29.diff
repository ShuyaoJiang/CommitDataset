[+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java, +        long newGeneration;, +            newGeneration = MetaData.FORMAT.write(newMetaData, dataPaths);, +        // if cleaning old files fail, we still succeeded., +        try {, +            cleanUpOldMetaData(terminal, dataPaths, newGeneration);, +        } catch (Exception e) {, +            terminal.println(Terminal.Verbosity.SILENT,, +                "Warning: Cleaning up old metadata failed, but operation was otherwise successful (message: " + e.getMessage() + ")");, +    }, +, +    protected void cleanUpOldMetaData(Terminal terminal, Path[] dataPaths, long newGeneration) {, +        terminal.println(Terminal.Verbosity.VERBOSE, "Cleaning up old metadata");, +        MetaData.FORMAT.cleanupOldFiles(newGeneration, dataPaths);, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java, +        long newGeneration;, +            newGeneration = MetaData.FORMAT.write(newMetaData, dataPaths);, +        // if cleaning old files fail, we still succeeded., +        try {, +            cleanUpOldMetaData(terminal, dataPaths, newGeneration);, +        } catch (Exception e) {, +            terminal.println(Terminal.Verbosity.SILENT,, +                "Warning: Cleaning up old metadata failed, but operation was otherwise successful (message: " + e.getMessage() + ")");, +    }, +, +    protected void cleanUpOldMetaData(Terminal terminal, Path[] dataPaths, long newGeneration) {, +        terminal.println(Terminal.Verbosity.VERBOSE, "Cleaning up old metadata");, +        MetaData.FORMAT.cleanupOldFiles(newGeneration, dataPaths);, +    }, +, +++ b/server/src/test/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommandIT.java, +import org.elasticsearch.cli.Terminal;, +import org.elasticsearch.cluster.ClusterModule;, +import org.elasticsearch.common.xcontent.NamedXContentRegistry;, +import java.nio.file.Path;, +import static org.hamcrest.Matchers.greaterThan;, +, +    private static class SimulatedDeleteFailureException extends RuntimeException {, +    }, +, +    public void testCleanupOldMetaDataFails() throws Exception {, +        // establish some metadata., +        internalCluster().setBootstrapMasterNodeIndex(0);, +        internalCluster().startNode();, +        Environment environment = TestEnvironment.newEnvironment(internalCluster().getDefaultSettings());, +        internalCluster().stopRandomDataNode();, +, +        // find data paths, +        Path[] dataPaths;, +        try (NodeEnvironment nodeEnvironment = new NodeEnvironment(environment.settings(), environment)) {, +            dataPaths = nodeEnvironment.nodeDataPaths();, +        }, +, +        NamedXContentRegistry namedXContentRegistry = new NamedXContentRegistry(ClusterModule.getNamedXWriteables());, +, +        final Manifest originalManifest = loadLatestManifest(dataPaths, namedXContentRegistry);, +        final MetaData originalMetaData = loadMetaData(dataPaths, namedXContentRegistry, originalManifest);, +, +        executeCommand(new UnsafeBootstrapMasterCommand() {, +            @Override, +            protected void cleanUpOldMetaData(Terminal terminal, Path[] dataPaths, long newGeneration) {, +                throw new SimulatedDeleteFailureException();, +            }, +        }, environment, 0, false);, +, +, +        // check original meta-data left untouched., +        assertEquals(loadMetaData(dataPaths, namedXContentRegistry, originalManifest).clusterUUID(), originalMetaData.clusterUUID());, +, +        // check that we got new clusterUUID despite deletion failing, +        final Manifest secondManifest = loadLatestManifest(dataPaths, namedXContentRegistry);, +        final MetaData secondMetaData = loadMetaData(dataPaths, namedXContentRegistry, secondManifest);, +        assertThat(secondManifest.getGlobalGeneration(), greaterThan(originalManifest.getGlobalGeneration()));, +        assertNotEquals(originalMetaData.clusterUUID(), secondMetaData.clusterUUID());, +, +        // check that a new run will cleanup., +        executeCommand(new UnsafeBootstrapMasterCommand(), environment, 0, false);, +, +        assertNull(loadMetaData(dataPaths, namedXContentRegistry, originalManifest));, +        assertNull(loadMetaData(dataPaths, namedXContentRegistry, secondManifest));, +, +        final Manifest finalManifest = loadLatestManifest(dataPaths, namedXContentRegistry);, +        final MetaData finalMetaData = loadMetaData(dataPaths, namedXContentRegistry, finalManifest);, +, +        assertNotNull(finalMetaData);, +        assertNotEquals(secondMetaData.clusterUUID(), finalMetaData.clusterUUID());, +    }, +, +    private Manifest loadLatestManifest(Path[] dataPaths, NamedXContentRegistry namedXContentRegistry) throws IOException {, +        return Manifest.FORMAT.loadLatestState(logger, namedXContentRegistry, dataPaths);, +    }, +, +    private MetaData loadMetaData(Path[] dataPaths, NamedXContentRegistry namedXContentRegistry, Manifest manifest) {, +        return MetaData.FORMAT.loadGeneration(logger, namedXContentRegistry, manifest.getGlobalGeneration(), dataPaths);, +    }]