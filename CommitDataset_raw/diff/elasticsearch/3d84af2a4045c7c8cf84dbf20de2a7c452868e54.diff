[+++ b/config/logging.yml, +  index.gateway : DEBUG, +++ b/config/logging.yml, +  index.gateway : DEBUG, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/AppendableBlobContainer.java, +    /**, +     * Returns of an appended blob can be opened on an existing blob., +     */, +    boolean canAppendToExistingBlob();, +, +    AppendableBlob appendBlob(String blobName) throws IOException;, +++ b/config/logging.yml, +  index.gateway : DEBUG, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/AppendableBlobContainer.java, +    /**, +     * Returns of an appended blob can be opened on an existing blob., +     */, +    boolean canAppendToExistingBlob();, +, +    AppendableBlob appendBlob(String blobName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsAppendableBlobContainer.java, +    @Override public AppendableBlob appendBlob(String blobName) throws IOException {, +        return new FsAppendableBlob(new File(path, blobName));, +    }, +, +    @Override public boolean canAppendToExistingBlob() {, +        return true;, +        public FsAppendableBlob(File file) throws IOException {, +++ b/config/logging.yml, +  index.gateway : DEBUG, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/AppendableBlobContainer.java, +    /**, +     * Returns of an appended blob can be opened on an existing blob., +     */, +    boolean canAppendToExistingBlob();, +, +    AppendableBlob appendBlob(String blobName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsAppendableBlobContainer.java, +    @Override public AppendableBlob appendBlob(String blobName) throws IOException {, +        return new FsAppendableBlob(new File(path, blobName));, +    }, +, +    @Override public boolean canAppendToExistingBlob() {, +        return true;, +        public FsAppendableBlob(File file) throws IOException {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsImmutableBlobContainer.java, +                RandomAccessFile raf;, +++ b/config/logging.yml, +  index.gateway : DEBUG, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/AppendableBlobContainer.java, +    /**, +     * Returns of an appended blob can be opened on an existing blob., +     */, +    boolean canAppendToExistingBlob();, +, +    AppendableBlob appendBlob(String blobName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsAppendableBlobContainer.java, +    @Override public AppendableBlob appendBlob(String blobName) throws IOException {, +        return new FsAppendableBlob(new File(path, blobName));, +    }, +, +    @Override public boolean canAppendToExistingBlob() {, +        return true;, +        public FsAppendableBlob(File file) throws IOException {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsImmutableBlobContainer.java, +                RandomAccessFile raf;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/gateway/blobstore/BlobStoreIndexShardGateway.java, +                    translogBlob = translogContainer.appendBlob("translog-" + translogSnapshot.translogId());, +, +                // clean all the other translogs, +                for (Long translogIdToDelete : translogIds) {, +                    if (!translogId.equals(translogIdToDelete)) {, +                        try {, +                            translogContainer.deleteBlob("translog-" + translogIdToDelete);, +                        } catch (Exception e) {, +                            // ignore, +                        }, +                    }, +                }, +, +                // only if we can append to an existing translog we should use the current id and continue to append to it, +                long lastTranslogId = indexShard.translog().currentId();, +                if (!translogContainer.canAppendToExistingBlob()) {, +                    lastTranslogId = -1;, +                }, +, +                return new RecoveryStatus.Translog(lastTranslogId, operations.size(), new ByteSizeValue(translogData.length, ByteSizeUnit.BYTES));, +++ b/config/logging.yml, +  index.gateway : DEBUG, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/AppendableBlobContainer.java, +    /**, +     * Returns of an appended blob can be opened on an existing blob., +     */, +    boolean canAppendToExistingBlob();, +, +    AppendableBlob appendBlob(String blobName) throws IOException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsAppendableBlobContainer.java, +    @Override public AppendableBlob appendBlob(String blobName) throws IOException {, +        return new FsAppendableBlob(new File(path, blobName));, +    }]