[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.Maps;, +import org.elasticsearch.util.settings.Settings;, +import java.util.Map;, +, +import static org.elasticsearch.util.transport.TransportAddressSerializers.*;, + * @author kimchy (shay.banon), +    public static Map<String, String> buildCommonNodesAttributes(Settings settings) {, +        Map<String, String> attributes = Maps.newHashMap(settings.getByPrefix("node.").getAsMap());, +        if (attributes.containsKey("client")) {, +            if (attributes.get("client").equals("false")) {, +                attributes.remove("client"); // this is the default, +            } else {, +                // if we are client node, don't store data ..., +                attributes.put("data", "false");, +            }, +        }, +        if (attributes.containsKey("data")) {, +            if (attributes.get("data").equals("true")) {, +                attributes.remove("data");, +            }, +        }, +        return attributes;, +    }, +, +    private ImmutableMap<String, String> attributes;, +        this("", nodeId, address, ImmutableMap.<String, String>of());, +    public DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map<String, String> attributes) {, +        ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +        for (Map.Entry<String, String> entry : attributes.entrySet()) {, +            builder.put(StringHelper.intern(entry.getKey()), StringHelper.intern(entry.getValue()));, +        }, +        this.attributes = builder.build();, +     * The node attributes., +     */, +    public ImmutableMap<String, String> attributes() {, +        return this.attributes;, +    }, +, +    /**, +     * The node attributes., +     */, +    public ImmutableMap<String, String> getAttributes() {, +        return attributes();, +    }, +, +    /**, +        String data = attributes.get("data");, +        return data == null || data.equals("true");, +    /**, +     * Is the node a client node or not., +     */, +    public boolean clientNode() {, +        String client = attributes.get("client");, +        return client != null && client.equals("true");, +    }, +, +    public boolean isClientNode() {, +        return clientNode();, +    }, +, +        int size = in.readVInt();, +        ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();, +        for (int i = 0; i < size; i++) {, +            builder.put(StringHelper.intern(in.readUTF()), StringHelper.intern(in.readUTF()));, +        }, +        attributes = builder.build();, +        addressToStream(out, address);, +        out.writeVInt(attributes.size());, +        for (Map.Entry<String, String> entry : attributes.entrySet()) {, +            out.writeUTF(entry.getKey());, +            out.writeUTF(entry.getValue());, +        }, +        if (!attributes.isEmpty()) {, +            sb.append(attributes);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +import com.google.common.collect.ImmutableMap;, +import com.google.common.collect.Maps;, +import org.elasticsearch.util.settings.Settings;, +import java.util.Map;, +, +import static org.elasticsearch.util.transport.TransportAddressSerializers.*;, + * @author kimchy (shay.banon), +    public static Map<String, String> buildCommonNodesAttributes(Settings settings) {, +        Map<String, String> attributes = Maps.newHashMap(settings.getByPrefix("node.").getAsMap());, +        if (attributes.containsKey("client")) {, +            if (attributes.get("client").equals("false")) {, +                attributes.remove("client"); // this is the default, +            } else {, +                // if we are client node, don't store data ..., +                attributes.put("data", "false");, +            }, +        }, +        if (attributes.containsKey("data")) {, +            if (attributes.get("data").equals("true")) {, +                attributes.remove("data");, +            }, +        }]