[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +        return version;, +        this.version = Collections.unmodifiableList(version);, +        Objects.requireNonNull(value);, +        if (!isValid(value)) {, +        return version.stream().map(v -> Integer.toString(v)).collect(Collectors.joining("."));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +        return version;, +        this.version = Collections.unmodifiableList(version);, +        Objects.requireNonNull(value);, +        if (!isValid(value)) {, +        return version.stream().map(v -> Integer.toString(v)).collect(Collectors.joining("."));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.index.Index;, +                            QueryShardContext queryShardContext = indexService.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +        return version;, +        this.version = Collections.unmodifiableList(version);, +        Objects.requireNonNull(value);, +        if (!isValid(value)) {, +        return version.stream().map(v -> Integer.toString(v)).collect(Collectors.joining("."));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.index.Index;, +                            QueryShardContext queryShardContext = indexService.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                aliasValidator.validateAliasFilter(aliasAction.alias(), filter, indexService.getQueryShardContext());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +        return version;, +        this.version = Collections.unmodifiableList(version);, +        Objects.requireNonNull(value);, +        if (!isValid(value)) {, +        return version.stream().map(v -> Integer.toString(v)).collect(Collectors.joining("."));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.index.Index;, +                            QueryShardContext queryShardContext = indexService.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                aliasValidator.validateAliasFilter(aliasAction.alias(), filter, indexService.getQueryShardContext());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +     * Moves the shard from started to initializing, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +        return version;, +        this.version = Collections.unmodifiableList(version);, +        Objects.requireNonNull(value);, +        if (!isValid(value)) {, +        return version.stream().map(v -> Integer.toString(v)).collect(Collectors.joining("."));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +import org.elasticsearch.index.Index;, +                            QueryShardContext queryShardContext = indexService.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +                                aliasValidator.validateAliasFilter(aliasAction.alias(), filter, indexService.getQueryShardContext());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +     * Moves the shard from started to initializing, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        this.mapperService = new MapperService(indexSettings, analysisService, similarityService, mapperRegistry, IndexService.this::getQueryShardContext);, +    public QueryShardContext getQueryShardContext() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +        final QueryShardContext queryShardContext = indexShard.getQueryShardContext();, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            context.parsedQuery(indexShard.getQueryShardContext().toQuery(request.query()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JavaVersion.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +        return version;, +        this.version = Collections.unmodifiableList(version);]