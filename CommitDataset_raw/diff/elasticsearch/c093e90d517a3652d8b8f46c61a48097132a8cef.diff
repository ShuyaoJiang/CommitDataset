[+++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.index.merge.OnGoingMerge;, +import java.util.Collections;, +import java.util.Set;, +    private final Set<OnGoingMerge> onGoingMerges = ConcurrentCollections.newConcurrentSet();, +    private final Set<OnGoingMerge> readOnlyOnGoingMerges = Collections.unmodifiableSet(onGoingMerges);, +, +    public Set<OnGoingMerge> onGoingMerges() {, +        return readOnlyOnGoingMerges;, +    }, +, +, +        OnGoingMerge onGoingMerge = new OnGoingMerge(merge);, +        onGoingMerges.add(onGoingMerge);, +, +            beforeMerge(onGoingMerge);, +            onGoingMerges.remove(onGoingMerge);, +            afterMerge(onGoingMerge);, +, +    /**, +     * A callback allowing for custom logic before an actual merge starts., +     */, +    protected void beforeMerge(OnGoingMerge merge) {, +, +    }, +, +    /**, +     * A callback allowing for custom logic before an actual merge starts., +     */, +    protected void afterMerge(OnGoingMerge merge) {, +, +    }, +, +++ b/src/main/java/org/apache/lucene/index/TrackingConcurrentMergeScheduler.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.index.merge.OnGoingMerge;, +import java.util.Collections;, +import java.util.Set;, +    private final Set<OnGoingMerge> onGoingMerges = ConcurrentCollections.newConcurrentSet();, +    private final Set<OnGoingMerge> readOnlyOnGoingMerges = Collections.unmodifiableSet(onGoingMerges);, +, +    public Set<OnGoingMerge> onGoingMerges() {, +        return readOnlyOnGoingMerges;, +    }, +, +, +        OnGoingMerge onGoingMerge = new OnGoingMerge(merge);, +        onGoingMerges.add(onGoingMerge);, +, +            beforeMerge(onGoingMerge);, +            onGoingMerges.remove(onGoingMerge);, +            afterMerge(onGoingMerge);, +, +    /**, +     * A callback allowing for custom logic before an actual merge starts., +     */, +    protected void beforeMerge(OnGoingMerge merge) {, +, +    }, +, +    /**, +     * A callback allowing for custom logic before an actual merge starts., +     */, +    protected void afterMerge(OnGoingMerge merge) {, +, +    }, +, +++ b/src/main/java/org/apache/lucene/index/TrackingSerialMergeScheduler.java, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.index.merge.OnGoingMerge;, +import java.util.Collections;, +import java.util.Set;, +    private final Set<OnGoingMerge> onGoingMerges = ConcurrentCollections.newConcurrentSet();, +    private final Set<OnGoingMerge> readOnlyOnGoingMerges = Collections.unmodifiableSet(onGoingMerges);, +, +    public Set<OnGoingMerge> onGoingMerges() {, +        return readOnlyOnGoingMerges;, +    }, +, +            OnGoingMerge onGoingMerge = new OnGoingMerge(merge);, +            onGoingMerges.add(onGoingMerge);, +, +                beforeMerge(onGoingMerge);, +                onGoingMerges.remove(onGoingMerge);, +                afterMerge(onGoingMerge);, +, +    /**, +     * A callback allowing for custom logic before an actual merge starts., +     */, +    protected void beforeMerge(OnGoingMerge merge) {, +, +    }, +, +    /**, +     * A callback allowing for custom logic before an actual merge starts., +     */, +    protected void afterMerge(OnGoingMerge merge) {, +, +    }]