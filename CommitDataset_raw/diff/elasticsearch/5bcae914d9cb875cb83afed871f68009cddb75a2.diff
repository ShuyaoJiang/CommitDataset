[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            clazz.getField("$NAME").set(null, name);, +            clazz.getField("$SOURCE").set(null, source);, +            clazz.getField("$STATEMENTS").set(null, root.getStatements());, +            java.lang.reflect.Constructor<? extends PainlessScript> constructor = clazz.getConstructor();, +            return iface.cast(constructor.newInstance());, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            clazz.getField("$NAME").set(null, name);, +            clazz.getField("$SOURCE").set(null, source);, +            clazz.getField("$STATEMENTS").set(null, root.getStatements());, +            java.lang.reflect.Constructor<? extends PainlessScript> constructor = clazz.getConstructor();, +            return iface.cast(constructor.newInstance());, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScript.java, +public interface PainlessScript {, +    /**, +     * @return The name of the script retrieved from a static variable generated, +     * during compilation of a Painless script., +     */, +    String getName();, +, +    /**, +     * @return The source for a script retrieved from a static variable generated, +     * during compilation of a Painless script., +     */, +    String getSource();, +, +    /**, +     * @return The {@link BitSet} tracking the boundaries for statements necessary, +     * for good exception messages., +     */, +    BitSet getStatements();, +    default ScriptException convertToScriptException(Throwable t, Map<String, List<String>> extraMetadata) {, +                        endOffset = getSource().length();, +                    String snippet = getSource().substring(startOffset, endOffset);, +        if (PainlessScriptEngine.INLINE_NAME.equals(getName())) {, +            name = getSource();, +            name = getName();, +    default boolean shouldFilter(StackTraceElement element) {, +    default int getPreviousStatement(int offset) {, +        return getStatements().previousSetBit(offset);, +    default int getNextStatement(int offset) {, +        return getStatements().nextSetBit(offset + 1);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            clazz.getField("$NAME").set(null, name);, +            clazz.getField("$SOURCE").set(null, source);, +            clazz.getField("$STATEMENTS").set(null, root.getStatements());, +            java.lang.reflect.Constructor<? extends PainlessScript> constructor = clazz.getConstructor();, +            return iface.cast(constructor.newInstance());, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScript.java, +public interface PainlessScript {, +    /**, +     * @return The name of the script retrieved from a static variable generated, +     * during compilation of a Painless script., +     */, +    String getName();, +, +    /**, +     * @return The source for a script retrieved from a static variable generated, +     * during compilation of a Painless script., +     */, +    String getSource();, +, +    /**, +     * @return The {@link BitSet} tracking the boundaries for statements necessary, +     * for good exception messages., +     */, +    BitSet getStatements();, +    default ScriptException convertToScriptException(Throwable t, Map<String, List<String>> extraMetadata) {, +                        endOffset = getSource().length();, +                    String snippet = getSource().substring(startOffset, endOffset);, +        if (PainlessScriptEngine.INLINE_NAME.equals(getName())) {, +            name = getSource();, +            name = getName();, +    default boolean shouldFilter(StackTraceElement element) {, +    default int getPreviousStatement(int offset) {, +        return getStatements().previousSetBit(offset);, +    default int getNextStatement(int offset) {, +        return getStatements().nextSetBit(offset + 1);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    public static final String BASE_INTERFACE_NAME = PainlessScript.class.getName();, +    public static final Type BASE_INTERFACE_TYPE = Type.getType(PainlessScript.class);, +    public static final String CLASS_NAME = BASE_INTERFACE_NAME + "$Script";, +    public static final Method CONSTRUCTOR = getAsmMethod(void.class, CTOR_METHOD_NAME);, +    public static final String GET_NAME_NAME = "getName";, +    public static final Method GET_NAME_METHOD = getAsmMethod(String.class, GET_NAME_NAME);, +, +    public static final String GET_SOURCE_NAME = "getSource";, +    public static final Method GET_SOURCE_METHOD = getAsmMethod(String.class, GET_SOURCE_NAME);, +, +    public static final String GET_STATEMENTS_NAME = "getStatements";, +    public static final Method GET_STATEMENTS_METHOD = getAsmMethod(BitSet.class, GET_STATEMENTS_NAME);, +, +    public static final Type OBJECT_TYPE = Type.getType(Object.class);, +    public static final Type BITSET_TYPE = Type.getType(BitSet.class);, +, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Compiler.java, +            clazz.getField("$NAME").set(null, name);, +            clazz.getField("$SOURCE").set(null, source);, +            clazz.getField("$STATEMENTS").set(null, root.getStatements());, +            java.lang.reflect.Constructor<? extends PainlessScript> constructor = clazz.getConstructor();]