[+++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.discovery.DiscoverySettings;, +        clusterDynamicSettings.addDynamicSetting(DiscoverySettings.PUBLISH_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.discovery.DiscoverySettings;, +        clusterDynamicSettings.addDynamicSetting(DiscoverySettings.PUBLISH_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +    public static final Validator TIME_NON_NEGATIVE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                TimeValue timeValue = TimeValue.parseTimeValue(value, null);, +                if (timeValue == null) {, +                    return "cannot parse value [" + value + "] as time";, +                }, +                if (timeValue.millis() < 0) {, +                    return "cannot parse value [" + value + "] as non negative time";, +                }, +            } catch (ElasticsearchParseException ex) {, +                return "cannot parse value [" + value + "] as time";, +            }, +            return null;, +        }, +    };, +, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.discovery.DiscoverySettings;, +        clusterDynamicSettings.addDynamicSetting(DiscoverySettings.PUBLISH_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +    public static final Validator TIME_NON_NEGATIVE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                TimeValue timeValue = TimeValue.parseTimeValue(value, null);, +                if (timeValue == null) {, +                    return "cannot parse value [" + value + "] as time";, +                }, +                if (timeValue.millis() < 0) {, +                    return "cannot parse value [" + value + "] as non negative time";, +                }, +            } catch (ElasticsearchParseException ex) {, +                return "cannot parse value [" + value + "] as time";, +            }, +            return null;, +        }, +    };, +, +++ b/src/main/java/org/elasticsearch/discovery/Discovery.java, +++ b/src/main/java/org/elasticsearch/cluster/settings/ClusterDynamicSettingsModule.java, +import org.elasticsearch.discovery.DiscoverySettings;, +        clusterDynamicSettings.addDynamicSetting(DiscoverySettings.PUBLISH_TIMEOUT, Validator.TIME_NON_NEGATIVE);, +++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java, +    public static final Validator TIME_NON_NEGATIVE = new Validator() {, +        @Override, +        public String validate(String setting, String value) {, +            try {, +                TimeValue timeValue = TimeValue.parseTimeValue(value, null);, +                if (timeValue == null) {, +                    return "cannot parse value [" + value + "] as time";, +                }, +                if (timeValue.millis() < 0) {, +                    return "cannot parse value [" + value + "] as non negative time";, +                }, +            } catch (ElasticsearchParseException ex) {, +                return "cannot parse value [" + value + "] as time";, +            }, +            return null;, +        }, +    };, +, +++ b/src/main/java/org/elasticsearch/discovery/Discovery.java, +++ b/src/main/java/org/elasticsearch/discovery/DiscoverySettings.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.discovery;, +, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.node.settings.NodeSettingsService;, +, +/**]