[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +    public InternalAggregation buildAggregation(long bucket) {, +        if (valuesSource == null || bucket >= counts.size()) {, +            return buildEmptyAggregation();, +        return new InternalExtendedStats(name, counts.get(bucket), sums.get(bucket),, +                mins.get(bucket), maxes.get(bucket), sumOfSqrs.get(bucket), sigma, formatter,, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/extended/ExtendedStatsAggregator.java, +    public InternalAggregation buildAggregation(long bucket) {, +        if (valuesSource == null || bucket >= counts.size()) {, +            return buildEmptyAggregation();, +        return new InternalExtendedStats(name, counts.get(bucket), sums.get(bucket),, +                mins.get(bucket), maxes.get(bucket), sumOfSqrs.get(bucket), sigma, formatter,, +++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ExtendedStatsTests.java, +import org.elasticsearch.search.aggregations.bucket.missing.Missing;, +import org.elasticsearch.search.aggregations.bucket.terms.Terms;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.missing;, +import static org.elasticsearch.search.aggregations.AggregationBuilders.terms;, +    public void testEmptySubAggregation() {, +        SearchResponse searchResponse = client().prepareSearch("idx"), +            .setQuery(matchAllQuery()), +            .addAggregation(terms("value").field("value"), +                .subAggregation(missing("values").field("values"), +                    .subAggregation(extendedStats("stats").field("value")))), +            .execute().actionGet();, +, +        assertHitCount(searchResponse, 10);, +, +        Terms terms = searchResponse.getAggregations().get("value");, +        assertThat(terms, notNullValue());, +        assertThat(terms.getBuckets().size(), equalTo(10));, +, +        for (Terms.Bucket bucket : terms.getBuckets()) {, +            assertThat(bucket.getDocCount(), equalTo(1L));, +, +            Missing missing = bucket.getAggregations().get("values");, +            assertThat(missing, notNullValue());, +            assertThat(missing.getDocCount(), equalTo(0L));, +, +            ExtendedStats stats = missing.getAggregations().get("stats");, +            assertThat(stats, notNullValue());, +            assertThat(stats.getName(), equalTo("stats"));, +            assertThat(stats.getSumOfSquares(), equalTo(0.0));, +            assertThat(stats.getCount(), equalTo(0L));, +            assertThat(stats.getSum(), equalTo(0.0));, +            assertThat(stats.getMin(), equalTo(Double.POSITIVE_INFINITY));, +            assertThat(stats.getMax(), equalTo(Double.NEGATIVE_INFINITY));, +            assertThat(Double.isNaN(stats.getStdDeviation()), is(true));, +            assertThat(Double.isNaN(stats.getAvg()), is(true));, +            assertThat(Double.isNaN(stats.getStdDeviationBound(ExtendedStats.Bounds.UPPER)), is(true));, +            assertThat(Double.isNaN(stats.getStdDeviationBound(ExtendedStats.Bounds.LOWER)), is(true));, +        }, +    }, +]