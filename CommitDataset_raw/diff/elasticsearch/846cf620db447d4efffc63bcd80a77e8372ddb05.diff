[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestValidationException.java, +import org.elasticsearch.common.ValidationException;, +public class ActionRequestValidationException extends ValidationException {, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestValidationException.java, +import org.elasticsearch.common.ValidationException;, +public class ActionRequestValidationException extends ValidationException {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +                                     IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestValidationException.java, +import org.elasticsearch.common.ValidationException;, +public class ActionRequestValidationException extends ValidationException {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +                                     IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestValidationException.java, +import org.elasticsearch.common.ValidationException;, +public class ActionRequestValidationException extends ValidationException {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +                                     IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/TransportOpenIndexAction.java, +                                    NodeSettingsService nodeSettingsService, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestValidationException.java, +import org.elasticsearch.common.ValidationException;, +public class ActionRequestValidationException extends ValidationException {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +                                     IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/TransportOpenIndexAction.java, +                                    NodeSettingsService nodeSettingsService, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/support/DestructiveOperations.java, +    private final ESLogger logger;, +    // TODO: Turn into a component that can be reused and wired up into all the transport actions where, +    // this helper logic is required. Note: also added the logger as argument, otherwise the same log, +    // statement is printed several times, this can removed once this becomes a component., +    public DestructiveOperations(ESLogger logger, Settings settings, NodeSettingsService nodeSettingsService) {, +        this.logger = logger;, +        boolean newValue = settings.getAsBoolean("action.destructive_requires_name", destructiveRequiresName);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +    public static final boolean REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT = true;, +    public static final boolean REST_EXCEPTION_SKIP_CAUSE_DEFAULT = false;, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +++ b/core/src/main/java/org/elasticsearch/action/ActionRequestValidationException.java, +import org.elasticsearch.common.ValidationException;, +public class ActionRequestValidationException extends ValidationException {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +                                     IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +                                      IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/open/TransportOpenIndexAction.java, +                                    NodeSettingsService nodeSettingsService, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {, +        this.destructiveOperations = new DestructiveOperations(logger, settings, nodeSettingsService);, +++ b/core/src/main/java/org/elasticsearch/action/support/DestructiveOperations.java, +    private final ESLogger logger;, +    // TODO: Turn into a component that can be reused and wired up into all the transport actions where, +    // this helper logic is required. Note: also added the logger as argument, otherwise the same log, +    // statement is printed several times, this can removed once this becomes a component., +    public DestructiveOperations(ESLogger logger, Settings settings, NodeSettingsService nodeSettingsService) {, +        this.logger = logger;]