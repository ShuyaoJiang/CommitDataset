[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +                if (context.root().dateDetection()) {, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +                if (context.root().dateDetection()) {, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/RootObjectMapper.java, +        public static final boolean DATE_DETECTION = false;, +        protected boolean dateDetection = Defaults.DATE_DETECTION;, +, +                    dynamicTemplates.toArray(new DynamicTemplate[dynamicTemplates.size()]),, +                    dateDetection);, +            } else if (fieldName.equals("date_detection")) {, +, +    private final boolean dateDetection;, +, +                     FormatDateTimeFormatter[] dateTimeFormatters, DynamicTemplate dynamicTemplates[], boolean dateDetection) {, +        this.dateDetection = dateDetection;, +    }, +, +    public boolean dateDetection() {, +        return this.dateDetection;, +, +        if (dateDetection != Defaults.DATE_DETECTION) {, +            builder.field("date_detection", Defaults.DATE_DETECTION);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +                if (context.root().dateDetection()) {, +                }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/object/RootObjectMapper.java, +        public static final boolean DATE_DETECTION = false;, +        protected boolean dateDetection = Defaults.DATE_DETECTION;, +, +                    dynamicTemplates.toArray(new DynamicTemplate[dynamicTemplates.size()]),, +                    dateDetection);, +            } else if (fieldName.equals("date_detection")) {, +, +    private final boolean dateDetection;, +, +                     FormatDateTimeFormatter[] dateTimeFormatters, DynamicTemplate dynamicTemplates[], boolean dateDetection) {, +        this.dateDetection = dateDetection;, +    }, +, +    public boolean dateDetection() {, +        return this.dateDetection;, +, +        if (dateDetection != Defaults.DATE_DETECTION) {, +            builder.field("date_detection", Defaults.DATE_DETECTION);, +        }, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/date/SimpleDateMappingTests.java, +, +    @Test public void testDateDetection() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .field("date_detection", false), +                .startObject("properties").startObject("date_field").field("type", "date").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = MapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("date_field", "2010-01-01"), +                .field("date_field_x", "2010-01-01"), +                .endObject(), +                .copiedBytes());, +, +        assertThat(doc.masterDoc().get("date_field"), nullValue());, +        assertThat(doc.masterDoc().get("date_field_x"), equalTo("2010-01-01"));, +    }]