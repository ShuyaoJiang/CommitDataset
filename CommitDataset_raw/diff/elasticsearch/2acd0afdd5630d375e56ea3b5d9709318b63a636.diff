[+++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +import static org.elasticsearch.xpack.XPackSettings.SECURITY_ENABLED;, +import static org.elasticsearch.xpack.XPackSettings.TRANSPORT_SSL_ENABLED;, +, +        // if they have any other type of license, then they are either okay or already know, +        final boolean clusterNeedsTLSEnabled = license.operationMode() == License.OperationMode.TRIAL &&, +                                               SECURITY_ENABLED.get(settings) &&, +                                               TRANSPORT_SSL_ENABLED.get(settings) == false;, +                        license, usage, clusterStats, clusterState, clusterNeedsTLSEnabled));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +import static org.elasticsearch.xpack.XPackSettings.SECURITY_ENABLED;, +import static org.elasticsearch.xpack.XPackSettings.TRANSPORT_SSL_ENABLED;, +, +        // if they have any other type of license, then they are either okay or already know, +        final boolean clusterNeedsTLSEnabled = license.operationMode() == License.OperationMode.TRIAL &&, +                                               SECURITY_ENABLED.get(settings) &&, +                                               TRANSPORT_SSL_ENABLED.get(settings) == false;, +                        license, usage, clusterStats, clusterState, clusterNeedsTLSEnabled));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsMonitoringDoc.java, +    private final boolean clusterNeedsTLSEnabled;, +                              @Nullable final ClusterState clusterState,, +                              final boolean clusterNeedsTLSEnabled) {, +        this.clusterNeedsTLSEnabled = clusterNeedsTLSEnabled;, +    boolean getClusterNeedsTLSEnabled() {, +        return clusterNeedsTLSEnabled;, +    }, +, +            if (clusterNeedsTLSEnabled) {, +                builder.field("cluster_needs_tls", true);, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +import static org.elasticsearch.xpack.XPackSettings.SECURITY_ENABLED;, +import static org.elasticsearch.xpack.XPackSettings.TRANSPORT_SSL_ENABLED;, +, +        // if they have any other type of license, then they are either okay or already know, +        final boolean clusterNeedsTLSEnabled = license.operationMode() == License.OperationMode.TRIAL &&, +                                               SECURITY_ENABLED.get(settings) &&, +                                               TRANSPORT_SSL_ENABLED.get(settings) == false;, +                        license, usage, clusterStats, clusterState, clusterNeedsTLSEnabled));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsMonitoringDoc.java, +    private final boolean clusterNeedsTLSEnabled;, +                              @Nullable final ClusterState clusterState,, +                              final boolean clusterNeedsTLSEnabled) {, +        this.clusterNeedsTLSEnabled = clusterNeedsTLSEnabled;, +    boolean getClusterNeedsTLSEnabled() {, +        return clusterNeedsTLSEnabled;, +    }, +, +            if (clusterNeedsTLSEnabled) {, +                builder.field("cluster_needs_tls", true);, +            }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollectorTests.java, +import java.util.Locale;, +import static org.elasticsearch.xpack.XPackSettings.SECURITY_ENABLED;, +import static org.elasticsearch.xpack.XPackSettings.TRANSPORT_SSL_ENABLED;, +        final Settings.Builder settings = Settings.builder();, +        final License.OperationMode mode =, +                randomValueOtherThan(License.OperationMode.MISSING, () -> randomFrom(License.OperationMode.values()));, +        final boolean securityEnabled = randomBoolean();, +        final boolean transportTLSEnabled;, +, +        if (securityEnabled) {, +            switch (mode) {, +                case TRIAL:, +                    transportTLSEnabled = randomBoolean();, +                    break;, +                case BASIC:, +                    transportTLSEnabled = false;, +                    break;, +                case STANDARD:, +                case GOLD:, +                case PLATINUM:, +                    transportTLSEnabled = true;, +                    break;, +                default:, +                    throw new AssertionError("Unknown mode [" + mode + "]");, +            }, +, +            settings.put(TRANSPORT_SSL_ENABLED.getKey(), transportTLSEnabled);, +        } else {, +            transportTLSEnabled = false;, +, +            settings.put(SECURITY_ENABLED.getKey(), false);, +        }, +, +                                        .type(mode.name().toLowerCase(Locale.ROOT)), +        assertThat(document.getClusterNeedsTLSEnabled(),, +                   equalTo(mode == License.OperationMode.TRIAL && securityEnabled && transportTLSEnabled == false));, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsCollector.java, +import static org.elasticsearch.xpack.XPackSettings.SECURITY_ENABLED;, +import static org.elasticsearch.xpack.XPackSettings.TRANSPORT_SSL_ENABLED;, +, +        // if they have any other type of license, then they are either okay or already know, +        final boolean clusterNeedsTLSEnabled = license.operationMode() == License.OperationMode.TRIAL &&, +                                               SECURITY_ENABLED.get(settings) &&, +                                               TRANSPORT_SSL_ENABLED.get(settings) == false;, +                        license, usage, clusterStats, clusterState, clusterNeedsTLSEnabled));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/monitoring/collector/cluster/ClusterStatsMonitoringDoc.java, +    private final boolean clusterNeedsTLSEnabled;]