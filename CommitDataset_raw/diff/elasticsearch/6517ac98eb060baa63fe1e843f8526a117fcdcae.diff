[+++ b/server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java, +    private volatile boolean closed;, +    public synchronized void save(Path configDir, char[] password) throws Exception {, +        ensureOpen();, +    /**, +     * It is possible to retrieve the setting names even if the keystore is closed., +     * This allows {@link SecureSetting} to correctly determine that a entry exists even though it cannot be read. Thus attempting to, +     * read a secure setting after the keystore is closed will generate a "keystore is closed" exception rather than using the fallback, +     * setting., +     */, +        assert entries.get() != null : "Keystore is not loaded";, +    public synchronized SecureString getString(String setting) {, +        ensureOpen();, +    public synchronized InputStream getFile(String setting) {, +        ensureOpen();, +    synchronized void setString(String setting, char[] value) {, +        ensureOpen();, +    synchronized void setFile(String setting, byte[] bytes) {, +        ensureOpen();, +        ensureOpen();, +    private void ensureOpen() {, +        if (closed) {, +            throw new IllegalStateException("Keystore is closed");, +        }, +        assert isLoaded() : "Keystore is not loaded";, +    }, +, +    public synchronized void close() {, +        this.closed = true;, +++ b/server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java, +    private volatile boolean closed;, +    public synchronized void save(Path configDir, char[] password) throws Exception {, +        ensureOpen();, +    /**, +     * It is possible to retrieve the setting names even if the keystore is closed., +     * This allows {@link SecureSetting} to correctly determine that a entry exists even though it cannot be read. Thus attempting to, +     * read a secure setting after the keystore is closed will generate a "keystore is closed" exception rather than using the fallback, +     * setting., +     */, +        assert entries.get() != null : "Keystore is not loaded";, +    public synchronized SecureString getString(String setting) {, +        ensureOpen();, +    public synchronized InputStream getFile(String setting) {, +        ensureOpen();, +    synchronized void setString(String setting, char[] value) {, +        ensureOpen();, +    synchronized void setFile(String setting, byte[] bytes) {, +        ensureOpen();, +        ensureOpen();, +    private void ensureOpen() {, +        if (closed) {, +            throw new IllegalStateException("Keystore is closed");, +        }, +        assert isLoaded() : "Keystore is not loaded";, +    }, +, +    public synchronized void close() {, +        this.closed = true;, +++ b/server/src/test/java/org/elasticsearch/common/settings/KeyStoreWrapperTests.java, +import org.hamcrest.Matchers;, +import static org.hamcrest.Matchers.notNullValue;, +    public void testCannotReadStringFromClosedKeystore() throws Exception {, +        KeyStoreWrapper keystore = KeyStoreWrapper.create();, +        assertThat(keystore.getSettingNames(), Matchers.hasItem(KeyStoreWrapper.SEED_SETTING.getKey()));, +        assertThat(keystore.getString(KeyStoreWrapper.SEED_SETTING.getKey()), notNullValue());, +, +        keystore.close();, +, +        assertThat(keystore.getSettingNames(), Matchers.hasItem(KeyStoreWrapper.SEED_SETTING.getKey()));, +        final IllegalStateException exception = expectThrows(IllegalStateException.class,, +            () -> keystore.getString(KeyStoreWrapper.SEED_SETTING.getKey()));, +        assertThat(exception.getMessage(), containsString("closed"));, +    }, +]