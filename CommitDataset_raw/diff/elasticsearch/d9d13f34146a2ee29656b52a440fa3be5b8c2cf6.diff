[+++ b/build.gradle, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.VersionCollection, +        if (distro.equals("integ-test-zip")) {, +            // short circuit integ test so it doesn't complicate the rest of the distribution setup below, +            project.dependencies.add(configuration.name,, +                    "org.elasticsearch.distribution.integ-test-zip:elasticsearch:${elasticsearchVersion}@zip"), +            return, +        }, +        if (['oss', 'default'].contains(distro) == false) {, +        String group = "downloads.zip" // dummy group, does not matter except for integ-test-zip, it is ignored by the fake ivy repo, +        String snapshotProject = distro == 'oss' ? 'oss-zip' : 'zip', +        Object dependency, +        boolean internalBuild = project.hasProperty('bwcVersions'), +        VersionCollection.UnreleasedVersionInfo unreleasedInfo = null, +        if (project.hasProperty('bwcVersions')) {, +            // NOTE: leniency is needed for external plugin authors using build-tools. maybe build the version compat info into build-tools?, +            unreleasedInfo = project.bwcVersions.unreleasedInfo(version), +        }, +        if (unreleasedInfo != null) {, +            dependency = project.dependencies.project(path: ":distribution:bwc:${unreleasedInfo.gradleProjectName}", configuration: snapshotProject), +        } else if (internalBuild && elasticsearchVersion.equals(VersionProperties.elasticsearch)) {, +            dependency = project.dependencies.project(path: ":distribution:archives:${snapshotProject}"), +        } else {, +            dependency = "${group}:${artifactName}:${elasticsearchVersion}@zip", +        }, +        project.dependencies.add(configuration.name, dependency), +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.VersionCollection, +        if (distro.equals("integ-test-zip")) {, +            // short circuit integ test so it doesn't complicate the rest of the distribution setup below, +            project.dependencies.add(configuration.name,, +                    "org.elasticsearch.distribution.integ-test-zip:elasticsearch:${elasticsearchVersion}@zip"), +            return, +        }, +        if (['oss', 'default'].contains(distro) == false) {, +        String group = "downloads.zip" // dummy group, does not matter except for integ-test-zip, it is ignored by the fake ivy repo, +        String snapshotProject = distro == 'oss' ? 'oss-zip' : 'zip', +        Object dependency, +        boolean internalBuild = project.hasProperty('bwcVersions'), +        VersionCollection.UnreleasedVersionInfo unreleasedInfo = null, +        if (project.hasProperty('bwcVersions')) {, +            // NOTE: leniency is needed for external plugin authors using build-tools. maybe build the version compat info into build-tools?, +            unreleasedInfo = project.bwcVersions.unreleasedInfo(version), +        }, +        if (unreleasedInfo != null) {, +            dependency = project.dependencies.project(path: ":distribution:bwc:${unreleasedInfo.gradleProjectName}", configuration: snapshotProject), +        } else if (internalBuild && elasticsearchVersion.equals(VersionProperties.elasticsearch)) {, +            dependency = project.dependencies.project(path: ":distribution:archives:${snapshotProject}"), +        } else {, +            dependency = "${group}:${artifactName}:${elasticsearchVersion}@zip", +        }, +        project.dependencies.add(configuration.name, dependency), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/vagrant/VagrantTestPlugin.groovy, +import org.elasticsearch.gradle.VersionCollection, +        List<Object> dependencies = new ArrayList<>(), +            dependencies.add(project.dependencies.project(path: ":distribution:${it}", configuration: 'default')), +        // The version of elasticsearch that we upgrade *from*, +        VersionCollection.UnreleasedVersionInfo unreleasedInfo = project.bwcVersions.unreleasedInfo(upgradeFromVersion), +        if (unreleasedInfo != null) {, +            // handle snapshots pointing to bwc build, +            UPGRADE_FROM_ARCHIVES.each {, +                dependencies.add(project.dependencies.project(, +                        path: ":distribution:bwc:${unreleasedInfo.gradleProjectName}", configuration: it)), +                if (upgradeFromVersion.onOrAfter('6.3.0')) {, +                    dependencies.add(project.dependencies.project(, +                            path: ":distribution:bwc:${unreleasedInfo.gradleProjectName}", configuration: "oss-${it}")), +                }, +            }, +        } else {, +                dependencies.add("downloads.${it}:elasticsearch:${upgradeFromVersion}@${it}"), +                    dependencies.add("downloads.${it}:elasticsearch-oss:${upgradeFromVersion}@${it}"), +        }, +, +        for (Object dependency : dependencies) {, +            project.dependencies.add(PACKAGING_CONFIGURATION, dependency), +        }, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +import org.elasticsearch.gradle.VersionCollection, +        if (distro.equals("integ-test-zip")) {, +            // short circuit integ test so it doesn't complicate the rest of the distribution setup below, +            project.dependencies.add(configuration.name,, +                    "org.elasticsearch.distribution.integ-test-zip:elasticsearch:${elasticsearchVersion}@zip"), +            return, +        }, +        if (['oss', 'default'].contains(distro) == false) {, +        String group = "downloads.zip" // dummy group, does not matter except for integ-test-zip, it is ignored by the fake ivy repo, +        String snapshotProject = distro == 'oss' ? 'oss-zip' : 'zip', +        Object dependency, +        boolean internalBuild = project.hasProperty('bwcVersions'), +        VersionCollection.UnreleasedVersionInfo unreleasedInfo = null, +        if (project.hasProperty('bwcVersions')) {, +            // NOTE: leniency is needed for external plugin authors using build-tools. maybe build the version compat info into build-tools?, +            unreleasedInfo = project.bwcVersions.unreleasedInfo(version), +        }, +        if (unreleasedInfo != null) {, +            dependency = project.dependencies.project(path: ":distribution:bwc:${unreleasedInfo.gradleProjectName}", configuration: snapshotProject)]