[+++ b/modules/test/integration/src/test/java/org/elasticsearch/test/stress/search1/Search1StressTest.java, +import org.elasticsearch.common.unit.SizeValue;, +import static org.elasticsearch.index.query.xcontent.QueryBuilders.*;, +, +    private SizeValue preIndexDocs = new SizeValue(0);, +    private TimeValue flusherThrottle = TimeValue.timeValueMillis(1000);, +    private TimeValue deleteByQueryThrottle = TimeValue.timeValueMillis(5000);, +    public Search1StressTest setPreIndexDocs(SizeValue preIndexDocs) {, +        this.preIndexDocs = preIndexDocs;, +        return this;, +    }, +, +    public Search1StressTest setFlusherThrottle(TimeValue flusherThrottle) {, +        this.flusherThrottle = flusherThrottle;, +        return this;, +    }, +, +    public Search1StressTest setDeleteByQueryThrottle(TimeValue deleteByQueryThrottle) {, +        this.deleteByQueryThrottle = deleteByQueryThrottle;, +        return this;, +    }, +, +                    builder.setQuery(termQuery("field", value));, +    private class Flusher extends Thread {, +        volatile boolean close = false;, +, +        volatile boolean closed = false;, +, +        @Override public void run() {, +            while (true) {, +                if (close) {, +                    closed = true;, +                    return;, +                }, +                try {, +                    client.client().admin().indices().prepareFlush().execute().actionGet();, +                    Thread.sleep(indexerThrottle.millis());, +                } catch (Exception e) {, +                    logger.warn("failed to flush / sleep", e);, +                }, +            }, +        }, +    }, +, +    private class DeleteByQuery extends Thread {, +        volatile boolean close = false;, +, +        volatile boolean closed = false;, +, +        @Override public void run() {, +            while (true) {, +                if (close) {, +                    closed = true;, +                    return;, +                }, +                try {, +                    client.client().prepareDeleteByQuery().setQuery(termQuery("num", nextNumValue())).execute().actionGet();, +                    Thread.sleep(deleteByQueryThrottle.millis());, +                } catch (Exception e) {, +                    logger.warn("failed to delete_by_query", e);, +                }, +            }, +        }, +    }, +, +        logger.info("Pre indexing docs [{}]...", preIndexDocs);, +        for (long i = 0; i < preIndexDocs.singles(); i++) {, +            indexDoc();, +        }, +        logger.info("Done pre indexing docs [{}]", preIndexDocs);, +, +        for (Indexer indexerThread : indexerThreads) {, +            indexerThread.start();, +        for (Searcher searcherThread : searcherThreads) {, +            searcherThread.start();, +        Flusher flusher = null;, +        if (flusherThrottle.millis() > 0) {, +            flusher = new Flusher();, +            flusher.start();, +        }, +, +        DeleteByQuery deleteByQuery = null;, +        if (deleteByQueryThrottle.millis() > 0) {, +            deleteByQuery = new DeleteByQuery();, +            deleteByQuery.start();, +        }, +, +, +        if (flusher != null) {, +            flusher.close = true;, +        if (deleteByQuery != null) {, +            deleteByQuery.close = true;, +        }, +, +        for (Searcher searcherThread : searcherThreads) {, +            searcherThread.close = true;, +        }, +, +        for (Indexer indexerThread : indexerThreads) {, +            indexerThread.close = true;]