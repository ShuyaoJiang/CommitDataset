[+++ b/docs/reference/query-dsl/percolate-query.asciidoc, +`document_type`:: The type / mapping of the document being percolated. This parameter is deprecated and will be removed in Elasticsearch 8.0., +`type`:: The type of the document to fetch. This parameter is deprecated and will be removed in Elasticsearch 8.0., +++ b/docs/reference/query-dsl/percolate-query.asciidoc, +`document_type`:: The type / mapping of the document being percolated. This parameter is deprecated and will be removed in Elasticsearch 8.0., +`type`:: The type of the document to fetch. This parameter is deprecated and will be removed in Elasticsearch 8.0., +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +    static final String DOCUMENT_TYPE_DEPRECATION_MESSAGE = "[types removal] Types are deprecated in [percolate] queries. " +, +            "The [document_type] should no longer be specified.";, +    static final String TYPE_DEPRECATION_MESSAGE = "[types removal] Types are deprecated in [percolate] queries. " +, +            "The [type] of the indexed document should no longer be specified.";, +    @Deprecated, +        GetRequest getRequest;, +        if (indexedDocumentType != null) {, +            deprecationLogger.deprecatedAndMaybeLog("percolate_with_type", TYPE_DEPRECATION_MESSAGE);, +            getRequest = new GetRequest(indexedDocumentIndex, indexedDocumentType, indexedDocumentId);, +        } else {, +            getRequest = new GetRequest(indexedDocumentIndex, indexedDocumentId);, +        }, +                        "indexed document [{}{}/{}] couldn't be found", indexedDocumentIndex,, +                        indexedDocumentType == null ? "" : "/" + indexedDocumentType, indexedDocumentId, +                        "indexed document [" + indexedDocumentIndex + (indexedDocumentType == null ? "" : "/" + indexedDocumentType) +, +                        "/" + indexedDocumentId + "] source disabled", +        if (indexedDocumentIndex != null || indexedDocumentId != null || documentSupplier != null) {, +            deprecationLogger.deprecatedAndMaybeLog("percolate_with_document_type", DOCUMENT_TYPE_DEPRECATION_MESSAGE);, +++ b/docs/reference/query-dsl/percolate-query.asciidoc, +`document_type`:: The type / mapping of the document being percolated. This parameter is deprecated and will be removed in Elasticsearch 8.0., +`type`:: The type of the document to fetch. This parameter is deprecated and will be removed in Elasticsearch 8.0., +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +    static final String DOCUMENT_TYPE_DEPRECATION_MESSAGE = "[types removal] Types are deprecated in [percolate] queries. " +, +            "The [document_type] should no longer be specified.";, +    static final String TYPE_DEPRECATION_MESSAGE = "[types removal] Types are deprecated in [percolate] queries. " +, +            "The [type] of the indexed document should no longer be specified.";, +    @Deprecated, +        GetRequest getRequest;, +        if (indexedDocumentType != null) {, +            deprecationLogger.deprecatedAndMaybeLog("percolate_with_type", TYPE_DEPRECATION_MESSAGE);, +            getRequest = new GetRequest(indexedDocumentIndex, indexedDocumentType, indexedDocumentId);, +        } else {, +            getRequest = new GetRequest(indexedDocumentIndex, indexedDocumentId);, +        }, +                        "indexed document [{}{}/{}] couldn't be found", indexedDocumentIndex,, +                        indexedDocumentType == null ? "" : "/" + indexedDocumentType, indexedDocumentId, +                        "indexed document [" + indexedDocumentIndex + (indexedDocumentType == null ? "" : "/" + indexedDocumentType) +, +                        "/" + indexedDocumentId + "] source disabled", +        if (indexedDocumentIndex != null || indexedDocumentId != null || documentSupplier != null) {, +            deprecationLogger.deprecatedAndMaybeLog("percolate_with_document_type", DOCUMENT_TYPE_DEPRECATION_MESSAGE);, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +import org.elasticsearch.common.lucene.uid.Versions;, +        docType = "_doc";, +            queryBuilder = new PercolateQueryBuilder(queryField, null, indexedDocumentIndex, null, indexedDocumentId,, +            queryBuilder = new PercolateQueryBuilder(queryField, null, documentSource, XContentType.JSON);, +        assertThat(getRequest.type(), Matchers.equalTo(MapperService.SINGLE_MAPPING_NAME));, +                    new GetResult(indexedDocumentIndex, MapperService.SINGLE_MAPPING_NAME, indexedDocumentId, 0, 1, 0L, true,, +                    new GetResult(indexedDocumentIndex, MapperService.SINGLE_MAPPING_NAME, indexedDocumentId, UNASSIGNED_SEQ_NO, 0, -1,, +        assertNull(queryBuilder.getDocumentType());, +        String expectedString = "indexed document [" + indexedDocumentIndex + "/" +, +    public void testFromJsonWithDocumentType() throws IOException {, +        QueryShardContext queryShardContext = createShardContext();, +        QueryBuilder queryBuilder = parseQuery("{\"percolate\" : { \"document\": {}, \"document_type\":\"" + docType  + "\", \"field\":\"" +, +                queryField + "\"}}");, +        queryBuilder.toQuery(queryShardContext);, +        assertWarnings(PercolateQueryBuilder.DOCUMENT_TYPE_DEPRECATION_MESSAGE);, +    }, +, +    public void testFromJsonNoType() throws IOException {, +        indexedDocumentIndex = randomAlphaOfLength(4);, +        indexedDocumentId = randomAlphaOfLength(4);, +        indexedDocumentVersion = Versions.MATCH_ANY;, +        documentSource = Collections.singletonList(randomSource(new HashSet<>()));, +, +        QueryShardContext queryShardContext = createShardContext();, +        QueryBuilder queryBuilder =  parseQuery("{\"percolate\" : { \"index\": \"" + indexedDocumentIndex + "\", \"id\": \"" +, +                indexedDocumentId + "\", \"field\":\"" + queryField + "\"}}");, +        rewriteAndFetch(queryBuilder, queryShardContext).toQuery(queryShardContext);, +    }, +, +    public void testFromJsonWithType() throws IOException {, +        indexedDocumentIndex = randomAlphaOfLength(4);, +        indexedDocumentId = randomAlphaOfLength(4);, +        indexedDocumentVersion = Versions.MATCH_ANY;, +        documentSource = Collections.singletonList(randomSource(new HashSet<>()));, +, +        QueryShardContext queryShardContext = createShardContext();, +        QueryBuilder queryBuilder =  parseQuery("{\"percolate\" : { \"index\": \"" + indexedDocumentIndex +, +                "\", \"type\": \"_doc\", \"id\": \"" + indexedDocumentId + "\", \"field\":\"" + queryField + "\"}}");, +        rewriteAndFetch(queryBuilder, queryShardContext).toQuery(queryShardContext);, +        assertWarnings(PercolateQueryBuilder.TYPE_DEPRECATION_MESSAGE);, +    }, +, +++ b/docs/reference/query-dsl/percolate-query.asciidoc, +`document_type`:: The type / mapping of the document being percolated. This parameter is deprecated and will be removed in Elasticsearch 8.0., +`type`:: The type of the document to fetch. This parameter is deprecated and will be removed in Elasticsearch 8.0., +++ b/modules/percolator/src/main/java/org/elasticsearch/percolator/PercolateQueryBuilder.java, +    static final String DOCUMENT_TYPE_DEPRECATION_MESSAGE = "[types removal] Types are deprecated in [percolate] queries. " +, +            "The [document_type] should no longer be specified.";, +    static final String TYPE_DEPRECATION_MESSAGE = "[types removal] Types are deprecated in [percolate] queries. " +, +            "The [type] of the indexed document should no longer be specified.";, +    @Deprecated, +        GetRequest getRequest;]