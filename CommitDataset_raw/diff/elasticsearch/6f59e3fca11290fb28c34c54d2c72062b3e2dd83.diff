[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.net.MalformedURLException;, +     * Checks the current classpath for duplicate classes, +            if (loader instanceof URLClassLoader ) {, +        }, +        checkJarHell(parseClassPath());, +    }, +    , +    /**, +     * Parses the classpath into a set of URLs, +     */, +    @SuppressForbidden(reason = "resolves against CWD because that is how classpaths work"), +    public static URL[] parseClassPath()  {, +        String elements[] = System.getProperty("java.class.path").split(System.getProperty("path.separator"));, +        URL urlElements[] = new URL[elements.length];, +        for (int i = 0; i < elements.length; i++) {, +            String element = elements[i];, +            // empty classpath element behaves like CWD., +            if (element.isEmpty()) {, +                element = System.getProperty("user.dir");, +            }, +            try {, +                urlElements[i] = PathUtils.get(element).toUri().toURL();, +            } catch (MalformedURLException e) {, +                // should not happen, as we use the filesystem API, +                throw new RuntimeException(e);, +            }, +        }, +        return urlElements;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.net.MalformedURLException;, +     * Checks the current classpath for duplicate classes, +            if (loader instanceof URLClassLoader ) {, +        }, +        checkJarHell(parseClassPath());, +    }, +    , +    /**, +     * Parses the classpath into a set of URLs, +     */, +    @SuppressForbidden(reason = "resolves against CWD because that is how classpaths work"), +    public static URL[] parseClassPath()  {, +        String elements[] = System.getProperty("java.class.path").split(System.getProperty("path.separator"));, +        URL urlElements[] = new URL[elements.length];, +        for (int i = 0; i < elements.length; i++) {, +            String element = elements[i];, +            // empty classpath element behaves like CWD., +            if (element.isEmpty()) {, +                element = System.getProperty("user.dir");, +            }, +            try {, +                urlElements[i] = PathUtils.get(element).toUri().toURL();, +            } catch (MalformedURLException e) {, +                // should not happen, as we use the filesystem API, +                throw new RuntimeException(e);, +            }, +        }, +        return urlElements;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        for (URL url : JarHell.parseClassPath()) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.net.MalformedURLException;, +     * Checks the current classpath for duplicate classes, +            if (loader instanceof URLClassLoader ) {, +        }, +        checkJarHell(parseClassPath());, +    }, +    , +    /**, +     * Parses the classpath into a set of URLs, +     */, +    @SuppressForbidden(reason = "resolves against CWD because that is how classpaths work"), +    public static URL[] parseClassPath()  {, +        String elements[] = System.getProperty("java.class.path").split(System.getProperty("path.separator"));, +        URL urlElements[] = new URL[elements.length];, +        for (int i = 0; i < elements.length; i++) {, +            String element = elements[i];, +            // empty classpath element behaves like CWD., +            if (element.isEmpty()) {, +                element = System.getProperty("user.dir");, +            }, +            try {, +                urlElements[i] = PathUtils.get(element).toUri().toURL();, +            } catch (MalformedURLException e) {, +                // should not happen, as we use the filesystem API, +                throw new RuntimeException(e);, +            }, +        }, +        return urlElements;, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java, +        for (URL url : JarHell.parseClassPath()) {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +        jars.addAll(Arrays.asList(JarHell.parseClassPath()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +import java.net.MalformedURLException;, +     * Checks the current classpath for duplicate classes, +            if (loader instanceof URLClassLoader ) {, +        }, +        checkJarHell(parseClassPath());, +    }]