[+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java, +        createIndex("test", Settings.EMPTY, "test", "field", "type=string");, +        createIndex("test", Settings.EMPTY, "test", fieldName, "type=double");, +        createIndex("test", Settings.EMPTY, "test", fieldName, "type=float");, +        assertThat(result.getAllFieldStats().get(fieldName).getMinValue(), equalTo(-1f));, +        assertThat(result.getAllFieldStats().get(fieldName).getMaxValue(), equalTo(9f));, +        createIndex("test", Settings.EMPTY, "test", fieldName, "type=" + fieldType);, +        createIndex("test1", Settings.EMPTY, "test", "field1", "type=string");, +        createIndex("test2", Settings.EMPTY, "test", "field2",  "type=string");, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java, +            static class MultiFieldParserContext extends ParserContext {, +++ b/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java, +        createIndex("test", Settings.EMPTY, "test", "field", "type=string");, +        createIndex("test", Settings.EMPTY, "test", fieldName, "type=double");, +        createIndex("test", Settings.EMPTY, "test", fieldName, "type=float");, +        assertThat(result.getAllFieldStats().get(fieldName).getMinValue(), equalTo(-1f));, +        assertThat(result.getAllFieldStats().get(fieldName).getMaxValue(), equalTo(9f));, +        createIndex("test", Settings.EMPTY, "test", fieldName, "type=" + fieldType);, +        createIndex("test1", Settings.EMPTY, "test", "field1", "type=string");, +        createIndex("test2", Settings.EMPTY, "test", "field2",  "type=string");, +++ b/core/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.index.mapper.core.DoubleFieldMapper;, +import org.elasticsearch.index.mapper.core.FloatFieldMapper;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.Map;, +import static org.hamcrest.Matchers.instanceOf;, +, +    public void testDefaultFloatingPointMappings() throws IOException {, +        DocumentMapper mapper = createIndex("test").mapperService().documentMapperWithAutoCreate("type").getDocumentMapper();, +        doTestDefaultFloatingPointMappings(mapper, XContentFactory.jsonBuilder());, +        doTestDefaultFloatingPointMappings(mapper, XContentFactory.yamlBuilder());, +        doTestDefaultFloatingPointMappings(mapper, XContentFactory.smileBuilder());, +        doTestDefaultFloatingPointMappings(mapper, XContentFactory.cborBuilder());, +    }, +, +    private void doTestDefaultFloatingPointMappings(DocumentMapper mapper, XContentBuilder builder) throws IOException {, +        BytesReference source = builder.startObject(), +                .field("foo", 3.2f) // float, +                .field("bar", 3.2d) // double, +                .field("baz", (double) 3.2f) // double that can be accurately represented as a float, +                .endObject().bytes();, +        ParsedDocument parsedDocument = mapper.parse("index", "type", "id", source);, +        Mapping update = parsedDocument.dynamicMappingsUpdate();, +        assertNotNull(update);, +        assertThat(update.root().getMapper("foo"), instanceOf(FloatFieldMapper.class));, +        assertThat(update.root().getMapper("bar"), instanceOf(FloatFieldMapper.class));, +        assertThat(update.root().getMapper("baz"), instanceOf(FloatFieldMapper.class));, +    }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java, +                        // no templates are defined, we use float by default instead of double, +                        // since this is much more space-efficient and should be enough most of, +                        // the time, +                        builder = MapperBuilders.floatField(currentFieldName);, +                    // no templates are defined, we use float by default instead of double, +                    // since this is much more space-efficient and should be enough most of, +                    // the time, +                    builder = MapperBuilders.floatField(currentFieldName);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/Mapper.java]