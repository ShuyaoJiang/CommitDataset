[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/tasks/TransportPendingClusterTasksAction.java, +        listener.onResponse(new PendingClusterTasksResponse(clusterService.pendingTasks()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/tasks/TransportPendingClusterTasksAction.java, +        listener.onResponse(new PendingClusterTasksResponse(clusterService.pendingTasks()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.search.fetch.FetchPhase;, +    private final FetchPhase fetchPhase;, +, +            TransportService transportService, IndicesService indicesService, ScriptService scriptService,, +            PageCacheRecycler pageCacheRecycler, BigArrays bigArrays, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver, FetchPhase fetchPhase) {, +        this.fetchPhase = fetchPhase;, +                new ShardSearchLocalRequest(request.types(), request.nowInMillis(), request.filteringAliases()), null, searcher,, +                indexService, indexShard, scriptService, pageCacheRecycler, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +                parseFieldMatcher, SearchService.NO_TIMEOUT, fetchPhase);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/tasks/TransportPendingClusterTasksAction.java, +        listener.onResponse(new PendingClusterTasksResponse(clusterService.pendingTasks()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.search.fetch.FetchPhase;, +    private final FetchPhase fetchPhase;, +, +            TransportService transportService, IndicesService indicesService, ScriptService scriptService,, +            PageCacheRecycler pageCacheRecycler, BigArrays bigArrays, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver, FetchPhase fetchPhase) {, +        this.fetchPhase = fetchPhase;, +                new ShardSearchLocalRequest(request.types(), request.nowInMillis(), request.filteringAliases()), null, searcher,, +                indexService, indexShard, scriptService, pageCacheRecycler, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +                parseFieldMatcher, SearchService.NO_TIMEOUT, fetchPhase);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        list.add(new BulkItemRequest(i, new DeleteRequest(deleteRequest)));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/tasks/TransportPendingClusterTasksAction.java, +        listener.onResponse(new PendingClusterTasksResponse(clusterService.pendingTasks()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.search.fetch.FetchPhase;, +    private final FetchPhase fetchPhase;, +, +            TransportService transportService, IndicesService indicesService, ScriptService scriptService,, +            PageCacheRecycler pageCacheRecycler, BigArrays bigArrays, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver, FetchPhase fetchPhase) {, +        this.fetchPhase = fetchPhase;, +                new ShardSearchLocalRequest(request.types(), request.nowInMillis(), request.filteringAliases()), null, searcher,, +                indexService, indexShard, scriptService, pageCacheRecycler, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +                parseFieldMatcher, SearchService.NO_TIMEOUT, fetchPhase);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        list.add(new BulkItemRequest(i, new DeleteRequest(deleteRequest)));, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.action.ActionRequest;, +    /**, +     * Copy constructor that creates a new delete request that is a copy of the one provided as an argument., +     */, +    public DeleteRequest(DeleteRequest request) {, +        this(request, request);, +    }, +, +    /**, +     * Copy constructor that creates a new delete request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public DeleteRequest(DeleteRequest request, ActionRequest originalRequest) {, +        super(request);, +        this.type = request.type();, +        this.id = request.id();, +        this.routing = request.routing();, +        this.parent = request.parent();, +        this.refresh = request.refresh();, +        this.version = request.version();, +        this.versionType = request.versionType();, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/tasks/TransportPendingClusterTasksAction.java, +        listener.onResponse(new PendingClusterTasksResponse(clusterService.pendingTasks()));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +import org.elasticsearch.search.fetch.FetchPhase;, +    private final FetchPhase fetchPhase;, +, +            TransportService transportService, IndicesService indicesService, ScriptService scriptService,, +            PageCacheRecycler pageCacheRecycler, BigArrays bigArrays, ActionFilters actionFilters,, +            IndexNameExpressionResolver indexNameExpressionResolver, FetchPhase fetchPhase) {, +        this.fetchPhase = fetchPhase;, +                new ShardSearchLocalRequest(request.types(), request.nowInMillis(), request.filteringAliases()), null, searcher,, +                indexService, indexShard, scriptService, pageCacheRecycler, bigArrays, threadPool.estimatedTimeInMillisCounter(),, +                parseFieldMatcher, SearchService.NO_TIMEOUT, fetchPhase);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +                        list.add(new BulkItemRequest(i, new DeleteRequest(deleteRequest)));, +++ b/core/src/main/java/org/elasticsearch/action/delete/DeleteRequest.java, +import org.elasticsearch.action.ActionRequest;, +    /**, +     * Copy constructor that creates a new delete request that is a copy of the one provided as an argument., +     */, +    public DeleteRequest(DeleteRequest request) {, +        this(request, request);, +    }, +, +    /**, +     * Copy constructor that creates a new delete request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public DeleteRequest(DeleteRequest request, ActionRequest originalRequest) {, +        super(request);, +        this.type = request.type();]