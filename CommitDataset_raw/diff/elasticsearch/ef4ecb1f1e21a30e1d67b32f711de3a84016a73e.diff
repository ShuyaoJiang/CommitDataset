[+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +import org.elasticsearch.client.Request;, + * Elasticsearch. Thus it often uses identifiers for versions like {@code 2000099}, +    static Request initialSearch(SearchRequest searchRequest, BytesReference query, Version remoteVersion) {, +        Request request = new Request("POST", path.toString());, +            request.addParameter("scroll", keepAlive.getStringRep());, +        request.addParameter("size", Integer.toString(searchRequest.source().size()));, +            request.addParameter("version", null);, +                request.addParameter("search_type", "scan");, +                request.addParameter("sort", sorts.toString());, +            request.addParameter(storedFieldsParamName, fields.toString());, +                /* We're intentionally a bit paranoid here - copying the query, +                 * as xcontent rather than writing a raw field. We don't want, +            request.setEntity(new ByteArrayEntity(bytes.bytes, bytes.offset, bytes.length, ContentType.APPLICATION_JSON));, +        return request;, +    static Request scroll(String scroll, TimeValue keepAlive, Version remoteVersion) {, +        Request request = new Request("POST", "/_search/scroll");, +        request.addParameter("scroll", keepAlive.getStringRep());, +            request.setEntity(new StringEntity(scroll, ContentType.TEXT_PLAIN));, +            return request;, +, +            entity.startObject(), +                .endObject();, +            request.setEntity(new StringEntity(Strings.toString(entity), ContentType.APPLICATION_JSON));, +        return request;, +    static Request clearScroll(String scroll, Version remoteVersion) {, +        Request request = new Request("DELETE", "/_search/scroll");, +, +            request.setEntity(new StringEntity(scroll, ContentType.TEXT_PLAIN));, +            return request;, +            entity.startObject(), +                .endObject();, +            request.setEntity(new StringEntity(Strings.toString(entity), ContentType.APPLICATION_JSON));, +        return request;, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +import org.elasticsearch.client.Request;, + * Elasticsearch. Thus it often uses identifiers for versions like {@code 2000099}, +    static Request initialSearch(SearchRequest searchRequest, BytesReference query, Version remoteVersion) {, +        Request request = new Request("POST", path.toString());, +            request.addParameter("scroll", keepAlive.getStringRep());, +        request.addParameter("size", Integer.toString(searchRequest.source().size()));, +            request.addParameter("version", null);, +                request.addParameter("search_type", "scan");, +                request.addParameter("sort", sorts.toString());, +            request.addParameter(storedFieldsParamName, fields.toString());, +                /* We're intentionally a bit paranoid here - copying the query, +                 * as xcontent rather than writing a raw field. We don't want, +            request.setEntity(new ByteArrayEntity(bytes.bytes, bytes.offset, bytes.length, ContentType.APPLICATION_JSON));, +        return request;, +    static Request scroll(String scroll, TimeValue keepAlive, Version remoteVersion) {, +        Request request = new Request("POST", "/_search/scroll");, +        request.addParameter("scroll", keepAlive.getStringRep());, +            request.setEntity(new StringEntity(scroll, ContentType.TEXT_PLAIN));, +            return request;, +, +            entity.startObject(), +                .endObject();, +            request.setEntity(new StringEntity(Strings.toString(entity), ContentType.APPLICATION_JSON));, +        return request;, +    static Request clearScroll(String scroll, Version remoteVersion) {, +        Request request = new Request("DELETE", "/_search/scroll");, +, +            request.setEntity(new StringEntity(scroll, ContentType.TEXT_PLAIN));, +            return request;, +            entity.startObject(), +                .endObject();, +            request.setEntity(new StringEntity(Strings.toString(entity), ContentType.APPLICATION_JSON));, +        return request;, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.common.xcontent.LoggingDeprecationHandler;, +import org.elasticsearch.common.xcontent.XContentParseException;, +            execute(RemoteRequestBuilders.initialSearch(searchRequest, query, remoteVersion),, +                    RESPONSE_PARSER, r -> onStartResponse(onResponse, r));, +        execute(new Request("GET", ""), MAIN_ACTION_PARSER, onVersion);, +        TimeValue keepAlive = timeValueNanos(searchRequest.scroll().keepAlive().nanos() + extraKeepAlive.nanos());, +        execute(RemoteRequestBuilders.scroll(scrollId, keepAlive, remoteVersion), RESPONSE_PARSER, onResponse);, +        client.performRequestAsync(RemoteRequestBuilders.clearScroll(scrollId, remoteVersion), new ResponseListener() {, +    private <T> void execute(Request request,, +                client.performRequestAsync(request, new ResponseListener() {, +++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteRequestBuilders.java, +import org.elasticsearch.client.Request;, + * Elasticsearch. Thus it often uses identifiers for versions like {@code 2000099}, +    static Request initialSearch(SearchRequest searchRequest, BytesReference query, Version remoteVersion) {, +        Request request = new Request("POST", path.toString());, +            request.addParameter("scroll", keepAlive.getStringRep());, +        request.addParameter("size", Integer.toString(searchRequest.source().size()));, +            request.addParameter("version", null);, +                request.addParameter("search_type", "scan");, +                request.addParameter("sort", sorts.toString());, +            request.addParameter(storedFieldsParamName, fields.toString());, +                /* We're intentionally a bit paranoid here - copying the query, +                 * as xcontent rather than writing a raw field. We don't want, +            request.setEntity(new ByteArrayEntity(bytes.bytes, bytes.offset, bytes.length, ContentType.APPLICATION_JSON));, +        return request;, +    static Request scroll(String scroll, TimeValue keepAlive, Version remoteVersion) {, +        Request request = new Request("POST", "/_search/scroll");, +        request.addParameter("scroll", keepAlive.getStringRep());, +            request.setEntity(new StringEntity(scroll, ContentType.TEXT_PLAIN));, +            return request;]