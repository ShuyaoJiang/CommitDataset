[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    public final static Method CLINIT      = getAsmMethod(void.class, "<clinit>");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    public final static Method CLINIT      = getAsmMethod(void.class, "<clinit>");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSource.java, +import org.objectweb.asm.Handle;, +import org.objectweb.asm.Type;, +import java.lang.invoke.MethodHandle;, +        if (!functions.isEmpty()) {, +            // write a reference to each function, +            for (SFunction function : functions) {, +                // XXX: Opcodes.ACC_FINAL too, +                writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_STATIC, , +                        "handle$" + function.name + "$" + function.parameters.size(), , +                        Type.getDescriptor(MethodHandle.class), , +                        null, , +                        null).visitEnd();, +            }, +            MethodWriter clinit = new MethodWriter(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, , +                                                   WriterConstants.CLINIT, writer, expressions);, +            for (SFunction function : functions) {, +                Handle handle = new Handle(Opcodes.H_INVOKESTATIC, , +                                           CLASS_TYPE.getInternalName(), , +                                           function.name, , +                                           function.method.method.getDescriptor(), , +                                           false);, +                clinit.push(handle);, +                clinit.putStatic(CLASS_TYPE, "handle$" + function.name + "$" + function.parameters.size(), Type.getType(MethodHandle.class));, +            }, +            clinit.returnValue();, +            clinit.endMethod();, +        }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +    public final static Method CLINIT      = getAsmMethod(void.class, "<clinit>");, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSource.java, +import org.objectweb.asm.Handle;, +import org.objectweb.asm.Type;, +import java.lang.invoke.MethodHandle;, +        if (!functions.isEmpty()) {, +            // write a reference to each function, +            for (SFunction function : functions) {, +                // XXX: Opcodes.ACC_FINAL too, +                writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_STATIC, , +                        "handle$" + function.name + "$" + function.parameters.size(), , +                        Type.getDescriptor(MethodHandle.class), , +                        null, , +                        null).visitEnd();, +            }, +            MethodWriter clinit = new MethodWriter(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, , +                                                   WriterConstants.CLINIT, writer, expressions);, +            for (SFunction function : functions) {, +                Handle handle = new Handle(Opcodes.H_INVOKESTATIC, , +                                           CLASS_TYPE.getInternalName(), , +                                           function.name, , +                                           function.method.method.getDescriptor(), , +                                           false);, +                clinit.push(handle);, +                clinit.putStatic(CLASS_TYPE, "handle$" + function.name + "$" + function.parameters.size(), Type.getType(MethodHandle.class));, +            }, +            clinit.returnValue();, +            clinit.endMethod();, +        }, +++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/FunctionRefTests.java, +        System.out.println(Debugger.toString("int mycompare(int i, int j) { return j - i; } " +, +                             "List l = new ArrayList(); l.add(2); l.add(1); l.sort(this::mycompare); return l.get(0);"));]