[+++ b/distribution/docker/build.gradle, +  final String classifier = 'linux-x86_64'            , +  final String elasticsearch = oss ? "elasticsearch-oss-${VersionProperties.elasticsearch}-${classifier}.tar.gz" : "elasticsearch-${VersionProperties.elasticsearch}-${classifier}.tar.gz", +    'elasticsearch'       : elasticsearch,, +    'source_elasticsearch': local() ? "COPY $elasticsearch /opt/" : "RUN curl --retry 8 -s -L -O https://artifacts.elastic.co/downloads/elasticsearch/${elasticsearch}",, +/*, + * We need to be able to render a Dockerfile that references the official artifacts on https://artifacts.elastic.co. For this, we use a, + * substitution in the Dockerfile template where we can either replace source_elasticsearch with a COPY from the Docker build context, or, + * a RUN curl command to retrieve the artifact from https://artifacts.elastic.co. The system property build.docker.source, which can be, + * either "local" (default) or "remote" controls which version of the Dockerfile is produced., + */, +private static boolean local() {, +  final String buildDockerSource = System.getProperty("build.docker.source"), +  if (buildDockerSource == null || "local".equals(buildDockerSource)) {, +    return true, +  } else if ("remote".equals(buildDockerSource)) {, +    return false, +  } else {, +    throw new IllegalArgumentException("expected build.docker.source to be [local] or [remote] but was [" + buildDockerSource + "]"), +  }, +}, +, +    if (local()) {, +}, +    dependsOn taskName("copy", oss, "DockerContext"), +++ b/distribution/docker/build.gradle, +  final String classifier = 'linux-x86_64'            , +  final String elasticsearch = oss ? "elasticsearch-oss-${VersionProperties.elasticsearch}-${classifier}.tar.gz" : "elasticsearch-${VersionProperties.elasticsearch}-${classifier}.tar.gz", +    'elasticsearch'       : elasticsearch,, +    'source_elasticsearch': local() ? "COPY $elasticsearch /opt/" : "RUN curl --retry 8 -s -L -O https://artifacts.elastic.co/downloads/elasticsearch/${elasticsearch}",, +/*, + * We need to be able to render a Dockerfile that references the official artifacts on https://artifacts.elastic.co. For this, we use a, + * substitution in the Dockerfile template where we can either replace source_elasticsearch with a COPY from the Docker build context, or, + * a RUN curl command to retrieve the artifact from https://artifacts.elastic.co. The system property build.docker.source, which can be, + * either "local" (default) or "remote" controls which version of the Dockerfile is produced., + */, +private static boolean local() {, +  final String buildDockerSource = System.getProperty("build.docker.source"), +  if (buildDockerSource == null || "local".equals(buildDockerSource)) {, +    return true, +  } else if ("remote".equals(buildDockerSource)) {, +    return false, +  } else {, +    throw new IllegalArgumentException("expected build.docker.source to be [local] or [remote] but was [" + buildDockerSource + "]"), +  }, +}, +, +    if (local()) {, +}, +    dependsOn taskName("copy", oss, "DockerContext"), +++ b/distribution/docker/src/docker/Dockerfile, +${source_elasticsearch}, +]