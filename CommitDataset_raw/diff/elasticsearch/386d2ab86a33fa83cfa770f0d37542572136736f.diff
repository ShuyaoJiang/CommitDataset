[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            from('src/site') {, +                include '_site/**', +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            from('src/site') {, +                include '_site/**', +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +    boolean jvm = true, +, +    @Input, +    boolean site = false, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            from('src/site') {, +                include '_site/**', +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +    boolean jvm = true, +, +    @Input, +    boolean site = false, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.jvm && extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin with jvm=true'), +                if (extension.jvm && extension.isolated == false) {, +            'jvm': extension.jvm as String,, +            'site': extension.site as String,, +            'classname': extension.jvm ? extension.classname : 'NA', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            from('src/site') {, +                include '_site/**', +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +    boolean jvm = true, +, +    @Input, +    boolean site = false, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.jvm && extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin with jvm=true'), +                if (extension.jvm && extension.isolated == false) {, +            'jvm': extension.jvm as String,, +            'site': extension.site as String,, +            'classname': extension.jvm ? extension.classname : 'NA', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            from('src/site') {, +                include '_site/**', +            }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +    boolean jvm = true, +, +    @Input, +    boolean site = false, +, +    @Input, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +            if (extension.jvm && extension.classname == null) {, +                throw new InvalidUserDataException('classname is a required setting for esplugin with jvm=true'), +                if (extension.jvm && extension.isolated == false) {, +            'jvm': extension.jvm as String,, +            'site': extension.site as String,, +            'classname': extension.jvm ? extension.classname : 'NA', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.get(src: "http://${node.httpUri()}",, +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +# A plugin can be 'site', 'jvm', or both., +#, +### example site plugin for "foo":, +#, +# foo.zip <-- zip file for the plugin, with this structure:, +#   _site/ <-- the contents that will be served, +#   plugin-descriptor.properties <-- example contents below:, +#, +# site=true, +# description=My cool plugin, +# version=1.0, +#, +### example jvm plugin for "foo", +# jvm=true, +, +### mandatory elements for site plugins:, +#, +# 'site': set to true to indicate contents of the _site/, +#  directory in the root of the plugin should be served., +site=${site}, +#, +### mandatory elements for jvm plugins :]