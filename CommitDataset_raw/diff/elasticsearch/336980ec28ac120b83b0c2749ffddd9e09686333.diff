[+++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/QueryInitRequest.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +, +import java.util.TimeZone;, +    public final TimeZone timeZone;, +    public QueryInitRequest(int fetchSize, String query, TimeZone timeZone, TimeoutInfo timeout) {, +        this.timeZone = timeZone;, +        timeZone = TimeZone.getTimeZone(in.readUTF());, +        timeout = new TimeoutInfo(in);, +        out.writeInt(action.value()); // NOCOMMIT this should be written by the caller, +        out.writeUTF(timeZone.getID());, +        timeout.encode(out);, +        StringBuilder b = new StringBuilder();, +        b.append("SqlInitReq[").append(query).append(']');, +        if (false == timeZone.getID().equals("UTC")) {, +            b.append('[').append(timeZone.getID()).append(']');, +        }, +        return b.toString();, +                && Objects.equals(timeout, other.timeout), +                && Objects.equals(timeZone.getID(), other.timeZone.getID());, +        return Objects.hash(fetchSize, query, timeout, timeZone.getID().hashCode());, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/QueryInitRequest.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +, +import java.util.TimeZone;, +    public final TimeZone timeZone;, +    public QueryInitRequest(int fetchSize, String query, TimeZone timeZone, TimeoutInfo timeout) {, +        this.timeZone = timeZone;, +        timeZone = TimeZone.getTimeZone(in.readUTF());, +        timeout = new TimeoutInfo(in);, +        out.writeInt(action.value()); // NOCOMMIT this should be written by the caller, +        out.writeUTF(timeZone.getID());, +        timeout.encode(out);, +        StringBuilder b = new StringBuilder();, +        b.append("SqlInitReq[").append(query).append(']');, +        if (false == timeZone.getID().equals("UTC")) {, +            b.append('[').append(timeZone.getID()).append(']');, +        }, +        return b.toString();, +                && Objects.equals(timeout, other.timeout), +                && Objects.equals(timeZone.getID(), other.timeZone.getID());, +        return Objects.hash(fetchSize, query, timeout, timeZone.getID().hashCode());, +++ b/sql/jdbc-proto/src/test/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/QueryInitRequestTests.java, +        return new QueryInitRequest(between(0, Integer.MAX_VALUE), randomAlphaOfLength(5), randomTimeZone(random()), randomTimeoutInfo());, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/QueryInitRequest.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +, +import java.util.TimeZone;, +    public final TimeZone timeZone;, +    public QueryInitRequest(int fetchSize, String query, TimeZone timeZone, TimeoutInfo timeout) {, +        this.timeZone = timeZone;, +        timeZone = TimeZone.getTimeZone(in.readUTF());, +        timeout = new TimeoutInfo(in);, +        out.writeInt(action.value()); // NOCOMMIT this should be written by the caller, +        out.writeUTF(timeZone.getID());, +        timeout.encode(out);, +        StringBuilder b = new StringBuilder();, +        b.append("SqlInitReq[").append(query).append(']');, +        if (false == timeZone.getID().equals("UTC")) {, +            b.append('[').append(timeZone.getID()).append(']');, +        }, +        return b.toString();, +                && Objects.equals(timeout, other.timeout), +                && Objects.equals(timeZone.getID(), other.timeZone.getID());, +        return Objects.hash(fetchSize, query, timeout, timeZone.getID().hashCode());, +++ b/sql/jdbc-proto/src/test/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/QueryInitRequestTests.java, +        return new QueryInitRequest(between(0, Integer.MAX_VALUE), randomAlphaOfLength(5), randomTimeZone(random()), randomTimeoutInfo());, +++ b/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcConfiguration.java, +import org.elasticsearch.xpack.sql.jdbc.util.Assert;, +import org.elasticsearch.xpack.sql.net.client.ConnectionConfiguration;, +import org.elasticsearch.xpack.sql.net.client.util.StringUtils;, +, +import java.util.TimeZone;, +    static final String TIME_ZONE = "time_zone";, +    static final String TIME_ZONE_DEFAULT = "UTC";, +, +    private static final List<String> KNOWN_OPTIONS = Arrays.asList(DEBUG, DEBUG_OUTPUT, TIME_ZONE);, +    private final TimeZone timeZone;, +        timeZone = TimeZone.getTimeZone(settings().getProperty(TIME_ZONE, TIME_ZONE_DEFAULT));, +    public TimeZone timeZone() {, +        return timeZone;, +    }, +, +++ b/sql/jdbc-proto/src/main/java/org/elasticsearch/xpack/sql/jdbc/net/protocol/QueryInitRequest.java, +import org.elasticsearch.xpack.sql.jdbc.net.protocol.Proto.Action;, +, +import java.util.TimeZone;, +    public final TimeZone timeZone;, +    public QueryInitRequest(int fetchSize, String query, TimeZone timeZone, TimeoutInfo timeout) {, +        this.timeZone = timeZone;, +        timeZone = TimeZone.getTimeZone(in.readUTF());, +        timeout = new TimeoutInfo(in);, +        out.writeInt(action.value()); // NOCOMMIT this should be written by the caller, +        out.writeUTF(timeZone.getID());, +        timeout.encode(out);, +        StringBuilder b = new StringBuilder();, +        b.append("SqlInitReq[").append(query).append(']');, +        if (false == timeZone.getID().equals("UTC")) {, +            b.append('[').append(timeZone.getID()).append(']');, +        }]