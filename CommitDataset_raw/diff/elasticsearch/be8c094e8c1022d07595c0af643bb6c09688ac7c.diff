[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    LinkedHashMap<String, Object> plugins = new LinkedHashMap<>(), +    @Input, +    void mavenPlugin(String name, String mavenCoords) {, +        plugins.put(name, mavenCoords), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    LinkedHashMap<String, Object> plugins = new LinkedHashMap<>(), +    @Input, +    void mavenPlugin(String name, String mavenCoords) {, +        plugins.put(name, mavenCoords), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            for (Map.Entry<String, Object> entry : config.plugins.entrySet()) {, +                configureBwcPluginDependency(project, entry.getValue(), bwcPlugins, config.bwcVersion), +    static void configureBwcPluginDependency(Project project, Object plugin, Configuration configuration, Version elasticsearchVersion) {, +        if (plugin instanceof Project) {, +            Project pluginProject = (Project)plugin, +            verifyProjectHasBuildPlugin(configuration.name, elasticsearchVersion, project, pluginProject), +        } else {, +            project.dependencies.add(configuration.name, "${plugin}@zip"), +        }, +        for (String pluginName : node.config.plugins.keySet()) {, +            String actionName = pluginTaskName('install', pluginName, 'Plugin'), +            setup = configureInstallPluginTask(taskName(prefix, node, actionName), project, setup, node, pluginName, prefix), +        for (Map.Entry<String, Object> plugin : node.config.plugins.entrySet()) {, +            String configurationName = pluginConfigurationName(prefix, plugin.key), +, +            if (plugin.getValue() instanceof Project) {, +                Project pluginProject = plugin.getValue(), +                verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +, +            } else {, +                project.dependencies.add(configurationName, "${plugin.getValue()}@zip"), +            }, +, +, +, +    private static String pluginConfigurationName(final String prefix, final String name) {, +        return "_plugin_${prefix}_${name}".replace(':', '_'), +    private static String pluginBwcConfigurationName(final String prefix, final String name) {, +        return "_plugin_bwc_${prefix}_${name}".replace(':', '_'), +        for (Map.Entry<String, Object> plugin : node.config.plugins.entrySet()) {, +            String configurationName = pluginBwcConfigurationName(prefix, plugin.key), +            if (plugin.getValue() instanceof Project) {, +                Project pluginProject = plugin.getValue(), +                verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +, +            } else {, +                project.dependencies.add(configurationName, "${plugin.getValue()}@zip"), +            }, +    static Task configureInstallPluginTask(String name, Project project, Task setup, NodeInfo node, String pluginName, String prefix) {, +            pluginZip = project.configurations.getByName(pluginBwcConfigurationName(prefix, pluginName)), +            pluginZip = project.configurations.getByName(pluginConfigurationName(prefix, pluginName)), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    LinkedHashMap<String, Object> plugins = new LinkedHashMap<>(), +    @Input, +    void mavenPlugin(String name, String mavenCoords) {, +        plugins.put(name, mavenCoords), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            for (Map.Entry<String, Object> entry : config.plugins.entrySet()) {, +                configureBwcPluginDependency(project, entry.getValue(), bwcPlugins, config.bwcVersion), +    static void configureBwcPluginDependency(Project project, Object plugin, Configuration configuration, Version elasticsearchVersion) {, +        if (plugin instanceof Project) {, +            Project pluginProject = (Project)plugin, +            verifyProjectHasBuildPlugin(configuration.name, elasticsearchVersion, project, pluginProject), +        } else {, +            project.dependencies.add(configuration.name, "${plugin}@zip"), +        }, +        for (String pluginName : node.config.plugins.keySet()) {, +            String actionName = pluginTaskName('install', pluginName, 'Plugin'), +            setup = configureInstallPluginTask(taskName(prefix, node, actionName), project, setup, node, pluginName, prefix), +        for (Map.Entry<String, Object> plugin : node.config.plugins.entrySet()) {, +            String configurationName = pluginConfigurationName(prefix, plugin.key), +, +            if (plugin.getValue() instanceof Project) {, +                Project pluginProject = plugin.getValue(), +                verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +, +            } else {, +                project.dependencies.add(configurationName, "${plugin.getValue()}@zip"), +            }, +, +, +, +    private static String pluginConfigurationName(final String prefix, final String name) {, +        return "_plugin_${prefix}_${name}".replace(':', '_'), +    private static String pluginBwcConfigurationName(final String prefix, final String name) {, +        return "_plugin_bwc_${prefix}_${name}".replace(':', '_'), +        for (Map.Entry<String, Object> plugin : node.config.plugins.entrySet()) {, +            String configurationName = pluginBwcConfigurationName(prefix, plugin.key), +            if (plugin.getValue() instanceof Project) {, +                Project pluginProject = plugin.getValue(), +                verifyProjectHasBuildPlugin(name, node.nodeVersion, project, pluginProject), +, +            } else {]