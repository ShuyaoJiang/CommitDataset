[+++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.geo.GeoHashUtils;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.index.fielddata.BytesValues.Iter;, +, +        final GeoPointValues values = getGeoPointValues();, +        return new BytesValues(values.isMultiValued()) {, +, +            @Override, +            public boolean hasValue(int docId) {, +                return values.hasValue(docId);, +            }, +, +            @Override, +            public BytesRef getValueScratch(int docId, BytesRef ret) {, +                GeoPoint value = values.getValue(docId);, +                if (value != null) {, +                    ret.copyChars(GeoHashUtils.encode(value.lat(), value.lon()));, +                } else {, +                    ret.length = 0;, +                }, +                return ret;, +            }, +, +            @Override, +            public Iter getIter(int docId) {, +                final GeoPointValues.Iter iter = values.getIter(docId);, +                return new BytesValues.Iter() {, +                    private final BytesRef spare = new BytesRef();, +, +                    @Override, +                    public boolean hasNext() {, +                        return iter.hasNext();, +                    }, +, +                    @Override, +                    public BytesRef next() {, +                        GeoPoint value  = iter.next();, +                        spare.copyChars(GeoHashUtils.encode(value.lat(), value.lon()));, +                        return spare;, +                    }, +, +                    @Override, +                    public int hash() {, +                        return spare.hashCode();, +                    }, +, +                };, +            }, +        };, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.geo.GeoHashUtils;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.index.fielddata.BytesValues.Iter;, +, +        final GeoPointValues values = getGeoPointValues();, +        return new BytesValues(values.isMultiValued()) {, +, +            @Override, +            public boolean hasValue(int docId) {, +                return values.hasValue(docId);, +            }, +, +            @Override, +            public BytesRef getValueScratch(int docId, BytesRef ret) {, +                GeoPoint value = values.getValue(docId);, +                if (value != null) {, +                    ret.copyChars(GeoHashUtils.encode(value.lat(), value.lon()));, +                } else {, +                    ret.length = 0;, +                }, +                return ret;, +            }, +, +            @Override, +            public Iter getIter(int docId) {, +                final GeoPointValues.Iter iter = values.getIter(docId);, +                return new BytesValues.Iter() {, +                    private final BytesRef spare = new BytesRef();, +, +                    @Override, +                    public boolean hasNext() {, +                        return iter.hasNext();, +                    }, +, +                    @Override, +                    public BytesRef next() {, +                        GeoPoint value  = iter.next();, +                        spare.copyChars(GeoHashUtils.encode(value.lat(), value.lon()));, +                        return spare;, +                    }, +, +                    @Override, +                    public int hash() {, +                        return spare.hashCode();]