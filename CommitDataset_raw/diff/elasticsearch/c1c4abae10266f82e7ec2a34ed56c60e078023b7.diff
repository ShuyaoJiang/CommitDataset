[+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasChildQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasChildQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasParentQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasChildQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasParentQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, +, +    public void testExtractInnerHitBuildersWithDuplicate() {, +        final HasChildQueryBuilder queryBuilder, +            = new HasChildQueryBuilder(CHILD_DOC, new WrapperQueryBuilder(new MatchAllQueryBuilder().toString()), ScoreMode.None);, +        queryBuilder.innerHit(new InnerHitBuilder("some_name"));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +            () -> InnerHitContextBuilder.extractInnerHits(queryBuilder, Collections.singletonMap("some_name", null)));, +    }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasChildQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasParentQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, +, +    public void testExtractInnerHitBuildersWithDuplicate() {, +        final HasChildQueryBuilder queryBuilder, +            = new HasChildQueryBuilder(CHILD_DOC, new WrapperQueryBuilder(new MatchAllQueryBuilder().toString()), ScoreMode.None);, +        queryBuilder.innerHit(new InnerHitBuilder("some_name"));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +            () -> InnerHitContextBuilder.extractInnerHits(queryBuilder, Collections.singletonMap("some_name", null)));, +    }, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasParentQueryBuilderTests.java, +, +    public void testExtractInnerHitBuildersWithDuplicate() {, +        final HasParentQueryBuilder queryBuilder, +            = new HasParentQueryBuilder(CHILD_DOC, new WrapperQueryBuilder(new MatchAllQueryBuilder().toString()), false);, +        queryBuilder.innerHit(new InnerHitBuilder("some_name"));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +            () -> InnerHitContextBuilder.extractInnerHits(queryBuilder, Collections.singletonMap("some_name", null)));, +    }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasChildQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/query/HasParentQueryBuilder.java, +            String name = innerHitBuilder.getName() != null ? innerHitBuilder.getName() : type;, +            if (innerHits.containsKey(name)) {, +                throw new IllegalArgumentException("[inner_hits] already contains an entry for key [" + name + "]");, +            }, +, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasChildQueryBuilderTests.java, +, +    public void testExtractInnerHitBuildersWithDuplicate() {, +        final HasChildQueryBuilder queryBuilder, +            = new HasChildQueryBuilder(CHILD_DOC, new WrapperQueryBuilder(new MatchAllQueryBuilder().toString()), ScoreMode.None);, +        queryBuilder.innerHit(new InnerHitBuilder("some_name"));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +            () -> InnerHitContextBuilder.extractInnerHits(queryBuilder, Collections.singletonMap("some_name", null)));, +    }, +++ b/modules/parent-join/src/test/java/org/elasticsearch/join/query/HasParentQueryBuilderTests.java, +, +    public void testExtractInnerHitBuildersWithDuplicate() {, +        final HasParentQueryBuilder queryBuilder, +            = new HasParentQueryBuilder(CHILD_DOC, new WrapperQueryBuilder(new MatchAllQueryBuilder().toString()), false);, +        queryBuilder.innerHit(new InnerHitBuilder("some_name"));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +            () -> InnerHitContextBuilder.extractInnerHits(queryBuilder, Collections.singletonMap("some_name", null)));, +    }, +++ b/server/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java]