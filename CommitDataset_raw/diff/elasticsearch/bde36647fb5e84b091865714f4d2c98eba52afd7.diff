[+++ b/src/main/java/org/elasticsearch/index/query/IdsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +        boolean idsProvided = false;, +                    idsProvided = true;, +        if (!idsProvided) {, +            throw new QueryParsingException(parseContext.index(), "[ids] filter requires providing a values element");, +        }, +, +        if (ids.isEmpty()) {, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/IdsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +        boolean idsProvided = false;, +                    idsProvided = true;, +        if (!idsProvided) {, +            throw new QueryParsingException(parseContext.index(), "[ids] filter requires providing a values element");, +        }, +, +        if (ids.isEmpty()) {, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +import org.elasticsearch.common.lucene.search.*;, +            throw new QueryParsingException(parseContext.index(), "terms filter requires a field name, followed by array of terms");, +        if (terms.isEmpty()) {, +            return Queries.MATCH_NO_FILTER;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/IdsFilterParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +        boolean idsProvided = false;, +                    idsProvided = true;, +        if (!idsProvided) {, +            throw new QueryParsingException(parseContext.index(), "[ids] filter requires providing a values element");, +        }, +, +        if (ids.isEmpty()) {, +            return Queries.MATCH_NO_FILTER;, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +import org.elasticsearch.common.lucene.search.*;, +            throw new QueryParsingException(parseContext.index(), "terms filter requires a field name, followed by array of terms");, +        if (terms.isEmpty()) {, +            return Queries.MATCH_NO_FILTER;, +        }, +, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +    public void testEmptyTermsFilter() throws Exception {, +        client.admin().indices().prepareDelete().execute().actionGet();, +        client.prepareIndex("test", "type", "1").setSource("term", "1").execute().actionGet();, +        client.prepareIndex("test", "type", "2").setSource("term", "2").execute().actionGet();, +        client.prepareIndex("test", "type", "3").setSource("term", "3").execute().actionGet();, +        client.prepareIndex("test", "type", "4").setSource("term", "4").execute().actionGet();, +        client.admin().indices().prepareRefresh().execute().actionGet();, +, +        SearchResponse searchResponse = client.prepareSearch("test"), +                .setQuery(filteredQuery(matchAllQuery(), termsFilter("term", new String[0])), +                ).execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.getShardFailures()), searchResponse.getShardFailures().length, equalTo(0));, +        assertThat(searchResponse.getHits().getTotalHits(), equalTo(0l));, +, +        searchResponse = client.prepareSearch("test"), +                .setQuery(filteredQuery(matchAllQuery(), idsFilter()), +                ).execute().actionGet();, +        assertThat("Failures " + Arrays.toString(searchResponse.getShardFailures()), searchResponse.getShardFailures().length, equalTo(0));, +        assertThat(searchResponse.getHits().getTotalHits(), equalTo(0l));, +    }, +, +    @Test]