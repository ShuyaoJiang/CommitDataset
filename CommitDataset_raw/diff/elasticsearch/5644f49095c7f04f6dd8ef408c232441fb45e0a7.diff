[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        metadata.scorerValueSlot = utility.addVariable(null, "#scorer", definition.objectType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        metadata.scorerValueSlot = utility.addVariable(null, "#scorer", definition.objectType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Executable.java, +import org.apache.lucene.search.Scorer;, +, +    public abstract Object execute(Map<String, Object> input, Scorer scorer);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        metadata.scorerValueSlot = utility.addVariable(null, "#scorer", definition.objectType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Executable.java, +import org.apache.lucene.search.Scorer;, +, +    public abstract Object execute(Map<String, Object> input, Scorer scorer);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Metadata.java, +     * Used to determine what slot the Scorer variable is stored in.  This is used in the {@link Writer} to load, +     * _score from it, if _score will be accessed by the script., +     */, +    int scorerValueSlot = -1;, +, +    /**, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        metadata.scorerValueSlot = utility.addVariable(null, "#scorer", definition.objectType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Executable.java, +import org.apache.lucene.search.Scorer;, +, +    public abstract Object execute(Map<String, Object> input, Scorer scorer);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Metadata.java, +     * Used to determine what slot the Scorer variable is stored in.  This is used in the {@link Writer} to load, +     * _score from it, if _score will be accessed by the script., +     */, +    int scorerValueSlot = -1;, +, +    /**, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +     * Current scorer being used, +     * @see #setScorer(Scorer), +     */, +    private Scorer scorer;, +, +    /**, +        return executable.execute(variables, scorer);, +        this.scorer = scorer;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        metadata.scorerValueSlot = utility.addVariable(null, "#scorer", definition.objectType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Executable.java, +import org.apache.lucene.search.Scorer;, +, +    public abstract Object execute(Map<String, Object> input, Scorer scorer);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Metadata.java, +     * Used to determine what slot the Scorer variable is stored in.  This is used in the {@link Writer} to load, +     * _score from it, if _score will be accessed by the script., +     */, +    int scorerValueSlot = -1;, +, +    /**, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +     * Current scorer being used, +     * @see #setScorer(Scorer), +     */, +    private Scorer scorer;, +, +    /**, +        return executable.execute(variables, scorer);, +        this.scorer = scorer;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Writer.java, +            // if the _score value is used, we do this once:, +            //   float _score = scorer.score();, +            execute.visitVarInsn(Opcodes.ALOAD, metadata.scorerValueSlot);, +            execute.invokeVirtual(WriterConstants.SCORER_TYPE, WriterConstants.SCORER_SCORE);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Analyzer.java, +        metadata.scorerValueSlot = utility.addVariable(null, "#scorer", definition.objectType).slot;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Executable.java, +import org.apache.lucene.search.Scorer;, +, +    public abstract Object execute(Map<String, Object> input, Scorer scorer);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Metadata.java, +     * Used to determine what slot the Scorer variable is stored in.  This is used in the {@link Writer} to load, +     * _score from it, if _score will be accessed by the script., +     */, +    int scorerValueSlot = -1;, +, +    /**, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptImpl.java, +     * Current scorer being used, +     * @see #setScorer(Scorer), +     */, +    private Scorer scorer;, +, +    /**, +        return executable.execute(variables, scorer);, +        this.scorer = scorer;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/Writer.java, +            // if the _score value is used, we do this once:, +            //   float _score = scorer.score();, +            execute.visitVarInsn(Opcodes.ALOAD, metadata.scorerValueSlot);, +            execute.invokeVirtual(WriterConstants.SCORER_TYPE, WriterConstants.SCORER_SCORE);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/WriterConstants.java, +import org.apache.lucene.search.Scorer;, +    final static Method EXECUTE     = getAsmMethod(Object.class, "execute", Map.class, Scorer.class);]