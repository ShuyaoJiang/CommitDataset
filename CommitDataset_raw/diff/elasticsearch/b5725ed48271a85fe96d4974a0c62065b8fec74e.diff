[+++ b/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java, +    @Input, +    public Map<String, Set<File>> classFilesPerTask(FileTree testClassFiles) {, +        Map<String, Set<File>> collector = new HashMap<>();, +        // RandomizedTestingTask, +        collector.putAll(, +            Stream.concat(, +                getProject().getTasks().withType(getRandomizedTestingTask()).stream(),, +                // Look at sub-projects too. As sometimes tests are implemented in parent but ran in sub-projects against, +                // different configurations, +                getProject().getSubprojects().stream().flatMap(subproject ->, +                    subproject.getTasks().withType(getRandomizedTestingTask()).stream(), +                ), +            ), +                .filter(Task::getEnabled), +                .collect(Collectors.toMap(, +                    Task::getPath,, +                    task -> testClassFiles.matching(getRandomizedTestingPatternSet(task)).getFiles(), +            )), +        );, +        // Gradle Test, +        collector.putAll(, +            Stream.concat(, +                getProject().getTasks().withType(Test.class).stream(),, +                getProject().getSubprojects().stream().flatMap(subproject ->, +                        subproject.getTasks().withType(Test.class).stream(), +                ), +            ), +                .filter(Task::getEnabled), +                .collect(Collectors.toMap(, +                    Task::getPath,, +                    task -> task.getCandidateClassFiles().getFiles(), +                )), +        );, +        return Collections.unmodifiableMap(collector);, +    }, +, +    @Input, +    public Map<String, File> getTestClassNames() {, +        if (testClassNames == null) {, +            testClassNames = Boilerplate.getJavaSourceSets(getProject()).getByName("test").getOutput().getClassesDirs(), +                .getFiles().stream(), +                .filter(File::exists), +                .flatMap(testRoot -> walkPathAndLoadClasses(testRoot).entrySet().stream()), +                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));, +        }, +        return testClassNames;, +    }, +, +    @OutputFile, +    public File getSuccessMarker() {, +        return new File(getProject().getBuildDir(), "markers/" + getName());, +    }, +]