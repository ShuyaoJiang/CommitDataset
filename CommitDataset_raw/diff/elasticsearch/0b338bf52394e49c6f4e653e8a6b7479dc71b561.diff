[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import java.util.Arrays;, +import java.util.Objects;, +import java.util.stream.Stream;, +        docs = in.readOptionalStreamable(DocsStats::new);, +        store = in.readOptionalStreamable(StoreStats::new);, +        indexing = in.readOptionalStreamable(IndexingStats::new);, +        get = in.readOptionalStreamable(GetStats::new);, +        search = in.readOptionalStreamable(SearchStats::new);, +        merge = in.readOptionalStreamable(MergeStats::new);, +        refresh =  in.readOptionalStreamable(RefreshStats::new);, +        flush =  in.readOptionalStreamable(FlushStats::new);, +        warmer =  in.readOptionalStreamable(WarmerStats::new);, +        queryCache = in.readOptionalStreamable(QueryCacheStats::new);, +        fieldData =  in.readOptionalStreamable(FieldDataStats::new);, +        completion =  in.readOptionalStreamable(CompletionStats::new);, +        segments =  in.readOptionalStreamable(SegmentsStats::new);, +        out.writeOptionalStreamable(docs);, +        out.writeOptionalStreamable(store);, +        out.writeOptionalStreamable(indexing);, +        out.writeOptionalStreamable(get);, +        out.writeOptionalStreamable(search);, +        out.writeOptionalStreamable(merge);, +        out.writeOptionalStreamable(refresh);, +        out.writeOptionalStreamable(flush);, +        out.writeOptionalStreamable(warmer);, +        out.writeOptionalStreamable(queryCache);, +        out.writeOptionalStreamable(fieldData);, +        out.writeOptionalStreamable(completion);, +        out.writeOptionalStreamable(segments);, +        final Stream<ToXContent> stream = Arrays.stream(new ToXContent[] {, +            docs, store, indexing, get, search, merge, refresh, flush, warmer, queryCache,, +            fieldData, completion, segments, translog, requestCache, recoveryStats}), +            .filter(Objects::nonNull);, +        for (ToXContent toXContent : ((Iterable<ToXContent>)stream::iterator)) {, +            toXContent.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import java.util.Arrays;, +import java.util.Objects;, +import java.util.stream.Stream;, +        docs = in.readOptionalStreamable(DocsStats::new);, +        store = in.readOptionalStreamable(StoreStats::new);, +        indexing = in.readOptionalStreamable(IndexingStats::new);, +        get = in.readOptionalStreamable(GetStats::new);, +        search = in.readOptionalStreamable(SearchStats::new);, +        merge = in.readOptionalStreamable(MergeStats::new);, +        refresh =  in.readOptionalStreamable(RefreshStats::new);, +        flush =  in.readOptionalStreamable(FlushStats::new);, +        warmer =  in.readOptionalStreamable(WarmerStats::new);, +        queryCache = in.readOptionalStreamable(QueryCacheStats::new);, +        fieldData =  in.readOptionalStreamable(FieldDataStats::new);, +        completion =  in.readOptionalStreamable(CompletionStats::new);, +        segments =  in.readOptionalStreamable(SegmentsStats::new);, +        out.writeOptionalStreamable(docs);, +        out.writeOptionalStreamable(store);, +        out.writeOptionalStreamable(indexing);, +        out.writeOptionalStreamable(get);, +        out.writeOptionalStreamable(search);, +        out.writeOptionalStreamable(merge);, +        out.writeOptionalStreamable(refresh);, +        out.writeOptionalStreamable(flush);, +        out.writeOptionalStreamable(warmer);, +        out.writeOptionalStreamable(queryCache);, +        out.writeOptionalStreamable(fieldData);, +        out.writeOptionalStreamable(completion);, +        out.writeOptionalStreamable(segments);, +        final Stream<ToXContent> stream = Arrays.stream(new ToXContent[] {, +            docs, store, indexing, get, search, merge, refresh, flush, warmer, queryCache,, +            fieldData, completion, segments, translog, requestCache, recoveryStats}), +            .filter(Objects::nonNull);, +        for (ToXContent toXContent : ((Iterable<ToXContent>)stream::iterator)) {, +            toXContent.toXContent(builder, params);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +        shards = in.readArray(ShardStats::readShardStats, (size) -> new ShardStats[size]);, +        out.writeArray(shards);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import java.util.Arrays;, +import java.util.Objects;, +import java.util.stream.Stream;, +        docs = in.readOptionalStreamable(DocsStats::new);, +        store = in.readOptionalStreamable(StoreStats::new);, +        indexing = in.readOptionalStreamable(IndexingStats::new);, +        get = in.readOptionalStreamable(GetStats::new);, +        search = in.readOptionalStreamable(SearchStats::new);, +        merge = in.readOptionalStreamable(MergeStats::new);, +        refresh =  in.readOptionalStreamable(RefreshStats::new);, +        flush =  in.readOptionalStreamable(FlushStats::new);, +        warmer =  in.readOptionalStreamable(WarmerStats::new);, +        queryCache = in.readOptionalStreamable(QueryCacheStats::new);, +        fieldData =  in.readOptionalStreamable(FieldDataStats::new);, +        completion =  in.readOptionalStreamable(CompletionStats::new);, +        segments =  in.readOptionalStreamable(SegmentsStats::new);, +        out.writeOptionalStreamable(docs);, +        out.writeOptionalStreamable(store);, +        out.writeOptionalStreamable(indexing);, +        out.writeOptionalStreamable(get);, +        out.writeOptionalStreamable(search);, +        out.writeOptionalStreamable(merge);, +        out.writeOptionalStreamable(refresh);, +        out.writeOptionalStreamable(flush);]