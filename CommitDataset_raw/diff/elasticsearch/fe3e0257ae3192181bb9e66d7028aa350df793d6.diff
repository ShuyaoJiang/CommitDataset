[+++ b/docs/reference/modules/snapshots.asciidoc, +Snapshot names can be automatically derived using <<date-math-index-names,date math expressions>>, similarly as when creating, +new indices. Note that special characters need to be URI encoded., +, +For example, creating a snapshot with the current day in the name, like `snapshot-2018.05.11`, can be achieved with, +the following command:, +[source,js], +-----------------------------------, +# PUT /_snapshot/my_backup/<snapshot-{now/d}>, +PUT /_snapshot/my_backup/%3Csnapshot-%7Bnow%2Fd%7D%3E, +-----------------------------------, +// CONSOLE, +// TEST[continued], +, +, +++ b/docs/reference/modules/snapshots.asciidoc, +Snapshot names can be automatically derived using <<date-math-index-names,date math expressions>>, similarly as when creating, +new indices. Note that special characters need to be URI encoded., +, +For example, creating a snapshot with the current day in the name, like `snapshot-2018.05.11`, can be achieved with, +the following command:, +[source,js], +-----------------------------------, +# PUT /_snapshot/my_backup/<snapshot-{now/d}>, +PUT /_snapshot/my_backup/%3Csnapshot-%7Bnow%2Fd%7D%3E, +-----------------------------------, +// CONSOLE, +// TEST[continued], +, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.snapshot());, +                new SnapshotsService.SnapshotRequest(request.repository(), snapshotName, "create_snapshot [" + snapshotName + "]"), +                                    snapshot.getSnapshotId().getName().equals(snapshotName)) {, +                                    snapshot.getSnapshotId().getName().equals(snapshotName)) {, +++ b/docs/reference/modules/snapshots.asciidoc, +Snapshot names can be automatically derived using <<date-math-index-names,date math expressions>>, similarly as when creating, +new indices. Note that special characters need to be URI encoded., +, +For example, creating a snapshot with the current day in the name, like `snapshot-2018.05.11`, can be achieved with, +the following command:, +[source,js], +-----------------------------------, +# PUT /_snapshot/my_backup/<snapshot-{now/d}>, +PUT /_snapshot/my_backup/%3Csnapshot-%7Bnow%2Fd%7D%3E, +-----------------------------------, +// CONSOLE, +// TEST[continued], +, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/create/TransportCreateSnapshotAction.java, +        final String snapshotName = indexNameExpressionResolver.resolveDateMathExpression(request.snapshot());, +                new SnapshotsService.SnapshotRequest(request.repository(), snapshotName, "create_snapshot [" + snapshotName + "]"), +                                    snapshot.getSnapshotId().getName().equals(snapshotName)) {, +                                    snapshot.getSnapshotId().getName().equals(snapshotName)) {, +++ b/server/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreIT.java, +import org.elasticsearch.client.AdminClient;, +import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.util.set.Sets;, +import org.elasticsearch.rest.RestStatus;, +import static org.hamcrest.Matchers.hasSize;, +    public void testSnapshotWithDateMath() {, +        final String repo = "repo";, +        final AdminClient admin = client().admin();, +, +        final IndexNameExpressionResolver nameExpressionResolver = new IndexNameExpressionResolver(Settings.EMPTY);, +        final String snapshotName = "<snapshot-{now/d}>";, +, +        logger.info("-->  creating repository");, +        assertAcked(admin.cluster().preparePutRepository(repo).setType("fs"), +            .setSettings(Settings.builder().put("location", randomRepoPath()), +                .put("compress", randomBoolean())));, +, +        final String expression1 = nameExpressionResolver.resolveDateMathExpression(snapshotName);, +        logger.info("-->  creating date math snapshot");, +        CreateSnapshotResponse snapshotResponse =, +            admin.cluster().prepareCreateSnapshot(repo, snapshotName), +                .setIncludeGlobalState(true), +                .setWaitForCompletion(true), +                .get();, +        assertThat(snapshotResponse.status(), equalTo(RestStatus.OK));, +        // snapshot could be taken before or after a day rollover, +        final String expression2 = nameExpressionResolver.resolveDateMathExpression(snapshotName);, +, +        SnapshotsStatusResponse response = admin.cluster().prepareSnapshotStatus(repo), +            .setSnapshots(Sets.newHashSet(expression1, expression2).toArray(Strings.EMPTY_ARRAY)), +            .setIgnoreUnavailable(true), +            .get();, +        List<SnapshotStatus> snapshots = response.getSnapshots();, +        assertThat(snapshots, hasSize(1));, +        assertThat(snapshots.get(0).getState().completed(), equalTo(true));, +    }, +]