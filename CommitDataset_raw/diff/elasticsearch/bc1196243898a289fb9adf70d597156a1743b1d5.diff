[+++ /dev/null, +++ /dev/null, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/20_repository.yaml, +              uri: "hdfs://localhost:36909", +    # Get repository, +++ /dev/null, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/20_repository.yaml, +              uri: "hdfs://localhost:36909", +    # Get repository, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/30_snapshot.yaml, +            uri: "hdfs://localhost:36909", +  # ghetto teardown, so we can debug this thing with external hdfs, +  - do:, +      snapshot.delete:, +        repository: test_repo_hdfs_snapshot, +        snapshot: test_snapshot, +++ /dev/null, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/20_repository.yaml, +              uri: "hdfs://localhost:36909", +    # Get repository, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/30_snapshot.yaml, +            uri: "hdfs://localhost:36909", +  # ghetto teardown, so we can debug this thing with external hdfs, +  - do:, +      snapshot.delete:, +        repository: test_repo_hdfs_snapshot, +        snapshot: test_snapshot, +++ b/plugins/repository-hdfs/src/test/resources/rest-api-spec/test/hdfs_repository/40_restore.yaml, +# Integration tests for HDFS Repository plugin, +#, +# Actually perform a snapshot to hdfs, then restore it, +#, +---, +setup:, +, +  - do:, +      snapshot.create_repository:, +        repository: test_repo_hdfs_restore, +        verify: false, +        body:, +          type: hdfs, +          settings:, +            uri: "hdfs://localhost:36909", +            path: "foo/bar", +, +  - do:, +      indices.create:, +        index: test_index, +        body:, +          settings:, +            number_of_shards:   1, +            number_of_replicas: 0, +, +  - do:, +      cluster.health:, +        wait_for_status: green, +, +---, +"Create a snapshot and then restore it":, +, +  - do:, +      snapshot.create:, +        repository: test_repo_hdfs_restore, +        snapshot: test_restore, +        wait_for_completion: true, +, +  - match: { snapshot.snapshot: test_restore }, +  - match: { snapshot.state : SUCCESS }, +  - match: { snapshot.shards.successful: 1 }, +  - match: { snapshot.shards.failed : 0 }, +  - is_true: snapshot.version, +  - gt: { snapshot.version_id: 0}, +, +  - do:, +      indices.close:, +        index : test_index, +, +  - do:, +      snapshot.restore:, +        repository: test_repo_hdfs_restore, +        snapshot: test_restore, +        wait_for_completion: true, +, +  - do:, +      indices.recovery:, +        index: test_index, +, +  - match: { test_index.shards.0.type: SNAPSHOT }, +  - match: { test_index.shards.0.stage: DONE }, +  - match: { test_index.shards.0.index.files.recovered: 1}, +  - gt: { test_index.shards.0.index.size.recovered_in_bytes: 0}, +  - match: { test_index.shards.0.index.files.reused: 0}, +  - match: { test_index.shards.0.index.size.reused_in_bytes: 0}, +, +  # ghetto teardown, so we can debug this thing with external hdfs, +  - do:, +      snapshot.delete:, +        repository: test_repo_hdfs_restore, +        snapshot: test_restore]