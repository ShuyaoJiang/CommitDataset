[+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +    static final Setting<Boolean> COERCE_SETTING =, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/NumberFieldMapper.java, +    static final Setting<Boolean> COERCE_SETTING =, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/ScaledFloatFieldMapper.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.core;, +, +import org.apache.lucene.document.Field;, +import org.apache.lucene.index.DocValues;, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.NumericDocValues;, +import org.apache.lucene.index.SortedNumericDocValues;, +import org.apache.lucene.search.BoostQuery;, +import org.apache.lucene.search.Query;, +import org.elasticsearch.action.fieldstats.FieldStats;, +import org.elasticsearch.common.Explicit;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.common.xcontent.XContentParser.Token;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.fielddata.AtomicNumericFieldData;, +import org.elasticsearch.index.fielddata.FieldData;, +import org.elasticsearch.index.fielddata.IndexFieldData;, +import org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.Nested;, +import org.elasticsearch.index.fielddata.IndexFieldDataCache;, +import org.elasticsearch.index.fielddata.IndexNumericFieldData;, +import org.elasticsearch.index.fielddata.NumericDoubleValues;, +import org.elasticsearch.index.fielddata.ScriptDocValues;, +import org.elasticsearch.index.fielddata.SortedBinaryDocValues;, +import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;, +import org.elasticsearch.index.fielddata.fieldcomparator.DoubleValuesComparatorSource;, +import org.elasticsearch.index.fielddata.plain.DocValuesIndexFieldData;, +import org.elasticsearch.index.mapper.FieldMapper;, +import org.elasticsearch.index.mapper.MappedFieldType;, +import org.elasticsearch.index.mapper.Mapper;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.index.mapper.ParseContext;, +import org.elasticsearch.index.mapper.core.LegacyNumberFieldMapper.Defaults;, +import org.elasticsearch.index.mapper.internal.AllFieldMapper;, +import org.elasticsearch.index.query.QueryShardContext;, +import org.elasticsearch.indices.breaker.CircuitBreakerService;, +import org.elasticsearch.search.DocValueFormat;, +import org.elasticsearch.search.MultiValueMode;, +import org.joda.time.DateTimeZone;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +, +/** A {@link FieldMapper} for scaled floats. Values are internally multiplied, + *  by a scaling factor and rounded to the closest long. */, +public class ScaledFloatFieldMapper extends FieldMapper implements AllFieldMapper.IncludeInAll {, +, +    public static final String CONTENT_TYPE = "scaled_float";, +    // use the same default as numbers, +    private static final Setting<Boolean> COERCE_SETTING = NumberFieldMapper.COERCE_SETTING;, +, +    public static class Builder extends FieldMapper.Builder<Builder, ScaledFloatFieldMapper> {, +, +        private boolean scalingFactorSet = false;, +        private Boolean ignoreMalformed;, +        private Boolean coerce;, +, +        public Builder(String name) {, +            super(name, new ScaledFloatFieldType(), new ScaledFloatFieldType());, +            builder = this;, +        }, +, +        public Builder ignoreMalformed(boolean ignoreMalformed) {, +            this.ignoreMalformed = ignoreMalformed;, +            return builder;, +        }]