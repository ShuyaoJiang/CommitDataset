[+++ b/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +            String fId = in.readOptionalString();, +            out.writeOptionalString(failure.getId());, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +            String fId = in.readOptionalString();, +            out.writeOptionalString(failure.getId());, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.ElasticsearchParseException;, +import java.util.*;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +        for (int i = 0; i < bulkRequest.requests.size(); i++) {, +            ActionRequest request = bulkRequest.requests.get(i);, +                try {, +                } catch (ElasticsearchParseException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "index", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +                }, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +            String fId = in.readOptionalString();, +            out.writeOptionalString(failure.getId());, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.ElasticsearchParseException;, +import java.util.*;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +        for (int i = 0; i < bulkRequest.requests.size(); i++) {, +            ActionRequest request = bulkRequest.requests.get(i);, +                try {, +                } catch (ElasticsearchParseException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "index", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +                }, +++ b/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +                    throw new ElasticsearchParseException("failed to parse doc to extract routing/timestamp/id", e);, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java, +            String fId = in.readOptionalString();, +            out.writeOptionalString(failure.getId());, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.ElasticsearchParseException;, +import java.util.*;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +        for (int i = 0; i < bulkRequest.requests.size(); i++) {, +            ActionRequest request = bulkRequest.requests.get(i);, +                try {, +                } catch (ElasticsearchParseException e) {, +                    BulkItemResponse.Failure failure = new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), e);, +                    BulkItemResponse bulkItemResponse = new BulkItemResponse(i, "index", failure);, +                    responses.set(i, bulkItemResponse);, +                    // make sure the request gets never processed again, +                    bulkRequest.requests.set(i, null);, +                }, +++ b/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +                    throw new ElasticsearchParseException("failed to parse doc to extract routing/timestamp/id", e);, +++ b/src/test/java/org/elasticsearch/document/BulkTests.java, +import com.google.common.base.Charsets;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +    @Test // issue 4745, +    public void preParsingSourceDueToMappingShouldNotBreakCompleteBulkRequest() throws Exception {, +        XContentBuilder builder = jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("_timestamp"), +                        .field("enabled", true), +                        .field("path", "last_modified"), +                    .endObject(), +                .endObject(), +            .endObject();, +        CreateIndexResponse createIndexResponse = prepareCreate("test").addMapping("type", builder).get();, +        assertAcked(createIndexResponse);, +, +        String brokenBuildRequestData = "{\"index\": {\"_id\": \"1\"}}\n" +, +                "{\"name\": \"Malformed}\n" +, +                "{\"index\": {\"_id\": \"2\"}}\n" +, +                "{\"name\": \"Good\", \"last_modified\" : \"2013-04-05\"}\n";, +, +        BulkResponse bulkResponse = client().prepareBulk().add(brokenBuildRequestData.getBytes(Charsets.UTF_8), 0, brokenBuildRequestData.length(), false, "test", "type").setRefresh(true).get();, +        assertThat(bulkResponse.getItems().length, is(2));, +        assertThat(bulkResponse.getItems()[0].isFailed(), is(true));, +        assertThat(bulkResponse.getItems()[1].isFailed(), is(false));, +, +        assertExists(get("test", "type", "2"));, +    }, +, +    @Test // issue 4745, +    public void preParsingSourceDueToRoutingShouldNotBreakCompleteBulkRequest() throws Exception {, +        XContentBuilder builder = jsonBuilder().startObject(), +                .startObject("type"), +                    .startObject("_routing"), +                        .field("required", true), +                        .field("path", "my_routing"), +                    .endObject(), +                .endObject()]