[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +            XPackPlugin.resolveConfigFile(env, "license_mode"), logger,, +            () -> updateLicenseState(getLicensesMetaData()));, +        final LicensesMetaData licensesMetaData = getLicensesMetaData();, +                updateLicenseState(license, licensesMetaData.getMostRecentTrialVersion());, +    private LicensesMetaData getLicensesMetaData() {, +        return this.clusterService.state().metaData().custom(LicensesMetaData.TYPE);, +    }, +, +    private void updateLicenseState(LicensesMetaData licensesMetaData) {, +        if (licensesMetaData != null) {, +            updateLicenseState(getLicense(licensesMetaData), licensesMetaData.getMostRecentTrialVersion());, +        }, +    }, +, +    protected void updateLicenseState(final License license, Version mostRecentTrialVersion) {, +            licenseState.update(License.OperationMode.MISSING, false, mostRecentTrialVersion);, +            licenseState.update(license.operationMode(), active, mostRecentTrialVersion);, +            updateLicenseState(license, currentLicensesMetaData.getMostRecentTrialVersion());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +            XPackPlugin.resolveConfigFile(env, "license_mode"), logger,, +            () -> updateLicenseState(getLicensesMetaData()));, +        final LicensesMetaData licensesMetaData = getLicensesMetaData();, +                updateLicenseState(license, licensesMetaData.getMostRecentTrialVersion());, +    private LicensesMetaData getLicensesMetaData() {, +        return this.clusterService.state().metaData().custom(LicensesMetaData.TYPE);, +    }, +, +    private void updateLicenseState(LicensesMetaData licensesMetaData) {, +        if (licensesMetaData != null) {, +            updateLicenseState(getLicense(licensesMetaData), licensesMetaData.getMostRecentTrialVersion());, +        }, +    }, +, +    protected void updateLicenseState(final License license, Version mostRecentTrialVersion) {, +            licenseState.update(License.OperationMode.MISSING, false, mostRecentTrialVersion);, +            licenseState.update(license.operationMode(), active, mostRecentTrialVersion);, +            updateLicenseState(license, currentLicensesMetaData.getMostRecentTrialVersion());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.logging.Loggers;, +    private volatile boolean isSecurityEnabledByTrialVersion;, +        this.isSecurityEnabledByTrialVersion = false;, +    /**, +     * Updates the current state of the license, which will change what features are available., +     *, +     * @param mode   The mode (type) of the current license., +     * @param active True if the current license exists and is within its allowed usage period; false if it is expired or missing., +     * @param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that., +     *                               May be {@code null} if they have never generated a trial license on this cluster, or the most recent, +     *                               trial was prior to this metadata being tracked (6.1), +     */, +    void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {, +        if (isSecurityEnabled == true && isSecurityExplicitlyEnabled == false && mode == OperationMode.TRIAL, +            && isSecurityEnabledByTrialVersion == false) {, +            // Before 6.3, Trial licenses would default having security enabled., +            // If this license was generated before that version, then treat it as if security is explicitly enabled, +            if (mostRecentTrialVersion == null || mostRecentTrialVersion.before(Version.V_6_3_0)) {, +                Loggers.getLogger(getClass()).info("Automatically enabling security for older trial license ({})",, +                    mostRecentTrialVersion == null ? "[pre 6.1.0]" : mostRecentTrialVersion.toString());, +                isSecurityEnabledByTrialVersion = true;, +            }, +        }, +        return mode == OperationMode.TRIAL ? (isSecurityExplicitlyEnabled || isSecurityEnabledByTrialVersion) : isSecurityEnabled;, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java, +            XPackPlugin.resolveConfigFile(env, "license_mode"), logger,, +            () -> updateLicenseState(getLicensesMetaData()));, +        final LicensesMetaData licensesMetaData = getLicensesMetaData();, +                updateLicenseState(license, licensesMetaData.getMostRecentTrialVersion());, +    private LicensesMetaData getLicensesMetaData() {, +        return this.clusterService.state().metaData().custom(LicensesMetaData.TYPE);, +    }, +, +    private void updateLicenseState(LicensesMetaData licensesMetaData) {, +        if (licensesMetaData != null) {, +            updateLicenseState(getLicense(licensesMetaData), licensesMetaData.getMostRecentTrialVersion());, +        }, +    }, +, +    protected void updateLicenseState(final License license, Version mostRecentTrialVersion) {, +            licenseState.update(License.OperationMode.MISSING, false, mostRecentTrialVersion);, +            licenseState.update(license.operationMode(), active, mostRecentTrialVersion);, +            updateLicenseState(license, currentLicensesMetaData.getMostRecentTrialVersion());, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/XPackLicenseState.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.common.logging.Loggers;, +    private volatile boolean isSecurityEnabledByTrialVersion;, +        this.isSecurityEnabledByTrialVersion = false;, +    /**, +     * Updates the current state of the license, which will change what features are available., +     *, +     * @param mode   The mode (type) of the current license., +     * @param active True if the current license exists and is within its allowed usage period; false if it is expired or missing., +     * @param mostRecentTrialVersion If this cluster has, at some point commenced a trial, the most recent version on which they did that., +     *                               May be {@code null} if they have never generated a trial license on this cluster, or the most recent, +     *                               trial was prior to this metadata being tracked (6.1), +     */, +    void update(OperationMode mode, boolean active, @Nullable Version mostRecentTrialVersion) {]