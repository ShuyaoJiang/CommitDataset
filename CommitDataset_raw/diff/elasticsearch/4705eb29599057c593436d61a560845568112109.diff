[+++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +            final TermsEnum termsEnum = terms.iterator(null);, +            final TermsEnum termsEnum = terms.iterator(null);, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +            final TermsEnum termsEnum = terms.iterator(null);, +            final TermsEnum termsEnum = terms.iterator(null);, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +      , +    }, +    , +    public static final class BloomFilteredTerms extends Terms {, +                    bfte.reset(delegateTerms);, +                reuse = bfte.reuse;, +            result = new BloomFilteredTermsEnum(delegateTerms, reuse, filter);, +    static final class BloomFilteredTermsEnum extends TermsEnum {, +        private Terms delegateTerms;, +        private TermsEnum delegateTermsEnum;, +        private TermsEnum reuse;, +        public BloomFilteredTermsEnum(Terms other, TermsEnum reuse, BloomFilter filter) {, +            this.delegateTerms = other;, +            this.reuse = reuse;, +        void reset(Terms others) {, +            reuse = this.delegateTermsEnum;, +            this.delegateTermsEnum = null;, +            this.delegateTerms = others;, +        }, +        , +        private TermsEnum getDelegate() throws IOException {, +            if (delegateTermsEnum == null) {, +                /* pull the iterator only if we really need it -, +                 * this can be a relatively heavy operation depending on the , +                 * delegate postings format and they underlying directory, +                 * (clone IndexInput) */, +                delegateTermsEnum = delegateTerms.iterator(reuse);, +            }, +            return delegateTermsEnum;, +        }, +, +            return getDelegate().next();, +            return delegateTerms.getComparator();, +            return getDelegate().seekExact(text, useCache);, +            return getDelegate().seekCeil(text, useCache);, +            getDelegate().seekExact(ord);, +            return getDelegate().term();, +            return getDelegate().ord();, +            return getDelegate().docFreq();, +            return getDelegate().totalTermFreq();, +            return getDelegate().docsAndPositions(liveDocs, reuse, flags);, +            return getDelegate().docs(liveDocs, reuse, flags);, +++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +            final TermsEnum termsEnum = terms.iterator(null);, +            final TermsEnum termsEnum = terms.iterator(null);, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +      , +    }, +    , +    public static final class BloomFilteredTerms extends Terms {, +                    bfte.reset(delegateTerms);, +                reuse = bfte.reuse;, +            result = new BloomFilteredTermsEnum(delegateTerms, reuse, filter);, +    static final class BloomFilteredTermsEnum extends TermsEnum {, +        private Terms delegateTerms;, +        private TermsEnum delegateTermsEnum;, +        private TermsEnum reuse;, +        public BloomFilteredTermsEnum(Terms other, TermsEnum reuse, BloomFilter filter) {, +            this.delegateTerms = other;, +            this.reuse = reuse;, +        void reset(Terms others) {, +            reuse = this.delegateTermsEnum;, +            this.delegateTermsEnum = null;, +            this.delegateTerms = others;, +        }, +        , +        private TermsEnum getDelegate() throws IOException {, +            if (delegateTermsEnum == null) {, +                /* pull the iterator only if we really need it -, +                 * this can be a relatively heavy operation depending on the , +                 * delegate postings format and they underlying directory, +                 * (clone IndexInput) */, +                delegateTermsEnum = delegateTerms.iterator(reuse);, +            }, +            return delegateTermsEnum;, +        }, +, +            return getDelegate().next();, +            return delegateTerms.getComparator();, +            return getDelegate().seekExact(text, useCache);, +            return getDelegate().seekCeil(text, useCache);, +            getDelegate().seekExact(ord);, +            return getDelegate().term();, +            return getDelegate().ord();, +            return getDelegate().docFreq();, +            return getDelegate().totalTermFreq();, +            return getDelegate().docsAndPositions(liveDocs, reuse, flags);, +            return getDelegate().docs(liveDocs, reuse, flags);, +++ b/src/test/java/org/elasticsearch/test/unit/index/codec/postingformat/DefaultPostingsFormatTests.java, +        assertThat(terms, not(instanceOf(BloomFilterPostingsFormat.BloomFilteredTerms.class)));, +        assertThat(uidTerms, instanceOf(BloomFilterPostingsFormat.BloomFilteredTerms.class));, +        assertThat(terms, not(instanceOf(BloomFilterPostingsFormat.BloomFilteredTerms.class)));, +        assertThat(some_other_field, not(instanceOf(BloomFilterPostingsFormat.BloomFilteredTerms.class)));]