[+++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onFailure(Throwable t) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onFailure(Throwable t) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private void sendShardAction(final String actionName, final ClusterStateObserver observer, final ShardRoutingEntry shardRoutingEntry, final Listener listener) {, +            logger.warn("{} no master known for action [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +            waitForNewMasterAndRetry(actionName, observer, shardRoutingEntry, listener);, +                actionName, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                            waitForNewMasterAndRetry(actionName, observer, shardRoutingEntry, listener);, +                            logger.warn("{} unexpected failure while sending request [{}] to [{}] for shard [{}]", exp, shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode, shardRoutingEntry);, +                            listener.onFailure(exp.getCause());, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardAction(SHARD_FAILED_ACTION_NAME, observer, shardRoutingEntry, listener);, +    }, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard [{}], index UUID [{}], reason [{}]", shardRouting.shardId(), failure, shardRouting, indexUUID, message);, +        shardFailed(shardRouting, indexUUID, message, failure, listener);, +    }, +, +    protected void waitForNewMasterAndRetry(String actionName, ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardAction(actionName, observer, shardRoutingEntry, listener);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().getId(), actionName, shardRoutingEntry.getShardRouting());, +                listener.onFailure(new NodeClosedException(clusterService.localNode()));, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String message, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, null);, +        sendShardAction(SHARD_STARTED_ACTION_NAME, observer, shardRoutingEntry, listener);, +         * @param t the unexpected cause of the failure on the master, +        default void onFailure(final Throwable t) {, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onFailure(Throwable t) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private void sendShardAction(final String actionName, final ClusterStateObserver observer, final ShardRoutingEntry shardRoutingEntry, final Listener listener) {, +            logger.warn("{} no master known for action [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +            waitForNewMasterAndRetry(actionName, observer, shardRoutingEntry, listener);, +                actionName, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                            waitForNewMasterAndRetry(actionName, observer, shardRoutingEntry, listener);, +                            logger.warn("{} unexpected failure while sending request [{}] to [{}] for shard [{}]", exp, shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode, shardRoutingEntry);, +                            listener.onFailure(exp.getCause());, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardAction(SHARD_FAILED_ACTION_NAME, observer, shardRoutingEntry, listener);, +    }, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard [{}], index UUID [{}], reason [{}]", shardRouting.shardId(), failure, shardRouting, indexUUID, message);, +        shardFailed(shardRouting, indexUUID, message, failure, listener);, +    }, +, +    protected void waitForNewMasterAndRetry(String actionName, ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardAction(actionName, observer, shardRoutingEntry, listener);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().getId(), actionName, shardRoutingEntry.getShardRouting());, +                listener.onFailure(new NodeClosedException(clusterService.localNode()));, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String message, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, null);, +        sendShardAction(SHARD_STARTED_ACTION_NAME, observer, shardRoutingEntry, listener);, +         * @param t the unexpected cause of the failure on the master, +        default void onFailure(final Throwable t) {, +++ b/core/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                    shardStateAction.shardStarted(shardRouting, indexMetaData.getIndexUUID(),, +                        "master " + nodes.masterNode() + " marked shard as initializing, but shard state is [" + indexShard.state() + "], mark shard as started",, +                        SHARD_STATE_ACTION_LISTENER);, +                        shardStateAction.shardStarted(shardRouting, indexMetaData.getIndexUUID(), "after recovery from store", SHARD_STATE_ACTION_LISTENER);, +                        shardStateAction.shardStarted(shardRouting, indexMetaData.getIndexUUID(), "after recovery from repository", SHARD_STATE_ACTION_LISTENER);, +            shardStateAction.shardStarted(shardRouting, indexMetaData.getIndexUUID(), "after recovery (replica) from node [" + state.getSourceNode() + "]", SHARD_STATE_ACTION_LISTENER);, +++ b/core/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java, +                                        public void onFailure(Throwable t) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +    private void sendShardAction(final String actionName, final ClusterStateObserver observer, final ShardRoutingEntry shardRoutingEntry, final Listener listener) {, +            logger.warn("{} no master known for action [{}] for shard [{}]", shardRoutingEntry.getShardRouting().shardId(), actionName, shardRoutingEntry.getShardRouting());, +            waitForNewMasterAndRetry(actionName, observer, shardRoutingEntry, listener);, +                actionName, shardRoutingEntry, new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +                            waitForNewMasterAndRetry(actionName, observer, shardRoutingEntry, listener);, +                            logger.warn("{} unexpected failure while sending request [{}] to [{}] for shard [{}]", exp, shardRoutingEntry.getShardRouting().shardId(), actionName, masterNode, shardRoutingEntry);, +                            listener.onFailure(exp.getCause());, +    public void shardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, failure);, +        sendShardAction(SHARD_FAILED_ACTION_NAME, observer, shardRoutingEntry, listener);, +    }, +, +    public void resendShardFailed(final ShardRouting shardRouting, final String indexUUID, final String message, @Nullable final Throwable failure, Listener listener) {, +        logger.trace("{} re-sending failed shard [{}], index UUID [{}], reason [{}]", shardRouting.shardId(), failure, shardRouting, indexUUID, message);, +        shardFailed(shardRouting, indexUUID, message, failure, listener);, +    }, +, +    protected void waitForNewMasterAndRetry(String actionName, ClusterStateObserver observer, ShardRoutingEntry shardRoutingEntry, Listener listener) {, +                sendShardAction(actionName, observer, shardRoutingEntry, listener);, +                logger.warn("{} node closed while execution action [{}] for shard [{}]", shardRoutingEntry.failure, shardRoutingEntry.getShardRouting().getId(), actionName, shardRoutingEntry.getShardRouting());, +                listener.onFailure(new NodeClosedException(clusterService.localNode()));, +    public void shardStarted(final ShardRouting shardRouting, String indexUUID, final String message, Listener listener) {, +        ClusterStateObserver observer = new ClusterStateObserver(clusterService, null, logger);, +        ShardRoutingEntry shardRoutingEntry = new ShardRoutingEntry(shardRouting, indexUUID, message, null);, +        sendShardAction(SHARD_STARTED_ACTION_NAME, observer, shardRoutingEntry, listener);]