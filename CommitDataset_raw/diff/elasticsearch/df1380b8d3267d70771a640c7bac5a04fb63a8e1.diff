[+++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    indexRequest.getAutoGeneratedTimestamp(), indexRequest.isRetry(), sourceToParse);, +                    deleteRequest.type(), deleteRequest.id());, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    indexRequest.getAutoGeneratedTimestamp(), indexRequest.isRetry(), sourceToParse);, +                    deleteRequest.type(), deleteRequest.id());, +++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    indexRequest.getAutoGeneratedTimestamp(), indexRequest.isRetry(), sourceToParse);, +                    deleteRequest.type(), deleteRequest.id());, +++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    indexRequest.getAutoGeneratedTimestamp(), indexRequest.isRetry(), sourceToParse);, +                    deleteRequest.type(), deleteRequest.id());, +++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    assert index.version() == 1 && index.versionType() == null, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    indexRequest.getAutoGeneratedTimestamp(), indexRequest.isRetry(), sourceToParse);, +                    deleteRequest.type(), deleteRequest.id());, +++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    assert index.version() == 1 && index.versionType() == null, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        assert versionType.validateVersionForWrites(version);, +    public Engine.IndexResult applyIndexOperationOnReplica(long seqNo, long version, long autoGeneratedTimeStamp,, +                                                           boolean isRetry, SourceToParse sourceToParse), +        return applyIndexOperation(seqNo, primaryTerm, version, null, autoGeneratedTimeStamp, isRetry,, +    private Engine.IndexResult applyIndexOperation(long seqNo, long opPrimaryTerm, long version, @Nullable VersionType versionType,, +        assert versionType.validateVersionForWrites(version);, +    public Engine.DeleteResult applyDeleteOperationOnReplica(long seqNo, long version, String type, String id) throws IOException {, +        return applyDeleteOperation(seqNo, primaryTerm, version, type, id, null, Engine.Operation.Origin.REPLICA);, +                                                     @Nullable VersionType versionType, Engine.Operation.Origin origin) throws IOException {, +                    null, index.getAutoGeneratedIdTimestamp(), true, origin,, +                    null, origin);, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    indexRequest.getAutoGeneratedTimestamp(), indexRequest.isRetry(), sourceToParse);, +                    deleteRequest.type(), deleteRequest.id());, +++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                    assert index.version() == 1 && index.versionType() == null, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        assert versionType.validateVersionForWrites(version);, +    public Engine.IndexResult applyIndexOperationOnReplica(long seqNo, long version, long autoGeneratedTimeStamp,, +                                                           boolean isRetry, SourceToParse sourceToParse), +        return applyIndexOperation(seqNo, primaryTerm, version, null, autoGeneratedTimeStamp, isRetry,, +    private Engine.IndexResult applyIndexOperation(long seqNo, long opPrimaryTerm, long version, @Nullable VersionType versionType,, +        assert versionType.validateVersionForWrites(version);, +    public Engine.DeleteResult applyDeleteOperationOnReplica(long seqNo, long version, String type, String id) throws IOException {, +        return applyDeleteOperation(seqNo, primaryTerm, version, type, id, null, Engine.Operation.Origin.REPLICA);, +                                                     @Nullable VersionType versionType, Engine.Operation.Origin origin) throws IOException {, +                    null, index.getAutoGeneratedIdTimestamp(), true, origin,, +                    null, origin);, +++ b/server/src/main/java/org/elasticsearch/index/translog/Translog.java, +        public static final int FORMAT_NO_VERSION_TYPE = FORMAT_NO_PARENT + 1;, +        public static final int SERIALIZATION_FORMAT = FORMAT_NO_VERSION_TYPE;, +            if (format < FORMAT_NO_VERSION_TYPE) {, +                in.readByte(); // _version_type, +            }, +            this(type, id, seqNo, primaryTerm, Versions.MATCH_ANY, source, null, -1);, +        public Index(String type, String id, long seqNo, long primaryTerm, long version,, +            final int format = out.getVersion().onOrAfter(Version.V_7_0_0_alpha1) ? SERIALIZATION_FORMAT : FORMAT_6_0;, +            out.writeVInt(format);, +            if (format < FORMAT_NO_VERSION_TYPE) {, +                out.writeByte(VersionType.EXTERNAL.getValue());, +            }, +        public static final int FORMAT_NO_PARENT = FORMAT_6_0 + 1; // since 7.0, +        public static final int FORMAT_NO_VERSION_TYPE = FORMAT_NO_PARENT + 1;, +        public static final int SERIALIZATION_FORMAT = FORMAT_NO_VERSION_TYPE;, +            if (format < FORMAT_NO_VERSION_TYPE) {, +                in.readByte(); // versionType, +            }, +            this(delete.type(), delete.id(), delete.uid(), deleteResult.getSeqNo(), delete.primaryTerm(), deleteResult.getVersion());, +            this(type, id, uid, seqNo, primaryTerm, Versions.MATCH_ANY);, +        public Delete(String type, String id, Term uid, long seqNo, long primaryTerm, long version) {, +            final int format = out.getVersion().onOrAfter(Version.V_7_0_0_alpha1) ? SERIALIZATION_FORMAT : FORMAT_6_0;, +            out.writeVInt(format);, +            if (format < FORMAT_NO_VERSION_TYPE) {, +                out.writeByte(VersionType.EXTERNAL.getValue());, +            }, +                uid.equals(delete.uid);, +++ b/server/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                    indexRequest.getAutoGeneratedTimestamp(), indexRequest.isRetry(), sourceToParse);, +                    deleteRequest.type(), deleteRequest.id());, +++ b/server/src/main/java/org/elasticsearch/index/VersionType.java, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;, +            assert (origin == Origin.PRIMARY) == (versionType != null) : "invalid version_type=" + versionType + " for origin=" + origin;]