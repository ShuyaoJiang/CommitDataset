[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                mappings.put(entry.getKey(), MapperService.parseMapping(entry.getValue()));, +                                        XContentHelper.mergeDefaults(mappings.get(cursor.key), MapperService.parseMapping(cursor.value.string()));, +                                        mappings.put(cursor.key, MapperService.parseMapping(cursor.value.string()));, +                                mapperService.merge(mappings, request.updateAllTypes());, +                            } catch (MapperParsingException mpe) {, +                                removalReason = "failed on parsing default mapping/mappings on index creation";, +                                throw mpe;, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                mappings.put(entry.getKey(), MapperService.parseMapping(entry.getValue()));, +                                        XContentHelper.mergeDefaults(mappings.get(cursor.key), MapperService.parseMapping(cursor.value.string()));, +                                        mappings.put(cursor.key, MapperService.parseMapping(cursor.value.string()));, +                                mapperService.merge(mappings, request.updateAllTypes());, +                            } catch (MapperParsingException mpe) {, +                                removalReason = "failed on parsing default mapping/mappings on index creation";, +                                throw mpe;, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.UUIDs;, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.NodeServicesProvider;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.mapper.MapperParsingException;, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.indices.IndicesService;, +import java.util.Collections;, +    private final IndicesService indicesService;, +    private final NodeServicesProvider nodeServicesProvider;, +    public MetaDataIndexTemplateService(Settings settings, ClusterService clusterService, MetaDataCreateIndexService metaDataCreateIndexService, AliasValidator aliasValidator, IndicesService indicesService, NodeServicesProvider nodeServicesProvider) {, +        this.indicesService = indicesService;, +        this.nodeServicesProvider = nodeServicesProvider;, +        final IndexTemplateMetaData.Builder templateBuilder = IndexTemplateMetaData.builder(request.name);, +            public ClusterState execute(ClusterState currentState) throws Exception {, +, +                validateAndAddTemplate(request, templateBuilder, indicesService, nodeServicesProvider, metaDataCreateIndexService);, +, +                for (Alias alias : request.aliases) {, +                    AliasMetaData aliasMetaData = AliasMetaData.builder(alias.name()).filter(alias.filter()), +                        .indexRouting(alias.indexRouting()).searchRouting(alias.searchRouting()).build();, +                    templateBuilder.putAlias(aliasMetaData);, +                }, +                for (Map.Entry<String, IndexMetaData.Custom> entry : request.customs.entrySet()) {, +                    templateBuilder.putCustom(entry.getKey(), entry.getValue());, +                }, +                IndexTemplateMetaData template = templateBuilder.build();, +, +                listener.onResponse(new PutResponse(true, templateBuilder.build()));, +    private static void validateAndAddTemplate(final PutRequest request, IndexTemplateMetaData.Builder templateBuilder, IndicesService indicesService,, +                                               NodeServicesProvider nodeServicesProvider, MetaDataCreateIndexService metaDataCreateIndexService) throws Exception {, +        Index createdIndex = null;, +        final String temporaryIndexName = UUIDs.randomBase64UUID();, +        try {, +, +            //create index service for parsing and validating "mappings", +            Settings dummySettings = Settings.builder(), +                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT), +                .put(request.settings), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1), +                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0), +                .put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()), +                .build();, +, +            final IndexMetaData tmpIndexMetadata = IndexMetaData.builder(temporaryIndexName).settings(dummySettings).build();, +            IndexService dummyIndexService = indicesService.createIndex(nodeServicesProvider, tmpIndexMetadata, Collections.emptyList());, +            createdIndex = dummyIndexService.index();, +, +            templateBuilder.order(request.order);, +            templateBuilder.template(request.template);, +            templateBuilder.settings(request.settings);, +, +            Map<String, Map<String, Object>> mappingsForValidation = new HashMap<>();, +            for (Map.Entry<String, String> entry : request.mappings.entrySet()) {, +                try {, +                    templateBuilder.putMapping(entry.getKey(), entry.getValue());, +                } catch (Exception e) {, +                    throw new MapperParsingException("Failed to parse mapping [{}]: {}", e, entry.getKey(), e.getMessage());, +                }, +                mappingsForValidation.put(entry.getKey(), MapperService.parseMapping(entry.getValue()));, +            }, +, +            dummyIndexService.mapperService().merge(mappingsForValidation, false);, +, +        } finally {, +            if (createdIndex != null) {, +                indicesService.removeIndex(createdIndex, " created for parsing template mapping");, +            }, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                                mappings.put(entry.getKey(), MapperService.parseMapping(entry.getValue()));, +                                        XContentHelper.mergeDefaults(mappings.get(cursor.key), MapperService.parseMapping(cursor.value.string()));, +                                        mappings.put(cursor.key, MapperService.parseMapping(cursor.value.string()));, +                                mapperService.merge(mappings, request.updateAllTypes());, +                            } catch (MapperParsingException mpe) {, +                                removalReason = "failed on parsing default mapping/mappings on index creation";, +                                throw mpe;, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.UUIDs;]