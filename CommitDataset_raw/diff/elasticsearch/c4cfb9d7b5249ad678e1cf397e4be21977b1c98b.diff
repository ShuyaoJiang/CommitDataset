[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import java.util.Objects;, +public class DiscountedCumulativeGainAt extends RankedListQualityMetric<DiscountedCumulativeGainAt> {, +     * @param position number of top results to check against a given set of relevant results. Must be positive., +     *  // TODO is there a way to enforce this?, +     * @param normalize If set to true, dcg will be normalized (ndcg), +     * See https://en.wikipedia.org/wiki/Discounted_cumulative_gain, +     * @param unknownDocRating the rating for docs the user hasn't supplied an explicit rating for, +     * */, +    public DiscountedCumulativeGainAt(int position, boolean normalize, Integer unknownDocRating) {, +        this.position = position;, +        this.normalize = normalize;, +        this.unknownDocRating = unknownDocRating;, +    }, +, +    /**, +    @Override, +    public DiscountedCumulativeGainAt fromXContent(XContentParser parser, ParseFieldMatcher matcher) {, +        return DiscountedCumulativeGainAt.fromXContent(parser, new ParseFieldMatcherSupplier() {, +            @Override, +            public ParseFieldMatcher getParseFieldMatcher() {, +                return matcher;, +            }, +        });, +    }, +, +        builder.startObject();, +        builder.endObject();, +    , +    @Override, +    public final boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        DiscountedCumulativeGainAt other = (DiscountedCumulativeGainAt) obj;, +        return Objects.equals(position, other.position) &&, +                Objects.equals(normalize, other.normalize) &&, +                Objects.equals(unknownDocRating, other.unknownDocRating);, +    }, +    , +    @Override, +    public final int hashCode() {, +        return Objects.hash(getClass(), position, normalize, unknownDocRating);, +    }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGainAt.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import java.util.Objects;, +public class DiscountedCumulativeGainAt extends RankedListQualityMetric<DiscountedCumulativeGainAt> {, +     * @param position number of top results to check against a given set of relevant results. Must be positive., +     *  // TODO is there a way to enforce this?, +     * @param normalize If set to true, dcg will be normalized (ndcg), +     * See https://en.wikipedia.org/wiki/Discounted_cumulative_gain, +     * @param unknownDocRating the rating for docs the user hasn't supplied an explicit rating for, +     * */, +    public DiscountedCumulativeGainAt(int position, boolean normalize, Integer unknownDocRating) {, +        this.position = position;, +        this.normalize = normalize;, +        this.unknownDocRating = unknownDocRating;, +    }, +, +    /**, +    @Override, +    public DiscountedCumulativeGainAt fromXContent(XContentParser parser, ParseFieldMatcher matcher) {, +        return DiscountedCumulativeGainAt.fromXContent(parser, new ParseFieldMatcherSupplier() {, +            @Override, +            public ParseFieldMatcher getParseFieldMatcher() {, +                return matcher;, +            }, +        });, +    }, +, +        builder.startObject();, +        builder.endObject();, +    , +    @Override, +    public final boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        }, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        }, +        DiscountedCumulativeGainAt other = (DiscountedCumulativeGainAt) obj;, +        return Objects.equals(position, other.position) &&, +                Objects.equals(normalize, other.normalize) &&, +                Objects.equals(unknownDocRating, other.unknownDocRating);, +    }, +    , +    @Override, +    public final int hashCode() {, +        return Objects.hash(getClass(), position, normalize, unknownDocRating);, +    }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/PrecisionAtN.java, +import org.elasticsearch.common.ParseFieldMatcher;, +import java.util.Objects;, +public class PrecisionAtN extends RankedListQualityMetric<PrecisionAtN> {]