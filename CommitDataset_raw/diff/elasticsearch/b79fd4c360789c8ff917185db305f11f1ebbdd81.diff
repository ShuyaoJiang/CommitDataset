[+++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        } catch (IOException | SettingsException | NoClassDefFoundError e) {, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        } catch (IOException | SettingsException | NoClassDefFoundError e) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        } catch (IOException | SettingsException | NoClassDefFoundError e) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/settings/PropertyPlaceholder.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.settings;, +, +import org.elasticsearch.common.Strings;, +, +import java.util.HashSet;, +import java.util.Objects;, +import java.util.Properties;, +import java.util.Set;, +, +/**, + * Utility class for working with Strings that have placeholder values in them. A placeholder takes the form, + * <tt>${name}</tt>. Using <tt>PropertyPlaceholder</tt> these placeholders can be substituted for, + * user-supplied values., + * <p>, + * Values for substitution can be supplied using a {@link Properties} instance or using a, + * {@link PlaceholderResolver}., + */, +class PropertyPlaceholder {, +, +    private final String placeholderPrefix;, +    private final String placeholderSuffix;, +    private final boolean ignoreUnresolvablePlaceholders;, +, +    /**, +     * Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix., +     *, +     * @param placeholderPrefix              the prefix that denotes the start of a placeholder., +     * @param placeholderSuffix              the suffix that denotes the end of a placeholder., +     * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should be ignored, +     *                                       (<code>true</code>) or cause an exception (<code>false</code>)., +     */, +    PropertyPlaceholder(String placeholderPrefix, String placeholderSuffix,, +                               boolean ignoreUnresolvablePlaceholders) {, +        this.placeholderPrefix = Objects.requireNonNull(placeholderPrefix);, +        this.placeholderSuffix = Objects.requireNonNull(placeholderSuffix);, +        this.ignoreUnresolvablePlaceholders = ignoreUnresolvablePlaceholders;, +    }, +, +    /**, +     * Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied {@link, +     * PlaceholderResolver}., +     *, +     * @param value               the value containing the placeholders to be replaced., +     * @param placeholderResolver the <code>PlaceholderResolver</code> to use for replacement., +     * @return the supplied value with placeholders replaced inline., +     * @throws NullPointerException if value is null, +     */, +    String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {, +        Objects.requireNonNull(value);, +        return parseStringValue(value, placeholderResolver, new HashSet<>());, +    }, +, +    private String parseStringValue(String strVal, PlaceholderResolver placeholderResolver,, +                                    Set<String> visitedPlaceholders) {, +        StringBuilder buf = new StringBuilder(strVal);, +, +        int startIndex = strVal.indexOf(this.placeholderPrefix);, +        while (startIndex != -1) {, +            int endIndex = findPlaceholderEndIndex(buf, startIndex);, +            if (endIndex != -1) {, +                String placeholder = buf.substring(startIndex + this.placeholderPrefix.length(), endIndex);, +                if (!visitedPlaceholders.add(placeholder)) {, +                    throw new IllegalArgumentException(, +                            "Circular placeholder reference '" + placeholder + "' in property definitions");, +                }, +                // Recursive invocation, parsing placeholders contained in the placeholder key., +                placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);, +, +                // Now obtain the value for the fully resolved key..., +                int defaultValueIdx = placeholder.indexOf(':');, +                String defaultValue = null;, +                if (defaultValueIdx != -1) {]