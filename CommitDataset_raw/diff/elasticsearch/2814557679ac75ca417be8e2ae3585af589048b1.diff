[+++ b/TESTING.asciidoc, +== Testing scripts, +The simplest way to test scripts and the packaged distributions is to use, +Vagrant. You can get started by following there five easy steps:, +. (Optional) Install vagrant-cachier to squeeze a bit more performance out of, +the process:, +download the base images and provision the boxes and immediately quit. If you, +you this again it'll skip the download step., +You can run on all the VMs by running `./gradlew -Pvagrant.boxes=all, +packagingTest`. You can run a particular VM with a command like `./gradlew, +-Pvagrant.boxes=oel-7 packagingTest`. See `./gradlew tasks` for a complete list, +of available vagrant boxes for testing. It's important to know that if you, +interrupt any of these Gradle commands then the boxes will remain running and, +you'll have to terminate them with `./gradlew stop`., +These are the linux flavors the Vagrantfile currently supports:, +We're missing the following because our tests are very linux/bash centric:, +* Windows Server 2012, +== Testing scripts more directly, +In general its best to stick to testing in vagrant because the bats scripts are, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than Gradle provides. In one window:, +--------------------------------, +./gradlew :distribution:packages:rpm:assemble, +--------------------------------, +and in another window:, +----------------------------------------------------, +vagrant up centos-7 --provider virtualbox && vagrant ssh centos-7, +sudo -E bats $BATS_TESTS/*rpm*.bats, +----------------------------------------------------, +If you wanted to retest all the release artifacts on a single VM you could:, +-------------------------------------------------, +./gradlew setupPackagingTest, +cd qa/vagrant; vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +cd $PACKAGING_ARCHIVES, +sudo -E bats $BATS_TESTS/*.bats, +-------------------------------------------------, +You can also use Gradle to prepare the test environment and then starts a single VM:, +-------------------------------------------------, +./gradlew vagrantFedora27#up, +-------------------------------------------------, +Or any of vagrantCentos6#up, vagrantCentos7#up, vagrantDebian8#up,, +vagrantDebian9#up, vagrantFedora26#up, vagrantFedora27#up, vagrantOel6#up, vagrantOel7#up,, +vagrantOpensuse42#up,vagrantSles12#up, vagrantUbuntu1404#up, vagrantUbuntu1604#up., +Once up, you can then connect to the VM using SSH from the elasticsearch directory:, +-------------------------------------------------, +vagrant ssh fedora-27, +-------------------------------------------------, +Or from another directory:, +, +-------------------------------------------------, +VAGRANT_CWD=/path/to/elasticsearch vagrant ssh fedora-27, +-------------------------------------------------, +++ b/TESTING.asciidoc, +== Testing scripts, +The simplest way to test scripts and the packaged distributions is to use, +Vagrant. You can get started by following there five easy steps:, +. (Optional) Install vagrant-cachier to squeeze a bit more performance out of, +the process:, +download the base images and provision the boxes and immediately quit. If you, +you this again it'll skip the download step., +You can run on all the VMs by running `./gradlew -Pvagrant.boxes=all, +packagingTest`. You can run a particular VM with a command like `./gradlew, +-Pvagrant.boxes=oel-7 packagingTest`. See `./gradlew tasks` for a complete list, +of available vagrant boxes for testing. It's important to know that if you, +interrupt any of these Gradle commands then the boxes will remain running and, +you'll have to terminate them with `./gradlew stop`., +These are the linux flavors the Vagrantfile currently supports:, +We're missing the following because our tests are very linux/bash centric:, +* Windows Server 2012, +== Testing scripts more directly, +In general its best to stick to testing in vagrant because the bats scripts are, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than Gradle provides. In one window:, +--------------------------------, +./gradlew :distribution:packages:rpm:assemble, +--------------------------------, +and in another window:, +----------------------------------------------------, +vagrant up centos-7 --provider virtualbox && vagrant ssh centos-7, +sudo -E bats $BATS_TESTS/*rpm*.bats, +----------------------------------------------------, +If you wanted to retest all the release artifacts on a single VM you could:, +-------------------------------------------------, +./gradlew setupPackagingTest, +cd qa/vagrant; vagrant up ubuntu-1404 --provider virtualbox && vagrant ssh ubuntu-1404, +cd $PACKAGING_ARCHIVES, +sudo -E bats $BATS_TESTS/*.bats, +-------------------------------------------------, +You can also use Gradle to prepare the test environment and then starts a single VM:, +-------------------------------------------------, +./gradlew vagrantFedora27#up, +-------------------------------------------------, +Or any of vagrantCentos6#up, vagrantCentos7#up, vagrantDebian8#up,, +vagrantDebian9#up, vagrantFedora26#up, vagrantFedora27#up, vagrantOel6#up, vagrantOel7#up,, +vagrantOpensuse42#up,vagrantSles12#up, vagrantUbuntu1404#up, vagrantUbuntu1604#up., +Once up, you can then connect to the VM using SSH from the elasticsearch directory:, +-------------------------------------------------, +vagrant ssh fedora-27, +-------------------------------------------------, +Or from another directory:]