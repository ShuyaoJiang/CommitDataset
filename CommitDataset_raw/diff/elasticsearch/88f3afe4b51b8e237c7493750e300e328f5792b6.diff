[+++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java, +import org.elasticsearch.*;, +            connectionLock.acquire(node.id());, +            try {, +                        } catch (Throwable e) {, +                            logger.trace("failed to connect to [{}], cleaning dangling connections", e, node);, +                    // we acquire a connection lock, so no way there is an existing connection, +                    connectedNodes.put(node, nodeChannels);, +                    throw new ConnectTransportException(node, "general node connection failure", e);, +            NodeChannels nodeChannels = connectedNodes.remove(node);, +            if (nodeChannels != null) {, +                    logger.debug("disconnecting from [{}] due to explicit disconnect call", node);, +                    logger.trace("disconnected from [{}] due to explicit disconnect call", node);, +            }, +    private boolean disconnectFromNode(DiscoveryNode node, Channel channel, String reason) {, +        // this might be called multiple times from all the node channels, so do a lightweight, +        // check outside of the lock, +                nodeChannels = connectedNodes.get(node);, +                // check again within the connection lock, if its still applicable to remove it, +                if (nodeChannels != null && nodeChannels.hasChannel(channel)) {, +                        logger.debug("disconnecting from [{}], {}", node, reason);, +                        logger.trace("disconnected from [{}], {}", node, reason);, +                    return true;, +                }, +        return false;, +            if (disconnectFromNode(node, channel, ExceptionsHelper.detailedMessage(failure))) {, +                // if we managed to find this channel and disconnect from it, then break, no need to check on, +                // the rest of the nodes, +                break;]