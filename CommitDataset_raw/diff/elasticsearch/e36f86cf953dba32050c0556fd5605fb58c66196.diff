[+++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +    SecurityLifecycleService(Settings settings, ClusterService clusterService, ThreadPool threadPool, InternalClient client,, +                             NativeRealmMigrator migrator, @Nullable IndexAuditTrail indexAuditTrail) {, +        this.securityIndex = new IndexLifecycleManager(settings, client, clusterService, threadPool, SECURITY_INDEX_NAME,, +                SECURITY_TEMPLATE_NAME, migrator);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +    SecurityLifecycleService(Settings settings, ClusterService clusterService, ThreadPool threadPool, InternalClient client,, +                             NativeRealmMigrator migrator, @Nullable IndexAuditTrail indexAuditTrail) {, +        this.securityIndex = new IndexLifecycleManager(settings, client, clusterService, threadPool, SECURITY_INDEX_NAME,, +                SECURITY_TEMPLATE_NAME, migrator);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeRealmMigrator.java, +                logger.info("Performing {} security migration task(s) from version {}", tasks.size(), previousVersion);, +        return previousVersion != null, +                && previousVersion.before(info.getDefinedSince()), +                && previousVersion.onOrAfter(Version.V_5_0_0);, +        return previousVersion != null, +                && previousVersion.before(Version.V_6_0_0_alpha1), +                && previousVersion.onOrAfter(Version.V_5_0_0);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +    SecurityLifecycleService(Settings settings, ClusterService clusterService, ThreadPool threadPool, InternalClient client,, +                             NativeRealmMigrator migrator, @Nullable IndexAuditTrail indexAuditTrail) {, +        this.securityIndex = new IndexLifecycleManager(settings, client, clusterService, threadPool, SECURITY_INDEX_NAME,, +                SECURITY_TEMPLATE_NAME, migrator);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeRealmMigrator.java, +                logger.info("Performing {} security migration task(s) from version {}", tasks.size(), previousVersion);, +        return previousVersion != null, +                && previousVersion.before(info.getDefinedSince()), +                && previousVersion.onOrAfter(Version.V_5_0_0);, +        return previousVersion != null, +                && previousVersion.before(Version.V_6_0_0_alpha1), +                && previousVersion.onOrAfter(Version.V_5_0_0);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/support/CachingUsernamePasswordRealm.java, +                if (userWithHash.user.enabled()) {, +                    User user = userWithHash.user;, +                    logger.debug("realm [{}] authenticated user [{}], with roles [{}]", name(), token.principal(), user.roles());, +                    listener.onResponse(user);, +                } else {, +                    // We successfully authenticated, but the cached user is disabled., +                    // Reload the primary record to check whether the user is still disabled, +                    cache.invalidate(token.principal());, +                    doAuthenticateAndCache(token, ActionListener.wrap((user) -> {, +                        if (user != null) {, +                            logger.debug("realm [{}] authenticated user [{}] (enabled:{}), with roles [{}]", name(), token.principal(),, +                                   user.enabled(), user.roles());, +                        }, +                        listener.onResponse(user);, +                    }, listener::onFailure));, +                }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/SecurityLifecycleService.java, +    SecurityLifecycleService(Settings settings, ClusterService clusterService, ThreadPool threadPool, InternalClient client,, +                             NativeRealmMigrator migrator, @Nullable IndexAuditTrail indexAuditTrail) {, +        this.securityIndex = new IndexLifecycleManager(settings, client, clusterService, threadPool, SECURITY_INDEX_NAME,, +                SECURITY_TEMPLATE_NAME, migrator);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/esnative/NativeRealmMigrator.java, +                logger.info("Performing {} security migration task(s) from version {}", tasks.size(), previousVersion);, +        return previousVersion != null, +                && previousVersion.before(info.getDefinedSince()), +                && previousVersion.onOrAfter(Version.V_5_0_0);, +        return previousVersion != null, +                && previousVersion.before(Version.V_6_0_0_alpha1), +                && previousVersion.onOrAfter(Version.V_5_0_0);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/authc/support/CachingUsernamePasswordRealm.java, +                if (userWithHash.user.enabled()) {, +                    User user = userWithHash.user;, +                    logger.debug("realm [{}] authenticated user [{}], with roles [{}]", name(), token.principal(), user.roles());, +                    listener.onResponse(user);, +                } else {, +                    // We successfully authenticated, but the cached user is disabled., +                    // Reload the primary record to check whether the user is still disabled, +                    cache.invalidate(token.principal());, +                    doAuthenticateAndCache(token, ActionListener.wrap((user) -> {, +                        if (user != null) {, +                            logger.debug("realm [{}] authenticated user [{}] (enabled:{}), with roles [{}]", name(), token.principal(),, +                                   user.enabled(), user.roles());, +                        }, +                        listener.onResponse(user);, +                    }, listener::onFailure));, +                }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/security/support/IndexLifecycleManager.java, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.concurrent.atomic.AtomicReference;, +import java.util.function.Predicate;, +import java.util.regex.Pattern;, +import java.util.stream.Collectors;, +, +import org.elasticsearch.cluster.service.ClusterService;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.threadpool.ThreadPool;, +    private static final int MAX_MIGRATE_ATTEMPTS = 10;, +, +    private final ClusterService clusterService;, +    private final ThreadPool threadPool;, +    private final AtomicInteger migrateDataAttempts = new AtomicInteger(0);]