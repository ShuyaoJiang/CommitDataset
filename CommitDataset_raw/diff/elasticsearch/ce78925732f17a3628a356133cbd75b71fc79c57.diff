[+++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +        return convert(columnIndex, type);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +        return convert(columnIndex, type);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +                return new Timestamp(((Number) v).longValue());, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +        return convert(columnIndex, type);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +                return new Timestamp(((Number) v).longValue());, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverterTests.java, +import java.sql.Timestamp;, +        assertThat(convertAsNative(now, JDBCType.TIMESTAMP), instanceOf(Timestamp.class));, +        assertEquals(now.getMillis(), ((Timestamp) convertAsNative(now, JDBCType.TIMESTAMP)).getTime());, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +        return convert(columnIndex, type);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +                return new Timestamp(((Number) v).longValue());, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverterTests.java, +import java.sql.Timestamp;, +        assertThat(convertAsNative(now, JDBCType.TIMESTAMP), instanceOf(Timestamp.class));, +        assertEquals(now.getMillis(), ((Timestamp) convertAsNative(now, JDBCType.TIMESTAMP)).getTime());, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/JdbcIntegrationTestCase.java, +        index(index, "1", body);, +    }, +    , +    public static void index(String index, String documentId, CheckedConsumer<XContentBuilder, IOException> body) throws IOException {, +        Request request = new Request("PUT", "/" + index + "/doc/" + documentId);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/JdbcResultSet.java, +        return convert(columnIndex, type);, +++ b/x-pack/plugin/sql/jdbc/src/main/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverter.java, +                return new Timestamp(((Number) v).longValue());, +++ b/x-pack/plugin/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/jdbc/TypeConverterTests.java, +import java.sql.Timestamp;, +        assertThat(convertAsNative(now, JDBCType.TIMESTAMP), instanceOf(Timestamp.class));, +        assertEquals(now.getMillis(), ((Timestamp) convertAsNative(now, JDBCType.TIMESTAMP)).getTime());, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/JdbcIntegrationTestCase.java, +        index(index, "1", body);, +    }, +    , +    public static void index(String index, String documentId, CheckedConsumer<XContentBuilder, IOException> body) throws IOException {, +        Request request = new Request("PUT", "/" + index + "/doc/" + documentId);, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/ResultSetTestCase.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.qa.sql.jdbc;, +, +import java.io.IOException;, +import java.sql.Connection;, +import java.sql.PreparedStatement;, +import java.sql.ResultSet;, +import java.sql.ResultSetMetaData;, +import java.sql.SQLException;, +import java.sql.Timestamp;, +import java.util.Date;, +, +public class ResultSetTestCase extends JdbcIntegrationTestCase {, +    public void testGettingTimestamp() throws Exception {, +        long randomMillis = randomLongBetween(0, System.currentTimeMillis());, +, +        index("library", "1", builder -> {, +            builder.field("name", "Don Quixote");, +            builder.field("page_count", 1072);, +            builder.timeField("release_date", new Date(randomMillis));, +            builder.timeField("republish_date", null);, +        });, +        index("library", "2", builder -> {, +            builder.field("name", "1984");, +            builder.field("page_count", 328);, +            builder.timeField("release_date", new Date(-649036800000L));, +            builder.timeField("republish_date", new Date(599616000000L));, +        });, +, +        try (Connection connection = esJdbc()) {, +            try (PreparedStatement statement = connection.prepareStatement("SELECT name, release_date, republish_date FROM library")) {, +                try (ResultSet results = statement.executeQuery()) {, +                    ResultSetMetaData resultSetMetaData = results.getMetaData();, +, +                    results.next();, +                    assertEquals(3, resultSetMetaData.getColumnCount());, +                    assertEquals(randomMillis, results.getTimestamp("release_date").getTime());, +                    assertEquals(randomMillis, results.getTimestamp(2).getTime());, +                    assertTrue(results.getObject(2) instanceof Timestamp);, +                    assertEquals(randomMillis, ((Timestamp) results.getObject("release_date")).getTime());, +                    , +                    assertNull(results.getTimestamp(3));, +                    assertNull(results.getObject("republish_date"));, +, +                    assertTrue(results.next());, +                    assertEquals(599616000000L, results.getTimestamp("republish_date").getTime());, +                    assertEquals(-649036800000L, ((Timestamp) results.getObject(2)).getTime());, +, +                    assertFalse(results.next());, +                }, +            }, +        }, +    }]