[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +import java.io.IOException;, +, +    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {, +        return channel -> {, +        };, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +import java.io.IOException;, +, +    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {, +        return channel -> {, +        };, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +import java.io.IOException;, +, +    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {, +        return channel -> {, +        };, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/RestNoopSearchAction.java, +    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {, +        return channel -> client.execute(NoopSearchAction.INSTANCE, searchRequest, new RestStatusToXContentListener<>(channel));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/RestNoopBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +import java.io.IOException;, +, +    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {, +        return channel -> {, +        };, +        private final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import org.elasticsearch.action.DocumentRequest;, +    private static final BulkItemResponse ITEM_RESPONSE = new BulkItemResponse(1, DocumentRequest.OpType.UPDATE,, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/RestNoopSearchAction.java, +    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {, +        return channel -> client.execute(NoopSearchAction.INSTANCE, searchRequest, new RestStatusToXContentListener<>(channel));, +++ b/core/src/main/java/org/elasticsearch/action/DocumentRequest.java, +import org.elasticsearch.index.VersionType;, +, +import java.util.Locale;, + * Generic interface to group ActionRequest, which perform writes to a single document, + * Action requests implementing this can be part of {@link org.elasticsearch.action.bulk.BulkRequest}, +    /**, +     * Get the document version for this request, +     * @return the document version, +     */, +    long version();, +, +    /**, +     * Sets the version, which will perform the operation only if a matching, +     * version exists and no changes happened on the doc since then., +     */, +    T version(long version);, +, +    /**, +     * Get the document version type for this request, +     * @return the document version type, +     */, +    VersionType versionType();, +, +    /**, +     * Sets the versioning type. Defaults to {@link VersionType#INTERNAL}., +     */, +    T versionType(VersionType versionType);, +, +    /**, +     * Get the requested document operation type of the request, +     * @return the operation type {@link OpType}, +     */, +    OpType opType();, +, +    /**, +     * Requested operation type to perform on the document, +     */, +    enum OpType {, +        /**, +         * Index the source. If there an existing document with the id, it will, +         * be replaced., +         */, +        INDEX(0),, +        /**, +         * Creates the resource. Simply adds it to the index, if there is an existing, +         * document with the id, then it won't be removed., +         */, +        CREATE(1),, +        /** Updates a document */, +        UPDATE(2),, +        /** Deletes a document */, +        DELETE(3);]