[+++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/BoxedCastTests.java, +, +    public void testReturnToByteBoxedCasts() {, +        assertEquals((byte)1, exec("Byte rtn() {return (byte)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return (short)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return (char)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return (int)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return (long)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return (float)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return (double)1} rtn()"));, +, +        assertEquals((byte)1, exec("Byte rtn() {return Byte.valueOf((byte)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return Short.valueOf((short)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return Character.valueOf((char)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return Integer.valueOf((int)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return Long.valueOf((long)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return Float.valueOf((float)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {return Double.valueOf((double)1)} rtn()"));, +, +        assertEquals((byte)1, exec("Byte rtn() {def d = (byte)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = (short)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = (char)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = (int)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = (long)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = (float)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = (double)1; return d} rtn()"));, +, +        assertEquals((byte)1, exec("Byte rtn() {def d = Byte.valueOf((byte)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = Short.valueOf((short)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = Character.valueOf((char)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = Integer.valueOf((int)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = Long.valueOf((long)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = Float.valueOf((float)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Byte rtn() {def d = Double.valueOf((double)1); return d} rtn()"));, +    }, +, +    public void testReturnToShortBoxedCasts() {, +        assertEquals((short)1, exec("Short rtn() {return (byte)1} rtn()"));, +        assertEquals((short)1, exec("Short rtn() {return (short)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return (char)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return (int)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return (long)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return (float)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return (double)1} rtn()"));, +, +        assertEquals((short)1, exec("Short rtn() {return Byte.valueOf((byte)1)} rtn()"));, +        assertEquals((short)1, exec("Short rtn() {return Short.valueOf((short)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return Character.valueOf((char)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return Integer.valueOf((int)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return Long.valueOf((long)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return Float.valueOf((float)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {return Double.valueOf((double)1)} rtn()"));, +, +        assertEquals((short)1, exec("Short rtn() {def d = (byte)1; return d} rtn()"));, +        assertEquals((short)1, exec("Short rtn() {def d = (short)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = (char)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = (int)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = (long)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = (float)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = (double)1; return d} rtn()"));, +, +        assertEquals((short)1, exec("Short rtn() {def d = Byte.valueOf((byte)1); return d} rtn()"));, +        assertEquals((short)1, exec("Short rtn() {def d = Short.valueOf((short)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = Character.valueOf((char)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = Integer.valueOf((int)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = Long.valueOf((long)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = Float.valueOf((float)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Short rtn() {def d = Double.valueOf((double)1); return d} rtn()"));, +    }, +    , +    public void testReturnToCharacterBoxedCasts() {, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return (byte)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return (short)1} rtn()"));, +        assertEquals((char)1, exec("Character rtn() {return (char)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return (int)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return (long)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return (float)1} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return (double)1} rtn()"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return Byte.valueOf((byte)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return Short.valueOf((short)1)} rtn()"));, +        assertEquals((char)1, exec("Character rtn() {return Character.valueOf((char)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return Integer.valueOf((int)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return Long.valueOf((long)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return Float.valueOf((float)1)} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {return Double.valueOf((double)1)} rtn()"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = (byte)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = (short)1; return d} rtn()"));, +        assertEquals((char)1, exec("Character rtn() {def d = (char)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = (int)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = (long)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = (float)1; return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = (double)1; return d} rtn()"));, +, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = Byte.valueOf((byte)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = Short.valueOf((short)1); return d} rtn()"));, +        assertEquals((char)1, exec("Character rtn() {def d = Character.valueOf((char)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = Integer.valueOf((int)1); return d} rtn()"));, +        expectScriptThrows(ClassCastException.class, () -> exec("Character rtn() {def d = Long.valueOf((long)1); return d} rtn()"));]