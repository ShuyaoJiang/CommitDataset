[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStep.java, +        if (indexMetaData.getAliases().containsKey(rolloverAlias) == false) {, +            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT,, +                "%s [%s] does not point to index [%s]", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, rolloverAlias,, +                indexMetaData.getIndex().getName())));, +            return;, +        }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStep.java, +        if (indexMetaData.getAliases().containsKey(rolloverAlias) == false) {, +            listener.onFailure(new IllegalArgumentException(String.format(Locale.ROOT,, +                "%s [%s] does not point to index [%s]", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, rolloverAlias,, +                indexMetaData.getIndex().getName())));, +            return;, +        }, +, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/RolloverStepTests.java, +import org.elasticsearch.cluster.metadata.AliasMetaData;, +            .putAlias(AliasMetaData.builder(alias)), +            .putAlias(AliasMetaData.builder(alias)), +            .putAlias(AliasMetaData.builder(alias)), +    public void testPerformActionAliasDoesNotPointToIndex() {, +        String alias = randomAlphaOfLength(5);, +        IndexMetaData indexMetaData = IndexMetaData.builder(randomAlphaOfLength(10)), +            .settings(settings(Version.CURRENT).put(RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, alias)), +            .numberOfShards(randomIntBetween(1, 5)).numberOfReplicas(randomIntBetween(0, 5)).build();, +        RolloverStep step = createRandomInstance();, +, +        SetOnce<Exception> exceptionThrown = new SetOnce<>();, +        step.evaluateCondition(indexMetaData, new AsyncWaitStep.Listener() {, +            @Override, +            public void onResponse(boolean complete, ToXContentObject obj) {, +                throw new AssertionError("Unexpected method call");, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                exceptionThrown.set(e);, +            }, +        });, +        assertThat(exceptionThrown.get().getClass(), equalTo(IllegalArgumentException.class));, +        assertThat(exceptionThrown.get().getMessage(), equalTo(String.format(Locale.ROOT,, +            "%s [%s] does not point to index [%s]", RolloverAction.LIFECYCLE_ROLLOVER_ALIAS, alias,, +            indexMetaData.getIndex().getName())));, +, +    }]