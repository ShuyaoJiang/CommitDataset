[+++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java, +        SocketAccess.doPrivilegedIOException(() -> {, +            flushPrivileged(bytes, off, len, closing);, +            return null;, +        });, +    }, +, +    private void flushPrivileged(byte[] bytes, int off, int len, boolean closing) throws IOException {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java, +        SocketAccess.doPrivilegedIOException(() -> {, +            flushPrivileged(bytes, off, len, closing);, +            return null;, +        });, +    }, +, +    private void flushPrivileged(byte[] bytes, int off, int len, boolean closing) throws IOException {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +            Streams.copy(inputStream, stream);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java, +        SocketAccess.doPrivilegedIOException(() -> {, +            flushPrivileged(bytes, off, len, closing);, +            return null;, +        });, +    }, +, +    private void flushPrivileged(byte[] bytes, int off, int len, boolean closing) throws IOException {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +            Streams.copy(inputStream, stream);, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/MockAmazonS3.java, +import java.io.UncheckedIOException;, +import java.net.InetAddress;, +import java.net.Socket;, +import static org.junit.Assert.assertTrue;, +, +    private final int mockSocketPort;, +, +, +    MockAmazonS3(int mockSocketPort) {, +        this.mockSocketPort = mockSocketPort;, +    }, +, +    // Simulate a socket connection to check that SocketAccess.doPrivileged() is used correctly., +    // Any method of AmazonS3 might potentially open a socket to the S3 service. Firstly, a call, +    // to any method of AmazonS3 has to be wrapped by SocketAccess.doPrivileged()., +    // Secondly, each method on the stack from doPrivileged to opening the socket has to be, +    // located in a jar that is provided by the plugin., +    // Thirdly, a SocketPermission has to be configured in plugin-security.policy., +    // By opening a socket in each method of MockAmazonS3 it is ensured that in production AmazonS3, +    // is able to to open a socket to the S3 Service without causing a SecurityException, +    private void simulateS3SocketConnection() {, +        try (Socket socket = new Socket(InetAddress.getByName("127.0.0.1"), mockSocketPort)) {, +            assertTrue(socket.isConnected()); // NOOP to keep static analysis happy, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);, +        }, +    }, +, +, +        simulateS3SocketConnection();, +        simulateS3SocketConnection();, +        simulateS3SocketConnection();, +        simulateS3SocketConnection();, +        simulateS3SocketConnection();, +        simulateS3SocketConnection();, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/DefaultS3OutputStream.java, +        SocketAccess.doPrivilegedIOException(() -> {, +            flushPrivileged(bytes, off, len, closing);, +            return null;, +        });, +    }, +, +    private void flushPrivileged(byte[] bytes, int off, int len, boolean closing) throws IOException {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java, +            Streams.copy(inputStream, stream);, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/repositories/s3/MockAmazonS3.java, +import java.io.UncheckedIOException;, +import java.net.InetAddress;, +import java.net.Socket;, +import static org.junit.Assert.assertTrue;, +, +    private final int mockSocketPort;, +, +, +    MockAmazonS3(int mockSocketPort) {, +        this.mockSocketPort = mockSocketPort;, +    }, +, +    // Simulate a socket connection to check that SocketAccess.doPrivileged() is used correctly., +    // Any method of AmazonS3 might potentially open a socket to the S3 service. Firstly, a call, +    // to any method of AmazonS3 has to be wrapped by SocketAccess.doPrivileged()., +    // Secondly, each method on the stack from doPrivileged to opening the socket has to be, +    // located in a jar that is provided by the plugin., +    // Thirdly, a SocketPermission has to be configured in plugin-security.policy., +    // By opening a socket in each method of MockAmazonS3 it is ensured that in production AmazonS3, +    // is able to to open a socket to the S3 Service without causing a SecurityException, +    private void simulateS3SocketConnection() {, +        try (Socket socket = new Socket(InetAddress.getByName("127.0.0.1"), mockSocketPort)) {, +            assertTrue(socket.isConnected()); // NOOP to keep static analysis happy, +        } catch (IOException e) {, +            throw new UncheckedIOException(e);]