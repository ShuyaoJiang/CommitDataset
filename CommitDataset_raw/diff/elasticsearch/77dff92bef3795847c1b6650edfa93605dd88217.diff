[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, internalClient);, +                System::currentTimeMillis, auditor, persistentTasksService);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, internalClient);, +                System::currentTimeMillis, auditor, persistentTasksService);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.ResourceNotFoundException;, +import org.elasticsearch.xpack.persistent.PersistentTasksService;, +import org.elasticsearch.xpack.persistent.PersistentTasksService.PersistentTaskOperationListener;, +import org.elasticsearch.xpack.persistent.PersistentTasksService.WaitForPersistentTaskStatusListener;, +        private final PersistentTasksService persistentTasksService;, +                               Auditor auditor, PersistentTasksService persistentTasksService) {, +            this.persistentTasksService = persistentTasksService;, +            ClusterState currentState = clusterService.state();, +                PersistentTasksCustomMetaData tasks = currentState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);, +                PersistentTask<?> jobTask = MlMetadata.getJobTask(request.getJobId(), tasks);, +                forceCloseJob(jobTask.getId(), request.getJobId(), listener);, +                PersistentTask<?> jobTask = validateAndReturnJobTask(request.getJobId(), currentState);, +                normalCloseJob(task, jobTask.getId(), request, listener);, +        private void forceCloseJob(long persistentTaskId, String jobId, ActionListener<Response> listener) {, +            persistentTasksService.removeTask(persistentTaskId, new PersistentTaskOperationListener() {, +                @Override, +                public void onResponse(long taskId) {, +                    listener.onResponse(new Response(true));, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +            });, +        }, +, +        private void normalCloseJob(Task task, long persistentTaskId, Request request, ActionListener<Response> listener) {, +                    ActionListener.wrap(r -> waitForJobClosed(persistentTaskId, request, r, listener), listener::onFailure);, +        void waitForJobClosed(long persistentTaskId, Request request, Response response, ActionListener<Response> listener) {, +            persistentTasksService.waitForPersistentTaskStatus(persistentTaskId, Objects::isNull, request.timeout,, +                    new WaitForPersistentTaskStatusListener() {, +                @Override, +                public void onResponse(long taskId) {, +, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +    static PersistentTask<?> validateAndReturnJobTask(String jobId, ClusterState state) {, +        Job job = mlMetadata.getJobs().get(jobId);, +        if (job == null) {, +            throw new ResourceNotFoundException("cannot close job, because job [" + jobId + "] does not exist");, +        }, +, +        PersistentTask<?> jobTask = MlMetadata.getJobTask(jobId, tasks);, +        if (jobTask == null) {, +            throw new ElasticsearchStatusException("cannot close job, because job [" + jobId + "] is not open", RestStatus.CONFLICT);, +        }, +, +        return jobTask;, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +        PersistentTasksService persistentTasksService = new PersistentTasksService(settings, clusterService, threadPool, internalClient);, +                System::currentTimeMillis, auditor, persistentTasksService);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.ResourceNotFoundException;, +import org.elasticsearch.xpack.persistent.PersistentTasksService;, +import org.elasticsearch.xpack.persistent.PersistentTasksService.PersistentTaskOperationListener;, +import org.elasticsearch.xpack.persistent.PersistentTasksService.WaitForPersistentTaskStatusListener;, +        private final PersistentTasksService persistentTasksService;, +                               Auditor auditor, PersistentTasksService persistentTasksService) {, +            this.persistentTasksService = persistentTasksService;, +            ClusterState currentState = clusterService.state();, +                PersistentTasksCustomMetaData tasks = currentState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);, +                PersistentTask<?> jobTask = MlMetadata.getJobTask(request.getJobId(), tasks);, +                forceCloseJob(jobTask.getId(), request.getJobId(), listener);, +                PersistentTask<?> jobTask = validateAndReturnJobTask(request.getJobId(), currentState);, +                normalCloseJob(task, jobTask.getId(), request, listener);, +        private void forceCloseJob(long persistentTaskId, String jobId, ActionListener<Response> listener) {, +            persistentTasksService.removeTask(persistentTaskId, new PersistentTaskOperationListener() {, +                @Override, +                public void onResponse(long taskId) {, +                    listener.onResponse(new Response(true));, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +            });, +        }, +, +        private void normalCloseJob(Task task, long persistentTaskId, Request request, ActionListener<Response> listener) {, +                    ActionListener.wrap(r -> waitForJobClosed(persistentTaskId, request, r, listener), listener::onFailure);, +        void waitForJobClosed(long persistentTaskId, Request request, Response response, ActionListener<Response> listener) {, +            persistentTasksService.waitForPersistentTaskStatus(persistentTaskId, Objects::isNull, request.timeout,, +                    new WaitForPersistentTaskStatusListener() {, +                @Override, +                public void onResponse(long taskId) {, +, +                @Override, +                public void onFailure(Exception e) {, +                    listener.onFailure(e);, +                }, +    static PersistentTask<?> validateAndReturnJobTask(String jobId, ClusterState state) {, +        Job job = mlMetadata.getJobs().get(jobId);, +        if (job == null) {]