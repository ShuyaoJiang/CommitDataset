[+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +                /*, +                 * We need to forcefully overwrite the query cache implementation to use security's opt-out query cache implementation. This, +                 * implementation disables the query cache if field level security is used for a particular request. We have to forcefully, +                 * overwrite the query cache implementation to prevent data leakage to unauthorized users., +                 */, +                        (settings, cache) -> {, +                            final OptOutQueryCache queryCache =, +                                    new OptOutQueryCache(settings, cache, threadContext.get(), getLicenseState());, +                            queryCache.listenForLicenseStateChanges();, +                            return queryCache;, +                        });, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +                /*, +                 * We need to forcefully overwrite the query cache implementation to use security's opt-out query cache implementation. This, +                 * implementation disables the query cache if field level security is used for a particular request. We have to forcefully, +                 * overwrite the query cache implementation to prevent data leakage to unauthorized users., +                 */, +                        (settings, cache) -> {, +                            final OptOutQueryCache queryCache =, +                                    new OptOutQueryCache(settings, cache, threadContext.get(), getLicenseState());, +                            queryCache.listenForLicenseStateChanges();, +                            return queryCache;, +                        });, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/OptOutQueryCache.java, + * Opts out of the query cache if field level security is active for the current request, and it is unsafe to cache. Note that the method, + * {@link #listenForLicenseStateChanges()} must be invoked after construction of the query cache and before any other public methods are, + * invoked on this query cache., +    private volatile boolean licenseStateListenerRegistered;, +    }, +, +    /**, +     * Register this query cache to listen for license state changes. This must be done after construction of this query cache before any, +     * other public methods are invoked on this query cache., +     */, +    public void listenForLicenseStateChanges() {, +        /*, +         * Registering this as a listener can not be done in the constructor because otherwise it would be unsafe publication of this. That, +         * is, it would expose this to another thread before the constructor had finished. Therefore, we have a dedicated method to register, +         * the listener that is invoked after the constructor has returned., +         */, +        assert licenseStateListenerRegistered == false;, +        licenseStateListenerRegistered = true;, +        assert licenseStateListenerRegistered;, +        assert licenseStateListenerRegistered;, +    public void clear(final String reason) {, +        assert licenseStateListenerRegistered;, +        assert licenseStateListenerRegistered;, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java, +                /*, +                 * We need to forcefully overwrite the query cache implementation to use security's opt-out query cache implementation. This, +                 * implementation disables the query cache if field level security is used for a particular request. We have to forcefully, +                 * overwrite the query cache implementation to prevent data leakage to unauthorized users., +                 */, +                        (settings, cache) -> {, +                            final OptOutQueryCache queryCache =, +                                    new OptOutQueryCache(settings, cache, threadContext.get(), getLicenseState());, +                            queryCache.listenForLicenseStateChanges();, +                            return queryCache;, +                        });, +++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/accesscontrol/OptOutQueryCache.java, + * Opts out of the query cache if field level security is active for the current request, and it is unsafe to cache. Note that the method, + * {@link #listenForLicenseStateChanges()} must be invoked after construction of the query cache and before any other public methods are, + * invoked on this query cache., +    private volatile boolean licenseStateListenerRegistered;, +    }, +, +    /**, +     * Register this query cache to listen for license state changes. This must be done after construction of this query cache before any, +     * other public methods are invoked on this query cache., +     */, +    public void listenForLicenseStateChanges() {, +        /*, +         * Registering this as a listener can not be done in the constructor because otherwise it would be unsafe publication of this. That, +         * is, it would expose this to another thread before the constructor had finished. Therefore, we have a dedicated method to register, +         * the listener that is invoked after the constructor has returned., +         */, +        assert licenseStateListenerRegistered == false;, +        licenseStateListenerRegistered = true;, +        assert licenseStateListenerRegistered;, +        assert licenseStateListenerRegistered;, +    public void clear(final String reason) {, +        assert licenseStateListenerRegistered;, +        assert licenseStateListenerRegistered;, +++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authz/accesscontrol/OptOutQueryCacheTests.java, +        cache.listenForLicenseStateChanges();, +        cache.listenForLicenseStateChanges();, +        cache.listenForLicenseStateChanges();, +        cache.listenForLicenseStateChanges();]