[+++ b/src/test/java/org/elasticsearch/indices/IndicesLifecycleListenerTests.java, +import com.google.common.base.Predicate;, +import org.elasticsearch.common.Strings;, +import java.util.Map;, +import java.util.concurrent.TimeUnit;, +    private static void assertShardStatesMatch(final IndexShardStateChangeListener stateChangeListener, final int numShards, final IndexShardState... shardStates), +            throws InterruptedException {, +, +        Predicate<Object> waitPredicate = new Predicate<Object>() {, +            @Override, +            public boolean apply(Object input) {, +                if (stateChangeListener.shardStates.size() != numShards) {, +                    return false;, +                }, +                    if (indexShardStates == null || indexShardStates.size() != shardStates.length) {, +                        return false;, +                    }, +                        if (indexShardStates.get(i) != shardStates[i]) {, +                            return false;, +                }, +                return true;, +            }, +        };, +        if (!awaitBusy(waitPredicate, 1, TimeUnit.MINUTES)) {, +            fail("failed to observe expect shard states\n" +, +                    "expected: [" + numShards + "] shards with states: " + Strings.arrayToCommaDelimitedString(shardStates) + "\n" +, +                    "observed:\n" + stateChangeListener);, +        }, +, +, +        @Override, +        public String toString() {, +            StringBuilder sb = new StringBuilder();, +            for (Map.Entry<ShardId, List<IndexShardState>> entry : shardStates.entrySet()) {, +                sb.append(entry.getKey()).append(" --> ").append(Strings.collectionToCommaDelimitedString(entry.getValue())).append("\n");, +            }, +            return sb.toString();, +        }]