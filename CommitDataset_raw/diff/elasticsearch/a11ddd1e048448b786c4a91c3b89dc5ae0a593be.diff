[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.xpack.ml.utils.DomainSplitFunction;, +import java.util.HashMap;, +import java.util.Map;, +            List<SearchSourceBuilder.ScriptField> sorted = new ArrayList<>();, +            for (SearchSourceBuilder.ScriptField scriptField : scriptFields) {, +                String script = scriptField.script().getIdOrCode();, +, +                if (script.contains("domainSplit(")) {, +                    String modifiedCode = DomainSplitFunction.function + "\n" + script;, +                    Map<String, Object> modifiedParams = new HashMap<>(scriptField.script().getParams().size(), +                            + DomainSplitFunction.params.size());, +, +                    modifiedParams.putAll(scriptField.script().getParams());, +                    modifiedParams.putAll(DomainSplitFunction.params);, +, +                    Script newScript = new Script(scriptField.script().getType(), scriptField.script().getLang(),, +                            modifiedCode, modifiedParams);, +, +                    sorted.add(new SearchSourceBuilder.ScriptField(scriptField.fieldName(), newScript, scriptField.ignoreFailure()));, +                } else {, +                    sorted.add(scriptField);, +                }, +, +            }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.script.Script;, +import org.elasticsearch.xpack.ml.utils.DomainSplitFunction;, +import java.util.HashMap;, +import java.util.Map;, +            List<SearchSourceBuilder.ScriptField> sorted = new ArrayList<>();, +            for (SearchSourceBuilder.ScriptField scriptField : scriptFields) {, +                String script = scriptField.script().getIdOrCode();, +, +                if (script.contains("domainSplit(")) {, +                    String modifiedCode = DomainSplitFunction.function + "\n" + script;, +                    Map<String, Object> modifiedParams = new HashMap<>(scriptField.script().getParams().size(), +                            + DomainSplitFunction.params.size());, +, +                    modifiedParams.putAll(scriptField.script().getParams());, +                    modifiedParams.putAll(DomainSplitFunction.params);, +, +                    Script newScript = new Script(scriptField.script().getType(), scriptField.script().getLang(),, +                            modifiedCode, modifiedParams);, +, +                    sorted.add(new SearchSourceBuilder.ScriptField(scriptField.fieldName(), newScript, scriptField.ignoreFailure()));, +                } else {, +                    sorted.add(scriptField);, +                }, +, +            }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/utils/DomainSplitFunction.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.ml.utils;, +, +import java.util.Collections;, +import java.util.Enumeration;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +import java.util.ResourceBundle;, +, +public final class DomainSplitFunction {, +, +    public static final String function;, +    public static final Map<String, Object> params;, +, +    DomainSplitFunction() {}, +, +    static {, +        Map<String, Object> paramsMap = new HashMap<>();, +, +        ResourceBundle resource = ResourceBundle.getBundle("org/elasticsearch/xpack/ml/transforms/exact", Locale.getDefault());, +        Enumeration<String> keys = resource.getKeys();, +        Map<String, String> exact = new HashMap<>(2048);, +        while (keys.hasMoreElements()) {, +            String key = keys.nextElement();, +            String value = resource.getString(key);, +            exact.put(key, value);, +        }, +        exact = Collections.unmodifiableMap(exact);, +, +        Map<String, Object> under = new HashMap<>(30);, +        under.put("bd", "i");, +        under.put("np", "i");, +        under.put("jm", "i");, +        under.put("fj", "i");, +        under.put("fk", "i");, +        under.put("ye", "i");, +        under.put("sch.uk", "i");, +        under.put("bn", "i");, +        under.put("kitakyushu.jp", "i");, +        under.put("kobe.jp", "i");, +        under.put("ke", "i");, +        under.put("sapporo.jp", "i");]