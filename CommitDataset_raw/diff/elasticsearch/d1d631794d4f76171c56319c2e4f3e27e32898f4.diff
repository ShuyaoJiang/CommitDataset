[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.Collection;, +    public Collection<String> types() {, +        return mappers.keySet();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.Collection;, +    public Collection<String> types() {, +        return mappers.keySet();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/FilterBuilders.java, +import org.elasticsearch.common.Nullable;, +, +     * Creates a new ids filter with the provided doc/mapping types., +     * @param types The types to match the ids against., +    public static IdsFilterBuilder idsFilter(@Nullable String... types) {, +        return new IdsFilterBuilder(types);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.Collection;, +    public Collection<String> types() {, +        return mappers.keySet();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/FilterBuilders.java, +import org.elasticsearch.common.Nullable;, +, +     * Creates a new ids filter with the provided doc/mapping types., +     * @param types The types to match the ids against., +    public static IdsFilterBuilder idsFilter(@Nullable String... types) {, +        return new IdsFilterBuilder(types);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/IdsFilterBuilder.java, +    private final List<String> types;, +    public IdsFilterBuilder(String... types) {, +        this.types = types == null ? null : Arrays.asList(types);, +        if (types != null) {, +            if (types.size() == 1) {, +                builder.field("type", types.get(0));, +            } else {, +                builder.startArray("types");, +                for (Object type : types) {, +                    builder.value(type);, +                }, +                builder.endArray();, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.Collection;, +    public Collection<String> types() {, +        return mappers.keySet();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/FilterBuilders.java, +import org.elasticsearch.common.Nullable;, +, +     * Creates a new ids filter with the provided doc/mapping types., +     * @param types The types to match the ids against., +    public static IdsFilterBuilder idsFilter(@Nullable String... types) {, +        return new IdsFilterBuilder(types);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/IdsFilterBuilder.java, +    private final List<String> types;, +    public IdsFilterBuilder(String... types) {, +        this.types = types == null ? null : Arrays.asList(types);, +        if (types != null) {, +            if (types.size() == 1) {, +                builder.field("type", types.get(0));, +            } else {, +                builder.startArray("types");, +                for (Object type : types) {, +                    builder.value(type);, +                }, +                builder.endArray();, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/xcontent/IdsFilterParser.java, +import org.elasticsearch.common.collect.ImmutableList;, +import org.elasticsearch.common.collect.Iterables;, +import java.util.Collection;, +        Collection<String> types = null;, +                } else if ("types".equals(currentFieldName) || "type".equals(currentFieldName)) {, +                    types = new ArrayList<String>();, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                        String value = parser.textOrNull();, +                        if (value == null) {, +                            throw new QueryParsingException(index, "No type specified for term filter");, +                        }, +                        types.add(value);, +                    }, +                    types = ImmutableList.of(parser.text());, +        if (types == null || types.isEmpty()) {, +            types = parseContext.mapperService().types();, +        } else if (types.size() == 1 && Iterables.getFirst(types, null).equals("_all")) {, +            types = parseContext.mapperService().types();, +        }, +, +        UidFilter filter = new UidFilter(types, ids, parseContext.indexCache().bloomCache());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import java.util.Collection;, +    public Collection<String> types() {]