[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +     * Expand the {@code jobId} parameter and add the job Id to one of the list arguments, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +     * Expand the {@code jobId} parameter and add the job Id to one of the list arguments, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/StopDatafeedAction.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +import java.util.stream.Stream;, +        private String[] resolvedStartedDatafeedIds;, +            this.resolvedStartedDatafeedIds = new String[] { datafeedId };, +        private String[] getResolvedStartedDatafeedIds() {, +            return resolvedStartedDatafeedIds;, +        private void setResolvedStartedDatafeedIds(String[] resolvedStartedDatafeedIds) {, +            this.resolvedStartedDatafeedIds = resolvedStartedDatafeedIds;, +            for (String id : resolvedStartedDatafeedIds) {, +                String expectedDescription = MlMetadata.datafeedTaskId(id);, +            resolvedStartedDatafeedIds = in.readStringArray();, +            out.writeStringArray(resolvedStartedDatafeedIds);, +                List<String> startedDatafeeds = new ArrayList<>();, +                List<String> stoppingDatafeeds = new ArrayList<>();, +                resolveDataFeedIds(request.getDatafeedId(), mlMetadata, tasks, startedDatafeeds, stoppingDatafeeds);, +                if (startedDatafeeds.isEmpty() && stoppingDatafeeds.isEmpty()) {, +                request.setResolvedStartedDatafeedIds(startedDatafeeds.toArray(new String[startedDatafeeds.size()]));, +                    forceStopDatafeed(request, listener, tasks, startedDatafeeds);, +                } else {, +                    normalStopDatafeed(task, request, listener, tasks, startedDatafeeds, stoppingDatafeeds);, +                }, +            }, +        }, +        private void normalStopDatafeed(Task task, Request request, ActionListener<Response> listener,, +                                        PersistentTasksCustomMetaData tasks,, +                                        List<String> startedDatafeeds, List<String> stoppingDatafeeds) {, +            Set<String> executorNodes = new HashSet<>();, +            for (String datafeedId : startedDatafeeds) {, +                PersistentTask<?> datafeedTask = MlMetadata.getDatafeedTask(datafeedId, tasks);, +                executorNodes.add(datafeedTask.getExecutorNode());, +            }, +            request.setNodes(executorNodes.toArray(new String[executorNodes.size()]));, +, +            // wait for started and stopping datafeeds, +            // Map datafeedId -> datafeed task Id., +            List<String> allDataFeedsToWaitFor = Stream.concat(, +                    startedDatafeeds.stream().map(id -> MlMetadata.datafeedTaskId(id)),, +                    stoppingDatafeeds.stream().map(id -> MlMetadata.datafeedTaskId(id))), +                    .collect(Collectors.toList());, +, +            ActionListener<Response> finalListener = ActionListener.wrap(, +                    r -> waitForDatafeedStopped(allDataFeedsToWaitFor, request, r, listener),, +                    listener::onFailure);, +, +            super.doExecute(task, request, finalListener);, +        }, +, +        private void forceStopDatafeed(final Request request, final ActionListener<Response> listener,, +                                       PersistentTasksCustomMetaData tasks, final List<String> startedDatafeeds) {, +            final AtomicInteger counter = new AtomicInteger();, +            final AtomicArray<Exception> failures = new AtomicArray<>(startedDatafeeds.size());, +, +            for (String datafeedId : startedDatafeeds) {, +                            if (counter.incrementAndGet() == startedDatafeeds.size()) {, +                            if (slot == startedDatafeeds.size()) {, +                    if (slot == startedDatafeeds.size()) {, +        @Override, +        protected void taskOperation(Request request, StartDatafeedAction.DatafeedTask datafeedTaskTask,, +                                     ActionListener<Response> listener) {, +            DatafeedState taskStatus = DatafeedState.STOPPING;, +            datafeedTaskTask.updatePersistentStatus(taskStatus, ActionListener.wrap(task -> {, +                // we need to fork because we are now on a network threadpool, +                threadPool.executor(MachineLearning.UTILITY_THREAD_POOL_NAME).execute(new AbstractRunnable() {, +                    @Override, +                    public void onFailure(Exception e) {, +                        listener.onFailure(e);, +                    }, +                    @Override, +                    protected void doRun() throws Exception {, +                        datafeedTaskTask.stop("stop_datafeed (api)", request.getStopTimeout());, +                        listener.onResponse(new Response(true));, +                });, +            }, listener::onFailure));, +        void waitForDatafeedStopped(List<String> datafeedPersistentTaskIds, Request request, Response response,, +                for (String persistentTaskId: datafeedPersistentTaskIds) {, +            if (request.getResolvedStartedDatafeedIds().length != tasks.size()) {, +    /**, +     * Expand the {@code datafeedId} parameter and add the resolved datafeed Id to, +     * one of the list arguments depending on datafeed state., +     *, +     * @param datafeedId Datafeed Id. If datafeedId == "_all" then expand the datafeed list, +     * @param mlMetadata ML Metadata, +     * @param tasks Persistent task meta data, +     * @param startedDatafeedIds Started datafeed ids are added to this list, +     * @param stoppingDatafeedIds Stopping datafeed ids are added to this list, +     */, +    static void resolveDataFeedIds(String datafeedId, MlMetadata mlMetadata,, +                                           PersistentTasksCustomMetaData tasks,, +                                           List<String> startedDatafeedIds,, +                                           List<String> stoppingDatafeedIds) {, +, +            validateDatafeedTask(datafeedId, mlMetadata);, +            addDatafeedTaskIdAccordingToState(datafeedId, MlMetadata.getDatafeedState(datafeedId, tasks),, +                    startedDatafeedIds, stoppingDatafeedIds);, +            return;]