[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumns.java, +import org.elasticsearch.xpack.sql.tree.Source;, +            // skip the nested and object types only for ODBC, +            // https://github.com/elastic/elasticsearch/issues/35376, +            if (type.isPrimitive() || !isOdbcClient) {, +            }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumns.java, +import org.elasticsearch.xpack.sql.tree.Source;, +            // skip the nested and object types only for ODBC, +            // https://github.com/elastic/elasticsearch/issues/35376, +            if (type.isPrimitive() || !isOdbcClient) {, +            }, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/plan/logical/command/sys/SysColumnsTests.java, +        assertEquals(14, rows.size());, +        row = rows.get(3);, +        assertEquals("keyword", name(row));, +        assertEquals((short) Types.VARCHAR, sqlType(row));, +        assertEquals(null, radix(row));, +        assertEquals(Integer.MAX_VALUE, bufferLength(row));, +        assertNull(decimalPrecision(row));, +        assertEquals(Short.class, nullable(row).getClass());, +        assertEquals(Short.class, sqlDataType(row).getClass());, +        assertEquals(Short.class, sqlDataTypeSub(row).getClass());, +, +        row = rows.get(5);, +        assertEquals("unsupported", name(row));, +        assertEquals((short) Types.OTHER, sqlType(row));, +        assertEquals(0, precision(row));, +        assertEquals(0, bufferLength(row));, +        row = rows.get(6);, +        assertEquals("some.dotted.field", name(row));, +        assertEquals((short) Types.VARCHAR, sqlType(row));, +        assertEquals(null, radix(row));, +        assertEquals(Integer.MAX_VALUE, bufferLength(row));, +        assertNull(decimalPrecision(row));, +        assertEquals(Short.class, nullable(row).getClass());, +        assertEquals(Short.class, sqlDataType(row).getClass());, +        assertEquals(Short.class, sqlDataTypeSub(row).getClass());, +, +        row = rows.get(7);, +        assertEquals("some.string", name(row));, +        assertEquals((short) Types.VARCHAR, sqlType(row));, +        assertEquals(null, radix(row));, +        assertEquals(Integer.MAX_VALUE, bufferLength(row));, +        assertNull(decimalPrecision(row));, +        assertEquals(Short.class, nullable(row).getClass());, +        assertEquals(Short.class, sqlDataType(row).getClass());, +        assertEquals(Short.class, sqlDataTypeSub(row).getClass());, +, +        row = rows.get(8);, +        assertEquals("some.string.normalized", name(row));, +        assertEquals((short) Types.VARCHAR, sqlType(row));, +        assertEquals(null, radix(row));, +        assertEquals(Integer.MAX_VALUE, bufferLength(row));, +        assertNull(decimalPrecision(row));, +        assertEquals(Short.class, nullable(row).getClass());, +        assertEquals(Short.class, sqlDataType(row).getClass());, +        assertEquals(Short.class, sqlDataTypeSub(row).getClass());, +, +        row = rows.get(9);, +        assertEquals("some.string.typical", name(row));, +        assertEquals((short) Types.VARCHAR, sqlType(row));, +        assertEquals(null, radix(row));, +        assertEquals(Integer.MAX_VALUE, bufferLength(row));, +        assertNull(decimalPrecision(row));, +        assertEquals(Short.class, nullable(row).getClass());, +        assertEquals(Short.class, sqlDataType(row).getClass());, +        assertEquals(Short.class, sqlDataTypeSub(row).getClass());, +, +        row = rows.get(13);]