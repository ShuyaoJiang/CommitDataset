[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.Lists;, +import java.util.ArrayList;, +    /**, +     * Extracts raw values (string, int, and so on) based on the path provided returning all of them, +     * as a single list., +     */, +    public static List<Object> extractRawValues(String path, Map<String, Object> map) {, +        List<Object> values = Lists.newArrayList();, +        String[] pathElements = Strings.splitStringToArray(path, '.');, +        if (pathElements.length == 0) {, +            return values;, +        }, +        extractRawValues(values, map, pathElements, 0);, +        return values;, +    }, +, +    @SuppressWarnings({"unchecked"}), +    private static void extractRawValues(List values, Map<String, Object> part, String[] pathElements, int index) {, +        if (index == pathElements.length) {, +            return;, +        }, +        String currentPath = pathElements[index];, +        Object currentValue = part.get(currentPath);, +        if (currentValue == null) {, +            return;, +        }, +        if (currentValue instanceof Map) {, +            extractRawValues(values, (Map<String, Object>) currentValue, pathElements, index + 1);, +        } else if (currentValue instanceof List) {, +            extractRawValues(values, (List) currentValue, pathElements, index + 1);, +        } else {, +            values.add(currentValue);, +        }, +    }, +, +    @SuppressWarnings({"unchecked"}), +    private static void extractRawValues(List values, List<Object> part, String[] pathElements, int index) {, +        for (Object value : part) {, +            if (value == null) {, +                continue;, +            }, +            if (value instanceof Map) {, +                extractRawValues(values, (Map<String, Object>) value, pathElements, index);, +            } else if (value instanceof List) {, +                extractRawValues(values, (List) value, pathElements, index);, +            } else {, +                values.add(value);, +            }, +        }, +    }, +, +    public static Object extractValue(String path, Map<String, Object> map) {, +        String[] pathElements = Strings.splitStringToArray(path, '.');, +        if (pathElements.length == 0) {, +            return null;, +        }, +        return extractValue(pathElements, 0, map);, +    }, +, +    @SuppressWarnings({"unchecked"}) private static Object extractValue(String[] pathElements, int index, Object currentValue) {, +        if (index == pathElements.length) {, +            return currentValue;, +        }, +        if (currentValue == null) {, +            return null;, +        }, +        if (currentValue instanceof Map) {, +            Map map = (Map) currentValue;, +            return extractValue(pathElements, index + 1, map.get(pathElements[index]));, +        }, +        if (currentValue instanceof List) {, +            List valueList = (List) currentValue;, +            List newList = new ArrayList(valueList.size());, +            for (Object o : valueList) {, +                Object listValue = extractValue(pathElements, index, o);, +                if (listValue != null) {, +                    newList.add(listValue);, +                }, +            }, +            return newList;, +        }, +        return null;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.collect.Lists;, +import java.util.ArrayList;, +    /**, +     * Extracts raw values (string, int, and so on) based on the path provided returning all of them, +     * as a single list., +     */, +    public static List<Object> extractRawValues(String path, Map<String, Object> map) {, +        List<Object> values = Lists.newArrayList();, +        String[] pathElements = Strings.splitStringToArray(path, '.');, +        if (pathElements.length == 0) {, +            return values;, +        }]