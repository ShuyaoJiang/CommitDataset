[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryAndFetchAction.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryAndFetchAction.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryAndFetchAction.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            if (docIdsToLoad == null) {, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryAndFetchAction.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            if (docIdsToLoad == null) {, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +            int totalCount = cache.size();, +            int cleaned = 0;, +                    cleaned++;, +            logger.trace("Cleaned [{}] out of estimated total [{}]", cleaned, totalCount);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryAndFetchAction.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            if (docIdsToLoad == null) {, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +            int totalCount = cache.size();, +            int cleaned = 0;, +                    cleaned++;, +            logger.trace("Cleaned [{}] out of estimated total [{}]", cleaned, totalCount);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +            if (context.scroll() == null) {, +                freeContext(request.id());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchDfsQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryAndFetchAction.java, + * @author kimchy (shay.banon), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchQueryThenFetchAction.java, +        private volatile Map<SearchShardTarget, ExtTIntArrayList> docIdsToLoad;, +            this.docIdsToLoad = docIdsToLoad;, +            releaseIrrelevantSearchContexts(queryResults, docIdsToLoad);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +            if (docIdsToLoad == null) {, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/cache/filter/support/AbstractConcurrentMapFilterCache.java, +            int totalCount = cache.size();, +            int cleaned = 0;, +                    cleaned++;, +            logger.trace("Cleaned [{}] out of estimated total [{}]", cleaned, totalCount);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchService.java, +            if (context.scroll() == null) {, +                freeContext(request.id());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/action/SearchServiceTransportAction.java, +import org.elasticsearch.util.component.AbstractComponent;, +import org.elasticsearch.util.logging.ESLogger;]