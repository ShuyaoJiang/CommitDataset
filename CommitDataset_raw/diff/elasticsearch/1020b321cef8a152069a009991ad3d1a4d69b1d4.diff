[+++ b/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +import com.sun.jna.Structure;, +, +import org.apache.lucene.util.Constants;, +import java.util.Arrays;, +import java.util.List;, +, +final class JNACLibrary {, +    public static final int RLIMIT_MEMLOCK = Constants.MAC_OS_X ? 6 : 8;, +            logger.warn("unable to link C library. native methods (mlockall) will be disabled.", e);, +    /** corresponds to struct rlimit */, +    public static final class Rlimit extends Structure implements Structure.ByReference {, +        public long rlim_cur = 0;, +        public long rlim_max = 0;, +        , +        @Override, +        protected List getFieldOrder() {, +            return Arrays.asList(new String[] { "rlim_cur", "rlim_max" });, +        }, +    }, +    , +    static native int getrlimit(int resource, Rlimit rlimit);, +    , +    static native String strerror(int errno);, +, +    , +    public static void main(String args[]) throws Exception {, +        JNANatives.tryMlockall();, +    }, +++ b/src/main/java/org/elasticsearch/bootstrap/JNACLibrary.java, +import com.sun.jna.Structure;, +, +import org.apache.lucene.util.Constants;, +import java.util.Arrays;, +import java.util.List;, +, +final class JNACLibrary {, +    public static final int RLIMIT_MEMLOCK = Constants.MAC_OS_X ? 6 : 8;, +            logger.warn("unable to link C library. native methods (mlockall) will be disabled.", e);, +    /** corresponds to struct rlimit */, +    public static final class Rlimit extends Structure implements Structure.ByReference {, +        public long rlim_cur = 0;, +        public long rlim_max = 0;, +        , +        @Override, +        protected List getFieldOrder() {, +            return Arrays.asList(new String[] { "rlim_cur", "rlim_max" });, +        }, +    }, +    , +    static native int getrlimit(int resource, Rlimit rlimit);, +    , +    static native String strerror(int errno);, +, +    , +    public static void main(String args[]) throws Exception {, +        JNANatives.tryMlockall();, +    }, +++ b/src/main/java/org/elasticsearch/bootstrap/JNANatives.java, +        String errMsg = null;, +        boolean rlimitSuccess = false;, +        long softLimit = 0;, +        long hardLimit = 0;, +        , +            if (result == 0) {, +                return;, +            }, +            , +            errno = Native.getLastError();, +            errMsg = JNACLibrary.strerror(errno);, +            JNACLibrary.Rlimit rlimit = new JNACLibrary.Rlimit();, +            if (JNACLibrary.getrlimit(JNACLibrary.RLIMIT_MEMLOCK, rlimit) == 0) {, +              rlimitSuccess = true;, +              softLimit = rlimit.rlim_cur;, +              hardLimit = rlimit.rlim_max;, +            } else {, +              logger.warn("Unable to retrieve resource limits: " + JNACLibrary.strerror(Native.getLastError()));, +        // mlockall failed for some reason, +        logger.warn("Unable to lock JVM Memory: error=" + errno + ",reason=" + errMsg + ". This can result in part of the JVM being swapped out");, +        if (errno == JNACLibrary.ENOMEM) {, +            if (rlimitSuccess) {, +                logger.warn("Increase RLIMIT_MEMLOCK (ulimit). soft limit:" + softLimit + ", hard limit:" + hardLimit);, +            } else {, +                logger.warn("Increase RLIMIT_MEMLOCK (ulimit).");]