[+++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +            TermsLookup termsLookup = new TermsLookup(lookupIndex, lookupType, lookupId, lookupRouting, lookupPath, parseContext);, +            terms.addAll(termsFilterCache.terms(termsLookup, lookupCache, cacheKey));, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +            TermsLookup termsLookup = new TermsLookup(lookupIndex, lookupType, lookupId, lookupRouting, lookupPath, parseContext);, +            terms.addAll(termsFilterCache.terms(termsLookup, lookupCache, cacheKey));, +++ b/src/main/java/org/elasticsearch/indices/cache/filter/terms/IndicesTermsFilterCache.java, +import com.google.common.collect.ImmutableList;, +import org.apache.lucene.util.RamUsageEstimator;, +    private static final long BASE_RAM_BYTES_STRING = RamUsageEstimator.shallowSizeOfInstance(String.class) + RamUsageEstimator.NUM_BYTES_OBJECT_HEADER;, +    private static final long BASE_RAM_BYTES_BYTES_REF = RamUsageEstimator.shallowSizeOfInstance(BytesRef.class) + RamUsageEstimator.NUM_BYTES_OBJECT_HEADER;, +    private static final TermsFilterValue NO_TERMS = new TermsFilterValue(0, ImmutableList.of());, +    public List<Object> terms(final TermsLookup lookup, boolean cacheLookup, @Nullable HashedBytesRef cacheKey) throws RuntimeException {, +            return buildTermsFilterValue(lookup).values;, +            }).values;, +        return new TermsFilterValue(estimateSizeInBytes(values), ImmutableList.copyOf(values));, +        long size = 8 + terms.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;, +                size += BASE_RAM_BYTES_BYTES_REF + ((BytesRef) term).length;, +                size += BASE_RAM_BYTES_STRING + ((String) term).length() * RamUsageEstimator.NUM_BYTES_CHAR;, +        public final ImmutableList<Object> values;, +        TermsFilterValue(long sizeInBytes, ImmutableList<Object> values) {, +            this.values = values;, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +            TermsLookup termsLookup = new TermsLookup(lookupIndex, lookupType, lookupId, lookupRouting, lookupPath, parseContext);, +            terms.addAll(termsFilterCache.terms(termsLookup, lookupCache, cacheKey));, +++ b/src/main/java/org/elasticsearch/indices/cache/filter/terms/IndicesTermsFilterCache.java, +import com.google.common.collect.ImmutableList;, +import org.apache.lucene.util.RamUsageEstimator;, +    private static final long BASE_RAM_BYTES_STRING = RamUsageEstimator.shallowSizeOfInstance(String.class) + RamUsageEstimator.NUM_BYTES_OBJECT_HEADER;, +    private static final long BASE_RAM_BYTES_BYTES_REF = RamUsageEstimator.shallowSizeOfInstance(BytesRef.class) + RamUsageEstimator.NUM_BYTES_OBJECT_HEADER;, +    private static final TermsFilterValue NO_TERMS = new TermsFilterValue(0, ImmutableList.of());, +    public List<Object> terms(final TermsLookup lookup, boolean cacheLookup, @Nullable HashedBytesRef cacheKey) throws RuntimeException {, +            return buildTermsFilterValue(lookup).values;, +            }).values;, +        return new TermsFilterValue(estimateSizeInBytes(values), ImmutableList.copyOf(values));, +        long size = 8 + terms.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;, +                size += BASE_RAM_BYTES_BYTES_REF + ((BytesRef) term).length;, +                size += BASE_RAM_BYTES_STRING + ((String) term).length() * RamUsageEstimator.NUM_BYTES_CHAR;, +        public final ImmutableList<Object> values;, +        TermsFilterValue(long sizeInBytes, ImmutableList<Object> values) {, +            this.values = values;, +++ b/src/main/java/org/elasticsearch/indices/cache/filter/terms/TermsLookup.java, +    public TermsLookup(String index, String type, String id, String routing, String path, @Nullable QueryParseContext queryParseContext) {, +        return index + "/" + type + "/" + id + "/" + path;]