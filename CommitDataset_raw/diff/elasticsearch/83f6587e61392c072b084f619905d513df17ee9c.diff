[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        FuzzyQuery query = new FuzzyQuery(term, numEdits, prefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        FuzzyQuery query = new FuzzyQuery(term, numEdits, prefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryParser.java, +        boolean transpositions = FuzzyQuery.defaultTranspositions;, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        FuzzyQuery query = new FuzzyQuery(term, numEdits, prefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryParser.java, +        boolean transpositions = FuzzyQuery.defaultTranspositions;, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +    protected boolean transpositions = FuzzyQuery.defaultTranspositions;, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                return currentFieldType.fuzzyQuery(termStr, Fuzziness.build(minSimilarity), fuzzyPrefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +        FuzzyQuery query = new FuzzyQuery(term, numEdits, prefixLength, settings.fuzzyMaxExpansions(), FuzzyQuery.defaultTranspositions);, +++ b/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryParser.java, +        boolean transpositions = FuzzyQuery.defaultTranspositions;, +++ b/core/src/main/java/org/elasticsearch/index/search/MatchQuery.java, +    protected boolean transpositions = FuzzyQuery.defaultTranspositions;, +++ b/core/src/test/java/org/elasticsearch/bootstrap/JarHellTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.bootstrap;, +, +import org.elasticsearch.test.ElasticsearchTestCase;, +, +import java.io.ByteArrayOutputStream;, +import java.io.FileOutputStream;, +import java.io.IOException;, +import java.net.URL;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.StandardOpenOption;, +import java.util.jar.Attributes;, +import java.util.jar.JarOutputStream;, +import java.util.jar.Manifest;, +import java.util.zip.ZipEntry;, +import java.util.zip.ZipOutputStream;, +, +public class JarHellTests extends ElasticsearchTestCase {, +, +    URL makeJar(Path dir, String name, Manifest manifest, String... files) throws IOException {, +        Path jarpath = dir.resolve(name);, +        ZipOutputStream out;, +        if (manifest == null) {, +            out = new JarOutputStream(Files.newOutputStream(jarpath, StandardOpenOption.CREATE));, +        } else {, +            out = new JarOutputStream(Files.newOutputStream(jarpath, StandardOpenOption.CREATE), manifest);, +        }, +        for (String file : files) {, +            out.putNextEntry(new ZipEntry(file));, +        }, +        out.close();, +        return jarpath.toUri().toURL();, +    }, +, +    URL makeFile(Path dir, String name) throws IOException {, +        Path filepath = dir.resolve(name);, +        Files.newOutputStream(filepath, StandardOpenOption.CREATE).close();, +        return filepath.toUri().toURL();, +    }, +, +    public void testDifferentJars() throws Exception {, +        Path dir = createTempDir();, +        URL[] jars = {makeJar(dir, "foo.jar", null, "DuplicateClass.class"), makeJar(dir, "bar.jar", null, "DuplicateClass.class")};, +        try {, +            JarHell.checkJarHell(jars);, +        } catch (IllegalStateException e) {, +            assertTrue(e.getMessage().contains("jar hell!"));, +            assertTrue(e.getMessage().contains("DuplicateClass"));, +            assertTrue(e.getMessage().contains("foo.jar"));, +            assertTrue(e.getMessage().contains("bar.jar"));, +        }, +    }, +, +    public void testBootclasspathLeniency() throws Exception {, +        Path dir = createTempDir();, +        String previousJavaHome = System.getProperty("java.home");, +        System.setProperty("java.home", dir.toString());, +        URL[] jars = {makeJar(dir, "foo.jar", null, "DuplicateClass.class"), makeJar(dir, "bar.jar", null, "DuplicateClass.class")};]