[+++ b/core/src/main/java/org/elasticsearch/plugins/ListPluginsCommand.java, +                PluginInfo info = PluginInfo.readFromProperties(env.pluginsFile().resolve(plugin.toAbsolutePath()));, +                terminal.println(Terminal.Verbosity.VERBOSE, info.toString());, +++ b/core/src/main/java/org/elasticsearch/plugins/ListPluginsCommand.java, +                PluginInfo info = PluginInfo.readFromProperties(env.pluginsFile().resolve(plugin.toAbsolutePath()));, +                terminal.println(Terminal.Verbosity.VERBOSE, info.toString());, +++ b/qa/evil-tests/src/test/java/org/elasticsearch/plugins/ListPluginsCommandTests.java, +, +import java.nio.file.NoSuchFileException;, +import java.util.Arrays;, +import java.util.stream.Collectors;, +import org.elasticsearch.Version;, +        return listPlugins(env, new String[0]);, +    }, +    , +    static MockTerminal listPlugins(Environment env, String[] args) throws Exception {, +    static String buildMultiline(String... args){, +        return Arrays.asList(args).stream().collect(Collectors.joining("\n", "", "\n"));, +    }, +    , +    static void buildFakePlugin(Environment env, String description, String name, String classname) throws IOException {, +        PluginTestUtil.writeProperties(env.pluginsFile().resolve(name),, +                "description", description,, +                "name", name,, +                "version", "1.0",, +                "elasticsearch.version", Version.CURRENT.toString(),, +                "java.version", System.getProperty("java.specification.version"),, +                "classname", classname);, +    }, +, +, +        assertEquals(e.getMessage(), "Plugins directory missing: " + env.pluginsFile());, +        buildFakePlugin(env, "fake desc", "fake", "org.fake");, +        assertEquals(terminal.getOutput(), buildMultiline("fake"));, +        buildFakePlugin(env, "fake desc", "fake1", "org.fake");, +        buildFakePlugin(env, "fake desc 2", "fake2", "org.fake");, +        assertEquals(terminal.getOutput(), buildMultiline("fake1", "fake2"));, +    , +    public void testPluginWithVerbose() throws Exception {, +        Environment env = createEnv();, +        buildFakePlugin(env, "fake desc", "fake_plugin", "org.fake");, +        String[] params = { "-v" };, +        MockTerminal terminal = listPlugins(env, params);, +        assertEquals(terminal.getOutput(), buildMultiline("Plugins directory: " + env.pluginsFile(), "fake_plugin",, +                "- Plugin information:", "Name: fake_plugin", "Description: fake desc", "Version: 1.0", " * Classname: org.fake"));, +    }, +    , +    public void testPluginWithVerboseMultiplePlugins() throws Exception {, +        Environment env = createEnv();, +        buildFakePlugin(env, "fake desc 1", "fake_plugin1", "org.fake");, +        buildFakePlugin(env, "fake desc 2", "fake_plugin2", "org.fake2");, +        String[] params = { "-v" };, +        MockTerminal terminal = listPlugins(env, params);, +        assertEquals(terminal.getOutput(), buildMultiline("Plugins directory: " + env.pluginsFile(),, +                "fake_plugin1", "- Plugin information:", "Name: fake_plugin1", "Description: fake desc 1", "Version: 1.0",, +                " * Classname: org.fake", "fake_plugin2", "- Plugin information:", "Name: fake_plugin2",, +                "Description: fake desc 2", "Version: 1.0", " * Classname: org.fake2"));, +    }, +        , +    public void testPluginWithoutVerboseMultiplePlugins() throws Exception {, +        Environment env = createEnv();, +        buildFakePlugin(env, "fake desc 1", "fake_plugin1", "org.fake");, +        buildFakePlugin(env, "fake desc 2", "fake_plugin2", "org.fake2");, +        MockTerminal terminal = listPlugins(env, new String[0]);, +        String output = terminal.getOutput();, +        assertEquals(output, buildMultiline("fake_plugin1", "fake_plugin2"));, +    }, +    , +    public void testPluginWithoutDescriptorFile() throws Exception{, +        Environment env = createEnv();, +        Files.createDirectories(env.pluginsFile().resolve("fake1"));, +        NoSuchFileException e = expectThrows(NoSuchFileException.class, () -> listPlugins(env));, +        assertEquals(e.getFile(), env.pluginsFile().resolve("fake1").resolve(PluginInfo.ES_PLUGIN_PROPERTIES).toString());, +    }, +    , +    public void testPluginWithWrongDescriptorFile() throws Exception{, +        Environment env = createEnv();        , +        PluginTestUtil.writeProperties(env.pluginsFile().resolve("fake1"),, +                "description", "fake desc");, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> listPlugins(env));, +        assertEquals(e.getMessage(), "Property [name] is missing in [" +, +                env.pluginsFile().resolve("fake1").resolve(PluginInfo.ES_PLUGIN_PROPERTIES).toString() + "]");, +    }, +    ]