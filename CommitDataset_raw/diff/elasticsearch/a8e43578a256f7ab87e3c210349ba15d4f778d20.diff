[+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.add(MapperService.DEFAULT_MAPPING, XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string(), false);, +                            // apply the default here, its the first time we parse it, +                            mapperService.add(entry.getKey(), XContentFactory.jsonBuilder().map(entry.getValue()).string(), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.add(MapperService.DEFAULT_MAPPING, XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string(), false);, +                            // apply the default here, its the first time we parse it, +                            mapperService.add(entry.getKey(), XContentFactory.jsonBuilder().map(entry.getValue()).string(), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                // don't apply the default mapping, it has been applied when the mapping was created, +                                indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(request.mappingType, indexMetaData.mappings().get(request.mappingType).source().string(), false);, +                            // don't apply default mapping, we already applied them when we parsed it, +                            indexService.mapperService().add(newMapper.type(), newMapper.mappingSource().string(), false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.add(MapperService.DEFAULT_MAPPING, XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string(), false);, +                            // apply the default here, its the first time we parse it, +                            mapperService.add(entry.getKey(), XContentFactory.jsonBuilder().map(entry.getValue()).string(), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                // don't apply the default mapping, it has been applied when the mapping was created, +                                indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(request.mappingType, indexMetaData.mappings().get(request.mappingType).source().string(), false);, +                            // don't apply default mapping, we already applied them when we parsed it, +                            indexService.mapperService().add(newMapper.type(), newMapper.mappingSource().string(), false);, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +    public void add(String type, String mappingSource, boolean applyDefault) {, +            add(parse(type, mappingSource, applyDefault));, +     * Just parses and returns the mapper without adding it, while still applying default mapping., +        return parse(mappingType, mappingSource, true);, +    }, +, +    public DocumentMapper parse(String mappingType, String mappingSource, boolean applyDefault) throws MapperParsingException {, +        return documentParser.parse(mappingType, mappingSource, applyDefault ? defaultMappingSource : null);, +            add(type, null, true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.add(MapperService.DEFAULT_MAPPING, XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string(), false);, +                            // apply the default here, its the first time we parse it, +                            mapperService.add(entry.getKey(), XContentFactory.jsonBuilder().map(entry.getValue()).string(), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                // don't apply the default mapping, it has been applied when the mapping was created, +                                indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(request.mappingType, indexMetaData.mappings().get(request.mappingType).source().string(), false);, +                            // don't apply default mapping, we already applied them when we parsed it, +                            indexService.mapperService().add(newMapper.type(), newMapper.mappingSource().string(), false);, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +    public void add(String type, String mappingSource, boolean applyDefault) {, +            add(parse(type, mappingSource, applyDefault));, +     * Just parses and returns the mapper without adding it, while still applying default mapping., +        return parse(mappingType, mappingSource, true);, +    }, +, +    public DocumentMapper parse(String mappingType, String mappingSource, boolean applyDefault) throws MapperParsingException {, +        return documentParser.parse(mappingType, mappingSource, applyDefault ? defaultMappingSource : null);, +            add(type, null, true);, +++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                // we don't apply default, since it has been applied when the mappings were parsed initially, +                mapperService.add(mappingType, mappingSource.string(), false);, +                    // we don't apply default, since it has been applied when the mappings were parsed initially, +                    mapperService.add(mappingType, mappingSource.string(), false);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.add(MapperService.DEFAULT_MAPPING, XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string(), false);, +                            // apply the default here, its the first time we parse it, +                            mapperService.add(entry.getKey(), XContentFactory.jsonBuilder().map(entry.getValue()).string(), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                // don't apply the default mapping, it has been applied when the mapping was created, +                                indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(request.mappingType, indexMetaData.mappings().get(request.mappingType).source().string(), false);, +                            // don't apply default mapping, we already applied them when we parsed it, +                            indexService.mapperService().add(newMapper.type(), newMapper.mappingSource().string(), false);, +++ b/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +    public void add(String type, String mappingSource, boolean applyDefault) {, +            add(parse(type, mappingSource, applyDefault));, +     * Just parses and returns the mapper without adding it, while still applying default mapping., +        return parse(mappingType, mappingSource, true);, +    }, +, +    public DocumentMapper parse(String mappingType, String mappingSource, boolean applyDefault) throws MapperParsingException {, +        return documentParser.parse(mappingType, mappingSource, applyDefault ? defaultMappingSource : null);, +            add(type, null, true);, +++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                // we don't apply default, since it has been applied when the mappings were parsed initially, +                mapperService.add(mappingType, mappingSource.string(), false);, +                    // we don't apply default, since it has been applied when the mappings were parsed initially, +                    mapperService.add(mappingType, mappingSource.string(), false);, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/source/DefaultSourceMappingTests.java, +        mapperService.add(MapperService.DEFAULT_MAPPING, defaultMapping, true);, +        mapperService.add(MapperService.DEFAULT_MAPPING, defaultMapping, true);, +        mapperService.add("my_type", mapping, true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java, +                            mapperService.add(MapperService.DEFAULT_MAPPING, XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string(), false);, +                            // apply the default here, its the first time we parse it, +                            mapperService.add(entry.getKey(), XContentFactory.jsonBuilder().map(entry.getValue()).string(), true);, +++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +                                // don't apply the default mapping, it has been applied when the mapping was created, +                                indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);, +                            indexService.mapperService().add(type, indexMetaData.mappings().get(type).source().string(), false);]