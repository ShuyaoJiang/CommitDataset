[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-groovy[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]messy[/\\]tests[/\\]DateRangeTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-groovy[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]messy[/\\]tests[/\\]DateRangeTests.java" checks="LineLength" />, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // java 8 package, +  // java 9 "package", +  permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.ref";, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-groovy[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]messy[/\\]tests[/\\]DateRangeTests.java" checks="LineLength" />, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // java 8 package, +  // java 9 "package", +  permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.ref";, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +        assertBusy(new Runnable() { , +            @Override, +            public void run() {, +                assertThat(internalCluster().getInstance(GatewayAllocator.class, master).getNumberOfInFlightFetch(), equalTo(0));, +            }, +        });, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-groovy[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]messy[/\\]tests[/\\]DateRangeTests.java" checks="LineLength" />, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // java 8 package, +  // java 9 "package", +  permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.ref";, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +        assertBusy(new Runnable() { , +            @Override, +            public void run() {, +                assertThat(internalCluster().getInstance(GatewayAllocator.class, master).getNumberOfInFlightFetch(), equalTo(0));, +            }, +        });, +++ b/core/src/test/java/org/elasticsearch/common/lucene/LuceneTests.java, +        assertTrue("MMapDirectory does not support unmapping: " + MMapDirectory.UNMAP_NOT_SUPPORTED_REASON, MMapDirectory.UNMAP_SUPPORTED);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="modules[/\\]lang-groovy[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]messy[/\\]tests[/\\]DateRangeTests.java" checks="LineLength" />, +++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy, +  // java 8 package, +  // java 9 "package", +  permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.ref";, +++ b/core/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +        assertBusy(new Runnable() { , +            @Override, +            public void run() {, +                assertThat(internalCluster().getInstance(GatewayAllocator.class, master).getNumberOfInFlightFetch(), equalTo(0));, +            }, +        });, +++ b/core/src/test/java/org/elasticsearch/common/lucene/LuceneTests.java, +        assertTrue("MMapDirectory does not support unmapping: " + MMapDirectory.UNMAP_NOT_SUPPORTED_REASON, MMapDirectory.UNMAP_SUPPORTED);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.search.Scorer;, +import org.elasticsearch.script.CompiledScript;, +import org.elasticsearch.script.ExecutableScript;, +import org.elasticsearch.script.LeafSearchScript;, +import org.elasticsearch.script.ScriptEngineRegistry;, +import org.elasticsearch.script.ScriptEngineService;, +import org.elasticsearch.script.ScriptModule;, +import org.elasticsearch.script.SearchScript;, +import org.elasticsearch.search.lookup.LeafSearchLookup;, +import org.elasticsearch.search.lookup.SearchLookup;, +import java.util.Collections;, +                ExtractFieldScriptPlugin.class,, +                FieldValueScriptPlugin.class);, +                        .script(new Script("", ScriptType.INLINE, FieldValueScriptEngine.NAME, null)), +                        .script(new Script("", ScriptType.INLINE, FieldValueScriptEngine.NAME, null)), +                .addAggregation(dateHistogram("histo").script(new Script("date", ScriptType.INLINE, ExtractFieldScriptEngine.NAME, null)).dateHistogramInterval(DateHistogramInterval.MONTH)), +                .addAggregation(dateHistogram("histo").script(new Script("dates", ScriptType.INLINE, ExtractFieldScriptEngine.NAME, null)).dateHistogramInterval(DateHistogramInterval.MONTH)), +, +    /**, +     * Mock plugin for the {@link ExtractFieldScriptEngine}, +     */, +    public static class ExtractFieldScriptPlugin extends Plugin {, +, +        @Override, +        public String name() {, +            return ExtractFieldScriptEngine.NAME;, +        }, +, +        @Override, +        public String description() {, +            return "Mock script engine for " + DateHistogramIT.class;, +        }, +, +        public void onModule(ScriptModule module) {, +            module.addScriptEngine(new ScriptEngineRegistry.ScriptEngineRegistration(ExtractFieldScriptEngine.class, ExtractFieldScriptEngine.TYPES));, +        }, +, +    }, +, +    /**, +     * This mock script returns the field that is specified by name in the script body, +     */, +    public static class ExtractFieldScriptEngine implements ScriptEngineService {, +, +        public static final String NAME = "extract_field";, +, +        public static final List<String> TYPES = Collections.singletonList(NAME);]