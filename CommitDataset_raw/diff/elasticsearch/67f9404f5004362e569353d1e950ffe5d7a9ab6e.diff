[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/Pipe.java, +import org.elasticsearch.xpack.sql.tree.Source;, +        return children().stream().anyMatch(Pipe::supportedByAggsOnlyQuery);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/Pipe.java, +import org.elasticsearch.xpack.sql.tree.Source;, +        return children().stream().anyMatch(Pipe::supportedByAggsOnlyQuery);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIf.java, +import org.elasticsearch.xpack.sql.tree.Source;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/Pipe.java, +import org.elasticsearch.xpack.sql.tree.Source;, +        return children().stream().anyMatch(Pipe::supportedByAggsOnlyQuery);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIf.java, +import org.elasticsearch.xpack.sql.tree.Source;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIfProcessor.java, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/Pipe.java, +import org.elasticsearch.xpack.sql.tree.Source;, +        return children().stream().anyMatch(Pipe::supportedByAggsOnlyQuery);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIf.java, +import org.elasticsearch.xpack.sql.tree.Source;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIfProcessor.java, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/InPipe.java, +import org.elasticsearch.xpack.sql.expression.gen.pipeline.MultiPipe;, +import org.elasticsearch.xpack.sql.expression.gen.processor.Processor;, +import org.elasticsearch.xpack.sql.tree.Source;, +public class InPipe extends MultiPipe {, +        return NodeInfo.create(this, InPipe::new, expression(), children());, +        return Objects.hash(children());, +        return Objects.equals(children(), other.children());, +    public InProcessor asProcessor(List<Processor> processors) {, +        return new InProcessor(processors);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/pipeline/Pipe.java, +import org.elasticsearch.xpack.sql.tree.Source;, +        return children().stream().anyMatch(Pipe::supportedByAggsOnlyQuery);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIf.java, +import org.elasticsearch.xpack.sql.tree.Source;, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/conditional/NullIfProcessor.java, +        if (this == o) {, +            return true;, +        }, +        if (o == null || getClass() != o.getClass()) {, +            return false;, +        }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/operator/comparison/InPipe.java, +import org.elasticsearch.xpack.sql.expression.gen.pipeline.MultiPipe;, +import org.elasticsearch.xpack.sql.expression.gen.processor.Processor;, +import org.elasticsearch.xpack.sql.tree.Source;, +public class InPipe extends MultiPipe {, +        return NodeInfo.create(this, InPipe::new, expression(), children());, +        return Objects.hash(children());, +        return Objects.equals(children(), other.children());, +    public InProcessor asProcessor(List<Processor> processors) {, +        return new InProcessor(processors);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java, +import org.elasticsearch.xpack.sql.expression.predicate.conditional.ArbitraryConditionalFunction;, +import org.elasticsearch.xpack.sql.expression.predicate.conditional.ConditionalFunction;, +import java.lang.reflect.Constructor;, +    @SuppressWarnings("unchecked"), +    public void testNullFoldingDoesNotApplyOnConditionals() throws Exception {, +        Class<ConditionalFunction> clazz =, +            (Class<ConditionalFunction>) randomFrom(IfNull.class, NullIf.class);, +        Constructor<ConditionalFunction> ctor = clazz.getConstructor(Source.class, Expression.class, Expression.class);, +        ConditionalFunction conditionalFunction = ctor.newInstance(EMPTY, Literal.NULL, ONE);, +        assertEquals(conditionalFunction, rule.rule(conditionalFunction));, +        conditionalFunction = ctor.newInstance(EMPTY, ONE, Literal.NULL);, +        assertEquals(conditionalFunction, rule.rule(conditionalFunction));, +        conditionalFunction = ctor.newInstance(EMPTY, Literal.NULL, Literal.NULL);, +        assertEquals(conditionalFunction, rule.rule(conditionalFunction));, +    }, +    @SuppressWarnings("unchecked"), +    public void testNullFoldingDoesNotApplyOnArbitraryConditionals() throws Exception {, +        FoldNull rule = new FoldNull();, +, +        Class<ArbitraryConditionalFunction> clazz =, +            (Class<ArbitraryConditionalFunction>) randomFrom(Coalesce.class, Greatest.class, Least.class);, +        Constructor<ArbitraryConditionalFunction> ctor = clazz.getConstructor(Source.class, List.class);, +        ArbitraryConditionalFunction conditionalFunction = ctor.newInstance(EMPTY, Arrays.asList(Literal.NULL, ONE, TWO));, +        assertEquals(conditionalFunction, rule.rule(conditionalFunction));, +        conditionalFunction = ctor.newInstance(EMPTY, Arrays.asList(Literal.NULL, NULL, NULL));, +        assertEquals(conditionalFunction, rule.rule(conditionalFunction));]