[+++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +                        if (isMasterChannelException(exp)) {, +    private static Class[] MASTER_CHANNEL_EXCEPTIONS = new Class[]{, +        ConnectTransportException.class,, +    };, +, +    private static boolean isMasterChannelException(TransportException exp) {, +        return ExceptionsHelper.unwrap(exp, MASTER_CHANNEL_EXCEPTIONS) != null;, +, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +                        if (isMasterChannelException(exp)) {, +    private static Class[] MASTER_CHANNEL_EXCEPTIONS = new Class[]{, +        ConnectTransportException.class,, +    };, +, +    private static boolean isMasterChannelException(TransportException exp) {, +        return ExceptionsHelper.unwrap(exp, MASTER_CHANNEL_EXCEPTIONS) != null;, +, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +                transport.handleRemoteError(requestId, new Exception());, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +                        if (isMasterChannelException(exp)) {, +    private static Class[] MASTER_CHANNEL_EXCEPTIONS = new Class[]{, +        ConnectTransportException.class,, +    };, +, +    private static boolean isMasterChannelException(TransportException exp) {, +        return ExceptionsHelper.unwrap(exp, MASTER_CHANNEL_EXCEPTIONS) != null;, +, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +                transport.handleRemoteError(requestId, new Exception());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java, +            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(remoteNode, "Fake error"));, +            transport.handleRemoteError(capturedRequest.requestId, t);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +                        if (isMasterChannelException(exp)) {, +    private static Class[] MASTER_CHANNEL_EXCEPTIONS = new Class[]{, +        ConnectTransportException.class,, +    };, +, +    private static boolean isMasterChannelException(TransportException exp) {, +        return ExceptionsHelper.unwrap(exp, MASTER_CHANNEL_EXCEPTIONS) != null;, +, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +                transport.handleRemoteError(requestId, new Exception());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java, +            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(remoteNode, "Fake error"));, +            transport.handleRemoteError(capturedRequest.requestId, t);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +                transport.handleRemoteError(capturedRequest.requestId, t);, +                            transport.handleRemoteError(currentRequest.requestId, new NotMasterException("shard-failed-test"));, +        transport.handleRemoteError(replicationRequests[0].requestId, new CorruptIndexException("simulated", (String) null));, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +                        if (isMasterChannelException(exp)) {, +    private static Class[] MASTER_CHANNEL_EXCEPTIONS = new Class[]{, +        ConnectTransportException.class,, +    };, +, +    private static boolean isMasterChannelException(TransportException exp) {, +        return ExceptionsHelper.unwrap(exp, MASTER_CHANNEL_EXCEPTIONS) != null;, +, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +                transport.handleRemoteError(requestId, new Exception());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java, +            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(remoteNode, "Fake error"));, +            transport.handleRemoteError(capturedRequest.requestId, t);, +++ b/core/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java, +                transport.handleRemoteError(capturedRequest.requestId, t);, +                            transport.handleRemoteError(currentRequest.requestId, new NotMasterException("shard-failed-test"));, +        transport.handleRemoteError(replicationRequests[0].requestId, new CorruptIndexException("simulated", (String) null));, +++ b/core/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java, +        transport.handleRemoteError(requestId, new TransportException("a generic transport exception", new Exception("generic test exception")));, +        transport.handleLocalError(requestId, new ConnectTransportException(node, "test exception"));, +        transport.handleLocalError(requestId, new ConnectTransportException(node, "test exception"));, +        transport.handleLocalError(requestId, new ConnectTransportException(node, "test exception"));, +++ b/core/src/main/java/org/elasticsearch/cluster/action/shard/ShardStateAction.java, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.NodeNotConnectedException;, +                        if (isMasterChannelException(exp)) {, +    private static Class[] MASTER_CHANNEL_EXCEPTIONS = new Class[]{, +        ConnectTransportException.class,, +    };, +, +    private static boolean isMasterChannelException(TransportException exp) {, +        return ExceptionsHelper.unwrap(exp, MASTER_CHANNEL_EXCEPTIONS) != null;, +, +++ b/core/src/test/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeActionTests.java, +                transport.handleRemoteError(requestId, new Exception());, +++ b/core/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java, +            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(remoteNode, "Fake error"));]