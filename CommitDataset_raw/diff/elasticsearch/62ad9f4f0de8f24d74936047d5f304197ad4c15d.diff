[+++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.common.init.LazyInitializationModule;, +import org.elasticsearch.xpack.common.init.LazyInitializationService;, +        modules.add(new LazyInitializationModule());, +        // the initialization service must be first in the list, +        // as other services may depend on one of the initialized, +        // constructs, +        services.add(LazyInitializationService.class);, +    public void onModule(LazyInitializationModule module) {, +        watcher.onModule(module);, +    }, +, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.common.init.LazyInitializationModule;, +import org.elasticsearch.xpack.common.init.LazyInitializationService;, +        modules.add(new LazyInitializationModule());, +        // the initialization service must be first in the list, +        // as other services may depend on one of the initialized, +        // constructs, +        services.add(LazyInitializationService.class);, +    public void onModule(LazyInitializationModule module) {, +        watcher.onModule(module);, +    }, +, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/common/init/LazyInitializable.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.common.init;, +, +import org.elasticsearch.common.inject.Injector;, +, +public interface LazyInitializable {, +, +    /**, +     * This method is called once all objects have been constructed and, +     * the @{link LazyInitializationService} has been started., +     */, +    void init(Injector injector);, +}, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/XPackPlugin.java, +import org.elasticsearch.xpack.common.init.LazyInitializationModule;, +import org.elasticsearch.xpack.common.init.LazyInitializationService;, +        modules.add(new LazyInitializationModule());, +        // the initialization service must be first in the list, +        // as other services may depend on one of the initialized, +        // constructs, +        services.add(LazyInitializationService.class);, +    public void onModule(LazyInitializationModule module) {, +        watcher.onModule(module);, +    }, +, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/common/init/LazyInitializable.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.common.init;, +, +import org.elasticsearch.common.inject.Injector;, +, +public interface LazyInitializable {, +, +    /**, +     * This method is called once all objects have been constructed and, +     * the @{link LazyInitializationService} has been started., +     */, +    void init(Injector injector);, +}, +++ b/elasticsearch/x-pack/src/main/java/org/elasticsearch/xpack/common/init/LazyInitializationModule.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack.common.init;, +, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.inject.multibindings.Multibinder;, +, +import java.util.HashSet;, +import java.util.Set;, +, +/**, + * A module to lazy initialize objects and avoid circular dependency injection issues., + *, + * Objects that use the {@link org.elasticsearch.client.ElasticsearchClient} and that are also injected in transport actions provoke, + * a circular dependency injection issues with Guice. Using proxies with lazy initialization is a way to solve this issue., + *, + * The proxies are initialized by {@link LazyInitializationService}., + */, +public class LazyInitializationModule extends AbstractModule {, +, +    private final Set<Class<? extends LazyInitializable>> initializables = new HashSet<>();, +, +    @Override, +    protected void configure() {]