[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.SearchSlowLog;, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.SearchSlowLog;, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        searchSlowLog = new SearchSlowLog(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.SearchSlowLog;, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        searchSlowLog = new SearchSlowLog(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +    private boolean reformat;, +    private long indexWarnThreshold;, +    private long indexInfoThreshold;, +    private long indexDebugThreshold;, +    private long indexTraceThreshold;, +    private SlowLogLevel level;, +    public static final Setting<SlowLogLevel> INDEX_INDEXING_SLOWLOG_LEVEL_SETTING = new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX +".level", SlowLogLevel.TRACE.name(), SlowLogLevel::parse, true, Setting.Scope.INDEX);, +    private void setLevel(SlowLogLevel level) {, +, +, +, +    SlowLogLevel getLevel() {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.SearchSlowLog;, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +        searchSlowLog = new SearchSlowLog(indexSettings);, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +    private boolean reformat;, +    private long indexWarnThreshold;, +    private long indexInfoThreshold;, +    private long indexDebugThreshold;, +    private long indexTraceThreshold;, +    private SlowLogLevel level;, +    public static final Setting<SlowLogLevel> INDEX_INDEXING_SLOWLOG_LEVEL_SETTING = new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX +".level", SlowLogLevel.TRACE.name(), SlowLogLevel::parse, true, Setting.Scope.INDEX);, +    private void setLevel(SlowLogLevel level) {, +, +, +, +    SlowLogLevel getLevel() {, +++ b/core/src/main/java/org/elasticsearch/index/SearchSlowLog.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index;, +, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.search.internal.SearchContext;, +, +import java.util.concurrent.TimeUnit;, +, +/**, + */, +public final class SearchSlowLog {, +, +    private boolean reformat;, +, +    private long queryWarnThreshold;, +    private long queryInfoThreshold;, +    private long queryDebugThreshold;, +    private long queryTraceThreshold;, +, +    private long fetchWarnThreshold;, +    private long fetchInfoThreshold;, +    private long fetchDebugThreshold;, +    private long fetchTraceThreshold;, +, +    private SlowLogLevel level;, +, +    private final ESLogger queryLogger;, +    private final ESLogger fetchLogger;, +, +    private static final String INDEX_SEARCH_SLOWLOG_PREFIX = "index.search.slowlog";, +    public static final Setting<TimeValue> INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_WARN_SETTING = Setting.timeSetting(INDEX_SEARCH_SLOWLOG_PREFIX + ".threshold.query.warn", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_INFO_SETTING = Setting.timeSetting(INDEX_SEARCH_SLOWLOG_PREFIX + ".threshold.query.info", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_DEBUG_SETTING = Setting.timeSetting(INDEX_SEARCH_SLOWLOG_PREFIX + ".threshold.query.debug", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_TRACE_SETTING = Setting.timeSetting(INDEX_SEARCH_SLOWLOG_PREFIX + ".threshold.query.trace", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_WARN_SETTING = Setting.timeSetting(INDEX_SEARCH_SLOWLOG_PREFIX + ".threshold.fetch.warn", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_INFO_SETTING = Setting.timeSetting(INDEX_SEARCH_SLOWLOG_PREFIX + ".threshold.fetch.info", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);, +    public static final Setting<TimeValue> INDEX_SEARCH_SLOWLOG_THRESHOLD_FETCH_DEBUG_SETTING = Setting.timeSetting(INDEX_SEARCH_SLOWLOG_PREFIX + ".threshold.fetch.debug", TimeValue.timeValueNanos(-1), TimeValue.timeValueMillis(-1), true, Setting.Scope.INDEX);]