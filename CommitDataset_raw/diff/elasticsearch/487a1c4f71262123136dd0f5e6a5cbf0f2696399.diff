[+++ b/server/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier,, +            gatewayMetaState));, +++ b/server/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier,, +            gatewayMetaState));, +++ b/server/src/main/java/org/elasticsearch/discovery/single/SingleNodeDiscovery.java, +import org.elasticsearch.cluster.service.ClusterApplierService;, +import org.elasticsearch.gateway.GatewayMetaState;, +                               final MasterService masterService, final ClusterApplier clusterApplier,, +                               final GatewayMetaState gatewayMetaState) {, +, +        if (clusterApplier instanceof ClusterApplierService) {, +            ((ClusterApplierService) clusterApplier).addLowPriorityApplier(gatewayMetaState);, +        }, +++ b/server/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier,, +            gatewayMetaState));, +++ b/server/src/main/java/org/elasticsearch/discovery/single/SingleNodeDiscovery.java, +import org.elasticsearch.cluster.service.ClusterApplierService;, +import org.elasticsearch.gateway.GatewayMetaState;, +                               final MasterService masterService, final ClusterApplier clusterApplier,, +                               final GatewayMetaState gatewayMetaState) {, +, +        if (clusterApplier instanceof ClusterApplierService) {, +            ((ClusterApplierService) clusterApplier).addLowPriorityApplier(gatewayMetaState);, +        }, +++ b/server/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscoveryIT.java, +    public void testStatePersistence() throws Exception {, +        createIndex("test");, +        internalCluster().fullRestart();, +        assertTrue(client().admin().indices().prepareExists("test").get().isExists());, +    }, +, +++ b/server/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier,, +            gatewayMetaState));, +++ b/server/src/main/java/org/elasticsearch/discovery/single/SingleNodeDiscovery.java, +import org.elasticsearch.cluster.service.ClusterApplierService;, +import org.elasticsearch.gateway.GatewayMetaState;, +                               final MasterService masterService, final ClusterApplier clusterApplier,, +                               final GatewayMetaState gatewayMetaState) {, +, +        if (clusterApplier instanceof ClusterApplierService) {, +            ((ClusterApplierService) clusterApplier).addLowPriorityApplier(gatewayMetaState);, +        }, +++ b/server/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscoveryIT.java, +    public void testStatePersistence() throws Exception {, +        createIndex("test");, +        internalCluster().fullRestart();, +        assertTrue(client().admin().indices().prepareExists("test").get().isExists());, +    }, +, +++ b/server/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscoveryTests.java, +                    }, null);, +++ b/server/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +        discoveryTypes.put("single-node", () -> new SingleNodeDiscovery(settings, transportService, masterService, clusterApplier,, +            gatewayMetaState));, +++ b/server/src/main/java/org/elasticsearch/discovery/single/SingleNodeDiscovery.java, +import org.elasticsearch.cluster.service.ClusterApplierService;, +import org.elasticsearch.gateway.GatewayMetaState;, +                               final MasterService masterService, final ClusterApplier clusterApplier,, +                               final GatewayMetaState gatewayMetaState) {, +, +        if (clusterApplier instanceof ClusterApplierService) {, +            ((ClusterApplierService) clusterApplier).addLowPriorityApplier(gatewayMetaState);, +        }, +++ b/server/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscoveryIT.java, +    public void testStatePersistence() throws Exception {, +        createIndex("test");, +        internalCluster().fullRestart();, +        assertTrue(client().admin().indices().prepareExists("test").get().isExists());, +    }, +, +++ b/server/src/test/java/org/elasticsearch/discovery/single/SingleNodeDiscoveryTests.java, +                    }, null);, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +            final boolean usingSingleNodeDiscovery = DiscoveryModule.DISCOVERY_TYPE_SETTING.get(finalSettings).equals("single-node");, +            if (usingSingleNodeDiscovery == false && DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.exists(finalSettings) == false) {]