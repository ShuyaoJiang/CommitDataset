[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +++ b/docs/java-api/aggregations/metrics/scripted-metric-aggregation.asciidoc, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)"));, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in params._agg.heights) { heights_sum += t } return heights_sum"));, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in params._agg.heights) { heights_sum += t } return heights_sum")), +    .reduceScript(new Script("double heights_sum = 0.0; for (a in params._aggs) { heights_sum += a } return heights_sum"));, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +++ b/docs/java-api/aggregations/metrics/scripted-metric-aggregation.asciidoc, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)"));, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in params._agg.heights) { heights_sum += t } return heights_sum"));, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in params._agg.heights) { heights_sum += t } return heights_sum")), +    .reduceScript(new Script("double heights_sum = 0.0; for (a in params._aggs) { heights_sum += a } return heights_sum"));, +++ b/docs/reference/aggregations/metrics/scripted-metric-aggregation.asciidoc, +                "init_script" : "params._agg.transactions = []",, +                "map_script" : "params._agg.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)", <1>, +                "combine_script" : "double profit = 0; for (t in params._agg.transactions) { profit += t } return profit",, +                "reduce_script" : "double profit = 0; for (a in params._aggs) { profit += a } return profit", +                    "field": "amount", <1>, +                    "_agg": {}        <2>, +in a global `params` object so that it can be share between the scripts., +<2> if you specify script parameters then you must specify `"_agg": {}`., +Whilst any valid script object can be used within a single script, the scripts must return or store in the `_agg` object only the following types:, +In the above example, the `init_script` creates an array `transactions` in the `_agg` object., +                    needs to be stored in an object named `_agg`., +                    variable `_aggs` which is an array of the result of the combine_script on each shard. If a reduce_script is not provided, +                    the reduce phase will return the `_aggs` variable., +No params object was specified so the default params object is used:, +"params" : {, +    "_agg" : {}, +}, +"params" : {, +    "_agg" : {, +}, +"params" : {, +    "_agg" : {, +}, +"params" : {, +    "_agg" : {, +}, +"params" : {, +    "_agg" : {, +}, +The reduce_script receives an `_aggs` array containing the result of the combine script for each shard:, +"_aggs" : [, +"params" : {, +    "_agg" : {}, +}, +shard with a `null` value. In this case the `reduce_script`'s `_aggs` variable will contain `null` as a response from that shard.  , +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/NoopSearchRequestBuilder.java, +    public NoopSearchRequestBuilder addSort(SortBuilder sort) {, +    public NoopSearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window) {, +++ b/distribution/packages/src/common/scripts/preinst, +++ b/docs/java-api/aggregations/metrics/scripted-metric-aggregation.asciidoc, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)"));, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in params._agg.heights) { heights_sum += t } return heights_sum"));, +    .initScript(new Script("params._agg.heights = []")), +    .mapScript(new Script("params._agg.heights.add(doc.gender.value == 'male' ? doc.height.value : -1.0 * doc.height.value)")), +    .combineScript(new Script("double heights_sum = 0.0; for (t in params._agg.heights) { heights_sum += t } return heights_sum")), +    .reduceScript(new Script("double heights_sum = 0.0; for (a in params._aggs) { heights_sum += a } return heights_sum"));, +++ b/docs/reference/aggregations/metrics/scripted-metric-aggregation.asciidoc, +                "init_script" : "params._agg.transactions = []",, +                "map_script" : "params._agg.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)", <1>, +                "combine_script" : "double profit = 0; for (t in params._agg.transactions) { profit += t } return profit",, +                "reduce_script" : "double profit = 0; for (a in params._aggs) { profit += a } return profit", +                    "field": "amount", <1>, +                    "_agg": {}        <2>, +in a global `params` object so that it can be share between the scripts., +<2> if you specify script parameters then you must specify `"_agg": {}`., +Whilst any valid script object can be used within a single script, the scripts must return or store in the `_agg` object only the following types:, +In the above example, the `init_script` creates an array `transactions` in the `_agg` object., +                    needs to be stored in an object named `_agg`., +                    variable `_aggs` which is an array of the result of the combine_script on each shard. If a reduce_script is not provided, +                    the reduce phase will return the `_aggs` variable., +No params object was specified so the default params object is used:]