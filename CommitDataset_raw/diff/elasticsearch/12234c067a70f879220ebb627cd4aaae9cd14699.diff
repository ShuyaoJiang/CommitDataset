[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            LogConfigurator.configure(environment);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            LogConfigurator.configure(environment);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +import org.apache.logging.log4j.Level;, +import org.elasticsearch.common.logging.LogConfigurator;, +import org.elasticsearch.common.settings.Settings;, +        // initialize default for es.logger.level because we will not read the log4j2.properties, +        final String loggerLevel = System.getProperty("es.logger.level", Level.INFO.name());, +        final Settings settings = Settings.builder().put("logger.level", loggerLevel).build();, +        LogConfigurator.configureWithoutConfig(settings);, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            LogConfigurator.configure(environment);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +import org.apache.logging.log4j.Level;, +import org.elasticsearch.common.logging.LogConfigurator;, +import org.elasticsearch.common.settings.Settings;, +        // initialize default for es.logger.level because we will not read the log4j2.properties, +        final String loggerLevel = System.getProperty("es.logger.level", Level.INFO.name());, +        final Settings settings = Settings.builder().put("logger.level", loggerLevel).build();, +        LogConfigurator.configureWithoutConfig(settings);, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +import java.util.Objects;, +    /**, +     * Configure logging without reading a log4j2.properties file, effectively configuring the, +     * status logger and all loggers to the console., +     *, +     * @param settings for configuring logger.level and individual loggers, +     */, +    public static void configureWithoutConfig(final Settings settings) {, +        Objects.requireNonNull(settings);, +        configureStatusLogger();, +        configureLoggerLevels(settings);, +    }, +, +    /**, +     * Configure logging reading from any log4j2.properties found in the config directory and its, +     * subdirectories from the specified environment. Will also configure logging to point the logs, +     * directory from the specified environment., +     *, +     * @param environment the environment for reading configs and the logs path, +     * @throws IOException   if there is an issue readings any log4j2.properties in the config, +     *                       directory, +     * @throws UserException if there are no log4j2.properties in the specified configs path, +     */, +    public static void configure(final Environment environment) throws IOException, UserException {, +        Objects.requireNonNull(environment);, +        configure(environment.settings(), environment.configFile(), environment.logsFile());, +    }, +, +    private static void configure(final Settings settings, final Path configsPath, final Path logsPath) throws IOException, UserException {, +        Objects.requireNonNull(settings);, +        Objects.requireNonNull(configsPath);, +        Objects.requireNonNull(logsPath);, +, +        setLogConfigurationSystemProperty(logsPath, settings);, +        // we initialize the status logger immediately otherwise Log4j will complain when we try to get the context, +        configureStatusLogger();, +        Files.walkFileTree(configsPath, options, Integer.MAX_VALUE, new SimpleFileVisitor<Path>() {, +                    "no log4j2.properties found; tried [" + configsPath + "] and its subdirectories");, +, +        configureLoggerLevels(settings);, +    private static void configureStatusLogger() {, +        final ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();, +        builder.setStatusLevel(Level.ERROR);, +        Configurator.initialize(builder.build());, +    }, +, +    private static void configureLoggerLevels(Settings settings) {, +, +    private static void setLogConfigurationSystemProperty(final Path logsPath, final Settings settings) {, +        System.setProperty("es.logs", logsPath.resolve(ClusterName.CLUSTER_NAME_SETTING.get(settings).value()).toString());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +            LogConfigurator.configure(environment);, +++ b/core/src/main/java/org/elasticsearch/cli/Command.java, +import org.apache.logging.log4j.Level;, +import org.elasticsearch.common.logging.LogConfigurator;, +import org.elasticsearch.common.settings.Settings;, +        // initialize default for es.logger.level because we will not read the log4j2.properties, +        final String loggerLevel = System.getProperty("es.logger.level", Level.INFO.name());, +        final Settings settings = Settings.builder().put("logger.level", loggerLevel).build();, +        LogConfigurator.configureWithoutConfig(settings);, +, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +import java.util.Objects;, +    /**, +     * Configure logging without reading a log4j2.properties file, effectively configuring the, +     * status logger and all loggers to the console., +     *, +     * @param settings for configuring logger.level and individual loggers, +     */, +    public static void configureWithoutConfig(final Settings settings) {, +        Objects.requireNonNull(settings);, +        configureStatusLogger();, +        configureLoggerLevels(settings);, +    }, +]