[+++ b/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, then we still have a filter that is not cached while ToParentBlockJoinQuery, +            // expects FixedBitSet instances, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);, +++ b/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, then we still have a filter that is not cached while ToParentBlockJoinQuery, +            // expects FixedBitSet instances, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);, +++ b/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, then we still have a filter that is not cached while ToParentBlockJoinQuery, +            // expects FixedBitSet instances, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);, +++ b/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, then we still have a filter that is not cached while ToParentBlockJoinQuery, +            // expects FixedBitSet instances, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);, +++ b/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, then we still have a filter that is not cached while ToParentBlockJoinQuery, +            // expects FixedBitSet instances, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);, +++ b/src/main/java/org/elasticsearch/index/search/nested/IncludeNestedDocsQuery.java, +import org.elasticsearch.common.lucene.docset.DocIdSets;, +                if (parents.isCacheable()) {, +                    // the filter is cached, yet not with the right type, +                } else {, +                    // may happen if the filter cache type is none, +                    parents = DocIdSets.toFixedBitSet(parents.iterator(), context.reader().maxDoc());, +                }, +++ b/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, then we still have a filter that is not cached while ToParentBlockJoinQuery, +            // expects FixedBitSet instances, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);, +++ b/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, then we still have a filter that is not cached while ToParentBlockJoinQuery, +            // expects FixedBitSet instances, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);, +++ b/src/main/java/org/elasticsearch/index/search/nested/IncludeNestedDocsQuery.java, +import org.elasticsearch.common.lucene.docset.DocIdSets;, +                if (parents.isCacheable()) {, +                    // the filter is cached, yet not with the right type, +                } else {, +                    // may happen if the filter cache type is none, +                    parents = DocIdSets.toFixedBitSet(parents.iterator(), context.reader().maxDoc());, +                }, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java, +import org.apache.lucene.search.join.FixedBitSetCachingWrapperFilter;, +            // if the filter cache is disabled, we still need to produce bit sets, +            parentFilter = new FixedBitSetCachingWrapperFilter(parentFilter);]