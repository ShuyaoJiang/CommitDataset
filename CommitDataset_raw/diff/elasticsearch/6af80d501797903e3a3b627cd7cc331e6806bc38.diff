[+++ b/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +    void assignToNode(String nodeId) {, +, +    void relocate(String relocatingNodeId) {, +    void cancelRelocation() {, +    void deassignNode() {, +    void moveToStarted() {, +    void moveToPrimary() {, +    void moveFromPrimary() {, +++ b/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +    void assignToNode(String nodeId) {, +, +    void relocate(String relocatingNodeId) {, +    void cancelRelocation() {, +    void deassignNode() {, +    void moveToStarted() {, +    void moveToPrimary() {, +    void moveFromPrimary() {, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    void add(MutableShardRouting shard) {, +        // TODO use Set with ShardIds for faster lookup., +++ b/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +    void assignToNode(String nodeId) {, +, +    void relocate(String relocatingNodeId) {, +    void cancelRelocation() {, +    void deassignNode() {, +    void moveToStarted() {, +    void moveToPrimary() {, +    void moveFromPrimary() {, +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNode.java, +    void add(MutableShardRouting shard) {, +        // TODO use Set with ShardIds for faster lookup., +++ b/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +import static com.google.common.collect.Sets.newHashSet;, +    private final Map<ShardId, List<MutableShardRouting>> replicaSets = newHashMap();, +, +    private int unassignedPrimaryCount = 0;, +, +    private int inactivePrimaryCount = 0;, +, +    private int inactiveShardCount = 0;, +, +    Set<ShardId> relocatingReplicaSets = new HashSet<ShardId>();, +    , +, +        // also fill replicaSet information, +                    // to get all the shards belonging to an index, including the replicas,, +                    // we define a replica set and keep track of it. A replica set is identified, +                    // by the ShardId, as this is common for primary and replicas., +                    // A replica Set might have one (and not more) replicas with the state of RELOCATING., +                        MutableShardRouting sr = new MutableShardRouting(shard);, +                        entries.add(sr);, +                        addToReplicaSet(sr);, +                            relocatingReplicaSets.add(shard.shardId());, +                            sr = new MutableShardRouting(shard.index(), shard.id(), shard.relocatingNodeId(),, +                                    shard.currentNodeId(), shard.primary(), ShardRoutingState.INITIALIZING, shard.version());, +                            entries.add(sr);, +                            addToReplicaSet(sr);, +                        } else if (!shard.active()) { // shards that are initializing without being relocated, +                            if (shard.primary()) {, +                                inactivePrimaryCount++;, +                            }, +                            inactiveShardCount++;, +                        MutableShardRouting sr = new MutableShardRouting(shard);, +                        addToReplicaSet(sr);, +                        unassigned.add(sr);, +                        if (shard.primary()) {, +                            unassignedPrimaryCount++;, +                        }, +, +    public boolean hasUnassignedPrimaries() {, +        return unassignedPrimaryCount > 0;, +    }, +, +    public boolean hasUnassignedShards() {, +        return !unassigned.isEmpty();, +    }, +, +    public boolean hasInactivePrimaries() {, +        return inactivePrimaryCount > 0;, +    }, +, +    public boolean hasInactiveShards() {, +        return inactiveShardCount > 0;, +    }, +, +    public int getRelocatingShardCount() {, +        return relocatingReplicaSets.size();, +    }, +, +        MutableShardRouting primary = null;, +        for (MutableShardRouting shardRouting : shardsRoutingFor(shard)) {, +            if (shardRouting.primary()) {, +                primary = shardRouting;, +                break;, +        assert primary != null;, +        return primary;, +        ShardId sid = new ShardId(index, shardId);, +        List<MutableShardRouting> shards = replicaSetFor(sid);]