[+++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +    final class BitSetProducerWarmer implements IndicesWarmer.Listener {, +        public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) {, +            final Executor executor = indicesWarmer.getExecutor();, +        public TerminationHandle warmTopReader(IndexShard indexShard, Engine.Searcher searcher) {, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +    final class BitSetProducerWarmer implements IndicesWarmer.Listener {, +        public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) {, +            final Executor executor = indicesWarmer.getExecutor();, +        public TerminationHandle warmTopReader(IndexShard indexShard, Engine.Searcher searcher) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public IndexSettings getIndexSettings() {, +        return idxSettings;, +    }, +, +        return luceneVersion == null ? idxSettings.getIndexVersionCreated().luceneVersion : luceneVersion;, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +    final class BitSetProducerWarmer implements IndicesWarmer.Listener {, +        public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) {, +            final Executor executor = indicesWarmer.getExecutor();, +        public TerminationHandle warmTopReader(IndexShard indexShard, Engine.Searcher searcher) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public IndexSettings getIndexSettings() {, +        return idxSettings;, +    }, +, +        return luceneVersion == null ? idxSettings.getIndexVersionCreated().luceneVersion : luceneVersion;, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesWarmer.java, +import java.util.concurrent.Executor;, +                terminationHandles.add(listener.warmTopReader(shard, searcher));, +                terminationHandles.add(listener.warmNewReaders(shard, searcher));, +    /**, +     * Returns an executor for async warmer tasks, +     */, +    public Executor getExecutor() {, +        return threadPool.executor(ThreadPool.Names.WARMER);, +    }, +, +    public interface Listener {, +        TerminationHandle warmNewReaders(IndexShard indexShard, Engine.Searcher searcher);, +        TerminationHandle warmTopReader(IndexShard indexShard, Engine.Searcher searcher);, +++ b/core/src/main/java/org/elasticsearch/index/cache/bitset/BitsetFilterCache.java, +    final class BitSetProducerWarmer implements IndicesWarmer.Listener {, +        public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) {, +            final Executor executor = indicesWarmer.getExecutor();, +        public TerminationHandle warmTopReader(IndexShard indexShard, Engine.Searcher searcher) {, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public IndexSettings getIndexSettings() {, +        return idxSettings;, +    }, +, +        return luceneVersion == null ? idxSettings.getIndexVersionCreated().luceneVersion : luceneVersion;, +++ b/core/src/main/java/org/elasticsearch/indices/IndicesWarmer.java, +import java.util.concurrent.Executor;, +                terminationHandles.add(listener.warmTopReader(shard, searcher));, +                terminationHandles.add(listener.warmNewReaders(shard, searcher));, +    /**, +     * Returns an executor for async warmer tasks, +     */, +    public Executor getExecutor() {, +        return threadPool.executor(ThreadPool.Names.WARMER);, +    }, +, +    public interface Listener {, +        TerminationHandle warmNewReaders(IndexShard indexShard, Engine.Searcher searcher);, +        TerminationHandle warmTopReader(IndexShard indexShard, Engine.Searcher searcher);, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +        this.indicesWarmer.addListener(new NormsWarmer(indicesWarmer));, +        this.indicesWarmer.addListener(new FieldDataWarmer(indicesWarmer));, +    static class NormsWarmer implements IndicesWarmer.Listener {, +        private final IndicesWarmer indicesWarmer;, +        public NormsWarmer(IndicesWarmer indicesWarmer) {, +            this.indicesWarmer = indicesWarmer;, +        }, +        public TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) {, +            final Loading defaultLoading = Loading.parse(indexShard.getIndexSettings().getSettings().get(NORMS_LOADING_KEY), Loading.LAZY);, +            indicesWarmer.getExecutor().execute(new Runnable() {, +        public TerminationHandle warmTopReader(IndexShard indexShard, final Engine.Searcher searcher) {, +    static class FieldDataWarmer implements IndicesWarmer.Listener {, +, +        private final IndicesWarmer indicesWarmer;, +, +        public FieldDataWarmer(IndicesWarmer indicesWarmer) {, +            this.indicesWarmer = indicesWarmer;, +        }, +        public TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) {, +            final Executor executor = indicesWarmer.getExecutor();, +        public TerminationHandle warmTopReader(final IndexShard indexShard, final Engine.Searcher searcher) {, +            final Executor executor = indicesWarmer.getExecutor();, +    class SearchWarmer implements IndicesWarmer.Listener {, +        public TerminationHandle warmNewReaders(IndexShard indexShard, final Engine.Searcher searcher) {, +            return internalWarm(indexShard, searcher, false);, +        public TerminationHandle warmTopReader(IndexShard indexShard, final Engine.Searcher searcher) {, +            return internalWarm(indexShard, searcher, true);, +        public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) {, +            IndexWarmersMetaData custom = indexShard.getIndexSettings().getIndexMetaData().custom(IndexWarmersMetaData.TYPE);, +            final Executor executor = indicesWarmer.getExecutor();, +                executor.execute(() -> {, +                        ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexShard.getIndexSettings(), +            return () -> latch.await();]