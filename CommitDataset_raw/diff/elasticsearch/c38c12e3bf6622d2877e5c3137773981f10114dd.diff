[+++ b/server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +     * Rethrow the runtime exception, unless the lenient flag has been set, returns {@link MatchNoDocsQuery}, +            return Queries.newMatchNoDocsQuery("failed query, caused by " + e.getMessage());, +            return rethrowUnlessLenient(new IllegalStateException(e.getMessage()));, +                disjuncts.add(rethrowUnlessLenient(e));, +            return rethrowUnlessLenient(new IllegalStateException(e.getMessage()));, +                disjuncts.add(rethrowUnlessLenient(e));, +++ b/server/src/main/java/org/elasticsearch/index/search/SimpleQueryStringQueryParser.java, +import org.elasticsearch.common.lucene.search.Queries;, +     * Rethrow the runtime exception, unless the lenient flag has been set, returns {@link MatchNoDocsQuery}, +            return Queries.newMatchNoDocsQuery("failed query, caused by " + e.getMessage());, +            return rethrowUnlessLenient(new IllegalStateException(e.getMessage()));, +                disjuncts.add(rethrowUnlessLenient(e));, +            return rethrowUnlessLenient(new IllegalStateException(e.getMessage()));, +                disjuncts.add(rethrowUnlessLenient(e));, +++ b/server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java, +import java.util.ArrayList;, +import java.util.List;, +import static org.hamcrest.Matchers.containsString;, +    public void testLenientToPrefixQuery() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +, +        Query query = new SimpleQueryStringBuilder("t*"), +            .field(DATE_FIELD_NAME), +            .field(STRING_FIELD_NAME), +            .lenient(true), +            .toQuery(createShardContext());, +        List<Query> expectedQueries = new ArrayList<>();, +        expectedQueries.add(new MatchNoDocsQuery(""));, +        expectedQueries.add(new PrefixQuery(new Term(STRING_FIELD_NAME, "t")));, +        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(expectedQueries, 1.0f);, +        assertEquals(expected, query);, +    }, +]