[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            File jps = getJpsExecutableByName("jps"), +            if (!jps.exists()) {, +                jps = getJpsExecutableByName("jps.exe"), +            }, +    private static File getJpsExecutableByName(String jpsExecutableName) {, +        return Paths.get(Jvm.current().javaHome.toString(), "bin/" + jpsExecutableName).toFile(), +    }, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            File jps = getJpsExecutableByName("jps"), +            if (!jps.exists()) {, +                jps = getJpsExecutableByName("jps.exe"), +            }, +    private static File getJpsExecutableByName(String jpsExecutableName) {, +        return Paths.get(Jvm.current().javaHome.toString(), "bin/" + jpsExecutableName).toFile(), +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            File jps = getJpsExecutableByName("jps"), +            if (!jps.exists()) {, +                jps = getJpsExecutableByName("jps.exe"), +            }, +    private static File getJpsExecutableByName(String jpsExecutableName) {, +        return Paths.get(Jvm.current().javaHome.toString(), "bin/" + jpsExecutableName).toFile(), +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollRequest.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            File jps = getJpsExecutableByName("jps"), +            if (!jps.exists()) {, +                jps = getJpsExecutableByName("jps.exe"), +            }, +    private static File getJpsExecutableByName(String jpsExecutableName) {, +        return Paths.get(Jvm.current().javaHome.toString(), "bin/" + jpsExecutableName).toFile(), +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterFormationTasks.groovy, +            File jps = getJpsExecutableByName("jps"), +            if (!jps.exists()) {, +                jps = getJpsExecutableByName("jps.exe"), +            }, +    private static File getJpsExecutableByName(String jpsExecutableName) {, +        return Paths.get(Jvm.current().javaHome.toString(), "bin/" + jpsExecutableName).toFile(), +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/search/ClearScrollRequest.java, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchScrollRequest.java, +++ b/plugins/delete-by-query/src/main/java/org/elasticsearch/action/deletebyquery/TransportDeleteByQueryAction.java, +import org.elasticsearch.action.search.ClearScrollResponse;, +import org.elasticsearch.action.search.SearchRequest;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.action.search.SearchScrollRequest;, +import org.elasticsearch.action.search.ShardSearchFailure;, +import org.elasticsearch.action.search.TransportSearchAction;, +import org.elasticsearch.action.search.TransportSearchScrollAction;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +                final SearchRequest scanRequest = new SearchRequest(request.indices()).types(request.types()).indicesOptions(request.indicesOptions());, +                scanRequest.scroll(request.scroll());, +.query(request.query()).fields(fields), +                scrollAction.execute(new SearchScrollRequest(scrollId).scroll(request.scroll()), new ActionListener<SearchResponse>() {, +            BulkRequest bulkRequest = new BulkRequest();, +                DeleteRequest delete = new DeleteRequest(doc.index(), doc.type(), doc.id()).version(doc.version());, +                    client.prepareClearScroll().addScrollId(scrollId).execute(new ActionListener<ClearScrollResponse>() {]