[+++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        MappedFieldType fieldType = context.fieldMapper(fieldName);, +, +        if (fieldType != null) {, +            return fieldType.termsQuery(values, context);, +        } else {, +            BytesRef[] filterValues = new BytesRef[values.size()];, +            for (int i = 0; i < filterValues.length; i++) {, +                filterValues[i] = BytesRefs.toBytesRef(values.get(i));, +            }, +            return new TermsQuery(fieldName, filterValues);, +        }, +++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        MappedFieldType fieldType = context.fieldMapper(fieldName);, +, +        if (fieldType != null) {, +            return fieldType.termsQuery(values, context);, +        } else {, +            BytesRef[] filterValues = new BytesRef[values.size()];, +            for (int i = 0; i < filterValues.length; i++) {, +                filterValues[i] = BytesRefs.toBytesRef(values.get(i));, +            }, +            return new TermsQuery(fieldName, filterValues);, +        }, +++ b/core/src/test/java/org/elasticsearch/index/query/TermsQueryBuilderTests.java, +import org.apache.lucene.queries.TermsQuery;, +import org.apache.lucene.search.PointInSetQuery;, +import java.util.Objects;, +import java.util.function.Predicate;, +import static org.hamcrest.Matchers.either;, +            assertThat(query, either(instanceOf(TermsQuery.class)).or(instanceOf(PointInSetQuery.class)));, +            TermsQuery expected = new TermsQuery(queryBuilder.fieldName(),, +                    terms.stream().filter(Objects::nonNull).map(Object::toString).map(BytesRef::new).collect(Collectors.toList()));, +            assertEquals(expected, query);, +++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        MappedFieldType fieldType = context.fieldMapper(fieldName);, +, +        if (fieldType != null) {, +            return fieldType.termsQuery(values, context);, +        } else {, +            BytesRef[] filterValues = new BytesRef[values.size()];, +            for (int i = 0; i < filterValues.length; i++) {, +                filterValues[i] = BytesRefs.toBytesRef(values.get(i));, +            }, +            return new TermsQuery(fieldName, filterValues);, +        }, +++ b/core/src/test/java/org/elasticsearch/index/query/TermsQueryBuilderTests.java, +import org.apache.lucene.queries.TermsQuery;, +import org.apache.lucene.search.PointInSetQuery;, +import java.util.Objects;, +import java.util.function.Predicate;, +import static org.hamcrest.Matchers.either;, +            assertThat(query, either(instanceOf(TermsQuery.class)).or(instanceOf(PointInSetQuery.class)));, +            TermsQuery expected = new TermsQuery(queryBuilder.fieldName(),, +                    terms.stream().filter(Objects::nonNull).map(Object::toString).map(BytesRef::new).collect(Collectors.toList()));, +            assertEquals(expected, query);, +++ b/docs/reference/migration/migrate_6_0/search.asciidoc, +* The `terms` query now always returns scores equal to `1` and is not subject to, +  `indices.query.bool.max_clause_count` anymore., +, +++ b/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java, +        MappedFieldType fieldType = context.fieldMapper(fieldName);, +, +        if (fieldType != null) {, +            return fieldType.termsQuery(values, context);, +        } else {, +            BytesRef[] filterValues = new BytesRef[values.size()];, +            for (int i = 0; i < filterValues.length; i++) {, +                filterValues[i] = BytesRefs.toBytesRef(values.get(i));, +            }, +            return new TermsQuery(fieldName, filterValues);, +        }, +++ b/core/src/test/java/org/elasticsearch/index/query/TermsQueryBuilderTests.java, +import org.apache.lucene.queries.TermsQuery;, +import org.apache.lucene.search.PointInSetQuery;, +import java.util.Objects;, +import java.util.function.Predicate;, +import static org.hamcrest.Matchers.either;, +            assertThat(query, either(instanceOf(TermsQuery.class)).or(instanceOf(PointInSetQuery.class)));, +            TermsQuery expected = new TermsQuery(queryBuilder.fieldName(),, +                    terms.stream().filter(Objects::nonNull).map(Object::toString).map(BytesRef::new).collect(Collectors.toList()));, +            assertEquals(expected, query);, +++ b/docs/reference/migration/migrate_6_0/search.asciidoc, +* The `terms` query now always returns scores equal to `1` and is not subject to, +  `indices.query.bool.max_clause_count` anymore., +, +++ b/docs/reference/query-dsl/terms-query.asciidoc]