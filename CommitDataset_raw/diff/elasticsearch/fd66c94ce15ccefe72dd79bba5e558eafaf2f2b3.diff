[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest;, +, +import static java.util.Collections.emptySet;, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                IndicesAliasesResponse::fromXContent, emptySet(), headers);, +                IndicesAliasesResponse::fromXContent, listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +    }, +, +    /**, +     * Checks if one or more aliases exist using the Aliases Exist API, +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">, +     * Indices Aliases API on elastic.co</a>, +     */, +    public boolean existsAlias(GetAliasesRequest getAliasesRequest, Header... headers) throws IOException {, +        return restHighLevelClient.performRequest(getAliasesRequest, Request::existsAlias, RestHighLevelClient::convertExistsResponse,, +                emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously checks if one or more aliases exist using the Aliases Exist API, +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">, +     * Indices Aliases API on elastic.co</a>, +     */, +    public void existsAliasAsync(GetAliasesRequest getAliasesRequest, ActionListener<Boolean> listener, Header... headers) {, +        restHighLevelClient.performRequestAsync(getAliasesRequest, Request::existsAlias, RestHighLevelClient::convertExistsResponse,, +                listener, emptySet(), headers);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IndicesClient.java, +import org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest;, +, +import static java.util.Collections.emptySet;, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                IndicesAliasesResponse::fromXContent, emptySet(), headers);, +                IndicesAliasesResponse::fromXContent, listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +                emptySet(), headers);, +                listener, emptySet(), headers);, +    }, +, +    /**, +     * Checks if one or more aliases exist using the Aliases Exist API, +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">, +     * Indices Aliases API on elastic.co</a>, +     */, +    public boolean existsAlias(GetAliasesRequest getAliasesRequest, Header... headers) throws IOException {, +        return restHighLevelClient.performRequest(getAliasesRequest, Request::existsAlias, RestHighLevelClient::convertExistsResponse,, +                emptySet(), headers);, +    }, +, +    /**, +     * Asynchronously checks if one or more aliases exist using the Aliases Exist API, +     * <p>, +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html">, +     * Indices Aliases API on elastic.co</a>, +     */, +    public void existsAliasAsync(GetAliasesRequest getAliasesRequest, ActionListener<Boolean> listener, Header... headers) {, +        restHighLevelClient.performRequestAsync(getAliasesRequest, Request::existsAlias, RestHighLevelClient::convertExistsResponse,, +                listener, emptySet(), headers);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/Request.java, +import org.elasticsearch.action.admin.indices.alias.get.GetAliasesRequest;, +        String endpoint = endpoint(deleteIndexRequest.indices());, +        String endpoint = endpoint(openIndexRequest.indices(), "_open");, +        String endpoint = endpoint(closeIndexRequest.indices(), "_close");, +        String endpoint = endpoint(createIndexRequest.indices());, +    static Request existsAlias(GetAliasesRequest getAliasesRequest) {, +        Params params = Params.builder();, +        params.withIndicesOptions(getAliasesRequest.indicesOptions());, +        params.withLocal(getAliasesRequest.local());, +        if (getAliasesRequest.indices().length == 0 && getAliasesRequest.aliases().length == 0) {, +            throw new IllegalArgumentException("existsAlias requires at least an alias or an index");, +        }, +        String endpoint = endpoint(getAliasesRequest.indices(), "_alias", getAliasesRequest.aliases());, +        return new Request("HEAD", endpoint, params.getParams(), null);, +    }, +, +    static String endpoint(String index, String type, String id) {, +        return buildEndpoint(index, type, id);, +    }, +, +    static String endpoint(String index, String type, String id, String endpoint) {, +        return buildEndpoint(index, type, id, endpoint);, +    }]