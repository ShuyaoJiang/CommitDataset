[+++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.common.io.FastCharArrayReader;, +import org.elasticsearch.search.suggest.SuggestUtils.TokenConsumer;, +public final class DirectCandidateGenerator extends CandidateGenerator {, +        analyze(preFilter, term, field, new SuggestUtils.TokenConsumer() {, +            analyze(postFilter, candidate.term, field, new SuggestUtils.TokenConsumer() {, +    public static int analyze(Analyzer analyzer, BytesRef toAnalyze, String field, TokenConsumer consumer, CharsRefBuilder spare) throws IOException {, +        spare.copyUTF8Bytes(toAnalyze);, +        CharsRef charsRef = spare.get();, +        try (TokenStream ts = analyzer.tokenStream(, +                                  field, new FastCharArrayReader(charsRef.chars, charsRef.offset, charsRef.length))) {, +             return analyze(ts, consumer);, +        }, +    }, +, +    /** NOTE: this method closes the TokenStream, even on exception, which is awkward, +     *  because really the caller who called {@link Analyzer#tokenStream} should close it,, +     *  but when trying that there are recursion issues when we try to use the same, +     *  TokenStream twice in the same recursion... */, +    public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException {, +        int numTokens = 0;, +        boolean success = false;, +        try {, +            stream.reset();, +            consumer.reset(stream);, +            while (stream.incrementToken()) {, +                consumer.nextToken();, +                numTokens++;, +            }, +            consumer.end();, +            success = true;, +        } finally {, +            if (success) {, +                stream.close();, +            } else {, +                IOUtils.closeWhileHandlingException(stream);, +            }, +        }, +        return numTokens;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.common.io.FastCharArrayReader;, +import org.elasticsearch.search.suggest.SuggestUtils.TokenConsumer;, +public final class DirectCandidateGenerator extends CandidateGenerator {, +        analyze(preFilter, term, field, new SuggestUtils.TokenConsumer() {, +            analyze(postFilter, candidate.term, field, new SuggestUtils.TokenConsumer() {, +    public static int analyze(Analyzer analyzer, BytesRef toAnalyze, String field, TokenConsumer consumer, CharsRefBuilder spare) throws IOException {, +        spare.copyUTF8Bytes(toAnalyze);, +        CharsRef charsRef = spare.get();, +        try (TokenStream ts = analyzer.tokenStream(, +                                  field, new FastCharArrayReader(charsRef.chars, charsRef.offset, charsRef.length))) {, +             return analyze(ts, consumer);, +        }, +    }, +, +    /** NOTE: this method closes the TokenStream, even on exception, which is awkward, +     *  because really the caller who called {@link Analyzer#tokenStream} should close it,, +     *  but when trying that there are recursion issues when we try to use the same, +     *  TokenStream twice in the same recursion... */, +    public static int analyze(TokenStream stream, TokenConsumer consumer) throws IOException {, +        int numTokens = 0;, +        boolean success = false;, +        try {, +            stream.reset();, +            consumer.reset(stream);, +            while (stream.incrementToken()) {, +                consumer.nextToken();, +                numTokens++;, +            }, +            consumer.end();, +            success = true;, +        } finally {, +            if (success) {, +                stream.close();, +            } else {, +                IOUtils.closeWhileHandlingException(stream);, +            }, +        }, +        return numTokens;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +        DirectCandidateGenerator.analyze(stream, new SuggestUtils.TokenConsumer() {, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestUtils.java, +++ b/core/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.analysis.TokenStream;, +import org.apache.lucene.util.CharsRef;, +import org.apache.lucene.util.IOUtils;, +import org.elasticsearch.common.io.FastCharArrayReader;, +import org.elasticsearch.search.suggest.SuggestUtils.TokenConsumer;]