[+++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;, +        }, +        }, +, +                    posQuery = super.getPrefixQuery(field, plist.get(0));, +                    innerClauses.add(new BooleanClause(super.getPrefixQuery(field, token),, +++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;, +        }, +        }, +, +                    posQuery = super.getPrefixQuery(field, plist.get(0));, +                    innerClauses.add(new BooleanClause(super.getPrefixQuery(field, token),, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;, +        }, +        }, +, +                    posQuery = super.getPrefixQuery(field, plist.get(0));, +                    innerClauses.add(new BooleanClause(super.getPrefixQuery(field, token),, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +        static final String _INDEX = "_index";, +        static final String _TYPE = "_type";, +        static final String _ID = "_id";, +        static final String _VERSION = "_version";, +++ b/NOTICE.txt, +Copyright 2009-2016 Elasticsearch, +++ b/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/README.textile, +Copyright 2009-2016 Elasticsearch <https://www.elastic.co>, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +        if (tlist.size() == 0) {, +            return null;, +        }, +        }, +, +                    posQuery = super.getPrefixQuery(field, plist.get(0));, +                    innerClauses.add(new BooleanClause(super.getPrefixQuery(field, token),, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.action.support.replication.ReplicationOperation;, +        RETRY_ON_PRIMARY_EXCEPTION(ReplicationOperation.RetryOnPrimaryException.class,, +                ReplicationOperation.RetryOnPrimaryException::new, 117),, +++ b/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java, +        static final String _INDEX = "_index";, +        static final String _TYPE = "_type";, +        static final String _ID = "_id";, +        static final String _VERSION = "_version";]