[+++ b/.idea/projectCodeStyle.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ b/.idea/projectCodeStyle.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/ImmutableSettings.java, +    @Override public <T> Class<? extends T> getAsClass(String setting, Class<? extends T> defaultClazz) throws NoClassSettingsException {, +            throw new NoClassSettingsException("Failed to load class setting [" + setting + "] with value [" + sValue + "]", e);, +    @Override public <T> Class<? extends T> getAsClass(String setting, Class<? extends T> defaultClazz, String prefixPackage, String suffixClassName) throws NoClassSettingsException {, +++ b/.idea/projectCodeStyle.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/ImmutableSettings.java, +    @Override public <T> Class<? extends T> getAsClass(String setting, Class<? extends T> defaultClazz) throws NoClassSettingsException {, +            throw new NoClassSettingsException("Failed to load class setting [" + setting + "] with value [" + sValue + "]", e);, +    @Override public <T> Class<? extends T> getAsClass(String setting, Class<? extends T> defaultClazz, String prefixPackage, String suffixClassName) throws NoClassSettingsException {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/NoClassSettingsException.java, + * A specific type of {@link SettingsException} indicating failure to load a class, + * based on a settings value., + *, +++ b/.idea/projectCodeStyle.xml, +        <option name="USE_FQ_CLASS_NAMES_IN_JAVADOC" value="false" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/ImmutableSettings.java, +    @Override public <T> Class<? extends T> getAsClass(String setting, Class<? extends T> defaultClazz) throws NoClassSettingsException {, +            throw new NoClassSettingsException("Failed to load class setting [" + setting + "] with value [" + sValue + "]", e);, +    @Override public <T> Class<? extends T> getAsClass(String setting, Class<? extends T> defaultClazz, String prefixPackage, String suffixClassName) throws NoClassSettingsException {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/NoClassSettingsException.java, + * A specific type of {@link SettingsException} indicating failure to load a class, + * based on a settings value., + *, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/settings/Settings.java, + * Immutable settings allowing to control the configuration., + *, + * @see ImmutableSettings, +    /**, +     * The global settings if these settings are group settings., +     */, +    /**, +     * Component settings for a specific component. Returns all the settings for the given class, where the, +     * FQN of the class is used, without the <tt>org.elasticsearch<tt> prefix., +     */, +    /**, +     * Component settings for a specific component. Returns all the settings for the given class, where the, +     * FQN of the class is used, without provided prefix., +     */, +    /**, +     * The class loader associted with this settings., +     */, +    /**, +     * The settings as a {@link java.util.Map}., +     */, +    /**, +     * Returns the setting value associated with the setting key., +     *, +     * @param setting The setting key, +     * @return The setting value, <tt>null</tt> if it does not exists., +     */, +    /**, +     * Returns the setting value associated with the setting key. If it does not exists,, +     * returns the default value provided., +     *, +     * @param setting      The setting key, +     * @param defaultValue The value to return if no value is associated with the setting, +     * @return The setting value, or the default value if no value exists, +     */, +    /**, +     * Returns group settings for the given setting prefix., +     */, +    /**, +     * Returns the setting value (as float) associated with the setting key. If it does not exists,, +     * returns the default value provided., +     *, +     * @param setting      The setting key, +     * @param defaultValue The value to return if no value is associated with the setting, +     * @return The (float) value, or the default value if no value exists., +     * @throws SettingsException Failure to parse the setting, +     */, +    /**, +     * Returns the setting value (as double) associated with the setting key. If it does not exists,, +     * returns the default value provided., +     *, +     * @param setting      The setting key, +     * @param defaultValue The value to return if no value is associated with the setting, +     * @return The (double) value, or the default value if no value exists., +     * @throws SettingsException Failure to parse the setting, +     */, +    /**, +     * Returns the setting value (as int) associated with the setting key. If it does not exists,, +     * returns the default value provided., +     *, +     * @param setting      The setting key, +     * @param defaultValue The value to return if no value is associated with the setting, +     * @return The (int) value, or the default value if no value exists., +     * @throws SettingsException Failure to parse the setting, +     */, +    /**, +     * Returns the setting value (as long) associated with the setting key. If it does not exists,, +     * returns the default value provided., +     *, +     * @param setting      The setting key, +     * @param defaultValue The value to return if no value is associated with the setting, +     * @return The (long) value, or the default value if no value exists.]