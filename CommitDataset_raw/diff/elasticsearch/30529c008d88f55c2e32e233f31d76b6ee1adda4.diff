[+++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +@defaultMessage Treat system properties as immutable, +java.lang.System#setProperties(java.util.Properties), +java.lang.System#setProperty(java.lang.String,java.lang.String), +java.lang.System#clearProperty(java.lang.String), +java.lang.System#getProperties() @ Use BootstrapInfo.getSystemProperties for a read-only view, +, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +@defaultMessage Treat system properties as immutable, +java.lang.System#setProperties(java.util.Properties), +java.lang.System#setProperty(java.lang.String,java.lang.String), +java.lang.System#clearProperty(java.lang.String), +java.lang.System#getProperties() @ Use BootstrapInfo.getSystemProperties for a read-only view, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JvmInfo.jvmInfo();, +    /** Set the system property before anything has a chance to trigger its use */, +    // TODO: why? is it just a bad default somewhere? or is it some BS around 'but the client' garbage <-- my guess, +    @SuppressForbidden(reason = "sets logger prefix on initialization"), +    static void initLoggerPrefix() {, +        System.setProperty("es.logger.prefix", "");, +    }, +, +        initLoggerPrefix();, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +@defaultMessage Treat system properties as immutable, +java.lang.System#setProperties(java.util.Properties), +java.lang.System#setProperty(java.lang.String,java.lang.String), +java.lang.System#clearProperty(java.lang.String), +java.lang.System#getProperties() @ Use BootstrapInfo.getSystemProperties for a read-only view, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JvmInfo.jvmInfo();, +    /** Set the system property before anything has a chance to trigger its use */, +    // TODO: why? is it just a bad default somewhere? or is it some BS around 'but the client' garbage <-- my guess, +    @SuppressForbidden(reason = "sets logger prefix on initialization"), +    static void initLoggerPrefix() {, +        System.setProperty("es.logger.prefix", "");, +    }, +, +        initLoggerPrefix();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCLIParser.java, +import org.elasticsearch.common.SuppressForbidden;, +        // TODO: don't use system properties as a way to do this, its horrible..., +        @SuppressForbidden(reason = "Sets system properties passed as CLI parameters"), +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +, +@defaultMessage Treat system properties as immutable, +java.lang.System#setProperties(java.util.Properties), +java.lang.System#setProperty(java.lang.String,java.lang.String), +java.lang.System#clearProperty(java.lang.String), +java.lang.System#getProperties() @ Use BootstrapInfo.getSystemProperties for a read-only view, +, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        JvmInfo.jvmInfo();, +    /** Set the system property before anything has a chance to trigger its use */, +    // TODO: why? is it just a bad default somewhere? or is it some BS around 'but the client' garbage <-- my guess, +    @SuppressForbidden(reason = "sets logger prefix on initialization"), +    static void initLoggerPrefix() {, +        System.setProperty("es.logger.prefix", "");, +    }, +, +        initLoggerPrefix();, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCLIParser.java, +import org.elasticsearch.common.SuppressForbidden;, +        // TODO: don't use system properties as a way to do this, its horrible..., +        @SuppressForbidden(reason = "Sets system properties passed as CLI parameters"), +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapInfo.java, +import org.elasticsearch.common.SuppressForbidden;, +, +import java.util.Dictionary;, +import java.util.Enumeration;, +, +@SuppressForbidden(reason = "exposes read-only view of system properties"), +, +    // create a view of sysprops map that does not allow modifications, +    // this must be done this way (e.g. versus an actual typed map), because, +    // some test methods still change properties, so whitelisted changes must, +    // be reflected in this this view., +    private static final Dictionary<Object,Object> SYSTEM_PROPERTIES;, +    static {, +        final Dictionary<Object,Object> sysprops = System.getProperties();, +        SYSTEM_PROPERTIES = new Dictionary<Object,Object>() {, +, +            @Override, +            public int size() {, +                return sysprops.size();, +            }, +, +            @Override, +            public boolean isEmpty() {, +                return sysprops.isEmpty();, +            }, +, +            @Override, +            public Enumeration<Object> keys() {, +                return sysprops.keys();]