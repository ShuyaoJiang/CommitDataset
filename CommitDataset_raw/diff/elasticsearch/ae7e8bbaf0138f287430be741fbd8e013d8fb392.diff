[+++ b/core/src/main/java/org/elasticsearch/common/geo/builders/PolygonBuilder.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.util.List;, +import java.util.Objects;, +    static final PolygonBuilder PROTOTYPE = new PolygonBuilder();, +, +    private static final Coordinate[][] EMPTY = new Coordinate[0][];, +     * @return the list of holes defined for this polygon, +     */, +    public List<LineStringBuilder> holes() {, +        return this.holes;, +    }, +, +    /**, +     * @return the list of points of the shell for this polygon, +     */, +    public LineStringBuilder shell() {, +        return this.shell;, +    }, +, +    /**, +    @Override, +    public int hashCode() {, +        return Objects.hash(shell, holes, orientation);, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        PolygonBuilder other = (PolygonBuilder) obj;, +        return Objects.equals(shell, other.shell) &&, +                Objects.equals(holes, other.holes) &&, +                Objects.equals(orientation,  other.orientation);, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeBoolean(orientation == Orientation.RIGHT);, +        shell.writeTo(out);, +        out.writeVInt(holes.size());, +        for (LineStringBuilder hole : holes) {, +            hole.writeTo(out);, +    @Override, +    public PolygonBuilder readFrom(StreamInput in) throws IOException {, +        Orientation orientation = in.readBoolean() ? Orientation.RIGHT : Orientation.LEFT;, +        PolygonBuilder polyBuilder = new PolygonBuilder(orientation);, +        polyBuilder.shell = LineStringBuilder.PROTOTYPE.readFrom(in);, +        int holes = in.readVInt();, +        for (int i = 0; i < holes; i++) {, +            polyBuilder.hole(LineStringBuilder.PROTOTYPE.readFrom(in));, +        return polyBuilder;, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/PolygonBuilder.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.util.List;, +import java.util.Objects;, +    static final PolygonBuilder PROTOTYPE = new PolygonBuilder();, +, +    private static final Coordinate[][] EMPTY = new Coordinate[0][];, +     * @return the list of holes defined for this polygon, +     */, +    public List<LineStringBuilder> holes() {, +        return this.holes;, +    }, +, +    /**, +     * @return the list of points of the shell for this polygon, +     */, +    public LineStringBuilder shell() {, +        return this.shell;, +    }, +, +    /**, +    @Override, +    public int hashCode() {, +        return Objects.hash(shell, holes, orientation);, +    @Override, +    public boolean equals(Object obj) {, +        if (this == obj) {, +            return true;, +        if (obj == null || getClass() != obj.getClass()) {, +            return false;, +        PolygonBuilder other = (PolygonBuilder) obj;, +        return Objects.equals(shell, other.shell) &&, +                Objects.equals(holes, other.holes) &&, +                Objects.equals(orientation,  other.orientation);, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeBoolean(orientation == Orientation.RIGHT);, +        shell.writeTo(out);, +        out.writeVInt(holes.size());, +        for (LineStringBuilder hole : holes) {, +            hole.writeTo(out);, +    @Override, +    public PolygonBuilder readFrom(StreamInput in) throws IOException {, +        Orientation orientation = in.readBoolean() ? Orientation.RIGHT : Orientation.LEFT;, +        PolygonBuilder polyBuilder = new PolygonBuilder(orientation);, +        polyBuilder.shell = LineStringBuilder.PROTOTYPE.readFrom(in);, +        int holes = in.readVInt();, +        for (int i = 0; i < holes; i++) {]