[+++ b/core/src/test/java/org/elasticsearch/action/termvectors/AbstractTermVectorsTestCase.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.termvectors;, +, +import org.apache.lucene.analysis.Analyzer;, +import org.apache.lucene.analysis.TokenFilter;, +import org.apache.lucene.analysis.Tokenizer;, +import org.apache.lucene.analysis.core.LowerCaseFilter;, +import org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper;, +import org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter;, +import org.apache.lucene.analysis.standard.StandardAnalyzer;, +import org.apache.lucene.analysis.standard.StandardTokenizer;, +import org.apache.lucene.analysis.util.CharArraySet;, +import org.apache.lucene.document.*;, +import org.apache.lucene.index.*;, +import org.apache.lucene.search.IndexSearcher;, +import org.apache.lucene.search.ScoreDoc;, +import org.apache.lucene.search.TermQuery;, +import org.apache.lucene.search.TopDocs;, +import org.apache.lucene.store.Directory;, +import org.apache.lucene.store.RAMDirectory;, +import org.elasticsearch.action.admin.indices.alias.Alias;, +import org.elasticsearch.common.inject.internal.Join;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.test.ESIntegTestCase;, +, +import java.io.IOException;, +import java.util.*;, +, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.equalTo;, +, +public abstract class AbstractTermVectorsTestCase extends ESIntegTestCase {, +, +    protected static class TestFieldSetting {, +        final public String name;, +        final public boolean storedOffset;, +        final public boolean storedPayloads;, +        final public boolean storedPositions;, +, +        public TestFieldSetting(String name, boolean storedOffset, boolean storedPayloads, boolean storedPositions) {, +            this.name = name;, +            this.storedOffset = storedOffset;, +            this.storedPayloads = storedPayloads;, +            this.storedPositions = storedPositions;, +        }, +, +        public void addToMappings(XContentBuilder mappingsBuilder) throws IOException {, +            mappingsBuilder.startObject(name);, +            mappingsBuilder.field("type", "string");, +            String tv_settings;, +            if (storedPositions && storedOffset && storedPayloads) {, +                tv_settings = "with_positions_offsets_payloads";, +            } else if (storedPositions && storedOffset) {, +                tv_settings = "with_positions_offsets";, +            } else if (storedPayloads) {, +                tv_settings = "with_positions_payloads";, +            } else if (storedPositions) {, +                tv_settings = "with_positions";, +            } else if (storedOffset) {, +                tv_settings = "with_offsets";, +            } else {, +                tv_settings = "yes";, +            }, +, +            mappingsBuilder.field("term_vector", tv_settings);, +, +            if (storedPayloads) {, +                mappingsBuilder.field("analyzer", "tv_test");, +            }, +, +            mappingsBuilder.endObject();, +        }, +, +        @Override, +        public String toString() {, +            StringBuilder sb = new StringBuilder("name: ").append(name).append(" tv_with:");, +            if (storedPayloads) {, +                sb.append("payloads,");, +            }]