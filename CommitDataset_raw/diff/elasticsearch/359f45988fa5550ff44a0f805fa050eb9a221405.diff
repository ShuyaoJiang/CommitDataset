[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +import java.util.Optional;, +        Optional<QueryBuilder> parseInnerQueryBuilder = queryParseContext.parseInnerQueryBuilder();, +        if (parseInnerQueryBuilder.isPresent()) {, +            QueryBuilder queryBuilder = QueryBuilder.rewriteQuery(parseInnerQueryBuilder.get(), queryShardContext);, +}, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +import java.util.Optional;, +        Optional<QueryBuilder> parseInnerQueryBuilder = queryParseContext.parseInnerQueryBuilder();, +        if (parseInnerQueryBuilder.isPresent()) {, +            QueryBuilder queryBuilder = QueryBuilder.rewriteQuery(parseInnerQueryBuilder.get(), queryShardContext);, +}, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.query.QueryBuilder;, +import java.util.Optional;, +                Optional<QueryBuilder> innerQueryBuilder = shardContext.newParseContext(parser).parseInnerQueryBuilder();, +                ParsedQuery parsedFilter = null;, +                if (innerQueryBuilder.isPresent()) {, +                    parsedFilter = shardContext.toFilter(innerQueryBuilder.get());, +                }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +import java.util.Optional;, +        Optional<QueryBuilder> parseInnerQueryBuilder = queryParseContext.parseInnerQueryBuilder();, +        if (parseInnerQueryBuilder.isPresent()) {, +            QueryBuilder queryBuilder = QueryBuilder.rewriteQuery(parseInnerQueryBuilder.get(), queryShardContext);, +}, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.query.QueryBuilder;, +import java.util.Optional;, +                Optional<QueryBuilder> innerQueryBuilder = shardContext.newParseContext(parser).parseInnerQueryBuilder();, +                ParsedQuery parsedFilter = null;, +                if (innerQueryBuilder.isPresent()) {, +                    parsedFilter = shardContext.toFilter(innerQueryBuilder.get());, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +import java.util.Optional;, +    public static Optional<BoolQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {, +                    parseContext.parseInnerQueryBuilder().ifPresent(mustClauses::add);, +                    parseContext.parseInnerQueryBuilder().ifPresent(shouldClauses::add);, +                    parseContext.parseInnerQueryBuilder().ifPresent(filterClauses::add);, +                    parseContext.parseInnerQueryBuilder().ifPresent(mustNotClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(mustClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(shouldClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(filterClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(mustNotClauses::add);, +        return Optional.of(boolQuery);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +import java.util.Optional;, +        Optional<QueryBuilder> parseInnerQueryBuilder = queryParseContext.parseInnerQueryBuilder();, +        if (parseInnerQueryBuilder.isPresent()) {, +            QueryBuilder queryBuilder = QueryBuilder.rewriteQuery(parseInnerQueryBuilder.get(), queryShardContext);, +}, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.query.QueryBuilder;, +import java.util.Optional;, +                Optional<QueryBuilder> innerQueryBuilder = shardContext.newParseContext(parser).parseInnerQueryBuilder();, +                ParsedQuery parsedFilter = null;, +                if (innerQueryBuilder.isPresent()) {, +                    parsedFilter = shardContext.toFilter(innerQueryBuilder.get());, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +import java.util.Optional;, +    public static Optional<BoolQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {, +                    parseContext.parseInnerQueryBuilder().ifPresent(mustClauses::add);, +                    parseContext.parseInnerQueryBuilder().ifPresent(shouldClauses::add);, +                    parseContext.parseInnerQueryBuilder().ifPresent(filterClauses::add);, +                    parseContext.parseInnerQueryBuilder().ifPresent(mustNotClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(mustClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(shouldClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(filterClauses::add);, +                        parseContext.parseInnerQueryBuilder().ifPresent(mustNotClauses::add);, +        return Optional.of(boolQuery);, +++ b/core/src/main/java/org/elasticsearch/index/query/BoostingQueryBuilder.java, +import java.util.Optional;, +    public static Optional<BoostingQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {, +        Optional<QueryBuilder> positiveQuery = null;, +        Optional<QueryBuilder> negativeQuery = null;, +        if (positiveQuery.isPresent() == false || negativeQuery.isPresent() == false) {, +            return Optional.empty();, +        }, +        BoostingQueryBuilder boostingQuery = new BoostingQueryBuilder(positiveQuery.get(), negativeQuery.get());, +        return Optional.of(boostingQuery);, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/AliasValidator.java, +import java.util.Optional;, +        Optional<QueryBuilder> parseInnerQueryBuilder = queryParseContext.parseInnerQueryBuilder();, +        if (parseInnerQueryBuilder.isPresent()) {, +            QueryBuilder queryBuilder = QueryBuilder.rewriteQuery(parseInnerQueryBuilder.get(), queryShardContext);, +}, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.index.query.QueryBuilder;, +import java.util.Optional;, +                Optional<QueryBuilder> innerQueryBuilder = shardContext.newParseContext(parser).parseInnerQueryBuilder();, +                ParsedQuery parsedFilter = null;, +                if (innerQueryBuilder.isPresent()) {, +                    parsedFilter = shardContext.toFilter(innerQueryBuilder.get());, +                }, +++ b/core/src/main/java/org/elasticsearch/index/query/BoolQueryBuilder.java, +import java.util.Optional;, +    public static Optional<BoolQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {, +                    parseContext.parseInnerQueryBuilder().ifPresent(mustClauses::add);]