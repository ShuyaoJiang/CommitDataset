[+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +    private final boolean isServer;, +    private final ChannelStats stats = new ChannelStats();, +    Netty4TcpChannel(Channel channel, boolean isServer, String profile, @Nullable ChannelFuture connectFuture) {, +        this.isServer = isServer;, +    public boolean isServerChannel() {, +        return isServer;, +    }, +, +    @Override, +    public ChannelStats getChannelStats() {, +        return stats;, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +    private final boolean isServer;, +    private final ChannelStats stats = new ChannelStats();, +    Netty4TcpChannel(Channel channel, boolean isServer, String profile, @Nullable ChannelFuture connectFuture) {, +        this.isServer = isServer;, +    public boolean isServerChannel() {, +        return isServer;, +    }, +, +    @Override, +    public ChannelStats getChannelStats() {, +        return stats;, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +        Netty4TcpChannel nettyChannel = new Netty4TcpChannel(channel, false, "default", connectFuture);, +            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +    private final boolean isServer;, +    private final ChannelStats stats = new ChannelStats();, +    Netty4TcpChannel(Channel channel, boolean isServer, String profile, @Nullable ChannelFuture connectFuture) {, +        this.isServer = isServer;, +    public boolean isServerChannel() {, +        return isServer;, +    }, +, +    @Override, +    public ChannelStats getChannelStats() {, +        return stats;, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +        Netty4TcpChannel nettyChannel = new Netty4TcpChannel(channel, false, "default", connectFuture);, +            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());, +++ /dev/null, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +    private final boolean isServer;, +    private final ChannelStats stats = new ChannelStats();, +    Netty4TcpChannel(Channel channel, boolean isServer, String profile, @Nullable ChannelFuture connectFuture) {, +        this.isServer = isServer;, +    public boolean isServerChannel() {, +        return isServer;, +    }, +, +    @Override, +    public ChannelStats getChannelStats() {, +        return stats;, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4Transport.java, +        Netty4TcpChannel nettyChannel = new Netty4TcpChannel(channel, false, "default", connectFuture);, +            Netty4TcpChannel nettyTcpChannel = new Netty4TcpChannel(ch, true, name, ch.newSucceededFuture());, +++ /dev/null, +++ b/plugins/transport-nio/src/main/java/org/elasticsearch/transport/nio/NioTcpChannel.java, +    private final boolean isServer;, +    private final ChannelStats stats = new ChannelStats();, +    public NioTcpChannel(boolean isServer, String profile, SocketChannel socketChannel) {, +        this.isServer = isServer;, +    public boolean isServerChannel() {, +        return isServer;, +    }, +, +    @Override, +    public ChannelStats getChannelStats() {, +        return stats;, +    }, +, +    @Override, +++ b/modules/transport-netty4/src/main/java/org/elasticsearch/transport/netty4/Netty4TcpChannel.java, +    private final boolean isServer;, +    private final ChannelStats stats = new ChannelStats();, +    Netty4TcpChannel(Channel channel, boolean isServer, String profile, @Nullable ChannelFuture connectFuture) {, +        this.isServer = isServer;, +    public boolean isServerChannel() {, +        return isServer;, +    }, +, +    @Override, +    public ChannelStats getChannelStats() {, +        return stats;, +    }, +]