[+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +                new ExpiredForecastsRemover(client, threadPool),, +                new ExpiredModelSnapshotsRemover(client, threadPool, clusterService),, +            ActionListener<Boolean> nextListener = ActionListener.wrap(, +                    booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener), listener::onFailure);, +            // Removing expired ML data and artifacts requires multiple operations., +            // These are queued up and executed sequentially in the action listener,, +            // the chained calls must all run the ML utility thread pool NOT the thread, +            // the previous action returned in which in the case of a transport_client_boss, +            // thread is a disaster., +            remover.remove(new ThreadedActionListener<>(logger, threadPool, MachineLearning.UTILITY_THREAD_POOL_NAME, nextListener,, +                    false));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +                new ExpiredForecastsRemover(client, threadPool),, +                new ExpiredModelSnapshotsRemover(client, threadPool, clusterService),, +            ActionListener<Boolean> nextListener = ActionListener.wrap(, +                    booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener), listener::onFailure);, +            // Removing expired ML data and artifacts requires multiple operations., +            // These are queued up and executed sequentially in the action listener,, +            // the chained calls must all run the ML utility thread pool NOT the thread, +            // the previous action returned in which in the case of a transport_client_boss, +            // thread is a disaster., +            remover.remove(new ThreadedActionListener<>(logger, threadPool, MachineLearning.UTILITY_THREAD_POOL_NAME, nextListener,, +                    false));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.ml.MachineLearning;, +    private final ThreadPool threadPool;, +    public ExpiredForecastsRemover(Client client, ThreadPool threadPool) {, +        this.threadPool = Objects.requireNonNull(threadPool);, +        client.execute(SearchAction.INSTANCE, searchRequest, new ThreadedActionListener<>(LOGGER, threadPool,, +                MachineLearning.UTILITY_THREAD_POOL_NAME, forecastStatsHandler, false));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +                new ExpiredForecastsRemover(client, threadPool),, +                new ExpiredModelSnapshotsRemover(client, threadPool, clusterService),, +            ActionListener<Boolean> nextListener = ActionListener.wrap(, +                    booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener), listener::onFailure);, +            // Removing expired ML data and artifacts requires multiple operations., +            // These are queued up and executed sequentially in the action listener,, +            // the chained calls must all run the ML utility thread pool NOT the thread, +            // the previous action returned in which in the case of a transport_client_boss, +            // thread is a disaster., +            remover.remove(new ThreadedActionListener<>(logger, threadPool, MachineLearning.UTILITY_THREAD_POOL_NAME, nextListener,, +                    false));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.ml.MachineLearning;, +    private final ThreadPool threadPool;, +    public ExpiredForecastsRemover(Client client, ThreadPool threadPool) {, +        this.threadPool = Objects.requireNonNull(threadPool);, +        client.execute(SearchAction.INSTANCE, searchRequest, new ThreadedActionListener<>(LOGGER, threadPool,, +                MachineLearning.UTILITY_THREAD_POOL_NAME, forecastStatsHandler, false));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.ml.MachineLearning;, +    private final ThreadPool threadPool;, +    public ExpiredModelSnapshotsRemover(Client client, ThreadPool threadPool, ClusterService clusterService) {, +        this.threadPool = Objects.requireNonNull(threadPool);, +        client.execute(SearchAction.INSTANCE, searchRequest, new ThreadedActionListener<>(LOGGER, threadPool,, +                MachineLearning.UTILITY_THREAD_POOL_NAME, expiredSnapshotsListener(job.getId(), listener), false));, +    }, +, +    private ActionListener<SearchResponse> expiredSnapshotsListener(String jobId, ActionListener<Boolean> listener) {, +        return new ActionListener<SearchResponse>() {, +                listener.onFailure(new ElasticsearchException("[" + jobId +  "] Search for expired snapshots failed", e));, +        };, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteExpiredDataAction.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +                new ExpiredForecastsRemover(client, threadPool),, +                new ExpiredModelSnapshotsRemover(client, threadPool, clusterService),, +            ActionListener<Boolean> nextListener = ActionListener.wrap(, +                    booleanResponse -> deleteExpiredData(mlDataRemoversIterator, listener), listener::onFailure);, +            // Removing expired ML data and artifacts requires multiple operations., +            // These are queued up and executed sequentially in the action listener,, +            // the chained calls must all run the ML utility thread pool NOT the thread, +            // the previous action returned in which in the case of a transport_client_boss, +            // thread is a disaster., +            remover.remove(new ThreadedActionListener<>(logger, threadPool, MachineLearning.UTILITY_THREAD_POOL_NAME, nextListener,, +                    false));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.ml.MachineLearning;, +    private final ThreadPool threadPool;, +    public ExpiredForecastsRemover(Client client, ThreadPool threadPool) {, +        this.threadPool = Objects.requireNonNull(threadPool);, +        client.execute(SearchAction.INSTANCE, searchRequest, new ThreadedActionListener<>(LOGGER, threadPool,, +                MachineLearning.UTILITY_THREAD_POOL_NAME, forecastStatsHandler, false));, +++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java, +import org.elasticsearch.action.support.ThreadedActionListener;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.elasticsearch.xpack.ml.MachineLearning;, +    private final ThreadPool threadPool;, +    public ExpiredModelSnapshotsRemover(Client client, ThreadPool threadPool, ClusterService clusterService) {]