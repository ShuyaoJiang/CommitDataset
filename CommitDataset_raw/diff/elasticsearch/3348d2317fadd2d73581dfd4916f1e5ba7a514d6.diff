[+++ b/docs/reference/search/rank-eval.asciidoc, +                 { "_index": "my_index", "_id": "doc3", "rating": 1 }, +        "mean_reciprocal_rank": {, +            "relevant_rating_threshold" : 1, +        }, +++ b/docs/reference/search/rank-eval.asciidoc, +                 { "_index": "my_index", "_id": "doc3", "rating": 1 }, +        "mean_reciprocal_rank": {, +            "relevant_rating_threshold" : 1, +        }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +/**, + * Metric implementing Discounted Cumulative Gain (https://en.wikipedia.org/wiki/Discounted_cumulative_gain).<br>, + * The `normalize` parameter can be set to calculate the normalized NDCG (set to <tt>false</tt> by default).<br>, + * The optional `unknown_doc_rating` parameter can be used to specify a default rating for unlabeled documents., + */, +     * Optional. If set, this will be the rating for docs that are unrated in the ranking evaluation request, +    DiscountedCumulativeGain(StreamInput in) throws IOException {, +++ b/docs/reference/search/rank-eval.asciidoc, +                 { "_index": "my_index", "_id": "doc3", "rating": 1 }, +        "mean_reciprocal_rank": {, +            "relevant_rating_threshold" : 1, +        }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +/**, + * Metric implementing Discounted Cumulative Gain (https://en.wikipedia.org/wiki/Discounted_cumulative_gain).<br>, + * The `normalize` parameter can be set to calculate the normalized NDCG (set to <tt>false</tt> by default).<br>, + * The optional `unknown_doc_rating` parameter can be used to specify a default rating for unlabeled documents., + */, +     * Optional. If set, this will be the rating for docs that are unrated in the ranking evaluation request, +    DiscountedCumulativeGain(StreamInput in) throws IOException {, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, + * Result of the evaluation metric calculation on one particular query alone., +    private final String queryId;, +    private final double evaluationResult;, +    private final List<RatedSearchHit> hits = new ArrayList<>();, +    public EvalQueryQuality(String id, double evaluationResult) {, +        this.queryId = id;, +        this.evaluationResult = evaluationResult;, +        this.hits.addAll(in.readList(RatedSearchHit::new));, +        out.writeString(queryId);, +        out.writeDouble(evaluationResult);, +        return queryId;, +        return evaluationResult;, +    public void setMetricDetails(MetricDetails breakdown) {, +        this.hits.addAll(hits);, +        builder.startObject(queryId);, +        builder.field("quality_level", this.evaluationResult);, +        return Objects.equals(queryId, other.queryId) &&, +                Objects.equals(evaluationResult, other.evaluationResult) &&, +        return Objects.hash(queryId, evaluationResult, hits, optionalMetricDetails);, +++ b/docs/reference/search/rank-eval.asciidoc, +                 { "_index": "my_index", "_id": "doc3", "rating": 1 }, +        "mean_reciprocal_rank": {, +            "relevant_rating_threshold" : 1, +        }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +/**, + * Metric implementing Discounted Cumulative Gain (https://en.wikipedia.org/wiki/Discounted_cumulative_gain).<br>, + * The `normalize` parameter can be set to calculate the normalized NDCG (set to <tt>false</tt> by default).<br>, + * The optional `unknown_doc_rating` parameter can be used to specify a default rating for unlabeled documents., + */, +     * Optional. If set, this will be the rating for docs that are unrated in the ranking evaluation request, +    DiscountedCumulativeGain(StreamInput in) throws IOException {, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvalQueryQuality.java, + * Result of the evaluation metric calculation on one particular query alone., +    private final String queryId;, +    private final double evaluationResult;, +    private final List<RatedSearchHit> hits = new ArrayList<>();, +    public EvalQueryQuality(String id, double evaluationResult) {, +        this.queryId = id;, +        this.evaluationResult = evaluationResult;, +        this.hits.addAll(in.readList(RatedSearchHit::new));, +        out.writeString(queryId);, +        out.writeDouble(evaluationResult);, +        return queryId;, +        return evaluationResult;, +    public void setMetricDetails(MetricDetails breakdown) {, +        this.hits.addAll(hits);, +        builder.startObject(queryId);, +        builder.field("quality_level", this.evaluationResult);, +        return Objects.equals(queryId, other.queryId) &&, +                Objects.equals(evaluationResult, other.evaluationResult) &&, +        return Objects.hash(queryId, evaluationResult, hits, optionalMetricDetails);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/EvaluationMetric.java, +    /**, +     * join hits with rated documents using the joint _index/_id document key, +     */, +++ b/docs/reference/search/rank-eval.asciidoc, +                 { "_index": "my_index", "_id": "doc3", "rating": 1 }, +        "mean_reciprocal_rank": {, +            "relevant_rating_threshold" : 1, +        }, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +/**, + * Metric implementing Discounted Cumulative Gain (https://en.wikipedia.org/wiki/Discounted_cumulative_gain).<br>, + * The `normalize` parameter can be set to calculate the normalized NDCG (set to <tt>false</tt> by default).<br>, + * The optional `unknown_doc_rating` parameter can be used to specify a default rating for unlabeled documents., + */, +     * Optional. If set, this will be the rating for docs that are unrated in the ranking evaluation request]