[+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +    protected Logger logger = LogManager.getLogger(getClass());, +, +        final boolean forced = indexShard.isSyncNeeded();, +        indexShard.flush(new FlushRequest().force(forced));, +        logger.trace("{} shard is ready for closing [forced:{}]", shardId, forced);, +++ b/server/src/main/java/org/elasticsearch/action/admin/indices/close/TransportVerifyShardBeforeCloseAction.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +    protected Logger logger = LogManager.getLogger(getClass());, +, +        final boolean forced = indexShard.isSyncNeeded();, +        indexShard.flush(new FlushRequest().force(forced));, +        logger.trace("{} shard is ready for closing [forced:{}]", shardId, forced);, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/index/engine/FrozenIndexTests.java, +import org.elasticsearch.action.delete.DeleteResponse;, +import org.elasticsearch.rest.RestStatus;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +import static org.hamcrest.Matchers.is;, +, +    public void testFreezeEmptyIndexWithTranslogOps() throws Exception {, +        final String indexName = "empty";, +        createIndex(indexName, Settings.builder(), +            .put("index.number_of_shards", 1), +            .put("index.number_of_replicas", 0), +            .put("index.refresh_interval", TimeValue.MINUS_ONE), +            .build());, +, +        final long nbNoOps = randomIntBetween(1, 10);, +        for (long i = 0; i < nbNoOps; i++) {, +            final DeleteResponse deleteResponse = client().prepareDelete(indexName, "_doc", Long.toString(i)).get();, +            assertThat(deleteResponse.status(), is(RestStatus.NOT_FOUND));, +        }, +, +        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);, +        assertBusy(() -> {, +            final Index index = client().admin().cluster().prepareState().get().getState().metaData().index(indexName).getIndex();, +            final IndexService indexService = indicesService.indexService(index);, +            assertThat(indexService.hasShard(0), is(true));, +            assertThat(indexService.getShard(0).getGlobalCheckpoint(), greaterThanOrEqualTo(nbNoOps - 1L));, +        });, +, +        assertAcked(new XPackClient(client()).freeze(new TransportFreezeIndexAction.FreezeRequest(indexName)));, +        assertIndexFrozen(indexName);, +    }]