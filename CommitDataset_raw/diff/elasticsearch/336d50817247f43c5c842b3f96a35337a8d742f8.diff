[+++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.SSHA256);, +++ b/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +        hasher = Hasher.resolve(config.settings().get(CACHE_HASH_ALGO_SETTING, null), Hasher.SSHA256);, +++ b/src/main/java/org/elasticsearch/shield/authc/support/Hasher.java, +import org.apache.commons.codec.digest.*;, +import org.elasticsearch.common.base.Charsets;, +import org.elasticsearch.shield.ShieldException;, +import java.security.MessageDigest;, +import java.security.NoSuchAlgorithmException;, +import java.util.Random;, +import java.util.concurrent.ThreadLocalRandom;, +    APR1() {, +            MessageDigest md = SHA1Provider.sha1();, +            md.update(textBytes);, +            String hash = Base64.encodeBase64String(md.digest());, +            MessageDigest md = SHA1Provider.sha1();, +            md.update(textBytes);, +            String passwd64 = Base64.encodeBase64String(md.digest());, +    MD5() {, +        @Override, +        public char[] hash(SecuredString text) {, +            MessageDigest md = MD5Provider.md5();, +            md.update(CharArrays.toUtf8Bytes(text.internalChars()));, +            String hash = Base64.encodeBase64String(md.digest());, +            return (MD5_PREFIX + hash).toCharArray();, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(MD5_PREFIX)) {, +                return false;, +            }, +            hashStr = hashStr.substring(MD5_PREFIX.length());, +            MessageDigest md = MD5Provider.md5();, +            md.update(CharArrays.toUtf8Bytes(text.internalChars()));, +            String computedHashStr = Base64.encodeBase64String(md.digest());, +            return hashStr.equals(computedHashStr);, +        }, +    },, +, +    SSHA256() {, +        @Override, +        public char[] hash(SecuredString text) {, +            MessageDigest md = SHA256Provider.sha256();, +            md.update(CharArrays.toUtf8Bytes(text.internalChars()));, +            char[] salt = SaltProvider.salt(8);, +            md.update(CharArrays.toUtf8Bytes(salt));, +            String hash = Base64.encodeBase64String(md.digest());, +            char[] result = new char[SSHA256_PREFIX.length() + salt.length + hash.length()];, +            System.arraycopy(SSHA256_PREFIX.toCharArray(), 0, result, 0, SSHA256_PREFIX.length());, +            System.arraycopy(salt, 0, result, SSHA256_PREFIX.length(), salt.length);, +            System.arraycopy(hash.toCharArray(), 0, result, SSHA256_PREFIX.length() + salt.length, hash.length());, +            return result;, +        }, +, +        @Override, +        public boolean verify(SecuredString text, char[] hash) {, +            String hashStr = new String(hash);, +            if (!hashStr.startsWith(SSHA256_PREFIX)) {, +                return false;, +            }, +            hashStr = hashStr.substring(SSHA256_PREFIX.length());, +            char[] saltAndHash = hashStr.toCharArray();, +            MessageDigest md = SHA256Provider.sha256();, +            md.update(CharArrays.toUtf8Bytes(text.internalChars()));, +            md.update(new String(saltAndHash, 0, 8).getBytes(Charsets.UTF_8));, +            String computedHash = Base64.encodeBase64String(md.digest());, +            return computedHash.equals(new String(saltAndHash, 8, saltAndHash.length - 8));, +        }, +    },, +, +    private static final String MD5_PREFIX = "{MD5}";, +    private static final String SSHA256_PREFIX = "{SSHA256}";, +            case "apr1"         : return APR1;, +            case "ssha256"      : return SSHA256;, +    static final class MD5Provider {, +, +        private static final MessageDigest digest;, +, +        static {, +            try {, +                digest = MessageDigest.getInstance(MessageDigestAlgorithms.MD5);, +            } catch (NoSuchAlgorithmException e) {, +                throw new ShieldException("unsupported digest algorithm [" + MessageDigestAlgorithms.MD5 + "]. Please verify you are running on Java 7 or above", e);, +            }, +        }, +, +        private static MessageDigest md5() {, +            try {, +                MessageDigest md5 = (MessageDigest) digest.clone();, +                md5.reset();, +                return md5;, +            } catch (CloneNotSupportedException e) {, +                throw new ShieldException("could not create MD5 digest", e);, +            }, +        }, +    }, +]