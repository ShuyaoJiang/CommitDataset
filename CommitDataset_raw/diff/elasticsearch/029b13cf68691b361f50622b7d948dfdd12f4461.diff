[+++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +import org.elasticsearch.index.query.support.XContentStructure;, +        boolean filterFound = false;, +        XContentStructure.InnerQuery innerQuery = null;, +        XContentStructure.InnerFilter innerFilter = null;, +                // Usually, the query would be parsed here, but the child, +                // type may not have been extracted yet, so use the, +                // XContentStructure.<type> facade to parse if available,, +                // or delay parsing if not., +                    innerQuery = new XContentStructure.InnerQuery(parseContext, childType == null ? null : new String[] {childType});, +                    innerFilter = new XContentStructure.InnerFilter(parseContext, childType == null ? null : new String[] {childType});, +                    filterFound = true;, +        if (!queryFound && !filterFound) {, +            throw new QueryParsingException(parseContext.index(), "[has_child] filter requires 'query' or 'filter' field");, +        Query query;, +        if (queryFound) {, +            query = innerQuery.asQuery(childType);, +        } else {, +            query = innerFilter.asFilter(childType);, +        }, +, +        if (query == null) {, +            return null;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +import org.elasticsearch.index.query.support.XContentStructure;, +        boolean filterFound = false;, +        XContentStructure.InnerQuery innerQuery = null;, +        XContentStructure.InnerFilter innerFilter = null;, +                // Usually, the query would be parsed here, but the child, +                // type may not have been extracted yet, so use the, +                // XContentStructure.<type> facade to parse if available,, +                // or delay parsing if not., +                    innerQuery = new XContentStructure.InnerQuery(parseContext, childType == null ? null : new String[] {childType});, +                    innerFilter = new XContentStructure.InnerFilter(parseContext, childType == null ? null : new String[] {childType});, +                    filterFound = true;, +        if (!queryFound && !filterFound) {, +            throw new QueryParsingException(parseContext.index(), "[has_child] filter requires 'query' or 'filter' field");, +        Query query;, +        if (queryFound) {, +            query = innerQuery.asQuery(childType);, +        } else {, +            query = innerFilter.asFilter(childType);, +        }, +, +        if (query == null) {, +            return null;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.index.query.support.XContentStructure;, +        XContentStructure.InnerQuery iq = null;, +                // Usually, the query would be parsed here, but the child, +                // type may not have been extracted yet, so use the, +                // XContentStructure.<type> facade to parse if available,, +                // or delay parsing if not., +                    iq = new XContentStructure.InnerQuery(parseContext, childType == null ? null : new String[] {childType});, +, +        Query innerQuery = iq.asQuery(childType);, +, +        if (innerQuery == null) {, +            return null;, +        }, +++ b/src/main/java/org/elasticsearch/index/query/HasChildFilterParser.java, +import org.elasticsearch.index.query.support.XContentStructure;, +        boolean filterFound = false;, +        XContentStructure.InnerQuery innerQuery = null;, +        XContentStructure.InnerFilter innerFilter = null;, +                // Usually, the query would be parsed here, but the child, +                // type may not have been extracted yet, so use the, +                // XContentStructure.<type> facade to parse if available,, +                // or delay parsing if not., +                    innerQuery = new XContentStructure.InnerQuery(parseContext, childType == null ? null : new String[] {childType});, +                    innerFilter = new XContentStructure.InnerFilter(parseContext, childType == null ? null : new String[] {childType});, +                    filterFound = true;, +        if (!queryFound && !filterFound) {, +            throw new QueryParsingException(parseContext.index(), "[has_child] filter requires 'query' or 'filter' field");, +        Query query;, +        if (queryFound) {, +            query = innerQuery.asQuery(childType);, +        } else {, +            query = innerFilter.asFilter(childType);, +        }, +, +        if (query == null) {, +            return null;, +        }, +, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.index.query.support.XContentStructure;, +        XContentStructure.InnerQuery iq = null;, +                // Usually, the query would be parsed here, but the child, +                // type may not have been extracted yet, so use the, +                // XContentStructure.<type> facade to parse if available,, +                // or delay parsing if not., +                    iq = new XContentStructure.InnerQuery(parseContext, childType == null ? null : new String[] {childType});, +, +        Query innerQuery = iq.asQuery(childType);, +]