[+++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.type.UnsupportedDataType;, +                        if (named instanceof FieldAttribute) {, +                            if (fa.dataType() instanceof UnsupportedDataType) {, +                                        "Cannot use field [" + fa.name() + "], its type [" + fa.dataType().esName() + "] is unsupported");, +                            }, +                            else if (!fa.dataType().isPrimitive()) {, +                                named = u.withUnresolvedMessage(, +                                        "Cannot use field [" + fa.name() + "], type [" + fa.dataType().esName() + "] only its subfields");, +                            }, +                    result.addAll(expandStar((UnresolvedStar) ne, output));, +                } else if (ne instanceof UnresolvedAlias) {, +                    UnresolvedAlias ua = (UnresolvedAlias) ne;, +                    if (ua.child() instanceof UnresolvedStar) {, +                        result.addAll(expandStar((UnresolvedStar) ua.child(), output));, +                    }, +                } else {, +                    result.add(ne);, +                }, +            }, +, +            return result;, +        }, +, +        private List<NamedExpression> expandStar(UnresolvedStar us, List<Attribute> output) {, +            List<NamedExpression> expanded = new ArrayList<>();, +                        if (fa.dataType() instanceof UnsupportedDataType) {, +                            continue;, +                        }, +                                expanded.add(fa.withLocation(attr.location()));, +                                expanded.add(fa.withLocation(attr.location()));, +                    if (!(a.dataType() instanceof UnsupportedDataType) && a.dataType().isPrimitive()) {, +                                expanded.add(a);, +                            expanded.add(a);, +            return expanded;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.type.UnsupportedDataType;, +                        if (named instanceof FieldAttribute) {, +                            if (fa.dataType() instanceof UnsupportedDataType) {, +                                        "Cannot use field [" + fa.name() + "], its type [" + fa.dataType().esName() + "] is unsupported");, +                            }, +                            else if (!fa.dataType().isPrimitive()) {, +                                named = u.withUnresolvedMessage(, +                                        "Cannot use field [" + fa.name() + "], type [" + fa.dataType().esName() + "] only its subfields");, +                            }, +                    result.addAll(expandStar((UnresolvedStar) ne, output));, +                } else if (ne instanceof UnresolvedAlias) {, +                    UnresolvedAlias ua = (UnresolvedAlias) ne;, +                    if (ua.child() instanceof UnresolvedStar) {, +                        result.addAll(expandStar((UnresolvedStar) ua.child(), output));, +                    }, +                } else {, +                    result.add(ne);, +                }, +            }, +, +            return result;, +        }, +, +        private List<NamedExpression> expandStar(UnresolvedStar us, List<Attribute> output) {, +            List<NamedExpression> expanded = new ArrayList<>();, +                        if (fa.dataType() instanceof UnsupportedDataType) {, +                            continue;, +                        }, +                                expanded.add(fa.withLocation(attr.location()));, +                                expanded.add(fa.withLocation(attr.location()));, +                    if (!(a.dataType() instanceof UnsupportedDataType) && a.dataType().isPrimitive()) {, +                                expanded.add(a);, +                            expanded.add(a);, +            return expanded;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Verifier.java, +import org.elasticsearch.xpack.sql.type.UnsupportedDataType;, +                                        if (!(a.dataType() instanceof UnsupportedDataType) && a.dataType().isPrimitive()) {, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java, +import org.elasticsearch.xpack.sql.type.UnsupportedDataType;, +                        if (named instanceof FieldAttribute) {, +                            if (fa.dataType() instanceof UnsupportedDataType) {, +                                        "Cannot use field [" + fa.name() + "], its type [" + fa.dataType().esName() + "] is unsupported");, +                            }, +                            else if (!fa.dataType().isPrimitive()) {, +                                named = u.withUnresolvedMessage(, +                                        "Cannot use field [" + fa.name() + "], type [" + fa.dataType().esName() + "] only its subfields");, +                            }, +                    result.addAll(expandStar((UnresolvedStar) ne, output));, +                } else if (ne instanceof UnresolvedAlias) {, +                    UnresolvedAlias ua = (UnresolvedAlias) ne;, +                    if (ua.child() instanceof UnresolvedStar) {, +                        result.addAll(expandStar((UnresolvedStar) ua.child(), output));, +                    }, +                } else {, +                    result.add(ne);, +                }, +            }, +, +            return result;, +        }, +, +        private List<NamedExpression> expandStar(UnresolvedStar us, List<Attribute> output) {, +            List<NamedExpression> expanded = new ArrayList<>();, +                        if (fa.dataType() instanceof UnsupportedDataType) {]