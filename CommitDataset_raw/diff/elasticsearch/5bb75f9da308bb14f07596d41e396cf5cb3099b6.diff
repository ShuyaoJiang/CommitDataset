[+++ b/src/main/java/org/elasticsearch/search/facet/FacetPhase.java, +                Filter searchFilter = context.searchFilter(context.types());, +                    query = new XFilteredQuery(query, searchFilter);, +++ b/src/main/java/org/elasticsearch/search/facet/FacetPhase.java, +                Filter searchFilter = context.searchFilter(context.types());, +                    query = new XFilteredQuery(query, searchFilter);, +++ b/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +++ b/src/main/java/org/elasticsearch/search/facet/FacetPhase.java, +                Filter searchFilter = context.searchFilter(context.types());, +                    query = new XFilteredQuery(query, searchFilter);, +++ b/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +++ b/src/main/java/org/elasticsearch/search/internal/SearchContext.java, +import org.elasticsearch.common.lucene.search.AndFilter;, +        Filter searchFilter = searchFilter(types());, +                Query q = new XConstantScoreQuery(searchFilter);, +                parsedQuery(new ParsedQuery(new XFilteredQuery(query(), searchFilter), parsedQuery()));, +    public Filter searchFilter(String[] types) {, +        Filter filter = mapperService().searchFilter(types);, +        if (filter == null) {, +            return aliasFilter;, +        } else {, +            filter = filterCache().cache(filter);, +            if (aliasFilter != null) {, +                return new AndFilter(ImmutableList.of(filter, aliasFilter));, +            }, +            return filter;, +        }, +    }, +, +, +++ b/src/main/java/org/elasticsearch/search/facet/FacetPhase.java, +                Filter searchFilter = context.searchFilter(context.types());, +                    query = new XFilteredQuery(query, searchFilter);, +++ b/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java, +++ b/src/main/java/org/elasticsearch/search/internal/SearchContext.java, +import org.elasticsearch.common.lucene.search.AndFilter;, +        Filter searchFilter = searchFilter(types());, +                Query q = new XConstantScoreQuery(searchFilter);, +                parsedQuery(new ParsedQuery(new XFilteredQuery(query(), searchFilter), parsedQuery()));, +    public Filter searchFilter(String[] types) {, +        Filter filter = mapperService().searchFilter(types);, +        if (filter == null) {, +            return aliasFilter;, +        } else {, +            filter = filterCache().cache(filter);, +            if (aliasFilter != null) {, +                return new AndFilter(ImmutableList.of(filter, aliasFilter));, +            }, +            return filter;, +        }, +    }, +, +, +++ b/src/test/java/org/elasticsearch/test/integration/aliases/IndexAliasesTests.java, +import org.elasticsearch.search.facet.FacetBuilders;, +import org.elasticsearch.search.facet.terms.TermsFacet;, +        logger.info("--> checking single filtering alias search with global facets");, +        searchResponse = client1.prepareSearch("tests").setQuery(QueryBuilders.matchQuery("name", "bar")), +                .addFacet(FacetBuilders.termsFacet("test").field("name").global(true)), +                .execute().actionGet();, +        assertThat(((TermsFacet) searchResponse.getFacets().facet("test")).getEntries().size(), equalTo(4));, +, +        logger.info("--> checking single filtering alias search with global facets and sort");, +        searchResponse = client1.prepareSearch("tests").setQuery(QueryBuilders.matchQuery("name", "bar")), +                .addFacet(FacetBuilders.termsFacet("test").field("name").global(true)), +                .addSort("_uid", SortOrder.ASC).execute().actionGet();, +        assertThat(((TermsFacet) searchResponse.getFacets().facet("test")).getEntries().size(), equalTo(4));, +, +        logger.info("--> checking single filtering alias search with non-global facets");, +        searchResponse = client1.prepareSearch("tests").setQuery(QueryBuilders.matchQuery("name", "bar")), +                .addFacet(FacetBuilders.termsFacet("test").field("name").global(false)), +                .addSort("_uid", SortOrder.ASC).execute().actionGet();, +        assertThat(((TermsFacet) searchResponse.getFacets().facet("test")).getEntries().size(), equalTo(2));, +]