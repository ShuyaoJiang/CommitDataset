[+++ b/server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +                .setMasterNodeTimeout(timeout).setTimeout(TimeValue.ZERO);, +        updateMappingRequest(index, type, mappingUpdate, timeout).get();, +++ b/server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +                .setMasterNodeTimeout(timeout).setTimeout(TimeValue.ZERO);, +        updateMappingRequest(index, type, mappingUpdate, timeout).get();, +++ b/server/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +                .put(TestZenDiscovery.USE_ZEN2.getKey(), false), +++ b/server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +                .setMasterNodeTimeout(timeout).setTimeout(TimeValue.ZERO);, +        updateMappingRequest(index, type, mappingUpdate, timeout).get();, +++ b/server/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +                .put(TestZenDiscovery.USE_ZEN2.getKey(), false), +++ b/server/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.action.DocWriteResponse;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.common.Strings;, +    public void testBulkWeirdScenario() throws Exception {, +        String master = internalCluster().startMasterOnlyNode(Settings.EMPTY);, +        internalCluster().startDataOnlyNodes(2);, +, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder(), +            .put("index.number_of_shards", 1).put("index.number_of_replicas", 1)).get());, +        ensureGreen();, +, +        BulkResponse bulkResponse = client().prepareBulk(), +            .add(client().prepareIndex().setIndex("test").setType("_doc").setId("1").setSource("field1", "value1")), +            .add(client().prepareUpdate().setIndex("test").setType("_doc").setId("1").setDoc("field2", "value2")), +            .execute().actionGet();, +, +        assertThat(bulkResponse.hasFailures(), equalTo(false));, +        assertThat(bulkResponse.getItems().length, equalTo(2));, +, +        logger.info(Strings.toString(bulkResponse, true, true));, +, +        internalCluster().assertSeqNos();, +, +        assertThat(bulkResponse.getItems()[0].getResponse().getId(), equalTo("1"));, +        assertThat(bulkResponse.getItems()[0].getResponse().getVersion(), equalTo(1L));, +        assertThat(bulkResponse.getItems()[0].getResponse().getResult(), equalTo(DocWriteResponse.Result.CREATED));, +        assertThat(bulkResponse.getItems()[1].getResponse().getId(), equalTo("1"));, +        assertThat(bulkResponse.getItems()[1].getResponse().getVersion(), equalTo(2L));, +        assertThat(bulkResponse.getItems()[1].getResponse().getResult(), equalTo(DocWriteResponse.Result.UPDATED));, +    }, +, +++ b/server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java, +                .setMasterNodeTimeout(timeout).setTimeout(TimeValue.ZERO);, +        updateMappingRequest(index, type, mappingUpdate, timeout).get();, +++ b/server/src/test/java/org/elasticsearch/action/support/master/IndexingMasterFailoverIT.java, +                .put(TestZenDiscovery.USE_ZEN2.getKey(), false), +++ b/server/src/test/java/org/elasticsearch/cluster/routing/PrimaryAllocationIT.java, +import org.elasticsearch.action.DocWriteResponse;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.common.Strings;, +    public void testBulkWeirdScenario() throws Exception {, +        String master = internalCluster().startMasterOnlyNode(Settings.EMPTY);, +        internalCluster().startDataOnlyNodes(2);, +, +        assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder(), +            .put("index.number_of_shards", 1).put("index.number_of_replicas", 1)).get());, +        ensureGreen();, +, +        BulkResponse bulkResponse = client().prepareBulk(), +            .add(client().prepareIndex().setIndex("test").setType("_doc").setId("1").setSource("field1", "value1")), +            .add(client().prepareUpdate().setIndex("test").setType("_doc").setId("1").setDoc("field2", "value2")), +            .execute().actionGet();, +, +        assertThat(bulkResponse.hasFailures(), equalTo(false));, +        assertThat(bulkResponse.getItems().length, equalTo(2));, +, +        logger.info(Strings.toString(bulkResponse, true, true));, +, +        internalCluster().assertSeqNos();, +, +        assertThat(bulkResponse.getItems()[0].getResponse().getId(), equalTo("1"));, +        assertThat(bulkResponse.getItems()[0].getResponse().getVersion(), equalTo(1L));, +        assertThat(bulkResponse.getItems()[0].getResponse().getResult(), equalTo(DocWriteResponse.Result.CREATED));, +        assertThat(bulkResponse.getItems()[1].getResponse().getId(), equalTo("1"));, +        assertThat(bulkResponse.getItems()[1].getResponse().getVersion(), equalTo(2L));, +        assertThat(bulkResponse.getItems()[1].getResponse().getResult(), equalTo(DocWriteResponse.Result.UPDATED));, +    }, +, +++ b/server/src/test/java/org/elasticsearch/indices/state/RareClusterStateIT.java, +import org.elasticsearch.action.ActionFuture;, +import static org.elasticsearch.action.DocWriteResponse.Result.CREATED;, +        // index another document, this time using dynamic mappings., +        // The ack timeout of 0 on dynamic mapping updates makes it possible for the document to be indexed on the primary, even, +        // if the dynamic mapping update is not applied on the replica yet., +        ActionFuture<IndexResponse> dynamicMappingsFut = client().prepareIndex("index", "type", "2").setSource("field2", 42).execute();, +, +        // ...and wait for second mapping to be available on master, +        assertBusy(() -> {, +            final IndicesService indicesService = internalCluster().getInstance(IndicesService.class, master);, +            final IndexService indexService = indicesService.indexServiceSafe(index);, +            assertNotNull(indexService);, +            final MapperService mapperService = indexService.mapperService();, +            DocumentMapper mapper = mapperService.documentMapper("type");, +            assertNotNull(mapper);, +            assertNotNull(mapper.mappers().getMapper("field2"));, +        });]