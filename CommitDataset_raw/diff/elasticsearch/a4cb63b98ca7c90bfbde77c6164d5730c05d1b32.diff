[+++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/build.gradle, +    "org.elasticsearch.client:transport:${version}": ':client:transport',, +    "org.elasticsearch.plugin:transport-netty4-client:${version}": ':modules:transport-netty4',, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/build.gradle, +    "org.elasticsearch.client:transport:${version}": ':client:transport',, +    "org.elasticsearch.plugin:transport-netty4-client:${version}": ':modules:transport-netty4',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/build.gradle, +    "org.elasticsearch.client:transport:${version}": ':client:transport',, +    "org.elasticsearch.plugin:transport-netty4-client:${version}": ':modules:transport-netty4',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.Input, +    /** Allowed license families for this project. */, +    @Input, +    List<String> approvedLicenses = ['Apache', 'Generated'], +, +    /**, +     * Additional license families that may be found. The key is the license category name (5 characters),, +     * followed by the family name and the value list of patterns to search for., +     */, +    protected Map<String, String> additionalLicenses = new HashMap<>(), +, +    /**, +     * Add a new license type., +     *, +     * The license may be added to the {@link #approvedLicenses} using the {@code familyName}., +     *, +     * @param categoryName A 5-character string identifier for the license, +     * @param familyName An expanded string name for the license, +     * @param pattern A pattern to search for, which if found, indicates a file contains the license, +     */, +    public void additionalLicense(String categoryName, String familyName, String pattern) {, +        if (categoryName.length() != 5) {, +            throw new IllegalArgumentException("License category name must be exactly 5 characters, got ${categoryName}");, +        }, +        additionalLicenses.put(categoryName + familyName, pattern);, +    }, +, +            // license types added by the project, +            for (Map.Entry<String, String[]> additional : additionalLicenses.entrySet()) {, +                String category = additional.getKey().substring(0, 5), +                String family = additional.getKey().substring(5), +                substringMatcher(licenseFamilyCategory: category,, +                                 licenseFamilyName: family) {, +                    pattern(substring: additional.getValue()), +                }, +            }, +, +            for (String licenseFamily : approvedLicenses) {, +                approvedLicense(familyName: licenseFamily), +            }, +++ b/TESTING.asciidoc, +run it using Gradle:, +destructive. When working with a single package it's generally faster to run its, +tests in a tighter loop than gradle provides. In one window:, +++ b/build.gradle, +    "org.elasticsearch.client:transport:${version}": ':client:transport',, +    "org.elasticsearch.plugin:transport-netty4-client:${version}": ':modules:transport-netty4',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +                addClientJarPomGeneration(project), +    protected static void addClientJarPomGeneration(Project project) {, +                    artifactId = artifactId + '-client', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LicenseHeadersTask.groovy, +import org.gradle.api.tasks.Input, +    /** Allowed license families for this project. */, +    @Input, +    List<String> approvedLicenses = ['Apache', 'Generated'], +, +    /**, +     * Additional license families that may be found. The key is the license category name (5 characters),, +     * followed by the family name and the value list of patterns to search for., +     */, +    protected Map<String, String> additionalLicenses = new HashMap<>(), +, +    /**, +     * Add a new license type., +     *]