[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +                throw new RuntimeException("failed to register [" + name + "] exception must have a public StreamInput ctor", t);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +                throw new RuntimeException("failed to register [" + name + "] exception must have a public StreamInput ctor", t);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.apache.lucene.store.AlreadyClosedException;, +import org.apache.lucene.store.LockObtainFailedException;, +import java.nio.file.NoSuchFileException;, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new NullPointerException(readOptionalString()), this);, +                    return (T) readStackTrace(new NumberFormatException(readOptionalString()), this);, +                    return (T) readStackTrace(new EOFException(readOptionalString()), this);, +                    return (T) readStackTrace(new StringIndexOutOfBoundsException(readOptionalString()), this);, +                    return (T) readStackTrace(new ArrayIndexOutOfBoundsException(readOptionalString()), this);, +                case 12:, +                    return (T) readStackTrace(new AssertionError(readOptionalString(), readThrowable()), this);, +                case 13:, +                    return (T) readStackTrace(new FileNotFoundException(readOptionalString()), this);, +                case 14:, +                    final String file = readOptionalString();, +                    final String other = readOptionalString();, +                    final String reason = readOptionalString();, +                    readOptionalString(); // skip the msg - it's composed from file, other and reason, +                    return (T) readStackTrace(new NoSuchFileException(file, other, reason), this);, +                case 15:, +                    return (T) readStackTrace(new OutOfMemoryError(readOptionalString()), this);, +                case 16:, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                case 17:, +                    return (T) readStackTrace(new LockObtainFailedException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +                throw new RuntimeException("failed to register [" + name + "] exception must have a public StreamInput ctor", t);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.apache.lucene.store.AlreadyClosedException;, +import org.apache.lucene.store.LockObtainFailedException;, +import java.nio.file.NoSuchFileException;, +                    return (T) readStackTrace(new IndexFormatTooNewException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new IndexFormatTooOldException(readOptionalString(), -1, -1, -1), this);  // Lucene 5.3 will have getters for all these, +                    return (T) readStackTrace(new NullPointerException(readOptionalString()), this);, +                    return (T) readStackTrace(new NumberFormatException(readOptionalString()), this);, +                    return (T) readStackTrace(new EOFException(readOptionalString()), this);, +                    return (T) readStackTrace(new StringIndexOutOfBoundsException(readOptionalString()), this);, +                    return (T) readStackTrace(new ArrayIndexOutOfBoundsException(readOptionalString()), this);, +                case 12:, +                    return (T) readStackTrace(new AssertionError(readOptionalString(), readThrowable()), this);, +                case 13:, +                    return (T) readStackTrace(new FileNotFoundException(readOptionalString()), this);, +                case 14:, +                    final String file = readOptionalString();, +                    final String other = readOptionalString();, +                    final String reason = readOptionalString();, +                    readOptionalString(); // skip the msg - it's composed from file, other and reason, +                    return (T) readStackTrace(new NoSuchFileException(file, other, reason), this);, +                case 15:, +                    return (T) readStackTrace(new OutOfMemoryError(readOptionalString()), this);, +                case 16:, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                case 17:, +                    return (T) readStackTrace(new LockObtainFailedException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +import com.vividsolutions.jts.util.Assert;, +import org.apache.lucene.store.AlreadyClosedException;, +import org.apache.lucene.store.LockObtainFailedException;, +import java.io.FileNotFoundException;, +import java.nio.file.NoSuchFileException;, +            boolean writeCause = true;, +                writeCause = false;, +                writeCause = false;, +                writeCause = false;, +                writeCause = false;, +                writeCause = false;, +                writeCause = false;, +                writeCause = false;, +            } else if (throwable instanceof AssertionError) {, +                writeVInt(12);, +            } else if (throwable instanceof FileNotFoundException) {, +                writeVInt(13);, +                writeCause = false;, +            } else if (throwable instanceof NoSuchFileException) {, +                writeVInt(14);, +                writeOptionalString(((NoSuchFileException) throwable).getFile());, +                writeOptionalString(((NoSuchFileException) throwable).getOtherFile());, +                writeOptionalString(((NoSuchFileException) throwable).getReason());, +                writeCause = false;, +            } else if (throwable instanceof OutOfMemoryError) {, +                writeVInt(15);, +                writeCause = false;, +            } else if (throwable instanceof AlreadyClosedException) {, +                writeVInt(16);, +            } else if (throwable instanceof LockObtainFailedException) {, +                writeVInt(17);, +            if (writeCause) {, +            }, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +                throw new RuntimeException("failed to register [" + name + "] exception must have a public StreamInput ctor", t);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.apache.lucene.store.AlreadyClosedException;, +import org.apache.lucene.store.LockObtainFailedException;, +import java.nio.file.NoSuchFileException;]