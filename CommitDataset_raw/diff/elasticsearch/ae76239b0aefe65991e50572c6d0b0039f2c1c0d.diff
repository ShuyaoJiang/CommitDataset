[+++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +    private List<Reducer> reducers;, +    private AggregatorFactories(AggregatorFactory[] factories, List<Reducer> reducers) {, +        this.reducers = reducers;, +    }, +, +    public List<Reducer> reducers() {, +        return reducers;, +        private static final List<Reducer> EMPTY_REDUCERS = new ArrayList<>();, +            super(EMPTY_FACTORIES, EMPTY_REDUCERS);, +        private List<Reducer> reducers = new ArrayList<>();, +        public Builder setReducers(List<Reducer> reducers) {, +            this.reducers = reducers;, +            return this;, +        }, +, +            return new AggregatorFactories(factories.toArray(new AggregatorFactory[factories.size()]), this.reducers);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +import org.elasticsearch.search.aggregations.reducers.Reducer;, +    private List<Reducer> reducers;, +    private AggregatorFactories(AggregatorFactory[] factories, List<Reducer> reducers) {, +        this.reducers = reducers;, +    }, +, +    public List<Reducer> reducers() {, +        return reducers;, +        private static final List<Reducer> EMPTY_REDUCERS = new ArrayList<>();, +            super(EMPTY_FACTORIES, EMPTY_REDUCERS);, +        private List<Reducer> reducers = new ArrayList<>();, +        public Builder setReducers(List<Reducer> reducers) {, +            this.reducers = reducers;, +            return this;, +        }, +, +            return new AggregatorFactories(factories.toArray(new AggregatorFactory[factories.size()]), this.reducers);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java, +        return createInternal(context, parent, collectsFromSingleBucket, this.factories.reducers(), this.metaData);]