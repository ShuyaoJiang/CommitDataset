[+++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +    protected static final String OFFSET = "offset";, +    private Object offset;, +, +    public DecayFunctionBuilder setOffset(Object offset) {, +        this.offset = offset;, +        return this;, +    }, +, +        if (offset != null) {, +            builder.field(OFFSET, offset);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +    protected static final String OFFSET = "offset";, +    private Object offset;, +, +    public DecayFunctionBuilder setOffset(Object offset) {, +        this.offset = offset;, +        return this;, +    }, +, +        if (offset != null) {, +            builder.field(OFFSET, offset);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +        double offset = 0.0d;, +            } else if (parameterName.equals(DecayFunctionBuilder.OFFSET)) {, +                offset = parser.doubleValue();, +        return new NumericFieldDataScoreFunction(reference, scale, scaleWeight, offset, getDecayFunction(), numericFieldData);, +        String offsetString = "0km";, +            } else if (parameterName.equals(DecayFunctionBuilder.OFFSET)) {, +                offsetString = parser.text();, +        double offset = DistanceUnit.parse(offsetString, DistanceUnit.METERS, DistanceUnit.METERS);, +        return new GeoFieldDataScoreFunction(reference, scale, scaleWeight, offset, getDecayFunction(), indexFieldData);, +        String offsetString = "0d";, +            } else if (parameterName.equals(DecayFunctionBuilder.OFFSET)) {, +                offsetString = parser.text();, +        val = TimeValue.parseTimeValue(offsetString, TimeValue.timeValueHours(24));, +        double offset = val.getMillis();, +        return new NumericFieldDataScoreFunction(reference, scale, scaleWeight, offset, getDecayFunction(), numericFieldData);, +        public GeoFieldDataScoreFunction(GeoPoint reference, double scale, double scaleWeight, double offset, DecayFunction func,, +            super(scale, scaleWeight, offset, func);, +            double distance = Math.abs(distFunction.calculate(reference.lat(), reference.lon(), other.lat(), other.lon(),, +                    DistanceUnit.METERS)) - offset;, +            if (distance < 0.0d) {, +                distance = 0.0d;, +            }, +            return distance;, +            return "arcDistance(" + other + "(=doc value), " + reference + "(=reference)) - " + offset, +                    + "(=offset) < 0.0 ? 0.0: arcDistance(" + other + "(=doc value), " + reference + "(=reference)) - " + offset, +                    + "(=offset)";, +        public NumericFieldDataScoreFunction(double reference, double scale, double scaleWeight, double offset, DecayFunction func,, +            super(scale, scaleWeight, offset, func);, +            double distance = Math.abs(doubleValues.getValueMissing(docId, reference) - reference) - offset;, +            if (distance < 0.0) {, +                distance = 0.0;, +            }, +            return distance;, +            return "Math.abs(" + doubleValues.getValueMissing(docId, reference) + "(=doc value) - " + reference + "(=reference)) - ", +                    + offset + "(=offset) < 0.0 ? 0.0: Math.abs(" + doubleValues.getValueMissing(docId, reference) + "(=doc value) - ", +                    + reference + ") - " + offset + "(=offset)";, +        protected final double offset;, +        public AbstractDistanceScoreFunction(double userSuppiedScale, double userSuppliedScaleWeight, double offset, DecayFunction func) {, +            if (offset < 0.0d) {, +                throw new ElasticSearchIllegalArgumentException(FunctionScoreQueryParser.NAME + " : offset must be > 0.0");, +            }, +            this.offset = offset;, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionBuilder.java, +    protected static final String OFFSET = "offset";, +    private Object offset;, +, +    public DecayFunctionBuilder setOffset(Object offset) {, +        this.offset = offset;, +        return this;, +    }, +, +        if (offset != null) {, +            builder.field(OFFSET, offset);, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +        double offset = 0.0d;, +            } else if (parameterName.equals(DecayFunctionBuilder.OFFSET)) {, +                offset = parser.doubleValue();, +        return new NumericFieldDataScoreFunction(reference, scale, scaleWeight, offset, getDecayFunction(), numericFieldData);, +        String offsetString = "0km";, +            } else if (parameterName.equals(DecayFunctionBuilder.OFFSET)) {, +                offsetString = parser.text();, +        double offset = DistanceUnit.parse(offsetString, DistanceUnit.METERS, DistanceUnit.METERS);, +        return new GeoFieldDataScoreFunction(reference, scale, scaleWeight, offset, getDecayFunction(), indexFieldData);, +        String offsetString = "0d";, +            } else if (parameterName.equals(DecayFunctionBuilder.OFFSET)) {, +                offsetString = parser.text();, +        val = TimeValue.parseTimeValue(offsetString, TimeValue.timeValueHours(24));, +        double offset = val.getMillis();, +        return new NumericFieldDataScoreFunction(reference, scale, scaleWeight, offset, getDecayFunction(), numericFieldData);, +        public GeoFieldDataScoreFunction(GeoPoint reference, double scale, double scaleWeight, double offset, DecayFunction func,, +            super(scale, scaleWeight, offset, func);, +            double distance = Math.abs(distFunction.calculate(reference.lat(), reference.lon(), other.lat(), other.lon(),, +                    DistanceUnit.METERS)) - offset;, +            if (distance < 0.0d) {]