[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexingSlowLog;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexingSlowLog;, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import java.util.Arrays;, +    private final IndexingSlowLog slowLog;, +        this.slowLog = new IndexingSlowLog(indexSettings.getSettings());, +                indexShard = new ShadowIndexShard(shardId, this.indexSettings, path, store, indexCache, mapperService, similarityService, indexFieldData, engineFactory, eventListener, searcherWrapper, nodeServicesProvider); // no indexing listeners - shadow  engines don't index, +                indexShard = new IndexShard(shardId, this.indexSettings, path, store, indexCache, mapperService, similarityService, indexFieldData, engineFactory, eventListener, searcherWrapper, nodeServicesProvider, slowLog);, +            try {, +                slowLog.onRefreshSettings(settings); // this will be refactored soon anyway so duplication is ok here, +            } catch (Exception e) {, +                logger.warn("failed to refresh slowlog settings", e);, +            }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java, +import org.elasticsearch.index.shard.IndexingStats;, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                indexShard.noopUpdate(updateRequest.type());, +++ b/core/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java, +                        shard.noopUpdate(request.type());, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.index.IndexingSlowLog;, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import java.util.Arrays;, +    private final IndexingSlowLog slowLog;, +        this.slowLog = new IndexingSlowLog(indexSettings.getSettings());, +                indexShard = new ShadowIndexShard(shardId, this.indexSettings, path, store, indexCache, mapperService, similarityService, indexFieldData, engineFactory, eventListener, searcherWrapper, nodeServicesProvider); // no indexing listeners - shadow  engines don't index, +                indexShard = new IndexShard(shardId, this.indexSettings, path, store, indexCache, mapperService, similarityService, indexFieldData, engineFactory, eventListener, searcherWrapper, nodeServicesProvider, slowLog);, +            try {, +                slowLog.onRefreshSettings(settings); // this will be refactored soon anyway so duplication is ok here, +            } catch (Exception e) {, +                logger.warn("failed to refresh slowlog settings", e);, +            }, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index;, +, +import org.elasticsearch.common.Booleans;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.xcontent.XContentHelper;, +import org.elasticsearch.index.engine.Engine;, +import org.elasticsearch.index.mapper.ParsedDocument;, +import org.elasticsearch.index.shard.IndexingOperationListener;, +, +import java.io.IOException;, +import java.util.Locale;, +import java.util.concurrent.TimeUnit;, +, +/**, + */, +public final class IndexingSlowLog implements IndexingOperationListener {, +, +    private boolean reformat;]