[+++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +        private final State state;, +        private final String nodeId;, +        private final String reason;, +        public ShardSnapshotStatus(StreamInput in) throws IOException {, +            nodeId = in.readOptionalString();, +            state = State.fromValue(in.readByte());, +            reason = in.readOptionalString();, +        }, +, +, +        @Override, +        public String toString() {, +            return "ShardSnapshotStatus[state=" + state + ", nodeId=" + nodeId + ", reason=" + reason + "]";, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +        private final State state;, +        private final String nodeId;, +        private final String reason;, +        public ShardSnapshotStatus(StreamInput in) throws IOException {, +            nodeId = in.readOptionalString();, +            state = State.fromValue(in.readByte());, +            reason = in.readOptionalString();, +        }, +, +, +        @Override, +        public String toString() {, +            return "ShardSnapshotStatus[state=" + state + ", nodeId=" + nodeId + ", reason=" + reason + "]";, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.common.Strings;, +        sb.append(Strings.collectionToDelimitedString(this, ","));, +++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +        private final State state;, +        private final String nodeId;, +        private final String reason;, +        public ShardSnapshotStatus(StreamInput in) throws IOException {, +            nodeId = in.readOptionalString();, +            state = State.fromValue(in.readByte());, +            reason = in.readOptionalString();, +        }, +, +, +        @Override, +        public String toString() {, +            return "ShardSnapshotStatus[state=" + state + ", nodeId=" + nodeId + ", reason=" + reason + "]";, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.common.Strings;, +        sb.append(Strings.collectionToDelimitedString(this, ","));, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +                if (store != null) {, +                } else {, +                    logger.trace("[{}] store not initialized prior to closing shard, nothing to close", shardId);, +                }, +++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +        private final State state;, +        private final String nodeId;, +        private final String reason;, +        public ShardSnapshotStatus(StreamInput in) throws IOException {, +            nodeId = in.readOptionalString();, +            state = State.fromValue(in.readByte());, +            reason = in.readOptionalString();, +        }, +, +, +        @Override, +        public String toString() {, +            return "ShardSnapshotStatus[state=" + state + ", nodeId=" + nodeId + ", reason=" + reason + "]";, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.common.Strings;, +        sb.append(Strings.collectionToDelimitedString(this, ","));, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +                if (store != null) {, +                } else {, +                    logger.trace("[{}] store not initialized prior to closing shard, nothing to close", shardId);, +                }, +++ b/core/src/main/java/org/elasticsearch/index/snapshots/IndexShardSnapshotStatus.java, +    public enum Stage {, +    private volatile boolean aborted;, +++ b/core/src/main/java/org/elasticsearch/cluster/SnapshotsInProgress.java, +        private final State state;, +        private final String nodeId;, +        private final String reason;, +        public ShardSnapshotStatus(StreamInput in) throws IOException {, +            nodeId = in.readOptionalString();, +            state = State.fromValue(in.readByte());, +            reason = in.readOptionalString();, +        }, +, +, +        @Override, +        public String toString() {, +            return "ShardSnapshotStatus[state=" + state + ", nodeId=" + nodeId + ", reason=" + reason + "]";, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.common.Strings;, +        sb.append(Strings.collectionToDelimitedString(this, ","));]