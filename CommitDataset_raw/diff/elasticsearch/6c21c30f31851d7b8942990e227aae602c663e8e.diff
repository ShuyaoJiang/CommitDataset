[+++ b/.idea/runConfigurations/Bootstrap.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/.idea/runConfigurations/Bootstrap.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/.idea/runConfigurations/Bootstrap__No_Plugins_.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/.idea/runConfigurations/Bootstrap.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/.idea/runConfigurations/Bootstrap__No_Plugins_.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadBulkStress.java, +                .put("index.refresh_interval", "-1"), +                .put("index.merge.async", true), +++ b/.idea/runConfigurations/Bootstrap.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/.idea/runConfigurations/Bootstrap__No_Plugins_.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadBulkStress.java, +                .put("index.refresh_interval", "-1"), +                .put("index.merge.async", true), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.merge.policy.EnableMergePolicy;, +        // We can't do prepareCommit here, since we rely on the the segment version for the translog version, +, +        // only do it if we don't have an async merging going on, otherwise, we know that we won't do any, +        // merge operation, +            if (indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                ((EnableMergePolicy) indexWriter.getMergePolicy()).enableMerge();, +            }, +        } finally {, +            // don't allow merge when committing under write lock, +            if (indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                ((EnableMergePolicy) indexWriter.getMergePolicy()).disableMerge();, +            }, +        // we refresh anyhow before..., +                if (indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                    ((EnableMergePolicy) indexWriter.getMergePolicy()).enableMerge();, +                    indexWriter.expungeDeletes(false);, +                } else if (optimize.maxNumSegments() <= 0) {, +                    indexWriter.maybeMerge();, +                    indexWriter.optimize(optimize.maxNumSegments(), false);, +                if (indexWriter != null && indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                    ((EnableMergePolicy) indexWriter.getMergePolicy()).disableMerge();, +                }, +        // wait for the merges outside of the read lock, +        if (optimize.waitForMerge()) {, +            indexWriter.waitForMerges();, +        }, +        // once we did the optimization, we are "dirty" since we removed deletes potentially which, +        // affects TermEnum, +        dirty = true;, +++ b/.idea/runConfigurations/Bootstrap.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/.idea/runConfigurations/Bootstrap__No_Plugins_.xml, +    <option name="VM_PARAMETERS" value="-server -Xmx1g -Des-foreground=yes -XX:+UseParNewGC -XX:+UseConcMarkSweepGC" />, +++ b/modules/benchmark/micro/src/main/java/org/elasticsearch/benchmark/stress/SingleThreadBulkStress.java, +                .put("index.refresh_interval", "-1"), +                .put("index.merge.async", true), +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +import org.elasticsearch.index.merge.policy.EnableMergePolicy;, +        // We can't do prepareCommit here, since we rely on the the segment version for the translog version, +, +        // only do it if we don't have an async merging going on, otherwise, we know that we won't do any, +        // merge operation, +            if (indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                ((EnableMergePolicy) indexWriter.getMergePolicy()).enableMerge();, +            }, +        } finally {, +            // don't allow merge when committing under write lock, +            if (indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                ((EnableMergePolicy) indexWriter.getMergePolicy()).disableMerge();, +            }, +        // we refresh anyhow before..., +                if (indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                    ((EnableMergePolicy) indexWriter.getMergePolicy()).enableMerge();, +                    indexWriter.expungeDeletes(false);, +                } else if (optimize.maxNumSegments() <= 0) {, +                    indexWriter.maybeMerge();, +                    indexWriter.optimize(optimize.maxNumSegments(), false);, +                if (indexWriter != null && indexWriter.getMergePolicy() instanceof EnableMergePolicy) {, +                    ((EnableMergePolicy) indexWriter.getMergePolicy()).disableMerge();, +                }, +        // wait for the merges outside of the read lock, +        if (optimize.waitForMerge()) {, +            indexWriter.waitForMerges();, +        }, +        // once we did the optimization, we are "dirty" since we removed deletes potentially which, +        // affects TermEnum, +        dirty = true;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/merge/policy/EnableMergePolicy.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0]