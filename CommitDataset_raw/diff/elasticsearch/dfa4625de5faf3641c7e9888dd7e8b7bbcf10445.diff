[+++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateFormat.java, +            return (date) -> DateFormatters.from(DateFormatter.forPattern("iso8601").parse(date)).withZoneSameInstant(timezone);, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateFormat.java, +            return (date) -> DateFormatters.from(DateFormatter.forPattern("iso8601").parse(date)).withZoneSameInstant(timezone);, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +    /**, +     * Returns a ISO 8601 compatible date time formatter and parser., +     * This is not fully compatible to the existing spec, which would require far more edge cases, but merely compatible with the, +     * existing joda time ISO data formater, +     */, +    private static final DateFormatter ISO_8601 = new JavaDateFormatter("iso8601", STRICT_DATE_OPTIONAL_TIME_PRINTER,, +        new DateTimeFormatterBuilder(), +            .append(STRICT_YEAR_MONTH_DAY_FORMATTER), +            .optionalStart(), +            .appendLiteral('T'), +            .optionalStart(), +            .appendValue(HOUR_OF_DAY, 2, 2, SignStyle.NOT_NEGATIVE), +            .optionalStart(), +            .appendLiteral(':'), +            .appendValue(MINUTE_OF_HOUR, 2, 2, SignStyle.NOT_NEGATIVE), +            .optionalStart(), +            .appendLiteral(':'), +            .appendValue(SECOND_OF_MINUTE, 2, 2, SignStyle.NOT_NEGATIVE), +            .optionalStart(), +            .appendFraction(NANO_OF_SECOND, 1, 9, true), +            .optionalEnd(), +            .optionalStart(), +            .appendLiteral(","), +            .appendFraction(NANO_OF_SECOND, 1, 9, false), +            .optionalEnd(), +            .optionalEnd(), +            .optionalStart(), +            .appendZoneOrOffsetId(), +            .optionalEnd(), +            .optionalStart(), +            .append(TIME_ZONE_FORMATTER_NO_COLON), +            .optionalEnd(), +            .optionalEnd(), +            .optionalEnd(), +            .optionalEnd(), +            .toFormatter(Locale.ROOT));, +, +        if ("iso8601".equals(input)) {, +            return ISO_8601;, +        } else if ("basicDate".equals(input) || "basic_date".equals(input)) {, +++ b/modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/DateFormat.java, +            return (date) -> DateFormatters.from(DateFormatter.forPattern("iso8601").parse(date)).withZoneSameInstant(timezone);, +++ b/server/src/main/java/org/elasticsearch/common/time/DateFormatters.java, +    /**, +     * Returns a ISO 8601 compatible date time formatter and parser., +     * This is not fully compatible to the existing spec, which would require far more edge cases, but merely compatible with the, +     * existing joda time ISO data formater, +     */, +    private static final DateFormatter ISO_8601 = new JavaDateFormatter("iso8601", STRICT_DATE_OPTIONAL_TIME_PRINTER,, +        new DateTimeFormatterBuilder(), +            .append(STRICT_YEAR_MONTH_DAY_FORMATTER), +            .optionalStart(), +            .appendLiteral('T'), +            .optionalStart(), +            .appendValue(HOUR_OF_DAY, 2, 2, SignStyle.NOT_NEGATIVE), +            .optionalStart(), +            .appendLiteral(':'), +            .appendValue(MINUTE_OF_HOUR, 2, 2, SignStyle.NOT_NEGATIVE), +            .optionalStart(), +            .appendLiteral(':'), +            .appendValue(SECOND_OF_MINUTE, 2, 2, SignStyle.NOT_NEGATIVE), +            .optionalStart(), +            .appendFraction(NANO_OF_SECOND, 1, 9, true), +            .optionalEnd(), +            .optionalStart(), +            .appendLiteral(","), +            .appendFraction(NANO_OF_SECOND, 1, 9, false), +            .optionalEnd(), +            .optionalEnd(), +            .optionalStart(), +            .appendZoneOrOffsetId(), +            .optionalEnd(), +            .optionalStart(), +            .append(TIME_ZONE_FORMATTER_NO_COLON), +            .optionalEnd(), +            .optionalEnd(), +            .optionalEnd(), +            .optionalEnd(), +            .toFormatter(Locale.ROOT));, +, +        if ("iso8601".equals(input)) {, +            return ISO_8601;, +        } else if ("basicDate".equals(input) || "basic_date".equals(input)) {, +++ b/server/src/test/java/org/elasticsearch/common/joda/JavaJodaTimeDuellingTests.java, +import org.joda.time.format.ISODateTimeFormat;, +    // the iso 8601 parser is available via Joda.forPattern(), so we have to test this slightly differently, +    public void testIso8601Parsers() {, +        String format = "iso8601";, +        org.joda.time.format.DateTimeFormatter isoFormatter = ISODateTimeFormat.dateTimeParser().withZone(DateTimeZone.UTC);, +        JodaDateFormatter jodaFormatter = new JodaDateFormatter(format, isoFormatter, isoFormatter);, +        DateFormatter javaFormatter = DateFormatter.forPattern(format);, +, +        assertSameDate("2018-10-10T", format, jodaFormatter, javaFormatter);, +        assertSameDate("2018-10-10T10", format, jodaFormatter, javaFormatter);, +        assertSameDate("2018-10-10T10:11", format, jodaFormatter, javaFormatter);]