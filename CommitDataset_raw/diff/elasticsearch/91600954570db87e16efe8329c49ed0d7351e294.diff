[+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.searchafter.SearchAfterBuilder;, +     * Set the sort values that indicates which docs this request should "search after"., +     *, +     */, +    public SearchRequestBuilder searchAfter(Object[] values) {, +        sourceBuilder().searchAfter(values);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.searchafter.SearchAfterBuilder;, +     * Set the sort values that indicates which docs this request should "search after"., +     *, +     */, +    public SearchRequestBuilder searchAfter(Object[] values) {, +        sourceBuilder().searchAfter(values);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +import org.apache.lucene.search.FieldDoc;, +    public SearchContext searchAfter(FieldDoc searchAfter) {, +        throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public FieldDoc searchAfter() {, +        return null;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.searchafter.SearchAfterBuilder;, +     * Set the sort values that indicates which docs this request should "search after"., +     *, +     */, +    public SearchRequestBuilder searchAfter(Object[] values) {, +        sourceBuilder().searchAfter(values);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +import org.apache.lucene.search.FieldDoc;, +    public SearchContext searchAfter(FieldDoc searchAfter) {, +        throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public FieldDoc searchAfter() {, +        return null;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.apache.lucene.search.FieldDoc;, +import org.elasticsearch.search.searchafter.SearchAfterBuilder;, +        if (source.searchAfter() != null && source.searchAfter().length > 0) {, +            if (context.scrollContext() != null) {, +                throw new SearchContextException(context, "`search_after` cannot be used in a scroll context.");, +            }, +            if (context.from() > 0) {, +                throw new SearchContextException(context, "`from` parameter must be set to 0 when `search_after` is used.");, +            }, +            FieldDoc fieldDoc = SearchAfterBuilder.buildFieldDoc(context.sort(), source.searchAfter());, +            context.searchAfter(fieldDoc);, +        }, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java, +import org.elasticsearch.search.searchafter.SearchAfterBuilder;, +     * Set the sort values that indicates which docs this request should "search after"., +     *, +     */, +    public SearchRequestBuilder searchAfter(Object[] values) {, +        sourceBuilder().searchAfter(values);, +        return this;, +    }, +, +    /**, +++ b/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java, +import org.apache.lucene.search.FieldDoc;, +    public SearchContext searchAfter(FieldDoc searchAfter) {, +        throw new UnsupportedOperationException();, +    }, +, +    @Override, +    public FieldDoc searchAfter() {, +        return null;, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/search/SearchService.java, +import org.apache.lucene.search.FieldDoc;, +import org.elasticsearch.search.searchafter.SearchAfterBuilder;, +        if (source.searchAfter() != null && source.searchAfter().length > 0) {, +            if (context.scrollContext() != null) {, +                throw new SearchContextException(context, "`search_after` cannot be used in a scroll context.");, +            }]