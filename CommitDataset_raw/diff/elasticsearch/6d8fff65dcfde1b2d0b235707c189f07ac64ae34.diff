[+++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +            if (scoreFunction == null) {, +                throw new ElasticsearchParseException("function_score: One entry in functions list is missing a function.");, +            }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +        if (scoreFunctionBuilder == null) {, +            throw new ElasticsearchIllegalArgumentException("function_score: function must not be null");, +        }, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryParser.java, +            if (scoreFunction == null) {, +                throw new ElasticsearchParseException("function_score: One entry in functions list is missing a function.");, +            }, +++ b/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreTests.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.action.search.ShardSearchFailure;, +import org.elasticsearch.index.query.FilterBuilders;, +import java.io.IOException;, +    // issue https://github.com/elasticsearch/elasticsearch/issues/6292, +    @Test, +    public void testMissingFunctionThrowsElasticsearchParseException() throws IOException {, +, +        // example from issue https://github.com/elasticsearch/elasticsearch/issues/6292, +        String doc = "{\n" +, +                "  \"text\": \"baseball bats\"\n" +, +                "}\n";, +, +        String query = "{\n" +, +                "    \"function_score\": {\n" +, +                "      \"score_mode\": \"sum\",\n" +, +                "      \"boost_mode\": \"replace\",\n" +, +                "      \"functions\": [\n" +, +                "        {\n" +, +                "          \"filter\": {\n" +, +                "            \"term\": {\n" +, +                "              \"text\": \"baseball\"\n" +, +                "            }\n" +, +                "          }\n" +, +                "        }\n" +, +                "      ]\n" +, +                "    }\n" +, +                "}\n";, +, +        client().prepareIndex("t", "test").setSource(doc).get();, +        refresh();, +        ensureYellow("t");, +        try {, +            client().search(, +                    searchRequest().source(, +                            searchSource().query(query))).actionGet();, +            fail("Should fail with SearchPhaseExecutionException");, +        } catch (SearchPhaseExecutionException failure) {, +            assertTrue(failure.getMessage().contains("SearchParseException"));, +            assertFalse(failure.getMessage().contains("NullPointerException"));, +        }, +, +        query = "{\n" +, +                "    \"function_score\": {\n" +, +                "      \"score_mode\": \"sum\",\n" +, +                "      \"boost_mode\": \"replace\",\n" +, +                "      \"functions\": [\n" +, +                "        {\n" +, +                "          \"filter\": {\n" +, +                "            \"term\": {\n" +, +                "              \"text\": \"baseball\"\n" +, +                "            }\n" +, +                "          },\n" +, +                "          \"boost_factor\": 2\n" +, +                "        },\n" +, +                "        {\n" +, +                "          \"filter\": {\n" +]