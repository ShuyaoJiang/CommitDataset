[+++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private boolean cacheable = true;, +        this.cacheable = false;, +     * Returns <code>true</code> iff the result of the processed search request is cacheable. Otherwise <code>false</code>, +    public final boolean isCacheable() {, +        return cacheable;, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private boolean cacheable = true;, +        this.cacheable = false;, +     * Returns <code>true</code> iff the result of the processed search request is cacheable. Otherwise <code>false</code>, +    public final boolean isCacheable() {, +        return cacheable;, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +        if (context.getQueryShardContext().isCacheable() == false) {, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private boolean cacheable = true;, +        this.cacheable = false;, +     * Returns <code>true</code> iff the result of the processed search request is cacheable. Otherwise <code>false</code>, +    public final boolean isCacheable() {, +        return cacheable;, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +        if (context.getQueryShardContext().isCacheable() == false) {, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +            assert searchContext.getQueryShardContext().isCacheable();, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private boolean cacheable = true;, +        this.cacheable = false;, +     * Returns <code>true</code> iff the result of the processed search request is cacheable. Otherwise <code>false</code>, +    public final boolean isCacheable() {, +        return cacheable;, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +        if (context.getQueryShardContext().isCacheable() == false) {, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +            assert searchContext.getQueryShardContext().isCacheable();, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocateUnassignedDecisionTests.java, +        List<AllocationStatus> cacheableStatuses = Arrays.asList(AllocationStatus.DECIDERS_NO, AllocationStatus.DECIDERS_THROTTLED,, +        for (AllocationStatus allocationStatus : cacheableStatuses) {, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private boolean cacheable = true;, +        this.cacheable = false;, +     * Returns <code>true</code> iff the result of the processed search request is cacheable. Otherwise <code>false</code>, +    public final boolean isCacheable() {, +        return cacheable;, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +        if (context.getQueryShardContext().isCacheable() == false) {, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +            assert searchContext.getQueryShardContext().isCacheable();, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocateUnassignedDecisionTests.java, +        List<AllocationStatus> cacheableStatuses = Arrays.asList(AllocationStatus.DECIDERS_NO, AllocationStatus.DECIDERS_THROTTLED,, +        for (AllocationStatus allocationStatus : cacheableStatuses) {, +++ b/server/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java, +    protected boolean isCacheable(MoreLikeThisQueryBuilder queryBuilder) {, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private boolean cacheable = true;, +        this.cacheable = false;, +     * Returns <code>true</code> iff the result of the processed search request is cacheable. Otherwise <code>false</code>, +    public final boolean isCacheable() {, +        return cacheable;, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +        if (context.getQueryShardContext().isCacheable() == false) {, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +            assert searchContext.getQueryShardContext().isCacheable();, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocateUnassignedDecisionTests.java, +        List<AllocationStatus> cacheableStatuses = Arrays.asList(AllocationStatus.DECIDERS_NO, AllocationStatus.DECIDERS_THROTTLED,, +        for (AllocationStatus allocationStatus : cacheableStatuses) {, +++ b/server/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java, +    protected boolean isCacheable(MoreLikeThisQueryBuilder queryBuilder) {, +++ b/server/src/test/java/org/elasticsearch/index/query/ScriptQueryBuilderTests.java, +    protected boolean isCacheable(ScriptQueryBuilder queryBuilder) {, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java, +    protected boolean isCacheable(PercolateQueryBuilder queryBuilder) {, +++ b/server/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    private boolean cacheable = true;, +        this.cacheable = false;, +     * Returns <code>true</code> iff the result of the processed search request is cacheable. Otherwise <code>false</code>, +    public final boolean isCacheable() {, +        return cacheable;, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +        if (context.getQueryShardContext().isCacheable() == false) {, +++ b/server/src/main/java/org/elasticsearch/search/SearchService.java, +            assert searchContext.getQueryShardContext().isCacheable();, +++ b/server/src/test/java/org/elasticsearch/cluster/routing/allocation/AllocateUnassignedDecisionTests.java, +        List<AllocationStatus> cacheableStatuses = Arrays.asList(AllocationStatus.DECIDERS_NO, AllocationStatus.DECIDERS_THROTTLED,, +        for (AllocationStatus allocationStatus : cacheableStatuses) {, +++ b/server/src/test/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilderTests.java, +    protected boolean isCacheable(MoreLikeThisQueryBuilder queryBuilder) {]