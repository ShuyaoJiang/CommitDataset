[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import java.util.function.Supplier;, +, +        super(NoopBulkAction.NAME, transportService, actionFilters, (Supplier<BulkRequest>) BulkRequest::new);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import java.util.function.Supplier;, +, +        super(NoopBulkAction.NAME, transportService, actionFilters, (Supplier<BulkRequest>) BulkRequest::new);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +                        if (MapperService.SINGLE_MAPPING_NAME.equals(action.type()) == false) {, +                    }, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/bulk/TransportNoopBulkAction.java, +import java.util.function.Supplier;, +, +        super(NoopBulkAction.NAME, transportService, actionFilters, (Supplier<BulkRequest>) BulkRequest::new);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +                        if (MapperService.SINGLE_MAPPING_NAME.equals(action.type()) == false) {, +                    }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/BulkProcessorIT.java, +import org.elasticsearch.index.mapper.MapperService;, +import org.elasticsearch.rest.action.document.RestBulkAction;, +                (request, bulkListener) -> highLevelClient().bulkAsync(request, RequestOptions.DEFAULT,, +                       bulkListener), listener);, +    }, +    , +    private static BulkProcessor.Builder initBulkProcessorBuilderUsingTypes(BulkProcessor.Listener listener) {, +        return BulkProcessor.builder(, +                (request, bulkListener) -> highLevelClient().bulkAsync(request, expectWarnings(RestBulkAction.TYPES_DEPRECATION_MESSAGE),, +                       bulkListener), listener);, +        final String customType = "testType";, +        final String ignoredType = "ignoredType";, +        {, +            final CountDownLatch latch = new CountDownLatch(1);, +            BulkProcessorTestListener listener = new BulkProcessorTestListener(latch);, +            //Check that untyped document additions inherit the global type, +            String globalType = customType;, +            String localType = null;, +            try (BulkProcessor processor = initBulkProcessorBuilderUsingTypes(listener), +                    .setGlobalType(globalType), +                indexDocs(processor, numDocs, null, localType, "test", globalType, "pipeline_id");, +                assertResponseItems(listener.bulkItems, numDocs, globalType);, +                assertThat(hits, everyItem(Matchers.allOf(hasIndex("test"), hasType(globalType))));, +, +        }, +        {, +            //Check that typed document additions don't inherit the global type, +            String globalType = ignoredType;, +            String localType = customType;, +            final CountDownLatch latch = new CountDownLatch(1);, +            BulkProcessorTestListener listener = new BulkProcessorTestListener(latch);, +            try (BulkProcessor processor = initBulkProcessorBuilderUsingTypes(listener), +                    //let's make sure that the bulk action limit trips, one single execution will index all the documents, +                    .setConcurrentRequests(randomIntBetween(0, 1)).setBulkActions(numDocs), +                    .setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(1, ByteSizeUnit.GB)), +                    .setGlobalIndex("test"), +                    .setGlobalType(globalType), +                    .setGlobalRouting("routing"), +                    .setGlobalPipeline("pipeline_id"), +                    .build()) {, +                indexDocs(processor, numDocs, null, localType, "test", globalType, "pipeline_id");, +                latch.await();, +    , +                assertThat(listener.beforeCounts.get(), equalTo(1));, +                assertThat(listener.afterCounts.get(), equalTo(1));, +                assertThat(listener.bulkFailures.size(), equalTo(0));, +                assertResponseItems(listener.bulkItems, numDocs, localType);, +    , +                Iterable<SearchHit> hits = searchAll(new SearchRequest("test").routing("routing"));, +    , +                assertThat(hits, everyItem(hasProperty(fieldFromSource("fieldNameXYZ"), equalTo("valueXYZ"))));, +                assertThat(hits, everyItem(Matchers.allOf(hasIndex("test"), hasType(localType))));, +                assertThat(hits, containsInAnyOrder(expectedIds(numDocs)));, +            }, +        }, +        {, +            //Check that untyped document additions and untyped global inherit the established custom type, +            // (the custom document type introduced to the mapping by the earlier code in this test) , +            String globalType = null;, +            String localType = null;, +            final CountDownLatch latch = new CountDownLatch(1);, +            BulkProcessorTestListener listener = new BulkProcessorTestListener(latch);, +            try (BulkProcessor processor = initBulkProcessorBuilder(listener), +                    //let's make sure that the bulk action limit trips, one single execution will index all the documents, +                    .setConcurrentRequests(randomIntBetween(0, 1)).setBulkActions(numDocs), +                    .setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(1, ByteSizeUnit.GB)), +                    .setGlobalIndex("test"), +                    .setGlobalType(globalType), +                    .setGlobalRouting("routing"), +                    .setGlobalPipeline("pipeline_id"), +                    .build()) {, +                indexDocs(processor, numDocs, null, localType, "test", globalType, "pipeline_id");, +                latch.await();, +    , +                assertThat(listener.beforeCounts.get(), equalTo(1));, +                assertThat(listener.afterCounts.get(), equalTo(1));, +                assertThat(listener.bulkFailures.size(), equalTo(0));, +                assertResponseItems(listener.bulkItems, numDocs, MapperService.SINGLE_MAPPING_NAME);, +    , +                Iterable<SearchHit> hits = searchAll(new SearchRequest("test").routing("routing"));, +    ]