[+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +    // PercolateQuery emits this score if no 'query' is defined in the percolate request, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +    // PercolateQuery emits this score if no 'query' is defined in the percolate request, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.index.query.PercolateQueryBuilder;, +        PercolateQueryBuilder percolateQueryBuilder =, +                new PercolateQueryBuilder("query", percolateRequest.documentType(), documentSource);, +                boolQueryBuilder.filter(percolateQueryBuilder);, +            searchSource.field("query", new ConstantScoreQueryBuilder(percolateQueryBuilder).boost(0f));, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +    // PercolateQuery emits this score if no 'query' is defined in the percolate request, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.index.query.PercolateQueryBuilder;, +        PercolateQueryBuilder percolateQueryBuilder =, +                new PercolateQueryBuilder("query", percolateRequest.documentType(), documentSource);, +                boolQueryBuilder.filter(percolateQueryBuilder);, +            searchSource.field("query", new ConstantScoreQueryBuilder(percolateQueryBuilder).boost(0f));, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorHighlightSubFetchPhase.java, +import org.elasticsearch.index.query.PercolateQuery;, +// Highlighting in the case of the percolate query is a bit different, because the PercolateQuery itself doesn't get highlighted,, +// but the source of the PercolateQuery gets highlighted by each hit with type '.percolator' (percolator queries)., +        PercolateQuery percolateQuery = locatePercolatorQuery(context.query());, +        if (percolateQuery == null) {, +        IndexSearcher percolatorIndexSearcher = percolateQuery.getPercolatorIndexSearcher();, +                createSubSearchContext(context, percolatorLeafReaderContext, percolateQuery.getDocumentSource());, +                        new InternalSearchHit(0, "unknown", new Text(percolateQuery.getDocumentType()), Collections.emptyMap()),, +    static PercolateQuery locatePercolatorQuery(Query query) {, +        if (query instanceof PercolateQuery) {, +            return (PercolateQuery) query;, +                PercolateQuery result = locatePercolatorQuery(clause.getQuery());, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +    // PercolateQuery emits this score if no 'query' is defined in the percolate request, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.index.query.PercolateQueryBuilder;, +        PercolateQueryBuilder percolateQueryBuilder =, +                new PercolateQueryBuilder("query", percolateRequest.documentType(), documentSource);, +                boolQueryBuilder.filter(percolateQueryBuilder);, +            searchSource.field("query", new ConstantScoreQueryBuilder(percolateQueryBuilder).boost(0f));, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorHighlightSubFetchPhase.java, +import org.elasticsearch.index.query.PercolateQuery;, +// Highlighting in the case of the percolate query is a bit different, because the PercolateQuery itself doesn't get highlighted,, +// but the source of the PercolateQuery gets highlighted by each hit with type '.percolator' (percolator queries)., +        PercolateQuery percolateQuery = locatePercolatorQuery(context.query());, +        if (percolateQuery == null) {, +        IndexSearcher percolatorIndexSearcher = percolateQuery.getPercolatorIndexSearcher();, +                createSubSearchContext(context, percolatorLeafReaderContext, percolateQuery.getDocumentSource());, +                        new InternalSearchHit(0, "unknown", new Text(percolateQuery.getDocumentType()), Collections.emptyMap()),, +    static PercolateQuery locatePercolatorQuery(Query query) {, +        if (query instanceof PercolateQuery) {, +            return (PercolateQuery) query;, +                PercolateQuery result = locatePercolatorQuery(clause.getQuery());, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueryCache.java, +import org.elasticsearch.index.query.PercolateQuery;, +        implements Closeable, LeafReader.CoreClosedListener, PercolateQuery.QueryRegistry {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java, +    // PercolateQuery emits this score if no 'query' is defined in the percolate request, +++ b/core/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java, +import org.elasticsearch.index.query.PercolateQueryBuilder;, +        PercolateQueryBuilder percolateQueryBuilder =, +                new PercolateQueryBuilder("query", percolateRequest.documentType(), documentSource);, +                boolQueryBuilder.filter(percolateQueryBuilder);, +            searchSource.field("query", new ConstantScoreQueryBuilder(percolateQueryBuilder).boost(0f));, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorHighlightSubFetchPhase.java, +import org.elasticsearch.index.query.PercolateQuery;, +// Highlighting in the case of the percolate query is a bit different, because the PercolateQuery itself doesn't get highlighted,, +// but the source of the PercolateQuery gets highlighted by each hit with type '.percolator' (percolator queries)., +        PercolateQuery percolateQuery = locatePercolatorQuery(context.query());, +        if (percolateQuery == null) {, +        IndexSearcher percolatorIndexSearcher = percolateQuery.getPercolatorIndexSearcher();, +                createSubSearchContext(context, percolatorLeafReaderContext, percolateQuery.getDocumentSource());, +                        new InternalSearchHit(0, "unknown", new Text(percolateQuery.getDocumentType()), Collections.emptyMap()),, +    static PercolateQuery locatePercolatorQuery(Query query) {, +        if (query instanceof PercolateQuery) {, +            return (PercolateQuery) query;, +                PercolateQuery result = locatePercolatorQuery(clause.getQuery());, +++ b/core/src/main/java/org/elasticsearch/index/percolator/PercolatorQueryCache.java, +import org.elasticsearch.index.query.PercolateQuery;, +        implements Closeable, LeafReader.CoreClosedListener, PercolateQuery.QueryRegistry {, +++ b/core/src/main/java/org/elasticsearch/index/query/PercolateQuery.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.query;]