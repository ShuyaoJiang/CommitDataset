[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.elasticsearch.gradle.testclusters.ElasticsearchCluster, +                ElasticsearchCluster cluster = project.testClusters."${name}", +                runner.systemProperty('tests.rest.cluster', {cluster.allHttpSocketURI.join(",") }), +                runner.systemProperty('tests.config.dir', {cluster.singleNode().getConfigDir()}), +                runner.systemProperty('tests.cluster', {cluster.transportPortURI}), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestIntegTestTask.groovy, +import org.elasticsearch.gradle.testclusters.ElasticsearchCluster, +                ElasticsearchCluster cluster = project.testClusters."${name}", +                runner.systemProperty('tests.rest.cluster', {cluster.allHttpSocketURI.join(",") }), +                runner.systemProperty('tests.config.dir', {cluster.singleNode().getConfigDir()}), +                runner.systemProperty('tests.cluster', {cluster.transportPortURI}), +++ b/buildSrc/src/main/java/org/elasticsearch/gradle/testclusters/ElasticsearchCluster.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.gradle.testclusters;, +, +import org.elasticsearch.GradleServicesAdapter;, +import org.elasticsearch.gradle.Distribution;, +import org.elasticsearch.gradle.Version;, +import org.gradle.api.NamedDomainObjectContainer;, +import org.gradle.api.Project;, +import org.gradle.api.logging.Logger;, +import org.gradle.api.logging.Logging;, +, +import java.io.BufferedReader;, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStreamReader;, +import java.io.UncheckedIOException;, +import java.net.HttpURLConnection;, +import java.net.URI;, +import java.net.URL;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Objects;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.function.BiConsumer;, +import java.util.function.Predicate;, +import java.util.function.Supplier;, +import java.util.stream.Collectors;, +, +public class ElasticsearchCluster implements TestClusterConfiguration {, +, +    private static final Logger LOGGER = Logging.getLogger(ElasticsearchNode.class);, +    private static final int CLUSTER_UP_TIMEOUT = 40;, +    private static final TimeUnit CLUSTER_UP_TIMEOUT_UNIT = TimeUnit.SECONDS;, +, +    private final AtomicBoolean configurationFrozen = new AtomicBoolean(false);, +    private final String path;, +    private final String clusterName;, +    private final NamedDomainObjectContainer<ElasticsearchNode> nodes;, +    private final File workingDirBase;, +    private final File artifactsExtractDir;, +    private final LinkedHashMap<String, Predicate<TestClusterConfiguration>> waitConditions = new LinkedHashMap<>();, +    private final GradleServicesAdapter services;, +, +    public ElasticsearchCluster(String path, String clusterName, Project project, File artifactsExtractDir, File workingDirBase) {, +        this.path = path;, +        this.clusterName = clusterName;, +        this.workingDirBase = workingDirBase;, +        this.artifactsExtractDir = artifactsExtractDir;, +        this.services = GradleServicesAdapter.getInstance(project);, +        this.nodes = project.container(ElasticsearchNode.class);, +        this.nodes.add(, +            new ElasticsearchNode(, +                path, clusterName + "-1",, +                services, artifactsExtractDir, workingDirBase, +            ), +        );, +    }, +, +    public void setNumberOfNodes(int numberOfNodes) {, +        checkFrozen();, +, +        if (numberOfNodes < 1) {, +            throw new IllegalArgumentException("Number of nodes should be >= 1 but was " + numberOfNodes + " for " + this);, +        }, +, +        if (numberOfNodes <= nodes.size()) {, +            throw new IllegalArgumentException(]