[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.util.CloseableThreadLocal;, +    private CloseableThreadLocal<ParseContext> cache = new CloseableThreadLocal<ParseContext>() {, +        cache.close();, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.util.CloseableThreadLocal;, +    private CloseableThreadLocal<ParseContext> cache = new CloseableThreadLocal<ParseContext>() {, +        cache.close();, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +import org.apache.lucene.util.CloseableThreadLocal;, +    private CloseableThreadLocal<QueryParseContext> cache = new CloseableThreadLocal<QueryParseContext>() {, +        cache.close();, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +import org.apache.lucene.util.CloseableThreadLocal;, +    private CloseableThreadLocal<ParseContext> cache = new CloseableThreadLocal<ParseContext>() {, +        cache.close();, +++ b/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java, +import org.apache.lucene.util.CloseableThreadLocal;, +    private CloseableThreadLocal<QueryParseContext> cache = new CloseableThreadLocal<QueryParseContext>() {, +        cache.close();, +++ b/src/test/java/org/elasticsearch/test/integration/indices/leaks/IndicesLeaksTests.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.integration.indices.leaks;, +, +import org.elasticsearch.common.inject.Injector;, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.index.mapper.DocumentMapper;, +import org.elasticsearch.index.query.QueryBuilders;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.index.shard.service.IndexShard;, +import org.elasticsearch.indices.IndicesService;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.node.internal.InternalNode;, +import org.elasticsearch.test.integration.AbstractNodesTests;, +import org.testng.annotations.AfterMethod;, +import org.testng.annotations.Test;, +, +import java.lang.ref.WeakReference;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.Matchers.nullValue;, +, +/**, + */, +@Test, +public class IndicesLeaksTests extends AbstractNodesTests {, +, +, +    @AfterMethod, +    public void closeNodes() {, +        closeAllNodes();, +    }, +, +    @SuppressWarnings({"ConstantConditions", "unchecked"}), +    @Test, +    public void testIndexShardLifecycleLeak() throws Exception {, +        Node node = startNode("node1");, +, +        node.client().admin().indices().prepareCreate("test"), +                .setSettings(ImmutableSettings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)), +                .execute().actionGet();, +, +        node.client().admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();, +, +        IndicesService indicesService = ((InternalNode) node).injector().getInstance(IndicesService.class);, +        IndexService indexService = indicesService.indexServiceSafe("test");, +        Injector indexInjector = indexService.injector();, +        IndexShard shard = indexService.shardSafe(0);, +        Injector shardInjector = indexService.shardInjector(0);, +, +        performCommonOperations(node);, +, +        List<WeakReference> indexReferences = new ArrayList<WeakReference>();, +        List<WeakReference> shardReferences = new ArrayList<WeakReference>();, +, +        // TODO if we could iterate over the already created classes on the injector, we can just add them here to the list, +        // for now, we simple add some classes that make sense, +, +        // add index references, +        indexReferences.add(new WeakReference(indexService));]