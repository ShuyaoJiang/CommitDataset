[+++ b/docs/reference/index-modules/translog.asciidoc, +Each shard has a transaction log or write ahead log associated with it., +It allows to guarantee that when an index/delete operation occurs, it is, +applied atomically, while not "committing" the internal Lucene index for, +each request. A flush ("commit") still happens based on several, +parameters:, +`index.translog.flush_threshold_size`:: , +, +Once the translog hits this size, a flush will happen. Defaults to `512mb`., +, +The period with no flush happening to force a flush. Defaults to `30m`., +How often to check if a flush is needed, randomized, +between the interval value and 2x the interval value. Defaults to `5s`., +How often the translog is ++fsync++ed to disk. Defaults to `5s`., +Note: these parameters can be updated at runtime using the Index, +Settings Update API (for example, these number can be increased when, +executing bulk updates to support higher TPS), +++ b/docs/reference/index-modules/translog.asciidoc, +Each shard has a transaction log or write ahead log associated with it., +It allows to guarantee that when an index/delete operation occurs, it is, +applied atomically, while not "committing" the internal Lucene index for, +each request. A flush ("commit") still happens based on several, +parameters:, +`index.translog.flush_threshold_size`:: , +, +Once the translog hits this size, a flush will happen. Defaults to `512mb`., +, +The period with no flush happening to force a flush. Defaults to `30m`., +How often to check if a flush is needed, randomized, +between the interval value and 2x the interval value. Defaults to `5s`., +How often the translog is ++fsync++ed to disk. Defaults to `5s`., +Note: these parameters can be updated at runtime using the Index, +Settings Update API (for example, these number can be increased when, +executing bulk updates to support higher TPS), +++ b/src/main/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.apache.lucene.spatial.prefix;, +, +import com.spatial4j.core.shape.Point;, +import com.spatial4j.core.shape.Shape;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.spatial.prefix.tree.Cell;, +import org.apache.lucene.spatial.prefix.tree.CellIterator;, +import org.apache.lucene.spatial.prefix.tree.LegacyCell;, +import org.apache.lucene.spatial.prefix.tree.PackedQuadPrefixTree;, +import org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree;, +import org.apache.lucene.spatial.query.SpatialArgs;, +import org.apache.lucene.spatial.query.SpatialOperation;, +import org.apache.lucene.spatial.query.UnsupportedSpatialOperation;, +, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +, +/**, + * A {@link PrefixTreeStrategy} which uses {@link AbstractVisitingPrefixTreeFilter}., + * This strategy has support for searching non-point shapes (note: not tested)., + * Even a query shape with distErrPct=0 (fully precise to the grid) should have, + * good performance for typical data, unless there is a lot of indexed data, + * coincident with the shape's edge., + *, + * @lucene.experimental, + *, + * NOTE: Will be removed upon commit of LUCENE-6422, + */, +public class RecursivePrefixTreeStrategy extends PrefixTreeStrategy {, +  /* Future potential optimizations:, +, +    Each shape.relate(otherShape) result could be cached since much of the same relations will be invoked when, +    multiple segments are involved. Do this for "complex" shapes, not cheap ones, and don't cache when disjoint to, +    bbox because it's a cheap calc. This is one advantage TermQueryPrefixTreeStrategy has over RPT., +, +   */, +, +  protected int prefixGridScanLevel;, +, +  //Formerly known as simplifyIndexedCells. Eventually will be removed. Only compatible with RPT, +  // and a LegacyPrefixTree., +  protected boolean pruneLeafyBranches = true;, +, +  protected boolean multiOverlappingIndexedShapes = true;, +]