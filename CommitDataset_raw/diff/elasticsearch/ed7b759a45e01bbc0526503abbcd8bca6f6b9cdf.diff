[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.metrics.max.MaxAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.min.MinAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.StatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.sum.SumAggregatorBuilder;, +        registerAggregation(SumAggregatorBuilder::new, new SumParser(), SumAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MinAggregatorBuilder::new, new MinParser(), MinAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MaxAggregatorBuilder::new, new MaxParser(), MaxAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(StatsAggregatorBuilder::new, new StatsParser(), StatsAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(ExtendedStatsAggregatorBuilder::new, new ExtendedStatsParser(),, +        ExtendedStatsAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.metrics.max.MaxAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.min.MinAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.StatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.sum.SumAggregatorBuilder;, +        registerAggregation(SumAggregatorBuilder::new, new SumParser(), SumAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MinAggregatorBuilder::new, new MinParser(), MinAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MaxAggregatorBuilder::new, new MaxParser(), MaxAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(StatsAggregatorBuilder::new, new StatsParser(), StatsAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(ExtendedStatsAggregatorBuilder::new, new ExtendedStatsParser(),, +        ExtendedStatsAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregatorBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.search.aggregations.AggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +    public static final String NAME = InternalMax.TYPE.name();, +    public static final ParseField AGGREGATION_NAME_FIELD = new ParseField(NAME);, +    /**, +     * Read from a stream., +     */, +    public MaxAggregatorBuilder(StreamInput in) throws IOException {, +        super(in, InternalMax.TYPE, ValuesSourceType.NUMERIC, ValueType.NUMERIC);, +    }, +, +    @Override, +    protected void innerWriteTo(StreamOutput out) {, +        // Do nothing, no extra state to write to stream, +    }, +, +    @Override, +    protected boolean usesNewStyleSerialization() {, +        return true;, +    }, +, +    @Override, +    public String getWriteableName() {, +        return NAME;, +    }, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.metrics.max.MaxAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.min.MinAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.StatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.sum.SumAggregatorBuilder;, +        registerAggregation(SumAggregatorBuilder::new, new SumParser(), SumAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MinAggregatorBuilder::new, new MinParser(), MinAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MaxAggregatorBuilder::new, new MaxParser(), MaxAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(StatsAggregatorBuilder::new, new StatsParser(), StatsAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(ExtendedStatsAggregatorBuilder::new, new ExtendedStatsParser(),, +        ExtendedStatsAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxAggregatorBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.search.aggregations.AggregatorFactory;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +    public static final String NAME = InternalMax.TYPE.name();, +    public static final ParseField AGGREGATION_NAME_FIELD = new ParseField(NAME);, +    /**, +     * Read from a stream., +     */, +    public MaxAggregatorBuilder(StreamInput in) throws IOException {, +        super(in, InternalMax.TYPE, ValuesSourceType.NUMERIC, ValueType.NUMERIC);, +    }, +, +    @Override, +    protected void innerWriteTo(StreamOutput out) {, +        // Do nothing, no extra state to write to stream, +    }, +, +    @Override, +    protected boolean usesNewStyleSerialization() {, +        return true;, +    }, +, +    @Override, +    public String getWriteableName() {, +        return NAME;, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/max/MaxParser.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.metrics.max.MaxAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.min.MinAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.StatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStatsAggregatorBuilder;, +import org.elasticsearch.search.aggregations.metrics.sum.SumAggregatorBuilder;, +        registerAggregation(SumAggregatorBuilder::new, new SumParser(), SumAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MinAggregatorBuilder::new, new MinParser(), MinAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(MaxAggregatorBuilder::new, new MaxParser(), MaxAggregatorBuilder.AGGREGATION_NAME_FIELD);]