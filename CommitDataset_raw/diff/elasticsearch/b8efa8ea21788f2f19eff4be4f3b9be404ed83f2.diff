[+++ b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc, +++ b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc, +++ b/docs/reference/query-dsl/filters/geo-distance-range-filter.asciidoc, +                "to" : "400km", +++ b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc, +++ b/docs/reference/query-dsl/filters/geo-distance-range-filter.asciidoc, +                "to" : "400km", +++ b/docs/reference/setup/upgrade.asciidoc, +++ b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc, +++ b/docs/reference/query-dsl/filters/geo-distance-range-filter.asciidoc, +                "to" : "400km", +++ b/docs/reference/setup/upgrade.asciidoc, +++ b/pom.xml, +                                <!-- true if we are running tests from maven (as opposed to IDE, etc)., +                                     allows us to assert certain things work, like libsigar -->, +                                <tests.maven>true</tests.maven>, +++ b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc, +++ b/docs/reference/query-dsl/filters/geo-distance-range-filter.asciidoc, +                "to" : "400km", +++ b/docs/reference/setup/upgrade.asciidoc, +++ b/pom.xml, +                                <!-- true if we are running tests from maven (as opposed to IDE, etc)., +                                     allows us to assert certain things work, like libsigar -->, +                                <tests.maven>true</tests.maven>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.EmptyTransportResponseHandler;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequestHandler;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportResponse;, +import org.elasticsearch.transport.TransportService;, +        /** send the request to the node holding the primary or execute if local */, +        /** upon success, finish the first phase and transfer responsibility to the {@link ReplicationPhase} */, +        /** perform the operation on the node holding the primary */, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener);, +    /** inner class is responsible for send the requests to all replica shards and manage the responses */, +                                InternalRequest internalRequest, ActionListener<Response> listener) {, +        /** total shard copies */, +        /** total successful operations so far */, +        /** number of pending operations */, +        /** start sending current requests to replicas */, +        /** send operation to the given node or perform it if local */, +++ b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc, +++ b/docs/reference/query-dsl/filters/geo-distance-range-filter.asciidoc, +                "to" : "400km", +++ b/docs/reference/setup/upgrade.asciidoc, +++ b/pom.xml, +                                <!-- true if we are running tests from maven (as opposed to IDE, etc)., +                                     allows us to assert certain things work, like libsigar -->, +                                <tests.maven>true</tests.maven>, +++ b/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ElasticsearchException;, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.ShardIterator;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.transport.BaseTransportResponseHandler;, +import org.elasticsearch.transport.ConnectTransportException;, +import org.elasticsearch.transport.EmptyTransportResponseHandler;, +import org.elasticsearch.transport.TransportChannel;, +import org.elasticsearch.transport.TransportException;, +import org.elasticsearch.transport.TransportRequestHandler;, +import org.elasticsearch.transport.TransportRequestOptions;, +import org.elasticsearch.transport.TransportResponse;, +import org.elasticsearch.transport.TransportService;, +        /** send the request to the node holding the primary or execute if local */, +        /** upon success, finish the first phase and transfer responsibility to the {@link ReplicationPhase} */, +        /** perform the operation on the node holding the primary */, +                replicationPhase = new ReplicationPhase(shardsIt, primaryResponse.v2(), primaryResponse.v1(), observer, primary, internalRequest, listener);, +    /** inner class is responsible for send the requests to all replica shards and manage the responses */, +                                InternalRequest internalRequest, ActionListener<Response> listener) {, +        /** total shard copies */, +        /** total successful operations so far */, +        /** number of pending operations */, +        /** start sending current requests to replicas */, +        /** send operation to the given node or perform it if local */, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import org.apache.lucene.util.StringHelper;, +import org.elasticsearch.common.jna.Kernel32Library;, +import org.hyperic.sigar.Sigar;, +    /** initialize native resources */, +    public static void initializeNatives(boolean mlockAll, boolean ctrlHandler) {, +        // mlockall if requested, +        if (mlockAll) {, +        // listener for windows close event, +        if (ctrlHandler) {, +        Kernel32Library.getInstance();, + , +        // initialize sigar explicitly, +        try {]