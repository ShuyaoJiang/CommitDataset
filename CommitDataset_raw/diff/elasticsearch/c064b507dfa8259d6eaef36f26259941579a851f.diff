[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract boolean isTranslogSyncNeeded();, +    public abstract Closeable acquireTranslogRetentionLock();, +    public abstract Translog.Snapshot newTranslogSnapshotFromMinSeqNo(long minSeqNo) throws IOException;, +    public abstract int estimateTranslogOperationsFromMinSeq(long minSeqNo);, +    public abstract TranslogStats getTranslogStats();, +    public abstract Translog.Location getTranslogLastWriteLocation();, +    public abstract long getLastSyncedGlobalCheckpoint();, +    public abstract boolean shouldRollTranslogGeneration();, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract boolean isTranslogSyncNeeded();, +    public abstract Closeable acquireTranslogRetentionLock();, +    public abstract Translog.Snapshot newTranslogSnapshotFromMinSeqNo(long minSeqNo) throws IOException;, +    public abstract int estimateTranslogOperationsFromMinSeq(long minSeqNo);, +    public abstract TranslogStats getTranslogStats();, +    public abstract Translog.Location getTranslogLastWriteLocation();, +    public abstract long getLastSyncedGlobalCheckpoint();, +    public abstract boolean shouldRollTranslogGeneration();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.translog.TranslogStats;, +import java.io.Closeable;, +    // Package private for testing purposes only, +    public boolean isTranslogSyncNeeded() {, +        return getTranslog().syncNeeded();, +    }, +, +    @Override, +    @Override, +    public Closeable acquireTranslogRetentionLock() {, +        return getTranslog().acquireRetentionLock();, +    }, +, +    @Override, +    public Translog.Snapshot newTranslogSnapshotFromMinSeqNo(long minSeqNo) throws IOException {, +        return getTranslog().newSnapshotFromMinSeqNo(minSeqNo);, +    }, +, +    @Override, +    public int estimateTranslogOperationsFromMinSeq(long minSeqNo) {, +        return getTranslog().estimateTotalOperationsFromMinSeq(minSeqNo);, +    }, +, +    @Override, +    public TranslogStats getTranslogStats() {, +        return getTranslog().stats();, +    }, +, +    @Override, +    public Translog.Location getTranslogLastWriteLocation() {, +        return getTranslog().getLastWriteLocation();, +    }, +, +    public boolean shouldRollTranslogGeneration() {, +        return getTranslog().shouldRollGeneration();, +    }, +, +    @Override, +    public long getLastSyncedGlobalCheckpoint() {, +        return getTranslog().getLastSyncedGlobalCheckpoint();, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +    public abstract boolean isTranslogSyncNeeded();, +    public abstract Closeable acquireTranslogRetentionLock();, +    public abstract Translog.Snapshot newTranslogSnapshotFromMinSeqNo(long minSeqNo) throws IOException;, +    public abstract int estimateTranslogOperationsFromMinSeq(long minSeqNo);, +    public abstract TranslogStats getTranslogStats();, +    public abstract Translog.Location getTranslogLastWriteLocation();, +    public abstract long getLastSyncedGlobalCheckpoint();, +    public abstract boolean shouldRollTranslogGeneration();, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +import org.elasticsearch.index.translog.TranslogStats;, +import java.io.Closeable;, +    // Package private for testing purposes only, +    public boolean isTranslogSyncNeeded() {, +        return getTranslog().syncNeeded();, +    }, +, +    @Override, +    @Override, +    public Closeable acquireTranslogRetentionLock() {, +        return getTranslog().acquireRetentionLock();, +    }, +, +    @Override, +    public Translog.Snapshot newTranslogSnapshotFromMinSeqNo(long minSeqNo) throws IOException {, +        return getTranslog().newSnapshotFromMinSeqNo(minSeqNo);, +    }, +, +    @Override, +    public int estimateTranslogOperationsFromMinSeq(long minSeqNo) {, +        return getTranslog().estimateTotalOperationsFromMinSeq(minSeqNo);, +    }, +, +    @Override, +    public TranslogStats getTranslogStats() {, +        return getTranslog().stats();, +    }, +]