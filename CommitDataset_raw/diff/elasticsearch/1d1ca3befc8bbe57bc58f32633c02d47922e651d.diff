[+++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +        public static String SETTING_MEMORY_STORAGE_HINT = "memory_storage_hint";, +, +        public enum MemoryStorageFormat {, +            ORDINALS, PACKED, PAGED;, +, +            public static MemoryStorageFormat fromString(String string) {, +                for (MemoryStorageFormat e : MemoryStorageFormat.values()) {, +                    if (e.name().equalsIgnoreCase(string)) {, +                        return e;, +                    }, +                }, +                return null;, +            }, +        }, +         * Gets a memory storage hint that should be honored if possible but is not mandatory, +        public static MemoryStorageFormat getMemoryStorageHint(FieldDataType fieldDataType) {, +            // backwards compatibility, +            String s = fieldDataType.getSettings().get("ordinals");, +            if (s != null) {, +                return "always".equals(s) ? MemoryStorageFormat.ORDINALS : null;, +            }, +            return MemoryStorageFormat.fromString(fieldDataType.getSettings().get(SETTING_MEMORY_STORAGE_HINT));, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +        public static String SETTING_MEMORY_STORAGE_HINT = "memory_storage_hint";, +, +        public enum MemoryStorageFormat {, +            ORDINALS, PACKED, PAGED;, +, +            public static MemoryStorageFormat fromString(String string) {, +                for (MemoryStorageFormat e : MemoryStorageFormat.values()) {, +                    if (e.name().equalsIgnoreCase(string)) {, +                        return e;, +                    }, +                }, +                return null;, +            }, +        }, +         * Gets a memory storage hint that should be honored if possible but is not mandatory, +        public static MemoryStorageFormat getMemoryStorageHint(FieldDataType fieldDataType) {, +            // backwards compatibility, +            String s = fieldDataType.getSettings().get("ordinals");, +            if (s != null) {, +                return "always".equals(s) ? MemoryStorageFormat.ORDINALS : null;, +            }, +            return MemoryStorageFormat.fromString(fieldDataType.getSettings().get(SETTING_MEMORY_STORAGE_HINT));, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DoubleArrayIndexFieldData.java, +            if (build.isMultiValued() || CommonSettings.getMemoryStorageHint(fieldDataType) == CommonSettings.MemoryStorageFormat.ORDINALS) {, +                data = new DoubleArrayAtomicFieldData.WithOrdinals(values, reader.maxDoc(), build);, +            } else {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +        public static String SETTING_MEMORY_STORAGE_HINT = "memory_storage_hint";, +, +        public enum MemoryStorageFormat {, +            ORDINALS, PACKED, PAGED;, +, +            public static MemoryStorageFormat fromString(String string) {, +                for (MemoryStorageFormat e : MemoryStorageFormat.values()) {, +                    if (e.name().equalsIgnoreCase(string)) {, +                        return e;, +                    }, +                }, +                return null;, +            }, +        }, +         * Gets a memory storage hint that should be honored if possible but is not mandatory, +        public static MemoryStorageFormat getMemoryStorageHint(FieldDataType fieldDataType) {, +            // backwards compatibility, +            String s = fieldDataType.getSettings().get("ordinals");, +            if (s != null) {, +                return "always".equals(s) ? MemoryStorageFormat.ORDINALS : null;, +            }, +            return MemoryStorageFormat.fromString(fieldDataType.getSettings().get(SETTING_MEMORY_STORAGE_HINT));, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/DoubleArrayIndexFieldData.java, +            if (build.isMultiValued() || CommonSettings.getMemoryStorageHint(fieldDataType) == CommonSettings.MemoryStorageFormat.ORDINALS) {, +                data = new DoubleArrayAtomicFieldData.WithOrdinals(values, reader.maxDoc(), build);, +            } else {, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/FloatArrayIndexFieldData.java, +            if (build.isMultiValued() || CommonSettings.getMemoryStorageHint(fieldDataType) == CommonSettings.MemoryStorageFormat.ORDINALS) {, +                data = new FloatArrayAtomicFieldData.WithOrdinals(values, reader.maxDoc(), build);, +            } else {, +++ b/src/main/java/org/elasticsearch/index/fielddata/IndexFieldData.java, +        public static String SETTING_MEMORY_STORAGE_HINT = "memory_storage_hint";, +, +        public enum MemoryStorageFormat {, +            ORDINALS, PACKED, PAGED;, +, +            public static MemoryStorageFormat fromString(String string) {, +                for (MemoryStorageFormat e : MemoryStorageFormat.values()) {, +                    if (e.name().equalsIgnoreCase(string)) {, +                        return e;, +                    }, +                }, +                return null;, +            }, +        }, +         * Gets a memory storage hint that should be honored if possible but is not mandatory, +        public static MemoryStorageFormat getMemoryStorageHint(FieldDataType fieldDataType) {, +            // backwards compatibility, +            String s = fieldDataType.getSettings().get("ordinals");]