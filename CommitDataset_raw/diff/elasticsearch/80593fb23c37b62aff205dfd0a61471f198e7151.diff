[+++ b/docs/en/rest-api/watcher/ack-watch.asciidoc, +    "execution_state": "executed",, +    "execution_state": "executed",, +    "execution_state": "executed",, +++ b/docs/en/rest-api/watcher/ack-watch.asciidoc, +    "execution_state": "executed",, +    "execution_state": "executed",, +    "execution_state": "executed",, +++ b/docs/en/rest-api/watcher/execute-watch.asciidoc, +      "execution_state": "executed",, +++ b/docs/en/rest-api/watcher/ack-watch.asciidoc, +    "execution_state": "executed",, +    "execution_state": "executed",, +    "execution_state": "executed",, +++ b/docs/en/rest-api/watcher/execute-watch.asciidoc, +      "execution_state": "executed",, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/execution/WatchExecutionContext.java, +    WatchRecord abortBeforeExecution(ExecutionState state, String message) {, +    WatchRecord abortFailedExecution(String message) {, +        watch().status().setExecutionState(WatchRecord.getState(result));, +    WatchRecord abortFailedExecution(Exception e) {, +        watch().status().setExecutionState(WatchRecord.getState(result));, +        watch().status().setExecutionState(WatchRecord.getState(result));, +    WatchExecutionSnapshot createSnapshot(Thread executionThread) {, +++ b/docs/en/rest-api/watcher/ack-watch.asciidoc, +    "execution_state": "executed",, +    "execution_state": "executed",, +    "execution_state": "executed",, +++ b/docs/en/rest-api/watcher/execute-watch.asciidoc, +      "execution_state": "executed",, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/execution/WatchExecutionContext.java, +    WatchRecord abortBeforeExecution(ExecutionState state, String message) {, +    WatchRecord abortFailedExecution(String message) {, +        watch().status().setExecutionState(WatchRecord.getState(result));, +    WatchRecord abortFailedExecution(Exception e) {, +        watch().status().setExecutionState(WatchRecord.getState(result));, +        watch().status().setExecutionState(WatchRecord.getState(result));, +    WatchExecutionSnapshot createSnapshot(Thread executionThread) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/history/WatchRecord.java, +    public static ExecutionState getState(WatchExecutionResult executionResult) {, +++ b/docs/en/rest-api/watcher/ack-watch.asciidoc, +    "execution_state": "executed",, +    "execution_state": "executed",, +    "execution_state": "executed",, +++ b/docs/en/rest-api/watcher/execute-watch.asciidoc, +      "execution_state": "executed",, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/execution/WatchExecutionContext.java, +    WatchRecord abortBeforeExecution(ExecutionState state, String message) {, +    WatchRecord abortFailedExecution(String message) {, +        watch().status().setExecutionState(WatchRecord.getState(result));, +    WatchRecord abortFailedExecution(Exception e) {, +        watch().status().setExecutionState(WatchRecord.getState(result));, +        watch().status().setExecutionState(WatchRecord.getState(result));, +    WatchExecutionSnapshot createSnapshot(Thread executionThread) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/history/WatchRecord.java, +    public static ExecutionState getState(WatchExecutionResult executionResult) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/watcher/watch/WatchStatus.java, +import org.elasticsearch.xpack.watcher.execution.ExecutionState;, +    @Nullable private ExecutionState executionState;, +        this(-1, new State(true, now), null, null, null, actions);, +        this(other.version, other.state, other.executionState, other.lastChecked, other.lastMetCondition, other.actions);, +    private WatchStatus(long version, State state, ExecutionState executionState, DateTime lastChecked, DateTime lastMetCondition,, +                        Map<String, ActionStatus> actions) {, +        this.executionState = executionState;, +    public void setExecutionState(ExecutionState executionState) {, +        this.executionState = executionState;, +    }, +, +    public ExecutionState getExecutionState() {, +        return executionState;, +    }, +, +                Objects.equals(executionState, that.executionState) &&, +        return Objects.hash(lastChecked, lastMetCondition, actions, version, executionState);, +        out.writeBoolean(executionState != null);, +        if (executionState != null) {, +            out.writeString(executionState.id());, +        }, +        boolean executionStateExists = in.readBoolean();, +        if (executionStateExists) {, +            executionState = ExecutionState.resolve(in.readString());, +        }, +        if (executionState != null) {, +            builder.field(Field.EXECUTION_STATE.getPreferredName(), executionState.id());, +        }, +        ExecutionState executionState = null;, +            } else if (Field.EXECUTION_STATE.match(currentFieldName)) {, +                if (token.isValue()) {, +                    executionState = ExecutionState.resolve(parser.text());, +                } else {, +                    throw new ElasticsearchParseException("could not parse watch status for [{}]. expecting field [{}] to hold a string " +, +                            "value, found [{}] instead", watchId, currentFieldName, token);, +                }, +        return new WatchStatus(version, state, executionState, lastChecked, lastMetCondition, actions);, +        ParseField EXECUTION_STATE = new ParseField("execution_state");, +++ b/docs/en/rest-api/watcher/ack-watch.asciidoc, +    "execution_state": "executed",, +    "execution_state": "executed",, +    "execution_state": "executed",, +++ b/docs/en/rest-api/watcher/execute-watch.asciidoc]