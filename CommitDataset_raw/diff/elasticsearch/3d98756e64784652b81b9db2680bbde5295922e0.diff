[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +        public Request(ActionRequest<?> request, String[] nodesIds) {, +        @Override, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +        public Request(ActionRequest<?> request, String[] nodesIds) {, +        @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/get/GetAliasesRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +        public Request(ActionRequest<?> request, String[] nodesIds) {, +        @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/get/GetAliasesRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/BroadcastRequest.java, +public class BroadcastRequest<Request extends BroadcastRequest<Request>> extends ActionRequest<Request> implements IndicesRequest.Replaceable {, +    protected BroadcastRequest(ActionRequest<?> originalRequest) {, +    public final Request indices(String... indices) {, +        return (Request) this;, +    public final Request indicesOptions(IndicesOptions indicesOptions) {, +        return (Request) this;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +        public Request(ActionRequest<?> request, String[] nodesIds) {, +        @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/get/GetAliasesRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/BroadcastRequest.java, +public class BroadcastRequest<Request extends BroadcastRequest<Request>> extends ActionRequest<Request> implements IndicesRequest.Replaceable {, +    protected BroadcastRequest(ActionRequest<?> originalRequest) {, +    public final Request indices(String... indices) {, +        return (Request) this;, +    public final Request indicesOptions(IndicesOptions indicesOptions) {, +        return (Request) this;, +++ b/core/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +public abstract class AcknowledgedRequest<Request extends MasterNodeRequest<Request>> extends MasterNodeRequest<Request> implements AckedRequest {, +    protected AcknowledgedRequest(ActionRequest<?> request) {, +    public final Request timeout(String timeout) {, +        return (Request)this;, +    public final Request timeout(TimeValue timeout) {, +        return (Request) this;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo(message: "[${LocalDateTime.now()}] Waiting for elasticsearch node ${node.httpUri()}", level: "info"), +        ant.echo(message: "[${LocalDateTime.now()}] Finished waiting for elasticsearch node ${node.httpUri()}. Reachable? ${tmpFile.exists()}", level: "info"), +++ b/core/src/main/java/org/elasticsearch/action/ActionRequest.java, +public abstract class ActionRequest<Request extends ActionRequest<Request>> extends TransportRequest {, +    protected ActionRequest(ActionRequest<?> request) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportNodesSnapshotsStatus.java, +        public Request(ActionRequest<?> request, String[] nodesIds) {, +        @Override, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/alias/get/GetAliasesRequest.java, +    private IndicesOptions indicesOptions = IndicesOptions.strictExpand();, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/BroadcastRequest.java, +public class BroadcastRequest<Request extends BroadcastRequest<Request>> extends ActionRequest<Request> implements IndicesRequest.Replaceable {, +    protected BroadcastRequest(ActionRequest<?> originalRequest) {, +    public final Request indices(String... indices) {, +        return (Request) this;, +    public final Request indicesOptions(IndicesOptions indicesOptions) {, +        return (Request) this;, +++ b/core/src/main/java/org/elasticsearch/action/support/master/AcknowledgedRequest.java, +public abstract class AcknowledgedRequest<Request extends MasterNodeRequest<Request>> extends MasterNodeRequest<Request> implements AckedRequest {, +    protected AcknowledgedRequest(ActionRequest<?> request) {, +    public final Request timeout(String timeout) {, +        return (Request)this;, +    public final Request timeout(TimeValue timeout) {, +        return (Request) this;, +++ b/core/src/main/java/org/elasticsearch/action/support/master/MasterNodeReadRequest.java, +public abstract class MasterNodeReadRequest<Request extends MasterNodeReadRequest<Request>> extends MasterNodeRequest<Request> {, +    public final Request local(boolean local) {]