[+++ b/qa/vagrant/build.gradle, +, +// the images we allow testing with, +List<String> availableBoxes = [, +    'centos-7',, +    'debian-8',, +    'fedora-22',, +    'sles-12',, +    'ubuntu-1204',, +    'ubuntu-1404',, +    'ubuntu-1504', +List<String> boxes = [], +for (String box : getProperties().get('vagrant.boxes', 'sample').split(',')) {, +  if (box == 'sample') {, +    boxes.add('centos-7'), +    boxes.add('ubuntu-1404'), +  } else if (box == 'all') {, +    boxes = availableBoxes, +    break, +  } else {, +    if (availableBoxes.contains(box) == false) {, +      throw new IllegalArgumentException("Unknown vagrant box '${box}'"), +    }, +    boxes.add(box), +  }, +}, +, +  group 'Verification', +  description 'Smoke test the specified vagrant boxes', +task packagingTest {, +  group 'Verification', +  description "Tests yum/apt packages using vagrant and bats.\n" +, +              "    Specify the vagrant boxes to test using the gradle property 'vagrant.boxes'.\n" +, +              "    'sample' can be used to test a single yum and apt box. 'all' can be used to\n" +, +              "    test all available boxes. The available boxes are: \n" +, +              "    ${availableBoxes}", +for (String box : availableBoxes) {, +  String boxTask = box.capitalize().replace('-', ''), +, +  // always add a halt task for all boxes, so clean makes sure they are all shutdown, +  Task halt = tasks.create("vagrant${boxTask}#halt", VagrantCommandTask) {, +    boxName box, +    commandLine 'halt', box, +  }, +  clean.dependsOn(halt), +  if (boxes.contains(box) == false) {, +    // we only need a halt task if this box was not specified, +    continue;, +  }, +, +  Task up = tasks.create("vagrant${boxTask}#up", VagrantCommandTask) {, +  Task smoke = tasks.create("vagrant${boxTask}#smoketest", Exec) {, +    dependsOn up, +    finalizedBy halt, +  vagrantSmokeTest.dependsOn(smoke) , +  Task packaging = tasks.create("packagingTest${boxTask}", BatsOverVagrantTask) {, +    dependsOn up, +    finalizedBy halt, +  packagingTest.dependsOn(packaging)]