[+++ b/modules/repository-url/build.gradle, +import org.elasticsearch.gradle.test.AntFixture, +forbiddenApisTest {, +    // we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage, +    bundledSignatures -= 'jdk-non-portable', +    bundledSignatures += 'jdk-internal', +}, +, +// This directory is shared between two URL repositories and one FS repository in YAML integration tests, +File repositoryDir = new File(project.buildDir, "shared-repository"), +, +/** A task to start the URLFixture which exposes the repositoryDir over HTTP **/, +task urlFixture(type: AntFixture) {, +    doFirst {, +        repositoryDir.mkdirs(), +    }, +    env 'CLASSPATH', "${ -> project.sourceSets.test.runtimeClasspath.asPath }", +    executable = new File(project.runtimeJavaHome, 'bin/java'), +    args 'org.elasticsearch.repositories.url.URLFixture', baseDir, "${repositoryDir.absolutePath}", +}, +, +    dependsOn urlFixture, +    // repositoryDir is used by a FS repository to create snapshots, +    setting 'path.repo', "${repositoryDir.absolutePath}", +    // repositoryDir is used by two URL repositories to restore snapshots, +    setting 'repositories.url.allowed_urls', "http://snapshot.test*,http://${ -> urlFixture.addressAndPort }", +++ b/modules/repository-url/build.gradle, +import org.elasticsearch.gradle.test.AntFixture, +forbiddenApisTest {, +    // we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage, +    bundledSignatures -= 'jdk-non-portable', +    bundledSignatures += 'jdk-internal', +}, +, +// This directory is shared between two URL repositories and one FS repository in YAML integration tests, +File repositoryDir = new File(project.buildDir, "shared-repository"), +, +/** A task to start the URLFixture which exposes the repositoryDir over HTTP **/, +task urlFixture(type: AntFixture) {, +    doFirst {, +        repositoryDir.mkdirs(), +    }, +    env 'CLASSPATH', "${ -> project.sourceSets.test.runtimeClasspath.asPath }", +    executable = new File(project.runtimeJavaHome, 'bin/java'), +    args 'org.elasticsearch.repositories.url.URLFixture', baseDir, "${repositoryDir.absolutePath}", +}, +, +    dependsOn urlFixture, +    // repositoryDir is used by a FS repository to create snapshots, +    setting 'path.repo', "${repositoryDir.absolutePath}", +    // repositoryDir is used by two URL repositories to restore snapshots, +    setting 'repositories.url.allowed_urls', "http://snapshot.test*,http://${ -> urlFixture.addressAndPort }", +++ b/modules/repository-url/src/test/java/org/elasticsearch/repositories/url/RepositoryURLClientYamlTestSuiteIT.java, +import org.apache.http.HttpEntity;, +import org.apache.http.entity.ContentType;, +import org.apache.http.nio.entity.NStringEntity;, +import org.elasticsearch.client.Response;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.ToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +import org.elasticsearch.repositories.fs.FsRepository;, +import org.elasticsearch.rest.RestStatus;, +import org.junit.Before;, +, +import java.io.IOException;, +import java.net.InetAddress;, +import java.net.URL;, +import java.util.List;, +import java.util.Map;, +, +import static java.util.Collections.emptyMap;, +import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.hasSize;, +, +    /**, +     * This method registers 3 snapshot/restore repositories:, +     * - repository-fs: this FS repository is used to create snapshots., +     * - repository-url: this URL repository is used to restore snapshots created using the previous repository. It uses, +     * the URLFixture to restore snapshots over HTTP., +     * - repository-file: similar as the previous repository but using a file:// prefix instead of http://., +     **/, +    @Before, +    public void registerRepositories() throws IOException {, +        Response clusterSettingsResponse = client().performRequest("GET", "/_cluster/settings?include_defaults=true" +, +            "&filter_path=defaults.path.repo,defaults.repositories.url.allowed_urls");, +        Map<String, Object> clusterSettings = entityAsMap(clusterSettingsResponse);, +, +        @SuppressWarnings("unchecked"), +        List<String> pathRepo = (List<String>) XContentMapValues.extractValue("defaults.path.repo", clusterSettings);, +        assertThat(pathRepo, hasSize(1));, +, +        // Create a FS repository using the path.repo location, +        Response createFsRepositoryResponse = client().performRequest("PUT", "_snapshot/repository-fs", emptyMap(),, +            buildRepositorySettings(FsRepository.TYPE, Settings.builder().put("location", pathRepo.get(0)).build()));, +        assertThat(createFsRepositoryResponse.getStatusLine().getStatusCode(), equalTo(RestStatus.OK.getStatus()));, +, +        // Create a URL repository using the file://{path.repo} URL]