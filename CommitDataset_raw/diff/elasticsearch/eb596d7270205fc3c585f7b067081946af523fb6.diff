[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static KeyStoreWrapper loadKeyStore(Environment initialEnv) throws BootstrapException {, +            keystore = KeyStoreWrapper.load(initialEnv.configFile());, +            final Environment initialEnv) throws BootstrapException, NodeValidationException, UserException {, +        final KeyStoreWrapper keystore = loadKeyStore(initialEnv);, +        Environment environment = initialEnvironment(foreground, pidFile, keystore, initialEnv.settings());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static KeyStoreWrapper loadKeyStore(Environment initialEnv) throws BootstrapException {, +            keystore = KeyStoreWrapper.load(initialEnv.configFile());, +            final Environment initialEnv) throws BootstrapException, NodeValidationException, UserException {, +        final KeyStoreWrapper keystore = loadKeyStore(initialEnv);, +        Environment environment = initialEnvironment(foreground, pidFile, keystore, initialEnv.settings());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    void init(final boolean daemonize, final Path pidFile, final boolean quiet, Environment initialEnv), +            Bootstrap.init(!daemonize, pidFile, quiet, initialEnv);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static KeyStoreWrapper loadKeyStore(Environment initialEnv) throws BootstrapException {, +            keystore = KeyStoreWrapper.load(initialEnv.configFile());, +            final Environment initialEnv) throws BootstrapException, NodeValidationException, UserException {, +        final KeyStoreWrapper keystore = loadKeyStore(initialEnv);, +        Environment environment = initialEnvironment(foreground, pidFile, keystore, initialEnv.settings());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    void init(final boolean daemonize, final Path pidFile, final boolean quiet, Environment initialEnv), +            Bootstrap.init(!daemonize, pidFile, quiet, initialEnv);, +++ b/core/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java, +import org.apache.lucene.store.SimpleFSDirectory;, +        SimpleFSDirectory directory = new SimpleFSDirectory(configDir);, +        SimpleFSDirectory directory = new SimpleFSDirectory(configDir);, +        Files.move(configDir.resolve(tmpFile), keystoreFile, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.ATOMIC_MOVE);, +    // TODO: make settings accessible only to code that registered the setting, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +    private static KeyStoreWrapper loadKeyStore(Environment initialEnv) throws BootstrapException {, +            keystore = KeyStoreWrapper.load(initialEnv.configFile());, +            final Environment initialEnv) throws BootstrapException, NodeValidationException, UserException {, +        final KeyStoreWrapper keystore = loadKeyStore(initialEnv);, +        Environment environment = initialEnvironment(foreground, pidFile, keystore, initialEnv.settings());, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java, +    void init(final boolean daemonize, final Path pidFile, final boolean quiet, Environment initialEnv), +            Bootstrap.init(!daemonize, pidFile, quiet, initialEnv);, +++ b/core/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java, +import org.apache.lucene.store.SimpleFSDirectory;, +        SimpleFSDirectory directory = new SimpleFSDirectory(configDir);, +        SimpleFSDirectory directory = new SimpleFSDirectory(configDir);, +        Files.move(configDir.resolve(tmpFile), keystoreFile, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.ATOMIC_MOVE);, +    // TODO: make settings accessible only to code that registered the setting, +++ b/test/framework/src/main/java/org/elasticsearch/bootstrap/ESElasticsearchCliTestCase.java, +        void accept(final boolean foreground, final Path pidFile, final boolean quiet, final Environment initialEnv);, +                void init(final boolean daemonize, final Path pidFile, final boolean quiet, Environment initialEnv) {, +                    initConsumer.accept(!daemonize, pidFile, quiet, initialEnv);]