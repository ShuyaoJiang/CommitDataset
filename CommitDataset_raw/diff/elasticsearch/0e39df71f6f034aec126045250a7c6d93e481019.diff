[+++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +import java.util.Collections;, +    public PutLicenseResponse(boolean acknowledged, LicensesStatus status) {, +        this(acknowledged, status, null, Collections.<String, String[]>emptyMap());, +    }, +, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +        licensesService.registerLicense(request, listener);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/ExpirationCallback.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.license.plugin.core;, +, +import org.elasticsearch.common.logging.LoggerMessageFormat;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.license.core.License;, +import org.elasticsearch.xpack.scheduler.SchedulerEngine;, +, +import java.util.UUID;, +, +public abstract class ExpirationCallback {, +, +    final static String EXPIRATION_JOB_PREFIX = ".license_expiration_job_";, +, +    public enum Orientation {PRE, POST}, +, +    public static abstract class Pre extends ExpirationCallback {, +, +        /**, +         * Callback schedule prior to license expiry, +         *, +         * @param min       latest relative time to execute before license expiry, +         * @param max       earliest relative time to execute before license expiry, +         * @param frequency interval between execution, +         */, +        public Pre(TimeValue min, TimeValue max, TimeValue frequency) {, +            super(Orientation.PRE, min, max, frequency);, +        }, +, +        @Override, +        public boolean matches(long expirationDate, long now) {, +            long expiryDuration = expirationDate - now;, +            if (expiryDuration > 0L) {, +                if (expiryDuration <= max.getMillis()) {, +                    return expiryDuration >= min.getMillis();, +                }, +            }, +            return false;, +        }, +, +        @Override, +        public TimeValue delay(long expirationDate, long now) {, +            return TimeValue.timeValueMillis((expirationDate - now) - max.getMillis());, +        }, +    }, +, +    public static abstract class Post extends ExpirationCallback {, +, +        /**, +         * Callback schedule after license expiry, +         *, +         * @param min       earliest relative time to execute after license expiry, +         * @param max       latest relative time to execute after license expiry, +         * @param frequency interval between execution, +         */, +        public Post(TimeValue min, TimeValue max, TimeValue frequency) {, +            super(Orientation.POST, min, max, frequency);, +        }, +, +        @Override, +        public boolean matches(long expirationDate, long now) {, +            long postExpiryDuration = now - expirationDate;, +            if (postExpiryDuration > 0L) {, +                if (postExpiryDuration <= max.getMillis()) {, +                    return postExpiryDuration >= min.getMillis();, +                }, +            }, +            return false;, +        }, +, +        @Override, +        public TimeValue delay(long expirationDate, long now) {, +            long expiryDuration = expirationDate - now;]