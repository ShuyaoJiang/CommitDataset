[+++ b/libs/geo/src/main/java/org/elasticsearch/geo/geometry/Circle.java, + * Circle geometry (not part of WKT standard, but used in elasticsearch) defined by lat/lon coordinates of the center in degrees, + * and optional altitude in meters., +    private final double alt;, +        alt = Double.NaN;, +        this(lat, lon, Double.NaN, radiusMeters);, +    }, +, +    public Circle(final double lat, final double lon, final double alt, final double radiusMeters) {, +        this.alt = alt;, +    public double getAlt() {, +        return alt;, +    }, +, +        if (Double.compare(circle.radiusMeters, radiusMeters) != 0) return false;, +        return (Double.compare(circle.alt, alt) == 0);, +        temp = Double.doubleToLongBits(alt);, +        result = 31 * result + (int) (temp ^ (temp >>> 32));, +        return "lat=" + lat + ", lon=" + lon + ", radius=" + radiusMeters + (Double.isNaN(alt) ? ", alt=" + alt : "");, +    @Override, +    public boolean hasAlt() {, +        return Double.isNaN(alt) == false;, +    }, +++ b/libs/geo/src/main/java/org/elasticsearch/geo/geometry/Circle.java, + * Circle geometry (not part of WKT standard, but used in elasticsearch) defined by lat/lon coordinates of the center in degrees, + * and optional altitude in meters., +    private final double alt;, +        alt = Double.NaN;, +        this(lat, lon, Double.NaN, radiusMeters);, +    }, +, +    public Circle(final double lat, final double lon, final double alt, final double radiusMeters) {, +        this.alt = alt;, +    public double getAlt() {, +        return alt;, +    }, +, +        if (Double.compare(circle.radiusMeters, radiusMeters) != 0) return false;, +        return (Double.compare(circle.alt, alt) == 0);, +        temp = Double.doubleToLongBits(alt);, +        result = 31 * result + (int) (temp ^ (temp >>> 32));, +        return "lat=" + lat + ", lon=" + lon + ", radius=" + radiusMeters + (Double.isNaN(alt) ? ", alt=" + alt : "");, +    @Override, +    public boolean hasAlt() {, +        return Double.isNaN(alt) == false;, +    }, +++ b/libs/geo/src/main/java/org/elasticsearch/geo/geometry/Geometry.java, +, +    default boolean hasAlt() {, +        return false;, +    }, +++ b/libs/geo/src/main/java/org/elasticsearch/geo/geometry/Circle.java, + * Circle geometry (not part of WKT standard, but used in elasticsearch) defined by lat/lon coordinates of the center in degrees, + * and optional altitude in meters., +    private final double alt;, +        alt = Double.NaN;, +        this(lat, lon, Double.NaN, radiusMeters);, +    }, +, +    public Circle(final double lat, final double lon, final double alt, final double radiusMeters) {, +        this.alt = alt;, +    public double getAlt() {, +        return alt;, +    }, +, +        if (Double.compare(circle.radiusMeters, radiusMeters) != 0) return false;, +        return (Double.compare(circle.alt, alt) == 0);, +        temp = Double.doubleToLongBits(alt);, +        result = 31 * result + (int) (temp ^ (temp >>> 32));, +        return "lat=" + lat + ", lon=" + lon + ", radius=" + radiusMeters + (Double.isNaN(alt) ? ", alt=" + alt : "");, +    @Override, +    public boolean hasAlt() {, +        return Double.isNaN(alt) == false;, +    }, +++ b/libs/geo/src/main/java/org/elasticsearch/geo/geometry/Geometry.java, +, +    default boolean hasAlt() {, +        return false;, +    }, +++ b/libs/geo/src/main/java/org/elasticsearch/geo/geometry/GeometryCollection.java, +import java.util.Locale;, +    private boolean hasAlt;, +, +        hasAlt = shapes.get(0).hasAlt();, +        for (G shape : shapes) {, +            if (shape.hasAlt() != hasAlt) {, +                throw new IllegalArgumentException("all elements of the collection should have the same number of dimension");, +            }, +        }, +, +    @Override, +    public boolean hasAlt() {, +        return hasAlt;, +    }, +, +    @Override, +    public String toString() {, +        StringBuilder sb = new StringBuilder();, +        sb.append(type().name().toLowerCase(Locale.ROOT)).append("(shapes=");, +        sb.append(shapes);]