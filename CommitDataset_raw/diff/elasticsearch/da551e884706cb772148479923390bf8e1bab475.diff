[+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        Weight subQueryWeight = subQuery.createWeight(searcher);, +        return new CustomBoostFactorWeight(subQueryWeight, filterFunctions.length);, +        final Weight subQueryWeight;, +        final DocSet[] docSets;, +, +        public CustomBoostFactorWeight(Weight subQueryWeight, int filterFunctionLength) throws IOException {, +            this.subQueryWeight = subQueryWeight;, +            this.docSets = new DocSet[filterFunctionLength];, +        public float getValueForNormalization() throws IOException {, +            float sum = subQueryWeight.getValueForNormalization();, +        public void normalize(float norm, float topLevelBoost) {, +            subQueryWeight.normalize(norm, topLevelBoost * getBoost());, +            Scorer subQueryScorer = subQueryWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);, +            return new CustomBoostFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, docSets);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context, context.reader().getLiveDocs()));, +                        float sc = getBoost() * subQueryExpl.getValue() * functionExplanation.getValue();, +                        filterExplanation.addDetail(new Explanation(getBoost(), "queryBoost"));, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context, context.reader().getLiveDocs()));, +                        res.addDetail(new Explanation(getBoost(), "queryBoost"));, +                    float sc = factor * subQueryExpl.getValue() * getBoost();, +            float sc = getBoost() * subQueryExpl.getValue();, +            res.addDetail(new Explanation(getBoost(), "queryBoost"));, +, +        private final float subQueryBoost;, +        private CustomBoostFactorScorer(CustomBoostFactorWeight w, Scorer scorer, ScoreMode scoreMode,, +                                        FilterFunction[] filterFunctions, float maxBoost, DocSet[] docSets) throws IOException {, +            super(w);, +            this.subQueryBoost = w.getQuery().getBoost();, +            return subQueryBoost * score * factor;, +        }, +, +        @Override, +        public float freq() throws IOException {, +            return scorer.freq();, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +        Weight subQueryWeight = subQuery.createWeight(searcher);, +        return new CustomBoostFactorWeight(subQueryWeight, filterFunctions.length);, +        final Weight subQueryWeight;, +        final DocSet[] docSets;, +, +        public CustomBoostFactorWeight(Weight subQueryWeight, int filterFunctionLength) throws IOException {, +            this.subQueryWeight = subQueryWeight;, +            this.docSets = new DocSet[filterFunctionLength];, +        public float getValueForNormalization() throws IOException {, +            float sum = subQueryWeight.getValueForNormalization();, +        public void normalize(float norm, float topLevelBoost) {, +            subQueryWeight.normalize(norm, topLevelBoost * getBoost());, +            Scorer subQueryScorer = subQueryWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);, +            return new CustomBoostFactorScorer(this, subQueryScorer, scoreMode, filterFunctions, maxBoost, docSets);, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context, context.reader().getLiveDocs()));, +                        float sc = getBoost() * subQueryExpl.getValue() * functionExplanation.getValue();, +                        filterExplanation.addDetail(new Explanation(getBoost(), "queryBoost"));, +                    DocSet docSet = DocSets.convert(context.reader(), filterFunction.filter.getDocIdSet(context, context.reader().getLiveDocs()));, +                        res.addDetail(new Explanation(getBoost(), "queryBoost"));, +                    float sc = factor * subQueryExpl.getValue() * getBoost();, +            float sc = getBoost() * subQueryExpl.getValue();, +            res.addDetail(new Explanation(getBoost(), "queryBoost"));, +, +        private final float subQueryBoost;, +        private CustomBoostFactorScorer(CustomBoostFactorWeight w, Scorer scorer, ScoreMode scoreMode,, +                                        FilterFunction[] filterFunctions, float maxBoost, DocSet[] docSets) throws IOException {, +            super(w);, +            this.subQueryBoost = w.getQuery().getBoost();, +            return subQueryBoost * score * factor;, +        }, +, +        @Override, +        public float freq() throws IOException {, +            return scorer.freq();, +++ b/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +        Weight subQueryWeight = subQuery.createWeight(searcher);, +        return new CustomBoostFactorWeight(subQueryWeight);, +        final Weight subQueryWeight;, +, +        public CustomBoostFactorWeight(Weight subQueryWeight) throws IOException {, +            this.subQueryWeight = subQueryWeight;, +        public float getValueForNormalization() throws IOException {, +            float sum = subQueryWeight.getValueForNormalization();, +        public void normalize(float norm, float topLevelBoost) {, +            subQueryWeight.normalize(norm, topLevelBoost * getBoost());, +            Scorer subQueryScorer = subQueryWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);, +            return new CustomBoostFactorScorer(this, subQueryScorer, function);, +            float sc = getBoost() * functionExplanation.getValue();, +            res.addDetail(new Explanation(getBoost(), "queryBoost"));, +, +        private final float subQueryBoost;, +        private CustomBoostFactorScorer(CustomBoostFactorWeight w, Scorer scorer, ScoreFunction function) throws IOException {, +            super(w);, +            this.subQueryBoost = w.getQuery().getBoost();, +            return subQueryBoost * function.score(scorer.docID(), scorer.score());, +        }, +, +        @Override, +        public float freq() throws IOException {, +            return scorer.freq();]