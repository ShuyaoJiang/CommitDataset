[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            throw new IllegalArgumentException("No custom state prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            throw new IllegalArgumentException("No custom state prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            throw new IllegalArgumentException("No custom metadata prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            throw new IllegalArgumentException("No custom state prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            throw new IllegalArgumentException("No custom metadata prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    void handleJoinRequest(final DiscoveryNode node, final ClusterState state, final MembershipAction.JoinCallback callback) {, +            try {, +                membership.sendValidateJoinRequestBlocking(node, state, joinTimeout);, +            } catch (Throwable e) {, +                logger.warn("failed to validate incoming join request from node [{}]", node);, +                callback.onFailure(new IllegalStateException("failure when sending a validation request to node", e));, +                return;, +            }, +            handleJoinRequest(node, clusterService.state(), callback);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            throw new IllegalArgumentException("No custom state prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            throw new IllegalArgumentException("No custom metadata prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    void handleJoinRequest(final DiscoveryNode node, final ClusterState state, final MembershipAction.JoinCallback callback) {, +            try {, +                membership.sendValidateJoinRequestBlocking(node, state, joinTimeout);, +            } catch (Throwable e) {, +                logger.warn("failed to validate incoming join request from node [{}]", node);, +                callback.onFailure(new IllegalStateException("failure when sending a validation request to node", e));, +                return;, +            }, +            handleJoinRequest(node, clusterService.state(), callback);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/membership/MembershipAction.java, +import org.elasticsearch.cluster.ClusterState;, +    public void sendValidateJoinRequestBlocking(DiscoveryNode node, ClusterState state, TimeValue timeout) {, +        transportService.submitRequest(node, DISCOVERY_JOIN_VALIDATE_ACTION_NAME, new ValidateJoinRequest(state), EmptyTransportResponseHandler.INSTANCE_SAME), +    class ValidateJoinRequest extends TransportRequest {, +        private ClusterState state;, +        ValidateJoinRequest() {, +        }, +, +        ValidateJoinRequest(ClusterState state) {, +            this.state = state;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);, +            this.state = ClusterState.Builder.readFrom(in, nodesProvider.nodes().localNode());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            this.state.writeTo(out);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +            throw new IllegalArgumentException("No custom state prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +            throw new IllegalArgumentException("No custom metadata prototype registered for type [" + type + "], node likely missing plugins");, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +    void handleJoinRequest(final DiscoveryNode node, final ClusterState state, final MembershipAction.JoinCallback callback) {, +            try {, +                membership.sendValidateJoinRequestBlocking(node, state, joinTimeout);, +            } catch (Throwable e) {, +                logger.warn("failed to validate incoming join request from node [{}]", node);, +                callback.onFailure(new IllegalStateException("failure when sending a validation request to node", e));, +                return;, +            }, +            handleJoinRequest(node, clusterService.state(), callback);, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/membership/MembershipAction.java, +import org.elasticsearch.cluster.ClusterState;, +    public void sendValidateJoinRequestBlocking(DiscoveryNode node, ClusterState state, TimeValue timeout) {, +        transportService.submitRequest(node, DISCOVERY_JOIN_VALIDATE_ACTION_NAME, new ValidateJoinRequest(state), EmptyTransportResponseHandler.INSTANCE_SAME), +    class ValidateJoinRequest extends TransportRequest {, +        private ClusterState state;, +        ValidateJoinRequest() {, +        }, +, +        ValidateJoinRequest(ClusterState state) {, +            this.state = state;, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);, +            this.state = ClusterState.Builder.readFrom(in, nodesProvider.nodes().localNode());, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            this.state.writeTo(out);, +++ b/core/src/test/java/org/elasticsearch/discovery/zen/ZenDiscoveryIT.java, +import org.elasticsearch.cluster.*;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.test.TestCustomMetaData;, +import java.util.*;, +    public void testHandleNodeJoin_incompatibleClusterState() throws UnknownHostException {]