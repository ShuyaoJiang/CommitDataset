[+++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.collect.Tuple;, +    private enum ElasticsearchExceptionHandle {, +    /**, +     * Returns an array of all registered handle IDs. These are the IDs for every registered, +     * exception., +     *, +     * @return an array of all registered handle IDs, +     */, +    static int[] ids() {, +        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray();, +    }, +, +    /**, +     * Returns an array of all registered pairs of handle IDs and exception classes. These pairs are, +     * provided for every registered exception., +     *, +     * @return an array of all registered pairs of handle IDs and exception classes, +     */, +    static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {, +        @SuppressWarnings("unchecked"), +        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =, +                Arrays.stream(ElasticsearchExceptionHandle.values()), +                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new);, +        return ts;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +import org.elasticsearch.common.collect.Tuple;, +    private enum ElasticsearchExceptionHandle {, +    /**, +     * Returns an array of all registered handle IDs. These are the IDs for every registered, +     * exception., +     *, +     * @return an array of all registered handle IDs, +     */, +    static int[] ids() {, +        return Arrays.stream(ElasticsearchExceptionHandle.values()).mapToInt(h -> h.id).toArray();, +    }, +, +    /**, +     * Returns an array of all registered pairs of handle IDs and exception classes. These pairs are, +     * provided for every registered exception., +     *, +     * @return an array of all registered pairs of handle IDs and exception classes, +     */, +    static Tuple<Integer, Class<? extends ElasticsearchException>>[] classes() {, +        @SuppressWarnings("unchecked"), +        final Tuple<Integer, Class<? extends ElasticsearchException>>[] ts =, +                Arrays.stream(ElasticsearchExceptionHandle.values()), +                        .map(h -> Tuple.tuple(h.id, h.exceptionClass)).toArray(Tuple[]::new);, +        return ts;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/ExceptionSerializationTests.java, +import org.elasticsearch.common.collect.Tuple;, +        for (final int id : ElasticsearchException.ids()) {, +            assertThat("negative id", id, greaterThanOrEqualTo(0));, +        final Set<Integer> ids = new HashSet<>();, +        for (final int id: ElasticsearchException.ids()) {, +            assertTrue("duplicate id", ids.add(id));, +        for (final Tuple<Integer, Class<? extends ElasticsearchException>> tuple : ElasticsearchException.classes()) {, +            assertNotNull(tuple.v1());, +            assertEquals((int) reverse.get(tuple.v2()), (int)tuple.v1());]