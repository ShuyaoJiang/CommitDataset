[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/ForecastJobAction.java, +        // Max allowed duration: 8 weeks, +        private static final TimeValue MAX_DURATION = TimeValue.parseTimeValue("56d", "");, +, +            if (this.duration.compareTo(TimeValue.ZERO) <= 0) {, +                throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be positive: [", +                        + duration.getStringRep() + "]");, +            }, +            if (this.duration.compareTo(MAX_DURATION) > 0) {, +                throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be " + MAX_DURATION.getStringRep(), +                        + " or less: [" + duration.getStringRep() + "]");, +            }, +            if (this.expiresIn.compareTo(TimeValue.ZERO) < 0) {, +                throw new IllegalArgumentException("[" + EXPIRES_IN.getPreferredName() + "] must be non-negative: [", +                        + expiresIn.getStringRep() + "]");, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/ForecastJobAction.java, +        // Max allowed duration: 8 weeks, +        private static final TimeValue MAX_DURATION = TimeValue.parseTimeValue("56d", "");, +, +            if (this.duration.compareTo(TimeValue.ZERO) <= 0) {, +                throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be positive: [", +                        + duration.getStringRep() + "]");, +            }, +            if (this.duration.compareTo(MAX_DURATION) > 0) {, +                throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be " + MAX_DURATION.getStringRep(), +                        + " or less: [" + duration.getStringRep() + "]");, +            }, +            if (this.expiresIn.compareTo(TimeValue.ZERO) < 0) {, +                throw new IllegalArgumentException("[" + EXPIRES_IN.getPreferredName() + "] must be non-negative: [", +                        + expiresIn.getStringRep() + "]");, +            }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/ForecastJobActionRequestTests.java, +import static org.hamcrest.Matchers.equalTo;, +, +        if (randomBoolean()) {, +            request.setExpiresIn(TimeValue.timeValueSeconds(randomIntBetween(0, 1_000_000)).getStringRep());, +        }, +, +    public void testSetDuration_GivenZero() {, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setDuration("0"));, +        assertThat(e.getMessage(), equalTo("[duration] must be positive: [0ms]"));, +    }, +, +    public void testSetDuration_GivenNegative() {, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setDuration("-1s"));, +        assertThat(e.getMessage(), equalTo("[duration] must be positive: [-1]"));, +    }, +, +    public void testSetExpiresIn_GivenZero() {, +        Request request = new Request();, +        request.setExpiresIn("0");, +        assertThat(request.getExpiresIn(), equalTo(TimeValue.ZERO));, +    }, +, +    public void testSetExpiresIn_GivenNegative() {, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setExpiresIn("-1s"));, +        assertThat(e.getMessage(), equalTo("[expires_in] must be non-negative: [-1]"));, +    }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/ForecastJobAction.java, +        // Max allowed duration: 8 weeks, +        private static final TimeValue MAX_DURATION = TimeValue.parseTimeValue("56d", "");, +, +            if (this.duration.compareTo(TimeValue.ZERO) <= 0) {, +                throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be positive: [", +                        + duration.getStringRep() + "]");, +            }, +            if (this.duration.compareTo(MAX_DURATION) > 0) {, +                throw new IllegalArgumentException("[" + DURATION.getPreferredName() + "] must be " + MAX_DURATION.getStringRep(), +                        + " or less: [" + duration.getStringRep() + "]");, +            }, +            if (this.expiresIn.compareTo(TimeValue.ZERO) < 0) {, +                throw new IllegalArgumentException("[" + EXPIRES_IN.getPreferredName() + "] must be non-negative: [", +                        + expiresIn.getStringRep() + "]");, +            }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/action/ForecastJobActionRequestTests.java, +import static org.hamcrest.Matchers.equalTo;, +, +        if (randomBoolean()) {, +            request.setExpiresIn(TimeValue.timeValueSeconds(randomIntBetween(0, 1_000_000)).getStringRep());, +        }, +, +    public void testSetDuration_GivenZero() {, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setDuration("0"));, +        assertThat(e.getMessage(), equalTo("[duration] must be positive: [0ms]"));, +    }, +, +    public void testSetDuration_GivenNegative() {, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setDuration("-1s"));, +        assertThat(e.getMessage(), equalTo("[duration] must be positive: [-1]"));, +    }, +, +    public void testSetExpiresIn_GivenZero() {, +        Request request = new Request();, +        request.setExpiresIn("0");, +        assertThat(request.getExpiresIn(), equalTo(TimeValue.ZERO));, +    }, +, +    public void testSetExpiresIn_GivenNegative() {, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new Request().setExpiresIn("-1s"));]