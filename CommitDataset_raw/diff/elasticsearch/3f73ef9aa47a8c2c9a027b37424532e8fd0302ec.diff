[+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        if (Constants.LINUX || Constants.MAC_OS_X) {, +        }, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        if (Constants.LINUX || Constants.MAC_OS_X) {, +        }, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +        @Override, +        public int available() throws IOException {, +            return length - pos;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {, +            for (SortBuilder<?> sort : sorts) {, +                for (PipelineAggregatorBuilder<?> aggregation : pipelineAggregationBuilders) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +        if (Constants.LINUX || Constants.MAC_OS_X) {, +        }, +            return getMaxSizeVirtualMemory() != Long.MIN_VALUE && getMaxSizeVirtualMemory() != getRlimInfinity();, +        long getRlimInfinity() {, +            return JNACLibrary.RLIM_INFINITY;, +        }, +, +        // visible for testing, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +        @Override, +        public int available() throws IOException {, +            return length - pos;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +    public int available() throws IOException {, +        return delegate.available();, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateRequestBuilder.java, +    public PercolateRequestBuilder addSort(SortBuilder<?> sort) {, +++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateSourceBuilder.java, +    private QueryBuilder<?> queryBuilder;, +    private List<SortBuilder<?>> sorts;, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregationBuilders;, +    public PercolateSourceBuilder setQueryBuilder(QueryBuilder<?> queryBuilder) {, +    public PercolateSourceBuilder addSort(SortBuilder<?> sort) {, +    public PercolateSourceBuilder addAggregation(PipelineAggregatorBuilder<?> aggregationBuilder) {]