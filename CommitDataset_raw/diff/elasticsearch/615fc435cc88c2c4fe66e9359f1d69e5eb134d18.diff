[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java, +    final ByteSizeValue maxContentLength;, +    final ByteSizeValue maxInitialLineLength;, +    final ByteSizeValue maxHeaderSize;, +    final ByteSizeValue maxChunkSize;, +    final boolean compression;, +    OpenChannelsHandler serverOpenChannels;, +        this.maxChunkSize = componentSettings.getAsBytesSize("max_chunk_size", settings.getAsBytesSize("http.max_chunk_size", new ByteSizeValue(8, ByteSizeUnit.KB)));, +        this.maxHeaderSize = componentSettings.getAsBytesSize("max_header_size", settings.getAsBytesSize("http.max_header_size", new ByteSizeValue(8, ByteSizeUnit.KB)));, +        this.maxInitialLineLength = componentSettings.getAsBytesSize("max_initial_line_length", settings.getAsBytesSize("http.max_initial_line_length", new ByteSizeValue(4, ByteSizeUnit.KB)));, +, +        logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}]",, +                maxChunkSize, maxHeaderSize, maxInitialLineLength, this.maxContentLength);, +        serverBootstrap.setPipelineFactory(new MyChannelPipelineFactory(this));, +, +    static class MyChannelPipelineFactory implements ChannelPipelineFactory {, +, +        private final NettyHttpServerTransport transport;, +, +        private final HttpRequestHandler requestHandler;, +, +        MyChannelPipelineFactory(NettyHttpServerTransport transport) {, +            this.transport = transport;, +            this.requestHandler = new HttpRequestHandler(transport);, +        }, +, +        @Override public ChannelPipeline getPipeline() throws Exception {, +            ChannelPipeline pipeline = Channels.pipeline();, +            pipeline.addLast("openChannels", transport.serverOpenChannels);, +            pipeline.addLast("decoder", new HttpRequestDecoder(, +                    (int) transport.maxInitialLineLength.bytes(),, +                    (int) transport.maxHeaderSize.bytes(),, +                    (int) transport.maxChunkSize.bytes(), +            ));, +            if (transport.compression) {, +                pipeline.addLast("decoder_compress", new HttpContentDecompressor());, +            }, +            pipeline.addLast("aggregator", new HttpChunkAggregator((int) transport.maxContentLength.bytes()));, +            pipeline.addLast("encoder", new HttpResponseEncoder());, +            if (transport.compression) {, +                pipeline.addLast("encoder_compress", new HttpContentCompressor(transport.compressionLevel));, +            }, +            pipeline.addLast("handler", requestHandler);, +            return pipeline;, +        }, +    }]