[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    Node node = nodes.get(entry.getKey().nodeId());, +                    if (node != null) { // should not happen (==null) but safeguard anyhow, +                        searchService.sendFreeContext(node, entry.getValue().id());, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    Node node = nodes.get(entry.getKey().nodeId());, +                    if (node != null) { // should not happen (==null) but safeguard anyhow, +                        searchService.sendFreeContext(node, entry.getValue().id());, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.indices.IndicesLifecycle;, +import org.elasticsearch.indices.InternalIndicesLifecycle;, + * @author kimchy (shay.banon), +    private final InternalIndicesLifecycle indicesLifecycle;, +, +        this.indicesLifecycle = (InternalIndicesLifecycle) injector.getInstance(IndicesLifecycle.class);, +        indicesLifecycle.beforeIndexShardCreated(shardId);, +, +        indicesLifecycle.afterIndexShardCreated(indexShard);, +, +        indicesLifecycle.beforeIndexShardClosed(indexShard, delete);, +, +        indicesLifecycle.afterIndexShardClosed(indexShard.shardId(), delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/search/type/TransportSearchTypeAction.java, +                    Node node = nodes.get(entry.getKey().nodeId());, +                    if (node != null) { // should not happen (==null) but safeguard anyhow, +                        searchService.sendFreeContext(node, entry.getValue().id());, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/service/InternalIndexService.java, +import org.elasticsearch.indices.IndicesLifecycle;, +import org.elasticsearch.indices.InternalIndicesLifecycle;, + * @author kimchy (shay.banon), +    private final InternalIndicesLifecycle indicesLifecycle;, +, +        this.indicesLifecycle = (InternalIndicesLifecycle) injector.getInstance(IndicesLifecycle.class);, +        indicesLifecycle.beforeIndexShardCreated(shardId);, +, +        indicesLifecycle.afterIndexShardCreated(indexShard);, +, +        indicesLifecycle.beforeIndexShardClosed(indexShard, delete);, +, +        indicesLifecycle.afterIndexShardClosed(indexShard.shardId(), delete);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesLifecycle.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.indices;, +, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.service.IndexService;, +import org.elasticsearch.index.shard.ShardId;, +import org.elasticsearch.index.shard.service.IndexShard;, +, +/**, + * A global component allowing to register for lifecycle of an index (create/closed) and, + * an index shard (created/closed)., + *, + * @author kimchy (shay.banon), + */, +public interface IndicesLifecycle {, +, +    /**, +     * Add a listener., +     */, +    void addListener(Listener listener);, +, +    /**, +     * Remove a listener., +     */, +    void removeListener(Listener listener);, +, +    /**, +     * A listener for index and index shard lifecycle events (create/closed)., +     */, +    public abstract static class Listener {, +, +        /**, +         * Called before the index gets created., +         */, +        public void beforeIndexCreated(Index index) {, +, +        }, +]