[+++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +        protected Expression rule(Expression e, Map<Expression, ExtendedStats> seen,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +        protected Expression rule(Expression e, Map<Expression, Percentiles> percentilesPerField,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +        protected Expression rule(Expression e, Map<Expression, PercentileRanks> ranksPerField,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +            return p instanceof Project, +                    || p instanceof Filter, +                    || p instanceof SubQueryAlias, +                    || p instanceof Aggregate, +                    || p instanceof Limit, +                    || p instanceof OrderBy;, +            return direction == TransformDirection.DOWN ?, +                plan.transformDown(this::rule, typeToken()) : plan.transformUp(this::rule, typeToken());, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +        protected Expression rule(Expression e, Map<Expression, ExtendedStats> seen,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +        protected Expression rule(Expression e, Map<Expression, Percentiles> percentilesPerField,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +        protected Expression rule(Expression e, Map<Expression, PercentileRanks> ranksPerField,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +            return p instanceof Project, +                    || p instanceof Filter, +                    || p instanceof SubQueryAlias, +                    || p instanceof Aggregate, +                    || p instanceof Limit, +                    || p instanceof OrderBy;, +            return direction == TransformDirection.DOWN ?, +                plan.transformDown(this::rule, typeToken()) : plan.transformUp(this::rule, typeToken());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/Explain.java, +                    listener.onResponse(Rows.singleton(output(), printPlans(format, plan, analyzedPlan, optimizedPlan,, +                            mappedPlan, executablePlan)));, +                            listener.onResponse(Rows.singleton(output(), printPlans(format, plan, analyzedPlan, optimizedPlan,, +                                    mappedPlan, executablePlan)));, +                        listener.onResponse(Rows.singleton(output(), printPlans(format, plan, analyzedPlan, optimizedPlan,, +                                mappedPlan, null)));, +    private static String printPlans(Format format, LogicalPlan parsed, LogicalPlan analyzedPlan, LogicalPlan optimizedPlan,, +            PhysicalPlan mappedPlan, PhysicalPlan executionPlan) {, +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java, +        protected Expression rule(Expression e, Map<Expression, ExtendedStats> seen,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +        protected Expression rule(Expression e, Map<Expression, Percentiles> percentilesPerField,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +        protected Expression rule(Expression e, Map<Expression, PercentileRanks> ranksPerField,, +                Map<String, AggregateFunctionAttribute> promotedIds) {, +            return p instanceof Project, +                    || p instanceof Filter, +                    || p instanceof SubQueryAlias, +                    || p instanceof Aggregate, +                    || p instanceof Limit, +                    || p instanceof OrderBy;, +            return direction == TransformDirection.DOWN ?, +                plan.transformDown(this::rule, typeToken()) : plan.transformUp(this::rule, typeToken());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/plan/logical/command/Explain.java, +                    listener.onResponse(Rows.singleton(output(), printPlans(format, plan, analyzedPlan, optimizedPlan,, +                            mappedPlan, executablePlan)));, +                            listener.onResponse(Rows.singleton(output(), printPlans(format, plan, analyzedPlan, optimizedPlan,, +                                    mappedPlan, executablePlan)));, +                        listener.onResponse(Rows.singleton(output(), printPlans(format, plan, analyzedPlan, optimizedPlan,, +                                mappedPlan, null)));, +    private static String printPlans(Format format, LogicalPlan parsed, LogicalPlan analyzedPlan, LogicalPlan optimizedPlan,, +            PhysicalPlan mappedPlan, PhysicalPlan executionPlan) {, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/tree/NodeUtils.java, +        Check.isTrue(currentChildren.size() == newChildren.size(), "Cannot make copy; expected %s children but received %s",, +                currentChildren.size(), newChildren.size());, +                Check.isTrue(param.isNamePresent(),, +                        "Can't find constructor parameter names for [%s]. Is class debug information available?",, +                        clazz.toGenericString());, +                    throw new SqlIllegalArgumentException(, +                            "class [%s] expected to have method [%s] for retrieving constructor arguments; none found",, +                Check.isTrue(found == Object.class || expected.isAssignableFrom(found),, +                    "Constructor param [%s] in class [%s] has type [%s] but found getter [%s]", paramName, clazz,, +                    expected, getter.toGenericString());]