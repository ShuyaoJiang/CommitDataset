[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +        // extends defaults, +        if (!tokenFiltersSettings.containsKey("arabicStem")) {, +            tokenFilterBinder.addBinding("arabicStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, ArabicStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("brazilianStem")) {, +            tokenFilterBinder.addBinding("brazilianStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, BrazilianStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("dutchStem")) {, +            tokenFilterBinder.addBinding("dutchStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, DutchStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("frenchStem")) {, +            tokenFilterBinder.addBinding("frenchStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, FrenchStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("germanStem")) {, +            tokenFilterBinder.addBinding("germanStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, GermanStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("russianStem")) {, +            tokenFilterBinder.addBinding("russianStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, RussianStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +        // extends defaults, +        if (!tokenFiltersSettings.containsKey("arabicStem")) {, +            tokenFilterBinder.addBinding("arabicStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, ArabicStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("brazilianStem")) {, +            tokenFilterBinder.addBinding("brazilianStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, BrazilianStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("dutchStem")) {, +            tokenFilterBinder.addBinding("dutchStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, DutchStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("frenchStem")) {, +            tokenFilterBinder.addBinding("frenchStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, FrenchStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("germanStem")) {, +            tokenFilterBinder.addBinding("germanStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, GermanStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("russianStem")) {, +            tokenFilterBinder.addBinding("russianStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, RussianStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java, +        // extended analyzers defaults, +        if (!analyzerProviders.containsKey("arabic")) {, +            analyzerProviders.put("arabic", new ArabicAnalyzerProvider(index, indexSettings, "arabic", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("brazilian")) {, +            analyzerProviders.put("brazilian", new BrazilianAnalyzerProvider(index, indexSettings, "brazilian", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("chinese")) {, +            analyzerProviders.put("chinese", new ChineseAnalyzerProvider(index, indexSettings, "chinese", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("cjk")) {, +            analyzerProviders.put("cjk", new ChineseAnalyzerProvider(index, indexSettings, "cjk", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("czech")) {, +            analyzerProviders.put("czech", new CzechAnalyzerProvider(index, indexSettings, "czech", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("dutch")) {, +            analyzerProviders.put("dutch", new DutchAnalyzerProvider(index, indexSettings, "dutch", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("french")) {, +            analyzerProviders.put("french", new FrenchAnalyzerProvider(index, indexSettings, "french", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("german")) {, +            analyzerProviders.put("german", new GermanAnalyzerProvider(index, indexSettings, "german", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("greek")) {, +            analyzerProviders.put("greek", new GreekAnalyzerProvider(index, indexSettings, "greek", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("persian")) {, +            analyzerProviders.put("persian", new PersianAnalyzerProvider(index, indexSettings, "persian", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("russian")) {, +            analyzerProviders.put("russian", new RussianAnalyzerProvider(index, indexSettings, "russian", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +        if (!analyzerProviders.containsKey("thai")) {, +            analyzerProviders.put("thai", new ThaiAnalyzerProvider(index, indexSettings, "thai", ImmutableSettings.Builder.EMPTY_SETTINGS));, +        }, +, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/analysis/AnalysisModule.java, +        // extends defaults, +        if (!tokenFiltersSettings.containsKey("arabicStem")) {, +            tokenFilterBinder.addBinding("arabicStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, ArabicStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("brazilianStem")) {, +            tokenFilterBinder.addBinding("brazilianStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, BrazilianStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("dutchStem")) {, +            tokenFilterBinder.addBinding("dutchStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, DutchStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("frenchStem")) {, +            tokenFilterBinder.addBinding("frenchStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, FrenchStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("germanStem")) {, +            tokenFilterBinder.addBinding("germanStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, GermanStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }, +        if (!tokenFiltersSettings.containsKey("russianStem")) {, +            tokenFilterBinder.addBinding("russianStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class, RussianStemTokenFilterFactory.class)).in(Scopes.SINGLETON);, +        }]