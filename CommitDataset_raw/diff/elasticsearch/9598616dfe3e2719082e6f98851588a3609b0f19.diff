[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestClient.java, +        Tuple<Version, Version> versionTuple = readMasterAndMinNodeVersion(hosts.size());, +    private Tuple<Version, Version> readMasterAndMinNodeVersion(int numHosts) throws IOException {, +        try {, +                } else if (version.onOrAfter(currentVersion)) {, +        } catch (ResponseException ex) {, +            if (ex.getResponse().getStatusLine().getStatusCode() == 403) {, +                logger.warn("Fallback to simple info '/' request, _cat/nodes is not authorized");, +                final Version version = readAndCheckVersion(numHosts);, +                return new Tuple<>(version, version);, +            }, +            throw ex;, +        }, +    }, +, +    private Version readAndCheckVersion(int numHosts) throws IOException {, +        ClientYamlSuiteRestApi restApi = restApi("info");, +        assert restApi.getPaths().size() == 1;, +        assert restApi.getMethods().size() == 1;, +        Version version = null;, +        for (int i = 0; i < numHosts; i++) {, +            //we don't really use the urls here, we rely on the client doing round-robin to touch all the nodes in the cluster, +            String method = restApi.getMethods().get(0);, +            String endpoint = restApi.getPaths().get(0);, +            Response response = restClient.performRequest(method, endpoint);, +            ClientYamlTestResponse restTestResponse = new ClientYamlTestResponse(response);, +, +            Object latestVersion = restTestResponse.evaluate("version.number");, +            if (latestVersion == null) {, +                throw new RuntimeException("elasticsearch version not found in the response");, +            }, +            final Version currentVersion = Version.fromString(restTestResponse.evaluate("version.number").toString());, +            if (version == null) {, +                version = currentVersion;, +            } else if (version.onOrAfter(currentVersion)) {, +                version = currentVersion;, +            }, +        }, +        return version;]