[+++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +import org.elasticsearch.alerts.actions.AlertActionFactory;, +import org.elasticsearch.alerts.actions.AlertActionRegistry;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.joda.time.DateTimeZone;, +import org.omg.CORBA.portable.Streamable;, +import java.util.ArrayList;, +    public void readFrom(StreamInput in) throws IOException {, +        alertName = in.readString();, +        searchRequest = new SearchRequest();, +        searchRequest.readFrom(in);, +        trigger = AlertTrigger.readFrom(in);, +        int numActions = in.readInt();, +        actions = new ArrayList<>(numActions);, +        for (int i=0; i<numActions; ++i) {, +            actions.add(AlertActionRegistry.readFrom(in));, +        }, +        schedule = in.readOptionalString();, +        if (in.readBoolean()) {, +            lastActionFire = new DateTime(in.readLong(), DateTimeZone.UTC);, +        }, +        version = in.readLong();, +        enabled = in.readBoolean();, +    }, +, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(alertName);, +        searchRequest.writeTo(out);, +        AlertTrigger.writeTo(trigger, out);, +        if (actions == null) {, +            out.writeInt(0);, +        } else {, +            out.writeInt(actions.size());, +            for (AlertAction action : actions) {, +                action.writeTo(out);, +            }, +        }, +        out.writeOptionalString(schedule);, +        if (lastActionFire == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeLong(lastActionFire.toDateTime(DateTimeZone.UTC).getMillis());, +        }, +        out.writeLong(version);, +        out.writeBoolean(enabled);, +    }, +, +, +++ b/src/main/java/org/elasticsearch/alerts/Alert.java, +import org.elasticsearch.alerts.actions.AlertActionFactory;, +import org.elasticsearch.alerts.actions.AlertActionRegistry;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.joda.time.DateTimeZone;, +import org.omg.CORBA.portable.Streamable;, +import java.util.ArrayList;, +    public void readFrom(StreamInput in) throws IOException {, +        alertName = in.readString();, +        searchRequest = new SearchRequest();, +        searchRequest.readFrom(in);, +        trigger = AlertTrigger.readFrom(in);, +        int numActions = in.readInt();, +        actions = new ArrayList<>(numActions);, +        for (int i=0; i<numActions; ++i) {, +            actions.add(AlertActionRegistry.readFrom(in));, +        }, +        schedule = in.readOptionalString();, +        if (in.readBoolean()) {, +            lastActionFire = new DateTime(in.readLong(), DateTimeZone.UTC);, +        }, +        version = in.readLong();, +        enabled = in.readBoolean();, +    }, +, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(alertName);, +        searchRequest.writeTo(out);, +        AlertTrigger.writeTo(trigger, out);, +        if (actions == null) {, +            out.writeInt(0);, +        } else {, +            out.writeInt(actions.size());, +            for (AlertAction action : actions) {, +                action.writeTo(out);, +            }, +        }, +        out.writeOptionalString(schedule);, +        if (lastActionFire == null) {, +            out.writeBoolean(false);, +        } else {, +            out.writeLong(lastActionFire.toDateTime(DateTimeZone.UTC).getMillis());, +        }, +        out.writeLong(version);, +        out.writeBoolean(enabled);, +    }, +, +, +++ b/src/main/java/org/elasticsearch/alerts/AlertManager.java, +import java.io.IOException;]