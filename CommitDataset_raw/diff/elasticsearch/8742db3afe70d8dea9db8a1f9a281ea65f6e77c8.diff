[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollableIndexCaps.java, +            = new ConstructingObjectParser<>(indexName, true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollableIndexCaps.java, +            = new ConstructingObjectParser<>(indexName, true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollupJobCaps.java, +import java.util.stream.Collectors;, +    public static final ConstructingObjectParser<RollupJobCaps, Void> PARSER = new ConstructingObjectParser<>(NAME, true,, +            Map<String, RollupFieldCaps> mapCaps =, +                new HashMap<>(caps.stream().collect(Collectors.toMap(Tuple::v1, Tuple::v2)));, +                    aggs.add(parser.map());, +            return new RollupFieldCaps(aggs);, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollableIndexCaps.java, +            = new ConstructingObjectParser<>(indexName, true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollupJobCaps.java, +import java.util.stream.Collectors;, +    public static final ConstructingObjectParser<RollupJobCaps, Void> PARSER = new ConstructingObjectParser<>(NAME, true,, +            Map<String, RollupFieldCaps> mapCaps =, +                new HashMap<>(caps.stream().collect(Collectors.toMap(Tuple::v1, Tuple::v2)));, +                    aggs.add(parser.map());, +            return new RollupFieldCaps(aggs);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/rollup/GetRollupCapsResponseTests.java, +import java.util.function.Predicate;, +    protected Predicate<String> randomFieldsExcludeFilter() {, +        return (field) ->, +            // base cannot have extra things in it, +            "".equals(field), +            // the field list expects to be a nested object of a certain type, +            || field.contains("fields");, +    }, +, +    @Override, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollableIndexCaps.java, +            = new ConstructingObjectParser<>(indexName, true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollupJobCaps.java, +import java.util.stream.Collectors;, +    public static final ConstructingObjectParser<RollupJobCaps, Void> PARSER = new ConstructingObjectParser<>(NAME, true,, +            Map<String, RollupFieldCaps> mapCaps =, +                new HashMap<>(caps.stream().collect(Collectors.toMap(Tuple::v1, Tuple::v2)));, +                    aggs.add(parser.map());, +            return new RollupFieldCaps(aggs);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/rollup/GetRollupCapsResponseTests.java, +import java.util.function.Predicate;, +    protected Predicate<String> randomFieldsExcludeFilter() {, +        return (field) ->, +            // base cannot have extra things in it, +            "".equals(field), +            // the field list expects to be a nested object of a certain type, +            || field.contains("fields");, +    }, +, +    @Override, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/rollup/GetRollupIndexCapsResponseTests.java, +import java.util.function.Predicate;, +    protected Predicate<String> randomFieldsExcludeFilter() {, +        return (field) ->, +            // base cannot have extra things in it, +            "".equals(field), +                // the field list expects to be a nested object of a certain type, +                || field.contains("fields");, +    }, +, +    @Override, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollableIndexCaps.java, +            = new ConstructingObjectParser<>(indexName, true,, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/rollup/RollupJobCaps.java, +import java.util.stream.Collectors;, +    public static final ConstructingObjectParser<RollupJobCaps, Void> PARSER = new ConstructingObjectParser<>(NAME, true,, +            Map<String, RollupFieldCaps> mapCaps =, +                new HashMap<>(caps.stream().collect(Collectors.toMap(Tuple::v1, Tuple::v2)));, +                    aggs.add(parser.map());, +            return new RollupFieldCaps(aggs);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/rollup/GetRollupCapsResponseTests.java, +import java.util.function.Predicate;, +    protected Predicate<String> randomFieldsExcludeFilter() {, +        return (field) ->, +            // base cannot have extra things in it, +            "".equals(field), +            // the field list expects to be a nested object of a certain type, +            || field.contains("fields");, +    }, +, +    @Override, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/rollup/GetRollupIndexCapsResponseTests.java, +import java.util.function.Predicate;, +    protected Predicate<String> randomFieldsExcludeFilter() {, +        return (field) ->, +            // base cannot have extra things in it, +            "".equals(field), +                // the field list expects to be a nested object of a certain type, +                || field.contains("fields");, +    }, +, +    @Override, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/rollup/RollupCapsResponseTestCase.java, +import org.elasticsearch.common.Strings;, +import java.util.function.Predicate;, +    protected Predicate<String> randomFieldsExcludeFilter() {, +        return field -> false;, +    }, +]