[+++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +     * A query that allows to define a custom scoring function., +     *, +     * @param queryBuilder  The query to custom score, +     * @param filterBuilder The filterBuilder to custom score, +     */, +    public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FilterBuilder filterBuilder) {, +        return new FunctionScoreQueryBuilder(queryBuilder, filterBuilder);, +    }, +, +    /**, +     * A query that allows to define a custom scoring function., +     *, +     * @param queryBuilder  The query to custom score, +     * @param filterBuilder The filterBuilder to custom score, +     */, +    public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FilterBuilder filterBuilder, ScoreFunctionBuilder function) {, +        return (new FunctionScoreQueryBuilder(queryBuilder, filterBuilder)).add(function);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java, +     * A query that allows to define a custom scoring function., +     *, +     * @param queryBuilder  The query to custom score, +     * @param filterBuilder The filterBuilder to custom score, +     */, +    public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FilterBuilder filterBuilder) {, +        return new FunctionScoreQueryBuilder(queryBuilder, filterBuilder);, +    }, +, +    /**, +     * A query that allows to define a custom scoring function., +     *, +     * @param queryBuilder  The query to custom score, +     * @param filterBuilder The filterBuilder to custom score, +     */, +    public static FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FilterBuilder filterBuilder, ScoreFunctionBuilder function) {, +        return (new FunctionScoreQueryBuilder(queryBuilder, filterBuilder)).add(function);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilder.java, +    /**, +     * Creates a function_score query that executes on documents that match query a query., +     * Query and filter will be wrapped into a filtered_query., +     *, +     * @param queryBuilder the query that defines which documents the function_score query will be executed on., +     */, +    /**, +     * Creates a function_score query that executes on documents that match query a query., +     * Query and filter will be wrapped into a filtered_query., +     *, +     * @param filterBuilder the filter that defines which documents the function_score query will be executed on., +     */, +    /**, +     * Creates a function_score query that executes on documents that match query and filter., +     * Query and filter will be wrapped into a filtered_query., +     *, +     * @param queryBuilder a query that will; be wrapped in a filtered query., +     * @param filterBuilder the filter for the filtered query., +     */, +    public FunctionScoreQueryBuilder(QueryBuilder queryBuilder, FilterBuilder filterBuilder) {, +        this.filterBuilder = filterBuilder;, +        this.queryBuilder = queryBuilder;, +    }, +, +    /**, +     * Creates a function_score query that will execute the function scoreFunctionBuilder on all documents., +     *, +     * @param scoreFunctionBuilder score function that is executed, +     */, +    /**, +     * Adds a score function that will will execute the function scoreFunctionBuilder on all documents matching the filter., +     *, +     * @param filter the filter that defines which documents the function_score query will be executed on., +     * @param scoreFunctionBuilder score function that is executed, +     */, +    /**, +     * Adds a score function that will will execute the function scoreFunctionBuilder on all documents., +     *, +     * @param scoreFunctionBuilder score function that is executed, +     */, +    /**, +     * Score mode defines how results of individual score functions will be aggregated., +     * Can be first, avg, max, sum, min, multiply, +     */, +    /**, +     * Score mode defines how the combined result of score functions will influence the final score together with the sub query score., +     * Can be replace, avg, max, sum, min, multiply, +     */, +    /**, +     * Score mode defines how the combined result of score functions will influence the final score together with the sub query score., +     */, +    /**, +     * Tha maximum boost that will be applied by function score., +     */, +        }, +        if (filterBuilder != null) {, +++ b/src/main/java/org/elasticsearch/index/query/QueryBuilders.java]