[+++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java, +import org.elasticsearch.cluster.routing.allocation.allocator.BalancedShardsAllocator;, +import org.elasticsearch.cluster.routing.allocation.decider.ConcurrentRebalanceAllocationDecider;, +import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;, +        // allow the cluster to rebalance quickly - 2 concurrent rebalance are default we can do higher, +        ImmutableSettings.Builder builder = ImmutableSettings.builder();, +        builder.put(ConcurrentRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_CLUSTER_CONCURRENT_REBALANCE, 100);, +        client().admin().cluster().prepareUpdateSettings().setPersistentSettings(builder).get();, +            List<IndexRequestBuilder> docs = new ArrayList<>();, +                docs.add(client().prepareIndex(indexName, "type1", id).setSource("text", "sometext"));, +            indexRandom(true, docs);, +            docs = new ArrayList<>();, +                docs.add(client().prepareIndex(indexName, "type2", id).setSource("text", "someothertext"));, +            indexRandom(true, docs);, +        ensureGreen();, +        // set the balancing threshold to something very highish such that no rebalancing happens after the upgrade, +        builder = ImmutableSettings.builder();, +        builder.put(BalancedShardsAllocator.SETTING_THRESHOLD, 100.0f);, +        client().admin().cluster().prepareUpdateSettings().setPersistentSettings(builder).get();, +        // disable allocation entirely until all nodes are upgraded, +        builder = ImmutableSettings.builder();, +        builder.put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE, EnableAllocationDecider.Allocation.NONE);, +        client().admin().cluster().prepareUpdateSettings().setTransientSettings(builder).get();]