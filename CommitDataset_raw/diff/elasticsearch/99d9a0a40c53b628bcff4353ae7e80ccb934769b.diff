[+++ b/x-pack/qa/rolling-upgrade-basic/src/test/java/org/elasticsearch/upgrades/BasicLicenseUpgradeIT.java, +import org.elasticsearch.client.Request;, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +++ b/x-pack/qa/rolling-upgrade-basic/src/test/java/org/elasticsearch/upgrades/BasicLicenseUpgradeIT.java, +import org.elasticsearch.client.Request;, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +++ b/x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/AbstractUpgradeTestCase.java, +import org.elasticsearch.client.Request;, +                    final boolean exists = adminClient(), +                            .performRequest(new Request("HEAD", "_template/" + template)), +                            .getStatusLine().getStatusCode() == 200;, +++ b/x-pack/qa/rolling-upgrade-basic/src/test/java/org/elasticsearch/upgrades/BasicLicenseUpgradeIT.java, +import org.elasticsearch.client.Request;, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +++ b/x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/AbstractUpgradeTestCase.java, +import org.elasticsearch.client.Request;, +                    final boolean exists = adminClient(), +                            .performRequest(new Request("HEAD", "_template/" + template)), +                            .getStatusLine().getStatusCode() == 200;, +++ b/x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/IndexAuditUpgradeIT.java, +import org.elasticsearch.client.Request;, +        Response response = client().performRequest(new Request("GET", "/.security_audit_log*/doc/_count"));, +        Map<?, ?> nodesResponse = entityAsMap(client().performRequest(new Request("GET", "/_nodes/_all/info/version")));, +        Request aggRequest = new Request("GET", "/.security_audit_log*/_search");, +        aggRequest.setJsonEntity(, +                "}");, +        aggRequest.addParameter("pretty", "true");, +        Response aggResponse = client().performRequest(aggRequest);, +        Map<?, ?> map = entityAsMap(client().performRequest(new Request("GET", "/_nodes/_master")));, +++ b/x-pack/qa/rolling-upgrade-basic/src/test/java/org/elasticsearch/upgrades/BasicLicenseUpgradeIT.java, +import org.elasticsearch.client.Request;, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +        Response licenseResponse = client().performRequest(new Request("GET", "/_xpack/license"));, +++ b/x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/AbstractUpgradeTestCase.java, +import org.elasticsearch.client.Request;, +                    final boolean exists = adminClient(), +                            .performRequest(new Request("HEAD", "_template/" + template)), +                            .getStatusLine().getStatusCode() == 200;, +++ b/x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/IndexAuditUpgradeIT.java, +import org.elasticsearch.client.Request;, +        Response response = client().performRequest(new Request("GET", "/.security_audit_log*/doc/_count"));, +        Map<?, ?> nodesResponse = entityAsMap(client().performRequest(new Request("GET", "/_nodes/_all/info/version")));, +        Request aggRequest = new Request("GET", "/.security_audit_log*/_search");, +        aggRequest.setJsonEntity(, +                "}");, +        aggRequest.addParameter("pretty", "true");, +        Response aggResponse = client().performRequest(aggRequest);, +        Map<?, ?> map = entityAsMap(client().performRequest(new Request("GET", "/_nodes/_master")));, +++ b/x-pack/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/TokenBackwardsCompatibilityIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        Request createTokenRequest = new Request("POST", "_xpack/security/oauth2/token");, +        createTokenRequest.setJsonEntity(, +                "{\n" +, +                "}");, +        Response response = client().performRequest(createTokenRequest);, +        Request indexRequest1 = new Request("PUT", "token_backwards_compatibility_it/doc/old_cluster_token1");, +        indexRequest1.setJsonEntity(, +                "{\n" +, +                "}");, +        client().performRequest(indexRequest1);, +        Request createSecondTokenRequest = new Request("POST", "_xpack/security/oauth2/token");, +        createSecondTokenRequest.setEntity(createTokenRequest.getEntity());, +        response = client().performRequest(createSecondTokenRequest);, +        Request indexRequest2 = new Request("PUT", "token_backwards_compatibility_it/doc/old_cluster_token2");, +        indexRequest2.setJsonEntity(, +                "{\n" +, +                "}");, +        client().performRequest(indexRequest2);, +        Response getResponse = client().performRequest(new Request("GET", "token_backwards_compatibility_it/doc/old_cluster_token1"));, +        Response getResponse = client().performRequest(new Request("GET", "token_backwards_compatibility_it/doc/old_cluster_token2"));, +        Request invalidateRequest = new Request("DELETE", "_xpack/security/oauth2/token");, +        invalidateRequest.setJsonEntity("{\"token\": \"" + token + "\"}");, +        invalidateRequest.addParameter("error_trace", "true");, +        client().performRequest(invalidateRequest);, +        Request createTokenRequest = new Request("POST", "_xpack/security/oauth2/token");, +        createTokenRequest.setJsonEntity(, +                "{\n" +, +                "}");, +            Response response = client.performRequest(createTokenRequest);, +            Request tokenRefreshRequest = new Request("POST", "_xpack/security/oauth2/token");, +            tokenRefreshRequest.setJsonEntity(, +                    "{\n" +, +                    "}");, +            response = client.performRequest(tokenRefreshRequest);, +        Response getResponse = client().performRequest(new Request("GET", "token_backwards_compatibility_it/doc/old_cluster_token2"));, +        Request invalidateRequest = new Request("DELETE", "_xpack/security/oauth2/token");, +        invalidateRequest.setJsonEntity("{\"token\": \"" + token + "\"}");, +        invalidateRequest.addParameter("error_trace", "true");, +        Response invalidationResponse = client().performRequest(invalidateRequest);, +        getResponse = client().performRequest(new Request("GET", "token_backwards_compatibility_it/doc/old_cluster_token1"));, +        Request getTokenRequest = new Request("POST", "_xpack/security/oauth2/token");, +        getTokenRequest.setJsonEntity(, +                "{\n" +, +                "}");, +        Response response = client().performRequest(getTokenRequest);, +        Request refreshTokenRequest = new Request("POST", "_xpack/security/oauth2/token");]