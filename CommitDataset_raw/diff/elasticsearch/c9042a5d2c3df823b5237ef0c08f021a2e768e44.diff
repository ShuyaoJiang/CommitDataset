[+++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +                        String allowedOrigins = transport.settings().get(SETTING_CORS_ALLOW_ORIGIN, null);, +                        if (!Strings.isNullOrEmpty(allowedOrigins)) {, +                            resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigins);, +                        }, +++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java, +                        String allowedOrigins = transport.settings().get(SETTING_CORS_ALLOW_ORIGIN, null);, +                        if (!Strings.isNullOrEmpty(allowedOrigins)) {, +                            resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigins);, +                        }, +++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.http.netty;, +, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;, +import org.elasticsearch.rest.RestResponse;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.test.ElasticsearchTestCase;, +import org.elasticsearch.test.cache.recycler.MockBigArrays;, +import org.elasticsearch.test.cache.recycler.MockPageCacheRecycler;, +import org.elasticsearch.threadpool.ThreadPool;, +import org.jboss.netty.buffer.ChannelBuffer;, +import org.jboss.netty.buffer.ChannelBuffers;, +import org.jboss.netty.channel.*;, +import org.jboss.netty.handler.codec.http.*;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import java.net.SocketAddress;, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.hamcrest.Matchers.*;, +, +public class NettyHttpChannelTests extends ElasticsearchTestCase {, +, +    private NetworkService networkService;, +    private ThreadPool threadPool;, +    private MockBigArrays bigArrays;, +    private NettyHttpServerTransport httpServerTransport;, +, +    @Before, +    public void setup() throws Exception {, +        networkService = new NetworkService(Settings.EMPTY);, +        threadPool = new ThreadPool("test");, +        MockPageCacheRecycler mockPageCacheRecycler = new MockPageCacheRecycler(Settings.EMPTY, threadPool);, +        bigArrays = new MockBigArrays(mockPageCacheRecycler, new NoneCircuitBreakerService());, +    }, +, +    @After, +    public void shutdown() throws Exception {, +        if (threadPool != null) {, +            threadPool.shutdownNow();, +        }, +        if (httpServerTransport != null) {, +            httpServerTransport.close();, +        }, +    }, +, +    @Test, +    public void testCorsEnabledWithoutAllowOrigins() {, +        // Set up a HTTP transport with only the CORS enabled setting, +        Settings settings = Settings.builder(), +                .put(NettyHttpServerTransport.SETTING_CORS_ENABLED, true), +                .build();, +        httpServerTransport = new NettyHttpServerTransport(settings, networkService, bigArrays);, +        HttpRequest httpRequest = new TestHttpRequest();, +        httpRequest.headers().add(HttpHeaders.Names.ORIGIN, "remote");, +        httpRequest.headers().add(HttpHeaders.Names.USER_AGENT, "Mozilla fake");, +        WriteCapturingChannel writeCapturingChannel = new WriteCapturingChannel();, +        NettyHttpRequest request = new NettyHttpRequest(httpRequest, writeCapturingChannel);, +, +        // send a response, +        NettyHttpChannel channel = new NettyHttpChannel(httpServerTransport, request, null, randomBoolean());, +        channel.sendResponse(new TestReponse());, +, +        // inspect what was written]