[+++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = System.getProperty('tests.jvm.argline', ''), +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = System.getProperty('tests.jvm.argline', ''), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]routing[/\\]allocation[/\\]CatAllocationTestCase.java" checks="LineLength" />, +  <suppress files="test[/\\]framework[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]test[/\\]ESAllocationTestCase.java" checks="LineLength" />, +++ b/benchmarks/src/main/java/org/elasticsearch/benchmark/routing/allocation/Allocators.java, +        return createAllocationService(settings, new ClusterSettings(Settings.Builder.EMPTY_SETTINGS, ClusterSettings, +        List<AllocationDecider> list = new ArrayList<>();, +        // Keep a deterministic order of allocation deciders for the benchmark, +        for (Class<? extends AllocationDecider> deciderClass : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            try {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class, ClusterSettings, +                    .class);, +                list.add(constructor.newInstance(settings, clusterSettings));, +            } catch (NoSuchMethodException e) {, +                Constructor<? extends AllocationDecider> constructor = deciderClass.getConstructor(Settings.class);, +                list.add(constructor.newInstance(settings));, +            }, +        }, +        return new AllocationDeciders(settings, list.toArray(new AllocationDecider[0]));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +    String jvmArgs = System.getProperty('tests.jvm.argline', ''), +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]cluster[/\\]routing[/\\]allocation[/\\]CatAllocationTestCase.java" checks="LineLength" />, +  <suppress files="test[/\\]framework[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]test[/\\]ESAllocationTestCase.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import java.util.Arrays;, +import java.util.Collections;, +    public static final List<Class<? extends AllocationDecider>> DEFAULT_ALLOCATION_DECIDERS =, +        Collections.unmodifiableList(Arrays.asList(, +            MaxRetryAllocationDecider.class,, +            SameShardAllocationDecider.class,, +            FilterAllocationDecider.class,, +            ReplicaAfterPrimaryActiveAllocationDecider.class,, +            ThrottlingAllocationDecider.class,, +            RebalanceOnlyWhenActiveAllocationDecider.class,, +            ClusterRebalanceAllocationDecider.class,, +            ConcurrentRebalanceAllocationDecider.class,, +            EnableAllocationDecider.class,, +            AwarenessAllocationDecider.class,, +            ShardsLimitAllocationDecider.class,, +            NodeVersionAllocationDecider.class,, +            DiskThresholdDecider.class,, +            SnapshotInProgressAllocationDecider.class));, +    private final ExtensionPoint.ClassSet<AllocationDecider> allocationDeciders = new ExtensionPoint.ClassSet<>("allocation_decider", AllocationDecider.class, AllocationDeciders.class);, +    public ClusterModule(Settings settings, ClusterService clusterService) {, +        for (Class<? extends AllocationDecider> decider : ClusterModule.DEFAULT_ALLOCATION_DECIDERS) {, +            registerAllocationDecider(decider);, +        }, +    public void registerAllocationDecider(Class<? extends AllocationDecider> allocationDecider) {, +        allocationDeciders.registerExtension(allocationDecider);, +    }, +]