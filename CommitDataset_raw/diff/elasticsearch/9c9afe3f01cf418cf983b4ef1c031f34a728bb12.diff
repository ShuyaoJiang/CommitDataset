[+++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            Releasables.close(searchContext);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            Releasables.close(searchContext);, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            Releasables.close(result, context);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            Releasables.close(searchContext);, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            Releasables.close(result, context);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +    public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis) {, +            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData, mapperService(),, +        return newQueryShardContext(0, null, threadPool::estimatedTimeInMillis);, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);, +                    rangeQuery = currentFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, context);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java, +            Releasables.close(searchContext);, +++ b/core/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java, +            Releasables.close(result, context);, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +    public QueryShardContext newQueryShardContext(int shardId, IndexReader indexReader, LongSupplier nowInMillis) {, +            shardId, indexSettings, indexCache.bitsetFilterCache(), indexFieldData, mapperService(),, +        return newQueryShardContext(0, null, threadPool::estimatedTimeInMillis);, +++ b/core/src/main/java/org/elasticsearch/index/fieldvisitor/FieldsVisitor.java, +                fieldValues.set(i, fieldType.valueForDisplay(fieldValues.get(i)));, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +                        return getRangeQuerySingle(field, queryText.substring(2), null, true, true, context);, +                return getRangeQuerySingle(field, queryText.substring(1), null, false, true, context);, +                        return getRangeQuerySingle(field, null, queryText.substring(2), true, true, context);, +                return getRangeQuerySingle(field, null, queryText.substring(1), true, false, context);, +            return getRangeQuerySingle(field, part1, part2, startInclusive, endInclusive, context);, +            return getRangeQuerySingle(fields.iterator().next(), part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +                Query q = getRangeQuerySingle(mField, part1, part2, startInclusive, endInclusive, context);, +            boolean startInclusive, boolean endInclusive, QueryShardContext context) {, +                    rangeQuery = dateFieldType.rangeQuery(part1, part2, startInclusive, endInclusive, settings.timeZone(), null, context);]