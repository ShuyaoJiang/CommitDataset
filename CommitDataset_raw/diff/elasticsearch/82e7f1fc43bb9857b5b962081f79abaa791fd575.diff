[+++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +            fieldType().setEagerGlobalOrdinals(eagerGlobalOrdinals);, +            MappedFieldType childJoinFieldType = new ParentFieldType(Defaults.FIELD_TYPE, typeName);, +            childJoinFieldType.setName(ParentFieldMapper.NAME);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +            fieldType().setEagerGlobalOrdinals(eagerGlobalOrdinals);, +            MappedFieldType childJoinFieldType = new ParentFieldType(Defaults.FIELD_TYPE, typeName);, +            childJoinFieldType.setName(ParentFieldMapper.NAME);, +++ b/core/src/test/java/org/elasticsearch/index/mapper/parent/ParentMappingTests.java, +import org.apache.lucene.index.IndexableField;, +import org.elasticsearch.common.bytes.BytesArray;, +import org.elasticsearch.index.IndexService;, +import org.elasticsearch.index.mapper.MapperService.MergeReason;, +import org.elasticsearch.index.mapper.ParseContext;, +    public void testJoinFieldSet() throws Exception {, +        String parentMapping = XContentFactory.jsonBuilder().startObject().startObject("parent_type"), +                .endObject().endObject().string();, +        String childMapping = XContentFactory.jsonBuilder().startObject().startObject("child_type"), +                .startObject("_parent").field("type", "parent_type").endObject(), +                .endObject().endObject().string();, +        IndexService indexService = createIndex("test");, +        indexService.mapperService().merge("parent_type", new CompressedXContent(parentMapping), MergeReason.MAPPING_UPDATE, false);, +        indexService.mapperService().merge("child_type", new CompressedXContent(childMapping), MergeReason.MAPPING_UPDATE, false);, +, +        // Indexing parent doc:, +        DocumentMapper parentDocMapper = indexService.mapperService().documentMapper("parent_type");, +        ParsedDocument doc = parentDocMapper.parse(SourceToParse.source("test", "parent_type", "1122", new BytesArray("{}")));, +        assertEquals(1, getNumberOfFieldWithParentPrefix(doc.rootDoc()));, +        assertEquals("1122", doc.rootDoc().getBinaryValue("_parent#parent_type").utf8ToString());, +, +        // Indexing child doc:, +        DocumentMapper childDocMapper = indexService.mapperService().documentMapper("child_type");, +        doc = childDocMapper.parse(SourceToParse.source("test", "child_type", "1", new BytesArray("{}")).parent("1122"));, +, +        assertEquals(1, getNumberOfFieldWithParentPrefix(doc.rootDoc()));, +        assertEquals("1122", doc.rootDoc().getBinaryValue("_parent#parent_type").utf8ToString());, +    }, +, +    public void testJoinFieldNotSet() throws Exception {, +                .bytes()));, +        assertEquals(0, getNumberOfFieldWithParentPrefix(doc.rootDoc()));, +        mapperService.merge("some_type", new CompressedXContent(mappingSource.string()), MergeReason.MAPPING_UPDATE, false);, +        assertTrue(allFields.contains("_parent"));, +, +    private static int getNumberOfFieldWithParentPrefix(ParseContext.Document doc) {, +        int numFieldWithParentPrefix = 0;, +        for (IndexableField field : doc) {, +            if (field.name().startsWith("_parent")) {, +                numFieldWithParentPrefix++;, +            }, +        }, +        return numFieldWithParentPrefix;, +    }]