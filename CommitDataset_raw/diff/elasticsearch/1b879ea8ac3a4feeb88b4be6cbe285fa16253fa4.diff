[+++ b/modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java, +public class ChildrenAggregatorFactory extends ValuesSourceAggregatorFactory<WithOrdinals, ChildrenAggregatorFactory> {, +    public ChildrenAggregatorFactory(String name,, +                                        ValuesSourceConfig<WithOrdinals> config,, +                                        Query childFilter,, +                                        Query parentFilter,, +                                        SearchContext context,, +                                        AggregatorFactory<?> parent,, +                                        AggregatorFactories.Builder subFactoriesBuilder,, +                                        Map<String, Object> metaData) throws IOException {, +, +    protected Aggregator createUnmapped(Aggregator parent,, +                                        List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {, +    protected Aggregator doCreateInternal(WithOrdinals valuesSource,, +                                            Aggregator parent,, +                                            boolean collectsFromSingleBucket,, +                                            List<PipelineAggregator> pipelineAggregators,, +                                            Map<String, Object> metaData) throws IOException {, +, +        if (collectsFromSingleBucket) {, +        } else {, +            return asMultiBucketAggregator(this, context, parent);, +        }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java, +public class ChildrenAggregatorFactory extends ValuesSourceAggregatorFactory<WithOrdinals, ChildrenAggregatorFactory> {, +    public ChildrenAggregatorFactory(String name,, +                                        ValuesSourceConfig<WithOrdinals> config,, +                                        Query childFilter,, +                                        Query parentFilter,, +                                        SearchContext context,, +                                        AggregatorFactory<?> parent,, +                                        AggregatorFactories.Builder subFactoriesBuilder,, +                                        Map<String, Object> metaData) throws IOException {, +, +    protected Aggregator createUnmapped(Aggregator parent,, +                                        List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {, +    protected Aggregator doCreateInternal(WithOrdinals valuesSource,, +                                            Aggregator parent,, +                                            boolean collectsFromSingleBucket,, +                                            List<PipelineAggregator> pipelineAggregators,, +                                            Map<String, Object> metaData) throws IOException {, +, +        if (collectsFromSingleBucket) {, +        } else {, +            return asMultiBucketAggregator(this, context, parent);, +        }, +++ b/modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentJoinAggregator.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.join.aggregations;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.SortedSetDocValues;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.Scorable;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.ScoreMode;, +import org.apache.lucene.search.Weight;, +import org.apache.lucene.util.Bits;, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.common.lucene.Lucene;, +import org.elasticsearch.common.util.BitArray;, +import org.elasticsearch.common.util.LongHash;, +import org.elasticsearch.search.aggregations.Aggregator;, +import org.elasticsearch.search.aggregations.AggregatorFactories;, +import org.elasticsearch.search.aggregations.LeafBucketCollector;, +import org.elasticsearch.search.aggregations.bucket.BucketsAggregator;, +import org.elasticsearch.search.aggregations.bucket.SingleBucketAggregator;, +import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator;, +import org.elasticsearch.search.aggregations.support.ValuesSource;, +import org.elasticsearch.search.internal.SearchContext;, +, +import java.io.IOException;, +import java.util.List;, +import java.util.Map;, +, +/**, + * An aggregator that joins documents based on global ordinals., + * Global ordinals that match the main query and the <code>inFilter</code> query are replayed, + * with documents matching the <code>outFilter</code> query., + */, +public abstract class ParentJoinAggregator extends BucketsAggregator implements SingleBucketAggregator {]