[+++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.core.internal.io.IOUtils;, +    private static final Predicate<DiscoveryNode> DEFAULT_NODE_PREDICATE = (node) -> Version.CURRENT.isCompatible(node.getVersion()), +            && (node.isMasterNode() == false  || node.isDataNode() || node.isIngestNode());, +, +                        getNodePredicate(settings));, +    static Predicate<DiscoveryNode> getNodePredicate(Settings settings) {, +        if (REMOTE_NODE_ATTRIBUTE.exists(settings)) {, +            // nodes can be tagged with node.attr.remote_gateway: true to allow a node to be a gateway node for cross cluster search, +            String attribute = REMOTE_NODE_ATTRIBUTE.get(settings);, +            return DEFAULT_NODE_PREDICATE.and((node) -> Booleans.parseBoolean(node.getAttributes().getOrDefault(attribute, "false")));, +        }, +        return DEFAULT_NODE_PREDICATE;, +    }, +, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java, +import org.elasticsearch.client.Client;, +import org.elasticsearch.core.internal.io.IOUtils;, +    private static final Predicate<DiscoveryNode> DEFAULT_NODE_PREDICATE = (node) -> Version.CURRENT.isCompatible(node.getVersion()), +            && (node.isMasterNode() == false  || node.isDataNode() || node.isIngestNode());, +, +                        getNodePredicate(settings));, +    static Predicate<DiscoveryNode> getNodePredicate(Settings settings) {, +        if (REMOTE_NODE_ATTRIBUTE.exists(settings)) {, +            // nodes can be tagged with node.attr.remote_gateway: true to allow a node to be a gateway node for cross cluster search, +            String attribute = REMOTE_NODE_ATTRIBUTE.get(settings);, +            return DEFAULT_NODE_PREDICATE.and((node) -> Booleans.parseBoolean(node.getAttributes().getOrDefault(attribute, "false")));, +        }, +        return DEFAULT_NODE_PREDICATE;, +    }, +, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java, +import org.elasticsearch.core.internal.io.IOUtils;, +import org.elasticsearch.test.VersionUtils;, +import java.util.EnumSet;, +import java.util.function.Predicate;, +    public void testRemoteNodeRoles() throws IOException, InterruptedException {, +        final Settings settings = Settings.EMPTY;, +        final List<DiscoveryNode> knownNodes = new CopyOnWriteArrayList<>();, +        final Settings data = Settings.builder().put("node.master", false).build();, +        final Settings dedicatedMaster = Settings.builder().put("node.data", false).put("node.ingest", "false").build();, +        try (MockTransportService c1N1 =, +                     startTransport("cluster_1_node_1", knownNodes, Version.CURRENT, dedicatedMaster);, +             MockTransportService c1N2 =, +                     startTransport("cluster_1_node_2", knownNodes, Version.CURRENT, data);, +             MockTransportService c2N1 =, +                     startTransport("cluster_2_node_1", knownNodes, Version.CURRENT, dedicatedMaster);, +             MockTransportService c2N2 =, +                     startTransport("cluster_2_node_2", knownNodes, Version.CURRENT, data)) {, +            final DiscoveryNode c1N1Node = c1N1.getLocalDiscoNode();, +            final DiscoveryNode c1N2Node = c1N2.getLocalDiscoNode();, +            final DiscoveryNode c2N1Node = c2N1.getLocalDiscoNode();, +            final DiscoveryNode c2N2Node = c2N2.getLocalDiscoNode();, +            knownNodes.add(c1N1Node);, +            knownNodes.add(c1N2Node);, +            knownNodes.add(c2N1Node);, +            knownNodes.add(c2N2Node);, +            Collections.shuffle(knownNodes, random());, +, +            try (MockTransportService transportService = MockTransportService.createNewService(, +                    settings,, +                    Version.CURRENT,, +                    threadPool,, +                    null)) {, +                transportService.start();, +                transportService.acceptIncomingRequests();, +                final Settings.Builder builder = Settings.builder();, +                builder.putList("search.remote.cluster_1.seeds", c1N1Node.getAddress().toString());, +                builder.putList("search.remote.cluster_2.seeds", c2N1Node.getAddress().toString());, +                try (RemoteClusterService service = new RemoteClusterService(settings, transportService)) {, +                    assertFalse(service.isCrossClusterSearchEnabled());, +                    service.initializeRemoteClusters();, +                    assertFalse(service.isCrossClusterSearchEnabled());, +, +                    final InetSocketAddress c1N1Address = c1N1Node.getAddress().address();, +                    final InetSocketAddress c1N2Address = c1N2Node.getAddress().address();, +                    final InetSocketAddress c2N1Address = c2N1Node.getAddress().address();, +                    final InetSocketAddress c2N2Address = c2N2Node.getAddress().address();, +, +                    final CountDownLatch firstLatch = new CountDownLatch(1);, +                    service.updateRemoteCluster(, +                            "cluster_1",, +                            Arrays.asList(c1N1Address, c1N2Address),, +                            connectionListener(firstLatch));, +                    firstLatch.await();, +, +                    final CountDownLatch secondLatch = new CountDownLatch(1);, +                    service.updateRemoteCluster(, +                            "cluster_2",, +                            Arrays.asList(c2N1Address, c2N2Address),, +                            connectionListener(secondLatch));, +                    secondLatch.await();, +, +                    assertTrue(service.isCrossClusterSearchEnabled());, +                    assertTrue(service.isRemoteClusterRegistered("cluster_1"));, +                    assertFalse(service.isRemoteNodeConnected("cluster_1", c1N1Node));, +                    assertTrue(service.isRemoteNodeConnected("cluster_1", c1N2Node));, +                    assertTrue(service.isRemoteClusterRegistered("cluster_2"));, +                    assertFalse(service.isRemoteNodeConnected("cluster_2", c2N1Node));]