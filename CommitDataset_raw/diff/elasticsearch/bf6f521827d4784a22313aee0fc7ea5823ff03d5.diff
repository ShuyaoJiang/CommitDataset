[+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a0,params.v0))",, +            filterScript.get("source"));, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a0,params.v0))",, +            filterScript.get("source"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/AggFilter.java, +import org.elasticsearch.xpack.sql.expression.gen.script.Scripts;, +        // make script null safe, +        this.scriptTemplate = Scripts.nullSafeFilter(scriptTemplate);, +++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(InternalSqlScriptUtils.gt(params.a0,params.v0))",, +            filterScript.get("source"));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/AggFilter.java, +import org.elasticsearch.xpack.sql.expression.gen.script.Scripts;, +        // make script null safe, +        this.scriptTemplate = Scripts.nullSafeFilter(scriptTemplate);, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/planner/QueryTranslatorTests.java, +import org.elasticsearch.xpack.sql.querydsl.agg.AggFilter;, +    public void testTranslateInExpression_WhereClause_Painless() {, +        LogicalPlan p = plan("SELECT int FROM test WHERE POWER(int, 2) IN (10, null, 20, 30 - 10)");, +        assertNull(translation.aggFilter);, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(" +, +            "InternalSqlScriptUtils.power(InternalSqlScriptUtils.docValue(doc,params.v0),params.v1)==10 || " +, +            "InternalSqlScriptUtils.power(InternalSqlScriptUtils.docValue(doc,params.v0),params.v1)==20)",, +            sq.script().toString());, +        assertEquals("[{v=int}, {v=2}]", sq.script().params().toString());, +    public void testTranslateInExpression_HavingClause_Painless() {, +        LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IN (10, 20, 30 - 10)");, +        QueryTranslation translation = QueryTranslator.toQuery(condition, true);, +        assertNull(translation.query);, +        AggFilter aggFilter = translation.aggFilter;, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(params.a0==10 || params.a0==20)",, +            aggFilter.scriptTemplate().toString());, +        assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=MAX(int){a->"));, +    }, +, +    public void testTranslateInExpression_HavingClause_PainlessOneArg() {, +        LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IN (10, 30 - 20)");, +        assertTrue(p instanceof Project);, +        assertTrue(p.children().get(0) instanceof Filter);, +        Expression condition = ((Filter) p.children().get(0)).condition();, +        assertFalse(condition.foldable());, +        QueryTranslation translation = QueryTranslator.toQuery(condition, true);, +        assertNull(translation.query);, +        AggFilter aggFilter = translation.aggFilter;, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(params.a0==10)",, +            aggFilter.scriptTemplate().toString());, +        assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=MAX(int){a->"));, +, +    }, +, +    public void testTranslateInExpression_HavingClause_PainlessAndNullHandling() {, +        LogicalPlan p = plan("SELECT keyword, max(int) FROM test GROUP BY keyword HAVING max(int) IN (10, null, 20, 30, null, 30 - 10)");, +        assertTrue(p instanceof Project);, +        assertTrue(p.children().get(0) instanceof Filter);, +        Expression condition = ((Filter) p.children().get(0)).condition();, +        assertFalse(condition.foldable());, +        QueryTranslation translation = QueryTranslator.toQuery(condition, true);, +        assertNull(translation.query);, +        AggFilter aggFilter = translation.aggFilter;, +        assertEquals("InternalSqlScriptUtils.nullSafeFilter(params.a0==10 || params.a0==20 || params.a0==30)",, +            aggFilter.scriptTemplate().toString());, +        assertThat(aggFilter.scriptTemplate().params().toString(), startsWith("[{a=MAX(int){a->"));]