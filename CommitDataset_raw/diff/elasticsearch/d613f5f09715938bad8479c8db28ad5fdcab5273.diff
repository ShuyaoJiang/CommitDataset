[+++ b/src/main/java/org/elasticsearch/cloud/azure/blobstore/AbstractAzureBlobContainer.java, +import java.io.FileNotFoundException;, +            } catch (ServiceException e) {, +                if (e.getHttpStatusCode() == 404) {, +                    listener.onFailure(new FileNotFoundException(e.getMessage()));, +                } else {, +                    listener.onFailure(e);, +                }, +++ b/src/main/java/org/elasticsearch/cloud/azure/blobstore/AbstractAzureBlobContainer.java, +import java.io.FileNotFoundException;, +            } catch (ServiceException e) {, +                if (e.getHttpStatusCode() == 404) {, +                    listener.onFailure(new FileNotFoundException(e.getMessage()));, +                } else {, +                    listener.onFailure(e);, +                }, +++ b/src/test/java/org/elasticsearch/repositories/azure/AzureSnapshotRestoreITest.java, +import org.elasticsearch.snapshots.SnapshotMissingException;, +import static org.hamcrest.Matchers.*;, +     * Test case for issue #23: https://github.com/elasticsearch/elasticsearch-cloud-azure/issues/23, +     */, +    @Test, +    public void testNonExistingRepo_23() {, +        Client client = client();, +        logger.info("-->  creating azure repository with path [{}]", basePath);, +        PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository("test-repo"), +                .setType("azure").setSettings(ImmutableSettings.settingsBuilder(), +                                .put(AzureStorageService.Fields.CONTAINER, "elasticsearch-integration"), +                                .put(AzureStorageService.Fields.BASE_PATH, basePath), +                                .put(AzureStorageService.Fields.CHUNK_SIZE, randomIntBetween(1000, 10000)), +                ).get();, +        assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));, +, +        logger.info("--> restore non existing snapshot");, +        try {, +            client.admin().cluster().prepareRestoreSnapshot("test-repo", "no-existing-snapshot").setWaitForCompletion(true).execute().actionGet();, +            fail("Shouldn't be here");, +        } catch (SnapshotMissingException ex) {, +            // Expected, +        }, +    }, +, +    /**]