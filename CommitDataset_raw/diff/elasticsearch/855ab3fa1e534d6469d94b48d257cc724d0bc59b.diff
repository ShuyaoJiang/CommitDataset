[+++ b/server/src/main/java/org/elasticsearch/index/seqno/SeqNoStats.java, +import java.util.Objects;, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        final SeqNoStats that = (SeqNoStats) o;, +        return maxSeqNo == that.maxSeqNo &&, +            localCheckpoint == that.localCheckpoint &&, +            globalCheckpoint == that.globalCheckpoint;, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(maxSeqNo, localCheckpoint, globalCheckpoint);, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/index/seqno/SeqNoStats.java, +import java.util.Objects;, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        final SeqNoStats that = (SeqNoStats) o;, +        return maxSeqNo == that.maxSeqNo &&, +            localCheckpoint == that.localCheckpoint &&, +            globalCheckpoint == that.globalCheckpoint;, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(maxSeqNo, localCheckpoint, globalCheckpoint);, +    }, +, +    @Override, +++ b/server/src/test/java/org/elasticsearch/index/seqno/SequenceNumbersTests.java, +import org.elasticsearch.test.EqualsHashCodeTestUtils;, +    public void testSeqNoStatsEqualsAndHashCode() {, +        final long maxSeqNo = randomLongBetween(SequenceNumbers.UNASSIGNED_SEQ_NO, Long.MAX_VALUE);, +        final long localCheckpoint = randomLongBetween(SequenceNumbers.UNASSIGNED_SEQ_NO, maxSeqNo);, +        final long globalCheckpoint = randomLongBetween(SequenceNumbers.UNASSIGNED_SEQ_NO, localCheckpoint);, +        EqualsHashCodeTestUtils.checkEqualsAndHashCode(new SeqNoStats(maxSeqNo, localCheckpoint, globalCheckpoint),, +            stats -> new SeqNoStats(stats.getMaxSeqNo(), stats.getLocalCheckpoint(), stats.getGlobalCheckpoint()));, +    }, +++ b/server/src/main/java/org/elasticsearch/index/seqno/SeqNoStats.java, +import java.util.Objects;, +    public boolean equals(Object o) {, +        if (this == o) return true;, +        if (o == null || getClass() != o.getClass()) return false;, +        final SeqNoStats that = (SeqNoStats) o;, +        return maxSeqNo == that.maxSeqNo &&, +            localCheckpoint == that.localCheckpoint &&, +            globalCheckpoint == that.globalCheckpoint;, +    }, +, +    @Override, +    public int hashCode() {, +        return Objects.hash(maxSeqNo, localCheckpoint, globalCheckpoint);, +    }, +, +    @Override, +++ b/server/src/test/java/org/elasticsearch/index/seqno/SequenceNumbersTests.java, +import org.elasticsearch.test.EqualsHashCodeTestUtils;, +    public void testSeqNoStatsEqualsAndHashCode() {, +        final long maxSeqNo = randomLongBetween(SequenceNumbers.UNASSIGNED_SEQ_NO, Long.MAX_VALUE);, +        final long localCheckpoint = randomLongBetween(SequenceNumbers.UNASSIGNED_SEQ_NO, maxSeqNo);, +        final long globalCheckpoint = randomLongBetween(SequenceNumbers.UNASSIGNED_SEQ_NO, localCheckpoint);, +        EqualsHashCodeTestUtils.checkEqualsAndHashCode(new SeqNoStats(maxSeqNo, localCheckpoint, globalCheckpoint),, +            stats -> new SeqNoStats(stats.getMaxSeqNo(), stats.getLocalCheckpoint(), stats.getGlobalCheckpoint()));, +    }, +++ b/test/framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java, +                        assertThat(replicaShardRouting + " seq_no_stats mismatch", seqNoStats, equalTo(primarySeqNoStats));]