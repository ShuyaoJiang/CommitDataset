[+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        operationResult = executeFailureNoOpOnReplica(failure, primaryTerm, replica);, +    private static Engine.NoOpResult executeFailureNoOpOnReplica(BulkItemResponse.Failure primaryFailure, long primaryTerm,, +                                                                 IndexShard replica) throws IOException {, +        final Engine.NoOp noOp = replica.prepareMarkingSeqNoAsNoOpOnReplica(, +                primaryFailure.getSeqNo(), primaryTerm, primaryFailure.getMessage());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        operationResult = executeFailureNoOpOnReplica(failure, primaryTerm, replica);, +    private static Engine.NoOpResult executeFailureNoOpOnReplica(BulkItemResponse.Failure primaryFailure, long primaryTerm,, +                                                                 IndexShard replica) throws IOException {, +        final Engine.NoOp noOp = replica.prepareMarkingSeqNoAsNoOpOnReplica(, +                primaryFailure.getSeqNo(), primaryTerm, primaryFailure.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public Engine.NoOp prepareMarkingSeqNoAsNoOpOnReplica(long seqNo, long opPrimaryTerm, String reason) {, +        assert opPrimaryTerm <= this.primaryTerm : "op term [ " + opPrimaryTerm + " ] > shard term [" + this.primaryTerm + "]";, +        return new Engine.NoOp(seqNo, opPrimaryTerm, Engine.Operation.Origin.REPLICA, startTime, reason);, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        operationResult = executeFailureNoOpOnReplica(failure, primaryTerm, replica);, +    private static Engine.NoOpResult executeFailureNoOpOnReplica(BulkItemResponse.Failure primaryFailure, long primaryTerm,, +                                                                 IndexShard replica) throws IOException {, +        final Engine.NoOp noOp = replica.prepareMarkingSeqNoAsNoOpOnReplica(, +                primaryFailure.getSeqNo(), primaryTerm, primaryFailure.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public Engine.NoOp prepareMarkingSeqNoAsNoOpOnReplica(long seqNo, long opPrimaryTerm, String reason) {, +        assert opPrimaryTerm <= this.primaryTerm : "op term [ " + opPrimaryTerm + " ] > shard term [" + this.primaryTerm + "]";, +        return new Engine.NoOp(seqNo, opPrimaryTerm, Engine.Operation.Origin.REPLICA, startTime, reason);, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportShardBulkActionTests.java, +        bulkShardRequest.primaryTerm(randomIntBetween(1, (int) shard.getPrimaryTerm()));, +        assertThat(noOpValue.primaryTerm(), equalTo(bulkShardRequest.primaryTerm()));, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        operationResult = executeFailureNoOpOnReplica(failure, primaryTerm, replica);, +    private static Engine.NoOpResult executeFailureNoOpOnReplica(BulkItemResponse.Failure primaryFailure, long primaryTerm,, +                                                                 IndexShard replica) throws IOException {, +        final Engine.NoOp noOp = replica.prepareMarkingSeqNoAsNoOpOnReplica(, +                primaryFailure.getSeqNo(), primaryTerm, primaryFailure.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public Engine.NoOp prepareMarkingSeqNoAsNoOpOnReplica(long seqNo, long opPrimaryTerm, String reason) {, +        assert opPrimaryTerm <= this.primaryTerm : "op term [ " + opPrimaryTerm + " ] > shard term [" + this.primaryTerm + "]";, +        return new Engine.NoOp(seqNo, opPrimaryTerm, Engine.Operation.Origin.REPLICA, startTime, reason);, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportShardBulkActionTests.java, +        bulkShardRequest.primaryTerm(randomIntBetween(1, (int) shard.getPrimaryTerm()));, +        assertThat(noOpValue.primaryTerm(), equalTo(bulkShardRequest.primaryTerm()));, +++ b/core/src/test/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java, +            .primaryTerm(0, randomIntBetween(1, 100));, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        operationResult = executeFailureNoOpOnReplica(failure, primaryTerm, replica);, +    private static Engine.NoOpResult executeFailureNoOpOnReplica(BulkItemResponse.Failure primaryFailure, long primaryTerm,, +                                                                 IndexShard replica) throws IOException {, +        final Engine.NoOp noOp = replica.prepareMarkingSeqNoAsNoOpOnReplica(, +                primaryFailure.getSeqNo(), primaryTerm, primaryFailure.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public Engine.NoOp prepareMarkingSeqNoAsNoOpOnReplica(long seqNo, long opPrimaryTerm, String reason) {, +        assert opPrimaryTerm <= this.primaryTerm : "op term [ " + opPrimaryTerm + " ] > shard term [" + this.primaryTerm + "]";, +        return new Engine.NoOp(seqNo, opPrimaryTerm, Engine.Operation.Origin.REPLICA, startTime, reason);, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportShardBulkActionTests.java, +        bulkShardRequest.primaryTerm(randomIntBetween(1, (int) shard.getPrimaryTerm()));, +        assertThat(noOpValue.primaryTerm(), equalTo(bulkShardRequest.primaryTerm()));, +++ b/core/src/test/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java, +            .primaryTerm(0, randomIntBetween(1, 100));, +++ b/core/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPrimaryTerm(), failureMessage);, +            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPrimaryTerm(), failureMessage);, +            long expectedPrimaryTerm,, +                    assertThat(op.primaryTerm(), equalTo(expectedPrimaryTerm));, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        operationResult = executeFailureNoOpOnReplica(failure, primaryTerm, replica);, +    private static Engine.NoOpResult executeFailureNoOpOnReplica(BulkItemResponse.Failure primaryFailure, long primaryTerm,, +                                                                 IndexShard replica) throws IOException {, +        final Engine.NoOp noOp = replica.prepareMarkingSeqNoAsNoOpOnReplica(, +                primaryFailure.getSeqNo(), primaryTerm, primaryFailure.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public Engine.NoOp prepareMarkingSeqNoAsNoOpOnReplica(long seqNo, long opPrimaryTerm, String reason) {, +        assert opPrimaryTerm <= this.primaryTerm : "op term [ " + opPrimaryTerm + " ] > shard term [" + this.primaryTerm + "]";, +        return new Engine.NoOp(seqNo, opPrimaryTerm, Engine.Operation.Origin.REPLICA, startTime, reason);, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportShardBulkActionTests.java, +        bulkShardRequest.primaryTerm(randomIntBetween(1, (int) shard.getPrimaryTerm()));, +        assertThat(noOpValue.primaryTerm(), equalTo(bulkShardRequest.primaryTerm()));, +++ b/core/src/test/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java, +            .primaryTerm(0, randomIntBetween(1, 100));, +++ b/core/src/test/java/org/elasticsearch/index/replication/IndexLevelReplicationTests.java, +            assertNoOpTranslogOperationForDocumentFailure(shards, 1, shards.getPrimary().getPrimaryTerm(), failureMessage);, +            assertNoOpTranslogOperationForDocumentFailure(shards, 2, shards.getPrimary().getPrimaryTerm(), failureMessage);, +            long expectedPrimaryTerm,, +                    assertThat(op.primaryTerm(), equalTo(expectedPrimaryTerm));, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +                assertEquals(newShard.getPrimaryTerm(), operation.primaryTerm());, +++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java, +                        operationResult = executeFailureNoOpOnReplica(failure, primaryTerm, replica);, +    private static Engine.NoOpResult executeFailureNoOpOnReplica(BulkItemResponse.Failure primaryFailure, long primaryTerm,, +                                                                 IndexShard replica) throws IOException {, +        final Engine.NoOp noOp = replica.prepareMarkingSeqNoAsNoOpOnReplica(, +                primaryFailure.getSeqNo(), primaryTerm, primaryFailure.getMessage());, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +    public Engine.NoOp prepareMarkingSeqNoAsNoOpOnReplica(long seqNo, long opPrimaryTerm, String reason) {, +        assert opPrimaryTerm <= this.primaryTerm : "op term [ " + opPrimaryTerm + " ] > shard term [" + this.primaryTerm + "]";, +        return new Engine.NoOp(seqNo, opPrimaryTerm, Engine.Operation.Origin.REPLICA, startTime, reason);, +++ b/core/src/test/java/org/elasticsearch/action/bulk/TransportShardBulkActionTests.java, +        bulkShardRequest.primaryTerm(randomIntBetween(1, (int) shard.getPrimaryTerm()));, +        assertThat(noOpValue.primaryTerm(), equalTo(bulkShardRequest.primaryTerm()));, +++ b/core/src/test/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java]