[+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +            indexSettings.getSettings().getAsTime(IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING, IndexingMemoryController.SHARD_DEFAULT_INACTIVE_TIME));, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +            indexSettings.getSettings().getAsTime(IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING, IndexingMemoryController.SHARD_DEFAULT_INACTIVE_TIME));, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +    public static final String INDEX_BUFFER_SIZE_SETTING = "indices.memory.index_buffer_size";, +    public static final String MIN_INDEX_BUFFER_SIZE_SETTING = "indices.memory.min_index_buffer_size";, +    public static final String MAX_INDEX_BUFFER_SIZE_SETTING = "indices.memory.max_index_buffer_size";, +    public static final String SHARD_INACTIVE_TIME_SETTING = "indices.memory.shard_inactive_time";, +, +    /** Default value (5 minutes) for indices.memory.shard_inactive_time */, +    public static final TimeValue SHARD_DEFAULT_INACTIVE_TIME = TimeValue.timeValueMinutes(5);, +    public static final String SHARD_MEMORY_INTERVAL_TIME_SETTING = "indices.memory.interval";, +        String indexingBufferSetting = this.settings.get(INDEX_BUFFER_SIZE_SETTING, "10%");, +            ByteSizeValue minIndexingBuffer = this.settings.getAsBytesSize(MIN_INDEX_BUFFER_SIZE_SETTING, new ByteSizeValue(48, ByteSizeUnit.MB));, +            ByteSizeValue maxIndexingBuffer = this.settings.getAsBytesSize(MAX_INDEX_BUFFER_SIZE_SETTING, null);, +            if (maxIndexingBuffer != null && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {, +            indexingBuffer = ByteSizeValue.parseBytesSizeValue(indexingBufferSetting, INDEX_BUFFER_SIZE_SETTING);, +        this.inactiveTime = this.settings.getAsTime(SHARD_INACTIVE_TIME_SETTING, SHARD_DEFAULT_INACTIVE_TIME);, +        this.interval = this.settings.getAsTime(SHARD_MEMORY_INTERVAL_TIME_SETTING, TimeValue.timeValueSeconds(5));, +                     SHARD_INACTIVE_TIME_SETTING, this.inactiveTime,, +                     SHARD_MEMORY_INTERVAL_TIME_SETTING, this.interval);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +            indexSettings.getSettings().getAsTime(IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING, IndexingMemoryController.SHARD_DEFAULT_INACTIVE_TIME));, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +    public static final String INDEX_BUFFER_SIZE_SETTING = "indices.memory.index_buffer_size";, +    public static final String MIN_INDEX_BUFFER_SIZE_SETTING = "indices.memory.min_index_buffer_size";, +    public static final String MAX_INDEX_BUFFER_SIZE_SETTING = "indices.memory.max_index_buffer_size";, +    public static final String SHARD_INACTIVE_TIME_SETTING = "indices.memory.shard_inactive_time";, +, +    /** Default value (5 minutes) for indices.memory.shard_inactive_time */, +    public static final TimeValue SHARD_DEFAULT_INACTIVE_TIME = TimeValue.timeValueMinutes(5);, +    public static final String SHARD_MEMORY_INTERVAL_TIME_SETTING = "indices.memory.interval";, +        String indexingBufferSetting = this.settings.get(INDEX_BUFFER_SIZE_SETTING, "10%");, +            ByteSizeValue minIndexingBuffer = this.settings.getAsBytesSize(MIN_INDEX_BUFFER_SIZE_SETTING, new ByteSizeValue(48, ByteSizeUnit.MB));, +            ByteSizeValue maxIndexingBuffer = this.settings.getAsBytesSize(MAX_INDEX_BUFFER_SIZE_SETTING, null);, +            if (maxIndexingBuffer != null && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {, +            indexingBuffer = ByteSizeValue.parseBytesSizeValue(indexingBufferSetting, INDEX_BUFFER_SIZE_SETTING);, +        this.inactiveTime = this.settings.getAsTime(SHARD_INACTIVE_TIME_SETTING, SHARD_DEFAULT_INACTIVE_TIME);, +        this.interval = this.settings.getAsTime(SHARD_MEMORY_INTERVAL_TIME_SETTING, TimeValue.timeValueSeconds(5));, +                     SHARD_INACTIVE_TIME_SETTING, this.inactiveTime,, +                     SHARD_MEMORY_INTERVAL_TIME_SETTING, this.interval);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.range.RangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.IPv4RangeAggregatorBuilder;, +        registerAggregation(RangeAggregatorBuilder::new, new RangeParser(), RangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(DateRangeAggregatorBuilder::new, new DateRangeParser(), DateRangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(IPv4RangeAggregatorBuilder::new, new IpRangeParser(), IPv4RangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +                    BootstrapSettings.CTRLHANDLER_SETTING, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +            indexSettings.getSettings().getAsTime(IndexingMemoryController.SHARD_INACTIVE_TIME_SETTING, IndexingMemoryController.SHARD_DEFAULT_INACTIVE_TIME));, +++ b/core/src/main/java/org/elasticsearch/indices/IndexingMemoryController.java, +    public static final String INDEX_BUFFER_SIZE_SETTING = "indices.memory.index_buffer_size";, +    public static final String MIN_INDEX_BUFFER_SIZE_SETTING = "indices.memory.min_index_buffer_size";, +    public static final String MAX_INDEX_BUFFER_SIZE_SETTING = "indices.memory.max_index_buffer_size";, +    public static final String SHARD_INACTIVE_TIME_SETTING = "indices.memory.shard_inactive_time";, +, +    /** Default value (5 minutes) for indices.memory.shard_inactive_time */, +    public static final TimeValue SHARD_DEFAULT_INACTIVE_TIME = TimeValue.timeValueMinutes(5);, +    public static final String SHARD_MEMORY_INTERVAL_TIME_SETTING = "indices.memory.interval";, +        String indexingBufferSetting = this.settings.get(INDEX_BUFFER_SIZE_SETTING, "10%");, +            ByteSizeValue minIndexingBuffer = this.settings.getAsBytesSize(MIN_INDEX_BUFFER_SIZE_SETTING, new ByteSizeValue(48, ByteSizeUnit.MB));, +            ByteSizeValue maxIndexingBuffer = this.settings.getAsBytesSize(MAX_INDEX_BUFFER_SIZE_SETTING, null);, +            if (maxIndexingBuffer != null && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {, +            indexingBuffer = ByteSizeValue.parseBytesSizeValue(indexingBufferSetting, INDEX_BUFFER_SIZE_SETTING);, +        this.inactiveTime = this.settings.getAsTime(SHARD_INACTIVE_TIME_SETTING, SHARD_DEFAULT_INACTIVE_TIME);, +        this.interval = this.settings.getAsTime(SHARD_MEMORY_INTERVAL_TIME_SETTING, TimeValue.timeValueSeconds(5));, +                     SHARD_INACTIVE_TIME_SETTING, this.inactiveTime,, +                     SHARD_MEMORY_INTERVAL_TIME_SETTING, this.interval);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.range.RangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.date.DateRangeAggregatorBuilder;, +import org.elasticsearch.search.aggregations.bucket.range.ipv4.IPv4RangeAggregatorBuilder;, +        registerAggregation(RangeAggregatorBuilder::new, new RangeParser(), RangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(DateRangeAggregatorBuilder::new, new DateRangeParser(), DateRangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerAggregation(IPv4RangeAggregatorBuilder::new, new IpRangeParser(), IPv4RangeAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/AbstractRangeBuilder.java, +import org.elasticsearch.common.io.stream.StreamInputReader;, +, +    /**, +     * Read from a stream., +     */, +    protected AbstractRangeBuilder(StreamInput in, InternalRange.Factory<?, ?> rangeFactory, StreamInputReader<R> rangeReader), +            throws IOException {, +        super(in, rangeFactory.type(), rangeFactory.getValueSourceType(), rangeFactory.getValueType());, +        this.rangeFactory = rangeFactory;, +        ranges = in.readList(rangeReader);, +        keyed = in.readBoolean();, +    }, +]