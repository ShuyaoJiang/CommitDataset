[+++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +import org.elasticsearch.index.shard.IndexingStats;, +import java.util.stream.Collectors;, +        table.addCell("node.role", "alias:r,role,nodeRole;desc:m:master eligible node, d:data node, i:ingest node, -:coordinating node only");, +        table.addCell("master", "alias:m;desc:*:current master");, +, +            String roles;, +            if (node.getRoles().size() == 0) {, +                roles = "-";, +            } else {, +                roles = node.getRoles().stream().map(DiscoveryNode.Role::getAbbreviation).collect(Collectors.joining());, +            }, +            table.addCell(roles);, +            table.addCell(masterId == null ? "x" : masterId.equals(node.id()) ? "*" : "-");, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +import org.elasticsearch.index.shard.IndexingStats;, +import java.util.stream.Collectors;, +        table.addCell("node.role", "alias:r,role,nodeRole;desc:m:master eligible node, d:data node, i:ingest node, -:coordinating node only");, +        table.addCell("master", "alias:m;desc:*:current master");, +, +            String roles;, +            if (node.getRoles().size() == 0) {, +                roles = "-";, +            } else {, +                roles = node.getRoles().stream().map(DiscoveryNode.Role::getAbbreviation).collect(Collectors.joining());, +            }, +            table.addCell(roles);, +            table.addCell(masterId == null ? "x" : masterId.equals(node.id()) ? "*" : "-");, +++ b/docs/reference/cat/nodes.asciidoc, +uptime node.role master name, +  3.5h di        -      Boneyard, +  3.5h md        *      Athena, +  3.5h i         -      Zarek, +|`node.role` |`r`, `role`, `dc`, `nodeRole` |Yes |Master eligible node (m);, +Data node (d); Ingest node (i); Coordinating node only (-) |mdi, +|`master` |`m` |Yes |Current master (*); |*, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestNodesAction.java, +import org.elasticsearch.index.shard.IndexingStats;, +import java.util.stream.Collectors;, +        table.addCell("node.role", "alias:r,role,nodeRole;desc:m:master eligible node, d:data node, i:ingest node, -:coordinating node only");, +        table.addCell("master", "alias:m;desc:*:current master");, +, +            String roles;, +            if (node.getRoles().size() == 0) {, +                roles = "-";, +            } else {, +                roles = node.getRoles().stream().map(DiscoveryNode.Role::getAbbreviation).collect(Collectors.joining());, +            }, +            table.addCell(roles);, +            table.addCell(masterId == null ? "x" : masterId.equals(node.id()) ? "*" : "-");, +++ b/docs/reference/cat/nodes.asciidoc, +uptime node.role master name, +  3.5h di        -      Boneyard, +  3.5h md        *      Athena, +  3.5h i         -      Zarek, +|`node.role` |`r`, `role`, `dc`, `nodeRole` |Yes |Master eligible node (m);, +Data node (d); Ingest node (i); Coordinating node only (-) |mdi, +|`master` |`m` |Yes |Current master (*); |*, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/cat.nodes/10_basic.yaml, +               ^  ((\d{1,3}\.){3}\d{1,3}  \s+  \d+            \s+  \d*         \s+ (-)?\d* \s+ ((-)?\d*(\.\d+)?)? \s+ ((-)?\d*(\.\d+)?)?\s+  ((-)?\d*(\.\d+)?)? \s+ (-|[dmi]{1,3}) \s+ [-*x]     \s+   (\S+\s?)+     \n)+  $/, +                  ((\d{1,3}\.){3}\d{1,3}  \s+  \d+             \s+  \d*          \s+ (-)?\d* \s+  ((-)?\d*(\.\d+)?)? \s+ ((-)?\d*(\.\d+)?)? \s+ ((-)?\d*(\.\d+)?)? \s+ (-|[dmi]{1,3}) \s+  [-*x]    \s+   (\S+\s?)+     \n)+  $/]