[+++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +, +    /**, +     * Wraps a given listener and returns a new listener which executes the provided {@code runAfter}, +     * callback when the listener is notified via either {@code #onResponse} or {@code #onFailure}., +     */, +    static <Response> ActionListener<Response> runAfter(ActionListener<Response> delegate, Runnable runAfter) {, +        return new ActionListener<Response>() {, +            @Override, +            public void onResponse(Response response) {, +                try {, +                    delegate.onResponse(response);, +                } finally {, +                    runAfter.run();, +                }, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                try {, +                    delegate.onFailure(e);, +                } finally {, +                    runAfter.run();, +                }, +            }, +        };, +    }, +, +    /**, +     * Wraps a given listener and returns a new listener which makes sure {@link #onResponse(Object)}, +     * and {@link #onFailure(Exception)} of the provided listener will be called at most once., +     */, +    static <Response> ActionListener<Response> notifyOnce(ActionListener<Response> delegate) {, +        return new NotifyOnceListener<Response>() {, +            @Override, +            protected void innerOnResponse(Response response) {, +                delegate.onResponse(response);, +            }, +, +            @Override, +            protected void innerOnFailure(Exception e) {, +                delegate.onFailure(e);, +            }, +        };, +    }, +++ b/server/src/main/java/org/elasticsearch/action/ActionListener.java, +, +    /**, +     * Wraps a given listener and returns a new listener which executes the provided {@code runAfter}, +     * callback when the listener is notified via either {@code #onResponse} or {@code #onFailure}., +     */, +    static <Response> ActionListener<Response> runAfter(ActionListener<Response> delegate, Runnable runAfter) {, +        return new ActionListener<Response>() {, +            @Override, +            public void onResponse(Response response) {, +                try {, +                    delegate.onResponse(response);, +                } finally {, +                    runAfter.run();, +                }, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                try {, +                    delegate.onFailure(e);, +                } finally {, +                    runAfter.run();, +                }, +            }, +        };, +    }, +, +    /**, +     * Wraps a given listener and returns a new listener which makes sure {@link #onResponse(Object)}, +     * and {@link #onFailure(Exception)} of the provided listener will be called at most once., +     */, +    static <Response> ActionListener<Response> notifyOnce(ActionListener<Response> delegate) {, +        return new NotifyOnceListener<Response>() {, +            @Override, +            protected void innerOnResponse(Response response) {, +                delegate.onResponse(response);, +            }, +, +            @Override, +            protected void innerOnFailure(Exception e) {, +                delegate.onFailure(e);, +            }, +        };, +    }, +++ b/server/src/test/java/org/elasticsearch/action/ActionListenerTests.java, +import java.util.concurrent.atomic.AtomicBoolean;, +import static org.hamcrest.Matchers.equalTo;, +, +, +    public void testRunAfter() {, +        {, +            AtomicBoolean afterSuccess = new AtomicBoolean();, +            ActionListener<Object> listener = ActionListener.runAfter(ActionListener.wrap(r -> {}, e -> {}), () -> afterSuccess.set(true));, +            listener.onResponse(null);]