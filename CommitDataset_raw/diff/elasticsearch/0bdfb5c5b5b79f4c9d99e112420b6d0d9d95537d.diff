[+++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +        final Settings settings = Settings.builder().put(defaultSettings).put(pluginsService.updatedSettings()).put(ThreadContext.PREFIX, +            + "." + "transport_client", true).build();, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +        final Settings settings = Settings.builder().put(defaultSettings).put(pluginsService.updatedSettings()).put(ThreadContext.PREFIX, +            + "." + "transport_client", true).build();, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress);, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +        final Settings settings = Settings.builder().put(defaultSettings).put(pluginsService.updatedSettings()).put(ThreadContext.PREFIX, +            + "." + "transport_client", true).build();, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress);, +++ b/server/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java, +        headers = new HashMap<>(headers);, +        headers.remove("transport_client"); // default header on TPC, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +        final Settings settings = Settings.builder().put(defaultSettings).put(pluginsService.updatedSettings()).put(ThreadContext.PREFIX, +            + "." + "transport_client", true).build();, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress);, +++ b/server/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java, +        headers = new HashMap<>(headers);, +        headers.remove("transport_client"); // default header on TPC, +++ b/server/src/test/java/org/elasticsearch/client/transport/TransportClientTests.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +    public void testDefaultHeaderContainsPlugins() {, +        Settings baseSettings = Settings.builder(), +            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +            .build();, +        try (TransportClient client = new MockTransportClient(baseSettings, Arrays.asList(MockPlugin.class))) {, +            ThreadContext threadContext = client.threadPool().getThreadContext();, +            assertEquals("true", threadContext.getHeader("transport_client"));, +            assertEquals("true", threadContext.getHeader("test"));, +        }, +    }, +, +        @Override, +        public Settings additionalSettings() {, +            return Settings.builder().put(ThreadContext.PREFIX + "." + "test", true).build();, +        }, +, +++ b/server/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +        final Settings settings = Settings.builder().put(defaultSettings).put(pluginsService.updatedSettings()).put(ThreadContext.PREFIX, +            + "." + "transport_client", true).build();, +++ b/server/src/main/java/org/elasticsearch/transport/TcpTransport.java, +            threadPool.getThreadContext().putTransient("_remote_address", remoteAddress);, +++ b/server/src/test/java/org/elasticsearch/client/AbstractClientHeadersTestCase.java, +        headers = new HashMap<>(headers);, +        headers.remove("transport_client"); // default header on TPC, +++ b/server/src/test/java/org/elasticsearch/client/transport/TransportClientTests.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +    public void testDefaultHeaderContainsPlugins() {, +        Settings baseSettings = Settings.builder(), +            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir()), +            .build();, +        try (TransportClient client = new MockTransportClient(baseSettings, Arrays.asList(MockPlugin.class))) {, +            ThreadContext threadContext = client.threadPool().getThreadContext();, +            assertEquals("true", threadContext.getHeader("transport_client"));, +            assertEquals("true", threadContext.getHeader("test"));, +        }, +    }, +, +        @Override, +        public Settings additionalSettings() {, +            return Settings.builder().put(ThreadContext.PREFIX + "." + "test", true).build();, +        }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.common.util.concurrent.ThreadContext;, +            builder.put(ThreadContext.PREFIX + "." + "has_xpack", true);]