[+++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +                List<?> nestedParsedSource;, +                    nestedParsedSource = (List<?>) extractedValue;, +                    nestedParsedSource = Collections.singletonList(extractedValue);, +                if ((nestedParsedSource.get(0) instanceof Map) == false &&, +                    nestedObjectMapper.parentObjectMapperAreNested(context.mapperService()) == false) {, +                    throw new IllegalArgumentException("Cannot execute inner hits. One or more parent object fields of nested field [" +, +                        nestedObjectMapper.name() + "] are not nested. All parent fields need to be nested fields too");, +                }, +                sourceAsMap = (Map<String, Object>) nestedParsedSource.get(nested.getOffset());, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +                List<?> nestedParsedSource;, +                    nestedParsedSource = (List<?>) extractedValue;, +                    nestedParsedSource = Collections.singletonList(extractedValue);, +                if ((nestedParsedSource.get(0) instanceof Map) == false &&, +                    nestedObjectMapper.parentObjectMapperAreNested(context.mapperService()) == false) {, +                    throw new IllegalArgumentException("Cannot execute inner hits. One or more parent object fields of nested field [" +, +                        nestedObjectMapper.name() + "] are not nested. All parent fields need to be nested fields too");, +                }, +                sourceAsMap = (Map<String, Object>) nestedParsedSource.get(nested.getOffset());, +++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java, +                .startArray("comments"), +                    .startObject(), +                    .startObject(), +                        .startArray("messages"), +                            .startObject().field("message", "no fox").endObject(), +                        .endArray(), +                    .endObject(), +                .endArray(), +        SearchResponse response = client().prepareSearch("articles").setQuery(nestedQuery("comments.messages",, +            matchQuery("comments.messages.message", "fox"), ScoreMode.Avg).innerHit(new InnerHitBuilder())).get();, +            "not nested. All parent fields need to be nested fields too", response.getShardFailures()[0].getCause().getMessage());, +        response = client().prepareSearch("articles").setQuery(nestedQuery("comments.messages",, +            .setFetchSourceContext(new FetchSourceContext(true)))).get();, +            "not nested. All parent fields need to be nested fields too", response.getShardFailures()[0].getCause().getMessage());, +        response = client().prepareSearch("articles"), +        assertThat(messages.getTotalHits(), equalTo(2L));, +        assertThat(messages.getAt(0).getNestedIdentity().getOffset(), equalTo(2));, +        assertThat(messages.getAt(1).getId(), equalTo("1"));, +        assertThat(messages.getAt(1).getNestedIdentity().getField().string(), equalTo("comments.messages"));, +        assertThat(messages.getAt(1).getNestedIdentity().getOffset(), equalTo(0));, +        assertThat(messages.getAt(1).getNestedIdentity().getChild(), nullValue());]