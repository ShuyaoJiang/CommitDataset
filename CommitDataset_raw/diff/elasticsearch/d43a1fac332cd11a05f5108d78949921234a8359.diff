[+++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.io.UncheckedIOException;, +            IndexSearcher acquire = referenceManager.acquire();, +            AtomicBoolean released = new AtomicBoolean(false);, +            Searcher engineSearcher = new Searcher(source, acquire,, +                () -> {, +                if (released.compareAndSet(false, true)) {, +                        referenceManager.release(acquire);, +                } else {, +                    /* In general, searchers should never be released twice or this would break reference counting. There is one rare case, +                     * when it might happen though: when the request and the Reaper thread would both try to release it in a very short, +                     * amount of time, this is why we only log a warning instead of throwing an exception. */, +                    logger.warn("Searcher was released twice", new IllegalStateException("Double release"));, +                }, +              });, +    public static final class Searcher implements Releasable {, +        private final Closeable onClose;, +        public Searcher(String source, IndexSearcher searcher, Closeable onClose) {, +        public String source() {, +        public IndexReader reader() {, +        public DirectoryReader getDirectoryReader() {, +        public IndexSearcher searcher() {, +                onClose.close();, +                throw new UncheckedIOException("failed to close", e);, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.io.UncheckedIOException;, +            IndexSearcher acquire = referenceManager.acquire();, +            AtomicBoolean released = new AtomicBoolean(false);, +            Searcher engineSearcher = new Searcher(source, acquire,, +                () -> {, +                if (released.compareAndSet(false, true)) {, +                        referenceManager.release(acquire);, +                } else {, +                    /* In general, searchers should never be released twice or this would break reference counting. There is one rare case, +                     * when it might happen though: when the request and the Reaper thread would both try to release it in a very short, +                     * amount of time, this is why we only log a warning instead of throwing an exception. */, +                    logger.warn("Searcher was released twice", new IllegalStateException("Double release"));, +                }, +              });, +    public static final class Searcher implements Releasable {, +        private final Closeable onClose;, +        public Searcher(String source, IndexSearcher searcher, Closeable onClose) {, +        public String source() {, +        public IndexReader reader() {, +        public DirectoryReader getDirectoryReader() {, +        public IndexSearcher searcher() {, +                onClose.close();, +                throw new UncheckedIOException("failed to close", e);, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                                    return new GetResult(new Searcher("realtime_get", new IndexSearcher(reader), reader::close),, +                    warmer.warm(new Searcher("top_reader_warming", searcher, () -> {}));, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.io.UncheckedIOException;, +            IndexSearcher acquire = referenceManager.acquire();, +            AtomicBoolean released = new AtomicBoolean(false);, +            Searcher engineSearcher = new Searcher(source, acquire,, +                () -> {, +                if (released.compareAndSet(false, true)) {, +                        referenceManager.release(acquire);, +                } else {, +                    /* In general, searchers should never be released twice or this would break reference counting. There is one rare case, +                     * when it might happen though: when the request and the Reaper thread would both try to release it in a very short, +                     * amount of time, this is why we only log a warning instead of throwing an exception. */, +                    logger.warn("Searcher was released twice", new IllegalStateException("Double release"));, +                }, +              });, +    public static final class Searcher implements Releasable {, +        private final Closeable onClose;, +        public Searcher(String source, IndexSearcher searcher, Closeable onClose) {, +        public String source() {, +        public IndexReader reader() {, +        public DirectoryReader getDirectoryReader() {, +        public IndexSearcher searcher() {, +                onClose.close();, +                throw new UncheckedIOException("failed to close", e);, +++ b/server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java, +                                    return new GetResult(new Searcher("realtime_get", new IndexSearcher(reader), reader::close),, +                    warmer.warm(new Searcher("top_reader_warming", searcher, () -> {}));, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexSearcherWrapper.java, +            return new Engine.Searcher(engineSearcher.source(), indexSearcher, () ->, +                IOUtils.close(indexSearcher.getIndexReader(), // this will close the wrappers excluding the NonClosingReaderWrapper, +                engineSearcher)); // this will run the closeable on the wrapped engine searcher, +++ b/server/src/main/java/org/elasticsearch/index/engine/Engine.java, +import java.io.UncheckedIOException;, +            IndexSearcher acquire = referenceManager.acquire();, +            AtomicBoolean released = new AtomicBoolean(false);, +            Searcher engineSearcher = new Searcher(source, acquire,, +                () -> {, +                if (released.compareAndSet(false, true)) {, +                        referenceManager.release(acquire);, +                } else {, +                    /* In general, searchers should never be released twice or this would break reference counting. There is one rare case, +                     * when it might happen though: when the request and the Reaper thread would both try to release it in a very short, +                     * amount of time, this is why we only log a warning instead of throwing an exception. */, +                    logger.warn("Searcher was released twice", new IllegalStateException("Double release"));, +                }, +              });, +    public static final class Searcher implements Releasable {, +        private final Closeable onClose;, +        public Searcher(String source, IndexSearcher searcher, Closeable onClose) {]