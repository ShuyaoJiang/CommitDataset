[+++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +import org.elasticsearch.client.Request;, +            Response refreshResponse = client().performRequest(new Request("POST", "/index/_refresh"));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(, +                    Collections.singletonMap("skip_unavailable", randomBoolean())));, +                        () -> client().performRequest(request));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("seeds", null)));, +                        () -> client().performRequest(request));, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setEntity(buildUpdateSettingsRequestBody(settings));, +        Response response = client().performRequest(request);, +++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +import org.elasticsearch.client.Request;, +            Response refreshResponse = client().performRequest(new Request("POST", "/index/_refresh"));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(, +                    Collections.singletonMap("skip_unavailable", randomBoolean())));, +                        () -> client().performRequest(request));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("seeds", null)));, +                        () -> client().performRequest(request));, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setEntity(buildUpdateSettingsRequestBody(settings));, +        Response response = client().performRequest(request);, +++ b/qa/die-with-dignity/src/test/java/org/elasticsearch/qa/die_with_dignity/DieWithDignityIT.java, +import org.elasticsearch.client.Request;, +        IOException e = expectThrows(IOException.class,, +                () -> client().performRequest(new Request("GET", "/_die_with_dignity")));, +++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +import org.elasticsearch.client.Request;, +            Response refreshResponse = client().performRequest(new Request("POST", "/index/_refresh"));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(, +                    Collections.singletonMap("skip_unavailable", randomBoolean())));, +                        () -> client().performRequest(request));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("seeds", null)));, +                        () -> client().performRequest(request));, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setEntity(buildUpdateSettingsRequestBody(settings));, +        Response response = client().performRequest(request);, +++ b/qa/die-with-dignity/src/test/java/org/elasticsearch/qa/die_with_dignity/DieWithDignityIT.java, +import org.elasticsearch.client.Request;, +        IOException e = expectThrows(IOException.class,, +                () -> client().performRequest(new Request("GET", "/_die_with_dignity")));, +++ b/qa/mixed-cluster/src/test/java/org/elasticsearch/backwards/IndexingIT.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("PUT", index + "/test/" + id);, +            request.setJsonEntity("{\"test\": \"test_" + randomAlphaOfLength(2) + "\"}");, +            assertOK(client().performRequest(request));, +            assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +            assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +            assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +            assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +            assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +            assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +            assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +        Request request = new Request("PUT", "/_snapshot/repo");, +        request.setJsonEntity(Strings, +                .endObject()));, +        assertOK(client().performRequest(request));, +        assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +        request = new Request("PUT", "/_snapshot/repo/bwc-snapshot");, +        request.addParameter("wait_for_completion", "true");, +        request.setJsonEntity("{\"indices\": \"" + index + "\"}");, +        assertOK(client().performRequest(request));, +        assertOK(client().performRequest(new Request("POST", index + "/_refresh")));, +        request = new Request("PUT", "/_snapshot/repo/mixed-snapshot");, +        request.addParameter("wait_for_completion", "true");, +        request.setJsonEntity("{\"indices\": \"" + index + "\"}");, +        Request request = new Request("GET", index + "/_count");, +        request.addParameter("preference", preference);, +        final Response response = client().performRequest(request);, +        Request request = new Request("GET", index + "/test/" + docId);, +        request.addParameter("preference", preference);, +        final Response response = client().performRequest(request);, +        Request request = new Request("GET", index + "/_stats");, +        request.addParameter("level", "shards");, +        Response response = client.performRequest(request);, +        Response response = client().performRequest(new Request("GET", "_nodes"));, +        response = client().performRequest(new Request("GET", "_cluster/state"));, +++ b/qa/ccs-unavailable-clusters/src/test/java/org/elasticsearch/search/CrossClusterSearchUnavailableClusterIT.java, +import org.elasticsearch.client.Request;, +            Response refreshResponse = client().performRequest(new Request("POST", "/index/_refresh"));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(, +                    Collections.singletonMap("skip_unavailable", randomBoolean())));, +                        () -> client().performRequest(request));, +                Request request = new Request("PUT", "/_cluster/settings");, +                request.setEntity(buildUpdateSettingsRequestBody(Collections.singletonMap("seeds", null)));, +                        () -> client().performRequest(request));, +        Request request = new Request("PUT", "/_cluster/settings");, +        request.setEntity(buildUpdateSettingsRequestBody(settings));, +        Response response = client().performRequest(request);, +++ b/qa/die-with-dignity/src/test/java/org/elasticsearch/qa/die_with_dignity/DieWithDignityIT.java, +import org.elasticsearch.client.Request;, +        IOException e = expectThrows(IOException.class,, +                () -> client().performRequest(new Request("GET", "/_die_with_dignity")));]