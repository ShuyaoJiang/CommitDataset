[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/store/memory/ByteBufferDirectory.java, +import java.lang.reflect.Method;, +    private boolean useCleanHack = true;, +, +    public static final boolean CLEAN_SUPPORTED;, +, +    private static final Method directBufferCleaner;, +    private static final Method directBufferCleanerClean;, +, +    static {, +        Method directBufferCleanerX = null;, +        Method directBufferCleanerCleanX = null;, +        boolean v;, +        try {, +            directBufferCleanerX = Class.forName("java.nio.DirectByteBuffer").getMethod("cleaner");, +            directBufferCleanerX.setAccessible(true);, +            directBufferCleanerCleanX = Class.forName("sun.misc.Cleaner").getMethod("clean");, +            directBufferCleanerCleanX.setAccessible(true);, +            v = true;, +        } catch (Exception e) {, +            v = false;, +        }, +        CLEAN_SUPPORTED = v;, +        directBufferCleaner = directBufferCleanerX;, +        directBufferCleanerClean = directBufferCleanerCleanX;, +    }, +, +, +    public void setUseClean(final boolean useCleanHack) {, +        if (useCleanHack && !CLEAN_SUPPORTED), +            throw new IllegalArgumentException("Clean hack not supported on this platform!");, +        this.useCleanHack = useCleanHack;, +    }, +, +    public boolean getUseClean() {, +        return useCleanHack;, +    }, +, +        if (useCleanHack && isDirect()) {, +            try {, +                Object cleaner = directBufferCleaner.invoke(byteBuffer);, +                directBufferCleanerClean.invoke(cleaner);, +            } catch (Exception e) {, +                e.printStackTrace();, +                // silently ignore exception, +            }]