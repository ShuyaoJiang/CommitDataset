[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Object[] exclude;, +    public TermsFacetBuilder exclude(Object... exclude) {, +            for (Object ex : exclude) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Object[] exclude;, +    public TermsFacetBuilder exclude(Object... exclude) {, +            for (Object ex : exclude) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +                return new TermsLongFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsDoubleFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsIntFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsFloatFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsShortFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsByteFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Object[] exclude;, +    public TermsFacetBuilder exclude(Object... exclude) {, +            for (Object ex : exclude) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +                return new TermsLongFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsDoubleFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsIntFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsFloatFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsShortFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsByteFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/bytes/TermsByteFacetCollector.java, +import org.elasticsearch.common.collect.ImmutableSet;, +import org.elasticsearch.common.trove.set.hash.TByteHashSet;, +import java.util.Set;, +                                   ImmutableSet<String> excluded, String scriptLang, String script, Map<String, Object> params) {, +        if (this.script == null && excluded.isEmpty()) {, +            aggregator = new AggregatorValueProc(popFacets(), excluded, this.script);, +        private final TByteHashSet excluded;, +, +        public AggregatorValueProc(TByteIntHashMap facets, Set<String> excluded, SearchScript script) {, +            if (excluded == null || excluded.isEmpty()) {, +                this.excluded = null;, +            } else {, +                this.excluded = new TByteHashSet(excluded.size());, +                for (String s : excluded) {, +                    this.excluded.add(Byte.parseByte(s));, +                }, +            }, +            if (excluded != null && excluded.contains(value)) {, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetBuilder.java, +    private Object[] exclude;, +    public TermsFacetBuilder exclude(Object... exclude) {, +            for (Object ex : exclude) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/TermsFacetProcessor.java, +                return new TermsLongFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsDoubleFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsIntFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsFloatFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsShortFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +                return new TermsByteFacetCollector(facetName, field, size, comparatorType, allTerms, context, excluded, scriptLang, script, params);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/bytes/TermsByteFacetCollector.java, +import org.elasticsearch.common.collect.ImmutableSet;, +import org.elasticsearch.common.trove.set.hash.TByteHashSet;, +import java.util.Set;, +                                   ImmutableSet<String> excluded, String scriptLang, String script, Map<String, Object> params) {, +        if (this.script == null && excluded.isEmpty()) {, +            aggregator = new AggregatorValueProc(popFacets(), excluded, this.script);, +        private final TByteHashSet excluded;, +, +        public AggregatorValueProc(TByteIntHashMap facets, Set<String> excluded, SearchScript script) {, +            if (excluded == null || excluded.isEmpty()) {, +                this.excluded = null;, +            } else {, +                this.excluded = new TByteHashSet(excluded.size());, +                for (String s : excluded) {, +                    this.excluded.add(Byte.parseByte(s));, +                }, +            }, +            if (excluded != null && excluded.contains(value)) {, +                return;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/facet/terms/doubles/TermsDoubleFacetCollector.java, +import org.elasticsearch.common.collect.ImmutableSet;, +import org.elasticsearch.common.trove.set.hash.TDoubleHashSet;, +import java.util.Set;, +                                     ImmutableSet<String> excluded, String scriptLang, String script, Map<String, Object> params) {, +        if (this.script == null && excluded.isEmpty()) {, +            aggregator = new AggregatorValueProc(popFacets(), excluded, this.script);, +        private final TDoubleHashSet excluded;, +, +        public AggregatorValueProc(TDoubleIntHashMap facets, Set<String> excluded, SearchScript script) {, +            if (excluded == null || excluded.isEmpty()) {, +                this.excluded = null;, +            } else {, +                this.excluded = new TDoubleHashSet(excluded.size());, +                for (String s : excluded) {, +                    this.excluded.add(Double.parseDouble(s));, +                }, +            }, +            if (excluded != null && excluded.contains(value)) {, +                return;, +            }]