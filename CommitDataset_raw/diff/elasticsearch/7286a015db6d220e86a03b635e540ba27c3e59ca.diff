[+++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +import com.carrotsearch.hppc.ObjectOpenHashSet;, +    private static ObjectOpenHashSet<String> RESERVED_FIELDS = ObjectOpenHashSet.from(, +            "_uid", "_id", "_type", "_source",  "_all", "_analyzer", "_boost", "_parent", "_routing", "_index",, +            "_size", "_timestamp", "_ttl", +    );, +, +     *, +     * Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata, +     * mapping fields will automatically be put on the top level mapping object., +, +            for (int i = 0; i < source.length; i++) {, +                String fieldName = source[i++].toString();, +                if (RESERVED_FIELDS.contains(fieldName)) {, +                    builder.startObject(fieldName);, +                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString());, +                    for (String s : s1) {, +                        String[] s2 = Strings.split(s, "=");, +                        if (s2.length != 2) {, +                            throw new ElasticSearchIllegalArgumentException("malformed " + s);, +                        }, +                        builder.field(s2[0], s2[1]);, +                    }, +                    builder.endObject();, +                }, +            }, +, +                String fieldName = source[i++].toString();, +                if (RESERVED_FIELDS.contains(fieldName)) {, +                    continue;, +                }, +, +                builder.startObject(fieldName);, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +import com.carrotsearch.hppc.ObjectOpenHashSet;, +    private static ObjectOpenHashSet<String> RESERVED_FIELDS = ObjectOpenHashSet.from(, +            "_uid", "_id", "_type", "_source",  "_all", "_analyzer", "_boost", "_parent", "_routing", "_index",, +            "_size", "_timestamp", "_ttl", +    );, +, +     *, +     * Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata, +     * mapping fields will automatically be put on the top level mapping object., +, +            for (int i = 0; i < source.length; i++) {, +                String fieldName = source[i++].toString();, +                if (RESERVED_FIELDS.contains(fieldName)) {, +                    builder.startObject(fieldName);, +                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString());, +                    for (String s : s1) {, +                        String[] s2 = Strings.split(s, "=");, +                        if (s2.length != 2) {, +                            throw new ElasticSearchIllegalArgumentException("malformed " + s);, +                        }, +                        builder.field(s2[0], s2[1]);, +                    }, +                    builder.endObject();, +                }, +            }, +, +                String fieldName = source[i++].toString();, +                if (RESERVED_FIELDS.contains(fieldName)) {, +                    continue;, +                }, +, +                builder.startObject(fieldName);, +++ b/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import org.elasticsearch.common.lucene.search.XFilteredQuery;, +        // wrap the query with type query, +        innerQuery = new XFilteredQuery(innerQuery, parseContext.cacheFilter(childDocMapper.typeFilter(), null));, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/PutMappingRequest.java, +import com.carrotsearch.hppc.ObjectOpenHashSet;, +    private static ObjectOpenHashSet<String> RESERVED_FIELDS = ObjectOpenHashSet.from(, +            "_uid", "_id", "_type", "_source",  "_all", "_analyzer", "_boost", "_parent", "_routing", "_index",, +            "_size", "_timestamp", "_ttl", +    );, +, +     *, +     * Also supports metadata mapping fields such as `_all` and `_parent` as property definition, these metadata, +     * mapping fields will automatically be put on the top level mapping object., +, +            for (int i = 0; i < source.length; i++) {, +                String fieldName = source[i++].toString();, +                if (RESERVED_FIELDS.contains(fieldName)) {, +                    builder.startObject(fieldName);, +                    String[] s1 = Strings.splitStringByCommaToArray(source[i].toString());, +                    for (String s : s1) {, +                        String[] s2 = Strings.split(s, "=");, +                        if (s2.length != 2) {, +                            throw new ElasticSearchIllegalArgumentException("malformed " + s);, +                        }, +                        builder.field(s2[0], s2[1]);, +                    }, +                    builder.endObject();, +                }, +            }, +, +                String fieldName = source[i++].toString();, +                if (RESERVED_FIELDS.contains(fieldName)) {]