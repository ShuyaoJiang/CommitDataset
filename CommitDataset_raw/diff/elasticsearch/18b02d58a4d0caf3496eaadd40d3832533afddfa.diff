[+++ b/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreBackwardCompatibilityTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.script.ScriptService;, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        //enable scripting on the internal nodes, +        return ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("script.inline", "on").build();, +    }, +, +    @Override, +    protected Settings externalNodeSettings(int nodeOrdinal) {, +        //enable scripting on the external nodes using the proper setting depending on the bwc version, +        ImmutableSettings.Builder builder = ImmutableSettings.builder().put(super.externalNodeSettings(nodeOrdinal));, +        if (compatibilityVersion().before(Version.V_1_6_0)) {, +            builder.put(ScriptService.DISABLE_DYNAMIC_SCRIPTING_SETTING, false);, +        } else {, +            builder.put("script.inline", "on");, +        }, +        return builder.build();, +    }, +, +++ b/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreBackwardCompatibilityTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.script.ScriptService;, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        //enable scripting on the internal nodes, +        return ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("script.inline", "on").build();, +    }, +, +    @Override, +    protected Settings externalNodeSettings(int nodeOrdinal) {, +        //enable scripting on the external nodes using the proper setting depending on the bwc version, +        ImmutableSettings.Builder builder = ImmutableSettings.builder().put(super.externalNodeSettings(nodeOrdinal));, +        if (compatibilityVersion().before(Version.V_1_6_0)) {, +            builder.put(ScriptService.DISABLE_DYNAMIC_SCRIPTING_SETTING, false);, +        } else {, +            builder.put("script.inline", "on");, +        }, +        return builder.build();, +    }, +, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +        return commonNodeSettings(nodeOrdinal);, +    protected Settings commonNodeSettings(int nodeOrdinal) {, +        ImmutableSettings.Builder builder = ImmutableSettings.builder().put(requiredSettings()), +                .put(TransportModule.TRANSPORT_TYPE_KEY, NettyTransport.class.getName()) // run same transport  / disco as external, +                .put(TransportModule.TRANSPORT_SERVICE_TYPE_KEY, TransportService.class.getName());, +        if (compatibilityVersion().before(Version.V_1_3_2)) {, +            // if we test against nodes before 1.3.2 we disable all the compression due to a known bug, +            // see #7210, +            builder.put(Transport.TransportSettings.TRANSPORT_TCP_COMPRESS, false), +                    .put(RecoverySettings.INDICES_RECOVERY_COMPRESS, false);, +        }, +        return builder.build();, +    }, +, +        return addLoggerSettings(commonNodeSettings(nodeOrdinal));, +++ b/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreBackwardCompatibilityTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.script.ScriptService;, +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        //enable scripting on the internal nodes, +        return ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("script.inline", "on").build();, +    }, +, +    @Override, +    protected Settings externalNodeSettings(int nodeOrdinal) {, +        //enable scripting on the external nodes using the proper setting depending on the bwc version, +        ImmutableSettings.Builder builder = ImmutableSettings.builder().put(super.externalNodeSettings(nodeOrdinal));, +        if (compatibilityVersion().before(Version.V_1_6_0)) {, +            builder.put(ScriptService.DISABLE_DYNAMIC_SCRIPTING_SETTING, false);, +        } else {, +            builder.put("script.inline", "on");, +        }, +        return builder.build();, +    }, +, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchBackwardsCompatIntegrationTest.java, +        return commonNodeSettings(nodeOrdinal);, +    protected Settings commonNodeSettings(int nodeOrdinal) {, +        ImmutableSettings.Builder builder = ImmutableSettings.builder().put(requiredSettings()), +                .put(TransportModule.TRANSPORT_TYPE_KEY, NettyTransport.class.getName()) // run same transport  / disco as external, +                .put(TransportModule.TRANSPORT_SERVICE_TYPE_KEY, TransportService.class.getName());, +        if (compatibilityVersion().before(Version.V_1_3_2)) {, +            // if we test against nodes before 1.3.2 we disable all the compression due to a known bug, +            // see #7210, +            builder.put(Transport.TransportSettings.TRANSPORT_TCP_COMPRESS, false), +                    .put(RecoverySettings.INDICES_RECOVERY_COMPRESS, false);, +        }, +        return builder.build();, +    }, +, +        return addLoggerSettings(commonNodeSettings(nodeOrdinal));, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +                .put("script.indexed", "on")]