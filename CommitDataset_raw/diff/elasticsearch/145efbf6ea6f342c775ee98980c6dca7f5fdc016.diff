[+++ b/rest-api-spec/test/scroll/11_clear.yaml, +        , +  - do:, +        catch: missing, +        clear_scroll:, +          scroll_id: $scroll_id1, +++ b/rest-api-spec/test/scroll/11_clear.yaml, +        , +  - do:, +        catch: missing, +        clear_scroll:, +          scroll_id: $scroll_id1, +++ b/src/main/java/org/elasticsearch/action/search/ClearScrollResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.xcontent.StatusToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.rest.RestStatus;, +import static org.elasticsearch.rest.RestStatus.NOT_FOUND;, +import static org.elasticsearch.rest.RestStatus.OK;, +, +public class ClearScrollResponse extends ActionResponse implements StatusToXContent {, +    private int numFreed;, +    public ClearScrollResponse(boolean succeeded, int numFreed) {, +        this.numFreed = numFreed;, +    /**, +     * @return Whether the attempt to clear a scroll was successful., +     */, +    /**, +     * @return The number of seach contexts that were freed. If this is <code>0</code> the assumption can be made,, +     * that the scroll id specified in the request did not exist. (never existed, was expired, or completely consumed), +     */, +    public int getNumFreed() {, +        return numFreed;, +    }, +, +    @Override, +    public RestStatus status() {, +        return numFreed == 0 ? NOT_FOUND : OK;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.endObject();, +        return builder;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_2_0)) {, +            numFreed = in.readVInt();, +        } else {, +            // On older nodes we can't tell how many search contexts where freed, so we assume at least one,, +            // so that the rest api doesn't return 404 where SC were indeed freed., +            numFreed = 1;, +        }, +        if (out.getVersion().onOrAfter(Version.V_1_2_0)) {, +            out.writeVInt(numFreed);, +        }, +++ b/rest-api-spec/test/scroll/11_clear.yaml, +        , +  - do:, +        catch: missing, +        clear_scroll:, +          scroll_id: $scroll_id1, +++ b/src/main/java/org/elasticsearch/action/search/ClearScrollResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.common.xcontent.StatusToXContent;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.rest.RestStatus;, +import static org.elasticsearch.rest.RestStatus.NOT_FOUND;, +import static org.elasticsearch.rest.RestStatus.OK;, +, +public class ClearScrollResponse extends ActionResponse implements StatusToXContent {, +    private int numFreed;, +    public ClearScrollResponse(boolean succeeded, int numFreed) {, +        this.numFreed = numFreed;, +    /**, +     * @return Whether the attempt to clear a scroll was successful., +     */, +    /**, +     * @return The number of seach contexts that were freed. If this is <code>0</code> the assumption can be made,, +     * that the scroll id specified in the request did not exist. (never existed, was expired, or completely consumed), +     */, +    public int getNumFreed() {, +        return numFreed;, +    }, +, +    @Override, +    public RestStatus status() {, +        return numFreed == 0 ? NOT_FOUND : OK;, +    }, +, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.endObject();, +        return builder;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_1_2_0)) {, +            numFreed = in.readVInt();]