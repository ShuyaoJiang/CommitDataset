[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AnalyzerMapper.java, +            if (value == null) {, +                value = context.ignoredValue(path);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AnalyzerMapper.java, +            if (value == null) {, +                value = context.ignoredValue(path);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ParseContext.java, +import java.util.HashMap;, +import java.util.Map;, +, +    private Map<String, String> ignoredValues = new HashMap<String, String>();, +, +        this.ignoredValues.clear();, +    public void ignoredValue(String indexName, String value) {, +        ignoredValues.put(indexName, value);, +    }, +, +    public String ignoredValue(String indexName) {, +        return ignoredValues.get(indexName);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AnalyzerMapper.java, +            if (value == null) {, +                value = context.ignoredValue(path);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ParseContext.java, +import java.util.HashMap;, +import java.util.Map;, +, +    private Map<String, String> ignoredValues = new HashMap<String, String>();, +, +        this.ignoredValues.clear();, +    public void ignoredValue(String indexName, String value) {, +        ignoredValues.put(indexName, value);, +    }, +, +    public String ignoredValue(String indexName) {, +        return ignoredValues.get(indexName);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/StringFieldMapper.java, +            context.ignoredValue(names.indexName(), value);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/AnalyzerMapper.java, +            if (value == null) {, +                value = context.ignoredValue(path);, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/ParseContext.java, +import java.util.HashMap;, +import java.util.Map;, +, +    private Map<String, String> ignoredValues = new HashMap<String, String>();, +, +        this.ignoredValues.clear();, +    public void ignoredValue(String indexName, String value) {, +        ignoredValues.put(indexName, value);, +    }, +, +    public String ignoredValue(String indexName) {, +        return ignoredValues.get(indexName);, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/StringFieldMapper.java, +            context.ignoredValue(names.indexName(), value);, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/xcontent/analyzer/AnalyzerMapperTests.java, +    @Test public void testAnalyzerMapping() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_analyzer").field("path", "field_analyzer").endObject(), +                .startObject("properties"), +                .startObject("field1").field("type", "string").endObject(), +                .startObject("field2").field("type", "string").field("analyzer", "simple").endObject(), +                .endObject(), +                .endObject().endObject().string();, +, +        XContentDocumentMapper documentMapper = MapperTests.newParser().parse(mapping);, +, +        ParsedDocument doc = documentMapper.parse("type", "1", XContentFactory.jsonBuilder().startObject(), +                .field("field_analyzer", "whitespace"), +                .field("field1", "value1"), +                .field("field2", "value2"), +                .endObject().copiedBytes());, +, +        FieldNameAnalyzer analyzer = (FieldNameAnalyzer) doc.analyzer();, +        assertThat(((NamedAnalyzer) analyzer.defaultAnalyzer()).name(), equalTo("whitespace"));, +        assertThat(((NamedAnalyzer) analyzer.analyzers().get("field1")), nullValue());, +        assertThat(((NamedAnalyzer) analyzer.analyzers().get("field2")).name(), equalTo("simple"));, +, +        // check that it serializes and de-serializes correctly, +, +        XContentDocumentMapper reparsedMapper = MapperTests.newParser().parse(documentMapper.mappingSource().string());, +, +        doc = reparsedMapper.parse("type", "1", XContentFactory.jsonBuilder().startObject(), +                .field("field_analyzer", "whitespace"), +                .field("field1", "value1"), +                .field("field2", "value2"), +                .endObject().copiedBytes());, +, +        analyzer = (FieldNameAnalyzer) doc.analyzer();, +        assertThat(((NamedAnalyzer) analyzer.defaultAnalyzer()).name(), equalTo("whitespace"));]