[+++ b/core/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            context.aggregations().factories().init(aggregationContext);, +            Aggregator[] aggregators = context.aggregations().factories().createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            context.aggregations().factories().init(aggregationContext);, +            Aggregator[] aggregators = context.aggregations().factories().createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +            context.aggregations().factories().init(aggregationContext);, +                aggregators = factories.createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            context.aggregations().factories().init(aggregationContext);, +            Aggregator[] aggregators = context.aggregations().factories().createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +            context.aggregations().factories().init(aggregationContext);, +                aggregators = factories.createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +    public void init(AggregationContext context) {, +        for (AggregatorFactory factory : factories) {, +            factory.init(context);, +        }, +    }, +, +            aggregators[i] = factories[i].create(parent, collectsFromSingleBucket);, +    public Aggregator[] createTopLevelAggregators() throws IOException {, +            aggregators[i] = factories[i].create(null, collectsFromSingleBucket);, +        public Aggregator[] createTopLevelAggregators() {, +++ b/core/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            context.aggregations().factories().init(aggregationContext);, +            Aggregator[] aggregators = context.aggregations().factories().createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +            context.aggregations().factories().init(aggregationContext);, +                aggregators = factories.createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +    public void init(AggregationContext context) {, +        for (AggregatorFactory factory : factories) {, +            factory.init(context);, +        }, +    }, +, +            aggregators[i] = factories[i].create(parent, collectsFromSingleBucket);, +    public Aggregator[] createTopLevelAggregators() throws IOException {, +            aggregators[i] = factories[i].create(null, collectsFromSingleBucket);, +        public Aggregator[] createTopLevelAggregators() {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java, +    private AggregationContext context;, +     * Initializes this factory with the given {@link AggregationContext} ready, +     * to create {@link Aggregator}s, +     */, +    public final void init(AggregationContext context) {, +        this.context = context;, +        doInit(context);, +        this.factories.init(context);, +    }, +, +    protected void doInit(AggregationContext context) {, +    }, +, +    /**, +    public final Aggregator create(Aggregator parent, boolean collectsFromSingleBucket) throws IOException {, +        final Aggregator first = factory.create(parent, true);, +                                aggregator = factory.create(parent, true);, +++ b/core/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            context.aggregations().factories().init(aggregationContext);, +            Aggregator[] aggregators = context.aggregations().factories().createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregationPhase.java, +            context.aggregations().factories().init(aggregationContext);, +                aggregators = factories.createTopLevelAggregators();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +    public void init(AggregationContext context) {, +        for (AggregatorFactory factory : factories) {, +            factory.init(context);, +        }, +    }, +, +            aggregators[i] = factories[i].create(parent, collectsFromSingleBucket);, +    public Aggregator[] createTopLevelAggregators() throws IOException {, +            aggregators[i] = factories[i].create(null, collectsFromSingleBucket);, +        public Aggregator[] createTopLevelAggregators() {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactory.java, +    private AggregationContext context;, +     * Initializes this factory with the given {@link AggregationContext} ready, +     * to create {@link Aggregator}s, +     */, +    public final void init(AggregationContext context) {, +        this.context = context;, +        doInit(context);, +        this.factories.init(context);, +    }, +, +    protected void doInit(AggregationContext context) {, +    }, +, +    /**, +    public final Aggregator create(Aggregator parent, boolean collectsFromSingleBucket) throws IOException {, +        final Aggregator first = factory.create(parent, true);, +                                aggregator = factory.create(parent, true);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java, +        return new ParentToChildrenAggregator.Factory(aggregationName, childType);, +++ b/core/src/main/java/org/elasticsearch/percolator/QueryCollector.java, +            context.aggregations().factories().init(aggregationContext);]