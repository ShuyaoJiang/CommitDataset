[+++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.indices.cache.filter.terms.IndicesTermsFilterCache;, +    private final IndicesTermsFilterCache termsFilterCache;, +                                            TransportService transportService, IndicesService indicesService, IndicesTermsFilterCache termsFilterCache) {, +        this.termsFilterCache = termsFilterCache;, +                termsFilterCache.clear("api");, +                termsFilterCache.clear("api", request.getFilterKeys());, +                    termsFilterCache.clear("api");, +            service.cache().invalidateStatsCache();, +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.indices.cache.filter.terms.IndicesTermsFilterCache;, +    private final IndicesTermsFilterCache termsFilterCache;, +                                            TransportService transportService, IndicesService indicesService, IndicesTermsFilterCache termsFilterCache) {, +        this.termsFilterCache = termsFilterCache;, +                termsFilterCache.clear("api");, +                termsFilterCache.clear("api", request.getFilterKeys());, +                    termsFilterCache.clear("api");, +            service.cache().invalidateStatsCache();, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +    public synchronized void invalidateStatsCache() {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.indices.cache.filter.terms.IndicesTermsFilterCache;, +    private final IndicesTermsFilterCache termsFilterCache;, +                                            TransportService transportService, IndicesService indicesService, IndicesTermsFilterCache termsFilterCache) {, +        this.termsFilterCache = termsFilterCache;, +                termsFilterCache.clear("api");, +                termsFilterCache.clear("api", request.getFilterKeys());, +                    termsFilterCache.clear("api");, +            service.cache().invalidateStatsCache();, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +    public synchronized void invalidateStatsCache() {, +++ b/src/main/java/org/elasticsearch/index/query/FilterBuilders.java, +     * A terms lookup filter for the provided field name. A lookup terms filter can, +     * extract the terms to filter by from another doc in an index., +     */, +    public static TermsLookupFilterBuilder termsLookupFilter(String name) {, +        return new TermsLookupFilterBuilder(name);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +import org.elasticsearch.indices.cache.filter.terms.IndicesTermsFilterCache;, +    private final IndicesTermsFilterCache termsFilterCache;, +                                            TransportService transportService, IndicesService indicesService, IndicesTermsFilterCache termsFilterCache) {, +        this.termsFilterCache = termsFilterCache;, +                termsFilterCache.clear("api");, +                termsFilterCache.clear("api", request.getFilterKeys());, +                    termsFilterCache.clear("api");, +            service.cache().invalidateStatsCache();, +++ b/src/main/java/org/elasticsearch/index/cache/IndexCache.java, +    public synchronized void invalidateStatsCache() {, +++ b/src/main/java/org/elasticsearch/index/query/FilterBuilders.java, +     * A terms lookup filter for the provided field name. A lookup terms filter can, +     * extract the terms to filter by from another doc in an index., +     */, +    public static TermsLookupFilterBuilder termsLookupFilter(String name) {, +        return new TermsLookupFilterBuilder(name);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java, +import org.elasticsearch.common.lucene.search.AndFilter;, +import org.elasticsearch.common.lucene.search.OrFilter;, +import org.elasticsearch.common.lucene.search.TermFilter;, +import org.elasticsearch.common.lucene.search.XBooleanFilter;, +import org.elasticsearch.indices.cache.filter.terms.IndicesTermsFilterCache;, +import org.elasticsearch.indices.cache.filter.terms.TermsLookup;, +    private IndicesTermsFilterCache termsFilterCache;, +, +    @Inject(optional = true), +    public void setIndicesTermsFilterCache(IndicesTermsFilterCache termsFilterCache) {, +        this.termsFilterCache = termsFilterCache;, +    }, +, +, +        String lookupIndex = parseContext.index().name();, +        String lookupType = null;, +        String lookupId = null;, +        String lookupPath = null;, +, +            } else if (token == XContentParser.Token.START_OBJECT) {, +                fieldName = currentFieldName;, +                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +                    if (token == XContentParser.Token.FIELD_NAME) {, +                        currentFieldName = parser.currentName();, +                    } else if (token.isValue()) {, +                        if ("index".equals(currentFieldName)) {, +                            lookupIndex = parser.text();, +                        } else if ("type".equals(currentFieldName)) {, +                            lookupType = parser.text();, +                        } else if ("id".equals(currentFieldName)) {, +                            lookupId = parser.text();, +                        } else if ("path".equals(currentFieldName)) {, +                            lookupPath = parser.text();, +                        } else {, +                            throw new QueryParsingException(parseContext.index(), "[terms] filter does not support [" + currentFieldName + "] within lookup element");, +                        }, +                    }, +                }, +                if (lookupType == null) {]