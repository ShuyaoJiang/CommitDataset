[+++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import java.util.Iterator;, +            Iterator<ScriptField> iterator = scriptFields.stream(), +                    .sorted((a, b) -> a.fieldName().compareTo(b.fieldName())).iterator();, +            while (iterator.hasNext()) {, +                iterator.next().writeTo(out);, +            Iterator<Map.Entry<String, InnerHitBuilder>> iterator = childInnerHits.entrySet().stream(), +                    .sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator();, +            while (iterator.hasNext()) {, +                Map.Entry<String, InnerHitBuilder> entry = iterator.next();, +++ b/core/src/main/java/org/elasticsearch/index/query/InnerHitBuilder.java, +import java.util.Iterator;, +            Iterator<ScriptField> iterator = scriptFields.stream(), +                    .sorted((a, b) -> a.fieldName().compareTo(b.fieldName())).iterator();, +            while (iterator.hasNext()) {, +                iterator.next().writeTo(out);, +            Iterator<Map.Entry<String, InnerHitBuilder>> iterator = childInnerHits.entrySet().stream(), +                    .sorted((a, b) -> a.getKey().compareTo(b.getKey())).iterator();, +            while (iterator.hasNext()) {, +                Map.Entry<String, InnerHitBuilder> entry = iterator.next();, +++ b/core/src/test/java/org/elasticsearch/index/query/InnerHitBuilderTests.java, +import org.elasticsearch.common.io.stream.BytesStreamOutput;, +import org.elasticsearch.search.internal.ShardSearchLocalRequest;, +    /**, +     * Test that if we serialize and deserialize an object, further, +     * serialization leads to identical bytes representation., +     *, +     * This is necessary to ensure because we use the serialized BytesReference, +     * of this builder as part of the cacheKey in, +     * {@link ShardSearchLocalRequest} (via, +     * {@link SearchSourceBuilder#collapse(org.elasticsearch.search.collapse.CollapseBuilder)}), +     */, +    public void testSerializationOrder() throws Exception {, +        for (int runs = 0; runs < NUMBER_OF_TESTBUILDERS; runs++) {, +            InnerHitBuilder original = randomInnerHits();, +            InnerHitBuilder deserialized = serializedCopy(original);, +            assertEquals(deserialized, original);, +            assertEquals(deserialized.hashCode(), original.hashCode());, +            assertNotSame(deserialized, original);, +            BytesStreamOutput out1 = new BytesStreamOutput();, +            BytesStreamOutput out2 = new BytesStreamOutput();, +            original.writeTo(out1);, +            deserialized.writeTo(out2);, +            assertEquals(out1.bytes(), out2.bytes());, +        }, +    }, +, +    public void testEqualsAndHashcode() {]