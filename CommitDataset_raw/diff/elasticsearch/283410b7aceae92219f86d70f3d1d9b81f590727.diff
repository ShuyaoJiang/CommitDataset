[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +        private MethodHandle lookup(Object[] args) throws Throwable {, +                    if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                        return lookupGeneric(); // XXX: optimize better., +                    }, +                    if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                        return lookupGeneric(); // XXX: optimize better., +                    }, +                        return lookupGeneric(); // can handle nulls, if supported, +        private MethodHandle lookupGeneric() throws Throwable {, +            MethodHandle generic = DefMath.lookupGeneric(name);, +            if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                assert flavor == BINARY_OPERATOR || flavor == SHIFT_OPERATOR;, +                // adapt dynamic cast to the generic method and the callsite's return value, +                MethodHandle cast = DYNAMIC_CAST.asType(MethodType.methodType(type().returnType(), , +                                                                              generic.type().returnType(),, +                                                                              generic.type().parameterType(0)));, +                // drop the RHS parameter, +                cast = MethodHandles.dropArguments(cast, 2, generic.type().parameterType(1));, +                // combine: f(x,y) -> g(f(x,y), x, y);, +                return MethodHandles.foldArguments(cast, generic);, +            } else {, +                return generic;, +            }, +        }, +        , +                MethodHandle generic = lookupGeneric();, +            final MethodHandle target = lookup(args).asType(type);, +                MethodHandle handler = MethodHandles.dropArguments(lookupGeneric().asType(type()), , +        /**, +         * Slow dynamic cast: casts {@code returnValue} to the runtime type of {@code lhs}, +         * based upon inspection. If {@code lhs} is null, no cast takes place., +         * This is used for the generic fallback case of compound assignment., +         */, +        static Object dynamicCast(Object returnValue, Object lhs) {, +            if (lhs != null) {, +                return lhs.getClass().cast(returnValue);, +            } else {, +                return returnValue;, +            }, +        }, +        , +        private static final MethodHandle DYNAMIC_CAST;, +                DYNAMIC_CAST = lookup.findStatic(lookup.lookupClass(), "dynamicCast", , +                                              MethodType.methodType(Object.class, Object.class, Object.class));, +                if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0 && flavor != BINARY_OPERATOR) {, +                    // we just don't need it anywhere else., +                    throw new BootstrapMethodError("This parameter is only supported for BINARY_OPERATORs");, +                }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/DefBootstrap.java, +        private MethodHandle lookup(Object[] args) throws Throwable {, +                    if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                        return lookupGeneric(); // XXX: optimize better., +                    }, +                    if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                        return lookupGeneric(); // XXX: optimize better., +                    }, +                        return lookupGeneric(); // can handle nulls, if supported, +        private MethodHandle lookupGeneric() throws Throwable {, +            MethodHandle generic = DefMath.lookupGeneric(name);, +            if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0) {, +                assert flavor == BINARY_OPERATOR || flavor == SHIFT_OPERATOR;, +                // adapt dynamic cast to the generic method and the callsite's return value, +                MethodHandle cast = DYNAMIC_CAST.asType(MethodType.methodType(type().returnType(), , +                                                                              generic.type().returnType(),, +                                                                              generic.type().parameterType(0)));, +                // drop the RHS parameter, +                cast = MethodHandles.dropArguments(cast, 2, generic.type().parameterType(1));, +                // combine: f(x,y) -> g(f(x,y), x, y);, +                return MethodHandles.foldArguments(cast, generic);, +            } else {, +                return generic;, +            }, +        }, +        , +                MethodHandle generic = lookupGeneric();, +            final MethodHandle target = lookup(args).asType(type);, +                MethodHandle handler = MethodHandles.dropArguments(lookupGeneric().asType(type()), , +        /**, +         * Slow dynamic cast: casts {@code returnValue} to the runtime type of {@code lhs}, +         * based upon inspection. If {@code lhs} is null, no cast takes place., +         * This is used for the generic fallback case of compound assignment., +         */, +        static Object dynamicCast(Object returnValue, Object lhs) {, +            if (lhs != null) {, +                return lhs.getClass().cast(returnValue);, +            } else {, +                return returnValue;, +            }, +        }, +        , +        private static final MethodHandle DYNAMIC_CAST;, +                DYNAMIC_CAST = lookup.findStatic(lookup.lookupClass(), "dynamicCast", , +                                              MethodType.methodType(Object.class, Object.class, Object.class));, +                if ((flags & OPERATOR_COMPOUND_ASSIGNMENT) != 0 && flavor != BINARY_OPERATOR) {, +                    // we just don't need it anywhere else., +                    throw new BootstrapMethodError("This parameter is only supported for BINARY_OPERATORs");, +                }, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +    public void writeDynamicBinaryInstruction(Location location, Type returnType, Type lhs, Type rhs, Operation operation, boolean compoundAssignment) {]