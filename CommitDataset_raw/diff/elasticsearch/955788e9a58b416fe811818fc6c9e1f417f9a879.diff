[+++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    public SizeFieldMapper SizeFieldMapper() {, +        return rootMapper(SizeFieldMapper.class);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    public SizeFieldMapper SizeFieldMapper() {, +        return rootMapper(SizeFieldMapper.class);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.DISABLED;, +        protected EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;, +        public Builder enabled(EnabledAttributeMapper enabled) {, +            this.enabledState = enabled;, +            return new SizeFieldMapper(enabledState, fieldType, provider, fieldDataSettings);, +                    builder.enabled(nodeBooleanValue(fieldNode) ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED);, +    private EnabledAttributeMapper enabledState;, +        this(Defaults.ENABLED_STATE, new FieldType(Defaults.SIZE_FIELD_TYPE), null, null);, +    public SizeFieldMapper(EnabledAttributeMapper enabled, FieldType fieldType, PostingsFormatProvider provider, @Nullable Settings fieldDataSettings) {, +        this.enabledState = enabled;, +        return this.enabledState.enabled;, +        if (!enabledState.enabled) {, +        if (enabledState == Defaults.ENABLED_STATE && fieldType().stored() == Defaults.SIZE_FIELD_TYPE.stored()) {, +        if (enabledState != Defaults.ENABLED_STATE) {, +            builder.field("enabled", enabledState.enabled);, +        SizeFieldMapper sizeFieldMapperMergeWith = (SizeFieldMapper) mergeWith;, +        if (!mergeContext.mergeFlags().simulate()) {, +            if (sizeFieldMapperMergeWith.enabledState != enabledState && !sizeFieldMapperMergeWith.enabledState.unset()) {, +                this.enabledState = sizeFieldMapperMergeWith.enabledState;, +            }, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java, +    public SizeFieldMapper SizeFieldMapper() {, +        return rootMapper(SizeFieldMapper.class);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/SizeFieldMapper.java, +        public static final EnabledAttributeMapper ENABLED_STATE = EnabledAttributeMapper.DISABLED;, +        protected EnabledAttributeMapper enabledState = EnabledAttributeMapper.UNSET_DISABLED;, +        public Builder enabled(EnabledAttributeMapper enabled) {, +            this.enabledState = enabled;, +            return new SizeFieldMapper(enabledState, fieldType, provider, fieldDataSettings);, +                    builder.enabled(nodeBooleanValue(fieldNode) ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED);, +    private EnabledAttributeMapper enabledState;, +        this(Defaults.ENABLED_STATE, new FieldType(Defaults.SIZE_FIELD_TYPE), null, null);, +    public SizeFieldMapper(EnabledAttributeMapper enabled, FieldType fieldType, PostingsFormatProvider provider, @Nullable Settings fieldDataSettings) {, +        this.enabledState = enabled;, +        return this.enabledState.enabled;, +        if (!enabledState.enabled) {, +        if (enabledState == Defaults.ENABLED_STATE && fieldType().stored() == Defaults.SIZE_FIELD_TYPE.stored()) {, +        if (enabledState != Defaults.ENABLED_STATE) {, +            builder.field("enabled", enabledState.enabled);, +        SizeFieldMapper sizeFieldMapperMergeWith = (SizeFieldMapper) mergeWith;, +        if (!mergeContext.mergeFlags().simulate()) {, +            if (sizeFieldMapperMergeWith.enabledState != enabledState && !sizeFieldMapperMergeWith.enabledState.unset()) {, +                this.enabledState = sizeFieldMapperMergeWith.enabledState;, +            }, +        }, +++ b/src/test/java/org/elasticsearch/test/unit/index/mapper/size/SizeMappingTests.java, +, +    @Test, +    public void testThatDisablingWorksWhenMerging() throws Exception {, +        String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_size").field("enabled", true).endObject(), +                .endObject().endObject().string();, +        DocumentMapper enabledMapper = MapperTests.newParser().parse(enabledMapping);, +, +        String disabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("_size").field("enabled", false).endObject(), +                .endObject().endObject().string();, +        DocumentMapper disabledMapper = MapperTests.newParser().parse(disabledMapping);, +, +        enabledMapper.merge(disabledMapper, DocumentMapper.MergeFlags.mergeFlags().simulate(false));, +        assertThat(enabledMapper.SizeFieldMapper().enabled(), is(false));, +    }]