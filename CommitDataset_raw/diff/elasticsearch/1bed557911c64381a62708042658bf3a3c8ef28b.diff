[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +            // We need to fork, otherwise we restore model state from a network thread (several GET api calls):, +            threadPool.executor(ThreadPool.Names.MANAGEMENT).execute(new AbstractRunnable() {, +                @Override, +                public void onFailure(Exception e) {, +                    handler.accept(e);, +                }, +, +                @Override, +                protected void doRun() throws Exception {, +                }, +            });, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +import org.elasticsearch.common.util.concurrent.AbstractRunnable;, +            // We need to fork, otherwise we restore model state from a network thread (several GET api calls):, +            threadPool.executor(ThreadPool.Names.MANAGEMENT).execute(new AbstractRunnable() {, +                @Override, +                public void onFailure(Exception e) {, +                    handler.accept(e);, +                }, +, +                @Override, +                protected void doRun() throws Exception {, +                }, +            });, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManagerTests.java, +        when(threadPool.executor(anyString())).thenReturn(EsExecutors.newDirectExecutorService());, +        when(threadPool.executor(anyString())).thenReturn(EsExecutors.newDirectExecutorService());]