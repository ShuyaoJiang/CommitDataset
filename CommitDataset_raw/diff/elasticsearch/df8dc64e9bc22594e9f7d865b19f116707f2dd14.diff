[+++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +            return shardRoutingTable.allShardsStarted();, +            return shardRoutingTable.primaryShard().started();, +            return shardRoutingTable.activeShards().size() >= value;, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +            return shardRoutingTable.allShardsStarted();, +            return shardRoutingTable.primaryShard().started();, +            return shardRoutingTable.activeShards().size() >= value;, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            NetworkModule networkModule = new NetworkModule(networkService, settings, true);, +            SearchModule searchModule = new SearchModule(settings, true, pluginsService.filterPlugins(SearchPlugin.class));, +            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();, +            entries.addAll(networkModule.getNamedWriteables());, +            entries.addAll(searchModule.getNamedWriteables());, +            NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(entries);, +, +            modules.add(networkModule);, +            modules.add(searchModule);, +                b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +            return shardRoutingTable.allShardsStarted();, +            return shardRoutingTable.primaryShard().started();, +            return shardRoutingTable.activeShards().size() >= value;, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            NetworkModule networkModule = new NetworkModule(networkService, settings, true);, +            SearchModule searchModule = new SearchModule(settings, true, pluginsService.filterPlugins(SearchPlugin.class));, +            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();, +            entries.addAll(networkModule.getNamedWriteables());, +            entries.addAll(searchModule.getNamedWriteables());, +            NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(entries);, +, +            modules.add(networkModule);, +            modules.add(searchModule);, +                b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilders.java, +import com.vividsolutions.jts.geom.Coordinate;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry.Entry;, +, +    public static void register(List<Entry> namedWriteables) {, +        namedWriteables.add(new Entry(ShapeBuilder.class, PointBuilder.TYPE.shapeName(), PointBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, CircleBuilder.TYPE.shapeName(), CircleBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, EnvelopeBuilder.TYPE.shapeName(), EnvelopeBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, MultiPointBuilder.TYPE.shapeName(), MultiPointBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, LineStringBuilder.TYPE.shapeName(), LineStringBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, MultiLineStringBuilder.TYPE.shapeName(), MultiLineStringBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, PolygonBuilder.TYPE.shapeName(), PolygonBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, MultiPolygonBuilder.TYPE.shapeName(), MultiPolygonBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, GeometryCollectionBuilder.TYPE.shapeName(), GeometryCollectionBuilder::new));, +++ b/core/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +            return shardRoutingTable.allShardsStarted();, +            return shardRoutingTable.primaryShard().started();, +            return shardRoutingTable.activeShards().size() >= value;, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +            NetworkModule networkModule = new NetworkModule(networkService, settings, true);, +            SearchModule searchModule = new SearchModule(settings, true, pluginsService.filterPlugins(SearchPlugin.class));, +            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();, +            entries.addAll(networkModule.getNamedWriteables());, +            entries.addAll(searchModule.getNamedWriteables());, +            NamedWriteableRegistry namedWriteableRegistry = new NamedWriteableRegistry(entries);, +, +            modules.add(networkModule);, +            modules.add(searchModule);, +                b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);, +++ b/core/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilders.java, +import com.vividsolutions.jts.geom.Coordinate;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry.Entry;, +, +    public static void register(List<Entry> namedWriteables) {, +        namedWriteables.add(new Entry(ShapeBuilder.class, PointBuilder.TYPE.shapeName(), PointBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, CircleBuilder.TYPE.shapeName(), CircleBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, EnvelopeBuilder.TYPE.shapeName(), EnvelopeBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, MultiPointBuilder.TYPE.shapeName(), MultiPointBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, LineStringBuilder.TYPE.shapeName(), LineStringBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, MultiLineStringBuilder.TYPE.shapeName(), MultiLineStringBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, PolygonBuilder.TYPE.shapeName(), PolygonBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, MultiPolygonBuilder.TYPE.shapeName(), MultiPolygonBuilder::new));, +        namedWriteables.add(new Entry(ShapeBuilder.class, GeometryCollectionBuilder.TYPE.shapeName(), GeometryCollectionBuilder::new));, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/NamedWriteableRegistry.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Objects;, +import java.util.stream.Collectors;, +import java.util.stream.Stream;, +, +import org.elasticsearch.plugins.Plugin;, + * A registry for {@link org.elasticsearch.common.io.stream.Writeable.Reader} readers of {@link NamedWriteable}., + *, + * The registration is keyed by the combination of the category class of {@link NamedWriteable}, and a name unique, + * to that category., +    /** An entry in the registry, made up of a category class and name, and a reader for that category class. */, +    public static class Entry {, +        /** The superclass of a {@link NamedWriteable} which will be read by {@link #reader}. */, +        public final Class<?> categoryClass;, +, +        /** A name for the writeable which is unique to the {@link #categoryClass}. */, +        public final String name;, +, +        /** A reader captability of reading*/, +        public final Writeable.Reader<?> reader;]