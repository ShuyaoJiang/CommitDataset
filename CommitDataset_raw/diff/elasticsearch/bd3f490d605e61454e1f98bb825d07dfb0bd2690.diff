[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexRequest.java, +    private String[] indices;, +        this.indices = new String[]{index};, +    }, +, +    public DeleteIndexRequest(String... indices) {, +        this.indices = indices;, +        if (indices == null) {, +            validationException = addValidationError("index / indices is missing", validationException);, +    public DeleteIndexRequest indices(String... indices) {, +        this.indices = indices;, +        return this;, +    }, +, +    String[] indices() {, +        return indices;, +        indices = new String[in.readVInt()];, +        for (int i = 0; i < indices.length; i++) {, +            indices[i] = in.readUTF();, +        }, +        if (indices == null) {, +            out.writeVInt(0);, +        } else {, +            out.writeVInt(indices.length);, +            for (String index : indices) {, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexRequest.java, +    private String[] indices;, +        this.indices = new String[]{index};, +    }, +, +    public DeleteIndexRequest(String... indices) {, +        this.indices = indices;, +        if (indices == null) {, +            validationException = addValidationError("index / indices is missing", validationException);, +    public DeleteIndexRequest indices(String... indices) {, +        this.indices = indices;, +        return this;, +    }, +, +    String[] indices() {, +        return indices;, +        indices = new String[in.readVInt()];, +        for (int i = 0; i < indices.length; i++) {, +            indices[i] = in.readUTF();, +        }, +        if (indices == null) {, +            out.writeVInt(0);, +        } else {, +            out.writeVInt(indices.length);, +            for (String index : indices) {, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +import org.elasticsearch.action.ActionListener;, +    @Override protected void doExecute(DeleteIndexRequest request, ActionListener<DeleteIndexResponse> listener) {, +        request.indices(clusterService.state().metaData().concreteIndices(request.indices()));, +        super.doExecute(request, listener);, +    }, +, +        return state.blocks().indicesBlockedException(ClusterBlockLevel.METADATA, request.indices());, +        final CountDownLatch latch = new CountDownLatch(request.indices().length);, +        for (String index : request.indices()) {, +            deleteIndexService.deleteIndex(new MetaDataDeleteIndexService.Request(index).timeout(request.timeout()), new MetaDataDeleteIndexService.Listener() {, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/DeleteIndexRequest.java, +    private String[] indices;, +        this.indices = new String[]{index};, +    }, +, +    public DeleteIndexRequest(String... indices) {, +        this.indices = indices;, +        if (indices == null) {, +            validationException = addValidationError("index / indices is missing", validationException);, +    public DeleteIndexRequest indices(String... indices) {, +        this.indices = indices;, +        return this;, +    }, +, +    String[] indices() {, +        return indices;, +        indices = new String[in.readVInt()];, +        for (int i = 0; i < indices.length; i++) {, +            indices[i] = in.readUTF();, +        }, +        if (indices == null) {, +            out.writeVInt(0);, +        } else {, +            out.writeVInt(indices.length);, +            for (String index : indices) {, +            }, +        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +import org.elasticsearch.action.ActionListener;, +    @Override protected void doExecute(DeleteIndexRequest request, ActionListener<DeleteIndexResponse> listener) {, +        request.indices(clusterService.state().metaData().concreteIndices(request.indices()));, +        super.doExecute(request, listener);, +    }, +]