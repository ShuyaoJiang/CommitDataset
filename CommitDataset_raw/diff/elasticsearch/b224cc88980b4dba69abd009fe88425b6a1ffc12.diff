[+++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        injector.getInstance(Discovery.class).stop();, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        injector.getInstance(Discovery.class).stop();, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.search.internal.SearchContext;, +        private Tuple<String, String> scriptNameExt(Path file) {, +            if (extIndex != -1) {, +            } else {, +                return null;, +            }, +            Tuple<String, String> scriptNameExt = scriptNameExt(file);, +            if (scriptNameExt != null) {, +                    logger.warn("no script engine found for [{}]", scriptNameExt.v2());, +        }, +            Tuple<String, String> scriptNameExt = scriptNameExt(file);, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +        injector.getInstance(Discovery.class).stop();, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +import org.elasticsearch.search.internal.SearchContext;, +        private Tuple<String, String> scriptNameExt(Path file) {, +            if (extIndex != -1) {, +            } else {, +                return null;, +            }, +            Tuple<String, String> scriptNameExt = scriptNameExt(file);, +            if (scriptNameExt != null) {, +                    logger.warn("no script engine found for [{}]", scriptNameExt.v2());, +        }, +            Tuple<String, String> scriptNameExt = scriptNameExt(file);, +++ b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java, +, +        logger.info("--> setup two test files one with extension and another without");, +        logger.info("--> verify that file with extension was correctly processed");, +        logger.info("--> delete both files");, +        logger.info("--> verify that file with extension was correctly removed");]