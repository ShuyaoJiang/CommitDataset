[+++ b/docs/reference/search/request-body.asciidoc, +include::request/track-total-hits.asciidoc[], +, +++ b/docs/reference/search/request-body.asciidoc, +include::request/track-total-hits.asciidoc[], +, +++ b/docs/reference/search/request/track-total-hits.asciidoc, +[[search-request-track-total-hits]], +=== Track total hits, +, +Generally the total hit count can't be computed accurately without visiting all, +matches, which is costly for queries that match lots of documents. The, +`track_total_hits` parameter allows you to control how the total number of hits, +should be tracked. When set to `true` the search response will always track the, +number of hits that match the query accurately (e.g. `total.relation` will always, +be equal to `"eq"` when `track_total_hits is set to true)., +, +[source,js], +--------------------------------------------------, +GET twitter/_search, +{, +    "track_total_hits": true,, +     "query": {, +        "match" : {, +            "message" : "Elasticsearch", +        }, +     }, +}, +--------------------------------------------------, +// TEST[setup:twitter], +// CONSOLE, +, +\... returns:, +, +[source,js], +--------------------------------------------------, +{, +    "_shards": ..., +    "timed_out": false,, +    "took": 100,, +    "hits": {, +        "max_score": 1.0,, +        "total" : {, +            "value": 2048,    <1>, +            "relation": "eq"  <2>, +        },, +        "hits": ..., +    }, +}, +--------------------------------------------------, +// TESTRESPONSE[s/"_shards": \.\.\./"_shards": "$body._shards",/], +// TESTRESPONSE[s/"took": 100/"took": $body.took/], +// TESTRESPONSE[s/"max_score": 1\.0/"max_score": $body.hits.max_score/], +// TESTRESPONSE[s/"value": 2048/"value": $body.hits.total.value/], +// TESTRESPONSE[s/"hits": \.\.\./"hits": "$body.hits.hits"/], +, +<1> The total number of hits that match the query., +<2> The count is accurate (e.g. `"eq"` means equals)., +, +If you don't need to track the total number of hits you can improve query times, +by setting this option to `false`. In such case the search can efficiently skip, +non-competitive hits because it doesn't need to count all matches:, +, +[source,js], +--------------------------------------------------, +GET twitter/_search, +{, +    "track_total_hits": false,, +     "query": {, +        "match" : {, +            "message" : "Elasticsearch", +        }, +     }, +}, +--------------------------------------------------, +// CONSOLE, +// TEST[continued], +, +\... returns:, +, +[source,js], +--------------------------------------------------, +{, +    "_shards": ..., +    "timed_out": false,, +    "took": 10,, +    "hits" : { <1>, +        "max_score": 1.0,, +        "hits": ..., +    }, +}, +--------------------------------------------------, +// TESTRESPONSE[s/"_shards": \.\.\./"_shards": "$body._shards",/], +// TESTRESPONSE[s/"took": 10/"took": $body.took/], +// TESTRESPONSE[s/"max_score": 1\.0/"max_score": $body.hits.max_score/], +// TESTRESPONSE[s/"hits": \.\.\./"hits": "$body.hits.hits"/], +, +<1> The total number of hits is unknown., +, +Given that it is often enough to have a lower bound of the number of hits,]