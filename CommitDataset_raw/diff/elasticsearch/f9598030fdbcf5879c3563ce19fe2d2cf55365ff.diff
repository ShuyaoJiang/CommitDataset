[+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import com.google.common.collect.Iterators;, +import com.google.common.collect.Lists;, +, +import org.elasticsearch.common.io.PathUtils;, +import java.io.IOException;, +import java.lang.reflect.Method;, +import java.net.URL;, +import java.nio.file.DirectoryStream;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.PathMatcher;, +import java.util.Arrays;, +import java.util.List;, +import static org.elasticsearch.common.io.FileSystemUtils.isAccessibleDirectory;, +        // install any plugins into classpath, +        setupPlugins(environment);, +        , +    , +    static final String PLUGIN_LIB_PATTERN = "glob:**.{jar,zip}";, +    private static void setupPlugins(Environment environment) throws IOException {, +        ESLogger logger = Loggers.getLogger(Bootstrap.class);, +, +        Path pluginsDirectory = environment.pluginsFile();, +        if (!isAccessibleDirectory(pluginsDirectory, logger)) {, +            return;, +        }, +, +        ClassLoader classLoader = ClassLoader.getSystemClassLoader();, +        Class<?> classLoaderClass = classLoader.getClass();, +        Method addURL = null;, +        try {, +            while (!classLoaderClass.equals(Object.class)) {, +                try {, +                    addURL = classLoaderClass.getDeclaredMethod("addURL", URL.class);, +                    addURL.setAccessible(true);, +                    break;, +                } catch (NoSuchMethodException e) {, +                    // no method, try the parent, +                    classLoaderClass = classLoaderClass.getSuperclass();, +                }, +            }, +, +            if (addURL == null) {, +                logger.debug("failed to find addURL method on classLoader [" + classLoader + "] to add methods");, +                return;, +            }, +, +            try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory)) {, +, +                for (Path plugin : stream) {, +                    // We check that subdirs are directories and readable, +                    if (!isAccessibleDirectory(plugin, logger)) {, +                        continue;, +                    }, +, +                    logger.trace("--- adding plugin [{}]", plugin.toAbsolutePath());, +, +                    try {, +                        // add the root, +                        addURL.invoke(classLoader, plugin.toUri().toURL());, +                        // gather files to add, +                        List<Path> libFiles = Lists.newArrayList();, +                        libFiles.addAll(Arrays.asList(files(plugin)));, +                        Path libLocation = plugin.resolve("lib");, +                        if (Files.isDirectory(libLocation)) {, +                            libFiles.addAll(Arrays.asList(files(libLocation)));, +                        }, +, +                        PathMatcher matcher = PathUtils.getDefaultFileSystem().getPathMatcher(PLUGIN_LIB_PATTERN);, +, +                        // if there are jars in it, add it as well, +                        for (Path libFile : libFiles) {, +                            if (!matcher.matches(libFile)) {, +                                continue;, +                            }, +                            addURL.invoke(classLoader, libFile.toUri().toURL());, +                        }, +                    } catch (Throwable e) {, +                        logger.warn("failed to add plugin [" + plugin + "]", e);, +                    }, +                }, +            }, +        } finally {, +            if (addURL != null) {, +                addURL.setAccessible(false);, +            }, +        }, +    }, +, +    private static Path[] files(Path from) throws IOException {, +        try (DirectoryStream<Path> stream = Files.newDirectoryStream(from)) {, +            return Iterators.toArray(stream.iterator(), Path.class);, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +import com.google.common.collect.Iterators;, +import com.google.common.collect.Lists;, +, +import org.elasticsearch.common.io.PathUtils;]