[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DynamicTemplate.java, +    public static DynamicTemplate parse(String name, Map<String, Object> conf) throws MapperParsingException {, +        if (!conf.containsKey("match")) {, +            throw new MapperParsingException("template must have match set");, +        }, +        String match = conf.get("match").toString();, +        String unmatch = conf.containsKey("unmatch") ? conf.get("unmatch").toString() : null;, +        String matchMappingType = conf.containsKey("match_mapping_type") ? conf.get("match_mapping_type").toString() : null;, +        if (!conf.containsKey("mapping")) {, +            throw new MapperParsingException("template must have mapping set");, +        }, +        Map<String, Object> mapping = (Map<String, Object>) conf.get("mapping");, +        String matchType = conf.containsKey("match_pattern") ? conf.get("match_pattern").toString() : "simple";, +        return new DynamicTemplate(name, conf, match, unmatch, matchMappingType, MatchType.fromString(matchType), mapping);, +    }, +, +    private final String name;, +, +    public DynamicTemplate(String name, Map<String, Object> conf, String match, String unmatch, String matchMappingType, MatchType matchType, Map<String, Object> mapping) {, +        this.name = name;, +    public String name() {, +        return this.name;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DynamicTemplate.java, +    public static DynamicTemplate parse(String name, Map<String, Object> conf) throws MapperParsingException {, +        if (!conf.containsKey("match")) {, +            throw new MapperParsingException("template must have match set");, +        }, +        String match = conf.get("match").toString();, +        String unmatch = conf.containsKey("unmatch") ? conf.get("unmatch").toString() : null;, +        String matchMappingType = conf.containsKey("match_mapping_type") ? conf.get("match_mapping_type").toString() : null;, +        if (!conf.containsKey("mapping")) {, +            throw new MapperParsingException("template must have mapping set");, +        }, +        Map<String, Object> mapping = (Map<String, Object>) conf.get("mapping");, +        String matchType = conf.containsKey("match_pattern") ? conf.get("match_pattern").toString() : "simple";, +        return new DynamicTemplate(name, conf, match, unmatch, matchMappingType, MatchType.fromString(matchType), mapping);, +    }, +, +    private final String name;, +, +    public DynamicTemplate(String name, Map<String, Object> conf, String match, String unmatch, String matchMappingType, MatchType matchType, Map<String, Object> mapping) {, +        this.name = name;, +    public String name() {, +        return this.name;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/RootObjectMapper.java, +import org.elasticsearch.index.mapper.MapperParsingException;, +                //          "template_1" : {, +                //      }, +                    if (tmpl.size() != 1) {, +                        throw new MapperParsingException("A dynamic template must be defined with a name");, +                    }, +                    Map.Entry<String, Object> entry = tmpl.entrySet().iterator().next();, +                    ((Builder) builder).add(DynamicTemplate.parse(entry.getKey(), (Map<String, Object>) entry.getValue()));, +                boolean replaced = false;, +                for (int i = 0; i < mergedTemplates.size(); i++) {, +                    if (mergedTemplates.get(i).name().equals(template.name())) {, +                        mergedTemplates.set(i, template);, +                        replaced = true;, +                    }, +                }, +                if (!replaced) {, +                builder.startObject();, +                builder.field(dynamicTemplate.name());, +                builder.endObject();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/DynamicTemplate.java, +    public static DynamicTemplate parse(String name, Map<String, Object> conf) throws MapperParsingException {, +        if (!conf.containsKey("match")) {, +            throw new MapperParsingException("template must have match set");, +        }, +        String match = conf.get("match").toString();, +        String unmatch = conf.containsKey("unmatch") ? conf.get("unmatch").toString() : null;, +        String matchMappingType = conf.containsKey("match_mapping_type") ? conf.get("match_mapping_type").toString() : null;, +        if (!conf.containsKey("mapping")) {, +            throw new MapperParsingException("template must have mapping set");, +        }, +        Map<String, Object> mapping = (Map<String, Object>) conf.get("mapping");, +        String matchType = conf.containsKey("match_pattern") ? conf.get("match_pattern").toString() : "simple";, +        return new DynamicTemplate(name, conf, match, unmatch, matchMappingType, MatchType.fromString(matchType), mapping);, +    }, +, +    private final String name;, +, +    public DynamicTemplate(String name, Map<String, Object> conf, String match, String unmatch, String matchMappingType, MatchType matchType, Map<String, Object> mapping) {, +        this.name = name;, +    public String name() {, +        return this.name;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/RootObjectMapper.java, +import org.elasticsearch.index.mapper.MapperParsingException;, +                //          "template_1" : {, +                //      }, +                    if (tmpl.size() != 1) {, +                        throw new MapperParsingException("A dynamic template must be defined with a name");, +                    }, +                    Map.Entry<String, Object> entry = tmpl.entrySet().iterator().next();]