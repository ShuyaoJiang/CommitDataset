[+++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +, +, +    Tuple<String, String> getScriptNameExt(Path file) {, +        Path scriptPath = scriptsDirectory.relativize(file);, +        int extIndex = scriptPath.toString().lastIndexOf('.');, +        if (extIndex <= 0) {, +            return null;, +        }, +, +        String ext = scriptPath.toString().substring(extIndex + 1);, +        if (ext.isEmpty()) {, +            return null;, +        }, +, +        String scriptName = scriptPath.toString().substring(0, extIndex).replace(scriptPath.getFileSystem().getSeparator(), "_");, +        return new Tuple<>(scriptName, ext);, +    }, +, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +            if (scriptNameExt == null) {, +                logger.debug("Skipped script with invalid extension : [{}]", file);, +                logger.warn("No script engine found for [{}]", scriptNameExt.v2());, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +++ b/core/src/main/java/org/elasticsearch/script/ScriptService.java, +, +, +    Tuple<String, String> getScriptNameExt(Path file) {, +        Path scriptPath = scriptsDirectory.relativize(file);, +        int extIndex = scriptPath.toString().lastIndexOf('.');, +        if (extIndex <= 0) {, +            return null;, +        }, +, +        String ext = scriptPath.toString().substring(extIndex + 1);, +        if (ext.isEmpty()) {, +            return null;, +        }, +, +        String scriptName = scriptPath.toString().substring(0, extIndex).replace(scriptPath.getFileSystem().getSeparator(), "_");, +        return new Tuple<>(scriptName, ext);, +    }, +, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +            if (scriptNameExt == null) {, +                logger.debug("Skipped script with invalid extension : [{}]", file);, +                logger.warn("No script engine found for [{}]", scriptNameExt.v2());, +            Tuple<String, String> scriptNameExt = getScriptNameExt(file);, +++ b/core/src/test/java/org/elasticsearch/script/ScriptServiceTests.java, +import org.elasticsearch.common.collect.Tuple;, +    public void testInvalidScriptNames() throws IOException {, +        assertThat(scriptService.getScriptNameExt(testHiddenFile), org.hamcrest.Matchers.nullValue());, +, +        Path testWithoutName = scriptsFilePath.resolve("");, +        assertThat(scriptService.getScriptNameExt(testWithoutName), org.hamcrest.Matchers.nullValue());, +, +        Path testDotName = scriptsFilePath.resolve(".");, +        assertThat(scriptService.getScriptNameExt(testDotName), org.hamcrest.Matchers.nullValue());, +, +        Path testWithoutExtension = scriptsFilePath.resolve("test.");, +        assertThat(scriptService.getScriptNameExt(testWithoutExtension), org.hamcrest.Matchers.nullValue());, +, +        Path testNameOnly = scriptsFilePath.resolve("test");, +        assertThat(scriptService.getScriptNameExt(testNameOnly), org.hamcrest.Matchers.nullValue());, +    }, +, +    public void testValidScriptName() throws IOException {, +        buildScriptService(Settings.EMPTY);, +, +        Path testTestFile = scriptsFilePath.resolve("test.ext");, +        Tuple<String, String> scriptNameExt = scriptService.getScriptNameExt(testTestFile);, +        assertThat(scriptNameExt.v1(), org.hamcrest.Matchers.equalTo("test"));, +        assertThat(scriptNameExt.v2(), org.hamcrest.Matchers.equalTo("ext"));, +    }, +, +    public void testScriptChangesListenerOnceHiddenFileDetected() throws IOException {, +        buildScriptService(Settings.EMPTY);, +, +        Path testHiddenFile = scriptsFilePath.resolve(".hidden_file");, +            String invalidScriptName = "";, +            scriptService.compile(new Script(invalidScriptName, ScriptType.FILE, "test", null),, +            fail("the script .hidden_file should not be processed");, +            //script without name because it is a hidden file, +            assertThat(ex.getMessage(), containsString("Unable to find on disk file script [] using lang [test]"));]