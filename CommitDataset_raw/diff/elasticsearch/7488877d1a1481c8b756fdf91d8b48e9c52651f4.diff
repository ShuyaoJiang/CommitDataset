[+++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +            Version minNodeVersion = null;, +            Version maxNodeVersion = null;, +                final Version version = nodeEntry.value.getVersion();, +                        minNonClientNodeVersion = version;, +                        maxNonClientNodeVersion = version;, +                        minNonClientNodeVersion = Version.min(minNonClientNodeVersion, version);, +                        maxNonClientNodeVersion = Version.max(maxNonClientNodeVersion, version);, +                minNodeVersion = minNodeVersion == null ? version : Version.min(minNodeVersion, version);, +                maxNodeVersion = maxNodeVersion == null ? version : Version.max(maxNodeVersion, version);, +                maxNonClientNodeVersion == null ? Version.CURRENT : maxNonClientNodeVersion,, +                maxNodeVersion == null ? Version.CURRENT : maxNodeVersion,, +                minNodeVersion == null ? Version.CURRENT : minNodeVersion, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +            Version minNodeVersion = null;, +            Version maxNodeVersion = null;, +                final Version version = nodeEntry.value.getVersion();, +                        minNonClientNodeVersion = version;, +                        maxNonClientNodeVersion = version;, +                        minNonClientNodeVersion = Version.min(minNonClientNodeVersion, version);, +                        maxNonClientNodeVersion = Version.max(maxNonClientNodeVersion, version);, +                minNodeVersion = minNodeVersion == null ? version : Version.min(minNodeVersion, version);, +                maxNodeVersion = maxNodeVersion == null ? version : Version.max(maxNodeVersion, version);, +                maxNonClientNodeVersion == null ? Version.CURRENT : maxNonClientNodeVersion,, +                maxNodeVersion == null ? Version.CURRENT : maxNodeVersion,, +                minNodeVersion == null ? Version.CURRENT : minNodeVersion, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/MembershipAction.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +            ensureNodesCompatibility(Version.CURRENT, request.state.getNodes());, +    /** ensures that the joining node has a version that's compatible with all current nodes*/, +    static void ensureNodesCompatibility(final Version joiningNodeVersion, DiscoveryNodes currentNodes) {, +        final Version minNodeVersion = currentNodes.getMinNodeVersion();, +        final Version maxNodeVersion = currentNodes.getMaxNodeVersion();, +        ensureNodesCompatibility(joiningNodeVersion, minNodeVersion, maxNodeVersion);, +    }, +, +    /** ensures that the joining node has a version that's compatible with a given version range */, +    static void ensureNodesCompatibility(Version joiningNodeVersion, Version minClusterNodeVersion, Version maxClusterNodeVersion) {, +        assert minClusterNodeVersion.onOrBefore(maxClusterNodeVersion) : minClusterNodeVersion + " > " + maxClusterNodeVersion;, +        if (joiningNodeVersion.isCompatible(maxClusterNodeVersion) == false) {, +            throw new IllegalStateException("node version [" + joiningNodeVersion + "] is not supported. " +, +                "The cluster contains nodes with version [" + maxClusterNodeVersion + "], which is incompatible.");, +        }, +        if (joiningNodeVersion.isCompatible(minClusterNodeVersion) == false) {, +            throw new IllegalStateException("node version [" + joiningNodeVersion + "] is not supported." +, +                "The cluster contains nodes with version [" + minClusterNodeVersion + "], which is incompatible.");, +        }, +    }, +, +    /**, +     * ensures that the joining node's major version is equal or higher to the minClusterNodeVersion. This is needed, +     * to ensure that if the master is already fully operating under the new major version, it doesn't go back to mixed, +     * version mode, +     **/, +    static void ensureMajorVersionBarrier(Version joiningNodeVersion, Version minClusterNodeVersion) {, +        final byte clusterMajor = minClusterNodeVersion.major;, +        if (joiningNodeVersion.major < clusterMajor) {, +            throw new IllegalStateException("node version [" + joiningNodeVersion + "] is not supported. " +, +                "All nodes in the cluster are of a higher major [" + clusterMajor + "].");, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +            Version minNodeVersion = null;, +            Version maxNodeVersion = null;, +                final Version version = nodeEntry.value.getVersion();, +                        minNonClientNodeVersion = version;, +                        maxNonClientNodeVersion = version;, +                        minNonClientNodeVersion = Version.min(minNonClientNodeVersion, version);, +                        maxNonClientNodeVersion = Version.max(maxNonClientNodeVersion, version);, +                minNodeVersion = minNodeVersion == null ? version : Version.min(minNodeVersion, version);, +                maxNodeVersion = maxNodeVersion == null ? version : Version.max(maxNodeVersion, version);, +                maxNonClientNodeVersion == null ? Version.CURRENT : maxNonClientNodeVersion,, +                maxNodeVersion == null ? Version.CURRENT : maxNodeVersion,, +                minNodeVersion == null ? Version.CURRENT : minNodeVersion, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/MembershipAction.java, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +            ensureNodesCompatibility(Version.CURRENT, request.state.getNodes());, +    /** ensures that the joining node has a version that's compatible with all current nodes*/, +    static void ensureNodesCompatibility(final Version joiningNodeVersion, DiscoveryNodes currentNodes) {, +        final Version minNodeVersion = currentNodes.getMinNodeVersion();, +        final Version maxNodeVersion = currentNodes.getMaxNodeVersion();, +        ensureNodesCompatibility(joiningNodeVersion, minNodeVersion, maxNodeVersion);, +    }, +, +    /** ensures that the joining node has a version that's compatible with a given version range */, +    static void ensureNodesCompatibility(Version joiningNodeVersion, Version minClusterNodeVersion, Version maxClusterNodeVersion) {, +        assert minClusterNodeVersion.onOrBefore(maxClusterNodeVersion) : minClusterNodeVersion + " > " + maxClusterNodeVersion;, +        if (joiningNodeVersion.isCompatible(maxClusterNodeVersion) == false) {, +            throw new IllegalStateException("node version [" + joiningNodeVersion + "] is not supported. " +, +                "The cluster contains nodes with version [" + maxClusterNodeVersion + "], which is incompatible.");, +        }, +        if (joiningNodeVersion.isCompatible(minClusterNodeVersion) == false) {, +            throw new IllegalStateException("node version [" + joiningNodeVersion + "] is not supported." +, +                "The cluster contains nodes with version [" + minClusterNodeVersion + "], which is incompatible.");, +        }, +    }, +, +    /**, +     * ensures that the joining node's major version is equal or higher to the minClusterNodeVersion. This is needed]