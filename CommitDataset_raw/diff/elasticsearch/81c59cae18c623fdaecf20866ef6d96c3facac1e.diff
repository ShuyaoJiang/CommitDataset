[+++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.rest.action.cat.RestTasksAction;, +        RestTasksAction.class,, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.rest.action.cat.RestTasksAction;, +        RestTasksAction.class,, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/node/tasks/RestListTasksAction.java, +    public static ListTasksRequest generateListTasksRequest(RestRequest request) {, +        TaskId taskId = new TaskId(request.param("taskId", request.param("task_id")));, +        return listTasksRequest;, +    }, +, +    @Override, +    public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) {, +        client.admin().cluster().listTasks(generateListTasksRequest(request), new RestToXContentListener<>(channel));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkModule.java, +import org.elasticsearch.rest.action.cat.RestTasksAction;, +        RestTasksAction.class,, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/node/tasks/RestListTasksAction.java, +    public static ListTasksRequest generateListTasksRequest(RestRequest request) {, +        TaskId taskId = new TaskId(request.param("taskId", request.param("task_id")));, +        return listTasksRequest;, +    }, +, +    @Override, +    public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) {, +        client.admin().cluster().listTasks(generateListTasksRequest(request), new RestToXContentListener<>(channel));, +++ b/core/src/main/java/org/elasticsearch/rest/action/cat/RestTasksAction.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.rest.action.cat;, +, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.TaskGroup;, +import org.elasticsearch.action.admin.cluster.node.tasks.list.TaskInfo;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.common.Table;, +import org.elasticsearch.common.inject.Inject;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.InetSocketTransportAddress;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.rest.RestChannel;, +import org.elasticsearch.rest.RestController;, +import org.elasticsearch.rest.RestRequest;, +import org.elasticsearch.rest.RestResponse;, +import org.elasticsearch.rest.action.support.RestResponseListener;, +import org.elasticsearch.rest.action.support.RestTable;, +import org.elasticsearch.tasks.TaskId;, +import org.joda.time.format.DateTimeFormat;, +import org.joda.time.format.DateTimeFormatter;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import static org.elasticsearch.rest.RestRequest.Method.GET;, +import static org.elasticsearch.rest.action.admin.cluster.node.tasks.RestListTasksAction.generateListTasksRequest;, +, +public class RestTasksAction extends AbstractCatAction {, +, +    @Inject, +    public RestTasksAction(Settings settings, RestController controller, Client client) {, +        super(settings, controller, client);, +        controller.registerHandler(GET, "/_cat/tasks", this);, +    }, +, +    @Override, +    protected void documentation(StringBuilder sb) {, +        sb.append("/_cat/tasks\n");, +    }, +, +    @Override, +    public void doRequest(final RestRequest request, final RestChannel channel, final Client client) {, +        client.admin().cluster().listTasks(generateListTasksRequest(request), new RestResponseListener<ListTasksResponse>(channel) {, +            @Override, +            public RestResponse buildResponse(ListTasksResponse listTasksResponse) throws Exception {, +                return RestTable.buildResponse(buildTable(request, listTasksResponse), channel);, +            }, +        });, +    }, +]