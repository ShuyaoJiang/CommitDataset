[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CCRDocumentationIT.java, +        {, +            // Create leader index:, +            CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader");, +            createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true));, +            CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT);, +            assertThat(response.isAcknowledged(), is(true));, +        }, +        {, +            // Follow index, so that we can query for follow stats:, +            PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", "follower");, +            PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT);, +            assertThat(putFollowResponse.isFollowIndexCreated(), is(true));, +            assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true));, +            assertThat(putFollowResponse.isIndexFollowingStarted(), is(true));, +        }, +, +, +        {, +            PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower");, +            AcknowledgedResponse pauseFollowResponse =  client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT);, +            assertThat(pauseFollowResponse.isAcknowledged(), is(true));, +        }, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CCRDocumentationIT.java, +        {, +            // Create leader index:, +            CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader");, +            createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true));, +            CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT);, +            assertThat(response.isAcknowledged(), is(true));, +        }, +        {, +            // Follow index, so that we can query for follow stats:, +            PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", "follower");, +            PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT);, +            assertThat(putFollowResponse.isFollowIndexCreated(), is(true));, +            assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true));, +            assertThat(putFollowResponse.isIndexFollowingStarted(), is(true));, +        }, +, +, +        {, +            PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower");, +            AcknowledgedResponse pauseFollowResponse =  client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT);, +            assertThat(pauseFollowResponse.isAcknowledged(), is(true));, +        }, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/follow_stats.yml, +  - do:, +      ccr.follow_stats:, +        index: _all, +  - length: { indices: 1 }, +  - match: { indices.0.index: "bar" }, +, +  - do:, +      catch: missing, +      ccr.follow_stats:, +        index: unknown, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/documentation/CCRDocumentationIT.java, +        {, +            // Create leader index:, +            CreateIndexRequest createIndexRequest = new CreateIndexRequest("leader");, +            createIndexRequest.settings(Collections.singletonMap("index.soft_deletes.enabled", true));, +            CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT);, +            assertThat(response.isAcknowledged(), is(true));, +        }, +        {, +            // Follow index, so that we can query for follow stats:, +            PutFollowRequest putFollowRequest = new PutFollowRequest("local", "leader", "follower");, +            PutFollowResponse putFollowResponse = client.ccr().putFollow(putFollowRequest, RequestOptions.DEFAULT);, +            assertThat(putFollowResponse.isFollowIndexCreated(), is(true));, +            assertThat(putFollowResponse.isFollowIndexShardsAcked(), is(true));, +            assertThat(putFollowResponse.isIndexFollowingStarted(), is(true));, +        }, +, +, +        {, +            PauseFollowRequest pauseFollowRequest = new PauseFollowRequest("follower");, +            AcknowledgedResponse pauseFollowResponse =  client.ccr().pauseFollow(pauseFollowRequest, RequestOptions.DEFAULT);, +            assertThat(pauseFollowResponse.isAcknowledged(), is(true));, +        }, +++ b/x-pack/plugin/ccr/qa/rest/src/test/resources/rest-api-spec/test/ccr/follow_stats.yml, +  - do:, +      ccr.follow_stats:, +        index: _all, +  - length: { indices: 1 }, +  - match: { indices.0.index: "bar" }, +, +  - do:, +      catch: missing, +      ccr.follow_stats:, +        index: unknown, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportFollowStatsAction.java, +import org.elasticsearch.ResourceNotFoundException;, +import org.elasticsearch.common.Strings;, +, +        if (Strings.isAllOrWildcard(request.indices()) == false) {, +            final ClusterState state = clusterService.state();, +            Set<String> shardFollowTaskFollowerIndices = findFollowerIndicesFromShardFollowTasks(state, request.indices());, +            if (shardFollowTaskFollowerIndices.isEmpty()) {, +                String resources = String.join(",", request.indices());]