[+++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +                } else if ("script".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +                } else if ("script".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +                } else if (parseContext.getParseFieldMatcher().match(currentFieldName, ScriptField.SCRIPT)) {, +                    script = Script.parse(parser, parseContext.getParseFieldMatcher());, +                } else {, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +                } else if ("script".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +                } else if (parseContext.getParseFieldMatcher().match(currentFieldName, ScriptField.SCRIPT)) {, +                    script = Script.parse(parser, parseContext.getParseFieldMatcher());, +                } else {, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryBuilder.java, +                    () -> new ParsingException(qSourceParser.getTokenLocation(), "inner query in [" + NAME + "] cannot be empty"));, +, +    /**, +     * In the simplest case, parse template string and variables from the request,, +     * compile the template and execute the template against the given variables., +     */, +    public static Optional<TemplateQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +        Template template =  Template.parse(parser, parseContext.getParseFieldMatcher());, +        return Optional.of(new TemplateQueryBuilder(template));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +                } else if ("script".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +                } else if (parseContext.getParseFieldMatcher().match(currentFieldName, ScriptField.SCRIPT)) {, +                    script = Script.parse(parser, parseContext.getParseFieldMatcher());, +                } else {, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryBuilder.java, +                    () -> new ParsingException(qSourceParser.getTokenLocation(), "inner query in [" + NAME + "] cannot be empty"));, +, +    /**, +     * In the simplest case, parse template string and variables from the request,, +     * compile the template and execute the template against the given variables., +     */, +    public static Optional<TemplateQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +        Template template =  Template.parse(parser, parseContext.getParseFieldMatcher());, +        return Optional.of(new TemplateQueryBuilder(template));, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +            } else {, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +                } else if ("script".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +                } else if (parseContext.getParseFieldMatcher().match(currentFieldName, ScriptField.SCRIPT)) {, +                    script = Script.parse(parser, parseContext.getParseFieldMatcher());, +                } else {, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryBuilder.java, +                    () -> new ParsingException(qSourceParser.getTokenLocation(), "inner query in [" + NAME + "] cannot be empty"));, +, +    /**, +     * In the simplest case, parse template string and variables from the request,, +     * compile the template and execute the template against the given variables., +     */, +    public static Optional<TemplateQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +        Template template =  Template.parse(parser, parseContext.getParseFieldMatcher());, +        return Optional.of(new TemplateQueryBuilder(template));, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +            } else {, +++ b/core/src/main/java/org/elasticsearch/rest/action/update/RestUpdateAction.java, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +                } else if ("script".equals(currentFieldName)) {, +++ b/core/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java, +                } else if (parseContext.getParseFieldMatcher().match(currentFieldName, ScriptField.SCRIPT)) {, +                    script = Script.parse(parser, parseContext.getParseFieldMatcher());, +                } else {, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryBuilder.java, +                    () -> new ParsingException(qSourceParser.getTokenLocation(), "inner query in [" + NAME + "] cannot be empty"));, +, +    /**, +     * In the simplest case, parse template string and variables from the request,, +     * compile the template and execute the template against the given variables., +     */, +    public static Optional<TemplateQueryBuilder> fromXContent(QueryParseContext parseContext) throws IOException {, +        XContentParser parser = parseContext.parser();, +        Template template =  Template.parse(parser, parseContext.getParseFieldMatcher());, +        return Optional.of(new TemplateQueryBuilder(template));, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreFunctionBuilder.java, +            } else {, +++ b/core/src/main/java/org/elasticsearch/rest/action/update/RestUpdateAction.java, +++ b/core/src/main/java/org/elasticsearch/script/AbstractScriptParser.java, +    public abstract String parseInlineScript(XContentParser parser) throws IOException;, +            } else if (parseFieldMatcher.match(currentFieldName, ScriptType.INLINE.getParseField())) {, +            } else if (parseFieldMatcher.match(currentFieldName, ScriptType.FILE.getParseField())) {, +            } else if (parseFieldMatcher.match(currentFieldName, ScriptType.STORED.getParseField())) {, +            } else if (parseFieldMatcher.match(currentFieldName, ScriptField.LANG)) {, +            if (parseFieldMatcher.match(parameterName, ScriptField.LANG)) {, +            } else if (parseFieldMatcher.match(parameterName, ScriptType.INLINE.getParseField())) {, +            } else if (parseFieldMatcher.match(parameterName, ScriptType.FILE.getParseField())) {, +            } else if (parseFieldMatcher.match(parameterName, ScriptType.STORED.getParseField())) {, +++ b/core/src/main/java/org/elasticsearch/action/update/UpdateRequest.java, +                } else if ("script".equals(currentFieldName)) {]