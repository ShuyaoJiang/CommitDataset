[+++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.ElasticsearchException;, +, +    /** node names of the corresponding clusters will start with these prefixes */, +    public static final String GLOBAL_CLUSTER_NODE_PREFIX = "node_";, +    public static final String SUITE_CLUSTER_NODE_PREFIX = "node_s";, +    public static final String TEST_CLUSTER_NODE_PREFIX = "node_t";, +, +                        clusterName("shared", Integer.toString(CHILD_JVM_ID), masterSeed), numClientNodes, InternalTestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES,, +                        CHILD_JVM_ID, GLOBAL_CLUSTER_NODE_PREFIX);, +, +        String nodePrefix;, +        switch (scope) {, +            case TEST:, +                nodePrefix = TEST_CLUSTER_NODE_PREFIX;, +                break;, +            case SUITE:, +                nodePrefix = SUITE_CLUSTER_NODE_PREFIX;, +                break;, +            case GLOBAL:, +                nodePrefix = GLOBAL_CLUSTER_NODE_PREFIX;, +                break;, +            default:, +                throw new ElasticsearchException("Unknown scope: " + scope);, +        }, +, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes,, +                clusterName(scope.name(), Integer.toString(CHILD_JVM_ID), currentClusterSeed), settingsSource, numClientNodes,, +                enableRandomBenchNodes, CHILD_JVM_ID, nodePrefix);, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.ElasticsearchException;, +, +    /** node names of the corresponding clusters will start with these prefixes */, +    public static final String GLOBAL_CLUSTER_NODE_PREFIX = "node_";, +    public static final String SUITE_CLUSTER_NODE_PREFIX = "node_s";, +    public static final String TEST_CLUSTER_NODE_PREFIX = "node_t";, +, +                        clusterName("shared", Integer.toString(CHILD_JVM_ID), masterSeed), numClientNodes, InternalTestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES,, +                        CHILD_JVM_ID, GLOBAL_CLUSTER_NODE_PREFIX);, +, +        String nodePrefix;, +        switch (scope) {, +            case TEST:, +                nodePrefix = TEST_CLUSTER_NODE_PREFIX;, +                break;, +            case SUITE:, +                nodePrefix = SUITE_CLUSTER_NODE_PREFIX;, +                break;, +            case GLOBAL:, +                nodePrefix = GLOBAL_CLUSTER_NODE_PREFIX;, +                break;, +            default:, +                throw new ElasticsearchException("Unknown scope: " + scope);, +        }, +, +        return new InternalTestCluster(currentClusterSeed, minNumDataNodes, maxNumDataNodes,, +                clusterName(scope.name(), Integer.toString(CHILD_JVM_ID), currentClusterSeed), settingsSource, numClientNodes,, +                enableRandomBenchNodes, CHILD_JVM_ID, nodePrefix);, +++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java, +    /**, +     * All nodes started by the cluster will have their name set to nodePrefix followed by a positive number, +     */, +    private final String nodePrefix;, +, +, +    public InternalTestCluster(long clusterSeed, int minNumDataNodes, int maxNumDataNodes, String clusterName, int numClientNodes, boolean enableRandomBenchNodes,, +                               int jvmOrdinal, String nodePrefix) {, +        this(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, DEFAULT_SETTINGS_SOURCE, numClientNodes, enableRandomBenchNodes, jvmOrdinal, nodePrefix);, +    public InternalTestCluster(long clusterSeed,, +                               int minNumDataNodes, int maxNumDataNodes, String clusterName, SettingsSource settingsSource, int numClientNodes,, +                               boolean enableRandomBenchNodes,, +                               int jvmOrdinal, String nodePrefix) {, +        this.nodePrefix = nodePrefix;, +, +        assert nodePrefix != null;, +, +        return nodePrefix + id;, +        return nodePrefix;, +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.ElasticsearchException;, +, +    /** node names of the corresponding clusters will start with these prefixes */, +    public static final String GLOBAL_CLUSTER_NODE_PREFIX = "node_";, +    public static final String SUITE_CLUSTER_NODE_PREFIX = "node_s";, +    public static final String TEST_CLUSTER_NODE_PREFIX = "node_t";, +, +                        clusterName("shared", Integer.toString(CHILD_JVM_ID), masterSeed), numClientNodes, InternalTestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES,, +                        CHILD_JVM_ID, GLOBAL_CLUSTER_NODE_PREFIX);, +, +        String nodePrefix;, +        switch (scope) {, +            case TEST:, +                nodePrefix = TEST_CLUSTER_NODE_PREFIX;, +                break;, +            case SUITE:, +                nodePrefix = SUITE_CLUSTER_NODE_PREFIX;, +                break;, +            case GLOBAL:, +                nodePrefix = GLOBAL_CLUSTER_NODE_PREFIX;, +                break;]