[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +import java.net.Inet6Address;, +        InetAddress inetAddress;, +        if (len == 16) {, +            inetAddress = Inet6Address.getByAddress(null, a);, +        } else {, +            inetAddress = InetAddress.getByAddress(a);, +        }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +import java.net.Inet6Address;, +        InetAddress inetAddress;, +        if (len == 16) {, +            inetAddress = Inet6Address.getByAddress(null, a);, +        } else {, +            inetAddress = InetAddress.getByAddress(a);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +                allocationMultibinder.addBinding().to(clazz).asEagerSingleton();, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +import java.net.Inet6Address;, +        InetAddress inetAddress;, +        if (len == 16) {, +            inetAddress = Inet6Address.getByAddress(null, a);, +        } else {, +            inetAddress = InetAddress.getByAddress(a);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +                allocationMultibinder.addBinding().to(clazz).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.discovery.zen.ping.ZenPing;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +import java.util.ArrayList;, +    private final List<Class<? extends UnicastHostsProvider>> unicastHostProviders = new ArrayList<>();, +    private final ExtensionPoint.ClassSet<ZenPing> zenPings = new ExtensionPoint.ClassSet<>("zen_ping", ZenPing.class);, +        // always add the unicast hosts, or things get angry!, +        addZenPing(UnicastZenPing.class);, +    public void addZenPing(Class<? extends ZenPing> clazz) {, +        zenPings.registerExtension(clazz);, +    }, +, +            zenPings.bind(binder());, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +import java.net.Inet6Address;, +        InetAddress inetAddress;, +        if (len == 16) {, +            inetAddress = Inet6Address.getByAddress(null, a);, +        } else {, +            inetAddress = InetAddress.getByAddress(a);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +                allocationMultibinder.addBinding().to(clazz).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.discovery.zen.ping.ZenPing;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +import java.util.ArrayList;, +    private final List<Class<? extends UnicastHostsProvider>> unicastHostProviders = new ArrayList<>();, +    private final ExtensionPoint.ClassSet<ZenPing> zenPings = new ExtensionPoint.ClassSet<>("zen_ping", ZenPing.class);, +        // always add the unicast hosts, or things get angry!, +        addZenPing(UnicastZenPing.class);, +    public void addZenPing(Class<? extends ZenPing> clazz) {, +        zenPings.registerExtension(clazz);, +    }, +, +            zenPings.bind(binder());, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingService.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +    private List<ZenPing> zenPings = Collections.emptyList();, +    public ZenPingService(Settings settings, Set<ZenPing> zenPings) {, +        this.zenPings = Collections.unmodifiableList(new ArrayList<>(zenPings));, +    public List<ZenPing> zenPings() {, +            logger.info("Starting ping: " + zenPing);, +        List<? extends ZenPing> zenPings = this.zenPings;, +        private CompoundPingListener(PingListener listener, List<? extends ZenPing> zenPings) {, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/transport/InetSocketTransportAddress.java, +import java.net.Inet6Address;, +        InetAddress inetAddress;, +        if (len == 16) {, +            inetAddress = Inet6Address.getByAddress(null, a);, +        } else {, +            inetAddress = InetAddress.getByAddress(a);, +        }, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +                allocationMultibinder.addBinding().to(clazz).asEagerSingleton();, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.util.ExtensionPoint;, +import org.elasticsearch.discovery.zen.ping.ZenPing;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +import java.util.ArrayList;, +    private final List<Class<? extends UnicastHostsProvider>> unicastHostProviders = new ArrayList<>();, +    private final ExtensionPoint.ClassSet<ZenPing> zenPings = new ExtensionPoint.ClassSet<>("zen_ping", ZenPing.class);]