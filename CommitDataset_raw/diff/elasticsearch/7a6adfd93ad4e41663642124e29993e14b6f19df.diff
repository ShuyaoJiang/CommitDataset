[+++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    private final ProcessorsRegistry.Builder processorsRegistryBuilder;, +    public IngestService(Settings settings, ThreadPool threadPool, ProcessorsRegistry.Builder processorsRegistryBuilder) {, +        this.processorsRegistryBuilder = processorsRegistryBuilder;, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    private final ProcessorsRegistry.Builder processorsRegistryBuilder;, +    public IngestService(Settings settings, ThreadPool threadPool, ProcessorsRegistry.Builder processorsRegistryBuilder) {, +        this.processorsRegistryBuilder = processorsRegistryBuilder;, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    private ProcessorsRegistry processorRegistry;, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry.Builder processorsRegistryBuilder, ScriptService scriptService) {, +        this.processorRegistry = processorsRegistryBuilder.build(templateService);, +        processorRegistry.close();, +                pipelines.put(pipeline.getId(), factory.create(pipeline.getId(), pipeline.getConfigAsMap(), processorRegistry));, +            factory.create(request.getId(), pipelineConfig, processorRegistry);, +    public ProcessorsRegistry getProcessorRegistry() {, +        return processorRegistry;, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    private final ProcessorsRegistry.Builder processorsRegistryBuilder;, +    public IngestService(Settings settings, ThreadPool threadPool, ProcessorsRegistry.Builder processorsRegistryBuilder) {, +        this.processorsRegistryBuilder = processorsRegistryBuilder;, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    private ProcessorsRegistry processorRegistry;, +    public void buildProcessorFactoryRegistry(ProcessorsRegistry.Builder processorsRegistryBuilder, ScriptService scriptService) {, +        this.processorRegistry = processorsRegistryBuilder.build(templateService);, +        processorRegistry.close();, +                pipelines.put(pipeline.getId(), factory.create(pipeline.getId(), pipeline.getConfigAsMap(), processorRegistry));, +            factory.create(request.getId(), pipelineConfig, processorRegistry);, +    public ProcessorsRegistry getProcessorRegistry() {, +        return processorRegistry;, +++ b/core/src/main/java/org/elasticsearch/ingest/ProcessorsRegistry.java, +import org.apache.lucene.util.IOUtils;, +import java.io.Closeable;, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.function.BiFunction;, +public final class ProcessorsRegistry implements Closeable {, +    private final Map<String, Processor.Factory> processorFactories;, +, +    private ProcessorsRegistry(TemplateService templateService,, +                               Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers) {, +        Map<String, Processor.Factory> processorFactories = new HashMap<>();, +        for (Map.Entry<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> entry : providers.entrySet()) {, +            processorFactories.put(entry.getKey(), entry.getValue().apply(templateService, this));, +        }, +        this.processorFactories = Collections.unmodifiableMap(processorFactories);, +    }, +, +    public Processor.Factory getProcessorFactory(String name) {, +        return processorFactories.get(name);, +    }, +, +    @Override, +    public void close() throws IOException {, +        List<Closeable> closeables = new ArrayList<>();, +        for (Processor.Factory factory : processorFactories.values()) {, +            if (factory instanceof Closeable) {, +                closeables.add((Closeable) factory);, +            }, +        }, +        IOUtils.close(closeables);, +    }, +, +    // For testing:, +    Map<String, Processor.Factory> getProcessorFactories() {, +        return processorFactories;, +    }, +, +    public static final class Builder {, +, +        private final Map<String, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>>> providers = new HashMap<>();, +        public void registerProcessor(String name, BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> provider) {, +            BiFunction<TemplateService, ProcessorsRegistry, Processor.Factory<?>> previous = this.providers.putIfAbsent(name, provider);, +            if (previous != null) {, +        public ProcessorsRegistry build(TemplateService templateService) {, +            return new ProcessorsRegistry(templateService, providers);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineRequest.java, +        Pipeline pipeline = PIPELINE_FACTORY.create(SIMULATED_PIPELINE_ID, pipelineConfig, pipelineStore.getProcessorRegistry());, +++ b/core/src/main/java/org/elasticsearch/ingest/IngestService.java, +    private final ProcessorsRegistry.Builder processorsRegistryBuilder;, +    public IngestService(Settings settings, ThreadPool threadPool, ProcessorsRegistry.Builder processorsRegistryBuilder) {, +        this.processorsRegistryBuilder = processorsRegistryBuilder;, +        pipelineStore.buildProcessorFactoryRegistry(processorsRegistryBuilder, scriptService);, +++ b/core/src/main/java/org/elasticsearch/ingest/PipelineStore.java, +    private ProcessorsRegistry processorRegistry;]