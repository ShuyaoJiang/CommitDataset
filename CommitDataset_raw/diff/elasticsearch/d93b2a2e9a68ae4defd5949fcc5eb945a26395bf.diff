[+++ b/x-pack/docs/build.gradle, +                        interval: "7d", +++ b/x-pack/docs/build.gradle, +                        interval: "7d", +++ b/x-pack/docs/en/rest-api/rollup/put-job.asciidoc, +For more details about the job configuration, see <<rollup-job-config>>., +, +++ b/x-pack/docs/build.gradle, +                        interval: "7d", +++ b/x-pack/docs/en/rest-api/rollup/put-job.asciidoc, +For more details about the job configuration, see <<rollup-job-config>>., +, +++ b/x-pack/docs/en/rest-api/rollup/rollup-job-config.asciidoc, +        "interval": "60m",, +    "interval": "60m",, +  The interval of time buckets to be generated when rolling up.  E.g. `"60m"` will produce 60 minute (hourly) rollups.  This follows standard time formatting, +  syntax as used elsewhere in Elasticsearch.  The `interval` defines the _minimum_ interval that can be aggregated only.  If hourly (`"60m"`), +  intervals are configured, <<rollup-search,Rollup Search>> can execute aggregations with 60m or greater (weekly, monthly, etc) intervals., +.Calendar vs Fixed time intervals, +**********************************, +Elasticsearch understands both "calendar" and "fixed" time intervals.  Fixed time intervals are fairly easy to understand;, +`"60s"` means sixty seconds.  But what does `"1M` mean?  One month of time depends on which month we are talking about,, +some months are longer or shorter than others.  This is an example of "calendar" time, and the duration of that unit, +depends on context.  Calendar units are also affected by leap-seconds, leap-years, etc., +, +This is important because the buckets generated by Rollup will be in either calendar or fixed intervals, and will limit, +how you can query them later (see <<rollup-search-limitations-intervals, Requests must be multiples of the config>>., +, +We recommend sticking with "fixed" time intervals, since they are easier to understand and are more flexible at query, +time.  It will introduce some drift in your data during leap-events, and you will have to think about months in a fixed, +quantity (30 days) instead of the actual calendar length... but it is often easier than dealing with calendar units, +at query time., +, +Multiples of units are always "fixed" (e.g. `"2h"` is always the fixed quantity `7200` seconds.  Single units can be, +fixed or calendar depending on the unit:, +, +[options="header"], +|=======, +|Unit |Calendar |Fixed, +|millisecond |NA |`1ms`, `10ms`, etc, +|second |NA |`1s`, `10s`, etc, +|minute |`1m` |`2m`, `10m`, etc, +|hour |`1h` |`2h`, `10h`, etc, +|day |`1d` |`2d`, `10d`, etc, +|week |`1w` |NA, +|month |`1M` |NA, +|quarter |`1q` |NA, +|year |`1y` |NA, +|=======, +, +For some units where there are both fixed and calendar, you may need to express the quantity in terms of the next, +smaller unit.  For example, if you want a fixed day (not a calendar day), you should specify `24h` instead of `1d`., +Similarly, if you want fixed hours, specify `60m` instead of `1h`.  This is because the single quantity entails, +calendar time, and limits you to querying by calendar time in the future., +, +, +**********************************, +, +++ b/x-pack/docs/build.gradle, +                        interval: "7d", +++ b/x-pack/docs/en/rest-api/rollup/put-job.asciidoc, +For more details about the job configuration, see <<rollup-job-config>>., +, +++ b/x-pack/docs/en/rest-api/rollup/rollup-job-config.asciidoc, +        "interval": "60m",, +    "interval": "60m",, +  The interval of time buckets to be generated when rolling up.  E.g. `"60m"` will produce 60 minute (hourly) rollups.  This follows standard time formatting, +  syntax as used elsewhere in Elasticsearch.  The `interval` defines the _minimum_ interval that can be aggregated only.  If hourly (`"60m"`), +  intervals are configured, <<rollup-search,Rollup Search>> can execute aggregations with 60m or greater (weekly, monthly, etc) intervals., +.Calendar vs Fixed time intervals, +**********************************, +Elasticsearch understands both "calendar" and "fixed" time intervals.  Fixed time intervals are fairly easy to understand;, +`"60s"` means sixty seconds.  But what does `"1M` mean?  One month of time depends on which month we are talking about,, +some months are longer or shorter than others.  This is an example of "calendar" time, and the duration of that unit, +depends on context.  Calendar units are also affected by leap-seconds, leap-years, etc., +, +This is important because the buckets generated by Rollup will be in either calendar or fixed intervals, and will limit, +how you can query them later (see <<rollup-search-limitations-intervals, Requests must be multiples of the config>>., +, +We recommend sticking with "fixed" time intervals, since they are easier to understand and are more flexible at query, +time.  It will introduce some drift in your data during leap-events, and you will have to think about months in a fixed, +quantity (30 days) instead of the actual calendar length... but it is often easier than dealing with calendar units, +at query time., +, +Multiples of units are always "fixed" (e.g. `"2h"` is always the fixed quantity `7200` seconds.  Single units can be, +fixed or calendar depending on the unit:, +, +[options="header"], +|=======, +|Unit |Calendar |Fixed, +|millisecond |NA |`1ms`, `10ms`, etc, +|second |NA |`1s`, `10s`, etc, +|minute |`1m` |`2m`, `10m`, etc, +|hour |`1h` |`2h`, `10h`, etc, +|day |`1d` |`2d`, `10d`, etc, +|week |`1w` |NA, +|month |`1M` |NA, +|quarter |`1q` |NA, +|year |`1y` |NA, +|=======]