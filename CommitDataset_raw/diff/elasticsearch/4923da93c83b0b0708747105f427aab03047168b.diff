[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]WaitActiveShardCountIT.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]WaitActiveShardCountIT.java" checks="LineLength" />, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]WaitActiveShardCountIT.java" checks="LineLength" />, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]WaitActiveShardCountIT.java" checks="LineLength" />, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +, +    /**, +     * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {, +        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]WaitActiveShardCountIT.java" checks="LineLength" />, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +, +    /**, +     * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {, +        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]WaitActiveShardCountIT.java" checks="LineLength" />, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequest waitForActiveShards(final int waitForActiveShards) {, +        return waitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequestBuilder.java, +, +    /**, +     * A shortcut for {@link #setWaitForActiveShards(ActiveShardCount)} where the numerical, +     * shard count is passed in, instead of having to first call {@link ActiveShardCount#from(int)}, +     * to get the ActiveShardCount., +     */, +    public CreateIndexRequestBuilder setWaitForActiveShards(final int waitForActiveShards) {, +        return setWaitForActiveShards(ActiveShardCount.from(waitForActiveShards));, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/ShardFlushRequest.java, +import org.elasticsearch.action.support.ActiveShardCount;, +        this.waitForActiveShards = ActiveShardCount.NONE; // don't wait for any active shards before proceeding, by default, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/flush/TransportShardFlushAction.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]support[/\\]WaitActiveShardCountIT.java" checks="LineLength" />, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/create/CreateIndexRequest.java, +    /**, +     * A shortcut for {@link #waitForActiveShards(ActiveShardCount)} where the numerical]