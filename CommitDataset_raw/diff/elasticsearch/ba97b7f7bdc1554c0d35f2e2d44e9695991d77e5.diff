[+++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.lucene.Lucene;, +        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : "Version must be upgraded to [" + Lucene.VERSION + "] is still set to [" + CURRENT.luceneVersion + "]";, +, +, +, +, +                return new Version(id, false, Lucene.VERSION);, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.lucene.Lucene;, +        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : "Version must be upgraded to [" + Lucene.VERSION + "] is still set to [" + CURRENT.luceneVersion + "]";, +, +, +, +, +                return new Version(id, false, Lucene.VERSION);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.warmer.delete.DeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.delete.TransportDeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.get.GetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.get.TransportGetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.put.PutWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.put.TransportPutWarmerAction;, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestDisabledActionFilter;, +import org.elasticsearch.action.ingest.DeletePipelineAction;, +import org.elasticsearch.action.ingest.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.GetPipelineAction;, +import org.elasticsearch.action.ingest.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.PutPipelineAction;, +import org.elasticsearch.action.ingest.PutPipelineTransportAction;, +import org.elasticsearch.action.ingest.SimulatePipelineAction;, +import org.elasticsearch.action.ingest.SimulatePipelineTransportAction;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.ingest.IngestModule;, +    private final boolean ingestEnabled;, +    public ActionModule(Settings settings, boolean proxy) {, +        this.ingestEnabled = IngestModule.isIngestEnabled(settings);, +        if (proxy == false) {, +            if (ingestEnabled) {, +                registerFilter(IngestActionFilter.class);, +            } else {, +                registerFilter(IngestDisabledActionFilter.class);, +            }, +        }, +        registerAction(PutWarmerAction.INSTANCE, TransportPutWarmerAction.class);, +        registerAction(DeleteWarmerAction.INSTANCE, TransportDeleteWarmerAction.class);, +        registerAction(GetWarmersAction.INSTANCE, TransportGetWarmersAction.class);, +        registerAction(PutPipelineAction.INSTANCE, PutPipelineTransportAction.class);, +        registerAction(GetPipelineAction.INSTANCE, GetPipelineTransportAction.class);, +        registerAction(DeletePipelineAction.INSTANCE, DeletePipelineTransportAction.class);, +        registerAction(SimulatePipelineAction.INSTANCE, SimulatePipelineTransportAction.class);, +, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.lucene.Lucene;, +        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : "Version must be upgraded to [" + Lucene.VERSION + "] is still set to [" + CURRENT.luceneVersion + "]";, +, +, +, +, +                return new Version(id, false, Lucene.VERSION);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.warmer.delete.DeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.delete.TransportDeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.get.GetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.get.TransportGetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.put.PutWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.put.TransportPutWarmerAction;, +import org.elasticsearch.action.ingest.IngestActionFilter;, +import org.elasticsearch.action.ingest.IngestDisabledActionFilter;, +import org.elasticsearch.action.ingest.DeletePipelineAction;, +import org.elasticsearch.action.ingest.DeletePipelineTransportAction;, +import org.elasticsearch.action.ingest.GetPipelineAction;, +import org.elasticsearch.action.ingest.GetPipelineTransportAction;, +import org.elasticsearch.action.ingest.PutPipelineAction;, +import org.elasticsearch.action.ingest.PutPipelineTransportAction;, +import org.elasticsearch.action.ingest.SimulatePipelineAction;]