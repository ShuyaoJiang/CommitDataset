[+++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +/**, + * Span query that matches the union of its clauses. Maps to {@link SpanOrQuery}., + */, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +/**, + * Span query that matches the union of its clauses. Maps to {@link SpanOrQuery}., + */, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryParser.java, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +/**, + * Span query that matches the union of its clauses. Maps to {@link SpanOrQuery}., + */, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BaseQueryTestCase.java, +, +    /**, +     * create a random value for either {@link BaseQueryTestCase#BOOLEAN_FIELD_NAME}, {@link BaseQueryTestCase#INT_FIELD_NAME},, +     * {@link BaseQueryTestCase#DOUBLE_FIELD_NAME} or {@link BaseQueryTestCase#STRING_FIELD_NAME}, or a String value by default, +     */, +    protected static Object randomValueForField(String fieldName) {, +        Object value;, +        switch (fieldName) {, +            case BOOLEAN_FIELD_NAME: value = randomBoolean(); break;, +            case INT_FIELD_NAME: value = randomInt(); break;, +            case DOUBLE_FIELD_NAME: value = randomDouble(); break;, +            case STRING_FIELD_NAME: value = randomAsciiOfLengthBetween(1, 10); break;, +            default : value = randomAsciiOfLengthBetween(1, 10);, +        }, +        return value;, +    }, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +/**, + * Span query that matches the union of its clauses. Maps to {@link SpanOrQuery}., + */, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BaseQueryTestCase.java, +, +    /**, +     * create a random value for either {@link BaseQueryTestCase#BOOLEAN_FIELD_NAME}, {@link BaseQueryTestCase#INT_FIELD_NAME},, +     * {@link BaseQueryTestCase#DOUBLE_FIELD_NAME} or {@link BaseQueryTestCase#STRING_FIELD_NAME}, or a String value by default, +     */, +    protected static Object randomValueForField(String fieldName) {, +        Object value;, +        switch (fieldName) {, +            case BOOLEAN_FIELD_NAME: value = randomBoolean(); break;, +            case INT_FIELD_NAME: value = randomInt(); break;, +            case DOUBLE_FIELD_NAME: value = randomDouble(); break;, +            case STRING_FIELD_NAME: value = randomAsciiOfLengthBetween(1, 10); break;, +            default : value = randomAsciiOfLengthBetween(1, 10);, +        }, +        return value;, +    }, +++ b/core/src/test/java/org/elasticsearch/index/query/SpanContainingQueryBuilderTest.java, +        SpanTermQueryBuilder littleQuery = new SpanTermQueryBuilder(fieldName, randomValueForField(fieldName));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +/**, + * Span query that matches the union of its clauses. Maps to {@link SpanOrQuery}., + */, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BaseQueryTestCase.java, +, +    /**, +     * create a random value for either {@link BaseQueryTestCase#BOOLEAN_FIELD_NAME}, {@link BaseQueryTestCase#INT_FIELD_NAME},, +     * {@link BaseQueryTestCase#DOUBLE_FIELD_NAME} or {@link BaseQueryTestCase#STRING_FIELD_NAME}, or a String value by default, +     */, +    protected static Object randomValueForField(String fieldName) {, +        Object value;, +        switch (fieldName) {, +            case BOOLEAN_FIELD_NAME: value = randomBoolean(); break;, +            case INT_FIELD_NAME: value = randomInt(); break;, +            case DOUBLE_FIELD_NAME: value = randomDouble(); break;, +            case STRING_FIELD_NAME: value = randomAsciiOfLengthBetween(1, 10); break;, +            default : value = randomAsciiOfLengthBetween(1, 10);, +        }, +        return value;, +    }, +++ b/core/src/test/java/org/elasticsearch/index/query/SpanContainingQueryBuilderTest.java, +        SpanTermQueryBuilder littleQuery = new SpanTermQueryBuilder(fieldName, randomValueForField(fieldName));, +++ b/core/src/test/java/org/elasticsearch/index/query/SpanNearQueryBuilderTest.java, +            queryBuilder.clause(new SpanTermQueryBuilder(fieldName, randomValueForField(fieldName)));, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryBuilder.java, +/**, + * Span query that matches the union of its clauses. Maps to {@link SpanOrQuery}., + */, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanOrQueryParser.java, +++ b/core/src/test/java/org/elasticsearch/index/query/BaseQueryTestCase.java, +, +    /**, +     * create a random value for either {@link BaseQueryTestCase#BOOLEAN_FIELD_NAME}, {@link BaseQueryTestCase#INT_FIELD_NAME},, +     * {@link BaseQueryTestCase#DOUBLE_FIELD_NAME} or {@link BaseQueryTestCase#STRING_FIELD_NAME}, or a String value by default, +     */, +    protected static Object randomValueForField(String fieldName) {, +        Object value;, +        switch (fieldName) {, +            case BOOLEAN_FIELD_NAME: value = randomBoolean(); break;, +            case INT_FIELD_NAME: value = randomInt(); break;, +            case DOUBLE_FIELD_NAME: value = randomDouble(); break;, +            case STRING_FIELD_NAME: value = randomAsciiOfLengthBetween(1, 10); break;, +            default : value = randomAsciiOfLengthBetween(1, 10);]