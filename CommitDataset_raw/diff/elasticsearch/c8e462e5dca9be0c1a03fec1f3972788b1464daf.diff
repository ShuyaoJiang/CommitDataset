[+++ b/buildSrc/build.gradle, +import java.nio.file.Files, +, +boolean snapshot = "true".equals(System.getProperty("build.snapshot", "true"));, +if (snapshot) {, +  // we update the version property to reflect if we are building a snapshot or a release build, +  // we write this back out below to load it in the Build.java which will be shown in rest main action, +  // to indicate this being a snapshot build or a release build., +  version += "-SNAPSHOT", +  props.put("elasticsearch", version);, +}, +, +File tempPropertiesFile = new File(project.buildDir, "version.properties"), +task writeVersionProperties {, +  inputs.properties(props), +  doLast {, +    OutputStream stream = Files.newOutputStream(tempPropertiesFile.toPath());, +    try {, +      props.store(stream, "UTF-8");, +    } finally {, +      stream.close();, +    }, +  }, +}, +, +  dependsOn writeVersionProperties, +  from tempPropertiesFile, +++ b/buildSrc/build.gradle, +import java.nio.file.Files, +, +boolean snapshot = "true".equals(System.getProperty("build.snapshot", "true"));, +if (snapshot) {, +  // we update the version property to reflect if we are building a snapshot or a release build, +  // we write this back out below to load it in the Build.java which will be shown in rest main action, +  // to indicate this being a snapshot build or a release build., +  version += "-SNAPSHOT", +  props.put("elasticsearch", version);, +}, +, +File tempPropertiesFile = new File(project.buildDir, "version.properties"), +task writeVersionProperties {, +  inputs.properties(props), +  doLast {, +    OutputStream stream = Files.newOutputStream(tempPropertiesFile.toPath());, +    try {, +      props.store(stream, "UTF-8");, +    } finally {, +      stream.close();, +    }, +  }, +}, +, +  dependsOn writeVersionProperties, +  from tempPropertiesFile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                boolean isSnapshot = VersionProperties.elasticsearch.endsWith("-SNAPSHOT");, +                String version = VersionProperties.elasticsearch;, +                if (isSnapshot) {, +                    version = version.substring(0, version.length() - 9), +                }, +                        'X-Compile-Elasticsearch-Version': version,, +                        'X-Compile-Elasticsearch-Snapshot': isSnapshot,, +++ b/buildSrc/build.gradle, +import java.nio.file.Files, +, +boolean snapshot = "true".equals(System.getProperty("build.snapshot", "true"));, +if (snapshot) {, +  // we update the version property to reflect if we are building a snapshot or a release build, +  // we write this back out below to load it in the Build.java which will be shown in rest main action, +  // to indicate this being a snapshot build or a release build., +  version += "-SNAPSHOT", +  props.put("elasticsearch", version);, +}, +, +File tempPropertiesFile = new File(project.buildDir, "version.properties"), +task writeVersionProperties {, +  inputs.properties(props), +  doLast {, +    OutputStream stream = Files.newOutputStream(tempPropertiesFile.toPath());, +    try {, +      props.store(stream, "UTF-8");, +    } finally {, +      stream.close();, +    }, +  }, +}, +, +  dependsOn writeVersionProperties, +  from tempPropertiesFile, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                boolean isSnapshot = VersionProperties.elasticsearch.endsWith("-SNAPSHOT");, +                String version = VersionProperties.elasticsearch;, +                if (isSnapshot) {, +                    version = version.substring(0, version.length() - 9), +                }, +                        'X-Compile-Elasticsearch-Version': version,, +                        'X-Compile-Elasticsearch-Snapshot': isSnapshot,, +++ b/buildSrc/version.properties, +elasticsearch     = 3.0.0, +++ b/buildSrc/build.gradle]