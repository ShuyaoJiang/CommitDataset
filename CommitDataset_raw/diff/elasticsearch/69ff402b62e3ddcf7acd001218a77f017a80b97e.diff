[+++ b/build.gradle, +  if (path.startsWith(':x-plugins')) {, +    // don't try to configure publshing for extra plugins attached to this build, +    return, +  plugins.withType(MavenPublishPlugin).whenPluginAdded {, +    publishing {, +      publications {, +        // add license information to generated poms, +        all {, +          pom.withXml { XmlProvider xml ->, +            Node node = xml.asNode(), +            node.appendNode('inceptionYear', '2009'), +, +            Node license = node.appendNode('licenses').appendNode('license'), +            license.appendNode('name', 'The Apache Software License, Version 2.0'), +            license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt'), +            license.appendNode('distribution', 'repo'), +      repositories.maven {, +        name 'sonatype', +        if (version.endsWith('-SNAPSHOT')) {, +          url 'https://oss.sonatype.org/content/repositories/snapshots/', +        } else {, +          url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/', +, +        // It would be nice to pass a custom impl of PasswordCredentials, +        // that could lazily read username/password from the console if not, +        // present as properties. However, gradle's credential handling is, +        // completely broken for custom impls. It checks that the class, +        // passed in is exactly PasswordCredentials or AwsCredentials., +        // So instead, we must rely on heuristics of "are we publishing", +        // by inspecting the command line, stash the credentials, +        // once read in the root project, and set them on each project, +        if (gradle.startParameter.taskNames.contains('publish')) {, +          if (project.rootProject.hasProperty('nexusUsername') == false) {, +            project.rootProject.ext.nexusUsername = console.readLine('\nNexus username: '), +          if (project.rootProject.hasProperty('nexusPassword') == false) {, +            project.rootProject.ext.nexusPassword = new String(console.readPassword("\nNexus password: ")), +, +          credentials {, +            username = project.rootProject.nexusUsername , +            password = project.rootProject.nexusPassword, +, +++ b/build.gradle, +  if (path.startsWith(':x-plugins')) {, +    // don't try to configure publshing for extra plugins attached to this build, +    return, +  plugins.withType(MavenPublishPlugin).whenPluginAdded {, +    publishing {, +      publications {, +        // add license information to generated poms, +        all {, +          pom.withXml { XmlProvider xml ->, +            Node node = xml.asNode(), +            node.appendNode('inceptionYear', '2009'), +, +            Node license = node.appendNode('licenses').appendNode('license'), +            license.appendNode('name', 'The Apache Software License, Version 2.0'), +            license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt'), +            license.appendNode('distribution', 'repo'), +      repositories.maven {, +        name 'sonatype', +        if (version.endsWith('-SNAPSHOT')) {, +          url 'https://oss.sonatype.org/content/repositories/snapshots/', +        } else {, +          url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/', +, +        // It would be nice to pass a custom impl of PasswordCredentials, +        // that could lazily read username/password from the console if not, +        // present as properties. However, gradle's credential handling is, +        // completely broken for custom impls. It checks that the class, +        // passed in is exactly PasswordCredentials or AwsCredentials., +        // So instead, we must rely on heuristics of "are we publishing", +        // by inspecting the command line, stash the credentials, +        // once read in the root project, and set them on each project, +        if (gradle.startParameter.taskNames.contains('publish')) {, +          if (project.rootProject.hasProperty('nexusUsername') == false) {, +            project.rootProject.ext.nexusUsername = console.readLine('\nNexus username: '), +          if (project.rootProject.hasProperty('nexusPassword') == false) {, +            project.rootProject.ext.nexusPassword = new String(console.readPassword("\nNexus password: ")), +, +          credentials {, +            username = project.rootProject.nexusUsername , +            password = project.rootProject.nexusPassword, +, +++ b/buildSrc/.gitignore, +build-bootstrap/, +++ b/build.gradle, +  if (path.startsWith(':x-plugins')) {, +    // don't try to configure publshing for extra plugins attached to this build, +    return, +  plugins.withType(MavenPublishPlugin).whenPluginAdded {, +    publishing {, +      publications {, +        // add license information to generated poms, +        all {, +          pom.withXml { XmlProvider xml ->, +            Node node = xml.asNode(), +            node.appendNode('inceptionYear', '2009'), +, +            Node license = node.appendNode('licenses').appendNode('license')]