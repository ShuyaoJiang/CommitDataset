[+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) > 0) {, +                        + indexOptionToString(indexOptions));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/core/KeywordFieldMapper.java, +            if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) > 0) {, +                        + indexOptionToString(indexOptions));, +++ b/core/src/test/java/org/elasticsearch/index/mapper/core/KeywordFieldMapperTests.java, +import java.util.Arrays;, +, +    public void testIndexOptions() throws IOException {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .startObject("properties").startObject("field").field("type", "keyword"), +                .field("index_options", "freqs").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper mapper = parser.parse("type", new CompressedXContent(mapping));, +, +        assertEquals(mapping, mapper.mappingSource().toString());, +, +        ParsedDocument doc = mapper.parse("test", "type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("field", "1234"), +                .endObject(), +                .bytes());, +, +        IndexableField[] fields = doc.rootDoc().getFields("field");, +        assertEquals(2, fields.length);, +        assertEquals(IndexOptions.DOCS_AND_FREQS, fields[0].fieldType().indexOptions());, +, +        for (String indexOptions : Arrays.asList("positions", "offsets")) {, +            final String mapping2 = XContentFactory.jsonBuilder().startObject().startObject("type"), +                    .startObject("properties").startObject("field").field("type", "keyword"), +                    .field("index_options", indexOptions).endObject().endObject(), +                    .endObject().endObject().string();, +            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,, +                    () -> parser.parse("type", new CompressedXContent(mapping2)));, +            assertEquals("The [keyword] field does not support positions, got [index_options]=" + indexOptions, e.getMessage());, +        }, +    }]