[+++ b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +        // Base cases, +        if (token != XContentParser.Token.START_ARRAY && , +                token != XContentParser.Token.END_ARRAY && , +                token != XContentParser.Token.VALUE_NULL) {, +        } else if (token == XContentParser.Token.VALUE_NULL) {, +            throw new ElasticsearchIllegalArgumentException("coordinates cannot contain NULL values)");, +            /**, +             * Per GeoJSON spec (http://geojson.org/geojson-spec.html#linestring), +             * "coordinates" member must be an array of two or more positions, +             * LineStringBuilder should throw a graceful exception if < 2 coordinates/points are provided, +             */, +            if (coordinates.children.size() < 2) {, +                throw new ElasticsearchParseException("Invalid number of points in LineString (found " +, +                        coordinates.children.size() + " - must be >= 2)");, +            }, +, +        protected static LineStringBuilder parseLinearRing(CoordinateNode coordinates) {, +            /**, +             * Per GeoJSON spec (http://geojson.org/geojson-spec.html#linestring), +             * A LinearRing is closed LineString with 4 or more positions. The first and last positions, +             * are equivalent (they represent equivalent points). Though a LinearRing is not explicitly, +             * represented as a GeoJSON geometry type, it is referred to in the Polygon geometry type definition., +             */, +            if (coordinates.children.size() < 4) {, +                throw new ElasticsearchParseException("Invalid number of points in LinearRing (found " +, +                        coordinates.children.size() + " - must be >= 4)");, +            } else if (!coordinates.children.get(0).coordinate.equals(, +                        coordinates.children.get(coordinates.children.size() - 1).coordinate)) {, +                throw new ElasticsearchParseException("Invalid LinearRing found (coordinates are not closed)");, +            }, +            return parseLineString(coordinates);, +        }, +, +            LineStringBuilder shell = parseLinearRing(coordinates.children.get(0));, +                polygon.hole(parseLinearRing(coordinates.children.get(i)));, +++ b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java, +        // Base cases, +        if (token != XContentParser.Token.START_ARRAY && , +                token != XContentParser.Token.END_ARRAY && , +                token != XContentParser.Token.VALUE_NULL) {, +        } else if (token == XContentParser.Token.VALUE_NULL) {, +            throw new ElasticsearchIllegalArgumentException("coordinates cannot contain NULL values)");, +            /**, +             * Per GeoJSON spec (http://geojson.org/geojson-spec.html#linestring), +             * "coordinates" member must be an array of two or more positions, +             * LineStringBuilder should throw a graceful exception if < 2 coordinates/points are provided, +             */, +            if (coordinates.children.size() < 2) {, +                throw new ElasticsearchParseException("Invalid number of points in LineString (found " +, +                        coordinates.children.size() + " - must be >= 2)");, +            }, +, +        protected static LineStringBuilder parseLinearRing(CoordinateNode coordinates) {, +            /**, +             * Per GeoJSON spec (http://geojson.org/geojson-spec.html#linestring), +             * A LinearRing is closed LineString with 4 or more positions. The first and last positions, +             * are equivalent (they represent equivalent points). Though a LinearRing is not explicitly, +             * represented as a GeoJSON geometry type, it is referred to in the Polygon geometry type definition., +             */, +            if (coordinates.children.size() < 4) {, +                throw new ElasticsearchParseException("Invalid number of points in LinearRing (found " +, +                        coordinates.children.size() + " - must be >= 4)");, +            } else if (!coordinates.children.get(0).coordinate.equals(, +                        coordinates.children.get(coordinates.children.size() - 1).coordinate)) {, +                throw new ElasticsearchParseException("Invalid LinearRing found (coordinates are not closed)");, +            }, +            return parseLineString(coordinates);, +        }, +, +            LineStringBuilder shell = parseLinearRing(coordinates.children.get(0));, +                polygon.hole(parseLinearRing(coordinates.children.get(i)));, +++ b/src/test/java/org/elasticsearch/common/geo/GeoJSONShapeParserTests.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.ElasticsearchParseException;, +    public void testParse_invalidPolygon() throws IOException {, +        /**, +         * The following 3 test cases ensure proper error handling of invalid polygons , +         * per the GeoJSON specification, +         */, +        // test case 1: create an invalid polygon with only 2 points, +        String invalidPoly1 = XContentFactory.jsonBuilder().startObject().field("type", "polygon"), +                .startArray("coordinates"), +                .startArray(), +                .startArray().value(-74.011).value(40.753).endArray(), +                .startArray().value(-75.022).value(41.783).endArray(), +                .endArray(), +                .endArray(), +                .endObject().string();, +        XContentParser parser = JsonXContent.jsonXContent.createParser(invalidPoly1);, +        parser.nextToken();, +        ElasticsearchGeoAssertions.assertValidException(parser, ElasticsearchParseException.class);, +, +        // test case 2: create an invalid polygon with only 1 point, +        String invalidPoly2 = XContentFactory.jsonBuilder().startObject().field("type", "polygon"), +                .startArray("coordinates"), +                .startArray(), +                .startArray().value(-74.011).value(40.753).endArray(), +                .endArray(), +                .endArray()]