[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByColumnKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByColumnKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByDateKey.java, +                .timeZone(DateTimeZone.forTimeZone(timeZone)), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByColumnKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByDateKey.java, +                .timeZone(DateTimeZone.forTimeZone(timeZone)), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByScriptKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByColumnKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByDateKey.java, +                .timeZone(DateTimeZone.forTimeZone(timeZone)), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByScriptKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/DataLoader.java, +        loadEmpDatasetIntoEs(client, "test_emp", "employees");, +        loadEmpDatasetIntoEs(client, "test_emp_copy", "employees");, +        loadEmpDatasetIntoEs(client, "test_emp_with_nulls", "employees_with_nulls");, +        loadEmpDatasetIntoEs(client, "emp", "employees");, +    protected static void loadEmpDatasetIntoEs(RestClient client, String index, String fileName) throws Exception {, +        csvToLines(fileName, (titles, fields) -> {, +                // an empty value in the csv file is treated as 'null', thus skipping it in the bulk request, +                if (fields.get(f).trim().length() > 0) {, +            }, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByColumnKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByDateKey.java, +                .timeZone(DateTimeZone.forTimeZone(timeZone)), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByScriptKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/DataLoader.java, +        loadEmpDatasetIntoEs(client, "test_emp", "employees");, +        loadEmpDatasetIntoEs(client, "test_emp_copy", "employees");, +        loadEmpDatasetIntoEs(client, "test_emp_with_nulls", "employees_with_nulls");, +        loadEmpDatasetIntoEs(client, "emp", "employees");, +    protected static void loadEmpDatasetIntoEs(RestClient client, String index, String fileName) throws Exception {, +        csvToLines(fileName, (titles, fields) -> {, +                // an empty value in the csv file is treated as 'null', thus skipping it in the bulk request, +                if (fields.get(f).trim().length() > 0) {, +            }, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/SqlSpecTestCase.java, +    public static LocalH2 H2 = new LocalH2((c) -> { , +        c.createStatement().execute("RUNSCRIPT FROM 'classpath:/setup_test_emp.sql'");, +        c.createStatement().execute("RUNSCRIPT FROM 'classpath:/setup_test_emp_with_nulls.sql'");, +    });, +        tests.addAll(readScriptSpec("/agg_nulls.sql-spec", parser));, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByColumnKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByDateKey.java, +                .timeZone(DateTimeZone.forTimeZone(timeZone)), +                .missingBucket(true);, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/querydsl/agg/GroupByScriptKey.java, +                .order(direction().asOrder()), +                .missingBucket(true);, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/DataLoader.java, +        loadEmpDatasetIntoEs(client, "test_emp", "employees");, +        loadEmpDatasetIntoEs(client, "test_emp_copy", "employees");, +        loadEmpDatasetIntoEs(client, "test_emp_with_nulls", "employees_with_nulls");, +        loadEmpDatasetIntoEs(client, "emp", "employees");, +    protected static void loadEmpDatasetIntoEs(RestClient client, String index, String fileName) throws Exception {, +        csvToLines(fileName, (titles, fields) -> {, +                // an empty value in the csv file is treated as 'null', thus skipping it in the bulk request, +                if (fields.get(f).trim().length() > 0) {, +            }, +++ b/x-pack/qa/sql/src/main/java/org/elasticsearch/xpack/qa/sql/jdbc/SqlSpecTestCase.java, +    public static LocalH2 H2 = new LocalH2((c) -> { , +        c.createStatement().execute("RUNSCRIPT FROM 'classpath:/setup_test_emp.sql'");, +        c.createStatement().execute("RUNSCRIPT FROM 'classpath:/setup_test_emp_with_nulls.sql'");, +    });, +        tests.addAll(readScriptSpec("/agg_nulls.sql-spec", parser));, +++ b/x-pack/qa/sql/src/main/resources/agg_nulls.sql-spec, +selectGenderWithNullsAndGroupByGender, +SELECT gender, COUNT(*) count FROM test_emp_with_nulls GROUP BY gender ORDER BY gender;, +selectFirstNameWithNullsAndGroupByFirstName, +SELECT first_name FROM test_emp_with_nulls GROUP BY first_name ORDER BY first_name;, +selectCountWhereIsNull, +SELECT COUNT(*) count FROM test_emp_with_nulls WHERE first_name IS NULL;, +selectLanguagesCountWithNullsAndGroupByLanguage, +SELECT languages l, COUNT(*) c FROM test_emp_with_nulls GROUP BY languages ORDER BY languages;, +selectHireDateGroupByHireDate, +SELECT hire_date HD, COUNT(*) c FROM test_emp_with_nulls GROUP BY hire_date ORDER BY hire_date DESC;, +selectHireDateGroupByHireDate, +SELECT hire_date HD, COUNT(*) c FROM test_emp_with_nulls GROUP BY hire_date ORDER BY hire_date DESC;]