[+++ b/docs/reference/search/request/highlighting.asciidoc, +implementation uses either the lucene `highlighter`, `fast-vector-highlighter`, +or `postings-highlighter`. The following is an example of the  search request, +body:, +in the mapping) it will be used, otherwise, the actual `_source` will, +The field name supports wildcard notation. For example, using `comment_*`, +will cause all fields that match the expression to be highlighted., +, +==== Postings highlighter, +, +If `index_options` is set to `offsets` in the mapping the postings highlighter, +will be used instead of the plain highlighter. The postings highlighter:, +, +* Is faster since it doesn't require to reanalyze the text to be highlighted:, +the larger the documents the better the performance gain should be, +* Requires less disk space than term_vectors, needed for the fast vector, +highlighter, +* Breaks the text into sentences and highlights them. Plays really well with, +natural languages, not as well with fields containing for instance html markup, +* Treats the document as the whole corpus, and scores individual sentences as, +if they were documents in this corpus, using the  BM25 algorithm, +, +Here is an example of setting the `content` field to allow for, +highlighting using the postings highlighter on it:, +, +[source,js], +--------------------------------------------------, +{, +    "type_name" : {, +        "content" : {"index_options" : "offsets"}, +    }, +}, +--------------------------------------------------, +, +Note that the postings highlighter is meant to perform simple query terms, +highlighting, regardless of their positions. That means that when used for, +instance in combination with a phrase query, it will highlight all the terms, +that the query is composed of, regardless of whether they are actually part of, +a query match, effectively ignoring their positions., +, +, +==== Fast vector highlighter, +, +`with_positions_offsets` in the mapping then the fast vector highlighter, +will be used instead of the plain highlighter.  The fast vector highlighter:, + `fragment_offset` (see <<boundary-characters,below>>), +==== Force highlighter type, +, +The `type` field allows to force a specific highlighter type. This is useful, +for instance when needing to use the plain highlighter on a field that has, +`term_vectors` enabled. The allowed values are: `plain`, `postings` and `fvh`., +The following is an example that forces the use of the plain highlighter:, +, +[source,js], +--------------------------------------------------, +{, +    "query" : {...},, +    "highlight" : {, +        "fields" : {, +            "content" : { "type" : "plain"}, +        }, +    }, +}, +--------------------------------------------------, +, +        "pre_tags" : ["<tag1>"],, +        "post_tags" : ["</tag1>"],, +        "fields" : {, +            "_all" : {}, +        }, +    }, +}, +--------------------------------------------------, +, +Using the fast vector highlighter there can be more tags, and the "importance", +is ordered., +, +[source,js], +--------------------------------------------------, +{, +    "query" : {...},, +    "highlight" : {, +called `styled` with the following `pre_tags`:, +and `</em>` as `post_tags`. If you think of more nice to have built in tag, +, +==== Encoder, +, +to return (defaults to `5`)., +For example:, +The `fragment_size` is ignored when using the postings highlighter, as it, +outputs sentences regardless of their length., +, +On top of this it is possible to specify that highlighted fragments need, +to be sorted by score:, +specified as it tries to break on a word boundary. When using the postings, +highlighter it is not possible to control the actual size of the snippet,, +therefore the first sentence gets returned whenever `no_match_size` is, +greater than `0`., +Note that the score of text fragment in this case is calculated by the Lucene, +highlighting framework. For implementation details you can check the]