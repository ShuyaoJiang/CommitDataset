[+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import org.elasticsearch.painless.lookup.PainlessLookupBuilder;, +                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class,, +                    new PainlessLookupBuilder(entry.getValue()).build()));, +                contextsToCompilers.put(context, new Compiler(context.instanceClazz,, +                    new PainlessLookupBuilder(entry.getValue()).build()));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import org.elasticsearch.painless.lookup.PainlessLookupBuilder;, +                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class,, +                    new PainlessLookupBuilder(entry.getValue()).build()));, +                contextsToCompilers.put(context, new Compiler(context.instanceClazz,, +                    new PainlessLookupBuilder(entry.getValue()).build()));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookup.java, +    PainlessLookup(Map<String, Class<?>> painlessTypesToJavaClasses, Map<Class<?>, PainlessClass> javaClassesToPainlessStructs) {, +        this.painlessTypesToJavaClasses = Collections.unmodifiableMap(painlessTypesToJavaClasses);, +        this.javaClassesToPainlessStructs = Collections.unmodifiableMap(javaClassesToPainlessStructs);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/AnalyzerCaster.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/MethodWriter.java, +import org.elasticsearch.painless.lookup.def;, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java, +import org.elasticsearch.painless.lookup.PainlessLookupBuilder;, +                contextsToCompilers.put(context, new Compiler(GenericElasticsearchScript.class,, +                    new PainlessLookupBuilder(entry.getValue()).build()));, +                contextsToCompilers.put(context, new Compiler(context.instanceClazz,, +                    new PainlessLookupBuilder(entry.getValue()).build()));, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookup.java, +    PainlessLookup(Map<String, Class<?>> painlessTypesToJavaClasses, Map<Class<?>, PainlessClass> javaClassesToPainlessStructs) {, +        this.painlessTypesToJavaClasses = Collections.unmodifiableMap(painlessTypesToJavaClasses);, +        this.javaClassesToPainlessStructs = Collections.unmodifiableMap(javaClassesToPainlessStructs);, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/lookup/PainlessLookupBuilder.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.painless.lookup;, +, +import org.elasticsearch.painless.spi.Whitelist;, +import org.elasticsearch.painless.spi.WhitelistClass;, +import org.elasticsearch.painless.spi.WhitelistConstructor;, +import org.elasticsearch.painless.spi.WhitelistField;, +import org.elasticsearch.painless.spi.WhitelistMethod;, +import org.objectweb.asm.Type;, +, +import java.lang.invoke.MethodHandle;, +import java.lang.invoke.MethodHandles;, +import java.lang.reflect.Modifier;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Stack;, +import java.util.regex.Pattern;, +, +public class PainlessLookupBuilder {, +    private static final Pattern TYPE_NAME_PATTERN = Pattern.compile("^[_a-zA-Z][._a-zA-Z0-9]*$");, +, +    private static final Map<String, PainlessMethod> methodCache = new HashMap<>();, +    private static final Map<String, PainlessField> fieldCache = new HashMap<>();, +, +    private static String buildMethodCacheKey(String structName, String methodName, List<Class<?>> arguments) {, +        StringBuilder key = new StringBuilder();, +        key.append(structName);, +        key.append(methodName);, +, +        for (Class<?> argument : arguments) {, +            key.append(argument.getName());, +        }, +]