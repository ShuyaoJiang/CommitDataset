[+++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import jsr166y.ThreadLocalRandom;, +    private final ShardShuffler shuffler;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +        return new PlainShardsIterator(shuffler.shuffle(allShards));, +        return new PlainShardsIterator(shuffler.shuffle(allActiveShards));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import jsr166y.ThreadLocalRandom;, +    private final ShardShuffler shuffler;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +        return new PlainShardsIterator(shuffler.shuffle(allShards));, +        return new PlainShardsIterator(shuffler.shuffle(allActiveShards));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    final ShardShuffler shuffler;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +        return new PlainShardIterator(shardId, shuffler.shuffle(shards));, +    public ShardIterator shardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(shards, seed));, +        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards));, +    public ShardIterator activeShardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));, +        return activeInitializingShardsIt(shuffler.nextSeed());, +    public ShardIterator activeInitializingShardsIt(int seed) {, +            return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));, +        ordered.addAll(shuffler.shuffle(activeShards, seed));, +        return new PlainShardIterator(shardId, shuffler.shuffle(assignedShards));, +    public ShardIterator assignedShardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(assignedShards, seed));, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards)) {, +                ordered.set(ordered.size() - 1, ordered.get(0));, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards)) {, +                ordered.set(ordered.size() - 1, ordered.get(0));, +        return preferAttributesActiveInitializingShardsIt(attributes, nodes, shuffler.nextSeed());, +    public ShardIterator preferAttributesActiveInitializingShardsIt(String[] attributes, DiscoveryNodes nodes, int seed) {, +        ordered.addAll(shuffler.shuffle(activeRoutings.withSameAttribute, seed));, +        ordered.addAll(shuffler.shuffle(activeRoutings.withoutSameAttribute, seed));, +        ordered.addAll(shuffler.shuffle(initializingRoutings.withSameAttribute, seed));, +        ordered.addAll(shuffler.shuffle(initializingRoutings.withoutSameAttribute, seed));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import jsr166y.ThreadLocalRandom;, +    private final ShardShuffler shuffler;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +        return new PlainShardsIterator(shuffler.shuffle(allShards));, +        return new PlainShardsIterator(shuffler.shuffle(allActiveShards));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    final ShardShuffler shuffler;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +        return new PlainShardIterator(shardId, shuffler.shuffle(shards));, +    public ShardIterator shardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(shards, seed));, +        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards));, +    public ShardIterator activeShardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));, +        return activeInitializingShardsIt(shuffler.nextSeed());, +    public ShardIterator activeInitializingShardsIt(int seed) {, +            return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));, +        ordered.addAll(shuffler.shuffle(activeShards, seed));, +        return new PlainShardIterator(shardId, shuffler.shuffle(assignedShards));, +    public ShardIterator assignedShardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(assignedShards, seed));, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards)) {, +                ordered.set(ordered.size() - 1, ordered.get(0));, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards)) {, +                ordered.set(ordered.size() - 1, ordered.get(0));, +        return preferAttributesActiveInitializingShardsIt(attributes, nodes, shuffler.nextSeed());, +    public ShardIterator preferAttributesActiveInitializingShardsIt(String[] attributes, DiscoveryNodes nodes, int seed) {, +        ordered.addAll(shuffler.shuffle(activeRoutings.withSameAttribute, seed));, +        ordered.addAll(shuffler.shuffle(activeRoutings.withoutSameAttribute, seed));, +        ordered.addAll(shuffler.shuffle(initializingRoutings.withSameAttribute, seed));, +        ordered.addAll(shuffler.shuffle(initializingRoutings.withoutSameAttribute, seed));, +++ b/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +import jsr166y.ThreadLocalRandom;, +    private final ShardShuffler shuffler;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +        return new PlainShardsIterator(shuffler.shuffle(allShards));, +        return new PlainShardsIterator(shuffler.shuffle(allActiveShards));, +++ b/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    final ShardShuffler shuffler;, +        this.shuffler = new RotationShardShuffler(ThreadLocalRandom.current().nextInt());, +        return new PlainShardIterator(shardId, shuffler.shuffle(shards));, +    public ShardIterator shardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(shards, seed));, +        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards));, +    public ShardIterator activeShardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));, +        return activeInitializingShardsIt(shuffler.nextSeed());, +    public ShardIterator activeInitializingShardsIt(int seed) {, +            return new PlainShardIterator(shardId, shuffler.shuffle(activeShards, seed));, +        ordered.addAll(shuffler.shuffle(activeShards, seed));, +        return new PlainShardIterator(shardId, shuffler.shuffle(assignedShards));, +    public ShardIterator assignedShardsIt(int seed) {, +        return new PlainShardIterator(shardId, shuffler.shuffle(assignedShards, seed));, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards)) {, +                ordered.set(ordered.size() - 1, ordered.get(0));, +        for (ShardRouting shardRouting : shuffler.shuffle(activeShards)) {, +                ordered.set(ordered.size() - 1, ordered.get(0));, +        return preferAttributesActiveInitializingShardsIt(attributes, nodes, shuffler.nextSeed());, +    public ShardIterator preferAttributesActiveInitializingShardsIt(String[] attributes, DiscoveryNodes nodes, int seed) {, +        ordered.addAll(shuffler.shuffle(activeRoutings.withSameAttribute, seed));]