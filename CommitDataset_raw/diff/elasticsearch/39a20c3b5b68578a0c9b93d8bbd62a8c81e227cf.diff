[+++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +                builder.startObject("aggregations");, +                builder.endObject();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +                builder.startObject("aggregations");, +                builder.endObject();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +                if ("aggregations_binary".equals(fieldName)) {, +                    if (subFactories != null) {, +                        throw new SearchParseException(context, "Found two sub aggregation definitions under [" + aggregationName + "]",, +                                parser.getTokenLocation());, +                    XContentParser binaryParser = null;, +                    if (token == XContentParser.Token.VALUE_STRING || token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {, +                        byte[] source = parser.binaryValue();, +                        binaryParser = XContentFactory.xContent(source).createParser(source);, +                    } else {, +                        throw new SearchParseException(context, "Expected [" + XContentParser.Token.VALUE_STRING + " or ", +                                + XContentParser.Token.VALUE_EMBEDDED_OBJECT + "] for [" + fieldName + "], but got a [" + token + "] in [", +                                + aggregationName + "]", parser.getTokenLocation());, +                    }, +                    XContentParser.Token binaryToken = binaryParser.nextToken();, +                    if (binaryToken != XContentParser.Token.START_OBJECT) {, +                        throw new SearchParseException(context, "Expected [" + XContentParser.Token.START_OBJECT, +                                + "] as first token when parsing [" + fieldName + "], but got a [" + binaryToken + "] in [", +                                + aggregationName + "]", parser.getTokenLocation());, +                    }, +                    subFactories = parseAggregators(binaryParser, context, level + 1);, +                } else if (token == XContentParser.Token.START_OBJECT) {, +                            throw new SearchParseException(context,, +                                    "Found two sub aggregation definitions under [" + aggregationName + "]", parser.getTokenLocation());, +                            throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName, +                                    + "]: [" + aggFactory.type + "] and [" + fieldName + "]", parser.getTokenLocation());, +                            throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName, +                                    + "]: [" + pipelineAggregatorFactory + "] and [" + fieldName + "]", parser.getTokenLocation());, +                } else {, +                    throw new SearchParseException(context, "Expected [" + XContentParser.Token.START_OBJECT + "] under [" + fieldName, +                            + "], but got a [" + token + "] in [" + aggregationName + "]", parser.getTokenLocation());, +                }, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +                builder.startObject("aggregations");, +                builder.endObject();, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +import org.elasticsearch.common.xcontent.XContentFactory;, +                if ("aggregations_binary".equals(fieldName)) {, +                    if (subFactories != null) {, +                        throw new SearchParseException(context, "Found two sub aggregation definitions under [" + aggregationName + "]",, +                                parser.getTokenLocation());, +                    XContentParser binaryParser = null;, +                    if (token == XContentParser.Token.VALUE_STRING || token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {, +                        byte[] source = parser.binaryValue();, +                        binaryParser = XContentFactory.xContent(source).createParser(source);, +                    } else {, +                        throw new SearchParseException(context, "Expected [" + XContentParser.Token.VALUE_STRING + " or ", +                                + XContentParser.Token.VALUE_EMBEDDED_OBJECT + "] for [" + fieldName + "], but got a [" + token + "] in [", +                                + aggregationName + "]", parser.getTokenLocation());, +                    }, +                    XContentParser.Token binaryToken = binaryParser.nextToken();, +                    if (binaryToken != XContentParser.Token.START_OBJECT) {, +                        throw new SearchParseException(context, "Expected [" + XContentParser.Token.START_OBJECT, +                                + "] as first token when parsing [" + fieldName + "], but got a [" + binaryToken + "] in [", +                                + aggregationName + "]", parser.getTokenLocation());, +                    }, +                    subFactories = parseAggregators(binaryParser, context, level + 1);, +                } else if (token == XContentParser.Token.START_OBJECT) {, +                            throw new SearchParseException(context,, +                                    "Found two sub aggregation definitions under [" + aggregationName + "]", parser.getTokenLocation());, +                            throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName, +                                    + "]: [" + aggFactory.type + "] and [" + fieldName + "]", parser.getTokenLocation());, +                            throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName, +                                    + "]: [" + pipelineAggregatorFactory + "] and [" + fieldName + "]", parser.getTokenLocation());, +                } else {, +                    throw new SearchParseException(context, "Expected [" + XContentParser.Token.START_OBJECT + "] under [" + fieldName, +                            + "], but got a [" + token + "] in [" + aggregationName + "]", parser.getTokenLocation());, +                }, +++ b/src/test/java/org/elasticsearch/search/aggregations/AggregationsBinaryTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.aggregations;, +, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import org.elasticsearch.action.search.SearchResponse;, +import org.elasticsearch.client.Requests;]