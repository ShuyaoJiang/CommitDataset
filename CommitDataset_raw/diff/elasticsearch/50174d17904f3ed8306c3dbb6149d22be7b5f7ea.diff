[+++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.action.search.SearchResponse;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFailures;, +                SearchResponse resp = client.prepareSearch("cb-test").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +                SearchResponse resp = client.prepareSearch("ramtest").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.action.search.SearchResponse;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFailures;, +                SearchResponse resp = client.prepareSearch("cb-test").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +                SearchResponse resp = client.prepareSearch("ramtest").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +++ b/src/test/java/org/elasticsearch/search/rescore/QueryRescorerTests.java, +    // forces QUERY_THEN_FETCH because of https://github.com/elasticsearch/elasticsearch/issues/4829, +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.action.search.SearchResponse;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFailures;, +                SearchResponse resp = client.prepareSearch("cb-test").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +                SearchResponse resp = client.prepareSearch("ramtest").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +++ b/src/test/java/org/elasticsearch/search/rescore/QueryRescorerTests.java, +    // forces QUERY_THEN_FETCH because of https://github.com/elasticsearch/elasticsearch/issues/4829, +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.client.internal.InternalClient;, +import org.elasticsearch.test.client.RandomizingClient;, +        Client client = cluster().client();, +        if (frequently()) {, +            client = new RandomizingClient((InternalClient) client, getRandom());, +        }, +        return client;, +++ b/src/test/java/org/elasticsearch/indices/fielddata/breaker/CircuitBreakerServiceTests.java, +import org.elasticsearch.action.search.SearchResponse;, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertFailures;, +                SearchResponse resp = client.prepareSearch("cb-test").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +                SearchResponse resp = client.prepareSearch("ramtest").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"), +                assertFailures(resp);, +++ b/src/test/java/org/elasticsearch/search/rescore/QueryRescorerTests.java, +    // forces QUERY_THEN_FETCH because of https://github.com/elasticsearch/elasticsearch/issues/4829, +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +                    .setSearchType(SearchType.QUERY_THEN_FETCH), +++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java, +import org.elasticsearch.client.internal.InternalClient;, +import org.elasticsearch.test.client.RandomizingClient;, +        Client client = cluster().client();, +        if (frequently()) {, +            client = new RandomizingClient((InternalClient) client, getRandom());, +        }, +        return client;, +++ b/src/test/java/org/elasticsearch/test/client/RandomizingClient.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.test.client;, +, +import com.carrotsearch.randomizedtesting.generators.RandomPicks;, +import org.elasticsearch.action.*;, +import org.elasticsearch.action.bulk.BulkRequest;, +import org.elasticsearch.action.bulk.BulkRequestBuilder;, +import org.elasticsearch.action.bulk.BulkResponse;, +import org.elasticsearch.action.count.CountRequest;, +import org.elasticsearch.action.count.CountRequestBuilder;, +import org.elasticsearch.action.count.CountResponse;, +import org.elasticsearch.action.delete.DeleteRequest;, +import org.elasticsearch.action.delete.DeleteRequestBuilder;, +import org.elasticsearch.action.delete.DeleteResponse;, +import org.elasticsearch.action.deletebyquery.DeleteByQueryRequest;, +import org.elasticsearch.action.deletebyquery.DeleteByQueryRequestBuilder;, +import org.elasticsearch.action.deletebyquery.DeleteByQueryResponse;, +import org.elasticsearch.action.explain.ExplainRequest;, +import org.elasticsearch.action.explain.ExplainRequestBuilder;]