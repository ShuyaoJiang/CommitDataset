[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.client.Requests;, +    private XContentType contentType = Requests.INDEX_CONTENT_TYPE;, +, +     * Sets the content type that will be used when generating a document from user provided objects (like Map)., +     */, +    public IndexRequest contentType(XContentType contentType) {, +        this.contentType = contentType;, +        return this;, +    }, +, +    /**, +     * The source of the document to index., +     * Index the Map as a {@link org.elasticsearch.client.Requests#INDEX_CONTENT_TYPE}., +        return source(source, contentType);, +    @Required public IndexRequest source(String field1, Object value1) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            builder.startObject().field(field1, value1).endObject();, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate", e);, +        }, +    }, +, +    @Required public IndexRequest source(String field1, Object value1, String field2, Object value2) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            builder.startObject().field(field1, value1).field(field2, value2).endObject();, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate", e);, +        }, +    }, +, +    @Required public IndexRequest source(String field1, Object value1, String field2, Object value2, String field3, Object value3) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            builder.startObject().field(field1, value1).field(field2, value2).field(field3, value3).endObject();, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate", e);, +        }, +    }, +, +    @Required public IndexRequest source(String field1, Object value1, String field2, Object value2, String field3, Object value3, String field4, Object value4) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            builder.startObject().field(field1, value1).field(field2, value2).field(field3, value3).field(field4, value4).endObject();, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate", e);, +        }, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/index/IndexRequest.java, +import org.elasticsearch.client.Requests;, +    private XContentType contentType = Requests.INDEX_CONTENT_TYPE;, +, +     * Sets the content type that will be used when generating a document from user provided objects (like Map)., +     */, +    public IndexRequest contentType(XContentType contentType) {, +        this.contentType = contentType;, +        return this;, +    }, +, +    /**, +     * The source of the document to index., +     * Index the Map as a {@link org.elasticsearch.client.Requests#INDEX_CONTENT_TYPE}., +        return source(source, contentType);, +    @Required public IndexRequest source(String field1, Object value1) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            builder.startObject().field(field1, value1).endObject();, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate", e);, +        }, +    }, +, +    @Required public IndexRequest source(String field1, Object value1, String field2, Object value2) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            builder.startObject().field(field1, value1).field(field2, value2).endObject();, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate", e);, +        }, +    }, +, +    @Required public IndexRequest source(String field1, Object value1, String field2, Object value2, String field3, Object value3) {, +        try {, +            XContentBuilder builder = XContentFactory.contentBuilder(contentType);, +            builder.startObject().field(field1, value1).field(field2, value2).field(field3, value3).endObject();, +            return source(builder);, +        } catch (IOException e) {, +            throw new ElasticSearchGenerationException("Failed to generate", e);, +        }, +    }, +]