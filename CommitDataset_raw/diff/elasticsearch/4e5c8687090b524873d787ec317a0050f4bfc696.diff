[+++ b/.gitignore, +++ b/.gitignore, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/.gitignore, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, + * Limits the size of responses that can be read to {@link #DEFAULT_BUFFER_LIMIT} by default, configurable value., + * Throws an exception in case the entity is longer than the configured buffer limit., +    //default buffer limit is 10MB, +    public static final int DEFAULT_BUFFER_LIMIT = 10 * 1024 * 1024;, +, +     * Creates a new instance of this consumer with a buffer limit of {@link #DEFAULT_BUFFER_LIMIT}, +     */, +    public HeapBufferedAsyncResponseConsumer() {, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +    }, +, +    /**, +++ b/.gitignore, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, + * Limits the size of responses that can be read to {@link #DEFAULT_BUFFER_LIMIT} by default, configurable value., + * Throws an exception in case the entity is longer than the configured buffer limit., +    //default buffer limit is 10MB, +    public static final int DEFAULT_BUFFER_LIMIT = 10 * 1024 * 1024;, +, +     * Creates a new instance of this consumer with a buffer limit of {@link #DEFAULT_BUFFER_LIMIT}, +     */, +    public HeapBufferedAsyncResponseConsumer() {, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +    }, +, +    /**, +++ /dev/null, +++ b/.gitignore, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, + * Limits the size of responses that can be read to {@link #DEFAULT_BUFFER_LIMIT} by default, configurable value., + * Throws an exception in case the entity is longer than the configured buffer limit., +    //default buffer limit is 10MB, +    public static final int DEFAULT_BUFFER_LIMIT = 10 * 1024 * 1024;, +, +     * Creates a new instance of this consumer with a buffer limit of {@link #DEFAULT_BUFFER_LIMIT}, +     */, +    public HeapBufferedAsyncResponseConsumer() {, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +    }, +, +    /**, +++ /dev/null, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java, +        return performRequest(method, endpoint, Collections.<String, String>emptyMap(), (HttpEntity)null, headers);, +     * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, Header...)}, +     * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}, +     * will be used to consume the response body., +        HttpAsyncResponseConsumer<HttpResponse> responseConsumer = new HeapBufferedAsyncResponseConsumer();, +        return performRequest(method, endpoint, params, entity, responseConsumer, headers);, +     * @param responseConsumer the {@link HttpAsyncResponseConsumer} callback. Controls how the response, +     * body gets streamed from a non-blocking HTTP connection on the client side., +                                   HttpEntity entity, HttpAsyncResponseConsumer<HttpResponse> responseConsumer,, +        performRequestAsync(method, endpoint, params, entity, responseConsumer, listener, headers);, +     * Shortcut to {@link #performRequestAsync(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, ResponseListener, Header...)}, +     * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}, +     * will be used to consume the response body., +        HttpAsyncResponseConsumer<HttpResponse> responseConsumer = new HeapBufferedAsyncResponseConsumer();, +        performRequestAsync(method, endpoint, params, entity, responseConsumer, responseListener, headers);, +     * @param responseConsumer the {@link HttpAsyncResponseConsumer} callback. Controls how the response, +     * body gets streamed from a non-blocking HTTP connection on the client side., +                                    HttpEntity entity, HttpAsyncResponseConsumer<HttpResponse> responseConsumer,, +        performRequestAsync(startTime, nextHost().iterator(), request, responseConsumer, failureTrackingResponseListener);, +                                     final HttpAsyncResponseConsumer<HttpResponse> responseConsumer,, +        client.execute(requestProducer, responseConsumer, new FutureCallback<HttpResponse>() {, +                        performRequestAsync(startTime, hosts, request, responseConsumer, listener);, +++ b/.gitignore, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/ClusterConfiguration.groovy, +        ant.echo("==> [${new Date()}] checking health: http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow"), +        ant.get(src: "http://${node.httpUri()}/_cluster/health?wait_for_nodes=>=${numNodes}&wait_for_status=yellow",, +++ b/client/rest/src/main/java/org/elasticsearch/client/HeapBufferedAsyncResponseConsumer.java, + * Limits the size of responses that can be read to {@link #DEFAULT_BUFFER_LIMIT} by default, configurable value., + * Throws an exception in case the entity is longer than the configured buffer limit., +    //default buffer limit is 10MB, +    public static final int DEFAULT_BUFFER_LIMIT = 10 * 1024 * 1024;, +, +     * Creates a new instance of this consumer with a buffer limit of {@link #DEFAULT_BUFFER_LIMIT}, +     */, +    public HeapBufferedAsyncResponseConsumer() {, +        this.bufferLimitBytes = DEFAULT_BUFFER_LIMIT;, +    }, +, +    /**, +++ /dev/null, +++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java]