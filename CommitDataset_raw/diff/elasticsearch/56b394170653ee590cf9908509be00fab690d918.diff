[+++ b/src/main/java/org/elasticsearch/common/joda/FormatDateTimeFormatter.java, +        this.printer = locale == null ? printer.withDefaultYear(1970) : printer.withLocale(locale).withDefaultYear(1970);, +        this.parser = locale == null ? parser.withDefaultYear(1970) : parser.withLocale(locale).withDefaultYear(1970);, +++ b/src/main/java/org/elasticsearch/common/joda/FormatDateTimeFormatter.java, +        this.printer = locale == null ? printer.withDefaultYear(1970) : printer.withLocale(locale).withDefaultYear(1970);, +        this.parser = locale == null ? parser.withDefaultYear(1970) : parser.withLocale(locale).withDefaultYear(1970);, +++ b/src/test/java/org/elasticsearch/index/mapper/date/SimpleDateMappingTests.java, +, +    @Test, +    public void testDayWithoutYearFormat() throws Exception {, +        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type"), +                .field("date_detection", false), +                .startObject("properties").startObject("date_field").field("type", "date").field("format", "MMM dd HH:mm:ss").endObject().endObject(), +                .endObject().endObject().string();, +, +        DocumentMapper defaultMapper = mapper(mapping);, +, +        ParsedDocument doc = defaultMapper.parse("type", "1", XContentFactory.jsonBuilder(), +                .startObject(), +                .field("date_field", "Jan 02 10:00:00"), +                .endObject(), +                .bytes());, +        assertThat(((LongFieldMapper.CustomLongNumericField) doc.rootDoc().getField("date_field")).numericAsString(), equalTo(Long.toString(new DateTime(TimeValue.timeValueHours(34).millis(), DateTimeZone.UTC).getMillis())));, +, +        Filter filter = defaultMapper.mappers().smartNameFieldMapper("date_field").rangeFilter("Jan 02 10:00:00", "Jan 02 11:00:00", true, true, null);, +        assertThat(filter, instanceOf(NumericRangeFilter.class));, +        NumericRangeFilter<Long> rangeFilter = (NumericRangeFilter<Long>) filter;, +        assertThat(rangeFilter.getMax(), equalTo(new DateTime(TimeValue.timeValueHours(35).millis() + 999).getMillis())); // +999 to include the 00-01 minute, +        assertThat(rangeFilter.getMin(), equalTo(new DateTime(TimeValue.timeValueHours(34).millis()).getMillis()));, +    }, +]