[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueNanos(delay));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueNanos(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueNanos(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, inputStream, md).withCannedAcl(blobStore.getCannedACL());, +        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, blobName).withCannedACL(blobStore.getCannedACL());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueNanos(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, inputStream, md).withCannedAcl(blobStore.getCannedACL());, +        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, blobName).withCannedACL(blobStore.getCannedACL());, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/S3BlobStore.java, +import com.amazonaws.services.s3.model.AmazonS3Exception;, +import com.amazonaws.services.s3.model.CannedAccessControlList;, +import com.amazonaws.services.s3.model.CreateBucketRequest;, +import com.amazonaws.services.s3.model.DeleteObjectsRequest;, +import com.amazonaws.services.s3.model.ObjectListing;, +import com.amazonaws.services.s3.model.S3ObjectSummary;, +, +                       ByteSizeValue bufferSize, int maxRetries, String cannedACL) {, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueNanos(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, inputStream, md).withCannedAcl(blobStore.getCannedACL());, +        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, blobName).withCannedACL(blobStore.getCannedACL());, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/S3BlobStore.java, +import com.amazonaws.services.s3.model.AmazonS3Exception;, +import com.amazonaws.services.s3.model.CannedAccessControlList;, +import com.amazonaws.services.s3.model.CreateBucketRequest;, +import com.amazonaws.services.s3.model.DeleteObjectsRequest;, +import com.amazonaws.services.s3.model.ObjectListing;, +import com.amazonaws.services.s3.model.S3ObjectSummary;, +, +                       ByteSizeValue bufferSize, int maxRetries, String cannedACL) {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +        logger.debug("using bucket [{}], region [{}], endpoint [{}], protocol [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], max_retries [{}], cannedACL [{}]",, +                bucket, region, endpoint, protocol, chunkSize, serverSideEncryption, bufferSize, maxRetries, cannedACL);, +                bucket, region, serverSideEncryption, bufferSize, maxRetries, cannedACL);, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueNanos(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, inputStream, md).withCannedAcl(blobStore.getCannedACL());, +        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, blobName).withCannedACL(blobStore.getCannedACL());, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/S3BlobStore.java, +import com.amazonaws.services.s3.model.AmazonS3Exception;, +import com.amazonaws.services.s3.model.CannedAccessControlList;, +import com.amazonaws.services.s3.model.CreateBucketRequest;, +import com.amazonaws.services.s3.model.DeleteObjectsRequest;, +import com.amazonaws.services.s3.model.ObjectListing;, +import com.amazonaws.services.s3.model.S3ObjectSummary;, +, +                       ByteSizeValue bufferSize, int maxRetries, String cannedACL) {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +        logger.debug("using bucket [{}], region [{}], endpoint [{}], protocol [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], max_retries [{}], cannedACL [{}]",, +                bucket, region, endpoint, protocol, chunkSize, serverSideEncryption, bufferSize, maxRetries, cannedACL);, +                bucket, region, serverSideEncryption, bufferSize, maxRetries, cannedACL);, +++ b/plugins/repository-s3/src/test/java/org/elasticsearch/cloud/aws/blobstore/S3BlobStoreTests.java, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private volatile long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueNanos(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, inputStream, md).withCannedAcl(blobStore.getCannedACL());, +        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, blobName).withCannedACL(blobStore.getCannedACL());, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/S3BlobStore.java, +import com.amazonaws.services.s3.model.AmazonS3Exception;, +import com.amazonaws.services.s3.model.CannedAccessControlList;, +import com.amazonaws.services.s3.model.CreateBucketRequest;, +import com.amazonaws.services.s3.model.DeleteObjectsRequest;, +import com.amazonaws.services.s3.model.ObjectListing;, +import com.amazonaws.services.s3.model.S3ObjectSummary;, +, +                       ByteSizeValue bufferSize, int maxRetries, String cannedACL) {, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +        logger.debug("using bucket [{}], region [{}], endpoint [{}], protocol [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], max_retries [{}], cannedACL [{}]",, +                bucket, region, endpoint, protocol, chunkSize, serverSideEncryption, bufferSize, maxRetries, cannedACL);, +                bucket, region, serverSideEncryption, bufferSize, maxRetries, cannedACL);]