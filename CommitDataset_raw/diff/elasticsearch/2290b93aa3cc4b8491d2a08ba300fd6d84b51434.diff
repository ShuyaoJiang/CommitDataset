[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +     * Sets whether interim results should be included, +     * @param includeInterim Whether interim results should be included, +    public BatchedDocumentsIterator<T> includeInterim(boolean includeInterim) {, +        filterBuilder.interim(includeInterim);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +     * Sets whether interim results should be included, +     * @param includeInterim Whether interim results should be included, +    public BatchedDocumentsIterator<T> includeInterim(boolean includeInterim) {, +        filterBuilder.interim(includeInterim);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +                            .startObject(Result.IS_INTERIM.getPreferredName()), +                                    .startObject(Result.IS_INTERIM.getPreferredName()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +     * Sets whether interim results should be included, +     * @param includeInterim Whether interim results should be included, +    public BatchedDocumentsIterator<T> includeInterim(boolean includeInterim) {, +        filterBuilder.interim(includeInterim);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +                            .startObject(Result.IS_INTERIM.getPreferredName()), +                                    .startObject(Result.IS_INTERIM.getPreferredName()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +     * Sets whether interim results should be included, +     * @param includeInterim Whether interim results should be included, +    public BatchedDocumentsIterator<T> includeInterim(boolean includeInterim) {, +        filterBuilder.interim(includeInterim);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +                            .startObject(Result.IS_INTERIM.getPreferredName()), +                                    .startObject(Result.IS_INTERIM.getPreferredName()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                    .interim(query.isIncludeInterim());, +        ResultsFilterBuilder builder = new ResultsFilterBuilder(recordFilter).interim(includeInterim);, +                .interim(query.isIncludeInterim()), +                .interim(query.isIncludeInterim()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +     * Sets whether interim results should be included, +     * @param includeInterim Whether interim results should be included, +    public BatchedDocumentsIterator<T> includeInterim(boolean includeInterim) {, +        filterBuilder.interim(includeInterim);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +                            .startObject(Result.IS_INTERIM.getPreferredName()), +                                    .startObject(Result.IS_INTERIM.getPreferredName()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                    .interim(query.isIncludeInterim());, +        ResultsFilterBuilder builder = new ResultsFilterBuilder(recordFilter).interim(includeInterim);, +                .interim(query.isIncludeInterim()), +                .interim(query.isIncludeInterim()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ResultsFilterBuilder.java, +    public ResultsFilterBuilder interim(boolean includeInterim) {, +        TermQueryBuilder interimFilter = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +     * Sets whether interim results should be included, +     * @param includeInterim Whether interim results should be included, +    public BatchedDocumentsIterator<T> includeInterim(boolean includeInterim) {, +        filterBuilder.interim(includeInterim);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +                            .startObject(Result.IS_INTERIM.getPreferredName()), +                                    .startObject(Result.IS_INTERIM.getPreferredName()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                    .interim(query.isIncludeInterim());, +        ResultsFilterBuilder builder = new ResultsFilterBuilder(recordFilter).interim(includeInterim);, +                .interim(query.isIncludeInterim()), +                .interim(query.isIncludeInterim()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ResultsFilterBuilder.java, +    public ResultsFilterBuilder interim(boolean includeInterim) {, +        TermQueryBuilder interimFilter = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/normalizer/ScoresUpdater.java, +                        .timeRange(calcNormalizationWindowStart(endBucketEpochMs, windowExtensionMs), endBucketEpochMs), +                        .includeInterim(false);, +                .timeRange(bucketTimeStamp, bucketTimeStamp + 1), +                .includeInterim(false);, +                .timeRange(calcNormalizationWindowStart(endBucketEpochMs, windowExtensionMs), endBucketEpochMs), +                .includeInterim(false);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/BatchedDocumentsIterator.java, +     * Sets whether interim results should be included, +     * @param includeInterim Whether interim results should be included, +    public BatchedDocumentsIterator<T> includeInterim(boolean includeInterim) {, +        filterBuilder.interim(includeInterim);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ElasticsearchMappings.java, +                            .startObject(Result.IS_INTERIM.getPreferredName()), +                                    .startObject(Result.IS_INTERIM.getPreferredName()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobDataDeleter.java, +        QueryBuilder qb = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobProvider.java, +                    .interim(query.isIncludeInterim());, +        ResultsFilterBuilder builder = new ResultsFilterBuilder(recordFilter).interim(includeInterim);, +                .interim(query.isIncludeInterim()), +                .interim(query.isIncludeInterim()), +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/persistence/ResultsFilterBuilder.java, +    public ResultsFilterBuilder interim(boolean includeInterim) {, +        TermQueryBuilder interimFilter = QueryBuilders.termQuery(Result.IS_INTERIM.getPreferredName(), true);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/normalizer/ScoresUpdater.java]