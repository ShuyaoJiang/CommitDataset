[+++ b/server/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +            if (indexRoutingTable == null && indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                // its possible the index was closed while waiting for active shard copies,, +                // in this case, we'll just consider it that we have enough active shard copies, +                // and we can stop waiting, +                continue;, +            }, +++ b/server/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java, +            if (indexRoutingTable == null && indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                // its possible the index was closed while waiting for active shard copies,, +                // in this case, we'll just consider it that we have enough active shard copies, +                // and we can stop waiting, +                continue;, +            }, +++ b/server/src/test/java/org/elasticsearch/action/support/ActiveShardCountTests.java, +import java.util.Arrays;, +    public void testEnoughShardsActiveWithClosedIndex() {, +        final String indexName = "test-idx";, +        final int numberOfShards = randomIntBetween(1, 5);, +        final int numberOfReplicas = randomIntBetween(4, 7);, +, +        final ClusterState clusterState = initializeWithClosedIndex(indexName, numberOfShards, numberOfReplicas);, +        for (ActiveShardCount waitForActiveShards : Arrays.asList(ActiveShardCount.DEFAULT, ActiveShardCount.ALL, ActiveShardCount.ONE)) {, +            assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName));, +        }, +    }, +, +    private ClusterState initializeWithClosedIndex(final String indexName, final int numShards, final int numReplicas) {, +        final IndexMetaData indexMetaData = IndexMetaData.builder(indexName), +            .settings(settings(Version.CURRENT), +                .put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID())), +            .numberOfShards(numShards), +            .numberOfReplicas(numReplicas), +            .state(IndexMetaData.State.CLOSE), +            .build();, +        final MetaData metaData = MetaData.builder().put(indexMetaData, true).build();, +        return ClusterState.builder(new ClusterName("test_cluster")).metaData(metaData).build();, +    }, +]