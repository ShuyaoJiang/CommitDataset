[+++ b/docs/CHANGELOG.asciidoc, +Use date format in `date_range` mapping before fallback to default ({pull}29310[#29310]), +, +Use date format in `date_range` mapping before fallback to default ({pull}29310[#29310]), +, +++ b/docs/CHANGELOG.asciidoc, +Use date format in `date_range` mapping before fallback to default ({pull}29310[#29310]), +, +Use date format in `date_range` mapping before fallback to default ({pull}29310[#29310]), +, +++ b/server/src/main/java/org/elasticsearch/index/mapper/RangeFieldMapper.java, +            if (parser == null) {, +                parser = dateMathParser();, +            }, +++ b/docs/CHANGELOG.asciidoc, +Use date format in `date_range` mapping before fallback to default ({pull}29310[#29310]), +, +Use date format in `date_range` mapping before fallback to default ({pull}29310[#29310]), +, +++ b/server/src/main/java/org/elasticsearch/index/mapper/RangeFieldMapper.java, +            if (parser == null) {, +                parser = dateMathParser();, +            }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/RangeFieldTypeTests.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.joda.FormatDateTimeFormatter;, +import org.elasticsearch.index.mapper.RangeFieldMapper.RangeFieldType;, +        type = randomFrom(RangeType.values());, +                    ((RangeFieldType) ft).setDateTimeFormatter(Joda.forPattern("basic_week_date", Locale.ROOT));, +                    ((RangeFieldType) ft).setDateTimeFormatter(Joda.forPattern("date_optional_time", Locale.CANADA));, +    protected RangeFieldType createDefaultFieldType() {, +        return new RangeFieldType(type, Version.CURRENT);, +        QueryShardContext context = createContext();, +        RangeFieldType ft = new RangeFieldType(type, Version.CURRENT);, +        ShapeRelation relation = randomFrom(ShapeRelation.values());, +        boolean includeLower = randomBoolean();, +        boolean includeUpper = randomBoolean();, +    private QueryShardContext createContext() {, +        Settings indexSettings = Settings.builder(), +            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();, +        IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(randomAlphaOfLengthBetween(1, 10), indexSettings);, +        return new QueryShardContext(0, idxSettings, null, null, null, null, null, xContentRegistry(),, +            writableRegistry(), null, null, () -> nowInMillis, null);, +    }, +, +    public void testDateRangeQueryUsingMappingFormat() {, +        QueryShardContext context = createContext();, +        RangeFieldType fieldType = new RangeFieldType(RangeType.DATE, Version.CURRENT);, +        fieldType.setName(FIELDNAME);, +        fieldType.setIndexOptions(IndexOptions.DOCS);, +        fieldType.setHasDocValues(false);, +        ShapeRelation relation = randomFrom(ShapeRelation.values());, +, +        // dates will break the default format, +        final String from = "2016-15-06T15:29:50+08:00";, +        final String to = "2016-16-06T15:29:50+08:00";, +, +        ElasticsearchParseException ex = expectThrows(ElasticsearchParseException.class,, +            () -> fieldType.rangeQuery(from, to, true, true, relation, null, null, context));, +        assertEquals("failed to parse date field [2016-15-06T15:29:50+08:00] with format [strict_date_optional_time||epoch_millis]",, +            ex.getMessage());, +, +        // setting mapping format which is compatible with those dates, +        final FormatDateTimeFormatter formatter = Joda.forPattern("yyyy-dd-MM'T'HH:mm:ssZZ");, +        assertEquals(1465975790000L, formatter.parser().parseMillis(from));, +        assertEquals(1466062190000L, formatter.parser().parseMillis(to));, +, +        fieldType.setDateTimeFormatter(formatter);, +        final Query query = fieldType.rangeQuery(from, to, true, true, relation, null, null, context);, +        assertEquals("field:<ranges:[1465975790000 : 1466062190000]>", query.toString());, +    }, +, +    public void testTermQuery() throws Exception {, +        QueryShardContext context = createContext();, +        RangeFieldType ft = new RangeFieldType(type, Version.CURRENT);]