[+++ b/docs/reference/sql/language/syntax/commands/select.asciidoc, +IMPORTANT: When used along-side, `GROUP BY` expression can point _only_ to the columns used for grouping or aggregate functions., +[[sql-syntax-order-by-grouping]], +==== Order By and Grouping, +, +For queries that perform grouping, ordering can be applied either on the grouping columns (by default ascending) or on aggregate functions. , +, +NOTE: With `GROUP BY`, make sure the ordering targets the resulting group - applying it to individual elements inside the group will have no impact on the results since regardless of the order, values inside the group are aggregated., +, +For example, to order groups simply indicate the grouping key:, +, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[orderByGroup], +----, +, +Multiple keys can be specified of course:, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[groupByMulti], +----, +, +Further more, it is possible to order groups based on aggregations of their values:, +, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[orderByAgg], +----, +, +IMPORTANT: Ordering by aggregation is possible for up to 512 entries for memory consumption reasons., +In cases where the results pass this threshold, use <<`LIMIT`, sql-syntax-limit>> to reduce the number, +of results., +, +++ b/docs/reference/sql/language/syntax/commands/select.asciidoc, +IMPORTANT: When used along-side, `GROUP BY` expression can point _only_ to the columns used for grouping or aggregate functions., +[[sql-syntax-order-by-grouping]], +==== Order By and Grouping, +, +For queries that perform grouping, ordering can be applied either on the grouping columns (by default ascending) or on aggregate functions. , +, +NOTE: With `GROUP BY`, make sure the ordering targets the resulting group - applying it to individual elements inside the group will have no impact on the results since regardless of the order, values inside the group are aggregated., +, +For example, to order groups simply indicate the grouping key:, +, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[orderByGroup], +----, +, +Multiple keys can be specified of course:, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[groupByMulti], +----, +, +Further more, it is possible to order groups based on aggregations of their values:, +, +["source","sql",subs="attributes,callouts,macros"], +----, +include-tagged::{sql-specs}/docs.csv-spec[orderByAgg], +----, +, +IMPORTANT: Ordering by aggregation is possible for up to 512 entries for memory consumption reasons., +In cases where the results pass this threshold, use <<`LIMIT`, sql-syntax-limit>> to reduce the number, +of results., +, +++ b/x-pack/plugin/sql/qa/src/main/resources/docs.csv-spec, +orderByGroup, +schema::g:s|c:i, +// tag::orderByGroup, +SELECT gender AS g, COUNT(*) AS c FROM emp GROUP BY gender ORDER BY g DESC;, +, +       g       |       c       , +---------------+---------------, +M              |57, +F              |33             , +null           |10             , +      , +// end::orderByGroup, +;, +, +orderByAgg, +schema::g:s|salary:i, +// tag::orderByAgg, +SELECT gender AS g, MIN(salary) AS salary FROM emp GROUP BY gender ORDER BY salary DESC;, +, +       g       |    salary     , +---------------+---------------, +F              |25976          , +M              |25945          , +null           |25324             , +    , +// end::orderByAgg, +;, +]