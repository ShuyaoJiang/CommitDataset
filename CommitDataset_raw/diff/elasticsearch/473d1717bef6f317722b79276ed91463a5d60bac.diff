[+++ b/src/main/java/org/elasticsearch/search/fetch/matchedqueries/MatchedQueriesFetchSubPhase.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.queries.TermFilter;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.index.mapper.Uid;, +import org.elasticsearch.index.mapper.internal.UidFieldMapper;, +        try {, +            DocIdSet docAndNestedDocsIdSet = null;, +            if (context.mapperService().documentMapper(hitContext.hit().type()).hasNestedObjects()) {, +                // Both main and nested Lucene docs have a _uid field, +                Filter docAndNestedDocsFilter = new TermFilter(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(hitContext.hit().type(), hitContext.hit().id())));, +                docAndNestedDocsIdSet = docAndNestedDocsFilter.getDocIdSet(hitContext.readerContext(), null);, +            }, +            addMatchedQueries(hitContext, context.parsedQuery().namedFilters(), matchedQueries, docAndNestedDocsIdSet);, +                addMatchedQueries(hitContext, context.parsedPostFilter().namedFilters(), matchedQueries, docAndNestedDocsIdSet);, +            }, +        } catch (IOException e) {, +            throw ExceptionsHelper.convertToElastic(e);, +        } finally {, +            SearchContext.current().clearReleasables(Lifetime.COLLECTION);, +    private void addMatchedQueries(HitContext hitContext, ImmutableMap<String, Filter> namedFiltersAndQueries, List<String> matchedQueries, DocIdSet docAndNestedDocsIdSet) throws IOException {, +, +            DocIdSet filterDocIdSet = filter.getDocIdSet(hitContext.readerContext(), null); // null is fine, since we filter by hitContext.docId(), +            if (!DocIdSets.isEmpty(filterDocIdSet)) {, +                if (!DocIdSets.isEmpty(docAndNestedDocsIdSet)) {, +                    DocIdSetIterator filterIterator = filterDocIdSet.iterator();, +                    DocIdSetIterator docAndNestedDocsIterator = docAndNestedDocsIdSet.iterator();, +                    if (filterIterator != null && docAndNestedDocsIterator != null) {, +                        int matchedDocId = -1;, +                        for (int docId = docAndNestedDocsIterator.nextDoc(); docId < DocIdSetIterator.NO_MORE_DOCS; docId = docAndNestedDocsIterator.nextDoc()) {, +                            if (docId != matchedDocId) {, +                                matchedDocId = filterIterator.advance(docId);, +                            }, +                            if (matchedDocId == docId) {, +                                matchedQueries.add(name);, +                                break;, +                            }, +                        }, +                    }, +                } else {, +                    Bits bits = filterDocIdSet.bits();, +                        DocIdSetIterator iterator = filterDocIdSet.iterator();, +++ b/src/main/java/org/elasticsearch/search/fetch/matchedqueries/MatchedQueriesFetchSubPhase.java, +import org.apache.lucene.index.Term;, +import org.apache.lucene.queries.TermFilter;, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.index.mapper.Uid;, +import org.elasticsearch.index.mapper.internal.UidFieldMapper;, +        try {, +            DocIdSet docAndNestedDocsIdSet = null;, +            if (context.mapperService().documentMapper(hitContext.hit().type()).hasNestedObjects()) {, +                // Both main and nested Lucene docs have a _uid field, +                Filter docAndNestedDocsFilter = new TermFilter(new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(hitContext.hit().type(), hitContext.hit().id())));, +                docAndNestedDocsIdSet = docAndNestedDocsFilter.getDocIdSet(hitContext.readerContext(), null);, +            }, +            addMatchedQueries(hitContext, context.parsedQuery().namedFilters(), matchedQueries, docAndNestedDocsIdSet);, +                addMatchedQueries(hitContext, context.parsedPostFilter().namedFilters(), matchedQueries, docAndNestedDocsIdSet);, +            }, +        } catch (IOException e) {, +            throw ExceptionsHelper.convertToElastic(e);, +        } finally {, +            SearchContext.current().clearReleasables(Lifetime.COLLECTION);, +    private void addMatchedQueries(HitContext hitContext, ImmutableMap<String, Filter> namedFiltersAndQueries, List<String> matchedQueries, DocIdSet docAndNestedDocsIdSet) throws IOException {, +, +            DocIdSet filterDocIdSet = filter.getDocIdSet(hitContext.readerContext(), null); // null is fine, since we filter by hitContext.docId(), +            if (!DocIdSets.isEmpty(filterDocIdSet)) {, +                if (!DocIdSets.isEmpty(docAndNestedDocsIdSet)) {, +                    DocIdSetIterator filterIterator = filterDocIdSet.iterator();, +                    DocIdSetIterator docAndNestedDocsIterator = docAndNestedDocsIdSet.iterator();, +                    if (filterIterator != null && docAndNestedDocsIterator != null) {, +                        int matchedDocId = -1;, +                        for (int docId = docAndNestedDocsIterator.nextDoc(); docId < DocIdSetIterator.NO_MORE_DOCS; docId = docAndNestedDocsIterator.nextDoc()) {, +                            if (docId != matchedDocId) {, +                                matchedDocId = filterIterator.advance(docId);, +                            }, +                            if (matchedDocId == docId) {, +                                matchedQueries.add(name);, +                                break;, +                            }, +                        }, +                    }, +                } else {, +                    Bits bits = filterDocIdSet.bits();, +                        DocIdSetIterator iterator = filterDocIdSet.iterator();, +++ b/src/test/java/org/elasticsearch/nested/SimpleNestedTests.java, +import org.elasticsearch.action.index.IndexRequestBuilder;, +import java.util.ArrayList;, +import java.util.List;, +, +    public void simpleNestedMatchQueries() throws Exception {, +        XContentBuilder builder = jsonBuilder().startObject(), +                .startObject("type1"), +                    .startObject("properties"), +                        .startObject("nested1"), +                            .field("type", "nested"), +                        .endObject(), +                        .startObject("field1"), +                            .field("type", "long"), +                        .endObject(), +                    .endObject()]