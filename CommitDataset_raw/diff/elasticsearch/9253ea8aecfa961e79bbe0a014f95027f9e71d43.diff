[+++ b/plugins/analysis-phonetic/src/main/java/org/elasticsearch/index/analysis/PhoneticTokenFilterFactory.java, +import java.util.HashSet;, +import java.util.List;, +, +                LanguageSet langset = null;, +                if (languageset != null && languageset.size() > 0) {, +                    langset = LanguageSet.from(new HashSet<>(languageset));, +                return new BeiderMorseFilter(tokenStream, new PhoneticEngine(nametype, ruletype, true), langset);, +++ b/plugins/analysis-phonetic/src/main/java/org/elasticsearch/index/analysis/PhoneticTokenFilterFactory.java, +import java.util.HashSet;, +import java.util.List;, +, +                LanguageSet langset = null;, +                if (languageset != null && languageset.size() > 0) {, +                    langset = LanguageSet.from(new HashSet<>(languageset));, +                return new BeiderMorseFilter(tokenStream, new PhoneticEngine(nametype, ruletype, true), langset);, +++ b/plugins/analysis-phonetic/src/test/java/org/elasticsearch/index/analysis/SimplePhoneticAnalysisTests.java, +import org.apache.lucene.analysis.BaseTokenStreamTestCase;, +import org.apache.lucene.analysis.Tokenizer;, +import org.apache.lucene.analysis.core.WhitespaceTokenizer;, +import org.junit.Before;, +import java.io.StringReader;, +, +    private TestAnalysis analysis;, +, +    @Before, +    public void setup() throws IOException {, +        this.analysis = createTestAnalysis(new Index("test", "_na_"), settings, new AnalysisPhoneticPlugin());, +    }, +, +    public void testPhoneticTokenFilterFactory() throws IOException {, +, +    public void testPhoneticTokenFilterBeiderMorseNoLanguage() throws IOException {, +        TokenFilterFactory filterFactory = analysis.tokenFilter.get("beidermorsefilter");, +        Tokenizer tokenizer = new WhitespaceTokenizer();, +        tokenizer.setReader(new StringReader("ABADIAS"));, +        String[] expected = new String[] { "abYdias", "abYdios", "abadia", "abadiaS", "abadias", "abadio", "abadioS", "abadios", "abodia",, +                "abodiaS", "abodias", "abodio", "abodioS", "abodios", "avadias", "avadios", "avodias", "avodios", "obadia", "obadiaS",, +                "obadias", "obadio", "obadioS", "obadios", "obodia", "obodiaS", "obodias", "obodioS" };, +        BaseTokenStreamTestCase.assertTokenStreamContents(filterFactory.create(tokenizer), expected);, +    }, +, +    public void testPhoneticTokenFilterBeiderMorseWithLanguage() throws IOException {, +        TokenFilterFactory filterFactory = analysis.tokenFilter.get("beidermorsefilterfrench");, +        Tokenizer tokenizer = new WhitespaceTokenizer();, +        tokenizer.setReader(new StringReader("Rimbault"));, +        String[] expected = new String[] { "rimbD", "rimbDlt", "rimba", "rimbalt", "rimbo", "rimbolt", "rimbu", "rimbult", "rmbD", "rmbDlt",, +                "rmba", "rmbalt", "rmbo", "rmbolt", "rmbu", "rmbult" };, +        BaseTokenStreamTestCase.assertTokenStreamContents(filterFactory.create(tokenizer), expected);, +    }, +++ b/plugins/analysis-phonetic/src/main/java/org/elasticsearch/index/analysis/PhoneticTokenFilterFactory.java, +import java.util.HashSet;, +import java.util.List;, +, +                LanguageSet langset = null;, +                if (languageset != null && languageset.size() > 0) {, +                    langset = LanguageSet.from(new HashSet<>(languageset));, +                return new BeiderMorseFilter(tokenStream, new PhoneticEngine(nametype, ruletype, true), langset);, +++ b/plugins/analysis-phonetic/src/test/java/org/elasticsearch/index/analysis/SimplePhoneticAnalysisTests.java, +import org.apache.lucene.analysis.BaseTokenStreamTestCase;, +import org.apache.lucene.analysis.Tokenizer;, +import org.apache.lucene.analysis.core.WhitespaceTokenizer;, +import org.junit.Before;, +import java.io.StringReader;, +, +    private TestAnalysis analysis;, +, +    @Before, +    public void setup() throws IOException {, +        this.analysis = createTestAnalysis(new Index("test", "_na_"), settings, new AnalysisPhoneticPlugin());, +    }, +, +    public void testPhoneticTokenFilterFactory() throws IOException {, +, +    public void testPhoneticTokenFilterBeiderMorseNoLanguage() throws IOException {, +        TokenFilterFactory filterFactory = analysis.tokenFilter.get("beidermorsefilter");, +        Tokenizer tokenizer = new WhitespaceTokenizer();, +        tokenizer.setReader(new StringReader("ABADIAS"));, +        String[] expected = new String[] { "abYdias", "abYdios", "abadia", "abadiaS", "abadias", "abadio", "abadioS", "abadios", "abodia",, +                "abodiaS", "abodias", "abodio", "abodioS", "abodios", "avadias", "avadios", "avodias", "avodios", "obadia", "obadiaS",, +                "obadias", "obadio", "obadioS", "obadios", "obodia", "obodiaS", "obodias", "obodioS" };, +        BaseTokenStreamTestCase.assertTokenStreamContents(filterFactory.create(tokenizer), expected);, +    }, +, +    public void testPhoneticTokenFilterBeiderMorseWithLanguage() throws IOException {, +        TokenFilterFactory filterFactory = analysis.tokenFilter.get("beidermorsefilterfrench");, +        Tokenizer tokenizer = new WhitespaceTokenizer();, +        tokenizer.setReader(new StringReader("Rimbault"));, +        String[] expected = new String[] { "rimbD", "rimbDlt", "rimba", "rimbalt", "rimbo", "rimbolt", "rimbu", "rimbult", "rmbD", "rmbDlt",, +                "rmba", "rmbalt", "rmbo", "rmbolt", "rmbu", "rmbult" };, +        BaseTokenStreamTestCase.assertTokenStreamContents(filterFactory.create(tokenizer), expected);, +    }, +++ b/plugins/analysis-phonetic/src/test/resources/org/elasticsearch/index/analysis/phonetic-1.yml, +      beidermorsefilterfrench:, +        type: phonetic, +        encoder: beidermorse, +        languageset : [ "french" ]]