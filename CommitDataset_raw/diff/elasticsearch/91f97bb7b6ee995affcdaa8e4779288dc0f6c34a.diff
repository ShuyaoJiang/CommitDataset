[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                            translog.revertTransient();, +                            translog.revertTransient();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                            translog.revertTransient();, +                            translog.revertTransient();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +     * Reverts back to not have a transient translog., +     */, +    void revertTransient();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +                            translog.revertTransient();, +                            translog.revertTransient();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/Translog.java, +     * Reverts back to not have a transient translog., +     */, +    void revertTransient();, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/translog/fs/FsTranslog.java, +import java.util.concurrent.locks.ReadWriteLock;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +    private final ReadWriteLock rwl = new ReentrantReadWriteLock();, +        rwl.writeLock().lock();, +        try {, +                    if (trans != null && file.getName().equals("translog-" + trans.id())) {, +                        continue;, +                    }, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        rwl.writeLock().lock();, +        try {, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        rwl.writeLock().lock();, +            assert this.trans == null;, +        } finally {, +            rwl.writeLock().unlock();, +        FsTranslogFile old;, +        rwl.writeLock().lock();, +        try {, +            assert this.trans != null;, +            old = current;, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        old.close(true);, +    }, +, +    @Override public void revertTransient() {, +        FsTranslogFile old;, +        rwl.writeLock().lock();, +        try {, +            old = trans;, +            this.trans = null;, +        } finally {, +            rwl.writeLock().unlock();, +        }, +        old.close(true);, +        rwl.readLock().lock();, +        try {, +                } catch (Exception e) {, +        } finally {, +            rwl.readLock().unlock();, +        }, +        rwl.readLock().lock();, +            rwl.readLock().unlock();, +        rwl.writeLock().lock();, +        try {, +        } finally {, +            rwl.writeLock().unlock();, +        }]