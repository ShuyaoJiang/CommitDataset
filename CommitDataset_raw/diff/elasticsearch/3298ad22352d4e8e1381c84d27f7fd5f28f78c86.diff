[+++ b/src/main/java/org/elasticsearch/common/lucene/uid/UidField.java, +import org.apache.lucene.index.DocsAndPositionsEnum;, +import org.apache.lucene.search.DocIdSetIterator;, +import org.apache.lucene.util.BytesRef;, +// TODO: LUCENE 4 UPGRADE: Store version as doc values instead of as a payload., +    public static DocIdAndVersion loadDocIdAndVersion(AtomicReaderContext context, Term term) {, +            DocsAndPositionsEnum uid = context.reader().termPositionsEnum(term);, +            if (uid.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {, +                docId = uid.docID();, +                if (uid.getPayload() == null) {, +                if (uid.getPayload().length < 8) {, +                byte[] payload = new byte[uid.getPayload().length];, +                System.arraycopy(uid.getPayload().bytes, uid.getPayload().offset, payload, 0, uid.getPayload().length);, +                return new DocIdAndVersion(docId, Numbers.bytesToLong(payload), context);, +            } while (uid.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);, +            return new DocIdAndVersion(docId, -2, context);, +            return new DocIdAndVersion(docId, -2, context);, +    public static long loadVersion(AtomicReaderContext context, Term term) {, +            DocsAndPositionsEnum uid = context.reader().termPositionsEnum(term);, +            if (uid.nextDoc() == DocIdSetIterator.NO_MORE_DOCS) {, +                if (uid.getPayload() == null) {, +                if (uid.getPayload().length < 8) {, +                byte[] payload = new byte[uid.getPayload().length];, +                System.arraycopy(uid.getPayload().bytes, uid.getPayload().offset, payload, 0, uid.getPayload().length);, +            } while (uid.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);, +        super(name, uid, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO);, +//        this.indexOptions = FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;, +            payloadAttribute.setPayload(new BytesRef(Numbers.longToBytes(field.version())));]