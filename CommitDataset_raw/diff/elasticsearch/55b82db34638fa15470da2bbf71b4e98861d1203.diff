[+++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +, +        // NOCOMMIT reducerParsers.add(FooParser.class);, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +, +        // NOCOMMIT reducerParsers.add(FooParser.class);, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Lists;, +, +import org.elasticsearch.search.aggregations.reducers.ReducerStreams;, +        out.writeVInt(reducers.size());, +        for (Reducer reducer : reducers) {, +            out.writeBytesReference(reducer.type().stream());, +            reducer.writeTo(out);, +        }, +        int size = in.readVInt();, +        if (size == 0) {, +            reducers = ImmutableList.of();, +        } else {, +            reducers = Lists.newArrayListWithCapacity(size);, +            for (int i = 0; i < size; i++) {, +                BytesReference type = in.readBytesReference();, +                Reducer reducer = ReducerStreams.stream(type).readResult(in);, +                reducers.add(reducer);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +, +        // NOCOMMIT reducerParsers.add(FooParser.class);, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Lists;, +, +import org.elasticsearch.search.aggregations.reducers.ReducerStreams;, +        out.writeVInt(reducers.size());, +        for (Reducer reducer : reducers) {, +            out.writeBytesReference(reducer.type().stream());, +            reducer.writeTo(out);, +        }, +        int size = in.readVInt();, +        if (size == 0) {, +            reducers = ImmutableList.of();, +        } else {, +            reducers = Lists.newArrayListWithCapacity(size);, +            for (int i = 0; i < size; i++) {, +                BytesReference type = in.readBytesReference();, +                Reducer reducer = ReducerStreams.stream(type).readResult(in);, +                reducers.add(reducer);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +            reducedAggregations.add(first.reduce(new InternalAggregation.ReduceContext(aggregations, context.bigArrays(), context, +                    .scriptService())));, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +, +        // NOCOMMIT reducerParsers.add(FooParser.class);, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Lists;, +, +import org.elasticsearch.search.aggregations.reducers.ReducerStreams;, +        out.writeVInt(reducers.size());, +        for (Reducer reducer : reducers) {, +            out.writeBytesReference(reducer.type().stream());, +            reducer.writeTo(out);, +        }, +        int size = in.readVInt();, +        if (size == 0) {, +            reducers = ImmutableList.of();, +        } else {, +            reducers = Lists.newArrayListWithCapacity(size);, +            for (int i = 0; i < size; i++) {, +                BytesReference type = in.readBytesReference();, +                Reducer reducer = ReducerStreams.stream(type).readResult(in);, +                reducers.add(reducer);, +            }, +        }, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregations.java, +            reducedAggregations.add(first.reduce(new InternalAggregation.ReduceContext(aggregations, context.bigArrays(), context, +                    .scriptService())));, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalHistogram.java, +, +        public ValueFormatter getFormatter() {, +            return formatter;, +        }, +, +        public boolean getKeyed() {, +            return keyed;, +        }, +    public static class Factory<B extends InternalHistogram.Bucket> {, +    public Factory<B> getFactory() {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +, +        // NOCOMMIT reducerParsers.add(FooParser.class);, +++ b/src/main/java/org/elasticsearch/search/aggregations/InternalAggregation.java, +import com.google.common.collect.ImmutableList;, +import com.google.common.collect.Lists;, +, +import org.elasticsearch.search.aggregations.reducers.ReducerStreams;]