[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +                    if (currentState.metaData().hasIndex(aliasAction.alias())) {, +                        listener.onFailure(new InvalidAliasNameException(new Index(aliasAction.index()), aliasAction.alias(), "an index exists with the same name as the alias"));, +                        return currentState;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +                    if (currentState.metaData().hasIndex(aliasAction.alias())) {, +                        listener.onFailure(new InvalidAliasNameException(new Index(aliasAction.index()), aliasAction.alias(), "an index exists with the same name as the alias"));, +                        return currentState;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +                    if (currentState.metaData().hasIndex(aliasAction.alias())) {, +                        listener.onFailure(new InvalidAliasNameException(new Index(aliasAction.index()), aliasAction.alias(), "an index exists with the same name as the alias"));, +                        return currentState;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +                    if (currentState.metaData().hasIndex(aliasAction.alias())) {, +                        listener.onFailure(new InvalidAliasNameException(new Index(aliasAction.index()), aliasAction.alias(), "an index exists with the same name as the alias"));, +                        return currentState;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +                    if (currentState.metaData().hasIndex(aliasAction.alias())) {, +                        listener.onFailure(new InvalidAliasNameException(new Index(aliasAction.index()), aliasAction.alias(), "an index exists with the same name as the alias"));, +                        return currentState;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/InvalidAliasNameException.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.indices;, +, +import org.elasticsearch.index.Index;, +import org.elasticsearch.index.IndexException;, +, +/**, + * @author kimchy (shay.banon), + */, +public class InvalidAliasNameException extends IndexException {, +, +    public InvalidAliasNameException(Index index, String name, String desc) {, +        super(index, "Invalid alias name [" + name + "], " + desc);, +    }, +}, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java, +import org.elasticsearch.indices.InvalidAliasNameException;, +                    if (currentState.metaData().hasIndex(aliasAction.alias())) {, +                        listener.onFailure(new InvalidAliasNameException(new Index(aliasAction.index()), aliasAction.alias(), "an index exists with the same name as the alias"));, +                        return currentState;, +                    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/metadata/MetaDataMappingService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.indices.InvalidTypeNameException;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/InvalidAliasNameException.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *]