[+++ b/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import org.elasticsearch.common.Nullable;, +     * @param clusterAlias the cluster alias the node should be resolved against, +    Transport.Connection getConnection(@Nullable String clusterAlias, DiscoveryNode node) {, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import org.elasticsearch.common.Nullable;, +     * @param clusterAlias the cluster alias the node should be resolved against, +    Transport.Connection getConnection(@Nullable String clusterAlias, DiscoveryNode node) {, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +            final boolean remoteCluster;, +                remoteCluster = false;, +                remoteCluster = true;, +            return nodeToConnection.apply(remoteCluster ? clusterAlias : null, discoveryNode);, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import org.elasticsearch.common.Nullable;, +     * @param clusterAlias the cluster alias the node should be resolved against, +    Transport.Connection getConnection(@Nullable String clusterAlias, DiscoveryNode node) {, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +            final boolean remoteCluster;, +                remoteCluster = false;, +                remoteCluster = true;, +            return nodeToConnection.apply(remoteCluster ? clusterAlias : null, discoveryNode);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +        return clusterAlias == null || LOCAL_CLUSTER_GROUP_KEY.equals(clusterAlias), +            ? indexName : clusterAlias + REMOTE_CLUSTER_INDEX_SEPARATOR + indexName;, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +import org.elasticsearch.common.Nullable;, +     * @param clusterAlias the cluster alias the node should be resolved against, +    Transport.Connection getConnection(@Nullable String clusterAlias, DiscoveryNode node) {, +++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +            final boolean remoteCluster;, +                remoteCluster = false;, +                remoteCluster = true;, +            return nodeToConnection.apply(remoteCluster ? clusterAlias : null, discoveryNode);, +++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterAware.java, +        return clusterAlias == null || LOCAL_CLUSTER_GROUP_KEY.equals(clusterAlias), +            ? indexName : clusterAlias + REMOTE_CLUSTER_INDEX_SEPARATOR + indexName;, +++ b/server/src/test/java/org/elasticsearch/action/search/TransportSearchActionSingleNodeTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.search;, +, +import org.elasticsearch.action.index.IndexRequest;, +import org.elasticsearch.action.index.IndexResponse;, +import org.elasticsearch.action.support.WriteRequest;, +import org.elasticsearch.rest.RestStatus;, +import org.elasticsearch.search.SearchHit;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +, +public class TransportSearchActionSingleNodeTests extends ESSingleNodeTestCase {, +, +    public void testLocalClusterAlias() {, +        IndexRequest indexRequest = new IndexRequest("test");, +        indexRequest.id("1");, +        indexRequest.source("field", "value");, +        indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);, +        IndexResponse indexResponse = client().index(indexRequest).actionGet();, +        assertEquals(RestStatus.CREATED, indexResponse.status());, +, +        {, +            SearchRequest searchRequest = new SearchRequest("local");, +            SearchResponse searchResponse = client().search(searchRequest).actionGet();, +            assertEquals(1, searchResponse.getHits().getTotalHits().value);, +            SearchHit[] hits = searchResponse.getHits().getHits();, +            assertEquals(1, hits.length);, +            SearchHit hit = hits[0];, +            assertEquals("local", hit.getClusterAlias());, +            assertEquals("test", hit.getIndex());, +            assertEquals("1", hit.getId());, +        }, +        {, +            SearchRequest searchRequest = new SearchRequest("");, +            SearchResponse searchResponse = client().search(searchRequest).actionGet();, +            assertEquals(1, searchResponse.getHits().getTotalHits().value);, +            SearchHit[] hits = searchResponse.getHits().getHits();, +            assertEquals(1, hits.length);, +            SearchHit hit = hits[0];, +            assertEquals("", hit.getClusterAlias());, +            assertEquals("test", hit.getIndex());, +            assertEquals("1", hit.getId());, +        }, +    }, +}]