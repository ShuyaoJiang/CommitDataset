[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +            for (final ShardRouting shard : shards.reset()) {, +                // if its unassigned, nothing to do here..., +                if (shard.unassigned()) {, +                    continue;, +                // (and we already did it on the primary), +            if (replicaCounter == 0) {, +                if (alreadyThreaded || !request.listenerThreaded()) {, +                    listener.onResponse(response);, +                } else {, +                    threadPool.execute(new Runnable() {, +                        @Override public void run() {, +                            listener.onResponse(response);, +                        }, +                    });, +                }, +                return;, +            }, +, +            if (replicationType == ReplicationType.ASYNC) {, +                // async replication, notify the listener, +                if (alreadyThreaded || !request.listenerThreaded()) {, +                    listener.onResponse(response);, +                } else {, +                    threadPool.execute(new Runnable() {, +                        @Override public void run() {, +                            listener.onResponse(response);, +                        }, +                    });, +                }, +                // now, trick the counter so it won't decrease to 0 and notify the listeners, +                replicaCounter = -100;, +            }, +, +                // if its unassigned, nothing to do here..., +                if (shard.unassigned()) {, +                    continue;, +                }, +, +                // if the shard is primary and relocating, add one to the counter since we perform it on the replica as well, +                // (and we already did it on the primary), +                if (!doOnlyOnRelocating) {, +                    performOnReplica(response, alreadyThreaded, counter, shard, shard.currentNodeId());, +                }, +                if (shard.relocating()) {, +                    performOnReplica(response, alreadyThreaded, counter, shard, shard.relocatingNodeId());, +                }, +            }, +        }, +        private void performOnReplica(final Response response, boolean alreadyThreaded, final AtomicInteger counter, final ShardRouting shard, String nodeId) {, +            if (!nodes.nodeExists(nodeId)) {, +                return;]