[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.index.similarity.SimilarityService;, +        // validate that built-in similarities don't get redefined, +        Setting.groupSetting("index.similarity.", false, Setting.Scope.INDEX, (s) -> {, +          boolean valid = true;, +          String similarityName = s.substring(0, s.indexOf("."));, +          if(SimilarityService.BUILT_IN.keySet().contains(similarityName)) {, +            throw new IllegalArgumentException("Cannot redefine built-in Similarity [" + similarityName + "]");, +          }, +          return valid;, +        }), // this allows similarity settings to be passed, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.index.similarity.SimilarityService;, +        // validate that built-in similarities don't get redefined, +        Setting.groupSetting("index.similarity.", false, Setting.Scope.INDEX, (s) -> {, +          boolean valid = true;, +          String similarityName = s.substring(0, s.indexOf("."));, +          if(SimilarityService.BUILT_IN.keySet().contains(similarityName)) {, +            throw new IllegalArgumentException("Cannot redefine built-in Similarity [" + similarityName + "]");, +          }, +          return valid;, +        }), // this allows similarity settings to be passed, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.util.function.Predicate;, +      return groupSetting(key, dynamic, scope, (s) -> true);, +    }, +, +    public static Setting<Settings> groupSetting(String key, boolean dynamic, Scope scope, Predicate<String> settingsValidator) {, +                return settings.getByPrefix(key).filter(settingsValidator);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +import org.elasticsearch.index.similarity.SimilarityService;, +        // validate that built-in similarities don't get redefined, +        Setting.groupSetting("index.similarity.", false, Setting.Scope.INDEX, (s) -> {, +          boolean valid = true;, +          String similarityName = s.substring(0, s.indexOf("."));, +          if(SimilarityService.BUILT_IN.keySet().contains(similarityName)) {, +            throw new IllegalArgumentException("Cannot redefine built-in Similarity [" + similarityName + "]");, +          }, +          return valid;, +        }), // this allows similarity settings to be passed, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.util.function.Predicate;, +      return groupSetting(key, dynamic, scope, (s) -> true);, +    }, +, +    public static Setting<Settings> groupSetting(String key, boolean dynamic, Scope scope, Predicate<String> settingsValidator) {, +                return settings.getByPrefix(key).filter(settingsValidator);, +++ b/core/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java, +, +        try {, +          settings.validate("index.similarity.classic.type", Settings.builder().put("index.similarity.classic.type", "mine").build());, +          fail();, +        } catch (IllegalArgumentException e) {, +          assertEquals("Cannot redefine built-in Similarity [classic]", e.getMessage());, +        }]