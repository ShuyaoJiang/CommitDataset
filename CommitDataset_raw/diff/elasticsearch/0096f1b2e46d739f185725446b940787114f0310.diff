[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(client, threadPool, clusterService, settingsModule));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(client, threadPool, clusterService, settingsModule));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using., +    public static final Setting<TimeValue> CCR_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.wait_for_metadata_timeout", TimeValue.timeValueSeconds(60), Property.NodeScope, Property.Dynamic);, +    /**, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using., +     * TODO: Deprecate and remove this setting, +     */, +    private static final Setting<TimeValue> CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.auto_follow.wait_for_metadata_timeout", CCR_WAIT_FOR_METADATA_TIMEOUT, Property.NodeScope, Property.Dynamic);, +                CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT,, +                CCR_WAIT_FOR_METADATA_TIMEOUT);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(client, threadPool, clusterService, settingsModule));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using., +    public static final Setting<TimeValue> CCR_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.wait_for_metadata_timeout", TimeValue.timeValueSeconds(60), Property.NodeScope, Property.Dynamic);, +    /**, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using., +     * TODO: Deprecate and remove this setting, +     */, +    private static final Setting<TimeValue> CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.auto_follow.wait_for_metadata_timeout", CCR_WAIT_FOR_METADATA_TIMEOUT, Property.NodeScope, Property.Dynamic);, +                CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT,, +                CCR_WAIT_FOR_METADATA_TIMEOUT);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(CcrSettings.CCR_WAIT_FOR_METADATA_TIMEOUT, updater);, +        waitForMetadataTimeOut = CcrSettings.CCR_WAIT_FOR_METADATA_TIMEOUT.get(settings);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(client, threadPool, clusterService, settingsModule));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using., +    public static final Setting<TimeValue> CCR_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.wait_for_metadata_timeout", TimeValue.timeValueSeconds(60), Property.NodeScope, Property.Dynamic);, +    /**, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using., +     * TODO: Deprecate and remove this setting, +     */, +    private static final Setting<TimeValue> CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.auto_follow.wait_for_metadata_timeout", CCR_WAIT_FOR_METADATA_TIMEOUT, Property.NodeScope, Property.Dynamic);, +                CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT,, +                CCR_WAIT_FOR_METADATA_TIMEOUT);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(CcrSettings.CCR_WAIT_FOR_METADATA_TIMEOUT, updater);, +        waitForMetadataTimeOut = CcrSettings.CCR_WAIT_FOR_METADATA_TIMEOUT.get(settings);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations., +            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date, +            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose, +            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService., +            final IndexMetaData indexMetaData = indexService.getMetaData();, +            final long mappingVersion = indexMetaData.getMappingVersion();, +            final long settingsVersion = indexMetaData.getSettingsVersion();, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(client, threadPool, clusterService, settingsModule));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using., +    public static final Setting<TimeValue> CCR_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.wait_for_metadata_timeout", TimeValue.timeValueSeconds(60), Property.NodeScope, Property.Dynamic);, +    /**, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator should be using., +     * TODO: Deprecate and remove this setting, +     */, +    private static final Setting<TimeValue> CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.auto_follow.wait_for_metadata_timeout", CCR_WAIT_FOR_METADATA_TIMEOUT, Property.NodeScope, Property.Dynamic);, +                CCR_AUTO_FOLLOW_WAIT_FOR_METADATA_TIMEOUT,, +                CCR_WAIT_FOR_METADATA_TIMEOUT);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/AutoFollowCoordinator.java, +        clusterService.getClusterSettings().addSettingsUpdateConsumer(CcrSettings.CCR_WAIT_FOR_METADATA_TIMEOUT, updater);, +        waitForMetadataTimeOut = CcrSettings.CCR_WAIT_FOR_METADATA_TIMEOUT.get(settings);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java, +            // must capture after snapshotting operations to ensure this MUS is at least the highest MUS of any of these operations., +            // must capture IndexMetaData after snapshotting operations to ensure the returned mapping version is at least as up-to-date, +            // as the mapping version that these operations used. Here we must not use IndexMetaData from ClusterService for we expose, +            // a new cluster state to ClusterApplier(s) before exposing it in the ClusterService., +            final IndexMetaData indexMetaData = indexService.getMetaData();, +            final long mappingVersion = indexMetaData.getMappingVersion();, +            final long settingsVersion = indexMetaData.getSettingsVersion();, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardFollowNodeTask.java, +        updateMapping(0L, followerMappingVersion -> {, +    private synchronized void maybeUpdateMapping(long minimumRequiredMappingVersion, Runnable task) {, +            updateMapping(minimumRequiredMappingVersion, mappingVersion -> {, +    private void updateMapping(long minRequiredMappingVersion, LongConsumer handler) {, +        updateMapping(minRequiredMappingVersion, handler, new AtomicInteger(0));, +    private void updateMapping(long minRequiredMappingVersion, LongConsumer handler, AtomicInteger retryCounter) {, +        innerUpdateMapping(minRequiredMappingVersion, handler,, +            e -> handleFailure(e, retryCounter, () -> updateMapping(minRequiredMappingVersion, handler, retryCounter)));, +    protected abstract void innerUpdateMapping(long minRequiredMappingVersion, LongConsumer handler, Consumer<Exception> errorHandler);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/Ccr.java, +        return Collections.singletonList(new ShardFollowTasksExecutor(client, threadPool, clusterService, settingsModule));, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/CcrSettings.java, +     * Dynamic node setting for specifying the wait_for_timeout that the auto follow coordinator and shard follow task should be using., +    public static final Setting<TimeValue> CCR_WAIT_FOR_METADATA_TIMEOUT = Setting.timeSetting(, +        "ccr.wait_for_metadata_timeout", TimeValue.timeValueSeconds(60), Property.NodeScope, Property.Dynamic);, +    /**]