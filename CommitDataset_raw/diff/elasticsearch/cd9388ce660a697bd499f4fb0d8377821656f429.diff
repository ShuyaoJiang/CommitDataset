[+++ b/core/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java, +import org.elasticsearch.common.ParseFieldMatcher;, +, +    public void testFromJsonDeprecatedSyntax() throws IOException {, +        IdsQueryBuilder tempQuery = createTestQueryBuilder();, +        assumeTrue("test requires at least one type", tempQuery.types() != null && tempQuery.types().length > 0);, +, +        String type = tempQuery.types()[0];, +        IdsQueryBuilder testQuery = new IdsQueryBuilder(type);, +, +        //single value type can also be called _type, +        String contentString = "{\n" +, +                "    \"ids\" : {\n" +, +                "        \"_type\" : \"" + type + "\",\n" +, +                "        \"values\" : []\n" +, +                "    }\n" +, +                "}";, +, +        IdsQueryBuilder parsed = (IdsQueryBuilder) parseQuery(contentString, ParseFieldMatcher.EMPTY);, +        assertEquals(testQuery, parsed);, +, +        try {, +            parseQuery(contentString);, +            fail("parse should have failed");, +        } catch(IllegalArgumentException e) {, +            assertEquals("Deprecated field [_type] used, expected [type] instead", e.getMessage());, +        }, +, +        //array of types can also be called type rather than types, +        contentString = "{\n" +, +                "    \"ids\" : {\n" +, +                "        \"types\" : [\"" + type + "\"],\n" +, +                "        \"values\" : []\n" +, +                "    }\n" +, +                "}";, +        parsed = (IdsQueryBuilder) parseQuery(contentString, ParseFieldMatcher.EMPTY);, +        assertEquals(testQuery, parsed);, +        try {, +            parseQuery(contentString);, +            fail("parse should have failed");, +        } catch(IllegalArgumentException e) {, +            assertEquals("Deprecated field [types] used, expected [type] instead", e.getMessage());, +        }, +    }, +++ b/core/src/test/java/org/elasticsearch/index/query/IdsQueryBuilderTests.java, +import org.elasticsearch.common.ParseFieldMatcher;, +, +    public void testFromJsonDeprecatedSyntax() throws IOException {, +        IdsQueryBuilder tempQuery = createTestQueryBuilder();, +        assumeTrue("test requires at least one type", tempQuery.types() != null && tempQuery.types().length > 0);, +, +        String type = tempQuery.types()[0];, +        IdsQueryBuilder testQuery = new IdsQueryBuilder(type);, +, +        //single value type can also be called _type, +        String contentString = "{\n" +, +                "    \"ids\" : {\n" +, +                "        \"_type\" : \"" + type + "\",\n" +, +                "        \"values\" : []\n" +, +                "    }\n" +, +                "}";, +, +        IdsQueryBuilder parsed = (IdsQueryBuilder) parseQuery(contentString, ParseFieldMatcher.EMPTY);, +        assertEquals(testQuery, parsed);, +, +        try {, +            parseQuery(contentString);, +            fail("parse should have failed");, +        } catch(IllegalArgumentException e) {, +            assertEquals("Deprecated field [_type] used, expected [type] instead", e.getMessage());, +        }, +, +        //array of types can also be called type rather than types, +        contentString = "{\n" +, +                "    \"ids\" : {\n" +, +                "        \"types\" : [\"" + type + "\"],\n" +, +                "        \"values\" : []\n" +, +                "    }\n" +, +                "}";, +        parsed = (IdsQueryBuilder) parseQuery(contentString, ParseFieldMatcher.EMPTY);, +        assertEquals(testQuery, parsed);, +        try {, +            parseQuery(contentString);, +            fail("parse should have failed");, +        } catch(IllegalArgumentException e) {, +            assertEquals("Deprecated field [types] used, expected [type] instead", e.getMessage());, +        }, +    }, +++ b/test/framework/src/main/java/org/elasticsearch/test/AbstractQueryTestCase.java, +                assertParsedQuery(new BytesArray(queryAsString), alternateVersion.getValue());]