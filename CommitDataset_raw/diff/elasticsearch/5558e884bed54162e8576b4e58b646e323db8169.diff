[+++ b/src/test/java/org/elasticsearch/blocks/SimpleBlocksTests.java, +import org.elasticsearch.common.settings.Settings;, +        Settings settings = settingsBuilder().put(MetaData.SETTING_READ_ONLY, value).build();, +        client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings).execute().actionGet();, +++ b/src/test/java/org/elasticsearch/blocks/SimpleBlocksTests.java, +import org.elasticsearch.common.settings.Settings;, +        Settings settings = settingsBuilder().put(MetaData.SETTING_READ_ONLY, value).build();, +        client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings).execute().actionGet();, +++ b/src/test/java/org/elasticsearch/test/AbstractIntegrationTest.java, +++ b/src/test/java/org/elasticsearch/blocks/SimpleBlocksTests.java, +import org.elasticsearch.common.settings.Settings;, +        Settings settings = settingsBuilder().put(MetaData.SETTING_READ_ONLY, value).build();, +        client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings).execute().actionGet();, +++ b/src/test/java/org/elasticsearch/test/AbstractIntegrationTest.java, +++ b/src/test/java/org/elasticsearch/ttl/SimpleTTLTests.java, +import org.elasticsearch.test.AbstractIntegrationTest.ClusterScope;, +import org.elasticsearch.test.AbstractIntegrationTest.Scope;, +@ClusterScope(scope=Scope.TEST), +    static private final long PURGE_INTERVAL = 200;, +    , +    @Override, +    protected Settings nodeSettings(int nodeOrdinal) {, +        return settingsBuilder(), +                .put(super.nodeSettings(nodeOrdinal)), +                .put("indices.ttl.interval", PURGE_INTERVAL), +            assertThat(ttl0, greaterThan(-PURGE_INTERVAL));, +            assertThat(providedTTLValue - (currentTime - now), lessThan(0l));, +            assertThat(ttl0, greaterThan(-PURGE_INTERVAL));, +            assertThat(providedTTLValue - (currentTime - now), lessThan(0l));, +            assertThat(ttl0, greaterThan(-PURGE_INTERVAL));, +            assertThat(providedTTLValue - (currentTime - now), lessThan(0l));, +            assertThat(ttl0, greaterThan(-PURGE_INTERVAL));, +            assertThat(providedTTLValue - (currentTime - now), lessThan(0l));, +        long shouldBeExpiredDate = now + providedTTLValue + PURGE_INTERVAL + 2000;]