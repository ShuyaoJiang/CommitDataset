[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/regex/Regex.java, +     * Is the str a simple match pattern., +     */, +    public static boolean isSimpleMatchPattern(String str) {, +        return str.indexOf('*') != -1;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/regex/Regex.java, +     * Is the str a simple match pattern., +     */, +    public static boolean isSimpleMatchPattern(String str) {, +        return str.indexOf('*') != -1;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +import org.elasticsearch.common.collect.*;, +import org.elasticsearch.common.regex.Regex;, +import java.util.Set;, +    public Set<String> simpleMatchToIndexNames(String pattern) {, +        Set<String> fields = Sets.newHashSet();, +        for (FieldMapper fieldMapper : fieldMappers) {, +            if (Regex.simpleMatch(pattern, fieldMapper.names().fullName())) {, +                fields.add(fieldMapper.names().indexName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().indexName())) {, +                fields.add(fieldMapper.names().name());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().name())) {, +                fields.add(fieldMapper.names().indexName());, +            }, +        }, +        return fields;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/regex/Regex.java, +     * Is the str a simple match pattern., +     */, +    public static boolean isSimpleMatchPattern(String str) {, +        return str.indexOf('*') != -1;, +    }, +, +    /**, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/DocumentFieldMappers.java, +import org.elasticsearch.common.collect.*;, +import org.elasticsearch.common.regex.Regex;, +import java.util.Set;, +    public Set<String> simpleMatchToIndexNames(String pattern) {, +        Set<String> fields = Sets.newHashSet();, +        for (FieldMapper fieldMapper : fieldMappers) {, +            if (Regex.simpleMatch(pattern, fieldMapper.names().fullName())) {, +                fields.add(fieldMapper.names().indexName());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().indexName())) {, +                fields.add(fieldMapper.names().name());, +            } else if (Regex.simpleMatch(pattern, fieldMapper.names().name())) {, +                fields.add(fieldMapper.names().indexName());, +            }, +        }, +        return fields;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/MapperService.java, +import org.elasticsearch.common.collect.Sets;, +import org.elasticsearch.common.regex.Regex;, +import java.util.Map;, +import java.util.Set;, +    public Set<String> simpleMatchToIndexNames(String pattern) {, +        int dotIndex = pattern.indexOf('.');, +        if (dotIndex != -1) {, +            String possibleType = pattern.substring(0, dotIndex);, +            DocumentMapper possibleDocMapper = mappers.get(possibleType);, +            if (possibleDocMapper != null) {, +                Set<String> typedFields = Sets.newHashSet();, +                for (String indexName : possibleDocMapper.mappers().simpleMatchToIndexNames(pattern)) {, +                    typedFields.add(possibleType + "." + indexName);, +                }, +                return typedFields;, +            }, +        }, +        Set<String> fields = Sets.newHashSet();, +        for (Map.Entry<String, FieldMappers> entry : fullNameFieldMappers.entrySet()) {, +            if (Regex.simpleMatch(pattern, entry.getKey())) {, +                for (FieldMapper mapper : entry.getValue()) {, +                    fields.add(mapper.names().indexName());, +                }, +            }, +        }, +        for (Map.Entry<String, FieldMappers> entry : indexNameFieldMappers.entrySet()) {, +            if (Regex.simpleMatch(pattern, entry.getKey())) {, +                for (FieldMapper mapper : entry.getValue()) {, +                    fields.add(mapper.names().indexName());, +                }, +            }, +        }, +        for (Map.Entry<String, FieldMappers> entry : nameFieldMappers.entrySet()) {, +            if (Regex.simpleMatch(pattern, entry.getKey())) {, +                for (FieldMapper mapper : entry.getValue()) {, +                    fields.add(mapper.names().indexName());, +                }, +            }, +        }]