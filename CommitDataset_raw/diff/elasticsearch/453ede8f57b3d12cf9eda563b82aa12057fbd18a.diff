[+++ b/.idea/dictionaries/kimchy.xml, +      <w>unicast</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>unicast</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.util.transport.TransportAddress;, +    public DiscoveryNode findByAddress(TransportAddress address) {, +        for (DiscoveryNode node : nodes.values()) {, +            if (node.address().equals(address)) {, +                return node;, +            }, +        }, +        return null;, +    }, +, +++ b/.idea/dictionaries/kimchy.xml, +      <w>unicast</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.util.transport.TransportAddress;, +    public DiscoveryNode findByAddress(TransportAddress address) {, +        for (DiscoveryNode node : nodes.values()) {, +            if (node.address().equals(address)) {, +                return node;, +            }, +        }, +        return null;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            DiscoveryNode masterNode = broadBingTillMasterResolved();, +            DiscoveryNode[] possibleMasters = electMaster.nextPossibleMasters(latestDiscoNodes.nodes().values(), 5);, +    private DiscoveryNode broadBingTillMasterResolved() {, +++ b/.idea/dictionaries/kimchy.xml, +      <w>unicast</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.util.transport.TransportAddress;, +    public DiscoveryNode findByAddress(TransportAddress address) {, +        for (DiscoveryNode node : nodes.values()) {, +            if (node.address().equals(address)) {, +                return node;, +            }, +        }, +        return null;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            DiscoveryNode masterNode = broadBingTillMasterResolved();, +            DiscoveryNode[] possibleMasters = electMaster.nextPossibleMasters(latestDiscoNodes.nodes().values(), 5);, +    private DiscoveryNode broadBingTillMasterResolved() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPing.java, +import org.elasticsearch.cluster.ClusterName;, +import static org.elasticsearch.cluster.ClusterName.*;, +        private ClusterName clusterName;, +, +        private PingResponse() {, +        public PingResponse(DiscoveryNode target, DiscoveryNode master, ClusterName clusterName) {, +            this.clusterName = clusterName;, +        }, +, +        public ClusterName clusterName() {, +            return this.clusterName;, +        public static PingResponse readPingResponse(StreamInput in) throws IOException {, +            PingResponse response = new PingResponse();, +            response.readFrom(in);, +            return response;, +        }, +, +            clusterName = readClusterName(in);, +            clusterName.writeTo(out);, +++ b/.idea/dictionaries/kimchy.xml, +      <w>unicast</w>, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, +import org.elasticsearch.util.transport.TransportAddress;, +    public DiscoveryNode findByAddress(TransportAddress address) {, +        for (DiscoveryNode node : nodes.values()) {, +            if (node.address().equals(address)) {, +                return node;, +            }, +        }, +        return null;, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java, +            DiscoveryNode masterNode = broadBingTillMasterResolved();, +            DiscoveryNode[] possibleMasters = electMaster.nextPossibleMasters(latestDiscoNodes.nodes().values(), 5);, +    private DiscoveryNode broadBingTillMasterResolved() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPing.java, +import org.elasticsearch.cluster.ClusterName;, +import static org.elasticsearch.cluster.ClusterName.*;, +        private ClusterName clusterName;, +, +        private PingResponse() {, +        public PingResponse(DiscoveryNode target, DiscoveryNode master, ClusterName clusterName) {, +            this.clusterName = clusterName;, +        }, +, +        public ClusterName clusterName() {, +            return this.clusterName;, +        public static PingResponse readPingResponse(StreamInput in) throws IOException {, +            PingResponse response = new PingResponse();]