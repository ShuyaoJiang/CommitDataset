[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (indexShard.replicaShards().isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (indexShard.replicaShards().isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> replicaShards() {, +        List<ShardRouting> replicaShards = Lists.newArrayListWithCapacity(2);, +                replicaShards.add(shardRouting);, +        return replicaShards;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (indexShard.replicaShards().isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> replicaShards() {, +        List<ShardRouting> replicaShards = Lists.newArrayListWithCapacity(2);, +                replicaShards.add(shardRouting);, +        return replicaShards;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +            throw new IllegalShardRoutingStateException(this, "Already primary, can't move to replica");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (indexShard.replicaShards().isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> replicaShards() {, +        List<ShardRouting> replicaShards = Lists.newArrayListWithCapacity(2);, +                replicaShards.add(shardRouting);, +        return replicaShards;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +            throw new IllegalShardRoutingStateException(this, "Already primary, can't move to replica");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/strategy/ShardsRoutingStrategy.java, +                // primary and not assigned, go over and find a replica that is assigned and active (since it might be relocating), +                        if (shardEntry.shardId().equals(shardEntry2.shardId()) && shardEntry2.active()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexRoutingTable.java, +                if (indexShard.replicaShards().isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/IndexShardRoutingTable.java, +    public List<ShardRouting> replicaShards() {, +        List<ShardRouting> replicaShards = Lists.newArrayListWithCapacity(2);, +                replicaShards.add(shardRouting);, +        return replicaShards;, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/MutableShardRouting.java, +            throw new IllegalShardRoutingStateException(this, "Already primary, can't move to replica");, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/cluster/routing/strategy/ShardsRoutingStrategy.java, +                // primary and not assigned, go over and find a replica that is assigned and active (since it might be relocating), +                        if (shardEntry.shardId().equals(shardEntry2.shardId()) && shardEntry2.active()) {, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/cluster/routing/strategy/ElectReplicaAsPrimaryDuringRelocationTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.cluster.routing.strategy;, +, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.metadata.MetaData;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.routing.IndexShardRoutingTable;, +import org.elasticsearch.cluster.routing.RoutingNodes;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.transport.DummyTransportAddress;, +import org.testng.annotations.Test;, +, +import static org.elasticsearch.cluster.ClusterState.*;, +import static org.elasticsearch.cluster.metadata.IndexMetaData.*;, +import static org.elasticsearch.cluster.metadata.MetaData.*;, +import static org.elasticsearch.cluster.node.DiscoveryNodes.*;, +import static org.elasticsearch.cluster.routing.RoutingBuilders.*;, +import static org.elasticsearch.cluster.routing.ShardRoutingState.*;, +import static org.hamcrest.MatcherAssert.*;, +import static org.hamcrest.Matchers.*;, +, +/**, + * @author kimchy (shay.banon), + */, +public class ElectReplicaAsPrimaryDuringRelocationTests {, +, +    private final ESLogger logger = Loggers.getLogger(ElectReplicaAsPrimaryDuringRelocationTests.class);, +, +    @Test public void testElectReplicaAsPrimaryDuringRelocation() {, +        ShardsRoutingStrategy strategy = new ShardsRoutingStrategy();, +, +        logger.info("Building initial routing table");, +, +        MetaData metaData = newMetaDataBuilder(), +                .put(newIndexMetaDataBuilder("test").numberOfShards(2).numberOfReplicas(1)), +                .build();, +]