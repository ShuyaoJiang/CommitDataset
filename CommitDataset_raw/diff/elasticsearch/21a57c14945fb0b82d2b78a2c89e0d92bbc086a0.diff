[+++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.search.BooleanQuery;, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +        float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +        return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.search.BooleanQuery;, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +        float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +        return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import java.util.Iterator;, +        List<Query> disjuncts = new ArrayList<>();, +                    disjuncts.add(wrapWithBoost(q, entry.getValue()));, +        if (disjuncts.size() == 1) {, +            return disjuncts.get(0);, +        }, +        return new DisjunctionMaxQuery(disjuncts, 1.0f);, +        List<Query> disjuncts = new ArrayList<>();, +                disjuncts.add(wrapWithBoost(query, entry.getValue()));, +        if (disjuncts.size() == 1) {, +            return disjuncts.get(0);, +        }, +        return new DisjunctionMaxQuery(disjuncts, 1.0f);, +        List<Query> disjuncts = new ArrayList<>();, +                    disjuncts.add(wrapWithBoost(q, boost));, +        if (disjuncts.size() == 1) {, +            return disjuncts.get(0);, +        }, +        return new DisjunctionMaxQuery(disjuncts, 1.0f);, +        List<Query> disjuncts = new ArrayList<>();, +                        disjuncts.add(wrapWithBoost(analyzedQuery, entry.getValue()));, +                    disjuncts.add(wrapWithBoost(query, entry.getValue()));, +        if (disjuncts.size() == 1) {, +            return disjuncts.get(0);, +        }, +        return new DisjunctionMaxQuery(disjuncts, 1.0f);, +++ b/core/src/main/java/org/apache/lucene/queries/BlendedTermQuery.java, +++ b/core/src/main/java/org/apache/lucene/queryparser/classic/MapperQueryParser.java, +import org.apache.lucene.search.BooleanQuery;, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +        float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +        return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +            float tiebreaker = settings.useDisMax() ? settings.tieBreaker() : 1.0f;, +            return new DisjunctionMaxQuery(queries, tiebreaker);, +++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java, +import org.apache.lucene.search.DisjunctionMaxQuery;, +import java.util.Iterator;, +        List<Query> disjuncts = new ArrayList<>();, +                    disjuncts.add(wrapWithBoost(q, entry.getValue()));, +        if (disjuncts.size() == 1) {, +            return disjuncts.get(0);, +        }, +        return new DisjunctionMaxQuery(disjuncts, 1.0f);, +        List<Query> disjuncts = new ArrayList<>();, +                disjuncts.add(wrapWithBoost(query, entry.getValue()));, +        if (disjuncts.size() == 1) {, +            return disjuncts.get(0);, +        }, +        return new DisjunctionMaxQuery(disjuncts, 1.0f);, +        List<Query> disjuncts = new ArrayList<>();, +                    disjuncts.add(wrapWithBoost(q, boost));, +        if (disjuncts.size() == 1) {, +            return disjuncts.get(0);, +        }]