[+++ b/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +                private volatile boolean ack = true;, +                    if (!response.acknowledged()) {, +                        ack = false;, +                    }, +                            listener.onResponse(new DeleteIndexResponse(ack));, +++ b/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +                private volatile boolean ack = true;, +                    if (!response.acknowledged()) {, +                        ack = false;, +                    }, +                            listener.onResponse(new DeleteIndexResponse(ack));, +++ b/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +        transportService.registerHandler(NodeIndexStoreDeletedTransportHandler.ACTION, new NodeIndexStoreDeletedTransportHandler());, +    public void nodeIndexStoreDeleted(final String index, final String nodeId) throws ElasticSearchException {, +        DiscoveryNodes nodes = clusterService.state().nodes();, +        if (nodes.localNodeMaster()) {, +            threadPool.generic().execute(new Runnable() {, +                @Override, +                public void run() {, +                    innerNodeIndexStoreDeleted(index, nodeId);, +                }, +            });, +        } else {, +            transportService.sendRequest(clusterService.state().nodes().masterNode(),, +                    NodeIndexStoreDeletedTransportHandler.ACTION, new NodeIndexStoreDeletedMessage(index, nodeId), EmptyTransportResponseHandler.INSTANCE_SAME);, +        }, +    }, +, +    private void innerNodeIndexStoreDeleted(String index, String nodeId) {, +        for (Listener listener : listeners) {, +            listener.onNodeIndexStoreDeleted(index, nodeId);, +        }, +    }, +, +, +        void onNodeIndexStoreDeleted(String index, String nodeId);, +    private class NodeIndexStoreDeletedTransportHandler extends BaseTransportRequestHandler<NodeIndexStoreDeletedMessage> {, +, +        static final String ACTION = "cluster/nodeIndexStoreDeleted";, +, +        @Override, +        public NodeIndexStoreDeletedMessage newInstance() {, +            return new NodeIndexStoreDeletedMessage();, +        }, +, +        @Override, +        public void messageReceived(NodeIndexStoreDeletedMessage message, TransportChannel channel) throws Exception {, +            innerNodeIndexStoreDeleted(message.index, message.nodeId);, +            channel.sendResponse(TransportResponse.Empty.INSTANCE);, +        }, +, +        @Override, +        public String executor() {, +            return ThreadPool.Names.SAME;, +        }, +    }, +, +, +    static class NodeIndexStoreDeletedMessage extends TransportRequest {, +, +        String index;, +        String nodeId;, +, +        NodeIndexStoreDeletedMessage() {, +        }, +, +        NodeIndexStoreDeletedMessage(String index, String nodeId) {, +            this.index = index;, +            this.nodeId = nodeId;, +        }, +, +        @Override, +        public void writeTo(StreamOutput out) throws IOException {, +            super.writeTo(out);, +            out.writeString(index);, +            out.writeString(nodeId);, +        }, +, +        @Override, +        public void readFrom(StreamInput in) throws IOException {, +            super.readFrom(in);, +            index = in.readString();, +            nodeId = in.readString();, +        }, +    }, +++ b/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java, +                private volatile boolean ack = true;, +                    if (!response.acknowledged()) {, +                        ack = false;, +                    }, +                            listener.onResponse(new DeleteIndexResponse(ack));, +++ b/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +        transportService.registerHandler(NodeIndexStoreDeletedTransportHandler.ACTION, new NodeIndexStoreDeletedTransportHandler());, +    public void nodeIndexStoreDeleted(final String index, final String nodeId) throws ElasticSearchException {, +        DiscoveryNodes nodes = clusterService.state().nodes();, +        if (nodes.localNodeMaster()) {, +            threadPool.generic().execute(new Runnable() {, +                @Override, +                public void run() {]