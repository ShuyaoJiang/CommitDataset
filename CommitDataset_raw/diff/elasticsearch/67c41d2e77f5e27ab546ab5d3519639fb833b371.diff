[+++ b/core/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java, +        if (isCollapseRequest() && searchResponse.getHits().getHits().length > 0) {, +++ b/core/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java, +        if (isCollapseRequest() && searchResponse.getHits().getHits().length > 0) {, +++ b/core/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java, +, +    public void testSkipExpandCollapseNoHits() throws IOException {, +        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);, +        mockSearchPhaseContext.searchTransport = new SearchTransportService(, +            Settings.builder().put("search.remote.connect", false).build(), null) {, +, +            @Override, +            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {, +                fail("expand should not try to send empty multi search request");, +            }, +        };, +        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder(), +            .collapse(new CollapseBuilder("someField").setInnerHits(new InnerHitBuilder().setName("foobarbaz"))));, +, +        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);, +        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);, +        SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);, +        AtomicReference<SearchResponse> reference = new AtomicReference<>();, +        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, response, r ->, +            new SearchPhase("test") {, +                @Override, +                public void run() throws IOException {, +                    reference.set(r);, +                }, +            }, +        );, +        phase.run();, +        mockSearchPhaseContext.assertNoFailure();, +        assertNotNull(reference.get());, +        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());, +    }, +++ b/core/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java, +        if (isCollapseRequest() && searchResponse.getHits().getHits().length > 0) {, +++ b/core/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java, +, +    public void testSkipExpandCollapseNoHits() throws IOException {, +        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);, +        mockSearchPhaseContext.searchTransport = new SearchTransportService(, +            Settings.builder().put("search.remote.connect", false).build(), null) {, +, +            @Override, +            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {, +                fail("expand should not try to send empty multi search request");, +            }, +        };, +        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder(), +            .collapse(new CollapseBuilder("someField").setInnerHits(new InnerHitBuilder().setName("foobarbaz"))));, +, +        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);, +        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);, +        SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);, +        AtomicReference<SearchResponse> reference = new AtomicReference<>();, +        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, response, r ->, +            new SearchPhase("test") {, +                @Override, +                public void run() throws IOException {, +                    reference.set(r);, +                }, +            }, +        );, +        phase.run();, +        mockSearchPhaseContext.assertNoFailure();, +        assertNotNull(reference.get());, +        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());, +    }, +++ b/rest-api-spec/src/main/resources/rest-api-spec/test/search/110_field_collapsing.yml, +, +---, +"no hits and inner_hits":, +, +  - skip:, +      version: " - 5.4.0", +      reason:  "bug fixed in 5.4.1", +, +  - do:, +      search:, +        index: test, +        type:  test, +        body:, +          size: 0, +          collapse: { field: numeric_group, inner_hits: { name: sub_hits, size: 1} }, +          sort: [{ sort: desc }], +, +  - match: { hits.total: 6 }, +  - length: { hits.hits: 0 }]