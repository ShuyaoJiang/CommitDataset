[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.util.ThreadLocals;, +, +        ThreadLocals.clearReferencesThreadLocals();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.util.ThreadLocals;, +, +        ThreadLocals.clearReferencesThreadLocals();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>>() {, +        @Override protected ThreadLocals.CleanableValue<JsonParseContext> initialValue() {, +            return new ThreadLocals.CleanableValue<JsonParseContext>(new JsonParseContext(JsonDocumentMapper.this, new JsonPath(0)));, +        JsonParseContext jsonContext = cache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.util.ThreadLocals;, +, +        ThreadLocals.clearReferencesThreadLocals();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>>() {, +        @Override protected ThreadLocals.CleanableValue<JsonParseContext> initialValue() {, +            return new ThreadLocals.CleanableValue<JsonParseContext>(new JsonParseContext(JsonDocumentMapper.this, new JsonPath(0)));, +        JsonParseContext jsonContext = cache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private static final ThreadLocal<ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>> cachedStreams = new ThreadLocal<ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>>() {, +        @Override protected ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>> initialValue() {, +            return new ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>(new TIntObjectHashMap<Deque<CachedNumericTokenStream>>());, +        Deque<CachedNumericTokenStream> deque = cachedStreams.get().get().get(precisionStep);, +            cachedStreams.get().get().put(precisionStep, deque);, +            cachedStreams.get().get().get(precisionStep).add(this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.util.ThreadLocals;, +, +        ThreadLocals.clearReferencesThreadLocals();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>>() {, +        @Override protected ThreadLocals.CleanableValue<JsonParseContext> initialValue() {, +            return new ThreadLocals.CleanableValue<JsonParseContext>(new JsonParseContext(JsonDocumentMapper.this, new JsonPath(0)));, +        JsonParseContext jsonContext = cache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private static final ThreadLocal<ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>> cachedStreams = new ThreadLocal<ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>>() {, +        @Override protected ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>> initialValue() {, +            return new ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>(new TIntObjectHashMap<Deque<CachedNumericTokenStream>>());, +        Deque<CachedNumericTokenStream> deque = cachedStreams.get().get().get(precisionStep);, +            cachedStreams.get().get().put(precisionStep, deque);, +            cachedStreams.get().get().get(precisionStep).add(this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/JsonIndexQueryParser.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<JsonQueryParseContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<JsonQueryParseContext>>() {, +        @Override protected ThreadLocals.CleanableValue<JsonQueryParseContext> initialValue() {, +            return new ThreadLocals.CleanableValue<JsonQueryParseContext>(new JsonQueryParseContext(index, queryParserRegistry, mapperService, filterCache));, +            return parse(cache.get().get(), jp);, +            return parse(cache.get().get(), jp);, +            return parse(cache.get().get(), jp);, +            return parse(cache.get().get(), jsonParser);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.util.ThreadLocals;, +, +        ThreadLocals.clearReferencesThreadLocals();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>>() {, +        @Override protected ThreadLocals.CleanableValue<JsonParseContext> initialValue() {, +            return new ThreadLocals.CleanableValue<JsonParseContext>(new JsonParseContext(JsonDocumentMapper.this, new JsonPath(0)));, +        JsonParseContext jsonContext = cache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonNumberFieldMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private static final ThreadLocal<ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>> cachedStreams = new ThreadLocal<ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>>() {, +        @Override protected ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>> initialValue() {, +            return new ThreadLocals.CleanableValue<TIntObjectHashMap<Deque<CachedNumericTokenStream>>>(new TIntObjectHashMap<Deque<CachedNumericTokenStream>>());, +        Deque<CachedNumericTokenStream> deque = cachedStreams.get().get().get(precisionStep);, +            cachedStreams.get().get().put(precisionStep, deque);, +            cachedStreams.get().get().get(precisionStep).add(this);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/json/JsonIndexQueryParser.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<JsonQueryParseContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<JsonQueryParseContext>>() {, +        @Override protected ThreadLocals.CleanableValue<JsonQueryParseContext> initialValue() {, +            return new ThreadLocals.CleanableValue<JsonQueryParseContext>(new JsonQueryParseContext(index, queryParserRegistry, mapperService, filterCache));, +            return parse(cache.get().get(), jp);, +            return parse(cache.get().get(), jp);, +            return parse(cache.get().get(), jp);, +            return parse(cache.get().get(), jsonParser);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/rest/JsonRestResponse.java, +import org.elasticsearch.util.ThreadLocals;, +    private static ThreadLocal<ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result>> prefixCache = new ThreadLocal<ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result>>() {, +        @Override protected ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result> initialValue() {, +            return new ThreadLocals.CleanableValue<UnicodeUtil.UTF8Result>(new UnicodeUtil.UTF8Result());, +        UnicodeUtil.UTF8Result result = prefixCache.get().get();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.util.ThreadLocals;, +, +        ThreadLocals.clearReferencesThreadLocals();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDocumentMapper.java, +import org.elasticsearch.util.ThreadLocals;, +    private ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>> cache = new ThreadLocal<ThreadLocals.CleanableValue<JsonParseContext>>() {, +        @Override protected ThreadLocals.CleanableValue<JsonParseContext> initialValue() {]