[+++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcAssert.java, +                    expectedObject = getTime(expected, column);, +                    actualObject = getTime(actual, column);, +                    assertEquals(expectedObject, actualObject);, +                else if (type == Types.DOUBLE) {, +, +    private static Object getTime(ResultSet rs, int column) throws SQLException {, +        return TestUtils.UTC_FORMATTER.format(Instant.ofEpochMilli(rs.getTime(column).getTime()));, +    }, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcAssert.java, +                    expectedObject = getTime(expected, column);, +                    actualObject = getTime(actual, column);, +                    assertEquals(expectedObject, actualObject);, +                else if (type == Types.DOUBLE) {, +, +    private static Object getTime(ResultSet rs, int column) throws SQLException {, +        return TestUtils.UTC_FORMATTER.format(Instant.ofEpochMilli(rs.getTime(column).getTime()));, +    }, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcHttpServer.java, +        super(client, new SqlProtoHandler(client), "/_jdbc");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcAssert.java, +                    expectedObject = getTime(expected, column);, +                    actualObject = getTime(actual, column);, +                    assertEquals(expectedObject, actualObject);, +                else if (type == Types.DOUBLE) {, +, +    private static Object getTime(ResultSet rs, int column) throws SQLException {, +        return TestUtils.UTC_FORMATTER.format(Instant.ofEpochMilli(rs.getTime(column).getTime()));, +    }, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcHttpServer.java, +        super(client, new SqlProtoHandler(client), "/_jdbc");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/SpecBaseIntegrationTestCase.java, +    //        System.out.println("Loaded dataset in ES");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcAssert.java, +                    expectedObject = getTime(expected, column);, +                    actualObject = getTime(actual, column);, +                    assertEquals(expectedObject, actualObject);, +                else if (type == Types.DOUBLE) {, +, +    private static Object getTime(ResultSet rs, int column) throws SQLException {, +        return TestUtils.UTC_FORMATTER.format(Instant.ofEpochMilli(rs.getTime(column).getTime()));, +    }, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcHttpServer.java, +        super(client, new SqlProtoHandler(client), "/_jdbc");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/SpecBaseIntegrationTestCase.java, +    //        System.out.println("Loaded dataset in ES");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/TestUtils.java, +            createIndex.startObject("emp");, +            {, +            StringBuilder insert = new StringBuilder("INSERT INTO \"test_emp.emp\" (");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcAssert.java, +                    expectedObject = getTime(expected, column);, +                    actualObject = getTime(actual, column);, +                    assertEquals(expectedObject, actualObject);, +                else if (type == Types.DOUBLE) {, +, +    private static Object getTime(ResultSet rs, int column) throws SQLException {, +        return TestUtils.UTC_FORMATTER.format(Instant.ofEpochMilli(rs.getTime(column).getTime()));, +    }, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcHttpServer.java, +        super(client, new SqlProtoHandler(client), "/_jdbc");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/SpecBaseIntegrationTestCase.java, +    //        System.out.println("Loaded dataset in ES");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/TestUtils.java, +            createIndex.startObject("emp");, +            {, +            StringBuilder insert = new StringBuilder("INSERT INTO \"test_emp.emp\" (");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/h2/SqlSpecIntegrationTest.java, +    public SqlSpecIntegrationTest(String groupName, String testName, Integer lineNumber, Path source, String query) {, +            //throw reworkException(new RuntimeException(errorMessage(th)));, +            throw th;, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcAssert.java, +                    expectedObject = getTime(expected, column);, +                    actualObject = getTime(actual, column);, +                    assertEquals(expectedObject, actualObject);, +                else if (type == Types.DOUBLE) {, +, +    private static Object getTime(ResultSet rs, int column) throws SQLException {, +        return TestUtils.UTC_FORMATTER.format(Instant.ofEpochMilli(rs.getTime(column).getTime()));, +    }, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcHttpServer.java, +        super(client, new SqlProtoHandler(client), "/_jdbc");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/SpecBaseIntegrationTestCase.java, +    //        System.out.println("Loaded dataset in ES");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/TestUtils.java, +            createIndex.startObject("emp");, +            {, +            StringBuilder insert = new StringBuilder("INSERT INTO \"test_emp.emp\" (");, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/h2/SqlSpecIntegrationTest.java, +    public SqlSpecIntegrationTest(String groupName, String testName, Integer lineNumber, Path source, String query) {, +            //throw reworkException(new RuntimeException(errorMessage(th)));, +            throw th;, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/planner/QueryTranslator.java, +                    agg = new GroupByDateAgg(aggId, AggPath.bucketValue(propertyPath), nameOf(exp), dtf.interval(), dtf.timeZone());, +++ b/sql/jdbc/src/test/java/org/elasticsearch/xpack/sql/jdbc/framework/JdbcAssert.java, +                    expectedObject = getTime(expected, column);, +                    actualObject = getTime(actual, column);, +                    assertEquals(expectedObject, actualObject);, +                else if (type == Types.DOUBLE) {, +]