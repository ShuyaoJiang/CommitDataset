[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.fetch.explain.ExplainFetchSubPhase;, +import org.elasticsearch.search.fetch.matchedfilters.MatchedFiltersFetchSubPhase;, +import org.elasticsearch.search.fetch.script.ScriptFieldsFetchSubPhase;, +import org.elasticsearch.search.fetch.version.VersionFetchSubPhase;, +        bind(ExplainFetchSubPhase.class).asEagerSingleton();, +        bind(ScriptFieldsFetchSubPhase.class).asEagerSingleton();, +        bind(VersionFetchSubPhase.class).asEagerSingleton();, +        bind(MatchedFiltersFetchSubPhase.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.fetch.explain.ExplainFetchSubPhase;, +import org.elasticsearch.search.fetch.matchedfilters.MatchedFiltersFetchSubPhase;, +import org.elasticsearch.search.fetch.script.ScriptFieldsFetchSubPhase;, +import org.elasticsearch.search.fetch.version.VersionFetchSubPhase;, +        bind(ExplainFetchSubPhase.class).asEagerSingleton();, +        bind(ScriptFieldsFetchSubPhase.class).asEagerSingleton();, +        bind(VersionFetchSubPhase.class).asEagerSingleton();, +        bind(MatchedFiltersFetchSubPhase.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +import org.elasticsearch.search.fetch.explain.ExplainFetchSubPhase;, +import org.elasticsearch.search.fetch.matchedfilters.MatchedFiltersFetchSubPhase;, +import org.elasticsearch.search.fetch.script.ScriptFieldsFetchSubPhase;, +import org.elasticsearch.search.fetch.version.VersionFetchSubPhase;, +    private final FetchSubPhase[] fetchSubPhases;, +    @Inject public FetchPhase(HighlightPhase highlightPhase, ScriptFieldsFetchSubPhase scriptFieldsPhase,, +                              MatchedFiltersFetchSubPhase matchFiltersPhase, ExplainFetchSubPhase explainPhase, VersionFetchSubPhase versionPhase) {, +        this.fetchSubPhases = new FetchSubPhase[]{scriptFieldsPhase, matchFiltersPhase, explainPhase, highlightPhase, versionPhase};, +        for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +            parseElements.putAll(fetchSubPhase.parseElements());, +            for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +                FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();, +                if (fetchSubPhase.hitExecutionNeeded(context)) {, +                    fetchSubPhase.hitExecute(context, hitContext);, +, +        for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +            if (fetchSubPhase.hitsExecutionNeeded(context)) {, +                fetchSubPhase.hitsExecute(context, hits);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.fetch.explain.ExplainFetchSubPhase;, +import org.elasticsearch.search.fetch.matchedfilters.MatchedFiltersFetchSubPhase;, +import org.elasticsearch.search.fetch.script.ScriptFieldsFetchSubPhase;, +import org.elasticsearch.search.fetch.version.VersionFetchSubPhase;, +        bind(ExplainFetchSubPhase.class).asEagerSingleton();, +        bind(ScriptFieldsFetchSubPhase.class).asEagerSingleton();, +        bind(VersionFetchSubPhase.class).asEagerSingleton();, +        bind(MatchedFiltersFetchSubPhase.class).asEagerSingleton();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchPhase.java, +import org.elasticsearch.search.fetch.explain.ExplainFetchSubPhase;, +import org.elasticsearch.search.fetch.matchedfilters.MatchedFiltersFetchSubPhase;, +import org.elasticsearch.search.fetch.script.ScriptFieldsFetchSubPhase;, +import org.elasticsearch.search.fetch.version.VersionFetchSubPhase;, +    private final FetchSubPhase[] fetchSubPhases;, +    @Inject public FetchPhase(HighlightPhase highlightPhase, ScriptFieldsFetchSubPhase scriptFieldsPhase,, +                              MatchedFiltersFetchSubPhase matchFiltersPhase, ExplainFetchSubPhase explainPhase, VersionFetchSubPhase versionPhase) {, +        this.fetchSubPhases = new FetchSubPhase[]{scriptFieldsPhase, matchFiltersPhase, explainPhase, highlightPhase, versionPhase};, +        for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +            parseElements.putAll(fetchSubPhase.parseElements());, +            for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +                FetchSubPhase.HitContext hitContext = new FetchSubPhase.HitContext();, +                if (fetchSubPhase.hitExecutionNeeded(context)) {, +                    fetchSubPhase.hitExecute(context, hitContext);, +, +        for (FetchSubPhase fetchSubPhase : fetchSubPhases) {, +            if (fetchSubPhase.hitsExecutionNeeded(context)) {, +                fetchSubPhase.hitsExecute(context, hits);, +            }, +        }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/fetch/FetchSubPhase.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.search.fetch;, +, +import org.apache.lucene.document.Document;, +import org.apache.lucene.index.IndexReader;, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.search.SearchParseElement;, +import org.elasticsearch.search.internal.InternalSearchHit;, +import org.elasticsearch.search.internal.SearchContext;, +]