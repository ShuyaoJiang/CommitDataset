[+++ b/docs/reference/rest-api/info.asciidoc, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/plugins/store-smb/src/main/java/org/elasticsearch/plugin/store/smb/SMBStorePlugin.java, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.plugins.IndexStorePlugin;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.Function;, +, +public class SMBStorePlugin extends Plugin implements IndexStorePlugin {, +    public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {, +        final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories = new HashMap<>(2);, +        indexStoreFactories.put("smb_mmap_fs", SmbMmapFsIndexStore::new);, +        indexStoreFactories.put("smb_simple_fs", SmbSimpleFsIndexStore::new);, +        return Collections.unmodifiableMap(indexStoreFactories);, +, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/plugins/store-smb/src/main/java/org/elasticsearch/plugin/store/smb/SMBStorePlugin.java, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.plugins.IndexStorePlugin;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.Function;, +, +public class SMBStorePlugin extends Plugin implements IndexStorePlugin {, +    public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {, +        final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories = new HashMap<>(2);, +        indexStoreFactories.put("smb_mmap_fs", SmbMmapFsIndexStore::new);, +        indexStoreFactories.put("smb_simple_fs", SmbSimpleFsIndexStore::new);, +        return Collections.unmodifiableMap(indexStoreFactories);, +, +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.plugins.IndexStorePlugin;, + *      <li>{@link IndexStore} - Custom {@link IndexStore} instances can be registered via {@link IndexStorePlugin}</li>, +    private final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories;, +     * @param indexStoreFactories the available store types, +    public IndexModule(, +            final IndexSettings indexSettings,, +            final AnalysisRegistry analysisRegistry,, +            final EngineFactory engineFactory,, +            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories) {, +        this.indexStoreFactories = Collections.unmodifiableMap(indexStoreFactories);, +            Function<IndexSettings, IndexStore> factory = indexStoreFactories.get(storeType);, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/plugins/store-smb/src/main/java/org/elasticsearch/plugin/store/smb/SMBStorePlugin.java, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.plugins.IndexStorePlugin;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.Function;, +, +public class SMBStorePlugin extends Plugin implements IndexStorePlugin {, +    public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {, +        final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories = new HashMap<>(2);, +        indexStoreFactories.put("smb_mmap_fs", SmbMmapFsIndexStore::new);, +        indexStoreFactories.put("smb_simple_fs", SmbSimpleFsIndexStore::new);, +        return Collections.unmodifiableMap(indexStoreFactories);, +, +++ b/server/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.plugins.IndexStorePlugin;, + *      <li>{@link IndexStore} - Custom {@link IndexStore} instances can be registered via {@link IndexStorePlugin}</li>, +    private final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories;, +     * @param indexStoreFactories the available store types, +    public IndexModule(, +            final IndexSettings indexSettings,, +            final AnalysisRegistry analysisRegistry,, +            final EngineFactory engineFactory,, +            final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories) {, +        this.indexStoreFactories = Collections.unmodifiableMap(indexStoreFactories);, +            Function<IndexSettings, IndexStore> factory = indexStoreFactories.get(storeType);, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +import org.elasticsearch.index.store.IndexStore;, +    private final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories;, +                          Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders,, +                          Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories) {, +        this.indexStoreFactories = indexStoreFactories;, +        final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry, getEngineFactory(idxSettings), indexStoreFactories);, +        final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry, getEngineFactory(idxSettings), indexStoreFactories);, +++ b/docs/reference/rest-api/info.asciidoc, +++ b/plugins/store-smb/src/main/java/org/elasticsearch/plugin/store/smb/SMBStorePlugin.java, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.store.IndexStore;, +import org.elasticsearch.plugins.IndexStorePlugin;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.function.Function;, +, +public class SMBStorePlugin extends Plugin implements IndexStorePlugin {, +    public Map<String, Function<IndexSettings, IndexStore>> getIndexStoreFactories() {, +        final Map<String, Function<IndexSettings, IndexStore>> indexStoreFactories = new HashMap<>(2);, +        indexStoreFactories.put("smb_mmap_fs", SmbMmapFsIndexStore::new);, +        indexStoreFactories.put("smb_simple_fs", SmbSimpleFsIndexStore::new);, +        return Collections.unmodifiableMap(indexStoreFactories);]