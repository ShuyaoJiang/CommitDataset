[+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.predicate.IsNotNullProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.BinaryLogicProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.NotProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.operator.comparison.InProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.regex.RegexProcessor;, +        // logical, +        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new));, +        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new));, +        // null, +        entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new));, +        // comparators, +        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new));, +        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new));, +        // regex, +        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new));, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.predicate.IsNotNullProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.BinaryLogicProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.NotProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.operator.comparison.InProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.regex.RegexProcessor;, +        // logical, +        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new));, +        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new));, +        // null, +        entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new));, +        // comparators, +        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new));, +        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new));, +        // regex, +        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new));, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/IsNotNullProcessor.java, +import org.elasticsearch.common.io.stream.StreamInput;, +    public IsNotNullProcessor(StreamInput in) throws IOException {}, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.predicate.IsNotNullProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.BinaryLogicProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.NotProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.operator.comparison.InProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.regex.RegexProcessor;, +        // logical, +        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new));, +        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new));, +        // null, +        entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new));, +        // comparators, +        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new));, +        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new));, +        // regex, +        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new));, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/IsNotNullProcessor.java, +import org.elasticsearch.common.io.stream.StreamInput;, +    public IsNotNullProcessor(StreamInput in) throws IOException {}, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/logical/NotProcessor.java, +import org.elasticsearch.common.io.stream.StreamInput;, +    public NotProcessor(StreamInput in) throws IOException {}, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/Processors.java, +import org.elasticsearch.xpack.sql.expression.predicate.IsNotNullProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.BinaryLogicProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.logical.NotProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.operator.comparison.InProcessor;, +import org.elasticsearch.xpack.sql.expression.predicate.regex.RegexProcessor;, +        // logical, +        entries.add(new Entry(Processor.class, BinaryLogicProcessor.NAME, BinaryLogicProcessor::new));, +        entries.add(new Entry(Processor.class, NotProcessor.NAME, NotProcessor::new));, +        // null, +        entries.add(new Entry(Processor.class, IsNotNullProcessor.NAME, IsNotNullProcessor::new));, +        // comparators, +        entries.add(new Entry(Processor.class, BinaryComparisonProcessor.NAME, BinaryComparisonProcessor::new));, +        entries.add(new Entry(Processor.class, InProcessor.NAME, InProcessor::new));, +        // regex, +        entries.add(new Entry(Processor.class, RegexProcessor.NAME, RegexProcessor::new));, +, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/IsNotNullProcessor.java, +import org.elasticsearch.common.io.stream.StreamInput;, +    public IsNotNullProcessor(StreamInput in) throws IOException {}, +, +++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/predicate/logical/NotProcessor.java, +import org.elasticsearch.common.io.stream.StreamInput;, +    public NotProcessor(StreamInput in) throws IOException {}, +, +++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/ProcessorTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.sql.expression;]