[+++ b/config/elasticsearch.yml, +++ b/config/elasticsearch.yml, +++ /dev/null, +++ b/config/elasticsearch.yml, +++ /dev/null, +++ b/pom.xml, +                                <java.security.policy>${basedir}/src/main/resources/org/elasticsearch/bootstrap/security.policy</java.security.policy>, +++ b/config/elasticsearch.yml, +++ /dev/null, +++ b/pom.xml, +                                <java.security.policy>${basedir}/src/main/resources/org/elasticsearch/bootstrap/security.policy</java.security.policy>, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        setupSecurity(tuple.v1(), tuple.v2());, +    private void setupSecurity(Settings settings, Environment environment) throws Exception {, +        if (settings.getAsBoolean("security.manager.enabled", true)) {, +            Security.configure(environment);, +        }, +    }, +, +++ b/config/elasticsearch.yml, +++ /dev/null, +++ b/pom.xml, +                                <java.security.policy>${basedir}/src/main/resources/org/elasticsearch/bootstrap/security.policy</java.security.policy>, +++ b/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +        setupSecurity(tuple.v1(), tuple.v2());, +    private void setupSecurity(Settings settings, Environment environment) throws Exception {, +        if (settings.getAsBoolean("security.manager.enabled", true)) {, +            Security.configure(environment);, +        }, +    }, +, +++ b/src/main/java/org/elasticsearch/bootstrap/Security.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.bootstrap;, +, +import com.google.common.io.ByteStreams;, +, +import org.apache.lucene.util.IOUtils;, +import org.apache.lucene.util.StringHelper;, +import org.elasticsearch.env.Environment;, +, +import java.io.BufferedInputStream;, +import java.io.BufferedOutputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.io.OutputStreamWriter;, +import java.io.Writer;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.nio.file.NoSuchFileException;, +import java.nio.file.Path;, +import java.util.HashSet;, +import java.util.Set;, +, +/** , + * Initializes securitymanager with necessary permissions., + * <p>, + * We use a template file (the one we test with), and add additional , + * permissions based on the environment (data paths, etc), + */, +class Security {, +    , +    /** template policy file, the one used in tests */, +    static final String POLICY_RESOURCE = "security.policy";, +    , +    /** , +     * Initializes securitymanager for the environment, +     * Can only happen once!, +     */, +    static void configure(Environment environment) throws IOException {, +        // init lucene random seed. it will use /dev/urandom where available., +        StringHelper.randomId();, +        InputStream config = Security.class.getResourceAsStream(POLICY_RESOURCE);, +        if (config == null) {, +            throw new NoSuchFileException(POLICY_RESOURCE);, +        }, +        Path newConfig = processTemplate(config, environment);, +        System.setProperty("java.security.policy", newConfig.toString());, +        System.setSecurityManager(new SecurityManager());, +        IOUtils.deleteFilesIgnoringExceptions(newConfig); // TODO: maybe log something if it fails?]