[+++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +import org.elasticsearch.index.IndexSettings;, +    public void nodeIndexDeleted(final ClusterState clusterState, final String index, final IndexSettings indexSettings, final String nodeId) {, +    private void lockIndexAndAck(String index, DiscoveryNodes nodes, String nodeId, ClusterState clusterState, IndexSettings indexSettings) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +import org.elasticsearch.index.IndexSettings;, +    public void nodeIndexDeleted(final ClusterState clusterState, final String index, final IndexSettings indexSettings, final String nodeId) {, +    private void lockIndexAndAck(String index, DiscoveryNodes nodes, String nodeId, ClusterState clusterState, IndexSettings indexSettings) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.apache.lucene.store.*;, +import org.elasticsearch.index.IndexSettings;, +import java.nio.file.*;, +import java.util.*;, +    public void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(IndexSettings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, IndexSettings indexSettings) throws IOException {, +        if (indexSettings.hasCustomDataPath()) {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, IndexSettings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, IndexSettings indexSettings) throws IOException {, +        if (indexSettings.hasCustomDataPath()) {, +    public List<ShardLock> lockAllForIndex(Index index, IndexSettings settings, long lockTimeoutMS) throws IOException {, +        final int numShards = settings.getNumberOfShards();, +        if (numShards <= 0) {, +     * @see IndexSettings#hasCustomDataPath(), +     * @see #resolveCustomLocation(IndexSettings, ShardId), +    private Path resolveCustomLocation(IndexSettings indexSettings) {, +        String customDataDir = indexSettings.customDataPath();, +    private Path resolveCustomLocation(IndexSettings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(IndexSettings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +import org.elasticsearch.index.IndexSettings;, +    public void nodeIndexDeleted(final ClusterState clusterState, final String index, final IndexSettings indexSettings, final String nodeId) {, +    private void lockIndexAndAck(String index, DiscoveryNodes nodes, String nodeId, ClusterState clusterState, IndexSettings indexSettings) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.apache.lucene.store.*;, +import org.elasticsearch.index.IndexSettings;, +import java.nio.file.*;, +import java.util.*;, +    public void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(IndexSettings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, IndexSettings indexSettings) throws IOException {, +        if (indexSettings.hasCustomDataPath()) {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, IndexSettings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, IndexSettings indexSettings) throws IOException {, +        if (indexSettings.hasCustomDataPath()) {, +    public List<ShardLock> lockAllForIndex(Index index, IndexSettings settings, long lockTimeoutMS) throws IOException {, +        final int numShards = settings.getNumberOfShards();, +        if (numShards <= 0) {, +     * @see IndexSettings#hasCustomDataPath(), +     * @see #resolveCustomLocation(IndexSettings, ShardId), +    private Path resolveCustomLocation(IndexSettings indexSettings) {, +        String customDataDir = indexSettings.customDataPath();, +    private Path resolveCustomLocation(IndexSettings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(IndexSettings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.indices.AliasFilterParsingException;, +import org.elasticsearch.indices.InvalidAliasNameException;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +                        eventListener.beforeIndexShardDeleted(lock.getShardId(), indexSettings.getSettings());, +                        eventListener.afterIndexShardDeleted(lock.getShardId(), indexSettings.getSettings());, +        void deleteShardStore(String reason, ShardLock lock, IndexSettings indexSettings) throws IOException;, +, +        void addPendingDelete(ShardId shardId, IndexSettings indexSettings);, +++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java, +import org.elasticsearch.index.IndexSettings;, +    public void nodeIndexDeleted(final ClusterState clusterState, final String index, final IndexSettings indexSettings, final String nodeId) {, +    private void lockIndexAndAck(String index, DiscoveryNodes nodes, String nodeId, ClusterState clusterState, IndexSettings indexSettings) throws IOException {, +++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java, +import org.apache.lucene.store.*;, +import org.elasticsearch.index.IndexSettings;, +import java.nio.file.*;, +import java.util.*;, +    public void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings) throws IOException {, +    public static void acquireFSLockForPaths(IndexSettings indexSettings, Path... shardPaths) throws IOException {, +    public void deleteShardDirectoryUnderLock(ShardLock lock, IndexSettings indexSettings) throws IOException {, +        if (indexSettings.hasCustomDataPath()) {, +    public void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, IndexSettings indexSettings) throws IOException {, +    public void deleteIndexDirectoryUnderLock(Index index, IndexSettings indexSettings) throws IOException {, +        if (indexSettings.hasCustomDataPath()) {, +    public List<ShardLock> lockAllForIndex(Index index, IndexSettings settings, long lockTimeoutMS) throws IOException {, +        final int numShards = settings.getNumberOfShards();, +        if (numShards <= 0) {, +     * @see IndexSettings#hasCustomDataPath(), +     * @see #resolveCustomLocation(IndexSettings, ShardId), +    private Path resolveCustomLocation(IndexSettings indexSettings) {, +        String customDataDir = indexSettings.customDataPath();, +    private Path resolveCustomLocation(IndexSettings indexSettings, final String indexName) {, +    public Path resolveCustomLocation(IndexSettings indexSettings, final ShardId shardId) {, +++ b/core/src/main/java/org/elasticsearch/index/IndexService.java, +import org.elasticsearch.indices.AliasFilterParsingException;, +import org.elasticsearch.indices.InvalidAliasNameException;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.Set;, +                        eventListener.beforeIndexShardDeleted(lock.getShardId(), indexSettings.getSettings());, +                        eventListener.afterIndexShardDeleted(lock.getShardId(), indexSettings.getSettings());]