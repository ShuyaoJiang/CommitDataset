[+++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFunction.java, +import org.joda.time.DateTime;, +        DateTime folded = (DateTime) field().fold();, +, +            Instant.ofEpochMilli(folded.getMillis()), ZoneId.of(timeZone.getID()));, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFunction.java, +import org.joda.time.DateTime;, +        DateTime folded = (DateTime) field().fold();, +, +            Instant.ofEpochMilli(folded.getMillis()), ZoneId.of(timeZone.getID()));, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataTypeConversion.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.ReadableInstant;, +import static org.elasticsearch.xpack.sql.type.DataType.BOOLEAN;, +import static org.elasticsearch.xpack.sql.type.DataType.DATE;, +import static org.elasticsearch.xpack.sql.type.DataType.LONG;, +import static org.elasticsearch.xpack.sql.type.DataType.NULL;, +        if (from == to || from == NULL) {, +        if (from == DATE) {, +        if (from == BOOLEAN) {, +        if (from == DATE) {, +            return Conversion.DATE_TO_LONG;, +        }, +        if (from == BOOLEAN) {, +        if (from == DATE) {, +            return Conversion.DATE_TO_INT;, +        }, +        if (from == BOOLEAN) {, +        if (from == DATE) {, +            return Conversion.DATE_TO_SHORT;, +        }, +        if (from == BOOLEAN) {, +        if (from == DATE) {, +            return Conversion.DATE_TO_BYTE;, +        }, +        if (from == BOOLEAN) {, +        if (from == DATE) {, +            return Conversion.DATE_TO_FLOAT;, +        }, +        if (from == BOOLEAN) {, +        if (from == DATE) {, +            return Conversion.DATE_TO_DOUBLE;, +        }, +            return Conversion.RATIONAL_TO_DATE;, +            return Conversion.INTEGER_TO_DATE;, +        if (from == BOOLEAN) {, +            return Conversion.BOOL_TO_DATE; // We emit an int here which is ok because of Java's casting rules, +        if (from == DATE) {, +            return Conversion.DATE_TO_BOOLEAN;, +        }, +        , +, +        DATE_TO_LONG(fromDate(value -> value)),, +, +        DATE_TO_INT(fromDate(DataTypeConversion::safeToInt)),, +, +        DATE_TO_SHORT(fromDate(DataTypeConversion::safeToShort)),, +, +        DATE_TO_BYTE(fromDate(DataTypeConversion::safeToByte)),, +, +        DATE_TO_FLOAT(fromDate(value -> (float) value)),, +, +        RATIONAL_TO_DOUBLE(fromDouble(Double::valueOf)),, +        DATE_TO_DOUBLE(fromDate(Double::valueOf)),, +, +        RATIONAL_TO_DATE(toDate(RATIONAL_TO_LONG)),, +        INTEGER_TO_DATE(toDate(INTEGER_TO_LONG)),, +        BOOL_TO_DATE(toDate(BOOL_TO_INT)),, +        STRING_TO_DATE(fromString(UTC_DATE_FORMATTER::parseDateTime, "Date")),, +, +        STRING_TO_BOOLEAN(fromString(DataTypeConversion::convertToBoolean, "Boolean")),, +        DATE_TO_BOOLEAN(fromDate(value -> value != 0));, +        private static Function<Object, Object> fromDate(Function<Long, Object> converter) {, +            return l -> ((ReadableInstant) l).getMillis();, +        }, +, +        private static Function<Object, Object> toDate(Conversion conversion) {, +            return l -> new DateTime(((Number) conversion.convert(l)).longValue(), DateTimeZone.UTC);, +        }, +, +        return dataType.isInteger ? dataType : LONG;, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFunction.java, +import org.joda.time.DateTime;, +        DateTime folded = (DateTime) field().fold();, +, +            Instant.ofEpochMilli(folded.getMillis()), ZoneId.of(timeZone.getID()));, +++ b/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/type/DataTypeConversion.java, +import org.joda.time.DateTime;, +import org.joda.time.DateTimeZone;, +import org.joda.time.ReadableInstant;, +import static org.elasticsearch.xpack.sql.type.DataType.BOOLEAN;, +import static org.elasticsearch.xpack.sql.type.DataType.DATE;, +import static org.elasticsearch.xpack.sql.type.DataType.LONG;, +import static org.elasticsearch.xpack.sql.type.DataType.NULL;, +        if (from == to || from == NULL) {, +        if (from == DATE) {, +        if (from == BOOLEAN) {, +        if (from == DATE) {, +            return Conversion.DATE_TO_LONG;]