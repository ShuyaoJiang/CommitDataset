[+++ b/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            if (Privilege.Cluster.ACTION_MATCHER.apply(action)) {, +            if (Privilege.Index.ACTION_MATCHER.apply(action)) {, +++ b/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            if (Privilege.Cluster.ACTION_MATCHER.apply(action)) {, +            if (Privilege.Index.ACTION_MATCHER.apply(action)) {, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +        public static final Predicate<String> ACTION_MATCHER = Privilege.Index.ALL.predicate();, +, +            if (ACTION_MATCHER.apply(name)) {, +                    "] or a pattern over one of the available index actions");, +        final static Predicate<String> ACTION_MATCHER = Privilege.Cluster.ALL.predicate();, +, +, +            if (ACTION_MATCHER.apply(name)) {, +                    "] or a pattern over one of the available cluster actions");, +++ b/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            if (Privilege.Cluster.ACTION_MATCHER.apply(action)) {, +            if (Privilege.Index.ACTION_MATCHER.apply(action)) {, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +        public static final Predicate<String> ACTION_MATCHER = Privilege.Index.ALL.predicate();, +, +            if (ACTION_MATCHER.apply(name)) {, +                    "] or a pattern over one of the available index actions");, +        final static Predicate<String> ACTION_MATCHER = Privilege.Cluster.ALL.predicate();, +, +, +            if (ACTION_MATCHER.apply(name)) {, +                    "] or a pattern over one of the available cluster actions");, +++ b/src/test/java/org/elasticsearch/shield/authz/PrivilegeTests.java, +    public void testCluster_TemplateActions() throws Exception {, +, +        Privilege.Name name = new Privilege.Name("indices:admin/template/delete");, +        Privilege.Cluster cluster = Privilege.Cluster.get(name);, +        assertThat(cluster, notNullValue());, +        assertThat(cluster.predicate().apply("indices:admin/template/delete"), is(true));, +, +        name = new Privilege.Name("indices:admin/template/get");, +        cluster = Privilege.Cluster.get(name);, +        assertThat(cluster, notNullValue());, +        assertThat(cluster.predicate().apply("indices:admin/template/get"), is(true));, +, +        name = new Privilege.Name("indices:admin/template/put");, +        cluster = Privilege.Cluster.get(name);, +        assertThat(cluster, notNullValue());, +        assertThat(cluster.predicate().apply("indices:admin/template/put"), is(true));, +    }, +, +    @Test, +++ b/src/main/java/org/elasticsearch/shield/authz/Permission.java, +            if (Privilege.Cluster.ACTION_MATCHER.apply(action)) {, +            if (Privilege.Index.ACTION_MATCHER.apply(action)) {, +++ b/src/main/java/org/elasticsearch/shield/authz/Privilege.java, +        public static final Predicate<String> ACTION_MATCHER = Privilege.Index.ALL.predicate();, +, +            if (ACTION_MATCHER.apply(name)) {, +                    "] or a pattern over one of the available index actions");, +        final static Predicate<String> ACTION_MATCHER = Privilege.Cluster.ALL.predicate();, +, +, +            if (ACTION_MATCHER.apply(name)) {, +                    "] or a pattern over one of the available cluster actions");, +++ b/src/test/java/org/elasticsearch/shield/authz/PrivilegeTests.java, +    public void testCluster_TemplateActions() throws Exception {, +, +        Privilege.Name name = new Privilege.Name("indices:admin/template/delete");, +        Privilege.Cluster cluster = Privilege.Cluster.get(name);, +        assertThat(cluster, notNullValue());, +        assertThat(cluster.predicate().apply("indices:admin/template/delete"), is(true));, +, +        name = new Privilege.Name("indices:admin/template/get");, +        cluster = Privilege.Cluster.get(name);, +        assertThat(cluster, notNullValue());, +        assertThat(cluster.predicate().apply("indices:admin/template/get"), is(true));, +, +        name = new Privilege.Name("indices:admin/template/put");, +        cluster = Privilege.Cluster.get(name);, +        assertThat(cluster, notNullValue());, +        assertThat(cluster.predicate().apply("indices:admin/template/put"), is(true));, +    }, +, +    @Test, +++ b/src/test/java/org/elasticsearch/shield/authz/store/FileRolesStoreTests.java, +import org.elasticsearch.common.base.Predicate;, +    /**, +     * This test is mainly to make sure we can read the default roles.yml config, +     */, +    @Test, +    public void testDefaultRolesFile() throws Exception {, +        Path path = Paths.get(getClass().getResource("default_roles.yml").toURI());, +        Map<String, Permission.Global> roles = FileRolesStore.parseFile(path, logger, mock(AuthorizationService.class));, +        assertThat(roles, notNullValue());, +        assertThat(roles.size(), is(6));, +, +        assertThat(roles, hasKey("admin"));, +        assertThat(roles, hasKey("power_user"));, +        assertThat(roles, hasKey("user"));, +        assertThat(roles, hasKey("kibana3"));, +        assertThat(roles, hasKey("kibana4"));, +        assertThat(roles, hasKey("logstash"));]