[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import org.gradle.api.GradleException, +import org.gradle.api.file.FileCollection, +import org.gradle.api.tasks.Exec, +                configureForbiddenPatterns(project.tasks),, +                configureJarHell(project)], +, +    static Task configureJarHell(Project project) {, +        File successMarker = new File(project.buildDir, 'markers/jarHell'), +        Exec task = project.tasks.create(name: 'jarHell', type: Exec), +        FileCollection testClasspath = project.sourceSets.test.runtimeClasspath, +        task.dependsOn(testClasspath), +        task.inputs.files(testClasspath), +        task.outputs.file(successMarker), +        task.executable = new File(project.javaHome, 'bin/java'), +        task.doFirst({, +            task.args('-cp', testClasspath.asPath, 'org.elasticsearch.bootstrap.JarHell'), +        }), +        if (task.logger.isInfoEnabled() == false) {, +            task.standardOutput = new ByteArrayOutputStream(), +            task.errorOutput = task.standardOutput, +            task.ignoreExitValue = true, +            task.doLast({, +                if (execResult.exitValue != 0) {, +                    logger.error(standardOutput.toString()), +                    throw new GradleException("JarHell failed"), +                }, +                successMarker.parentFile.mkdirs(), +                successMarker.setText("", 'UTF-8'), +            }), +        }, +        return task, +    }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import org.gradle.api.GradleException, +import org.gradle.api.file.FileCollection, +import org.gradle.api.tasks.Exec, +                configureForbiddenPatterns(project.tasks),, +                configureJarHell(project)], +, +    static Task configureJarHell(Project project) {, +        File successMarker = new File(project.buildDir, 'markers/jarHell'), +        Exec task = project.tasks.create(name: 'jarHell', type: Exec), +        FileCollection testClasspath = project.sourceSets.test.runtimeClasspath, +        task.dependsOn(testClasspath), +        task.inputs.files(testClasspath), +        task.outputs.file(successMarker), +        task.executable = new File(project.javaHome, 'bin/java'), +        task.doFirst({, +            task.args('-cp', testClasspath.asPath, 'org.elasticsearch.bootstrap.JarHell'), +        }), +        if (task.logger.isInfoEnabled() == false) {, +            task.standardOutput = new ByteArrayOutputStream(), +            task.errorOutput = task.standardOutput, +            task.ignoreExitValue = true, +            task.doLast({, +                if (execResult.exitValue != 0) {, +                    logger.error(standardOutput.toString()), +                    throw new GradleException("JarHell failed"), +                }, +                successMarker.parentFile.mkdirs(), +                successMarker.setText("", 'UTF-8'), +            }), +        }, +        return task, +    }, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/health/TransportClusterHealthAction.java, +                    numberOfPendingTasks, numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(System.currentTimeMillis(), settings, clusterState),, +                numberOfInFlightFetch, UnassignedInfo.getNumberOfDelayedUnassigned(System.currentTimeMillis(), settings, clusterState), pendingTaskTimeInQueue);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +import org.gradle.api.GradleException, +import org.gradle.api.file.FileCollection, +import org.gradle.api.tasks.Exec, +                configureForbiddenPatterns(project.tasks),, +                configureJarHell(project)], +, +    static Task configureJarHell(Project project) {, +        File successMarker = new File(project.buildDir, 'markers/jarHell'), +        Exec task = project.tasks.create(name: 'jarHell', type: Exec), +        FileCollection testClasspath = project.sourceSets.test.runtimeClasspath, +        task.dependsOn(testClasspath), +        task.inputs.files(testClasspath), +        task.outputs.file(successMarker), +        task.executable = new File(project.javaHome, 'bin/java'), +        task.doFirst({, +            task.args('-cp', testClasspath.asPath, 'org.elasticsearch.bootstrap.JarHell'), +        }), +        if (task.logger.isInfoEnabled() == false) {, +            task.standardOutput = new ByteArrayOutputStream(), +            task.errorOutput = task.standardOutput, +            task.ignoreExitValue = true, +            task.doLast({, +                if (execResult.exitValue != 0) {, +                    logger.error(standardOutput.toString()), +                    throw new GradleException("JarHell failed"), +                }, +                successMarker.parentFile.mkdirs(), +                successMarker.setText("", 'UTF-8'), +            }), +        }]