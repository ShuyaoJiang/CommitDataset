[+++ b/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +    public static enum Frequency {, +        /**, +         * Defaults to 5 seconds, +         */, +        HIGH(TimeValue.timeValueSeconds(5)),, +, +        /**, +         * Defaults to 30 seconds, +         */, +        MEDIUM(TimeValue.timeValueSeconds(25)),, +, +        /**, +         * Defaults to 60 seconds, +         */, +        LOW(TimeValue.timeValueSeconds(60));, +, +        final TimeValue interval;, +, +        private Frequency(TimeValue interval) {, +            this.interval = interval;, +        }, +    }, +    final ResourceMonitor lowMonitor;, +    final ResourceMonitor mediumMonitor;, +    final ResourceMonitor highMonitor;, +, +    private volatile ScheduledFuture lowFuture;, +    private volatile ScheduledFuture mediumFuture;, +    private volatile ScheduledFuture highFuture;, +, +, +        TimeValue interval = componentSettings.getAsTime("interval.low", Frequency.LOW.interval);, +        lowMonitor = new ResourceMonitor(interval, Frequency.LOW);, +        interval = componentSettings.getAsTime("interval.medium", componentSettings.getAsTime("interval", Frequency.MEDIUM.interval));, +        mediumMonitor = new ResourceMonitor(interval, Frequency.MEDIUM);, +        interval = componentSettings.getAsTime("interval.high", Frequency.HIGH.interval);, +        highMonitor = new ResourceMonitor(interval, Frequency.HIGH);, +        lowFuture = threadPool.scheduleWithFixedDelay(lowMonitor, lowMonitor.interval);, +        mediumFuture = threadPool.scheduleWithFixedDelay(mediumMonitor, mediumMonitor.interval);, +        highFuture = threadPool.scheduleWithFixedDelay(highMonitor, highMonitor.interval);, +        lowFuture.cancel(true);, +        mediumFuture.cancel(true);, +        highFuture.cancel(true);, +     * Register new resource watcher that will be checked in default {@link Frequency#MEDIUM MEDIUM} frequency, +    public <W extends ResourceWatcher> WatcherHandle<W> add(W watcher) {, +        return add(watcher, Frequency.MEDIUM);, +     * Register new resource watcher that will be checked in the given frequency, +    public <W extends ResourceWatcher> WatcherHandle<W> add(W watcher, Frequency frequency) {, +        watcher.init();, +        switch (frequency) {, +            case LOW:, +                return lowMonitor.add(watcher);, +            case MEDIUM:, +                return mediumMonitor.add(watcher);, +            case HIGH:, +                return highMonitor.add(watcher);, +            default:, +                throw new ElasticsearchIllegalArgumentException("Unknown frequency [" + frequency + "]");, +        }, +    static class ResourceMonitor implements Runnable {, +, +        final TimeValue interval;, +        final Frequency frequency;, +, +        final Set<ResourceWatcher> watchers = new CopyOnWriteArraySet<>();, +, +        private ResourceMonitor(TimeValue interval, Frequency frequency) {, +            this.interval = interval;, +            this.frequency = frequency;, +        }, +, +        private <W extends ResourceWatcher> WatcherHandle<W> add(W watcher) {, +            watchers.add(watcher);, +            return new WatcherHandle<>(this, watcher);, +        }, +++ b/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import java.util.Set;, +import java.util.concurrent.CopyOnWriteArraySet;, +    public static enum Frequency {, +        /**, +         * Defaults to 5 seconds, +         */, +        HIGH(TimeValue.timeValueSeconds(5)),, +, +        /**, +         * Defaults to 30 seconds, +         */, +        MEDIUM(TimeValue.timeValueSeconds(25)),, +, +        /**, +         * Defaults to 60 seconds, +         */, +        LOW(TimeValue.timeValueSeconds(60));, +, +        final TimeValue interval;]