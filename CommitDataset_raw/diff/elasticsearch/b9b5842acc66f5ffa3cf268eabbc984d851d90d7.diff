[+++ b/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Copy constructor that creates a new flush request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public FlushRequest(ActionRequest originalRequest) {, +        super(originalRequest);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Copy constructor that creates a new flush request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public FlushRequest(ActionRequest originalRequest) {, +        super(originalRequest);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.action.admin.indices.flush.FlushRequest;, +import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;, +import org.elasticsearch.action.deletebyquery.DeleteByQueryRequest;, +        flushAction.execute(new FlushRequest(request).indices(concreteIndices), new ActionListener<FlushResponse>() {, +, +                DeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest(request).indices(concreteIndices).types(request.types()).source(querySourceBuilder);, +                deleteByQueryAction.execute(deleteByQueryRequest, new ActionListener<DeleteByQueryResponse>() {, +                        refreshAction.execute(new RefreshRequest(request).indices(concreteIndices), new ActionListener<RefreshResponse>() {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Copy constructor that creates a new flush request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public FlushRequest(ActionRequest originalRequest) {, +        super(originalRequest);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.action.admin.indices.flush.FlushRequest;, +import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;, +import org.elasticsearch.action.deletebyquery.DeleteByQueryRequest;, +        flushAction.execute(new FlushRequest(request).indices(concreteIndices), new ActionListener<FlushResponse>() {, +, +                DeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest(request).indices(concreteIndices).types(request.types()).source(querySourceBuilder);, +                deleteByQueryAction.execute(deleteByQueryRequest, new ActionListener<DeleteByQueryResponse>() {, +                        refreshAction.execute(new RefreshRequest(request).indices(concreteIndices), new ActionListener<RefreshResponse>() {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/RefreshRequest.java, +import org.elasticsearch.action.ActionRequest;, +    /**, +     * Copy constructor that creates a new refresh request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public RefreshRequest(ActionRequest originalRequest) {, +        super(originalRequest);, +    }, +, +++ b/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.ActionRequest;, +     * Copy constructor that creates a new flush request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public FlushRequest(ActionRequest originalRequest) {, +        super(originalRequest);, +    }, +, +    /**, +++ b/src/main/java/org/elasticsearch/action/admin/indices/mapping/delete/TransportDeleteMappingAction.java, +import org.elasticsearch.action.admin.indices.flush.FlushRequest;, +import org.elasticsearch.action.admin.indices.refresh.RefreshRequest;, +import org.elasticsearch.action.deletebyquery.DeleteByQueryRequest;, +        flushAction.execute(new FlushRequest(request).indices(concreteIndices), new ActionListener<FlushResponse>() {, +, +                DeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest(request).indices(concreteIndices).types(request.types()).source(querySourceBuilder);, +                deleteByQueryAction.execute(deleteByQueryRequest, new ActionListener<DeleteByQueryResponse>() {, +                        refreshAction.execute(new RefreshRequest(request).indices(concreteIndices), new ActionListener<RefreshResponse>() {, +++ b/src/main/java/org/elasticsearch/action/admin/indices/refresh/RefreshRequest.java, +import org.elasticsearch.action.ActionRequest;, +    /**, +     * Copy constructor that creates a new refresh request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public RefreshRequest(ActionRequest originalRequest) {, +        super(originalRequest);, +    }, +, +++ b/src/main/java/org/elasticsearch/action/deletebyquery/DeleteByQueryRequest.java, +import org.elasticsearch.action.ActionRequest;, +    /**, +     * Copy constructor that creates a new delete by query request that is a copy of the one provided as an argument., +     * The new request will inherit though headers and context from the original request that caused it., +     */, +    public DeleteByQueryRequest(ActionRequest originalRequest) {, +        super(originalRequest);, +    }, +, +    @SuppressWarnings("unchecked"), +++ b/src/main/java/org/elasticsearch/action/admin/indices/flush/FlushRequest.java, +import org.elasticsearch.action.ActionRequest;]