[+++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexModule.INDEX_QUERY_CACHE_ENABLED_SETTING,, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexModule.INDEX_QUERY_CACHE_ENABLED_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.cache.query.IndexQueryCache;, +import org.elasticsearch.index.cache.query.DisabledQueryCache;, +, +    // whether to use the query cache, +    public static final Setting<Boolean> INDEX_QUERY_CACHE_ENABLED_SETTING =, +            Setting.boolSetting("index.queries.cache.enabled", true, Property.IndexScope);, +, +    private final SetOnce<BiFunction<IndexSettings, IndicesQueryCache, QueryCache>> forceQueryCacheProvider = new SetOnce<>();, +        final QueryCache queryCache;, +        if (indexSettings.getValue(INDEX_QUERY_CACHE_ENABLED_SETTING)) {, +            BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider = forceQueryCacheProvider.get();, +            if (queryCacheProvider == null) {, +                queryCache = new IndexQueryCache(indexSettings, indicesQueryCache);, +            } else {, +                queryCache = queryCacheProvider.apply(indexSettings, indicesQueryCache);, +            }, +        } else {, +            queryCache = new DisabledQueryCache(indexSettings);, +        }, +     * Forces a certain query cache to use instead of the default one. If this is set, +     * and query caching is not disabled with {@code index.queries.cache.enabled}, then, +     * the given provider will be used., +     * @see #INDEX_QUERY_CACHE_ENABLED_SETTING, +    public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {, +        this.forceQueryCacheProvider.set(queryCacheProvider);, +++ b/core/src/main/java/org/elasticsearch/common/settings/IndexScopedSettings.java, +        IndexModule.INDEX_QUERY_CACHE_ENABLED_SETTING,, +++ b/core/src/main/java/org/elasticsearch/index/IndexModule.java, +import org.elasticsearch.index.cache.query.IndexQueryCache;, +import org.elasticsearch.index.cache.query.DisabledQueryCache;, +, +    // whether to use the query cache, +    public static final Setting<Boolean> INDEX_QUERY_CACHE_ENABLED_SETTING =, +            Setting.boolSetting("index.queries.cache.enabled", true, Property.IndexScope);, +, +    private final SetOnce<BiFunction<IndexSettings, IndicesQueryCache, QueryCache>> forceQueryCacheProvider = new SetOnce<>();, +        final QueryCache queryCache;, +        if (indexSettings.getValue(INDEX_QUERY_CACHE_ENABLED_SETTING)) {, +            BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider = forceQueryCacheProvider.get();, +            if (queryCacheProvider == null) {, +                queryCache = new IndexQueryCache(indexSettings, indicesQueryCache);, +            } else {, +                queryCache = queryCacheProvider.apply(indexSettings, indicesQueryCache);, +            }, +        } else {, +            queryCache = new DisabledQueryCache(indexSettings);, +        }, +     * Forces a certain query cache to use instead of the default one. If this is set, +     * and query caching is not disabled with {@code index.queries.cache.enabled}, then, +     * the given provider will be used., +     * @see #INDEX_QUERY_CACHE_ENABLED_SETTING, +    public void forceQueryCacheProvider(BiFunction<IndexSettings, IndicesQueryCache, QueryCache> queryCacheProvider) {, +        this.forceQueryCacheProvider.set(queryCacheProvider);, +++ b/core/src/main/java/org/elasticsearch/index/cache/query/DisabledQueryCache.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.cache.query;, +, +import org.apache.lucene.search.QueryCachingPolicy;, +import org.apache.lucene.search.Weight;, +import org.elasticsearch.index.AbstractIndexComponent;, +import org.elasticsearch.index.IndexSettings;, +import org.elasticsearch.index.cache.query.QueryCache;, +, +/**, + *, + */, +public class DisabledQueryCache extends AbstractIndexComponent implements QueryCache {, +, +    public DisabledQueryCache(IndexSettings indexSettings) {, +        super(indexSettings);, +        logger.debug("Using no query cache");, +    }, +, +    @Override, +    public void close() {, +        // nothing to do here, +    }]