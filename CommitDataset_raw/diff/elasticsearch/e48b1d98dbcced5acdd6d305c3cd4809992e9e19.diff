[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ExceptionsHelper;, +                                // if we got disconnected from the node, retry it..., +                                if (exp.unwrapCause() instanceof ConnectTransportException) {, +                                    primaryOperationStarted.set(false);, +                                    retryPrimary(fromClusterEvent, shard.shardId());, +                                } else {, +                            }, +                if (e instanceof IndexShardMissingException || e instanceof IndexShardNotStartedException, +                        || e instanceof IndexMissingException) {, +                    retryPrimary(fromDiscoveryListener, shard.shardId());, +                    return;, +                }, +            Throwable cause = ExceptionsHelper.unwrapCause(e);, +            if (cause instanceof IllegalIndexShardStateException) {, +            if (cause instanceof IndexMissingException) {, +            if (cause instanceof IndexShardMissingException) {, +                return true;, +            }, +            if (cause instanceof ConnectTransportException) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ExceptionsHelper;, +                                // if we got disconnected from the node, retry it..., +                                if (exp.unwrapCause() instanceof ConnectTransportException) {, +                                    primaryOperationStarted.set(false);, +                                    retryPrimary(fromClusterEvent, shard.shardId());, +                                } else {, +                            }, +                if (e instanceof IndexShardMissingException || e instanceof IndexShardNotStartedException, +                        || e instanceof IndexMissingException) {, +                    retryPrimary(fromDiscoveryListener, shard.shardId());, +                    return;, +                }, +            Throwable cause = ExceptionsHelper.unwrapCause(e);, +            if (cause instanceof IllegalIndexShardStateException) {, +            if (cause instanceof IndexMissingException) {, +            if (cause instanceof IndexShardMissingException) {, +                return true;, +            }, +            if (cause instanceof ConnectTransportException) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/transport/NetworkExceptionHelper.java, +            // UGLY!, this exception messages seems to represent closed connection , +            if (e.getMessage().contains("Broken pipe")) {, +                return true;, +            }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/support/replication/TransportShardReplicationOperationAction.java, +import org.elasticsearch.ExceptionsHelper;, +                                // if we got disconnected from the node, retry it..., +                                if (exp.unwrapCause() instanceof ConnectTransportException) {, +                                    primaryOperationStarted.set(false);, +                                    retryPrimary(fromClusterEvent, shard.shardId());, +                                } else {, +                            }, +                if (e instanceof IndexShardMissingException || e instanceof IndexShardNotStartedException, +                        || e instanceof IndexMissingException) {, +                    retryPrimary(fromDiscoveryListener, shard.shardId());, +                    return;, +                }, +            Throwable cause = ExceptionsHelper.unwrapCause(e);, +            if (cause instanceof IllegalIndexShardStateException) {, +            if (cause instanceof IndexMissingException) {, +            if (cause instanceof IndexShardMissingException) {, +                return true;, +            }, +            if (cause instanceof ConnectTransportException) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/transport/NetworkExceptionHelper.java, +            // UGLY!, this exception messages seems to represent closed connection , +            if (e.getMessage().contains("Broken pipe")) {, +                return true;, +            }, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/recovery/RecoveryWhileUnderLoadTests.java, +        startNode("node1");, +        client("node1").admin().indices().prepareCreate("test").execute().actionGet();, +                        client("node1").prepareIndex("test", "type1", Long.toString(id)), +        while (client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count() < 20000) {, +            client("node1").admin().indices().prepareRefresh().execute().actionGet();, +        client("node1").admin().indices().prepareFlush().execute().actionGet();, +        while (client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count() < 40000) {, +            client("node1").admin().indices().prepareRefresh().execute().actionGet();, +        assertThat(client("node1").admin().cluster().prepareHealth().setTimeout("1m").setWaitForGreenStatus().execute().actionGet().status(), equalTo(ClusterHealthStatus.GREEN));, +        while (client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count() < 100000) {, +            client("node1").admin().indices().prepareRefresh().execute().actionGet();, +        client("node1").admin().indices().prepareRefresh().execute().actionGet();, +            assertThat(client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count(), equalTo(idGenerator.get()));, +        startNode("node1");, +        client("node1").admin().indices().prepareCreate("test").execute().actionGet();, +                        client("node1").prepareIndex("test", "type1", Long.toString(id)), +        while (client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count() < 20000) {, +            client("node1").admin().indices().prepareRefresh().execute().actionGet();, +        client("node1").admin().indices().prepareFlush().execute().actionGet();, +        while (client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count() < 40000) {, +            client("node1").admin().indices().prepareRefresh().execute().actionGet();, +        startNode("node2");, +        startNode("node3");, +        startNode("node4");, +        assertThat(client("node1").admin().cluster().prepareHealth().setTimeout("1m").setWaitForGreenStatus().execute().actionGet().status(), equalTo(ClusterHealthStatus.GREEN));, +        while (client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count() < 150000) {, +            client("node1").admin().indices().prepareRefresh().execute().actionGet();, +        client("node1").admin().indices().prepareRefresh().execute().actionGet();, +            assertThat(client("node1").prepareCount().setQuery(matchAllQuery()).execute().actionGet().count(), equalTo(idGenerator.get()));]