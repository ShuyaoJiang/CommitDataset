[+++ b/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import org.apache.tools.ant.filters.ReplaceTokens, +    distributionType = 'ALL', +        // Update build-tools to reflect the Gradle upgrade, +        // TODO: we can remove this once we have tests to make sure older versions work., +        project(':build-tools').file('src/main/resources/minimumGradleVersion').text = gradleVersion, +        println "Updated minimum Gradle Version", +++ b/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import org.apache.tools.ant.filters.ReplaceTokens, +    distributionType = 'ALL', +        // Update build-tools to reflect the Gradle upgrade, +        // TODO: we can remove this once we have tests to make sure older versions work., +        project(':build-tools').file('src/main/resources/minimumGradleVersion').text = gradleVersion, +        println "Updated minimum Gradle Version", +++ b/buildSrc/build.gradle, +String minimumGradleVersion = file('src/main/resources/minimumGradleVersion').text.trim(), +if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion)) {, +    throw new GradleException("Gradle ${minimumGradleVersion}+ is required to build elasticsearch"), +++ b/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import org.apache.tools.ant.filters.ReplaceTokens, +    distributionType = 'ALL', +        // Update build-tools to reflect the Gradle upgrade, +        // TODO: we can remove this once we have tests to make sure older versions work., +        project(':build-tools').file('src/main/resources/minimumGradleVersion').text = gradleVersion, +        println "Updated minimum Gradle Version", +++ b/buildSrc/build.gradle, +String minimumGradleVersion = file('src/main/resources/minimumGradleVersion').text.trim(), +if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion)) {, +    throw new GradleException("Gradle ${minimumGradleVersion}+ is required to build elasticsearch"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.apache.commons.io.IOUtils, +import java.nio.charset.StandardCharsets, +        final String minimumGradleVersion, +        InputStream is = getClass().getResourceAsStream("/minimumGradleVersion"), +        try { minimumGradleVersion = IOUtils.toString(is, StandardCharsets.UTF_8.toString()) } finally { is.close() }, +        if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion.trim())) {, +            throw new GradleException(, +                    "Gradle ${minimumGradleVersion}+ is required to use elasticsearch.build plugin", +            ), +++ b/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import org.apache.tools.ant.filters.ReplaceTokens, +    distributionType = 'ALL', +        // Update build-tools to reflect the Gradle upgrade, +        // TODO: we can remove this once we have tests to make sure older versions work., +        project(':build-tools').file('src/main/resources/minimumGradleVersion').text = gradleVersion, +        println "Updated minimum Gradle Version", +++ b/buildSrc/build.gradle, +String minimumGradleVersion = file('src/main/resources/minimumGradleVersion').text.trim(), +if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion)) {, +    throw new GradleException("Gradle ${minimumGradleVersion}+ is required to build elasticsearch"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.apache.commons.io.IOUtils, +import java.nio.charset.StandardCharsets, +        final String minimumGradleVersion, +        InputStream is = getClass().getResourceAsStream("/minimumGradleVersion"), +        try { minimumGradleVersion = IOUtils.toString(is, StandardCharsets.UTF_8.toString()) } finally { is.close() }, +        if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion.trim())) {, +            throw new GradleException(, +                    "Gradle ${minimumGradleVersion}+ is required to use elasticsearch.build plugin", +            ), +++ b/buildSrc/src/main/resources/minimumGradleVersion, +4.9, +++ b/build.gradle, +import org.apache.tools.ant.taskdefs.condition.Os, +import org.apache.tools.ant.filters.ReplaceTokens, +    distributionType = 'ALL', +        // Update build-tools to reflect the Gradle upgrade, +        // TODO: we can remove this once we have tests to make sure older versions work., +        project(':build-tools').file('src/main/resources/minimumGradleVersion').text = gradleVersion, +        println "Updated minimum Gradle Version", +++ b/buildSrc/build.gradle, +String minimumGradleVersion = file('src/main/resources/minimumGradleVersion').text.trim(), +if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion)) {, +    throw new GradleException("Gradle ${minimumGradleVersion}+ is required to build elasticsearch"), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.apache.commons.io.IOUtils, +import java.nio.charset.StandardCharsets, +        final String minimumGradleVersion, +        InputStream is = getClass().getResourceAsStream("/minimumGradleVersion"), +        try { minimumGradleVersion = IOUtils.toString(is, StandardCharsets.UTF_8.toString()) } finally { is.close() }, +        if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion.trim())) {, +            throw new GradleException(, +                    "Gradle ${minimumGradleVersion}+ is required to use elasticsearch.build plugin", +            ), +++ b/buildSrc/src/main/resources/minimumGradleVersion, +4.9, +++ b/gradle/wrapper/gradle-wrapper.jar]