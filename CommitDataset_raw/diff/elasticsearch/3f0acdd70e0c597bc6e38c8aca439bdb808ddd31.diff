[+++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/LicenseTribeTests.java, +import org.elasticsearch.xpack.TribeTransportTestCase;, +public class LicenseTribeTests extends TribeTransportTestCase {, +    @Override, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/license/plugin/LicenseTribeTests.java, +import org.elasticsearch.xpack.TribeTransportTestCase;, +public class LicenseTribeTests extends TribeTransportTestCase {, +    @Override, +++ b/elasticsearch/x-pack/license-plugin/src/test/java/org/elasticsearch/xpack/TribeTransportTestCase.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +package org.elasticsearch.xpack;, +, +import org.elasticsearch.action.Action;, +import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;, +import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;, +import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.client.Requests;, +import org.elasticsearch.client.transport.NoNodeAvailableException;, +import org.elasticsearch.cluster.health.ClusterHealthStatus;, +import org.elasticsearch.cluster.node.DiscoveryNode;, +import org.elasticsearch.cluster.node.DiscoveryNodes;, +import org.elasticsearch.common.Priority;, +import org.elasticsearch.common.UUIDs;, +import org.elasticsearch.common.network.NetworkModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +import org.elasticsearch.graph.Graph;, +import org.elasticsearch.marvel.Monitoring;, +import org.elasticsearch.node.Node;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.shield.Security;, +import org.elasticsearch.test.ESIntegTestCase;, +import org.elasticsearch.test.ESIntegTestCase.ClusterScope;, +import org.elasticsearch.test.ESIntegTestCase.Scope;, +import org.elasticsearch.test.InternalTestCluster;, +import org.elasticsearch.test.NodeConfigurationSource;, +import org.elasticsearch.test.TestCluster;, +import org.elasticsearch.xpack.watcher.Watcher;, +, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +, +import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;, +import static org.hamcrest.Matchers.anyOf;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +, +@ClusterScope(scope = Scope.TEST, transportClientRatio = 0, numClientNodes = 0, numDataNodes = 0), +public abstract class TribeTransportTestCase extends ESIntegTestCase {, +, +    private static final Collection<String> ALL_FEATURES = Arrays.asList(Security.NAME, Monitoring.NAME,, +            Watcher.NAME, Graph.NAME);, +, +    protected List<String> enabledFeatures() {, +        return Collections.emptyList();, +    }, +, +    @Override, +    protected final Settings nodeSettings(int nodeOrdinal) {, +        final Settings.Builder builder = Settings.builder(), +                .put(NetworkModule.HTTP_ENABLED.getKey(), false), +                .put(Node.NODE_LOCAL_SETTING.getKey(), true);, +        List<String> enabledFeatures = enabledFeatures();, +        for (String feature : ALL_FEATURES) {, +            builder.put(XPackPlugin.featureEnabledSetting(feature), enabledFeatures.contains(feature));, +        }, +        return builder.build();, +    }, +, +    @Override, +    protected final Collection<Class<? extends Plugin>> nodePlugins() {, +        return Collections.<Class<? extends Plugin>>singletonList(XPackPlugin.class);, +    }, +, +    @Override, +    protected final Collection<Class<? extends Plugin>> transportClientPlugins() {, +        return nodePlugins();, +    }, +, +    public void testTribeSetup() throws Exception {, +        NodeConfigurationSource nodeConfigurationSource = new NodeConfigurationSource() {, +            @Override, +            public Settings nodeSettings(int nodeOrdinal) {, +                return TribeTransportTestCase.this.nodeSettings(nodeOrdinal);, +            }, +, +            @Override, +            public Collection<Class<? extends Plugin>> nodePlugins() {, +                return TribeTransportTestCase.this.nodePlugins();, +            }]