[+++ b/docs/build.gradle, +    configFile 'scripts/my_script.painless', +++ b/docs/build.gradle, +    configFile 'scripts/my_script.painless', +++ b/docs/reference/aggregations/metrics/max-aggregation.asciidoc, +A `single-value` metrics aggregation that keeps track and returns the maximum, +value among the numeric values extracted from the aggregated documents. These, +values can be extracted either from specific numeric fields in the documents,, +or be generated by a provided script., +POST /sales/_search?size=0, +// CONSOLE, +// TEST[setup:sales], +            "value": 200.0, +// TESTRESPONSE[s/\.\.\./"took": $body.took,"timed_out": false,"_shards": $body._shards,"hits": $body.hits,/], +As can be seen, the name of the aggregation (`max_price` above) also serves as, +the key by which the aggregation result can be retrieved from the returned, +response., +The `max` aggregation can also calculate the maximum of a script. The example, +below computes the maximum price:, +POST /sales/_search, +                    "inline" : "doc.price.value", +// CONSOLE, +// TEST[setup:sales], +This will use the <<modules-scripting-painless, Painless>> scripting language, +and no script parameters. To use a file script use the following syntax:, +POST /sales/_search, +// CONSOLE, +// TEST[setup:sales], +TIP: For indexed scripts replace the `file` parameter with an `id` parameter., +Let's say that the prices of the documents in our index are in USD, but we, +would like to compute the max in EURO (and for the sake of this example, let's, +say the conversion rate is 1.2). We can use a value script to apply the, +conversion rate to every value before it is aggregated:, +POST /sales/_search, +// CONSOLE, +// TEST[setup:sales], +The `missing` parameter defines how documents that are missing a value should, +be treated. By default they will be ignored but it is also possible to treat, +them as if they had a value., +POST /sales/_search, +// CONSOLE, +// TEST[setup:sales], +<1> Documents without a value in the `grade` field will fall into the same, +bucket as documents that have the value `10`., +++ b/docs/build.gradle, +    configFile 'scripts/my_script.painless', +++ b/docs/reference/aggregations/metrics/max-aggregation.asciidoc, +A `single-value` metrics aggregation that keeps track and returns the maximum, +value among the numeric values extracted from the aggregated documents. These, +values can be extracted either from specific numeric fields in the documents,, +or be generated by a provided script., +POST /sales/_search?size=0, +// CONSOLE, +// TEST[setup:sales], +            "value": 200.0, +// TESTRESPONSE[s/\.\.\./"took": $body.took,"timed_out": false,"_shards": $body._shards,"hits": $body.hits,/], +As can be seen, the name of the aggregation (`max_price` above) also serves as, +the key by which the aggregation result can be retrieved from the returned, +response., +The `max` aggregation can also calculate the maximum of a script. The example, +below computes the maximum price:, +POST /sales/_search, +                    "inline" : "doc.price.value", +// CONSOLE, +// TEST[setup:sales], +This will use the <<modules-scripting-painless, Painless>> scripting language, +and no script parameters. To use a file script use the following syntax:, +POST /sales/_search, +// CONSOLE, +// TEST[setup:sales], +TIP: For indexed scripts replace the `file` parameter with an `id` parameter., +Let's say that the prices of the documents in our index are in USD, but we, +would like to compute the max in EURO (and for the sake of this example, let's, +say the conversion rate is 1.2). We can use a value script to apply the, +conversion rate to every value before it is aggregated:, +POST /sales/_search, +// CONSOLE, +// TEST[setup:sales], +The `missing` parameter defines how documents that are missing a value should, +be treated. By default they will be ignored but it is also possible to treat, +them as if they had a value., +POST /sales/_search, +// CONSOLE, +// TEST[setup:sales], +<1> Documents without a value in the `grade` field will fall into the same, +bucket as documents that have the value `10`., +++ b/docs/reference/aggregations/metrics/min-aggregation.asciidoc, +A `single-value` metrics aggregation that keeps track and returns the minimum, +value among numeric values extracted from the aggregated documents. These, +values can be extracted either from specific numeric fields in the documents,, +or be generated by a provided script., +POST /sales/_search?size=0, +// CONSOLE, +// TEST[setup:sales], +            "value": 10.0, +// TESTRESPONSE[s/\.\.\./"took": $body.took,"timed_out": false,"_shards": $body._shards,"hits": $body.hits,/], +As can be seen, the name of the aggregation (`min_price` above) also serves as, +the key by which the aggregation result can be retrieved from the returned, +response., +The `min` aggregation can also calculate the maximum of a script. The example]