[+++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import org.elasticsearch.common.lucene.search.NoCacheFilter;, +    public long parseToMilliseconds(String value, @Nullable QueryParseContext context, boolean includeUpper) {, +        long now = context == null ? System.currentTimeMillis() : context.nowInMillis();, +        return includeUpper && roundCeil ? dateMathParser.parseRoundCeil(value, now) : dateMathParser.parse(value, now);, +    }, +, +        boolean nowIsUsed = false;, +        Long lowerVal = null;, +        Long upperVal = null;, +        if (lowerTerm != null) {, +            String value = convertToString(lowerTerm);, +            nowIsUsed = value.contains("now");, +            lowerVal = parseToMilliseconds(value, context, false);, +        }, +        if (upperTerm != null) {, +            String value = convertToString(upperTerm);, +            nowIsUsed = value.contains("now");, +            upperVal = parseToMilliseconds(value, context, includeUpper);, +        }, +, +        Filter filter =  NumericRangeFilter.newLongRange(, +            names.indexName(), precisionStep, lowerVal, upperVal, includeLower, includeUpper, +        );, +        if (nowIsUsed) {, +            // We don't cache range filter if `now` date expression is used and also when a compound filter wraps, +            // a range filter with a `now` date expressions., +            return NoCacheFilter.wrap(filter);, +        } else {, +            return filter;, +        }, +        boolean nowIsUsed = false;, +        Long lowerVal = null;, +        Long upperVal = null;, +        if (lowerTerm != null) {, +            String value = convertToString(lowerTerm);, +            nowIsUsed = value.contains("now");, +            lowerVal = parseToMilliseconds(value, context, false);, +        }, +        if (upperTerm != null) {, +            String value = convertToString(upperTerm);, +            nowIsUsed = value.contains("now");, +            upperVal = parseToMilliseconds(value, context, includeUpper);, +        }, +, +        Filter filter =  NumericRangeFieldDataFilter.newLongRange(, +            (IndexNumericFieldData<?>) fieldData.getForField(this), lowerVal,upperVal, includeLower, includeUpper, +        );, +        if (nowIsUsed) {, +            // We don't cache range filter if `now` date expression is used and also when a compound filter wraps, +            // a range filter with a `now` date expressions., +            return NoCacheFilter.wrap(filter);, +        } else {, +            return filter;, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +import org.elasticsearch.common.lucene.search.NoCacheFilter;, +    public long parseToMilliseconds(String value, @Nullable QueryParseContext context, boolean includeUpper) {, +        long now = context == null ? System.currentTimeMillis() : context.nowInMillis();, +        return includeUpper && roundCeil ? dateMathParser.parseRoundCeil(value, now) : dateMathParser.parse(value, now);, +    }, +, +        boolean nowIsUsed = false;, +        Long lowerVal = null;, +        Long upperVal = null;, +        if (lowerTerm != null) {, +            String value = convertToString(lowerTerm);, +            nowIsUsed = value.contains("now");, +            lowerVal = parseToMilliseconds(value, context, false);, +        }, +        if (upperTerm != null) {, +            String value = convertToString(upperTerm);, +            nowIsUsed = value.contains("now");, +            upperVal = parseToMilliseconds(value, context, includeUpper);, +        }, +, +        Filter filter =  NumericRangeFilter.newLongRange(, +            names.indexName(), precisionStep, lowerVal, upperVal, includeLower, includeUpper, +        );, +        if (nowIsUsed) {, +            // We don't cache range filter if `now` date expression is used and also when a compound filter wraps, +            // a range filter with a `now` date expressions., +            return NoCacheFilter.wrap(filter);, +        } else {, +            return filter;, +        }, +        boolean nowIsUsed = false;, +        Long lowerVal = null;, +        Long upperVal = null;, +        if (lowerTerm != null) {, +            String value = convertToString(lowerTerm);, +            nowIsUsed = value.contains("now");, +            lowerVal = parseToMilliseconds(value, context, false);, +        }, +        if (upperTerm != null) {, +            String value = convertToString(upperTerm);, +            nowIsUsed = value.contains("now");, +            upperVal = parseToMilliseconds(value, context, includeUpper);, +        }, +]