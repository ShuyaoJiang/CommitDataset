[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/writer/FieldConfigWriter.java, +import java.util.Collections;, +    private static final String SCHEDULED_EVENT_PREFIX = "scheduledevent.";, +    private static final String SCHEDULED_EVENT_DESCRIPTION_SUFFIX = ".description";, +, +        writeScheduledEvents(contents);, +            writeDetectorRules(detectorId, detector, contents);, +    private void writeDetectorRules(int detectorId, Detector detector, StringBuilder contents) throws IOException {, +        writeDetectionRulesJson(rules, contents);, +        contents.append(NEW_LINE);, +    }, +    private void writeDetectionRulesJson(List<DetectionRule> rules, StringBuilder contents) throws IOException {, +    private void writeScheduledEvents(StringBuilder contents) throws IOException {, +        if (scheduledEvents.isEmpty()) {, +            return;, +        }, +, +        int eventIndex = 0;, +        for (ScheduledEvent event: scheduledEvents) {, +, +            contents.append(SCHEDULED_EVENT_PREFIX).append(eventIndex), +                    .append(SCHEDULED_EVENT_DESCRIPTION_SUFFIX).append(EQUALS), +                    .append(quoteField(event.getDescription())), +                    .append(NEW_LINE);, +, +            contents.append(SCHEDULED_EVENT_PREFIX).append(eventIndex), +                    .append(DETECTOR_RULES_SUFFIX).append(EQUALS);, +            writeDetectionRulesJson(Collections.singletonList(event.toDetectionRule(config.getBucketSpan())), contents);, +            contents.append(NEW_LINE);, +, +            ++eventIndex;, +        }, +    }, +, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/writer/FieldConfigWriter.java, +import java.util.Collections;, +    private static final String SCHEDULED_EVENT_PREFIX = "scheduledevent.";, +    private static final String SCHEDULED_EVENT_DESCRIPTION_SUFFIX = ".description";, +, +        writeScheduledEvents(contents);, +            writeDetectorRules(detectorId, detector, contents);, +    private void writeDetectorRules(int detectorId, Detector detector, StringBuilder contents) throws IOException {, +        writeDetectionRulesJson(rules, contents);, +        contents.append(NEW_LINE);, +    }, +    private void writeDetectionRulesJson(List<DetectionRule> rules, StringBuilder contents) throws IOException {, +    private void writeScheduledEvents(StringBuilder contents) throws IOException {, +        if (scheduledEvents.isEmpty()) {, +            return;, +        }, +, +        int eventIndex = 0;, +        for (ScheduledEvent event: scheduledEvents) {, +, +            contents.append(SCHEDULED_EVENT_PREFIX).append(eventIndex), +                    .append(SCHEDULED_EVENT_DESCRIPTION_SUFFIX).append(EQUALS), +                    .append(quoteField(event.getDescription())), +                    .append(NEW_LINE);, +, +            contents.append(SCHEDULED_EVENT_PREFIX).append(eventIndex), +                    .append(DETECTOR_RULES_SUFFIX).append(EQUALS);, +            writeDetectionRulesJson(Collections.singletonList(event.toDetectionRule(config.getBucketSpan())), contents);, +            contents.append(NEW_LINE);, +, +            ++eventIndex;, +        }, +    }, +, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/job/process/autodetect/writer/FieldConfigWriterTests.java, +                "scheduledevent.0.description = \"The Ashes\"\n" +, +                "scheduledevent.0.rules = [{\"actions\":[\"filter_results\",\"skip_sampling\"],\"conditions_connective\":\"and\"," +, +                "{\"type\":\"time\",\"condition\":{\"operator\":\"lt\",\"value\":\"1515369600\"}}]}]\n" +, +                "scheduledevent.1.description = elasticon\n" +, +                "scheduledevent.1.rules = [{\"actions\":[\"filter_results\",\"skip_sampling\"],\"conditions_connective\":\"and\"," +]