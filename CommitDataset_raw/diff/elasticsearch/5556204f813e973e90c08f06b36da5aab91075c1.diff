[+++ b/server/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java, +                    handler.failToRespond();, +, +        private final AtomicBoolean failToRespond = new AtomicBoolean(false);, +            if (failToRespond.get()) {, +, +        void failToRespond() {, +            if (failToRespond.compareAndSet(false, true) == false) {, +                throw new AssertionError("Request handler is already marked as failToRespond");, +++ b/server/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java, +                    handler.failToRespond();, +, +        private final AtomicBoolean failToRespond = new AtomicBoolean(false);, +            if (failToRespond.get()) {, +, +        void failToRespond() {, +            if (failToRespond.compareAndSet(false, true) == false) {, +                throw new AssertionError("Request handler is already marked as failToRespond");, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterConnectionTests.java, +        StubbableTransport stubbableTransport = new StubbableTransport(MockTransportService.newMockTransport(Settings.EMPTY,, +            Version.CURRENT, threadPool));, +++ b/server/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java, +                    handler.failToRespond();, +, +        private final AtomicBoolean failToRespond = new AtomicBoolean(false);, +            if (failToRespond.get()) {, +, +        void failToRespond() {, +            if (failToRespond.compareAndSet(false, true) == false) {, +                throw new AssertionError("Request handler is already marked as failToRespond");, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterConnectionTests.java, +        StubbableTransport stubbableTransport = new StubbableTransport(MockTransportService.newMockTransport(Settings.EMPTY,, +            Version.CURRENT, threadPool));, +++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +import org.elasticsearch.common.util.MockPageCacheRecycler;, +import org.elasticsearch.transport.nio.MockNioTransport;, +        MockNioTransport mockTransport = newMockTransport(settings, version, threadPool);, +        return createNewService(settings, mockTransport, version, threadPool, clusterSettings, Collections.emptySet());, +    public static MockNioTransport newMockTransport(Settings settings, Version version, ThreadPool threadPool) {, +        return new MockNioTransport(settings, version, threadPool, new NetworkService(Collections.emptyList()),, +            BigArrays.NON_RECYCLING_INSTANCE, new MockPageCacheRecycler(settings), namedWriteableRegistry,, +            new NoneCircuitBreakerService());, +    private static TransportAddress[] extractTransportAddresses(TransportService transportService) {, +++ b/server/src/test/java/org/elasticsearch/client/transport/TransportClientNodesServiceTests.java, +                    handler.failToRespond();, +, +        private final AtomicBoolean failToRespond = new AtomicBoolean(false);, +            if (failToRespond.get()) {, +, +        void failToRespond() {, +            if (failToRespond.compareAndSet(false, true) == false) {, +                throw new AssertionError("Request handler is already marked as failToRespond");, +++ b/server/src/test/java/org/elasticsearch/transport/RemoteClusterConnectionTests.java, +        StubbableTransport stubbableTransport = new StubbableTransport(MockTransportService.newMockTransport(Settings.EMPTY,, +            Version.CURRENT, threadPool));, +++ b/test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java, +import org.elasticsearch.common.util.MockPageCacheRecycler;, +import org.elasticsearch.transport.nio.MockNioTransport;, +        MockNioTransport mockTransport = newMockTransport(settings, version, threadPool);, +        return createNewService(settings, mockTransport, version, threadPool, clusterSettings, Collections.emptySet());, +    public static MockNioTransport newMockTransport(Settings settings, Version version, ThreadPool threadPool) {, +        return new MockNioTransport(settings, version, threadPool, new NetworkService(Collections.emptyList()),, +            BigArrays.NON_RECYCLING_INSTANCE, new MockPageCacheRecycler(settings), namedWriteableRegistry,, +            new NoneCircuitBreakerService());, +    private static TransportAddress[] extractTransportAddresses(TransportService transportService) {, +++ b/test/framework/src/main/java/org/elasticsearch/transport/nio/MockNioTransport.java, +    public MockNioTransport(Settings settings, Version version, ThreadPool threadPool, NetworkService networkService, BigArrays bigArrays,]