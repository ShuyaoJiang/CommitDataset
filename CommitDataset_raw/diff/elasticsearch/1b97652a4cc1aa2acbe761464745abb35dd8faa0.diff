[+++ b/benchmarks/build.gradle, +++ b/benchmarks/build.gradle, +++ b/build.gradle, +import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin, +      Closure depJavadocClosure = { shadowed, dep ->, +        if (dep.group == null || false == dep.group.startsWith('org.elasticsearch')) {, +          return, +        }, +        if (upstreamProject == null) {, +          return, +        }, +        if (shadowed) {, +          /*, +           * Include the source of shadowed upstream projects so we don't, +           * have to publish their javadoc., +           */, +          project.evaluationDependsOn(upstreamProject.path), +          project.javadoc.source += upstreamProject.javadoc.source, +          /*, +           * Do not add those projects to the javadoc classpath because, +           * we are going to resolve them with their source instead., +           */, +          project.javadoc.classpath = project.javadoc.classpath.filter { f ->, +            false == upstreamProject.configurations.archives.artifacts.files.files.contains(f), +          }, +          /*, +           * Instead we need the upstream project's javadoc classpath so, +           * we don't barf on the classes that it references., +           */, +          project.javadoc.classpath += upstreamProject.javadoc.classpath, +        } else {, +          // Link to non-shadowed dependant projects, +      boolean hasShadow = project.plugins.hasPlugin(ShadowPlugin), +      project.configurations.compile.dependencies, +          .findAll(), +          .toSorted(sortClosure), +          .each({ c -> depJavadocClosure(hasShadow, c) }), +      project.configurations.compileOnly.dependencies, +          .findAll(), +          .toSorted(sortClosure), +          .each({ c -> depJavadocClosure(hasShadow, c) }), +      if (hasShadow) {, +        project.configurations.shadow.dependencies, +            .findAll(), +            .toSorted(sortClosure), +            .each({ c -> depJavadocClosure(false, c) }), +++ b/benchmarks/build.gradle, +++ b/build.gradle, +import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin, +      Closure depJavadocClosure = { shadowed, dep ->, +        if (dep.group == null || false == dep.group.startsWith('org.elasticsearch')) {, +          return, +        }, +        if (upstreamProject == null) {, +          return, +        }, +        if (shadowed) {, +          /*, +           * Include the source of shadowed upstream projects so we don't, +           * have to publish their javadoc., +           */, +          project.evaluationDependsOn(upstreamProject.path), +          project.javadoc.source += upstreamProject.javadoc.source, +          /*, +           * Do not add those projects to the javadoc classpath because, +           * we are going to resolve them with their source instead., +           */, +          project.javadoc.classpath = project.javadoc.classpath.filter { f ->, +            false == upstreamProject.configurations.archives.artifacts.files.files.contains(f), +          }, +          /*, +           * Instead we need the upstream project's javadoc classpath so, +           * we don't barf on the classes that it references., +           */, +          project.javadoc.classpath += upstreamProject.javadoc.classpath, +        } else {, +          // Link to non-shadowed dependant projects, +      boolean hasShadow = project.plugins.hasPlugin(ShadowPlugin), +      project.configurations.compile.dependencies, +          .findAll(), +          .toSorted(sortClosure), +          .each({ c -> depJavadocClosure(hasShadow, c) }), +      project.configurations.compileOnly.dependencies, +          .findAll(), +          .toSorted(sortClosure), +          .each({ c -> depJavadocClosure(hasShadow, c) }), +      if (hasShadow) {, +        project.configurations.shadow.dependencies, +            .findAll(), +            .toSorted(sortClosure), +            .each({ c -> depJavadocClosure(false, c) }), +++ b/buildSrc/build.gradle, +  compile 'com.github.jengelman.gradle.plugins:shadow:2.0.4', +++ b/benchmarks/build.gradle, +++ b/build.gradle, +import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin, +      Closure depJavadocClosure = { shadowed, dep ->, +        if (dep.group == null || false == dep.group.startsWith('org.elasticsearch')) {, +          return, +        }]