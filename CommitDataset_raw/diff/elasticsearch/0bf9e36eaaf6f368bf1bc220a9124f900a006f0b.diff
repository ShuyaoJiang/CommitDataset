[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "com.github.spullara.mustache.java:compiler:${project.versions.mustache}", +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "com.github.spullara.mustache.java:compiler:${project.versions.mustache}", +++ b/buildSrc/version.properties, +mustache          = 0.9.1, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "com.github.spullara.mustache.java:compiler:${project.versions.mustache}", +++ b/buildSrc/version.properties, +mustache          = 0.9.1, +++ b/core/build.gradle, +  // templating, +  compile "com.github.spullara.mustache.java:compiler:${versions.mustache}", optional, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "com.github.spullara.mustache.java:compiler:${project.versions.mustache}", +++ b/buildSrc/version.properties, +mustache          = 0.9.1, +++ b/core/build.gradle, +  // templating, +  compile "com.github.spullara.mustache.java:compiler:${versions.mustache}", optional, +, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryParser.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.HasContextAndHeaders;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.common.xcontent.XContent;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import static org.elasticsearch.common.Strings.hasLength;, +, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "com.github.spullara.mustache.java:compiler:${project.versions.mustache}", +++ b/buildSrc/version.properties, +mustache          = 0.9.1, +++ b/core/build.gradle, +  // templating, +  compile "com.github.spullara.mustache.java:compiler:${versions.mustache}", optional, +, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryParser.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.HasContextAndHeaders;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.common.xcontent.XContent;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import static org.elasticsearch.common.Strings.hasLength;, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +                        // normalize with toRealPath to get symlinks out of our hair, +                        bundle.urls.add(jar.toRealPath().toUri().toURL());, +                            // normalize with toRealPath to get symlinks out of our hair, +                            urls.add(jar.toRealPath().toUri().toURL());, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "com.github.spullara.mustache.java:compiler:${project.versions.mustache}", +++ b/buildSrc/version.properties, +mustache          = 0.9.1, +++ b/core/build.gradle, +  // templating, +  compile "com.github.spullara.mustache.java:compiler:${versions.mustache}", optional, +, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryParser.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.HasContextAndHeaders;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.common.xcontent.XContent;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +import org.elasticsearch.search.builder.SearchSourceBuilder;, +import static org.elasticsearch.common.Strings.hasLength;, +, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +                        // normalize with toRealPath to get symlinks out of our hair, +                        bundle.urls.add(jar.toRealPath().toUri().toURL());, +                            // normalize with toRealPath to get symlinks out of our hair, +                            urls.add(jar.toRealPath().toUri().toURL());, +++ b/core/src/main/java/org/elasticsearch/rest/action/admin/indices/validate/template/RestRenderSearchTemplateAction.java, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;, +            template = new Template(templateId, ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, params);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +            provided "com.github.spullara.mustache.java:compiler:${project.versions.mustache}", +++ b/buildSrc/version.properties, +mustache          = 0.9.1, +++ b/core/build.gradle, +  // templating, +  compile "com.github.spullara.mustache.java:compiler:${versions.mustache}", optional, +, +++ b/core/src/main/java/org/elasticsearch/index/query/TemplateQueryParser.java, +import org.elasticsearch.ElasticsearchParseException;, +import org.elasticsearch.common.HasContextAndHeaders;, +import org.elasticsearch.common.bytes.BytesReference;, +import org.elasticsearch.common.lease.Releasables;, +import org.elasticsearch.common.xcontent.XContent;, +import org.elasticsearch.common.xcontent.XContentFactory;, +import org.elasticsearch.script.mustache.MustacheScriptEngineService;]