[+++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);, +        if (logger.isTraceEnabled()) {, +        String requestLine = "curl -iX " + request.getMethod() + " '" + host + request.getRequestLine().getUri() + "'";, +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);, +        if (logger.isTraceEnabled()) {, +        String requestLine = "curl -iX " + request.getMethod() + " '" + host + request.getRequestLine().getUri() + "'";, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +        URI uri = new URI("/index/type/_api");, +        String expected = "curl -iX " + request.getMethod() + " '" + host + uri + "'";, +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);, +        if (logger.isTraceEnabled()) {, +        String requestLine = "curl -iX " + request.getMethod() + " '" + host + request.getRequestLine().getUri() + "'";, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +        URI uri = new URI("/index/type/_api");, +        String expected = "curl -iX " + request.getMethod() + " '" + host + uri + "'";, +++ b/client/sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +        private Scheme scheme;, +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);, +        if (logger.isTraceEnabled()) {, +        String requestLine = "curl -iX " + request.getMethod() + " '" + host + request.getRequestLine().getUri() + "'";, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +        URI uri = new URI("/index/type/_api");, +        String expected = "curl -iX " + request.getMethod() + " '" + host + uri + "'";, +++ b/client/sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +        private Scheme scheme;, +++ b/client/sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +            HostsSniffer sniffer = new HostsSniffer(restClient, sniffRequestTimeout, scheme);, +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);, +        if (logger.isTraceEnabled()) {, +        String requestLine = "curl -iX " + request.getMethod() + " '" + host + request.getRequestLine().getUri() + "'";, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +        URI uri = new URI("/index/type/_api");, +        String expected = "curl -iX " + request.getMethod() + " '" + host + uri + "'";, +++ b/client/sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +        private Scheme scheme;, +++ b/client/sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +            HostsSniffer sniffer = new HostsSniffer(restClient, sniffRequestTimeout, scheme);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);, +        if (logger.isTraceEnabled()) {, +        String requestLine = "curl -iX " + request.getMethod() + " '" + host + request.getRequestLine().getUri() + "'";, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +        URI uri = new URI("/index/type/_api");, +        String expected = "curl -iX " + request.getMethod() + " '" + host + uri + "'";, +++ b/client/sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +        private Scheme scheme;, +++ b/client/sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +            HostsSniffer sniffer = new HostsSniffer(restClient, sniffRequestTimeout, scheme);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);, +        if (logger.isTraceEnabled()) {, +        String requestLine = "curl -iX " + request.getMethod() + " '" + host + request.getRequestLine().getUri() + "'";, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +        URI uri = new URI("/index/type/_api");, +        String expected = "curl -iX " + request.getMethod() + " '" + host + uri + "'";, +++ b/client/sniffer/src/main/java/org/elasticsearch/client/sniff/HostsSniffer.java, +        private Scheme scheme;, +++ b/client/sniffer/src/test/java/org/elasticsearch/client/sniff/HostsSnifferTests.java, +            HostsSniffer sniffer = new HostsSniffer(restClient, sniffRequestTimeout, scheme);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FunctionScoreQuery.java, +++ b/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +import org.elasticsearch.plugins.RepositoryPlugin;, +            modules.add(new RepositoriesModule(environment, pluginsService.filterPlugins(RepositoryPlugin.class)));, +++ b/.github/ISSUE_TEMPLATE.md, +in your new issue., +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +            logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() +, +        logger.debug("request [" + request.getMethod() + " " + host + request.getRequestLine().getUri() + "] failed", e);]