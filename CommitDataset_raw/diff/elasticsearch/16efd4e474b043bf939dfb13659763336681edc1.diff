[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.ml.utils.time.TimeUtils;, +import java.util.concurrent.TimeUnit;, +        PARSER.declareString((builder, val) ->, +                builder.setQueryDelay(TimeValue.parseTimeValue(val, QUERY_DELAY.getPreferredName())), QUERY_DELAY);, +        PARSER.declareString((builder, val) ->, +                builder.setFrequency(TimeValue.parseTimeValue(val, FREQUENCY.getPreferredName())), FREQUENCY);, +     * The delay before starting to query a period of time, +    private final TimeValue queryDelay;, +     * The frequency with which queries are executed, +    private final TimeValue frequency;, +    private DatafeedConfig(String id, String jobId, TimeValue queryDelay, TimeValue frequency, List<String> indexes, List<String> types,, +        this.queryDelay = in.readOptionalWriteable(TimeValue::new);, +        this.frequency = in.readOptionalWriteable(TimeValue::new);, +    public TimeValue getQueryDelay() {, +    public TimeValue getFrequency() {, +        out.writeOptionalWriteable(queryDelay);, +        out.writeOptionalWriteable(frequency);, +        builder.field(QUERY_DELAY.getPreferredName(), queryDelay.getStringRep());, +            builder.field(FREQUENCY.getPreferredName(), frequency.getStringRep());, +        private static final TimeValue DEFAULT_QUERY_DELAY = TimeValue.timeValueMinutes(1);, +        private TimeValue queryDelay = DEFAULT_QUERY_DELAY;, +        private TimeValue frequency;, +        public void setQueryDelay(TimeValue queryDelay) {, +            TimeUtils.checkNonNegativeMultiple(queryDelay, TimeUnit.MILLISECONDS, QUERY_DELAY);, +        public void setFrequency(TimeValue frequency) {, +            TimeUtils.checkPositiveMultiple(frequency, TimeUnit.SECONDS, FREQUENCY);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.ml.utils.time.TimeUtils;, +import java.util.concurrent.TimeUnit;, +        PARSER.declareString((builder, val) ->, +                builder.setQueryDelay(TimeValue.parseTimeValue(val, QUERY_DELAY.getPreferredName())), QUERY_DELAY);, +        PARSER.declareString((builder, val) ->, +                builder.setFrequency(TimeValue.parseTimeValue(val, FREQUENCY.getPreferredName())), FREQUENCY);, +     * The delay before starting to query a period of time, +    private final TimeValue queryDelay;, +     * The frequency with which queries are executed, +    private final TimeValue frequency;, +    private DatafeedConfig(String id, String jobId, TimeValue queryDelay, TimeValue frequency, List<String> indexes, List<String> types,, +        this.queryDelay = in.readOptionalWriteable(TimeValue::new);, +        this.frequency = in.readOptionalWriteable(TimeValue::new);, +    public TimeValue getQueryDelay() {, +    public TimeValue getFrequency() {, +        out.writeOptionalWriteable(queryDelay);, +        out.writeOptionalWriteable(frequency);, +        builder.field(QUERY_DELAY.getPreferredName(), queryDelay.getStringRep());, +            builder.field(FREQUENCY.getPreferredName(), frequency.getStringRep());, +        private static final TimeValue DEFAULT_QUERY_DELAY = TimeValue.timeValueMinutes(1);, +        private TimeValue queryDelay = DEFAULT_QUERY_DELAY;, +        private TimeValue frequency;, +        public void setQueryDelay(TimeValue queryDelay) {, +            TimeUtils.checkNonNegativeMultiple(queryDelay, TimeUnit.MILLISECONDS, QUERY_DELAY);, +        public void setFrequency(TimeValue frequency) {, +            TimeUtils.checkPositiveMultiple(frequency, TimeUnit.SECONDS, FREQUENCY);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunner.java, +            TimeValue bucketSpan = job.getAnalysisConfig().getBucketSpan();, +                latestFinalBucketEndMs = buckets.results().get(0).getTimestamp().getTime() + bucketSpan.millis() - 1;, +        Duration queryDelay = Duration.ofMillis(datafeed.getQueryDelay().millis());, +        TimeValue frequency = datafeed.getFrequency();, +        TimeValue bucketSpan = job.getAnalysisConfig().getBucketSpan();, +        return frequency == null ? DefaultFrequency.ofBucketSpan(bucketSpan.seconds()) : Duration.ofSeconds(frequency.seconds());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedConfig.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.xpack.ml.utils.time.TimeUtils;, +import java.util.concurrent.TimeUnit;, +        PARSER.declareString((builder, val) ->, +                builder.setQueryDelay(TimeValue.parseTimeValue(val, QUERY_DELAY.getPreferredName())), QUERY_DELAY);, +        PARSER.declareString((builder, val) ->, +                builder.setFrequency(TimeValue.parseTimeValue(val, FREQUENCY.getPreferredName())), FREQUENCY);, +     * The delay before starting to query a period of time, +    private final TimeValue queryDelay;, +     * The frequency with which queries are executed, +    private final TimeValue frequency;, +    private DatafeedConfig(String id, String jobId, TimeValue queryDelay, TimeValue frequency, List<String> indexes, List<String> types,, +        this.queryDelay = in.readOptionalWriteable(TimeValue::new);, +        this.frequency = in.readOptionalWriteable(TimeValue::new);, +    public TimeValue getQueryDelay() {, +    public TimeValue getFrequency() {, +        out.writeOptionalWriteable(queryDelay);, +        out.writeOptionalWriteable(frequency);, +        builder.field(QUERY_DELAY.getPreferredName(), queryDelay.getStringRep());, +            builder.field(FREQUENCY.getPreferredName(), frequency.getStringRep());, +        private static final TimeValue DEFAULT_QUERY_DELAY = TimeValue.timeValueMinutes(1);, +        private TimeValue queryDelay = DEFAULT_QUERY_DELAY;, +        private TimeValue frequency;, +        public void setQueryDelay(TimeValue queryDelay) {, +            TimeUtils.checkNonNegativeMultiple(queryDelay, TimeUnit.MILLISECONDS, QUERY_DELAY);, +        public void setFrequency(TimeValue frequency) {, +            TimeUtils.checkPositiveMultiple(frequency, TimeUnit.SECONDS, FREQUENCY);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobRunner.java, +            TimeValue bucketSpan = job.getAnalysisConfig().getBucketSpan();, +                latestFinalBucketEndMs = buckets.results().get(0).getTimestamp().getTime() + bucketSpan.millis() - 1;, +        Duration queryDelay = Duration.ofMillis(datafeed.getQueryDelay().millis());, +        TimeValue frequency = datafeed.getFrequency();, +        TimeValue bucketSpan = job.getAnalysisConfig().getBucketSpan();, +        return frequency == null ? DefaultFrequency.ofBucketSpan(bucketSpan.seconds()) : Duration.ofSeconds(frequency.seconds());, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobValidator.java, +        if (analysisConfig.getLatency() != null && analysisConfig.getLatency().seconds() > 0) {]