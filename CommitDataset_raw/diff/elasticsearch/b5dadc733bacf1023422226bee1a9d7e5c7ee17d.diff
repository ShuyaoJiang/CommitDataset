[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.xpack.ml.job.JobManager;, +import org.elasticsearch.xpack.ml.job.persistence.JobProvider;, +    public static class TransportAction extends HandledTransportAction<Request, Response> {, +        private final ClusterService clusterService;, +        public TransportAction(Settings settings, ThreadPool threadPool,, +                TransportService transportService, ActionFilters actionFilters,, +                IndexNameExpressionResolver indexNameExpressionResolver, JobProvider jobProvider,, +                JobManager jobManager, Client client, ClusterService clusterService,, +            super(settings, NAME, threadPool, transportService, actionFilters,, +            this.clusterService = clusterService;, +        protected void doExecute(Request request, ActionListener<Response> listener) {, +            ClusterState state = clusterService.state();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.xpack.ml.job.JobManager;, +import org.elasticsearch.xpack.ml.job.persistence.JobProvider;, +    public static class TransportAction extends HandledTransportAction<Request, Response> {, +        private final ClusterService clusterService;, +        public TransportAction(Settings settings, ThreadPool threadPool,, +                TransportService transportService, ActionFilters actionFilters,, +                IndexNameExpressionResolver indexNameExpressionResolver, JobProvider jobProvider,, +                JobManager jobManager, Client client, ClusterService clusterService,, +            super(settings, NAME, threadPool, transportService, actionFilters,, +            this.clusterService = clusterService;, +        protected void doExecute(Request request, ActionListener<Response> listener) {, +            ClusterState state = clusterService.state();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetFiltersAction.java, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.xpack.ml.job.JobManager;, +    public static class TransportAction extends HandledTransportAction<Request, Response> {, +        public TransportAction(Settings settings, ThreadPool threadPool,, +                TransportService transportService, ActionFilters actionFilters,, +                IndexNameExpressionResolver indexNameExpressionResolver, JobProvider jobProvider,, +                JobManager jobManager, Client client, TransportGetAction transportGetAction,, +                TransportSearchAction transportSearchAction) {, +            super(settings, NAME, threadPool, transportService, actionFilters,, +        protected void doExecute(Request request, ActionListener<Response> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/DeleteFilterAction.java, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.xpack.ml.job.JobManager;, +import org.elasticsearch.xpack.ml.job.persistence.JobProvider;, +    public static class TransportAction extends HandledTransportAction<Request, Response> {, +        private final ClusterService clusterService;, +        public TransportAction(Settings settings, ThreadPool threadPool,, +                TransportService transportService, ActionFilters actionFilters,, +                IndexNameExpressionResolver indexNameExpressionResolver, JobProvider jobProvider,, +                JobManager jobManager, Client client, ClusterService clusterService,, +            super(settings, NAME, threadPool, transportService, actionFilters,, +            this.clusterService = clusterService;, +        protected void doExecute(Request request, ActionListener<Response> listener) {, +            ClusterState state = clusterService.state();, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/GetFiltersAction.java, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.xpack.ml.job.JobManager;, +    public static class TransportAction extends HandledTransportAction<Request, Response> {, +        public TransportAction(Settings settings, ThreadPool threadPool,, +                TransportService transportService, ActionFilters actionFilters,, +                IndexNameExpressionResolver indexNameExpressionResolver, JobProvider jobProvider,, +                JobManager jobManager, Client client, TransportGetAction transportGetAction,, +                TransportSearchAction transportSearchAction) {, +            super(settings, NAME, threadPool, transportService, actionFilters,, +        protected void doExecute(Request request, ActionListener<Response> listener) {, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/PutFilterAction.java, +import org.elasticsearch.action.support.HandledTransportAction;, +import org.elasticsearch.client.Client;, +import org.elasticsearch.xpack.ml.job.JobManager;, +import org.elasticsearch.xpack.ml.job.persistence.JobProvider;, +    public static class TransportAction extends HandledTransportAction<Request, Response> {, +        public TransportAction(Settings settings, ThreadPool threadPool,, +                TransportService transportService, ActionFilters actionFilters,, +                IndexNameExpressionResolver indexNameExpressionResolver, JobProvider jobProvider,, +                JobManager jobManager, Client client, TransportBulkAction transportBulkAction) {, +            super(settings, NAME, threadPool, transportService, actionFilters,, +        protected void doExecute(Request request, ActionListener<Response> listener) {, +            try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            } catch (IOException e) {, +                throw new IllegalStateException(, +                        "Failed to serialise filter with id [" + filter.getId() + "]", e);, +            }]