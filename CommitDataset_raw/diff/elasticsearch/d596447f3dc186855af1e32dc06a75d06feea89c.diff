[+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        final Response response = client().performRequest(new Request("GET", "/_nodes/settings"));, +        final Request request = new Request("GET", "/_cluster/settings");, +        request.addParameter("pretty", "neither-true-nor-false");, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +        final Request request = new Request("GET", "/_cluster/settings");, +        final RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Content-Type", "\t");, +        request.setOptions(options);, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        final Response response = client().performRequest(new Request("GET", "/_nodes/settings"));, +        final Request request = new Request("GET", "/_cluster/settings");, +        request.addParameter("pretty", "neither-true-nor-false");, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +        final Request request = new Request("GET", "/_cluster/settings");, +        final RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Content-Type", "\t");, +        request.setOptions(options);, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("PUT", "/" + indexName + "/" + typeName + "/" + "1");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +            Request request = new Request("POST", "/_aliases");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +            Request request = new Request("PUT", "/_template/template");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +, +            Request request = new Request("PUT", "/test-no-source");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +        Request request = new Request("HEAD", url);, +        for (Map.Entry<String, String> param : params.entrySet()) {, +            request.addParameter(param.getKey(), param.getValue());, +        }, +        Response response = client().performRequest(request);, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        final Response response = client().performRequest(new Request("GET", "/_nodes/settings"));, +        final Request request = new Request("GET", "/_cluster/settings");, +        request.addParameter("pretty", "neither-true-nor-false");, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +        final Request request = new Request("GET", "/_cluster/settings");, +        final RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Content-Type", "\t");, +        request.setOptions(options);, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("PUT", "/" + indexName + "/" + typeName + "/" + "1");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +            Request request = new Request("POST", "/_aliases");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +            Request request = new Request("PUT", "/_template/template");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +, +            Request request = new Request("PUT", "/test-no-source");, +            request.setJsonEntity(Strings.toString(builder));, +            client().performRequest(request);, +        Request request = new Request("HEAD", url);, +        for (Map.Entry<String, String> param : params.entrySet()) {, +            request.addParameter(param.getKey(), param.getValue());, +        }, +        Response response = client().performRequest(request);, +++ b/plugins/repository-hdfs/src/test/java/org/elasticsearch/repositories/hdfs/HaHdfsFailoverTestSuiteIT.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("PUT", "/_snapshot/hdfs_ha_repo_read");, +            request.setJsonEntity(, +                "}");, +            Response response = client.performRequest(request);, +            Response response = client.performRequest(new Request("GET", "/_snapshot/hdfs_ha_repo_read/_all"));, +            Response response = client.performRequest(new Request("GET", "/_snapshot/hdfs_ha_repo_read/_all"));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4BadRequestIT.java, +import org.elasticsearch.client.Request;, +import org.elasticsearch.client.RequestOptions;, +        final Response response = client().performRequest(new Request("GET", "/_nodes/settings"));, +        final Request request = new Request("GET", "/_cluster/settings");, +        request.addParameter("pretty", "neither-true-nor-false");, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +        final Request request = new Request("GET", "/_cluster/settings");, +        final RequestOptions.Builder options = request.getOptions().toBuilder();, +        options.addHeader("Content-Type", "\t");, +        request.setOptions(options);, +        final ResponseException e = expectThrows(ResponseException.class, () -> client().performRequest(request));, +++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java, +import org.elasticsearch.client.Request;, +            Request request = new Request("PUT", "/" + indexName + "/" + typeName + "/" + "1");, +            request.setJsonEntity(Strings.toString(builder));]