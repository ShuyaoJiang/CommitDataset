[+++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +    private SuggestBuilder suggest;, +     * The suggestion query to get correction suggestions for, +        return suggest;, +    public SuggestRequest suggest(SuggestBuilder suggest) {, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        this.suggest = suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        suggest.writeTo(out);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +            builder = suggest.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        return "[" + Arrays.toString(indices) + "]" + ", suggest[" + sSource + "]";, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +    private SuggestBuilder suggest;, +     * The suggestion query to get correction suggestions for, +        return suggest;, +    public SuggestRequest suggest(SuggestBuilder suggest) {, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        this.suggest = suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        suggest.writeTo(out);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +            builder = suggest.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        return "[" + Arrays.toString(indices) + "]" + ", suggest[" + sSource + "]";, +++ b/core/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java, +                suggestRequest.suggest(SuggestBuilder.fromXContent(context, suggesters));, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +    private SuggestBuilder suggest;, +     * The suggestion query to get correction suggestions for, +        return suggest;, +    public SuggestRequest suggest(SuggestBuilder suggest) {, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        this.suggest = suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        suggest.writeTo(out);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +            builder = suggest.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        return "[" + Arrays.toString(indices) + "]" + ", suggest[" + sSource + "]";, +++ b/core/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java, +                suggestRequest.suggest(SuggestBuilder.fromXContent(context, suggesters));, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +                    suggestBuilder = SuggestBuilder.fromXContent(context, suggesters);, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +    private SuggestBuilder suggest;, +     * The suggestion query to get correction suggestions for, +        return suggest;, +    public SuggestRequest suggest(SuggestBuilder suggest) {, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        this.suggest = suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        suggest.writeTo(out);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +            builder = suggest.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        return "[" + Arrays.toString(indices) + "]" + ", suggest[" + sSource + "]";, +++ b/core/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java, +                suggestRequest.suggest(SuggestBuilder.fromXContent(context, suggesters));, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +                    suggestBuilder = SuggestBuilder.fromXContent(context, suggesters);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestBuilder.java, +    public static SuggestBuilder fromXContent(QueryParseContext parseContext, Suggesters suggesters) throws IOException {, +        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {, +            parser.nextToken();, +        assert parser.currentToken() == XContentParser.Token.START_OBJECT;, +++ b/core/src/main/java/org/elasticsearch/action/suggest/SuggestRequest.java, +    private SuggestBuilder suggest;, +     * The suggestion query to get correction suggestions for, +        return suggest;, +    public SuggestRequest suggest(SuggestBuilder suggest) {, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        this.suggest = suggest;, +        suggest = SuggestBuilder.PROTOTYPE.readFrom(in);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +        suggest.writeTo(out);, +        Objects.requireNonNull(suggest, "suggest must not be null");, +            builder = suggest.toXContent(builder, ToXContent.EMPTY_PARAMS);, +        return "[" + Arrays.toString(indices) + "]" + ", suggest[" + sSource + "]";, +++ b/core/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java, +                suggestRequest.suggest(SuggestBuilder.fromXContent(context, suggesters));, +++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java, +                    suggestBuilder = SuggestBuilder.fromXContent(context, suggesters);, +++ b/core/src/main/java/org/elasticsearch/search/suggest/SuggestBuilder.java, +    public static SuggestBuilder fromXContent(QueryParseContext parseContext, Suggesters suggesters) throws IOException {, +        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {, +            parser.nextToken();, +        assert parser.currentToken() == XContentParser.Token.START_OBJECT;, +++ b/core/src/test/java/org/elasticsearch/search/suggest/AbstractSuggestionBuilderTestCase.java, +import org.elasticsearch.indices.query.IndicesQueriesRegistry;, +import org.elasticsearch.search.SearchModule;, +    protected static IndicesQueriesRegistry queriesRegistry;, +    protected static ParseFieldMatcher parseFieldMatcher;, +    protected static Suggesters suggesters;, +        queriesRegistry = new SearchModule(Settings.EMPTY, namedWriteableRegistry).buildQueryParserRegistry();, +        parseFieldMatcher = ParseFieldMatcher.STRICT;, +        suggesters = null;, +        queriesRegistry = null;, +]