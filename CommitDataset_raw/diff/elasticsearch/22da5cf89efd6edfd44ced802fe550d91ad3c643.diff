[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            Setting.boolSetting("node.ml", XPackSettings.MACHINE_LEARNING_ENABLED, Property.NodeScope);, +    public static final String MAX_OPEN_JOBS_NODE_ATTR = "ml.max_open_jobs";, +            // TODO: the simple true/false flag will not be required once all supported versions have the number - consider removing in 7.0, +            additionalSettings.put("node.attr." + MAX_OPEN_JOBS_NODE_ATTR,, +                    AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            Setting.boolSetting("node.ml", XPackSettings.MACHINE_LEARNING_ENABLED, Property.NodeScope);, +    public static final String MAX_OPEN_JOBS_NODE_ATTR = "ml.max_open_jobs";, +            // TODO: the simple true/false flag will not be required once all supported versions have the number - consider removing in 7.0, +            additionalSettings.put("node.attr." + MAX_OPEN_JOBS_NODE_ATTR,, +                    AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        /**, +         * The maximum number of open jobs can be different on each node.  However, nodes on older versions, +         * won't add their setting to the cluster state, so for backwards compatibility with these nodes we, +         * assume the older node's setting is the same as that of the node running this code., +         * TODO: remove this member in 7.0, +         */, +        private final int fallbackMaxNumberOfOpenJobs;, +            this.fallbackMaxNumberOfOpenJobs = AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings);, +            return selectLeastLoadedMlNode(params.getJobId(), clusterState, maxConcurrentJobAllocations, fallbackMaxNumberOfOpenJobs,, +                    logger);, +                    fallbackMaxNumberOfOpenJobs, logger);, +                                              int fallbackMaxNumberOfOpenJobs, Logger logger) {, +            String maxNumberOfOpenJobsStr = nodeAttributes.get(MachineLearning.MAX_OPEN_JOBS_NODE_ATTR);, +            int maxNumberOfOpenJobs = fallbackMaxNumberOfOpenJobs;, +            // TODO: remove leniency and reject the node if the attribute is null in 7.0, +            if (maxNumberOfOpenJobsStr != null) {, +                try {, +                    maxNumberOfOpenJobs = Integer.parseInt(maxNumberOfOpenJobsStr);, +                } catch (NumberFormatException e) {, +                    String reason = "Not opening job [" + jobId + "] on node [" + node + "], because " +, +                            MachineLearning.MAX_OPEN_JOBS_NODE_ATTR + " attribute [" + maxNumberOfOpenJobsStr + "] is not an integer";, +                    logger.trace(reason);, +                    reasons.add(reason);, +                    continue;, +                }, +            }, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/MachineLearning.java, +            Setting.boolSetting("node.ml", XPackSettings.MACHINE_LEARNING_ENABLED, Property.NodeScope);, +    public static final String MAX_OPEN_JOBS_NODE_ATTR = "ml.max_open_jobs";, +            // TODO: the simple true/false flag will not be required once all supported versions have the number - consider removing in 7.0, +            additionalSettings.put("node.attr." + MAX_OPEN_JOBS_NODE_ATTR,, +                    AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/action/OpenJobAction.java, +        /**, +         * The maximum number of open jobs can be different on each node.  However, nodes on older versions, +         * won't add their setting to the cluster state, so for backwards compatibility with these nodes we, +         * assume the older node's setting is the same as that of the node running this code., +         * TODO: remove this member in 7.0, +         */, +        private final int fallbackMaxNumberOfOpenJobs;, +            this.fallbackMaxNumberOfOpenJobs = AutodetectProcessManager.MAX_RUNNING_JOBS_PER_NODE.get(settings);, +            return selectLeastLoadedMlNode(params.getJobId(), clusterState, maxConcurrentJobAllocations, fallbackMaxNumberOfOpenJobs,, +                    logger);, +                    fallbackMaxNumberOfOpenJobs, logger);, +                                              int fallbackMaxNumberOfOpenJobs, Logger logger) {, +            String maxNumberOfOpenJobsStr = nodeAttributes.get(MachineLearning.MAX_OPEN_JOBS_NODE_ATTR);, +            int maxNumberOfOpenJobs = fallbackMaxNumberOfOpenJobs;, +            // TODO: remove leniency and reject the node if the attribute is null in 7.0, +            if (maxNumberOfOpenJobsStr != null) {, +                try {, +                    maxNumberOfOpenJobs = Integer.parseInt(maxNumberOfOpenJobsStr);, +                } catch (NumberFormatException e) {, +                    String reason = "Not opening job [" + jobId + "] on node [" + node + "], because " +, +                            MachineLearning.MAX_OPEN_JOBS_NODE_ATTR + " attribute [" + maxNumberOfOpenJobsStr + "] is not an integer";, +                    logger.trace(reason);, +                    reasons.add(reason);, +                    continue;, +                }, +            }, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/integration/BasicDistributedJobsIT.java, +            expectedNodeAttr.put(MachineLearning.MAX_OPEN_JOBS_NODE_ATTR, "10");, +            expectedNodeAttr.put(MachineLearning.MAX_OPEN_JOBS_NODE_ATTR, "10");]