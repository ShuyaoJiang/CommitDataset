[+++ b/plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;, +import org.apache.lucene.search.spans.SpanQuery;, +        public SpanQuery spanPrefixQuery(String value, SpanMultiTermQueryWrapper.SpanRewriteMethod method, QueryShardContext context) {, +            SpanMultiTermQueryWrapper<?> spanMulti =, +                new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term(name(), indexedValueForSearch(value))));, +            spanMulti.setRewriteMethod(method);, +            return spanMulti;, +        public Query phraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {, +            return TextFieldMapper.createPhraseQuery(stream, name(), slop, enablePositionIncrements);, +        @Override, +        public Query multiPhraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {, +            return TextFieldMapper.createPhraseQuery(stream, name(), slop, enablePositionIncrements);, +, +        @Override, +        public Query phrasePrefixQuery(TokenStream stream, int slop, int maxExpansions) throws IOException {, +            return TextFieldMapper.createPhrasePrefixQuery(stream, name(), slop, maxExpansions);, +++ b/plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;, +import org.apache.lucene.search.spans.SpanQuery;, +        public SpanQuery spanPrefixQuery(String value, SpanMultiTermQueryWrapper.SpanRewriteMethod method, QueryShardContext context) {, +            SpanMultiTermQueryWrapper<?> spanMulti =, +                new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term(name(), indexedValueForSearch(value))));, +            spanMulti.setRewriteMethod(method);, +            return spanMulti;, +        public Query phraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {, +            return TextFieldMapper.createPhraseQuery(stream, name(), slop, enablePositionIncrements);, +        @Override, +        public Query multiPhraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {, +            return TextFieldMapper.createPhraseQuery(stream, name(), slop, enablePositionIncrements);, +, +        @Override, +        public Query phrasePrefixQuery(TokenStream stream, int slop, int maxExpansions) throws IOException {, +            return TextFieldMapper.createPhrasePrefixQuery(stream, name(), slop, maxExpansions);, +++ b/server/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +import java.util.Objects;, +    private final String field;, +    public MultiPhrasePrefixQuery(String field) {, +        this.field = Objects.requireNonNull(field);, +    }, +, +        if (field.equals(f) == false) {, +++ b/plugins/mapper-annotated-text/src/main/java/org/elasticsearch/index/mapper/annotatedtext/AnnotatedTextFieldMapper.java, +import org.apache.lucene.search.PrefixQuery;, +import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;, +import org.apache.lucene.search.spans.SpanQuery;, +        public SpanQuery spanPrefixQuery(String value, SpanMultiTermQueryWrapper.SpanRewriteMethod method, QueryShardContext context) {, +            SpanMultiTermQueryWrapper<?> spanMulti =, +                new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term(name(), indexedValueForSearch(value))));, +            spanMulti.setRewriteMethod(method);, +            return spanMulti;, +        public Query phraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {, +            return TextFieldMapper.createPhraseQuery(stream, name(), slop, enablePositionIncrements);, +        @Override, +        public Query multiPhraseQuery(TokenStream stream, int slop, boolean enablePositionIncrements) throws IOException {, +            return TextFieldMapper.createPhraseQuery(stream, name(), slop, enablePositionIncrements);, +, +        @Override, +        public Query phrasePrefixQuery(TokenStream stream, int slop, int maxExpansions) throws IOException {, +            return TextFieldMapper.createPhrasePrefixQuery(stream, name(), slop, maxExpansions);, +++ b/server/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java, +import java.util.Objects;, +    private final String field;, +    public MultiPhrasePrefixQuery(String field) {, +        this.field = Objects.requireNonNull(field);, +    }, +, +        if (field.equals(f) == false) {, +++ b/server/src/main/java/org/elasticsearch/common/lucene/search/SpanBooleanQueryRewriteWithMaxClause.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.search;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.IndexReaderContext;, +import org.apache.lucene.index.LeafReaderContext;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.index.Terms;, +import org.apache.lucene.index.TermsEnum;, +import org.apache.lucene.queries.SpanMatchNoDocsQuery;, +import org.apache.lucene.search.BooleanQuery;]