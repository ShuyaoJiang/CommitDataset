[+++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java, +import org.elasticsearch.common.unit.TimeValue;, +    public void testScroll() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .setSettings(Settings.builder().put(IndicesRequestCache.INDEX_CACHE_REQUEST_ENABLED_SETTING.getKey(), true)), +                .addMapping("type1", "field1", "type=text", "field2", "type=text", "field3", "type=text"), +        );, +        final int numVisible = scaledRandomIntBetween(2, 10);, +        final int numInVisible = scaledRandomIntBetween(2, 10);, +        int id = 1;, +        for (int i = 0; i < numVisible; i++) {, +            client().prepareIndex("test", "type1", String.valueOf(id++)).setSource("field1", "value1").get();, +        }, +, +        for (int i = 0; i < numInVisible; i++) {, +            client().prepareIndex("test", "type1", String.valueOf(id++)).setSource("field2", "value2").get();, +            client().prepareIndex("test", "type1", String.valueOf(id++)).setSource("field3", "value3").get();, +        }, +        refresh();, +, +        SearchResponse response = null;, +        try {, +            response = client(), +                    .filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user1", USERS_PASSWD))), +                    .prepareSearch("test"), +                    .setSize(1), +                    .setScroll(TimeValue.timeValueMinutes(1L)), +                    .setQuery(termQuery("field1", "value1")), +                    .get();, +            do {, +                assertNoFailures(response);, +                assertThat(response.getHits().getTotalHits(), is((long) numVisible));, +                assertThat(response.getHits().getAt(0).getSource().size(), is(1));, +                assertThat(response.getHits().getAt(0).getSource().get("field1"), is("value1"));, +, +                if (response.getScrollId() == null) {, +                    break;, +                }, +, +                response = client(), +                        .filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user1", USERS_PASSWD))), +                        .prepareSearchScroll(response.getScrollId()), +                        .setScroll(TimeValue.timeValueMinutes(1L)), +                        .get();, +            } while (response.getHits().getHits().length > 0);, +        } finally {, +            if (response != null) {, +                String scrollId = response.getScrollId();, +                if (scrollId != null) {, +                    client().prepareClearScroll().addScrollId(scrollId).get();, +                }, +            }, +        }, +    }, +, +++ b/elasticsearch/x-pack/shield/src/test/java/org/elasticsearch/integration/DocumentLevelSecurityTests.java, +import org.elasticsearch.common.unit.TimeValue;, +    public void testScroll() throws Exception {, +        assertAcked(client().admin().indices().prepareCreate("test"), +                .setSettings(Settings.builder().put(IndicesRequestCache.INDEX_CACHE_REQUEST_ENABLED_SETTING.getKey(), true)), +                .addMapping("type1", "field1", "type=text", "field2", "type=text", "field3", "type=text"), +        );, +        final int numVisible = scaledRandomIntBetween(2, 10);, +        final int numInVisible = scaledRandomIntBetween(2, 10);, +        int id = 1;, +        for (int i = 0; i < numVisible; i++) {, +            client().prepareIndex("test", "type1", String.valueOf(id++)).setSource("field1", "value1").get();, +        }, +, +        for (int i = 0; i < numInVisible; i++) {, +            client().prepareIndex("test", "type1", String.valueOf(id++)).setSource("field2", "value2").get();, +            client().prepareIndex("test", "type1", String.valueOf(id++)).setSource("field3", "value3").get();, +        }, +        refresh();, +, +        SearchResponse response = null;, +        try {, +            response = client(), +                    .filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user1", USERS_PASSWD))), +                    .prepareSearch("test"), +                    .setSize(1), +                    .setScroll(TimeValue.timeValueMinutes(1L)), +                    .setQuery(termQuery("field1", "value1")), +                    .get();, +            do {, +                assertNoFailures(response);, +                assertThat(response.getHits().getTotalHits(), is((long) numVisible));, +                assertThat(response.getHits().getAt(0).getSource().size(), is(1));, +                assertThat(response.getHits().getAt(0).getSource().get("field1"), is("value1"));, +, +                if (response.getScrollId() == null) {, +                    break;, +                }, +, +                response = client(), +                        .filterWithHeader(Collections.singletonMap(BASIC_AUTH_HEADER, basicAuthHeaderValue("user1", USERS_PASSWD))), +                        .prepareSearchScroll(response.getScrollId()), +                        .setScroll(TimeValue.timeValueMinutes(1L)), +                        .get();, +            } while (response.getHits().getHits().length > 0);]