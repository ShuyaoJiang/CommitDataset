[+++ b/docs/reference/docs/multi-termvectors.asciidoc, +Multi termvectors API allows to get multiple termvectors at once. The, +documents from which to retrieve the term vectors are specified by an index,, +type and id. But the documents could also be artificially provided coming[1.4.0]., +The response includes a `docs`, +Additionally coming[1.4.0], just like for the <<docs-termvectors,termvectors>>, +API, term vectors could be generated for user provided documents. The syntax, +is similar to the <<search-percolate,percolator>> API. The mapping used is, +determined by `_index` and `_type`., +, +[source,js], +--------------------------------------------------, +curl 'localhost:9200/_mtermvectors' -d '{, +   "docs": [, +      {, +         "_index": "testidx",, +         "_type": "test",, +         "doc" : {, +            "fullname" : "John Doe",, +            "text" : "twitter test test test", +         }, +      },, +      {, +         "_index": "testidx",, +         "_type": "test",, +         "doc" : {, +           "fullname" : "Jane Doe",, +           "text" : "Another twitter test ...", +         }, +      }, +   ], +}', +--------------------------------------------------, +++ b/docs/reference/docs/multi-termvectors.asciidoc, +Multi termvectors API allows to get multiple termvectors at once. The, +documents from which to retrieve the term vectors are specified by an index,, +type and id. But the documents could also be artificially provided coming[1.4.0]., +The response includes a `docs`, +Additionally coming[1.4.0], just like for the <<docs-termvectors,termvectors>>, +API, term vectors could be generated for user provided documents. The syntax, +is similar to the <<search-percolate,percolator>> API. The mapping used is, +determined by `_index` and `_type`., +, +[source,js], +--------------------------------------------------, +curl 'localhost:9200/_mtermvectors' -d '{, +   "docs": [, +      {, +         "_index": "testidx",, +         "_type": "test",, +         "doc" : {, +            "fullname" : "John Doe",, +            "text" : "twitter test test test", +         }, +      },, +      {, +         "_index": "testidx",, +         "_type": "test",, +         "doc" : {, +           "fullname" : "Jane Doe",, +           "text" : "Another twitter test ...", +         }, +      }, +   ], +}', +--------------------------------------------------, +++ b/docs/reference/docs/termvectors.asciidoc, +Returns information and statistics on terms in the fields of a particular, +document. The document could be stored in the index or artificially provided, +by the user coming[1.4.0]. Note that for documents stored in the index, this, +is a near realtime API as the term vectors are not available until the next, +refresh., +computed on the fly if possible. Additionally, term vectors could be computed, +for documents not even existing in the index, but instead provided by the user., +coming[1.4.0,The ability to computed term vectors on the fly as well as support for artificial documents is only available from 1.4.0 onwards (see below example 2 and 3 respectively)], +numbers have no meaning in this context. By default, when requesting, +term vectors of artificial documents, a shard to get the statistics from, +is randomly selected. Use `routing` only to hit a particular shard., +Term vectors which are not explicitly stored in the index are automatically, +, +[float], +=== Example 3 coming[1.4.0], +, +Additionally, term vectors can also be generated for artificial documents,, +that is for documents not present in the index. The syntax is similar to the, +<<search-percolate,percolator>> API. For example, the following request would, +return the same results as in example 1. The mapping used is determined by the, +`index` and `type`., +, +[WARNING], +======, +If dynamic mapping is turned on (default), the document fields not in the original, +mapping will be dynamically created., +======, +, +[source,js], +--------------------------------------------------, +curl -XGET 'http://localhost:9200/twitter/tweet/_termvector' -d '{, +  "doc" : {, +    "fullname" : "John Doe",]