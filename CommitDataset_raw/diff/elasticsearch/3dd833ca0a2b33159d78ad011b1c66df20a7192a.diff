[+++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.security.Permission;, +import java.security.PermissionCollection;, +import java.security.Permissions;, +import java.util.Enumeration;, +    private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, boolean isBatch, Environment env) throws Exception {, +, +        // read optional security policy from each bundled plugin, and confirm all exceptions one time with user, +, +        Set<String> permissions = new HashSet<>();, +        boolean hasNativeController = false;, +            final PluginInfo info = loadPluginInfo(terminal, plugin, isBatch, env);, +, +            hasNativeController |= info.hasNativeController();, +, +            Path policy = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY);, +            if (Files.exists(policy)) {, +                permissions.addAll(PluginSecurity.parsePermissions(policy, env.tmpFile()));, +            }, +        }, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, hasNativeController, isBatch);, +, +        // move support files and rename as needed to prepare the exploded plugin for its final location, +        for (int i = 0; i < pluginPaths.size(); ++i) {, +            Path pluginPath = pluginPaths.get(i);, +            PluginInfo info = pluginInfos.get(i);, +            installPluginSupportFiles(info, pluginPath, env.binFile().resolve(metaInfo.getName()),, +            if (pluginPath.getFileName().toString().equals(info.getName()) == false) {, +                Files.move(pluginPath, pluginPath.getParent().resolve(info.getName()), StandardCopyOption.ATOMIC_MOVE);, +        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, isBatch, env);, +        // read optional security policy (extra permissions), if it exists, confirm or warn the user, +        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY);, +        if (Files.exists(policy)) {, +            Set<String> permissions = PluginSecurity.parsePermissions(policy, env.tmpFile());, +            PluginSecurity.confirmPolicyExceptions(terminal, permissions, info.hasNativeController(), isBatch);, +        }, +, +++ b/distribution/tools/plugin-cli/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +import java.security.Permission;, +import java.security.PermissionCollection;, +import java.security.Permissions;, +import java.util.Enumeration;, +    private PluginInfo loadPluginInfo(Terminal terminal, Path pluginRoot, boolean isBatch, Environment env) throws Exception {, +, +        // read optional security policy from each bundled plugin, and confirm all exceptions one time with user, +, +        Set<String> permissions = new HashSet<>();, +        boolean hasNativeController = false;, +            final PluginInfo info = loadPluginInfo(terminal, plugin, isBatch, env);, +, +            hasNativeController |= info.hasNativeController();, +, +            Path policy = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY);, +            if (Files.exists(policy)) {, +                permissions.addAll(PluginSecurity.parsePermissions(policy, env.tmpFile()));, +            }, +        }, +        PluginSecurity.confirmPolicyExceptions(terminal, permissions, hasNativeController, isBatch);, +, +        // move support files and rename as needed to prepare the exploded plugin for its final location, +        for (int i = 0; i < pluginPaths.size(); ++i) {, +            Path pluginPath = pluginPaths.get(i);, +            PluginInfo info = pluginInfos.get(i);, +            installPluginSupportFiles(info, pluginPath, env.binFile().resolve(metaInfo.getName()),, +            if (pluginPath.getFileName().toString().equals(info.getName()) == false) {, +                Files.move(pluginPath, pluginPath.getParent().resolve(info.getName()), StandardCopyOption.ATOMIC_MOVE);, +        final PluginInfo info = loadPluginInfo(terminal, tmpRoot, isBatch, env);, +        // read optional security policy (extra permissions), if it exists, confirm or warn the user, +        Path policy = tmpRoot.resolve(PluginInfo.ES_PLUGIN_POLICY);, +        if (Files.exists(policy)) {, +            Set<String> permissions = PluginSecurity.parsePermissions(policy, env.tmpFile());, +            PluginSecurity.confirmPolicyExceptions(terminal, permissions, info.hasNativeController(), isBatch);, +        }, +, +++ b/distribution/tools/plugin-cli/src/test/java/org/elasticsearch/plugins/InstallPluginCommandTests.java, +import static org.hamcrest.Matchers.empty;, +    private final MockTerminal terminal = new MockTerminal();, +        terminal.reset();, +        return createPlugin(name, structure, additionalProps).toUri().toURL().toString();, +    static void writePlugin(String name, Path structure, String... additionalProps) throws IOException {, +    static void writePluginSecurityPolicy(Path pluginDir, String... permissions) throws IOException {, +        StringBuilder securityPolicyContent = new StringBuilder("grant {\n  ");, +        for (String permission : permissions) {, +            securityPolicyContent.append("permission java.lang.RuntimePermission \"");, +            securityPolicyContent.append(permission);, +            securityPolicyContent.append("\";");, +        }, +        securityPolicyContent.append("\n};\n");, +        Files.write(pluginDir.resolve("plugin-security.policy"), securityPolicyContent.toString().getBytes(StandardCharsets.UTF_8));, +    }, +, +    static Path createPlugin(String name, Path structure, String... additionalProps) throws IOException {, +        writePlugin(name, structure, additionalProps);, +    void installPlugin(String pluginUrl, Path home) throws Exception {, +        installPlugin(pluginUrl, home, skipJarHellCommand);, +    void installPlugin(String pluginUrl, Path home, InstallPluginCommand command) throws Exception {, +        command.execute(terminal, pluginUrl, false, env);, +        writePlugin("fake1", pluginDir.resolve("fake1"));, +        writePlugin("fake2", pluginDir.resolve("fake2"));, +        writePlugin("fake1", pluginDir.resolve("fake1"));]