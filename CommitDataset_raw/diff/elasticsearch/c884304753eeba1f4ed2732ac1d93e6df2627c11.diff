[+++ b/src/main/java/org/elasticsearch/search/dfs/CachedDfSource.java, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +           return super.termStatistics(term, context);, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +           return super.collectionStatistics(field);, +++ b/src/main/java/org/elasticsearch/search/dfs/CachedDfSource.java, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +           return super.termStatistics(term, context);, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +           return super.collectionStatistics(field);, +++ b/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +++ b/src/main/java/org/elasticsearch/search/dfs/CachedDfSource.java, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +           return super.termStatistics(term, context);, +            // we don't have stats for this - this might be a must_not clauses etc. that doesn't allow extract terms on the query, +           return super.collectionStatistics(field);, +++ b/src/main/java/org/elasticsearch/search/query/QueryPhase.java, +++ b/src/test/java/org/elasticsearch/test/integration/search/query/SimpleQueryTests.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;, +import org.elasticsearch.action.search.SearchType;, +import org.elasticsearch.index.query.MatchQueryBuilder.Type;, +import java.io.IOException;, +    @Test // see #2926, +    public void testMustNot() throws ElasticSearchException, IOException {, +        client.admin().indices().prepareDelete().execute().actionGet();, +        client.admin().indices().prepareCreate("test").setSettings(, +                ImmutableSettings.settingsBuilder(), +                        .put("index.number_of_shards", 2), +                        .put("index.number_of_replicas", 0), +        ), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "1").setSource(jsonBuilder().startObject(), +                .field("description", "foo other anything bar"), +                .endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "2").setSource(jsonBuilder().startObject(), +                .field("description", "foo other anything"), +                .endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "3").setSource(jsonBuilder().startObject(), +                .field("description", "foo other"), +                .endObject()), +                .execute().actionGet();, +, +        client.prepareIndex("test", "test", "4").setSource(jsonBuilder().startObject(), +                .field("description", "foo"), +                .endObject()), +                .execute().actionGet();, +        , +        client.admin().indices().prepareRefresh().execute().actionGet();, +        , +        SearchResponse response = client.prepareSearch("test"), +                .setQuery(QueryBuilders.matchAllQuery()), +                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH), +                .execute().actionGet();, +        assertThat(response.getShardFailures().length, equalTo(0));, +        assertThat(response.getHits().totalHits(), equalTo(4l));, +        , +        response = client.prepareSearch("test").setQuery(, +                QueryBuilders.boolQuery(), +                        .mustNot(QueryBuilders.matchQuery("description", "anything").type(Type.BOOLEAN)), +        ).setSearchType(SearchType.DFS_QUERY_THEN_FETCH).execute().actionGet();, +        assertThat(response.getShardFailures().length, equalTo(0));, +        assertThat(response.getHits().totalHits(), equalTo(2l));, +    }, +]