[+++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/docs/src/test/java/org/elasticsearch/smoketest/XDocsClientYamlTestSuiteIT.java, +import static org.hamcrest.Matchers.is;, +        if (isWatcherTest()) {, +            assertBusy(() -> {, +                ClientYamlTestResponse response =, +                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap());, +                String state = (String) response.evaluate("stats.0.watcher_state");, +                if (state.equals("started") == false || state.equals("starting") == false) {, +                assertThat(state, is("started"));, +            });, +        }, +    }, +, +    private boolean isWatcherTest() {, +        String testName = getTestName();, +        return testName != null && testName.contains("watcher");, +    }, +, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/docs/src/test/java/org/elasticsearch/smoketest/XDocsClientYamlTestSuiteIT.java, +import static org.hamcrest.Matchers.is;, +        if (isWatcherTest()) {, +            assertBusy(() -> {, +                ClientYamlTestResponse response =, +                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap());, +                String state = (String) response.evaluate("stats.0.watcher_state");, +                if (state.equals("started") == false || state.equals("starting") == false) {, +                assertThat(state, is("started"));, +            });, +        }, +    }, +, +    private boolean isWatcherTest() {, +        String testName = getTestName();, +        return testName != null && testName.contains("watcher");, +    }, +, +++ b/plugin/build.gradle, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/docs/src/test/java/org/elasticsearch/smoketest/XDocsClientYamlTestSuiteIT.java, +import static org.hamcrest.Matchers.is;, +        if (isWatcherTest()) {, +            assertBusy(() -> {, +                ClientYamlTestResponse response =, +                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap());, +                String state = (String) response.evaluate("stats.0.watcher_state");, +                if (state.equals("started") == false || state.equals("starting") == false) {, +                assertThat(state, is("started"));, +            });, +        }, +    }, +, +    private boolean isWatcherTest() {, +        String testName = getTestName();, +        return testName != null && testName.contains("watcher");, +    }, +, +++ b/plugin/build.gradle, +++ /dev/null, +++ b/build.gradle, +    approvedLicenses = ['Elasticsearch Confidential'], +++ b/dev-tools/checkstyle_suppressions.xml, +++ b/dev-tools/ci, +    pick_clone_target, +++ b/docs/src/test/java/org/elasticsearch/smoketest/XDocsClientYamlTestSuiteIT.java, +import static org.hamcrest.Matchers.is;, +        if (isWatcherTest()) {, +            assertBusy(() -> {, +                ClientYamlTestResponse response =, +                        getAdminExecutionContext().callApi("xpack.watcher.stats", emptyMap(), emptyList(), emptyMap());, +                String state = (String) response.evaluate("stats.0.watcher_state");, +                if (state.equals("started") == false || state.equals("starting") == false) {, +                assertThat(state, is("started"));, +            });, +        }, +    }, +]