[+++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +        assert ThreadPool.assertCurrentMethodIsNotCalledRecursively();, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +        assert ThreadPool.assertCurrentMethodIsNotCalledRecursively();, +++ b/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public static boolean assertCurrentMethodIsNotCalledRecursively() {, +        final StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();, +        assert stackTraceElements.length >= 3 : stackTraceElements.length;, +        assert stackTraceElements[0].getMethodName().equals("getStackTrace") : stackTraceElements[0];, +        assert stackTraceElements[1].getMethodName().equals("assertCurrentMethodIsNotCalledRecursively") : stackTraceElements[1];, +        final StackTraceElement testingMethod = stackTraceElements[2];, +        for (int i = 3; i < stackTraceElements.length; i++) {, +            assert stackTraceElements[i].getClassName().equals(testingMethod.getClassName()) == false, +                || stackTraceElements[i].getMethodName().equals(testingMethod.getMethodName()) == false :, +                testingMethod.getClassName() + "#" + testingMethod.getMethodName() + " is called recursively";, +        }, +        return true;, +    }, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +        assert ThreadPool.assertCurrentMethodIsNotCalledRecursively();, +++ b/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public static boolean assertCurrentMethodIsNotCalledRecursively() {, +        final StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();, +        assert stackTraceElements.length >= 3 : stackTraceElements.length;, +        assert stackTraceElements[0].getMethodName().equals("getStackTrace") : stackTraceElements[0];, +        assert stackTraceElements[1].getMethodName().equals("assertCurrentMethodIsNotCalledRecursively") : stackTraceElements[1];, +        final StackTraceElement testingMethod = stackTraceElements[2];, +        for (int i = 3; i < stackTraceElements.length; i++) {, +            assert stackTraceElements[i].getClassName().equals(testingMethod.getClassName()) == false, +                || stackTraceElements[i].getMethodName().equals(testingMethod.getMethodName()) == false :, +                testingMethod.getClassName() + "#" + testingMethod.getMethodName() + " is called recursively";, +        }, +        return true;, +    }, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardRetentionLeaseTests.java, +import org.elasticsearch.threadpool.TestThreadPool;, +        return new TestThreadPool(getClass().getName(), threadPoolSettings()) {, +            public long absoluteTimeInMillis() {, +                return currentTimeMillis.get();, +            }, +        };, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +        assert ThreadPool.assertCurrentMethodIsNotCalledRecursively();, +++ b/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public static boolean assertCurrentMethodIsNotCalledRecursively() {, +        final StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();, +        assert stackTraceElements.length >= 3 : stackTraceElements.length;, +        assert stackTraceElements[0].getMethodName().equals("getStackTrace") : stackTraceElements[0];, +        assert stackTraceElements[1].getMethodName().equals("assertCurrentMethodIsNotCalledRecursively") : stackTraceElements[1];, +        final StackTraceElement testingMethod = stackTraceElements[2];, +        for (int i = 3; i < stackTraceElements.length; i++) {, +            assert stackTraceElements[i].getClassName().equals(testingMethod.getClassName()) == false, +                || stackTraceElements[i].getMethodName().equals(testingMethod.getMethodName()) == false :, +                testingMethod.getClassName() + "#" + testingMethod.getMethodName() + " is called recursively";, +        }, +        return true;, +    }, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardRetentionLeaseTests.java, +import org.elasticsearch.threadpool.TestThreadPool;, +        return new TestThreadPool(getClass().getName(), threadPoolSettings()) {, +            public long absoluteTimeInMillis() {, +                return currentTimeMillis.get();, +            }, +        };, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +                            ActionListener.wrap(, +                                r -> {, +                                    assertFalse(replica.isSyncNeeded());, +                                    listener.onResponse(r);, +                                },, +                                listener::onFailure, +                            ));, +                    super.prepareForTranslogOperations(fileBasedRecovery, totalTranslogOps,, +                        ActionListener.wrap(, +                            r -> {, +                                listener.onResponse(r);, +                            }, listener::onFailure));, +                            ActionListener.wrap(, +                                r -> {, +                                    listener.onResponse(r);, +                                }, listener::onFailure));, +                    super.finalizeRecovery(globalCheckpoint,, +                        ActionListener.wrap(, +                            r -> {, +                                assertListenerCalled.accept(replica);, +                                listener.onResponse(r);, +                            }, listener::onFailure));, +++ b/server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java, +        assert ThreadPool.assertCurrentMethodIsNotCalledRecursively();, +++ b/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public static boolean assertCurrentMethodIsNotCalledRecursively() {, +        final StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();, +        assert stackTraceElements.length >= 3 : stackTraceElements.length;, +        assert stackTraceElements[0].getMethodName().equals("getStackTrace") : stackTraceElements[0];, +        assert stackTraceElements[1].getMethodName().equals("assertCurrentMethodIsNotCalledRecursively") : stackTraceElements[1];, +        final StackTraceElement testingMethod = stackTraceElements[2];]