[+++ b/server/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +        final double lat;, +        final double lon;, +        try {, +            lat = Double.parseDouble(vals[0].trim());, +         } catch (NumberFormatException ex) {, +            throw new ElasticsearchParseException("latitude must be a number");, +        }, +        try {, +            lon = Double.parseDouble(vals[1].trim());, +        } catch (NumberFormatException ex) {, +            throw new ElasticsearchParseException("longitude must be a number");, +        }, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +        final double lat;, +        final double lon;, +        try {, +            lat = Double.parseDouble(vals[0].trim());, +         } catch (NumberFormatException ex) {, +            throw new ElasticsearchParseException("latitude must be a number");, +        }, +        try {, +            lon = Double.parseDouble(vals[1].trim());, +        } catch (NumberFormatException ex) {, +            throw new ElasticsearchParseException("longitude must be a number");, +        }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java, +            if (isNormalizable(point.lat()) && isNormalizable(point.lon())) {, +            } else {, +                throw new ElasticsearchParseException("cannot normalize the point - not a number");, +            }, +, +    private boolean isNormalizable(double coord) {, +        return Double.isNaN(coord) == false && Double.isInfinite(coord) == false;, +    }, +++ b/server/src/main/java/org/elasticsearch/common/geo/GeoPoint.java, +        final double lat;, +        final double lon;, +        try {, +            lat = Double.parseDouble(vals[0].trim());, +         } catch (NumberFormatException ex) {, +            throw new ElasticsearchParseException("latitude must be a number");, +        }, +        try {, +            lon = Double.parseDouble(vals[1].trim());, +        } catch (NumberFormatException ex) {, +            throw new ElasticsearchParseException("longitude must be a number");, +        }, +++ b/server/src/main/java/org/elasticsearch/index/mapper/GeoPointFieldMapper.java, +            if (isNormalizable(point.lat()) && isNormalizable(point.lon())) {, +            } else {, +                throw new ElasticsearchParseException("cannot normalize the point - not a number");, +            }, +, +    private boolean isNormalizable(double coord) {, +        return Double.isNaN(coord) == false && Double.isInfinite(coord) == false;, +    }, +++ b/server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java, +, +    public void testInvalidGeopointValuesIgnored() throws Exception {, +        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type"), +            .startObject("properties"), +            .startObject("location"), +            .field("type", "geo_point"), +            .field("ignore_malformed", "true"), +            .endObject(), +            .endObject().endObject().endObject());, +, +        DocumentMapper defaultMapper = createIndex("test").mapperService().documentMapperParser(), +            .parse("type", new CompressedXContent(mapping));, +, +        assertThat(defaultMapper.parse(SourceToParse.source("test", "type", "1",, +            BytesReference.bytes(XContentFactory.jsonBuilder(), +                .startObject().field("location", "1234.333").endObject(), +            ), XContentType.JSON)).rootDoc().getField("location"), nullValue());, +, +        assertThat(defaultMapper.parse(SourceToParse.source("test", "type", "1",, +            BytesReference.bytes(XContentFactory.jsonBuilder(), +                .startObject().field("lat", "-").field("lon", 1.3).endObject(), +            ), XContentType.JSON)).rootDoc().getField("location"), nullValue());, +, +        assertThat(defaultMapper.parse(SourceToParse.source("test", "type", "1",, +            BytesReference.bytes(XContentFactory.jsonBuilder(), +                .startObject().field("lat", 1.3).field("lon", "-").endObject(), +            ), XContentType.JSON)).rootDoc().getField("location"), nullValue());, +, +        assertThat(defaultMapper.parse(SourceToParse.source("test", "type", "1",, +            BytesReference.bytes(XContentFactory.jsonBuilder(), +                .startObject().field("location", "-,1.3").endObject(), +            ), XContentType.JSON)).rootDoc().getField("location"), nullValue());, +, +        assertThat(defaultMapper.parse(SourceToParse.source("test", "type", "1",, +            BytesReference.bytes(XContentFactory.jsonBuilder(), +                .startObject().field("location", "1.3,-").endObject(), +            ), XContentType.JSON)).rootDoc().getField("location"), nullValue());, +, +        assertThat(defaultMapper.parse(SourceToParse.source("test", "type", "1",, +            BytesReference.bytes(XContentFactory.jsonBuilder(), +                .startObject().field("lat", "NaN").field("lon", "NaN").endObject(), +            ), XContentType.JSON)).rootDoc().getField("location"), nullValue());]