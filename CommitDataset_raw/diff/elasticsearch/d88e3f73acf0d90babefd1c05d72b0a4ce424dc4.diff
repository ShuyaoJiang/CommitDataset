[+++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +     * Is one of the documents in this field data values is multi valued?, +     */, +    boolean isMultiValued();, +, +    /**, +     * Converts the provided bytes to "safe" ones from a "non" safe call made (if needed)., +    BytesRef makeSafe(BytesRef bytes);, +        public boolean isMultiValued() {, +            return values.isMultiValued();, +        }, +, +        @Override, +        public BytesRef makeSafe(BytesRef bytes) {, +            // we need to make a copy, since we use scratch to provide it, +            return BytesRef.deepCopyOf(bytes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +     * Is one of the documents in this field data values is multi valued?, +     */, +    boolean isMultiValued();, +, +    /**, +     * Converts the provided bytes to "safe" ones from a "non" safe call made (if needed)., +    BytesRef makeSafe(BytesRef bytes);, +        public boolean isMultiValued() {, +            return values.isMultiValued();, +        }, +, +        @Override, +        public BytesRef makeSafe(BytesRef bytes) {, +            // we need to make a copy, since we use scratch to provide it, +            return BytesRef.deepCopyOf(bytes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/HashedBytesValues.java, +     * Converts the provided bytes to "safe" ones from a "non" safe call made (if needed)., +     */, +    HashedBytesRef makeSafe(HashedBytesRef bytes);, +, +    /**, +        public HashedBytesRef makeSafe(HashedBytesRef bytes) {, +            return new HashedBytesRef(values.makeSafe(bytes.bytes), bytes.hash);, +        }, +, +        @Override, +        public HashedBytesRef makeSafe(HashedBytesRef bytes) {, +            // we use scratch to provide it, so just need to copy it over to a new instance, +            return new HashedBytesRef(bytes.bytes, bytes.hash);, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +     * Is one of the documents in this field data values is multi valued?, +     */, +    boolean isMultiValued();, +, +    /**, +     * Converts the provided bytes to "safe" ones from a "non" safe call made (if needed)., +    BytesRef makeSafe(BytesRef bytes);, +        public boolean isMultiValued() {, +            return values.isMultiValued();, +        }, +, +        @Override, +        public BytesRef makeSafe(BytesRef bytes) {, +            // we need to make a copy, since we use scratch to provide it, +            return BytesRef.deepCopyOf(bytes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/HashedBytesValues.java, +     * Converts the provided bytes to "safe" ones from a "non" safe call made (if needed)., +     */, +    HashedBytesRef makeSafe(HashedBytesRef bytes);, +, +    /**, +        public HashedBytesRef makeSafe(HashedBytesRef bytes) {, +            return new HashedBytesRef(values.makeSafe(bytes.bytes), bytes.hash);, +        }, +, +        @Override, +        public HashedBytesRef makeSafe(HashedBytesRef bytes) {, +            // we use scratch to provide it, so just need to copy it over to a new instance, +            return new HashedBytesRef(bytes.bytes, bytes.hash);, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/ConcreteBytesRefAtomicFieldData.java, +        public BytesRef makeSafe(BytesRef bytes) {, +            // no need to do anything, its already concrete bytes..., +            return bytes;, +        }, +, +        @Override, +        public HashedBytesRef makeSafe(HashedBytesRef bytes) {, +            // we just need to create a copy of the bytes ref, no need, +            // to create a copy of the actual BytesRef, as its concrete, +            return new HashedBytesRef(bytes.bytes, bytes.hash);, +        }, +, +        @Override, +++ b/src/main/java/org/elasticsearch/index/fielddata/BytesValues.java, +     * Is one of the documents in this field data values is multi valued?, +     */, +    boolean isMultiValued();]