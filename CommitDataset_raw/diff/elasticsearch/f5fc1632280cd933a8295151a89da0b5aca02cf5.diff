[+++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +        super(metadata, environment.settings(), false, namedXContentRegistry);, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +        super(metadata, environment.settings(), false, namedXContentRegistry);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +        super(metadata, environment.settings(), Repository.COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +            blobStore, chunkSize, isCompress(), basePath));, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +        super(metadata, environment.settings(), false, namedXContentRegistry);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +        super(metadata, environment.settings(), Repository.COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +            blobStore, chunkSize, isCompress(), basePath));, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageRepository.java, +        super(metadata, environment.settings(), getSetting(COMPRESS, metadata), namedXContentRegistry);, +        logger.debug("using bucket [{}], base_path [{}], chunk_size [{}], compress [{}]", bucket, basePath, chunkSize, isCompress());, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +        super(metadata, environment.settings(), false, namedXContentRegistry);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +        super(metadata, environment.settings(), Repository.COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +            blobStore, chunkSize, isCompress(), basePath));, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageRepository.java, +        super(metadata, environment.settings(), getSetting(COMPRESS, metadata), namedXContentRegistry);, +        logger.debug("using bucket [{}], base_path [{}], chunk_size [{}], compress [{}]", bucket, basePath, chunkSize, isCompress());, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsRepository.java, +        super(metadata, environment.settings(), metadata.settings().getAsBoolean("compress", false), namedXContentRegistry);, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +        super(metadata, environment.settings(), false, namedXContentRegistry);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +        super(metadata, environment.settings(), Repository.COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +            blobStore, chunkSize, isCompress(), basePath));, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageRepository.java, +        super(metadata, environment.settings(), getSetting(COMPRESS, metadata), namedXContentRegistry);, +        logger.debug("using bucket [{}], base_path [{}], chunk_size [{}], compress [{}]", bucket, basePath, chunkSize, isCompress());, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsRepository.java, +        super(metadata, environment.settings(), metadata.settings().getAsBoolean("compress", false), namedXContentRegistry);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +import org.apache.logging.log4j.Logger;, +        super(metadata, settings, COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +        super(metadata, environment.settings(), false, namedXContentRegistry);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +        super(metadata, environment.settings(), Repository.COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +            blobStore, chunkSize, isCompress(), basePath));, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageRepository.java, +        super(metadata, environment.settings(), getSetting(COMPRESS, metadata), namedXContentRegistry);, +        logger.debug("using bucket [{}], base_path [{}], chunk_size [{}], compress [{}]", bucket, basePath, chunkSize, isCompress());, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsRepository.java, +        super(metadata, environment.settings(), metadata.settings().getAsBoolean("compress", false), namedXContentRegistry);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +import org.apache.logging.log4j.Logger;, +        super(metadata, settings, COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +    private final boolean compress;, +, +     * @param compress true if metadata and snapshot files should be compressed, +    protected BlobStoreRepository(RepositoryMetaData metadata, Settings settings, boolean compress,, +                                  NamedXContentRegistry namedXContentRegistry) {, +        this.compress = compress;, +, +            BlobStoreIndexShardSnapshot::fromXContent, namedXContentRegistry, compress);, +            BlobStoreIndexShardSnapshots::fromXContent, namedXContentRegistry, compress);, +        ByteSizeValue chunkSize = chunkSize();, +        if (chunkSize != null && chunkSize.getBytes() <= 0) {, +            throw new IllegalArgumentException("the chunk size cannot be negative: [" + chunkSize + "]");, +        }, +            MetaData::fromXContent, namedXContentRegistry, compress);, +            IndexMetaData::fromXContent, namedXContentRegistry, compress);, +            SnapshotInfo::fromXContentInternal, namedXContentRegistry, compress);, +    protected final boolean isCompress() {, +        return compress;, +++ b/modules/repository-url/src/main/java/org/elasticsearch/repositories/url/URLRepository.java, +        super(metadata, environment.settings(), false, namedXContentRegistry);, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureRepository.java, +        super(metadata, environment.settings(), Repository.COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +            blobStore, chunkSize, isCompress(), basePath));, +++ b/plugins/repository-gcs/src/main/java/org/elasticsearch/repositories/gcs/GoogleCloudStorageRepository.java, +        super(metadata, environment.settings(), getSetting(COMPRESS, metadata), namedXContentRegistry);, +        logger.debug("using bucket [{}], base_path [{}], chunk_size [{}], compress [{}]", bucket, basePath, chunkSize, isCompress());, +++ b/plugins/repository-hdfs/src/main/java/org/elasticsearch/repositories/hdfs/HdfsRepository.java, +        super(metadata, environment.settings(), metadata.settings().getAsBoolean("compress", false), namedXContentRegistry);, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java, +import org.apache.logging.log4j.Logger;, +        super(metadata, settings, COMPRESS_SETTING.get(metadata.settings()), namedXContentRegistry);, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +    private final boolean compress;, +, +     * @param compress true if metadata and snapshot files should be compressed, +    protected BlobStoreRepository(RepositoryMetaData metadata, Settings settings, boolean compress,, +                                  NamedXContentRegistry namedXContentRegistry) {, +        this.compress = compress;, +, +            BlobStoreIndexShardSnapshot::fromXContent, namedXContentRegistry, compress);, +            BlobStoreIndexShardSnapshots::fromXContent, namedXContentRegistry, compress);, +        ByteSizeValue chunkSize = chunkSize();, +        if (chunkSize != null && chunkSize.getBytes() <= 0) {, +            throw new IllegalArgumentException("the chunk size cannot be negative: [" + chunkSize + "]");, +        }, +            MetaData::fromXContent, namedXContentRegistry, compress);, +            IndexMetaData::fromXContent, namedXContentRegistry, compress);, +            SnapshotInfo::fromXContentInternal, namedXContentRegistry, compress);]