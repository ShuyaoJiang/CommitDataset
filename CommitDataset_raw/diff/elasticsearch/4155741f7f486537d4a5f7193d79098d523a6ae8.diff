[+++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +    public static final int DEFAULT_SIZE = 2 * 1024;, +, +    public static final int OVERSIZE_LIMIT = 256 * 1024;, +            buf = grow(newcount);, +            buf = grow(newcount);, +            buf = grow(newcount);, +    private byte[] grow(int newCount) {, +        // try and grow faster while we are small..., +        if (newCount < OVERSIZE_LIMIT) {, +            newCount = Math.max(buf.length << 1, newCount);, +        }, +        return ArrayUtil.grow(buf, newCount);, +    }, +, +    public int bufferSize() {, +        return buf.length;, +    }, +, +++ b/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java, +    public static final int DEFAULT_SIZE = 2 * 1024;, +, +    public static final int OVERSIZE_LIMIT = 256 * 1024;, +            buf = grow(newcount);, +            buf = grow(newcount);, +            buf = grow(newcount);, +    private byte[] grow(int newCount) {, +        // try and grow faster while we are small..., +        if (newCount < OVERSIZE_LIMIT) {, +            newCount = Math.max(buf.length << 1, newCount);, +        }, +        return ArrayUtil.grow(buf, newCount);, +    }, +, +    public int bufferSize() {, +        return buf.length;, +    }, +, +++ b/src/test/java/org/elasticsearch/test/unit/common/io/streams/BytesStreamsTests.java, +, +    @Test, +    public void testGrowLogic() throws Exception {, +        BytesStreamOutput out = new BytesStreamOutput();, +        out.writeBytes(new byte[BytesStreamOutput.DEFAULT_SIZE - 5]);, +        assertThat(out.bufferSize(), equalTo(2048)); // remains the default, +        out.writeBytes(new byte[1 * 1024]);, +        assertThat(out.bufferSize(), equalTo(4608));, +        out.writeBytes(new byte[32 * 1024]);, +        assertThat(out.bufferSize(), equalTo(40320));, +        out.writeBytes(new byte[32 * 1024]);, +        assertThat(out.bufferSize(), equalTo(90720));, +    }]