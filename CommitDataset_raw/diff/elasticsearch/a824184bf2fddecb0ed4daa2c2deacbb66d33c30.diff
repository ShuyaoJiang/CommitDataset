[+++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/rest-api-spec/test/cluster.state/20_filtering.yaml, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/rest-api-spec/test/cluster.state/20_filtering.yaml, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +, +        if (metrics.contains(Metric.ROUTING_TABLE)) {, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/rest-api-spec/test/cluster.state/20_filtering.yaml, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +, +        if (metrics.contains(Metric.ROUTING_TABLE)) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/rest-api-spec/test/cluster.state/20_filtering.yaml, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +, +        if (metrics.contains(Metric.ROUTING_TABLE)) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #addAggregator(Term), +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/rest-api-spec/test/cluster.state/20_filtering.yaml, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +, +        if (metrics.contains(Metric.ROUTING_TABLE)) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #addAggregator(Term), +++ b/src/main/java/org/elasticsearch/rest/action/admin/cluster/state/RestClusterStateAction.java, +            clusterStateRequest.routingTable(metrics.contains(ClusterState.Metric.ROUTING_TABLE));, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/rest-api-spec/test/cluster.state/20_filtering.yaml, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +, +        if (metrics.contains(Metric.ROUTING_TABLE)) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #addAggregator(Term), +++ b/src/main/java/org/elasticsearch/rest/action/admin/cluster/state/RestClusterStateAction.java, +            clusterStateRequest.routingTable(metrics.contains(ClusterState.Metric.ROUTING_TABLE));, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +, +import org.elasticsearch.search.aggregations.reducers.ReducerBuilder;, +    private List<ReducerBuilder<?>> reducers;, +     * Add a sub get to this bucket get., +     */, +    @SuppressWarnings("unchecked"), +    public B subAggregation(ReducerBuilder<?> reducer) {, +        if (reducers == null) {, +            reducers = Lists.newArrayList();, +        }, +        reducers.add(reducer);, +        return (B) this;, +    }, +, +    /**, +        if (aggregations != null || aggregationsBinary != null || reducers != null) {, +            if (reducers != null) {, +                for (ReducerBuilder<?> subAgg : reducers) {, +                    subAgg.toXContent(builder, params);, +                }, +            }, +, +++ b/docs/reference/migration/migrate_2_0.asciidoc, +++ b/rest-api-spec/api/cluster.state.json, +          "options" : ["_all", "blocks", "metadata", "nodes", "routing_table", "master_node", "version"],, +++ b/rest-api-spec/test/cluster.state/20_filtering.yaml, +++ b/src/main/java/org/elasticsearch/cluster/ClusterState.java, +import org.elasticsearch.Version;, +, +        if (metrics.contains(Metric.ROUTING_TABLE)) {, +++ b/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #addAggregator(Term), +++ b/src/main/java/org/elasticsearch/rest/action/admin/cluster/state/RestClusterStateAction.java, +            clusterStateRequest.routingTable(metrics.contains(ClusterState.Metric.ROUTING_TABLE));, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +]