[+++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public ThreadPool(String name) {, +        this(ImmutableSettings.builder().put("name", name).build(), null);, +        assert settings.get("name") != null : "ThreadPool's settings should contain a name";, +, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public ThreadPool(String name) {, +        this(ImmutableSettings.builder().put("name", name).build(), null);, +        assert settings.get("name") != null : "ThreadPool's settings should contain a name";, +, +++ b/src/test/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool("BenchmarkNettyLargeMessages");, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public ThreadPool(String name) {, +        this(ImmutableSettings.builder().put("name", name).build(), null);, +        assert settings.get("name") != null : "ThreadPool's settings should contain a name";, +, +++ b/src/test/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool("BenchmarkNettyLargeMessages");, +++ b/src/test/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final ThreadPool serverThreadPool = new ThreadPool("server");, +        final ThreadPool clientThreadPool = new ThreadPool("client");, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public ThreadPool(String name) {, +        this(ImmutableSettings.builder().put("name", name).build(), null);, +        assert settings.get("name") != null : "ThreadPool's settings should contain a name";, +, +++ b/src/test/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool("BenchmarkNettyLargeMessages");, +++ b/src/test/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final ThreadPool serverThreadPool = new ThreadPool("server");, +        final ThreadPool clientThreadPool = new ThreadPool("client");, +++ b/src/test/java/org/elasticsearch/common/util/BigArraysTests.java, +        final PageCacheRecycler recycler = randomBoolean() ? null : new MockPageCacheRecycler(ImmutableSettings.EMPTY, new ThreadPool("BigArraysTests"));, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public ThreadPool(String name) {, +        this(ImmutableSettings.builder().put("name", name).build(), null);, +        assert settings.get("name") != null : "ThreadPool's settings should contain a name";, +, +++ b/src/test/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool("BenchmarkNettyLargeMessages");, +++ b/src/test/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final ThreadPool serverThreadPool = new ThreadPool("server");, +        final ThreadPool clientThreadPool = new ThreadPool("client");, +++ b/src/test/java/org/elasticsearch/common/util/BigArraysTests.java, +        final PageCacheRecycler recycler = randomBoolean() ? null : new MockPageCacheRecycler(ImmutableSettings.EMPTY, new ThreadPool("BigArraysTests"));, +++ b/src/test/java/org/elasticsearch/discovery/zen/ping/multicast/MulticastZenPingTests.java, +        ThreadPool threadPool = new ThreadPool("testSimplePings");, +        ThreadPool threadPool = new ThreadPool("testExternalPing");, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public ThreadPool(String name) {, +        this(ImmutableSettings.builder().put("name", name).build(), null);, +        assert settings.get("name") != null : "ThreadPool's settings should contain a name";, +, +++ b/src/test/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool("BenchmarkNettyLargeMessages");, +++ b/src/test/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final ThreadPool serverThreadPool = new ThreadPool("server");, +        final ThreadPool clientThreadPool = new ThreadPool("client");, +++ b/src/test/java/org/elasticsearch/common/util/BigArraysTests.java, +        final PageCacheRecycler recycler = randomBoolean() ? null : new MockPageCacheRecycler(ImmutableSettings.EMPTY, new ThreadPool("BigArraysTests"));, +++ b/src/test/java/org/elasticsearch/discovery/zen/ping/multicast/MulticastZenPingTests.java, +        ThreadPool threadPool = new ThreadPool("testSimplePings");, +        ThreadPool threadPool = new ThreadPool("testExternalPing");, +++ b/src/test/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPingTests.java, +        ThreadPool threadPool = new ThreadPool(getClass().getName());, +++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java, +, +    public ThreadPool(String name) {, +        this(ImmutableSettings.builder().put("name", name).build(), null);, +        assert settings.get("name") != null : "ThreadPool's settings should contain a name";, +, +++ b/src/test/java/org/elasticsearch/benchmark/transport/BenchmarkNettyLargeMessages.java, +        final ThreadPool threadPool = new ThreadPool("BenchmarkNettyLargeMessages");, +++ b/src/test/java/org/elasticsearch/benchmark/transport/TransportBenchmark.java, +        final ThreadPool serverThreadPool = new ThreadPool("server");, +        final ThreadPool clientThreadPool = new ThreadPool("client");, +++ b/src/test/java/org/elasticsearch/common/util/BigArraysTests.java, +        final PageCacheRecycler recycler = randomBoolean() ? null : new MockPageCacheRecycler(ImmutableSettings.EMPTY, new ThreadPool("BigArraysTests"));, +++ b/src/test/java/org/elasticsearch/discovery/zen/ping/multicast/MulticastZenPingTests.java, +        ThreadPool threadPool = new ThreadPool("testSimplePings");, +        ThreadPool threadPool = new ThreadPool("testExternalPing");, +++ b/src/test/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPingTests.java, +        ThreadPool threadPool = new ThreadPool(getClass().getName());, +++ b/src/test/java/org/elasticsearch/index/aliases/IndexAliasesServiceTests.java, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.indices.query.IndicesQueriesModule;, +import org.elasticsearch.script.ScriptModule;, +, +        Settings settings = ImmutableSettings.builder().put("name", "IndexAliasesServiceTests").build();, +        return new IndexAliasesService(new Index("test"), settings, newIndexQueryParserService(settings));, +    public static IndexQueryParserService newIndexQueryParserService(Settings settings) {, +                new CacheRecyclerModule(settings),, +                new CodecModule(settings),]