[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/lucene/search/CustomBoostFactorQuery.java, +    private Query subQuery;, +        this.subQuery = subQuery;, +    public Query getSubQuery() {, +        return subQuery;, +        Query newQ = subQuery.rewrite(reader);, +        if (newQ == subQuery) return this;, +        bq.subQuery = newQ;, +        subQuery.extractTerms(terms);, +        return new CustomBoostFactorWeight(searcher);, +    private class CustomBoostFactorWeight extends Weight {, +        Weight subQueryWeight;, +        public CustomBoostFactorWeight(Searcher searcher) throws IOException {, +            this.subQueryWeight = subQuery.weight(searcher);, +            float sum = subQueryWeight.sumOfSquaredWeights();, +            subQueryWeight.normalize(norm);, +            Scorer subQueryScorer = subQueryWeight.scorer(reader, true, false);, +            return new CustomBoostFactorScorer(getSimilarity(searcher), reader, this, subQueryScorer);, +            Explanation subQueryExpl = subQueryWeight.explain(reader, doc);, +    private class CustomBoostFactorScorer extends Scorer {, +        private final CustomBoostFactorWeight weight;, +        private final float subQueryWeight;, +        private CustomBoostFactorScorer(Similarity similarity, IndexReader reader, CustomBoostFactorWeight w,, +            this.subQueryWeight = w.getValue();, +            float score = subQueryWeight * scorer.score() * boostFactor;, +            Explanation subQueryExpl = weight.subQueryWeight.explain(reader, doc);, +        sb.append("CustomBoostFactor(").append(subQuery.toString(field)).append(',').append(boostFactor).append(')');, +                && this.subQuery.equals(other.subQuery), +        int h = subQuery.hashCode();]