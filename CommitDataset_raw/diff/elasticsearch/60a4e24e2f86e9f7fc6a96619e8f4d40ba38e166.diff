[+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/indices/cache/query/IndicesQueryCache.java, +import org.apache.lucene.search.BulkScorer;, +, +        @Override, +        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {, +            shardKeyMap.add(context.reader());, +            return in.bulkScorer(context);, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/indices/cache/query/IndicesQueryCache.java, +import org.apache.lucene.search.BulkScorer;, +, +        @Override, +        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {, +            shardKeyMap.add(context.reader());, +            return in.bulkScorer(context);, +        }, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java, +    public void testDedupConcreteIndices() {, +        MetaData.Builder mdBuilder = MetaData.builder(), +                .put(indexBuilder("index1").putAlias(AliasMetaData.builder("alias1")));, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();, +        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand(),, +                IndicesOptions.lenientExpandOpen(), IndicesOptions.strictExpandOpenAndForbidClosed()};, +        for (IndicesOptions options : indicesOptions) {, +            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);, +            String[] results = indexNameExpressionResolver.concreteIndices(context, "index1", "index1", "alias1");, +            assertThat(results, equalTo(new String[]{"index1"}));, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/indices/cache/query/IndicesQueryCache.java, +import org.apache.lucene.search.BulkScorer;, +, +        @Override, +        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {, +            shardKeyMap.add(context.reader());, +            return in.bulkScorer(context);, +        }, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java, +    public void testDedupConcreteIndices() {, +        MetaData.Builder mdBuilder = MetaData.builder(), +                .put(indexBuilder("index1").putAlias(AliasMetaData.builder("alias1")));, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();, +        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand(),, +                IndicesOptions.lenientExpandOpen(), IndicesOptions.strictExpandOpenAndForbidClosed()};, +        for (IndicesOptions options : indicesOptions) {, +            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);, +            String[] results = indexNameExpressionResolver.concreteIndices(context, "index1", "index1", "alias1");, +            assertThat(results, equalTo(new String[]{"index1"}));, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java, +        try {, +        } catch (OutOfMemoryError e) {, +            if (e.getMessage().contains("unable to create new native thread")) {, +                ESTestCase.printStackDump(logger);, +            }, +            throw e;, +        }, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java, +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +     * Translates the provided index expression into actual concrete indices, properly deduplicated., +        final Set<String> concreteIndices = new HashSet<>(expressions.size());, +++ b/core/src/main/java/org/elasticsearch/indices/cache/query/IndicesQueryCache.java, +import org.apache.lucene.search.BulkScorer;, +, +        @Override, +        public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {, +            shardKeyMap.add(context.reader());, +            return in.bulkScorer(context);, +        }, +++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java, +    public void testDedupConcreteIndices() {, +        MetaData.Builder mdBuilder = MetaData.builder(), +                .put(indexBuilder("index1").putAlias(AliasMetaData.builder("alias1")));, +        ClusterState state = ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();, +        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand(),, +                IndicesOptions.lenientExpandOpen(), IndicesOptions.strictExpandOpenAndForbidClosed()};, +        for (IndicesOptions options : indicesOptions) {, +            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);, +            String[] results = indexNameExpressionResolver.concreteIndices(context, "index1", "index1", "alias1");, +            assertThat(results, equalTo(new String[]{"index1"}));, +        }]