[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import java.util.Objects;, +    private static final ObjectParser<AllocationId.Builder, Void> ALLOCATION_ID_PARSER = new ObjectParser<>("allocationId");, +, +    static {, +        ALLOCATION_ID_PARSER.declareString(AllocationId.Builder::setId, new ParseField(ID_KEY));, +        ALLOCATION_ID_PARSER.declareString(AllocationId.Builder::setRelocationId, new ParseField(RELOCATION_ID_KEY));, +    }, +, +    private static class Builder {, +        private String id;, +        private String relocationId;, +, +        public void setId(String id) {, +            this.id = id;, +        }, +, +        public void setRelocationId(String relocationId) {, +            this.relocationId = relocationId;, +        }, +, +        public AllocationId build() {, +            return new AllocationId(id, relocationId);, +        }, +    }, +, +        Objects.requireNonNull(id, "Argument [id] must be non-null");, +        return ALLOCATION_ID_PARSER.parse(parser, new AllocationId.Builder()).build();, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import java.util.Objects;, +    private static final ObjectParser<AllocationId.Builder, Void> ALLOCATION_ID_PARSER = new ObjectParser<>("allocationId");, +, +    static {, +        ALLOCATION_ID_PARSER.declareString(AllocationId.Builder::setId, new ParseField(ID_KEY));, +        ALLOCATION_ID_PARSER.declareString(AllocationId.Builder::setRelocationId, new ParseField(RELOCATION_ID_KEY));, +    }, +, +    private static class Builder {, +        private String id;, +        private String relocationId;, +, +        public void setId(String id) {, +            this.id = id;, +        }, +, +        public void setRelocationId(String relocationId) {, +            this.relocationId = relocationId;, +        }, +, +        public AllocationId build() {, +            return new AllocationId(id, relocationId);, +        }, +    }, +, +        Objects.requireNonNull(id, "Argument [id] must be non-null");, +        return ALLOCATION_ID_PARSER.parse(parser, new AllocationId.Builder()).build();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKeyAsString());, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ObjectParser;, +import java.util.Objects;, +    private static final ObjectParser<AllocationId.Builder, Void> ALLOCATION_ID_PARSER = new ObjectParser<>("allocationId");, +, +    static {, +        ALLOCATION_ID_PARSER.declareString(AllocationId.Builder::setId, new ParseField(ID_KEY));, +        ALLOCATION_ID_PARSER.declareString(AllocationId.Builder::setRelocationId, new ParseField(RELOCATION_ID_KEY));, +    }, +, +    private static class Builder {, +        private String id;, +        private String relocationId;, +, +        public void setId(String id) {, +            this.id = id;, +        }, +, +        public void setRelocationId(String relocationId) {, +            this.relocationId = relocationId;, +        }, +, +        public AllocationId build() {, +            return new AllocationId(id, relocationId);, +        }, +    }, +, +        Objects.requireNonNull(id, "Argument [id] must be non-null");, +        return ALLOCATION_ID_PARSER.parse(parser, new AllocationId.Builder()).build();, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/InternalSignificantTerms.java, +                List<Bucket> existingBuckets = buckets.get(bucket.getKeyAsString());, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/SignificantTermsBackwardCompatibilityIT.java, +     * Test for streaming significant terms buckets to old es versions., +        StringTerms classes = response.getAggregations().get("class");, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/AllocationId.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.xcontent.ObjectParser;]