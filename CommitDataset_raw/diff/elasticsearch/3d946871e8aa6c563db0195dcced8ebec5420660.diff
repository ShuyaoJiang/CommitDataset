[+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically., +     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically., +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically., +     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically., +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +, +    private final Map<String, Setting<?>> clusterDynamicSettings = new HashMap<>();, +, +        for (Setting<?> setting : ClusterSettings.BUILT_IN_CLUSTER_SETTINGS) {, +            registerSetting(setting);, +        }, +        final ClusterSettings clusterSettings = new ClusterSettings(settings, new HashSet<>(clusterDynamicSettings.values()));, +        bind(ClusterSettings.class).toInstance(clusterSettings);, +, +    public void registerSetting(Setting<?> setting) {, +        switch (setting.getScope()) {, +            case Cluster:, +                if (clusterDynamicSettings.containsKey(setting.getKey())) {, +                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice");, +                }, +                clusterDynamicSettings.put(setting.getKey(), setting);, +                break;, +            case Index:, +                throw new UnsupportedOperationException("not yet implemented");, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically., +     * Note: Only settings registered in {@link SettingsModule} can be changed dynamically., +++ b/core/src/main/java/org/elasticsearch/common/settings/SettingsModule.java, +import java.util.HashMap;, +import java.util.HashSet;, +import java.util.Map;, +, +    private final Map<String, Setting<?>> clusterDynamicSettings = new HashMap<>();, +, +        for (Setting<?> setting : ClusterSettings.BUILT_IN_CLUSTER_SETTINGS) {, +            registerSetting(setting);, +        }, +        final ClusterSettings clusterSettings = new ClusterSettings(settings, new HashSet<>(clusterDynamicSettings.values()));, +        bind(ClusterSettings.class).toInstance(clusterSettings);, +, +    public void registerSetting(Setting<?> setting) {, +        switch (setting.getScope()) {, +            case Cluster:, +                if (clusterDynamicSettings.containsKey(setting.getKey())) {, +                    throw new IllegalArgumentException("Cannot register setting [" + setting.getKey() + "] twice");, +                }, +                clusterDynamicSettings.put(setting.getKey(), setting);, +                break;, +            case Index:, +                throw new UnsupportedOperationException("not yet implemented");, +        }, +    }, +, +++ b/core/src/test/java/org/elasticsearch/cluster/ClusterModuleTests.java, +import org.elasticsearch.common.settings.*;, +        final SettingsFilter settingsFilter = new SettingsFilter(Settings.EMPTY);, +        SettingsModule module = new SettingsModule(Settings.EMPTY, settingsFilter);, +        final SettingsFilter settingsFilter = new SettingsFilter(Settings.EMPTY);, +        SettingsModule module = new SettingsModule(Settings.EMPTY, settingsFilter);]