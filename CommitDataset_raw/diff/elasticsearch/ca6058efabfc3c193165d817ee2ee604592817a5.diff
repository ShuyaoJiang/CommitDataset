[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +        if (name == null) {, +            throw new IllegalArgumentException("[name] must not be null: [" + name + "]");, +        }, +        if (type == null) {, +            throw new IllegalArgumentException("[type] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (subFactories == null) {, +            throw new IllegalArgumentException("[subFactories] must not be null: [" + name + "]");, +        }, +        if (metaData == null) {, +            throw new IllegalArgumentException("[metaData] must not be null: [" + name + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +        if (name == null) {, +            throw new IllegalArgumentException("[name] must not be null: [" + name + "]");, +        }, +        if (type == null) {, +            throw new IllegalArgumentException("[type] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (subFactories == null) {, +            throw new IllegalArgumentException("[subFactories] must not be null: [" + name + "]");, +        }, +        if (metaData == null) {, +            throw new IllegalArgumentException("[metaData] must not be null: [" + name + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java, +        return ParentToChildrenAggregator.ChildrenAggregatorBuilder.PROTOTYPE;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +        if (name == null) {, +            throw new IllegalArgumentException("[name] must not be null: [" + name + "]");, +        }, +        if (type == null) {, +            throw new IllegalArgumentException("[type] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (subFactories == null) {, +            throw new IllegalArgumentException("[subFactories] must not be null: [" + name + "]");, +        }, +        if (metaData == null) {, +            throw new IllegalArgumentException("[metaData] must not be null: [" + name + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java, +        return ParentToChildrenAggregator.ChildrenAggregatorBuilder.PROTOTYPE;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java, +        static final ChildrenAggregatorBuilder PROTOTYPE = new ChildrenAggregatorBuilder("", "");, +, +            if (childType == null) {, +                throw new IllegalArgumentException("[childType] must not be null: [" + name + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +        if (name == null) {, +            throw new IllegalArgumentException("[name] must not be null: [" + name + "]");, +        }, +        if (type == null) {, +            throw new IllegalArgumentException("[type] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (aggregation == null) {, +            throw new IllegalArgumentException("[aggregation] must not be null: [" + name + "]");, +        }, +        if (subFactories == null) {, +            throw new IllegalArgumentException("[subFactories] must not be null: [" + name + "]");, +        }, +        if (metaData == null) {, +            throw new IllegalArgumentException("[metaData] must not be null: [" + name + "]");, +        }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ChildrenParser.java, +        return ParentToChildrenAggregator.ChildrenAggregatorBuilder.PROTOTYPE;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java, +        static final ChildrenAggregatorBuilder PROTOTYPE = new ChildrenAggregatorBuilder("", "");, +, +            if (childType == null) {, +                throw new IllegalArgumentException("[childType] must not be null: [" + name + "]");, +            }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterAggregator.java, +import org.elasticsearch.index.query.EmptyQueryBuilder;, +        static final FilterAggregatorBuilder PROTOTYPE = new FilterAggregatorBuilder("", EmptyQueryBuilder.PROTOTYPE);, +, +        private final QueryBuilder<?> filter;, +            if (filter == null) {]