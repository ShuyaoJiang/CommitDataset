[+++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +import org.apache.lucene.util.Constants;, +        if (Constants.FREE_BSD) {, +            sb.append("hot_threads is not supported on FreeBSD");, +            return sb.toString();, +        }, +, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +import org.apache.lucene.util.Constants;, +        if (Constants.FREE_BSD) {, +            sb.append("hot_threads is not supported on FreeBSD");, +            return sb.toString();, +        }, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java, +import org.apache.lucene.util.Constants;, +, +        assumeTrue("no support for hot_threads on FreeBSD", Constants.FREE_BSD == false);, +        if (Constants.FREE_BSD) {, +            for (NodeHotThreads node : response.getNodesMap().values()) {, +                String result = node.getHotThreads();, +                assertTrue(result.indexOf("hot_threads is not supported") != -1);, +            }, +        } else {, +}, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +import org.apache.lucene.util.Constants;, +        if (Constants.FREE_BSD) {, +            sb.append("hot_threads is not supported on FreeBSD");, +            return sb.toString();, +        }, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java, +import org.apache.lucene.util.Constants;, +, +        assumeTrue("no support for hot_threads on FreeBSD", Constants.FREE_BSD == false);, +        if (Constants.FREE_BSD) {, +            for (NodeHotThreads node : response.getNodesMap().values()) {, +                String result = node.getHotThreads();, +                assertTrue(result.indexOf("hot_threads is not supported") != -1);, +            }, +        } else {, +}, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorRetryIT.java, +                .put("threadpool.bulk.queue_size", 30), +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +import org.apache.lucene.util.Constants;, +        if (Constants.FREE_BSD) {, +            sb.append("hot_threads is not supported on FreeBSD");, +            return sb.toString();, +        }, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java, +import org.apache.lucene.util.Constants;, +, +        assumeTrue("no support for hot_threads on FreeBSD", Constants.FREE_BSD == false);, +        if (Constants.FREE_BSD) {, +            for (NodeHotThreads node : response.getNodesMap().values()) {, +                String result = node.getHotThreads();, +                assertTrue(result.indexOf("hot_threads is not supported") != -1);, +            }, +        } else {, +}, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorRetryIT.java, +                .put("threadpool.bulk.queue_size", 30), +++ b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityTests.java, +                    if (version.onOrAfter(Version.V_2_0_0) == false) {, +                        // unsupported version, no need to test, +                        continue;, +                    }, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java, +import org.apache.lucene.util.Constants;, +        if (Constants.FREE_BSD) {, +            sb.append("hot_threads is not supported on FreeBSD");, +            return sb.toString();, +        }, +, +++ b/core/src/test/java/org/elasticsearch/action/admin/HotThreadsIT.java, +import org.apache.lucene.util.Constants;, +, +        assumeTrue("no support for hot_threads on FreeBSD", Constants.FREE_BSD == false);, +        if (Constants.FREE_BSD) {, +            for (NodeHotThreads node : response.getNodesMap().values()) {, +                String result = node.getHotThreads();, +                assertTrue(result.indexOf("hot_threads is not supported") != -1);, +            }, +        } else {, +}, +++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorRetryIT.java, +                .put("threadpool.bulk.queue_size", 30), +++ b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityTests.java, +                    if (version.onOrAfter(Version.V_2_0_0) == false) {, +                        // unsupported version, no need to test, +                        continue;]