[+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +                if (aliasFilter.getAliases().length > 0) {, +                    builder.array("aliases", aliasFilter.getAliases());, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +                if (aliasFilter.getAliases().length > 0) {, +                    builder.array("aliases", aliasFilter.getAliases());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    public SearchTransportService(Settings settings, TransportService transportService) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +                if (aliasFilter.getAliases().length > 0) {, +                    builder.array("aliases", aliasFilter.getAliases());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    public SearchTransportService(Settings settings, TransportService transportService) {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private Map<String, AliasFilter> buildPerIndexAliasFilter(SearchRequest request, ClusterState clusterState, Index[] concreteIndices) {, +, +        Index[] indices = indexNameExpressionResolver.concreteIndices(clusterState, searchRequest.indicesOptions(),, +            startTimeInMillis, searchRequest.indices());, +        Map<String, AliasFilter> aliasFilter = buildPerIndexAliasFilter(searchRequest, clusterState, indices);, +        GroupShardsIterator shardIterators = clusterService.operationRouting().searchShards(clusterState, concreteIndices, routingMap,, +        searchAsyncAction((SearchTask)task, searchRequest, shardIterators, startTimeInMillis, clusterState,, +                                                        long startTime, ClusterState state,  Map<String, AliasFilter> aliasFilter,, +        final Function<String, DiscoveryNode> nodesLookup = state.nodes()::get;, +        final long clusterStateVersion = state.version();, +    private void failIfOverShardCountLimit(ClusterService clusterService, int shardCount) {, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +                if (aliasFilter.getAliases().length > 0) {, +                    builder.array("aliases", aliasFilter.getAliases());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    public SearchTransportService(Settings settings, TransportService transportService) {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private Map<String, AliasFilter> buildPerIndexAliasFilter(SearchRequest request, ClusterState clusterState, Index[] concreteIndices) {, +, +        Index[] indices = indexNameExpressionResolver.concreteIndices(clusterState, searchRequest.indicesOptions(),, +            startTimeInMillis, searchRequest.indices());, +        Map<String, AliasFilter> aliasFilter = buildPerIndexAliasFilter(searchRequest, clusterState, indices);, +        GroupShardsIterator shardIterators = clusterService.operationRouting().searchShards(clusterState, concreteIndices, routingMap,, +        searchAsyncAction((SearchTask)task, searchRequest, shardIterators, startTimeInMillis, clusterState,, +                                                        long startTime, ClusterState state,  Map<String, AliasFilter> aliasFilter,, +        final Function<String, DiscoveryNode> nodesLookup = state.nodes()::get;, +        final long clusterStateVersion = state.version();, +    private void failIfOverShardCountLimit(ClusterService clusterService, int shardCount) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +                if (aliasFilter.getAliases().length > 0) {, +                    builder.array("aliases", aliasFilter.getAliases());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    public SearchTransportService(Settings settings, TransportService transportService) {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private Map<String, AliasFilter> buildPerIndexAliasFilter(SearchRequest request, ClusterState clusterState, Index[] concreteIndices) {, +, +        Index[] indices = indexNameExpressionResolver.concreteIndices(clusterState, searchRequest.indicesOptions(),, +            startTimeInMillis, searchRequest.indices());, +        Map<String, AliasFilter> aliasFilter = buildPerIndexAliasFilter(searchRequest, clusterState, indices);, +        GroupShardsIterator shardIterators = clusterService.operationRouting().searchShards(clusterState, concreteIndices, routingMap,, +        searchAsyncAction((SearchTask)task, searchRequest, shardIterators, startTimeInMillis, clusterState,, +                                                        long startTime, ClusterState state,  Map<String, AliasFilter> aliasFilter,, +        final Function<String, DiscoveryNode> nodesLookup = state.nodes()::get;, +        final long clusterStateVersion = state.version();, +    private void failIfOverShardCountLimit(ClusterService clusterService, int shardCount) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    b.bind(SearchTransportService.class).toInstance(new SearchTransportService(settings, transportService));, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +                if (aliasFilter.getAliases().length > 0) {, +                    builder.array("aliases", aliasFilter.getAliases());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    public SearchTransportService(Settings settings, TransportService transportService) {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private Map<String, AliasFilter> buildPerIndexAliasFilter(SearchRequest request, ClusterState clusterState, Index[] concreteIndices) {, +, +        Index[] indices = indexNameExpressionResolver.concreteIndices(clusterState, searchRequest.indicesOptions(),, +            startTimeInMillis, searchRequest.indices());, +        Map<String, AliasFilter> aliasFilter = buildPerIndexAliasFilter(searchRequest, clusterState, indices);, +        GroupShardsIterator shardIterators = clusterService.operationRouting().searchShards(clusterState, concreteIndices, routingMap,, +        searchAsyncAction((SearchTask)task, searchRequest, shardIterators, startTimeInMillis, clusterState,, +                                                        long startTime, ClusterState state,  Map<String, AliasFilter> aliasFilter,, +        final Function<String, DiscoveryNode> nodesLookup = state.nodes()::get;, +        final long clusterStateVersion = state.version();, +    private void failIfOverShardCountLimit(ClusterService clusterService, int shardCount) {, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +                    b.bind(SearchTransportService.class).toInstance(new SearchTransportService(settings, transportService));, +++ b/core/src/main/java/org/elasticsearch/search/internal/AliasFilter.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/shards/ClusterSearchShardsResponse.java, +                if (aliasFilter.getAliases().length > 0) {, +                    builder.array("aliases", aliasFilter.getAliases());, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchTransportService.java, +    public SearchTransportService(Settings settings, TransportService transportService) {, +++ b/core/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java, +    private Map<String, AliasFilter> buildPerIndexAliasFilter(SearchRequest request, ClusterState clusterState, Index[] concreteIndices) {, +, +        Index[] indices = indexNameExpressionResolver.concreteIndices(clusterState, searchRequest.indicesOptions(),, +            startTimeInMillis, searchRequest.indices());, +        Map<String, AliasFilter> aliasFilter = buildPerIndexAliasFilter(searchRequest, clusterState, indices);, +        GroupShardsIterator shardIterators = clusterService.operationRouting().searchShards(clusterState, concreteIndices, routingMap,, +        searchAsyncAction((SearchTask)task, searchRequest, shardIterators, startTimeInMillis, clusterState,]