[+++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageServiceImpl.java, +import org.elasticsearch.common.Strings;, +import java.util.Collections;, +    final Map<String, CloudBlobClient> clients;, +        this.storageSettings = storageSettings;, +        this.clients = createClients(storageSettings);, +    private Map<String, CloudBlobClient> createClients(final Map<String, AzureStorageSettings> storageSettings) {, +        final Map<String, CloudBlobClient> clients = new HashMap<>();, +        for (Map.Entry<String, AzureStorageSettings> azureStorageEntry : storageSettings.entrySet()) {, +            final String clientName = azureStorageEntry.getKey();, +            final AzureStorageSettings clientSettings = azureStorageEntry.getValue();, +                logger.trace("creating new Azure storage client with name [{}]", clientName);, +                        + "AccountName=" + clientSettings.getAccount() + ";", +                        + "AccountKey=" + clientSettings.getKey();, +                final String endpointSuffix = clientSettings.getEndpointSuffix();, +                if (Strings.hasLength(endpointSuffix)) {, +                clients.put(clientSettings.getAccount(), client);, +                logger.error(() -> new ParameterizedMessage("Can not create azure storage client [{}]", clientName), e);, +        return Collections.unmodifiableMap(clients);, +    }, +            throw new IllegalArgumentException("Unable to find client with name [" + clientName + "]");, +            throw new IllegalArgumentException("No account defined for client with name [" + clientName + "]");, +++ b/plugins/repository-azure/src/main/java/org/elasticsearch/repositories/azure/AzureStorageServiceImpl.java, +import org.elasticsearch.common.Strings;, +import java.util.Collections;, +    final Map<String, CloudBlobClient> clients;, +        this.storageSettings = storageSettings;, +        this.clients = createClients(storageSettings);, +    private Map<String, CloudBlobClient> createClients(final Map<String, AzureStorageSettings> storageSettings) {, +        final Map<String, CloudBlobClient> clients = new HashMap<>();, +        for (Map.Entry<String, AzureStorageSettings> azureStorageEntry : storageSettings.entrySet()) {, +            final String clientName = azureStorageEntry.getKey();, +            final AzureStorageSettings clientSettings = azureStorageEntry.getValue();, +                logger.trace("creating new Azure storage client with name [{}]", clientName);, +                        + "AccountName=" + clientSettings.getAccount() + ";", +                        + "AccountKey=" + clientSettings.getKey();, +                final String endpointSuffix = clientSettings.getEndpointSuffix();, +                if (Strings.hasLength(endpointSuffix)) {, +                clients.put(clientSettings.getAccount(), client);, +                logger.error(() -> new ParameterizedMessage("Can not create azure storage client [{}]", clientName), e);, +        return Collections.unmodifiableMap(clients);, +    }, +            throw new IllegalArgumentException("Unable to find client with name [" + clientName + "]");, +            throw new IllegalArgumentException("No account defined for client with name [" + clientName + "]");, +++ b/plugins/repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureStorageServiceTests.java, +import java.util.Collections;, +        secureSettings.setString("azure.client.azure1.key", encodeKey("mykey1"));, +        secureSettings.setString("azure.client.azure2.key", encodeKey("mykey2"));, +        secureSettings.setString("azure.client.azure3.key", encodeKey("mykey3"));, +        secureSettings.setString("azure.client.azure1.key", encodeKey("mykey1"));, +        secureSettings.setString("azure.client.azure2.key", encodeKey("mykey2"));, +            new AzureStorageServiceImpl(Settings.EMPTY, Collections.emptyMap());, +        AzureStorageServiceImpl azureStorageService = createAzureService(buildSettings());, +        assertThat(e.getMessage(), is("Unable to find client with name [azure4]"));, +        AzureStorageServiceImpl azureStorageService = createAzureService(timeoutSettings);, +        AzureStorageServiceImpl azureStorageService = createAzureService(buildSettings());, +        AzureStorageServiceImpl azureStorageService = createAzureService(buildSettings());, +        AzureStorageServiceImpl azureStorageService = createAzureService(timeoutSettings);, +        AzureStorageServiceImpl mock = createAzureService(settings);, +        AzureStorageServiceImpl mock = createAzureService(settings);, +        AzureStorageServiceImpl mock = createAzureService(settings);, +        AzureStorageServiceImpl mock = createAzureService(settings);, +        SettingsException e = expectThrows(SettingsException.class, () -> createAzureService(settings));, +        SettingsException e = expectThrows(SettingsException.class, () -> createAzureService(settings));, +        SettingsException e = expectThrows(SettingsException.class, () -> createAzureService(settings));, +        SettingsException e = expectThrows(SettingsException.class, () -> createAzureService(settings));, +, +    private static MockSecureSettings buildSecureSettings() {, +        MockSecureSettings secureSettings = new MockSecureSettings();, +        secureSettings.setString("azure.client.azure1.account", "myaccount1");, +        secureSettings.setString("azure.client.azure1.key", encodeKey("mykey1"));, +        secureSettings.setString("azure.client.azure2.account", "myaccount2");, +        secureSettings.setString("azure.client.azure2.key", encodeKey("mykey2"));, +        secureSettings.setString("azure.client.azure3.account", "myaccount3");, +        secureSettings.setString("azure.client.azure3.key", encodeKey("mykey3"));, +        return secureSettings;, +    }, +, +    private static Settings buildSettings() {, +        return Settings.builder().setSecureSettings(buildSecureSettings()).build();, +    }, +, +    private static AzureStorageServiceImpl createAzureService(final Settings settings) {, +        return new AzureStorageServiceImpl(settings, AzureStorageSettings.load(settings));, +    }, +, +    private static String encodeKey(final String value) {, +        return Base64.encode(value.getBytes(StandardCharsets.UTF_8));, +    }]