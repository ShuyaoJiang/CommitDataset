[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.indices.IndexMissingException;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +                                try {, +                                } catch (Throwable t) {, +                                    listener.onFailure(t);, +                                }, +                if (addFailureIfIndexIsUnavailable(req, bulkRequest, responses, i, concreteIndices, metaData)) {, +    private boolean addFailureIfIndexIsUnavailable(DocumentRequest request, BulkRequest bulkRequest, AtomicArray<BulkItemResponse> responses, int idx,, +        Exception unavailableException = null;, +                unavailableException = ice;, +            } catch (IndexMissingException ime) {, +                // Fix for issue where bulk request references an index that, +                // cannot be auto-created see issue #8125, +                unavailableException = ime;, +        if (unavailableException == null) {, +            if (indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                unavailableException = new IndexClosedException(new Index(metaData.index(request.index()).getIndex()));, +        }, +        if (unavailableException != null) {, +                    unavailableException);, +            return true;, +        return false;, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.indices.IndexMissingException;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +                                try {, +                                } catch (Throwable t) {, +                                    listener.onFailure(t);, +                                }, +                if (addFailureIfIndexIsUnavailable(req, bulkRequest, responses, i, concreteIndices, metaData)) {, +    private boolean addFailureIfIndexIsUnavailable(DocumentRequest request, BulkRequest bulkRequest, AtomicArray<BulkItemResponse> responses, int idx,, +        Exception unavailableException = null;, +                unavailableException = ice;, +            } catch (IndexMissingException ime) {, +                // Fix for issue where bulk request references an index that, +                // cannot be auto-created see issue #8125, +                unavailableException = ime;, +        if (unavailableException == null) {, +            if (indexMetaData.getState() == IndexMetaData.State.CLOSE) {, +                unavailableException = new IndexClosedException(new Index(metaData.index(request.index()).getIndex()));, +        }, +        if (unavailableException != null) {, +                    unavailableException);, +            return true;, +        return false;, +++ b/src/test/java/org/elasticsearch/action/bulk/BulkProcessorClusterSettingsTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.bulk;, +, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.test.ElasticsearchIntegrationTest;, +import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;, +import org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;, +import org.junit.Test;, +, +@ClusterScope(scope = Scope.TEST, numDataNodes = 0), +public class BulkProcessorClusterSettingsTests extends ElasticsearchIntegrationTest {, +, +    @Test, +    public void testBulkProcessorAutoCreateRestrictions() throws Exception {, +        // See issue #8125, +        Settings settings = ImmutableSettings.settingsBuilder().put("action.auto_create_index", false).build();, +, +        internalCluster().startNode(settings);, +, +        createIndex("willwork");, +        client().admin().cluster().prepareHealth("willwork").setWaitForGreenStatus().execute().actionGet();, +, +        BulkRequestBuilder bulkRequestBuilder = client().prepareBulk();, +        bulkRequestBuilder.add(client().prepareIndex("willwork", "type1", "1").setSource("{\"foo\":1}"));, +        bulkRequestBuilder.add(client().prepareIndex("wontwork", "type1", "2").setSource("{\"foo\":2}"));, +        bulkRequestBuilder.add(client().prepareIndex("willwork", "type1", "3").setSource("{\"foo\":3}"));]