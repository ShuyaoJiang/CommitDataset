[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java, +    public String buildAsString(String separator) {, +        StringBuilder sb = new StringBuilder();, +        for (int i = 0; i < paths.size(); i++) {, +            sb.append(paths.get(i));, +            if (i < (paths.size() - 1)) {, +                sb.append(separator);, +            }, +        }, +        return sb.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java, +    public String buildAsString(String separator) {, +        StringBuilder sb = new StringBuilder();, +        for (int i = 0; i < paths.size(); i++) {, +            sb.append(paths.get(i));, +            if (i < (paths.size() - 1)) {, +                sb.append(separator);, +            }, +        }, +        return sb.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +import org.elasticsearch.common.component.AbstractComponent;, +public class FsBlobStore extends AbstractComponent implements BlobStore {, +        super(settings);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java, +    public String buildAsString(String separator) {, +        StringBuilder sb = new StringBuilder();, +        for (int i = 0; i < paths.size(); i++) {, +            sb.append(paths.get(i));, +            if (i < (paths.size() - 1)) {, +                sb.append(separator);, +            }, +        }, +        return sb.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +import org.elasticsearch.common.component.AbstractComponent;, +public class FsBlobStore extends AbstractComponent implements BlobStore {, +        super(settings);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import javax.annotation.Nullable;, +    protected void initialize(BlobStore blobStore, ClusterName clusterName, @Nullable ByteSizeValue defaultChunkSize) throws IOException {, +        this.chunkSize = componentSettings.getAsBytesSize("chunk_size", defaultChunkSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java, +    public String buildAsString(String separator) {, +        StringBuilder sb = new StringBuilder();, +        for (int i = 0; i < paths.size(); i++) {, +            sb.append(paths.get(i));, +            if (i < (paths.size() - 1)) {, +                sb.append(separator);, +            }, +        }, +        return sb.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +import org.elasticsearch.common.component.AbstractComponent;, +public class FsBlobStore extends AbstractComponent implements BlobStore {, +        super(settings);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import javax.annotation.Nullable;, +    protected void initialize(BlobStore blobStore, ClusterName clusterName, @Nullable ByteSizeValue defaultChunkSize) throws IOException {, +        this.chunkSize = componentSettings.getAsBytesSize("chunk_size", defaultChunkSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/fs/FsGateway.java, +        initialize(new FsBlobStore(componentSettings, gatewayFile), clusterName, null);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java, +    public String buildAsString(String separator) {, +        StringBuilder sb = new StringBuilder();, +        for (int i = 0; i < paths.size(); i++) {, +            sb.append(paths.get(i));, +            if (i < (paths.size() - 1)) {, +                sb.append(separator);, +            }, +        }, +        return sb.toString();, +    }, +, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/blobstore/fs/FsBlobStore.java, +import org.elasticsearch.common.component.AbstractComponent;, +public class FsBlobStore extends AbstractComponent implements BlobStore {, +        super(settings);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import javax.annotation.Nullable;, +    protected void initialize(BlobStore blobStore, ClusterName clusterName, @Nullable ByteSizeValue defaultChunkSize) throws IOException {, +        this.chunkSize = componentSettings.getAsBytesSize("chunk_size", defaultChunkSize);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/fs/FsGateway.java, +        initialize(new FsBlobStore(componentSettings, gatewayFile), clusterName, null);, +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/blobstore/AbstractCloudBlobContainer.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance]