[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/CachedStreamOutput.java, +            counter.set(0);, +++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/CachedStreamOutput.java, +            counter.set(0);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import org.elasticsearch.common.io.stream.CachedStreamOutput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +        CachedStreamOutput.Entry cachedEntry = CachedStreamOutput.popEntry();, +            StreamOutput streamOutput;, +                streamOutput = cachedEntry.cachedLZFBytes();, +            } else {, +                streamOutput = cachedEntry.cachedBytes();, +            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON, streamOutput);, +            metaDataBlobContainer.writeBlob(newMetaData, new ByteArrayInputStream(cachedEntry.bytes().underlyingBytes(), 0, cachedEntry.bytes().size()), cachedEntry.bytes().size());, +        } finally {, +            CachedStreamOutput.pushEntry(cachedEntry);, +++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/io/stream/CachedStreamOutput.java, +            counter.set(0);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/blobstore/BlobStoreGateway.java, +import org.elasticsearch.common.io.stream.CachedStreamOutput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +        CachedStreamOutput.Entry cachedEntry = CachedStreamOutput.popEntry();, +            StreamOutput streamOutput;, +                streamOutput = cachedEntry.cachedLZFBytes();, +            } else {, +                streamOutput = cachedEntry.cachedBytes();, +            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON, streamOutput);, +            metaDataBlobContainer.writeBlob(newMetaData, new ByteArrayInputStream(cachedEntry.bytes().underlyingBytes(), 0, cachedEntry.bytes().size()), cachedEntry.bytes().size());, +        } finally {, +            CachedStreamOutput.pushEntry(cachedEntry);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/gateway/local/LocalGateway.java, +import org.elasticsearch.common.io.Closeables;, +import org.elasticsearch.common.io.stream.CachedStreamOutput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +, +            CachedStreamOutput.Entry cachedEntry = CachedStreamOutput.popEntry();, +            StreamOutput streamOutput;, +            try {, +                try {, +                    if (compress) {, +                        streamOutput = cachedEntry.cachedLZFBytes();, +                    } else {, +                        streamOutput = cachedEntry.cachedBytes();, +                    }, +                    XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON, streamOutput);, +                } catch (Exception e) {, +                    logger.warn("failed to serialize local gateway state", e);, +                    return;, +                }, +                boolean serializedAtLeastOnce = false;, +                for (File dataLocation : nodeEnv.nodeDataLocations()) {, +                    File stateLocation = new File(dataLocation, "_state");, +                    if (!stateLocation.exists()) {, +                        FileSystemUtils.mkdirs(stateLocation);, +                    }, +                    File stateFile = new File(stateLocation, "metadata-" + version);, +                    FileOutputStream fos = null;, +                    try {, +                        fos = new FileOutputStream(stateFile);, +                        fos.write(cachedEntry.bytes().underlyingBytes(), 0, cachedEntry.bytes().size());, +                        fos.getChannel().force(true);, +                        serializedAtLeastOnce = true;, +                    } catch (Exception e) {, +                        logger.warn("failed to write local gateway state to {}", e, stateFile);, +                    } finally {, +                        Closeables.closeQuietly(fos);, +                    }, +                }, +                if (serializedAtLeastOnce) {, +                    metaDataPersistedAtLeastOnce = true;, +                        File stateLocation = new File(dataLocation, "_state");, +            } finally {, +                CachedStreamOutput.pushEntry(cachedEntry);, +            }, +            CachedStreamOutput.Entry cachedEntry = CachedStreamOutput.popEntry();, +            try {, +                StreamOutput streamOutput;, +                try {, +                    if (compress) {, +                        streamOutput = cachedEntry.cachedLZFBytes();, +                    } else {, +                        streamOutput = cachedEntry.cachedBytes();, +                    }, +                    XContentBuilder xContentBuilder = XContentFactory.contentBuilder(XContentType.JSON, streamOutput);, +                } catch (Exception e) {, +                    logger.warn("failed to serialize local gateway shard states", e);, +                boolean serializedAtLeastOnce = false;, +                for (File dataLocation : nodeEnv.nodeDataLocations()) {, +                    File stateLocation = new File(dataLocation, "_state");, +                    if (!stateLocation.exists()) {, +                        FileSystemUtils.mkdirs(stateLocation);]