[+++ b/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +        HighlighterEntry cache = (HighlighterEntry) hitContext.cache().get("highlight");, +            cache = new HighlighterEntry();, +                MapperHighlightEntry entry = cache.mappers.get(mapper);, +                    entry = new MapperHighlightEntry();, +                    cache.mappers.put(mapper, entry);, +                    MapperHighlightEntry entry = cache.mappers.get(mapper);, +                    FieldQuery fieldQuery = null;, +                        entry = new MapperHighlightEntry();, +                        if (cache.fvh == null) {, +                            cache.fvh = new FastVectorHighlighter();, +                        }, +                        if (field.requireFieldMatch()) {, +                            if (cache.fieldMatchFieldQuery == null) {, +                                cache.fieldMatchFieldQuery = new CustomFieldQuery(context.parsedQuery().query(), hitContext.topLevelReader(), true, field.requireFieldMatch());, +                            }, +                            fieldQuery = cache.fieldMatchFieldQuery;, +                        } else {, +                            if (cache.noFieldMatchFieldQuery == null) {, +                                // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...), +                                cache.noFieldMatchFieldQuery = new CustomFieldQuery(context.parsedQuery().query(), hitContext.topLevelReader(), true, field.requireFieldMatch());, +                            }, +                            fieldQuery = cache.noFieldMatchFieldQuery;, +                        }, +                        cache.mappers.put(mapper, entry);, +                    fragments = cache.fvh.getBestFragments(fieldQuery, hitContext.reader(), hitContext.docId(), mapper.names().indexName(), field.fragmentCharSize(), numberOfFragments,, +    static class MapperHighlightEntry {, +, +    static class HighlighterEntry {, +        public FastVectorHighlighter fvh;, +        public FieldQuery noFieldMatchFieldQuery;, +        public FieldQuery fieldMatchFieldQuery;, +        public Map<FieldMapper, MapperHighlightEntry> mappers = Maps.newHashMap();, +    }]