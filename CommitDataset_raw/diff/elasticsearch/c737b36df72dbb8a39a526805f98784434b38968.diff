[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDynamicTemplate.java, +    public boolean match(String name, String dynamicType) {, +            if (dynamicType == null) {, +            if (!patternMatch(matchMappingType, dynamicType)) {, +    public boolean hasType() {, +        return mapping.containsKey("type");, +    }, +, +    public String mappingType(String dynamicType) {, +        return mapping.containsKey("type") ? mapping.get("type").toString() : dynamicType;, +    public Map<String, Object> mappingForName(String name, String dynamicType) {, +        return processMap(mapping, name, dynamicType);, +    private Map<String, Object> processMap(Map<String, Object> map, String name, String dynamicType) {, +            String key = entry.getKey().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +                value = processMap((Map<String, Object>) value, name, dynamicType);, +                value = processList((List) value, name, dynamicType);, +                value = value.toString().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +    private List processList(List list, String name, String dynamicType) {, +                value = processMap((Map<String, Object>) value, name, dynamicType);, +                value = processList((List) value, name, dynamicType);, +                value = value.toString().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDynamicTemplate.java, +    public boolean match(String name, String dynamicType) {, +            if (dynamicType == null) {, +            if (!patternMatch(matchMappingType, dynamicType)) {, +    public boolean hasType() {, +        return mapping.containsKey("type");, +    }, +, +    public String mappingType(String dynamicType) {, +        return mapping.containsKey("type") ? mapping.get("type").toString() : dynamicType;, +    public Map<String, Object> mappingForName(String name, String dynamicType) {, +        return processMap(mapping, name, dynamicType);, +    private Map<String, Object> processMap(Map<String, Object> map, String name, String dynamicType) {, +            String key = entry.getKey().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +                value = processMap((Map<String, Object>) value, name, dynamicType);, +                value = processList((List) value, name, dynamicType);, +                value = value.toString().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +    private List processList(List list, String name, String dynamicType) {, +                value = processMap((Map<String, Object>) value, name, dynamicType);, +                value = processList((List) value, name, dynamicType);, +                value = value.toString().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentObjectMapper.java, +    private XContentMapper.Builder findTemplateBuilder(ParseContext context, String name, String dynamicType) {, +        XContentDynamicTemplate dynamicTemplate = findTemplate(name, dynamicType);, +        return parserContext.typeParser(dynamicTemplate.mappingType(dynamicType)).parse(name, dynamicTemplate.mappingForName(name, dynamicType), parserContext);, +    private XContentDynamicTemplate findTemplate(String name, String dynamicType) {, +            if (dynamicTemplate.match(name, dynamicType)) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentDynamicTemplate.java, +    public boolean match(String name, String dynamicType) {, +            if (dynamicType == null) {, +            if (!patternMatch(matchMappingType, dynamicType)) {, +    public boolean hasType() {, +        return mapping.containsKey("type");, +    }, +, +    public String mappingType(String dynamicType) {, +        return mapping.containsKey("type") ? mapping.get("type").toString() : dynamicType;, +    public Map<String, Object> mappingForName(String name, String dynamicType) {, +        return processMap(mapping, name, dynamicType);, +    private Map<String, Object> processMap(Map<String, Object> map, String name, String dynamicType) {, +            String key = entry.getKey().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +                value = processMap((Map<String, Object>) value, name, dynamicType);, +                value = processList((List) value, name, dynamicType);, +                value = value.toString().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +    private List processList(List list, String name, String dynamicType) {, +                value = processMap((Map<String, Object>) value, name, dynamicType);, +                value = processList((List) value, name, dynamicType);, +                value = value.toString().replace("{name}", name).replace("{dynamic_type}", dynamicType).replace("{dynamicType}", dynamicType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/xcontent/XContentObjectMapper.java, +    private XContentMapper.Builder findTemplateBuilder(ParseContext context, String name, String dynamicType) {, +        XContentDynamicTemplate dynamicTemplate = findTemplate(name, dynamicType);, +        return parserContext.typeParser(dynamicTemplate.mappingType(dynamicType)).parse(name, dynamicTemplate.mappingForName(name, dynamicType), parserContext);, +    private XContentDynamicTemplate findTemplate(String name, String dynamicType) {, +            if (dynamicTemplate.match(name, dynamicType)) {, +++ b/modules/elasticsearch/src/test/java/org/elasticsearch/index/mapper/xcontent/dynamictemplate/genericstore/GenericStoreDynamicTempalteTests.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper.xcontent.dynamictemplate.genericstore;, +, +import org.apache.lucene.document.Document;, +import org.apache.lucene.document.Field;, +import org.elasticsearch.index.mapper.FieldMappers;]