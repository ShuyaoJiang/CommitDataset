[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +import org.elasticsearch.index.shard.ShardId;, +    public static final Setting<Integer> INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING =, +            new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX + ".source", "1000", (value) -> {, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING, this::setWarnThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING, this::setInfoThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING, this::setDebugThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING, this::setTraceThreshold);, +        indexSettings.getScopedSettings().addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING,, +                this::setMaxSourceCharsToLog);, +    public void postIndex(ShardId shardId, Engine.Index indexOperation, Engine.IndexResult result) {, +            sb.append("took[").append(TimeValue.timeValueNanos(tookInNanos)).append("], ");, +            sb.append("took_millis[").append(TimeUnit.NANOSECONDS.toMillis(tookInNanos)).append("], ");, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +import org.elasticsearch.index.shard.ShardId;, +    public static final Setting<Integer> INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING =, +            new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX + ".source", "1000", (value) -> {, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING, this::setWarnThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING, this::setInfoThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING, this::setDebugThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING, this::setTraceThreshold);, +        indexSettings.getScopedSettings().addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING,, +                this::setMaxSourceCharsToLog);, +    public void postIndex(ShardId shardId, Engine.Index indexOperation, Engine.IndexResult result) {, +            sb.append("took[").append(TimeValue.timeValueNanos(tookInNanos)).append("], ");, +            sb.append("took_millis[").append(TimeUnit.NANOSECONDS.toMillis(tookInNanos)).append("], ");, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        index = indexingOperationListeners.preIndex(shardId, index);, +            indexingOperationListeners.postIndex(shardId, index, e);, +        indexingOperationListeners.postIndex(shardId, index, result);, +        delete = indexingOperationListeners.preDelete(shardId, delete);, +            indexingOperationListeners.postDelete(shardId, delete, e);, +        indexingOperationListeners.postDelete(shardId, delete, result);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +import org.elasticsearch.index.shard.ShardId;, +    public static final Setting<Integer> INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING =, +            new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX + ".source", "1000", (value) -> {, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING, this::setWarnThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING, this::setInfoThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING, this::setDebugThreshold);, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING, this::setTraceThreshold);, +        indexSettings.getScopedSettings().addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING,, +                this::setMaxSourceCharsToLog);, +    public void postIndex(ShardId shardId, Engine.Index indexOperation, Engine.IndexResult result) {, +            sb.append("took[").append(TimeValue.timeValueNanos(tookInNanos)).append("], ");, +            sb.append("took_millis[").append(TimeUnit.NANOSECONDS.toMillis(tookInNanos)).append("], ");, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +        index = indexingOperationListeners.preIndex(shardId, index);, +            indexingOperationListeners.postIndex(shardId, index, e);, +        indexingOperationListeners.postIndex(shardId, index, result);, +        delete = indexingOperationListeners.preDelete(shardId, delete);, +            indexingOperationListeners.postDelete(shardId, delete, e);, +        indexingOperationListeners.postDelete(shardId, delete, result);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexingOperationListener.java, +    default Engine.Index preIndex(ShardId shardId, Engine.Index operation) {, +     * related failures. See {@link #postIndex(ShardId, Engine.Index, Exception)}, +    default void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {}, +     * See {@link #postIndex(ShardId, Engine.Index, Engine.IndexResult)} for document, +    default void postIndex(ShardId shardId, Engine.Index index, Exception ex) {}, +    default Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {, +     * related failures. See {@link #postDelete(ShardId, Engine.Delete, Exception)}, +    default void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {}, +     * See {@link #postDelete(ShardId, Engine.Delete, Engine.DeleteResult)} for document, +    default void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) {}, +        public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {, +                    listener.preIndex(shardId, operation);, +        public void postIndex(ShardId shardId, Engine.Index index, Engine.IndexResult result) {, +                    listener.postIndex(shardId, index, result);, +        public void postIndex(ShardId shardId, Engine.Index index, Exception ex) {, +                    listener.postIndex(shardId, index, ex);, +        public Engine.Delete preDelete(ShardId shardId, Engine.Delete delete) {, +                    listener.preDelete(shardId, delete);, +        public void postDelete(ShardId shardId, Engine.Delete delete, Engine.DeleteResult result) {, +                    listener.postDelete(shardId, delete, result);, +        public void postDelete(ShardId shardId, Engine.Delete delete, Exception ex) {, +                    listener.postDelete(shardId, delete, ex);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/IndexingSlowLog.java, +import org.elasticsearch.index.shard.ShardId;, +    public static final Setting<Integer> INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG_SETTING =, +            new Setting<>(INDEX_INDEXING_SLOWLOG_PREFIX + ".source", "1000", (value) -> {, +        indexSettings.getScopedSettings(), +                .addSettingsUpdateConsumer(INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING, this::setWarnThreshold);, +        indexSettings.getScopedSettings()]