[+++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +    /**, +     * the quote analyzer should overwrite any other forced analyzer in quoted parts of the query, +     */, +    public void testQuoteAnalyzer() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        // Prefix, +        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\""), +                .field(STRING_FIELD_NAME), +                .analyzer("whitespace"), +                .quoteAnalyzer("simple"), +                .toQuery(createShardContext());, +        Query expectedQuery =, +                new BooleanQuery.Builder(), +                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD)), +                        .add(new BooleanClause(new PhraseQuery.Builder(), +                                .add(new Term(STRING_FIELD_NAME, "two"), 0), +                                .add(new Term(STRING_FIELD_NAME, "three"), 1), +                                .build(), Occur.SHOULD)), +                    .build();, +        assertEquals(expectedQuery, query);, +    }, +, +++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java, +    /**, +     * the quote analyzer should overwrite any other forced analyzer in quoted parts of the query, +     */, +    public void testQuoteAnalyzer() throws Exception {, +        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);, +        // Prefix, +        Query query = new QueryStringQueryBuilder("ONE \"TWO THREE\""), +                .field(STRING_FIELD_NAME), +                .analyzer("whitespace"), +                .quoteAnalyzer("simple"), +                .toQuery(createShardContext());, +        Query expectedQuery =, +                new BooleanQuery.Builder(), +                        .add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME, "ONE")), Occur.SHOULD)), +                        .add(new BooleanClause(new PhraseQuery.Builder(), +                                .add(new Term(STRING_FIELD_NAME, "two"), 0), +                                .add(new Term(STRING_FIELD_NAME, "three"), 1), +                                .build(), Occur.SHOULD)), +                    .build();, +        assertEquals(expectedQuery, query);, +    }, +, +++ b/docs/reference/query-dsl/query-string-query.asciidoc, +|`quote_analyzer` |The name of the analyzer that is used to analyze, +quoted phrases in the query string. For those parts, it overrides other, +analyzers that are set using the `analyzer` parameter or the, +<<search-quote-analyzer,`search_quote_analyzer`>> setting., +]