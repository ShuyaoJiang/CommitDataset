[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java, +import org.elasticsearch.Version;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableList;, +    private static final List<String> SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING = unmodifiableList(Arrays.asList(, +            "type",, +            // common keyword parameters, for which the upgrade is straightforward, +            "index", "store", "doc_values", "omit_norms", "norms", "boost", "fields", "copy_to",, +            "include_in_all", "ignore_above", "index_options", "similarity"));, +, +            if (parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)) {, +                // Downgrade "keyword" to "string" in indexes created in 2.x so you can use modern syntax against old indexes, +                Set<String> unsupportedParameters = new HashSet<>(node.keySet());, +                unsupportedParameters.removeAll(SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING);, +                if (false == SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING.containsAll(node.keySet())) {, +                    throw new IllegalArgumentException("Automatic downgrade from [keyword] to [string] failed because parameters ", +                            + unsupportedParameters + " are not supported for automatic downgrades.");, +                }, +                {   // Downgrade "index", +                    Object index = node.get("index");, +                    if (index == null || Boolean.TRUE.equals(index)) {, +                        index = "not_analyzed";, +                    } else if (Boolean.FALSE.equals(index)) {, +                        index = "no";, +                    } else {, +                        throw new IllegalArgumentException(, +                                "Can't parse [index] value [" + index + "] for field [" + name + "], expected [true] or [false]");, +                    }, +                    node.put("index", index);, +                }, +                , +                return new StringFieldMapper.TypeParser().parse(name, node, parserContext);, +            }, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/index/mapper/KeywordFieldMapper.java, +import org.elasticsearch.Version;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableList;, +    private static final List<String> SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING = unmodifiableList(Arrays.asList(, +            "type",, +            // common keyword parameters, for which the upgrade is straightforward, +            "index", "store", "doc_values", "omit_norms", "norms", "boost", "fields", "copy_to",, +            "include_in_all", "ignore_above", "index_options", "similarity"));, +, +            if (parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)) {, +                // Downgrade "keyword" to "string" in indexes created in 2.x so you can use modern syntax against old indexes, +                Set<String> unsupportedParameters = new HashSet<>(node.keySet());, +                unsupportedParameters.removeAll(SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING);, +                if (false == SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING.containsAll(node.keySet())) {, +                    throw new IllegalArgumentException("Automatic downgrade from [keyword] to [string] failed because parameters ", +                            + unsupportedParameters + " are not supported for automatic downgrades.");, +                }, +                {   // Downgrade "index", +                    Object index = node.get("index");, +                    if (index == null || Boolean.TRUE.equals(index)) {, +                        index = "not_analyzed";, +                    } else if (Boolean.FALSE.equals(index)) {, +                        index = "no";, +                    } else {, +                        throw new IllegalArgumentException(, +                                "Can't parse [index] value [" + index + "] for field [" + name + "], expected [true] or [false]");, +                    }, +                    node.put("index", index);, +                }, +                , +                return new StringFieldMapper.TypeParser().parse(name, node, parserContext);, +            }, +++ b/core/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java, +import org.elasticsearch.Version;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +import static java.util.Collections.unmodifiableList;, +    private static final List<String> SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING = unmodifiableList(Arrays.asList(, +            "type",, +            // common text parameters, for which the upgrade is straightforward, +            "index", "store", "doc_values", "omit_norms", "norms", "boost", "fields", "copy_to",, +            "fielddata", "eager_global_ordinals", "fielddata_frequency_filter", "include_in_all",, +            "analyzer", "search_analyzer", "search_quote_analyzer",, +            "index_options", "position_increment_gap", "similarity"));, +, +            if (parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)) {, +                // Downgrade "text" to "string" in indexes created in 2.x so you can use modern syntax against old indexes, +                Set<String> unsupportedParameters = new HashSet<>(node.keySet());, +                unsupportedParameters.removeAll(SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING);, +                if (false == SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING.containsAll(node.keySet())) {, +                    throw new IllegalArgumentException("Automatic downgrade from [text] to [string] failed because parameters ", +                            + unsupportedParameters + " are not supported for automatic downgrades.");, +                }, +                {   // Downgrade "index", +                    Object index = node.get("index");, +                    if (index == null || Boolean.TRUE.equals(index)) {, +                        index = "analyzed";, +                    } else if (Boolean.FALSE.equals(index)) {]