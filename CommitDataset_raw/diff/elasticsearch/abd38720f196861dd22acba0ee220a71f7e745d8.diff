[+++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +import org.elasticsearch.cloud.aws.network.Ec2NameResolver;, +import org.elasticsearch.common.network.NetworkService;, +    @Inject public AwsEc2Service(Settings settings, SettingsFilter settingsFilter, NetworkService networkService) {, +        // add specific ec2 name resolver, +        networkService.addCustomNameResolver(new Ec2NameResolver(settings));, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +import org.elasticsearch.cloud.aws.network.Ec2NameResolver;, +import org.elasticsearch.common.network.NetworkService;, +    @Inject public AwsEc2Service(Settings settings, SettingsFilter settingsFilter, NetworkService networkService) {, +        // add specific ec2 name resolver, +        networkService.addCustomNameResolver(new Ec2NameResolver(settings));, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/cloud/aws/network/Ec2NameResolver.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.io.Closeables;, +import org.elasticsearch.common.network.NetworkService.CustomNameResolver;, +import org.elasticsearch.common.settings.Settings;, +, +import java.io.InputStream;, +import java.net.URLConnection;, + *, +public class Ec2NameResolver extends AbstractComponent implements CustomNameResolver {, +        EC2("ec2", PRIVATE_IPv4.ec2Name);, +    public Ec2NameResolver(Settings settings) {, +        super(settings);, +    public InetAddress resolve(Ec2HostnameType type, boolean warnOnFailure) {, +        URLConnection urlConnection = null;, +        InputStream in = null;, +            logger.debug("obtaining ec2 hostname from ec2 meta-data url {}", url);, +            urlConnection = url.openConnection();, +            urlConnection.setConnectTimeout(2000);, +            in = urlConnection.getInputStream();, +            BufferedReader urlReader = new BufferedReader(new InputStreamReader(in));, +            if (warnOnFailure) {, +                logger.warn("failed to get metadata for [" + type.configName + "]: " + ExceptionsHelper.detailedMessage(e));, +            } else {, +                logger.debug("failed to get metadata for [" + type.configName + "]: " + ExceptionsHelper.detailedMessage(e));, +            }, +        } finally {, +            Closeables.closeQuietly(in);, +    @Override public InetAddress resolveDefault() {, +        return null; // using this, one has to explicitly specify _ec2_ in network setting, +//        return resolve(Ec2HostnameType.DEFAULT, false);, +    @Override public InetAddress resolveIfPossible(String value) {, +                return resolve(type, true);, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/cloud/aws/AwsEc2Service.java, +import org.elasticsearch.cloud.aws.network.Ec2NameResolver;, +import org.elasticsearch.common.network.NetworkService;, +    @Inject public AwsEc2Service(Settings settings, SettingsFilter settingsFilter, NetworkService networkService) {, +        // add specific ec2 name resolver, +        networkService.addCustomNameResolver(new Ec2NameResolver(settings));, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/cloud/aws/network/Ec2NameResolver.java, +import org.elasticsearch.ExceptionsHelper;, +import org.elasticsearch.common.component.AbstractComponent;, +import org.elasticsearch.common.io.Closeables;, +import org.elasticsearch.common.network.NetworkService.CustomNameResolver;, +import org.elasticsearch.common.settings.Settings;, +, +import java.io.InputStream;, +import java.net.URLConnection;, + *, +public class Ec2NameResolver extends AbstractComponent implements CustomNameResolver {, +        EC2("ec2", PRIVATE_IPv4.ec2Name);, +    public Ec2NameResolver(Settings settings) {, +        super(settings);, +    public InetAddress resolve(Ec2HostnameType type, boolean warnOnFailure) {, +        URLConnection urlConnection = null;, +        InputStream in = null;, +            logger.debug("obtaining ec2 hostname from ec2 meta-data url {}", url);, +            urlConnection = url.openConnection();, +            urlConnection.setConnectTimeout(2000);, +            in = urlConnection.getInputStream();, +            BufferedReader urlReader = new BufferedReader(new InputStreamReader(in));, +            if (warnOnFailure) {, +                logger.warn("failed to get metadata for [" + type.configName + "]: " + ExceptionsHelper.detailedMessage(e));, +            } else {, +                logger.debug("failed to get metadata for [" + type.configName + "]: " + ExceptionsHelper.detailedMessage(e));, +            }, +        } finally {, +            Closeables.closeQuietly(in);, +    @Override public InetAddress resolveDefault() {, +        return null; // using this, one has to explicitly specify _ec2_ in network setting, +//        return resolve(Ec2HostnameType.DEFAULT, false);, +    @Override public InetAddress resolveIfPossible(String value) {, +                return resolve(type, true);, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/discovery/ec2/Ec2Discovery.java, +                                ClusterService clusterService, ZenPingService pingService, AwsEc2Service ec2Service) {]