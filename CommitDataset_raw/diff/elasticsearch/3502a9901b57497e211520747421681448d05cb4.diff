[+++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/IndexUpgradeCheck.java, +import org.elasticsearch.transport.TransportResponse;, +import java.util.function.BiConsumer;, +import java.util.function.BiFunction;, +import java.util.function.Consumer;, +public class IndexUpgradeCheck<T> extends AbstractComponent {, +    private final BiFunction<IndexMetaData, Map<String, String>, UpgradeActionRequired> actionRequired;, +    private final InternalIndexReindexer<T> reindexer;, +     * Creates a new upgrade check, +     * @param actionRequired - return true if they can work with the index with specified name, +     * @param client         - client, +     * @param clusterService - cluster service, +     * @param types          - a list of types that the reindexing should be limited to, +     * @param updateScript   - the upgrade script that should be used during reindexing, +                             BiFunction<IndexMetaData, Map<String, String>, UpgradeActionRequired> actionRequired,, +                             Client client, ClusterService clusterService, String[] types, Script updateScript) {, +        this(name, settings, actionRequired, client, clusterService, types, updateScript,, +                listener -> listener.onResponse(null), (t, listener) -> listener.onResponse(TransportResponse.Empty.INSTANCE));, +     * @param actionRequired - return true if they can work with the index with specified name, +     * @param preUpgrade     - action that should be performed before upgrade, +     * @param postUpgrade    - action that should be performed after upgrade, +    public IndexUpgradeCheck(String name, Settings settings,, +                             BiFunction<IndexMetaData, Map<String, String>, UpgradeActionRequired> actionRequired,, +                             Client client, ClusterService clusterService, String[] types, Script updateScript,, +                             Consumer<ActionListener<T>> preUpgrade,, +                             BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade) {, +        this.actionRequired = actionRequired;, +        this.reindexer = new InternalIndexReindexer<>(client, clusterService, UPRADE_VERSION, updateScript, types, preUpgrade,, +                postUpgrade);, +, +    public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData, Map<String, String> params) {, +        return actionRequired.apply(indexMetaData, params);, +    public void upgrade(IndexMetaData indexMetaData, ClusterState state,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/IndexUpgradeCheck.java, +import org.elasticsearch.transport.TransportResponse;, +import java.util.function.BiConsumer;, +import java.util.function.BiFunction;, +import java.util.function.Consumer;, +public class IndexUpgradeCheck<T> extends AbstractComponent {, +    private final BiFunction<IndexMetaData, Map<String, String>, UpgradeActionRequired> actionRequired;, +    private final InternalIndexReindexer<T> reindexer;, +     * Creates a new upgrade check, +     * @param actionRequired - return true if they can work with the index with specified name, +     * @param client         - client, +     * @param clusterService - cluster service, +     * @param types          - a list of types that the reindexing should be limited to, +     * @param updateScript   - the upgrade script that should be used during reindexing, +                             BiFunction<IndexMetaData, Map<String, String>, UpgradeActionRequired> actionRequired,, +                             Client client, ClusterService clusterService, String[] types, Script updateScript) {, +        this(name, settings, actionRequired, client, clusterService, types, updateScript,, +                listener -> listener.onResponse(null), (t, listener) -> listener.onResponse(TransportResponse.Empty.INSTANCE));, +     * @param actionRequired - return true if they can work with the index with specified name, +     * @param preUpgrade     - action that should be performed before upgrade, +     * @param postUpgrade    - action that should be performed after upgrade, +    public IndexUpgradeCheck(String name, Settings settings,, +                             BiFunction<IndexMetaData, Map<String, String>, UpgradeActionRequired> actionRequired,, +                             Client client, ClusterService clusterService, String[] types, Script updateScript,, +                             Consumer<ActionListener<T>> preUpgrade,, +                             BiConsumer<T, ActionListener<TransportResponse.Empty>> postUpgrade) {, +        this.actionRequired = actionRequired;, +        this.reindexer = new InternalIndexReindexer<>(client, clusterService, UPRADE_VERSION, updateScript, types, preUpgrade,, +                postUpgrade);, +, +    public UpgradeActionRequired actionRequired(IndexMetaData indexMetaData, Map<String, String> params) {, +        return actionRequired.apply(indexMetaData, params);, +    public void upgrade(IndexMetaData indexMetaData, ClusterState state,, +++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/IndexUpgradeService.java, +import org.elasticsearch.Version;, +            UpgradeActionRequired upgradeActionRequired = upgradeInfo(indexMetaData, index, params);, +            if (upgradeActionRequired != null) {, +                results.put(index, upgradeActionRequired);, +            }, +        }, +        return results;, +    }, +, +    private UpgradeActionRequired upgradeInfo(IndexMetaData indexMetaData, String index, Map<String, String> params) {, +            UpgradeActionRequired upgradeActionRequired = check.actionRequired(indexMetaData, params);, +                    return upgradeActionRequired;, +                    return null;, +        // Catch all check for all indices that didn't match the specific checks, +        if (indexMetaData.getCreationVersion().before(Version.V_5_0_0)) {, +            return UpgradeActionRequired.REINDEX;, +        } else {, +            return null;, +            UpgradeActionRequired upgradeActionRequired = check.actionRequired(indexMetaData, params);, +                    check.upgrade(indexMetaData, state, listener);, +++ b/plugin/src/main/java/org/elasticsearch/xpack/upgrade/IndexUpgradeCheck.java, +import org.elasticsearch.transport.TransportResponse;, +import java.util.function.BiConsumer;, +import java.util.function.BiFunction;, +import java.util.function.Consumer;, +public class IndexUpgradeCheck<T> extends AbstractComponent {, +    private final BiFunction<IndexMetaData, Map<String, String>, UpgradeActionRequired> actionRequired;, +    private final InternalIndexReindexer<T> reindexer;, +     * Creates a new upgrade check, +     * @param actionRequired - return true if they can work with the index with specified name, +     * @param client         - client, +     * @param clusterService - cluster service, +     * @param types          - a list of types that the reindexing should be limited to]