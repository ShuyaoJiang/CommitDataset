[+++ b/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastOperationAction.java, +                        } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastOperationAction.java, +                        } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.index.mapper.FieldMappers;, +        final FieldMappers indexName = mapperService.indexName(field);, +        if (indexName == null) {, +            throw new ElasticSearchIllegalStateException("no index mapper found for field: [" + field + "]");, +        }, +        PostingsFormatProvider postingsFormat = indexName.mapper().postingsFormatProvider();, +++ b/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastOperationAction.java, +                        } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.index.mapper.FieldMappers;, +        final FieldMappers indexName = mapperService.indexName(field);, +        if (indexName == null) {, +            throw new ElasticSearchIllegalStateException("no index mapper found for field: [" + field + "]");, +        }, +        PostingsFormatProvider postingsFormat = indexName.mapper().postingsFormatProvider();, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +import org.apache.lucene.store.IOContext;, +    public BloomFilteredFieldsConsumer fieldsConsumer(SegmentWriteState state), +    public BloomFilteredFieldsProducer fieldsProducer(SegmentReadState state), +    public final class BloomFilteredFieldsProducer extends FieldsProducer {, +        // for internal use only, +        FieldsProducer getDelegate() {, +            return delegateFieldsProducer;, +        }, +, +                if (state.context.context != IOContext.Context.MERGE) {, +                    // if we merge we don't need to load the bloom filters, +                }, +    final class BloomFilteredFieldsConsumer extends FieldsConsumer {, +        // for internal use only, +        FieldsConsumer getDelegate() {, +            return delegateFieldsConsumer;, +        }, +, +    public PostingsFormat getDelegate() {, +        return this.delegatePostingsFormat;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastOperationAction.java, +                        } catch (Throwable e) {, +++ b/src/main/java/org/elasticsearch/index/codec/PerFieldMappingPostingFormatCodec.java, +import org.elasticsearch.ElasticSearchIllegalStateException;, +import org.elasticsearch.index.mapper.FieldMappers;, +        final FieldMappers indexName = mapperService.indexName(field);, +        if (indexName == null) {, +            throw new ElasticSearchIllegalStateException("no index mapper found for field: [" + field + "]");, +        }, +        PostingsFormatProvider postingsFormat = indexName.mapper().postingsFormatProvider();, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/BloomFilterPostingsFormat.java, +import org.apache.lucene.store.IOContext;, +    public BloomFilteredFieldsConsumer fieldsConsumer(SegmentWriteState state), +    public BloomFilteredFieldsProducer fieldsProducer(SegmentReadState state), +    public final class BloomFilteredFieldsProducer extends FieldsProducer {, +        // for internal use only, +        FieldsProducer getDelegate() {, +            return delegateFieldsProducer;, +        }, +, +                if (state.context.context != IOContext.Context.MERGE) {, +                    // if we merge we don't need to load the bloom filters, +                }, +    final class BloomFilteredFieldsConsumer extends FieldsConsumer {, +        // for internal use only, +        FieldsConsumer getDelegate() {, +            return delegateFieldsConsumer;, +        }, +, +    public PostingsFormat getDelegate() {, +        return this.delegatePostingsFormat;, +    }, +, +++ b/src/main/java/org/elasticsearch/index/codec/postingsformat/ElasticSearch090PostingsFormat.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +package org.elasticsearch.index.codec.postingsformat;, +, +import java.io.IOException;]