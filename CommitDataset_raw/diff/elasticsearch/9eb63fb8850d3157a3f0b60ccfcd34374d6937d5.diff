[+++ b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java, +                builder = new LegacyGeoPointFieldMapper.Builder(name);, +            if (builder instanceof LegacyGeoPointFieldMapper.Builder) {, +                return LegacyGeoPointFieldMapper.parse((LegacyGeoPointFieldMapper.Builder) builder, node, parserContext);, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java, +                builder = new LegacyGeoPointFieldMapper.Builder(name);, +            if (builder instanceof LegacyGeoPointFieldMapper.Builder) {, +                return LegacyGeoPointFieldMapper.parse((LegacyGeoPointFieldMapper.Builder) builder, node, parserContext);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java, +                builder = new LegacyGeoPointFieldMapper.Builder(name);, +            if (builder instanceof LegacyGeoPointFieldMapper.Builder) {, +                return LegacyGeoPointFieldMapper.parse((LegacyGeoPointFieldMapper.Builder) builder, node, parserContext);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/mapper/LegacyGeoPointFieldMapper.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.index.mapper;, +, +import com.carrotsearch.hppc.ObjectHashSet;, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +import org.apache.lucene.document.Field;, +import org.apache.lucene.index.IndexOptions;, +import org.apache.lucene.util.BytesRef;, +import org.elasticsearch.common.Explicit;, +import org.elasticsearch.common.geo.GeoDistance;, +import org.elasticsearch.common.geo.GeoPoint;, +import org.elasticsearch.common.geo.GeoUtils;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.unit.DistanceUnit;, +import org.elasticsearch.common.util.ByteUtils;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.common.xcontent.support.XContentMapValues;, +, +import java.io.IOException;, +import java.util.Iterator;, +import java.util.Map;, +, +, +/**, + * Parsing: We handle:, + * <p>, + * - "field" : "geo_hash", + * - "field" : "lat,lon", + * - "field" : {, + * "lat" : 1.1,, + * "lon" : 2.1, + * }, + */, +public class LegacyGeoPointFieldMapper extends BaseGeoPointFieldMapper implements ArrayValueMapperParser {, +, +    public static final String CONTENT_TYPE = "geo_point";, +, +    public static class Names extends BaseGeoPointFieldMapper.Names {, +        public static final String COERCE = "coerce";, +    }, +, +    public static class Defaults extends BaseGeoPointFieldMapper.Defaults{, +        public static final Explicit<Boolean> COERCE = new Explicit(false, false);, +, +        public static final GeoPointFieldType FIELD_TYPE = new GeoPointFieldType();, +, +        static {, +            FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);, +            FIELD_TYPE.setTokenized(false);, +            FIELD_TYPE.setOmitNorms(true);, +            FIELD_TYPE.freeze();, +        }, +    }, +, +    /**, +     * Concrete builder for legacy GeoPointField, +     */, +    public static class Builder extends BaseGeoPointFieldMapper.Builder<Builder, LegacyGeoPointFieldMapper> {, +, +        private Boolean coerce;, +, +        public Builder(String name) {, +            super(name, Defaults.FIELD_TYPE);, +            this.builder = this;, +        }, +, +        public Builder coerce(boolean coerce) {]