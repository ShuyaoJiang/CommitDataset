[+++ b/TESTING.asciidoc, +gradle :distribution:integ-test-zip:integTest   \, +gradle :distribution:integ-test-zip:integTest \, +++ b/TESTING.asciidoc, +gradle :distribution:integ-test-zip:integTest   \, +gradle :distribution:integ-test-zip:integTest \, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +import java.nio.file.Files, +import java.nio.file.FileVisitResult, +import java.nio.file.Path, +import java.nio.file.SimpleFileVisitor, +import java.nio.file.attribute.BasicFileAttributes, +, +    private boolean missingClasses;, +     * Set to true to be lenient with missing classes. By default this check will fail if it finds, +    public void setMissingClasses(boolean value) {, +        missingClasses = value;, +    public boolean isMissingClasses() {, +        return missingClasses;, +        // warn that classes are missing, +        // TODO: move these to excludes list!, +        if (missingClasses) {, +            logger.warn("[thirdPartyAudit] WARNING: CLASSES ARE MISSING! Expect NoClassDefFoundError in bug reports from users!"), +        // jarHellReprise, +        checkSheistyClasses(tmpDir.toPath(), new HashSet<>(Arrays.asList(excludedFiles)));, +        , +                            failOnMissingClasses: !missingClasses,, +    , +    /**, +     * check for sheisty classes: if they also exist in the extensions classloader, its jar hell with the jdk!, +     */, +    private void checkSheistyClasses(Path root, Set<String> excluded) {, +        // system.parent = extensions loader., +        // note: for jigsaw, this evilness will need modifications (e.g. use jrt filesystem!). , +        // but groovy/gradle needs to work at all first!, +        ClassLoader ext = ClassLoader.getSystemClassLoader().getParent(), +        assert ext != null, +        , +        Set<String> sheistySet = new TreeSet<>();, +        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {, +            @Override, +            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {, +                String entry = root.relativize(file).toString(), +                if (entry.endsWith(".class")) {, +                    if (ext.getResource(entry) != null) {, +                        sheistySet.add(entry);, +                    }, +                }, +                return FileVisitResult.CONTINUE;, +            }, +        });, +        , +        // check if we are ok, +        if (sheistySet.isEmpty()) {, +            return;, +        }, +        , +        // leniency against exclusions list, +        sheistySet.removeAll(excluded);, +        , +        if (sheistySet.isEmpty()) {, +            logger.warn("[thirdPartyAudit] WARNING: JAR HELL WITH JDK! Expect insanely hard-to-debug problems!"), +        } else {, +            throw new IllegalStateException("JAR HELL WITH JDK! " + sheistySet);, +        }, +    }, +++ b/TESTING.asciidoc, +gradle :distribution:integ-test-zip:integTest   \, +gradle :distribution:integ-test-zip:integTest \, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/ThirdPartyAuditTask.groovy, +import java.nio.file.Files, +import java.nio.file.FileVisitResult, +import java.nio.file.Path, +import java.nio.file.SimpleFileVisitor, +import java.nio.file.attribute.BasicFileAttributes, +, +    private boolean missingClasses;, +     * Set to true to be lenient with missing classes. By default this check will fail if it finds, +    public void setMissingClasses(boolean value) {, +        missingClasses = value;, +    public boolean isMissingClasses() {, +        return missingClasses;, +        // warn that classes are missing, +        // TODO: move these to excludes list!, +        if (missingClasses) {, +            logger.warn("[thirdPartyAudit] WARNING: CLASSES ARE MISSING! Expect NoClassDefFoundError in bug reports from users!"), +        // jarHellReprise, +        checkSheistyClasses(tmpDir.toPath(), new HashSet<>(Arrays.asList(excludedFiles)));, +        , +                            failOnMissingClasses: !missingClasses,, +    , +    /**, +     * check for sheisty classes: if they also exist in the extensions classloader, its jar hell with the jdk!, +     */, +    private void checkSheistyClasses(Path root, Set<String> excluded) {, +        // system.parent = extensions loader., +        // note: for jigsaw, this evilness will need modifications (e.g. use jrt filesystem!). , +        // but groovy/gradle needs to work at all first!, +        ClassLoader ext = ClassLoader.getSystemClassLoader().getParent(), +        assert ext != null]