[+++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +        builder.field(HasChildQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +        builder.field(HasChildQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import java.util.Locale;, +        } else if ("sum".equals(scoreModeString)) {, +    public static String scoreModeAsString(ScoreMode scoreMode) {, +        if (scoreMode == ScoreMode.Total) {, +            // Lucene uses 'total' but 'sum' is more consistent with other elasticsearch APIs, +            return "sum";, +        } else {, +            return scoreMode.name().toLowerCase(Locale.ROOT);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +        builder.field(HasChildQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import java.util.Locale;, +        } else if ("sum".equals(scoreModeString)) {, +    public static String scoreModeAsString(ScoreMode scoreMode) {, +        if (scoreMode == ScoreMode.Total) {, +            // Lucene uses 'total' but 'sum' is more consistent with other elasticsearch APIs, +            return "sum";, +        } else {, +            return scoreMode.name().toLowerCase(Locale.ROOT);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +            builder.field(NestedQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +        builder.field(HasChildQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import java.util.Locale;, +        } else if ("sum".equals(scoreModeString)) {, +    public static String scoreModeAsString(ScoreMode scoreMode) {, +        if (scoreMode == ScoreMode.Total) {, +            // Lucene uses 'total' but 'sum' is more consistent with other elasticsearch APIs, +            return "sum";, +        } else {, +            return scoreMode.name().toLowerCase(Locale.ROOT);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +            builder.field(NestedQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    scoreMode = HasChildQueryParser.parseScoreMode(parser.text());, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +        builder.field(HasChildQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import java.util.Locale;, +        } else if ("sum".equals(scoreModeString)) {, +    public static String scoreModeAsString(ScoreMode scoreMode) {, +        if (scoreMode == ScoreMode.Total) {, +            // Lucene uses 'total' but 'sum' is more consistent with other elasticsearch APIs, +            return "sum";, +        } else {, +            return scoreMode.name().toLowerCase(Locale.ROOT);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +            builder.field(NestedQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    scoreMode = HasChildQueryParser.parseScoreMode(parser.text());, +++ b/core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +        builder.field(HasChildQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import java.util.Locale;, +        } else if ("sum".equals(scoreModeString)) {, +    public static String scoreModeAsString(ScoreMode scoreMode) {, +        if (scoreMode == ScoreMode.Total) {, +            // Lucene uses 'total' but 'sum' is more consistent with other elasticsearch APIs, +            return "sum";, +        } else {, +            return scoreMode.name().toLowerCase(Locale.ROOT);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java, +            builder.field(NestedQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java, +                    scoreMode = HasChildQueryParser.parseScoreMode(parser.text());, +++ b/core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java, +++ b/core/src/test/java/org/elasticsearch/index/query/HasChildQueryParserTests.java, +        assertThat("min", equalTo(HasChildQueryParser.scoreModeAsString(ScoreMode.Min)));, +        assertThat("max", equalTo(HasChildQueryParser.scoreModeAsString(ScoreMode.Max)));, +        assertThat("avg", equalTo(HasChildQueryParser.scoreModeAsString(ScoreMode.Avg)));, +        assertThat("fromString(total) != SUM", ScoreMode.Total, equalTo(HasChildQueryParser.parseScoreMode("sum")));, +        assertThat("sum", equalTo(HasChildQueryParser.scoreModeAsString(ScoreMode.Total)));, +        assertThat("none", equalTo(HasChildQueryParser.scoreModeAsString(ScoreMode.None)));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +        builder.field(HasChildQueryParser.SCORE_MODE_FIELD.getPreferredName(), HasChildQueryParser.scoreModeAsString(scoreMode));, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +import java.util.Locale;, +        } else if ("sum".equals(scoreModeString)) {]