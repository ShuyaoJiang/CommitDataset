[+++ b/docs/reference/aggregations/bucket/diversified-sampler-aggregation.asciidoc, +                    "source": "doc['tags'].hashCode()", +++ b/docs/reference/aggregations/bucket/diversified-sampler-aggregation.asciidoc, +                    "source": "doc['tags'].hashCode()", +++ b/docs/reference/modules/scripting/fields.asciidoc, +`_fields['field_name'].value` or `_fields['field_name']` syntax., +++ b/docs/reference/aggregations/bucket/diversified-sampler-aggregation.asciidoc, +                    "source": "doc['tags'].hashCode()", +++ b/docs/reference/modules/scripting/fields.asciidoc, +`_fields['field_name'].value` or `_fields['field_name']` syntax., +++ b/modules/lang-painless/src/test/resources/rest-api-spec/test/painless/30_search.yml, +                            source: "doc['f'].size()", +++ b/docs/reference/aggregations/bucket/diversified-sampler-aggregation.asciidoc, +                    "source": "doc['tags'].hashCode()", +++ b/docs/reference/modules/scripting/fields.asciidoc, +`_fields['field_name'].value` or `_fields['field_name']` syntax., +++ b/modules/lang-painless/src/test/resources/rest-api-spec/test/painless/30_search.yml, +                            source: "doc['f'].size()", +++ b/server/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +import java.util.function.BiConsumer;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(ScriptDocValues.class));, +    /**, +     * Callback for deprecated fields. In production this should always point to, +     * {@link #deprecationLogger} but tests will override it so they can test, +     * that we use the required permissions when calling it., +     */, +    private final BiConsumer<String, String> deprecationCallback;, +, +    public ScriptDocValues() {, +        deprecationCallback = deprecationLogger::deprecatedAndMaybeLog;, +    }, +, +    /**, +     * Constructor for testing deprecation callback., +     */, +    ScriptDocValues(BiConsumer<String, String> deprecationCallback) {, +        this.deprecationCallback = deprecationCallback;, +    }, +, +        deprecated("ScriptDocValues#getValues", "Deprecated getValues used, the field is a list and should be accessed directly.", +                + " For example, use doc['foo'] instead of doc['foo'].values.");, +    /**, +     * Log a deprecation log, with the server's permissions and not the permissions, +     * of the script calling this method. We need to do this to prevent errors, +     * when rolling the log file., +     */, +    private void deprecated(String key, String message) {, +        AccessController.doPrivileged(new PrivilegedAction<Void>() {, +            @Override, +            public Void run() {, +                deprecationCallback.accept(key, message);, +                return null;, +            }, +        });, +    }, +, +        /**, +         * Constructor for testing deprecation callback., +         */, +        Longs(SortedNumericDocValues in, BiConsumer<String, String> deprecationCallback) {, +            super(deprecationCallback);, +            this.in = in;, +        }, +, +         * Constructor for testing deprecation callback., +         */, +        Dates(SortedNumericDocValues in, BiConsumer<String, String> deprecationCallback) {, +            super(deprecationCallback);, +            this.in = in;, +        }, +, +        /**, +        /**, +         * Constructor for testing deprecation callback., +         */, +        GeoPoints(MultiGeoPointValues in, BiConsumer<String, String> deprecationCallback) {, +            super(deprecationCallback);, +            this.in =  in;, +        }, +, +++ b/docs/reference/aggregations/bucket/diversified-sampler-aggregation.asciidoc, +                    "source": "doc['tags'].hashCode()", +++ b/docs/reference/modules/scripting/fields.asciidoc, +`_fields['field_name'].value` or `_fields['field_name']` syntax., +++ b/modules/lang-painless/src/test/resources/rest-api-spec/test/painless/30_search.yml, +                            source: "doc['f'].size()", +++ b/server/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java, +import org.apache.logging.log4j.LogManager;, +import org.elasticsearch.common.logging.DeprecationLogger;, +import java.security.AccessController;, +import java.security.PrivilegedAction;, +import java.util.function.BiConsumer;, +    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(ScriptDocValues.class));, +    /**, +     * Callback for deprecated fields. In production this should always point to, +     * {@link #deprecationLogger} but tests will override it so they can test]