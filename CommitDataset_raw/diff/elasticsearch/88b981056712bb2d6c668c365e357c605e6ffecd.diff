[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationIssue.java, +import org.elasticsearch.common.Strings;, +, +    @Override, +    public String toString() {, +        return Strings.toString(this);, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationIssue.java, +import org.elasticsearch.common.Strings;, +, +    @Override, +    public String toString() {, +        return Strings.toString(this);, +    }, +++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/DeprecationChecks.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +            IndexDeprecationChecks::oldIndicesCheck));, +    /**, +     * helper utility function to reduce repeat of running a specific {@link List} of checks., +     *, +     * @param checks The functional checks to execute using the mapper function, +     * @param mapper The function that executes the lambda check with the appropriate arguments, +     * @param <T> The signature of the check (BiFunction, Function, including the appropriate arguments), +     * @return The list of {@link DeprecationIssue} that were found in the cluster, +     */, +    static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {, +        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList());, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationIssue.java, +import org.elasticsearch.common.Strings;, +, +    @Override, +    public String toString() {, +        return Strings.toString(this);, +    }, +++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/DeprecationChecks.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +            IndexDeprecationChecks::oldIndicesCheck));, +    /**, +     * helper utility function to reduce repeat of running a specific {@link List} of checks., +     *, +     * @param checks The functional checks to execute using the mapper function, +     * @param mapper The function that executes the lambda check with the appropriate arguments, +     * @param <T> The signature of the check (BiFunction, Function, including the appropriate arguments), +     * @return The list of {@link DeprecationIssue} that were found in the cluster, +     */, +    static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {, +        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList());, +    }, +++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java, +    static DeprecationIssue oldIndicesCheck(IndexMetaData indexMetaData) {, +        Version createdWith = indexMetaData.getCreationVersion();, +        if (createdWith.before(Version.V_7_0_0)) {, +                    "Index created before 7.0",, +                        "breaking-changes-8.0.html",, +                    "This index was created using version: " + createdWith);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/deprecation/DeprecationIssue.java, +import org.elasticsearch.common.Strings;, +, +    @Override, +    public String toString() {, +        return Strings.toString(this);, +    }, +++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/DeprecationChecks.java, +import java.util.Objects;, +import java.util.stream.Collectors;, +            IndexDeprecationChecks::oldIndicesCheck));, +    /**, +     * helper utility function to reduce repeat of running a specific {@link List} of checks., +     *, +     * @param checks The functional checks to execute using the mapper function, +     * @param mapper The function that executes the lambda check with the appropriate arguments, +     * @param <T> The signature of the check (BiFunction, Function, including the appropriate arguments), +     * @return The list of {@link DeprecationIssue} that were found in the cluster, +     */, +    static <T> List<DeprecationIssue> filterChecks(List<T> checks, Function<T, DeprecationIssue> mapper) {, +        return checks.stream().map(mapper).filter(Objects::nonNull).collect(Collectors.toList());, +    }, +++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java, +    static DeprecationIssue oldIndicesCheck(IndexMetaData indexMetaData) {, +        Version createdWith = indexMetaData.getCreationVersion();, +        if (createdWith.before(Version.V_7_0_0)) {, +                    "Index created before 7.0",, +                        "breaking-changes-8.0.html",, +                    "This index was created using version: " + createdWith);, +++ b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/DeprecationChecksTests.java, +/*, + * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one, + * or more contributor license agreements. Licensed under the Elastic License;, + * you may not use this file except in compliance with the Elastic License., + */, +, +package org.elasticsearch.xpack.deprecation;, +, +import org.elasticsearch.test.ESTestCase;, +import org.elasticsearch.xpack.core.deprecation.DeprecationInfoAction;, +import org.elasticsearch.xpack.core.deprecation.DeprecationIssue;, +]