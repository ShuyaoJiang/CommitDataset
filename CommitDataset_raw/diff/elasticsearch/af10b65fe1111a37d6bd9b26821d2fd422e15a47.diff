[+++ b/dev-tools/build_release.py, +import urllib.request, +, +  return get_hash('HEAD'), +, +def get_hash(version):, +  return os.popen('git rev-parse --verify %s 2>&1' % (version)).read().strip(), +    conn = HTTPConnection(host, port, timeout), +def artifact_names(release, path = ''):, +  return [os.path.join(path, 'elasticsearch-%s.%s' % (release, t)) for t in ['deb', 'tar.gz', 'zip']], +, +  common_artifacts = artifact_names(release, 'target/releases/'), +def download_and_verify(release, files, base_url='https://download.elasticsearch.org/elasticsearch/elasticsearch'):, +  print('Downloading and verifying release %s from %s' % (release, base_url)), +  tmp_dir = tempfile.mkdtemp(), +  try:, +    downloaded_files = [], +    for file in files:, +      name = os.path.basename(file), +      url = '%s/%s' % (base_url, name), +      abs_file_path = os.path.join(tmp_dir, name), +      print('  Downloading %s' % (url)), +      downloaded_files.append(abs_file_path), +      urllib.request.urlretrieve(url, abs_file_path), +      url = ''.join([url, '.sha1.txt']), +      checksum_file = os.path.join(tmp_dir, ''.join([abs_file_path, '.sha1.txt'])), +      urllib.request.urlretrieve(url, checksum_file), +      print('  Verifying checksum %s' % (checksum_file)), +      run('cd %s && sha1sum -c %s' % (tmp_dir, os.path.basename(checksum_file))), +    smoke_test_release(release, downloaded_files, get_hash('v%s' % release)), +  finally:, +    shutil.rmtree(tmp_dir), +, +def smoke_test_release(release, files, expected_hash):, +          if version['build_hash'].strip() !=  expected_hash:, +  parser.add_argument('--smoke', '-s', dest='smoke', default='',, +                      help='Smoke tests the given release'), +, +  parser.set_defaults(smoke=None), +  build = not args.smoke, +  smoke_test_version = args.smoke, +, +  if not smoke_test_version and not dry_run:, +    smoke_test_version = release_version, +  elif smoke_test_version:, +    print("Skipping build - smoketest only against version %s" % smoke_test_version), +, +  if build:, +      smoke_test_release(release_version, artifacts, get_head_hash()), +  if smoke_test_version:, +    download_and_verify(smoke_test_version, artifact_names(smoke_test_version))]