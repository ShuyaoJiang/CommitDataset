[+++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +                boolean remove = false;, +                    remove = true;, +                    remove = true;, +                }, +, +                if (remove) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +                boolean remove = false;, +                    remove = true;, +                    remove = true;, +                }, +, +                if (remove) {, +++ b/src/main/java/org/elasticsearch/index/shard/ShardId.java, +        hashCode = computeHashCode();, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +                boolean remove = false;, +                    remove = true;, +                    remove = true;, +                }, +, +                if (remove) {, +++ b/src/main/java/org/elasticsearch/index/shard/ShardId.java, +        hashCode = computeHashCode();, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +                logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +                boolean remove = false;, +                    remove = true;, +                    remove = true;, +                }, +, +                if (remove) {, +++ b/src/main/java/org/elasticsearch/index/shard/ShardId.java, +        hashCode = computeHashCode();, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +                logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");, +++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                    ShardRouting currentRoutingEntry = indexShard.routingEntry();, +                    boolean needToDeleteCurrentShard = false;, +                    if (currentRoutingEntry.initializing() && shardRouting.initializing()) {, +                        // both are initializing, see if they are different instanceof of the shard routing, so they got switched on us, +                        if (currentRoutingEntry.primary() && !shardRouting.primary()) {, +                            needToDeleteCurrentShard = true;, +                        }, +                        // recovering from different nodes..., restart recovery, +                        if (currentRoutingEntry.relocatingNodeId() != null && shardRouting.relocatingNodeId() != null &&, +                                !currentRoutingEntry.relocatingNodeId().equals(shardRouting.relocatingNodeId())) {, +                            needToDeleteCurrentShard = true;, +                        }, +                    }, +                    if (needToDeleteCurrentShard) {, +                        if (logger.isDebugEnabled()) {, +                            logger.debug("[{}][{}] removing shard (different instance of it allocated on this node)", shardRouting.index(), shardRouting.id());, +                        }, +                        recoveryTarget.cancelRecovery(shardRouting.shardId());, +                        indexService.removeShard(shardRouting.id(), "removing shard (different instance of it allocated on this node)");, +                    }, +                }, +            }, +, +            if (indexService.hasShard(shardId)) {, +                InternalIndexShard indexShard = (InternalIndexShard) indexService.shard(shardId);, +                if (!shardRouting.equals(indexShard.routingEntry())) {, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/AllocationService.java, +                boolean remove = false;, +                    remove = true;, +                    remove = true;, +                }, +, +                if (remove) {, +++ b/src/main/java/org/elasticsearch/index/shard/ShardId.java, +        hashCode = computeHashCode();, +++ b/src/main/java/org/elasticsearch/index/shard/service/InternalIndexShard.java, +                logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");, +++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +                    ShardRouting currentRoutingEntry = indexShard.routingEntry();, +                    boolean needToDeleteCurrentShard = false;, +                    if (currentRoutingEntry.initializing() && shardRouting.initializing()) {, +                        // both are initializing, see if they are different instanceof of the shard routing, so they got switched on us, +                        if (currentRoutingEntry.primary() && !shardRouting.primary()) {, +                            needToDeleteCurrentShard = true;, +                        }, +                        // recovering from different nodes..., restart recovery, +                        if (currentRoutingEntry.relocatingNodeId() != null && shardRouting.relocatingNodeId() != null &&, +                                !currentRoutingEntry.relocatingNodeId().equals(shardRouting.relocatingNodeId())) {, +                            needToDeleteCurrentShard = true;, +                        }, +                    }, +                    if (needToDeleteCurrentShard) {, +                        if (logger.isDebugEnabled()) {, +                            logger.debug("[{}][{}] removing shard (different instance of it allocated on this node)", shardRouting.index(), shardRouting.id());, +                        }, +                        recoveryTarget.cancelRecovery(shardRouting.shardId());, +                        indexService.removeShard(shardRouting.id(), "removing shard (different instance of it allocated on this node)");, +                    }, +                }, +            }, +]