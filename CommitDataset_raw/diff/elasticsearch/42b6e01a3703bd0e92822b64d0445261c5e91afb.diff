[+++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +    /** A weigher for the Guava filter cache that uses a minimum entry size */, +        private final int minimumEntrySize;, +, +        public FilterCacheValueWeigher(int minimumEntrySize) {, +            this.minimumEntrySize = minimumEntrySize;, +        }, +, +            return Math.max(weight, this.minimumEntrySize);, +++ b/src/main/java/org/elasticsearch/index/cache/filter/weighted/WeightedFilterCache.java, +    /** A weigher for the Guava filter cache that uses a minimum entry size */, +        private final int minimumEntrySize;, +, +        public FilterCacheValueWeigher(int minimumEntrySize) {, +            this.minimumEntrySize = minimumEntrySize;, +        }, +, +            return Math.max(weight, this.minimumEntrySize);, +++ b/src/main/java/org/elasticsearch/indices/cache/filter/IndicesFilterCache.java, +    private final int minimumEntryWeight;, +    public static final String INDICES_CACHE_FILTER_CLEAN_INTERVAL = "indices.cache.filter.clean_interval";, +    public static final String INDICES_CACHE_FILTER_MINIMUM_ENTRY_WEIGHT = "indices.cache.filter.minimum_entry_weight";, +                logger.info("updating [{}] from [{}] to [{}]",, +                        INDICES_CACHE_FILTER_SIZE, IndicesFilterCache.this.size, size);, +                logger.info("updating [{}] from [{}] to [{}]",, +                        INDICES_CACHE_FILTER_EXPIRE, IndicesFilterCache.this.expire, expire);, +                logger.info("updating [{}] from [{}] to [{}]",, +                        INDICES_CACHE_FILTER_CONCURRENCY_LEVEL, IndicesFilterCache.this.concurrencyLevel, concurrencyLevel);, +        this.size = settings.get(INDICES_CACHE_FILTER_SIZE, "10%");, +        this.expire = settings.getAsTime(INDICES_CACHE_FILTER_EXPIRE, null);, +        this.minimumEntryWeight = settings.getAsInt(INDICES_CACHE_FILTER_MINIMUM_ENTRY_WEIGHT, 1024); // 1k per entry minimum, +        if (minimumEntryWeight <= 0) {, +            throw new ElasticsearchIllegalArgumentException("minimum_entry_weight must be > 0 but was: " + minimumEntryWeight);, +        }, +        this.cleanInterval = settings.getAsTime(INDICES_CACHE_FILTER_CLEAN_INTERVAL, TimeValue.timeValueSeconds(60));, +        // defaults to 4, but this is a busy map for all indices, increase it a bit, +                .maximumWeight(sizeInBytes).weigher(new WeightedFilterCache.FilterCacheValueWeigher(minimumEntryWeight));, +        cacheBuilder.concurrencyLevel(this.concurrencyLevel);, +        cache.cleanUp();]