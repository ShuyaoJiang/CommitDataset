[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support quite a few, +                 * constructs unless we output this skip. We don't know if, +                 * we're going to use these constructs, but we might so we, +                 * output the skip just in case. */, +            if (test.skip) {, +                current.println("      reason: $test.skip"), +            if (null == response.skip) {, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support quite a few, +                 * constructs unless we output this skip. We don't know if, +                 * we're going to use these constructs, but we might so we, +                 * output the skip just in case. */, +            if (test.skip) {, +                current.println("      reason: $test.skip"), +            if (null == response.skip) {, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/SnippetsTask.groovy, +                if (snippet.testResponse, +                        && 'js' == snippet.language, +                        && null == snippet.skip) {, +                                snippet.skip = it.group(4), +                        parse(loc, matcher.group(2), /(?:$SUBSTITUTION|$CAT|$SKIP) ?/) {, +                            } else if (it.group(4) != null) {, +                                // TESTRESPONSE[skip:reason], +                                snippet.skip = it.group(4), +        String skip = null, +                if (skip) {, +                    result += "[skip=$skip]", +                if (skip) {, +                    result += "[skip=$skip]", +                }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support quite a few, +                 * constructs unless we output this skip. We don't know if, +                 * we're going to use these constructs, but we might so we, +                 * output the skip just in case. */, +            if (test.skip) {, +                current.println("      reason: $test.skip"), +            if (null == response.skip) {, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/SnippetsTask.groovy, +                if (snippet.testResponse, +                        && 'js' == snippet.language, +                        && null == snippet.skip) {, +                                snippet.skip = it.group(4), +                        parse(loc, matcher.group(2), /(?:$SUBSTITUTION|$CAT|$SKIP) ?/) {, +                            } else if (it.group(4) != null) {, +                                // TESTRESPONSE[skip:reason], +                                snippet.skip = it.group(4), +        String skip = null, +                if (skip) {, +                    result += "[skip=$skip]", +                if (skip) {, +                    result += "[skip=$skip]", +                }, +++ b/docs/README.asciidoc, +  * `// TESTRESPONSE[skip:reason]`: Skip the assertions specified by this, +  response., +* `// NOTCONSOLE`: Marks this snippet as neither `// CONSOLE` nor, +  `// TESTRESPONSE`, excluding it from the list of unconverted snippets. We, +  should only use this for snippets that *are* JSON but are *not* responses or, +  requests., +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/RestTestsFromSnippetsTask.groovy, +                /* The Elasticsearch test runner doesn't support quite a few, +                 * constructs unless we output this skip. We don't know if, +                 * we're going to use these constructs, but we might so we, +                 * output the skip just in case. */, +            if (test.skip) {, +                current.println("      reason: $test.skip"), +            if (null == response.skip) {, +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/SnippetsTask.groovy, +                if (snippet.testResponse, +                        && 'js' == snippet.language, +                        && null == snippet.skip) {, +                                snippet.skip = it.group(4), +                        parse(loc, matcher.group(2), /(?:$SUBSTITUTION|$CAT|$SKIP) ?/) {, +                            } else if (it.group(4) != null) {, +                                // TESTRESPONSE[skip:reason], +                                snippet.skip = it.group(4), +        String skip = null, +                if (skip) {, +                    result += "[skip=$skip]", +                if (skip) {, +                    result += "[skip=$skip]", +                }, +++ b/docs/README.asciidoc, +  * `// TESTRESPONSE[skip:reason]`: Skip the assertions specified by this, +  response., +* `// NOTCONSOLE`: Marks this snippet as neither `// CONSOLE` nor, +  `// TESTRESPONSE`, excluding it from the list of unconverted snippets. We, +  should only use this for snippets that *are* JSON but are *not* responses or, +  requests., +++ b/docs/reference/aggregations/bucket/significanttext-aggregation.asciidoc, +// TESTRESPONSE[skip:historically skipped]]