[+++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                        set.add(RoutingTable.shardRoutingTable(indexRouting, calculateScaledShardId(indexMetaData, r, partitionOffset)));, +            return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +                    return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +    private ShardIterator shardRoutings(IndexShardRoutingTable indexShard, DiscoveryNodes nodes,, +            @Nullable ResponseCollectorService collectorService, @Nullable Map<String, Long> nodeCounts) {, +        if (awarenessAttributes.isEmpty()) {, +            if (useAdaptiveReplicaSelection) {, +                return indexShard.activeInitializingShardsRankedIt(collectorService, nodeCounts);, +            } else {, +                return indexShard.activeInitializingShardsRandomIt();, +        } else {, +            return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                        set.add(RoutingTable.shardRoutingTable(indexRouting, calculateScaledShardId(indexMetaData, r, partitionOffset)));, +            return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +                    return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +    private ShardIterator shardRoutings(IndexShardRoutingTable indexShard, DiscoveryNodes nodes,, +            @Nullable ResponseCollectorService collectorService, @Nullable Map<String, Long> nodeCounts) {, +        if (awarenessAttributes.isEmpty()) {, +            if (useAdaptiveReplicaSelection) {, +                return indexShard.activeInitializingShardsRankedIt(collectorService, nodeCounts);, +            } else {, +                return indexShard.activeInitializingShardsRandomIt();, +        } else {, +            return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingChangesObserver.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                        set.add(RoutingTable.shardRoutingTable(indexRouting, calculateScaledShardId(indexMetaData, r, partitionOffset)));, +            return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +                    return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +    private ShardIterator shardRoutings(IndexShardRoutingTable indexShard, DiscoveryNodes nodes,, +            @Nullable ResponseCollectorService collectorService, @Nullable Map<String, Long> nodeCounts) {, +        if (awarenessAttributes.isEmpty()) {, +            if (useAdaptiveReplicaSelection) {, +                return indexShard.activeInitializingShardsRankedIt(collectorService, nodeCounts);, +            } else {, +                return indexShard.activeInitializingShardsRandomIt();, +        } else {, +            return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingChangesObserver.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingException.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                        set.add(RoutingTable.shardRoutingTable(indexRouting, calculateScaledShardId(indexMetaData, r, partitionOffset)));, +            return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +                    return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +    private ShardIterator shardRoutings(IndexShardRoutingTable indexShard, DiscoveryNodes nodes,, +            @Nullable ResponseCollectorService collectorService, @Nullable Map<String, Long> nodeCounts) {, +        if (awarenessAttributes.isEmpty()) {, +            if (useAdaptiveReplicaSelection) {, +                return indexShard.activeInitializingShardsRankedIt(collectorService, nodeCounts);, +            } else {, +                return indexShard.activeInitializingShardsRandomIt();, +        } else {, +            return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingChangesObserver.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingException.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                    unassignPrimaryAndPromoteActiveReplicaIfExists(failedShard, unassignedInfo, routingChangesObserver);, +                unassignPrimaryAndPromoteActiveReplicaIfExists(failedShard, unassignedInfo, routingChangesObserver);, +            } else {, +                if (failedShard.relocating()) {, +                    remove(failedShard);, +                } else {, +                    moveToUnassigned(failedShard, unassignedInfo);, +                }, +            }, +        }, +        routingChangesObserver.shardFailed(failedShard, unassignedInfo);, +        assert node(failedShard.currentNodeId()).getByShardId(failedShard.shardId()) == null : "failedShard " + failedShard +, +            " was matched but wasn't removed";, +    }, +, +    private void unassignPrimaryAndPromoteActiveReplicaIfExists(ShardRouting failedShard, UnassignedInfo unassignedInfo,, +                                                                RoutingChangesObserver routingChangesObserver) {, +        assert failedShard.primary();, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/OperationRouting.java, +                        set.add(RoutingTable.shardRoutingTable(indexRouting, calculateScaledShardId(indexMetaData, r, partitionOffset)));, +            return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +                    return shardRoutings(indexShard, nodes, collectorService, nodeCounts);, +    private ShardIterator shardRoutings(IndexShardRoutingTable indexShard, DiscoveryNodes nodes,, +            @Nullable ResponseCollectorService collectorService, @Nullable Map<String, Long> nodeCounts) {, +        if (awarenessAttributes.isEmpty()) {, +            if (useAdaptiveReplicaSelection) {, +                return indexShard.activeInitializingShardsRankedIt(collectorService, nodeCounts);, +            } else {, +                return indexShard.activeInitializingShardsRandomIt();, +        } else {, +            return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes);, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingChangesObserver.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingException.java, +++ b/server/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                    unassignPrimaryAndPromoteActiveReplicaIfExists(failedShard, unassignedInfo, routingChangesObserver);, +                unassignPrimaryAndPromoteActiveReplicaIfExists(failedShard, unassignedInfo, routingChangesObserver);, +            } else {]