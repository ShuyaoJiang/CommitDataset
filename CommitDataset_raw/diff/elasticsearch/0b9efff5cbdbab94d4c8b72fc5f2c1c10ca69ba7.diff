[+++ b/benchmarks/build.gradle, +    compile "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/benchmarks/build.gradle, +    compile "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +    id 'com.gradle.build-scan' version '1.13.2', +  @org.gradle.api.internal.tasks.options.Option(, +++ b/benchmarks/build.gradle, +    compile "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +    id 'com.gradle.build-scan' version '1.13.2', +  @org.gradle.api.internal.tasks.options.Option(, +++ b/buildSrc/build.gradle, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +  }, +  // tests can't  be run with randomized test runner, +  // it's fine as we run them as part of :buildSrc, +  test.enabled = false, +++ b/benchmarks/build.gradle, +    compile "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +    id 'com.gradle.build-scan' version '1.13.2', +  @org.gradle.api.internal.tasks.options.Option(, +++ b/buildSrc/build.gradle, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +  }, +  // tests can't  be run with randomized test runner, +  // it's fine as we run them as part of :buildSrc, +  test.enabled = false, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +        final String statusMessage, +++ b/benchmarks/build.gradle, +    compile "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +    id 'com.gradle.build-scan' version '1.13.2', +  @org.gradle.api.internal.tasks.options.Option(, +++ b/buildSrc/build.gradle, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +  }, +  // tests can't  be run with randomized test runner, +  // it's fine as we run them as part of :buildSrc, +  test.enabled = false, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +        final String statusMessage, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        final String minimumGradleVersion, +        final String compilerJavaHome = System.getenv('JAVA_HOME'), +        project.tasks.withType(RandomizedTestingTask) {, +++ b/benchmarks/build.gradle, +    compile "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +    id 'com.gradle.build-scan' version '1.13.2', +  @org.gradle.api.internal.tasks.options.Option(, +++ b/buildSrc/build.gradle, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +  }, +  // tests can't  be run with randomized test runner, +  // it's fine as we run them as part of :buildSrc, +  test.enabled = false, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +        final String statusMessage, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        final String minimumGradleVersion, +        final String compilerJavaHome = System.getenv('JAVA_HOME'), +        project.tasks.withType(RandomizedTestingTask) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.check.dependsOn(integTest), +++ b/benchmarks/build.gradle, +    compile "org.openjdk.jmh:jmh-generator-annprocess:$versions.jmh", +++ b/build.gradle, +    id 'com.gradle.build-scan' version '1.13.2', +  @org.gradle.api.internal.tasks.options.Option(, +++ b/buildSrc/build.gradle, +  test {, +    include "**/*Tests.class", +    exclude "**/*IT.class", +  }, +  // tests can't  be run with randomized test runner, +  // it's fine as we run them as part of :buildSrc, +  test.enabled = false, +++ b/buildSrc/src/main/groovy/com/carrotsearch/gradle/junit4/TestProgressLogger.groovy, +        final String statusMessage, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +        final String minimumGradleVersion, +        final String compilerJavaHome = System.getenv('JAVA_HOME'), +        project.tasks.withType(RandomizedTestingTask) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginBuildPlugin.groovy, +        project.check.dependsOn(integTest), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/PrecommitTasks.groovy, +        // on them. But we want `precommit` to depend on `checkstyle` which depends on them so, +        // we have to swap them., +            project.tasks[JavaBasePlugin.CHECK_TASK_NAME].dependsOn.remove(task)]