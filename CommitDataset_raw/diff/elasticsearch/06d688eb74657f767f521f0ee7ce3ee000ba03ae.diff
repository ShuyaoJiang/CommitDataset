[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Optional;, +            Optional<Tuple<DataCounts, ModelSizeStats>> stats = processManager.getStatistics(request.getJobId());, +            if (stats.isPresent()) {, +                JobStatus jobStatus = mlMetadata.getAllocations().get(request.jobId).getStatus();, +                Response.JobStats jobStats = new Response.JobStats(request.jobId, stats.get().v1(), stats.get().v2(), jobStatus);, +                listener.onResponse(new QueryPage<>(Collections.singletonList(jobStats), 1, Job.RESULTS_FIELD));, +            } else {, +                listener.onResponse(new QueryPage<>(Collections.emptyList(), 0, Job.RESULTS_FIELD));, +            }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +import org.elasticsearch.common.collect.Tuple;, +import java.util.Optional;, +            Optional<Tuple<DataCounts, ModelSizeStats>> stats = processManager.getStatistics(request.getJobId());, +            if (stats.isPresent()) {, +                JobStatus jobStatus = mlMetadata.getAllocations().get(request.jobId).getStatus();, +                Response.JobStats jobStats = new Response.JobStats(request.jobId, stats.get().v1(), stats.get().v2(), jobStatus);, +                listener.onResponse(new QueryPage<>(Collections.singletonList(jobStats), 1, Job.RESULTS_FIELD));, +            } else {, +                listener.onResponse(new QueryPage<>(Collections.emptyList(), 0, Job.RESULTS_FIELD));, +            }, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java, +import java.util.Optional;, +    public Optional<Tuple<DataCounts, ModelSizeStats>> getStatistics(String jobId) {, +        AutodetectCommunicator communicator = autoDetectCommunicatorByJob.get(jobId);, +        if (communicator == null) {, +            return Optional.empty();, +        }, +        return Optional.of(new Tuple<>(communicator.getDataCounts(), communicator.getModelSizeStats()));]