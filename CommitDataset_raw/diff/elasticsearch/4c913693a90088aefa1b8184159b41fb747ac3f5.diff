[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/inject/AbstractModule.java, +/**, + * Copyright (C) 2006 Google Inc., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.elasticsearch.common.inject;, +, +import org.elasticsearch.common.inject.binder.AnnotatedBindingBuilder;, +import org.elasticsearch.common.inject.binder.AnnotatedConstantBindingBuilder;, +import org.elasticsearch.common.inject.binder.LinkedBindingBuilder;, +import org.elasticsearch.common.inject.matcher.Matcher;, +import org.elasticsearch.common.inject.spi.Message;, +import org.elasticsearch.common.inject.spi.TypeConverter;, +import org.elasticsearch.common.inject.spi.TypeListener;, +, +import java.lang.annotation.Annotation;, +, +import static org.elasticsearch.common.base.Preconditions.*;, +, +/**, + * A support class for {@link Module}s which reduces repetition and results in, + * a more readable configuration. Simply extend this class, implement {@link, + * #configure()}, and call the inherited methods which mirror those found in, + * {@link Binder}. For example:, + *, + * <pre>, + * public class MyModule extends AbstractModule {, + *   protected void configure() {, + *     bind(Service.class).to(ServiceImpl.class).in(Singleton.class);, + *     bind(CreditCardPaymentService.class);, + *     bind(PaymentService.class).to(CreditCardPaymentService.class);, + *     bindConstant().annotatedWith(Names.named("port")).to(8080);, + *   }, + * }, + * </pre>, + *, + * @author crazybob@google.com (Bob Lee), + */, +public abstract class AbstractModule implements Module {, +, +    Binder binder;, +, +    public final synchronized void configure(Binder builder) {, +        checkState(this.binder == null, "Re-entry is not allowed.");, +, +        this.binder = checkNotNull(builder, "builder");, +        try {, +            configure();, +        } finally {, +            this.binder = null;, +        }, +    }, +, +    /**, +     * Configures a {@link Binder} via the exposed methods., +     */, +    protected abstract void configure();, +, +    /**, +     * Gets direct access to the underlying {@code Binder}., +     */, +    protected Binder binder() {, +        return binder;, +    }, +, +    /**, +     * @see Binder#bindScope(Class, Scope), +     */, +    protected void bindScope(Class<? extends Annotation> scopeAnnotation,, +                             Scope scope) {, +        binder.bindScope(scopeAnnotation, scope);, +    }, +, +    /**, +     * @see Binder#bind(Key), +     */, +    protected <T> LinkedBindingBuilder<T> bind(Key<T> key) {, +        return binder.bind(key);, +    }, +, +    /**, +     * @see Binder#bind(TypeLiteral), +     */, +    protected <T> AnnotatedBindingBuilder<T> bind(TypeLiteral<T> typeLiteral) {, +        return binder.bind(typeLiteral);, +    }, +, +    /**]