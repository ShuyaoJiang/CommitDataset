[+++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +     * Rounds the given value., +    public abstract long round(long value);, +        public long round(long value) {, +            return roundKey(value, interval) * interval;, +        public long round(long utcMillis) {, +            return rounding.round((long) (factor * utcMillis));, +        public long round(long value) {, +            return rounding.round(value - offset) + offset;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +     * Rounds the given value., +    public abstract long round(long value);, +        public long round(long value) {, +            return roundKey(value, interval) * interval;, +        public long round(long utcMillis) {, +            return rounding.round((long) (factor * utcMillis));, +        public long round(long value) {, +            return rounding.round(value - offset) + offset;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, + * A rounding strategy for dates. It is typically used to group together dates, + * that are part of the same hour/day/month, taking into account time zones and, + * daylight saving times., +        public long round(long utcMillis) {, +            long floor = round(utcMillis);, +            long next = round(field.add(floor, 1));, +                next = round(field.add(floor, 2));, +        public long round(long utcMillis) {, +                    roundedUTC = round(transition - 1);, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +     * Rounds the given value., +    public abstract long round(long value);, +        public long round(long value) {, +            return roundKey(value, interval) * interval;, +        public long round(long utcMillis) {, +            return rounding.round((long) (factor * utcMillis));, +        public long round(long value) {, +            return rounding.round(value - offset) + offset;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, + * A rounding strategy for dates. It is typically used to group together dates, + * that are part of the same hour/day/month, taking into account time zones and, + * daylight saving times., +        public long round(long utcMillis) {, +            long floor = round(utcMillis);, +            long next = round(field.add(floor, 1));, +                next = round(field.add(floor, 2));, +        public long round(long utcMillis) {, +                    roundedUTC = round(transition - 1);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.histogram.InternalDateHistogram;, +                DateHistogramAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalDateHistogram::new));, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +     * Rounds the given value., +    public abstract long round(long value);, +        public long round(long value) {, +            return roundKey(value, interval) * interval;, +        public long round(long utcMillis) {, +            return rounding.round((long) (factor * utcMillis));, +        public long round(long value) {, +            return rounding.round(value - offset) + offset;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, + * A rounding strategy for dates. It is typically used to group together dates, + * that are part of the same hour/day/month, taking into account time zones and, + * daylight saving times., +        public long round(long utcMillis) {, +            long floor = round(utcMillis);, +            long next = round(field.add(floor, 1));, +                next = round(field.add(floor, 2));, +        public long round(long utcMillis) {, +                    roundedUTC = round(transition - 1);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.histogram.InternalDateHistogram;, +                DateHistogramAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalDateHistogram::new));, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +     * Rounds the given value., +    public abstract long round(long value);, +        public long round(long value) {, +            return roundKey(value, interval) * interval;, +        public long round(long utcMillis) {, +            return rounding.round((long) (factor * utcMillis));, +        public long round(long value) {, +            return rounding.round(value - offset) + offset;, +++ b/core/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java, + * A rounding strategy for dates. It is typically used to group together dates, + * that are part of the same hour/day/month, taking into account time zones and, + * daylight saving times., +        public long round(long utcMillis) {, +            long floor = round(utcMillis);, +            long next = round(field.add(floor, 1));, +                next = round(field.add(floor, 2));, +        public long round(long utcMillis) {, +                    roundedUTC = round(transition - 1);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.bucket.histogram.InternalDateHistogram;, +                DateHistogramAggregationBuilder.AGGREGATION_NAME_FIELD).addResultReader(InternalDateHistogram::new));, +++ /dev/null, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/rounding/Rounding.java, +     * Rounds the given value., +    public abstract long round(long value);]