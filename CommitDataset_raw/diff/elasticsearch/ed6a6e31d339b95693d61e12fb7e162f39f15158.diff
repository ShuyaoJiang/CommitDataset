[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +/*, + * Licensed to Elastic Search and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. Elastic Search licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.common.lucene.search.function;, +, +import org.apache.lucene.index.IndexReader;, +import org.apache.lucene.index.Term;, +import org.apache.lucene.search.ComplexExplanation;, +import org.apache.lucene.search.Explanation;, +import org.apache.lucene.search.Filter;, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.Scorer;, +import org.apache.lucene.search.Searcher;, +import org.apache.lucene.search.Similarity;, +import org.apache.lucene.search.Weight;, +import org.apache.lucene.util.ToStringUtils;, +import org.elasticsearch.common.lucene.docset.DocSet;, +import org.elasticsearch.common.lucene.docset.DocSets;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Set;, +, +/**, + * A query that allows for a pluggable boost function / filter. If it matches the filter, it will, + * be boosted by the formula., + *, + * @author kimchy (shay.banon), + */, +public class FiltersFunctionScoreQuery extends Query {, +, +    public static class FilterFunction {, +        public final Filter filter;, +        public final ScoreFunction function;, +, +        public FilterFunction(Filter filter, ScoreFunction function) {, +            this.filter = filter;, +            this.function = function;, +        }, +, +        @Override public boolean equals(Object o) {, +            if (this == o) return true;, +            if (o == null || getClass() != o.getClass()) return false;, +, +            FilterFunction that = (FilterFunction) o;, +, +            if (filter != null ? !filter.equals(that.filter) : that.filter != null) return false;, +            if (function != null ? !function.equals(that.function) : that.function != null) return false;, +, +            return true;, +        }, +, +        @Override public int hashCode() {, +            int result = filter != null ? filter.hashCode() : 0;, +            result = 31 * result + (function != null ? function.hashCode() : 0);, +            return result;, +        }, +    }, +, +    Query subQuery;, +    final FilterFunction[] filterFunctions;, +    DocSet[] docSets;, +, +    public FiltersFunctionScoreQuery(Query subQuery, FilterFunction[] filterFunctions) {, +        this.subQuery = subQuery;, +        this.filterFunctions = filterFunctions;, +        this.docSets = new DocSet[filterFunctions.length];, +    }, +, +    public Query getSubQuery() {, +        return subQuery;, +    }, +, +    public FilterFunction[] getFilterFunctions() {, +        return filterFunctions;, +    }, +, +    @Override, +    public Query rewrite(IndexReader reader) throws IOException {, +        Query newQ = subQuery.rewrite(reader);, +        if (newQ == subQuery) return this;, +        FiltersFunctionScoreQuery bq = (FiltersFunctionScoreQuery) this.clone();, +        bq.subQuery = newQ;]