[+++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +class JarHell {, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    static void checkJarHell() throws Exception {, +        for (final URL url : ((URLClassLoader)loader).getURLs()) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +class JarHell {, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    static void checkJarHell() throws Exception {, +        for (final URL url : ((URLClassLoader)loader).getURLs()) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +class JarHell {, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    static void checkJarHell() throws Exception {, +        for (final URL url : ((URLClassLoader)loader).getURLs()) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +            } else if (throwable instanceof AlreadyClosedException) {, +            } else if (throwable instanceof IllegalStateException) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +class JarHell {, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    static void checkJarHell() throws Exception {, +        for (final URL url : ((URLClassLoader)loader).getURLs()) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +            } else if (throwable instanceof AlreadyClosedException) {, +            } else if (throwable instanceof IllegalStateException) {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/JarHell.java, +class JarHell {, +    @SuppressForbidden(reason = "needs JarFile for speed, just reading entries"), +    static void checkJarHell() throws Exception {, +        for (final URL url : ((URLClassLoader)loader).getURLs()) {, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +                    return (T) readStackTrace(new AlreadyClosedException(readOptionalString(), readThrowable()), this);, +                    return (T) readStackTrace(new IllegalStateException(readOptionalString(), readThrowable()), this);, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java, +            } else if (throwable instanceof AlreadyClosedException) {, +            } else if (throwable instanceof IllegalStateException) {, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginManager.java, +++ b/core/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java, +import org.elasticsearch.common.io.stream.NotSerializableExceptionWrapper;, +            if (ex.getCause().getClass() != Throwable.class) { // throwable is not directly mapped, +                assertEquals(e.getCause().getClass(), ex.getCause().getClass());, +            } else {, +                assertEquals(e.getCause().getClass(), NotSerializableExceptionWrapper.class);, +            }]