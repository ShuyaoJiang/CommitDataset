[+++ b/x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc, +    },, +    "user": "test_admin" <4>, +<4> The user used to execute the watch., +++ b/x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc, +    },, +    "user": "test_admin" <4>, +<4> The user used to execute the watch., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java, +        Authentication authentication = decode(header);, +        ctx.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication);, +        return authentication;, +    }, +, +    public static Authentication decode(String header) throws IOException {, +        return new Authentication(input);, +++ b/x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc, +    },, +    "user": "test_admin" <4>, +<4> The user used to execute the watch., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java, +        Authentication authentication = decode(header);, +        ctx.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication);, +        return authentication;, +    }, +, +    public static Authentication decode(String header) throws IOException {, +        return new Authentication(input);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/execution/WatchExecutionContext.java, +import org.elasticsearch.xpack.core.security.authc.Authentication;, +import org.elasticsearch.xpack.core.security.authc.AuthenticationField;, +import java.io.IOException;, +    private String user;, +            user = WatchExecutionContext.getUsernameFromWatch(watch);, +    /**, +     * @return The user that executes the watch, which will be stored in the watch history, +     */, +    public String getUser() { return user; }, +, +, +    /**, +     * Given a watch, this extracts and decodes the relevant auth header and returns the principal of the user that is, +     * executing the watch., +     */, +    public static String getUsernameFromWatch(Watch watch) throws IOException {, +        if (watch != null && watch.status() != null && watch.status().getHeaders() != null) {, +            String header = watch.status().getHeaders().get(AuthenticationField.AUTHENTICATION_KEY);, +            if (header != null) {, +                Authentication auth = Authentication.decode(header);, +                return auth.getUser().principal();, +            }, +        }, +        return null;, +    }, +++ b/x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc, +    },, +    "user": "test_admin" <4>, +<4> The user used to execute the watch., +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authc/Authentication.java, +        Authentication authentication = decode(header);, +        ctx.putTransient(AuthenticationField.AUTHENTICATION_KEY, authentication);, +        return authentication;, +    }, +, +    public static Authentication decode(String header) throws IOException {, +        return new Authentication(input);, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/execution/WatchExecutionContext.java, +import org.elasticsearch.xpack.core.security.authc.Authentication;, +import org.elasticsearch.xpack.core.security.authc.AuthenticationField;, +import java.io.IOException;, +    private String user;, +            user = WatchExecutionContext.getUsernameFromWatch(watch);, +    /**, +     * @return The user that executes the watch, which will be stored in the watch history, +     */, +    public String getUser() { return user; }, +, +, +    /**, +     * Given a watch, this extracts and decodes the relevant auth header and returns the principal of the user that is, +     * executing the watch., +     */, +    public static String getUsernameFromWatch(Watch watch) throws IOException {, +        if (watch != null && watch.status() != null && watch.status().getHeaders() != null) {, +            String header = watch.status().getHeaders().get(AuthenticationField.AUTHENTICATION_KEY);, +            if (header != null) {, +                Authentication auth = Authentication.decode(header);, +                return auth.getUser().principal();, +            }, +        }, +        return null;, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/watcher/history/WatchRecord.java, +    private static final ParseField USER = new ParseField("user");, +    private final String user;, +                        String nodeId, String user) {, +        this.user = user;, +        this(id, triggerEvent, state, Collections.emptyMap(), null, null, null, null, null, nodeId, null);, +                record.executionResult, record.nodeId, record.user);, +                null, context.getNodeId(), context.getUser());]