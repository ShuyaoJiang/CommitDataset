[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private FileCollection classDirectories;, +                // Default to main and test class files, +                List files = [], +                // But only if the source sets that will make them exist, +                if (project.sourceSets.findByName("main")) {, +                    files.add(project.sourceSets.main.output.classesDir), +                if (project.sourceSets.findByName("test")) {, +                    files.add(project.sourceSets.test.output.classesDir), +                /* In an extra twist, it isn't good enough that the source set, +                 * exists. Empty source sets won't make a classes directory, +                 * which will cause the check to fail. We have to filter the, +                 * empty directories out manually. This filter is done right, +                 * before the actual logger usage check giving the rest of the, +                 * build the opportunity to actually build the directory., +                 */, +                classDirectories = project.files(files).filter { it.exists() }, +    FileCollection getClassDirectories() {, +    void setClassDirectories(FileCollection classDirectories) {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private FileCollection classDirectories;, +                // Default to main and test class files, +                List files = [], +                // But only if the source sets that will make them exist, +                if (project.sourceSets.findByName("main")) {, +                    files.add(project.sourceSets.main.output.classesDir), +                if (project.sourceSets.findByName("test")) {, +                    files.add(project.sourceSets.test.output.classesDir), +                /* In an extra twist, it isn't good enough that the source set, +                 * exists. Empty source sets won't make a classes directory, +                 * which will cause the check to fail. We have to filter the, +                 * empty directories out manually. This filter is done right, +                 * before the actual logger usage check giving the rest of the, +                 * build the opportunity to actually build the directory., +                 */, +                classDirectories = project.files(files).filter { it.exists() }, +    FileCollection getClassDirectories() {, +    void setClassDirectories(FileCollection classDirectories) {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_3_5_ID = 2030599;, +    public static final Version V_2_3_5 = new Version(V_2_3_5_ID, org.apache.lucene.util.Version.LUCENE_5_5_0);, +            case V_2_3_5_ID:, +                return V_2_3_5;, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private FileCollection classDirectories;, +                // Default to main and test class files, +                List files = [], +                // But only if the source sets that will make them exist, +                if (project.sourceSets.findByName("main")) {, +                    files.add(project.sourceSets.main.output.classesDir), +                if (project.sourceSets.findByName("test")) {, +                    files.add(project.sourceSets.test.output.classesDir), +                /* In an extra twist, it isn't good enough that the source set, +                 * exists. Empty source sets won't make a classes directory, +                 * which will cause the check to fail. We have to filter the, +                 * empty directories out manually. This filter is done right, +                 * before the actual logger usage check giving the rest of the, +                 * build the opportunity to actually build the directory., +                 */, +                classDirectories = project.files(files).filter { it.exists() }, +    FileCollection getClassDirectories() {, +    void setClassDirectories(FileCollection classDirectories) {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_3_5_ID = 2030599;, +    public static final Version V_2_3_5 = new Version(V_2_3_5_ID, org.apache.lucene.util.Version.LUCENE_5_5_0);, +            case V_2_3_5_ID:, +                return V_2_3_5;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/precommit/LoggerUsageTask.groovy, +    private FileCollection classDirectories;, +                // Default to main and test class files, +                List files = [], +                // But only if the source sets that will make them exist, +                if (project.sourceSets.findByName("main")) {, +                    files.add(project.sourceSets.main.output.classesDir), +                if (project.sourceSets.findByName("test")) {, +                    files.add(project.sourceSets.test.output.classesDir), +                /* In an extra twist, it isn't good enough that the source set, +                 * exists. Empty source sets won't make a classes directory, +                 * which will cause the check to fail. We have to filter the, +                 * empty directories out manually. This filter is done right, +                 * before the actual logger usage check giving the rest of the, +                 * build the opportunity to actually build the directory., +                 */, +                classDirectories = project.files(files).filter { it.exists() }, +    FileCollection getClassDirectories() {, +    void setClassDirectories(FileCollection classDirectories) {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_2_3_5_ID = 2030599;, +    public static final Version V_2_3_5 = new Version(V_2_3_5_ID, org.apache.lucene.util.Version.LUCENE_5_5_0);, +            case V_2_3_5_ID:, +                return V_2_3_5;, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java, +        nodeFailures) {, +        super(tasks, taskFailures, nodeFailures);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java, +            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);, +        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);]