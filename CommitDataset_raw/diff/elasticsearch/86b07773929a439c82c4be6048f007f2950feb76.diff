[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregatorParser(new TopHitsParser());, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregatorParser(new TopHitsParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +        AggregatorBuilder<?> parse(String aggregationName, XContentParser parser, QueryParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregatorParser(new TopHitsParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +        AggregatorBuilder<?> parse(String aggregationName, XContentParser parser, QueryParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +    public AB subAggregation(PipelineAggregatorBuilder<?> aggregation) {, +    @SuppressWarnings("unchecked"), +        @SuppressWarnings("unchecked"), +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregatorParser(new TopHitsParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +        AggregatorBuilder<?> parse(String aggregationName, XContentParser parser, QueryParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +    public AB subAggregation(PipelineAggregatorBuilder<?> aggregation) {, +    @SuppressWarnings("unchecked"), +        @SuppressWarnings("unchecked"), +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +            new ArrayList<PipelineAggregatorBuilder<?>>());, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregatorFactories;, +            List<PipelineAggregatorBuilder<?>> pipelineAggregators) {, +        for (PipelineAggregatorBuilder<?> factory : this.pipelineAggregatorFactories) {, +        for (PipelineAggregatorBuilder<?> factory : pipelineAggregatorFactories) {, +        private final List<PipelineAggregatorBuilder<?>> pipelineAggregatorFactories = new ArrayList<>();, +        public Builder addPipelineAggregator(PipelineAggregatorBuilder<?> pipelineAggregatorFactory) {, +            List<PipelineAggregatorBuilder<?>> orderedpipelineAggregators = null;, +        private List<PipelineAggregatorBuilder<?>> resolvePipelineAggregatorOrder(, +                List<PipelineAggregatorBuilder<?>> pipelineAggregatorFactories, List<AggregatorBuilder<?>> aggFactories) {, +            Map<String, PipelineAggregatorBuilder<?>> pipelineAggregatorFactoriesMap = new HashMap<>();, +            for (PipelineAggregatorBuilder<?> factory : pipelineAggregatorFactories) {, +            List<PipelineAggregatorBuilder<?>> orderedPipelineAggregatorrs = new LinkedList<>();, +            List<PipelineAggregatorBuilder<?>> unmarkedFactories = new ArrayList<PipelineAggregatorBuilder<?>>(pipelineAggregatorFactories);, +            Set<PipelineAggregatorBuilder<?>> temporarilyMarked = new HashSet<PipelineAggregatorBuilder<?>>();, +                PipelineAggregatorBuilder<?> factory = unmarkedFactories.get(0);, +                Map<String, PipelineAggregatorBuilder<?>> pipelineAggregatorFactoriesMap,, +                List<PipelineAggregatorBuilder<?>> orderedPipelineAggregators, List<PipelineAggregatorBuilder<?>> unmarkedFactories,, +                Set<PipelineAggregatorBuilder<?>> temporarilyMarked, PipelineAggregatorBuilder<?> factory) {, +                                    List<PipelineAggregatorBuilder<?>> subPipelineFactories = aggFactory.factoriesBuilder.pipelineAggregatorFactories;, +                                    for (PipelineAggregatorBuilder<?> subFactory : subPipelineFactories) {, +                        PipelineAggregatorBuilder<?> matchingFactory = pipelineAggregatorFactoriesMap.get(firstAggName);, +        List<PipelineAggregatorBuilder<?>> getPipelineAggregatorFactories() {, +                PipelineAggregatorBuilder<?> factory = in.readPipelineAggregatorFactory();, +            for (PipelineAggregatorBuilder<?> factory : pipelineAggregatorFactories) {, +                for (PipelineAggregatorBuilder<?> subAgg : pipelineAggregatorFactories) {, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregatorParser(new TopHitsParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +        AggregatorBuilder<?> parse(String aggregationName, XContentParser parser, QueryParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +    public AB subAggregation(PipelineAggregatorBuilder<?> aggregation) {, +    @SuppressWarnings("unchecked"), +        @SuppressWarnings("unchecked"), +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +            new ArrayList<PipelineAggregatorBuilder<?>>());, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregatorFactories;, +            List<PipelineAggregatorBuilder<?>> pipelineAggregators) {, +        for (PipelineAggregatorBuilder<?> factory : this.pipelineAggregatorFactories) {, +        for (PipelineAggregatorBuilder<?> factory : pipelineAggregatorFactories) {, +        private final List<PipelineAggregatorBuilder<?>> pipelineAggregatorFactories = new ArrayList<>();, +        public Builder addPipelineAggregator(PipelineAggregatorBuilder<?> pipelineAggregatorFactory) {, +            List<PipelineAggregatorBuilder<?>> orderedpipelineAggregators = null;, +        private List<PipelineAggregatorBuilder<?>> resolvePipelineAggregatorOrder(, +                List<PipelineAggregatorBuilder<?>> pipelineAggregatorFactories, List<AggregatorBuilder<?>> aggFactories) {, +            Map<String, PipelineAggregatorBuilder<?>> pipelineAggregatorFactoriesMap = new HashMap<>();, +            for (PipelineAggregatorBuilder<?> factory : pipelineAggregatorFactories) {, +            List<PipelineAggregatorBuilder<?>> orderedPipelineAggregatorrs = new LinkedList<>();, +            List<PipelineAggregatorBuilder<?>> unmarkedFactories = new ArrayList<PipelineAggregatorBuilder<?>>(pipelineAggregatorFactories);, +            Set<PipelineAggregatorBuilder<?>> temporarilyMarked = new HashSet<PipelineAggregatorBuilder<?>>();, +                PipelineAggregatorBuilder<?> factory = unmarkedFactories.get(0);, +                Map<String, PipelineAggregatorBuilder<?>> pipelineAggregatorFactoriesMap,, +                List<PipelineAggregatorBuilder<?>> orderedPipelineAggregators, List<PipelineAggregatorBuilder<?>> unmarkedFactories,, +                Set<PipelineAggregatorBuilder<?>> temporarilyMarked, PipelineAggregatorBuilder<?> factory) {, +                                    List<PipelineAggregatorBuilder<?>> subPipelineFactories = aggFactory.factoriesBuilder.pipelineAggregatorFactories;, +                                    for (PipelineAggregatorBuilder<?> subFactory : subPipelineFactories) {, +                        PipelineAggregatorBuilder<?> matchingFactory = pipelineAggregatorFactoriesMap.get(firstAggName);, +        List<PipelineAggregatorBuilder<?>> getPipelineAggregatorFactories() {, +                PipelineAggregatorBuilder<?> factory = in.readPipelineAggregatorFactory();, +            for (PipelineAggregatorBuilder<?> factory : pipelineAggregatorFactories) {, +                for (PipelineAggregatorBuilder<?> subAgg : pipelineAggregatorFactories) {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java, +            PipelineAggregatorBuilder<?> factoryPrototype = parser.getFactoryPrototype();, +            PipelineAggregatorBuilder<?> pipelineAggregatorFactory = null;, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +        registerAggregatorParser(new TopHitsParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +        AggregatorBuilder<?> parse(String aggregationName, XContentParser parser, QueryParseContext context) throws IOException;, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +    public AB subAggregation(PipelineAggregatorBuilder<?> aggregation) {, +    @SuppressWarnings("unchecked"), +        @SuppressWarnings("unchecked"), +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorFactories.java, +            new ArrayList<PipelineAggregatorBuilder<?>>());, +    private List<PipelineAggregatorBuilder<?>> pipelineAggregatorFactories;, +            List<PipelineAggregatorBuilder<?>> pipelineAggregators) {, +        for (PipelineAggregatorBuilder<?> factory : this.pipelineAggregatorFactories) {]