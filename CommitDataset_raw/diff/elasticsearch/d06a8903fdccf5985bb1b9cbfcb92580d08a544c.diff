[+++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_1_ID = 5000199;, +    public static final Version V_5_0_1 = new Version(V_5_0_1_ID, org.apache.lucene.util.Version.LUCENE_6_2_1);, +            case V_5_0_1_ID:, +                return V_5_0_1;, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_1_ID = 5000199;, +    public static final Version V_5_0_1 = new Version(V_5_0_1_ID, org.apache.lucene.util.Version.LUCENE_6_2_1);, +            case V_5_0_1_ID:, +                return V_5_0_1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +        final String level = params.param("level", "indices");, +        final boolean isLevelValid =, +            "cluster".equalsIgnoreCase(level) || "indices".equalsIgnoreCase(level) || "shards".equalsIgnoreCase(level);, +            throw new IllegalArgumentException("level parameter must be one of [cluster] or [indices] or [shards] but was [" + level + "]");, +, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_1_ID = 5000199;, +    public static final Version V_5_0_1 = new Version(V_5_0_1_ID, org.apache.lucene.util.Version.LUCENE_6_2_1);, +            case V_5_0_1_ID:, +                return V_5_0_1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +        final String level = params.param("level", "indices");, +        final boolean isLevelValid =, +            "cluster".equalsIgnoreCase(level) || "indices".equalsIgnoreCase(level) || "shards".equalsIgnoreCase(level);, +            throw new IllegalArgumentException("level parameter must be one of [cluster] or [indices] or [shards] but was [" + level + "]");, +, +++ b/core/src/main/java/org/elasticsearch/action/get/GetResponse.java, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_1_ID = 5000199;, +    public static final Version V_5_0_1 = new Version(V_5_0_1_ID, org.apache.lucene.util.Version.LUCENE_6_2_1);, +            case V_5_0_1_ID:, +                return V_5_0_1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +        final String level = params.param("level", "indices");, +        final boolean isLevelValid =, +            "cluster".equalsIgnoreCase(level) || "indices".equalsIgnoreCase(level) || "shards".equalsIgnoreCase(level);, +            throw new IllegalArgumentException("level parameter must be one of [cluster] or [indices] or [shards] but was [" + level + "]");, +, +++ b/core/src/main/java/org/elasticsearch/action/get/GetResponse.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +import java.util.LinkedHashSet;, +    final Map<ClusterStateTaskExecutor, LinkedHashSet<UpdateTask>> updateTasksPerExecutor = new HashMap<>();, +                entry -> new UpdateTask<>(source, entry.getKey(), config.priority(), executor, safe(entry.getValue(), logger)), +                LinkedHashSet<UpdateTask> existingTasks = updateTasksPerExecutor.computeIfAbsent(executor,, +                    k -> new LinkedHashSet<>(updateTasks.size()));, +            final TimeValue timeout = config.timeout();, +            if (timeout != null) {, +                updateTasksExecutor.execute(firstTask, threadPool.scheduler(), timeout, () -> threadPool.generic().execute(() -> {, +                    final ArrayList<UpdateTask<T>> toRemove = new ArrayList<>();, +                            logger.debug("cluster state update task [{}] timed out after [{}]", source, timeout);, +                            toRemove.add(task);, +                        }, +                    }, +                    if (toRemove.isEmpty() == false) {, +                        ClusterStateTaskExecutor<T> clusterStateTaskExecutor = toRemove.get(0).executor;, +                        synchronized (updateTasksPerExecutor) {, +                            LinkedHashSet<UpdateTask> existingTasks = updateTasksPerExecutor.get(clusterStateTaskExecutor);, +                            if (existingTasks != null) {, +                                existingTasks.removeAll(toRemove);, +                                if (existingTasks.isEmpty()) {, +                                    updateTasksPerExecutor.remove(clusterStateTaskExecutor);, +                                }, +                            }, +                        }, +                        for (UpdateTask<T> task : toRemove) {, +                            task.listener.onFailure(source, new ProcessClusterEventTimeoutException(timeout, source));, +            LinkedHashSet<UpdateTask> pending = updateTasksPerExecutor.remove(executor);, +                        logger.trace("will process {}", task);, +                        logger.trace("skipping {}, already processed", task);, +                    "missing task result for " + updateTask;, +            assert batchResult.executionResults.containsKey(updateTask.task) : "missing " + updateTask;, +                                () -> new ParameterizedMessage("cluster state update task {} failed", updateTask), ex);, +        private final ClusterStateTaskExecutor<T> executor;, +        UpdateTask(String source, T task, Priority priority, ClusterStateTaskExecutor<T> executor, ClusterStateTaskListener listener) {, +            super(priority, source);, +        @Override, +        public String toString() {, +++ b/core/src/main/java/org/elasticsearch/Version.java, +    public static final int V_5_0_1_ID = 5000199;, +    public static final Version V_5_0_1 = new Version(V_5_0_1_ID, org.apache.lucene.util.Version.LUCENE_6_2_1);, +            case V_5_0_1_ID:, +                return V_5_0_1;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java, +        final String level = params.param("level", "indices");, +        final boolean isLevelValid =, +            "cluster".equalsIgnoreCase(level) || "indices".equalsIgnoreCase(level) || "shards".equalsIgnoreCase(level);, +            throw new IllegalArgumentException("level parameter must be one of [cluster] or [indices] or [shards] but was [" + level + "]");, +, +++ b/core/src/main/java/org/elasticsearch/action/get/GetResponse.java, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterService.java, +import java.util.LinkedHashSet;, +    final Map<ClusterStateTaskExecutor, LinkedHashSet<UpdateTask>> updateTasksPerExecutor = new HashMap<>();, +                entry -> new UpdateTask<>(source, entry.getKey(), config.priority(), executor, safe(entry.getValue(), logger)), +                LinkedHashSet<UpdateTask> existingTasks = updateTasksPerExecutor.computeIfAbsent(executor,, +                    k -> new LinkedHashSet<>(updateTasks.size()));, +            final TimeValue timeout = config.timeout();, +            if (timeout != null) {, +                updateTasksExecutor.execute(firstTask, threadPool.scheduler(), timeout, () -> threadPool.generic().execute(() -> {, +                    final ArrayList<UpdateTask<T>> toRemove = new ArrayList<>();]