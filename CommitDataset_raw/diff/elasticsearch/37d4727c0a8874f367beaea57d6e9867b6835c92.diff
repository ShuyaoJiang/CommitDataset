[+++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayModule.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.ExtensionPoint;, +    public static final String GATEWAY_TYPE_KEY = "gateway.type";, +, +    private final ExtensionPoint.SelectedType<Gateway> gatewayTypes = new ExtensionPoint.SelectedType<>("gateway", Gateway.class);, +    private final Settings settings;, +, +    public GatewayModule(Settings settings) {, +        this.settings = settings;, +        registerGatewayType("default", Gateway.class);, +    }, +, +    /**, +     * Adds a custom Discovery type., +     */, +    public void registerGatewayType(String type, Class<? extends Gateway> clazz) {, +        gatewayTypes.registerExtension(type, clazz);, +    }, +, +        gatewayTypes.bindType(binder(), settings, GATEWAY_TYPE_KEY, "default");, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayModule.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.ExtensionPoint;, +    public static final String GATEWAY_TYPE_KEY = "gateway.type";, +, +    private final ExtensionPoint.SelectedType<Gateway> gatewayTypes = new ExtensionPoint.SelectedType<>("gateway", Gateway.class);, +    private final Settings settings;, +, +    public GatewayModule(Settings settings) {, +        this.settings = settings;, +        registerGatewayType("default", Gateway.class);, +    }, +, +    /**, +     * Adds a custom Discovery type., +     */, +    public void registerGatewayType(String type, Class<? extends Gateway> clazz) {, +        gatewayTypes.registerExtension(type, clazz);, +    }, +, +        gatewayTypes.bindType(binder(), settings, GATEWAY_TYPE_KEY, "default");, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            modules.add(new GatewayModule(settings));, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayModule.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.ExtensionPoint;, +    public static final String GATEWAY_TYPE_KEY = "gateway.type";, +, +    private final ExtensionPoint.SelectedType<Gateway> gatewayTypes = new ExtensionPoint.SelectedType<>("gateway", Gateway.class);, +    private final Settings settings;, +, +    public GatewayModule(Settings settings) {, +        this.settings = settings;, +        registerGatewayType("default", Gateway.class);, +    }, +, +    /**, +     * Adds a custom Discovery type., +     */, +    public void registerGatewayType(String type, Class<? extends Gateway> clazz) {, +        gatewayTypes.registerExtension(type, clazz);, +    }, +, +        gatewayTypes.bindType(binder(), settings, GATEWAY_TYPE_KEY, "default");, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +            modules.add(new GatewayModule(settings));, +++ b/core/src/test/java/org/elasticsearch/benchmark/recovery/ReplicaRecoveryBenchmark.java, +++ b/core/src/main/java/org/elasticsearch/common/util/ExtensionPoint.java, +            if (extensionClass == instance) {, +                binder.bind(extensionClass).asEagerSingleton();, +            } else {, +            }, +++ b/core/src/main/java/org/elasticsearch/gateway/GatewayModule.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.util.ExtensionPoint;]