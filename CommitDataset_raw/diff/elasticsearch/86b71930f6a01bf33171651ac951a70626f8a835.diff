[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +        clusterService.submitStateUpdateTask(request.cause,, +            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {, +                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]",, +                                    repositoryMetaData.name()), ex);, +            logger.warn(new ParameterizedMessage("failed to create repository [{}][{}]",, +                repositoryMetaData.type(), repositoryMetaData.name()), e);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +        clusterService.submitStateUpdateTask(request.cause,, +            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {, +                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]",, +                                    repositoryMetaData.name()), ex);, +            logger.warn(new ParameterizedMessage("failed to create repository [{}][{}]",, +                repositoryMetaData.type(), repositoryMetaData.name()), e);, +++ b/server/src/main/java/org/elasticsearch/repositories/Repository.java, +    void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId,, +                      ShardId snapshotShardId, RecoveryState recoveryState);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +        clusterService.submitStateUpdateTask(request.cause,, +            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {, +                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]",, +                                    repositoryMetaData.name()), ex);, +            logger.warn(new ParameterizedMessage("failed to create repository [{}][{}]",, +                repositoryMetaData.type(), repositoryMetaData.name()), e);, +++ b/server/src/main/java/org/elasticsearch/repositories/Repository.java, +    void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId,, +                      ShardId snapshotShardId, RecoveryState recoveryState);, +++ b/server/src/main/java/org/elasticsearch/repositories/VerifyNodeRepositoryAction.java, +    public VerifyNodeRepositoryAction(TransportService transportService, ClusterService clusterService,, +                                      RepositoriesService repositoriesService) {, +        transportService.registerRequestHandler(ACTION_NAME, VerifyNodeRepositoryRequest::new, ThreadPool.Names.SNAPSHOT,, +            new VerifyNodeRepositoryRequestHandler());, +                transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken),, +                    new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +    public void finishVerification(ActionListener<VerifyResponse> listener, List<DiscoveryNode> nodes,, +                                   CopyOnWriteArrayList<VerificationFailure> errors) {, +        listener.onResponse(new RepositoriesService.VerifyResponse(nodes.toArray(new DiscoveryNode[nodes.size()]),, +            errors.toArray(new VerificationFailure[errors.size()])));, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +        clusterService.submitStateUpdateTask(request.cause,, +            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {, +                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]",, +                                    repositoryMetaData.name()), ex);, +            logger.warn(new ParameterizedMessage("failed to create repository [{}][{}]",, +                repositoryMetaData.type(), repositoryMetaData.name()), e);, +++ b/server/src/main/java/org/elasticsearch/repositories/Repository.java, +    void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId,, +                      ShardId snapshotShardId, RecoveryState recoveryState);, +++ b/server/src/main/java/org/elasticsearch/repositories/VerifyNodeRepositoryAction.java, +    public VerifyNodeRepositoryAction(TransportService transportService, ClusterService clusterService,, +                                      RepositoriesService repositoriesService) {, +        transportService.registerRequestHandler(ACTION_NAME, VerifyNodeRepositoryRequest::new, ThreadPool.Names.SNAPSHOT,, +            new VerifyNodeRepositoryRequestHandler());, +                transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken),, +                    new EmptyTransportResponseHandler(ThreadPool.Names.SAME) {, +    public void finishVerification(ActionListener<VerifyResponse> listener, List<DiscoveryNode> nodes,, +                                   CopyOnWriteArrayList<VerificationFailure> errors) {, +        listener.onResponse(new RepositoriesService.VerifyResponse(nodes.toArray(new DiscoveryNode[nodes.size()]),, +            errors.toArray(new VerificationFailure[errors.size()])));, +++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java, +                    logger.debug(() -> new ParameterizedMessage("[{}] index [{}] no longer part of any snapshots in the repository, " +, +                        "but failed to clean up its index folder due to the directory not being empty.", metadata.name(), indexId), dnee);, +                    logger.debug(() -> new ParameterizedMessage("[{}] index [{}] no longer part of any snapshots in the repository, " +, +                        "but failed to clean up its index folder.", metadata.name(), indexId), ioe);, +            logger.warn(() -> new ParameterizedMessage("[{}] failed to delete metadata for index [{}]",, +                snapshotId, indexId.getName()), ex);, +    public void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId,, +                             RecoveryState recoveryState) {, +                    throw new RepositoryVerificationException(metadata.name(), "store location [" + blobStore() +, +                        "] is not accessible on the node [" + localNode + "]", exp);, +                throw new RepositoryVerificationException(metadata.name(), "a file written by master to the store [" + blobStore() +, +                    "] cannot be accessed on the node [" + localNode + "]. " +, +                    "This might indicate that the store [" + blobStore() + "] is not shared between this node and the master node or " +, +                    "that permissions on the store don't allow reading files written by the master node");, +            blobContainer = blobStore().blobContainer(basePath().add("indices").add(indexId.getId()), +                .add(Integer.toString(snapshotShardId.getId())));, +                                logger.warn(() -> new ParameterizedMessage("{} Can't calculate hash from blob for file [{}] [{}]",, +                                    shardId, fileInfo.physicalName(), fileInfo.metadata()), e);, +                        BlobStoreIndexShardSnapshot.FileInfo snapshotFileInfo =, +                            new BlobStoreIndexShardSnapshot.FileInfo(fileNameFromGeneration(++generation), md, chunkSize());, +    private static void maybeRecalculateMetadataHash(final BlobContainer blobContainer, final BlobStoreIndexShardSnapshot.FileInfo fileInfo,, +                                                     Store.MetadataSnapshot snapshot) throws Exception {, +                    logger.warn(() -> new ParameterizedMessage("{} Can't read metadata from store, will not reuse any " +, +                        "local file while restoring", shardId), e);, +                        logger.warn(() -> new ParameterizedMessage("{} Can't calculate hash from blog for file [{}] [{}]",, +                            shardId, fileInfo.physicalName(), fileInfo.metadata()), e);, +                        logger.trace("[{}] [{}] not_recovering [{}] from [{}], exists in local store and is same",, +                            shardId, snapshotId, fileInfo.physicalName(), fileInfo.name());, +                try (IndexOutput indexOutput = store.createVerifyingOutput(fileInfo.physicalName(),, +                                                                           fileInfo.metadata(), IOContext.DEFAULT)) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java, +        clusterService.submitStateUpdateTask(request.cause,, +            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, registrationListener) {, +                                logger.warn(() -> new ParameterizedMessage("failed to change repository [{}]",]