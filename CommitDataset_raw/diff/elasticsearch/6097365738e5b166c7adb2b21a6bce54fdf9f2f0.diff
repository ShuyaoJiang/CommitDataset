[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +    private final int translogOps;, +    private final ByteSizeValue translogSize;, +        this.translogOps = componentSettings.getAsInt("translog_ops", 1000);, +        this.translogSize = componentSettings.getAsBytesSize("translog_size", new ByteSizeValue(100, ByteSizeUnit.KB));, +        logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]", concurrentStreams, fileChunkSize, translogOps, translogSize, compress);, +                int ops = 0;, +                long size = 0;, +                    Translog.Operation operation = snapshot.next();, +                    operations.add(operation);, +                    ops += 1;, +                    size += operation.estimateSize();, +                    if (ops >= translogOps || size >= translogSize.bytes()) {, +                        ops = 0;, +                        size = 0;, +                        operations.clear();, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +    private final int translogOps;, +    private final ByteSizeValue translogSize;, +        this.translogOps = componentSettings.getAsInt("translog_ops", 1000);, +        this.translogSize = componentSettings.getAsBytesSize("translog_size", new ByteSizeValue(100, ByteSizeUnit.KB));, +        logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]", concurrentStreams, fileChunkSize, translogOps, translogSize, compress);, +                int ops = 0;, +                long size = 0;, +                    Translog.Operation operation = snapshot.next();, +                    operations.add(operation);, +                    ops += 1;, +                    size += operation.estimateSize();, +                    if (ops >= translogOps || size >= translogSize.bytes()) {, +                        ops = 0;, +                        size = 0;, +                        operations.clear();, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/recovery/SimpleRecoveryTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    protected Settings recoverySettings() {, +        return ImmutableSettings.Builder.EMPTY_SETTINGS;, +    }, +, +        startNode("server1", recoverySettings());, +        startNode("server2", recoverySettings());, +        startNode("server3", recoverySettings());, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +    private final int translogOps;, +    private final ByteSizeValue translogSize;, +        this.translogOps = componentSettings.getAsInt("translog_ops", 1000);, +        this.translogSize = componentSettings.getAsBytesSize("translog_size", new ByteSizeValue(100, ByteSizeUnit.KB));, +        logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]", concurrentStreams, fileChunkSize, translogOps, translogSize, compress);, +                int ops = 0;, +                long size = 0;, +                    Translog.Operation operation = snapshot.next();, +                    operations.add(operation);, +                    ops += 1;, +                    size += operation.estimateSize();, +                    if (ops >= translogOps || size >= translogSize.bytes()) {, +                        ops = 0;, +                        size = 0;, +                        operations.clear();, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/recovery/SimpleRecoveryTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    protected Settings recoverySettings() {, +        return ImmutableSettings.Builder.EMPTY_SETTINGS;, +    }, +, +        startNode("server1", recoverySettings());, +        startNode("server2", recoverySettings());, +        startNode("server3", recoverySettings());, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +    private final int translogOps;, +    private final ByteSizeValue translogSize;, +        this.translogOps = componentSettings.getAsInt("translog_ops", 1000);, +        this.translogSize = componentSettings.getAsBytesSize("translog_size", new ByteSizeValue(100, ByteSizeUnit.KB));, +        logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]", concurrentStreams, fileChunkSize, translogOps, translogSize, compress);, +                int ops = 0;, +                long size = 0;, +                    Translog.Operation operation = snapshot.next();, +                    operations.add(operation);, +                    ops += 1;, +                    size += operation.estimateSize();, +                    if (ops >= translogOps || size >= translogSize.bytes()) {, +                        ops = 0;, +                        size = 0;, +                        operations.clear();, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/recovery/SimpleRecoveryTests.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +    protected Settings recoverySettings() {, +        return ImmutableSettings.Builder.EMPTY_SETTINGS;, +    }, +, +        startNode("server1", recoverySettings());, +        startNode("server2", recoverySettings());, +        startNode("server3", recoverySettings());, +++ /dev/null, +++ /dev/null, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +    private final int translogOps;, +    private final ByteSizeValue translogSize;]