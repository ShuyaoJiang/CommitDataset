[+++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.lucene.Lucene;, +        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : "Version must be upgraded to [" + Lucene.VERSION + "] is still set to [" + CURRENT.luceneVersion + "]";, +, +, +, +, +                return new Version(id, false, Lucene.VERSION);, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.lucene.Lucene;, +        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : "Version must be upgraded to [" + Lucene.VERSION + "] is still set to [" + CURRENT.luceneVersion + "]";, +, +, +, +, +                return new Version(id, false, Lucene.VERSION);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.warmer.delete.DeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.delete.TransportDeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.get.GetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.get.TransportGetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.put.PutWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.put.TransportPutWarmerAction;, +, +, +    public ActionModule(boolean proxy) {, +        registerAction(PutWarmerAction.INSTANCE, TransportPutWarmerAction.class);, +        registerAction(DeleteWarmerAction.INSTANCE, TransportDeleteWarmerAction.class);, +        registerAction(GetWarmersAction.INSTANCE, TransportGetWarmersAction.class);, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.lucene.Lucene;, +        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : "Version must be upgraded to [" + Lucene.VERSION + "] is still set to [" + CURRENT.luceneVersion + "]";, +, +, +, +, +                return new Version(id, false, Lucene.VERSION);, +++ b/core/src/main/java/org/elasticsearch/action/ActionModule.java, +import org.elasticsearch.action.admin.indices.warmer.delete.DeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.delete.TransportDeleteWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.get.GetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.get.TransportGetWarmersAction;, +import org.elasticsearch.action.admin.indices.warmer.put.PutWarmerAction;, +import org.elasticsearch.action.admin.indices.warmer.put.TransportPutWarmerAction;, +, +, +    public ActionModule(boolean proxy) {, +        registerAction(PutWarmerAction.INSTANCE, TransportPutWarmerAction.class);, +        registerAction(DeleteWarmerAction.INSTANCE, TransportDeleteWarmerAction.class);, +        registerAction(GetWarmersAction.INSTANCE, TransportGetWarmersAction.class);, +++ b/core/src/main/java/org/elasticsearch/action/AliasesRequest.java, +    AliasesRequest aliases(String[] aliases);, +++ b/buildSrc/src/main/resources/forbidden/all-signatures.txt, +java.util.Random#<init>() @ Use org.elasticsearch.common.random.Randomness#create for reproducible sources of randomness, +++ b/core/build.gradle, +compileJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +compileTestJava.options.compilerArgs << "-Xlint:-cast,-deprecation,-fallthrough,-overrides,-rawtypes,-serial,-try,-unchecked", +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        INDEX_WARMER_MISSING_EXCEPTION(org.elasticsearch.search.warmer.IndexWarmerMissingException.class, org.elasticsearch.search.warmer.IndexWarmerMissingException::new, 93),, +++ b/core/src/main/java/org/elasticsearch/Version.java, +import org.elasticsearch.common.lucene.Lucene;, +        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : "Version must be upgraded to [" + Lucene.VERSION + "] is still set to [" + CURRENT.luceneVersion + "]";, +, +, +]