[+++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    interface Factory<P extends Processor> extends Closeable {, +        /**, +         * Sets the configuration directory when needed to read additional config files, +         */, +        default void setConfigDirectory(Path configDirectory) {, +        }, +, +        @Override, +        default void close() throws IOException {, +        }, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    interface Factory<P extends Processor> extends Closeable {, +        /**, +         * Sets the configuration directory when needed to read additional config files, +         */, +        default void setConfigDirectory(Path configDirectory) {, +        }, +, +        @Override, +        default void close() throws IOException {, +        }, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/geoip/GeoIpProcessor.java, +                        geoData.put("location", new double[]{location.getLongitude(), location.getLatitude()});, +    public static class Factory implements Processor.Factory<GeoIpProcessor> {, +        private Path geoIpConfigDirectory;, +        public void setConfigDirectory(Path configDirectory) {, +            geoIpConfigDirectory = configDirectory.resolve("ingest").resolve("geoip");, +        }, +, +        @Override, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    interface Factory<P extends Processor> extends Closeable {, +        /**, +         * Sets the configuration directory when needed to read additional config files, +         */, +        default void setConfigDirectory(Path configDirectory) {, +        }, +, +        @Override, +        default void close() throws IOException {, +        }, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/geoip/GeoIpProcessor.java, +                        geoData.put("location", new double[]{location.getLongitude(), location.getLatitude()});, +    public static class Factory implements Processor.Factory<GeoIpProcessor> {, +        private Path geoIpConfigDirectory;, +        public void setConfigDirectory(Path configDirectory) {, +            geoIpConfigDirectory = configDirectory.resolve("ingest").resolve("geoip");, +        }, +, +        @Override, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/grok/GrokProcessor.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        String fieldValue = ingestDocument.getFieldValue(matchField, String.class);, +        Map<String, Object> matches = grok.captures(fieldValue);, +        } else {, +            throw new IllegalArgumentException("Grok expression does not match field value: [" + fieldValue + "]");, +        private Path grokConfigDirectory;, +        @Override, +        public void setConfigDirectory(Path configDirectory) {, +            this.grokConfigDirectory = configDirectory.resolve("ingest").resolve("grok");, +        }, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/IngestDocument.java, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/Processor.java, +    interface Factory<P extends Processor> extends Closeable {, +        /**, +         * Sets the configuration directory when needed to read additional config files, +         */, +        default void setConfigDirectory(Path configDirectory) {, +        }, +, +        @Override, +        default void close() throws IOException {, +        }, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/geoip/GeoIpProcessor.java, +                        geoData.put("location", new double[]{location.getLongitude(), location.getLatitude()});, +    public static class Factory implements Processor.Factory<GeoIpProcessor> {, +        private Path geoIpConfigDirectory;, +        public void setConfigDirectory(Path configDirectory) {, +            geoIpConfigDirectory = configDirectory.resolve("ingest").resolve("geoip");, +        }, +, +        @Override, +++ b/plugins/ingest/src/main/java/org/elasticsearch/ingest/processor/grok/GrokProcessor.java, +    public void execute(IngestDocument ingestDocument) throws Exception {, +        String fieldValue = ingestDocument.getFieldValue(matchField, String.class);, +        Map<String, Object> matches = grok.captures(fieldValue);, +        } else {, +            throw new IllegalArgumentException("Grok expression does not match field value: [" + fieldValue + "]");, +        private Path grokConfigDirectory;, +        @Override, +        public void setConfigDirectory(Path configDirectory) {, +            this.grokConfigDirectory = configDirectory.resolve("ingest").resolve("grok");, +        }, +++ b/plugins/ingest/src/main/java/org/elasticsearch/plugin/ingest/IngestModule.java, +import org.elasticsearch.ingest.processor.Processor;]