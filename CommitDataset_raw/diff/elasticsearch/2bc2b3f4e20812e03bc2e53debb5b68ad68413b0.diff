[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    public PercolateRequest() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/action/percolate/PercolateRequest.java, +    public PercolateRequest() {, +++ b/plugins/lang/groovy/src/main/groovy/org/elasticsearch/groovy/client/GClient.groovy, +import org.elasticsearch.action.percolate.PercolateRequest, +import org.elasticsearch.action.percolate.PercolateResponse, +import org.elasticsearch.client.action.percolate.PercolateRequestBuilder, +, +        PercolateRequest.metaClass.setSource = {Closure c ->, +            delegate.source(new GXContentBuilder().buildAsBytes(c, indexContentType)), +        }, +        PercolateRequest.metaClass.source = {Closure c ->, +            delegate.source(new GXContentBuilder().buildAsBytes(c, indexContentType)), +        }, +        PercolateRequestBuilder.metaClass.setSource = {Closure c ->, +            delegate.setSource(new GXContentBuilder().buildAsBytes(c, indexContentType)), +        }, +        PercolateRequestBuilder.metaClass.source = {Closure c ->, +            delegate.setSource(new GXContentBuilder().buildAsBytes(c, indexContentType)), +        }, +    PercolateRequestBuilder preparePercolate(String index, String type) {, +        return client.preparePercolate(index, type);, +    }, +, +    GActionFuture<PercolateResponse> percolate(Closure c) {, +        PercolateRequest request = new PercolateRequest();, +        c.resolveStrategy = resolveStrategy, +        c.setDelegate request, +        c.call(), +        percolate(request), +    }, +, +    GActionFuture<PercolateResponse> percolate(PercolateRequest request) {, +        GActionFuture<PercolateResponse> future = new GActionFuture<PercolateResponse>(internalClient.threadPool(), request), +        client.percolate(request, future), +        return future, +    }, +]