[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/AggregationPath.java, +        List<PathElement> subTokens = new ArrayList<>(pathElements.subList(offset, offset + length));, +        return new AggregationPath(subTokens);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/support/AggregationPath.java, +        List<PathElement> subTokens = new ArrayList<>(pathElements.subList(offset, offset + length));, +        return new AggregationPath(subTokens);, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/StringTermsIT.java, +import org.elasticsearch.action.search.SearchPhaseExecutionException;, +import org.elasticsearch.search.aggregations.AggregationExecutionException;, +    public void singleValuedField_OrderedByIllegalAgg() throws Exception {, +        boolean asc = true;, +        try {, +            client(), +                .prepareSearch("idx"), +                .setTypes("type"), +                .addAggregation(, +                        terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME), +                                .collectMode(randomFrom(SubAggCollectionMode.values())), +                                .order(Terms.Order.aggregation("inner_terms>avg", asc)), +                                .subAggregation(terms("inner_terms").field(MULTI_VALUED_FIELD_NAME).subAggregation(avg("avg").field("i")))), +                .execute().actionGet();, +            fail("Expected an exception");, +        } catch (SearchPhaseExecutionException e) {, +            ElasticsearchException[] rootCauses = e.guessRootCauses();, +            if (rootCauses.length == 1) {, +                ElasticsearchException rootCause = rootCauses[0];, +                if (rootCause instanceof AggregationExecutionException) {, +                    AggregationExecutionException aggException = (AggregationExecutionException) rootCause;, +                    assertThat(aggException.getMessage(), Matchers.startsWith("Invalid terms aggregation order path"));, +                } else {, +                    throw e;, +                }, +            } else {, +                throw e;, +            }, +        }, +    }, +, +    @Test]