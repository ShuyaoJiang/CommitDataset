[+++ b/docs/reference/ml/apis/get-ml-info.asciidoc, +  "upgrade_mode": false,, +++ b/docs/reference/ml/apis/get-ml-info.asciidoc, +  "upgrade_mode": false,, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.xpack.core.ml.action.SetUpgradeModeAction;, +                SetUpgradeModeAction.INSTANCE,, +++ b/docs/reference/ml/apis/get-ml-info.asciidoc, +  "upgrade_mode": false,, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.xpack.core.ml.action.SetUpgradeModeAction;, +                SetUpgradeModeAction.INSTANCE,, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MlMetadata.java, +    public static final ParseField UPGRADE_MODE = new ParseField("upgrade_mode");, +    public static final MlMetadata EMPTY_METADATA = new MlMetadata(Collections.emptySortedMap(), Collections.emptySortedMap(), false);, +        LENIENT_PARSER.declareBoolean(Builder::isUpgradeMode, UPGRADE_MODE);, +, +    private final boolean upgradeMode;, +    private MlMetadata(SortedMap<String, Job> jobs, SortedMap<String, DatafeedConfig> datafeeds, boolean upgradeMode) {, +        this.upgradeMode = upgradeMode;, +    public boolean isUpgradeMode() {, +        return upgradeMode;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            this.upgradeMode = in.readBoolean();, +        } else {, +            this.upgradeMode = false;, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeBoolean(upgradeMode);, +        }, +        builder.field(UPGRADE_MODE.getPreferredName(), upgradeMode);, +        final boolean upgradeMode;, +            this.upgradeMode = after.upgradeMode;, +            if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +                upgradeMode = in.readBoolean();, +            } else {, +                upgradeMode = false;, +            }, +            return new MlMetadata(newJobs, newDatafeeds, upgradeMode);, +            if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +                out.writeBoolean(upgradeMode);, +            }, +                Objects.equals(datafeeds, that.datafeeds) &&, +                Objects.equals(upgradeMode, that.upgradeMode);, +        return Objects.hash(jobs, datafeeds, upgradeMode);, +        private boolean upgradeMode;, +                upgradeMode = previous.upgradeMode;, +        public Builder isUpgradeMode(boolean upgradeMode) {, +            this.upgradeMode = upgradeMode;, +            return this;, +        }, +, +            return new MlMetadata(jobs, datafeeds, upgradeMode);, +++ b/docs/reference/ml/apis/get-ml-info.asciidoc, +  "upgrade_mode": false,, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/XPackClientPlugin.java, +import org.elasticsearch.xpack.core.ml.action.SetUpgradeModeAction;, +                SetUpgradeModeAction.INSTANCE,, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/MlMetadata.java, +    public static final ParseField UPGRADE_MODE = new ParseField("upgrade_mode");, +    public static final MlMetadata EMPTY_METADATA = new MlMetadata(Collections.emptySortedMap(), Collections.emptySortedMap(), false);, +        LENIENT_PARSER.declareBoolean(Builder::isUpgradeMode, UPGRADE_MODE);, +, +    private final boolean upgradeMode;, +    private MlMetadata(SortedMap<String, Job> jobs, SortedMap<String, DatafeedConfig> datafeeds, boolean upgradeMode) {, +        this.upgradeMode = upgradeMode;, +    public boolean isUpgradeMode() {, +        return upgradeMode;, +    }, +, +        if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +            this.upgradeMode = in.readBoolean();, +        } else {, +            this.upgradeMode = false;, +        }, +        if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +            out.writeBoolean(upgradeMode);, +        }, +        builder.field(UPGRADE_MODE.getPreferredName(), upgradeMode);, +        final boolean upgradeMode;, +            this.upgradeMode = after.upgradeMode;, +            if (in.getVersion().onOrAfter(Version.V_7_0_0)) {, +                upgradeMode = in.readBoolean();, +            } else {, +                upgradeMode = false;, +            }, +            return new MlMetadata(newJobs, newDatafeeds, upgradeMode);, +            if (out.getVersion().onOrAfter(Version.V_7_0_0)) {, +                out.writeBoolean(upgradeMode);, +            }, +                Objects.equals(datafeeds, that.datafeeds) &&, +                Objects.equals(upgradeMode, that.upgradeMode);, +        return Objects.hash(jobs, datafeeds, upgradeMode);, +        private boolean upgradeMode;, +                upgradeMode = previous.upgradeMode;, +        public Builder isUpgradeMode(boolean upgradeMode) {, +            this.upgradeMode = upgradeMode;, +            return this;]