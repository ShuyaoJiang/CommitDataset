[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname) {, +        super(name, description, version, classname);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname) {, +        super(name, description, version, classname);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        jarHellCheck(pluginRoot, env.pluginsFile());, +    void jarHellCheck(Path candidate, Path pluginsDir) throws Exception {, +        PluginsService.getPluginBundles(pluginsDir);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname) {, +        super(name, description, version, classname);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        jarHellCheck(pluginRoot, env.pluginsFile());, +    void jarHellCheck(Path candidate, Path pluginsDir) throws Exception {, +        PluginsService.getPluginBundles(pluginsDir);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    PluginInfo(String name, String description, String version, String classname) {, +        return new PluginInfo(name, description, version, classname);, +                .append(" * Classname: ").append(classname);, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname) {, +        super(name, description, version, classname);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        jarHellCheck(pluginRoot, env.pluginsFile());, +    void jarHellCheck(Path candidate, Path pluginsDir) throws Exception {, +        PluginsService.getPluginBundles(pluginsDir);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    PluginInfo(String name, String description, String version, String classname) {, +        return new PluginInfo(name, description, version, classname);, +                .append(" * Classname: ").append(classname);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +            PluginInfo pluginInfo = new PluginInfo(plugin.name(), plugin.description(), "NA", pluginClass.getName());, +                final Bundle bundle = new Bundle();, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname) {, +        super(name, description, version, classname);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        jarHellCheck(pluginRoot, env.pluginsFile());, +    void jarHellCheck(Path candidate, Path pluginsDir) throws Exception {, +        PluginsService.getPluginBundles(pluginsDir);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    PluginInfo(String name, String description, String version, String classname) {, +        return new PluginInfo(name, description, version, classname);, +                .append(" * Classname: ").append(classname);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +            PluginInfo pluginInfo = new PluginInfo(plugin.name(), plugin.description(), "NA", pluginClass.getName());, +                final Bundle bundle = new Bundle();, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java, +        pluginsInfo.addPlugin(new PluginInfo("c", "foo", "dummy", "dummyclass"));, +        pluginsInfo.addPlugin(new PluginInfo("b", "foo", "dummy", "dummyclass"));, +        pluginsInfo.addPlugin(new PluginInfo("e", "foo", "dummy", "dummyclass"));, +        pluginsInfo.addPlugin(new PluginInfo("a", "foo", "dummy", "dummyclass"));, +        pluginsInfo.addPlugin(new PluginInfo("d", "foo", "dummy", "dummyclass"));, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesExtension.groovy, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/plugin/PluginPropertiesTask.groovy, +++ b/buildSrc/src/main/resources/plugin-descriptor.properties, +++ b/core/src/main/java/org/elasticsearch/plugins/DummyPluginInfo.java, +    private DummyPluginInfo(String name, String description, String version, String classname) {, +        super(name, description, version, classname);, +    public static final DummyPluginInfo INSTANCE = new DummyPluginInfo("dummy_plugin_name", "dummy plugin description", "dummy_plugin_version", "DummyPluginName");, +++ b/core/src/main/java/org/elasticsearch/plugins/InstallPluginCommand.java, +        jarHellCheck(pluginRoot, env.pluginsFile());, +    void jarHellCheck(Path candidate, Path pluginsDir) throws Exception {, +        PluginsService.getPluginBundles(pluginsDir);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginInfo.java, +    PluginInfo(String name, String description, String version, String classname) {, +        return new PluginInfo(name, description, version, classname);, +                .append(" * Classname: ").append(classname);, +++ b/core/src/main/java/org/elasticsearch/plugins/PluginsService.java, +            PluginInfo pluginInfo = new PluginInfo(plugin.name(), plugin.description(), "NA", pluginClass.getName());, +                final Bundle bundle = new Bundle();, +++ b/core/src/test/java/org/elasticsearch/plugins/PluginInfoTests.java]