[+++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.search.SearchModule;, +                modules.add(new SearchModule(this.settings) {, +                    @Override, +                    protected void configure() {, +                        // noop, +                    }, +                });, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.search.SearchModule;, +                modules.add(new SearchModule(this.settings) {, +                    @Override, +                    protected void configure() {, +                        // noop, +                    }, +                });, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.search.SearchModule;, +                modules.add(new SearchModule(this.settings) {, +                    @Override, +                    protected void configure() {, +                        // noop, +                    }, +                });, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScoreFunctionParserMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.functionscore.exp.ExponentialDecayFunctionParser;, +import org.elasticsearch.index.query.functionscore.factor.FactorParser;, +import org.elasticsearch.index.query.functionscore.fieldvaluefactor.FieldValueFactorFunctionParser;, +import org.elasticsearch.index.query.functionscore.gauss.GaussDecayFunctionParser;, +import org.elasticsearch.index.query.functionscore.lin.LinearDecayFunctionParser;, +import org.elasticsearch.index.query.functionscore.random.RandomScoreFunctionParser;, +import org.elasticsearch.index.query.functionscore.script.ScriptScoreFunctionParser;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +    protected Map<String, ScoreFunctionParser> functionParsers;, +        Map<String, ScoreFunctionParser> map = new HashMap<>();, +        // build-in parsers, +        addParser(new FactorParser(), map);, +        addParser(new ScriptScoreFunctionParser(), map);, +        addParser(new GaussDecayFunctionParser(), map);, +        addParser(new LinearDecayFunctionParser(), map);, +        addParser(new ExponentialDecayFunctionParser(), map);, +        addParser(new RandomScoreFunctionParser(), map);, +        addParser(new FieldValueFactorFunctionParser(), map);, +            addParser(scoreFunctionParser, map);, +        this.functionParsers = Collections.unmodifiableMap(map);, +    private void addParser(ScoreFunctionParser scoreFunctionParser, Map<String, ScoreFunctionParser> map) {, +        for (String name : scoreFunctionParser.getNames()) {, +            map.put(name, scoreFunctionParser);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +import org.elasticsearch.search.SearchModule;, +                modules.add(new SearchModule(this.settings) {, +                    @Override, +                    protected void configure() {, +                        // noop, +                    }, +                });, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/index/query/functionscore/ScoreFunctionParserMapper.java, +import org.elasticsearch.common.Nullable;, +import org.elasticsearch.index.query.functionscore.exp.ExponentialDecayFunctionParser;, +import org.elasticsearch.index.query.functionscore.factor.FactorParser;, +import org.elasticsearch.index.query.functionscore.fieldvaluefactor.FieldValueFactorFunctionParser;, +import org.elasticsearch.index.query.functionscore.gauss.GaussDecayFunctionParser;, +import org.elasticsearch.index.query.functionscore.lin.LinearDecayFunctionParser;, +import org.elasticsearch.index.query.functionscore.random.RandomScoreFunctionParser;, +import org.elasticsearch.index.query.functionscore.script.ScriptScoreFunctionParser;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.Map;, +    protected Map<String, ScoreFunctionParser> functionParsers;, +        Map<String, ScoreFunctionParser> map = new HashMap<>();, +        // build-in parsers, +        addParser(new FactorParser(), map);, +        addParser(new ScriptScoreFunctionParser(), map);, +        addParser(new GaussDecayFunctionParser(), map);, +        addParser(new LinearDecayFunctionParser(), map);, +        addParser(new ExponentialDecayFunctionParser(), map);, +        addParser(new RandomScoreFunctionParser(), map);, +        addParser(new FieldValueFactorFunctionParser(), map);, +            addParser(scoreFunctionParser, map);, +        this.functionParsers = Collections.unmodifiableMap(map);, +    private void addParser(ScoreFunctionParser scoreFunctionParser, Map<String, ScoreFunctionParser> map) {, +        for (String name : scoreFunctionParser.getNames()) {, +            map.put(name, scoreFunctionParser);, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import com.google.common.collect.Lists;, +import org.elasticsearch.common.Classes;, +import org.elasticsearch.common.inject.binder.LinkedBindingBuilder;, +import org.elasticsearch.common.inject.multibindings.Multibinder;]