[+++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/InternalPercentiles.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.Version;, +import org.elasticsearch.search.aggregations.metrics.percentiles.tdigest.TDigestState;, +    private double[] percents;, +    private TDigestState state;, +    public InternalPercentiles(String name, double[] percents, TDigestState state, boolean keyed) {, +        this.percents = percents;, +        this.state = state;, +        return percentile(Double.parseDouble(name));, +        return state.quantile(percent / 100);, +        return new Iter(percents, state);, +        InternalPercentiles merged = null;, +            final InternalPercentiles percentiles = (InternalPercentiles) aggregation;, +            if (merged == null) {, +                merged = percentiles;, +            } else {, +                merged.state.add(percentiles.state);, +        }, +        return merged;, +        if (in.getVersion().before(Version.V_1_2_0)) {, +            final byte id = in.readByte();, +            if (id != 0) {, +                throw new ElasticsearchIllegalArgumentException("Unexpected percentiles aggregator id [" + id + "]");, +            }, +        }, +        percents = new double[in.readInt()];, +        for (int i = 0; i < percents.length; ++i) {, +            percents[i] = in.readDouble();, +        }, +        state = TDigestState.read(in);, +        if (out.getVersion().before(Version.V_1_2_0)) {, +            out.writeByte((byte) 0);, +        }, +        out.writeInt(percents.length);, +        for (int i = 0 ; i < percents.length; ++i) {, +            out.writeDouble(percents[i]);, +        }, +        TDigestState.write(state, out);, +                double value = percentile(percents[i]);, +                double value = percentile(percents[i]);, +        private final double[] percents;, +        private final TDigestState state;, +        public Iter(double[] percents, TDigestState state) {, +            this.percents = percents;, +            this.state = state;, +            return i < percents.length;, +            final Percentiles.Percentile next = new InnerPercentile(percents[i], state.quantile(percents[i] / 100));, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/InternalPercentiles.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.Version;, +import org.elasticsearch.search.aggregations.metrics.percentiles.tdigest.TDigestState;, +    private double[] percents;, +    private TDigestState state;, +    public InternalPercentiles(String name, double[] percents, TDigestState state, boolean keyed) {, +        this.percents = percents;, +        this.state = state;, +        return percentile(Double.parseDouble(name));, +        return state.quantile(percent / 100);, +        return new Iter(percents, state);, +        InternalPercentiles merged = null;, +            final InternalPercentiles percentiles = (InternalPercentiles) aggregation;, +            if (merged == null) {, +                merged = percentiles;, +            } else {, +                merged.state.add(percentiles.state);, +        }, +        return merged;, +        if (in.getVersion().before(Version.V_1_2_0)) {, +            final byte id = in.readByte();, +            if (id != 0) {, +                throw new ElasticsearchIllegalArgumentException("Unexpected percentiles aggregator id [" + id + "]");, +            }, +        }, +        percents = new double[in.readInt()];, +        for (int i = 0; i < percents.length; ++i) {, +            percents[i] = in.readDouble();, +        }, +        state = TDigestState.read(in);, +        if (out.getVersion().before(Version.V_1_2_0)) {, +            out.writeByte((byte) 0);, +        }, +        out.writeInt(percents.length);, +        for (int i = 0 ; i < percents.length; ++i) {, +            out.writeDouble(percents[i]);, +        }, +        TDigestState.write(state, out);, +                double value = percentile(percents[i]);, +                double value = percentile(percents[i]);, +        private final double[] percents;, +        private final TDigestState state;, +        public Iter(double[] percents, TDigestState state) {, +            this.percents = percents;, +            this.state = state;, +            return i < percents.length;, +            final Percentiles.Percentile next = new InnerPercentile(percents[i], state.quantile(percents[i] / 100));, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/Percentiles.java, +++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/InternalPercentiles.java, +import org.elasticsearch.ElasticsearchIllegalArgumentException;, +import org.elasticsearch.Version;]