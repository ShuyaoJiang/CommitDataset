[+++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexReqeust() {, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexReqeust() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequestBuilder.java, +        this.request.getShrinkIndexReqeust().settings(settings);, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexReqeust() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequestBuilder.java, +        this.request.getShrinkIndexReqeust().settings(settings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportShrinkAction.java, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.index.IndexNotFoundException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.function.Predicate;, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_WRITE, request.getShrinkIndexReqeust().index());, +                    indicesStatsResponse.getTotal().getDocs(), indexNameExpressionResolver);, +        , final DocsStats docsStats, IndexNameExpressionResolver indexNameExpressionResolver) {, +        final CreateIndexRequest targetIndex = shrinkReqeust.getShrinkIndexReqeust();, +        long count = docsStats.getCount();, +        if (count >= IndexWriter.MAX_DOCS) {, +                + "] docs -  too many documents");, +        targetIndex.settings(Settings.builder(), +            .put(targetIndexSettings), +            // we can only shrink to 1 index so far!, +            .put("index.number_of_shards", 1), +        );, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +, +@defaultMessage Don't use MethodHandles in slow ways, except in tests., +java.lang.invoke.MethodHandle#invoke(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.lang.Object[]), +java.lang.invoke.MethodHandle#invokeWithArguments(java.util.List), +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequest.java, +    public CreateIndexRequest getShrinkIndexReqeust() {, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/ShrinkRequestBuilder.java, +        this.request.getShrinkIndexReqeust().settings(settings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportShrinkAction.java, +import org.elasticsearch.cluster.routing.IndexRoutingTable;, +import org.elasticsearch.cluster.routing.ShardRouting;, +import org.elasticsearch.cluster.routing.ShardRoutingState;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.common.Strings;, +import org.elasticsearch.index.IndexNotFoundException;, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.atomic.AtomicInteger;, +import java.util.function.Predicate;, +        return state.blocks().indexBlockedException(ClusterBlockLevel.METADATA_WRITE, request.getShrinkIndexReqeust().index());, +                    indicesStatsResponse.getTotal().getDocs(), indexNameExpressionResolver);, +        , final DocsStats docsStats, IndexNameExpressionResolver indexNameExpressionResolver) {, +        final CreateIndexRequest targetIndex = shrinkReqeust.getShrinkIndexReqeust();, +        long count = docsStats.getCount();, +        if (count >= IndexWriter.MAX_DOCS) {, +                + "] docs -  too many documents");, +        targetIndex.settings(Settings.builder(), +            .put(targetIndexSettings), +            // we can only shrink to 1 index so far!, +            .put("index.number_of_shards", 1), +        );, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +                if (!enforceLimits || (check.isSystemCheck() && ignoreSystemChecks)) {, +    // visible for testing, +    // visible for testing, +++ b/buildSrc/src/main/resources/forbidden/es-core-signatures.txt, +]