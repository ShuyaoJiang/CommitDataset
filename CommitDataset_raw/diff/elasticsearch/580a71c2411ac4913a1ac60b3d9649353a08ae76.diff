[+++ b/server/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onStoreCreated(ShardId shardId) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onStoreCreated(shardId);, +            } catch (Exception e) {, +                logger.warn("failed to invoke on store created", e);, +                throw e;, +            }, +        }, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onStoreCreated(ShardId shardId) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onStoreCreated(shardId);, +            } catch (Exception e) {, +                logger.warn("failed to invoke on store created", e);, +                throw e;, +            }, +        }, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +            eventListener.onStoreCreated(shardId);, +++ b/server/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onStoreCreated(ShardId shardId) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onStoreCreated(shardId);, +            } catch (Exception e) {, +                logger.warn("failed to invoke on store created", e);, +                throw e;, +            }, +        }, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +            eventListener.onStoreCreated(shardId);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexEventListener.java, +     * Called when the given shards store is created. The shard store is created before the shard is created., +     *, +     * @param shardId the shard ID the store belongs to, +     */, +    default void onStoreCreated(ShardId shardId) {}, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java, +    public void onStoreCreated(ShardId shardId) {, +        for (IndexEventListener listener : listeners) {, +            try {, +                listener.onStoreCreated(shardId);, +            } catch (Exception e) {, +                logger.warn("failed to invoke on store created", e);, +                throw e;, +            }, +        }, +    }, +, +    @Override, +++ b/server/src/main/java/org/elasticsearch/index/IndexService.java, +            eventListener.onStoreCreated(shardId);, +++ b/server/src/main/java/org/elasticsearch/index/shard/IndexEventListener.java, +     * Called when the given shards store is created. The shard store is created before the shard is created., +     *, +     * @param shardId the shard ID the store belongs to, +     */, +    default void onStoreCreated(ShardId shardId) {}, +, +    /**, +++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java, +import org.elasticsearch.common.util.concurrent.AbstractRefCounted;, +import java.io.UncheckedIOException;, +    final AbstractRefCounted indicesRefCount; // pkg-private for testing, +        // doClose() is called when shutting down a node, yet there might still be ongoing requests, +        // that we need to wait for before closing some resources such as the caches. In order to, +        // avoid closing these resources while ongoing requests are still being processed, we use a, +        // ref count which will only close them when both this service and all index services are, +        // actually closed, +        indicesRefCount = new AbstractRefCounted("indices") {, +            @Override, +            protected void closeInternal() {, +                try {, +                    IOUtils.close(, +                            analysisRegistry,, +                            indexingMemoryController,, +                            indicesFieldDataCache,, +                            cacheCleaner,, +                            indicesRequestCache,, +                            indicesQueryCache);, +                } catch (IOException e) {, +                    throw new UncheckedIOException(e);, +                }, +            }, +        };, +    protected void doClose() throws IOException {]