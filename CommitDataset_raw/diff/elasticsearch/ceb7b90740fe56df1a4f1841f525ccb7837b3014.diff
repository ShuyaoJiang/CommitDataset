[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[recovery_stream]"));, +, +    public void close() {, +        concurrentStreamPool.shutdown();, +    }, +, +                        concurrentStreamPool.execute(new Runnable() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/shard/recovery/RecoverySource.java, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.DynamicExecutors;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import java.util.concurrent.ExecutorService;, +    private final ExecutorService concurrentStreamPool;, +, +        int concurrentStreams = componentSettings.getAsInt("concurrent_streams", 5);, +        this.concurrentStreamPool = DynamicExecutors.newScalingThreadPool(1, concurrentStreams, TimeValue.timeValueSeconds(5).millis(), EsExecutors.daemonThreadFactory(settings, "[recovery_stream]"));, +, +    public void close() {, +        concurrentStreamPool.shutdown();, +    }, +, +                        concurrentStreamPool.execute(new Runnable() {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java, +import org.elasticsearch.index.shard.recovery.RecoverySource;, +    private final RecoverySource recoverySource;, +, +                                              ThreadPool threadPool, RecoveryTarget recoveryTarget, RecoverySource recoverySource,, +                                              ShardStateAction shardStateAction,, +        this.recoverySource = recoverySource;, +        recoverySource.close();]