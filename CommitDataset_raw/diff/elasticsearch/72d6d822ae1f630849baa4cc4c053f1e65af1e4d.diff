[+++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +                    static final XContentBuilderString HIGHLIGHTED = new XContentBuilderString("highlighted");, +                private Text highlighted;, +                public Option(Text text, Text highlighted, float score) {, +                    this.highlighted = highlighted;, +                public Option(Text text, float score) {, +                    this(text, null, score);, +                }, +, +                 * @return Copy of suggested text with changes from user supplied text highlighted., +                 */, +                public Text getHighlighted() {, +                    return highlighted;, +                }, +, +                /**, +                    highlighted = in.readOptionalText();, +                    out.writeOptionalText(highlighted);, +                    if (highlighted != null) {, +                        builder.field(Fields.HIGHLIGHTED, highlighted);, +                    }, +++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +                    static final XContentBuilderString HIGHLIGHTED = new XContentBuilderString("highlighted");, +                private Text highlighted;, +                public Option(Text text, Text highlighted, float score) {, +                    this.highlighted = highlighted;, +                public Option(Text text, float score) {, +                    this(text, null, score);, +                }, +, +                 * @return Copy of suggested text with changes from user supplied text highlighted., +                 */, +                public Text getHighlighted() {, +                    return highlighted;, +                }, +, +                /**, +                    highlighted = in.readOptionalText();, +                    out.writeOptionalText(highlighted);, +                    if (highlighted != null) {, +                        builder.field(Fields.HIGHLIGHTED, highlighted);, +                    }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +        CandidateSet set = new CandidateSet(Candidate.EMPTY, createCandidate(term, true));, +    public Candidate createCandidate(BytesRef term, boolean userInput) throws IOException {, +        return createCandidate(term, frequency(term), 1.0, userInput);, +    public Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException {, +        return createCandidate(term, frequency, channelScore, false);, +    }, +, +    public abstract Candidate createCandidate(BytesRef term, long frequency, double channelScore, boolean userInput) throws IOException;, +++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +                    static final XContentBuilderString HIGHLIGHTED = new XContentBuilderString("highlighted");, +                private Text highlighted;, +                public Option(Text text, Text highlighted, float score) {, +                    this.highlighted = highlighted;, +                public Option(Text text, float score) {, +                    this(text, null, score);, +                }, +, +                 * @return Copy of suggested text with changes from user supplied text highlighted., +                 */, +                public Text getHighlighted() {, +                    return highlighted;, +                }, +, +                /**, +                    highlighted = in.readOptionalText();, +                    out.writeOptionalText(highlighted);, +                    if (highlighted != null) {, +                        builder.field(Fields.HIGHLIGHTED, highlighted);, +                    }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +        CandidateSet set = new CandidateSet(Candidate.EMPTY, createCandidate(term, true));, +    public Candidate createCandidate(BytesRef term, boolean userInput) throws IOException {, +        return createCandidate(term, frequency(term), 1.0, userInput);, +    public Candidate createCandidate(BytesRef term, long frequency, double channelScore) throws IOException {, +        return createCandidate(term, frequency, channelScore, false);, +    }, +, +    public abstract Candidate createCandidate(BytesRef term, long frequency, double channelScore, boolean userInput) throws IOException;, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/Correction.java, +, +import java.util.Arrays;, +        return join(separator, null, null);, +    public BytesRef join(BytesRef separator, BytesRef preTag, BytesRef postTag) {, +        return join(separator, new BytesRef(), preTag, postTag);, +    }, +, +    public BytesRef join(BytesRef separator, BytesRef result, BytesRef preTag, BytesRef postTag) {, +            Candidate candidate = candidates[i];, +            if (preTag == null || candidate.userInput) {, +                toJoin[i] = candidate.term;, +            } else {, +                final int maxLen = preTag.length + postTag.length + candidate.term.length;, +                final BytesRef highlighted = new BytesRef(maxLen);// just allocate once, +                if (i == 0 || candidates[i-1].userInput) {, +                    highlighted.append(preTag);, +                }, +                highlighted.append(candidate.term);]