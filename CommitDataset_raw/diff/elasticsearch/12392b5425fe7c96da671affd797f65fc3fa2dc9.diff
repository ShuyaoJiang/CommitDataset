[+++ b/core/src/main/java/org/elasticsearch/common/transport/PortsRange.java, +, +    @Override, +    public String toString() {, +        return "PortsRange{" +, +            "portRange='" + portRange + '\'' +, +            '}';, +    }, +++ b/core/src/main/java/org/elasticsearch/common/transport/PortsRange.java, +, +    @Override, +    public String toString() {, +        return "PortsRange{" +, +            "portRange='" + portRange + '\'' +, +            '}';, +    }, +++ b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/Netty3HttpServerTransport.java, +        boolean success = false;, +        try {, +            success = true;, +        } finally {, +            if (success == false) {, +                doStop();  // otherwise we leak threads since we never moved to started, +            }, +        }, +        boolean success = port.iterate(portNumber -> {, +            throw new BindHttpException("Failed to bind to [" + port.getPortRangeString() + "]", lastException.get());, +++ b/core/src/main/java/org/elasticsearch/common/transport/PortsRange.java, +, +    @Override, +    public String toString() {, +        return "PortsRange{" +, +            "portRange='" + portRange + '\'' +, +            '}';, +    }, +++ b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/Netty3HttpServerTransport.java, +        boolean success = false;, +        try {, +            success = true;, +        } finally {, +            if (success == false) {, +                doStop();  // otherwise we leak threads since we never moved to started, +            }, +        }, +        boolean success = port.iterate(portNumber -> {, +            throw new BindHttpException("Failed to bind to [" + port.getPortRangeString() + "]", lastException.get());, +++ b/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/Netty3HttpServerTransportTests.java, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.http.BindHttpException;, +, +    public void testBindUnavailableAddress() {, +        try (Netty3HttpServerTransport transport = new Netty3HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool)) {, +            transport.start();, +            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +            Settings settings = Settings.builder().put("http.port", remoteAddress.getPort()).build();, +            try (Netty3HttpServerTransport otherTransport = new Netty3HttpServerTransport(settings, networkService, bigArrays,, +                threadPool)) {, +                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());, +                assertEquals("Failed to bind to [" + remoteAddress.getPort() + "]", bindHttpException.getMessage());, +            }, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/transport/PortsRange.java, +, +    @Override, +    public String toString() {, +        return "PortsRange{" +, +            "portRange='" + portRange + '\'' +, +            '}';, +    }, +++ b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/Netty3HttpServerTransport.java, +        boolean success = false;, +        try {, +            success = true;, +        } finally {, +            if (success == false) {, +                doStop();  // otherwise we leak threads since we never moved to started, +            }, +        }, +        boolean success = port.iterate(portNumber -> {, +            throw new BindHttpException("Failed to bind to [" + port.getPortRangeString() + "]", lastException.get());, +++ b/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/Netty3HttpServerTransportTests.java, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.http.BindHttpException;, +, +    public void testBindUnavailableAddress() {, +        try (Netty3HttpServerTransport transport = new Netty3HttpServerTransport(Settings.EMPTY, networkService, bigArrays, threadPool)) {, +            transport.start();, +            TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());, +            Settings settings = Settings.builder().put("http.port", remoteAddress.getPort()).build();, +            try (Netty3HttpServerTransport otherTransport = new Netty3HttpServerTransport(settings, networkService, bigArrays,, +                threadPool)) {, +                BindHttpException bindHttpException = expectThrows(BindHttpException.class, () -> otherTransport.start());, +                assertEquals("Failed to bind to [" + remoteAddress.getPort() + "]", bindHttpException.getMessage());, +            }, +        }, +    }, +++ b/modules/transport-netty3/src/test/java/org/elasticsearch/transport/netty3/SimpleNetty3TransportTests.java, +import org.elasticsearch.node.Node;, +import org.elasticsearch.transport.BindTransportException;]