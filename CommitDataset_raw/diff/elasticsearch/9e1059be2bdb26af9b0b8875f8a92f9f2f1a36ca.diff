[+++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/InputStreamStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/InputStreamStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.ingest.IngestStats;, +import org.elasticsearch.search.suggest.completion.context.QueryContext;, +import java.util.function.Function;, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/InputStreamStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.ingest.IngestStats;, +import org.elasticsearch.search.suggest.completion.context.QueryContext;, +import java.util.function.Function;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +        if (pathMatch != null && !patternMatch(pathMatch, path.pathAsText(name))) {, +        if (match != null && !patternMatch(match, name)) {, +        if (pathUnmatch != null && patternMatch(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && patternMatch(unmatch, name)) {, +            if (!patternMatch(matchMappingType, dynamicType)) {, +    private boolean patternMatch(String pattern, String str) {, +        if (matchType == MatchType.SIMPLE) {, +            return Regex.simpleMatch(pattern, str);, +        }, +        return str.matches(pattern);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/InputStreamStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.ingest.IngestStats;, +import org.elasticsearch.search.suggest.completion.context.QueryContext;, +import java.util.function.Function;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +        if (pathMatch != null && !patternMatch(pathMatch, path.pathAsText(name))) {, +        if (match != null && !patternMatch(match, name)) {, +        if (pathUnmatch != null && patternMatch(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && patternMatch(unmatch, name)) {, +            if (!patternMatch(matchMappingType, dynamicType)) {, +    private boolean patternMatch(String pattern, String str) {, +        if (matchType == MatchType.SIMPLE) {, +            return Regex.simpleMatch(pattern, str);, +        }, +        return str.matches(pattern);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/InputStreamStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.ingest.IngestStats;, +import org.elasticsearch.search.suggest.completion.context.QueryContext;, +import java.util.function.Function;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +        if (pathMatch != null && !patternMatch(pathMatch, path.pathAsText(name))) {, +        if (match != null && !patternMatch(match, name)) {, +        if (pathUnmatch != null && patternMatch(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && patternMatch(unmatch, name)) {, +            if (!patternMatch(matchMappingType, dynamicType)) {, +    private boolean patternMatch(String pattern, String str) {, +        if (matchType == MatchType.SIMPLE) {, +            return Regex.simpleMatch(pattern, str);, +        }, +        return str.matches(pattern);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +                if (parseFieldMatcher.match(currentName, ORDER_FIELD)) {, +++ b/core/src/main/java/org/elasticsearch/common/bytes/PagedBytesReference.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/FilterStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/InputStreamStreamInput.java, +++ b/core/src/main/java/org/elasticsearch/common/io/stream/StreamInput.java, +import org.elasticsearch.ingest.IngestStats;, +import org.elasticsearch.search.suggest.completion.context.QueryContext;, +import java.util.function.Function;, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/DynamicTemplate.java, +        if (pathMatch != null && !patternMatch(pathMatch, path.pathAsText(name))) {, +        if (match != null && !patternMatch(match, name)) {, +        if (pathUnmatch != null && patternMatch(pathUnmatch, path.pathAsText(name))) {, +        if (unmatch != null && patternMatch(unmatch, name)) {, +            if (!patternMatch(matchMappingType, dynamicType)) {, +    private boolean patternMatch(String pattern, String str) {, +        if (matchType == MatchType.SIMPLE) {, +            return Regex.simpleMatch(pattern, str);, +        }, +        return str.matches(pattern);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/sort/GeoDistanceSortBuilder.java, +                if (parseFieldMatcher.match(currentName, ORDER_FIELD)) {]