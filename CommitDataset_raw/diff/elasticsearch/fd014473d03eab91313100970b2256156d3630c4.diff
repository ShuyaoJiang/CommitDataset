[+++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, + * This class holds all {@link DiscoveryNode} in the cluster and provides convenience methods to, +        return nodes.valuesIt();, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, + * This class holds all {@link DiscoveryNode} in the cluster and provides convenience methods to, +        return nodes.valuesIt();, +++ b/src/main/java/org/elasticsearch/common/collect/ImmutableOpenMap.java, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +import com.google.common.collect.UnmodifiableIterator;, +     * Returns a direct iterator over the keys., +     */, +    public UnmodifiableIterator<KType> keysIt() {, +        final Iterator<ObjectCursor<KType>> iterator = map.keys().iterator();, +        return new UnmodifiableIterator<KType>() {, +            @Override, +            public boolean hasNext() {, +                return iterator.hasNext();, +            }, +, +            @Override, +            public KType next() {, +                return iterator.next().value;, +            }, +        };, +    }, +, +    /**, +    /**, +     * Returns a direct iterator over the keys., +     */, +    public UnmodifiableIterator<VType> valuesIt() {, +        final Iterator<ObjectCursor<VType>> iterator = map.values().iterator();, +        return new UnmodifiableIterator<VType>() {, +            @Override, +            public boolean hasNext() {, +                return iterator.hasNext();, +            }, +, +            @Override, +            public VType next() {, +                return iterator.next().value;, +            }, +        };, +    }, +, +++ b/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodes.java, + * This class holds all {@link DiscoveryNode} in the cluster and provides convenience methods to, +        return nodes.valuesIt();, +++ b/src/main/java/org/elasticsearch/common/collect/ImmutableOpenMap.java, +import com.carrotsearch.hppc.cursors.ObjectCursor;, +import com.google.common.collect.UnmodifiableIterator;, +     * Returns a direct iterator over the keys., +     */, +    public UnmodifiableIterator<KType> keysIt() {, +        final Iterator<ObjectCursor<KType>> iterator = map.keys().iterator();, +        return new UnmodifiableIterator<KType>() {, +            @Override, +            public boolean hasNext() {, +                return iterator.hasNext();, +            }, +, +            @Override, +            public KType next() {, +                return iterator.next().value;, +            }, +        };, +    }, +, +    /**, +    /**, +     * Returns a direct iterator over the keys., +     */, +    public UnmodifiableIterator<VType> valuesIt() {, +        final Iterator<ObjectCursor<VType>> iterator = map.values().iterator();, +        return new UnmodifiableIterator<VType>() {, +            @Override, +            public boolean hasNext() {, +                return iterator.hasNext();, +            }, +, +            @Override, +            public VType next() {, +                return iterator.next().value;, +            }, +        };, +    }, +, +++ /dev/null]