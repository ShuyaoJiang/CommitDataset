[+++ b/build.gradle, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.13'), +                if (project.targetCompatibility >= JavaVersion.VERSION_1_8) {, +                    // compile with compact 3 profile by default, +                    // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                    if (project.compactProfile != 'full') {, +                        options.compilerArgs << '-profile' << project.compactProfile, +                    }, +                }, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.13'), +                if (project.targetCompatibility >= JavaVersion.VERSION_1_8) {, +                    // compile with compact 3 profile by default, +                    // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                    if (project.compactProfile != 'full') {, +                        options.compilerArgs << '-profile' << project.compactProfile, +                    }, +                }, +++ b/core/build.gradle, +  compile 'joda-time:joda-time:2.9.4', +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.13'), +                if (project.targetCompatibility >= JavaVersion.VERSION_1_8) {, +                    // compile with compact 3 profile by default, +                    // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                    if (project.compactProfile != 'full') {, +                        options.compilerArgs << '-profile' << project.compactProfile, +                    }, +                }, +++ b/core/build.gradle, +  compile 'joda-time:joda-time:2.9.4', +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                if (shard.initializing() && shard.relocatingNodeId() == null) {, +        /**, +         * Removes relocation source of an initializing non-primary shard. This allows the replica shard to continue recovery from, +         * the primary even though its non-primary relocation source has failed., +         */, +        public ShardRouting removeRelocationSource() {, +            assert shard.isRelocationTarget();, +            ensureMutable();, +            ShardRouting relocationMarkerRemoved = shard.removeRelocationSource();, +            updateAssigned(shard, relocationMarkerRemoved);, +            inactiveShardCount++; // relocation targets are not counted as inactive shards whereas initializing shards are, +            Recoveries.getOrAdd(recoveriesPerNode, shard.relocatingNodeId()).addOutgoing(-1);, +            return relocationMarkerRemoved;, +        }, +, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.13'), +                if (project.targetCompatibility >= JavaVersion.VERSION_1_8) {, +                    // compile with compact 3 profile by default, +                    // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE, +                    if (project.compactProfile != 'full') {, +                        options.compilerArgs << '-profile' << project.compactProfile, +                    }, +                }, +++ b/core/build.gradle, +  compile 'joda-time:joda-time:2.9.4', +++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingNodes.java, +                if (shard.initializing() && shard.relocatingNodeId() == null) {, +        /**, +         * Removes relocation source of an initializing non-primary shard. This allows the replica shard to continue recovery from, +         * the primary even though its non-primary relocation source has failed., +         */, +        public ShardRouting removeRelocationSource() {, +            assert shard.isRelocationTarget();, +            ensureMutable();, +            ShardRouting relocationMarkerRemoved = shard.removeRelocationSource();, +            updateAssigned(shard, relocationMarkerRemoved);, +            inactiveShardCount++; // relocation targets are not counted as inactive shards whereas initializing shards are, +            Recoveries.getOrAdd(recoveriesPerNode, shard.relocatingNodeId()).addOutgoing(-1);, +            return relocationMarkerRemoved;, +        }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java, +     * Removes relocation source of a non-primary shard. The shard state must be <code>INITIALIZING</code>., +     * This allows the non-primary shard to continue recovery from the primary even though its non-primary, +     * relocation source has failed., +     */, +    public ShardRouting removeRelocationSource() {, +        assert primary == false : this;, +        assert state == ShardRoutingState.INITIALIZING : this;, +        assert assignedToNode() : this;, +        assert relocatingNodeId != null : this;, +        return new ShardRouting(shardId, currentNodeId, null, restoreSource, primary, state, unassignedInfo,, +            AllocationId.finishRelocation(allocationId), expectedShardSize);, +    }, +, +    /**, +++ b/build.gradle, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            GradleVersion minGradle = GradleVersion.version('2.13'), +                if (project.targetCompatibility >= JavaVersion.VERSION_1_8) {, +                    // compile with compact 3 profile by default, +                    // NOTE: this is just a compile time check: does not replace testing with a compact3 JRE]