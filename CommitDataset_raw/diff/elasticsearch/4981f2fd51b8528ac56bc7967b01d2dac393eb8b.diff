[+++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext context, Map<String, String> params) {, +    public final Function<Map<String, Object>, SearchScript> getLazySearchScript(Script script, ScriptContext context,, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext context, Map<String, String> params) {, +    public final Function<Map<String, Object>, ExecutableScript> getLazyExecutableScript(Script script, ScriptContext context,, +    public final void freezeContext() {, +     * This method fails if {@link #freezeContext()} is called before on this, +     * context. This is used to <i>seal</i>., +     *, +     * This methods and all methods that call it should be final to ensure that, +     * setting the request as not cacheable and the freezing behaviour of this, +     * class cannot be bypassed. This is important so we can trust when this, +     * class says a request can be cached., +    protected final void failIfFrozen() {, +    public final BytesReference getTemplateBytes(Script template) {, +    public final boolean isCachable() {, +    @Override, +    public final long nowInMillis() {, +++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java, +    public final SearchScript getSearchScript(Script script, ScriptContext context, Map<String, String> params) {, +    public final Function<Map<String, Object>, SearchScript> getLazySearchScript(Script script, ScriptContext context,, +    public final ExecutableScript getExecutableScript(Script script, ScriptContext context, Map<String, String> params) {, +    public final Function<Map<String, Object>, ExecutableScript> getLazyExecutableScript(Script script, ScriptContext context,, +    public final void freezeContext() {, +     * This method fails if {@link #freezeContext()} is called before on this, +     * context. This is used to <i>seal</i>., +     *, +     * This methods and all methods that call it should be final to ensure that, +     * setting the request as not cacheable and the freezing behaviour of this, +     * class cannot be bypassed. This is important so we can trust when this, +     * class says a request can be cached., +    protected final void failIfFrozen() {, +    public final BytesReference getTemplateBytes(Script template) {, +    public final boolean isCachable() {, +    @Override, +    public final long nowInMillis() {, +++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/ExtendedBoundsTests.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.metadata.IndexMetaData;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.IndexSettings;, +        Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT), +                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).build();, +        QueryShardContext qsc = new QueryShardContext(0,, +                new IndexSettings(IndexMetaData.builder("foo").settings(indexSettings).build(), indexSettings), null, null, null, null,, +                null, null, null, null, null, () -> now);]