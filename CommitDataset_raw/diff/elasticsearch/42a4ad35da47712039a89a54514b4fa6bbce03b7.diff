[+++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + CLUSTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, CLUSTER_UPDATE_THREAD_NAME),, +                threadPool.getThreadContext(),, +                threadPool.scheduler());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + CLUSTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, CLUSTER_UPDATE_THREAD_NAME),, +                threadPool.getThreadContext(),, +                threadPool.scheduler());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/MasterService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + MASTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, MASTER_UPDATE_THREAD_NAME),, +                threadPool.getThreadContext(),, +                threadPool.scheduler());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + CLUSTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, CLUSTER_UPDATE_THREAD_NAME),, +                threadPool.getThreadContext(),, +                threadPool.scheduler());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/MasterService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + MASTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, MASTER_UPDATE_THREAD_NAME),, +                threadPool.getThreadContext(),, +                threadPool.scheduler());, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    private final String name;, +, +    final String getName() {, +        return name;, +    }, +    public final String toString() {, +        b.append("name = ").append(name).append(", ");, +        appendThreadPoolExecutorDetails(b);, +    /**, +     * Append details about this thread pool to the specified {@link StringBuilder}. All details should be appended as key/value pairs in, +     * the form "%s = %s, ", +     *, +     * @param sb the {@link StringBuilder} to append to, +     */, +    protected void appendThreadPoolExecutorDetails(final StringBuilder sb) {, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + CLUSTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, CLUSTER_UPDATE_THREAD_NAME),, +                threadPool.getThreadContext(),, +                threadPool.scheduler());, +++ b/core/src/main/java/org/elasticsearch/cluster/service/MasterService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + MASTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, MASTER_UPDATE_THREAD_NAME),, +                threadPool.getThreadContext(),, +                threadPool.scheduler());, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java, +    private final String name;, +, +    final String getName() {, +        return name;, +    }, +    public final String toString() {, +        b.append("name = ").append(name).append(", ");, +        appendThreadPoolExecutorDetails(b);, +    /**, +     * Append details about this thread pool to the specified {@link StringBuilder}. All details should be appended as key/value pairs in, +     * the form "%s = %s, ", +     *, +     * @param sb the {@link StringBuilder} to append to, +     */, +    protected void appendThreadPoolExecutorDetails(final StringBuilder sb) {, +, +    }, +, +++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/QueueResizingEsThreadPoolExecutor.java, +        logger.debug(, +                "thread pool [{}] will adjust queue by [{}] when determining automatic queue size", getName(), QUEUE_ADJUSTMENT_AMOUNT);, +                            getName(),, +                    logger.debug("adjusted [{}] queue size by [{}], old capacity: [{}], new capacity: [{}]", getName(),, +                                getName(), totalRuntime, tasksPerFrame, totalNanos),, +                    logger.debug(, +                            "[{}]: too many incoming tasks while queue size adjustment occurs, resetting measurements to 0", getName());, +    protected void appendThreadPoolExecutorDetails(StringBuilder sb) {, +        sb.append("min queue capacity = ").append(minQueueSize).append(", ");, +        sb.append("max queue capacity = ").append(maxQueueSize).append(", ");, +        sb.append("frame size = ").append(tasksPerFrame).append(", ");, +        sb.append("targeted response rate = ").append(TimeValue.timeValueNanos(targetedResponseTimeNanos)).append(", ");, +        sb.append("task execution EWMA = ").append(TimeValue.timeValueNanos((long) executionEWMA.getAverage())).append(", ");, +        sb.append("adjustment amount = ").append(QUEUE_ADJUSTMENT_AMOUNT).append(", ");, +, +++ b/core/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java, +        threadPoolExecutor = EsExecutors.newSinglePrioritizing(, +                nodeName() + "/" + CLUSTER_UPDATE_THREAD_NAME,, +                daemonThreadFactory(settings, CLUSTER_UPDATE_THREAD_NAME),]