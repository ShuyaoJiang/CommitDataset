[+++ b/.idea/dictionaries/kimchy.xml, +      <w>jclouds</w>, +++ b/.idea/dictionaries/kimchy.xml, +      <w>jclouds</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore/jars/httpcore-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore-nio/jars/httpcore-nio-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jclouds/jclouds-httpnio/jars/jclouds-httpnio-1.0-beta-4.jar!/" />, +++ b/.idea/dictionaries/kimchy.xml, +      <w>jclouds</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore/jars/httpcore-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore-nio/jars/httpcore-nio-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jclouds/jclouds-httpnio/jars/jclouds-httpnio-1.0-beta-4.jar!/" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/logging/Loggers.java, +import org.elasticsearch.util.gcommon.collect.Lists;, +import static org.elasticsearch.util.gcommon.collect.Lists.*;, +        return getLogger(getLoggerName(clazz), settings, prefixes);, +    }, +, +    public static ESLogger getLogger(String loggerName, Settings settings, String... prefixes) {, +        return getLogger(getLoggerName(loggerName), prefixesList.toArray(new String[prefixesList.size()]));, +++ b/.idea/dictionaries/kimchy.xml, +      <w>jclouds</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore/jars/httpcore-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore-nio/jars/httpcore-nio-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jclouds/jclouds-httpnio/jars/jclouds-httpnio-1.0-beta-4.jar!/" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/logging/Loggers.java, +import org.elasticsearch.util.gcommon.collect.Lists;, +import static org.elasticsearch.util.gcommon.collect.Lists.*;, +        return getLogger(getLoggerName(clazz), settings, prefixes);, +    }, +, +    public static ESLogger getLogger(String loggerName, Settings settings, String... prefixes) {, +        return getLogger(getLoggerName(loggerName), prefixesList.toArray(new String[prefixesList.size()]));, +++ b/plugins/cloud/build.gradle, +    mavenRepo urls: "http://jclouds.rimuhosting.com/maven2/snapshots", +jcloudsVersion = "1.0-beta-4", +, +    compile("org.jclouds:jclouds-httpnio:$jcloudsVersion"), +    compile("org.jclouds:jclouds-blobstore:$jcloudsVersion"), +    compile("org.jclouds:jclouds-aws:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-httpnio:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-blobstore:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-aws:$jcloudsVersion"), +++ b/.idea/dictionaries/kimchy.xml, +      <w>jclouds</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore/jars/httpcore-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore-nio/jars/httpcore-nio-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jclouds/jclouds-httpnio/jars/jclouds-httpnio-1.0-beta-4.jar!/" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/logging/Loggers.java, +import org.elasticsearch.util.gcommon.collect.Lists;, +import static org.elasticsearch.util.gcommon.collect.Lists.*;, +        return getLogger(getLoggerName(clazz), settings, prefixes);, +    }, +, +    public static ESLogger getLogger(String loggerName, Settings settings, String... prefixes) {, +        return getLogger(getLoggerName(loggerName), prefixesList.toArray(new String[prefixesList.size()]));, +++ b/plugins/cloud/build.gradle, +    mavenRepo urls: "http://jclouds.rimuhosting.com/maven2/snapshots", +jcloudsVersion = "1.0-beta-4", +, +    compile("org.jclouds:jclouds-httpnio:$jcloudsVersion"), +    compile("org.jclouds:jclouds-blobstore:$jcloudsVersion"), +    compile("org.jclouds:jclouds-aws:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-httpnio:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-blobstore:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-aws:$jcloudsVersion"), +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/blobstore/CloudBlobStoreService.java, +import org.elasticsearch.cloud.jclouds.JCloudsUtils;, +            blobStoreContext = new BlobStoreContextFactory().createContext(type, account, key, JCloudsUtils.buildModules(settings));, +++ b/.idea/dictionaries/kimchy.xml, +      <w>jclouds</w>, +++ b/.idea/modules/plugins-cloud.iml, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore/jars/httpcore-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.apache.httpcomponents/httpcore-nio/jars/httpcore-nio-4.1-alpha1.jar!/" />, +          <root url="jar://$GRADLE_REPOSITORY$/org.jclouds/jclouds-httpnio/jars/jclouds-httpnio-1.0-beta-4.jar!/" />, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/util/logging/Loggers.java, +import org.elasticsearch.util.gcommon.collect.Lists;, +import static org.elasticsearch.util.gcommon.collect.Lists.*;, +        return getLogger(getLoggerName(clazz), settings, prefixes);, +    }, +, +    public static ESLogger getLogger(String loggerName, Settings settings, String... prefixes) {, +        return getLogger(getLoggerName(loggerName), prefixesList.toArray(new String[prefixesList.size()]));, +++ b/plugins/cloud/build.gradle, +    mavenRepo urls: "http://jclouds.rimuhosting.com/maven2/snapshots", +jcloudsVersion = "1.0-beta-4", +, +    compile("org.jclouds:jclouds-httpnio:$jcloudsVersion"), +    compile("org.jclouds:jclouds-blobstore:$jcloudsVersion"), +    compile("org.jclouds:jclouds-aws:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-httpnio:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-blobstore:$jcloudsVersion"), +    distLib("org.jclouds:jclouds-aws:$jcloudsVersion"), +++ b/plugins/cloud/src/main/java/org/elasticsearch/cloud/blobstore/CloudBlobStoreService.java, +import org.elasticsearch.cloud.jclouds.JCloudsUtils;, +            blobStoreContext = new BlobStoreContextFactory().createContext(type, account, key, JCloudsUtils.buildModules(settings));]