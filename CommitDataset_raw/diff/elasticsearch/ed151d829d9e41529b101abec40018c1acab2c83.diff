[+++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +        super(settings, NoopSearchAction.NAME, threadPool, transportService, actionFilters, SearchRequest::new,, +            indexNameExpressionResolver);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +        super(settings, NoopSearchAction.NAME, threadPool, transportService, actionFilters, SearchRequest::new,, +            indexNameExpressionResolver);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            SearchRequest request = new SearchRequest(in);, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +        super(settings, NoopSearchAction.NAME, threadPool, transportService, actionFilters, SearchRequest::new,, +            indexNameExpressionResolver);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            SearchRequest request = new SearchRequest(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    /**, +     * Constructs a new search request from reading the specified stream., +     *, +     * @param in The stream the request is read from, +     * @throws IOException if there is an issue reading the stream, +     */, +    public SearchRequest(StreamInput in) throws IOException {, +        super(in);, +        searchType = SearchType.fromId(in.readByte());, +        indices = new String[in.readVInt()];, +        for (int i = 0; i < indices.length; i++) {, +            indices[i] = in.readString();, +        }, +        routing = in.readOptionalString();, +        preference = in.readOptionalString();, +        scroll = in.readOptionalWriteable(Scroll::new);, +        source = in.readOptionalWriteable(SearchSourceBuilder::new);, +        types = in.readStringArray();, +        indicesOptions = IndicesOptions.readIndicesOptions(in);, +        requestCache = in.readOptionalBoolean();, +        batchedReduceSize = in.readVInt();, +        if (in.getVersion().onOrAfter(Version.V_5_6_0)) {, +            maxConcurrentShardRequests = in.readVInt();, +            preFilterShardSize = in.readVInt();, +        }, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);, +        out.writeByte(searchType.id());, +        out.writeVInt(indices.length);, +        for (String index : indices) {, +            out.writeString(index);, +        }, +        out.writeOptionalString(routing);, +        out.writeOptionalString(preference);, +        out.writeOptionalWriteable(scroll);, +        out.writeOptionalWriteable(source);, +        out.writeStringArray(types);, +        indicesOptions.writeIndicesOptions(out);, +        out.writeOptionalBoolean(requestCache);, +        out.writeVInt(batchedReduceSize);, +        if (out.getVersion().onOrAfter(Version.V_5_6_0)) {, +            out.writeVInt(maxConcurrentShardRequests);, +            out.writeVInt(preFilterShardSize);, +        }, +    }, +, +        throw new UnsupportedOperationException("usage of Streamable is to be replaced by Writeable");, +++ b/client/client-benchmark-noop-api-plugin/src/main/java/org/elasticsearch/plugin/noop/action/search/TransportNoopSearchAction.java, +        super(settings, NoopSearchAction.NAME, threadPool, transportService, actionFilters, SearchRequest::new,, +            indexNameExpressionResolver);, +++ b/core/src/main/java/org/elasticsearch/action/search/MultiSearchRequest.java, +            SearchRequest request = new SearchRequest(in);, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +    /**, +     * Constructs a new search request from reading the specified stream., +     *, +     * @param in The stream the request is read from, +     * @throws IOException if there is an issue reading the stream, +     */, +    public SearchRequest(StreamInput in) throws IOException {, +        super(in);, +        searchType = SearchType.fromId(in.readByte());, +        indices = new String[in.readVInt()];, +        for (int i = 0; i < indices.length; i++) {, +            indices[i] = in.readString();, +        }, +        routing = in.readOptionalString();, +        preference = in.readOptionalString();, +        scroll = in.readOptionalWriteable(Scroll::new);, +        source = in.readOptionalWriteable(SearchSourceBuilder::new);, +        types = in.readStringArray();, +        indicesOptions = IndicesOptions.readIndicesOptions(in);, +        requestCache = in.readOptionalBoolean();, +        batchedReduceSize = in.readVInt();, +        if (in.getVersion().onOrAfter(Version.V_5_6_0)) {, +            maxConcurrentShardRequests = in.readVInt();, +            preFilterShardSize = in.readVInt();, +        }, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        super.writeTo(out);]