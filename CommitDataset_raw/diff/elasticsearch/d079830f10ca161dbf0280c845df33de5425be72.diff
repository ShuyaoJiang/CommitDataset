[+++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +             // Should the action listener be threaded or not by default. Action listeners are automatically threaded for client, +             // nodes and transport client in order to make sure client side code is not executed on IO threads., +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +             // Should the action listener be threaded or not by default. Action listeners are automatically threaded for client, +             // nodes and transport client in order to make sure client side code is not executed on IO threads., +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                    .put(Node.NODE_CLIENT_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +             // Should the action listener be threaded or not by default. Action listeners are automatically threaded for client, +             // nodes and transport client in order to make sure client side code is not executed on IO threads., +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                    .put(Node.NODE_CLIENT_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +    public static final String CLIENT_ATTR = "client";, +        return (Node.NODE_CLIENT_SETTING.get(settings) || (Node.NODE_DATA_SETTING.get(settings) == false && Node.NODE_MASTER_SETTING.get(settings) == false)) == false;, +    }, +, +    public static boolean clientNode(Settings settings) {, +        return Node.NODE_CLIENT_SETTING.get(settings);, +        if (Node.NODE_MASTER_SETTING.exists(settings)) {, +        return clientNode(settings) == false;, +    }, +        if (Node.NODE_DATA_SETTING.exists(settings)) {, +        return clientNode(settings) == false;, +    }, +        if (data == null) {, +            return !clientNode();, +        }, +        return Booleans.parseBooleanExact(data);, +     * Is the node a client node or not., +     */, +    public boolean clientNode() {, +        String client = attributes.get(CLIENT_ATTR);, +        return client != null && Booleans.parseBooleanExact(client);, +    }, +, +    public boolean isClientNode() {, +        return clientNode();, +    }, +, +    /**, +        if (master == null) {, +            return !clientNode();, +        }, +        return Booleans.parseBooleanExact(master);, +++ b/core/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java, +import org.elasticsearch.cluster.node.DiscoveryNode;, +             // Should the action listener be threaded or not by default. Action listeners are automatically threaded for client, +             // nodes and transport client in order to make sure client side code is not executed on IO threads., +            this.threadedListener = DiscoveryNode.clientNode(settings) || TransportClient.CLIENT_TYPE.equals(Client.CLIENT_TYPE_SETTING_S.get(settings));, +++ b/core/src/main/java/org/elasticsearch/client/transport/TransportClient.java, +                    .put(Node.NODE_CLIENT_SETTING.getKey(), true), +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNode.java, +    public static final String CLIENT_ATTR = "client";, +        return (Node.NODE_CLIENT_SETTING.get(settings) || (Node.NODE_DATA_SETTING.get(settings) == false && Node.NODE_MASTER_SETTING.get(settings) == false)) == false;, +    }, +, +    public static boolean clientNode(Settings settings) {, +        return Node.NODE_CLIENT_SETTING.get(settings);, +        if (Node.NODE_MASTER_SETTING.exists(settings)) {, +        return clientNode(settings) == false;, +    }, +        if (Node.NODE_DATA_SETTING.exists(settings)) {, +        return clientNode(settings) == false;, +    }, +        if (data == null) {, +            return !clientNode();, +        }, +        return Booleans.parseBooleanExact(data);, +     * Is the node a client node or not., +     */, +    public boolean clientNode() {, +        String client = attributes.get(CLIENT_ATTR);, +        return client != null && Booleans.parseBooleanExact(client);, +    }, +, +    public boolean isClientNode() {, +        return clientNode();, +    }, +, +    /**, +        if (master == null) {, +            return !clientNode();, +        }, +        return Booleans.parseBooleanExact(master);, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeService.java, +        Map<String, String> attributes = new HashMap<>(settings.getByPrefix("node.").getAsMap());, +            if (attributes.get("client").equals("false")) {, +                attributes.remove("client"); // this is the default, +            } else {, +                // if we are client node, don't store data ..., +                attributes.put("data", "false");, +        }]