[+++ b/core/pom.xml, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +, +import java.util.Collections;, +import java.util.Map;, +, +    private final Map<String, DiskUsage> leastAvailableSpaceUsage;, +    private final Map<String, DiskUsage> mostAvailableSpaceUsage;, +    final Map<String, Long> shardSizes;, +    private final Map<ShardRouting, String> routingToDataPath;, +       this(Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_MAP);, +    public ClusterInfo(final Map<String, DiskUsage> leastAvailableSpaceUsage, final Map<String, DiskUsage> mostAvailableSpaceUsage, final Map<String, Long> shardSizes, Map<ShardRouting, String> routingToDataPath) {, +    public Map<String, DiskUsage> getNodeLeastAvailableDiskUsages() {, +    public Map<String, DiskUsage> getNodeMostAvailableDiskUsages() {, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +, +import java.util.Collections;, +import java.util.Map;, +, +    private final Map<String, DiskUsage> leastAvailableSpaceUsage;, +    private final Map<String, DiskUsage> mostAvailableSpaceUsage;, +    final Map<String, Long> shardSizes;, +    private final Map<ShardRouting, String> routingToDataPath;, +       this(Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_MAP);, +    public ClusterInfo(final Map<String, DiskUsage> leastAvailableSpaceUsage, final Map<String, DiskUsage> mostAvailableSpaceUsage, final Map<String, Long> shardSizes, Map<ShardRouting, String> routingToDataPath) {, +    public Map<String, DiskUsage> getNodeLeastAvailableDiskUsages() {, +    public Map<String, DiskUsage> getNodeMostAvailableDiskUsages() {, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java, +        public Builder routingTable(RoutingTable.Builder routingTable) {, +            return routingTable(routingTable.build());, +        }, +, +++ b/core/pom.xml, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java, +            for (SnapshotsInProgress.ShardSnapshotStatus status : entry.shards().values()) {, +                if (status.nodeId() != null) {, +                    nodesIds.add(status.nodeId());, +                for (ImmutableMap.Entry<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shardEntry : entry.shards().entrySet()) {, +                    SnapshotsInProgress.ShardSnapshotStatus status = shardEntry.getValue();, +                                SnapshotIndexShardStatus shardStatus = shardStatues.get(shardEntry.getKey());, +                    switch (shardEntry.getValue().state()) {, +                            throw new IllegalArgumentException("Unknown snapshot state " + shardEntry.getValue().state());, +                    SnapshotIndexShardStatus shardStatus = new SnapshotIndexShardStatus(shardEntry.getKey(), stage);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java, +                builder.routingTable(routingTableBuilder);, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterInfo.java, +, +import java.util.Collections;, +import java.util.Map;, +]