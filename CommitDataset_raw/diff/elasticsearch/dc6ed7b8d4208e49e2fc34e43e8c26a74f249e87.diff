[+++ b/core/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +import java.io.IOException;, +        try {, +        } catch (IOException e) {, +            // TODO: we need to separate out closing (ie shutting down) services, vs releasing runtime transient, +            // structures. Shutting down services should use IOUtils.close, +            logger.warn("failed to close " + getClass().getName(), e);, +        }, +    protected abstract void doClose() throws IOException;, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +import java.io.IOException;, +        try {, +        } catch (IOException e) {, +            // TODO: we need to separate out closing (ie shutting down) services, vs releasing runtime transient, +            // structures. Shutting down services should use IOUtils.close, +            logger.warn("failed to close " + getClass().getName(), e);, +        }, +    protected abstract void doClose() throws IOException;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +import java.io.IOException;, +        try {, +        } catch (IOException e) {, +            // TODO: we need to separate out closing (ie shutting down) services, vs releasing runtime transient, +            // structures. Shutting down services should use IOUtils.close, +            logger.warn("failed to close " + getClass().getName(), e);, +        }, +    protected abstract void doClose() throws IOException;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.discovery.zen.UnicastHostsProvider;, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import org.elasticsearch.transport.TransportService;, +, +    private final UnicastHostsProvider hostsProvider;, +        String discoveryType = DISCOVERY_TYPE_SETTING.get(settings);, +        if (discoveryType.equals("none") == false) {, +            String hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);, +            Supplier<UnicastHostsProvider> hostsProviderSupplier = hostProviders.get(hostsProviderName);, +            if (hostsProviderSupplier == null) {, +                throw new IllegalArgumentException("Unknown zen hosts provider [" + hostsProviderName + "]");, +            }, +            hostsProvider = Objects.requireNonNull(hostsProviderSupplier.get());, +        } else {, +            hostsProvider = null;, +        }, +    }, +, +    public UnicastHostsProvider getHostsProvider() {, +        return hostsProvider;, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +import java.io.IOException;, +        try {, +        } catch (IOException e) {, +            // TODO: we need to separate out closing (ie shutting down) services, vs releasing runtime transient, +            // structures. Shutting down services should use IOUtils.close, +            logger.warn("failed to close " + getClass().getName(), e);, +        }, +    protected abstract void doClose() throws IOException;, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/discovery/DiscoveryModule.java, +import org.elasticsearch.common.inject.AbstractModule;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Setting.Property;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.discovery.zen.UnicastHostsProvider;, +import org.elasticsearch.discovery.zen.ZenDiscovery;, +import org.elasticsearch.plugins.DiscoveryPlugin;, +import org.elasticsearch.transport.TransportService;, +, +    private final UnicastHostsProvider hostsProvider;, +        String discoveryType = DISCOVERY_TYPE_SETTING.get(settings);, +        if (discoveryType.equals("none") == false) {, +            String hostsProviderName = DISCOVERY_HOSTS_PROVIDER_SETTING.get(settings);, +            Supplier<UnicastHostsProvider> hostsProviderSupplier = hostProviders.get(hostsProviderName);, +            if (hostsProviderSupplier == null) {, +                throw new IllegalArgumentException("Unknown zen hosts provider [" + hostsProviderName + "]");, +            }, +            hostsProvider = Objects.requireNonNull(hostsProviderSupplier.get());, +        } else {, +            hostsProvider = null;, +        }, +    }, +, +    public UnicastHostsProvider getHostsProvider() {, +        return hostsProvider;, +++ b/core/src/main/java/org/elasticsearch/discovery/zen/FaultDetection.java, +import java.io.Closeable;, +, +public abstract class FaultDetection extends AbstractComponent implements Closeable {, +    @Override, +++ b/core/src/main/java/org/elasticsearch/common/component/AbstractLifecycleComponent.java, +import java.io.IOException;]