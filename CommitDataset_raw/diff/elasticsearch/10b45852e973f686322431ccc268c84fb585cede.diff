[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStats.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsRequest.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsRequestBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsResponse.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]TransportFieldStatsTransportAction.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]rest[/\\]action[/\\]fieldstats[/\\]RestFieldStatsAction.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsRequestTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]fieldstats[/\\]FieldStatsIntegrationIT.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]fieldstats[/\\]FieldStatsTests.java" checks="LineLength" />, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStats.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsRequest.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsRequestBuilder.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsResponse.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]TransportFieldStatsTransportAction.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]main[/\\]java[/\\]org[/\\]elasticsearch[/\\]rest[/\\]action[/\\]fieldstats[/\\]RestFieldStatsAction.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]action[/\\]fieldstats[/\\]FieldStatsRequestTests.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]fieldstats[/\\]FieldStatsIntegrationIT.java" checks="LineLength" />, +  <suppress files="core[/\\]src[/\\]test[/\\]java[/\\]org[/\\]elasticsearch[/\\]fieldstats[/\\]FieldStatsTests.java" checks="LineLength" />, +++ b/core/src/main/java/org/elasticsearch/action/fieldstats/FieldStats.java, +import org.elasticsearch.common.io.stream.Streamable;, +import java.net.UnknownHostException;, +public abstract class FieldStats<T> implements Streamable, ToXContent {, +, +    protected FieldStats(int type) {, +        this.type = (byte) type;, +    protected FieldStats(int type, long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq) {, +        this.type = (byte) type;, +        return type;, +     * @return the number of documents that have at least one term for this field, or -1 if this measurement isn't available., +     * @return the sum of the term frequencies of all terms in this field across all documents, or -1 if this measurement, +     * Merges the provided stats into this stats instance., +    public void append(FieldStats stats) {, +        this.maxDoc += stats.maxDoc;, +        if (stats.docCount == -1) {, +            this.docCount += stats.docCount;, +        if (stats.sumDocFreq == -1) {, +            this.sumDocFreq += stats.sumDocFreq;, +        if (stats.sumTotalTermFreq == -1) {, +            this.sumTotalTermFreq += stats.sumTotalTermFreq;, +    protected abstract int compare(T a, T b);, +     * @return <code>true</code> if this instance matches with the provided index constraint, otherwise <code>false</code> is returned, +    @Override, +    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {, +        builder.startObject();, +        builder.field(Fields.MAX_DOC, maxDoc);, +        builder.field(Fields.DOC_COUNT, docCount);, +        builder.field(Fields.DENSITY, getDensity());, +        builder.field(Fields.SUM_DOC_FREQ, sumDocFreq);, +        builder.field(Fields.SUM_TOTAL_TERM_FREQ, sumTotalTermFreq);, +        toInnerXContent(builder);, +        builder.endObject();, +        return builder;, +    protected void toInnerXContent(XContentBuilder builder) throws IOException {, +        builder.field(Fields.MIN_VALUE, getMinValue());, +        builder.field(Fields.MIN_VALUE_AS_STRING, getMinValueAsString());, +        builder.field(Fields.MAX_VALUE, getMaxValue());, +        builder.field(Fields.MAX_VALUE_AS_STRING, getMaxValueAsString());, +    public void readFrom(StreamInput in) throws IOException {, +        maxDoc = in.readVLong();, +        docCount = in.readLong();, +        sumDocFreq = in.readLong();, +        sumTotalTermFreq = in.readLong();, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeByte(type);, +        out.writeVLong(maxDoc);, +        out.writeLong(docCount);, +        out.writeLong(sumDocFreq);, +        out.writeLong(sumTotalTermFreq);, +    }, +, +    private static abstract class ComparableFieldStats<T extends Comparable<? super T>> extends FieldStats<T> {, +        protected ComparableFieldStats(int type) {, +            super(type);, +        }, +, +        protected ComparableFieldStats(int type, long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq) {, +            super(type, maxDoc, docCount, sumDocFreq, sumTotalTermFreq);, +        protected int compare(T a, T b) {, +            return a.compareTo(b);, +        }, +    }, +, +    public static class Long extends ComparableFieldStats<java.lang.Long> {, +, +        public Long() {, +            super(0);, +        }, +, +        public Long(long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq, long minValue, long maxValue) {, +            this(0, maxDoc, docCount, sumDocFreq, sumTotalTermFreq, minValue, maxValue);, +        }, +, +        protected Long(int type, long maxDoc, long docCount, long sumDocFreq, long sumTotalTermFreq, long minValue, long maxValue) {, +            super(type, maxDoc, docCount, sumDocFreq, sumTotalTermFreq);, +            this.minValue = minValue;, +            this.maxValue = maxValue;, +            return String.valueOf(minValue.longValue());, +            return String.valueOf(maxValue.longValue());]