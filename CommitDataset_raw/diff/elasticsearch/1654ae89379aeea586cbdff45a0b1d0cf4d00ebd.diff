[+++ b/docs/reference/mapping/types/core-types.asciidoc, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        public static final boolean DOC_VALUES = false;, +        protected Boolean docValues;, +        public T docValues(boolean docValues) {, +            this.docValues = docValues;, +            return builder;, +        }, +, +    protected AbstractFieldMapper(Names names, float boost, FieldType fieldType, Boolean docValues, NamedAnalyzer indexAnalyzer,, +        if (docValues != null) {, +            this.docValues = docValues;, +        } else if (fieldDataType == null) {, +            this.docValues = false;, +        if (!this.hasDocValues() && fieldMergeWith.hasDocValues()) {, +            // don't add conflict if this mapper has doc values while the mapper to merge doesn't since doc values are implicitely set, +            // when the doc_values field data format is configured, +            mergeContext.addConflict("mapper [" + names.fullName() + "] has different " + TypeParsers.DOC_VALUES + " values");, +        }, +        if (includeDefaults || hasDocValues() != Defaults.DOC_VALUES) {, +            builder.field(TypeParsers.DOC_VALUES, docValues);, +        }, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        public static final boolean DOC_VALUES = false;, +        protected Boolean docValues;, +        public T docValues(boolean docValues) {, +            this.docValues = docValues;, +            return builder;, +        }, +, +    protected AbstractFieldMapper(Names names, float boost, FieldType fieldType, Boolean docValues, NamedAnalyzer indexAnalyzer,, +        if (docValues != null) {, +            this.docValues = docValues;, +        } else if (fieldDataType == null) {, +            this.docValues = false;, +        if (!this.hasDocValues() && fieldMergeWith.hasDocValues()) {, +            // don't add conflict if this mapper has doc values while the mapper to merge doesn't since doc values are implicitely set, +            // when the doc_values field data format is configured, +            mergeContext.addConflict("mapper [" + names.fullName() + "] has different " + TypeParsers.DOC_VALUES + " values");, +        }, +        if (includeDefaults || hasDocValues() != Defaults.DOC_VALUES) {, +            builder.field(TypeParsers.DOC_VALUES, docValues);, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +        super(names, 1.0f, fieldType, null, null, null, postingsProvider, docValuesProvider, null, null, null);, +++ b/docs/reference/mapping/types/core-types.asciidoc, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +|`doc_values` |Set to `true` to store field values in a column-stride fashion., +Automatically set to `true` when the fielddata format is `doc_values`., +, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +        public static final boolean DOC_VALUES = false;, +        protected Boolean docValues;, +        public T docValues(boolean docValues) {, +            this.docValues = docValues;, +            return builder;, +        }, +, +    protected AbstractFieldMapper(Names names, float boost, FieldType fieldType, Boolean docValues, NamedAnalyzer indexAnalyzer,, +        if (docValues != null) {, +            this.docValues = docValues;, +        } else if (fieldDataType == null) {, +            this.docValues = false;, +        if (!this.hasDocValues() && fieldMergeWith.hasDocValues()) {, +            // don't add conflict if this mapper has doc values while the mapper to merge doesn't since doc values are implicitely set, +            // when the doc_values field data format is configured]