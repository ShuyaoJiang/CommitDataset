[+++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.tasks.withType(JavaCompile) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                options.encoding = 'UTF-8', +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.tasks.withType(JavaCompile) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                options.encoding = 'UTF-8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * An {@ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.tasks.withType(JavaCompile) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                options.encoding = 'UTF-8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * An {@ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterService.java, +     * @returns A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.tasks.withType(JavaCompile) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                options.encoding = 'UTF-8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * An {@ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterService.java, +     * @returns A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue, +++ b/core/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@get getFreeDiskAsPercentage}, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.tasks.withType(JavaCompile) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                options.encoding = 'UTF-8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * An {@ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterService.java, +     * @returns A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue, +++ b/core/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@get getFreeDiskAsPercentage}, +++ b/core/src/main/java/org/elasticsearch/common/metrics/EWMA.java, + *      <p>, + *      Taken from codahale metric module, changed to use LongAdder, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.tasks.withType(JavaCompile) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                options.encoding = 'UTF-8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * An {@ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterService.java, +     * @returns A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue, +++ b/core/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@get getFreeDiskAsPercentage}, +++ b/core/src/main/java/org/elasticsearch/common/metrics/EWMA.java, + *      <p>, + *      Taken from codahale metric module, changed to use LongAdder, +++ b/core/src/main/java/org/elasticsearch/common/metrics/MeterMetric.java, + * @see <a href="http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average">EMA</a>, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +            project.tasks.withType(JavaCompile) {, +                options.compilerArgs << '-Werror' << '-Xlint:all' << '-Xdoclint:all/private' << '-Xdoclint:-missing', +                options.encoding = 'UTF-8', +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/warmer/get/GetWarmersRequest.java, + * An {@ClusterInfoRequest} that fetches {@link org.elasticsearch.search.warmer.IndexWarmersMetaData} for, +++ b/core/src/main/java/org/elasticsearch/cluster/ClusterService.java, +     * @returns A zero time value if the queue is empty, otherwise the time value oldest task waiting in the queue, +++ b/core/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +     * Create a new DiskUsage, if {@code totalBytes} is 0, {@get getFreeDiskAsPercentage}, +++ b/core/src/main/java/org/elasticsearch/common/metrics/EWMA.java, + *      <p>, + *      Taken from codahale metric module, changed to use LongAdder, +++ b/core/src/main/java/org/elasticsearch/common/metrics/MeterMetric.java, + * @see <a href="http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average">EMA</a>, +++ b/core/src/main/java/org/elasticsearch/common/unit/DistanceUnit.java, +     * @thrown ElasticsearchIllegalArgumentException if no matching {@link DistanceUnit} can be found, +++ b/build.gradle, +      javadoc = false, +  gradle.projectsEvaluated {]