[+++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +added[1.1.0] It is possible to not limit the number of terms that are returned by setting `size` to `0`. Don't use this, +on high-cardinality fields as this will kill both your CPU since terms need to be return sorted, and your network., +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +added[1.1.0] It is possible to not limit the number of terms that are returned by setting `size` to `0`. Don't use this, +on high-cardinality fields as this will kill both your CPU since terms need to be return sorted, and your network., +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +added[1.1.0] It is possible to not limit the number of terms that are returned by setting `size` to `0`. Don't use this, +on high-cardinality fields as this will kill both your CPU since terms need to be return sorted, and your network., +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    // 0 actually means unlimited, +    protected static int readSize(StreamInput in) throws IOException {, +        final int size = in.readVInt();, +        return size == 0 ? Integer.MAX_VALUE : size;, +    }, +, +    protected static void writeSize(int size, StreamOutput out) throws IOException {, +        if (size == Integer.MAX_VALUE) {, +            size = 0;, +        }, +        out.writeVInt(size);, +    }, +, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +added[1.1.0] It is possible to not limit the number of terms that are returned by setting `size` to `0`. Don't use this, +on high-cardinality fields as this will kill both your CPU since terms need to be return sorted, and your network., +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    // 0 actually means unlimited, +    protected static int readSize(StreamInput in) throws IOException {, +        final int size = in.readVInt();, +        return size == 0 ? Integer.MAX_VALUE : size;, +    }, +, +    protected static void writeSize(int size, StreamOutput out) throws IOException {, +        if (size == Integer.MAX_VALUE) {, +            size = 0;, +        }, +        out.writeVInt(size);, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/LongTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +added[1.1.0] It is possible to not limit the number of terms that are returned by setting `size` to `0`. Don't use this, +on high-cardinality fields as this will kill both your CPU since terms need to be return sorted, and your network., +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    // 0 actually means unlimited, +    protected static int readSize(StreamInput in) throws IOException {, +        final int size = in.readVInt();, +        return size == 0 ? Integer.MAX_VALUE : size;, +    }, +, +    protected static void writeSize(int size, StreamOutput out) throws IOException {, +        if (size == Integer.MAX_VALUE) {, +            size = 0;, +        }, +        out.writeVInt(size);, +    }, +, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/LongTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/StringTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/docs/reference/search/aggregations/bucket/terms-aggregation.asciidoc, +added[1.1.0] It is possible to not limit the number of terms that are returned by setting `size` to `0`. Don't use this, +on high-cardinality fields as this will kill both your CPU since terms need to be return sorted, and your network., +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/DoubleTerms.java, +        this.requiredSize = readSize(in);, +        writeSize(requiredSize, out);, +++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/InternalTerms.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.io.IOException;, +    // 0 actually means unlimited, +    protected static int readSize(StreamInput in) throws IOException {, +        final int size = in.readVInt();]