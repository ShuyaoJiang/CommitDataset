[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestClient.java, +                if (restApi.getParams().contains(entry.getKey()) || restSpec.isGlobalParameter(entry.getKey()), +                        || restSpec.isClientParameter(entry.getKey())) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/ClientYamlTestClient.java, +                if (restApi.getParams().contains(entry.getKey()) || restSpec.isGlobalParameter(entry.getKey()), +                        || restSpec.isClientParameter(entry.getKey())) {, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/yaml/restspec/ClientYamlSuiteRestSpec.java, +import java.util.HashSet;, +import java.util.Set;, +    private final Set<String> globalParameters = new HashSet<>();, +    private final Map<String, ClientYamlSuiteRestApi> restApiMap = new HashMap<>();, +    private void addApi(ClientYamlSuiteRestApi restApi) {, +     * Returns whether the provided parameter is one of those parameters that are supported by all Elasticsearch api, +     */, +    public boolean isGlobalParameter(String param) {, +        return globalParameters.contains(param);, +    }, +, +    /**, +     * Returns whether the provided parameter is one of those parameters that are supported by the Elasticsearch language clients, meaning, +     * that they influence the client behaviour and don't get sent to Elasticsearch, +     */, +    public boolean isClientParameter(String name) {, +        return "ignore".equals(name);, +    }, +, +    /**, +                    try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, stream)) {, +                        if (filename.equals("_common.json")) {, +                            String currentFieldName = null;, +                            while (parser.nextToken() != XContentParser.Token.END_OBJECT) {, +                                if (parser.currentToken() == XContentParser.Token.FIELD_NAME) {, +                                    currentFieldName = parser.currentName();, +                                } else if (parser.currentToken() == XContentParser.Token.START_OBJECT, +                                        && "params".equals(currentFieldName)) {, +                                    while (parser.nextToken() == XContentParser.Token.FIELD_NAME) {, +                                        String param = parser.currentName();, +                                        if (restSpec.globalParameters.contains(param)) {, +                                            throw new IllegalArgumentException("Found duplicate global param [" + param + "]");, +                                        }, +                                        restSpec.globalParameters.add(param);, +                                        parser.nextToken();, +                                        if (parser.currentToken() != XContentParser.Token.START_OBJECT) {, +                                            throw new IllegalArgumentException("Expected params field in rest api definition to " +, +                                                    "contain an object");, +                                        }, +                                        parser.skipChildren();, +                                    }, +                                }, +                            }, +                        } else {, +                            ClientYamlSuiteRestApi restApi = restApiParser.parse(jsonFile.toString(), parser);, +                                throw new IllegalArgumentException("found api [" + restApi.getName() + "] in [" + jsonFile.toString() +, +                                        "]. " + "Each api is expected to have the same name as the file that defines it.");, +                    }]