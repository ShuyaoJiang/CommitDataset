[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 61 used to be for RoutingValidationException, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 61 used to be for RoutingValidationException, +++ b/core/src/main/java/org/elasticsearch/action/TaskOperationFailure.java, +public final class TaskOperationFailure implements Writeable, ToXContent {, +    public TaskOperationFailure(String nodeId, long taskId, Throwable t) {, +        this.nodeId = nodeId;, +        this.taskId = taskId;, +        this.reason = t;, +        status = ExceptionsHelper.status(t);, +    }, +, +    /**, +     * Read from a stream., +     */, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(nodeId);, +        out.writeLong(taskId);, +        out.writeThrowable(reason);, +        RestStatus.writeTo(out, status);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 61 used to be for RoutingValidationException, +++ b/core/src/main/java/org/elasticsearch/action/TaskOperationFailure.java, +public final class TaskOperationFailure implements Writeable, ToXContent {, +    public TaskOperationFailure(String nodeId, long taskId, Throwable t) {, +        this.nodeId = nodeId;, +        this.taskId = taskId;, +        this.reason = t;, +        status = ExceptionsHelper.status(t);, +    }, +, +    /**, +     * Read from a stream., +     */, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(nodeId);, +        out.writeLong(taskId);, +        out.writeThrowable(reason);, +        RestStatus.writeTo(out, status);, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/ClusterAllocationExplanation.java, +public final class ClusterAllocationExplanation implements ToXContent, Writeable {, +    public ClusterAllocationExplanation(ShardId shard, boolean primary, @Nullable String assignedNodeId,, +            UnassignedInfo unassignedInfo, Map<DiscoveryNode, Decision> nodeToDecision,, +            Map<DiscoveryNode, Float> nodeWeights, long remainingDelayNanos) {, +        this.shard = shard;, +        this.primary = primary;, +        this.assignedNodeId = assignedNodeId;, +        this.unassignedInfo = unassignedInfo;, +        this.nodeToDecision = nodeToDecision == null ? Collections.emptyMap() : nodeToDecision;, +        this.nodeWeights = nodeWeights == null ? Collections.emptyMap() : nodeWeights;, +        this.remainingDelayNanos = remainingDelayNanos;, +    }, +, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        this.getShard().writeTo(out);, +        out.writeBoolean(this.isPrimary());, +        out.writeOptionalString(this.getAssignedNodeId());, +        out.writeOptionalWriteable(this.getUnassignedInfo());, +, +        Map<DiscoveryNode, Decision> ntd = this.getNodeDecisions();, +        out.writeVInt(ntd.size());, +        for (Map.Entry<DiscoveryNode, Decision> entry : ntd.entrySet()) {, +            entry.getKey().writeTo(out);, +            Decision.writeTo(entry.getValue(), out);, +        Map<DiscoveryNode, Float> ntw = this.getNodeWeights();, +        out.writeVInt(ntw.size());, +        for (Map.Entry<DiscoveryNode, Float> entry : ntw.entrySet()) {, +            entry.getKey().writeTo(out);, +            out.writeFloat(entry.getValue());, +        }, +        out.writeVLong(remainingDelayNanos);, +    }, +, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/ElasticsearchException.java, +        // 61 used to be for RoutingValidationException, +++ b/core/src/main/java/org/elasticsearch/action/TaskOperationFailure.java, +public final class TaskOperationFailure implements Writeable, ToXContent {, +    public TaskOperationFailure(String nodeId, long taskId, Throwable t) {, +        this.nodeId = nodeId;, +        this.taskId = taskId;, +        this.reason = t;, +        status = ExceptionsHelper.status(t);, +    }, +, +    /**, +     * Read from a stream., +     */, +    @Override, +    public void writeTo(StreamOutput out) throws IOException {, +        out.writeString(nodeId);, +        out.writeLong(taskId);]