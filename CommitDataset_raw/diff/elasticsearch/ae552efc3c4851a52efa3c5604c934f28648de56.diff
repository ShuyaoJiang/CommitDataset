[+++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollector.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +    private final LicensesManagerService licensesManagerService;, +                                LicensesManagerService licensesManagerService, ClusterName clusterName, SecuredClient client) {, +        this.licensesManagerService = licensesManagerService;, +        License license = licensesManagerService.getLicense();, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollector.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +    private final LicensesManagerService licensesManagerService;, +                                LicensesManagerService licensesManagerService, ClusterName clusterName, SecuredClient client) {, +        this.licensesManagerService = licensesManagerService;, +        License license = licensesManagerService.getLicense();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +            service.onChange(license.operationMode(), LicenseState.ENABLED);, +            service.onChange(license.operationMode(), LicenseState.GRACE_PERIOD);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +        public void onChange(License.OperationMode operationMode, LicenseState state) {, +                licensee.onChange(new Licensee.Status(operationMode, state));, +        private volatile License license;, +            return license;, +        public synchronized void update(License license) {, +            this.license = license;, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollector.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +    private final LicensesManagerService licensesManagerService;, +                                LicensesManagerService licensesManagerService, ClusterName clusterName, SecuredClient client) {, +        this.licensesManagerService = licensesManagerService;, +        License license = licensesManagerService.getLicense();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +            service.onChange(license.operationMode(), LicenseState.ENABLED);, +            service.onChange(license.operationMode(), LicenseState.GRACE_PERIOD);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +        public void onChange(License.OperationMode operationMode, LicenseState state) {, +                licensee.onChange(new Licensee.Status(operationMode, state));, +        private volatile License license;, +            return license;, +        public synchronized void update(License license) {, +            this.license = license;, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollectorTests.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +                internalCluster().getInstance(LicensesManagerService.class, nodeId),, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollector.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +    private final LicensesManagerService licensesManagerService;, +                                LicensesManagerService licensesManagerService, ClusterName clusterName, SecuredClient client) {, +        this.licensesManagerService = licensesManagerService;, +        License license = licensesManagerService.getLicense();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +            service.onChange(license.operationMode(), LicenseState.ENABLED);, +            service.onChange(license.operationMode(), LicenseState.GRACE_PERIOD);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +        public void onChange(License.OperationMode operationMode, LicenseState state) {, +                licensee.onChange(new Licensee.Status(operationMode, state));, +        private volatile License license;, +            return license;, +        public synchronized void update(License license) {, +            this.license = license;, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollectorTests.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +                internalCluster().getInstance(LicensesManagerService.class, nodeId),, +++ b/marvel/src/test/java/org/elasticsearch/marvel/license/LicenseIntegrationTests.java, +                licensee.onChange(new Licensee.Status(License.OperationMode.BASIC, randomBoolean() ? LicenseState.ENABLED : LicenseState.GRACE_PERIOD));, +                licensee.onChange(new Licensee.Status(License.OperationMode.BASIC, LicenseState.DISABLED));, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollector.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +    private final LicensesManagerService licensesManagerService;, +                                LicensesManagerService licensesManagerService, ClusterName clusterName, SecuredClient client) {, +        this.licensesManagerService = licensesManagerService;, +        License license = licensesManagerService.getLicense();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +            service.onChange(license.operationMode(), LicenseState.ENABLED);, +            service.onChange(license.operationMode(), LicenseState.GRACE_PERIOD);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +            service.onChange(license.operationMode(), LicenseState.DISABLED);, +        public void onChange(License.OperationMode operationMode, LicenseState state) {, +                licensee.onChange(new Licensee.Status(operationMode, state));, +        private volatile License license;, +            return license;, +        public synchronized void update(License license) {, +            this.license = license;, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollectorTests.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +                internalCluster().getInstance(LicensesManagerService.class, nodeId),, +++ b/marvel/src/test/java/org/elasticsearch/marvel/license/LicenseIntegrationTests.java, +                licensee.onChange(new Licensee.Status(License.OperationMode.BASIC, randomBoolean() ? LicenseState.ENABLED : LicenseState.GRACE_PERIOD));, +                licensee.onChange(new Licensee.Status(License.OperationMode.BASIC, LicenseState.DISABLED));, +++ b/shield/src/main/java/org/elasticsearch/shield/license/ShieldLicensee.java, +            public void onChange(Status status) {, +++ b/marvel/src/main/java/org/elasticsearch/marvel/agent/collector/cluster/ClusterInfoCollector.java, +import org.elasticsearch.license.plugin.core.LicensesManagerService;, +    private final LicensesManagerService licensesManagerService;, +                                LicensesManagerService licensesManagerService, ClusterName clusterName, SecuredClient client) {, +        this.licensesManagerService = licensesManagerService;, +        License license = licensesManagerService.getLicense();, +++ b/marvel/src/test/java/org/elasticsearch/marvel/agent/collector/AbstractCollectorTestCase.java, +            service.onChange(license.operationMode(), LicenseState.ENABLED);, +            service.onChange(license.operationMode(), LicenseState.GRACE_PERIOD);]