[+++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    private String scoreMode;, +    public HasChildQueryBuilder scoreMode(String scoreMode) {, +        this.scoreMode = scoreMode;, +        if (scoreMode != null) {, +            builder.field("score_mode", scoreMode);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    private String scoreMode;, +    public HasChildQueryBuilder scoreMode(String scoreMode) {, +        this.scoreMode = scoreMode;, +        if (scoreMode != null) {, +            builder.field("score_mode", scoreMode);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +        ScoreMode scoreMode = ScoreMode.None;, +        int maxChildren = Integer.MAX_VALUE;, +                    scoreMode = parseScoreMode(parser.text());, +        query = joinUtilHelper(parentType, parentChildIndexFieldData, parentDocMapper.typeFilter(), scoreMode, innerQuery, minChildren, maxChildren);, +    public static Query joinUtilHelper(String parentType, ParentChildIndexFieldData parentChildIndexFieldData, Query toQuery, ScoreMode scoreMode, Query innerQuery, int minChildren, int maxChildren) throws IOException {, +    public static ScoreMode parseScoreMode(String scoreModeString) {, +        if ("none".equals(scoreModeString)) {, +            return ScoreMode.None;, +        } else if ("min".equals(scoreModeString)) {, +            return ScoreMode.Min;, +        } else if ("max".equals(scoreModeString)) {, +            return ScoreMode.Max;, +        } else if ("avg".equals(scoreModeString)) {, +            return ScoreMode.Avg;, +        } else if ("total".equals(scoreModeString)) {, +            return ScoreMode.Total;, +        }, +        throw new IllegalArgumentException("No score mode for child query [" + scoreModeString + "] found");, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    private String scoreMode;, +    public HasChildQueryBuilder scoreMode(String scoreMode) {, +        this.scoreMode = scoreMode;, +        if (scoreMode != null) {, +            builder.field("score_mode", scoreMode);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +        ScoreMode scoreMode = ScoreMode.None;, +        int maxChildren = Integer.MAX_VALUE;, +                    scoreMode = parseScoreMode(parser.text());, +        query = joinUtilHelper(parentType, parentChildIndexFieldData, parentDocMapper.typeFilter(), scoreMode, innerQuery, minChildren, maxChildren);, +    public static Query joinUtilHelper(String parentType, ParentChildIndexFieldData parentChildIndexFieldData, Query toQuery, ScoreMode scoreMode, Query innerQuery, int minChildren, int maxChildren) throws IOException {, +    public static ScoreMode parseScoreMode(String scoreModeString) {, +        if ("none".equals(scoreModeString)) {, +            return ScoreMode.None;, +        } else if ("min".equals(scoreModeString)) {, +            return ScoreMode.Min;, +        } else if ("max".equals(scoreModeString)) {, +            return ScoreMode.Max;, +        } else if ("avg".equals(scoreModeString)) {, +            return ScoreMode.Avg;, +        } else if ("total".equals(scoreModeString)) {, +            return ScoreMode.Total;, +        }, +        throw new IllegalArgumentException("No score mode for child query [" + scoreModeString + "] found");, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java, +    private String scoreMode;, +    public HasParentQueryBuilder scoreMode(String scoreMode) {, +        this.scoreMode = scoreMode;, +        if (scoreMode != null) {, +            builder.field("score_mode", scoreMode);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java, +    private String scoreMode;, +    public HasChildQueryBuilder scoreMode(String scoreMode) {, +        this.scoreMode = scoreMode;, +        if (scoreMode != null) {, +            builder.field("score_mode", scoreMode);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryParser.java, +        ScoreMode scoreMode = ScoreMode.None;, +        int maxChildren = Integer.MAX_VALUE;, +                    scoreMode = parseScoreMode(parser.text());, +        query = joinUtilHelper(parentType, parentChildIndexFieldData, parentDocMapper.typeFilter(), scoreMode, innerQuery, minChildren, maxChildren);, +    public static Query joinUtilHelper(String parentType, ParentChildIndexFieldData parentChildIndexFieldData, Query toQuery, ScoreMode scoreMode, Query innerQuery, int minChildren, int maxChildren) throws IOException {, +    public static ScoreMode parseScoreMode(String scoreModeString) {, +        if ("none".equals(scoreModeString)) {, +            return ScoreMode.None;, +        } else if ("min".equals(scoreModeString)) {, +            return ScoreMode.Min;, +        } else if ("max".equals(scoreModeString)) {, +            return ScoreMode.Max;, +        } else if ("avg".equals(scoreModeString)) {, +            return ScoreMode.Avg;, +        } else if ("total".equals(scoreModeString)) {, +            return ScoreMode.Total;, +        }, +        throw new IllegalArgumentException("No score mode for child query [" + scoreModeString + "] found");, +    }, +, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java, +    private String scoreMode;, +    public HasParentQueryBuilder scoreMode(String scoreMode) {, +        this.scoreMode = scoreMode;, +        if (scoreMode != null) {, +            builder.field("score_mode", scoreMode);, +++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryParser.java]