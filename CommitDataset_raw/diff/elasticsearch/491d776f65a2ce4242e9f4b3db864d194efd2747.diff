[+++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater<?>> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater<?> settingUpdater : settingUpdaters) {, +            for (SettingUpdater<?> settingUpdater : settingUpdaters) {, +     * @param <T> the type of the value of the setting, +    public Setting<?> get(String key) {, +        if (setting != null) {, +            return setting;, +        }, +        final Setting<?> setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater<?>> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater<?> settingUpdater : settingUpdaters) {, +            for (SettingUpdater<?> settingUpdater : settingUpdaters) {, +     * @param <T> the type of the value of the setting, +    public Setting<?> get(String key) {, +        if (setting != null) {, +            return setting;, +        }, +        final Setting<?> setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, + * A setting. Encapsulates typical stuff like default value, parsing, and scope., + * Some (dynamic=true) can by modified at run time using the API., +    /**, +     * Build a new updater with a noop validator., +     */, +    final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, ESLogger logger) {, +    /**, +     * Build the updater responsible for validating new values, logging the new, +     * value, and eventually setting the value where it belongs., +     */, +    AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, ESLogger logger, Consumer<T> validator) {, +            @Override, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +    private final List<SettingUpdater<?>> settingUpdaters = new ArrayList<>();, +        for (SettingUpdater<?> settingUpdater : settingUpdaters) {, +            for (SettingUpdater<?> settingUpdater : settingUpdaters) {, +     * @param <T> the type of the value of the setting, +    public Setting<?> get(String key) {, +        if (setting != null) {, +            return setting;, +        }, +        final Setting<?> setting = get(key);, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, + * A setting. Encapsulates typical stuff like default value, parsing, and scope., + * Some (dynamic=true) can by modified at run time using the API., +    /**, +     * Build a new updater with a noop validator., +     */, +    final AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, ESLogger logger) {, +    /**, +     * Build the updater responsible for validating new values, logging the new, +     * value, and eventually setting the value where it belongs., +     */, +    AbstractScopedSettings.SettingUpdater<T> newUpdater(Consumer<T> consumer, ESLogger logger, Consumer<T> validator) {, +            @Override, +++ b/core/src/test/java/org/elasticsearch/common/settings/SettingTests.java, +        ClusterSettings.SettingUpdater<ByteSizeValue> settingUpdater = byteSizeValueSetting.newUpdater(value::set, logger);, +        ClusterSettings.SettingUpdater<Boolean> settingUpdater = booleanSetting.newUpdater(atomicBoolean::set, logger);, +        ClusterSettings.SettingUpdater<Boolean> settingUpdater = booleanSetting.newUpdater(ab1::set, logger);, +        ClusterSettings.SettingUpdater<ComplexType> settingUpdater = setting.newUpdater(ref::set, logger);, +        ClusterSettings.SettingUpdater<Settings> settingUpdater = setting.newUpdater(ref::set, logger);, +        ClusterSettings.SettingUpdater<Settings> predicateSettingUpdater = setting.newUpdater(ref::set, logger,(s) -> assertFalse(true));, +        AbstractScopedSettings.SettingUpdater<List<String>> settingUpdater = listSetting.newUpdater(ref::set, logger);]