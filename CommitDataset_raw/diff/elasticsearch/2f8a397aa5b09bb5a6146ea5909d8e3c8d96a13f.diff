[+++ b/src/test/java/org/elasticsearch/test/integration/indexlifecycle/IndexLifecycleActionTests.java, +import static org.apache.lucene.util.LuceneTestCase.Slow;, +import static org.elasticsearch.cluster.routing.ShardRoutingState.*;, +    @Slow, +        String node1 = clusterService1.state().nodes().localNodeId();, +, +        wipeIndices(client());, +        ClusterState clusterState = client().admin().cluster().prepareState().get().getState();, +        RoutingNode routingNodeEntry1 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node1);, +        String node2 = clusterService2.state().nodes().localNodeId();, +        // first wait for 2 nodes in the cluster, +        // explicitly call reroute, so shards will get relocated to the new node (we delay it in ES in case other nodes join), +        client("server1").admin().cluster().prepareReroute().execute().actionGet();, +        clusterHealth = client("server1").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("2").waitForRelocatingShards(0)).actionGet();, +        assertThat(clusterHealth.isTimedOut(), equalTo(false));, +        assertThat(clusterHealth.getStatus(), equalTo(ClusterHealthStatus.GREEN));, +        assertThat(clusterHealth.getNumberOfDataNodes(), equalTo(2));, +        assertThat(clusterHealth.getInitializingShards(), equalTo(0));, +        assertThat(clusterHealth.getUnassignedShards(), equalTo(0));, +        assertThat(clusterHealth.getRelocatingShards(), equalTo(0));, +        assertThat(clusterHealth.getActiveShards(), equalTo(22));, +        assertThat(clusterHealth.getActivePrimaryShards(), equalTo(11));, +, +, +        clusterState = client().admin().cluster().prepareState().get().getState();, +        routingNodeEntry1 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node1);, +        assertThat(routingNodeEntry1.numberOfShardsWithState(RELOCATING), equalTo(0));, +        assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED), equalTo(11));, +        RoutingNode routingNodeEntry2 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node2);, +        assertThat(routingNodeEntry2.numberOfShardsWithState(INITIALIZING), equalTo(0));, +        String node3 = clusterService3.state().nodes().localNodeId();, +        clusterHealth = client("server1").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("3")).actionGet();, +        clusterState = client().admin().cluster().prepareState().get().getState();, +        routingNodeEntry1 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node1);, +        routingNodeEntry2 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node2);, +        RoutingNode routingNodeEntry3 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node3);, +        assertThat(routingNodeEntry1.numberOfShardsWithState(RELOCATING), equalTo(0));, +        assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED), anyOf(equalTo(7), equalTo(8)));, +, +        assertThat(routingNodeEntry2.numberOfShardsWithState(RELOCATING), equalTo(0));, +        assertThat(routingNodeEntry2.numberOfShardsWithState(STARTED), anyOf(equalTo(7), equalTo(8)));, +, +        assertThat(routingNodeEntry3.numberOfShardsWithState(INITIALIZING), equalTo(0));, +        assertThat(routingNodeEntry3.numberOfShardsWithState(STARTED), equalTo(7));, +, +, +, +        clusterHealth = client("server2").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("2")).actionGet();, +, +        client().admin().cluster().prepareReroute().get();, +, +        clusterHealth = client("server2").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForRelocatingShards(0).waitForNodes("2")).actionGet();, +        assertThat(clusterHealth.isTimedOut(), equalTo(false));, +        assertThat(clusterHealth.getStatus(), equalTo(ClusterHealthStatus.GREEN));, +        clusterState = client().admin().cluster().prepareState().get().getState();, +        routingNodeEntry2 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node2);, +        routingNodeEntry3 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node3);, +        assertThat(routingNodeEntry2.numberOfShardsWithState(RELOCATING), equalTo(0));, +        assertThat(routingNodeEntry2.numberOfShardsWithState(STARTED), equalTo(11));, +, +        assertThat(routingNodeEntry3.numberOfShardsWithState(RELOCATING), equalTo(0));, +        assertThat(routingNodeEntry3.numberOfShardsWithState(STARTED), equalTo(11));, +, +, +, +        clusterState = client().admin().cluster().prepareState().get().getState();, +        routingNodeEntry2 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node2);, +        routingNodeEntry3 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node3);, +    @Slow, +        String node1 = clusterService1.state().nodes().localNodeId();, +, +        wipeIndices(client());, +        ClusterState clusterState = client().admin().cluster().prepareState().get().getState();, +        RoutingNode routingNodeEntry1 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node1);, +        ClusterService clusterService2 = ((InternalNode) node("server2")).injector().getInstance(ClusterService.class);, +        String node2 = clusterService2.state().nodes().localNodeId();, +        clusterHealth = client("server1").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("2")).actionGet();, +        clusterState = client().admin().cluster().prepareState().get().getState();, +        routingNodeEntry1 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node1);, +        assertThat(routingNodeEntry1.numberOfShardsWithState(RELOCATING), equalTo(0));, +        RoutingNode routingNodeEntry2 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node2);, +        assertThat(routingNodeEntry2.numberOfShardsWithState(INITIALIZING), equalTo(0));, +        String node3 = clusterService3.state().nodes().localNodeId();, +        clusterHealth = client("server1").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("3")).actionGet();, +        clusterState = client().admin().cluster().prepareState().get().getState();, +        routingNodeEntry1 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node1);, +        routingNodeEntry2 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node2);, +        RoutingNode routingNodeEntry3 = clusterState.readOnlyRoutingNodes().nodesToShards().get(node3);, +        assertThat(routingNodeEntry1.numberOfShardsWithState(RELOCATING), equalTo(0));, +        assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED), anyOf(equalTo(5), equalTo(4), equalTo(3)));, +, +        assertThat(routingNodeEntry2.numberOfShardsWithState(RELOCATING), equalTo(0));, +        assertThat(routingNodeEntry2.numberOfShardsWithState(STARTED), anyOf(equalTo(5), equalTo(4), equalTo(3)));, +, +        assertThat(routingNodeEntry3.numberOfShardsWithState(INITIALIZING), equalTo(0));, +        assertThat(routingNodeEntry3.numberOfShardsWithState(STARTED), equalTo(3));, +, +, +        clusterHealth = client("server3").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("2")).actionGet();, +        logger.info("Done Cluster Health, status " + clusterHealth.getStatus());]