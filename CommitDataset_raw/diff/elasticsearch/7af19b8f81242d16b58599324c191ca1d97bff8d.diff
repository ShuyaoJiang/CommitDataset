[+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import org.apache.http.HttpStatus;, +import org.elasticsearch.common.CheckedRunnable;, +, +import java.util.function.Predicate;, +     * Wait for outstanding tasks to complete. The specified admin client is used to check the outstanding tasks and this is done using, +     * {@link ESTestCase#assertBusy(CheckedRunnable)} to give a chance to any outstanding tasks to complete., +     *, +     * @param adminClient the admin client, +     * @throws Exception if an exception is thrown while checking the outstanding tasks, +     */, +    public static void waitForPendingTasks(final RestClient adminClient) throws Exception {, +        waitForPendingTasks(adminClient, taskName -> false);, +    }, +, +    /**, +     * Wait for outstanding tasks to complete. The specified admin client is used to check the outstanding tasks and this is done using, +     * {@link ESTestCase#assertBusy(CheckedRunnable)} to give a chance to any outstanding tasks to complete. The specified filter is used, +     * to filter out outstanding tasks that are expected to be there., +     *, +     * @param adminClient the admin client, +     * @param taskFilter  predicate used to filter tasks that are expected to be there, +     * @throws Exception if an exception is thrown while checking the outstanding tasks, +     */, +    public static void waitForPendingTasks(final RestClient adminClient, final Predicate<String> taskFilter) throws Exception {, +        assertBusy(() -> {, +            try {, +                final Request request = new Request("GET", "/_cat/tasks");, +                request.addParameter("detailed", "true");, +                final Response response = adminClient.performRequest(request);, +                /*, +                 * Check to see if there are outstanding tasks; we exclude the list task itself, and any expected outstanding tasks using, +                 * the specified task filter., +                 */, +                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {, +                    try (BufferedReader responseReader = new BufferedReader(, +                            new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {, +                        int activeTasks = 0;, +                        String line;, +                        final StringBuilder tasksListString = new StringBuilder();, +                        while ((line = responseReader.readLine()) != null) {, +                            final String taskName = line.split("\\s+")[0];, +                            if (taskName.startsWith(ListTasksAction.NAME) || taskFilter.test(taskName)) {, +                                continue;, +                            }, +                            activeTasks++;, +                            tasksListString.append(line);, +                            tasksListString.append('\n');, +                        }, +                        assertEquals(activeTasks + " active tasks found:\n" + tasksListString, 0, activeTasks);, +                    }, +                }, +            } catch (final IOException e) {, +                throw new AssertionError("error getting active tasks list", e);, +            }, +        });, +    }, +, +    /**, +        waitForPendingTasks(adminClient(), taskName -> taskName.startsWith("xpack/rollup/job") == false);, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import org.apache.http.HttpStatus;, +import org.elasticsearch.common.CheckedRunnable;, +, +import java.util.function.Predicate;, +     * Wait for outstanding tasks to complete. The specified admin client is used to check the outstanding tasks and this is done using, +     * {@link ESTestCase#assertBusy(CheckedRunnable)} to give a chance to any outstanding tasks to complete., +     *, +     * @param adminClient the admin client, +     * @throws Exception if an exception is thrown while checking the outstanding tasks, +     */, +    public static void waitForPendingTasks(final RestClient adminClient) throws Exception {, +        waitForPendingTasks(adminClient, taskName -> false);, +    }, +, +    /**, +     * Wait for outstanding tasks to complete. The specified admin client is used to check the outstanding tasks and this is done using, +     * {@link ESTestCase#assertBusy(CheckedRunnable)} to give a chance to any outstanding tasks to complete. The specified filter is used, +     * to filter out outstanding tasks that are expected to be there., +     *, +     * @param adminClient the admin client, +     * @param taskFilter  predicate used to filter tasks that are expected to be there, +     * @throws Exception if an exception is thrown while checking the outstanding tasks, +     */, +    public static void waitForPendingTasks(final RestClient adminClient, final Predicate<String> taskFilter) throws Exception {, +        assertBusy(() -> {, +            try {, +                final Request request = new Request("GET", "/_cat/tasks");, +                request.addParameter("detailed", "true");, +                final Response response = adminClient.performRequest(request);, +                /*, +                 * Check to see if there are outstanding tasks; we exclude the list task itself, and any expected outstanding tasks using, +                 * the specified task filter., +                 */, +                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {, +                    try (BufferedReader responseReader = new BufferedReader(, +                            new InputStreamReader(response.getEntity().getContent(), StandardCharsets.UTF_8))) {, +                        int activeTasks = 0;, +                        String line;, +                        final StringBuilder tasksListString = new StringBuilder();]