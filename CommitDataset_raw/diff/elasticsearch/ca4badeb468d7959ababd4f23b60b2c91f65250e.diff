[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateJobStateAction;, +                new ActionHandler<>(UpdateJobStateAction.INSTANCE, UpdateJobStateAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateJobStateAction;, +                new ActionHandler<>(UpdateJobStateAction.INSTANCE, UpdateJobStateAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobState;, +import org.elasticsearch.xpack.ml.utils.JobStateObserver;, +        private final JobStateObserver jobStateObserver;, +            this.jobStateObserver = new JobStateObserver(threadPool, clusterService);, +                                jobStateObserver.waitForState(request.jobId, request.closeTimeout, JobState.CLOSED,, +            if (allocation.getState() != JobState.OPENED) {, +                throw new ElasticsearchStatusException("job not opened, expected job state [{}], but got [{}]",, +                        RestStatus.CONFLICT, JobState.OPENED, allocation.getState());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateJobStateAction;, +                new ActionHandler<>(UpdateJobStateAction.INSTANCE, UpdateJobStateAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobState;, +import org.elasticsearch.xpack.ml.utils.JobStateObserver;, +        private final JobStateObserver jobStateObserver;, +            this.jobStateObserver = new JobStateObserver(threadPool, clusterService);, +                                jobStateObserver.waitForState(request.jobId, request.closeTimeout, JobState.CLOSED,, +            if (allocation.getState() != JobState.OPENED) {, +                throw new ElasticsearchStatusException("job not opened, expected job state [{}], but got [{}]",, +                        RestStatus.CONFLICT, JobState.OPENED, allocation.getState());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/GetDatafeedsStatsAction.java, +import org.elasticsearch.xpack.ml.datafeed.DatafeedState;, +    private static final String STATE = "state";, +            private final DatafeedState datafeedState;, +            DatafeedStats(String datafeedId, DatafeedState datafeedState) {, +                this.datafeedState = Objects.requireNonNull(datafeedState);, +                datafeedState = DatafeedState.fromStream(in);, +            public DatafeedState getDatafeedState() {, +                return datafeedState;, +                builder.field(STATE, datafeedState);, +                datafeedState.writeTo(out);, +                return Objects.hash(datafeedId, datafeedState);, +                return Objects.equals(datafeedId, other.datafeedId) && Objects.equals(this.datafeedState, other.datafeedState);, +            Map<String, DatafeedState> states = new HashMap<>();, +                    states.put(storedRequest.getDatafeedId(), DatafeedState.STARTED);, +                    DatafeedState datafeedState = states.getOrDefault(datafeed.getId(), DatafeedState.STOPPED);, +                    stats.add(new Response.DatafeedStats(datafeed.getId(), datafeedState));, +                DatafeedState datafeedState = states.getOrDefault(datafeed.getId(), DatafeedState.STOPPED);, +                stats.add(new Response.DatafeedStats(datafeed.getId(), datafeedState));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateJobStateAction;, +                new ActionHandler<>(UpdateJobStateAction.INSTANCE, UpdateJobStateAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobState;, +import org.elasticsearch.xpack.ml.utils.JobStateObserver;, +        private final JobStateObserver jobStateObserver;, +            this.jobStateObserver = new JobStateObserver(threadPool, clusterService);, +                                jobStateObserver.waitForState(request.jobId, request.closeTimeout, JobState.CLOSED,, +            if (allocation.getState() != JobState.OPENED) {, +                throw new ElasticsearchStatusException("job not opened, expected job state [{}], but got [{}]",, +                        RestStatus.CONFLICT, JobState.OPENED, allocation.getState());, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/GetDatafeedsStatsAction.java, +import org.elasticsearch.xpack.ml.datafeed.DatafeedState;, +    private static final String STATE = "state";, +            private final DatafeedState datafeedState;, +            DatafeedStats(String datafeedId, DatafeedState datafeedState) {, +                this.datafeedState = Objects.requireNonNull(datafeedState);, +                datafeedState = DatafeedState.fromStream(in);, +            public DatafeedState getDatafeedState() {, +                return datafeedState;, +                builder.field(STATE, datafeedState);, +                datafeedState.writeTo(out);, +                return Objects.hash(datafeedId, datafeedState);, +                return Objects.equals(datafeedId, other.datafeedId) && Objects.equals(this.datafeedState, other.datafeedState);, +            Map<String, DatafeedState> states = new HashMap<>();, +                    states.put(storedRequest.getDatafeedId(), DatafeedState.STARTED);, +                    DatafeedState datafeedState = states.getOrDefault(datafeed.getId(), DatafeedState.STOPPED);, +                    stats.add(new Response.DatafeedStats(datafeed.getId(), datafeedState));, +                DatafeedState datafeedState = states.getOrDefault(datafeed.getId(), DatafeedState.STOPPED);, +                stats.add(new Response.DatafeedStats(datafeed.getId(), datafeedState));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/GetJobsStatsAction.java, +import org.elasticsearch.xpack.ml.job.config.JobState;, +    private static final String STATE = "state";, +            private JobState state;, +            JobStats(String jobId, DataCounts dataCounts, @Nullable ModelSizeStats modelSizeStats, JobState state) {, +                this.state = Objects.requireNonNull(state);, +                state = JobState.fromStream(in);, +            public JobState getState() {, +                return state;, +                builder.field(STATE, state);, +                state.writeTo(out);, +                return Objects.hash(jobId, dataCounts, modelSizeStats, state);, +                        && Objects.equals(this.state, other.state);, +                JobState jobState = mlMetadata.getAllocations().get(request.jobId).getState();, +                Response.JobStats jobStats = new Response.JobStats(request.jobId, stats.get().v1(), stats.get().v2(), jobState);, +                    JobState jobState = mlMetadata.getAllocations().get(jobId).getState();, +                    jobStats.set(slot, new Response.JobStats(jobId, dataCounts, modelSizeStats, jobState));, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/MlPlugin.java, +import org.elasticsearch.xpack.ml.action.UpdateJobStateAction;, +                new ActionHandler<>(UpdateJobStateAction.INSTANCE, UpdateJobStateAction.TransportAction.class),, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/ml/action/CloseJobAction.java, +import org.elasticsearch.xpack.ml.job.config.JobState;, +import org.elasticsearch.xpack.ml.utils.JobStateObserver;]