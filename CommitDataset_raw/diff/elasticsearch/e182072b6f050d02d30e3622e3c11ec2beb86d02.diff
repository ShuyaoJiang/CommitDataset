[+++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.forkOptions.memoryMaximumSize = "1g", +                // don't even think about passing args with -J-xxx, oracle will ask you to submit a bug report :), +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.forkOptions.memoryMaximumSize = "1g", +                // don't even think about passing args with -J-xxx, oracle will ask you to submit a bug report :), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/LoggedExec.groovy, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.gradle, +, +import org.gradle.api.GradleException, +import org.gradle.api.tasks.Exec, +, +/**, + * A wrapper around gradle's Exec task to capture output and log on error., + */, +class LoggedExec extends Exec {, +    LoggedExec() {, +        if (logger.isInfoEnabled() == false) {, +            standardOutput = new ByteArrayOutputStream(), +            errorOutput = standardOutput, +            ignoreExitValue = true, +            doLast {, +                if (execResult.exitValue != 0) {, +                    standardOutput.toString('UTF-8').eachLine { line -> logger.error(line) }, +                    throw new GradleException("Process '${executable} ${args.join(' ')}' finished with non-zero exit value ${execResult.exitValue}"), +                }, +            }, +        }, +    }, +}, +++ b/build.gradle, +  /* Sets up the dependencies that we build as part of this project but, +    register as thought they were external to resolve internally. We register, +    them as external dependencies so the build plugin that we use can be used, +    to build elasticsearch plugins outside of the elasticsearch source tree. */, +    "org.elasticsearch.distribution.tar:elasticsearch:${version}": ':distribution:tar',, +    "org.elasticsearch.distribution.rpm:elasticsearch:${version}": ':distribution:rpm',, +    "org.elasticsearch.distribution.deb:elasticsearch:${version}": ':distribution:deb',, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +                options.forkOptions.memoryMaximumSize = "1g", +                // don't even think about passing args with -J-xxx, oracle will ask you to submit a bug report :), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/LoggedExec.groovy, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the]