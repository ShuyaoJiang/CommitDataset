[+++ b/core/src/main/java/org/elasticsearch/search/builder/NewSearchSourceBuilder.java, +import java.util.Arrays;, +    public static final NewSearchSourceBuilder PROTOTYPE = new NewSearchSourceBuilder();, +, +        builder.startObject();, +        builder.endObject();, +        builder.startObject();, +        builder.endObject();, +        builder.startObject();, +        highlightBuilder.innerXContent(builder, EMPTY_PARAMS);, +        builder.endObject();, +        builder.startObject();, +        innerHitsBuilder.innerXContent(builder, EMPTY_PARAMS);, +        builder.endObject();, +        builder.startObject();, +        builder.endObject();, +        builder.startObject();, +        builder.endObject();, +    public List<String> fields() {, +        if ((token = parser.nextToken()) != XContentParser.Token.START_OBJECT) {, +            throw new QueryParsingException(context, "Expected [" + XContentParser.Token.START_OBJECT + "] but found [" + token + "]",, +                    parser.getTokenLocation());, +        }, +                } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {, +                    FetchSourceContext fetchSourceContext = FetchSourceContext.parse(parser, context);, +                    builder.fetchSourceContext = fetchSourceContext;, +                } else if (context.parseFieldMatcher().match(currentFieldName, _SOURCE_FIELD)) {, +                    FetchSourceContext fetchSourceContext = FetchSourceContext.parse(parser, context);, +                    builder.fetchSourceContext = fetchSourceContext;, +                        token = parser.nextToken();, +                                } else if (token == XContentParser.Token.START_OBJECT) {, +                                    if (context.parseFieldMatcher().match(currentFieldName, SCRIPT_FIELD)) {, +                                        scriptFields, +                                                .add(new ScriptField(scriptFieldName, Script.parse(parser, context.parseFieldMatcher())));, +                                    } else {, +                                        throw new QueryParsingException(context, "Unknown key for a " + token + " in [" + currentFieldName, +                                                + "].", parser.getTokenLocation());, +                                    }, +                            xContentBuilder.startObject();, +                            xContentBuilder.endObject();, +                    builder.aggregations = aggregations;, +            } else {, +                throw new QueryParsingException(context, "Unknown key for a " + token + " in [" + currentFieldName + "].",, +                        parser.getTokenLocation());, +            }, +                builder.startArray(FIELDS_FIELD.getPreferredName());, +                for (String fieldName : fieldNames) {, +                    builder.value(fieldName);, +                }, +                builder.endArray();, +            builder.startArray(FIELDDATA_FIELDS_FIELD.getPreferredName());, +            for (String fieldDataField : fieldDataFields) {, +                builder.value(fieldDataField);, +            }, +            builder.endArray();, +                parser.nextToken();, +, +        @Override, +        public int hashCode() {, +            return Objects.hash(fieldName, script);, +        }, +, +        @Override, +        public boolean equals(Object obj) {, +            if (obj == null) {, +                return false;, +            }, +            if (getClass() != obj.getClass()) {, +                return false;, +            }, +            ScriptField other = (ScriptField) obj;, +            return Objects.equals(fieldName, other.fieldName) && Objects.equals(script, other.script);, +        }, +        if (in.readBoolean()) {, +        }, +        builder.explain = in.readOptionalBoolean();, +        builder.timeoutInMillis = in.readLong();, +        builder.version = in.readOptionalBoolean();, +        boolean hasDefaultRescoreWindowSize = defaultRescoreWindowSize != null;, +        out.writeBoolean(hasDefaultRescoreWindowSize);, +        if (hasDefaultRescoreWindowSize) {, +        }, +        out.writeOptionalBoolean(explain);, +            out.writeQuery(postQueryBuilder);, +            out.writeQuery(queryBuilder);, +        out.writeOptionalBoolean(version);, +                size, sorts, Arrays.hashCode(stats), suggestBuilder, terminateAfter, timeoutInMillis, trackScores, version);, +        if (obj == null) {, +            return false;, +        }, +++ b/core/src/main/java/org/elasticsearch/search/builder/NewSearchSourceBuilder.java, +import java.util.Arrays;, +    public static final NewSearchSourceBuilder PROTOTYPE = new NewSearchSourceBuilder();, +, +        builder.startObject();, +        builder.endObject();, +        builder.startObject();, +        builder.endObject();, +        builder.startObject();, +        highlightBuilder.innerXContent(builder, EMPTY_PARAMS);]