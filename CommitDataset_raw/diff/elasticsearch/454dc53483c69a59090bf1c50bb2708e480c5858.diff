[+++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +     *, +     * @param needsHashes if <code>true</code> the implementation will use pre-build hashes if, +     *                    {@link org.elasticsearch.index.fielddata.BytesValues#currentValueHash()} is used. if no hashes, +     *                    are used <code>false</code> should be passed instead., +     *, +    BytesValues getBytesValues(boolean needsHashes);, +         * @param needsHashes, +        BytesValues.WithOrdinals getBytesValues(boolean needsHashes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +     *, +     * @param needsHashes if <code>true</code> the implementation will use pre-build hashes if, +     *                    {@link org.elasticsearch.index.fielddata.BytesValues#currentValueHash()} is used. if no hashes, +     *                    are used <code>false</code> should be passed instead., +     *, +    BytesValues getBytesValues(boolean needsHashes);, +         * @param needsHashes, +        BytesValues.WithOrdinals getBytesValues(boolean needsHashes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +     *, +     * @param needsHashes if <code>true</code> the implementation will use pre-build hashes if, +     *                    {@link org.elasticsearch.index.fielddata.BytesValues#currentValueHash()} is used. if no hashes, +     *                    are used <code>false</code> should be passed instead., +     *, +    BytesValues getBytesValues(boolean needsHashes);, +         * @param needsHashes, +        BytesValues.WithOrdinals getBytesValues(boolean needsHashes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +        termsIndex = indexFieldData.load(context).getBytesValues(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +     *, +     * @param needsHashes if <code>true</code> the implementation will use pre-build hashes if, +     *                    {@link org.elasticsearch.index.fielddata.BytesValues#currentValueHash()} is used. if no hashes, +     *                    are used <code>false</code> should be passed instead., +     *, +    BytesValues getBytesValues(boolean needsHashes);, +         * @param needsHashes, +        BytesValues.WithOrdinals getBytesValues(boolean needsHashes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +        termsIndex = indexFieldData.load(context).getBytesValues(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefValComparator.java, +        docTerms = indexFieldData.load(context).getBytesValues(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +     *, +     * @param needsHashes if <code>true</code> the implementation will use pre-build hashes if, +     *                    {@link org.elasticsearch.index.fielddata.BytesValues#currentValueHash()} is used. if no hashes, +     *                    are used <code>false</code> should be passed instead., +     *, +    BytesValues getBytesValues(boolean needsHashes);, +         * @param needsHashes, +        BytesValues.WithOrdinals getBytesValues(boolean needsHashes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +        termsIndex = indexFieldData.load(context).getBytesValues(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefValComparator.java, +        docTerms = indexFieldData.load(context).getBytesValues(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/BinaryDVAtomicFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +        // if you want hashes to be cached, you should rather store them on disk alongside the values rather than loading them into memory, +        // here - not supported for now, and probably not useful since this field data only applies to _id and _uid?, +        return new ScriptDocValues.Strings(getBytesValues(false));, +++ b/src/main/java/org/elasticsearch/index/fielddata/AbstractAtomicNumericFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicFieldData.java, +     *, +     * @param needsHashes if <code>true</code> the implementation will use pre-build hashes if, +     *                    {@link org.elasticsearch.index.fielddata.BytesValues#currentValueHash()} is used. if no hashes, +     *                    are used <code>false</code> should be passed instead., +     *, +    BytesValues getBytesValues(boolean needsHashes);, +         * @param needsHashes, +        BytesValues.WithOrdinals getBytesValues(boolean needsHashes);, +++ b/src/main/java/org/elasticsearch/index/fielddata/AtomicGeoPointFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefOrdValComparator.java, +        termsIndex = indexFieldData.load(context).getBytesValues(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/BytesRefValComparator.java, +        docTerms = indexFieldData.load(context).getBytesValues(false);, +++ b/src/main/java/org/elasticsearch/index/fielddata/plain/BinaryDVAtomicFieldData.java, +    public BytesValues getBytesValues(boolean needsHashes) {, +        // if you want hashes to be cached, you should rather store them on disk alongside the values rather than loading them into memory]