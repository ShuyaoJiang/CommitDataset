[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.EwmaModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltLinearModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltWintersModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.LinearModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;, +    private final ParseFieldRegistry<MovAvgModel.AbstractModelParser> movingAverageModelParserRegistry = new ParseFieldRegistry<>(, +            "moving_avg_model");, +        registerBuiltinMovingAverageModels();, +     * @param parser reads the heuristic from an XContentParser, +    /**, +     * Register a {@link MovAvgModel}., +     *, +     * @param modelName the name(s) at which the model is parsed and streamed. The {@link ParseField#getPreferredName()} is the name under, +     *        which it is streamed. All named work for the parser., +     * @param reader reads the model from a stream, +     * @param parser reads the model from an XContentParser, +     */, +    public void registerMovingAverageModel(ParseField modelName, Writeable.Reader<MovAvgModel> reader,, +            MovAvgModel.AbstractModelParser parser) {, +        movingAverageModelParserRegistry.register(parser, modelName);, +        namedWriteableRegistry.register(MovAvgModel.class, modelName.getPreferredName(), reader);, +    }, +, +    /**, +     * The registry of {@link MovAvgModel}s., +     */, +    public ParseFieldRegistry<MovAvgModel.AbstractModelParser> getMovingAverageMdelParserRegistry() {, +        return movingAverageModelParserRegistry;, +                (n, c) -> MovAvgPipelineAggregatorBuilder.parse(movingAverageModelParserRegistry, n, c),, +    private void registerBuiltinMovingAverageModels() {, +        registerMovingAverageModel(SimpleModel.NAME_FIELD, SimpleModel::new, SimpleModel.PARSER);, +        registerMovingAverageModel(LinearModel.NAME_FIELD, LinearModel::new, LinearModel.PARSER);, +        registerMovingAverageModel(EwmaModel.NAME_FIELD, EwmaModel::new, EwmaModel.PARSER);, +        registerMovingAverageModel(HoltLinearModel.NAME_FIELD, HoltLinearModel::new, HoltLinearModel.PARSER);, +        registerMovingAverageModel(HoltWintersModel.NAME_FIELD, HoltWintersModel::new, HoltWintersModel.PARSER);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.EwmaModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltLinearModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltWintersModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.LinearModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;, +    private final ParseFieldRegistry<MovAvgModel.AbstractModelParser> movingAverageModelParserRegistry = new ParseFieldRegistry<>(, +            "moving_avg_model");, +        registerBuiltinMovingAverageModels();, +     * @param parser reads the heuristic from an XContentParser, +    /**, +     * Register a {@link MovAvgModel}., +     *, +     * @param modelName the name(s) at which the model is parsed and streamed. The {@link ParseField#getPreferredName()} is the name under, +     *        which it is streamed. All named work for the parser., +     * @param reader reads the model from a stream, +     * @param parser reads the model from an XContentParser, +     */, +    public void registerMovingAverageModel(ParseField modelName, Writeable.Reader<MovAvgModel> reader,, +            MovAvgModel.AbstractModelParser parser) {, +        movingAverageModelParserRegistry.register(parser, modelName);, +        namedWriteableRegistry.register(MovAvgModel.class, modelName.getPreferredName(), reader);, +    }, +, +    /**, +     * The registry of {@link MovAvgModel}s., +     */, +    public ParseFieldRegistry<MovAvgModel.AbstractModelParser> getMovingAverageMdelParserRegistry() {, +        return movingAverageModelParserRegistry;, +                (n, c) -> MovAvgPipelineAggregatorBuilder.parse(movingAverageModelParserRegistry, n, c),, +    private void registerBuiltinMovingAverageModels() {, +        registerMovingAverageModel(SimpleModel.NAME_FIELD, SimpleModel::new, SimpleModel.PARSER);, +        registerMovingAverageModel(LinearModel.NAME_FIELD, LinearModel::new, LinearModel.PARSER);, +        registerMovingAverageModel(EwmaModel.NAME_FIELD, EwmaModel::new, EwmaModel.PARSER);, +        registerMovingAverageModel(HoltLinearModel.NAME_FIELD, HoltLinearModel::new, HoltLinearModel.PARSER);, +        registerMovingAverageModel(HoltWintersModel.NAME_FIELD, HoltWintersModel::new, HoltWintersModel.PARSER);, +    }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgPipelineAggregator.java, +        model = in.readNamedWriteable(MovAvgModel.class);, +        out.writeNamedWriteable(model);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.EwmaModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltLinearModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.HoltWintersModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.LinearModel;, +import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;, +    private final ParseFieldRegistry<MovAvgModel.AbstractModelParser> movingAverageModelParserRegistry = new ParseFieldRegistry<>(, +            "moving_avg_model");, +        registerBuiltinMovingAverageModels();, +     * @param parser reads the heuristic from an XContentParser, +    /**, +     * Register a {@link MovAvgModel}., +     *, +     * @param modelName the name(s) at which the model is parsed and streamed. The {@link ParseField#getPreferredName()} is the name under, +     *        which it is streamed. All named work for the parser., +     * @param reader reads the model from a stream, +     * @param parser reads the model from an XContentParser, +     */, +    public void registerMovingAverageModel(ParseField modelName, Writeable.Reader<MovAvgModel> reader,, +            MovAvgModel.AbstractModelParser parser) {, +        movingAverageModelParserRegistry.register(parser, modelName);]