[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java, +        // A storage for errors that should only be thrown after advancing time, +, +                // When extraction problems are encountered, we do not want to advance time., +                // Instead, it is preferable to retry the given interval next time an extraction, +                // is triggered., +                throw new ExtractionProblemException(e);, +                    // When an analysis problem occurs, it means something catastrophic has, +                    // happened to the c++ process. We sent a batch of data to the c++ process, +                    // yet we do not know how many of those were processed. It is better to, +                    // advance time in order to avoid importing duplicate data., +        // We can now throw any stored error as we have updated time., +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJob.java, +        // A storage for errors that should only be thrown after advancing time, +, +                // When extraction problems are encountered, we do not want to advance time., +                // Instead, it is preferable to retry the given interval next time an extraction, +                // is triggered., +                throw new ExtractionProblemException(e);, +                    // When an analysis problem occurs, it means something catastrophic has, +                    // happened to the c++ process. We sent a batch of data to the c++ process, +                    // yet we do not know how many of those were processed. It is better to, +                    // advance time in order to avoid importing duplicate data., +        // We can now throw any stored error as we have updated time., +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobTests.java, +import static org.hamcrest.Matchers.is;, +    private ArgumentCaptor<FlushJobAction.Request> flushJobRequests;, +, +        flushJobRequests = ArgumentCaptor.forClass(FlushJobAction.Request.class);, +        when(client.execute(same(FlushJobAction.INSTANCE), flushJobRequests.capture())).thenReturn(flushJobFuture);, +        assertEquals(0L, startTimeCaptor.getAllValues().get(1).longValue());, +        assertThat(flushJobRequests.getAllValues().isEmpty(), is(true));]