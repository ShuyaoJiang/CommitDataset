[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                metaData.persistentSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +                metaData.transientSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                metaData.persistentSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +                metaData.transientSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        for (String key : normalizedSettings.keySet()) {, +                            "Can't update non dynamic settings [%s] for open indices %s", skippedSettings, openIndices));, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                metaData.persistentSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +                metaData.transientSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        for (String key : normalizedSettings.keySet()) {, +                            "Can't update non dynamic settings [%s] for open indices %s", skippedSettings, openIndices));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                metaData.persistentSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +                metaData.transientSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        for (String key : normalizedSettings.keySet()) {, +                            "Can't update non dynamic settings [%s] for open indices %s", skippedSettings, openIndices));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +    public static final Setting.AffixSetting<Level> LOG_LEVEL_SETTING =, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                metaData.persistentSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +                metaData.transientSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        for (String key : normalizedSettings.keySet()) {, +                            "Can't update non dynamic settings [%s] for open indices %s", skippedSettings, openIndices));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +    public static final Setting.AffixSetting<Level> LOG_LEVEL_SETTING =, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        ESLoggerFactory.LOG_LEVEL_SETTING.getAllConcreteSettings(settings), +            .filter(s -> s.getKey().equals(ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.getKey()) == false).forEach(s -> {, +            final Level level = s.get(settings);, +            Loggers.setLevel(ESLoggerFactory.getLogger(s.getKey().substring("logger.".length())), level);, +        });, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/settings/get/TransportGetSettingsAction.java, +            if (CollectionUtils.isEmpty(request.names()) == false) {, +                settings = settings.filter(k -> Regex.simpleMatch(request.names(), k));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java, +            indexMetaData.getSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java, +                metaData.persistentSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +                metaData.transientSettings().toXContent(builder, new MapParams(Collections.singletonMap("flat_settings", "true")));, +++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java, +        for (String key : normalizedSettings.keySet()) {, +                            "Can't update non dynamic settings [%s] for open indices %s", skippedSettings, openIndices));, +++ b/core/src/main/java/org/elasticsearch/cluster/node/DiscoveryNodeFilters.java, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +    public static final Setting.AffixSetting<Level> LOG_LEVEL_SETTING =, +++ b/core/src/main/java/org/elasticsearch/common/logging/LogConfigurator.java, +        ESLoggerFactory.LOG_LEVEL_SETTING.getAllConcreteSettings(settings), +            .filter(s -> s.getKey().equals(ESLoggerFactory.LOG_DEFAULT_LEVEL_SETTING.getKey()) == false).forEach(s -> {, +            final Level level = s.get(settings);, +            Loggers.setLevel(ESLoggerFactory.getLogger(s.getKey().substring("logger.".length())), level);, +        });, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        for (String key : toApply.keySet()) {, +            boolean isNull = toApply.get(key) == null;, +            if (isNull && (canRemove.test(key) || key.endsWith("*"))) {, +                toRemove.add(key);, +            } else if (get(key) == null) {, +                throw new IllegalArgumentException(type + " setting [" + key + "], not recognized");]