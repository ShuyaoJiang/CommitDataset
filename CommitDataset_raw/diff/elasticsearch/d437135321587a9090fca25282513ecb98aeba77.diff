[+++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdHigh, "%"), usage);, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdLow, "%"), usage);, +            logger.trace("Node [{}] has {}% free disk", node.nodeId(), freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], preventing allocation",, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], " +, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +            logger.warn("After allocating, node [{}] would have less than the required {} free disk threshold ({} free), preventing allocation",, +            return allocation.decision(Decision.NO, NAME, "after allocation less than required [%s%%] free disk on node, free: [%s%%]",, +                    freeDiskThresholdLow, freeSpaceAfterShard);, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdHigh, "%"), usage);, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdLow, "%"), usage);, +            logger.trace("Node [{}] has {}% free disk", node.nodeId(), freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], preventing allocation",, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], " +, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +            logger.warn("After allocating, node [{}] would have less than the required {} free disk threshold ({} free), preventing allocation",, +            return allocation.decision(Decision.NO, NAME, "after allocation less than required [%s%%] free disk on node, free: [%s%%]",, +                    freeDiskThresholdLow, freeSpaceAfterShard);, +++ b/src/main/java/org/elasticsearch/common/io/PathUtils.java, +            Path normalizedRoot = root.normalize();, +            Path normalizedPath = normalizedRoot.resolve(path).normalize();, +            if(normalizedPath.startsWith(normalizedRoot)) {, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdHigh, "%"), usage);, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdLow, "%"), usage);, +            logger.trace("Node [{}] has {}% free disk", node.nodeId(), freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], preventing allocation",, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], " +, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +            logger.warn("After allocating, node [{}] would have less than the required {} free disk threshold ({} free), preventing allocation",, +            return allocation.decision(Decision.NO, NAME, "after allocation less than required [%s%%] free disk on node, free: [%s%%]",, +                    freeDiskThresholdLow, freeSpaceAfterShard);, +++ b/src/main/java/org/elasticsearch/common/io/PathUtils.java, +            Path normalizedRoot = root.normalize();, +            Path normalizedPath = normalizedRoot.resolve(path).normalize();, +            if(normalizedPath.startsWith(normalizedRoot)) {, +++ b/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java, +++ b/src/main/java/org/elasticsearch/cluster/DiskUsage.java, +++ b/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDecider.java, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                logger.warn("high disk watermark [{} free] exceeded on {}, shards will be relocated away from this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdHigh, "%"), usage);, +                logger.info("low disk watermark [{} free] exceeded on {}, replicas will not be assigned to this node",, +                        Strings.format1Decimals(DiskThresholdDecider.this.freeDiskThresholdLow, "%"), usage);, +            logger.trace("Node [{}] has {}% free disk", node.nodeId(), freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], preventing allocation",, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +                    logger.debug("Less than the required {} free disk threshold ({} free) on node [{}], " +, +                            Strings.format1Decimals(freeDiskThresholdLow, "%"),, +                            Strings.format1Decimals(freeDiskPercentage, "%"), node.nodeId());, +                return allocation.decision(Decision.NO, NAME, "less than required [%s%%] free disk on node, free: [%s%%]",, +                        freeDiskThresholdLow, freeDiskPercentage);, +            logger.warn("After allocating, node [{}] would have less than the required {} free disk threshold ({} free), preventing allocation",, +            return allocation.decision(Decision.NO, NAME, "after allocation less than required [%s%%] free disk on node, free: [%s%%]",, +                    freeDiskThresholdLow, freeSpaceAfterShard);, +++ b/src/main/java/org/elasticsearch/common/io/PathUtils.java, +            Path normalizedRoot = root.normalize();]