[+++ b/server/src/main/java/org/elasticsearch/script/JodaCompatibleZonedDateTime.java, +import org.elasticsearch.common.time.DateUtils;, +        return new DateTime(dt.toInstant().toEpochMilli(), DateUtils.zoneIdToDateTimeZone(dt.getZone())).toString(format);, +        return new DateTime(dt.toInstant().toEpochMilli(), DateUtils.zoneIdToDateTimeZone(dt.getZone())).toString(format, locale);, +++ b/server/src/main/java/org/elasticsearch/script/JodaCompatibleZonedDateTime.java, +import org.elasticsearch.common.time.DateUtils;, +        return new DateTime(dt.toInstant().toEpochMilli(), DateUtils.zoneIdToDateTimeZone(dt.getZone())).toString(format);, +        return new DateTime(dt.toInstant().toEpochMilli(), DateUtils.zoneIdToDateTimeZone(dt.getZone())).toString(format, locale);, +++ b/server/src/test/java/org/elasticsearch/script/JodaCompatibleZonedDateTimeTests.java, +, +    public void testToStringWithLocaleAndZeroOffset() {, +        JodaCompatibleZonedDateTime dt = new JodaCompatibleZonedDateTime(Instant.EPOCH, ZoneOffset.ofTotalSeconds(0));, +        assertMethodDeprecation(() -> dt.toString("yyyy-MM-dd hh:mm", Locale.ROOT), "toString(String,Locale)", "a DateTimeFormatter");, +    }, +, +    public void testToStringAndZeroOffset() {, +        JodaCompatibleZonedDateTime dt = new JodaCompatibleZonedDateTime(Instant.EPOCH, ZoneOffset.ofTotalSeconds(0));, +        assertMethodDeprecation(() -> dt.toString("yyyy-MM-dd hh:mm"), "toString(String)", "a DateTimeFormatter");, +    }]