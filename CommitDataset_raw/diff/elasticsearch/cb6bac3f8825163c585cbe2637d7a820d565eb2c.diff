[+++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +    ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {, +        return reducedQueryPhase(queryResults, true, true, true);, +    ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,, +                                               boolean isScrollRequest, boolean trackTotalHits, boolean performFinalReduce) {, +        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest,, +            performFinalReduce);, +                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,, +                                                boolean performFinalReduce) {, +        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce);, +            firstResult.sortValueFormats(), numReducePhases, size, from, false);, +        private final boolean performFinalReduce;, +                                         boolean hasTopDocs, boolean hasAggs, boolean performFinalReduce) {, +            this.performFinalReduce = performFinalReduce;, +                numReducePhases, false, performFinalReduce);, +        final boolean finalReduce = request.getLocalClusterAlias() == null;, +                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs, finalReduce);, +                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits, finalReduce);, +++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java, +    ReducedQueryPhase reducedScrollQueryPhase(Collection<? extends SearchPhaseResult> queryResults) {, +        return reducedQueryPhase(queryResults, true, true, true);, +    ReducedQueryPhase reducedQueryPhase(Collection<? extends SearchPhaseResult> queryResults,, +                                               boolean isScrollRequest, boolean trackTotalHits, boolean performFinalReduce) {, +        return reducedQueryPhase(queryResults, null, new ArrayList<>(), new TopDocsStats(trackTotalHits), 0, isScrollRequest,, +            performFinalReduce);, +                                                TopDocsStats topDocsStats, int numReducePhases, boolean isScrollRequest,, +                                                boolean performFinalReduce) {, +        ReduceContext reduceContext = reduceContextFunction.apply(performFinalReduce);, +            firstResult.sortValueFormats(), numReducePhases, size, from, false);, +        private final boolean performFinalReduce;, +                                         boolean hasTopDocs, boolean hasAggs, boolean performFinalReduce) {, +            this.performFinalReduce = performFinalReduce;, +                numReducePhases, false, performFinalReduce);, +        final boolean finalReduce = request.getLocalClusterAlias() == null;, +                return new QueryPhaseResultConsumer(this, numShards, request.getBatchedReduceSize(), hasTopDocs, hasAggs, finalReduce);, +                return reducedQueryPhase(results.asList(), isScrollRequest, trackTotalHits, finalReduce);, +++ b/server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java, +import java.util.concurrent.CopyOnWriteArrayList;, +import static org.hamcrest.Matchers.greaterThanOrEqualTo;, +    private List<Boolean> reductions;, +        reductions = new CopyOnWriteArrayList<>();, +            (finalReduce) -> {, +                reductions.add(finalReduce);, +                return new InternalAggregation.ReduceContext(BigArrays.NON_RECYCLING_INSTANCE, null, finalReduce);, +            });, +                searchPhaseController.reducedQueryPhase(queryResults.asList(), false, trackTotalHits, true);, +        SearchRequest request = randomBoolean() ? new SearchRequest() : new SearchRequest("remote");, +        assertEquals(0, reductions.size());, +        InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax("test", 1.0D, DocValueFormat.RAW,, +        aggs = new InternalAggregations(Collections.singletonList(new InternalMax("test", 3.0D, DocValueFormat.RAW,, +        aggs = new InternalAggregations(Collections.singletonList(new InternalMax("test", 2.0D, DocValueFormat.RAW,, +        final int numTotalReducePhases;, +            assertEquals(1, reductions.size());, +            assertEquals(false, reductions.get(0));, +            numTotalReducePhases = 2;, +            assertEquals(0, reductions.size());, +            numTotalReducePhases = 1;, +        assertEquals(numTotalReducePhases, reductions.size());, +        assertFinalReduction(request);, +        SearchRequest request = randomBoolean() ? new SearchRequest() : new SearchRequest("remote");, +                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax("test", (double) number,, +        assertFinalReduction(request);, +        SearchRequest request = randomBoolean() ? new SearchRequest() : new SearchRequest("remote");, +            InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax("test", (double) number,, +        assertFinalReduction(request);, +        SearchRequest request = randomBoolean() ? new SearchRequest() : new SearchRequest("remote");, +        assertFinalReduction(request);, +    private void assertFinalReduction(SearchRequest searchRequest) {, +        assertThat(reductions.size(), greaterThanOrEqualTo(1));, +        //the last reduction step was the final one only if no cluster alias was provided with the search request, +        assertEquals(searchRequest.getLocalClusterAlias() == null, reductions.get(reductions.size() - 1));, +    }, +, +        SearchRequest request = randomBoolean() ? new SearchRequest() : new SearchRequest("remote");, +        assertFinalReduction(request);, +        SearchRequest request = randomBoolean() ? new SearchRequest() : new SearchRequest("remote");, +        assertFinalReduction(request);]