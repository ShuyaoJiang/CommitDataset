[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        add(indexingStats, true);, +    }, +, +    public void add(IndexingStats indexingStats, boolean includeTypes) {, +        if (includeTypes && indexingStats.typeStats != null && !indexingStats.typeStats.isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        add(indexingStats, true);, +    }, +, +    public void add(IndexingStats indexingStats, boolean includeTypes) {, +        if (includeTypes && indexingStats.typeStats != null && !indexingStats.typeStats.isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesService.java, +    /**, +     * Returns the node stats indices stats. The <tt>includePrevious</tt> flag controls, +     * if old shards stats will be aggregated as well (only for relevant stats, such as, +     * refresh and indexing, not for docs/store)., +     */, +    NodeIndicesStats stats(boolean includePrevious);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        add(indexingStats, true);, +    }, +, +    public void add(IndexingStats indexingStats, boolean includeTypes) {, +        if (includeTypes && indexingStats.typeStats != null && !indexingStats.typeStats.isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesService.java, +    /**, +     * Returns the node stats indices stats. The <tt>includePrevious</tt> flag controls, +     * if old shards stats will be aggregated as well (only for relevant stats, such as, +     * refresh and indexing, not for docs/store)., +     */, +    NodeIndicesStats stats(boolean includePrevious);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/InternalIndicesService.java, +import org.elasticsearch.index.shard.ShardId;, +    private final OldShardsStats oldShardsStats = new OldShardsStats();, +, +, +        this.indicesLifecycle.addListener(oldShardsStats);, +    @Override public NodeIndicesStats stats(boolean includePrevious) {, +, +        if (includePrevious) {, +            indexingStats.add(oldShardsStats.indexingStats);, +            mergeStats.add(oldShardsStats.mergeStats);, +            refreshStats.add(oldShardsStats.refreshStats);, +            flushStats.add(oldShardsStats.flushStats);, +        }, +, +, +    static class OldShardsStats extends IndicesLifecycle.Listener {, +, +        final IndexingStats indexingStats = new IndexingStats();, +        final MergeStats mergeStats = new MergeStats();, +        final RefreshStats refreshStats = new RefreshStats();, +        final FlushStats flushStats = new FlushStats();, +, +        @Override public synchronized void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard, boolean delete) {, +            if (indexShard != null) {, +                indexingStats.add(indexShard.indexingStats(), false);, +                mergeStats.add(indexShard.mergeStats());, +                refreshStats.add(indexShard.refreshStats());, +                flushStats.add(indexShard.flushStats());, +            }, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java, +        add(indexingStats, true);, +    }, +, +    public void add(IndexingStats indexingStats, boolean includeTypes) {, +        if (includeTypes && indexingStats.typeStats != null && !indexingStats.typeStats.isEmpty()) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/IndicesService.java, +    /**, +     * Returns the node stats indices stats. The <tt>includePrevious</tt> flag controls, +     * if old shards stats will be aggregated as well (only for relevant stats, such as, +     * refresh and indexing, not for docs/store)., +     */, +    NodeIndicesStats stats(boolean includePrevious);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/indices/InternalIndicesService.java, +import org.elasticsearch.index.shard.ShardId;, +    private final OldShardsStats oldShardsStats = new OldShardsStats();, +, +, +        this.indicesLifecycle.addListener(oldShardsStats);, +    @Override public NodeIndicesStats stats(boolean includePrevious) {, +, +        if (includePrevious) {, +            indexingStats.add(oldShardsStats.indexingStats);, +            mergeStats.add(oldShardsStats.mergeStats);, +            refreshStats.add(oldShardsStats.refreshStats);, +            flushStats.add(oldShardsStats.flushStats);, +        }, +, +, +    static class OldShardsStats extends IndicesLifecycle.Listener {, +, +        final IndexingStats indexingStats = new IndexingStats();, +        final MergeStats mergeStats = new MergeStats();, +        final RefreshStats refreshStats = new RefreshStats();, +        final FlushStats flushStats = new FlushStats();, +]