[+++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationDataExtractor.java, +        context.aggs.getAggregatorFactories().forEach(searchRequestBuilder::addAggregation);, +        context.aggs.getPipelineAggregatorFactories().forEach(searchRequestBuilder::addAggregation);, +    private List<? extends Histogram.Bucket> getHistogramBuckets(@Nullable Aggregations aggs) {, +                    + aggsAsList.stream().map(Aggregation::getName).collect(Collectors.toList()));, +++ b/plugin/src/main/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationDataExtractor.java, +        context.aggs.getAggregatorFactories().forEach(searchRequestBuilder::addAggregation);, +        context.aggs.getPipelineAggregatorFactories().forEach(searchRequestBuilder::addAggregation);, +    private List<? extends Histogram.Bucket> getHistogramBuckets(@Nullable Aggregations aggs) {, +                    + aggsAsList.stream().map(Aggregation::getName).collect(Collectors.toList()));, +++ b/plugin/src/test/java/org/elasticsearch/xpack/ml/datafeed/extractor/aggregation/AggregationDataExtractorTests.java, +            createHistogramBucket(2000L, 0, Collections.emptyList()),, +            histogramBuckets.add(createHistogramBucket(timestamp, 3, Collections.singletonList(createMax("time", timestamp))));, +        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, extractor::next);, +            histogramBuckets.add(createHistogramBucket(timestamp, 3, Collections.singletonList(createMax("time", timestamp))));, +        expectThrows(IOException.class, extractor::next);, +        IOException e = expectThrows(IOException.class, extractor::next);, +        IOException e = expectThrows(IOException.class, extractor::next);, +    @SuppressWarnings("unchecked"), +        when((List<Histogram.Bucket>)histogram.getBuckets()).thenReturn(histogramBuckets);, +        when(searchAggs.asList()).thenReturn(Collections.singletonList(histogram));]