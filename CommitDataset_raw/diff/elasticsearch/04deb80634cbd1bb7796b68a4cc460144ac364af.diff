[+++ b/src/main/java/org/elasticsearch/index/engine/IndexEngineModule.java, +        public static final String INDEX_ENGINE_TYPE = "index.index_engine.type";, +        return ImmutableList.of(createModule(settings.getAsClass(EngineSettings.INDEX_ENGINE_TYPE, EngineSettings.DEFAULT_INDEX_ENGINE, "org.elasticsearch.index.engine.", "IndexEngineModule"), settings));, +++ b/src/main/java/org/elasticsearch/index/engine/IndexEngineModule.java, +        public static final String INDEX_ENGINE_TYPE = "index.index_engine.type";, +        return ImmutableList.of(createModule(settings.getAsClass(EngineSettings.INDEX_ENGINE_TYPE, EngineSettings.DEFAULT_INDEX_ENGINE, "org.elasticsearch.index.engine.", "IndexEngineModule"), settings));, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    public final Searcher searcher() throws EngineException {, +            return newSearcher(searcher, manager);, +    protected Searcher newSearcher(IndexSearcher searcher, SearcherManager manager) {, +        return new RobinSearcher(searcher, manager);, +    }, +, +++ b/src/main/java/org/elasticsearch/index/engine/IndexEngineModule.java, +        public static final String INDEX_ENGINE_TYPE = "index.index_engine.type";, +        return ImmutableList.of(createModule(settings.getAsClass(EngineSettings.INDEX_ENGINE_TYPE, EngineSettings.DEFAULT_INDEX_ENGINE, "org.elasticsearch.index.engine.", "IndexEngineModule"), settings));, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    public final Searcher searcher() throws EngineException {, +            return newSearcher(searcher, manager);, +    protected Searcher newSearcher(IndexSearcher searcher, SearcherManager manager) {, +        return new RobinSearcher(searcher, manager);, +    }, +, +++ b/src/test/java/org/apache/lucene/util/AbstractRandomizedTest.java, +import com.carrotsearch.randomizedtesting.JUnit4MethodProvider;, +import com.carrotsearch.randomizedtesting.LifecycleScope;, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +++ b/src/main/java/org/elasticsearch/index/engine/IndexEngineModule.java, +        public static final String INDEX_ENGINE_TYPE = "index.index_engine.type";, +        return ImmutableList.of(createModule(settings.getAsClass(EngineSettings.INDEX_ENGINE_TYPE, EngineSettings.DEFAULT_INDEX_ENGINE, "org.elasticsearch.index.engine.", "IndexEngineModule"), settings));, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    public final Searcher searcher() throws EngineException {, +            return newSearcher(searcher, manager);, +    protected Searcher newSearcher(IndexSearcher searcher, SearcherManager manager) {, +        return new RobinSearcher(searcher, manager);, +    }, +, +++ b/src/test/java/org/apache/lucene/util/AbstractRandomizedTest.java, +import com.carrotsearch.randomizedtesting.JUnit4MethodProvider;, +import com.carrotsearch.randomizedtesting.LifecycleScope;, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +        randomIndexTemplate();, +        ensureAllSearchersClosed();, +    private static void randomIndexTemplate() {, +        client().admin().indices().preparePutTemplate("random_index_template"), +        .setTemplate("*"), +        .setOrder(0), +        .setSettings(ImmutableSettings.builder(), +                .put(INDEX_SEED_SETTING, getRandom().nextLong())), +                .execute().actionGet();, +    }, +, +++ b/src/main/java/org/elasticsearch/index/engine/IndexEngineModule.java, +        public static final String INDEX_ENGINE_TYPE = "index.index_engine.type";, +        return ImmutableList.of(createModule(settings.getAsClass(EngineSettings.INDEX_ENGINE_TYPE, EngineSettings.DEFAULT_INDEX_ENGINE, "org.elasticsearch.index.engine.", "IndexEngineModule"), settings));, +++ b/src/main/java/org/elasticsearch/index/engine/robin/RobinEngine.java, +    public final Searcher searcher() throws EngineException {, +            return newSearcher(searcher, manager);, +    protected Searcher newSearcher(IndexSearcher searcher, SearcherManager manager) {, +        return new RobinSearcher(searcher, manager);, +    }, +, +++ b/src/test/java/org/apache/lucene/util/AbstractRandomizedTest.java, +import com.carrotsearch.randomizedtesting.JUnit4MethodProvider;, +import com.carrotsearch.randomizedtesting.LifecycleScope;, +import com.carrotsearch.randomizedtesting.RandomizedContext;, +import com.carrotsearch.randomizedtesting.RandomizedTest;, +++ b/src/test/java/org/elasticsearch/AbstractSharedClusterTest.java, +        randomIndexTemplate();, +        ensureAllSearchersClosed();, +    private static void randomIndexTemplate() {, +        client().admin().indices().preparePutTemplate("random_index_template"), +        .setTemplate("*"), +        .setOrder(0), +        .setSettings(ImmutableSettings.builder(), +                .put(INDEX_SEED_SETTING, getRandom().nextLong())), +                .execute().actionGet();, +    }, +, +++ b/src/test/java/org/elasticsearch/ElasticsearchTestCase.java, +import org.elasticsearch.test.engine.MockRobinEngine;, +import java.util.Map.Entry;, +    public static final String INDEX_SEED_SETTING = "index.tests.seed";, +    public static void ensureAllSearchersClosed() {, +        if (MockRobinEngine.INFLIGHT_ENGINE_SEARCHERS.isEmpty()) {, +            return;, +        }, +        try {, +            RuntimeException ex = null;, +            StringBuilder builder = new StringBuilder("Unclosed Searchers instance for shards: [");, +            for (Entry<MockRobinEngine.AssertingSearcher, RuntimeException> entry : MockRobinEngine.INFLIGHT_ENGINE_SEARCHERS.entrySet()) {, +                ex = entry.getValue();, +                builder.append(entry.getKey().shardId()).append(",");, +            }, +            builder.append("]");, +            throw new RuntimeException(builder.toString(), ex);, +        } finally {]