[+++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueMillis(delay));, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueMillis(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +`storage_class`::, +, +    Sets the S3 storage class type for the backup files. Values may be, +    `standard`, `reduced_redundancy`, `standard_ia`. Defaults to `standard`., +    Due to the extra complexity with the Glacier class lifecycle, it is not, +    currently supported by the plugin. For more information about the, +    different classes, see http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html[AWS Storage Classes Guide], +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueMillis(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +`storage_class`::, +, +    Sets the S3 storage class type for the backup files. Values may be, +    `standard`, `reduced_redundancy`, `standard_ia`. Defaults to `standard`., +    Due to the extra complexity with the Glacier class lifecycle, it is not, +    currently supported by the plugin. For more information about the, +    different classes, see http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html[AWS Storage Classes Guide], +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, inputStream, md), +                .withStorageClass(blobStore.getStorageClass()), +                .withCannedAcl(blobStore.getCannedACL());, +        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, blobName), +                .withCannedACL(blobStore.getCannedACL()), +                .withStorageClass(blobStore.getStorageClass());, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueMillis(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +`storage_class`::, +, +    Sets the S3 storage class type for the backup files. Values may be, +    `standard`, `reduced_redundancy`, `standard_ia`. Defaults to `standard`., +    Due to the extra complexity with the Glacier class lifecycle, it is not, +    currently supported by the plugin. For more information about the, +    different classes, see http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html[AWS Storage Classes Guide], +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/DefaultS3OutputStream.java, +        PutObjectRequest putRequest = new PutObjectRequest(bucketName, blobName, inputStream, md), +                .withStorageClass(blobStore.getStorageClass()), +                .withCannedAcl(blobStore.getCannedACL());, +        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, blobName), +                .withCannedACL(blobStore.getCannedACL()), +                .withStorageClass(blobStore.getStorageClass());, +, +++ b/plugins/repository-s3/src/main/java/org/elasticsearch/cloud/aws/blobstore/S3BlobStore.java, +import com.amazonaws.services.s3.model.*;, +import java.util.Locale;, +    private final StorageClass storageClass;, +, +                       ByteSizeValue bufferSize, int maxRetries, String cannedACL, String storageClass) {, +        this.storageClass = initStorageClass(storageClass);, +    public StorageClass getStorageClass() { return storageClass; }, +, +    public static StorageClass initStorageClass(String storageClass) {, +        if (storageClass == null || storageClass.equals("")) {, +            return StorageClass.Standard;, +        }, +, +        try {, +            StorageClass _storageClass = StorageClass.fromValue(storageClass.toUpperCase(Locale.ENGLISH));, +            if(_storageClass.equals(StorageClass.Glacier)) {, +                throw new BlobStoreException("Glacier storage class is not supported");, +            }, +, +            return _storageClass;, +        } catch (IllegalArgumentException illegalArgumentException) {, +            throw new BlobStoreException("`" + storageClass + "` is not a valid S3 Storage Class.");, +        }, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/routing/UnassignedInfo.java, +    private long lastComputedLeftDelayNanos = 0l; // how long to delay shard allocation, not serialized (always positive, 0 means no delay), +++ b/core/src/main/java/org/elasticsearch/gateway/ReplicaShardAllocator.java, +            logger.debug("[{}][{}]: delaying allocation of [{}] for [{}]", shard.index(), shard.id(), shard, TimeValue.timeValueMillis(delay));, +++ b/docs/plugins/repository-s3.asciidoc, +`storage_class`::, +, +    Sets the S3 storage class type for the backup files. Values may be, +    `standard`, `reduced_redundancy`, `standard_ia`. Defaults to `standard`., +    Due to the extra complexity with the Glacier class lifecycle, it is not, +    currently supported by the plugin. For more information about the, +    different classes, see http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html[AWS Storage Classes Guide], +]