[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ESRestHighLevelClientTestCase.java, +        return execute(request, syncMethod, asyncMethod, RequestOptions.DEFAULT);, +    }, +    , +    /**, +     * Executes the provided request using either the sync method or its async variant, both provided as functions, +     */, +    protected static <Req, Resp> Resp execute(Req request, SyncMethod<Req, Resp> syncMethod,, +                                       AsyncMethod<Req, Resp> asyncMethod, RequestOptions options) throws IOException {, +            return syncMethod.execute(request, options);, +            asyncMethod.execute(request, options, future);, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ESRestHighLevelClientTestCase.java, +        return execute(request, syncMethod, asyncMethod, RequestOptions.DEFAULT);, +    }, +    , +    /**, +     * Executes the provided request using either the sync method or its async variant, both provided as functions, +     */, +    protected static <Req, Resp> Resp execute(Req request, SyncMethod<Req, Resp> syncMethod,, +                                       AsyncMethod<Req, Resp> asyncMethod, RequestOptions options) throws IOException {, +            return syncMethod.execute(request, options);, +            asyncMethod.execute(request, options, future);, +++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java, +import org.elasticsearch.client.RequestOptions.Builder;, +import org.elasticsearch.client.WarningsHandler;, +import java.util.Arrays;, +import java.util.function.Consumer;, +     * Helper class to check warnings in REST responses with sensitivity to versions, +     * used in the target cluster., +     */, +    public static class VersionSensitiveWarningsHandler implements WarningsHandler {, +        Set<String> requiredSameVersionClusterWarnings = new HashSet<>();, +        Set<String> allowedWarnings = new HashSet<>();, +        final Set<Version> testNodeVersions;, +        , +        public VersionSensitiveWarningsHandler(Set<Version> nodeVersions) {, +            this.testNodeVersions = nodeVersions;, +        }, +, +        /**, +         * Adds to the set of warnings that are all required in responses if the cluster, +         * is formed from nodes all running the exact same version as the client. , +         * @param requiredWarnings a set of required warnings, +         */, +        public void current(String... requiredWarnings) {, +            requiredSameVersionClusterWarnings.addAll(Arrays.asList(requiredWarnings));, +        }, +, +        /**, +         * Adds to the set of warnings that are permissible (but not required) when running , +         * in mixed-version clusters or those that differ in version from the test client., +         * @param allowedWarnings optional warnings that will be ignored if received, +         */, +        public void compatible(String... allowedWarnings) {            , +            this.allowedWarnings.addAll(Arrays.asList(allowedWarnings));, +        }, +, +        @Override, +        public boolean warningsShouldFailRequest(List<String> warnings) {, +            if (isExclusivelyTargetingCurrentVersionCluster()) {, +                // absolute equality required in expected and actual., +                Set<String> actual = new HashSet<>(warnings);, +                return false == requiredSameVersionClusterWarnings.equals(actual);, +            } else {, +                // Some known warnings can safely be ignored, +                for (String actualWarning : warnings) {, +                    if (false == allowedWarnings.contains(actualWarning) &&, +                        false == requiredSameVersionClusterWarnings.contains(actualWarning)) {, +                        return true;, +                    }, +                }, +                return false;, +            }, +        }, +        , +        private boolean isExclusivelyTargetingCurrentVersionCluster() {, +            assertFalse("Node versions running in the cluster are missing", testNodeVersions.isEmpty());, +            return testNodeVersions.size() == 1 && , +                    testNodeVersions.iterator().next().equals(Version.CURRENT);, +        } , +        , +    }, +    , +    public static RequestOptions expectVersionSpecificWarnings(Consumer<VersionSensitiveWarningsHandler> expectationsSetter) {, +        Builder builder = RequestOptions.DEFAULT.toBuilder();, +        VersionSensitiveWarningsHandler warningsHandler = new VersionSensitiveWarningsHandler(nodeVersions);, +        expectationsSetter.accept(warningsHandler);, +        builder.setWarningsHandler(warningsHandler);, +        return builder.build();, +    }    , +, +    /**, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/ESRestHighLevelClientTestCase.java, +        return execute(request, syncMethod, asyncMethod, RequestOptions.DEFAULT);, +    }, +    , +    /**, +     * Executes the provided request using either the sync method or its async variant, both provided as functions, +     */, +    protected static <Req, Resp> Resp execute(Req request, SyncMethod<Req, Resp> syncMethod,]