[+++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalAction.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalAction.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalResponse.java, +        this.readFrom(in);, +, +    public Object getSpecId() {, +        return "RankEvalResponse, ID :[" + specId + "], quality: " + qualityLevel + ", unknown docs: " + unknownDocs;, +        out.writeOptionalString(specId);, +        out.writeOptionalDouble(qualityLevel);, +    @SuppressWarnings("unchecked"), +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        this.specId = in.readOptionalString();, +        this.qualityLevel = in.readOptionalDouble();, +        this.unknownDocs = (Map<String, Collection<String>>) in.readGenericValue();, +    }, +, +    @Override, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalAction.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalResponse.java, +        this.readFrom(in);, +, +    public Object getSpecId() {, +        return "RankEvalResponse, ID :[" + specId + "], quality: " + qualityLevel + ", unknown docs: " + unknownDocs;, +        out.writeOptionalString(specId);, +        out.writeOptionalDouble(qualityLevel);, +    @SuppressWarnings("unchecked"), +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        this.specId = in.readOptionalString();, +        this.qualityLevel = in.readOptionalDouble();, +        this.unknownDocs = (Map<String, Collection<String>>) in.readGenericValue();, +    }, +, +    @Override, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalSpec.java, +        eval = in.readNamedWriteable(RankedListQualityMetric.class);, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalAction.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalResponse.java, +        this.readFrom(in);, +, +    public Object getSpecId() {, +        return "RankEvalResponse, ID :[" + specId + "], quality: " + qualityLevel + ", unknown docs: " + unknownDocs;, +        out.writeOptionalString(specId);, +        out.writeOptionalDouble(qualityLevel);, +    @SuppressWarnings("unchecked"), +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        this.specId = in.readOptionalString();, +        this.qualityLevel = in.readOptionalDouble();, +        this.unknownDocs = (Map<String, Collection<String>>) in.readGenericValue();, +    }, +, +    @Override, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalSpec.java, +        eval = in.readNamedWriteable(RankedListQualityMetric.class);, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalRequestTests.java, +@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.SUITE), +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalAction.java, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalResponse.java, +        this.readFrom(in);, +, +    public Object getSpecId() {, +        return "RankEvalResponse, ID :[" + specId + "], quality: " + qualityLevel + ", unknown docs: " + unknownDocs;, +        out.writeOptionalString(specId);, +        out.writeOptionalDouble(qualityLevel);, +    @SuppressWarnings("unchecked"), +    public void readFrom(StreamInput in) throws IOException {, +        super.readFrom(in);, +        this.specId = in.readOptionalString();, +        this.qualityLevel = in.readOptionalDouble();, +        this.unknownDocs = (Map<String, Collection<String>>) in.readGenericValue();, +    }, +, +    @Override, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/RankEvalSpec.java, +        eval = in.readNamedWriteable(RankedListQualityMetric.class);, +++ b/modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RankEvalRequestTests.java, +@ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.SUITE), +++ b/test/framework/src/main/java/org/elasticsearch/test/TestCluster.java, +]