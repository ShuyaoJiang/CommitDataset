[+++ b/src/main/java/org/elasticsearch/index/search/child/TopChildrenQuery.java, +                if (scoreType == ScoreType.MAX) {, +                    return new ParentScorer(this, readerParentDocs) {, +                        @Override, +                        public float score() throws IOException {, +                            assert doc.docId >= 0 || doc.docId < NO_MORE_DOCS;, +                            return doc.maxScore;, +                        }, +                    };, +                } else if (scoreType == ScoreType.AVG) {, +                    return new ParentScorer(this, readerParentDocs) {, +                        @Override, +                        public float score() throws IOException {, +                            assert doc.docId >= 0 || doc.docId < NO_MORE_DOCS; , +                            return doc.sumScores / doc.count;, +                        }, +                    };, +                } else if (scoreType == ScoreType.SUM) {, +                    return new ParentScorer(this, readerParentDocs) {, +                        @Override, +                        public float score() throws IOException {, +                            assert doc.docId >= 0 || doc.docId < NO_MORE_DOCS;, +                            return doc.sumScores; , +                        }, +                        , +                    };, +                } , +                throw new ElasticSearchIllegalStateException("No support for score type [" + scoreType + "]");                   , +    static abstract class ParentScorer extends Scorer {, +        private final ParentDoc spare = new ParentDoc();, +        protected final ParentDoc[] docs;, +        protected ParentDoc doc = spare;, +        ParentScorer(ParentWeight weight, ParentDoc[] docs) throws IOException {, +            spare.docId = -1;, +            spare.count = -1;, +        public final int docID() {, +            return doc.docId;, +        public final int advance(int target) throws IOException {, +        public final int nextDoc() throws IOException {, +                doc = spare;, +                doc.count = 0;, +                return (doc.docId = NO_MORE_DOCS);, +            return (doc = docs[index]).docId;, +        public final int freq() throws IOException {, +            return doc.count; // The number of matches in the child doc, which is propagated to parent, +        public final long cost() {]