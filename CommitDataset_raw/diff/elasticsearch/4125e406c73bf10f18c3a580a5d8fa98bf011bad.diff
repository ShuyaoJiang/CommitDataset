[+++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #add(Term), +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #add(Term), +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +        if (aggregations != null || aggregationsBinary != null) {, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #add(Term), +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +        if (aggregations != null || aggregationsBinary != null) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +    private List<Class<? extends Aggregator.Parser>> parsers = Lists.newArrayList();, +        parsers.add(AvgParser.class);, +        parsers.add(SumParser.class);, +        parsers.add(MinParser.class);, +        parsers.add(MaxParser.class);, +        parsers.add(StatsParser.class);, +        parsers.add(ExtendedStatsParser.class);, +        parsers.add(ValueCountParser.class);, +        parsers.add(PercentilesParser.class);, +        parsers.add(PercentileRanksParser.class);, +        parsers.add(CardinalityParser.class);, +        parsers.add(GlobalParser.class);, +        parsers.add(MissingParser.class);, +        parsers.add(FilterParser.class);, +        parsers.add(FiltersParser.class);, +        parsers.add(TermsParser.class);, +        parsers.add(SignificantTermsParser.class);, +        parsers.add(RangeParser.class);, +        parsers.add(DateRangeParser.class);, +        parsers.add(IpRangeParser.class);, +        parsers.add(HistogramParser.class);, +        parsers.add(DateHistogramParser.class);, +        parsers.add(GeoDistanceParser.class);, +        parsers.add(GeoHashGridParser.class);, +        parsers.add(NestedParser.class);, +        parsers.add(ReverseNestedParser.class);, +        parsers.add(TopHitsParser.class);, +        parsers.add(GeoBoundsParser.class);, +        parsers.add(ScriptedMetricParser.class);, +        parsers.add(ChildrenParser.class);, +        parsers.add(parser);, +        Multibinder<Aggregator.Parser> multibinder = Multibinder.newSetBinder(binder(), Aggregator.Parser.class);, +        for (Class<? extends Aggregator.Parser> parser : parsers) {, +            multibinder.addBinding().to(parser);, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #add(Term), +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +        if (aggregations != null || aggregationsBinary != null) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +    private List<Class<? extends Aggregator.Parser>> parsers = Lists.newArrayList();, +        parsers.add(AvgParser.class);, +        parsers.add(SumParser.class);, +        parsers.add(MinParser.class);, +        parsers.add(MaxParser.class);, +        parsers.add(StatsParser.class);, +        parsers.add(ExtendedStatsParser.class);, +        parsers.add(ValueCountParser.class);, +        parsers.add(PercentilesParser.class);, +        parsers.add(PercentileRanksParser.class);, +        parsers.add(CardinalityParser.class);, +        parsers.add(GlobalParser.class);, +        parsers.add(MissingParser.class);, +        parsers.add(FilterParser.class);, +        parsers.add(FiltersParser.class);, +        parsers.add(TermsParser.class);, +        parsers.add(SignificantTermsParser.class);, +        parsers.add(RangeParser.class);, +        parsers.add(DateRangeParser.class);, +        parsers.add(IpRangeParser.class);, +        parsers.add(HistogramParser.class);, +        parsers.add(DateHistogramParser.class);, +        parsers.add(GeoDistanceParser.class);, +        parsers.add(GeoHashGridParser.class);, +        parsers.add(NestedParser.class);, +        parsers.add(ReverseNestedParser.class);, +        parsers.add(TopHitsParser.class);, +        parsers.add(GeoBoundsParser.class);, +        parsers.add(ScriptedMetricParser.class);, +        parsers.add(ChildrenParser.class);, +        parsers.add(parser);, +        Multibinder<Aggregator.Parser> multibinder = Multibinder.newSetBinder(binder(), Aggregator.Parser.class);, +        for (Class<? extends Aggregator.Parser> parser : parsers) {, +            multibinder.addBinding().to(parser);, +++ b/src/main/java/org/elasticsearch/search/aggregations/Aggregator.java, +++ b/src/main/java/org/elasticsearch/index/query/CommonTermsQueryBuilder.java, + * stopwords. This query basically builds 2 queries off the {@link #add(Term), +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationBuilder.java, +        if (aggregations != null || aggregationsBinary != null) {, +++ b/src/main/java/org/elasticsearch/search/aggregations/AggregationModule.java, +    private List<Class<? extends Aggregator.Parser>> parsers = Lists.newArrayList();, +        parsers.add(AvgParser.class);, +        parsers.add(SumParser.class);, +        parsers.add(MinParser.class);, +        parsers.add(MaxParser.class);, +        parsers.add(StatsParser.class);, +        parsers.add(ExtendedStatsParser.class);, +        parsers.add(ValueCountParser.class);, +        parsers.add(PercentilesParser.class);, +        parsers.add(PercentileRanksParser.class);]