[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                        IOUtils.close(node, spawner);, +            IOUtils.close(INSTANCE.node, INSTANCE.spawner);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                        IOUtils.close(node, spawner);, +            IOUtils.close(INSTANCE.node, INSTANCE.spawner);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                        IOUtils.close(node, spawner);, +            IOUtils.close(INSTANCE.node, INSTANCE.spawner);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                        IOUtils.close(node, spawner);, +            IOUtils.close(INSTANCE.node, INSTANCE.spawner);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregation.java, + * An aggregation, +public interface Aggregation {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,, +        internalResponse = readInternalSearchResponse(in);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +                        IOUtils.close(node, spawner);, +            IOUtils.close(INSTANCE.node, INSTANCE.spawner);, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/ObjectParser.java, +++ b/core/src/main/java/org/elasticsearch/common/xcontent/XContentParserUtils.java, +     * This method expects that the current token is a {@code XContentParser.Token.FIELD_NAME} and, +     * that the current field name is the concatenation of a type, delimiter and name (ex: terms#foo, +     * where "terms" refers to the type of a registered {@link NamedXContentRegistry.Entry}, "#" is, +     * the delimiter and "foo" the name of the object to parse)., +        ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.currentToken(), parser::getTokenLocation);, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregation.java, + * An aggregation, +public interface Aggregation {, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/Aggregations.java, +public abstract class Aggregations implements Iterable<Aggregation> {, +    protected Aggregations(List<? extends Aggregation> aggregations) {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/core/src/main/java/org/elasticsearch/action/search/SearchResponse.java, +import static org.elasticsearch.search.internal.InternalSearchResponse.readInternalSearchResponse;, +    private InternalSearchResponse internalResponse;, +    public SearchResponse(InternalSearchResponse internalResponse, String scrollId, int totalShards, int successfulShards,]