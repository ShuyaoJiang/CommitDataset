[+++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.InvalidUserDataException, +        if (project.pluginManager.hasPlugin('elasticsearch.standalone-test')) {, +              throw new InvalidUserDataException('elasticsearch.standalone-test and elasticsearch.build are mutually exclusive'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.InvalidUserDataException, +        if (project.pluginManager.hasPlugin('elasticsearch.standalone-test')) {, +              throw new InvalidUserDataException('elasticsearch.standalone-test and elasticsearch.build are mutually exclusive'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +        project.pluginManager.apply('elasticsearch.standalone-test'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.InvalidUserDataException, +        if (project.pluginManager.hasPlugin('elasticsearch.standalone-test')) {, +              throw new InvalidUserDataException('elasticsearch.standalone-test and elasticsearch.build are mutually exclusive'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +        project.pluginManager.apply('elasticsearch.standalone-test'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestTestPlugin.groovy, +import org.elasticsearch.gradle.BuildPlugin, +import org.gradle.api.InvalidUserDataException, +/**, + * Adds support for starting an Elasticsearch cluster before running integration, + * tests. Used in conjunction with {@link StandaloneTestBasePlugin} for qa, + * projects and in conjunction with {@link BuildPlugin} for testing the rest, + * client., + */, +    List REQUIRED_PLUGINS = [, +        'elasticsearch.build',, +        'elasticsearch.standalone-test'], +        if (false == REQUIRED_PLUGINS.any {project.pluginManager.hasPlugin(it)}) {, +            throw new InvalidUserDataException('elasticsearch.rest-test ', +                + 'requires either elasticsearch.build or ', +                + 'elasticsearch.standalone-test'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.InvalidUserDataException, +        if (project.pluginManager.hasPlugin('elasticsearch.standalone-test')) {, +              throw new InvalidUserDataException('elasticsearch.standalone-test and elasticsearch.build are mutually exclusive'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +        project.pluginManager.apply('elasticsearch.standalone-test'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestTestPlugin.groovy, +import org.elasticsearch.gradle.BuildPlugin, +import org.gradle.api.InvalidUserDataException, +/**, + * Adds support for starting an Elasticsearch cluster before running integration, + * tests. Used in conjunction with {@link StandaloneTestBasePlugin} for qa, + * projects and in conjunction with {@link BuildPlugin} for testing the rest, + * client., + */, +    List REQUIRED_PLUGINS = [, +        'elasticsearch.build',, +        'elasticsearch.standalone-test'], +        if (false == REQUIRED_PLUGINS.any {project.pluginManager.hasPlugin(it)}) {, +            throw new InvalidUserDataException('elasticsearch.rest-test ', +                + 'requires either elasticsearch.build or ', +                + 'elasticsearch.standalone-test'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +import org.gradle.api.InvalidUserDataException, +        if (project.pluginManager.hasPlugin('elasticsearch.build')) {, +            throw new InvalidUserDataException('elasticsearch.standalone-test and elasticsearch.build are mutually exclusive'), +        }, +        project.sourceSets.create('test'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.InvalidUserDataException, +        if (project.pluginManager.hasPlugin('elasticsearch.standalone-test')) {, +              throw new InvalidUserDataException('elasticsearch.standalone-test and elasticsearch.build are mutually exclusive'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/doc/DocsTestPlugin.groovy, +        project.pluginManager.apply('elasticsearch.standalone-test'), +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/RestTestPlugin.groovy, +import org.elasticsearch.gradle.BuildPlugin, +import org.gradle.api.InvalidUserDataException, +/**, + * Adds support for starting an Elasticsearch cluster before running integration, + * tests. Used in conjunction with {@link StandaloneTestBasePlugin} for qa, + * projects and in conjunction with {@link BuildPlugin} for testing the rest, + * client., + */, +    List REQUIRED_PLUGINS = [, +        'elasticsearch.build',, +        'elasticsearch.standalone-test'], +        if (false == REQUIRED_PLUGINS.any {project.pluginManager.hasPlugin(it)}) {, +            throw new InvalidUserDataException('elasticsearch.rest-test ', +                + 'requires either elasticsearch.build or ', +                + 'elasticsearch.standalone-test'), +        }, +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/test/StandaloneTestBasePlugin.groovy, +import org.gradle.api.InvalidUserDataException, +        if (project.pluginManager.hasPlugin('elasticsearch.build')) {, +            throw new InvalidUserDataException('elasticsearch.standalone-test and elasticsearch.build are mutually exclusive'), +        }, +        project.sourceSets.create('test'), +++ b/distribution/build.gradle, +  apply plugin: 'elasticsearch.standalone-test', +++ b/buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy, +import org.gradle.api.InvalidUserDataException]