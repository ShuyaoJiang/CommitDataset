[+++ b/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +        final AtomicReferenceArray<AtomicInteger> expectedOperationsPerItem = new AtomicReferenceArray<AtomicInteger>(percolateRequests.length());, +        // Keep track what slots belong to what shard, in case a request to a shard fails on all copies, +                expectedOperationsPerItem.set(i, new AtomicInteger(shards.size()));, +                expectedOperationsPerItem.set(i, new AtomicInteger(0));, +        // Move slot to shard tracking from normal map to concurrent save map, +        final ConcurrentMap<ShardId, AtomicIntegerArray> shardToSlots = ConcurrentCollections.newConcurrentMap();, +                            assert expectedOperationsPerItem.get(item.slot()).get() >= 1 : "slot[" + item.slot() + "] can't be lower than one";, +                            if (expectedOperationsPerItem.get(item.slot()).decrementAndGet() == 0) {, +                            assert expectedOperationsPerItem.get(slot).get() >= 1 : "slot[" + slot + "] can't be lower than one. Caused by: " + e.getMessage();, +                            if (expectedOperationsPerItem.get(slot).decrementAndGet() == 0) {, +++ b/src/main/java/org/elasticsearch/action/percolate/TransportMultiPercolateAction.java, +        final AtomicReferenceArray<AtomicInteger> expectedOperationsPerItem = new AtomicReferenceArray<AtomicInteger>(percolateRequests.length());, +        // Keep track what slots belong to what shard, in case a request to a shard fails on all copies, +                expectedOperationsPerItem.set(i, new AtomicInteger(shards.size()));, +                expectedOperationsPerItem.set(i, new AtomicInteger(0));, +        // Move slot to shard tracking from normal map to concurrent save map, +        final ConcurrentMap<ShardId, AtomicIntegerArray> shardToSlots = ConcurrentCollections.newConcurrentMap();, +                            assert expectedOperationsPerItem.get(item.slot()).get() >= 1 : "slot[" + item.slot() + "] can't be lower than one";, +                            if (expectedOperationsPerItem.get(item.slot()).decrementAndGet() == 0) {, +                            assert expectedOperationsPerItem.get(slot).get() >= 1 : "slot[" + slot + "] can't be lower than one. Caused by: " + e.getMessage();, +                            if (expectedOperationsPerItem.get(slot).decrementAndGet() == 0) {, +++ b/src/test/java/org/elasticsearch/test/integration/percolator/RecoveryPercolatorTests.java, +import org.elasticsearch.common.unit.TimeValue;, +                                assertThat(item.getResponse().getSuccessfulShards(), equalTo(item.getResponse().getTotalShards()));, +                            assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()));, +            // 1 index, 2 primaries, 2 replicas per primary, +                client.admin().cluster().prepareHealth("test"), +                        .setTimeout(TimeValue.timeValueMinutes(2)), +                        .setWaitForActiveShards(4) // 2 nodes, so 4 shards (2 primaries, 2 replicas), +                client.admin().cluster().prepareHealth("test"), +                        .setTimeout(TimeValue.timeValueMinutes(2)), +                        .setWaitForActiveShards(2) // 1 node, so 2 shards (2 primaries, 0 replicas), +                client.admin().cluster().prepareHealth("test"), +                        .setTimeout(TimeValue.timeValueMinutes(2)), +                        .setWaitForActiveShards(4)  // 2 nodes, so 4 shards (2 primaries, 2 replicas), +                client.admin().cluster().prepareHealth("test"), +                        .setTimeout(TimeValue.timeValueMinutes(2)), +                        .setWaitForGreenStatus() // We're confirm the shard settings, so green instead of yellow, +                        .setWaitForActiveShards(6) // 3 nodes, so 6 shards (2 primaries, 4 replicas)]