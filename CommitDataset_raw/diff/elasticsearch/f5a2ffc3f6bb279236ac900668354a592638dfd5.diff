[+++ b/docs/reference/ml/apis/find-file-structure.asciidoc, +[role="xpack"], +[testenv="basic"], +[[ml-find-file-structure]], +=== Find File Structure API, +++++, +<titleabbrev>Find File Structure</titleabbrev>, +++++, +, +experimental[], +, +Finds the structure of a text file. The text file must contain data that is, +suitable to be ingested into {es}., +, +==== Request, +, +`POST _xpack/ml/find_file_structure`, +, +, +==== Description, +, +This API provides a starting point for ingesting data into {es} in a format that, +is suitable for subsequent use with other {ml} functionality., +, +Unlike other {es} endpoints, the data that is posted to this endpoint does not, +need to be UTF-8 encoded and in JSON format.  It must, however, be text; binary, +file formats are not currently supported., +, +The response from the API contains:, +, +* A couple of messages from the beginning of the file., +* Statistics that reveal the most common values for all fields detected within, +  the file and basic numeric statistics for numeric fields., +* Information about the structure of the file, which is useful when you write, +  ingest configurations to index the file contents., +* Appropriate mappings for an {es} index, which you could use to ingest the file, +  contents., +, +All this information can be calculated by the structure finder with no guidance., +However, you can optionally override some of the decisions about the file, +structure by specifying one or more query parameters., +, +Details of the output can be seen in the, +<<ml-find-file-structure-examples,examples>>., +, +If the structure finder produces unexpected results for a particular file,, +specify the `explain` query parameter. It causes an `explanation` to appear in, +the response, which should help in determining why the returned structure was, +chosen., +, +==== Query Parameters, +, +`charset`::, +  (string) The file's character set. It must be a character set that is supported, +  by the JVM that {es} uses. For example, `UTF-8`, `UTF-16LE`, `windows-1252`, or, +  `EUC-JP`. If this parameter is not specified, the structure finder chooses an, +  appropriate character set., +, +`column_names`::, +  (string) If you have set `format` to `delimited`, you can specify the column names, +  in a comma-separated list. If this parameter is not specified, the structure, +  finder uses the column names from the header row of the file. If the file does, +  not have a header role, columns are named "column1", "column2", "column3", etc., +, +`delimiter`::, +  (string) If you have set `format` to `delimited`, you can specify the character used, +  to delimit the values in each row. Only a single character is supported; the, +  delimiter cannot have multiple characters. If this parameter is not specified,, +  the structure finder considers the following possibilities: comma, tab,, +  semi-colon, and pipe (`|`)., +, +`explain`::, +  (boolean) If this parameter is set to `true`, the response includes a field, +  named `explanation`, which is an array of strings that indicate how the, +  structure finder produced its result. The default value is `false`., +, +`format`::, +  (string) The high level structure of the file. Valid values are `json`, `xml`,, +  `delimited`, and `semi_structured_text`. If this parameter is not specified,, +  the structure finder chooses one., +, +`grok_pattern`::, +  (string) If you have set `format` to `semi_structured_text`, you can specify a Grok, +  pattern that is used to extract fields from every message in the file. The, +  name of the timestamp field in the Grok pattern must match what is specified, +  in the `timestamp_field` parameter. If that parameter is not specified, the, +  name of the timestamp field in the Grok pattern must match "timestamp". If, +  `grok_pattern` is not specified, the structure finder creates a Grok pattern., +, +`has_header_row`::, +  (boolean) If you have set `format` to `delimited`, you can use this parameter to, +  indicate whether the column names are in the first row of the file. If this, +  parameter is not specified, the structure finder guesses based on the similarity of, +  the first row of the file to other rows., +, +`lines_to_sample`::, +  (unsigned integer) The number of lines to include in the structural analysis,, +  starting from the beginning of the file. The minimum is 2; the default, +  is 1000. If the value of this parameter is greater than the number of lines in, +  the file, the analysis proceeds (as long as there are at least two lines in the]