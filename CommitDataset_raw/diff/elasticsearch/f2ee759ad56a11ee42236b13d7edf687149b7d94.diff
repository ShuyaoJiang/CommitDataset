[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.derivative.DerivativeParser;, +        registerAggregatorParser(new AvgParser());, +        registerAggregatorParser(new RangeParser());, +        registerAggregatorParser(new DateRangeParser());, +        registerAggregatorParser(new IpRangeParser());, +        registerPipelineParser(new DerivativeParser());, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.derivative.DerivativeParser;, +        registerAggregatorParser(new AvgParser());, +        registerAggregatorParser(new RangeParser());, +        registerAggregatorParser(new DateRangeParser());, +        registerAggregatorParser(new IpRangeParser());, +        registerPipelineParser(new DerivativeParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.derivative.DerivativeParser;, +        registerAggregatorParser(new AvgParser());, +        registerAggregatorParser(new RangeParser());, +        registerAggregatorParser(new DateRangeParser());, +        registerAggregatorParser(new IpRangeParser());, +        registerPipelineParser(new DerivativeParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/AbstractRangeBuilder.java, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +    protected AB innerReadFrom(String name, ValuesSourceType valuesSourceType,, +            ValueType targetValueType, StreamInput in) throws IOException {, +        AbstractRangeBuilder<AB, R> factory = createFactoryFromStream(name, in);, +        factory.keyed = in.readBoolean();, +        return (AB) factory;, +    }, +, +    protected abstract AbstractRangeBuilder<AB, R> createFactoryFromStream(String name, StreamInput in) throws IOException;, +, +    @Override, +    protected void innerWriteTo(StreamOutput out) throws IOException {, +        out.writeVInt(ranges.size());, +        for (Range range : ranges) {, +            range.writeTo(out);, +        }, +        out.writeBoolean(keyed);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.derivative.DerivativeParser;, +        registerAggregatorParser(new AvgParser());, +        registerAggregatorParser(new RangeParser());, +        registerAggregatorParser(new DateRangeParser());, +        registerAggregatorParser(new IpRangeParser());, +        registerPipelineParser(new DerivativeParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/AbstractRangeBuilder.java, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +    protected AB innerReadFrom(String name, ValuesSourceType valuesSourceType,, +            ValueType targetValueType, StreamInput in) throws IOException {, +        AbstractRangeBuilder<AB, R> factory = createFactoryFromStream(name, in);, +        factory.keyed = in.readBoolean();, +        return (AB) factory;, +    }, +, +    protected abstract AbstractRangeBuilder<AB, R> createFactoryFromStream(String name, StreamInput in) throws IOException;, +, +    @Override, +    protected void innerWriteTo(StreamOutput out) throws IOException {, +        out.writeVInt(ranges.size());, +        for (Range range : ranges) {, +            range.writeTo(out);, +        }, +        out.writeBoolean(keyed);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregatorBuilder.java, +import org.elasticsearch.search.aggregations.AggregatorFactories.Builder;, +import org.elasticsearch.search.aggregations.support.ValuesSource.Numeric;, +, +    static final RangeAggregatorBuilder PROTOTYPE = new RangeAggregatorBuilder("");, +    protected RangeAggregatorBuilder createFactoryFromStream(String name, StreamInput in) throws IOException {, +        int size = in.readVInt();, +        RangeAggregatorBuilder factory = new RangeAggregatorBuilder(name);, +        for (int i = 0; i < size; i++) {, +            factory.addRange(Range.PROTOTYPE.readFrom(in));, +        }, +        return factory;, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.derivative.DerivativeParser;, +        registerAggregatorParser(new AvgParser());, +        registerAggregatorParser(new RangeParser());, +        registerAggregatorParser(new DateRangeParser());, +        registerAggregatorParser(new IpRangeParser());, +        registerPipelineParser(new DerivativeParser());, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/AggregatorBuilder.java, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/range/AbstractRangeBuilder.java, +import org.elasticsearch.search.aggregations.support.ValueType;, +import org.elasticsearch.search.aggregations.support.ValuesSourceType;, +    protected AB innerReadFrom(String name, ValuesSourceType valuesSourceType,, +            ValueType targetValueType, StreamInput in) throws IOException {]