[+++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.cumulativesum.CumulativeSumPipelineAggregatorBuilder;, +import org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffPipelineAggregatorBuilder;, +        registerPipelineAggregation(CumulativeSumPipelineAggregatorBuilder::new, CumulativeSumPipelineAggregatorBuilder::parse,, +                CumulativeSumPipelineAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerPipelineAggregation(SerialDiffPipelineAggregatorBuilder::new, SerialDiffPipelineAggregatorBuilder::parse,, +                SerialDiffPipelineAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.cumulativesum.CumulativeSumPipelineAggregatorBuilder;, +import org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffPipelineAggregatorBuilder;, +        registerPipelineAggregation(CumulativeSumPipelineAggregatorBuilder::new, CumulativeSumPipelineAggregatorBuilder::parse,, +                CumulativeSumPipelineAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerPipelineAggregation(SerialDiffPipelineAggregatorBuilder::new, SerialDiffPipelineAggregatorBuilder::parse,, +                SerialDiffPipelineAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/SearchModule.java, +import org.elasticsearch.search.aggregations.pipeline.cumulativesum.CumulativeSumPipelineAggregatorBuilder;, +import org.elasticsearch.search.aggregations.pipeline.serialdiff.SerialDiffPipelineAggregatorBuilder;, +        registerPipelineAggregation(CumulativeSumPipelineAggregatorBuilder::new, CumulativeSumPipelineAggregatorBuilder::parse,, +                CumulativeSumPipelineAggregatorBuilder.AGGREGATION_NAME_FIELD);, +        registerPipelineAggregation(SerialDiffPipelineAggregatorBuilder::new, SerialDiffPipelineAggregatorBuilder::parse,, +                SerialDiffPipelineAggregatorBuilder.AGGREGATION_NAME_FIELD);, +++ /dev/null, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/cumulativesum/CumulativeSumPipelineAggregatorBuilder.java, +import org.elasticsearch.common.ParseField;, +import org.elasticsearch.common.ParsingException;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.index.query.QueryParseContext;, +import java.util.ArrayList;, +import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregator.Parser.BUCKETS_PATH;, +import static org.elasticsearch.search.aggregations.pipeline.PipelineAggregator.Parser.FORMAT;, +public class CumulativeSumPipelineAggregatorBuilder extends PipelineAggregatorBuilder<CumulativeSumPipelineAggregatorBuilder> {, +    public static final String NAME = CumulativeSumPipelineAggregator.TYPE.name();, +    public static final ParseField AGGREGATION_NAME_FIELD = new ParseField(NAME);, +        super(name, CumulativeSumPipelineAggregator.TYPE.name(), new String[] { bucketsPath });, +    /**, +     * Read from a stream., +     */, +    public CumulativeSumPipelineAggregatorBuilder(StreamInput in) throws IOException {, +        super(in, CumulativeSumPipelineAggregator.TYPE.name());, +        format = in.readOptionalString();, +    }, +, +    @Override, +    protected final void doWriteTo(StreamOutput out) throws IOException {, +        out.writeOptionalString(format);, +    }, +, +    @Override, +    protected boolean usesNewStyleSerialization() {, +        return true;, +            throw new IllegalStateException(BUCKETS_PATH.getPreferredName(), +    public static CumulativeSumPipelineAggregatorBuilder parse(String pipelineAggregatorName, QueryParseContext context), +        XContentParser parser = context.parser();, +        XContentParser.Token token;, +        String currentFieldName = null;, +        String[] bucketsPaths = null;, +        String format = null;, +, +        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {, +            if (token == XContentParser.Token.FIELD_NAME) {, +                currentFieldName = parser.currentName();, +            } else if (token == XContentParser.Token.VALUE_STRING) {, +                if (context.getParseFieldMatcher().match(currentFieldName, FORMAT)) {, +                    format = parser.text();, +                } else if (context.getParseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) {, +                    bucketsPaths = new String[] { parser.text() };, +                } else {, +                    throw new ParsingException(parser.getTokenLocation(),, +                            "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].");, +                }, +            } else if (token == XContentParser.Token.START_ARRAY) {, +                if (context.getParseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) {, +                    List<String> paths = new ArrayList<>();, +                    while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {, +                        String path = parser.text();, +                        paths.add(path);, +                    }, +                    bucketsPaths = paths.toArray(new String[paths.size()]);, +                } else {, +                    throw new ParsingException(parser.getTokenLocation(),, +                            "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].");, +                }, +            } else {, +                throw new ParsingException(parser.getTokenLocation(),, +                        "Unexpected token " + token + " in [" + pipelineAggregatorName + "].");, +            }, +        if (bucketsPaths == null) {, +            throw new ParsingException(parser.getTokenLocation(), "Missing required field [" + BUCKETS_PATH.getPreferredName(), +                    + "] for derivative aggregation [" + pipelineAggregatorName + "]");, +        }, +, +        CumulativeSumPipelineAggregatorBuilder factory =, +                new CumulativeSumPipelineAggregatorBuilder(pipelineAggregatorName, bucketsPaths[0]);, +        if (format != null) {, +            factory.format(format);, +        }, +        return factory;, +, +    @Override]