[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +import org.elasticsearch.xpack.core.ml.job.messages.Messages;, +import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;, +import org.elasticsearch.xpack.core.ml.utils.MlStrings;, +        this.id = Objects.requireNonNull(id);, +            ExceptionsHelper.requireNonNull(id, MlFilter.ID.getPreferredName());, +            if (!MlStrings.isValidId(id)) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.INVALID_ID, ID.getPreferredName(), id));, +            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +import org.elasticsearch.xpack.core.ml.job.messages.Messages;, +import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;, +import org.elasticsearch.xpack.core.ml.utils.MlStrings;, +        this.id = Objects.requireNonNull(id);, +            ExceptionsHelper.requireNonNull(id, MlFilter.ID.getPreferredName());, +            if (!MlStrings.isValidId(id)) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.INVALID_ID, ID.getPreferredName(), id));, +            }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/PutFilterActionRequestTests.java, +    private final String filterId = MlFilterTests.randomValidFilterId();, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +import org.elasticsearch.xpack.core.ml.job.messages.Messages;, +import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;, +import org.elasticsearch.xpack.core.ml.utils.MlStrings;, +        this.id = Objects.requireNonNull(id);, +            ExceptionsHelper.requireNonNull(id, MlFilter.ID.getPreferredName());, +            if (!MlStrings.isValidId(id)) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.INVALID_ID, ID.getPreferredName(), id));, +            }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/PutFilterActionRequestTests.java, +    private final String filterId = MlFilterTests.randomValidFilterId();, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/config/MlFilterTests.java, +import com.carrotsearch.randomizedtesting.generators.CodepointSetGenerator;, +import org.elasticsearch.ElasticsearchStatusException;, +import static org.hamcrest.Matchers.startsWith;, +        return createRandom(randomValidFilterId());, +    }, +, +    public static String randomValidFilterId() {, +        CodepointSetGenerator generator =  new CodepointSetGenerator("abcdefghijklmnopqrstuvwxyz".toCharArray());, +        return generator.ofCodePointsLength(random(), 10, 10);, +        Exception ex = expectThrows(IllegalArgumentException.class, () -> MlFilter.builder(null).build());, +        assertEquals("[filter_id] must not be null.", ex.getMessage());, +                () -> MlFilter.builder(randomValidFilterId()).setItems((SortedSet<String>) null).build());, +    public void testInvalidId() {, +        ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> MlFilter.builder("Invalid id").build());, +        assertThat(e.getMessage(), startsWith("Invalid filter_id; 'Invalid id' can contain lowercase"));, +    }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +import org.elasticsearch.xpack.core.ml.job.messages.Messages;, +import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;, +import org.elasticsearch.xpack.core.ml.utils.MlStrings;, +        this.id = Objects.requireNonNull(id);, +            ExceptionsHelper.requireNonNull(id, MlFilter.ID.getPreferredName());, +            if (!MlStrings.isValidId(id)) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.INVALID_ID, ID.getPreferredName(), id));, +            }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/action/PutFilterActionRequestTests.java, +    private final String filterId = MlFilterTests.randomValidFilterId();, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/job/config/MlFilterTests.java, +import com.carrotsearch.randomizedtesting.generators.CodepointSetGenerator;, +import org.elasticsearch.ElasticsearchStatusException;, +import static org.hamcrest.Matchers.startsWith;, +        return createRandom(randomValidFilterId());, +    }, +, +    public static String randomValidFilterId() {, +        CodepointSetGenerator generator =  new CodepointSetGenerator("abcdefghijklmnopqrstuvwxyz".toCharArray());, +        return generator.ofCodePointsLength(random(), 10, 10);, +        Exception ex = expectThrows(IllegalArgumentException.class, () -> MlFilter.builder(null).build());, +        assertEquals("[filter_id] must not be null.", ex.getMessage());, +                () -> MlFilter.builder(randomValidFilterId()).setItems((SortedSet<String>) null).build());, +    public void testInvalidId() {, +        ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class, () -> MlFilter.builder("Invalid id").build());, +        assertThat(e.getMessage(), startsWith("Invalid filter_id; 'Invalid id' can contain lowercase"));, +    }, +, +++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/filter_crud.yml, +, +---, +"Test create filter given invalid filter_id":, +  - do:, +      catch: bad_request, +      xpack.ml.put_filter:, +        filter_id: Invalid, +        body:  >, +          {, +            "description": "this id is invalid due to an upper case character", +          }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/job/config/MlFilter.java, +import org.elasticsearch.xpack.core.ml.job.messages.Messages;, +import org.elasticsearch.xpack.core.ml.utils.ExceptionsHelper;, +import org.elasticsearch.xpack.core.ml.utils.MlStrings;, +        this.id = Objects.requireNonNull(id);, +            ExceptionsHelper.requireNonNull(id, MlFilter.ID.getPreferredName());, +            if (!MlStrings.isValidId(id)) {, +                throw ExceptionsHelper.badRequestException(Messages.getMessage(Messages.INVALID_ID, ID.getPreferredName(), id));, +            }]