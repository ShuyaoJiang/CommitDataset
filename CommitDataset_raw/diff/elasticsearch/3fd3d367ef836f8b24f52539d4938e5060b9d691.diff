[+++ b/CONTRIBUTING.md, +++ b/CONTRIBUTING.md, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.metadata.MetaData.Custom;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +import java.util.Iterator;, +    private final AllocationService allocationService;, +                                                   AllocationService allocationService, ClusterInfoService clusterInfoService,, +                                                   AllocationDeciders allocationDeciders, ShardsAllocator shardAllocator,, +                                                   TransportIndicesShardStoresAction shardStoresAction) {, +        this.allocationService = allocationService;, +++ b/CONTRIBUTING.md, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.metadata.MetaData.Custom;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +import java.util.Iterator;, +    private final AllocationService allocationService;, +                                                   AllocationService allocationService, ClusterInfoService clusterInfoService,, +                                                   AllocationDeciders allocationDeciders, ShardsAllocator shardAllocator,, +                                                   TransportIndicesShardStoresAction shardStoresAction) {, +        this.allocationService = allocationService;, +++ /dev/null, +++ b/CONTRIBUTING.md, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.metadata.MetaData.Custom;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +import java.util.Iterator;, +    private final AllocationService allocationService;, +                                                   AllocationService allocationService, ClusterInfoService clusterInfoService,, +                                                   AllocationDeciders allocationDeciders, ShardsAllocator shardAllocator,, +                                                   TransportIndicesShardStoresAction shardStoresAction) {, +        this.allocationService = allocationService;, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java, +        if (last instanceof IDefLink) {, +            last.after = expression.expected = expression.actual;, +, +        this.actual = read ? last.after : definition.voidType;, +        if (last instanceof IDefLink && this.expected != null) {, +++ b/CONTRIBUTING.md, +++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/allocation/TransportClusterAllocationExplainAction.java, +import com.carrotsearch.hppc.cursors.ObjectObjectCursor;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.metadata.MetaData.Custom;, +import org.elasticsearch.cluster.routing.RoutingTable;, +import org.elasticsearch.cluster.routing.allocation.AllocationService;, +import org.elasticsearch.cluster.routing.allocation.RoutingExplanations;, +import java.util.Iterator;, +    private final AllocationService allocationService;, +                                                   AllocationService allocationService, ClusterInfoService clusterInfoService,, +                                                   AllocationDeciders allocationDeciders, ShardsAllocator shardAllocator,, +                                                   TransportIndicesShardStoresAction shardStoresAction) {, +        this.allocationService = allocationService;, +++ /dev/null, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java, +        if (last instanceof IDefLink) {, +            last.after = expression.expected = expression.actual;, +, +        this.actual = read ? last.after : definition.voidType;, +        if (last instanceof IDefLink && this.expected != null) {, +++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/IDefLink.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.painless.node;, +, +/**, + * A marker interface applied to LDef* nodes allowing changes to {@link ALink#after} from outside,, + * by default {@code after} is {@code DEF}., + */, +interface IDefLink {, +}]