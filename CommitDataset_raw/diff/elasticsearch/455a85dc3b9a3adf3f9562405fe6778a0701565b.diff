[+++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +    long startTime;, +, +        if (this.doc != null) {, +            this.doc = other.doc().copyBytesArray();, +        }, +        if (other.perFieldAnalyzer != null) {, +            this.perFieldAnalyzer = new HashMap<>(other.perFieldAnalyzer);, +        }, +        this.version = other.version();, +        this.versionType = VersionType.fromValue(other.versionType().getValue());, +        this.startTime = other.startTime();, +    public long startTime() {, +        return this.startTime;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +    long startTime;, +, +        if (this.doc != null) {, +            this.doc = other.doc().copyBytesArray();, +        }, +        if (other.perFieldAnalyzer != null) {, +            this.perFieldAnalyzer = new HashMap<>(other.perFieldAnalyzer);, +        }, +        this.version = other.version();, +        this.versionType = VersionType.fromValue(other.versionType().getValue());, +        this.startTime = other.startTime();, +    public long startTime() {, +        return this.startTime;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +import org.elasticsearch.common.unit.TimeValue;, +        public static final XContentBuilderString TOOK = new XContentBuilderString("took");, +    private long tookInMillis;, +        out.writeBoolean(artificial);, +        out.writeVLong(tookInMillis);, +        artificial = in.readBoolean();, +        tookInMillis = in.readVLong();, +        builder.field(FieldStrings.TOOK, tookInMillis);, +    public void updateTookInMillis(long startTime) {, +        this.tookInMillis = Math.max(1, System.currentTimeMillis() - startTime);, +    }, +, +    public TimeValue getTook() {, +        return new TimeValue(tookInMillis);, +    }, +, +    public long getTookInMillis() {, +        return tookInMillis;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +    long startTime;, +, +        if (this.doc != null) {, +            this.doc = other.doc().copyBytesArray();, +        }, +        if (other.perFieldAnalyzer != null) {, +            this.perFieldAnalyzer = new HashMap<>(other.perFieldAnalyzer);, +        }, +        this.version = other.version();, +        this.versionType = VersionType.fromValue(other.versionType().getValue());, +        this.startTime = other.startTime();, +    public long startTime() {, +        return this.startTime;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsResponse.java, +import org.elasticsearch.common.unit.TimeValue;, +        public static final XContentBuilderString TOOK = new XContentBuilderString("took");, +    private long tookInMillis;, +        out.writeBoolean(artificial);, +        out.writeVLong(tookInMillis);, +        artificial = in.readBoolean();, +        tookInMillis = in.readVLong();, +        builder.field(FieldStrings.TOOK, tookInMillis);, +    public void updateTookInMillis(long startTime) {, +        this.tookInMillis = Math.max(1, System.currentTimeMillis() - startTime);, +    }, +, +    public TimeValue getTook() {, +        return new TimeValue(tookInMillis);, +    }, +, +    public long getTookInMillis() {, +        return tookInMillis;, +    }, +, +++ b/src/main/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsAction.java, +            termVectorsRequest.startTime = System.currentTimeMillis();, +++ b/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java, +    long startTime;, +, +        if (this.doc != null) {, +            this.doc = other.doc().copyBytesArray();, +        }, +        if (other.perFieldAnalyzer != null) {, +            this.perFieldAnalyzer = new HashMap<>(other.perFieldAnalyzer);]