[+++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java, +import org.elasticsearch.cluster.AckedClusterStateTaskListener;, +import org.elasticsearch.cluster.ClusterChangedEvent;, +import org.elasticsearch.cluster.ClusterName;, +import org.elasticsearch.cluster.ClusterService;, +import org.elasticsearch.cluster.ClusterState;, +import org.elasticsearch.cluster.ClusterStateListener;, +import org.elasticsearch.cluster.ClusterStateTaskConfig;, +import org.elasticsearch.cluster.ClusterStateTaskExecutor;, +import org.elasticsearch.cluster.ClusterStateTaskListener;, +import org.elasticsearch.cluster.ClusterStateUpdateTask;, +import org.elasticsearch.cluster.LocalNodeMasterListener;, +import org.elasticsearch.cluster.TimeoutClusterStateListener;, +import org.elasticsearch.common.util.concurrent.ConcurrentCollections;, +import org.elasticsearch.common.util.concurrent.CountDown;, +import org.elasticsearch.common.util.concurrent.EsExecutors;, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +import org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor;, +import org.elasticsearch.common.util.concurrent.PrioritizedRunnable;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Queue;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.CopyOnWriteArrayList;, +import java.util.concurrent.Executor;, +import java.util.concurrent.Future;, +import java.util.concurrent.ScheduledFuture;, +import java.util.concurrent.TimeUnit;, +                        logger.debug("cluster state update task [{}] timed out after [{}]", source, config.timeout());, +        assert batchResult.executionResults.size() == toExecute.size();, +        final ClusterStateTaskExecutor.BatchResult<T> finalBatchResult = batchResult;, +        assert toExecute.stream().map(updateTask -> updateTask.task).allMatch(finalBatchResult.executionResults::containsKey);, +            executionResult.handle(, +                () -> proccessedListeners.add(updateTask),, +                ex -> {, +                    logger.debug("cluster state update task [{}] failed", ex, updateTask.source);, +                    updateTask.listener.onFailure(updateTask.source, ex);, +                }, +            );]