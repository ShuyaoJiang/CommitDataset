[+++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/TaskBatcherTests.java, +                    throw new AssertionError(e);, +                    throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/TaskBatcherTests.java, +                    throw new AssertionError(e);, +                    throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/common/joda/JodaDateMathParserTests.java, +            assertThat(e.getMessage().contains(exc), equalTo(true));, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/TaskBatcherTests.java, +                    throw new AssertionError(e);, +                    throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/common/joda/JodaDateMathParserTests.java, +            assertThat(e.getMessage().contains(exc), equalTo(true));, +++ b/server/src/test/java/org/elasticsearch/common/time/JavaDateMathParserTests.java, +        assertThat(msg, e.getMessage(), containsString(exc));, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/TaskBatcherTests.java, +                    throw new AssertionError(e);, +                    throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/common/joda/JodaDateMathParserTests.java, +            assertThat(e.getMessage().contains(exc), equalTo(true));, +++ b/server/src/test/java/org/elasticsearch/common/time/JavaDateMathParserTests.java, +        assertThat(msg, e.getMessage(), containsString(exc));, +++ b/server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java, +                String message = e.getMessage();, +            String message = e.getMessage();, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/TaskBatcherTests.java, +                    throw new AssertionError(e);, +                    throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/common/joda/JodaDateMathParserTests.java, +            assertThat(e.getMessage().contains(exc), equalTo(true));, +++ b/server/src/test/java/org/elasticsearch/common/time/JavaDateMathParserTests.java, +        assertThat(msg, e.getMessage(), containsString(exc));, +++ b/server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java, +                String message = e.getMessage();, +            String message = e.getMessage();, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java, +import static org.hamcrest.Matchers.notNullValue;, +        assertThat(err.getCause(), notNullValue());, +        assertThat(err.getCause().getMessage(), containsString("field name cannot be an empty string"));, +        assertThat(err.getCause(), notNullValue());, +        assertThat(err.getCause().getMessage(), containsString("field name cannot be an empty string"));, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/TaskBatcherTests.java, +                    throw new AssertionError(e);, +                    throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/common/joda/JodaDateMathParserTests.java, +            assertThat(e.getMessage().contains(exc), equalTo(true));, +++ b/server/src/test/java/org/elasticsearch/common/time/JavaDateMathParserTests.java, +        assertThat(msg, e.getMessage(), containsString(exc));, +++ b/server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java, +                String message = e.getMessage();, +            String message = e.getMessage();, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java, +import static org.hamcrest.Matchers.notNullValue;, +        assertThat(err.getCause(), notNullValue());, +        assertThat(err.getCause().getMessage(), containsString("field name cannot be an empty string"));, +        assertThat(err.getCause(), notNullValue());, +        assertThat(err.getCause().getMessage(), containsString("field name cannot be an empty string"));, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardIT.java, +import static org.hamcrest.Matchers.notNullValue;, +        logger.info("--> got an expected exception", e);, +        assertThat(e.getCause(), notNullValue());, +        assertThat(e.getCause().getMessage(), containsString("[parent] Data too large, data for [<agg [foo_terms]>]"));, +++ b/server/src/test/java/org/elasticsearch/cluster/service/MasterServiceTests.java, +                throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/cluster/service/TaskBatcherTests.java, +                    throw new AssertionError(e);, +                    throw new AssertionError(e);, +++ b/server/src/test/java/org/elasticsearch/common/joda/JodaDateMathParserTests.java, +            assertThat(e.getMessage().contains(exc), equalTo(true));, +++ b/server/src/test/java/org/elasticsearch/common/time/JavaDateMathParserTests.java, +        assertThat(msg, e.getMessage(), containsString(exc));, +++ b/server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java, +                String message = e.getMessage();, +            String message = e.getMessage();, +++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java, +import static org.hamcrest.Matchers.notNullValue;, +        assertThat(err.getCause(), notNullValue());, +        assertThat(err.getCause().getMessage(), containsString("field name cannot be an empty string"));, +        assertThat(err.getCause(), notNullValue());, +        assertThat(err.getCause().getMessage(), containsString("field name cannot be an empty string"));, +++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardIT.java, +import static org.hamcrest.Matchers.notNullValue;, +        logger.info("--> got an expected exception", e);, +        assertThat(e.getCause(), notNullValue());, +        assertThat(e.getCause().getMessage(), containsString("[parent] Data too large, data for [<agg [foo_terms]>]"));, +++ b/server/src/test/java/org/elasticsearch/index/store/StoreTests.java]