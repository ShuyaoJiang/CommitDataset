[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBinaryFieldMapper.java, +import org.elasticsearch.util.json.JsonBuilder;, +, +    @Override public void toJson(JsonBuilder builder, Params params) throws IOException {, +        builder.startObject(names.name());, +        builder.field("type", jsonType());, +        builder.field("indexName", names.indexNameClean());, +        builder.endObject();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBinaryFieldMapper.java, +import org.elasticsearch.util.json.JsonBuilder;, +, +    @Override public void toJson(JsonBuilder builder, Params params) throws IOException {, +        builder.startObject(names.name());, +        builder.field("type", jsonType());, +        builder.field("indexName", names.indexNameClean());, +        builder.endObject();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBoostFieldMapper.java, +import org.elasticsearch.util.json.JsonBuilder;, +, +    @Override public void toJson(JsonBuilder builder, Params params) throws IOException {, +        // for now, don't output it at all, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBinaryFieldMapper.java, +import org.elasticsearch.util.json.JsonBuilder;, +, +    @Override public void toJson(JsonBuilder builder, Params params) throws IOException {, +        builder.startObject(names.name());, +        builder.field("type", jsonType());, +        builder.field("indexName", names.indexNameClean());, +        builder.endObject();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBoostFieldMapper.java, +import org.elasticsearch.util.json.JsonBuilder;, +, +    @Override public void toJson(JsonBuilder builder, Params params) throws IOException {, +        // for now, don't output it at all, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDateFieldMapper.java, +import org.elasticsearch.util.joda.FormatDateTimeFormatter;, +import org.elasticsearch.util.joda.Joda;, +import org.elasticsearch.util.json.JsonBuilder;, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("dateOptionalTime");, +        protected FormatDateTimeFormatter dateTimeFormatter = Defaults.DATE_TIME_FORMATTER;, +        public Builder dateTimeFormatter(FormatDateTimeFormatter dateTimeFormatter) {, +    private final FormatDateTimeFormatter dateTimeFormatter;, +    protected JsonDateFieldMapper(Names names, FormatDateTimeFormatter dateTimeFormatter, int precisionStep,, +                new NamedAnalyzer("_date/" + precisionStep, new NumericDateAnalyzer(precisionStep, dateTimeFormatter.formatter())),, +                new NamedAnalyzer("_date/max", new NumericDateAnalyzer(Integer.MAX_VALUE, dateTimeFormatter.formatter())));, +        return dateTimeFormatter.formatter().print(value(field));, +        return NumericUtils.longToPrefixCoded(dateTimeFormatter.formatter().parseMillis(value));, +                lowerTerm == null ? null : dateTimeFormatter.formatter().parseMillis(lowerTerm),, +                upperTerm == null ? null : dateTimeFormatter.formatter().parseMillis(upperTerm),, +                lowerTerm == null ? null : dateTimeFormatter.formatter().parseMillis(lowerTerm),, +                upperTerm == null ? null : dateTimeFormatter.formatter().parseMillis(upperTerm),, +        long value = dateTimeFormatter.formatter().parseMillis(dateAsString);, +, +    @Override protected void doJsonBody(JsonBuilder builder) throws IOException {, +        super.doJsonBody(builder);, +        builder.field("format", dateTimeFormatter.format());, +        if (nullValue != null) {, +            builder.field("nullValue", nullValue);, +        }, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBinaryFieldMapper.java, +import org.elasticsearch.util.json.JsonBuilder;, +, +    @Override public void toJson(JsonBuilder builder, Params params) throws IOException {, +        builder.startObject(names.name());, +        builder.field("type", jsonType());, +        builder.field("indexName", names.indexNameClean());, +        builder.endObject();, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonBoostFieldMapper.java, +import org.elasticsearch.util.json.JsonBuilder;, +, +    @Override public void toJson(JsonBuilder builder, Params params) throws IOException {, +        // for now, don't output it at all, +    }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/mapper/json/JsonDateFieldMapper.java, +import org.elasticsearch.util.joda.FormatDateTimeFormatter;, +import org.elasticsearch.util.joda.Joda;, +import org.elasticsearch.util.json.JsonBuilder;, +        public static final FormatDateTimeFormatter DATE_TIME_FORMATTER = Joda.forPattern("dateOptionalTime");, +        protected FormatDateTimeFormatter dateTimeFormatter = Defaults.DATE_TIME_FORMATTER;, +        public Builder dateTimeFormatter(FormatDateTimeFormatter dateTimeFormatter) {, +    private final FormatDateTimeFormatter dateTimeFormatter;, +    protected JsonDateFieldMapper(Names names, FormatDateTimeFormatter dateTimeFormatter, int precisionStep,, +                new NamedAnalyzer("_date/" + precisionStep, new NumericDateAnalyzer(precisionStep, dateTimeFormatter.formatter())),, +                new NamedAnalyzer("_date/max", new NumericDateAnalyzer(Integer.MAX_VALUE, dateTimeFormatter.formatter())));, +        return dateTimeFormatter.formatter().print(value(field));, +        return NumericUtils.longToPrefixCoded(dateTimeFormatter.formatter().parseMillis(value));, +                lowerTerm == null ? null : dateTimeFormatter.formatter().parseMillis(lowerTerm),, +                upperTerm == null ? null : dateTimeFormatter.formatter().parseMillis(upperTerm),, +                lowerTerm == null ? null : dateTimeFormatter.formatter().parseMillis(lowerTerm),, +                upperTerm == null ? null : dateTimeFormatter.formatter().parseMillis(upperTerm),, +        long value = dateTimeFormatter.formatter().parseMillis(dateAsString);, +, +    @Override protected void doJsonBody(JsonBuilder builder) throws IOException {]