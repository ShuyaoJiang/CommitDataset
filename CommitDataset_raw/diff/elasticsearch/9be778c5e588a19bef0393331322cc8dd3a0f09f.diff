[+++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +import java.util.StringJoiner;, +        if (logger.isWarnEnabled()) {, +            Header[] warnings = httpResponse.getHeaders("Warning");, +            if (warnings != null && warnings.length > 0) {, +                logger.warn(buildWarningMessage(request, host, warnings));, +            }, +        }, +    static String buildWarningMessage(HttpUriRequest request, HttpHost host, Header[] warnings) {, +        StringBuilder message = new StringBuilder("request [").append(request.getMethod()).append(" ").append(host), +                .append(getUri(request.getRequestLine())).append("] returned ").append(warnings.length).append(" warnings: ");, +        for (int i = 0; i < warnings.length; i++) {, +            if (i > 0) {, +                message.append(",");, +            }, +            message.append("[").append(warnings[i].getValue()).append("]");, +        }, +        return message.toString();, +    }, +, +++ b/client/rest/src/main/java/org/elasticsearch/client/RequestLogger.java, +import java.util.StringJoiner;, +        if (logger.isWarnEnabled()) {, +            Header[] warnings = httpResponse.getHeaders("Warning");, +            if (warnings != null && warnings.length > 0) {, +                logger.warn(buildWarningMessage(request, host, warnings));, +            }, +        }, +    static String buildWarningMessage(HttpUriRequest request, HttpHost host, Header[] warnings) {, +        StringBuilder message = new StringBuilder("request [").append(request.getMethod()).append(" ").append(host), +                .append(getUri(request.getRequestLine())).append("] returned ").append(warnings.length).append(" warnings: ");, +        for (int i = 0; i < warnings.length; i++) {, +            if (i > 0) {, +                message.append(",");, +            }, +            message.append("[").append(warnings[i].getValue()).append("]");, +        }, +        return message.toString();, +    }, +, +++ b/client/rest/src/test/java/org/elasticsearch/client/RequestLoggerTests.java, +import org.apache.http.Header;, +import org.apache.http.client.methods.HttpUriRequest;, +import org.apache.http.message.BasicHeader;, +import static org.junit.Assert.assertEquals;, +        HttpHost host = new HttpHost("localhost", 9200, randomBoolean() ? "http" : "https");, +        HttpUriRequest request = randomHttpRequest(uri);, +        boolean hasBody = request instanceof HttpEntityEnclosingRequest && randomBoolean();, +            switch(randomIntBetween(0, 3)) {, +        int statusCode = randomIntBetween(200, 599);, +        int numHeaders = randomIntBetween(0, 3);, +, +    public void testResponseWarnings() throws Exception {, +        HttpHost host = new HttpHost("localhost", 9200);, +        HttpUriRequest request = randomHttpRequest(new URI("/index/type/_api"));, +        int numWarnings = randomIntBetween(1, 5);, +        StringBuilder expected = new StringBuilder("request [").append(request.getMethod()).append(" ").append(host), +                .append("/index/type/_api] returned ").append(numWarnings).append(" warnings: ");, +        Header[] warnings = new Header[numWarnings];, +        for (int i = 0; i < numWarnings; i++) {, +            String warning = "this is warning number " + i;, +            warnings[i] = new BasicHeader("Warning", warning);, +            if (i > 0) {, +                expected.append(",");, +            }, +            expected.append("[").append(warning).append("]");, +        }, +        assertEquals(expected.toString(), RequestLogger.buildWarningMessage(request, host, warnings));, +    }, +, +    private static HttpUriRequest randomHttpRequest(URI uri) {, +        int requestType = randomIntBetween(0, 7);, +        switch(requestType) {, +            case 0:, +                return new HttpGetWithEntity(uri);, +            case 1:, +                return new HttpPost(uri);, +            case 2:, +                return new HttpPut(uri);, +            case 3:, +                return new HttpDeleteWithEntity(uri);, +            case 4:, +                return new HttpHead(uri);, +            case 5:, +                return new HttpTrace(uri);, +            case 6:, +                return new HttpOptions(uri);, +            case 7:, +                return new HttpPatch(uri);, +            default:, +                throw new UnsupportedOperationException();, +        }, +    }]