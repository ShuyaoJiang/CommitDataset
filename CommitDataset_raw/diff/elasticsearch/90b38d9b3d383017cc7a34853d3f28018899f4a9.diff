[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/CopyExecutionStateStep.java, +    public static final String NAME = "copy-execution-state";, +        if (targetIndexMetaData == null) {, +            logger.warn("[{}] index [{}] unable to copy execution state to target index [{}] as target index does not exist",, +                getKey().getAction(), index.getName(), targetIndexName);, +            throw new IllegalStateException("unable to copy execution state from [" + index.getName() +, +                "] to [" + targetIndexName + "] as target index does not exist");, +        }, +, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/CopyExecutionStateStep.java, +    public static final String NAME = "copy-execution-state";, +        if (targetIndexMetaData == null) {, +            logger.warn("[{}] index [{}] unable to copy execution state to target index [{}] as target index does not exist",, +                getKey().getAction(), index.getName(), targetIndexName);, +            throw new IllegalStateException("unable to copy execution state from [" + index.getName() +, +                "] to [" + targetIndexName + "] as target index does not exist");, +        }, +, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/CopyExecutionStateStepTests.java, +import static org.hamcrest.Matchers.equalTo;, +    public void testPerformActionWithNoTarget() {, +        CopyExecutionStateStep step = createRandomInstance();, +        String indexName = randomAlphaOfLengthBetween(5, 20);, +        Map<String, String> customMetadata = createCustomMetadata();, +, +        IndexMetaData originalIndexMetaData = IndexMetaData.builder(indexName), +            .settings(settings(Version.CURRENT)).numberOfShards(randomIntBetween(1,5)), +            .numberOfReplicas(randomIntBetween(1,5)), +            .putCustom(ILM_CUSTOM_METADATA_KEY, customMetadata), +            .build();, +        ClusterState originalClusterState = ClusterState.builder(ClusterName.DEFAULT), +            .metaData(MetaData.builder(), +                .put(originalIndexMetaData, false)), +            .build();, +, +        IllegalStateException e = expectThrows(IllegalStateException.class,, +            () -> step.performAction(originalIndexMetaData.getIndex(), originalClusterState));, +, +        assertThat(e.getMessage(), equalTo("unable to copy execution state from [" +, +            indexName + "] to [" + step.getShrunkIndexPrefix() + indexName + "] as target index does not exist"));, +    }]