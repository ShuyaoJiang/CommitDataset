[+++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +import org.elasticsearch.common.settings.AbstractScopedSettings;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +, +import java.util.Locale;, +import java.util.Map;, +import java.util.function.Consumer;, +import java.util.regex.Pattern;, +    public static final Setting<LogLevel> LOG_DEFAULT_LEVEL_SETTING = new Setting<>("logger.level", LogLevel.INFO.name(), LogLevel::parse, false, Setting.Scope.CLUSTER);, +    public static final Setting<LogLevel> LOG_LEVEL_SETTING = new Setting<LogLevel>("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER) {, +        private final Pattern KEY_PATTERN = Pattern.compile("^logger[.](?:[-\\w]+[.])*[-\\w]+$$");, +, +        @Override, +        protected boolean isGroupSetting() {, +            return true;, +        }, +, +        @Override, +        public boolean match(String toTest) {, +            return KEY_PATTERN.matcher(toTest).matches();, +        }, +, +        @Override, +        public Setting<LogLevel> getConcreteSetting(String key) {, +            if (match(key)) {, +                return new Setting<>(key, LogLevel.WARN.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +            } else {, +                throw new IllegalArgumentException("key must match setting but didn't ["+key +"]");, +            }, +        }, +    };, +, +, +    public enum LogLevel {, +        WARN, TRACE, INFO, DEBUG, ERROR;, +        public static LogLevel parse(String level) {, +            return valueOf(level.toUpperCase(Locale.ROOT));, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +import org.elasticsearch.common.settings.AbstractScopedSettings;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +, +import java.util.Locale;, +import java.util.Map;, +import java.util.function.Consumer;, +import java.util.regex.Pattern;, +    public static final Setting<LogLevel> LOG_DEFAULT_LEVEL_SETTING = new Setting<>("logger.level", LogLevel.INFO.name(), LogLevel::parse, false, Setting.Scope.CLUSTER);, +    public static final Setting<LogLevel> LOG_LEVEL_SETTING = new Setting<LogLevel>("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER) {, +        private final Pattern KEY_PATTERN = Pattern.compile("^logger[.](?:[-\\w]+[.])*[-\\w]+$$");, +, +        @Override, +        protected boolean isGroupSetting() {, +            return true;, +        }, +, +        @Override, +        public boolean match(String toTest) {, +            return KEY_PATTERN.matcher(toTest).matches();, +        }, +, +        @Override, +        public Setting<LogLevel> getConcreteSetting(String key) {, +            if (match(key)) {, +                return new Setting<>(key, LogLevel.WARN.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);, +            } else {, +                throw new IllegalArgumentException("key must match setting but didn't ["+key +"]");, +            }, +        }, +    };, +, +, +    public enum LogLevel {, +        WARN, TRACE, INFO, DEBUG, ERROR;, +        public static LogLevel parse(String level) {, +            return valueOf(level.toUpperCase(Locale.ROOT));, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/common/settings/AbstractScopedSettings.java, +        addSettingsUpdater(setting.newUpdater(consumer, logger, validator));, +    }, +, +    synchronized void addSettingsUpdater(SettingUpdater<?> updater) {, +        this.settingUpdaters.add(updater);, +        addSettingsUpdater(Setting.compoundUpdater(consumer, a, b, logger));, +                return entry.getValue().getConcreteSetting(key);, +++ b/core/src/main/java/org/elasticsearch/common/logging/ESLoggerFactory.java, +import org.elasticsearch.common.settings.AbstractScopedSettings;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +, +import java.util.Locale;, +import java.util.Map;, +import java.util.function.Consumer;, +import java.util.regex.Pattern;, +    public static final Setting<LogLevel> LOG_DEFAULT_LEVEL_SETTING = new Setting<>("logger.level", LogLevel.INFO.name(), LogLevel::parse, false, Setting.Scope.CLUSTER);, +    public static final Setting<LogLevel> LOG_LEVEL_SETTING = new Setting<LogLevel>("logger.", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER) {, +        private final Pattern KEY_PATTERN = Pattern.compile("^logger[.](?:[-\\w]+[.])*[-\\w]+$$");]