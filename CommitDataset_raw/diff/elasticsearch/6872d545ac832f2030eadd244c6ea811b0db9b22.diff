[+++ b/core/src/main/java/org/elasticsearch/monitor/Probes.java, +package org.elasticsearch.monitor;, +, +import java.lang.management.OperatingSystemMXBean;, +import java.lang.reflect.Method;, +, +public class Probes {, +    public static short getLoadAndScaleToPercent(Method method, OperatingSystemMXBean osMxBean) {, +        if (method != null) {, +            try {, +                double load = (double) method.invoke(osMxBean);, +                if (load >= 0) {, +                    return (short) (load * 100);, +                }, +            } catch (Throwable t) {, +                return -1;, +            }, +        }, +        return -1;, +    }, +}, +++ b/core/src/main/java/org/elasticsearch/monitor/Probes.java, +package org.elasticsearch.monitor;, +, +import java.lang.management.OperatingSystemMXBean;, +import java.lang.reflect.Method;, +, +public class Probes {, +    public static short getLoadAndScaleToPercent(Method method, OperatingSystemMXBean osMxBean) {, +        if (method != null) {, +            try {, +                double load = (double) method.invoke(osMxBean);, +                if (load >= 0) {, +                    return (short) (load * 100);, +                }, +            } catch (Throwable t) {, +                return -1;, +            }, +        }, +        return -1;, +    }, +}, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import org.elasticsearch.monitor.Probes;, +    private static final Method getSystemCpuLoad;, +        getSystemCpuLoad = getMethod("getSystemCpuLoad");, +    public short getSystemCpuPercent() {, +        return Probes.getLoadAndScaleToPercent(getSystemCpuLoad, osMxBean);, +    }, +, +        stats.cpu = new OsStats.Cpu();, +        stats.cpu.percent = getSystemCpuPercent();, +        stats.cpu.loadAverage = getSystemLoadAverage();, +++ b/core/src/main/java/org/elasticsearch/monitor/Probes.java, +package org.elasticsearch.monitor;, +, +import java.lang.management.OperatingSystemMXBean;, +import java.lang.reflect.Method;, +, +public class Probes {, +    public static short getLoadAndScaleToPercent(Method method, OperatingSystemMXBean osMxBean) {, +        if (method != null) {, +            try {, +                double load = (double) method.invoke(osMxBean);, +                if (load >= 0) {, +                    return (short) (load * 100);, +                }, +            } catch (Throwable t) {, +                return -1;, +            }, +        }, +        return -1;, +    }, +}, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java, +import org.elasticsearch.monitor.Probes;, +    private static final Method getSystemCpuLoad;, +        getSystemCpuLoad = getMethod("getSystemCpuLoad");, +    public short getSystemCpuPercent() {, +        return Probes.getLoadAndScaleToPercent(getSystemCpuLoad, osMxBean);, +    }, +, +        stats.cpu = new OsStats.Cpu();, +        stats.cpu.percent = getSystemCpuPercent();, +        stats.cpu.loadAverage = getSystemLoadAverage();, +++ b/core/src/main/java/org/elasticsearch/monitor/os/OsStats.java, +    Cpu cpu = null;, +    public Cpu getCpu() { return cpu; }, +        static final XContentBuilderString CPU = new XContentBuilderString("cpu");, +        static final XContentBuilderString PERCENT = new XContentBuilderString("percent");, +        if (cpu != null) {, +            builder.startObject(Fields.CPU);, +            builder.field(Fields.PERCENT, cpu.getPercent());, +            builder.field(Fields.LOAD_AVERAGE, cpu.getLoadAverage());, +            builder.endObject();, +        }, +        cpu = in.readOptionalStreamable(Cpu::new);, +        out.writeOptionalStreamable(cpu);, +    public static class Cpu implements Streamable {, +        short percent = -1;]