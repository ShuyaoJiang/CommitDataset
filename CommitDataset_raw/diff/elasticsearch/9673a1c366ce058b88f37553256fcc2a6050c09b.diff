[+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.fielddata.FieldDataType;, +, +        public T fieldDataSettings(String settings) {, +            return super.fieldDataSettings(settings);, +        }, +        @Nullable, +        protected Settings fieldDataSettings;, +        protected T fieldDataSettings(String settings) {, +            this.fieldDataSettings = ImmutableSettings.builder().loadFromDelimitedString(settings, ';').build();, +            return builder;, +        }, +, +    protected Settings customFieldDataSettings;, +    protected FieldDataType fieldDataType;, +, +                                  NamedAnalyzer searchAnalyzer, PostingsFormatProvider postingsFormat, SimilarityProvider similarity,, +                                  @Nullable Settings fieldDataSettings) {, +, +        this.customFieldDataSettings = fieldDataSettings;, +        if (fieldDataSettings == null) {, +            this.fieldDataType = defaultFieldDataType();, +        } else {, +            // create a new field data type, with the default settings as well as the "new ones", +            this.fieldDataType = new FieldDataType(defaultFieldDataType().getType(),, +                    ImmutableSettings.builder().put(defaultFieldDataType().getSettings()).put(fieldDataSettings), +            );, +        }, +    public abstract FieldDataType defaultFieldDataType();, +, +    @Override, +    public final FieldDataType fieldDataType() {, +        return fieldDataType;, +    }, +, +            if (fieldMergeWith.customFieldDataSettings != null) {, +                this.customFieldDataSettings = fieldMergeWith.customFieldDataSettings;, +                this.fieldDataType = new FieldDataType(defaultFieldDataType().getType(),, +                        ImmutableSettings.builder().put(defaultFieldDataType().getSettings()).put(this.customFieldDataSettings), +                );, +            }, +, +        if (customFieldDataSettings != null) {, +            builder.field("fielddata", customFieldDataSettings.toDelimitedString(';'));, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java, +import org.elasticsearch.common.settings.ImmutableSettings;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.index.fielddata.FieldDataType;, +, +        public T fieldDataSettings(String settings) {, +            return super.fieldDataSettings(settings);, +        }, +        @Nullable, +        protected Settings fieldDataSettings;, +        protected T fieldDataSettings(String settings) {, +            this.fieldDataSettings = ImmutableSettings.builder().loadFromDelimitedString(settings, ';').build();, +            return builder;, +        }, +, +    protected Settings customFieldDataSettings;, +    protected FieldDataType fieldDataType;, +, +                                  NamedAnalyzer searchAnalyzer, PostingsFormatProvider postingsFormat, SimilarityProvider similarity,, +                                  @Nullable Settings fieldDataSettings) {, +, +        this.customFieldDataSettings = fieldDataSettings;, +        if (fieldDataSettings == null) {, +            this.fieldDataType = defaultFieldDataType();, +        } else {, +            // create a new field data type, with the default settings as well as the "new ones", +            this.fieldDataType = new FieldDataType(defaultFieldDataType().getType(),, +                    ImmutableSettings.builder().put(defaultFieldDataType().getSettings()).put(fieldDataSettings), +            );, +        }, +    public abstract FieldDataType defaultFieldDataType();, +, +    @Override, +    public final FieldDataType fieldDataType() {, +        return fieldDataType;, +    }, +, +            if (fieldMergeWith.customFieldDataSettings != null) {, +                this.customFieldDataSettings = fieldMergeWith.customFieldDataSettings;, +                this.fieldDataType = new FieldDataType(defaultFieldDataType().getType(),, +                        ImmutableSettings.builder().put(defaultFieldDataType().getSettings()).put(this.customFieldDataSettings), +                );, +            }, +, +        if (customFieldDataSettings != null) {, +            builder.field("fielddata", customFieldDataSettings.toDelimitedString(';'));, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java, +import org.elasticsearch.index.fielddata.FieldDataType;, +        super(names, 1.0f, fieldType, null, null, provider, null, null);, +    public FieldDataType defaultFieldDataType() {, +        return null;, +++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java]