[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/PercentilesAggregationBuilder.java, +import java.util.function.Consumer;, +    private static final ObjectParser<InternalBuilder, Void> PARSER;, +        InternalBuilder internal = PARSER.parse(parser, new InternalBuilder(aggregationName), null);, +        // we need to return a PercentilesAggregationBuilder for equality checks to work, +        PercentilesAggregationBuilder returnedAgg = new PercentilesAggregationBuilder(internal.name);, +        setIfNotNull(returnedAgg::valueType, internal.valueType());, +        setIfNotNull(returnedAgg::format, internal.format());, +        setIfNotNull(returnedAgg::missing, internal.missing());, +        setIfNotNull(returnedAgg::field, internal.field());, +        setIfNotNull(returnedAgg::script, internal.script());, +        setIfNotNull(returnedAgg::method, internal.method());, +        setIfNotNull(returnedAgg::percentiles, internal.percentiles());, +        returnedAgg.keyed(internal.keyed());, +        returnedAgg.compression(internal.compression());, +        returnedAgg.numberOfSignificantValueDigits(internal.numberOfSignificantValueDigits());, +        return returnedAgg;, +    }, +, +    private static <T> void setIfNotNull(Consumer<T> consumer, T value) {, +        if (value != null) {, +            consumer.accept(value);, +        }, +        if (percents.length == 0) {, +            throw new IllegalArgumentException("[percents] must not be empty: [" + name + "]");, +        }, +, +    /**, +     * Private specialization of this builder that should only be used by the parser, this enables us to, +     * overwrite {@link #method()} to check that it is not defined twice in xContent and throw, +     * an error, while the Java API should allow to overwrite the method, +     */, +    private static class InternalBuilder extends PercentilesAggregationBuilder {, +, +        private boolean setOnce = false;, +, +        private InternalBuilder(String name) {, +            super(name);, +        }, +, +        @Override, +        public InternalBuilder method(PercentilesMethod method) {, +            if (setOnce == false) {, +                super.method(method);, +                setOnce = true;, +                return this;, +            } else {, +                throw new IllegalStateException("Only one percentiles method should be declared.");, +            }, +        }, +    }, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/percentiles/PercentilesAggregationBuilder.java, +import java.util.function.Consumer;, +    private static final ObjectParser<InternalBuilder, Void> PARSER;, +        InternalBuilder internal = PARSER.parse(parser, new InternalBuilder(aggregationName), null);, +        // we need to return a PercentilesAggregationBuilder for equality checks to work, +        PercentilesAggregationBuilder returnedAgg = new PercentilesAggregationBuilder(internal.name);, +        setIfNotNull(returnedAgg::valueType, internal.valueType());, +        setIfNotNull(returnedAgg::format, internal.format());, +        setIfNotNull(returnedAgg::missing, internal.missing());, +        setIfNotNull(returnedAgg::field, internal.field());, +        setIfNotNull(returnedAgg::script, internal.script());, +        setIfNotNull(returnedAgg::method, internal.method());, +        setIfNotNull(returnedAgg::percentiles, internal.percentiles());, +        returnedAgg.keyed(internal.keyed());, +        returnedAgg.compression(internal.compression());, +        returnedAgg.numberOfSignificantValueDigits(internal.numberOfSignificantValueDigits());, +        return returnedAgg;, +    }, +, +    private static <T> void setIfNotNull(Consumer<T> consumer, T value) {, +        if (value != null) {, +            consumer.accept(value);, +        }, +        if (percents.length == 0) {, +            throw new IllegalArgumentException("[percents] must not be empty: [" + name + "]");, +        }, +, +    /**, +     * Private specialization of this builder that should only be used by the parser, this enables us to, +     * overwrite {@link #method()} to check that it is not defined twice in xContent and throw, +     * an error, while the Java API should allow to overwrite the method, +     */, +    private static class InternalBuilder extends PercentilesAggregationBuilder {, +, +        private boolean setOnce = false;, +, +        private InternalBuilder(String name) {, +            super(name);, +        }, +, +        @Override, +        public InternalBuilder method(PercentilesMethod method) {, +            if (setOnce == false) {, +                super.method(method);, +                setOnce = true;, +                return this;, +            } else {, +                throw new IllegalStateException("Only one percentiles method should be declared.");, +            }]