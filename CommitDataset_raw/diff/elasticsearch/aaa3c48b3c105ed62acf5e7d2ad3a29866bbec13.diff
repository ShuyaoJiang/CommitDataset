[+++ b/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        indices(indices);, +        indices(indices);, +        if (indices == null) {, +            throw new ElasticSearchIllegalArgumentException("indices must not be null");, +        } else {, +            for (int i = 0; i < indices.length; i++) {, +                if (indices[i] == null) {, +                    throw new ElasticSearchIllegalArgumentException("indices[" + i +"] must not be null");, +                }, +            }, +        }, +++ b/src/main/java/org/elasticsearch/action/search/SearchRequest.java, +        indices(indices);, +        indices(indices);, +        if (indices == null) {, +            throw new ElasticSearchIllegalArgumentException("indices must not be null");, +        } else {, +            for (int i = 0; i < indices.length; i++) {, +                if (indices[i] == null) {, +                    throw new ElasticSearchIllegalArgumentException("indices[" + i +"] must not be null");, +                }, +            }, +        }, +++ b/src/test/java/org/elasticsearch/test/integration/search/simple/SimpleSearchTests.java, +import org.elasticsearch.ElasticSearchIllegalArgumentException;, +    , +    @Test, +    public void testSearchNullIndex() {, +        try {, +            client.prepareSearch((String)null).setQuery(QueryBuilders.termQuery("_id", "XXX1")).execute().actionGet();, +            assert false;, +        } catch (ElasticSearchIllegalArgumentException e) {, +            , +        }, +        , +        try {, +            client.prepareSearch((String[])null).setQuery(QueryBuilders.termQuery("_id", "XXX1")).execute().actionGet();, +            assert false;, +        } catch (ElasticSearchIllegalArgumentException e) {, +            , +        }, +    }, +]