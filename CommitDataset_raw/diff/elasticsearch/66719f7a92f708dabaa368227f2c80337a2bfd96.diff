[+++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/arithmetic/ArithmeticFunction.java, +                paramsBuilder(), +                .script(leftScript.params()).script(rightScript.params()), +                .build(), dataType());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/arithmetic/ArithmeticFunction.java, +                paramsBuilder(), +                .script(leftScript.params()).script(rightScript.params()), +                .build(), dataType());, +++ b/sql/server/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/datetime/DateTimeFunction.java, +import org.elasticsearch.xpack.sql.expression.function.scalar.script.ParamsBuilder;, +        ParamsBuilder params = paramsBuilder();, +        String template = null;, +            // TODO: it would be nice to be able to externalize the extract function and reuse the script across all extractors, +            template = formatTemplate("doc[{}].value.get" + extractFunction() + "()");, +            params.variable(field.name());, +            // all variables are externalized to reuse the script across invocations, +            // the actual script is ZonedDateTime.ofInstant(Instant.ofEpochMilli(<insert doc field>.value.millis), ZoneId.of(<insert user tz>)).get(ChronoField.get(MONTH_OF_YEAR)), +            , +            template = formatTemplate("ZonedDateTime.ofInstant(Instant.ofEpochMilli(doc[{}].value.millis), ZoneId.of({})).get(ChronoField.valueOf({}))");, +            params.variable(field.name()), +                  .variable(timeZone.getID()), +                  .variable(chronoField().name());, +        , +        return new ScriptTemplate(template, params.build(), dataType());, +    }, +, +    @Override, +    protected String chainScalarTemplate(String template) {, +        throw new UnsupportedOperationException();]