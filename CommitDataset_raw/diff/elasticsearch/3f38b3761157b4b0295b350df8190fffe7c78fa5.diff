[+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/UnfollowFollowIndexStep.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.ElasticsearchException;, +import java.util.List;, +, +    private static final Logger logger = LogManager.getLogger(UnfollowFollowIndexStep.class);, +            exception -> {, +                if (exception instanceof ElasticsearchException, +                        && ((ElasticsearchException) exception).getMetadata("es.failed_to_remove_retention_leases") != null) {, +                    List<String> leasesNotRemoved = ((ElasticsearchException) exception), +                        .getMetadata("es.failed_to_remove_retention_leases");, +                    logger.debug("failed to remove leader retention lease(s) {} while unfollowing index [{}], " +, +                            "continuing with lifecycle execution",, +                        leasesNotRemoved, followerIndex);, +                    listener.onResponse(true);, +                } else {, +                    listener.onFailure(exception);, +                }, +            }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/UnfollowFollowIndexStep.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.ElasticsearchException;, +import java.util.List;, +, +    private static final Logger logger = LogManager.getLogger(UnfollowFollowIndexStep.class);, +            exception -> {, +                if (exception instanceof ElasticsearchException, +                        && ((ElasticsearchException) exception).getMetadata("es.failed_to_remove_retention_leases") != null) {, +                    List<String> leasesNotRemoved = ((ElasticsearchException) exception), +                        .getMetadata("es.failed_to_remove_retention_leases");, +                    logger.debug("failed to remove leader retention lease(s) {} while unfollowing index [{}], " +, +                            "continuing with lifecycle execution",, +                        leasesNotRemoved, followerIndex);, +                    listener.onResponse(true);, +                } else {, +                    listener.onFailure(exception);, +                }, +            }, +++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/indexlifecycle/UnfollowFollowIndexStepTests.java, +import org.elasticsearch.ElasticsearchException;, +import java.util.concurrent.atomic.AtomicBoolean;, +import java.util.concurrent.atomic.AtomicReference;, +, +    public void testFailureToReleaseRetentionLeases() {, +        IndexMetaData indexMetadata = IndexMetaData.builder("follower-index"), +            .settings(settings(Version.CURRENT).put(LifecycleSettings.LIFECYCLE_INDEXING_COMPLETE, "true")), +            .putCustom(CCR_METADATA_KEY, Collections.emptyMap()), +            .numberOfShards(1), +            .numberOfReplicas(0), +            .build();, +, +        Client client = Mockito.mock(Client.class);, +        AdminClient adminClient = Mockito.mock(AdminClient.class);, +        Mockito.when(client.admin()).thenReturn(adminClient);, +        IndicesAdminClient indicesClient = Mockito.mock(IndicesAdminClient.class);, +        Mockito.when(adminClient.indices()).thenReturn(indicesClient);, +, +        // Mock unfollow api call:, +        ElasticsearchException error = new ElasticsearchException("text exception");, +        error.addMetadata("es.failed_to_remove_retention_leases", randomAlphaOfLength(10));, +        Mockito.doAnswer(invocation -> {, +            UnfollowAction.Request request = (UnfollowAction.Request) invocation.getArguments()[1];, +            assertThat(request.getFollowerIndex(), equalTo("follower-index"));, +            ActionListener listener = (ActionListener) invocation.getArguments()[2];, +            listener.onFailure(error);, +            return null;, +        }).when(client).execute(Mockito.same(UnfollowAction.INSTANCE), Mockito.any(), Mockito.any());, +, +        AtomicBoolean completed = new AtomicBoolean(false);, +        AtomicReference<Exception> failure = new AtomicReference<>();, +        UnfollowFollowIndexStep step = new UnfollowFollowIndexStep(randomStepKey(), randomStepKey(), client);, +        step.performAction(indexMetadata, null, null, new AsyncActionStep.Listener() {, +            @Override, +            public void onResponse(boolean complete) {, +                completed.set(complete);, +            }, +, +            @Override, +            public void onFailure(Exception e) {, +                failure.set(e);, +            }, +        });, +        assertThat(completed.get(), equalTo(true));, +        assertThat(failure.get(), nullValue());, +    }, +++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/indexlifecycle/UnfollowFollowIndexStep.java, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.Logger;, +import org.elasticsearch.ElasticsearchException;, +import java.util.List;, +, +    private static final Logger logger = LogManager.getLogger(UnfollowFollowIndexStep.class);, +            exception -> {, +                if (exception instanceof ElasticsearchException, +                        && ((ElasticsearchException) exception).getMetadata("es.failed_to_remove_retention_leases") != null) {, +                    List<String> leasesNotRemoved = ((ElasticsearchException) exception), +                        .getMetadata("es.failed_to_remove_retention_leases");, +                    logger.debug("failed to remove leader retention lease(s) {} while unfollowing index [{}], " +]