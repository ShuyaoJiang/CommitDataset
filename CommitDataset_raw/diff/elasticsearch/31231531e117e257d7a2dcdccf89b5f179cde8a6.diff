[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                        fragments = highlighter.getBestFragments(fieldQuery, reader, docId, mapper.names().indexName(), field.fragmentCharSize(), numberOfFragments);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/search/highlight/HighlightPhase.java, +                        fragments = highlighter.getBestFragments(fieldQuery, reader, docId, mapper.names().indexName(), field.fragmentCharSize(), numberOfFragments);, +++ b/modules/test/integration/src/test/java/org/elasticsearch/test/integration/search/highlight/HighlighterSearchTests.java, +import org.elasticsearch.ElasticSearchException;, +import org.elasticsearch.action.search.SearchType;, +    @Test public void testFastVectorHighlighterManyDocs() throws Exception {, +        try {, +            client.admin().indices().prepareDelete("test").execute().actionGet();, +        } catch (ElasticSearchException e) {, +            assertThat(e.unwrapCause(), instanceOf(IndexMissingException.class));, +        }, +        client.admin().indices().prepareCreate("test").addMapping("type1", type1TermVectorMapping()).execute().actionGet();, +        client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().execute().actionGet();, +, +        int COUNT = 100;, +        logger.info("--> indexing docs");, +        for (int i = 0; i < COUNT; i++) {, +            client.prepareIndex("test", "type1", Integer.toString(i)).setSource("field1", "test " + i).execute().actionGet();, +            if (i % 5 == 0) {, +                // flush so we get updated readers and segmented readers, +                client.admin().indices().prepareFlush().execute().actionGet();, +            }, +        }, +, +        client.admin().indices().prepareRefresh().execute().actionGet();, +, +        logger.info("--> searching explicitly on field1 and highlighting on it");, +        SearchResponse searchResponse = client.prepareSearch(), +                .setSize(COUNT), +                .setQuery(termQuery("field1", "test")), +                .addHighlightedField("field1", 100, 0), +                .execute().actionGet();, +        assertThat(searchResponse.hits().totalHits(), equalTo((long) COUNT));, +        assertThat(searchResponse.hits().hits().length, equalTo(COUNT));, +        for (SearchHit hit : searchResponse.hits()) {, +            assertThat(hit.highlightFields().get("field1").fragments()[0], equalTo("<em>test</em> " + hit.id()));, +        }, +, +        logger.info("--> searching explicitly on field1 and highlighting on it, with DFS");, +        searchResponse = client.prepareSearch(), +                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH), +                .setSize(COUNT), +                .setQuery(termQuery("field1", "test")), +                .addHighlightedField("field1", 100, 0), +                .execute().actionGet();, +        assertThat(searchResponse.hits().totalHits(), equalTo((long) COUNT));, +        assertThat(searchResponse.hits().hits().length, equalTo(COUNT));, +        for (SearchHit hit : searchResponse.hits()) {, +            assertThat(hit.highlightFields().get("field1").fragments()[0], equalTo("<em>test</em> " + hit.id()));, +        }, +, +        logger.info("--> searching explicitly _all and highlighting on _all");, +        searchResponse = client.prepareSearch(), +                .setSize(COUNT), +                .setQuery(termQuery("_all", "test")), +                .addHighlightedField("_all", 100, 0), +                .execute().actionGet();, +        assertThat(searchResponse.hits().totalHits(), equalTo((long) COUNT));, +        assertThat(searchResponse.hits().hits().length, equalTo(COUNT));, +        for (SearchHit hit : searchResponse.hits()) {, +            assertThat(hit.highlightFields().get("_all").fragments()[0], equalTo("<em>test</em> " + hit.id() + " "));, +        }, +    }, +]