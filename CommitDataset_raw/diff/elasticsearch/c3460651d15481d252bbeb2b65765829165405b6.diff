[+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterAggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import java.util.Objects;, +        private QueryBuilder<?> filter;, +        public Factory(String name) {, +        }, +, +        /**, +         * Set the filter to use, only documents that match this filter will, +         * fall into the bucket defined by this {@link Filter} aggregation., +         */, +        public void filter(QueryBuilder<?> filter) {, +        /**, +         * Get the filter to use, only documents that match this filter will, +         * fall into the bucket defined by this {@link Filter} aggregation., +         */, +        public QueryBuilder<?> filter() {, +            return filter;, +        }, +, +            Query filter = this.filter.toQuery(context.searchContext().indexShard().getQueryShardContext());, +        @Override, +        protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {, +            if (filter != null) {, +                filter.toXContent(builder, params);, +            }, +            return builder;, +        }, +, +        @Override, +        protected AggregatorFactory doReadFrom(String name, StreamInput in) throws IOException {, +            Factory factory = new Factory(name);, +            factory.filter = in.readQuery();, +            return factory;, +        }, +, +        @Override, +        protected void doWriteTo(StreamOutput out) throws IOException {, +            out.writeQuery(filter);, +        }, +, +        @Override, +        protected int doHashCode() {, +            return Objects.hash(filter);, +        }, +, +        @Override, +        protected boolean doEquals(Object obj) {, +            Factory other = (Factory) obj;, +            return Objects.equals(filter, other.filter);, +        }, +, +++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterAggregator.java, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.index.query.QueryBuilder;, +import java.util.Objects;, +        private QueryBuilder<?> filter;, +        public Factory(String name) {, +        }, +, +        /**, +         * Set the filter to use, only documents that match this filter will, +         * fall into the bucket defined by this {@link Filter} aggregation., +         */, +        public void filter(QueryBuilder<?> filter) {, +        /**, +         * Get the filter to use, only documents that match this filter will, +         * fall into the bucket defined by this {@link Filter} aggregation., +         */, +        public QueryBuilder<?> filter() {, +            return filter;, +        }, +, +            Query filter = this.filter.toQuery(context.searchContext().indexShard().getQueryShardContext());, +        @Override, +        protected XContentBuilder internalXContent(XContentBuilder builder, Params params) throws IOException {, +            if (filter != null) {, +                filter.toXContent(builder, params);, +            }, +            return builder;, +        }, +, +        @Override, +        protected AggregatorFactory doReadFrom(String name, StreamInput in) throws IOException {, +            Factory factory = new Factory(name);, +            factory.filter = in.readQuery();, +            return factory;, +        }, +, +        @Override, +        protected void doWriteTo(StreamOutput out) throws IOException {, +            out.writeQuery(filter);, +        }, +, +        @Override]