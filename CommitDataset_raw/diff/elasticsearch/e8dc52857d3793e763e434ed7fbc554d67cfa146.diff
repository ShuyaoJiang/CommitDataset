[+++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +import com.google.common.collect.ImmutableMap;, +    private volatile ImmutableMap<String, char[]> users;, +    static ImmutableMap<String, char[]> parseFileLenient(Path path, ESLogger logger) {, +            return ImmutableMap.of();, +    public static ImmutableMap<String, char[]> parseFile(Path path, @Nullable ESLogger logger) {, +            return ImmutableMap.of();, +        ImmutableMap.Builder<String, char[]> users = ImmutableMap.builder();, +        ImmutableMap<String, char[]> usersMap = users.build();, +        if (usersMap.isEmpty()){, +        return usersMap;, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +import com.google.common.collect.ImmutableMap;, +    private volatile ImmutableMap<String, char[]> users;, +    static ImmutableMap<String, char[]> parseFileLenient(Path path, ESLogger logger) {, +            return ImmutableMap.of();, +    public static ImmutableMap<String, char[]> parseFile(Path path, @Nullable ESLogger logger) {, +            return ImmutableMap.of();, +        ImmutableMap.Builder<String, char[]> users = ImmutableMap.builder();, +        ImmutableMap<String, char[]> usersMap = users.build();, +        if (usersMap.isEmpty()){, +        return usersMap;, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserRolesStore.java, +import com.google.common.collect.ImmutableMap;, +import java.util.*;, +    private volatile ImmutableMap<String, String[]> userRoles;, +    static ImmutableMap<String, String[]> parseFileLenient(Path path, ESLogger logger) {, +            return ImmutableMap.of();, +    public static ImmutableMap<String, String[]> parseFile(Path path, @Nullable ESLogger logger) {, +            return ImmutableMap.of();, +        ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();, +            builder.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));, +        ImmutableMap<String, String[]> usersRoles = builder.build();, +        return usersRoles;, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +import com.google.common.collect.ImmutableMap;, +    private volatile ImmutableMap<String, char[]> users;, +    static ImmutableMap<String, char[]> parseFileLenient(Path path, ESLogger logger) {, +            return ImmutableMap.of();, +    public static ImmutableMap<String, char[]> parseFile(Path path, @Nullable ESLogger logger) {, +            return ImmutableMap.of();, +        ImmutableMap.Builder<String, char[]> users = ImmutableMap.builder();, +        ImmutableMap<String, char[]> usersMap = users.build();, +        if (usersMap.isEmpty()){, +        return usersMap;, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserRolesStore.java, +import com.google.common.collect.ImmutableMap;, +import java.util.*;, +    private volatile ImmutableMap<String, String[]> userRoles;, +    static ImmutableMap<String, String[]> parseFileLenient(Path path, ESLogger logger) {, +            return ImmutableMap.of();, +    public static ImmutableMap<String, String[]> parseFile(Path path, @Nullable ESLogger logger) {, +            return ImmutableMap.of();, +        ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();, +            builder.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));, +        ImmutableMap<String, String[]> usersRoles = builder.build();, +        return usersRoles;, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +import org.elasticsearch.common.cache.Cache;, +import org.elasticsearch.common.cache.CacheBuilder;, +import org.elasticsearch.common.cache.CacheLoader;, +            cache = CacheBuilder.<String, UserWithHash>builder(), +                    .setExpireAfterAccess(TimeUnit.MILLISECONDS.toNanos(ttl.getMillis())), +                    .setMaximumWeight(config.settings().getAsInt(CACHE_MAX_USERS_SETTING, DEFAULT_MAX_USERS)), +        CacheLoader<String, UserWithHash> callback = key -> {, +            UserWithHash userWithHash = cache.computeIfAbsent(token.principal(), callback);, +            userWithHash = cache.computeIfAbsent(token.principal(), callback);, +        } catch (ExecutionException ee) {, +        CacheLoader<String, UserWithHash> callback = key -> {, +            UserWithHash userWithHash = cache.computeIfAbsent(username, callback);, +        } catch (ExecutionException ee) {, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserPasswdStore.java, +import com.google.common.collect.ImmutableMap;, +    private volatile ImmutableMap<String, char[]> users;, +    static ImmutableMap<String, char[]> parseFileLenient(Path path, ESLogger logger) {, +            return ImmutableMap.of();, +    public static ImmutableMap<String, char[]> parseFile(Path path, @Nullable ESLogger logger) {, +            return ImmutableMap.of();, +        ImmutableMap.Builder<String, char[]> users = ImmutableMap.builder();, +        ImmutableMap<String, char[]> usersMap = users.build();, +        if (usersMap.isEmpty()){, +        return usersMap;, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/esusers/FileUserRolesStore.java, +import com.google.common.collect.ImmutableMap;, +import java.util.*;, +    private volatile ImmutableMap<String, String[]> userRoles;, +    static ImmutableMap<String, String[]> parseFileLenient(Path path, ESLogger logger) {, +            return ImmutableMap.of();, +    public static ImmutableMap<String, String[]> parseFile(Path path, @Nullable ESLogger logger) {, +            return ImmutableMap.of();, +        ImmutableMap.Builder<String, String[]> builder = ImmutableMap.builder();, +            builder.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));, +        ImmutableMap<String, String[]> usersRoles = builder.build();, +        return usersRoles;, +++ b/shield/src/main/java/org/elasticsearch/shield/authc/support/CachingUsernamePasswordRealm.java, +import org.elasticsearch.common.cache.Cache;, +import org.elasticsearch.common.cache.CacheBuilder;, +import org.elasticsearch.common.cache.CacheLoader;, +            cache = CacheBuilder.<String, UserWithHash>builder(), +                    .setExpireAfterAccess(TimeUnit.MILLISECONDS.toNanos(ttl.getMillis()))]