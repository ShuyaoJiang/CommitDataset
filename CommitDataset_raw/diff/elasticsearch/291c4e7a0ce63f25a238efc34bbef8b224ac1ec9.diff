[+++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRestoreSourceService.java, +                    indexInput.readBytes(ref.bytes, ref.offset, ref.length);, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRestoreSourceService.java, +                    indexInput.readBytes(ref.bytes, ref.offset, ref.length);, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +++ b/x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRestoreSourceService.java, +                    indexInput.readBytes(ref.bytes, ref.offset, ref.length);, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/CcrIntegTestCase.java, +++ b/x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/IndexFollowingIT.java, +import org.elasticsearch.action.bulk.BulkRequestBuilder;, +        final int firstBatchNumDocs;, +        // Sometimes we want to index a lot of documents to ensure that the recovery works with larger files, +        if (rarely()) {, +            firstBatchNumDocs = randomIntBetween(1800, 2000);, +        } else {, +            firstBatchNumDocs = randomIntBetween(10, 64);, +        }, +        final int flushPoint = (int) (firstBatchNumDocs * 0.75);, +, +        BulkRequestBuilder bulkRequestBuilder = leaderClient().prepareBulk();, +        for (int i = 0; i < flushPoint; i++) {, +            final String source = String.format(Locale.ROOT, "{\"f\":%d}", i);, +            IndexRequest indexRequest = new IndexRequest("index1", "doc", Integer.toString(i)), +                .source(source, XContentType.JSON), +                .timeout(TimeValue.timeValueSeconds(1));, +            bulkRequestBuilder.add(indexRequest);, +        }, +        bulkRequestBuilder.get();, +, +        leaderClient().admin().indices().prepareFlush("index1").setWaitIfOngoing(true).get();, +, +        // Index some docs after the flush that might be recovered in the normal index following operations, +        for (int i = flushPoint; i < firstBatchNumDocs; i++) {, +]