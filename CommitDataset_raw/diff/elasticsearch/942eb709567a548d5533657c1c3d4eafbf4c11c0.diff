[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +    public static final Setting<Boolean> CLUSTER_INDICES_CLOSE_ENABLE_SETTING = Setting.boolSetting("cluster.indices.close.enable", true, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +    public static final Setting<Boolean> CLUSTER_INDICES_CLOSE_ENABLE_SETTING = Setting.boolSetting("cluster.indices.close.enable", true, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +    public static final Setting<AutoCreate> AUTO_CREATE_INDEX_SETTING = new Setting<>("action.auto_create_index", "true", AutoCreate::new, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +    public static final Setting<Boolean> CLUSTER_INDICES_CLOSE_ENABLE_SETTING = Setting.boolSetting("cluster.indices.close.enable", true, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +    public static final Setting<AutoCreate> AUTO_CREATE_INDEX_SETTING = new Setting<>("action.auto_create_index", "true", AutoCreate::new, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/DestructiveOperations.java, +    public static final Setting<Boolean> REQUIRES_NAME_SETTING = Setting.boolSetting("action.destructive_requires_name", false, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +    public static final Setting<Boolean> CLUSTER_INDICES_CLOSE_ENABLE_SETTING = Setting.boolSetting("cluster.indices.close.enable", true, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +    public static final Setting<AutoCreate> AUTO_CREATE_INDEX_SETTING = new Setting<>("action.auto_create_index", "true", AutoCreate::new, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/DestructiveOperations.java, +    public static final Setting<Boolean> REQUIRES_NAME_SETTING = Setting.boolSetting("action.destructive_requires_name", false, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeReadAction.java, +    public static final Setting<Boolean> FORCE_LOCAL_SETTING = Setting.boolSetting("action.master.force_local", false, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +    public static final Setting<Boolean> CLUSTER_INDICES_CLOSE_ENABLE_SETTING = Setting.boolSetting("cluster.indices.close.enable", true, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +    public static final Setting<AutoCreate> AUTO_CREATE_INDEX_SETTING = new Setting<>("action.auto_create_index", "true", AutoCreate::new, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/DestructiveOperations.java, +    public static final Setting<Boolean> REQUIRES_NAME_SETTING = Setting.boolSetting("action.destructive_requires_name", false, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeReadAction.java, +    public static final Setting<Boolean> FORCE_LOCAL_SETTING = Setting.boolSetting("action.master.force_local", false, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +, +        BootstrapCheck.check(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/close/TransportCloseIndexAction.java, +    public static final Setting<Boolean> CLUSTER_INDICES_CLOSE_ENABLE_SETTING = Setting.boolSetting("cluster.indices.close.enable", true, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/AutoCreateIndex.java, +    public static final Setting<AutoCreate> AUTO_CREATE_INDEX_SETTING = new Setting<>("action.auto_create_index", "true", AutoCreate::new, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/DestructiveOperations.java, +    public static final Setting<Boolean> REQUIRES_NAME_SETTING = Setting.boolSetting("action.destructive_requires_name", false, true, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeReadAction.java, +    public static final Setting<Boolean> FORCE_LOCAL_SETTING = Setting.boolSetting("action.master.force_local", false, false, Setting.Scope.CLUSTER);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java, +, +        BootstrapCheck.check(nodeSettings);, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapCheck.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.bootstrap;, +, +import org.apache.lucene.util.Constants;, +import org.elasticsearch.common.logging.ESLogger;, +import org.elasticsearch.common.logging.Loggers;, +import org.elasticsearch.common.network.NetworkService;, +import org.elasticsearch.common.settings.Setting;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.monitor.process.ProcessProbe;, +import org.elasticsearch.transport.TransportSettings;, +, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Locale;, +import java.util.Set;, +, +/**, + * We enforce limits once any network host is configured. In this case we assume the node is running in production, + * and all production limit checks must pass. This should be extended as we go to settings like:, + * - discovery.zen.minimum_master_nodes, + * - discovery.zen.ping.unicast.hosts is set if we use zen disco, + * - ensure we can write in all data directories, + * - fail if mlockall failed and was configured, + * - fail if vm.max_map_count is under a certain limit (not sure if this works cross platform), + * - fail if the default cluster.name is used, if this is setup on network a real clustername should be used?, + */, +final class BootstrapCheck {, +, +    private BootstrapCheck() {, +    }, +, +    /**, +     * checks the current limits against the snapshot or release build, +     * checks, +     *, +     * @param settings the current node settings]