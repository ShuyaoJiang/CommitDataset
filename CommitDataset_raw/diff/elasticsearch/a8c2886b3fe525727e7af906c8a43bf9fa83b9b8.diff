[+++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                // mark as corrupted, so opening the store will fail, +                store.markStoreCorrupted(new IOException("failed engine (reason: [" + reason + "])", failure));, +                logger.warn("failed to mark shard store as corrupted", e);, +++ b/core/src/main/java/org/elasticsearch/index/shard/IndexShard.java, +                // mark as corrupted, so opening the store will fail, +                store.markStoreCorrupted(new IOException("failed engine (reason: [" + reason + "])", failure));, +                logger.warn("failed to mark shard store as corrupted", e);, +++ b/core/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java, +import org.elasticsearch.index.store.Store;, +    public void testFailShard() throws Exception {, +        createIndex("test");, +        ensureGreen();, +        IndicesService indicesService = getInstanceFromNode(IndicesService.class);, +        NodeEnvironment env = getInstanceFromNode(NodeEnvironment.class);, +        IndexService test = indicesService.indexService("test");, +        IndexShard shard = test.shard(0);, +        // fail shard, +        shard.failShard("test shard fail", new IOException("corrupted"));, +        // check state file still exists, +        ShardStateMetaData shardStateMetaData = load(logger, env.availableShardPaths(shard.shardId));, +        assertEquals(shardStateMetaData, getShardStateMetadata(shard));, +        ShardPath shardPath = ShardPath.loadShardPath(logger, env, shard.shardId(), test.getIndexSettings());, +        assertNotNull(shardPath);, +        // but index can't be opened for a failed shard, +        assertThat("store index should be corrupted", Store.canOpenIndex(logger, shardPath.resolveIndex()), equalTo(false));, +    }, +]