[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/type/child/ChildCollector.java, +import org.elasticsearch.common.collect.Tuple;, +    private final Tuple<IndexReader, IdReaderTypeCache>[] readers;, +        this.readers = new Tuple[context.searcher().subReaders().length];, +        for (int i = 0; i < readers.length; i++) {, +            IndexReader reader = context.searcher().subReaders()[i];, +            readers[i] = new Tuple<IndexReader, IdReaderTypeCache>(reader, context.idCache().reader(reader).type(parentType));, +        for (Tuple<IndexReader, IdReaderTypeCache> tuple : readers) {, +            IndexReader indexReader = tuple.v1();, +            IdReaderTypeCache idReaderTypeCache = tuple.v2();, +        typeCache = context.idCache().reader(reader).type(parentType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/type/child/ChildCollector.java, +import org.elasticsearch.common.collect.Tuple;, +    private final Tuple<IndexReader, IdReaderTypeCache>[] readers;, +        this.readers = new Tuple[context.searcher().subReaders().length];, +        for (int i = 0; i < readers.length; i++) {, +            IndexReader reader = context.searcher().subReaders()[i];, +            readers[i] = new Tuple<IndexReader, IdReaderTypeCache>(reader, context.idCache().reader(reader).type(parentType));, +        for (Tuple<IndexReader, IdReaderTypeCache> tuple : readers) {, +            IndexReader indexReader = tuple.v1();, +            IdReaderTypeCache idReaderTypeCache = tuple.v2();, +        typeCache = context.idCache().reader(reader).type(parentType);, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/index/query/type/child/HasChildFilter.java, +        // ok to return null, +        return parentDocs.get(reader.getCoreCacheKey());]