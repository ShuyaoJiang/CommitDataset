[+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +, +        assertEquals(8, namedXContents.size());, +        assertEquals(Integer.valueOf(3), categories.get(MetricDetail.class));, +        assertTrue(names.contains(DiscountedCumulativeGain.NAME));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +, +        assertEquals(8, namedXContents.size());, +        assertEquals(Integer.valueOf(3), categories.get(MetricDetail.class));, +        assertTrue(names.contains(DiscountedCumulativeGain.NAME));, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsIntegTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertThat;, +                    // This is different in windows and linux but this matches both., +                    assertThat(e.getMessage(), startsWith("Connection refused"));, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +, +        assertEquals(8, namedXContents.size());, +        assertEquals(Integer.valueOf(3), categories.get(MetricDetail.class));, +        assertTrue(names.contains(DiscountedCumulativeGain.NAME));, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsIntegTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertThat;, +                    // This is different in windows and linux but this matches both., +                    assertThat(e.getMessage(), startsWith("Connection refused"));, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +, +        assertEquals(8, namedXContents.size());, +        assertEquals(Integer.valueOf(3), categories.get(MetricDetail.class));, +        assertTrue(names.contains(DiscountedCumulativeGain.NAME));, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsIntegTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertThat;, +                    // This is different in windows and linux but this matches both., +                    assertThat(e.getMessage(), startsWith("Connection refused"));, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        parseContext = new ParseContext.InternalParseContext(Settings.EMPTY, mapperService.documentMapperParser(),, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/RestHighLevelClientTests.java, +, +        assertEquals(8, namedXContents.size());, +        assertEquals(Integer.valueOf(3), categories.get(MetricDetail.class));, +        assertTrue(names.contains(DiscountedCumulativeGain.NAME));, +++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsIntegTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertThat;, +                    // This is different in windows and linux but this matches both., +                    assertThat(e.getMessage(), startsWith("Connection refused"));, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/CandidateQueryTests.java, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        parseContext = new ParseContext.InternalParseContext(Settings.EMPTY, mapperService.documentMapperParser(),, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +        ParseContext.InternalParseContext parseContext = new ParseContext.InternalParseContext(Settings.EMPTY,, +++ b/modules/rank-eval/src/main/java/org/elasticsearch/index/rankeval/DiscountedCumulativeGain.java, +import static org.elasticsearch.common.xcontent.ConstructingObjectParser.constructorArg;, +        int unratedResults = 0;, +            // unknownDocRating might be null, in which case unrated docs will be ignored in the dcg calculation., +            // we still need to add them as a placeholder so the rank of the subsequent ratings is correct, +            if (hit.getRating().isPresent() == false) {, +                unratedResults++;, +        }, +        final double dcg = computeDCG(ratingsInSearchHits);, +        double result = dcg;, +        double idcg = 0;, +            idcg = computeDCG(allRatings.subList(0, Math.min(ratingsInSearchHits.size(), allRatings.size())));, +            if (idcg != 0) {, +                result = dcg / idcg;, +                result = 0;, +        EvalQueryQuality evalQueryQuality = new EvalQueryQuality(taskId, result);, +        evalQueryQuality.setMetricDetails(new Detail(dcg, idcg, unratedResults));, +    private static final ConstructingObjectParser<DiscountedCumulativeGain, Void> PARSER = new ConstructingObjectParser<>("dcg", false,, +, +    public static final class Detail implements MetricDetail {, +, +        private static ParseField DCG_FIELD = new ParseField("dcg");, +        private static ParseField IDCG_FIELD = new ParseField("ideal_dcg");, +        private static ParseField NDCG_FIELD = new ParseField("normalized_dcg");, +        private static ParseField UNRATED_FIELD = new ParseField("unrated_docs");, +        private final double dcg;, +        private final double idcg;, +        private final int unratedDocs;, +, +        Detail(double dcg, double idcg, int unratedDocs) {, +            this.dcg = dcg;, +            this.idcg = idcg;, +            this.unratedDocs = unratedDocs;, +, +        Detail(StreamInput in) throws IOException {]