[+++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/notification/jira/JiraIssue.java, +                builder.field(Field.REQUEST.getPreferredName(), request, params);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/notification/jira/JiraIssue.java, +                builder.field(Field.REQUEST.getPreferredName(), request, params);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/ExecutableJiraAction.java, +        return new JiraAction.Executed(result);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/notification/jira/JiraIssue.java, +                builder.field(Field.REQUEST.getPreferredName(), request, params);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/ExecutableJiraAction.java, +        return new JiraAction.Executed(result);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/JiraAction.java, +    public static class Executed extends Action.Result {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/notification/jira/JiraIssue.java, +                builder.field(Field.REQUEST.getPreferredName(), request, params);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/ExecutableJiraAction.java, +        return new JiraAction.Executed(result);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/JiraAction.java, +    public static class Executed extends Action.Result {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/history/HistoryStore.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.xpack.watcher.support.xcontent.WatcherParams;, +        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            watchRecord.toXContent(builder, WatcherParams.builder().hideSecrets(true).build());, +, +                    .source(builder), +        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            watchRecord.toXContent(builder, WatcherParams.builder().hideSecrets(true).build());, +, +                    .source(builder), +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/notification/jira/JiraIssue.java, +                builder.field(Field.REQUEST.getPreferredName(), request, params);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/ExecutableJiraAction.java, +        return new JiraAction.Executed(result);, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/actions/jira/JiraAction.java, +    public static class Executed extends Action.Result {, +++ b/elasticsearch/src/main/java/org/elasticsearch/xpack/watcher/history/HistoryStore.java, +import org.elasticsearch.common.xcontent.XContentBuilder;, +import org.elasticsearch.xpack.watcher.support.xcontent.WatcherParams;, +        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            watchRecord.toXContent(builder, WatcherParams.builder().hideSecrets(true).build());, +, +                    .source(builder), +        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {, +            watchRecord.toXContent(builder, WatcherParams.builder().hideSecrets(true).build());, +, +                    .source(builder), +++ b/elasticsearch/src/test/java/org/elasticsearch/xpack/watcher/history/HistoryStoreTests.java, +import org.apache.http.HttpStatus;, +import org.elasticsearch.xpack.common.http.HttpClient;, +import org.elasticsearch.xpack.common.http.HttpRequest;, +import org.elasticsearch.xpack.common.http.HttpResponse;, +import org.elasticsearch.xpack.notification.jira.JiraAccount;, +import org.elasticsearch.xpack.notification.jira.JiraIssue;, +import org.elasticsearch.xpack.watcher.actions.ActionStatus;, +import org.elasticsearch.xpack.watcher.actions.ActionWrapper;, +import org.elasticsearch.xpack.watcher.actions.jira.JiraAction;, +import org.elasticsearch.xpack.watcher.execution.WatchExecutionContext;, +import org.elasticsearch.xpack.watcher.execution.WatchExecutionResult;, +import org.elasticsearch.xpack.watcher.watch.Watch;, +import org.elasticsearch.xpack.watcher.watch.WatchStatus;, +import org.hamcrest.Description;, +import org.hamcrest.Matcher;, +import org.hamcrest.TypeSafeMatcher;, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonMap;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.not;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.argThat;, +, +    public void testStoreWithHideSecrets() throws Exception {, +        HttpClient httpClient = mock(HttpClient.class);, +        when(httpClient.execute(any(HttpRequest.class))).thenReturn(new HttpResponse(HttpStatus.SC_INTERNAL_SERVER_ERROR));, +, +        final String username = randomFrom("admin", "elastic", "test");, +        final String password = randomFrom("secret", "password", "123456");, +        final String url = "https://" + randomFrom("localhost", "internal-jira.elastic.co") + ":" + randomFrom(80, 8080, 449, 9443);, +, +        Settings settings = Settings.builder().put("url", url).put("user", username).put("password", password).build();, +        JiraAccount account = new JiraAccount("_account", settings, httpClient);, +, +        JiraIssue jiraIssue = account.createIssue(singletonMap("foo", "bar"), null);, +        ActionWrapper.Result result = new ActionWrapper.Result(JiraAction.TYPE, new JiraAction.Executed(jiraIssue));, +, +        DateTime now = new DateTime(0, UTC);, +        Wid wid = new Wid("_name", 0, now);, +, +        Watch watch = mock(Watch.class);, +        when(watch.id()).thenReturn("_id");, +        when(watch.status()).thenReturn(new WatchStatus(now, singletonMap("_action", new ActionStatus(now))));, +, +        WatchExecutionContext context = mock(WatchExecutionContext.class);, +        when(context.id()).thenReturn(wid);, +        when(context.triggerEvent()).thenReturn(new ScheduleTriggerEvent(wid.watchId(), now, now));, +        when(context.vars()).thenReturn(emptyMap());, +        when(context.watch()).thenReturn(watch);, +, +        WatchExecutionResult watchExecutionResult = new WatchExecutionResult(context, 0);, +, +        WatchRecord watchRecord;]