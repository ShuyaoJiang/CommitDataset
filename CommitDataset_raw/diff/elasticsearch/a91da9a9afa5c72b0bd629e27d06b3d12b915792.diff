[+++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +            logger.info("bound or publishing to a non-loopback address, enforcing bootstrap checks");, +        final Predicate<TransportAddress> isLoopbackAddress = t -> t.address().getAddress().isLoopbackAddress();, +                !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(isLoopbackAddress) &&, +                isLoopbackAddress.test(boundTransportAddress.publishAddress()));, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +            logger.info("bound or publishing to a non-loopback address, enforcing bootstrap checks");, +        final Predicate<TransportAddress> isLoopbackAddress = t -> t.address().getAddress().isLoopbackAddress();, +                !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(isLoopbackAddress) &&, +                isLoopbackAddress.test(boundTransportAddress.publishAddress()));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +                    if (address.isLoopbackAddress()) {, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +            logger.info("bound or publishing to a non-loopback address, enforcing bootstrap checks");, +        final Predicate<TransportAddress> isLoopbackAddress = t -> t.address().getAddress().isLoopbackAddress();, +                !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(isLoopbackAddress) &&, +                isLoopbackAddress.test(boundTransportAddress.publishAddress()));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +                    if (address.isLoopbackAddress()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +            logger.info("bound or publishing to a non-loopback address, enforcing bootstrap checks");, +        final Predicate<TransportAddress> isLoopbackAddress = t -> t.address().getAddress().isLoopbackAddress();, +                !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(isLoopbackAddress) &&, +                isLoopbackAddress.test(boundTransportAddress.publishAddress()));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +                    if (address.isLoopbackAddress()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java, +        verify(logger).info("bound or publishing to a non-loopback address, enforcing bootstrap checks");, +++ b/core/src/main/java/org/elasticsearch/bootstrap/BootstrapChecks.java, +            logger.info("bound or publishing to a non-loopback address, enforcing bootstrap checks");, +        final Predicate<TransportAddress> isLoopbackAddress = t -> t.address().getAddress().isLoopbackAddress();, +                !(Arrays.stream(boundTransportAddress.boundAddresses()).allMatch(isLoopbackAddress) &&, +                isLoopbackAddress.test(boundTransportAddress.publishAddress()));, +++ b/core/src/main/java/org/elasticsearch/common/network/NetworkUtils.java, +                    if (address.isLoopbackAddress()) {, +++ b/core/src/main/java/org/elasticsearch/node/Node.java, +++ b/core/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java, +        verify(logger).info("bound or publishing to a non-loopback address, enforcing bootstrap checks");, +++ b/docs/reference/setup/bootstrap-checks.asciidoc, +By default, Elasticsearch binds to loopback addresses for <<modules-http,HTTP>>, +and <<modules-transport,transport (internal)>> communication. This is fine for, +downloading and playing with Elasticsearch as well as everyday development, but, +it's useless for production systems. To join a cluster, an Elasticsearch node, +must be reachable via transport communication. To join a cluster via a, +non-loopback address, a node must bind transport to a non-loopback address and, +not be using <<single-node-discovery,single-node discovery>>. Thus, we consider, +an Elasticsearch node to be in development mode if it can not form a cluster, +with another machine via a non-loopback address, and is otherwise in production, +mode if it can join a cluster via non-loopback addresses.]