[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartBasicRequest;, +import org.elasticsearch.client.license.StartBasicResponse;, +     * Initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startBasicAsync(StartBasicRequest request, RequestOptions options,, +                                ActionListener<StartBasicResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartBasicRequest;, +import org.elasticsearch.client.license.StartBasicResponse;, +     * Initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startBasicAsync(StartBasicRequest request, RequestOptions options,, +                                ActionListener<StartBasicResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseRequestConverters.java, +import org.apache.http.client.methods.HttpPost;, +import org.elasticsearch.client.license.StartBasicRequest;, +, +    static Request startBasic(StartBasicRequest startBasicRequest) {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack", "license", "start_basic"), +            .build();, +        Request request = new Request(HttpPost.METHOD_NAME, endpoint);, +        RequestConverters.Params parameters = new RequestConverters.Params(request);, +        parameters.withTimeout(startBasicRequest.timeout());, +        parameters.withMasterTimeout(startBasicRequest.masterNodeTimeout());, +        if (startBasicRequest.isAcknowledge()) {, +            parameters.putParam("acknowledge", "true");, +        }, +        return request;, +    }, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseClient.java, +import org.elasticsearch.client.license.StartBasicRequest;, +import org.elasticsearch.client.license.StartBasicResponse;, +     * Initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public StartBasicResponse startBasic(StartBasicRequest request, RequestOptions options) throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously initiates an indefinite basic license., +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void startBasicAsync(StartBasicRequest request, RequestOptions options,, +                                ActionListener<StartBasicResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(request, LicenseRequestConverters::startBasic, options,, +            StartBasicResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/LicenseRequestConverters.java, +import org.apache.http.client.methods.HttpPost;, +import org.elasticsearch.client.license.StartBasicRequest;, +, +    static Request startBasic(StartBasicRequest startBasicRequest) {, +        String endpoint = new RequestConverters.EndpointBuilder(), +            .addPathPartAsIs("_xpack", "license", "start_basic"), +            .build();]