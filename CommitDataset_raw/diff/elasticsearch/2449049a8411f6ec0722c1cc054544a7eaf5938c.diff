[+++ b/src/main/java/org/elasticsearch/plugins/PluginManager.java, +/*, + * Licensed to ElasticSearch and Shay Banon under one, + * or more contributor license agreements.  See the NOTICE file, + * distributed with this work for additional information, + * regarding copyright ownership. ElasticSearch licenses this, + * file to you under the Apache License, Version 2.0 (the, + * "License"); you may not use this file except in compliance, + * with the License.  You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +, +        File pluginFile = new File(environment.pluginsFile(), name + ".zip");, +, +        // first, try directly from the URL provided, +, +, +        // now, try as a path name..., +        String filterZipName = null;, +, +                // update the plugin file name to reflect the extracted name, +, +                if (version != null) {, +                    URL pluginUrl = new URL("http://download.elasticsearch.org/" + userName + "/" + repoName + "/" + repoName + "-" + version + ".zip");, +                    } catch (Exception e) {, +                    }, +                    if (!downloaded) {, +                        // try maven, see if its there... (both central and sonatype), +                        pluginUrl = new URL("http://search.maven.org/remotecontent?filepath=" + userName.replace('.', '/') + "/" + repoName + "/" + version + "/" + repoName + "-" + version + ".zip");, +                        } catch (Exception e) {, +                            if (verbose) {, +                                System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e));, +                            }, +                        }, +                        if (!downloaded) {, +                            pluginUrl = new URL("https://oss.sonatype.org/service/local/repositories/releases/content/" + userName.replace('.', '/') + "/" + repoName + "/" + version + "/" + repoName + "-" + version + ".zip");, +                            System.out.println("Trying " + pluginUrl.toExternalForm() + "...");, +                            try {, +                                downloadHelper.download(pluginUrl, pluginFile, new HttpDownloadHelper.VerboseProgress(System.out));, +                                downloaded = true;, +                            } catch (Exception e) {, +                                if (verbose) {, +                                    System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e));, +                                }, +                            }, +                        }, +                    }, +                    if (!downloaded) {, +                        // try it as a site plugin tagged, +                        pluginUrl = new URL("https://github.com/" + userName + "/" + repoName + "/zipball/v" + version);, +                        System.out.println("Trying " + pluginUrl.toExternalForm() + "... (assuming site plugin)");, +                        try {, +                            downloadHelper.download(pluginUrl, pluginFile, new HttpDownloadHelper.VerboseProgress(System.out));, +                            downloaded = true;, +                        } catch (Exception e1) {, +                            // ignore, +                        }, +                    }, +                } else {, +                    // assume site plugin, download master...., +                    URL pluginUrl = new URL("https://github.com/" + userName + "/" + repoName + "/zipball/master");, +                    System.out.println("Trying " + pluginUrl.toExternalForm() + "... (assuming site plugin)");, +                    } catch (Exception e2) {, +            throw new IOException("failed to download out of all possible locations..., use -verbose to get detailed information");, +        if (FileSystemUtils.hasExtensions(extractLocation, ".java")) {, +            System.out.println("Plugin installation assumed to be site plugin, but contains source code, aborting installation...");, +            FileSystemUtils.deleteRecursively(extractLocation);, +            return;, +        }, +, +            System.out.println("    -url     [plugin location]   : Set exact URL to download the plugin from");]