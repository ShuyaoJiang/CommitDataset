[+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                ClearIndicesCacheRequest::new, ThreadPool.Names.MANAGEMENT);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                ClearIndicesCacheRequest::new, ThreadPool.Names.MANAGEMENT);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +        transportService.registerRequestHandler(transportNodeBroadcastAction, NodeRequest::new, executor, new BroadcastByNodeTransportRequestHandler());, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                ClearIndicesCacheRequest::new, ThreadPool.Names.MANAGEMENT);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +        transportService.registerRequestHandler(transportNodeBroadcastAction, NodeRequest::new, executor, new BroadcastByNodeTransportRequestHandler());, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                ClearIndicesCacheRequest::new, ThreadPool.Names.MANAGEMENT);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +        transportService.registerRequestHandler(transportNodeBroadcastAction, NodeRequest::new, executor, new BroadcastByNodeTransportRequestHandler());, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import java.util.regex.Pattern;, +import java.util.stream.Collectors;, +, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                ClearIndicesCacheRequest::new, ThreadPool.Names.MANAGEMENT);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +        transportService.registerRequestHandler(transportNodeBroadcastAction, NodeRequest::new, executor, new BroadcastByNodeTransportRequestHandler());, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import java.util.regex.Pattern;, +import java.util.stream.Collectors;, +, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java, +        logger.debug("enabled [{}], interval [{}], gc_threshold [{}]", enabled, interval, this.gcThresholds);, +    private static final String LOG_MESSAGE =, +        "[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}";, +, +        scheduledFuture = threadPool.scheduleWithFixedDelay(new JvmMonitor(gcThresholds) {, +                        LOG_MESSAGE,, +                        LOG_MESSAGE,, +                        LOG_MESSAGE,, +        private final Map<String, GcThreshold> gcThresholds;, +        public JvmMonitor(Map<String, GcThreshold> gcThresholds) {, +                monitorLongGc();, +        synchronized void monitorLongGc() {, +            lastTime = currentTime;, +            lastJvmStats = currentJvmStats;, +++ b/core/src/main/java/org/elasticsearch/action/admin/indices/cache/clear/TransportClearIndicesCacheAction.java, +                ClearIndicesCacheRequest::new, ThreadPool.Names.MANAGEMENT);, +++ b/core/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java, +        transportService.registerRequestHandler(transportNodeBroadcastAction, NodeRequest::new, executor, new BroadcastByNodeTransportRequestHandler());, +++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java, +++ b/core/src/main/java/org/elasticsearch/common/settings/Setting.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.EnumSet;, +import java.util.List;, +import java.util.Map;, +import java.util.Objects;, +import java.util.function.BiConsumer;, +import java.util.function.Consumer;, +import java.util.function.Function;, +import java.util.regex.Pattern;, +import java.util.stream.Collectors;, +, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +            throw new IllegalArgumentException("Failed to parse value [" + s + "] for setting [" + key + "] must be =< " + maxValue);, +++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmGcMonitorService.java, +        logger.debug("enabled [{}], interval [{}], gc_threshold [{}]", enabled, interval, this.gcThresholds);, +    private static final String LOG_MESSAGE =, +        "[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}";, +, +        scheduledFuture = threadPool.scheduleWithFixedDelay(new JvmMonitor(gcThresholds) {, +                        LOG_MESSAGE,, +                        LOG_MESSAGE,, +                        LOG_MESSAGE,, +        private final Map<String, GcThreshold> gcThresholds;, +        public JvmMonitor(Map<String, GcThreshold> gcThresholds) {]