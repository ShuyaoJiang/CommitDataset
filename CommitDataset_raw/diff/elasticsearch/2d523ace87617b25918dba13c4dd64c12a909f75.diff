[+++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        long lValue = parseToMilliseconds(value, context);, +    public long parseToMilliseconds(Object value, @Nullable QueryParseContext context) {, +        return parseToMilliseconds(value, context, false);, +    }, +    , +    public long parseToMilliseconds(Object value, @Nullable QueryParseContext context, boolean includeUpper) {, +        long now = context == null ? System.currentTimeMillis() : context.nowInMillis();, +        return includeUpper ? dateMathParser.parseUpperInclusive(convertToString(value), now) : dateMathParser.parse(convertToString(value), now);, +    }, +, +        final long lValue = parseToMilliseconds(value, context);, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        long lValue = parseToMilliseconds(value, context);, +    public long parseToMilliseconds(Object value, @Nullable QueryParseContext context) {, +        return parseToMilliseconds(value, context, false);, +    }, +    , +    public long parseToMilliseconds(Object value, @Nullable QueryParseContext context, boolean includeUpper) {, +        long now = context == null ? System.currentTimeMillis() : context.nowInMillis();, +        return includeUpper ? dateMathParser.parseUpperInclusive(convertToString(value), now) : dateMathParser.parse(convertToString(value), now);, +    }, +, +        final long lValue = parseToMilliseconds(value, context);, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +            origin = dateFieldMapper.parseToMilliseconds(originString, parseContext);, +++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java, +        long lValue = parseToMilliseconds(value, context);, +    public long parseToMilliseconds(Object value, @Nullable QueryParseContext context) {, +        return parseToMilliseconds(value, context, false);, +    }, +    , +    public long parseToMilliseconds(Object value, @Nullable QueryParseContext context, boolean includeUpper) {, +        long now = context == null ? System.currentTimeMillis() : context.nowInMillis();, +        return includeUpper ? dateMathParser.parseUpperInclusive(convertToString(value), now) : dateMathParser.parse(convertToString(value), now);, +    }, +, +        final long lValue = parseToMilliseconds(value, context);, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +                lowerTerm == null ? null : parseToMilliseconds(lowerTerm, context),, +                upperTerm == null ? null : parseToMilliseconds(upperTerm, context, includeUpper && parseUpperInclusive),, +++ b/src/main/java/org/elasticsearch/index/query/functionscore/DecayFunctionParser.java, +            origin = dateFieldMapper.parseToMilliseconds(originString, parseContext);, +++ b/src/test/java/org/elasticsearch/search/functionscore/DecayFunctionScoreTests.java, +import static org.elasticsearch.test.hamcrest.ElasticSearchAssertions.*;, +        assertOrderedSearchHits(sr, "2", "1");, +    }, +    , +    @Test, +    public void testParseDateMath() throws Exception {, +        , +        assertAcked(prepareCreate("test").addMapping(, +                "type1",, +                jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type", "string"), +                        .endObject().startObject("num1").field("type", "date").endObject().endObject().endObject().endObject()));, +        ensureYellow();, +        client().index(, +                indexRequest("test").type("type1").id("1"), +                        .source(jsonBuilder().startObject().field("test", "value").field("num1", System.currentTimeMillis()).endObject())).actionGet();, +        client().index(, +                indexRequest("test").type("type1").id("2"), +                        .source(jsonBuilder().startObject().field("test", "value").field("num1", System.currentTimeMillis() - (1000 * 60 * 60 * 24)).endObject())).actionGet();, +        refresh();, +, +        SearchResponse sr = client().search(, +                searchRequest().source(, +                        searchSource().explain(true).query(, +                                functionScoreQuery(termQuery("test", "value"), gaussDecayFunction("num1", "now", "2d"))))).get();, +, +        assertNoFailures(sr);, +        assertOrderedSearchHits(sr, "1", "2");, +        , +        sr = client().search(, +                searchRequest().source(, +                        searchSource().explain(true).query(, +                                functionScoreQuery(termQuery("test", "value"), gaussDecayFunction("num1", "now-1d", "2d"))))).get();, +, +        assertNoFailures(sr);, +        assertOrderedSearchHits(sr, "2", "1");, +, +        assertNoFailures(sr);, +        assertNoFailures(sr);, +        assertNoFailures(sr);]