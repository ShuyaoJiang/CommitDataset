[+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +    static Request snapshotsStatus(SnapshotsStatusRequest snapshotsStatusRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(snapshotsStatusRequest.repository()), +            .addCommaSeparatedPathParts(snapshotsStatusRequest.snapshots()), +            .addPathPartAsIs("_status"), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(snapshotsStatusRequest.masterNodeTimeout());, +        parameters.withIgnoreUnavailable(snapshotsStatusRequest.ignoreUnavailable());, +        return request;, +    }, +, +            withIgnoreUnavailable(indicesOptions.ignoreUnavailable());, +        Params withIgnoreUnavailable(boolean ignoreUnavailable) {, +            // Always explicitly place the ignore_unavailable value., +            putParam("ignore_unavailable", Boolean.toString(ignoreUnavailable));, +            return this;, +        }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +    static Request snapshotsStatus(SnapshotsStatusRequest snapshotsStatusRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(snapshotsStatusRequest.repository()), +            .addCommaSeparatedPathParts(snapshotsStatusRequest.snapshots()), +            .addPathPartAsIs("_status"), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(snapshotsStatusRequest.masterNodeTimeout());, +        parameters.withIgnoreUnavailable(snapshotsStatusRequest.ignoreUnavailable());, +        return request;, +    }, +, +            withIgnoreUnavailable(indicesOptions.ignoreUnavailable());, +        Params withIgnoreUnavailable(boolean ignoreUnavailable) {, +            // Always explicitly place the ignore_unavailable value., +            putParam("ignore_unavailable", Boolean.toString(ignoreUnavailable));, +            return this;, +        }, +, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/SnapshotClient.java, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusResponse;, +     * Gets the status of requested snapshots., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     * @param snapshotsStatusRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @return the response, +     * @throws IOException in case there is a problem sending the request or parsing back the response, +     */, +    public SnapshotsStatusResponse status(SnapshotsStatusRequest snapshotsStatusRequest, RequestOptions options), +        throws IOException {, +        return restHighLevelClient.performRequestAndParseEntity(snapshotsStatusRequest, RequestConverters::snapshotsStatus, options,, +            SnapshotsStatusResponse::fromXContent, emptySet());, +    }, +, +    /**, +     * Asynchronously gets the status of requested snapshots., +     * See <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html"> Snapshot and Restore, +     * API on elastic.co</a>, +     * @param snapshotsStatusRequest the request, +     * @param options the request options (e.g. headers), use {@link RequestOptions#DEFAULT} if nothing needs to be customized, +     * @param listener the listener to be notified upon request completion, +     */, +    public void statusAsync(SnapshotsStatusRequest snapshotsStatusRequest, RequestOptions options,, +                            ActionListener<SnapshotsStatusResponse> listener) {, +        restHighLevelClient.performRequestAsyncAndParseEntity(snapshotsStatusRequest, RequestConverters::snapshotsStatus, options,, +            SnapshotsStatusResponse::fromXContent, listener, emptySet());, +    }, +, +    /**, +++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/RequestConverters.java, +import org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;, +    static Request snapshotsStatus(SnapshotsStatusRequest snapshotsStatusRequest) {, +        String endpoint = new EndpointBuilder().addPathPartAsIs("_snapshot"), +            .addPathPart(snapshotsStatusRequest.repository()), +            .addCommaSeparatedPathParts(snapshotsStatusRequest.snapshots()), +            .addPathPartAsIs("_status"), +            .build();, +        Request request = new Request(HttpGet.METHOD_NAME, endpoint);, +, +        Params parameters = new Params(request);, +        parameters.withMasterTimeout(snapshotsStatusRequest.masterNodeTimeout());, +        parameters.withIgnoreUnavailable(snapshotsStatusRequest.ignoreUnavailable());, +        return request;, +    }, +, +            withIgnoreUnavailable(indicesOptions.ignoreUnavailable());, +        Params withIgnoreUnavailable(boolean ignoreUnavailable) {, +            // Always explicitly place the ignore_unavailable value., +            putParam("ignore_unavailable", Boolean.toString(ignoreUnavailable));, +            return this;, +        }]