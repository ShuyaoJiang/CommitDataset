[+++ b/server/src/main/java/org/elasticsearch/tasks/TaskResultsService.java, +import org.elasticsearch.action.bulk.BackoffPolicy;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.threadpool.ThreadPool;, +import java.util.Iterator;, +import static org.elasticsearch.common.unit.TimeValue.timeValueMillis;, +    /**, +     * The backoff policy to use when saving a task result fails. The total wait, +     * time is 600000 milliseconds, ten minutes., +     */, +    static final BackoffPolicy STORE_BACKOFF_POLICY =, +            BackoffPolicy.exponentialBackoff(timeValueMillis(250), 14);, +, +    private final ThreadPool threadPool;, +, +    public TaskResultsService(Client client, ClusterService clusterService, ThreadPool threadPool) {, +        this.threadPool = threadPool;, +        doStoreResult(STORE_BACKOFF_POLICY.iterator(), index, listener);, +    }, +, +    private void doStoreResult(Iterator<TimeValue> backoff, IndexRequestBuilder index, ActionListener<Void> listener) {, +                if (false == (e instanceof EsRejectedExecutionException), +                        || false == backoff.hasNext()) {, +                } else {, +                    TimeValue wait = backoff.next();, +                    logger.warn(() -> new ParameterizedMessage("failed to store task result, retrying in [{}]", wait), e);, +                    threadPool.schedule(wait, ThreadPool.Names.SAME, () -> doStoreResult(backoff, index, listener));, +                }, +++ b/server/src/main/java/org/elasticsearch/tasks/TaskResultsService.java, +import org.elasticsearch.action.bulk.BackoffPolicy;, +import org.elasticsearch.common.unit.TimeValue;, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.threadpool.ThreadPool;, +import java.util.Iterator;, +import static org.elasticsearch.common.unit.TimeValue.timeValueMillis;, +    /**, +     * The backoff policy to use when saving a task result fails. The total wait, +     * time is 600000 milliseconds, ten minutes., +     */, +    static final BackoffPolicy STORE_BACKOFF_POLICY =, +            BackoffPolicy.exponentialBackoff(timeValueMillis(250), 14);, +, +    private final ThreadPool threadPool;, +, +    public TaskResultsService(Client client, ClusterService clusterService, ThreadPool threadPool) {, +        this.threadPool = threadPool;, +        doStoreResult(STORE_BACKOFF_POLICY.iterator(), index, listener);, +    }, +, +    private void doStoreResult(Iterator<TimeValue> backoff, IndexRequestBuilder index, ActionListener<Void> listener) {, +                if (false == (e instanceof EsRejectedExecutionException), +                        || false == backoff.hasNext()) {, +                } else {, +                    TimeValue wait = backoff.next();, +                    logger.warn(() -> new ParameterizedMessage("failed to store task result, retrying in [{}]", wait), e);, +                    threadPool.schedule(wait, ThreadPool.Names.SAME, () -> doStoreResult(backoff, index, listener));, +                }, +++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TaskStorageRetryIT.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.action.admin.cluster.node.tasks;, +, +import org.elasticsearch.action.admin.cluster.node.tasks.get.GetTaskResponse;, +import org.elasticsearch.action.support.PlainListenableActionFuture;, +import org.elasticsearch.client.node.NodeClient;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.plugins.Plugin;, +import org.elasticsearch.tasks.Task;, +import org.elasticsearch.tasks.TaskId;, +import org.elasticsearch.test.ESSingleNodeTestCase;, +import org.elasticsearch.threadpool.ThreadPool;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.concurrent.CyclicBarrier;, +import java.util.concurrent.TimeUnit;, +, +import static java.util.Collections.emptyMap;, +import static java.util.Collections.singletonMap;, +, +/**, + * Makes sure that tasks that attempt to store themselves on completion retry if]