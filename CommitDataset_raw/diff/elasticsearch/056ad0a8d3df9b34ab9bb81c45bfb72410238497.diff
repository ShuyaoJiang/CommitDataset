[+++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.ElasticsearchException;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +        if (autoCreateIndex.needToCheck()) {, +            final Set<String> indices = Sets.newHashSet();, +                } else {, +                    throw new ElasticsearchException("Parsed unknown request in bulk actions: " + request.getClass().getSimpleName());, +            for (final String index : indices) {, +                                executeBulk(bulkRequest, startTime, listener, responses);, +                            if (!(ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException)) {, +                                // fail all requests involving this index, if create didnt work, +                                for (int i = 0; i < bulkRequest.requests.size(); i++) {, +                                    ActionRequest request = bulkRequest.requests.get(i);, +                                    if (setResponseFailureIfIndexMatches(responses, i, request, index, e)) {, +                                        bulkRequest.requests.set(i, null);, +                                }, +                            }, +                            if (counter.decrementAndGet() == 0) {, +                                executeBulk(bulkRequest, startTime, listener, responses);, +                        executeBulk(bulkRequest, startTime, listener, responses);, +            executeBulk(bulkRequest, startTime, listener, responses);, +    private boolean setResponseFailureIfIndexMatches(AtomicArray<BulkItemResponse> responses, int idx, ActionRequest request, String index, Throwable e) {, +        if (request instanceof IndexRequest) {, +            IndexRequest indexRequest = (IndexRequest) request;, +            if (index.equals(indexRequest.index())) {, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), e)));, +                return true;, +            }, +        } else if (request instanceof DeleteRequest) {, +            DeleteRequest deleteRequest = (DeleteRequest) request;, +            if (index.equals(deleteRequest.index())) {, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), e)));, +                return true;, +            }, +        } else if (request instanceof UpdateRequest) {, +            UpdateRequest updateRequest = (UpdateRequest) request;, +            if (index.equals(updateRequest.index())) {, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), e)));, +                return true;, +            }, +        } else {, +            throw new ElasticsearchException("Parsed unknown request in bulk actions: " + request.getClass().getSimpleName());, +        }, +        return false;, +    }, +, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses) {, +++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java, +import org.elasticsearch.ElasticsearchException;, +        final AtomicArray<BulkItemResponse> responses = new AtomicArray<BulkItemResponse>(bulkRequest.requests.size());, +, +        if (autoCreateIndex.needToCheck()) {, +            final Set<String> indices = Sets.newHashSet();, +                } else {, +                    throw new ElasticsearchException("Parsed unknown request in bulk actions: " + request.getClass().getSimpleName());, +            for (final String index : indices) {, +                                executeBulk(bulkRequest, startTime, listener, responses);, +                            if (!(ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException)) {, +                                // fail all requests involving this index, if create didnt work, +                                for (int i = 0; i < bulkRequest.requests.size(); i++) {, +                                    ActionRequest request = bulkRequest.requests.get(i);, +                                    if (setResponseFailureIfIndexMatches(responses, i, request, index, e)) {, +                                        bulkRequest.requests.set(i, null);, +                                }, +                            }, +                            if (counter.decrementAndGet() == 0) {, +                                executeBulk(bulkRequest, startTime, listener, responses);, +                        executeBulk(bulkRequest, startTime, listener, responses);, +            executeBulk(bulkRequest, startTime, listener, responses);, +    private boolean setResponseFailureIfIndexMatches(AtomicArray<BulkItemResponse> responses, int idx, ActionRequest request, String index, Throwable e) {, +        if (request instanceof IndexRequest) {, +            IndexRequest indexRequest = (IndexRequest) request;, +            if (index.equals(indexRequest.index())) {, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(indexRequest.index(), indexRequest.type(), indexRequest.id(), e)));, +                return true;, +            }, +        } else if (request instanceof DeleteRequest) {, +            DeleteRequest deleteRequest = (DeleteRequest) request;, +            if (index.equals(deleteRequest.index())) {, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(deleteRequest.index(), deleteRequest.type(), deleteRequest.id(), e)));, +                return true;, +            }, +        } else if (request instanceof UpdateRequest) {, +            UpdateRequest updateRequest = (UpdateRequest) request;, +            if (index.equals(updateRequest.index())) {, +                responses.set(idx, new BulkItemResponse(idx, "index", new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(), updateRequest.id(), e)));, +                return true;, +            }, +        } else {, +            throw new ElasticsearchException("Parsed unknown request in bulk actions: " + request.getClass().getSimpleName());, +        }, +        return false;, +    }, +, +    private void executeBulk(final BulkRequest bulkRequest, final long startTime, final ActionListener<BulkResponse> listener, final AtomicArray<BulkItemResponse> responses) {, +++ b/src/test/java/org/elasticsearch/document/BulkTests.java, +    @Test // issue 4987, +    public void testThatInvalidIndexNamesShouldNotBreakCompleteBulkRequest() {, +        int bulkEntryCount = randomIntBetween(10, 50);]