[+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.ClusterModule;, +        if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +        } else {, +            ClusterModule.filterCustomsForPre63Clients(state).writeTo(out);, +        }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.ClusterModule;, +        if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +        } else {, +            ClusterModule.filterCustomsForPre63Clients(state).writeTo(out);, +        }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +import org.elasticsearch.cluster.ClusterModule;, +        if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +        } else {, +            ClusterModule.filterCustomsForPre63Clients(clusterState).writeTo(out);, +        }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.ClusterModule;, +        if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +        } else {, +            ClusterModule.filterCustomsForPre63Clients(state).writeTo(out);, +        }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +import org.elasticsearch.cluster.ClusterModule;, +        if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +        } else {, +            ClusterModule.filterCustomsForPre63Clients(clusterState).writeTo(out);, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +    static final Set<String> PRE_6_3_METADATA_CUSTOMS_WHITE_LIST = Collections.unmodifiableSet(Sets.newHashSet(, +        IndexGraveyard.TYPE, IngestMetadata.TYPE, RepositoriesMetaData.TYPE, ScriptMetaData.TYPE));, +, +    static final Set<String> PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST = Collections.unmodifiableSet(Sets.newHashSet(, +        RestoreInProgress.TYPE, SnapshotDeletionsInProgress.TYPE, SnapshotsInProgress.TYPE));, +, +    /**, +     * For interoperability with transport clients older than 6.3, we need to strip customs, +     * from the cluster state that the client might not be able to deserialize, +     *, +     * @param clusterState the cluster state to filter the customs from, +     * @return the adapted cluster state, +     */, +    public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState) {, +        final ClusterState.Builder builder = ClusterState.builder(clusterState);, +        clusterState.customs().keysIt().forEachRemaining(name -> {, +            if (PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST.contains(name) == false) {, +                builder.removeCustom(name);, +            }, +        });, +        final MetaData.Builder metaBuilder = MetaData.builder(clusterState.metaData());, +        clusterState.metaData().customs().keysIt().forEachRemaining(name -> {, +            if (PRE_6_3_METADATA_CUSTOMS_WHITE_LIST.contains(name) == false) {, +                metaBuilder.removeCustom(name);, +            }, +        });, +        return builder.metaData(metaBuilder).build();, +    }, +, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/reroute/ClusterRerouteResponse.java, +import org.elasticsearch.Version;, +import org.elasticsearch.cluster.ClusterModule;, +        if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +        } else {, +            ClusterModule.filterCustomsForPre63Clients(state).writeTo(out);, +        }, +++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/ClusterStateResponse.java, +import org.elasticsearch.cluster.ClusterModule;, +        if (out.getVersion().onOrAfter(Version.V_6_3_0)) {, +        } else {, +            ClusterModule.filterCustomsForPre63Clients(clusterState).writeTo(out);, +        }, +++ b/server/src/main/java/org/elasticsearch/cluster/ClusterModule.java, +import org.elasticsearch.common.util.set.Sets;, +import java.util.Set;, +    static final Set<String> PRE_6_3_METADATA_CUSTOMS_WHITE_LIST = Collections.unmodifiableSet(Sets.newHashSet(, +        IndexGraveyard.TYPE, IngestMetadata.TYPE, RepositoriesMetaData.TYPE, ScriptMetaData.TYPE));, +, +    static final Set<String> PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST = Collections.unmodifiableSet(Sets.newHashSet(, +        RestoreInProgress.TYPE, SnapshotDeletionsInProgress.TYPE, SnapshotsInProgress.TYPE));, +, +    /**, +     * For interoperability with transport clients older than 6.3, we need to strip customs, +     * from the cluster state that the client might not be able to deserialize, +     *, +     * @param clusterState the cluster state to filter the customs from, +     * @return the adapted cluster state, +     */, +    public static ClusterState filterCustomsForPre63Clients(ClusterState clusterState) {, +        final ClusterState.Builder builder = ClusterState.builder(clusterState);, +        clusterState.customs().keysIt().forEachRemaining(name -> {, +            if (PRE_6_3_CLUSTER_CUSTOMS_WHITE_LIST.contains(name) == false) {, +                builder.removeCustom(name);, +            }]