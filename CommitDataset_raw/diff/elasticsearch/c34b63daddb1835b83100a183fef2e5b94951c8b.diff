[+++ b/core/src/main/java/org/elasticsearch/cluster/Diff.java, +import org.elasticsearch.common.io.stream.Writeable;, +public interface Diff<T> extends Writeable {, +++ b/core/src/main/java/org/elasticsearch/cluster/Diff.java, +import org.elasticsearch.common.io.stream.Writeable;, +public interface Diff<T> extends Writeable {, +++ b/core/src/main/java/org/elasticsearch/script/StoredScriptSource.java, +    @Override, +    public boolean isFragment() {, +        return false;, +    }, +, +++ b/core/src/main/java/org/elasticsearch/cluster/Diff.java, +import org.elasticsearch.common.io.stream.Writeable;, +public interface Diff<T> extends Writeable {, +++ b/core/src/main/java/org/elasticsearch/script/StoredScriptSource.java, +    @Override, +    public boolean isFragment() {, +        return false;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java, +++ b/core/src/main/java/org/elasticsearch/cluster/Diff.java, +import org.elasticsearch.common.io.stream.Writeable;, +public interface Diff<T> extends Writeable {, +++ b/core/src/main/java/org/elasticsearch/script/StoredScriptSource.java, +    @Override, +    public boolean isFragment() {, +        return false;, +    }, +, +++ b/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java, +++ b/core/src/test/java/org/elasticsearch/snapshots/RepositoriesMetaDataSerializationTests.java, +/*, + * Licensed to Elasticsearch under one or more contributor, + * license agreements. See the NOTICE file distributed with, + * this work for additional information regarding copyright, + * ownership. Elasticsearch licenses this file to you under, + * the Apache License, Version 2.0 (the "License"); you may, + * not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *    http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing,, + * software distributed under the License is distributed on an, + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY, + * KIND, either express or implied.  See the License for the, + * specific language governing permissions and limitations, + * under the License., + */, +, +package org.elasticsearch.snapshots;, +, +import org.elasticsearch.cluster.ClusterModule;, +import org.elasticsearch.cluster.Diff;, +import org.elasticsearch.cluster.metadata.MetaData.Custom;, +import org.elasticsearch.cluster.metadata.RepositoriesMetaData;, +import org.elasticsearch.cluster.metadata.RepositoryMetaData;, +import org.elasticsearch.common.io.stream.NamedWriteableRegistry;, +import org.elasticsearch.common.io.stream.Writeable;, +import org.elasticsearch.common.settings.Settings;, +import org.elasticsearch.common.xcontent.XContentParser;, +import org.elasticsearch.test.AbstractDiffableSerializationTestCase;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Comparator;, +import java.util.List;, +, +public class RepositoriesMetaDataSerializationTests extends AbstractDiffableSerializationTestCase<Custom> {, +, +    @Override, +    protected Custom createTestInstance() {, +        int numberOfRepositories = randomInt(10);, +        List<RepositoryMetaData> entries = new ArrayList<>();, +        for (int i = 0; i < numberOfRepositories; i++) {, +            entries.add(new RepositoryMetaData(randomAsciiOfLength(10), randomAsciiOfLength(10), randomSettings()));, +        }, +        entries.sort(Comparator.comparing(RepositoryMetaData::name));, +        return new RepositoriesMetaData(entries.toArray(new RepositoryMetaData[entries.size()]));, +    }, +, +    @Override, +    protected Writeable.Reader<Custom> instanceReader() {, +        return RepositoriesMetaData::new;, +    }, +, +    public Settings randomSettings() {, +        if (randomBoolean()) {, +            return Settings.EMPTY;, +        } else {, +            int numberOfSettings = randomInt(10);, +            Settings.Builder builder = Settings.builder();, +            for (int i = 0; i < numberOfSettings; i++) {, +                builder.put(randomAsciiOfLength(10), randomAsciiOfLength(20));, +            }, +            return builder.build();, +        }, +    }]