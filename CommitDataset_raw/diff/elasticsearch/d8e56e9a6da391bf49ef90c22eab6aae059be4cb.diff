[+++ b/core/src/main/java/org/elasticsearch/index/query/SpanFirstQueryBuilder.java, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.spans.SpanFirstQuery;, +import org.apache.lucene.search.spans.SpanQuery;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.util.Objects;, +    static final SpanFirstQueryBuilder SPAN_FIRST_QUERY_BUILDER = new SpanFirstQueryBuilder();, +    /**, +     * Query that matches spans queries defined in <code>matchBuilder</code>, +     * whose end position is less than or equal to <code>end</code>., +     * @param matchBuilder inner {@link SpanQueryBuilder}, +     * @param end maximum end position of the match, needs to be positive, +     * @throws IllegalArgumentException for negative <code>end</code> positions, +     */, +        this.matchBuilder = Objects.requireNonNull(matchBuilder);, +        if (end >= 0) {, +        } else {, +            throw new IllegalArgumentException("end parameter needs to be positive");, +        }, +    }, +, +    /**, +     * only used for prototype, +     */, +    private SpanFirstQueryBuilder() {, +        this.matchBuilder = null;, +        this.end = -1;, +    }, +, +    /**, +     * @return the inner {@link SpanQueryBuilder} defined in this query, +     */, +    public SpanQueryBuilder matchBuilder() {, +        return this.matchBuilder;, +    }, +, +    /**, +     * @return maximum end position of the matching inner span query, +     */, +    public int end() {, +        return this.end;, +    protected Query doToQuery(QueryParseContext parseContext) throws IOException {, +        Query innerSpanQuery = matchBuilder.toQuery(parseContext);, +        assert innerSpanQuery instanceof SpanQuery;, +        return new SpanFirstQuery((SpanQuery) innerSpanQuery, end);, +    }, +, +    @Override, +    public QueryValidationException validate() {, +        return validateInnerQuery(matchBuilder, null);, +    }, +, +    @Override, +    protected SpanFirstQueryBuilder doReadFrom(StreamInput in) throws IOException {, +        SpanQueryBuilder matchBuilder = in.readNamedWriteable();, +        int end = in.readInt();, +        return new SpanFirstQueryBuilder(matchBuilder, end);, +    }, +, +    @Override, +    protected void doWriteTo(StreamOutput out) throws IOException {, +        out.writeNamedWriteable(matchBuilder);, +        out.writeInt(end);, +    }, +, +    @Override, +    protected int doHashCode() {, +        return Objects.hash(matchBuilder, end);, +    }, +, +    @Override, +    protected boolean doEquals(SpanFirstQueryBuilder other) {, +        return Objects.equals(matchBuilder, other.matchBuilder) &&, +               Objects.equals(end, other.end);, +    }, +, +    @Override, +++ b/core/src/main/java/org/elasticsearch/index/query/SpanFirstQueryBuilder.java, +import org.apache.lucene.search.Query;, +import org.apache.lucene.search.spans.SpanFirstQuery;, +import org.apache.lucene.search.spans.SpanQuery;, +import org.elasticsearch.common.io.stream.StreamInput;, +import org.elasticsearch.common.io.stream.StreamOutput;, +import java.util.Objects;, +    static final SpanFirstQueryBuilder SPAN_FIRST_QUERY_BUILDER = new SpanFirstQueryBuilder();, +    /**, +     * Query that matches spans queries defined in <code>matchBuilder</code>, +     * whose end position is less than or equal to <code>end</code>., +     * @param matchBuilder inner {@link SpanQueryBuilder}, +     * @param end maximum end position of the match, needs to be positive, +     * @throws IllegalArgumentException for negative <code>end</code> positions, +     */, +        this.matchBuilder = Objects.requireNonNull(matchBuilder);, +        if (end >= 0) {, +        } else {, +            throw new IllegalArgumentException("end parameter needs to be positive");, +        }, +    }, +]