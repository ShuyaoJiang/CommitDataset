[+++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestion;, +            case PhraseSuggestion.TYPE:, +                suggestion = new PhraseSuggestion();, +                break;, +            protected Entry<O> reduce(List<? extends Entry<O>> toReduce) {, +                    leader.merge(entry);, +                for (O option: entries.keySet()) {, +                    leader.addOption(option);, +                }, +             * Merge any extra fields for this subtype., +             */, +            protected void merge(Entry<O> other) {, +            }, +, +            /**, +++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestion;, +            case PhraseSuggestion.TYPE:, +                suggestion = new PhraseSuggestion();, +                break;, +            protected Entry<O> reduce(List<? extends Entry<O>> toReduce) {, +                    leader.merge(entry);, +                for (O option: entries.keySet()) {, +                    leader.addOption(option);, +                }, +             * Merge any extra fields for this subtype., +             */, +            protected void merge(Entry<O> other) {, +            }, +, +            /**, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +, +    public Result getCorrections(TokenStream stream, final CandidateGenerator generator,, +            return Result.EMPTY;, +            double inputPhraseScore = scorer.score(candidates, candidateSets);, +            cutoffScore = inputPhraseScore * confidence;, +        Correction[] findBestCandiates = scorer.findBestCandiates(candidateSets, maxErrors, cutoffScore);, +        return new Result(findBestCandiates, cutoffScore);, +    public Result getCorrections(Analyzer analyzer, BytesRef query, CandidateGenerator generator,, +    public static class Result {, +        public static final Result EMPTY = new Result(Correction.EMPTY, Double.MIN_VALUE);, +        public final Correction[] corrections;, +        public final double cutoffScore;, +        public Result(Correction[] corrections, double cutoffScore) {, +            this.corrections = corrections;, +            this.cutoffScore = cutoffScore;, +        }, +    }, +++ b/src/main/java/org/elasticsearch/search/suggest/Suggest.java, +import org.elasticsearch.search.suggest.phrase.PhraseSuggestion;, +            case PhraseSuggestion.TYPE:, +                suggestion = new PhraseSuggestion();, +                break;, +            protected Entry<O> reduce(List<? extends Entry<O>> toReduce) {, +                    leader.merge(entry);, +                for (O option: entries.keySet()) {, +                    leader.addOption(option);, +                }, +             * Merge any extra fields for this subtype., +             */, +            protected void merge(Entry<O> other) {, +            }, +, +            /**, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellChecker.java, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +, +    public Result getCorrections(TokenStream stream, final CandidateGenerator generator,, +            return Result.EMPTY;, +            double inputPhraseScore = scorer.score(candidates, candidateSets);, +            cutoffScore = inputPhraseScore * confidence;, +        Correction[] findBestCandiates = scorer.findBestCandiates(candidateSets, maxErrors, cutoffScore);, +        return new Result(findBestCandiates, cutoffScore);, +    public Result getCorrections(Analyzer analyzer, BytesRef query, CandidateGenerator generator,, +    public static class Result {, +        public static final Result EMPTY = new Result(Correction.EMPTY, Double.MIN_VALUE);, +        public final Correction[] corrections;, +        public final double cutoffScore;, +        public Result(Correction[] corrections, double cutoffScore) {, +            this.corrections = corrections;, +            this.cutoffScore = cutoffScore;, +        }, +    }, +++ b/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java, +import org.elasticsearch.search.suggest.phrase.NoisyChannelSpellChecker.Result;, +        final PhraseSuggestion response = new PhraseSuggestion(name, suggestion.getSize());, +            Result checkerResult = checker.getCorrections(stream, new MultiCandidateGeneratorWrapper(suggestion.getShardSize(),, +            PhraseSuggestion.Entry resultEntry = buildResultEntry(suggestion, spare, checkerResult.cutoffScore);, +            response.addTerm(resultEntry);, +, +            for (Correction correction : checkerResult.corrections) {, +        } else {, +            response.addTerm(buildResultEntry(suggestion, spare, Double.MIN_VALUE));]