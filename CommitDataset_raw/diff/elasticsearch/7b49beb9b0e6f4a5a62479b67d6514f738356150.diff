[+++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +==== `popular` mode for Suggesters, +, +The `popular` mode for Suggesters (`term` and `phrase`) now uses the doc frequency, +(instead of the sum of the doc frequency) of the input terms to compute the frequency, +threshold for candidate suggestions., +, +[float], +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +==== `popular` mode for Suggesters, +, +The `popular` mode for Suggesters (`term` and `phrase`) now uses the doc frequency, +(instead of the sum of the doc frequency) of the input terms to compute the frequency, +threshold for candidate suggestions., +, +[float], +++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +import org.apache.lucene.codecs.TermStats;, +    public abstract TermStats termStats(BytesRef term) throws IOException;, +        return createCandidate(term, termStats(term), 1.0, userInput);, +    public Candidate createCandidate(BytesRef term, TermStats termStats, double channelScore) throws IOException {, +        return createCandidate(term, termStats, channelScore, false);, +    public abstract Candidate createCandidate(BytesRef term, TermStats termStats,, +                                                double channelScore, boolean userInput) throws IOException;, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +==== `popular` mode for Suggesters, +, +The `popular` mode for Suggesters (`term` and `phrase`) now uses the doc frequency, +(instead of the sum of the doc frequency) of the input terms to compute the frequency, +threshold for candidate suggestions., +, +[float], +++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +import org.apache.lucene.codecs.TermStats;, +    public abstract TermStats termStats(BytesRef term) throws IOException;, +        return createCandidate(term, termStats(term), 1.0, userInput);, +    public Candidate createCandidate(BytesRef term, TermStats termStats, double channelScore) throws IOException {, +        return createCandidate(term, termStats, channelScore, false);, +    public abstract Candidate createCandidate(BytesRef term, TermStats termStats,, +                                                double channelScore, boolean userInput) throws IOException;, +++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +                findCandidates(candidates, path, ord + 1, numMissspellingsLeft, corrections, cutoffScore,, +                    pathScore + scorer.score(path, candidates, ord, gramSize));, +                    findCandidates(candidates, path, ord + 1, numMissspellingsLeft - 1, corrections, cutoffScore,, +                        pathScore + scorer.score(path, candidates, ord, gramSize));, +                findCandidates(candidates, path, ord + 1, 0, corrections, cutoffScore,, +                    pathScore + scorer.score(path, candidates, ord, gramSize));, +    private void updateTop(CandidateSet[] candidates, Candidate[] path,, +                                PriorityQueue<Correction> corrections, double cutoffScore, double score) throws IOException {, +++ b/buildSrc/src/main/resources/checkstyle_suppressions.xml, +++ b/docs/reference/migration/migrate_7_0/search.asciidoc, +==== `popular` mode for Suggesters, +, +The `popular` mode for Suggesters (`term` and `phrase`) now uses the doc frequency, +(instead of the sum of the doc frequency) of the input terms to compute the frequency, +threshold for candidate suggestions., +, +[float], +++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateGenerator.java, +import org.apache.lucene.codecs.TermStats;, +    public abstract TermStats termStats(BytesRef term) throws IOException;, +        return createCandidate(term, termStats(term), 1.0, userInput);, +    public Candidate createCandidate(BytesRef term, TermStats termStats, double channelScore) throws IOException {, +        return createCandidate(term, termStats, channelScore, false);, +    public abstract Candidate createCandidate(BytesRef term, TermStats termStats,, +                                                double channelScore, boolean userInput) throws IOException;, +++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/CandidateScorer.java, +                findCandidates(candidates, path, ord + 1, numMissspellingsLeft, corrections, cutoffScore,, +                    pathScore + scorer.score(path, candidates, ord, gramSize));, +                    findCandidates(candidates, path, ord + 1, numMissspellingsLeft - 1, corrections, cutoffScore,, +                        pathScore + scorer.score(path, candidates, ord, gramSize));, +                findCandidates(candidates, path, ord + 1, 0, corrections, cutoffScore,, +                    pathScore + scorer.score(path, candidates, ord, gramSize));, +    private void updateTop(CandidateSet[] candidates, Candidate[] path,, +                                PriorityQueue<Correction> corrections, double cutoffScore, double score) throws IOException {, +++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/DirectCandidateGenerator.java, +import org.apache.lucene.codecs.TermStats;, +import static java.lang.Math.min;, +    private final long sumTotalTermFreq;, +        this(spellchecker, field, suggestMode, reader, nonErrorLikelihood,, +                numCandidates, null, null, MultiFields.getTerms(reader, field));, +        this.sumTotalTermFreq =  terms.getSumTotalTermFreq() == -1 ? reader.maxDoc() : terms.getSumTotalTermFreq();, +        this.frequencyPlateau = thresholdFrequency >= 1.0f ? (int) thresholdFrequency: (int) (reader.maxDoc() * thresholdFrequency);, +        return termStats(term).docFreq > 0;, +    public TermStats termStats(BytesRef term) throws IOException {, +        return internalTermStats(term);, +    public TermStats internalTermStats(BytesRef term) throws IOException {, +            return new TermStats(termsEnum.docFreq(),, +                /**, +                 * We use the {@link TermsEnum#docFreq()} for fields that don't, +                 * record the {@link TermsEnum#totalTermFreq()}., +                 */, +                termsEnum.totalTermFreq() == -1 ? termsEnum.docFreq() : termsEnum.totalTermFreq());, +        return new TermStats(0, 0);, +        if (suggestMode != SuggestMode.SUGGEST_ALWAYS) {, +            /**]