[+++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +    private final long bulkSize;, +        this.bulkSize = bulkSize.bytes();, +        if (semaphore.tryAcquire(this.concurrentRequests, timeout, unit)) {, +            semaphore.release(this.concurrentRequests);, +            return true;, +        }, +        return false;, +    boolean isOpen() {, +        return closed == false;, +    }, +, +    protected void ensureOpen() {, +++ b/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java, +    private final long bulkSize;, +        this.bulkSize = bulkSize.bytes();, +        if (semaphore.tryAcquire(this.concurrentRequests, timeout, unit)) {, +            semaphore.release(this.concurrentRequests);, +            return true;, +        }, +        return false;, +    boolean isOpen() {, +        return closed == false;, +    }, +, +    protected void ensureOpen() {, +++ b/src/test/java/org/elasticsearch/action/bulk/BulkProcessorTests.java, +import com.carrotsearch.ant.tasks.junit4.dependencies.com.carrotsearch.randomizedtesting.generators.RandomPicks;, +    public void testBulkProcessorWaitOnClose() throws Exception {, +        BulkProcessorTestListener listener = new BulkProcessorTestListener();, +, +        int numDocs = randomIntBetween(10, 100);, +        BulkProcessor processor = BulkProcessor.builder(client(), listener).setName("foo"), +                //let's make sure that the bulk action limit trips, one single execution will index all the documents, +                .setConcurrentRequests(randomIntBetween(0, 1)).setBulkActions(numDocs), +                .setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(randomIntBetween(1, 10),, +                        (ByteSizeUnit)RandomPicks.randomFrom(getRandom(), ByteSizeUnit.values()))), +                .build();, +, +        MultiGetRequestBuilder multiGetRequestBuilder = indexDocs(client(), processor, numDocs);, +        assertThat(processor.isOpen(), is(true));, +        assertThat(processor.awaitClose(1, TimeUnit.MINUTES), is(true));, +        if (randomBoolean()) { // check if we can call it multiple times, +            if (randomBoolean()) {, +                assertThat(processor.awaitClose(1, TimeUnit.MINUTES), is(true));, +            } else {, +                processor.close();, +            }, +        }, +        assertThat(processor.isOpen(), is(false));, +, +        assertThat(listener.beforeCounts.get(), greaterThanOrEqualTo(1));, +        assertThat(listener.afterCounts.get(), greaterThanOrEqualTo(1));, +        assertThat(listener.bulkFailures.size(), equalTo(0));, +        assertResponseItems(listener.bulkItems, numDocs);, +        assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs);, +    }, +, +    @Test]