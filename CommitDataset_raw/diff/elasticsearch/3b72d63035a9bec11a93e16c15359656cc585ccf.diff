[+++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +    public static final int LIMIT_PORTS_COUNT = 1;, +, +                // we only limit to 1 addresses, makes no sense to ping 100 ports, +                for (int i = 0; (i < addresses.length && i < LIMIT_PORTS_COUNT); i++) {, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +    public static final int LIMIT_PORTS_COUNT = 1;, +, +                // we only limit to 1 addresses, makes no sense to ping 100 ports, +                for (int i = 0; (i < addresses.length && i < LIMIT_PORTS_COUNT); i++) {, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2UnicastHostsProvider.java, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +import org.elasticsearch.transport.TransportService;, +    private final TransportService transportService;, +    private final AmazonEC2 client;, +    @Inject public AwsEc2UnicastHostsProvider(Settings settings, TransportService transportService, AmazonEC2 client) {, +        this.transportService = transportService;, +                        try {, +                            TransportAddress[] addresses = transportService.addressesFromString(address);, +                            // we only limit to 1 addresses, makes no sense to ping 100 ports, +                            for (int i = 0; (i < addresses.length && i < UnicastZenPing.LIMIT_PORTS_COUNT); i++) {, +                                logger.trace("adding {}, address {}, transport_address {}", instance.getInstanceId(), address, addresses[i]);, +                                discoNodes.add(new DiscoveryNode("#cloud-" + instance.getInstanceId() + "-" + i, addresses[i]));, +                            }, +                        } catch (Exception e) {, +                            logger.warn("failed ot add {}, address {}", e, instance.getInstanceId(), address);, +                        }, +++ b/modules/elasticsearch/src/main/java/org/elasticsearch/discovery/zen/ping/unicast/UnicastZenPing.java, +    public static final int LIMIT_PORTS_COUNT = 1;, +, +                // we only limit to 1 addresses, makes no sense to ping 100 ports, +                for (int i = 0; (i < addresses.length && i < LIMIT_PORTS_COUNT); i++) {, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/discovery/ec2/AwsEc2UnicastHostsProvider.java, +import org.elasticsearch.common.transport.TransportAddress;, +import org.elasticsearch.discovery.zen.ping.unicast.UnicastZenPing;, +import org.elasticsearch.transport.TransportService;, +    private final TransportService transportService;, +    private final AmazonEC2 client;, +    @Inject public AwsEc2UnicastHostsProvider(Settings settings, TransportService transportService, AmazonEC2 client) {, +        this.transportService = transportService;, +                        try {, +                            TransportAddress[] addresses = transportService.addressesFromString(address);, +                            // we only limit to 1 addresses, makes no sense to ping 100 ports, +                            for (int i = 0; (i < addresses.length && i < UnicastZenPing.LIMIT_PORTS_COUNT); i++) {, +                                logger.trace("adding {}, address {}, transport_address {}", instance.getInstanceId(), address, addresses[i]);, +                                discoNodes.add(new DiscoveryNode("#cloud-" + instance.getInstanceId() + "-" + i, addresses[i]));, +                            }, +                        } catch (Exception e) {, +                            logger.warn("failed ot add {}, address {}", e, instance.getInstanceId(), address);, +                        }, +++ b/plugins/cloud/aws/src/main/java/org/elasticsearch/discovery/ec2/Ec2Discovery.java, +                unicastZenPing.addHostsProvider(new AwsEc2UnicastHostsProvider(settings, transportService, ec2Service.client()));]