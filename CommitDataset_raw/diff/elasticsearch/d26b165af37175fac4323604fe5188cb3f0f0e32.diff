[+++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +        List<String> types = new ArrayList<String>(context.mapperService().types().size());, +                types.add(documentMapper.type());, +        if (types.isEmpty()) {, +        } else if (types.size() == 1) {, +            return new TermFilter(new Term(names.indexName(), Uid.createUidAsBytes(types.get(0), bValue)));, +            // we use all non child types, cause we don't know if its exact or not..., +            List<BytesRef> typesValues = new ArrayList<BytesRef>(types.size());, +        // This will not be invoked if values is empty, so don't check for empty, +        if (values.size() == 1) {, +            return termFilter(values.get(0), context);, +        }, +, +        List<String> types = new ArrayList<String>(context.mapperService().types().size());, +        for (DocumentMapper documentMapper : context.mapperService()) {, +            if (documentMapper.parentFieldMapper() == null) {, +                types.add(documentMapper.type());, +            }, +        }, +, +            if (Uid.hasDelimiter(bValue)) {, +                bValues.add(bValue);, +            } else {, +                // we use all non child types, cause we don't know if its exact or not..., +                for (String type : types) {, +        }, +++ b/src/main/java/org/elasticsearch/index/mapper/internal/ParentFieldMapper.java, +        List<String> types = new ArrayList<String>(context.mapperService().types().size());, +                types.add(documentMapper.type());, +        if (types.isEmpty()) {, +        } else if (types.size() == 1) {, +            return new TermFilter(new Term(names.indexName(), Uid.createUidAsBytes(types.get(0), bValue)));, +            // we use all non child types, cause we don't know if its exact or not..., +            List<BytesRef> typesValues = new ArrayList<BytesRef>(types.size());, +        // This will not be invoked if values is empty, so don't check for empty, +        if (values.size() == 1) {, +            return termFilter(values.get(0), context);, +        }, +, +        List<String> types = new ArrayList<String>(context.mapperService().types().size());, +        for (DocumentMapper documentMapper : context.mapperService()) {, +            if (documentMapper.parentFieldMapper() == null) {, +                types.add(documentMapper.type());, +            }, +        }, +, +            if (Uid.hasDelimiter(bValue)) {, +                bValues.add(bValue);, +            } else {, +                // we use all non child types, cause we don't know if its exact or not..., +                for (String type : types) {, +        }, +++ b/src/test/java/org/elasticsearch/test/integration/search/child/SimpleChildQuerySearchTests.java, +        client().admin().indices().preparePutMapping("test").setType("child").setSource(jsonBuilder().startObject().startObject("child"), +        client().admin().indices().preparePutMapping("test").setType("child2").setSource(jsonBuilder().startObject().startObject("child"), +                .startObject("_parent").field("type", "parent2").endObject(), +                .endObject().endObject()).execute().actionGet();, +        // test term filter, +        client().prepareIndex("test", "some_type", "1").setSource("field", "value").execute().actionGet();, +, +        // test terms filter, +        client().prepareIndex("test", "child2", "c1").setSource("c_field", "value").setParent("p1"), +                .execute().actionGet();, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termsFilter("_parent", "p1"))), +                .execute().actionGet();, +        assertHitCount(response, 1l);, +, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termsFilter("_parent", "parent#p1"))), +                .execute().actionGet();, +        assertHitCount(response, 1l);, +, +        refresh();, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termsFilter("_parent", "p1"))), +                .execute().actionGet();, +        assertHitCount(response, 2l);, +, +        refresh();, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termsFilter("_parent", "p1", "p1"))), +                .execute().actionGet();, +        assertHitCount(response, 2l);, +, +        response = client().prepareSearch("test").setQuery(filteredQuery(matchAllQuery(), termsFilter("_parent", "parent#p1", "parent2#p1"))), +                .execute().actionGet();, +        assertHitCount(response, 2l);]