[+++ b/modules/ingest-common/src/test/resources/rest-api-spec/test/ingest/90_simulate.yml, +- length: { docs: 1 }, +- length: { docs.0.processor_results: 1 }, +- match: { docs.0.processor_results.0.error.reason: "java.lang.IllegalArgumentException: java.lang.IllegalStateException: Cycle detected for pipeline: outer" }, +- match: { docs.0.processor_results.0.error.caused_by.caused_by.reason: "Cycle detected for pipeline: outer" }, +++ b/modules/ingest-common/src/test/resources/rest-api-spec/test/ingest/90_simulate.yml, +- length: { docs: 1 }, +- length: { docs.0.processor_results: 1 }, +- match: { docs.0.processor_results.0.error.reason: "java.lang.IllegalArgumentException: java.lang.IllegalStateException: Cycle detected for pipeline: outer" }, +- match: { docs.0.processor_results.0.error.caused_by.caused_by.reason: "Cycle detected for pipeline: outer" }, +++ b/server/src/main/java/org/elasticsearch/action/ingest/SimulateExecutionService.java, +import org.elasticsearch.ingest.CompoundProcessor;, +            CompoundProcessor verbosePipelineProcessor = decorate(pipeline.getCompoundProcessor(), processorResultList);, +++ b/modules/ingest-common/src/test/resources/rest-api-spec/test/ingest/90_simulate.yml, +- length: { docs: 1 }, +- length: { docs.0.processor_results: 1 }, +- match: { docs.0.processor_results.0.error.reason: "java.lang.IllegalArgumentException: java.lang.IllegalStateException: Cycle detected for pipeline: outer" }, +- match: { docs.0.processor_results.0.error.caused_by.caused_by.reason: "Cycle detected for pipeline: outer" }, +++ b/server/src/main/java/org/elasticsearch/action/ingest/SimulateExecutionService.java, +import org.elasticsearch.ingest.CompoundProcessor;, +            CompoundProcessor verbosePipelineProcessor = decorate(pipeline.getCompoundProcessor(), processorResultList);, +++ b/server/src/main/java/org/elasticsearch/ingest/ConditionalProcessor.java, +        if (evaluate(ingestDocument)) {, +    boolean evaluate(IngestDocument ingestDocument) {, +        IngestConditionalScript script =, +            scriptService.compile(condition, IngestConditionalScript.CONTEXT).newInstance(condition.getParams());, +        return script.execute(new UnmodifiableIngestData(ingestDocument.getSourceAndMetadata()));, +    }, +, +++ b/modules/ingest-common/src/test/resources/rest-api-spec/test/ingest/90_simulate.yml, +- length: { docs: 1 }, +- length: { docs.0.processor_results: 1 }, +- match: { docs.0.processor_results.0.error.reason: "java.lang.IllegalArgumentException: java.lang.IllegalStateException: Cycle detected for pipeline: outer" }, +- match: { docs.0.processor_results.0.error.caused_by.caused_by.reason: "Cycle detected for pipeline: outer" }, +++ b/server/src/main/java/org/elasticsearch/action/ingest/SimulateExecutionService.java, +import org.elasticsearch.ingest.CompoundProcessor;, +            CompoundProcessor verbosePipelineProcessor = decorate(pipeline.getCompoundProcessor(), processorResultList);, +++ b/server/src/main/java/org/elasticsearch/ingest/ConditionalProcessor.java, +        if (evaluate(ingestDocument)) {, +    boolean evaluate(IngestDocument ingestDocument) {, +        IngestConditionalScript script =, +            scriptService.compile(condition, IngestConditionalScript.CONTEXT).newInstance(condition.getParams());, +        return script.execute(new UnmodifiableIngestData(ingestDocument.getSourceAndMetadata()));, +    }, +, +++ b/server/src/main/java/org/elasticsearch/ingest/TrackingResultProcessor.java, +import org.elasticsearch.ElasticsearchException;, +        Processor processor = actualProcessor;, +            if (processor instanceof ConditionalProcessor) {, +                ConditionalProcessor conditionalProcessor = (ConditionalProcessor) processor;, +                if (conditionalProcessor.evaluate(ingestDocument) == false) {, +                    return ingestDocument;, +                }, +                if (conditionalProcessor.getProcessor() instanceof PipelineProcessor) {, +                    processor = conditionalProcessor.getProcessor();, +                }, +            }, +            if (processor instanceof PipelineProcessor) {, +                PipelineProcessor pipelineProcessor = ((PipelineProcessor) processor);, +                Pipeline pipeline = pipelineProcessor.getPipeline();, +                //runtime check for cycles against a copy of the document. This is needed to properly handle conditionals around pipelines, +                try {, +                    IngestDocument ingestDocumentCopy = new IngestDocument(ingestDocument);, +                    ingestDocumentCopy.executePipeline(pipelineProcessor.getPipeline());, +                } catch (ElasticsearchException elasticsearchException) {, +                    if (elasticsearchException.getCause().getCause() instanceof IllegalStateException) {, +                        throw elasticsearchException;, +                    }, +                    //else do nothing, let the tracking processors throw the exception while recording the path up to the failure, +                } catch (Exception e) {, +                    // do nothing, let the tracking processors throw the exception while recording the path up to the failure, +                }, +                //now that we know that there are no cycles between pipelines, decorate the processors for this pipeline and execute it, +                CompoundProcessor verbosePipelineProcessor = decorate(pipeline.getCompoundProcessor(), processorResultList);, +                Pipeline verbosePipeline = new Pipeline(pipeline.getId(), pipeline.getDescription(), pipeline.getVersion(),, +                    verbosePipelineProcessor);, +                ingestDocument.executePipeline(verbosePipeline);, +            } else {, +                processor.execute(ingestDocument);, +                processorResultList.add(new SimulateProcessorResult(processor.getTag(), new IngestDocument(ingestDocument)));, +            }, +                processorResultList.add(new SimulateProcessorResult(processor.getTag(), new IngestDocument(ingestDocument), e));, +                processorResultList.add(new SimulateProcessorResult(processor.getTag(), e));, +    public static CompoundProcessor decorate(CompoundProcessor compoundProcessor, List<SimulateProcessorResult> processorResultList) {, +            if (processor instanceof CompoundProcessor) {, +                processors.add(decorate((CompoundProcessor) processor, processorResultList));, +            if (processor instanceof CompoundProcessor) {, +                onFailureProcessors.add(decorate((CompoundProcessor) processor, processorResultList));, +++ b/modules/ingest-common/src/test/resources/rest-api-spec/test/ingest/90_simulate.yml, +- length: { docs: 1 }, +- length: { docs.0.processor_results: 1 }, +- match: { docs.0.processor_results.0.error.reason: "java.lang.IllegalArgumentException: java.lang.IllegalStateException: Cycle detected for pipeline: outer" }, +- match: { docs.0.processor_results.0.error.caused_by.caused_by.reason: "Cycle detected for pipeline: outer" }, +++ b/server/src/main/java/org/elasticsearch/action/ingest/SimulateExecutionService.java, +import org.elasticsearch.ingest.CompoundProcessor;, +            CompoundProcessor verbosePipelineProcessor = decorate(pipeline.getCompoundProcessor(), processorResultList);, +++ b/server/src/main/java/org/elasticsearch/ingest/ConditionalProcessor.java, +        if (evaluate(ingestDocument)) {, +    boolean evaluate(IngestDocument ingestDocument) {, +        IngestConditionalScript script =]