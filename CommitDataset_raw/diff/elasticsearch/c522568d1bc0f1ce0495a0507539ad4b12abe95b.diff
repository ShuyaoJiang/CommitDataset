[+++ b/core/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +                if (fieldName.contains(".")) {, +                    throw new MapperParsingException("Field name [" + fieldName + "] cannot contain '.'");, +                }, +                    objBuilder.add(typeParser.parse(fieldName, propNode, parserContext));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +                if (fieldName.contains(".")) {, +                    throw new MapperParsingException("Field name [" + fieldName + "] cannot contain '.'");, +                }, +                    objBuilder.add(typeParser.parse(fieldName, propNode, parserContext));, +++ b/core/src/test/java/org/elasticsearch/index/mapper/simple/SimpleMapperTests.java, +/**, + *, + */, +        try {, +            docMapper.parse("test", "person", "1", json).rootDoc();, +            fail("this point is never reached");, +        } catch (MapperParsingException e) {, +    }, +    public void testHazardousFieldNames() throws Exception {, +        try {, +            mapperParser.parse("type", new CompressedXContent(mapping));, +            fail("Mapping parse should have failed");, +        } catch (MapperParsingException e) {, +            assertTrue(e.getMessage(), e.getMessage().contains("cannot contain '.'"));, +++ b/core/src/main/java/org/elasticsearch/index/mapper/object/ObjectMapper.java, +                if (fieldName.contains(".")) {, +                    throw new MapperParsingException("Field name [" + fieldName + "] cannot contain '.'");, +                }, +                    objBuilder.add(typeParser.parse(fieldName, propNode, parserContext));, +++ b/core/src/test/java/org/elasticsearch/index/mapper/simple/SimpleMapperTests.java, +/**, + *, + */, +        try {, +            docMapper.parse("test", "person", "1", json).rootDoc();, +            fail("this point is never reached");, +        } catch (MapperParsingException e) {, +    }, +    public void testHazardousFieldNames() throws Exception {, +        try {, +            mapperParser.parse("type", new CompressedXContent(mapping));, +            fail("Mapping parse should have failed");, +        } catch (MapperParsingException e) {, +            assertTrue(e.getMessage(), e.getMessage().contains("cannot contain '.'"));, +++ b/docs/reference/aggregations/pipeline/percentiles-bucket-aggregation.asciidoc, +                "buckets_path": "sales_per_month>sales", <1>, +<1> `buckets_path` instructs this percentiles_bucket aggregation that we want to calculate percentiles for]