[+++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +import java.util.Collection;, +import java.util.Collections;, +            Explanation factorExplanation;, +            if (filterExplanations.size() > 0) {, +                factorExplanation = Explanation.match(, +, +            } else {, +                // it is a little weird to add a match although no function matches but that is the way function_score behaves right now, +                factorExplanation = Explanation.match(1.0f,, +                    "No function matched", Collections.emptyList());, +            expl = combineFunction.explain(expl, factorExplanation, maxBoost);, +++ b/core/src/main/java/org/elasticsearch/common/lucene/search/function/FiltersFunctionScoreQuery.java, +import java.util.Collection;, +import java.util.Collections;, +            Explanation factorExplanation;, +            if (filterExplanations.size() > 0) {, +                factorExplanation = Explanation.match(, +, +            } else {, +                // it is a little weird to add a match although no function matches but that is the way function_score behaves right now, +                factorExplanation = Explanation.match(1.0f,, +                    "No function matched", Collections.emptyList());, +            expl = combineFunction.explain(expl, factorExplanation, maxBoost);, +++ b/core/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreTests.java, +        assertEquals(queryExpl.getDescription(), ffsqExpl.getDetails()[0].getDescription());, +    public void testExplanationAndScoreEqualsEvenIfNoFunctionMatches() throws IOException {, +        IndexSearcher localSearcher = newSearcher(reader);, +        ScoreMode scoreMode = randomFrom(new, +            ScoreMode[]{ScoreMode.SUM, ScoreMode.AVG, ScoreMode.FIRST, ScoreMode.MIN, ScoreMode.MAX, ScoreMode.MULTIPLY});, +        CombineFunction combineFunction = randomFrom(new, +            CombineFunction[]{CombineFunction.SUM, CombineFunction.AVG, CombineFunction.MIN, CombineFunction.MAX,, +            CombineFunction.MULTIPLY, CombineFunction.REPLACE});, +, +        // check for document that has no macthing function, +        FiltersFunctionScoreQuery query = new FiltersFunctionScoreQuery(new TermQuery(new Term(FIELD, "out")), scoreMode,, +            new FilterFunction[]{new FilterFunction(new TermQuery(new Term("_uid", "2")), new WeightFactorFunction(10))},, +            Float.MAX_VALUE, Float.NEGATIVE_INFINITY, combineFunction);, +        TopDocs searchResult = localSearcher.search(query, 1);, +        Explanation explanation = localSearcher.explain(query, searchResult.scoreDocs[0].doc);, +        assertThat(searchResult.scoreDocs[0].score, equalTo(explanation.getValue()));, +, +        // check for document that has a matching function, +        query = new FiltersFunctionScoreQuery(new TermQuery(new Term(FIELD, "out")), scoreMode,, +            new FilterFunction[]{new FilterFunction(new TermQuery(new Term("_uid", "1")), new WeightFactorFunction(10))},, +            Float.MAX_VALUE, Float.NEGATIVE_INFINITY, combineFunction);, +        searchResult = localSearcher.search(query, 1);, +        explanation = localSearcher.explain(query, searchResult.scoreDocs[0].doc);, +        assertThat(searchResult.scoreDocs[0].score, equalTo(explanation.getValue()));, +    }, +]