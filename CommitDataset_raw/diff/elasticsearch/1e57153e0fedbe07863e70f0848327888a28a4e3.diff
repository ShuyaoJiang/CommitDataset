[+++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +import static org.elasticsearch.license.plugin.core.LicensesService.LicensesUpdateResponse;, +, +        licensesService.registerLicense(request, new ActionListener<LicensesUpdateResponse>() {, +            @Override, +            public void onResponse(LicensesUpdateResponse licensesUpdateResponse) {, +                listener.onResponse(new PutLicenseResponse(licensesUpdateResponse.isAcknowledged(), licensesUpdateResponse.status(),, +                        licensesUpdateResponse.acknowledgementHeader(), licensesUpdateResponse.acknowledgeMessages()));, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                listener.onFailure(e);, +            }, +        });, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +import static org.elasticsearch.license.plugin.core.LicensesService.LicensesUpdateResponse;, +, +        licensesService.registerLicense(request, new ActionListener<LicensesUpdateResponse>() {, +            @Override, +            public void onResponse(LicensesUpdateResponse licensesUpdateResponse) {, +                listener.onResponse(new PutLicenseResponse(licensesUpdateResponse.isAcknowledged(), licensesUpdateResponse.status(),, +                        licensesUpdateResponse.acknowledgementHeader(), licensesUpdateResponse.acknowledgeMessages()));, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                listener.onFailure(e);, +            }, +        });, +++ /dev/null, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +import static org.elasticsearch.license.plugin.core.LicensesService.LicensesUpdateResponse;, +, +        licensesService.registerLicense(request, new ActionListener<LicensesUpdateResponse>() {, +            @Override, +            public void onResponse(LicensesUpdateResponse licensesUpdateResponse) {, +                listener.onResponse(new PutLicenseResponse(licensesUpdateResponse.isAcknowledged(), licensesUpdateResponse.status(),, +                        licensesUpdateResponse.acknowledgementHeader(), licensesUpdateResponse.acknowledgeMessages()));, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                listener.onFailure(e);, +            }, +        });, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +import static org.elasticsearch.license.plugin.core.LicensesService.LicensesUpdateResponse;, +, +        licensesService.registerLicense(request, new ActionListener<LicensesUpdateResponse>() {, +            @Override, +            public void onResponse(LicensesUpdateResponse licensesUpdateResponse) {, +                listener.onResponse(new PutLicenseResponse(licensesUpdateResponse.isAcknowledged(), licensesUpdateResponse.status(),, +                        licensesUpdateResponse.acknowledgementHeader(), licensesUpdateResponse.acknowledgeMessages()));, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                listener.onFailure(e);, +            }, +        });, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesManagerService.java, +     * @return the id of registered licensees currently in <code>state</code>, +    List<String> licenseesWithState(LicenseState state);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/PutLicenseResponse.java, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/action/put/TransportPutLicenseAction.java, +import static org.elasticsearch.license.plugin.core.LicensesService.LicensesUpdateResponse;, +, +        licensesService.registerLicense(request, new ActionListener<LicensesUpdateResponse>() {, +            @Override, +            public void onResponse(LicensesUpdateResponse licensesUpdateResponse) {, +                listener.onResponse(new PutLicenseResponse(licensesUpdateResponse.isAcknowledged(), licensesUpdateResponse.status(),, +                        licensesUpdateResponse.acknowledgementHeader(), licensesUpdateResponse.acknowledgeMessages()));, +            }, +, +            @Override, +            public void onFailure(Throwable e) {, +                listener.onFailure(e);, +            }, +        });, +++ /dev/null, +++ /dev/null, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesManagerService.java, +     * @return the id of registered licensees currently in <code>state</code>, +    List<String> licenseesWithState(LicenseState state);, +++ b/elasticsearch/x-pack/license-plugin/src/main/java/org/elasticsearch/license/plugin/core/LicensesService.java, +import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;, +import org.elasticsearch.common.util.concurrent.FutureUtils;, +import java.util.Queue;, +import java.util.concurrent.ConcurrentLinkedQueue;, +import java.util.concurrent.ScheduledFuture;]