[+++ b/docs/reference/ingest/ingest-node.asciidoc, +[[grok-watchdog]], +==== Grok watchdog, +, +Grok expressions that take too long to execute are interrupted and, +the grok processor then fails with an exception. The grok, +processor has a watchdog thread that determines when evaluation of, +a grok expression takes too long and is controlled by the following, +settings:, +, +[[grok-watchdog-options]], +.Grok watchdog settings, +[options="header"], +|======, +| Name                                      | Default | Description, +| `ingest.grok.watchdog.interval`           | 1s      | How often to check whether there are grok evaluations that take longer than the maximum allowed execution time., +| `ingest.grok.watchdog.max_execution_time` | 1s      | The maximum allowed execution of a grok expression evaluation., +|======, +, +++ b/docs/reference/ingest/ingest-node.asciidoc, +[[grok-watchdog]], +==== Grok watchdog, +, +Grok expressions that take too long to execute are interrupted and, +the grok processor then fails with an exception. The grok, +processor has a watchdog thread that determines when evaluation of, +a grok expression takes too long and is controlled by the following, +settings:, +, +[[grok-watchdog-options]], +.Grok watchdog settings, +[options="header"], +|======, +| Name                                      | Default | Description, +| `ingest.grok.watchdog.interval`           | 1s      | How often to check whether there are grok evaluations that take longer than the maximum allowed execution time., +| `ingest.grok.watchdog.max_execution_time` | 1s      | The maximum allowed execution of a grok expression evaluation., +|======, +, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/Grok.java, +    private final ThreadWatchdog threadWatchdog;, +        this(patternBank, grokPattern, true, ThreadWatchdog.noop());, +    public Grok(Map<String, String> patternBank, String grokPattern, ThreadWatchdog threadWatchdog) {, +        this(patternBank, grokPattern, true, threadWatchdog);, +    }, +    , +        this(patternBank, grokPattern, namedCaptures, ThreadWatchdog.noop());, +    }, +, +    private Grok(Map<String, String> patternBank, String grokPattern, boolean namedCaptures, ThreadWatchdog threadWatchdog) {, +        this.threadWatchdog = threadWatchdog;, +        int result;, +        try {, +            threadWatchdog.register();, +            result = matcher.search(0, grokPatternBytes.length, Option.NONE);, +        } finally {, +            threadWatchdog.unregister();, +        }, +        int result;, +        try {, +            threadWatchdog.register();, +            result = matcher.search(0, text.length(), Option.DEFAULT);, +        } finally {, +            threadWatchdog.unregister();, +        }, +        int result;, +        try {, +            threadWatchdog.register();, +            result = matcher.search(0, textAsBytes.length, Option.DEFAULT);, +        } finally {, +            threadWatchdog.unregister();, +        }, +        if (result == Matcher.INTERRUPTED) {, +            throw new RuntimeException("grok pattern matching was interrupted after [" +, +                threadWatchdog.maxExecutionTimeInMillis() + "] ms");, +        } else if (result == Matcher.FAILED) {, +            // TODO: I think we should throw an error here?, +            return null;, +        } else if (compiledExpression.numberOfNames() > 0) {, +            }, +++ b/docs/reference/ingest/ingest-node.asciidoc, +[[grok-watchdog]], +==== Grok watchdog, +, +Grok expressions that take too long to execute are interrupted and, +the grok processor then fails with an exception. The grok, +processor has a watchdog thread that determines when evaluation of, +a grok expression takes too long and is controlled by the following, +settings:, +, +[[grok-watchdog-options]], +.Grok watchdog settings, +[options="header"], +|======, +| Name                                      | Default | Description, +| `ingest.grok.watchdog.interval`           | 1s      | How often to check whether there are grok evaluations that take longer than the maximum allowed execution time., +| `ingest.grok.watchdog.max_execution_time` | 1s      | The maximum allowed execution of a grok expression evaluation., +|======, +, +++ b/libs/grok/src/main/java/org/elasticsearch/grok/Grok.java, +    private final ThreadWatchdog threadWatchdog;]